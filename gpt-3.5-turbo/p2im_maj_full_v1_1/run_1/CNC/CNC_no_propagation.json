{
    "functions": {
        "FUN_08000188": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "initialize_flag"
                },
                "<param_1>": {
                    "1": "status"
                },
                "DAT_2000044c": {
                    "1": "data_flag",
                    "2": "flag_variable",
                    "9": "flag"
                },
                "FUN_08000188": {
                    "1": "initialize_flag_if_zero",
                    "2": "initialize_data",
                    "21": "initialize_flag"
                },
                "char": {
                    "1": "flag"
                },
                "param_1": {
                    "1": "value",
                    "13": "input_value",
                    "2": "input_data",
                    "3": "input_parameter",
                    "9": "input"
                }
            },
            "called": [
                "FUN_0800b5b0"
            ],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000194) */\n\nundefined4 initialize_flag_08000188(undefined4 input_value)\n\n{\n  if ((flag)DAT_2000044c == '\\0') {\n    DAT_2000044c._0_1_ = '\\x01';\n  }\n  return input_value;\n}\n\n",
            "current_name": "initialize_flag_08000188",
            "entrypoint": "0x08000188",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000188": "initialize_flag_08000188",
                "char": "flag",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080001ac": {
            "additional_data": {
                "FUN_080001ac": {
                    "1": "concatenate_uint64",
                    "2": "concatenate_param",
                    "3": "concatenate_and_return",
                    "4": "concatenate_integers",
                    "7": "concatenate_values"
                },
                "param_1": {
                    "1": "input1",
                    "2": "first_integer",
                    "3": "integer1",
                    "4": "first_param",
                    "6": "first_parameter"
                },
                "param_2": {
                    "1": "input_2",
                    "2": "value_2",
                    "3": "integer2",
                    "4": "second_param",
                    "6": "value2"
                }
            },
            "called": [
                "FUN_0800b5b0"
            ],
            "calling": [
                "FUN_0800b3e8"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b2) */\n\nundefined8 concatenate_values_080001ac(undefined4 first_parameter,undefined4 second_parameter)\n\n{\n  return CONCAT44(second_parameter,first_parameter);\n}\n\n",
            "current_name": "concatenate_values_080001ac",
            "entrypoint": "0x080001ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080001ac": "concatenate_values_080001ac",
                "param_1": "first_parameter",
                "param_2": "second_parameter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080001c8": {
            "called": [],
            "calling": [
                "FUN_08000220"
            ],
            "code": "\nvoid FUNC_080001c8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080001c8",
            "entrypoint": "0x080001c8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080001c8": "FUNC_080001c8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080001d4": {
            "called": [],
            "calling": [
                "FUN_08000210"
            ],
            "code": "\nvoid FUNC_080001d4(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080001d4",
            "entrypoint": "0x080001d4",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080001d4": "FUNC_080001d4"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080001e0": {
            "called": [],
            "calling": [
                "FUN_08000220"
            ],
            "code": "\nvoid FUNC_080001e0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080001e0",
            "entrypoint": "0x080001e0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080001e0": "FUNC_080001e0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080001ec": {
            "called": [],
            "calling": [
                "FUN_08000210"
            ],
            "code": "\nvoid FUNC_080001ec(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080001ec",
            "entrypoint": "0x080001ec",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080001ec": "FUNC_080001ec"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080001f8": {
            "additional_data": {
                "FUN_080001f8": {
                    "1": "initialize_and_call_subfunction",
                    "30": "initialize_data"
                },
                "FUN_08000210": {
                    "1": "perform_operation",
                    "12": "perform_initialization",
                    "2": "update_data",
                    "6": "process_data"
                }
            },
            "called": [
                "FUN_08000210"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid initialize_data_080001f8(void)\n\n{\n  DAT_20000468 = 0;\n  FUN_08000210();\n  return;\n}\n\n",
            "current_name": "initialize_data_080001f8",
            "entrypoint": "0x080001f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080001f8": "initialize_data_080001f8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000210": {
            "additional_data": {
                "FUNC_080001d4": {
                    "1": "execute_first_operation",
                    "2": "perform_task1",
                    "3": "perform_first_task"
                },
                "FUNC_080001ec": {
                    "1": "configure_settings",
                    "2": "perform_task2",
                    "3": "perform_task_2"
                },
                "FUN_08000210": {
                    "1": "execute_initial_tasks",
                    "11": "execute_initialization",
                    "2": "execute_functions",
                    "4": "initialize_components"
                }
            },
            "called": [
                "FUN_080001d4",
                "FUN_080001ec"
            ],
            "calling": [
                "FUN_08000220",
                "FUN_080025e8",
                "FUN_080001f8"
            ],
            "code": "\nvoid execute_initialization_08000210(void)\n\n{\n  FUNC_080001ec();\n  FUNC_080001d4();\n  return;\n}\n\n",
            "current_name": "execute_initialization_08000210",
            "entrypoint": "0x08000210",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000210": "execute_initialization_08000210"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000220": {
            "additional_data": {
                "'\\x01'": {
                    "1": "value1"
                },
                "'\\x02'": {
                    "1": "value2"
                },
                "DAT_20000468": {
                    "1": "current_parameter"
                },
                "FUNC_080001c8": {
                    "1": "handle_input_type_1",
                    "2": "handle_case2",
                    "3": "perform_action_one"
                },
                "FUNC_080001e0": {
                    "1": "action2",
                    "2": "handle_case2",
                    "3": "perform_action2"
                },
                "FUN_08000210": {
                    "1": "handle_option_default",
                    "2": "perform_action_default",
                    "3": "handle_default_case"
                },
                "FUN_08000220": {
                    "1": "update_dat_parameter",
                    "2": "process_param",
                    "3": "update_parameter",
                    "5": "update_state",
                    "6": "update_data"
                },
                "FUN_08002fd4": {
                    "1": "execute_initial_action",
                    "2": "execute_function"
                },
                "param_1": {
                    "1": "param",
                    "2": "input_param",
                    "3": "input",
                    "4": "new_state",
                    "8": "new_param"
                }
            },
            "called": [
                "FUN_080001e0",
                "FUN_08000210",
                "FUN_080001c8",
                "FUN_08002fd4"
            ],
            "calling": [
                "FUN_080005b4"
            ],
            "code": "\nvoid update_data_08000220(char new_param)\n\n{\n  if (new_param != DAT_20000468) {\n    FUN_08002fd4();\n    if (new_param == '\\x01') {\n      FUNC_080001c8();\n      DAT_20000468 = new_param;\n    }\n    else if (new_param == '\\x02') {\n      FUNC_080001e0();\n      DAT_20000468 = new_param;\n    }\n    else {\n      FUN_08000210();\n      DAT_20000468 = new_param;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "update_data_08000220",
            "entrypoint": "0x08000220",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000220": "update_data_08000220",
                "param_1": "new_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000268": {
            "additional_data": {
                "DAT_e000e018": {
                    "1": "offset_value"
                },
                "FUN_08000268": {
                    "1": "calculate_modified_value",
                    "15": "calculate_adjusted_value",
                    "2": "calculate_elapsed_time",
                    "3": "calculate_adjusted_time",
                    "4": "calculate_time_difference"
                },
                "FUN_08005a84": {
                    "1": "get_value_from_sub_function",
                    "4": "get_value",
                    "5": "get_initial_value"
                },
                "_DAT_e000e018": {
                    "1": "device_temperature",
                    "2": "data",
                    "3": "data_value"
                },
                "iVar1": {
                    "1": "current_value",
                    "12": "result",
                    "2": "initial_value",
                    "3": "value"
                }
            },
            "called": [
                "FUN_08005a84"
            ],
            "calling": [
                "FUN_080002b6"
            ],
            "code": "\n\n\nint calculate_adjusted_value_08000268(void)\n\n{\n  int result;\n  \n  result = FUN_08005a84();\n  return (result + 1) * 1000 - _DAT_e000e018 / 0xa8;\n}\n\n",
            "current_name": "calculate_adjusted_value_08000268",
            "entrypoint": "0x08000268",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000268": "calculate_adjusted_value_08000268",
                "iVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080002a0": {
            "additional_data": {
                "FUN_080002a0": {
                    "1": "execute_initial_process",
                    "11": "execute_function",
                    "2": "execute_process",
                    "3": "execute_initialization",
                    "4": "initialize"
                },
                "FUN_08005a98": {
                    "1": "perform_sub_process",
                    "2": "perform_action",
                    "3": "reverse_integer",
                    "4": "perform_operation",
                    "6": "process_data"
                },
                "param_1": {
                    "1": "param",
                    "2": "process_id",
                    "3": "input_value",
                    "4": "input_parameter",
                    "6": "data"
                }
            },
            "called": [
                "FUN_08005a98"
            ],
            "calling": [
                "FUN_08002408"
            ],
            "code": "\nvoid execute_function_080002a0(undefined4 data)\n\n{\n  FUN_08005a98(data);\n  return;\n}\n\n",
            "current_name": "execute_function_080002a0",
            "entrypoint": "0x080002a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080002a0": "execute_function_080002a0",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080002b6": {
            "additional_data": {
                "FUN_080002b6": {
                    "1": "find_greater_value",
                    "2": "check_param_and_result",
                    "3": "check_param",
                    "8": "find_matching_value"
                },
                "bVar3": {
                    "1": "comparison_result",
                    "4": "is_greater_or_equal",
                    "8": "is_match",
                    "9": "is_greater"
                },
                "lVar4": {
                    "1": "result_of_subfunction",
                    "2": "current_value",
                    "4": "result",
                    "5": "current_time"
                },
                "param_1": {
                    "1": "value",
                    "16": "input_value",
                    "2": "input_param",
                    "3": "param",
                    "6": "input"
                },
                "uVar1": {
                    "1": "extracted_value1",
                    "2": "upper_value",
                    "9": "result1"
                },
                "uVar2": {
                    "1": "shifted_current_value",
                    "3": "target_value",
                    "9": "result2"
                },
                "uVar5": {
                    "1": "temp_value3",
                    "2": "next_value",
                    "4": "temp_value",
                    "6": "random_value"
                }
            },
            "called": [
                "FUN_08000268"
            ],
            "calling": [],
            "code": "\nvoid find_matching_value_080002b6(uint input_value)\n\n{\n  uint result1;\n  uint result2;\n  bool is_greater;\n  longlong random_value;\n  undefined8 random_value;\n  \n  random_value = FUN_08000268();\n  result2 = (uint)(random_value + (ulonglong)input_value >> 0x20);\n  do {\n    random_value = FUN_08000268();\n    result1 = (uint)((ulonglong)random_value >> 0x20);\n    is_greater = result2 <= result1;\n    if (result1 == result2) {\n      is_greater = (uint)(random_value + (ulonglong)input_value) <= (uint)random_value;\n    }\n  } while (!is_greater);\n  return;\n}\n\n",
            "current_name": "find_matching_value_080002b6",
            "entrypoint": "0x080002b6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080002b6": "find_matching_value_080002b6",
                "bVar3": "is_greater",
                "lVar4": "random_value",
                "param_1": "input_value",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar5": "random_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080002f0": {
            "additional_data": {
                "DAT_2000046c": {
                    "1": "flag"
                },
                "FUN_080002f0": {
                    "1": "set_data_values",
                    "30": "initialize_data"
                },
                "FUN_0800b430": {
                    "1": "fill_memory",
                    "5": "set_memory"
                },
                "dataPointer": {
                    "1": "data"
                },
                "param_1": {
                    "1": "buffer",
                    "15": "data_pointer",
                    "2": "data_ptr",
                    "3": "data_array",
                    "5": "memory_pointer"
                },
                "param_2": {
                    "1": "pattern",
                    "2": "fill_value",
                    "25": "value"
                },
                "param_3": {
                    "1": "array_size",
                    "20": "size",
                    "8": "length"
                },
                "value": {
                    "1": "initial_value"
                }
            },
            "called": [
                "FUN_0800b430"
            ],
            "calling": [
                "FUN_08000374",
                "FUN_08000340",
                "FUN_080003ec",
                "FUN_08000310"
            ],
            "code": "\nvoid initialize_data_080002f0(void)\n\n{\n  FUN_0800b430(&DAT_20000470,0xff,4);\n  DAT_2000046c = 1;\n  return;\n}\n\n",
            "current_name": "initialize_data_080002f0",
            "entrypoint": "0x080002f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080002f0": "initialize_data_080002f0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000310": {
            "additional_data": {
                "&DAT_2000046c": {
                    "1": "is_initialized"
                },
                "&DAT_20000470": {
                    "1": "data_entries",
                    "2": "data",
                    "7": "data_array"
                },
                "&[param_1 & 0x3ff]": {
                    "1": "index"
                },
                "0x3ff": {
                    "1": "entry_mask"
                },
                "DAT_2000046c": {
                    "1": "data_array_initialized",
                    "2": "table_initialized",
                    "3": "array_initialized",
                    "4": "data_initialized",
                    "9": "initialized"
                },
                "DAT_20000470": {
                    "1": "table",
                    "3": "data",
                    "6": "data_array"
                },
                "FUN_080002f0": {
                    "1": "initialize_data_array",
                    "16": "initialize_data",
                    "3": "initialize_array",
                    "5": "initialize_table"
                },
                "FUN_08000310": {
                    "1": "get_data_by_index",
                    "2": "get_data_at_index",
                    "3": "get_value_from_array"
                },
                "param_1": {
                    "1": "offset",
                    "19": "index",
                    "2": "input_index",
                    "5": "input_value"
                },
                "param_1 & 0x3ff": {
                    "1": "masked_index"
                }
            },
            "called": [
                "FUN_080002f0"
            ],
            "calling": [
                "FUN_08004dd2",
                "FUN_080003ec"
            ],
            "code": "\nundefined get_value_from_array_08000310(uint index)\n\n{\n  if (DAT_2000046c == 0) {\n    FUN_080002f0();\n  }\n  return (&DAT_20000470)[index & 0x3ff];\n}\n\n",
            "current_name": "get_value_from_array_08000310",
            "entrypoint": "0x08000310",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000310": "get_value_from_array_08000310",
                "param_1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000340": {
            "additional_data": {
                "DAT_2000046c": {
                    "1": "is_initialized"
                },
                "DAT_20000470": {
                    "1": "data_array"
                },
                "FUN_080002f0": {
                    "1": "initialize_array"
                },
                "FUN_08000340": {
                    "1": "write_data_to_memory",
                    "14": "store_data",
                    "2": "store_value",
                    "3": "update_data"
                },
                "param_1": {
                    "1": "param_index",
                    "29": "index"
                },
                "param_2": {
                    "1": "param_value",
                    "20": "value",
                    "9": "data"
                },
                "param_3": {
                    "1": "size"
                }
            },
            "called": [
                "FUN_080002f0"
            ],
            "calling": [
                "FUN_08000374",
                "FUN_08004c2a"
            ],
            "code": "\nvoid store_data_08000340(uint index,undefined value)\n\n{\n  if (DAT_2000046c == 0) {\n    FUN_080002f0();\n  }\n  (&DAT_20000470)[index & 0x3ff] = value;\n  return;\n}\n\n",
            "current_name": "store_data_08000340",
            "entrypoint": "0x08000340",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000340": "store_data_08000340",
                "param_1": "index",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000374": {
            "additional_data": {
                "FUN_080002f0": {
                    "1": "initialize_data",
                    "2": "initialize_checksum"
                },
                "FUN_08000340": {
                    "1": "update_data",
                    "4": "update_checksum"
                },
                "FUN_08000374": {
                    "1": "calculate_check_sum",
                    "20": "process_data",
                    "8": "calculate_checksum"
                },
                "local_14": {
                    "1": "checksum",
                    "2": "index",
                    "20": "current_index"
                },
                "local_18": {
                    "1": "current_position",
                    "14": "current_data",
                    "2": "current_byte",
                    "4": "current_element",
                    "8": "current_char"
                },
                "local_1c": {
                    "1": "size_counter",
                    "11": "remaining_length",
                    "2": "remaining_elements",
                    "3": "length_counter",
                    "4": "remaining_size"
                },
                "local_9": {
                    "1": "accumulator",
                    "17": "checksum",
                    "3": "result"
                },
                "param_1": {
                    "1": "length",
                    "2": "count",
                    "3": "index",
                    "5": "input_length",
                    "7": "input_size"
                },
                "param_2": {
                    "1": "input_array",
                    "10": "input_data",
                    "11": "data",
                    "2": "data_array",
                    "3": "input_string"
                },
                "param_3": {
                    "1": "iteration_count",
                    "2": "index",
                    "3": "input_size",
                    "5": "length",
                    "6": "input_length"
                }
            },
            "called": [
                "FUN_08000340",
                "FUN_080002f0"
            ],
            "calling": [
                "FUN_08004bc0",
                "FUN_08004c2a",
                "FUN_08004bf4"
            ],
            "code": "\nvoid process_data_08000374(int input_size,char *data,int input_length)\n\n{\n  int remaining_length;\n  char *current_data;\n  int current_index;\n  char checksum;\n  \n  checksum = '\\0';\n  remaining_length = input_length;\n  current_data = data;\n  current_index = input_size;\n  if (DAT_2000046c == 0) {\n    FUN_080002f0();\n    current_data = data;\n    current_index = input_size;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    checksum = (checksum != '\\0') + *current_data;\n    FUN_08000340(current_index,*current_data);\n    current_data = current_data + 1;\n    current_index = current_index + 1;\n  }\n  FUN_08000340(current_index,checksum);\n  return;\n}\n\n",
            "current_name": "process_data_08000374",
            "entrypoint": "0x08000374",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000374": "process_data_08000374",
                "local_14": "current_index",
                "local_18": "current_data",
                "local_1c": "remaining_length",
                "local_9": "checksum",
                "param_1": "input_size",
                "param_2": "data",
                "param_3": "input_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080003ec": {
            "additional_data": {
                "FUN_080002f0": {
                    "1": "initialize_checksum",
                    "2": "initialize"
                },
                "FUN_08000310": {
                    "1": "get_value",
                    "2": "get_character",
                    "3": "get_char"
                },
                "FUN_080003ec": {
                    "1": "verify_data",
                    "14": "check_equality",
                    "3": "verify_checksum",
                    "4": "verify_equality"
                },
                "cVar1": {
                    "1": "current_byte",
                    "5": "current_char"
                },
                "local_14": {
                    "1": "output_buffer",
                    "2": "current_pointer",
                    "5": "current_char_ptr",
                    "9": "output_string"
                },
                "local_18": {
                    "1": "current_idx",
                    "2": "current_position",
                    "26": "current_index"
                },
                "local_1c": {
                    "1": "current_length",
                    "28": "remaining_length"
                },
                "local_9": {
                    "1": "character_count",
                    "4": "char_count",
                    "7": "checksum",
                    "8": "sum"
                },
                "param_1": {
                    "1": "data_buffer",
                    "18": "input_string",
                    "2": "buffer",
                    "3": "input_array"
                },
                "param_2": {
                    "1": "start_idx",
                    "2": "start_position",
                    "28": "start_index"
                },
                "param_3": {
                    "31": "length"
                },
                "uVar2": {
                    "1": "expected_sum",
                    "2": "expected_checksum"
                }
            },
            "called": [
                "FUN_08000310",
                "FUN_080002f0"
            ],
            "calling": [
                "FUN_08004d7c",
                "FUN_08004dd2",
                "FUN_08004d2c"
            ],
            "code": "\nbool check_equality_080003ec(char *input_string,int start_index,int length)\n\n{\n  char current_char;\n  uint expected_checksum;\n  int remaining_length;\n  int current_index;\n  char *output_string;\n  byte sum;\n  \n  sum = 0;\n  remaining_length = length;\n  current_index = start_index;\n  output_string = input_string;\n  if (DAT_2000046c == 0) {\n    FUN_080002f0();\n    current_index = start_index;\n    output_string = input_string;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    current_char = FUN_08000310(current_index);\n    sum = current_char + (sum != 0);\n    *output_string = current_char;\n    current_index = current_index + 1;\n    output_string = output_string + 1;\n  }\n  expected_checksum = FUN_08000310(current_index);\n  return sum == expected_checksum;\n}\n\n",
            "current_name": "check_equality_080003ec",
            "entrypoint": "0x080003ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080003ec": "check_equality_080003ec",
                "cVar1": "current_char",
                "local_14": "output_string",
                "local_18": "current_index",
                "local_1c": "remaining_length",
                "local_9": "sum",
                "param_1": "input_string",
                "param_2": "start_index",
                "param_3": "length",
                "uVar2": "expected_checksum"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000478": {
            "additional_data": {
                "FUN_08000478": {
                    "1": "initialize_function",
                    "11": "initialize_parameters",
                    "3": "initialize_variables",
                    "4": "initialize_data"
                },
                "param_1": {
                    "1": "first_parameter",
                    "10": "parameter1",
                    "2": "input1",
                    "9": "param1"
                },
                "param_2": {
                    "1": "value2",
                    "10": "parameter2",
                    "2": "input_param2",
                    "9": "param2"
                },
                "param_3": {
                    "1": "data_param3",
                    "10": "parameter3",
                    "2": "input3",
                    "9": "param3"
                }
            },
            "called": [],
            "calling": [
                "FUN_080004ac",
                "FUN_080005b4"
            ],
            "code": "\nvoid initialize_params_08000478(undefined parameter1,undefined parameter2,undefined parameter3)\n\n{\n  DAT_20000e89 = parameter1;\n  DAT_20000e8a = parameter2;\n  DAT_20000e8b = parameter3;\n  return;\n}\n\n",
            "current_name": "initialize_params_08000478",
            "entrypoint": "0x08000478",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000478": "initialize_params_08000478",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "param_3": "parameter3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080004ac": {
            "additional_data": {
                "DAT_20000e70": {
                    "1": "memory_block",
                    "2": "data"
                },
                "DAT_20000e74": {
                    "1": "status_variable",
                    "2": "flag"
                },
                "DAT_20000e78": {
                    "1": "initialized_value",
                    "2": "data_copy"
                },
                "DAT_20000e8c": {
                    "1": "byte_data"
                },
                "DAT_20000e90": {
                    "1": "data_value"
                },
                "DAT_20000ecc": {
                    "1": "default_data_value"
                },
                "FUN_08000478": {
                    "1": "set_flags",
                    "2": "print_values",
                    "4": "perform_operation"
                },
                "FUN_080004ac": {
                    "1": "initialize_and_check_data",
                    "17": "initialize_data",
                    "2": "process_data",
                    "4": "initialize_application"
                },
                "FUN_08004030": {
                    "1": "show_error_message",
                    "2": "print_error_message",
                    "3": "log_error",
                    "4": "display_error",
                    "5": "handle_error",
                    "7": "display_error_message"
                },
                "FUN_08004d7c": {
                    "1": "check_result",
                    "2": "check_status",
                    "3": "check_condition",
                    "5": "check_validity",
                    "7": "check_data_validity",
                    "9": "check_data"
                },
                "FUN_0800b430": {
                    "1": "initialize_data_buffer",
                    "14": "initialize_memory",
                    "2": "initialize_data",
                    "5": "clear_memory"
                },
                "PARAM_1": {
                    "1": "param1"
                },
                "PARAM_2": {
                    "1": "param2"
                },
                "PARAM_3": {
                    "1": "param3"
                },
                "VAR_1": {
                    "1": "return_value"
                },
                "byte  param_1": {
                    "1": "byte_value"
                },
                "char param_1": {
                    "1": "action"
                },
                "iVar1": {
                    "1": "function_status",
                    "14": "result",
                    "2": "status"
                },
                "iVar2": {
                    "1": "param1"
                },
                "iVar3": {
                    "1": "param2"
                },
                "iVar4": {
                    "1": "param3"
                },
                "newValue_1": {
                    "1": "updated_value1"
                },
                "newValue_2": {
                    "1": "updated_value2"
                },
                "param_1": {
                    "1": "ptr_array",
                    "2": "data_buffer",
                    "4": "data_pointer",
                    "6": "error_code"
                },
                "param_2": {
                    "1": "param_byte",
                    "2": "param",
                    "3": "value",
                    "5": "param2"
                },
                "param_3": {
                    "1": "param_u_int",
                    "3": "param3",
                    "8": "size"
                }
            },
            "called": [
                "FUN_0800b430",
                "FUN_08000478",
                "FUN_08004d7c",
                "FUN_08004030"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid initialize_data_080004ac(void)\n\n{\n  int result;\n  \n  FUN_0800b430(&DAT_20000e70,0,0x38);\n  DAT_20000e78 = DAT_20000ecc;\n  FUN_08000478(0,1,2);\n  DAT_20000e74 = 1;\n  result = FUN_08004d7c(DAT_20000e8c,&DAT_20000e90);\n  if (result == 0) {\n    FUN_08004030(10);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_080004ac",
            "entrypoint": "0x080004ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080004ac": "initialize_data_080004ac",
                "iVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080004fc": {
            "additional_data": {
                "DAT_20000e7c": {
                    "1": "assigned_data1",
                    "2": "processed_data1"
                },
                "DAT_20000e80": {
                    "1": "result2"
                },
                "DAT_20000e84": {
                    "1": "assigned_data3"
                },
                "DAT_20000ebc": {
                    "1": "param4_1",
                    "3": "constant1"
                },
                "DAT_20000ec0": {
                    "1": "param4_2",
                    "3": "constant2"
                },
                "DAT_20000ec4": {
                    "1": "param4_3",
                    "3": "constant3"
                },
                "FUN_080004fc": {
                    "1": "update_data",
                    "26": "initialize_data"
                },
                "FUN_08008e44": {
                    "1": "reverse_operation",
                    "2": "get_processed_data",
                    "3": "convert_to_uint",
                    "5": "get_value"
                },
                "FUN_08009054": {
                    "1": "reverse_something",
                    "11": "process_data",
                    "2": "calculate_result",
                    "7": "update_data"
                },
                "param_1": {
                    "1": "variable1",
                    "12": "value1",
                    "2": "param1",
                    "4": "input_1",
                    "6": "input1"
                },
                "param_2": {
                    "1": "input_parameter2",
                    "12": "value2",
                    "2": "data2",
                    "4": "input_2",
                    "7": "input2"
                },
                "param_3": {
                    "1": "variable3",
                    "12": "value3",
                    "2": "param3",
                    "4": "input_3",
                    "7": "input3"
                },
                "param_4": {
                    "1": "value4"
                },
                "uVar1": {
                    "1": "processed_value1",
                    "2": "processed_value",
                    "4": "result",
                    "5": "result1"
                }
            },
            "called": [
                "FUN_08009054",
                "FUN_08008e44"
            ],
            "calling": [
                "FUN_0800283a"
            ],
            "code": "\nvoid initialize_data_080004fc(undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined4 result1;\n  \n  result1 = FUN_08008e44(value1);\n  DAT_20000e7c = FUN_08009054(result1,DAT_20000ebc);\n  result1 = FUN_08008e44(value2);\n  DAT_20000e80 = FUN_08009054(result1,DAT_20000ec0);\n  result1 = FUN_08008e44(value3);\n  DAT_20000e84 = FUN_08009054(result1,DAT_20000ec4);\n  return;\n}\n\n",
            "current_name": "initialize_data_080004fc",
            "entrypoint": "0x080004fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080004fc": "initialize_data_080004fc",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "uVar1": "result1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800056c": {
            "additional_data": {
                "FUN_0800056c": {
                    "1": "perform_operation",
                    "12": "process_data",
                    "2": "process_param"
                },
                "FUN_08008590": {
                    "1": "calculation1",
                    "2": "reverse_bits",
                    "3": "calculate_first_step",
                    "4": "calculate_value",
                    "7": "calculate_first_value"
                },
                "FUN_08008640": {
                    "1": "perform_operation",
                    "2": "process_step2",
                    "3": "calculate_second_step",
                    "7": "calculate_second_value"
                },
                "FUN_08008c30": {
                    "1": "finalize_computation",
                    "2": "process_step3",
                    "3": "calculate_third_value"
                },
                "PTR_20000e73": {
                    "1": "flag"
                },
                "param_1": {
                    "1": "input_value1",
                    "11": "input",
                    "2": "data",
                    "3": "input_param",
                    "8": "input_data"
                },
                "param_1SecondValue": {
                    "1": "param1_second_value"
                },
                "param_2": {
                    "1": "param2_first_value",
                    "3": "param2"
                },
                "param_2SecondValue": {
                    "1": "param2_second_value"
                },
                "param_3": {
                    "1": "var2",
                    "3": "param3"
                },
                "param_3SecondValue": {
                    "1": "param3_second_value"
                },
                "param_4": {
                    "1": "constant",
                    "3": "param4"
                },
                "param_4SecondValue": {
                    "1": "param4_second_value"
                },
                "uVar1": {
                    "1": "result_var",
                    "29": "result"
                }
            },
            "called": [
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30"
            ],
            "calling": [
                "FUN_080005b4"
            ],
            "code": "\nundefined4 process_data_0800056c(undefined4 input)\n\n{\n  undefined8 result;\n  \n  if (DAT_20000e73 != '\\0') {\n    result = FUN_08008590(input);\n    result = FUN_08008640((int)result,(int)((ulonglong)result >> 0x20),0x66666666,0x40396666);\n    input = FUN_08008c30((int)result,(int)((ulonglong)result >> 0x20));\n  }\n  return input;\n}\n\n",
            "current_name": "process_data_0800056c",
            "entrypoint": "0x0800056c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800056c": "process_data_0800056c",
                "param_1": "input",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080005b4": {
            "additional_data": {
                "DAT_20000e70": {
                    "1": "constant2"
                },
                "DAT_20000e71": {
                    "1": "mode"
                },
                "DAT_20000e72": {
                    "1": "error_code3"
                },
                "DAT_20000e73": {
                    "1": "flag2"
                },
                "DAT_20000e74": {
                    "1": "constant5"
                },
                "DAT_20000e75": {
                    "1": "constant11"
                },
                "DAT_20000e76": {
                    "1": "error_code7"
                },
                "DAT_20000e77": {
                    "1": "constant10"
                },
                "DAT_20000e78": {
                    "1": "constant2"
                },
                "DAT_20000e7c": {
                    "1": "constant13"
                },
                "DAT_20000e80": {
                    "1": "temp_var28"
                },
                "DAT_20000e84": {
                    "1": "temp_var29"
                },
                "DAT_20000e88": {
                    "1": "constant16"
                },
                "DAT_20000e89": {
                    "1": "index3"
                },
                "DAT_20000e8a": {
                    "1": "constant19"
                },
                "DAT_20000e8b": {
                    "1": "constant17"
                },
                "DAT_20000e8c": {
                    "1": "constant7"
                },
                "DAT_20000e90": {
                    "1": "temp_var31"
                },
                "DAT_20000e94": {
                    "1": "temp_var32"
                },
                "DAT_20000e98": {
                    "1": "constant21"
                },
                "DAT_20000e9c": {
                    "1": "array3"
                },
                "DAT_20000ea9": {
                    "1": "constant26"
                },
                "DAT_20000eb8": {
                    "1": "error_code11"
                },
                "DAT_20000ed0": {
                    "1": "constant8"
                },
                "DAT_20000ed2": {
                    "1": "constant24"
                },
                "DAT_20000ed6": {
                    "1": "constant25"
                },
                "FUN_08000220": {
                    "1": "function20"
                },
                "FUN_08000478": {
                    "1": "configure_values"
                },
                "FUN_0800056c": {
                    "1": "get_value"
                },
                "FUN_080005b4": {
                    "1": "analyze_command",
                    "3": "process_data"
                },
                "FUN_0800184c": {
                    "1": "get_input"
                },
                "FUN_08001e98": {
                    "1": "perform_operation3"
                },
                "FUN_08001f00": {
                    "1": "perform_operation"
                },
                "FUN_08002408": {
                    "1": "operation4",
                    "2": "print_value"
                },
                "FUN_080025e8": {
                    "1": "operation5"
                },
                "FUN_08002fd4": {
                    "1": "finalize_operation"
                },
                "FUN_08004bf4": {
                    "1": "modify_value2"
                },
                "FUN_08004d7c": {
                    "1": "function17"
                },
                "FUN_0800525c": {
                    "1": "execute_operation"
                },
                "FUN_08008590": {
                    "1": "retrieve_value"
                },
                "FUN_08008894": {
                    "1": "perform_operation2"
                },
                "FUN_08008ba0": {
                    "1": "calculate_result"
                },
                "FUN_08008bf0": {
                    "1": "calculate_sum"
                },
                "FUN_08008c30": {
                    "1": "perform_xor_operation"
                },
                "FUN_08008cd8": {
                    "1": "calculate_product"
                },
                "FUN_08008cdc": {
                    "1": "perform_operation"
                },
                "FUN_08008eec": {
                    "1": "perform_operation"
                },
                "FUN_08009214": {
                    "1": "check_value"
                },
                "FUN_08009228": {
                    "1": "validate_values"
                },
                "FUN_0800923c": {
                    "1": "verify_value"
                },
                "FUN_08009798": {
                    "1": "get_checksum_components"
                },
                "FUN_0800981c": {
                    "1": "perform_logic_operation"
                },
                "FUN_080098d0": {
                    "1": "function12"
                },
                "FUN_0800b430": {
                    "1": "initialize_values"
                },
                "auStack_70": {
                    "1": "auxiliary_array",
                    "13": "array2",
                    "2": "temp_array2",
                    "3": "local_array2"
                },
                "cVar3": {
                    "1": "return_val",
                    "2": "output",
                    "3": "return_value",
                    "6": "error_code",
                    "9": "result"
                },
                "iVar1": {
                    "1": "temp_variable_1",
                    "18": "result",
                    "2": "loop_counter",
                    "4": "return_value",
                    "5": "index"
                },
                "local_24": {
                    "1": "uint_val",
                    "2": "local_var26",
                    "3": "var26"
                },
                "local_26": {
                    "1": "var13",
                    "2": "local_var25",
                    "3": "var25"
                },
                "local_27": {
                    "1": "temp_var24",
                    "2": "byte8",
                    "3": "var24"
                },
                "local_2c": {
                    "1": "temp_var24",
                    "2": "local_var23",
                    "3": "var23"
                },
                "local_2d": {
                    "1": "var13",
                    "2": "local_var_22",
                    "3": "var22"
                },
                "local_2e": {
                    "1": "char_var_2",
                    "2": "local_var_21",
                    "3": "var21"
                },
                "local_2f": {
                    "1": "temp_var24",
                    "2": "var11",
                    "3": "var20"
                },
                "local_34": {
                    "1": "value7",
                    "2": "local_var19",
                    "3": "var19"
                },
                "local_38": {
                    "1": "value18",
                    "2": "local_var18",
                    "3": "var18"
                },
                "local_39": {
                    "1": "local_var12",
                    "2": "local_var_17",
                    "3": "var17"
                },
                "local_3a": {
                    "1": "byte4",
                    "2": "temp_var20",
                    "3": "var16"
                },
                "local_3b": {
                    "1": "byte3",
                    "2": "local_var15",
                    "3": "var15"
                },
                "local_3c": {
                    "1": "temp_variable_21",
                    "2": "byte4",
                    "3": "var14"
                },
                "local_3d": {
                    "1": "local_variable9",
                    "2": "byte3",
                    "3": "var13"
                },
                "local_44": {
                    "1": "variable8",
                    "2": "local_var12",
                    "3": "temp_var16"
                },
                "local_45": {
                    "1": "local_var6",
                    "2": "local_var_11",
                    "3": "var11",
                    "6": "flag2"
                },
                "local_4c": {
                    "1": "value6",
                    "2": "local_var5",
                    "3": "var10"
                },
                "local_50": {
                    "1": "local_variable9",
                    "2": "local_var_9",
                    "3": "temp_var14"
                },
                "local_51": {
                    "1": "local_var3",
                    "2": "byte2",
                    "3": "var8",
                    "7": "flag1"
                },
                "local_52": {
                    "1": "value7",
                    "2": "local_var_7",
                    "3": "var7"
                },
                "local_58": {
                    "1": "value6",
                    "2": "local_var6",
                    "4": "temp_var12"
                },
                "local_7c": {
                    "1": "temp9",
                    "2": "variable3",
                    "3": "local_var3",
                    "4": "value3",
                    "5": "var3"
                },
                "local_80": {
                    "1": "temp_data2",
                    "2": "variable2",
                    "3": "array3",
                    "4": "temp_var8",
                    "5": "var2"
                },
                "local_84": {
                    "1": "temp_variable_8",
                    "2": "variable1",
                    "3": "array2",
                    "4": "temp_var7",
                    "5": "var1"
                },
                "local_94": {
                    "1": "buffer",
                    "17": "array1",
                    "2": "temp_array1",
                    "3": "local_array1"
                },
                "param_1": {
                    "1": "parameter",
                    "10": "input",
                    "3": "input_data",
                    "4": "input_parameter",
                    "9": "input_param"
                },
                "uStack_74": {
                    "1": "temp_stack_variable2",
                    "2": "stack_var2",
                    "4": "var5"
                },
                "uStack_78": {
                    "1": "temp9",
                    "2": "local_var_4",
                    "4": "var4"
                },
                "uVar2": {
                    "1": "result",
                    "2": "temp_variable1",
                    "3": "temp1",
                    "4": "temp_var_1",
                    "6": "temp_var",
                    "9": "temp_var1"
                },
                "uVar4": {
                    "1": "temp_variable_3",
                    "13": "temp_var2",
                    "2": "temp_variable2",
                    "4": "temp2"
                },
                "uVar5": {
                    "1": "temp_variable_4",
                    "13": "temp_var3",
                    "2": "temp2",
                    "3": "temp_var2",
                    "4": "temp3"
                },
                "uVar6": {
                    "1": "temp_result3",
                    "13": "temp_var4",
                    "2": "temp_variable4",
                    "3": "temp_var3",
                    "4": "temp4"
                },
                "uVar7": {
                    "1": "value2",
                    "13": "temp_var5",
                    "2": "temp_variable5",
                    "3": "temp_var4",
                    "4": "temp_var_5"
                },
                "uVar8": {
                    "1": "value3",
                    "13": "temp_var6",
                    "2": "temp_variable6",
                    "3": "temp_var5",
                    "4": "temp_var_6"
                },
                "undefined4 param_1": {
                    "1": "input"
                }
            },
            "called": [
                "FUN_08000478",
                "FUN_08009214",
                "FUN_0800923c",
                "FUN_08001f00",
                "FUN_08008bf0",
                "FUN_08004bf4",
                "FUN_08008590",
                "FUN_08009228",
                "FUN_0800184c",
                "FUN_08000220",
                "FUN_08008cdc",
                "FUN_08008cd8",
                "FUN_0800525c",
                "FUN_08009798",
                "FUN_080025e8",
                "FUN_08008ba0",
                "FUN_08002408",
                "FUN_08008894",
                "FUN_08002fd4",
                "FUN_0800b430",
                "FUN_08001e98",
                "FUN_080098d0",
                "FUN_08004d7c",
                "FUN_0800056c",
                "FUN_0800981c",
                "FUN_08008eec",
                "FUN_08008c30"
            ],
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "code": "\nchar process_input_080005b4(undefined4 input)\n\n{\n  int result;\n  undefined4 temp_var1;\n  char result;\n  uint temp_var2;\n  undefined4 temp_var3;\n  undefined8 temp_var4;\n  undefined8 temp_var5;\n  undefined8 temp_var6;\n  undefined4 array1 [4];\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  undefined4 array2 [6];\n  undefined4 var6;\n  byte var7;\n  undefined flag1;\n  undefined4 var9;\n  undefined4 var10;\n  undefined flag2;\n  uint var12;\n  byte var13;\n  byte var14;\n  byte var15;\n  byte var16;\n  char var17;\n  uint var18;\n  undefined4 var19;\n  sbyte var20;\n  char var21;\n  char var22;\n  undefined4 var23;\n  byte var24;\n  ushort var25;\n  uint var26;\n  \n  if (DAT_20000ea9 == '\\x06') {\n    result = '\\f';\n  }\n  else {\n    flag1 = 0;\n    var25 = 0;\n    var24 = 0;\n    var23 = 0xbf800000;\n    var22 = '\\0';\n    var21 = '\\0';\n    FUN_0800b430(array2 + 3,0,0xc);\n    FUN_0800b430(array2,0,0xc);\n    DAT_20000e70 = '\\0';\n    var20 = 0;\n    while (result = FUN_0800184c(&var7,array2 + 6,input,&flag1), result != 0) {\n      temp_var4 = FUN_08008590(var6);\n      temp_var4 = FUN_08009798((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n      var26 = FUN_08008ba0((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n      if (var7 == 0x47) {\n        switch(var26) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          var20 = 2;\n          break;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          var20 = 1;\n          break;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          var20 = 3;\n          break;\n        case 0x14:\n        case 0x15:\n          var20 = 7;\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          var20 = 9;\n          break;\n        case 0x5a:\n        case 0x5b:\n          var20 = 4;\n          break;\n        case 0x5d:\n        case 0x5e:\n          var20 = 6;\n        }\n        switch(var26) {\n        case 0:\n          DAT_20000e71 = '\\0';\n          break;\n        case 1:\n          DAT_20000e71 = '\\x01';\n          break;\n        case 2:\n          DAT_20000e71 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e71 = '\\x03';\n          break;\n        case 4:\n          var21 = '\\x01';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 10:\n          var21 = '\\x02';\n          break;\n        case 0x11:\n          FUN_08000478(0,1,2);\n          break;\n        case 0x12:\n          FUN_08000478(2,0,1);\n          break;\n        case 0x13:\n          FUN_08000478(1,2,0);\n          break;\n        case 0x14:\n          DAT_20000e73 = 1;\n          break;\n        case 0x15:\n          DAT_20000e73 = 0;\n          break;\n        case 0x1c:\n        case 0x1e:\n          temp_var1 = FUN_08008eec(var6,0x41200000);\n          temp_var4 = FUN_08008590(temp_var1);\n          temp_var4 = FUN_08009798((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          var26 = FUN_08008ba0((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          switch(var26) {\n          case 0x118:\n            var21 = '\\x03';\n            break;\n          case 0x119:\n            var21 = '\\x04';\n            break;\n          default:\n            DAT_20000e70 = '\\x03';\n            break;\n          case 300:\n            var21 = '\\x05';\n            break;\n          case 0x12d:\n            var21 = '\\x06';\n          }\n          break;\n        case 0x35:\n          var22 = '\\x01';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          DAT_20000e8c = (char)var26 - 0x36;\n          break;\n        case 0x50:\n          DAT_20000e71 = '\\x04';\n          break;\n        case 0x5a:\n          DAT_20000e74 = '\\x01';\n          break;\n        case 0x5b:\n          DAT_20000e74 = '\\0';\n          break;\n        case 0x5c:\n          temp_var1 = FUN_08008eec(var6,0x41200000);\n          temp_var4 = FUN_08008590(temp_var1);\n          temp_var4 = FUN_08009798((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          var26 = FUN_08008ba0((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          if (var26 == 0x398) {\n            var21 = '\\a';\n          }\n          else if (var26 == 0x399) {\n            var21 = '\\b';\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          break;\n        case 0x5d:\n          DAT_20000e72 = '\\x01';\n          break;\n        case 0x5e:\n          DAT_20000e72 = '\\0';\n        }\n      }\n      else if (var7 == 0x4d) {\n        if (var26 == 0x1e) {\nLAB_08000b96:\n          var20 = 5;\n        }\n        else if ((int)var26 < 0x1f) {\n          if ((int)var26 < 3) {\n            if (-1 < (int)var26) goto LAB_08000b96;\n          }\n          else if (var26 - 3 < 3) {\n            var20 = 8;\n          }\n        }\n        switch(var26) {\n        case 0:\n          DAT_20000e75 = '\\x01';\n          break;\n        case 1:\n          break;\n        case 2:\n        case 0x1e:\n          DAT_20000e75 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e76 = '\\x01';\n          break;\n        case 4:\n          DAT_20000e76 = -1;\n          break;\n        case 5:\n          DAT_20000e76 = '\\0';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 7:\n          DAT_20000e77 = 2;\n          break;\n        case 8:\n          DAT_20000e77 = 1;\n          break;\n        case 9:\n          DAT_20000e77 = 0;\n        }\n      }\n      if (var20 != 0) {\n        if (((int)(uint)var25 >> var20 & 1U) == 0) {\n          var25 = var25 | (ushort)(1 << var20);\n        }\n        else {\n          DAT_20000e70 = '\\x05';\n        }\n        var20 = 0;\n      }\n    }\n    result = DAT_20000e70;\n    if (DAT_20000e70 == '\\0') {\n      var19 = 0;\n      var18 = 0;\n      var17 = '\\0';\n      flag1 = 0;\nswitchD_08000d18_caseD_47:\n      result = FUN_0800184c(&var7,array2 + 6,input,&flag1);\n      if (result != 0) {\n        switch(var7) {\n        case 0x46:\n          result = FUN_0800923c(var6,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e72 == '\\0') {\n            DAT_20000e78 = FUN_0800056c(var6);\n          }\n          else {\n            var23 = FUN_0800056c(var6);\n          }\n          break;\n        case 0x47:\n        case 0x4d:\n        case 0x4e:\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n          temp_var2 = (uint)var7;\n          temp_var1 = FUN_0800056c(var6);\n          array2[temp_var2 - 0x49] = temp_var1;\n          break;\n        case 0x4c:\n          temp_var4 = FUN_08008590(var6);\n          temp_var4 = FUN_08009798((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          var17 = FUN_08008bf0((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          break;\n        case 0x50:\n          var19 = var6;\n          break;\n        case 0x52:\n          var18 = FUN_0800056c(var6);\n          break;\n        case 0x53:\n          result = FUN_08009228(var6,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case 0x54:\n          result = FUN_08009228(var6,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          temp_var4 = FUN_08008590(var6);\n          temp_var4 = FUN_08009798((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          DAT_20000e88 = FUN_08008bf0((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          break;\n        case 0x58:\n          array2[3] = FUN_0800056c(var6);\n          var24 = var24 | 1;\n          break;\n        case 0x59:\n          array2[4] = FUN_0800056c(var6);\n          var24 = var24 | 2;\n          break;\n        case 0x5a:\n          array2[5] = FUN_0800056c(var6);\n          var24 = var24 | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      result = DAT_20000e70;\n      if (DAT_20000e70 == '\\0') {\n        if (DAT_20000ea9 != '\\a') {\n          FUN_0800525c((int)DAT_20000e76);\n          FUN_08000220(DAT_20000e77);\n        }\n        if ((var25 & 0x200) != 0) {\n          result = FUN_08004d7c(DAT_20000e8c,&var3);\n          if (result == 0) {\n            return '\\n';\n          }\n          DAT_20000e90 = var3;\n          DAT_20000e94 = var4;\n          DAT_20000e98 = var5;\n        }\n        switch(var21) {\n        case '\\x01':\n          result = FUN_08009228(var19,0);\n          if (result == 0) {\n            if (DAT_20000ea9 != '\\a') {\n              FUN_08002408(var19);\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case '\\x02':\n          temp_var4 = FUN_08008590(var19);\n          temp_var4 = FUN_08009798((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          var26 = FUN_08008ba0((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          if ((((var17 == '\\x02') || (var17 == '\\x14')) && (-1 < (int)var26)) &&\n             ((int)var26 < 7)) {\n            if ((var24 == 0) && (var17 == '\\x02')) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              if ((int)var26 < 1) {\n                var26 = (uint)DAT_20000e8c;\n              }\n              else {\n                var26 = var26 - 1;\n              }\n              result = FUN_08004d7c(var26 & 0xff,array1);\n              if (result == 0) {\n                return '\\n';\n              }\n              for (var16 = 0; var16 < 3; var16 = var16 + 1) {\n                if (((int)(uint)var24 >> var16 & 1U) != 0) {\n                  if (var17 == '\\x14') {\n                    temp_var2 = (uint)var16;\n                    temp_var1 = FUN_08008cd8(*(undefined4 *)(&DAT_20000e74 + (var16 + 2) * 4),\n                                         array2[var16 + 3]);\n                    array1[temp_var2] = temp_var1;\n                  }\n                  else {\n                    array1[var16] = array2[var16 + 3];\n                  }\n                }\n              }\n              FUN_08004bf4(var26 & 0xff,array1);\n              if (var26 == DAT_20000e8c) {\n                DAT_20000e90 = array1[0];\n                DAT_20000e94 = array1[1];\n                DAT_20000e98 = array1[2];\n              }\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          var24 = 0;\n          break;\n        case '\\x03':\n        case '\\x05':\n          if (var24 != 0) {\n            for (var15 = 0; var15 < 3; var15 = var15 + 1) {\n              if (((int)(uint)var24 >> var15 & 1U) == 0) {\n                array2[var15 + 3] = *(undefined4 *)(&DAT_20000e74 + (var15 + 2) * 4);\n              }\n              else if (DAT_20000e74 == '\\0') {\n                temp_var2 = (uint)var15;\n                temp_var1 = FUN_08008cdc(array2[var15 + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (var15 + 2) * 4));\n                array2[temp_var2 + 3] = temp_var1;\n              }\n              else {\n                temp_var3 = array2[var15 + 3];\n                temp_var1 = FUN_08008cdc(*(undefined4 *)(&DAT_20000e70 + (var15 + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (var15 + 10) * 4));\n                temp_var2 = (uint)var15;\n                temp_var1 = FUN_08008cdc(temp_var3,temp_var1);\n                array2[temp_var2 + 3] = temp_var1;\n              }\n            }\n            FUN_08001e98(array2[3],array2[4],array2[5],DAT_20000ed0,0);\n          }\n          if (var21 == '\\x05') {\n            result = FUN_08004d7c(7,array1 + 3);\n            if (result == 0) {\n              return '\\n';\n            }\n          }\n          else {\n            result = FUN_08004d7c(6,array1 + 3);\n            if (result == 0) {\n              return '\\n';\n            }\n          }\n          FUN_08001e98(array1[3],var1,var2,DAT_20000ed0,0);\n          DAT_20000e7c = array1[3];\n          DAT_20000e80 = var1;\n          DAT_20000e84 = var2;\n          var24 = 0;\n          break;\n        case '\\x04':\n        case '\\x06':\n          if (var21 == '\\x06') {\n            FUN_08004bf4(7,&DAT_20000e7c);\n          }\n          else {\n            FUN_08004bf4(6,&DAT_20000e7c);\n          }\n          break;\n        case '\\a':\n          if (var24 == 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          else {\n            for (var14 = 0; var14 < 3; var14 = var14 + 1) {\n              if (((int)(uint)var24 >> var14 & 1U) != 0) {\n                temp_var1 = FUN_08008cd8(*(undefined4 *)(&DAT_20000e74 + (var14 + 2) * 4),\n                                     *(undefined4 *)(&DAT_20000e70 + (var14 + 8) * 4));\n                temp_var2 = (uint)var14;\n                temp_var1 = FUN_08008cd8(temp_var1,array2[var14 + 3]);\n                *(undefined4 *)(&DAT_20000e74 + (temp_var2 + 10) * 4) = temp_var1;\n              }\n            }\n          }\n          var24 = 0;\n          break;\n        case '\\b':\n          FUN_0800b430(&DAT_20000e9c,0,0xc);\n        }\n        if (((var25 & 4) != 0) || (var24 != 0)) {\n          if ((DAT_20000e72 != '\\0') &&\n             ((result = FUN_08009228(var23,0), result != 0 && (DAT_20000e71 != '\\x04')))) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (((var22 != '\\0') && (DAT_20000e71 != '\\0')) && (DAT_20000e71 != '\\x01')) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          for (var13 = 0; var13 < 3; var13 = var13 + 1) {\n            if (((int)(uint)var24 >> var13 & 1U) == 0) {\n              array2[var13 + 3] = *(undefined4 *)(&DAT_20000e74 + (var13 + 2) * 4);\n            }\n            else if (var22 == '\\0') {\n              if (DAT_20000e74 == '\\0') {\n                temp_var2 = (uint)var13;\n                temp_var1 = FUN_08008cdc(array2[var13 + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (var13 + 2) * 4));\n                array2[temp_var2 + 3] = temp_var1;\n              }\n              else {\n                temp_var3 = array2[var13 + 3];\n                temp_var1 = FUN_08008cdc(*(undefined4 *)(&DAT_20000e70 + (var13 + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (var13 + 10) * 4));\n                temp_var2 = (uint)var13;\n                temp_var1 = FUN_08008cdc(temp_var3,temp_var1);\n                array2[temp_var2 + 3] = temp_var1;\n              }\n            }\n          }\n          switch(DAT_20000e71) {\n          case '\\0':\n            if (var24 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              FUN_08001e98(array2[3],array2[4],array2[5],DAT_20000ed0,0);\n            }\n            break;\n          case '\\x01':\n            if (var24 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              temp_var1 = var23;\n              if (DAT_20000e72 == '\\0') {\n                temp_var1 = DAT_20000e78;\n              }\n              FUN_08001e98(array2[3],array2[4],array2[5],temp_var1,DAT_20000e72);\n            }\n            break;\n          case '\\x02':\n          case '\\x03':\n            var24 = var24 & ~(byte)(1 << DAT_20000e8b);\n            if ((var24 == 0) ||\n               (((result = FUN_08009214(var18,0), result != 0 &&\n                 (result = FUN_08009214(array2[DAT_20000e89],0), result != 0)) &&\n                (result = FUN_08009214(array2[DAT_20000e8a],0), result != 0)))) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              result = FUN_08009214(var18,0);\n              if (result == 0) {\n                var10 = FUN_08008cd8(array2[DAT_20000e89 + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e89 + 2) * 4));\n                var9 = FUN_08008cd8(array2[DAT_20000e8a + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e8a + 2) * 4));\n                FUN_0800b430(array2,0,0xc);\n                temp_var1 = FUN_08008eec(var18,0x40800000);\n                temp_var1 = FUN_08008eec(temp_var1,var18);\n                temp_var3 = FUN_08008eec(var10,var10);\n                temp_var1 = FUN_08008cd8(temp_var1,temp_var3);\n                temp_var3 = FUN_08008eec(var9,var9);\n                var12 = FUN_08008cd8(temp_var1,temp_var3);\n                result = FUN_08009228(var12,0);\n                if (result != 0) {\n                  DAT_20000e70 = 4;\n                  return '\\x04';\n                }\n                temp_var4 = FUN_08008590(var12);\n                temp_var4 = FUN_080098d0((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n                temp_var5 = FUN_08008590(var10);\n                temp_var6 = FUN_08008590(var9);\n                temp_var5 = FUN_0800981c((int)temp_var5,(int)((ulonglong)temp_var5 >> 0x20),(int)temp_var6,\n                                     (int)((ulonglong)temp_var6 >> 0x20));\n                temp_var4 = FUN_08008894((int)temp_var4,(uint)((ulonglong)temp_var4 >> 0x20) ^ 0x80000000,\n                                     (int)temp_var5,(int)((ulonglong)temp_var5 >> 0x20));\n                var12 = FUN_08008c30((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n                if (DAT_20000e71 == '\\x03') {\n                  var12 = var12 ^ 0x80000000;\n                }\n                result = FUN_08009228(var18,0);\n                if (result != 0) {\n                  var12 = var12 ^ 0x80000000;\n                  var18 = var18 ^ 0x80000000;\n                }\n                temp_var1 = FUN_08008eec(var9,var12);\n                temp_var1 = FUN_08008cd8(var10,temp_var1);\n                temp_var2 = (uint)DAT_20000e89;\n                temp_var1 = FUN_08008eec(temp_var1,0x3f000000);\n                array2[temp_var2] = temp_var1;\n                temp_var1 = FUN_08008eec(var10,var12);\n                temp_var1 = FUN_08008cdc(temp_var1,var9);\n                temp_var2 = (uint)DAT_20000e8a;\n                temp_var1 = FUN_08008eec(temp_var1,0x3f000000);\n                array2[temp_var2] = temp_var1;\n              }\n              else {\n                temp_var4 = FUN_08008590(array2[DAT_20000e89]);\n                temp_var5 = FUN_08008590(array2[DAT_20000e8a]);\n                temp_var4 = FUN_0800981c((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20),(int)temp_var5,\n                                     (int)((ulonglong)temp_var5 >> 0x20));\n                var18 = FUN_08008c30((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n              }\n              flag2 = DAT_20000e71 == '\\x02';\n              temp_var1 = var23;\n              if (DAT_20000e72 == '\\0') {\n                temp_var1 = DAT_20000e78;\n              }\n              FUN_08001f00(&DAT_20000e7c,array2 + 3,array2,DAT_20000e89,DAT_20000e8a,\n                           DAT_20000e8b,temp_var1,DAT_20000e72,var18,flag2);\n            }\n            break;\n          case '\\x04':\n            if (var24 != 0) {\n              DAT_20000e70 = '\\x06';\n            }\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          DAT_20000e7c = array2[3];\n          DAT_20000e80 = array2[4];\n          DAT_20000e84 = array2[5];\n        }\n        result = DAT_20000e70;\n        if (DAT_20000e75 != '\\0') {\n          FUN_08002fd4();\n          DAT_20000eb8 = 0;\n          if (DAT_20000e75 == '\\x02') {\n            FUN_080025e8();\n            result = DAT_20000e70;\n          }\n          else {\n            DAT_20000e75 = '\\0';\n            result = DAT_20000e70;\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "process_input_080005b4",
            "entrypoint": "0x080005b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080005b4": "process_input_080005b4",
                "auStack_70": "array2",
                "cVar3": "result",
                "iVar1": "result",
                "local_24": "var26",
                "local_26": "var25",
                "local_27": "var24",
                "local_2c": "var23",
                "local_2d": "var22",
                "local_2e": "var21",
                "local_2f": "var20",
                "local_34": "var19",
                "local_38": "var18",
                "local_39": "var17",
                "local_3a": "var16",
                "local_3b": "var15",
                "local_3c": "var14",
                "local_3d": "var13",
                "local_44": "var12",
                "local_45": "flag2",
                "local_4c": "var10",
                "local_50": "var9",
                "local_51": "flag1",
                "local_52": "var7",
                "local_58": "var6",
                "local_7c": "var3",
                "local_80": "var2",
                "local_84": "var1",
                "local_94": "array1",
                "param_1": "input",
                "uStack_74": "var5",
                "uStack_78": "var4",
                "uVar2": "temp_var1",
                "uVar4": "temp_var2",
                "uVar5": "temp_var3",
                "uVar6": "temp_var4",
                "uVar7": "temp_var5",
                "uVar8": "temp_var6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800184c": {
            "additional_data": {
                "'\\0'": {
                    "1": "null_character"
                },
                "(char *)(param_3 + (uint)*param_4)": {
                    "1": "current_char"
                },
                "*(byte *)(param_3 + (uint)*param_4)": {
                    "1": "character"
                },
                "*param_1": {
                    "1": "output_char_value"
                },
                "*param_4": {
                    "1": "input_string_index"
                },
                "0x41": {
                    "1": "a_value"
                },
                "0x5a": {
                    "1": "z_value"
                },
                "DAT_20000e70": {
                    "1": "global_error_flag",
                    "2": "error_code"
                },
                "FUN_0800184c": {
                    "1": "extract_and_validate_byte",
                    "2": "check_and_update_char",
                    "3": "process_input",
                    "4": "check_and_process_character",
                    "9": "check_and_update_character"
                },
                "FUN_08002638": {
                    "1": "recursive_check"
                },
                "iVar1": {
                    "1": "recursive_result",
                    "18": "result",
                    "2": "sub_function_result",
                    "3": "return_value"
                },
                "param_1": {
                    "1": "destination_buffer",
                    "13": "output_buffer",
                    "2": "output_character",
                    "3": "output_char",
                    "7": "output"
                },
                "param_2": {
                    "1": "modifiers",
                    "2": "param_2",
                    "3": "input_param",
                    "4": "param"
                },
                "param_3": {
                    "1": "input_pointer",
                    "2": "offset",
                    "3": "data_offset",
                    "9": "base_address"
                },
                "param_4": {
                    "1": "current_address",
                    "2": "index",
                    "4": "input_string",
                    "6": "current_index"
                },
                "uVar2": {
                    "1": "is_character_valid",
                    "2": "is_valid",
                    "3": "success_flag",
                    "5": "success",
                    "8": "return_value"
                }
            },
            "called": [
                "FUN_08002638"
            ],
            "calling": [
                "FUN_080005b4"
            ],
            "code": "\nundefined4 check_and_update_character_0800184c(byte *output_buffer,undefined4 param,int base_address,byte *current_index)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  if (*(char *)(base_address + (uint)*current_index) == '\\0') {\n    return_value = 0;\n  }\n  else {\n    *output_buffer = *(byte *)(base_address + (uint)*current_index);\n    if ((*output_buffer < 0x41) || (0x5a < *output_buffer)) {\n      DAT_20000e70 = 2;\n      return_value = 0;\n    }\n    else {\n      *current_index = *current_index + 1;\n      result = FUN_08002638(base_address,current_index,param);\n      if (result == 0) {\n        DAT_20000e70 = 1;\n        return_value = 0;\n      }\n      else {\n        return_value = 1;\n      }\n    }\n  }\n  return return_value;\n}\n\n",
            "current_name": "check_and_update_character_0800184c",
            "entrypoint": "0x0800184c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800184c": "check_and_update_character_0800184c",
                "iVar1": "result",
                "param_1": "output_buffer",
                "param_2": "param",
                "param_3": "base_address",
                "param_4": "current_index",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080018cc": {
            "additional_data": {
                "0xfffffaaf": {
                    "1": "mask_constant",
                    "4": "mask"
                },
                "FUN_080018cc": {
                    "1": "merge_values",
                    "2": "update_data_register",
                    "6": "update_data"
                },
                "_": {
                    "1": "masked_existing_value"
                },
                "_DAT_40021014": {
                    "1": "flag_value",
                    "2": "data_register",
                    "3": "register_value",
                    "4": "existing_data"
                },
                "_DAT_40021014 & 0xfffffaaf": {
                    "1": "lower_bits_mask"
                },
                "param_1": {
                    "1": "flags",
                    "10": "new_value",
                    "2": "new_parameter",
                    "3": "new_data",
                    "4": "value",
                    "5": "input_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001994"
            ],
            "code": "\n\n\nvoid update_data_080018cc(uint new_value)\n\n{\n  masked_existing_valueDATmasked_existing_value40021014 = new_value | masked_existing_valueDATmasked_existing_value40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "current_name": "update_data_080018cc",
            "entrypoint": "0x080018cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080018cc": "update_data_080018cc",
                "_": "masked_existing_value",
                "param_1": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080018fc": {
            "additional_data": {
                "0xfffff55f": {
                    "3": "mask"
                },
                "FUN_080018fc": {
                    "1": "update_memory_address",
                    "2": "set_bitmask",
                    "3": "update_data",
                    "4": "update_memory_value"
                },
                "_DAT_40021014": {
                    "1": "original_value",
                    "2": "existing_data",
                    "3": "memory_address",
                    "8": "register_value"
                },
                "_DAT_40021014 & 0xfffff55f": {
                    "1": "mask"
                },
                "param_1": {
                    "1": "binary_value",
                    "2": "data",
                    "3": "new_data",
                    "5": "new_value",
                    "6": "input_value"
                },
                "param_1 | existingParameter & mask": {
                    "1": "updated_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001994"
            ],
            "code": "\n\n\nvoid update_memory_value_080018fc(uint input_value)\n\n{\n  _DAT_40021014 = input_value | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "current_name": "update_memory_value_080018fc",
            "entrypoint": "0x080018fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080018fc": "update_memory_value_080018fc",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800192c": {
            "additional_data": {
                "DAT_20000e4c": {
                    "1": "flag_result",
                    "2": "is_bit_set",
                    "7": "is_flag_set"
                },
                "DAT_20000ee4": {
                    "1": "flag_value",
                    "2": "flags",
                    "3": "input_data",
                    "8": "data"
                },
                "FUN_0800192c": {
                    "1": "update_flag_based_on_bitwise_operation",
                    "2": "extract_bit_from_data",
                    "5": "extract_flag_from_data"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004e30",
                "FUN_08001ddc"
            ],
            "code": "\nvoid extract_flag_from_data_0800192c(void)\n\n{\n  DAT_20000e4c = (uint)((DAT_20000ee4 & 8) != 0);\n  return;\n}\n\n",
            "current_name": "extract_flag_from_data_0800192c",
            "entrypoint": "0x0800192c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800192c": "extract_flag_from_data_0800192c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800195c": {
            "additional_data": {
                "DAT_20000ea9": {
                    "1": "character",
                    "2": "flag"
                },
                "DAT_20000eaa": {
                    "1": "feature_flags"
                },
                "FUN_0800195c": {
                    "1": "check_and_call_subfunction",
                    "2": "process_data",
                    "3": "check_and_set_flag",
                    "5": "check_and_update_flags"
                },
                "FUN_080025e8": {
                    "1": "update_data",
                    "2": "execute_action",
                    "3": "perform_initialization",
                    "6": "perform_update"
                }
            },
            "called": [
                "FUN_080025e8"
            ],
            "calling": [
                "FUN_080074c8"
            ],
            "code": "\nvoid check_and_update_flags_0800195c(void)\n\n{\n  if ((DAT_20000ea9 != '\\x06') && ((DAT_20000eaa & 0x20) == 0)) {\n    FUN_080025e8();\n    DAT_20000eaa = DAT_20000eaa | 0x40;\n  }\n  return;\n}\n\n",
            "current_name": "check_and_update_flags_0800195c",
            "entrypoint": "0x0800195c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800195c": "check_and_update_flags_0800195c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001994": {
            "additional_data": {
                "FUNC_08002828": {
                    "1": "reverse_action"
                },
                "FUN_080018cc": {
                    "1": "print_value"
                },
                "FUN_080018fc": {
                    "1": "manipulate_value_2"
                },
                "FUN_08001994": {
                    "6": "process_data"
                },
                "FUN_080078f4": {
                    "1": "get_random_value"
                },
                "FUN_0800854c": {
                    "1": "calculate_value"
                },
                "FUN_08008590": {
                    "1": "manipulate_value"
                },
                "FUN_08008640": {
                    "1": "perform_operation"
                },
                "FUN_08008894": {
                    "1": "calculate_result"
                },
                "FUN_08008bf0": {
                    "1": "calculate_input"
                },
                "FUN_08008c30": {
                    "1": "calculate_input_2"
                },
                "FUN_08008eec": {
                    "1": "perform_operation_2"
                },
                "FUN_08009054": {
                    "1": "apply_operations"
                },
                "FUN_08009318": {
                    "1": "perform_operations"
                },
                "FUN_080095b8": {
                    "1": "get_max_value"
                },
                "FUN_080098d0": {
                    "1": "calculate_result_2"
                },
                "FUN_0800b430": {
                    "1": "initialize_values"
                },
                "local_11": {
                    "1": "local_flag2",
                    "2": "char_var1",
                    "3": "value19",
                    "4": "counter",
                    "5": "local_var19"
                },
                "local_18": {
                    "1": "minimum_value",
                    "2": "uint_var9",
                    "3": "value18",
                    "5": "limit"
                },
                "local_1a": {
                    "1": "constant3",
                    "2": "ushort_var3",
                    "3": "value17",
                    "5": "local_var17"
                },
                "local_20": {
                    "1": "temp_value3",
                    "2": "int_var5",
                    "3": "value16",
                    "5": "local_var16"
                },
                "local_24": {
                    "1": "temp_value3",
                    "2": "int_var4",
                    "3": "value15",
                    "5": "local_var15"
                },
                "local_28": {
                    "1": "difference2",
                    "2": "int_var3",
                    "3": "value14",
                    "5": "local_var14"
                },
                "local_2c": {
                    "1": "temp_value7",
                    "2": "diff",
                    "3": "value13",
                    "5": "local_var13"
                },
                "local_30": {
                    "1": "value7",
                    "2": "uint_var8",
                    "3": "value12",
                    "5": "local_var12"
                },
                "local_34": {
                    "1": "temp_value7",
                    "2": "constant3",
                    "3": "value11",
                    "5": "local_var11"
                },
                "local_36": {
                    "1": "temp_value3",
                    "2": "ushort_var2",
                    "3": "value10",
                    "5": "local_var10"
                },
                "local_3c": {
                    "1": "temp_value_5",
                    "2": "random_value",
                    "3": "value9",
                    "5": "local_var9"
                },
                "local_40": {
                    "1": "temp_max",
                    "2": "max_value1",
                    "3": "value8",
                    "5": "local_var8"
                },
                "local_44": {
                    "1": "temp4",
                    "2": "result2",
                    "3": "value7",
                    "5": "local_var7"
                },
                "local_48": {
                    "1": "result",
                    "2": "temp_value3",
                    "4": "value6",
                    "5": "local_var6"
                },
                "local_4c": {
                    "1": "data_value",
                    "2": "value4",
                    "4": "value5",
                    "5": "local_var5"
                },
                "local_4e": {
                    "1": "ushort1",
                    "2": "val4",
                    "3": "constant1",
                    "4": "value4",
                    "5": "local_var4"
                },
                "local_54": {
                    "1": "value_3",
                    "11": "value3",
                    "2": "max_value3",
                    "5": "local_var3"
                },
                "local_58": {
                    "1": "max_val2",
                    "11": "value2",
                    "2": "val2",
                    "5": "local_var2"
                },
                "local_5c": {
                    "1": "max_val1",
                    "11": "value1",
                    "2": "max_1",
                    "5": "local_var1"
                },
                "local_61": {
                    "1": "result_var",
                    "2": "counter",
                    "9": "temp_flag"
                },
                "param_1": {
                    "1": "byte_data",
                    "10": "flag",
                    "14": "flags",
                    "2": "input_flags",
                    "3": "flag1"
                },
                "param_2": {
                    "1": "param",
                    "2": "is_true",
                    "3": "flag2",
                    "4": "flag1",
                    "5": "param2"
                },
                "param_3": {
                    "1": "is_flag2_set",
                    "2": "bool_param2",
                    "3": "is_param3_set",
                    "5": "flag2"
                },
                "param_4": {
                    "1": "input_param",
                    "10": "param4",
                    "14": "data",
                    "2": "input"
                },
                "uVar1": {
                    "1": "result_1",
                    "10": "result",
                    "17": "result1"
                },
                "uVar2": {
                    "1": "maximum",
                    "10": "result2",
                    "18": "max_value"
                },
                "uVar3": {
                    "1": "result_2",
                    "10": "result3",
                    "2": "temp_var1",
                    "3": "result2",
                    "5": "temp1"
                },
                "uVar4": {
                    "1": "temp_val2",
                    "10": "result4",
                    "2": "temp_value2",
                    "3": "result3",
                    "6": "temp2"
                }
            },
            "called": [
                "FUN_080095b8",
                "FUN_08009054",
                "FUN_08009318",
                "FUN_0800854c",
                "FUN_080078f4",
                "FUN_08008894",
                "FUN_08008640",
                "FUN_08008bf0",
                "FUN_080018cc",
                "FUN_0800b430",
                "FUN_08008590",
                "FUN_080098d0",
                "FUN_080018fc",
                "FUN_08008eec",
                "FUN_08008c30",
                "FUN_08002828"
            ],
            "calling": [
                "FUN_08001d4c"
            ],
            "code": "\nvoid process_data_08001994(byte flags,char param2,char param3,undefined4 data)\n\n{\n  undefined4 result1;\n  uint max_value;\n  undefined8 result3;\n  undefined8 result4;\n  byte local_flag;\n  uint value1;\n  uint value2;\n  uint value3;\n  ushort local_var4;\n  uint local_var5;\n  int local_var6;\n  undefined4 local_var7;\n  uint local_var8;\n  uint local_var9;\n  ushort local_var10;\n  uint local_var11;\n  uint local_var12;\n  int local_var13;\n  int local_var14;\n  int local_var15;\n  int local_var16;\n  ushort local_var17;\n  uint local_var18;\n  char local_var19;\n  \n  local_var19 = '\\0';\n  FUN_0800b430(&value1,0,0xc);\n  if ((flags & 1) != 0) {\n    local_var19 = local_var19 + '\\x01';\n    result3 = FUN_08008590(DAT_20000ebc);\n    value1 = FUN_080095b8((int)result3,(int)((ulonglong)result3 >> 0x20));\n  }\n  if ((flags & 2) != 0) {\n    local_var19 = local_var19 + '\\x01';\n    result3 = FUN_08008590(DAT_20000ec0);\n    value2 = FUN_080095b8((int)result3,(int)((ulonglong)result3 >> 0x20));\n  }\n  if ((flags & 4) != 0) {\n    local_var19 = local_var19 + '\\x01';\n    result3 = FUN_08008590(DAT_20000ec4);\n    value3 = FUN_080095b8((int)result3,(int)((ulonglong)result3 >> 0x20));\n  }\n  max_value = value3;\n  if (value3 < value2) {\n    max_value = value2;\n  }\n  local_var8 = value1;\n  if (value1 < max_value) {\n    local_var8 = max_value;\n  }\n  result3 = FUN_0800854c(local_var8);\n  result4 = FUN_0800854c(local_var19);\n  result4 = FUN_080098d0((int)result4,(int)((ulonglong)result4 >> 0x20));\n  result3 = FUN_08008894((int)result3,(int)((ulonglong)result3 >> 0x20),(int)result4,\n                       (int)((ulonglong)result4 >> 0x20));\n  local_var7 = FUN_08008c30((int)result3,(int)((ulonglong)result3 >> 0x20));\n  result1 = FUN_08008eec(DAT_20000edc,local_var7);\n  result1 = FUN_08009054(result1,0x453b8000);\n  result3 = FUN_08008590(result1);\n  result3 = FUN_08009318((int)result3,(int)((ulonglong)result3 >> 0x20));\n  local_var6 = FUN_08008bf0((int)result3,(int)((ulonglong)result3 >> 0x20));\n  result3 = FUN_0800854c(local_var19);\n  result3 = FUN_080098d0((int)result3,(int)((ulonglong)result3 >> 0x20));\n  result4 = FUN_08008590(data);\n  result3 = FUN_08008640((int)result3,(int)((ulonglong)result3 >> 0x20),(int)result4,\n                       (int)((ulonglong)result4 >> 0x20));\n  result1 = FUN_08008c30((int)result3,(int)((ulonglong)result3 >> 0x20));\n  result1 = FUN_08008eec(local_var7,result1);\n  result1 = FUN_08009054(0x4c64e1c0,result1);\n  result3 = FUN_08008590(result1);\n  local_var5 = FUN_080095b8((int)result3,(int)((ulonglong)result3 >> 0x20));\n  local_var18 = 75000;\n  if (local_var5 < 75000) {\n    local_var18 = local_var5;\n  }\n  local_var4 = DAT_20000ed4;\n  local_var17 = DAT_20000ed6 ^ DAT_20000ee6 & 0xaa0;\n  if (param2 == '\\0') {\n    local_var17 = local_var17 ^ 0xaa0;\n  }\n  FUN_080018fc(local_var17);\n  FUN_080018cc(local_var4);\n  local_var14 = -(local_var8 >> 1);\n  local_var13 = local_var18 - DAT_20000ec9;\n  local_var12 = 0;\n  local_var11 = 10000;\n  local_flag = flags;\n  local_var15 = local_var14;\n  local_var16 = local_var14;\n  while( true ) {\n    local_var10 = local_var4;\n    local_var9 = FUN_080078f4();\n    if (param3 == '\\0') {\n      local_var9 = local_var9 ^ 0x1e;\n    }\n    if (((local_flag & 1) != 0) && (local_var16 = local_var16 + value1, 0 < local_var16)) {\n      if ((local_var9 & 0x10) == 0) {\n        local_flag = local_flag & 0xfe;\n      }\n      else {\n        local_var10 = local_var10 ^ 0x10;\n      }\n      local_var16 = local_var16 - local_var8;\n    }\n    if (((local_flag & 2) != 0) && (local_var15 = local_var15 + value2, 0 < local_var15)) {\n      if ((local_var9 & 8) == 0) {\n        local_flag = local_flag & 0xfd;\n      }\n      else {\n        local_var10 = local_var10 ^ 0x440;\n      }\n      local_var15 = local_var15 - local_var8;\n    }\n    if (((local_flag & 4) != 0) && (local_var14 = local_var14 + value3, 0 < local_var14)) {\n      if ((local_var9 & 4) == 0) {\n        local_flag = local_flag & 0xfb;\n      }\n      else {\n        local_var10 = local_var10 ^ 0x100;\n      }\n      local_var14 = local_var14 - local_var8;\n    }\n    if ((local_flag == 0) || ((DAT_20000eaa & 0x10) != 0)) break;\n    FUN_080018cc(local_var10);\n    FUNC_08002828(DAT_20000ec9);\n    FUN_080018cc(local_var4);\n    FUNC_08002828(local_var13);\n    if ((local_var5 < local_var18) && (local_var11 = local_var18 + local_var11, 20000 < local_var11)) {\n      local_var11 = local_var11 - 20000;\n      local_var12 = local_var6 + local_var12;\n      local_var18 = 60000000 / local_var12;\n      if (local_var18 < local_var5) {\n        local_var18 = local_var5;\n      }\n      local_var13 = local_var18 - DAT_20000ec9;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08001994",
            "entrypoint": "0x08001994",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001994": "process_data_08001994",
                "local_11": "local_var19",
                "local_18": "local_var18",
                "local_1a": "local_var17",
                "local_20": "local_var16",
                "local_24": "local_var15",
                "local_28": "local_var14",
                "local_2c": "local_var13",
                "local_30": "local_var12",
                "local_34": "local_var11",
                "local_36": "local_var10",
                "local_3c": "local_var9",
                "local_40": "local_var8",
                "local_44": "local_var7",
                "local_48": "local_var6",
                "local_4c": "local_var5",
                "local_4e": "local_var4",
                "local_54": "value3",
                "local_58": "value2",
                "local_5c": "value1",
                "local_61": "local_flag",
                "param_1": "flags",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "data",
                "uVar1": "result1",
                "uVar2": "max_value",
                "uVar3": "result3",
                "uVar4": "result4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001d4c": {
            "additional_data": {
                "'\\0'": {
                    "1": "loop_end_condition"
                },
                "'\\x02'": {
                    "1": "loop_count"
                },
                "DAT_20000ee8": {
                    "1": "data_var_3",
                    "4": "data_3"
                },
                "DAT_20000eec": {
                    "1": "data_var_1",
                    "4": "data_1"
                },
                "DAT_20000ef0": {
                    "1": "data_var_2",
                    "4": "data_2"
                },
                "FUNC_08002814": {
                    "1": "execute_operation",
                    "3": "update_data",
                    "4": "process_data"
                },
                "FUN_08001994": {
                    "1": "perform_sub_process",
                    "2": "execute_operation",
                    "6": "process_data",
                    "7": "perform_operation"
                },
                "FUN_08001d4c": {
                    "1": "extract_and_process_data",
                    "10": "initialize_and_process_data",
                    "6": "process_data"
                },
                "FUN_08005790": {
                    "1": "initialize_sub_system",
                    "2": "initialize_data",
                    "5": "initialize_system"
                },
                "FUN_080057e4": {
                    "1": "finalize_processing",
                    "9": "cleanup"
                },
                "cVar1": {
                    "1": "previous_value",
                    "2": "current_iteration",
                    "3": "updated_counter",
                    "5": "temp"
                },
                "local_9": {
                    "1": "char_index",
                    "10": "counter",
                    "11": "loop_counter",
                    "2": "loop_count",
                    "6": "count"
                },
                "param_1": {
                    "1": "data_length",
                    "2": "operation_type"
                },
                "param_2": {
                    "1": "param_2"
                },
                "param_3": {
                    "1": "flag2"
                },
                "param_4": {
                    "1": "data_address",
                    "2": "data"
                }
            },
            "called": [
                "FUN_08002814",
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_08001994"
            ],
            "calling": [
                "FUN_080024c4"
            ],
            "code": "\nvoid initialize_and_process_data_08001d4c(void)\n\n{\n  char temp;\n  char loop_counter;\n  \n  FUN_08005790();\n  FUN_08001994(4,1,0,DAT_20000eec);\n  FUN_08001994(3,1,0,DAT_20000eec);\n  FUNC_08002814(DAT_20000ef0);\n  loop_counter = '\\x02';\n  while( true ) {\n    temp = loop_counter + -1;\n    if (loop_counter == '\\0') break;\n    FUN_08001994(7,0,1,DAT_20000ee8);\n    FUNC_08002814(DAT_20000ef0);\n    loop_counter = temp;\n    if ('\\0' < temp) {\n      FUN_08001994(7,1,0,DAT_20000ee8);\n      FUNC_08002814(DAT_20000ef0);\n    }\n  }\n  FUN_080057e4();\n  return;\n}\n\n",
            "current_name": "initialize_and_process_data_08001d4c",
            "entrypoint": "0x08001d4c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001d4c": "initialize_and_process_data_08001d4c",
                "cVar1": "temp",
                "local_9": "loop_counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001ddc": {
            "additional_data": {
                "DAT_20000ea8": {
                    "1": "flag_a",
                    "2": "flag1"
                },
                "DAT_20000ea9": {
                    "1": "data2",
                    "2": "flag2"
                },
                "DAT_20000eaa": {
                    "1": "data5",
                    "3": "counter"
                },
                "DAT_20000eb8": {
                    "1": "data4"
                },
                "DAT_20000ee4": {
                    "1": "flags"
                },
                "FUNC_08008244": {
                    "1": "perform_initialization",
                    "2": "initialize_component1",
                    "3": "initialize_graphics"
                },
                "FUNC_080082ba": {
                    "1": "initialize_security",
                    "2": "perform_action"
                },
                "FUN_080001f8": {
                    "1": "initialize_ui",
                    "2": "execute_task6"
                },
                "FUN_080003ac": {
                    "1": "check_special_flag"
                },
                "FUN_080004ac": {
                    "1": "validate_input",
                    "2": "execute_task3"
                },
                "FUN_0800192c": {
                    "1": "configure_settings",
                    "2": "initialize_configuration"
                },
                "FUN_08001ddc": {
                    "1": "initialize_function",
                    "11": "initialize_system",
                    "2": "initialize_and_process_data",
                    "3": "initialize",
                    "4": "initialize_program"
                },
                "FUN_0800283a": {
                    "1": "initialize_database",
                    "2": "execute_task9"
                },
                "FUN_08002f24": {
                    "1": "reverse_something2",
                    "2": "initialize_input"
                },
                "FUN_080039a0": {
                    "1": "reversing_function4",
                    "2": "execute_task4"
                },
                "FUN_080039bc": {
                    "1": "set_task_status"
                },
                "FUN_08003a74": {
                    "1": "update_input",
                    "2": "execute_task1"
                },
                "FUN_08003f34": {
                    "1": "render_frame",
                    "2": "update_display",
                    "3": "process_input"
                },
                "FUN_080041a0": {
                    "1": "reverse_something10",
                    "2": "execute_action",
                    "3": "reverse_data"
                },
                "FUN_080051b4": {
                    "1": "setup_components",
                    "2": "initialize_input",
                    "3": "initialize_component2"
                },
                "FUN_08005238": {
                    "1": "initialize_ui",
                    "2": "execute_task5"
                },
                "FUN_08005778": {
                    "1": "handle_special_case"
                },
                "FUN_08005814": {
                    "1": "function_twelve",
                    "2": "initialize_localization",
                    "3": "initialize_logging"
                },
                "FUN_0800583c": {
                    "1": "setup2",
                    "2": "configure_settings",
                    "3": "initialize_component3",
                    "4": "initialize_audio"
                },
                "FUN_08006aac": {
                    "1": "execute_special_action"
                },
                "FUN_080071d8": {
                    "1": "display_ui"
                },
                "FUN_08008244": {
                    "1": "initialize_component1"
                },
                "FUN_080082ba": {
                    "1": "execute_function4",
                    "2": "execute_task1"
                },
                "FUN_08008eec": {
                    "1": "render_frame"
                },
                "FUN_0800b430": {
                    "1": "function4",
                    "12": "initialize_data",
                    "2": "set_memory",
                    "3": "allocate_memory",
                    "6": "initialize_memory"
                },
                "FUN_08082ba": {
                    "1": "connect_to_server"
                }
            },
            "called": [
                "FUN_08005814",
                "FUN_0800583c",
                "FUN_08005238",
                "FUN_08008244",
                "FUN_08003f34",
                "FUN_080039bc",
                "FUN_0800283a",
                "FUN_080082ba",
                "FUN_080051b4",
                "FUN_0800192c",
                "FUN_0800b430",
                "FUN_080039a0",
                "FUN_08003a74",
                "FUN_080004ac",
                "FUN_08002f24",
                "FUN_080001f8",
                "FUN_080041a0"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\nvoid initialize_system_08001ddc(void)\n\n{\n  FUNC_08008244();\n  FUN_080051b4();\n  FUN_0800583c();\n  FUN_0800b430(&DAT_20000ea8,0,0x14);\n  DAT_20000ea8 = '\\x01';\n  DAT_20000ea9 = '\\x01';\n  do {\n    if (DAT_20000ea8 != '\\0') {\n      FUNC_080082ba();\n      FUN_08002f24();\n      FUN_080004ac();\n      FUN_080039a0();\n      FUN_08005238();\n      FUN_080001f8();\n      FUN_0800192c();\n      FUN_08005814();\n      FUN_0800283a();\n      DAT_20000ea8 = '\\0';\n      DAT_20000eaa = 0;\n      if ((DAT_20000ee4 & 2) != 0) {\n        DAT_20000eb8 = 1;\n      }\n      if ((DAT_20000ea9 == '\\x01') && ((DAT_20000ee4 & 0x10) != 0)) {\n        DAT_20000ea9 = '\\x06';\n      }\n      if (DAT_20000ea9 == '\\x06') {\n        FUN_080041a0(2);\n      }\n      else {\n        DAT_20000ea9 = '\\0';\n        FUN_080039bc();\n      }\n    }\n    FUN_08003a74();\n    FUN_08003f34();\n  } while( true );\n}\n\n",
            "current_name": "initialize_system_08001ddc",
            "entrypoint": "0x08001ddc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001ddc": "initialize_system_08001ddc"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001e98": {
            "additional_data": {
                "DAT_20000ea8": {
                    "1": "flag1",
                    "2": "flag2"
                },
                "DAT_20000ea9": {
                    "1": "condition",
                    "2": "flag1"
                },
                "DAT_20000eb8": {
                    "1": "flag2",
                    "2": "flag3"
                },
                "FUN_08001e98": {
                    "1": "handle_data_processing",
                    "18": "process_data"
                },
                "FUN_08002fac": {
                    "1": "check_flag",
                    "18": "check_condition"
                },
                "FUN_08003004": {
                    "1": "process_data_internal",
                    "2": "perform_operation",
                    "3": "execute_operation"
                },
                "FUN_08003a74": {
                    "1": "initialize_data",
                    "2": "update_data",
                    "4": "perform_action",
                    "6": "perform_operation"
                },
                "FUN_0800585c": {
                    "1": "additional_action",
                    "2": "cleanup",
                    "3": "execute_action",
                    "5": "perform_cleanup"
                },
                "iVar1": {
                    "1": "iteration_count",
                    "16": "result",
                    "2": "loop_count",
                    "7": "return_value"
                },
                "param_1": {
                    "1": "first_param",
                    "11": "arg1",
                    "12": "input1",
                    "3": "data1"
                },
                "param_2": {
                    "1": "input_2",
                    "11": "arg2",
                    "12": "input2",
                    "3": "data2"
                },
                "param_3": {
                    "1": "third_param",
                    "11": "arg3",
                    "12": "input3",
                    "3": "data3"
                },
                "param_4": {
                    "1": "identifier_4",
                    "11": "arg4",
                    "12": "input4",
                    "3": "data4"
                },
                "param_5": {
                    "1": "p5",
                    "18": "flag",
                    "9": "arg5"
                }
            },
            "called": [
                "FUN_0800585c",
                "FUN_08003004",
                "FUN_08002fac",
                "FUN_08003a74"
            ],
            "calling": [
                "FUN_080005b4",
                "FUN_08001f00",
                "FUN_080024c4"
            ],
            "code": "\nvoid process_data_08001e98(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined flag)\n\n{\n  int result;\n  \n  if (DAT_20000ea9 != '\\a') {\n    do {\n      FUN_08003a74();\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n      result = FUN_08002fac();\n    } while (result != 0);\n    FUN_08003004(input1,input2,input3,input4,flag);\n    if (DAT_20000ea9 == '\\0') {\n      DAT_20000ea9 = '\\x02';\n    }\n    if (DAT_20000eb8 != '\\0') {\n      FUN_0800585c();\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08001e98",
            "entrypoint": "0x08001e98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001e98": "process_data_08001e98",
                "iVar1": "result",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001f00": {
            "additional_data": {
                "FUN_08001e98": {
                    "1": "perform_operation_4"
                },
                "FUN_08001f00": {
                    "1": "decode_and_process_data",
                    "2": "process_data"
                },
                "FUN_080082d0": {
                    "1": "perform_operation_3"
                },
                "FUN_080082d4": {
                    "1": "perform_operation_5"
                },
                "FUN_08008590": {
                    "1": "calculate_result"
                },
                "FUN_08008640": {
                    "1": "shift_bits"
                },
                "FUN_08008bf0": {
                    "1": "perform_operation_2"
                },
                "FUN_08008bfd": {
                    "1": "calculate_result_using_var"
                },
                "FUN_08008c30": {
                    "1": "calculate_result_using_vars"
                },
                "FUN_08008cd8": {
                    "1": "calculate_result_using_params"
                },
                "FUN_08008cdc": {
                    "1": "combine_values_2"
                },
                "FUN_08008e44": {
                    "1": "perform_operation"
                },
                "FUN_08008eec": {
                    "1": "calculate_result_using_vars"
                },
                "FUN_08009054": {
                    "1": "modify_value"
                },
                "FUN_08009214": {
                    "1": "check_if_zero"
                },
                "FUN_0800923c": {
                    "1": "check_condition_2"
                },
                "FUN_08009250": {
                    "1": "check_if_non_zero"
                },
                "FUN_08009410": {
                    "1": "calculate_result_2"
                },
                "FUN_080094c0": {
                    "1": "calculate_value_2"
                },
                "FUN_080096e8": {
                    "1": "calculate_value"
                },
                "FUN_0800981c": {
                    "1": "calculate_result_using4_vars"
                },
                "FUN_08009990": {
                    "1": "calculate_result_using_vars"
                },
                "iVar3": {
                    "1": "temp_var1",
                    "2": "temp",
                    "3": "temp3",
                    "4": "temp_var"
                },
                "local_1c": {
                    "1": "var17",
                    "2": "local_value18",
                    "3": "local_var18"
                },
                "local_20": {
                    "1": "local_var15",
                    "2": "temp_var_23",
                    "3": "local_var17"
                },
                "local_24": {
                    "1": "temp_18",
                    "2": "temp_var_22",
                    "3": "local_var16"
                },
                "local_26": {
                    "1": "temp_uchar",
                    "2": "counter",
                    "3": "local_var15"
                },
                "local_27": {
                    "1": "flag_3",
                    "2": "local_value14",
                    "3": "counter",
                    "4": "flag"
                },
                "local_2c": {
                    "1": "var13",
                    "2": "temp_var_19",
                    "3": "local_var13"
                },
                "local_30": {
                    "1": "result_tmp_2",
                    "2": "temp16",
                    "3": "local_var12"
                },
                "local_34": {
                    "1": "temp_var_10",
                    "2": "local_value11",
                    "3": "local_var11"
                },
                "local_38": {
                    "1": "temp_var_10",
                    "2": "temp_var_16",
                    "3": "local_var10"
                },
                "local_3c": {
                    "1": "result4",
                    "2": "local_value9",
                    "3": "local_var9"
                },
                "local_40": {
                    "1": "temp9",
                    "2": "local_value8",
                    "3": "local_var8"
                },
                "local_42": {
                    "1": "local_var6",
                    "2": "local_value7",
                    "3": "local_var7"
                },
                "local_48": {
                    "1": "temp_array6",
                    "2": "temp_var_6",
                    "3": "local_var6"
                },
                "local_4c": {
                    "1": "temporary_variable_4",
                    "2": "temp_var_5",
                    "3": "local_var5"
                },
                "local_50": {
                    "1": "temp_array4",
                    "2": "temp_var_10",
                    "3": "local_var4"
                },
                "local_54": {
                    "1": "temp_array3",
                    "2": "temp_var_3",
                    "3": "local_var3"
                },
                "local_58": {
                    "1": "temp4",
                    "2": "temp_var_2",
                    "3": "local_var2"
                },
                "local_5c": {
                    "1": "temp3",
                    "2": "local_value1",
                    "4": "local_var1"
                },
                "local_6c": {
                    "1": "result",
                    "2": "temp_array_1",
                    "5": "temp_array",
                    "7": "result_array"
                },
                "param_1": {
                    "1": "input_param",
                    "10": "input_1",
                    "2": "input_param1",
                    "7": "input1"
                },
                "param_10": {
                    "1": "flag_param_2",
                    "2": "char_param_2",
                    "3": "flag_2",
                    "4": "param10"
                },
                "param_2": {
                    "1": "array_param",
                    "2": "input_param2",
                    "3": "input_2",
                    "4": "input2",
                    "6": "input_array"
                },
                "param_3": {
                    "1": "data_pointer1",
                    "2": "input_param3",
                    "3": "input2",
                    "4": "input3",
                    "5": "input_2"
                },
                "param_4": {
                    "1": "input1_offset",
                    "2": "byte_1",
                    "3": "index1",
                    "5": "byte_param_1",
                    "8": "byte1"
                },
                "param_5": {
                    "1": "param5",
                    "2": "input_param5",
                    "3": "index2",
                    "5": "byte_param_2",
                    "8": "byte2"
                },
                "param_6": {
                    "1": "b3",
                    "2": "byte_param3",
                    "3": "index3",
                    "5": "byte_param_3",
                    "8": "byte3"
                },
                "param_7": {
                    "1": "input_7",
                    "2": "undefined1",
                    "3": "param_7",
                    "4": "param7"
                },
                "param_8": {
                    "1": "char_arg1",
                    "2": "input_param8",
                    "3": "value2",
                    "4": "param8"
                },
                "param_9": {
                    "1": "value_2",
                    "2": "undefined2",
                    "3": "param_9",
                    "4": "param9"
                },
                "thunk_FUN_08009990": {
                    "1": "calculate_value_4"
                },
                "uVar1": {
                    "1": "temp_1",
                    "12": "result1",
                    "3": "temp_var1",
                    "4": "temp1",
                    "7": "result_1"
                },
                "uVar2": {
                    "1": "tmp_2",
                    "12": "result2",
                    "3": "temp_var2",
                    "4": "temp2",
                    "7": "result_2"
                },
                "uVar4": {
                    "1": "tmp_4",
                    "2": "temp2",
                    "3": "temp4"
                },
                "uVar5": {
                    "1": "tmp_5",
                    "2": "temp_var_5",
                    "3": "result4",
                    "4": "result_3"
                },
                "uVar6": {
                    "1": "result4",
                    "2": "temp_var_6",
                    "3": "temp_var6",
                    "4": "result_4"
                }
            },
            "called": [
                "FUN_08008cd8",
                "FUN_08008e44",
                "FUN_080096e8",
                "FUN_08009054",
                "FUN_08009214",
                "FUN_0800923c",
                "FUN_08008640",
                "FUN_08008bf0",
                "FUN_08008590",
                "FUN_080082d0",
                "FUN_080094c0",
                "FUN_08001e98",
                "FUN_08009410",
                "FUN_0800981c",
                "FUN_08008eec",
                "thunk_FUN_08009990",
                "FUN_08009250",
                "FUN_08008cdc",
                "FUN_08008c30",
                "FUN_080082d4"
            ],
            "calling": [
                "FUN_080005b4"
            ],
            "code": "\nvoid process_data_08001f00(int input_1,undefined4 *input_array,int input_3,byte byte1,byte byte2,byte byte3\n                 ,undefined4 param7,char param8,undefined4 param9,char param10)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int temp_var;\n  uint result3;\n  undefined8 result_3;\n  undefined8 result_4;\n  uint result_array [4];\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined4 local_var3;\n  undefined4 local_var4;\n  undefined4 local_var5;\n  undefined4 local_var6;\n  ushort local_var7;\n  undefined4 local_var8;\n  undefined4 local_var9;\n  undefined4 local_var10;\n  uint local_var11;\n  undefined4 local_var12;\n  undefined4 local_var13;\n  char flag;\n  ushort local_var15;\n  undefined4 local_var16;\n  uint local_var17;\n  uint local_var18;\n  \n  local_var13 = FUN_08008cdc(*(undefined4 *)((uint)byte1 * 4 + input_1),\n                          *(undefined4 *)((uint)byte1 * 4 + input_3));\n  local_var12 = FUN_08008cdc(*(undefined4 *)((uint)byte2 * 4 + input_1),\n                          *(undefined4 *)((uint)byte2 * 4 + input_3));\n  local_var11 = FUN_08008cd8(input_array[byte3],*(undefined4 *)((uint)byte3 * 4 + input_1));\n  local_var18 = *(uint *)((uint)byte1 * 4 + input_3) ^ 0x80000000;\n  local_var17 = *(uint *)((uint)byte2 * 4 + input_3) ^ 0x80000000;\n  local_var10 = FUN_08008cd8(input_array[byte1],local_var13);\n  local_var9 = FUN_08008cd8(input_array[byte2],local_var12);\n  result1 = FUN_08008eec(local_var18,local_var9);\n  result2 = FUN_08008eec(local_var17,local_var10);\n  result1 = FUN_08008cd8(result1,result2);\n  result_3 = FUN_08008590(result1);\n  result1 = FUN_08008eec(local_var18,local_var10);\n  result2 = FUN_08008eec(local_var17,local_var9);\n  result1 = FUN_08008cdc(result1,result2);\n  result_4 = FUN_08008590(result1);\n  result_3 = thunk_FUN_08009990((int)result_3,(int)((ulonglong)result_3 >> 0x20),(int)result_4,\n                             (int)((ulonglong)result_4 >> 0x20));\n  local_var16 = FUN_08008c30((int)result_3,(int)((ulonglong)result_3 >> 0x20));\n  if (param10 == '\\0') {\n    temp_var = FUN_0800923c(local_var16,0);\n    if (temp_var != 0) {\n      result_3 = FUN_08008590(local_var16);\n      result_3 = FUN_080082d4((int)result_3,(int)((ulonglong)result_3 >> 0x20),0x54442d18,0x401921fb);\n      local_var16 = FUN_08008c30((int)result_3,(int)((ulonglong)result_3 >> 0x20));\n    }\n  }\n  else {\n    temp_var = FUN_08009250(local_var16,0);\n    if (temp_var != 0) {\n      result_3 = FUN_08008590(local_var16);\n      result_3 = FUN_080082d0((int)result_3,(int)((ulonglong)result_3 >> 0x20),0x54442d18,0x401921fb);\n      local_var16 = FUN_08008c30((int)result_3,(int)((ulonglong)result_3 >> 0x20));\n    }\n  }\n  result1 = FUN_08008eec(local_var16,param9);\n  result_3 = FUN_08008590(result1);\n  result_4 = FUN_08008590(local_var11 & 0x7fffffff);\n  result_3 = FUN_0800981c((int)result_3,(int)((ulonglong)result_3 >> 0x20),(int)result_4,\n                       (int)((ulonglong)result_4 >> 0x20));\n  local_var8 = FUN_08008c30((int)result_3,(int)((ulonglong)result_3 >> 0x20));\n  temp_var = FUN_08009214(local_var8,0);\n  if (temp_var == 0) {\n    result1 = FUN_08009054(local_var8,DAT_20000ed8);\n    result_3 = FUN_08008590(result1);\n    result_3 = FUN_080094c0((int)result_3,(int)((ulonglong)result_3 >> 0x20));\n    local_var7 = FUN_08008bf0((int)result_3,(int)((ulonglong)result_3 >> 0x20));\n    if (param8 != '\\0') {\n      result1 = FUN_08008e44(local_var7);\n      param7 = FUN_08008eec(param7,result1);\n    }\n    result1 = FUN_08008e44(local_var7);\n    local_var6 = FUN_08009054(local_var16,result1);\n    result1 = FUN_08008e44(local_var7);\n    local_var5 = FUN_08009054(local_var11,result1);\n    result_3 = FUN_08008590(local_var6);\n    result_3 = FUN_08008640((int)result_3,(int)((ulonglong)result_3 >> 0x20),0,0x3fe00000);\n    result_4 = FUN_08008590(local_var6);\n    result_3 = FUN_08008640((int)result_3,(int)((ulonglong)result_3 >> 0x20),(int)result_4,\n                         (int)((ulonglong)result_4 >> 0x20));\n    result_3 = FUN_080082d0(0,0x3ff00000,(int)result_3,(int)((ulonglong)result_3 >> 0x20));\n    local_var4 = FUN_08008c30((int)result_3,(int)((ulonglong)result_3 >> 0x20));\n    local_var3 = local_var6;\n    flag = '\\0';\n    result_array[byte3] = *(uint *)(input_1 + (uint)byte3 * 4);\n    for (local_var15 = 1; local_var15 < local_var7; local_var15 = local_var15 + 1) {\n      if ((int)flag < (int)(uint)DAT_20000efa) {\n        result1 = FUN_08008eec(local_var18,local_var3);\n        result2 = FUN_08008eec(local_var17,local_var4);\n        result_array[3] = FUN_08008cdc(result1,result2);\n        result1 = FUN_08008eec(local_var18,local_var4);\n        result2 = FUN_08008eec(local_var17,local_var3);\n        local_var18 = FUN_08008cd8(result1,result2);\n        local_var17 = result_array[3];\n        flag = flag + '\\x01';\n      }\n      else {\n        result1 = FUN_08008e44(local_var15);\n        result1 = FUN_08008eec(result1,local_var6);\n        result_3 = FUN_08008590(result1);\n        result_3 = FUN_08009410((int)result_3,(int)((ulonglong)result_3 >> 0x20));\n        local_var2 = FUN_08008c30((int)result_3,(int)((ulonglong)result_3 >> 0x20));\n        result1 = FUN_08008e44(local_var15);\n        result1 = FUN_08008eec(result1,local_var6);\n        result_3 = FUN_08008590(result1);\n        result_3 = FUN_080096e8((int)result_3,(int)((ulonglong)result_3 >> 0x20));\n        local_var1 = FUN_08008c30((int)result_3,(int)((ulonglong)result_3 >> 0x20));\n        result1 = FUN_08008eec(*(uint *)((uint)byte1 * 4 + input_3) ^ 0x80000000,local_var2);\n        result2 = FUN_08008eec(*(undefined4 *)((uint)byte2 * 4 + input_3),local_var1);\n        local_var18 = FUN_08008cdc(result1,result2);\n        result1 = FUN_08008eec(*(uint *)((uint)byte1 * 4 + input_3) ^ 0x80000000,local_var1);\n        result2 = FUN_08008eec(*(undefined4 *)((uint)byte2 * 4 + input_3),local_var2);\n        local_var17 = FUN_08008cd8(result1,result2);\n        flag = '\\0';\n      }\n      result3 = FUN_08008cdc(local_var13,local_var18);\n      result_array[byte1] = result3;\n      result3 = FUN_08008cdc(local_var12,local_var17);\n      result_array[byte2] = result3;\n      result3 = FUN_08008cdc(result_array[byte3],local_var5);\n      result_array[byte3] = result3;\n      FUN_08001e98(result_array[0],result_array[1],result_array[2],param7,param8);\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n    }\n    FUN_08001e98(*input_array,input_array[1],input_array[2],param7,param8);\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08001f00",
            "entrypoint": "0x08001f00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001f00": "process_data_08001f00",
                "iVar3": "temp_var",
                "local_1c": "local_var18",
                "local_20": "local_var17",
                "local_24": "local_var16",
                "local_26": "local_var15",
                "local_27": "flag",
                "local_2c": "local_var13",
                "local_30": "local_var12",
                "local_34": "local_var11",
                "local_38": "local_var10",
                "local_3c": "local_var9",
                "local_40": "local_var8",
                "local_42": "local_var7",
                "local_48": "local_var6",
                "local_4c": "local_var5",
                "local_50": "local_var4",
                "local_54": "local_var3",
                "local_58": "local_var2",
                "local_5c": "local_var1",
                "local_6c": "result_array",
                "param_1": "input_1",
                "param_10": "param10",
                "param_2": "input_array",
                "param_3": "input_3",
                "param_4": "byte1",
                "param_5": "byte2",
                "param_6": "byte3",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar4": "result3",
                "uVar5": "result_3",
                "uVar6": "result_4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002408": {
            "additional_data": {
                "(int)uVar4,(int)((ulonglong)uVar4 >> 0x20)": {
                    "1": "result_params"
                },
                "(uint)local_12 * 0x32": {
                    "1": "multiplier"
                },
                "0x41a00000": {
                    "2": "constant1"
                },
                "0x447a0000": {
                    "2": "constant2"
                },
                "DAT_20000ea8": {
                    "1": "condition_var"
                },
                "FUNC_08002814": {
                    "1": "execute",
                    "2": "perform_action"
                },
                "FUN_080002a0": {
                    "1": "perform_action"
                },
                "FUN_08002408": {
                    "1": "reverse_and_reduce",
                    "25": "process_data"
                },
                "FUN_08002814": {
                    "2": "perform_action"
                },
                "FUN_08002fd4": {
                    "1": "reset",
                    "3": "initialize"
                },
                "FUN_08003a74": {
                    "4": "check_condition"
                },
                "FUN_08008590": {
                    "1": "process_result1"
                },
                "FUN_08008bf0": {
                    "1": "reverse3"
                },
                "FUN_08008cd8": {
                    "1": "calculate_next_value"
                },
                "FUN_08008e44": {
                    "1": "calculate_second_value"
                },
                "FUN_08008eec": {
                    "1": "calculate1"
                },
                "FUN_080094c0": {
                    "1": "normalize_value"
                },
                "local_12": {
                    "1": "loop_count",
                    "18": "counter",
                    "5": "count",
                    "7": "loop_counter"
                },
                "param_1": {
                    "1": "arg",
                    "12": "input_data",
                    "13": "input",
                    "3": "input_param"
                },
                "uVar1": {
                    "1": "processed_value",
                    "10": "result",
                    "12": "result1"
                },
                "uVar2": {
                    "1": "func_result1",
                    "3": "value1",
                    "4": "temp1",
                    "5": "temp_var1",
                    "6": "result1",
                    "8": "result2"
                },
                "uVar3": {
                    "1": "processed_value2",
                    "3": "value2",
                    "4": "temp2",
                    "5": "result2",
                    "9": "result3"
                },
                "uVar4": {
                    "1": "func_result3",
                    "2": "temp3",
                    "4": "result3",
                    "7": "result2",
                    "8": "result4"
                }
            },
            "called": [
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_080094c0",
                "FUN_08008cd8",
                "FUN_080002a0",
                "FUN_08003a74",
                "FUN_08002814",
                "FUN_08008eec",
                "FUN_08008bf0",
                "FUN_08002fd4"
            ],
            "calling": [
                "FUN_080005b4"
            ],
            "code": "\nvoid process_data_08002408(undefined4 input)\n\n{\n  undefined2 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined8 result4;\n  ushort counter;\n  \n  result2 = FUN_08008eec(input,0x41a00000);\n  result4 = FUN_08008590(result2);\n  result4 = FUN_080094c0((int)result4,(int)((ulonglong)result4 >> 0x20));\n  counter = FUN_08008bf0((int)result4,(int)((ulonglong)result4 >> 0x20));\n  FUN_08002fd4();\n  result2 = FUN_08008eec(input,0x447a0000);\n  result3 = FUN_08008e44((uint)counter * 0x32);\n  result2 = FUN_08008cd8(result2,result3);\n  result4 = FUN_08008590(result2);\n  result4 = FUN_080094c0((int)result4,(int)((ulonglong)result4 >> 0x20));\n  result1 = FUN_08008bf0((int)result4,(int)((ulonglong)result4 >> 0x20));\n  FUNC_08002814(result1);\n  while ((counter != 0 && (FUN_08003a74(), DAT_20000ea8 == '\\0'))) {\n    FUN_080002a0(0x32);\n    counter = counter - 1;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08002408",
            "entrypoint": "0x08002408",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002408": "process_data_08002408",
                "local_12": "counter",
                "param_1": "input",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080024c4": {
            "additional_data": {
                "DAT_20000e4c": {
                    "1": "constant2",
                    "2": "result",
                    "3": "flag"
                },
                "DAT_20000ea8": {
                    "1": "flag2",
                    "2": "flag"
                },
                "DAT_20000ea9": {
                    "1": "initial_value",
                    "2": "count"
                },
                "DAT_20000eac": {
                    "1": "memory_addr"
                },
                "DAT_20000ee4": {
                    "1": "constant4",
                    "2": "flag2"
                },
                "DAT_20000ee6": {
                    "1": "flag2",
                    "2": "flags"
                },
                "DAT_20000eec": {
                    "1": "some_other_data",
                    "3": "data"
                },
                "DAT_20000eee": {
                    "1": "constant_value"
                },
                "DAT_20000ef4": {
                    "1": "bit_data",
                    "3": "value"
                },
                "FUN_08001d4c": {
                    "1": "initialize_libraries",
                    "2": "initialize",
                    "3": "function1"
                },
                "FUN_08001e98": {
                    "1": "perform_action2",
                    "11": "process_data",
                    "2": "execute_operation"
                },
                "FUN_080024c4": {
                    "1": "initialize_settings",
                    "17": "initialize_data",
                    "2": "initialize_and_process_data",
                    "3": "initialize_application",
                    "4": "initialize_function"
                },
                "FUN_0800283a": {
                    "1": "execute_additional_check",
                    "2": "do_something",
                    "3": "cleanup",
                    "4": "reset_data"
                },
                "FUN_08002fd4": {
                    "1": "initialize5",
                    "2": "finalize",
                    "3": "function4"
                },
                "FUN_08003a74": {
                    "1": "initialize_environment",
                    "2": "configure_settings",
                    "3": "function2",
                    "4": "initialize_system"
                },
                "FUN_0800585c": {
                    "1": "do_something_else",
                    "2": "perform_operation",
                    "3": "function3",
                    "4": "cleanup"
                },
                "FUN_08008e44": {
                    "1": "get_status",
                    "2": "process_condition",
                    "3": "process_flag",
                    "4": "get_flag_value",
                    "6": "get_modified_value"
                },
                "FUN_08008eec": {
                    "1": "get_modified_value2",
                    "2": "perform_operation",
                    "3": "apply_modification",
                    "4": "calculate_value"
                },
                "FUN_0800b430": {
                    "1": "init_buffer",
                    "14": "initialize_memory",
                    "3": "initialize_data",
                    "5": "set_memory"
                },
                "local_11": {
                    "1": "is_flag1_set",
                    "2": "flag1",
                    "3": "is_condition1",
                    "4": "flag3",
                    "6": "is_flag_set1"
                },
                "local_12": {
                    "1": "status_flag2",
                    "3": "is_condition2",
                    "6": "flag2",
                    "7": "is_flag_set2"
                },
                "local_13": {
                    "1": "status_flag3",
                    "2": "is_flag1_set",
                    "3": "is_bit_set1",
                    "4": "flag1",
                    "6": "is_flag_set3"
                },
                "param_1": {
                    "1": "calc_value_a"
                },
                "param_2": {
                    "1": "param"
                },
                "param_3": {
                    "1": "size"
                },
                "param_4": {
                    "1": "calc_value_d"
                },
                "uVar1": {
                    "1": "modified_value1",
                    "2": "result1"
                },
                "uVar2": {
                    "1": "modified_value2",
                    "2": "result2"
                },
                "uVar3": {
                    "1": "modified_value3",
                    "2": "result3"
                }
            },
            "called": [
                "FUN_0800b430",
                "FUN_0800585c",
                "FUN_08008e44",
                "FUN_08001e98",
                "FUN_08003a74",
                "FUN_08008eec",
                "FUN_08001d4c",
                "FUN_0800283a",
                "FUN_08002fd4"
            ],
            "calling": [
                "FUN_08003b98"
            ],
            "code": "\nvoid initialize_data_080024c4(void)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  char is_flag_set3;\n  char is_flag_set2;\n  char is_flag_set1;\n  \n  DAT_20000ea9 = 5;\n  DAT_20000e4c = 0;\n  FUN_08001d4c();\n  FUN_08003a74();\n  if (DAT_20000ea8 == '\\0') {\n    FUN_0800b430(&DAT_20000eac,0,0xc);\n    FUN_0800283a();\n    DAT_20000ea9 = 0;\n    if ((DAT_20000ee6 & 0x20) == 0) {\n      is_flag_set1 = -1;\n    }\n    else {\n      is_flag_set1 = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x80) == 0) {\n      is_flag_set2 = -1;\n    }\n    else {\n      is_flag_set2 = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x200) == 0) {\n      is_flag_set3 = -1;\n    }\n    else {\n      is_flag_set3 = '\\x01';\n    }\n    result1 = FUN_08008e44((int)is_flag_set1);\n    result1 = FUN_08008eec(result1,DAT_20000ef4);\n    result2 = FUN_08008e44((int)is_flag_set2);\n    result2 = FUN_08008eec(result2,DAT_20000ef4);\n    result3 = FUN_08008e44((int)is_flag_set3);\n    result3 = FUN_08008eec(result3,DAT_20000ef4);\n    FUN_08001e98(result1,result2,result3,DAT_20000eec,0);\n    FUN_0800585c();\n    FUN_08002fd4();\n    FUN_0800283a();\n    if ((DAT_20000ee4 & 8) != 0) {\n      DAT_20000e4c = 1;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_080024c4",
            "entrypoint": "0x080024c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080024c4": "initialize_data_080024c4",
                "local_11": "is_flag_set1",
                "local_12": "is_flag_set2",
                "local_13": "is_flag_set3",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080025e8": {
            "additional_data": {
                "DAT_20000ea9": {
                    "1": "counter",
                    "2": "data_value"
                },
                "DAT_20000eaa": {
                    "1": "flags"
                },
                "FUN_08000210": {
                    "1": "execute_function_b",
                    "2": "perform_task_b",
                    "3": "perform_second_action",
                    "6": "perform_action2"
                },
                "FUN_080025e8": {
                    "1": "initialize_and_check_flag",
                    "2": "initialize_and_check_flags",
                    "3": "initialize_data",
                    "5": "update_status"
                },
                "FUN_08005250": {
                    "1": "perform_action_one",
                    "2": "perform_task_a",
                    "3": "perform_first_action",
                    "6": "perform_action1"
                },
                "FUN_080057e4": {
                    "1": "perform_operation3",
                    "2": "perform_task_c",
                    "3": "perform_third_action",
                    "5": "perform_task3",
                    "6": "perform_action3"
                }
            },
            "called": [
                "FUN_08005250",
                "FUN_08000210",
                "FUN_080057e4"
            ],
            "calling": [
                "FUN_08003b98",
                "FUN_080005b4",
                "FUN_0800195c",
                "FUN_08005900",
                "FUN_08003a18"
            ],
            "code": "\nvoid update_status_080025e8(void)\n\n{\n  if ((DAT_20000eaa & 0x10) == 0) {\n    DAT_20000eaa = DAT_20000eaa | 0x10;\n    FUN_08005250();\n    FUN_08000210();\n    if (DAT_20000ea9 - 3 < 3) {\n      DAT_20000eaa = DAT_20000eaa | 0x20;\n      FUN_080057e4();\n    }\n  }\n  return;\n}\n\n",
            "current_name": "update_status_080025e8",
            "entrypoint": "0x080025e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080025e8": "update_status_080025e8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002638": {
            "additional_data": {
                "FUN_08002638": {
                    "1": "parse_integer_with_sign",
                    "18": "parse_integer",
                    "2": "parse_integer_and_store",
                    "5": "parse_number"
                },
                "bVar1": {
                    "1": "is_digit",
                    "2": "numeric_value",
                    "28": "digit"
                },
                "bVar2": {
                    "10": "negative",
                    "21": "is_negative"
                },
                "bVar3": {
                    "1": "start_decimal",
                    "2": "is_float",
                    "3": "is_fractional"
                },
                "iVar4": {
                    "1": "decimal_result",
                    "4": "error_code",
                    "8": "status",
                    "9": "result"
                },
                "local_14": {
                    "1": "integer_result",
                    "2": "number",
                    "3": "integer_part",
                    "4": "int_value"
                },
                "local_15": {
                    "1": "decimal_point_index",
                    "2": "decimal_place",
                    "4": "fractional_count",
                    "6": "decimal_count",
                    "9": "exponent"
                },
                "local_16": {
                    "1": "digits_count",
                    "26": "digit_count"
                },
                "local_1c": {
                    "1": "result",
                    "2": "multiplier",
                    "3": "decimal_value",
                    "4": "temp1",
                    "5": "temp"
                },
                "local_c": {
                    "1": "current_address",
                    "2": "current_position",
                    "4": "current_pos",
                    "5": "current_ptr"
                },
                "local_d": {
                    "1": "current_value",
                    "2": "sign",
                    "3": "sign_char",
                    "4": "first_char",
                    "8": "current_char"
                },
                "param_1": {
                    "1": "start_offset",
                    "14": "base_address",
                    "2": "base_addr",
                    "4": "base"
                },
                "param_2": {
                    "1": "input_pointer",
                    "2": "buffer",
                    "3": "byte_array",
                    "4": "str",
                    "6": "input_string"
                },
                "param_3": {
                    "1": "result_pointer",
                    "15": "result",
                    "4": "output",
                    "5": "output_value"
                },
                "param_4": {
                    "1": "param4"
                },
                "pcVar5": {
                    "1": "current_char_ptr",
                    "19": "current_char",
                    "2": "next_char",
                    "3": "ptr1"
                },
                "pcVar6": {
                    "1": "current",
                    "2": "current_char",
                    "20": "next_char",
                    "3": "ptr2"
                },
                "uVar7": {
                    "1": "status",
                    "2": "success",
                    "21": "return_value",
                    "3": "result"
                },
                "uVar8": {
                    "1": "temp_val",
                    "18": "temp_value",
                    "7": "temp_result"
                }
            },
            "called": [
                "FUN_08008590",
                "FUN_08009214",
                "FUN_08008e3c",
                "FUN_08008eec",
                "FUN_08008640",
                "FUN_08008c30"
            ],
            "calling": [
                "FUN_0800184c",
                "FUN_08003b98"
            ],
            "code": "\nundefined4 parse_integer_08002638(int base_address,byte *input_string,uint *result)\n\n{\n  byte digit;\n  bool is_negative;\n  bool is_fractional;\n  int result;\n  char *current_char;\n  char *next_char;\n  undefined4 return_value;\n  undefined8 temp_value;\n  uint temp;\n  byte digit_count;\n  char exponent;\n  int integer_value;\n  char current_char;\n  char *current_ptr;\n  \n  next_char = (char *)(base_address + (uint)*input_string);\n  current_char = next_char + 1;\n  current_char = *next_char;\n  is_negative = false;\n  if (current_char == '-') {\n    is_negative = true;\n    current_char = *current_char;\n    current_ptr = next_char + 2;\n  }\n  else {\n    current_ptr = current_char;\n    if (current_char == '+') {\n      current_ptr = next_char + 2;\n      current_char = *current_char;\n    }\n  }\n  integer_value = 0;\n  exponent = '\\0';\n  digit_count = 0;\n  is_fractional = false;\n  do {\n    digit = current_char - 0x30;\n    if (digit < 10) {\n      digit_count = digit_count + 1;\n      if (digit_count < 9) {\n        if (is_fractional) {\n          exponent = exponent + -1;\n        }\n        integer_value = (uint)digit + integer_value * 10;\n      }\n      else if (!is_fractional) {\n        exponent = exponent + '\\x01';\n      }\n    }\n    else {\n      if ((digit != 0xfe) || (is_fractional)) {\n        if (digit_count == 0) {\n          return_value = 0;\n        }\n        else {\n          temp = FUN_08008e3c(integer_value);\n          result = FUN_08009214(temp,0);\n          if (result == 0) {\n            for (; exponent < -1; exponent = exponent + '\\x02') {\n              temp_value = FUN_08008590(temp);\n              temp_value = FUN_08008640((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0x47ae147b,0x3f847ae1)\n              ;\n              temp = FUN_08008c30((int)temp_value,(int)((ulonglong)temp_value >> 0x20));\n            }\n            if (exponent < '\\0') {\n              temp_value = FUN_08008590(temp);\n              temp_value = FUN_08008640((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0x9999999a,0x3fb99999)\n              ;\n              temp = FUN_08008c30((int)temp_value,(int)((ulonglong)temp_value >> 0x20));\n            }\n            else {\n              for (; '\\0' < exponent; exponent = exponent + -1) {\n                temp = FUN_08008eec(temp,0x41200000);\n              }\n            }\n          }\n          if (is_negative) {\n            *result = temp ^ 0x80000000;\n          }\n          else {\n            *result = temp;\n          }\n          *input_string = ((char)current_ptr - (char)base_address) - 1;\n          return_value = 1;\n        }\n        return return_value;\n      }\n      is_fractional = true;\n    }\n    current_char = *current_ptr;\n    current_ptr = current_ptr + 1;\n  } while( true );\n}\n\n",
            "current_name": "parse_integer_08002638",
            "entrypoint": "0x08002638",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002638": "parse_integer_08002638",
                "bVar1": "digit",
                "bVar2": "is_negative",
                "bVar3": "is_fractional",
                "iVar4": "result",
                "local_14": "integer_value",
                "local_15": "exponent",
                "local_16": "digit_count",
                "local_1c": "temp",
                "local_c": "current_ptr",
                "local_d": "current_char",
                "param_1": "base_address",
                "param_2": "input_string",
                "param_3": "result",
                "pcVar5": "current_char",
                "pcVar6": "next_char",
                "uVar7": "return_value",
                "uVar8": "temp_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002814": {
            "called": [],
            "calling": [
                "FUN_08001d4c",
                "FUN_08002408",
                "FUN_08004148"
            ],
            "code": "\nvoid FUNC_08002814(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002814",
            "entrypoint": "0x08002814",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002814": "FUNC_08002814"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08002828": {
            "called": [],
            "calling": [
                "FUN_08001994"
            ],
            "code": "\nvoid FUNC_08002828(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002828",
            "entrypoint": "0x08002828",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002828": "FUNC_08002828"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800283a": {
            "additional_data": {
                "FUN_080004fc": {
                    "1": "perform_operation",
                    "5": "process_data"
                },
                "FUN_0800283a": {
                    "1": "initialize_components",
                    "2": "execute_function",
                    "3": "execute_data_processing",
                    "4": "process_data",
                    "5": "initialize_data"
                },
                "FUN_080035ec": {
                    "1": "perform_data_transformation",
                    "4": "initialize_data"
                },
                "param_1": {
                    "1": "data_pointer1",
                    "2": "data_1",
                    "3": "param1",
                    "8": "data1"
                },
                "param_2": {
                    "1": "value2",
                    "2": "data_2",
                    "3": "param2",
                    "8": "data2"
                },
                "param_3": {
                    "1": "data_input3",
                    "2": "input3",
                    "3": "param3",
                    "8": "data3"
                }
            },
            "called": [
                "FUN_080035ec",
                "FUN_080004fc"
            ],
            "calling": [
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "code": "\nvoid initialize_data_0800283a(void)\n\n{\n  FUN_080035ec(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  FUN_080004fc(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  return;\n}\n\n",
            "current_name": "initialize_data_0800283a",
            "entrypoint": "0x0800283a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800283a": "initialize_data_0800283a"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002870": {
            "additional_data": {
                "FUN_08002870": {
                    "1": "increment_and_wrap",
                    "13": "increment_and_check",
                    "2": "increment_and_reset",
                    "3": "increment_and_check_boundary",
                    "5": "increment_and_limit"
                },
                "local_9": {
                    "1": "result_char",
                    "2": "new_value",
                    "28": "result"
                },
                "param_1": {
                    "1": "input_val",
                    "12": "input",
                    "2": "current_value",
                    "4": "value",
                    "8": "input_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003004",
                "FUN_08002ef0",
                "FUN_08002e08",
                "FUN_08002ba8",
                "FUN_08002f40"
            ],
            "code": "\nchar increment_and_check_08002870(char input)\n\n{\n  char result;\n  \n  result = input + '\\x01';\n  if (result == '\\x12') {\n    result = '\\0';\n  }\n  return result;\n}\n\n",
            "current_name": "increment_and_check_08002870",
            "entrypoint": "0x08002870",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002870": "increment_and_check_08002870",
                "local_9": "result",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002896": {
            "additional_data": {
                "FUN_08002896": {
                    "1": "decrement_and_default_to18",
                    "2": "update_character",
                    "3": "decrement_and_set_default_value",
                    "4": "decrement_and_set_default"
                },
                "local_9": {
                    "1": "modified_value",
                    "10": "result",
                    "3": "updated_char",
                    "9": "result_char"
                },
                "param_1": {
                    "1": "input_character",
                    "18": "input_char",
                    "4": "input_value",
                    "5": "input"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002a94"
            ],
            "code": "\nchar decrement_and_set_default_08002896(char input_char)\n\n{\n  char result;\n  \n  result = input_char;\n  if (input_char == '\\0') {\n    result = '\\x12';\n  }\n  return result + -1;\n}\n\n",
            "current_name": "decrement_and_set_default_08002896",
            "entrypoint": "0x08002896",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002896": "decrement_and_set_default_08002896",
                "local_9": "result",
                "param_1": "input_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080028bc": {
            "additional_data": {
                "FUN_080028bc": {
                    "1": "perform_operations",
                    "22": "calculate_result",
                    "4": "process_data"
                },
                "FUN_08008cd8": {
                    "1": "perform_intermediate_calculation_1"
                },
                "FUN_08008cdc": {
                    "1": "perform_intermediate_calculation_3"
                },
                "FUN_08008eec": {
                    "1": "perform_intermediate_calculation_2"
                },
                "FUN_08009054": {
                    "1": "final_operation"
                },
                "param_1": {
                    "1": "data_1",
                    "17": "input_1",
                    "2": "input_param1",
                    "8": "input1"
                },
                "param_2": {
                    "1": "value2",
                    "17": "input_2",
                    "2": "input_param2",
                    "8": "input2"
                },
                "param_3": {
                    "1": "param",
                    "17": "input_3",
                    "2": "input_param3",
                    "7": "input3"
                },
                "uVar1": {
                    "1": "temp_result1",
                    "11": "result1",
                    "18": "result_1"
                },
                "uVar2": {
                    "1": "temp_result2",
                    "11": "result2",
                    "18": "result_2"
                }
            },
            "called": [
                "FUN_08009054",
                "FUN_08008cd8",
                "FUN_08008eec",
                "FUN_08008cdc"
            ],
            "calling": [
                "FUN_08002c18"
            ],
            "code": "\nundefined4 calculate_result_080028bc(undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  \n  result_1 = FUN_08008eec(input_2,input_2);\n  result_2 = FUN_08008eec(input_1,input_1);\n  result_1 = FUN_08008cd8(result_1,result_2);\n  result_2 = FUN_08008cdc(input_3,input_3);\n  result_1 = FUN_08009054(result_1,result_2);\n  return result_1;\n}\n\n",
            "current_name": "calculate_result_080028bc",
            "entrypoint": "0x080028bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080028bc": "calculate_result_080028bc",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "uVar1": "result_1",
                "uVar2": "result_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002908": {
            "additional_data": {
                "FUN_08002908": {
                    "1": "process_data",
                    "29": "calculate_result"
                },
                "FUN_08008cd8": {
                    "1": "combine1"
                },
                "FUN_08008cdc": {
                    "1": "add"
                },
                "FUN_08008eec": {
                    "1": "multiply"
                },
                "FUN_08009054": {
                    "1": "combine2"
                },
                "param_1": {
                    "1": "input_param_1",
                    "14": "input_1",
                    "2": "input_value_1",
                    "4": "value1",
                    "8": "input1"
                },
                "param_2": {
                    "1": "input_param_2",
                    "14": "input_2",
                    "2": "value_2",
                    "4": "value2",
                    "8": "input2"
                },
                "param_3": {
                    "1": "input_param_3",
                    "14": "input_3",
                    "2": "value_3",
                    "4": "value3",
                    "8": "input3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "14": "input_4",
                    "2": "input_value_4",
                    "4": "value4",
                    "8": "input4"
                },
                "uVar1": {
                    "1": "intermediate_result_1",
                    "10": "result1",
                    "17": "result_1",
                    "2": "temp1"
                },
                "uVar2": {
                    "1": "intermediate_result_2",
                    "10": "result2",
                    "17": "result_2",
                    "2": "temp2"
                }
            },
            "called": [
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_08008eec",
                "FUN_08008cdc"
            ],
            "calling": [
                "FUN_08002c18"
            ],
            "code": "\nundefined4 calculate_result_08002908(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  \n  result_1 = FUN_08008cdc(input_3,input_3);\n  result_1 = FUN_08008eec(result_1,input_4);\n  result_2 = FUN_08008eec(input_1,input_1);\n  result_1 = FUN_08008cd8(result_1,result_2);\n  result_2 = FUN_08008eec(input_2,input_2);\n  result_1 = FUN_08008cdc(result_1,result_2);\n  result_2 = FUN_08008eec(input_3,0x40800000);\n  result_1 = FUN_08009054(result_1,result_2);\n  return result_1;\n}\n\n",
            "current_name": "calculate_result_08002908",
            "entrypoint": "0x08002908",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002908": "calculate_result_08002908",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_1",
                "uVar2": "result_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002978": {
            "additional_data": {
                "F1": {
                    "1": "perform_calculation"
                },
                "FUN_08002978": {
                    "1": "perform_reverse_operation",
                    "18": "calculate_result"
                },
                "FUN_08008590": {
                    "1": "calculate_first_value"
                },
                "FUN_08008c30": {
                    "1": "calculate_sixth_value"
                },
                "FUN_08008cd8": {
                    "1": "calculate_third_value"
                },
                "FUN_08008cdc": {
                    "1": "calculate_fifth_value"
                },
                "FUN_08008eec": {
                    "1": "calculate_fourth_value"
                },
                "FUN_080098d0": {
                    "1": "calculate_second_value"
                },
                "param_1": {
                    "1": "input_param_1",
                    "19": "input1",
                    "2": "input_param1",
                    "8": "input_1"
                },
                "param_2": {
                    "1": "input_param_2",
                    "19": "input2",
                    "2": "input_param2",
                    "8": "input_2"
                },
                "param_3": {
                    "1": "third_value",
                    "19": "input3",
                    "2": "input_param3",
                    "8": "input_3"
                },
                "uVar1": {
                    "1": "processed_input_1",
                    "22": "result1",
                    "7": "result_1"
                },
                "uVar2": {
                    "1": "output_2",
                    "22": "result2",
                    "7": "result_2"
                },
                "uVar3": {
                    "1": "result",
                    "17": "result3",
                    "3": "result_3",
                    "9": "final_result"
                }
            },
            "called": [
                "FUN_08008590",
                "FUN_080098d0",
                "FUN_08008cd8",
                "FUN_08008eec",
                "FUN_08008cdc",
                "FUN_08008c30"
            ],
            "calling": [
                "FUN_08003004",
                "FUN_08002afc",
                "FUN_080029d8"
            ],
            "code": "\nundefined4 calculate_result_08002978(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined8 result3;\n  \n  result1 = FUN_08008eec(input2,input2);\n  result2 = FUN_08008cdc(input1,input1);\n  result2 = FUN_08008eec(result2,input3);\n  result1 = FUN_08008cd8(result1,result2);\n  result3 = FUN_08008590(result1);\n  result3 = FUN_080098d0((int)result3,(int)((ulonglong)result3 >> 0x20));\n  result1 = FUN_08008c30((int)result3,(int)((ulonglong)result3 >> 0x20));\n  return result1;\n}\n\n",
            "current_name": "calculate_result_08002978",
            "entrypoint": "0x08002978",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002978": "calculate_result_08002978",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080029d8": {
            "additional_data": {
                "DAT_20000edc": {
                    "1": "constant_value"
                },
                "FUN_08002978": {
                    "1": "calculate_new_value",
                    "2": "calculate_value"
                },
                "FUN_080029d8": {
                    "1": "update_param_data",
                    "2": "update_data",
                    "3": "initialize_data",
                    "4": "process_params",
                    "5": "update_parameters"
                },
                "FUN_08009214": {
                    "1": "check_data_validity1",
                    "2": "check_condition1"
                },
                "FUN_08009228": {
                    "1": "check_compatibility"
                },
                "FUN_08009264": {
                    "1": "check_data_validity2",
                    "2": "check_condition2"
                },
                "iVar1": {
                    "1": "result1",
                    "2": "status",
                    "27": "result"
                },
                "param_1": {
                    "1": "input_param",
                    "3": "status",
                    "6": "arg1",
                    "9": "param1"
                },
                "param_2": {
                    "1": "source_param",
                    "2": "input1",
                    "3": "param2",
                    "4": "struct1"
                },
                "param_3": {
                    "1": "other_struct_ptr",
                    "2": "input2",
                    "3": "param3",
                    "4": "data2"
                },
                "uVar2": {
                    "1": "updated_value1",
                    "2": "new_data",
                    "3": "temp_var1",
                    "7": "updated_value"
                },
                "uVar3": {
                    "1": "processed_value2",
                    "2": "temp_param",
                    "3": "default_value"
                }
            },
            "called": [
                "FUN_08009228",
                "FUN_08009214",
                "FUN_08009264",
                "FUN_08002978"
            ],
            "calling": [
                "FUN_08002a94"
            ],
            "code": "\nvoid update_parameters_080029d8(undefined4 param1,int data1,int data2)\n\n{\n  int result;\n  undefined4 updated_value;\n  undefined4 temp_var2;\n  \n  if (((data1 != 0) && (data2 != 0)) &&\n     (result = FUN_08009214(*(undefined4 *)(data1 + 0x18),*(undefined4 *)(data1 + 0x1c)),\n     result == 0)) {\n    if ((*(char *)(data1 + 0x25) == '\\0') &&\n       (result = FUN_08009264(*(undefined4 *)(data1 + 0x1c),*(undefined4 *)(data2 + 0x18)),\n       result != 0)) {\n      temp_var2 = *(undefined4 *)(data1 + 0x1c);\n      updated_value = FUN_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(data2 + 0x18),\n                           *(undefined4 *)(data1 + 0x20));\n      result = FUN_08009228(temp_var2,updated_value);\n      if (result == 0) {\n        updated_value = FUN_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(data2 + 0x18),\n                             *(undefined4 *)(data1 + 0x20));\n      }\n      else {\n        updated_value = *(undefined4 *)(data1 + 0x1c);\n      }\n      *(undefined4 *)(data1 + 0x18) = updated_value;\n    }\n    else {\n      *(undefined4 *)(data1 + 0x18) = *(undefined4 *)(data1 + 0x1c);\n    }\n    *(undefined *)(data1 + 0x24) = 1;\n  }\n  return;\n}\n\n",
            "current_name": "update_parameters_080029d8",
            "entrypoint": "0x080029d8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080029d8": "update_parameters_080029d8",
                "iVar1": "result",
                "param_1": "param1",
                "param_2": "data1",
                "param_3": "data2",
                "uVar2": "updated_value",
                "uVar3": "temp_var2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002a94": {
            "additional_data": {
                "FUN_08002896": {
                    "1": "get_next_value",
                    "3": "process_byte"
                },
                "FUN_080029d8": {
                    "1": "copy_memory",
                    "6": "copy_data"
                },
                "FUN_08002a94": {
                    "1": "extract_data",
                    "20": "process_data",
                    "4": "decode_data"
                },
                "local_14": {
                    "1": "current_data_chunk",
                    "2": "current_block",
                    "3": "current_address"
                },
                "local_18": {
                    "1": "previous_data_chunk",
                    "2": "previous_pointer",
                    "4": "previous_data"
                },
                "local_9": {
                    "1": "stop_byte",
                    "13": "current_byte",
                    "2": "data_byte",
                    "3": "initial_byte",
                    "4": "byte_value"
                },
                "param_1": {
                    "1": "data",
                    "17": "input_byte"
                }
            },
            "called": [
                "FUN_08002896",
                "FUN_080029d8"
            ],
            "calling": [
                "FUN_08002edc"
            ],
            "code": "\nvoid process_data_08002a94(void)\n\n{\n  undefined *puVar1;\n  undefined *previous_ptr;\n  undefined *current_ptr;\n  byte current_byte;\n  \n  current_byte = DAT_20000cf0;\n  previous_ptr = (undefined *)0x0;\n  current_ptr = (undefined *)0x0;\n  while (puVar1 = current_ptr, current_byte != DAT_20000cf1) {\n    current_byte = FUN_08002896(current_byte);\n    current_ptr = previous_ptr;\n    FUN_080029d8(&DAT_20000870 + (uint)current_byte * 0x40,previous_ptr,puVar1);\n    previous_ptr = &DAT_20000870 + (uint)current_byte * 0x40;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08002a94",
            "entrypoint": "0x08002a94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002a94": "process_data_08002a94",
                "local_14": "current_ptr",
                "local_18": "previous_ptr",
                "local_9": "current_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002afc": {
            "additional_data": {
                "FUC_08002978": {
                    "1": "calculate_value"
                },
                "FUC_08009214": {
                    "1": "is_value_valid"
                },
                "FUC_08009228": {
                    "1": "is_param_valid"
                },
                "FUN_08002978": {
                    "1": "calculate_value"
                },
                "FUN_08002afc": {
                    "1": "update_data",
                    "3": "update_parameters",
                    "4": "check_and_update_params"
                },
                "FUN_08009214": {
                    "1": "is_value_zero"
                },
                "FUN_08009228": {
                    "1": "is_valid_output_param"
                },
                "iVar1": {
                    "2": "status",
                    "21": "result",
                    "3": "result1",
                    "4": "return_value"
                },
                "param_1": {
                    "1": "data_ptr1",
                    "2": "source_param",
                    "3": "param1",
                    "4": "input1",
                    "7": "input_param"
                },
                "param_2": {
                    "1": "value2",
                    "2": "arg2",
                    "3": "param2",
                    "4": "input2",
                    "7": "output_param"
                },
                "uVar2": {
                    "1": "modified_value_1",
                    "2": "result2",
                    "5": "updated_value1",
                    "6": "temp_var1",
                    "7": "updated_value"
                },
                "uVar3": {
                    "1": "backup_value",
                    "2": "result3",
                    "5": "updated_value2",
                    "6": "temp_var2"
                }
            },
            "called": [
                "FUN_08009228",
                "FUN_08009214",
                "FUN_08002978"
            ],
            "calling": [
                "FUN_08002ba8"
            ],
            "code": "\nvoid check_and_update_params_08002afc(int input_param,int output_param)\n\n{\n  int result;\n  undefined4 updated_value;\n  undefined4 temp_var2;\n  \n  if (((input_param != 0) && (*(char *)(input_param + 0x25) == '\\0')) &&\n     (result = FUN_08009228(*(undefined4 *)(input_param + 0x18),*(undefined4 *)(output_param + 0x18)),\n     result != 0)) {\n    temp_var2 = *(undefined4 *)(output_param + 0x18);\n    updated_value = FUN_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(input_param + 0x18),\n                         *(undefined4 *)(input_param + 0x20));\n    result = FUN_08009228(temp_var2,updated_value);\n    if (result == 0) {\n      updated_value = FUN_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(input_param + 0x18),\n                           *(undefined4 *)(input_param + 0x20));\n    }\n    else {\n      updated_value = *(undefined4 *)(output_param + 0x18);\n    }\n    result = FUN_08009214(updated_value,*(undefined4 *)(output_param + 0x18));\n    if (result == 0) {\n      *(undefined4 *)(output_param + 0x18) = updated_value;\n      *(undefined *)(output_param + 0x24) = 1;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "check_and_update_params_08002afc",
            "entrypoint": "0x08002afc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002afc": "check_and_update_params_08002afc",
                "iVar1": "result",
                "param_1": "input_param",
                "param_2": "output_param",
                "uVar2": "updated_value",
                "uVar3": "temp_var2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ba8": {
            "additional_data": {
                "FUN_08002870": {
                    "1": "update_character",
                    "2": "update_data",
                    "3": "update_value"
                },
                "FUN_08002afc": {
                    "1": "handle_data",
                    "2": "process_sub_function",
                    "4": "copy_data"
                },
                "FUN_08002ba8": {
                    "1": "decode_and_process_data",
                    "21": "process_data"
                },
                "local_10": {
                    "1": "current_value",
                    "10": "current_data",
                    "2": "current_address",
                    "4": "current_ptr"
                },
                "local_14": {
                    "1": "temp_ptr1",
                    "10": "previous_data",
                    "2": "previous_address",
                    "4": "previous_ptr"
                },
                "local_9": {
                    "1": "data_byte",
                    "11": "byte_value",
                    "14": "current_byte",
                    "3": "current_value"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "input"
                },
                "param_2": {
                    "1": "new_data",
                    "2": "output"
                },
                "puVar2": {
                    "1": "previous_data_copy2",
                    "2": "previous_pointer",
                    "3": "previous_data_ptr"
                },
                "puVar3": {
                    "1": "previous_pointer",
                    "2": "previous_data_copy"
                },
                "uVar1": {
                    "1": "data_byte_as_int",
                    "2": "current_value"
                }
            },
            "called": [
                "FUN_08002afc",
                "FUN_08002870"
            ],
            "calling": [
                "FUN_08002edc"
            ],
            "code": "\nvoid process_data_08002ba8(void)\n\n{\n  uint unsigned_value;\n  undefined *previous_data_ptr;\n  undefined *previous_data_copy;\n  undefined *previous_data;\n  undefined *current_data;\n  byte current_byte;\n  \n  previous_data = (undefined *)0x0;\n  current_data = (undefined *)0x0;\n  current_byte = DAT_20000cf1;\n  previous_data_copy = (undefined *)0x0;\n  while (previous_data_ptr = previous_data, current_byte != DAT_20000cf0) {\n    previous_data = current_data;\n    unsigned_value = (uint)current_byte;\n    FUN_08002afc(previous_data_ptr,current_data,&DAT_20000870 + unsigned_value * 0x40);\n    current_byte = FUN_08002870(current_byte);\n    previous_data_copy = previous_data_ptr;\n    current_data = &DAT_20000870 + unsigned_value * 0x40;\n  }\n  FUN_08002afc(previous_data,current_data,0,previous_data,previous_data_copy);\n  return;\n}\n\n",
            "current_name": "process_data_08002ba8",
            "entrypoint": "0x08002ba8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ba8": "process_data_08002ba8",
                "local_10": "current_data",
                "local_14": "previous_data",
                "local_9": "current_byte",
                "puVar2": "previous_data_ptr",
                "puVar3": "previous_data_copy",
                "uVar1": "unsigned_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002c18": {
            "additional_data": {
                "FUN_08002c18": {
                    "1": "compute_and_set_values",
                    "2": "calculate_data_range",
                    "3": "calculate_data_size"
                },
                "iVar2": {
                    "1": "result_2",
                    "11": "result2",
                    "2": "value2",
                    "3": "var2"
                },
                "local_1c": {
                    "1": "limit",
                    "2": "min_value"
                },
                "local_20": {
                    "1": "result",
                    "2": "local_var1",
                    "6": "difference"
                },
                "param_1": {
                    "1": "input_ptr",
                    "2": "base_address",
                    "3": "input_param",
                    "4": "data_structure"
                },
                "param_2": {
                    "1": "size1",
                    "2": "arg2",
                    "3": "value1",
                    "4": "param_a",
                    "6": "param_2",
                    "9": "param2"
                },
                "param_3": {
                    "1": "param_value3",
                    "2": "arg3",
                    "3": "value2",
                    "4": "param_b",
                    "6": "param_3",
                    "9": "param3"
                },
                "uVar1": {
                    "1": "calc_result_1",
                    "19": "result1",
                    "2": "result_1",
                    "3": "var1"
                },
                "uVar3": {
                    "1": "result_c",
                    "11": "result3",
                    "2": "value3",
                    "3": "var3",
                    "8": "result2"
                },
                "uVar4": {
                    "1": "param4_result",
                    "11": "result4",
                    "2": "value4",
                    "3": "var4",
                    "8": "result3"
                },
                "uVar5": {
                    "1": "result_5",
                    "11": "result5",
                    "2": "value5",
                    "3": "var5",
                    "8": "result4"
                },
                "uVar6": {
                    "1": "unsigned_var",
                    "10": "result6",
                    "2": "value6",
                    "3": "var6",
                    "5": "result5"
                },
                "uVar7": {
                    "1": "value7",
                    "10": "result7",
                    "2": "result",
                    "3": "var7",
                    "5": "result6"
                }
            },
            "called": [
                "FUN_08008590",
                "FUN_08002908",
                "FUN_08008e44",
                "FUN_0800856c",
                "FUN_080094c0",
                "FUN_08008ba0",
                "FUN_08009318",
                "FUN_08008e3c",
                "FUN_08008eec",
                "FUN_080028bc",
                "FUN_08008640",
                "FUN_08008bf0"
            ],
            "calling": [
                "FUN_08002e08"
            ],
            "code": "\nvoid calculate_data_size_08002c18(int data_structure,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 result1;\n  int result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  uint result6;\n  undefined8 result7;\n  int difference;\n  uint calculated_value;\n  \n  result1 = FUN_08008e3c(*(undefined4 *)(data_structure + 0x3c));\n  result1 = FUN_08008eec(result1,param2);\n  result7 = FUN_08008590(result1);\n  result7 = FUN_08009318((int)result7,(int)((ulonglong)result7 >> 0x20));\n  result1 = FUN_08008bf0((int)result7,(int)((ulonglong)result7 >> 0x20));\n  *(undefined4 *)(data_structure + 0x28) = result1;\n  result1 = FUN_08008e3c(*(undefined4 *)(data_structure + 0x3c));\n  result1 = FUN_08008eec(result1,param3);\n  result7 = FUN_08008590(result1);\n  result7 = FUN_08009318((int)result7,(int)((ulonglong)result7 >> 0x20));\n  result1 = FUN_08008bf0((int)result7,(int)((ulonglong)result7 >> 0x20));\n  *(undefined4 *)(data_structure + 0x2c) = result1;\n  result7 = FUN_0800856c(*(int *)(data_structure + 0x30) * 0x32);\n  result7 = FUN_08008640((int)result7,(int)((ulonglong)result7 >> 0x20),0,0x404e0000);\n  result2 = FUN_08008ba0((int)result7,(int)((ulonglong)result7 >> 0x20));\n  result1 = FUN_08008e3c(*(undefined4 *)(data_structure + 0x28));\n  result3 = FUN_08008e3c(*(undefined4 *)(data_structure + 0x3c));\n  result4 = FUN_08008e44(result2);\n  result1 = FUN_080028bc(result1,result3,result4);\n  result7 = FUN_08008590(result1);\n  result7 = FUN_08009318((int)result7,(int)((ulonglong)result7 >> 0x20));\n  calculated_value = FUN_08008ba0((int)result7,(int)((ulonglong)result7 >> 0x20));\n  result1 = FUN_08008e3c(*(undefined4 *)(data_structure + 0x3c));\n  result3 = FUN_08008e3c(*(undefined4 *)(data_structure + 0x2c));\n  result4 = FUN_08008e44(-result2);\n  result1 = FUN_080028bc(result1,result3,result4);\n  result7 = FUN_08008590(result1);\n  result7 = FUN_080094c0((int)result7,(int)((ulonglong)result7 >> 0x20));\n  difference = FUN_08008ba0((int)result7,(int)((ulonglong)result7 >> 0x20));\n  difference = (*(int *)(data_structure + 0x10) - calculated_value) - difference;\n  if (difference < 0) {\n    result1 = FUN_08008e3c(*(undefined4 *)(data_structure + 0x28));\n    result3 = FUN_08008e3c(*(undefined4 *)(data_structure + 0x2c));\n    result4 = FUN_08008e44(result2);\n    result5 = FUN_08008e44(*(undefined4 *)(data_structure + 0x10));\n    result1 = FUN_08002908(result1,result3,result4,result5);\n    result7 = FUN_08008590(result1);\n    result7 = FUN_08009318((int)result7,(int)((ulonglong)result7 >> 0x20));\n    result6 = FUN_08008ba0((int)result7,(int)((ulonglong)result7 >> 0x20));\n    result6 = result6 & ~((int)result6 >> 0x1f);\n    calculated_value = *(uint *)(data_structure + 0x10);\n    if ((int)result6 <= (int)*(uint *)(data_structure + 0x10)) {\n      calculated_value = result6;\n    }\n    difference = 0;\n  }\n  *(uint *)(data_structure + 0x34) = calculated_value;\n  *(uint *)(data_structure + 0x38) = difference + calculated_value;\n  return;\n}\n\n",
            "current_name": "calculate_data_size_08002c18",
            "entrypoint": "0x08002c18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002c18": "calculate_data_size_08002c18",
                "iVar2": "result2",
                "local_1c": "calculated_value",
                "local_20": "difference",
                "param_1": "data_structure",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result1",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "result7"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002e08": {
            "additional_data": {
                "&DAT_20000888": {
                    "1": "data2"
                },
                "&DAT_20000894": {
                    "1": "data1"
                },
                "DAT_20000cf0": {
                    "1": "end_value"
                },
                "DAT_20000cf1": {
                    "1": "start_value"
                },
                "FUN_08002870": {
                    "1": "get_next_value"
                },
                "FUN_08002c18": {
                    "1": "process_result",
                    "2": "update_data"
                },
                "FUN_08002e08": {
                    "30": "process_data"
                },
                "FUN_08009054": {
                    "1": "calculate_result"
                },
                "byte local_11": {
                    "1": "current_byte"
                },
                "iVar3": {
                    "1": "element_offset",
                    "17": "index",
                    "2": "array_index",
                    "5": "offset"
                },
                "int iVar3": {
                    "1": "index"
                },
                "local_11": {
                    "1": "source_byte",
                    "13": "current_byte",
                    "3": "current_value",
                    "4": "byte_value"
                },
                "local_18": {
                    "1": "current_record",
                    "10": "current_data",
                    "11": "data_pointer",
                    "6": "data_ptr"
                },
                "uVar1": {
                    "1": "calculated_value1",
                    "23": "result1"
                },
                "uVar2": {
                    "1": "result_2",
                    "23": "result2"
                },
                "undefined *local_18": {
                    "1": "data_ptr"
                },
                "undefined4 uVar1": {
                    "1": "result1"
                },
                "undefined4 uVar2": {
                    "1": "result2"
                }
            },
            "called": [
                "FUN_08009054",
                "FUN_08002870",
                "FUN_08002c18"
            ],
            "calling": [
                "FUN_08002edc"
            ],
            "code": "\nvoid process_data_08002e08(void)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int index;\n  undefined *data_pointer;\n  byte current_byte;\n  \n  data_pointer = (undefined *)0x0;\n  current_byte = DAT_20000cf1;\n  while (current_byte != DAT_20000cf0) {\n    index = (uint)current_byte * 0x40;\n    if ((data_pointer != (undefined *)0x0) &&\n       ((data_pointer[0x24] != '\\0' || ((&DAT_20000894)[index] != '\\0')))) {\n      result1 = FUN_08009054(*(undefined4 *)(data_pointer + 0x18),*(undefined4 *)(data_pointer + 0x14));\n      result2 = FUN_08009054(*(undefined4 *)(&DAT_20000888 + index),*(undefined4 *)(data_pointer + 0x14));\n      FUN_08002c18(data_pointer,result1,result2);\n      data_pointer[0x24] = 0;\n    }\n    current_byte = FUN_08002870(current_byte);\n    data_pointer = &DAT_20000870 + index;\n  }\n  result1 = FUN_08009054(*(undefined4 *)(data_pointer + 0x18),*(undefined4 *)(data_pointer + 0x14));\n  result2 = FUN_08009054(0,*(undefined4 *)(data_pointer + 0x14));\n  FUN_08002c18(data_pointer,result1,result2);\n  data_pointer[0x24] = 0;\n  return;\n}\n\n",
            "current_name": "process_data_08002e08",
            "entrypoint": "0x08002e08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002e08": "process_data_08002e08",
                "iVar3": "index",
                "local_11": "current_byte",
                "local_18": "data_pointer",
                "uVar1": "result1",
                "uVar2": "result2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002edc": {
            "additional_data": {
                "FUN_08002a94": {
                    "1": "execute_subfunction_b",
                    "2": "initialize_data_structures",
                    "3": "initialize_system"
                },
                "FUN_08002ba8": {
                    "1": "perform_initialization",
                    "10": "configure_settings",
                    "2": "load_data"
                },
                "FUN_08002e08": {
                    "1": "configure_settings",
                    "2": "perform_action",
                    "3": "do_something",
                    "6": "perform_cleanup"
                },
                "FUN_08002edc": {
                    "1": "execute_all_functions",
                    "3": "initialize_components",
                    "4": "execute_main_function",
                    "5": "initialize_application",
                    "6": "initialize_program"
                }
            },
            "called": [
                "FUN_08002e08",
                "FUN_08002a94",
                "FUN_08002ba8"
            ],
            "calling": [
                "FUN_08003618",
                "FUN_08003004"
            ],
            "code": "\nvoid initialize_program_08002edc(void)\n\n{\n  FUN_08002a94();\n  FUN_08002ba8();\n  FUN_08002e08();\n  return;\n}\n\n",
            "current_name": "initialize_program_08002edc",
            "entrypoint": "0x08002edc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002edc": "initialize_program_08002edc"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ef0": {
            "additional_data": {
                "DAT_20000cf0": {
                    "1": "input_data"
                },
                "DAT_20000cf1": {
                    "1": "updated_value",
                    "2": "previous_data"
                },
                "DAT_20000cf2": {
                    "1": "new_data"
                },
                "FUN_08002870": {
                    "1": "calculate_checksum",
                    "13": "process_data",
                    "2": "get_character",
                    "3": "process_character"
                },
                "FUN_08002ef0": {
                    "1": "update_data_and_call_function",
                    "25": "initialize_data",
                    "4": "update_data"
                },
                "param_1": {
                    "1": "param",
                    "2": "input_param",
                    "3": "input_char",
                    "9": "input_data"
                }
            },
            "called": [
                "FUN_08002870"
            ],
            "calling": [
                "FUN_08002f24"
            ],
            "code": "\nvoid initialize_data_08002ef0(void)\n\n{\n  DAT_20000cf1 = DAT_20000cf0;\n  DAT_20000cf2 = FUN_08002870(DAT_20000cf0);\n  return;\n}\n\n",
            "current_name": "initialize_data_08002ef0",
            "entrypoint": "0x08002ef0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ef0": "initialize_data_08002ef0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002f24": {
            "additional_data": {
                "FUN_08002ef0": {
                    "1": "perform_operation",
                    "14": "perform_initialization",
                    "2": "perform_preprocessing",
                    "3": "execute_initialization"
                },
                "FUN_08002f24": {
                    "1": "execute_initialization_process",
                    "18": "initialize_data",
                    "2": "initialize_program",
                    "3": "initialize_data_structures"
                },
                "FUN_0800b430": {
                    "1": "copy_data_to_memory",
                    "2": "copy_memory",
                    "5": "clear_memory",
                    "8": "initialize_memory"
                },
                "param_1": {
                    "1": "source",
                    "2": "memory_array"
                },
                "param_2": {
                    "1": "source_value",
                    "2": "param",
                    "4": "param_2"
                },
                "param_3": {
                    "1": "length",
                    "2": "block_size",
                    "5": "size"
                }
            },
            "called": [
                "FUN_0800b430",
                "FUN_08002ef0"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid initialize_data_08002f24(void)\n\n{\n  FUN_08002ef0();\n  FUN_0800b430(&DAT_20000cf4,0,0x1c);\n  return;\n}\n\n",
            "current_name": "initialize_data_08002f24",
            "entrypoint": "0x08002f24",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002f24": "initialize_data_08002f24"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002f40": {
            "additional_data": {
                "DAT_20000cf0": {
                    "1": "original_data",
                    "2": "current_data"
                },
                "DAT_20000cf1": {
                    "1": "data2",
                    "2": "current_data"
                },
                "FUN_08002870": {
                    "1": "transform_data",
                    "2": "process_character",
                    "4": "reverse_char",
                    "5": "reverse_data",
                    "6": "reverse_character"
                },
                "FUN_08002f40": {
                    "1": "update_dat_if_not_equal",
                    "2": "check_and_update_data",
                    "3": "update_if_different",
                    "4": "update_data_if_mismatch",
                    "8": "update_data_if_different"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "byte_to_reverse",
                    "4": "character",
                    "6": "data"
                }
            },
            "called": [
                "FUN_08002870"
            ],
            "calling": [
                "FUN_080053a0"
            ],
            "code": "\nvoid update_data_if_different_08002f40(void)\n\n{\n  if (DAT_20000cf0 != DAT_20000cf1) {\n    DAT_20000cf1 = FUN_08002870(DAT_20000cf1);\n  }\n  return;\n}\n\n",
            "current_name": "update_data_if_different_08002f40",
            "entrypoint": "0x08002f40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002f40": "update_data_if_different_08002f40"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002f74": {
            "additional_data": {
                "&DAT_20000870": {
                    "1": "data_block_start"
                },
                "DAT_20000870": {
                    "1": "data_entry_table"
                },
                "DAT_20000cf0": {
                    "1": "current_index",
                    "2": "data_entry_start",
                    "3": "start_index"
                },
                "DAT_20000cf1": {
                    "1": "total_index",
                    "2": "data_entry_index",
                    "3": "end_index"
                },
                "FUN_08002f74": {
                    "1": "get_active_pointer",
                    "2": "get_active_data_pointer",
                    "3": "get_data_pointer",
                    "4": "get_current_data_block"
                },
                "puVar1": {
                    "1": "current_address_pointer",
                    "2": "result",
                    "3": "data_ptr",
                    "4": "result_pointer"
                }
            },
            "called": [],
            "calling": [
                "FUN_080053a0",
                "FUN_08002fd4"
            ],
            "code": "\nundefined * get_current_data_block_08002f74(void)\n\n{\n  undefined *result_pointer;\n  \n  if (DAT_20000cf0 == DAT_20000cf1) {\n    result_pointer = (undefined *)0x0;\n  }\n  else {\n    result_pointer = &DAT_20000870 + (uint)DAT_20000cf1 * 0x40;\n  }\n  return result_pointer;\n}\n\n",
            "current_name": "get_current_data_block_08002f74",
            "entrypoint": "0x08002f74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002f74": "get_current_data_block_08002f74",
                "puVar1": "result_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002fac": {
            "additional_data": {
                "DAT_20000cf1": {
                    "1": "data_1",
                    "15": "data1",
                    "2": "first_value",
                    "3": "variable1",
                    "4": "first_data"
                },
                "DAT_20000cf2": {
                    "1": "data_2",
                    "15": "data2",
                    "2": "second_value",
                    "3": "variable2",
                    "4": "second_data"
                },
                "FUN_08002fac": {
                    "1": "are_dat_equals",
                    "2": "check_data_equality",
                    "3": "compare_data",
                    "5": "check_equality",
                    "6": "are_data_equal"
                },
                "cf1": {
                    "1": "value1"
                },
                "cf2": {
                    "1": "value2"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001e98"
            ],
            "code": "\nbool are_data_equal_08002fac(void)\n\n{\n  return DAT_20000cf1 == DAT_20000cf2;\n}\n\n",
            "current_name": "are_data_equal_08002fac",
            "entrypoint": "0x08002fac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002fac": "are_data_equal_08002fac"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002fd4": {
            "additional_data": {
                "DAT_20000ea8": {
                    "1": "return_flag",
                    "2": "exit_flag"
                },
                "DAT_20000ea9": {
                    "1": "status_flag"
                },
                "FUN_08002f74": {
                    "1": "get_pointer",
                    "2": "get_input",
                    "3": "get_status",
                    "4": "get_return_value",
                    "5": "get_data"
                },
                "FUN_08002fd4": {
                    "1": "execute_process",
                    "14": "process_data"
                },
                "FUN_08003a74": {
                    "1": "execute_operation",
                    "2": "execute_action",
                    "4": "perform_operation",
                    "7": "perform_action"
                },
                "iVar1": {
                    "1": "status",
                    "12": "result",
                    "3": "return_value"
                }
            },
            "called": [
                "FUN_08003a74",
                "FUN_08002f74"
            ],
            "calling": [
                "FUN_0800525c",
                "FUN_08000220",
                "FUN_080005b4",
                "FUN_08002408",
                "FUN_080024c4"
            ],
            "code": "\nvoid process_data_08002fd4(void)\n\n{\n  int result;\n  \n  while ((result = FUN_08002f74(), result != 0 || (DAT_20000ea9 == '\\x03'))) {\n    FUN_08003a74();\n    if (DAT_20000ea8 != '\\0') {\n      return;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08002fd4",
            "entrypoint": "0x08002fd4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002fd4": "process_data_08002fd4",
                "iVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003004": {
            "additional_data": {
                "FUN_08003004": {
                    "1": "calculate_result",
                    "2": "calculate_quality_score",
                    "5": "process_data"
                },
                "iVar10": {
                    "1": "array_index",
                    "18": "index",
                    "2": "result10",
                    "8": "offset"
                },
                "iVar12": {
                    "1": "absolute_offset",
                    "15": "difference",
                    "2": "abs_diff",
                    "6": "diff"
                },
                "iVar2": {
                    "1": "variable2",
                    "17": "result2",
                    "2": "result1_int",
                    "3": "value1"
                },
                "iVar3": {
                    "1": "variable3",
                    "17": "result3",
                    "2": "result2_int",
                    "3": "value2"
                },
                "iVar4": {
                    "1": "score3",
                    "17": "result4",
                    "2": "result3_int",
                    "3": "value3"
                },
                "local_1c": {
                    "1": "processed_value2",
                    "2": "temp_var2",
                    "3": "local_variable2",
                    "6": "local_var2"
                },
                "local_20": {
                    "1": "alternative_result",
                    "2": "temp4",
                    "3": "local_variable1",
                    "6": "local_var1"
                },
                "param_1": {
                    "1": "input_param_1",
                    "2": "input_param1",
                    "7": "input1",
                    "8": "value1"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "input_param2",
                    "7": "input2",
                    "8": "value2"
                },
                "param_3": {
                    "1": "arg3",
                    "2": "input_param3",
                    "7": "input3",
                    "8": "value3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "2": "input_param4",
                    "7": "input4",
                    "8": "value4"
                },
                "param_5": {
                    "1": "param_5",
                    "19": "flag",
                    "8": "param5"
                },
                "puVar11": {
                    "1": "ptr_scores",
                    "11": "pointer",
                    "2": "data_ptr",
                    "3": "ptr"
                },
                "uVar1": {
                    "1": "variable1",
                    "2": "result_1",
                    "26": "result1"
                },
                "uVar13": {
                    "1": "temp_max",
                    "2": "max_value",
                    "3": "max_difference",
                    "5": "max_diff",
                    "6": "min_value"
                },
                "uVar14": {
                    "1": "calculation1",
                    "2": "temp3",
                    "3": "temp_result1",
                    "4": "result9",
                    "8": "temp1"
                },
                "uVar15": {
                    "1": "floating_result2",
                    "2": "result15",
                    "3": "temp_result2",
                    "4": "result10",
                    "8": "temp2"
                },
                "uVar16": {
                    "1": "temp_value3",
                    "2": "result16",
                    "3": "temp_result3",
                    "4": "result11",
                    "8": "temp3"
                },
                "uVar5": {
                    "1": "value2",
                    "17": "result5",
                    "2": "result_5",
                    "9": "result2"
                },
                "uVar6": {
                    "1": "value3",
                    "17": "result6",
                    "2": "result_6",
                    "9": "result3"
                },
                "uVar7": {
                    "1": "temp4",
                    "17": "result7",
                    "2": "temp1",
                    "6": "result4"
                },
                "uVar8": {
                    "1": "variable8",
                    "17": "result8",
                    "2": "temp2",
                    "6": "result5"
                },
                "uVar9": {
                    "1": "result_9",
                    "17": "max_value",
                    "2": "max_result",
                    "3": "result9"
                }
            },
            "called": [
                "FUN_080095b8",
                "FUN_08009054",
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_08009318",
                "FUN_08008ba0",
                "FUN_08002870",
                "FUN_08008b60",
                "FUN_08009264",
                "FUN_08008894",
                "FUN_08008640",
                "FUN_08008bf0",
                "FUN_08008b24",
                "FUN_08008590",
                "FUN_080082d0",
                "FUN_08009228",
                "FUN_080098d0",
                "FUN_08008eec",
                "FUN_08009250",
                "FUN_08002978",
                "FUN_08008cdc",
                "FUN_08008c30",
                "FUN_08002edc"
            ],
            "calling": [
                "FUN_08001e98"
            ],
            "code": "\nvoid process_data_08003004(undefined4 value1,undefined4 value2,undefined4 value3,undefined4 value4,\n                 char flag)\n\n{\n  undefined4 result1;\n  int result2;\n  int result3;\n  int result4;\n  undefined4 result5;\n  undefined4 result6;\n  undefined4 result7;\n  undefined4 result8;\n  uint max_value;\n  int index;\n  ushort *pointer;\n  int difference;\n  uint min_value;\n  undefined8 temp1;\n  undefined8 temp2;\n  undefined8 temp3;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  \n  index = (uint)DAT_20000cf0 * 0x40;\n  pointer = (ushort *)(&DAT_20000870 + index);\n  result1 = FUN_08008eec(DAT_20000ebc,value1);\n  temp1 = FUN_08008590(result1);\n  result2 = FUN_080095b8((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n  result1 = FUN_08008eec(DAT_20000ec0,value2);\n  temp1 = FUN_08008590(result1);\n  result3 = FUN_080095b8((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n  result1 = FUN_08008eec(DAT_20000ec4,value3);\n  temp1 = FUN_08008590(result1);\n  result4 = FUN_080095b8((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n  *pointer = 0;\n  if (result2 < DAT_20000cf4) {\n    *pointer = *pointer | 0x20;\n  }\n  if (result3 < DAT_20000cf8) {\n    *pointer = *pointer | 0x880;\n  }\n  if (result4 < DAT_20000cfc) {\n    *pointer = *pointer | 0x200;\n  }\n  difference = result2 - DAT_20000cf4;\n  if (difference < 0) {\n    difference = -difference;\n  }\n  *(int *)(&DAT_20000874 + index) = difference;\n  difference = result3 - DAT_20000cf8;\n  if (difference < 0) {\n    difference = -difference;\n  }\n  *(int *)(&DAT_20000878 + index) = difference;\n  difference = result4 - DAT_20000cfc;\n  if (difference < 0) {\n    difference = -difference;\n  }\n  *(int *)(&DAT_2000087c + index) = difference;\n  max_value = *(uint *)(&DAT_2000087c + index);\n  if (*(uint *)(&DAT_2000087c + index) < *(uint *)(&DAT_20000878 + index)) {\n    max_value = *(uint *)(&DAT_20000878 + index);\n  }\n  min_value = *(uint *)(&DAT_20000874 + index);\n  if (*(uint *)(&DAT_20000874 + index) < max_value) {\n    min_value = max_value;\n  }\n  *(uint *)(&DAT_20000880 + index) = min_value;\n  if (*(int *)(&DAT_20000880 + index) != 0) {\n    result1 = FUN_08008e44(result2 - DAT_20000cf4);\n    result1 = FUN_08009054(result1,DAT_20000ebc);\n    result5 = FUN_08008e44(result3 - DAT_20000cf8);\n    result5 = FUN_08009054(result5,DAT_20000ec0);\n    result6 = FUN_08008e44(result4 - DAT_20000cfc);\n    result6 = FUN_08009054(result6,DAT_20000ec4);\n    result7 = FUN_08008eec(result1,result1);\n    result8 = FUN_08008eec(result5,result5);\n    result7 = FUN_08008cdc(result7,result8);\n    result8 = FUN_08008eec(result6,result6);\n    result7 = FUN_08008cdc(result7,result8);\n    temp1 = FUN_08008590(result7);\n    temp1 = FUN_080098d0((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n    result7 = FUN_08008c30((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n    *(undefined4 *)(&DAT_20000890 + index) = result7;\n    result7 = FUN_08009054(0x3f800000,*(undefined4 *)(&DAT_20000890 + index));\n    if (flag == '\\0') {\n      local_var2 = FUN_08008eec(value4,result7);\n    }\n    else {\n      local_var2 = FUN_08009054(0x3f800000,value4);\n    }\n    result8 = FUN_08008eec(*(undefined4 *)(&DAT_20000890 + index),local_var2);\n    *(undefined4 *)(&DAT_20000884 + index) = result8;\n    result8 = FUN_08008e44(*(undefined4 *)(&DAT_20000880 + index));\n    result8 = FUN_08008eec(result8,local_var2);\n    temp1 = FUN_08008590(result8);\n    temp1 = FUN_08009318((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n    result8 = FUN_08008bf0((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n    *(undefined4 *)(&DAT_200008ac + index) = result8;\n    result8 = FUN_08008e44(*(undefined4 *)(&DAT_20000880 + index));\n    result8 = FUN_08008eec(result8,result7);\n    result8 = FUN_08008eec(result8,DAT_20000edc);\n    result8 = FUN_08009054(result8,0x453b8000);\n    temp1 = FUN_08008590(result8);\n    temp1 = FUN_08009318((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n    result8 = FUN_08008ba0((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n    *(undefined4 *)(&DAT_200008a0 + index) = result8;\n    max_value = FUN_08008eec(result1,result7);\n    result1 = FUN_08008eec(result5,result7);\n    result5 = FUN_08008eec(result6,result7);\n    local_var1 = 0;\n    if ((DAT_20000cf0 != DAT_20000cf1) && (difference = FUN_08009264(DAT_20000d0c,0), difference != 0)) {\n      result6 = FUN_08008eec(DAT_20000d00 ^ 0x80000000,max_value);\n      result7 = FUN_08008eec(DAT_20000d04,result1);\n      result6 = FUN_08008cd8(result6,result7);\n      result7 = FUN_08008eec(DAT_20000d08,result5);\n      result6 = FUN_08008cd8(result6,result7);\n      temp1 = FUN_08008590(result6);\n      difference = FUN_08008b24((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x66666666,0x3fee6666);\n      if (difference != 0) {\n        difference = FUN_08009228(DAT_20000d0c,*(undefined4 *)(&DAT_20000884 + index));\n        local_var1 = DAT_20000d0c;\n        if (difference == 0) {\n          local_var1 = *(undefined4 *)(&DAT_20000884 + index);\n        }\n        temp1 = FUN_08008590(result6);\n        difference = FUN_08008b60((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x66666666,0xbfee6666);\n        if (difference != 0) {\n          temp1 = FUN_08008590(result6);\n          temp1 = FUN_080082d0(0,0x3ff00000,(int)temp1,(int)((ulonglong)temp1 >> 0x20));\n          temp1 = FUN_08008640((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x3fe00000);\n          temp1 = FUN_080098d0((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n          result6 = FUN_08008c30((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n          temp1 = FUN_08008590(local_var1);\n          result7 = FUN_08008eec(DAT_20000edc,DAT_20000ee0);\n          result7 = FUN_08008eec(result7,result6);\n          temp2 = FUN_08008590(result7);\n          temp3 = FUN_08008590(result6);\n          temp3 = FUN_080082d0(0,0x3ff00000,(int)temp3,(int)((ulonglong)temp3 >> 0x20));\n          temp2 = FUN_08008894((int)temp2,(int)((ulonglong)temp2 >> 0x20),(int)temp3,\n                                (int)((ulonglong)temp3 >> 0x20));\n          temp2 = FUN_080098d0((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n          difference = FUN_08008b24((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                                (int)((ulonglong)temp2 >> 0x20));\n          if (difference == 0) {\n            result7 = FUN_08008eec(DAT_20000edc,DAT_20000ee0);\n            result7 = FUN_08008eec(result7,result6);\n            temp1 = FUN_08008590(result7);\n            temp2 = FUN_08008590(result6);\n            temp2 = FUN_080082d0(0,0x3ff00000,(int)temp2,(int)((ulonglong)temp2 >> 0x20));\n            temp1 = FUN_08008894((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                                  (int)((ulonglong)temp2 >> 0x20));\n            temp1 = FUN_080098d0((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n            local_var1 = FUN_08008c30((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n          }\n        }\n      }\n    }\n    *(undefined4 *)(&DAT_2000088c + index) = local_var1;\n    result7 = FUN_08002978(DAT_20000edc ^ 0x80000000,0,*(undefined4 *)(&DAT_20000890 + index));\n    difference = FUN_08009228(local_var1,result7);\n    result6 = result7;\n    if (difference != 0) {\n      result6 = local_var1;\n    }\n    *(undefined4 *)(&DAT_20000888 + index) = result6;\n    difference = FUN_08009250(result7,*(undefined4 *)(&DAT_20000884 + index));\n    if (difference == 0) {\n      (&DAT_20000895)[index] = 0;\n    }\n    else {\n      (&DAT_20000895)[index] = 1;\n    }\n    (&DAT_20000894)[index] = 1;\n    DAT_20000d0c = *(undefined4 *)(&DAT_20000884 + index);\n    DAT_20000cf0 = DAT_20000cf2;\n    DAT_20000d00 = max_value;\n    DAT_20000d04 = result1;\n    DAT_20000d08 = result5;\n    DAT_20000cf2 = FUN_08002870(DAT_20000cf2);\n    DAT_20000cf4 = result2;\n    DAT_20000cf8 = result3;\n    DAT_20000cfc = result4;\n    FUN_08002edc();\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08003004",
            "entrypoint": "0x08003004",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003004": "process_data_08003004",
                "iVar10": "index",
                "iVar12": "difference",
                "iVar2": "result2",
                "iVar3": "result3",
                "iVar4": "result4",
                "local_1c": "local_var2",
                "local_20": "local_var1",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "param_5": "flag",
                "puVar11": "pointer",
                "uVar1": "result1",
                "uVar13": "min_value",
                "uVar14": "temp1",
                "uVar15": "temp2",
                "uVar16": "temp3",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "result7",
                "uVar8": "result8",
                "uVar9": "max_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080035ec": {
            "additional_data": {
                "FUN_080035ec": {
                    "1": "initialize_memory",
                    "18": "initialize_parameters",
                    "2": "initialize_variables",
                    "3": "initialize_data",
                    "4": "set_parameters"
                },
                "param_1": {
                    "1": "input1",
                    "2": "first_param",
                    "3": "input_param1",
                    "4": "first_parameter",
                    "7": "parameter1"
                },
                "param_2": {
                    "1": "data_param",
                    "2": "parameter_2",
                    "3": "input_param2",
                    "4": "second_parameter",
                    "7": "parameter2"
                },
                "param_3": {
                    "1": "user_input",
                    "2": "third_param",
                    "3": "input_param3",
                    "4": "third_parameter",
                    "7": "parameter3"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800283a"
            ],
            "code": "\nvoid initialize_parameters_080035ec(undefined4 parameter1,undefined4 parameter2,undefined4 parameter3)\n\n{\n  DAT_20000cf4 = parameter1;\n  DAT_20000cf8 = parameter2;\n  DAT_20000cfc = parameter3;\n  return;\n}\n\n",
            "current_name": "initialize_parameters_080035ec",
            "entrypoint": "0x080035ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080035ec": "initialize_parameters_080035ec",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "param_3": "parameter3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003618": {
            "additional_data": {
                "DAT_20000cf1": {
                    "1": "multiplier"
                },
                "FUN_08002edc": {
                    "1": "execute_operation",
                    "2": "finalize_updates",
                    "4": "finalize_update"
                },
                "FUN_08003618": {
                    "1": "initialize_data",
                    "2": "process_data",
                    "25": "update_data"
                },
                "FUN_08008e44": {
                    "1": "calculate_result",
                    "2": "get_value",
                    "3": "process_input",
                    "6": "process_data"
                },
                "FUN_08008eec": {
                    "1": "calculate_result",
                    "10": "combine_data",
                    "8": "combine_values"
                },
                "FUN_08009054": {
                    "1": "perform_operation3",
                    "2": "calculate_checksum",
                    "3": "perform_operation",
                    "4": "calculate_result"
                },
                "iVar2": {
                    "1": "index_offset",
                    "25": "index",
                    "5": "offset"
                },
                "param_1": {
                    "1": "new_data",
                    "15": "data",
                    "3": "new_value",
                    "8": "input_data"
                },
                "param_3": {
                    "1": "result3"
                },
                "uVar1": {
                    "1": "value_b",
                    "12": "result",
                    "16": "result1",
                    "2": "result_1"
                },
                "uVar3": {
                    "1": "original_value",
                    "2": "value1",
                    "3": "old_value",
                    "5": "data",
                    "6": "value"
                }
            },
            "called": [
                "FUN_08009054",
                "FUN_08008e44",
                "FUN_08008eec",
                "FUN_08002edc"
            ],
            "calling": [
                "FUN_080058a0"
            ],
            "code": "\nvoid update_data_08003618(undefined4 data)\n\n{\n  undefined4 result1;\n  int index;\n  undefined4 value;\n  \n  index = (uint)DAT_20000cf1 * 0x40;\n  value = *(undefined4 *)(&DAT_20000890 + index);\n  result1 = FUN_08008e44(data);\n  result1 = FUN_08008eec(value,result1);\n  value = FUN_08008e44(*(undefined4 *)(&DAT_20000880 + index));\n  result1 = FUN_08009054(result1,value);\n  *(undefined4 *)(&DAT_20000890 + index) = result1;\n  *(undefined4 *)(&DAT_20000880 + index) = data;\n  *(undefined4 *)(&DAT_20000888 + index) = 0;\n  *(undefined4 *)(&DAT_2000088c + index) = 0;\n  (&DAT_20000895)[index] = 0;\n  (&DAT_20000894)[index] = 1;\n  FUN_08002edc();\n  return;\n}\n\n",
            "current_name": "update_data_08003618",
            "entrypoint": "0x08003618",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003618": "update_data_08003618",
                "iVar2": "index",
                "param_1": "data",
                "uVar1": "result1",
                "uVar3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800369c": {
            "additional_data": {
                "FUN_0800369c": {
                    "1": "print_characters",
                    "2": "iterate_over_string",
                    "22": "process_string",
                    "6": "print_string"
                },
                "local_c": {
                    "28": "current_char",
                    "3": "current_character"
                },
                "param_1": {
                    "25": "input_string",
                    "6": "string"
                }
            },
            "called": [
                "FUN_08008250"
            ],
            "calling": [
                "FUN_08004900",
                "FUN_080039bc"
            ],
            "code": "\nvoid process_string_0800369c(char *input_string)\n\n{\n  char *current_char;\n  \n  current_char = input_string;\n  while (*current_char != '\\0') {\n    FUN_08008250(*current_char);\n    current_char = current_char + 1;\n  }\n  return;\n}\n\n",
            "current_name": "process_string_0800369c",
            "entrypoint": "0x0800369c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800369c": "process_string_0800369c",
                "local_c": "current_char",
                "param_1": "input_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080036c6": {
            "additional_data": {
                "FUN_080036c6": {
                    "1": "process_characters",
                    "13": "print_string",
                    "14": "process_string"
                },
                "local_c": {
                    "26": "current_char",
                    "5": "current_character"
                },
                "param_1": {
                    "11": "string",
                    "18": "input_string",
                    "2": "str"
                }
            },
            "called": [
                "FUN_08008250"
            ],
            "calling": [
                "FUN_0800423c",
                "FUN_08004250",
                "FUN_08004940",
                "FUN_08004900",
                "FUN_080044e8",
                "FUN_08004228",
                "FUN_080046d0",
                "FUN_08004030",
                "FUN_080041a0",
                "FUN_08004148"
            ],
            "code": "\nvoid process_string_080036c6(char *input_string)\n\n{\n  char *current_char;\n  \n  current_char = input_string;\n  while (*current_char != '\\0') {\n    FUN_08008250(*current_char);\n    current_char = current_char + 1;\n  }\n  return;\n}\n\n",
            "current_name": "process_string_080036c6",
            "entrypoint": "0x080036c6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080036c6": "process_string_080036c6",
                "local_c": "current_char",
                "param_1": "input_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080036f0": {
            "additional_data": {
                "FUN_080036f0": {
                    "1": "print_binary_bits",
                    "18": "print_binary",
                    "2": "print_binary_digits",
                    "3": "print_binary_number",
                    "4": "print_binary_representation"
                },
                "local_10": {
                    "1": "digit_counter",
                    "15": "bit_index",
                    "2": "counter",
                    "3": "index",
                    "5": "bit_position"
                },
                "local_c": {
                    "21": "bit_mask",
                    "9": "mask"
                },
                "param_1": {
                    "1": "binary_number",
                    "2": "num",
                    "24": "number"
                },
                "param_2": {
                    "1": "length",
                    "16": "num_bits",
                    "2": "bit_length",
                    "4": "bits",
                    "7": "bit_count"
                },
                "uVar1": {
                    "1": "binary_character",
                    "13": "binary_digit",
                    "2": "binary_value",
                    "6": "bit_value"
                }
            },
            "called": [
                "FUN_08008250"
            ],
            "calling": [
                "FUN_08003740",
                "FUN_0800375c"
            ],
            "code": "\nvoid print_binary_080036f0(uint number,int num_bits)\n\n{\n  undefined4 binary_digit;\n  int bit_index;\n  uint bit_mask;\n  \n  bit_mask = 1 << (num_bits - 1U & 0xff);\n  for (bit_index = 0; bit_index < num_bits; bit_index = bit_index + 1) {\n    if ((bit_mask & number) == 0) {\n      binary_digit = 0x30;\n    }\n    else {\n      binary_digit = 0x31;\n    }\n    FUN_08008250(binary_digit);\n    bit_mask = bit_mask >> 1;\n  }\n  return;\n}\n\n",
            "current_name": "print_binary_080036f0",
            "entrypoint": "0x080036f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080036f0": "print_binary_080036f0",
                "local_10": "bit_index",
                "local_c": "bit_mask",
                "param_1": "number",
                "param_2": "num_bits",
                "uVar1": "binary_digit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003740": {
            "additional_data": {
                "FUN_080036f0": {
                    "1": "perform_initialization",
                    "2": "set_data",
                    "3": "set_default_value",
                    "4": "set_memory",
                    "5": "set_initial_value"
                },
                "FUN_08003740": {
                    "1": "initialize_variable",
                    "10": "initialize_memory",
                    "12": "initialize_data",
                    "3": "initialize_function",
                    "4": "initialize"
                },
                "param_1": {
                    "1": "input_param",
                    "17": "data",
                    "2": "memory_location",
                    "3": "input_data"
                },
                "param_2": {
                    "1": "length",
                    "14": "value",
                    "2": "count",
                    "6": "size"
                }
            },
            "called": [
                "FUN_080036f0"
            ],
            "calling": [],
            "code": "\nvoid initialize_data_08003740(undefined data)\n\n{\n  FUN_080036f0(data,8);\n  return;\n}\n\n",
            "current_name": "initialize_data_08003740",
            "entrypoint": "0x08003740",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003740": "initialize_data_08003740",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800375c": {
            "additional_data": {
                "FUN_080036f0": {
                    "1": "set_memory_value",
                    "2": "copy_data",
                    "7": "set_memory"
                },
                "FUN_0800375c": {
                    "1": "initialize_function",
                    "14": "initialize_memory",
                    "2": "initialize_buffer",
                    "7": "initialize_data"
                },
                "param_1": {
                    "1": "data_address",
                    "10": "data",
                    "2": "input_data",
                    "3": "buffer"
                },
                "param_2": {
                    "1": "limit",
                    "10": "size",
                    "2": "length",
                    "3": "block_size",
                    "4": "value"
                }
            },
            "called": [
                "FUN_080036f0"
            ],
            "calling": [
                "FUN_08004250"
            ],
            "code": "\nvoid initialize_memory_0800375c(undefined2 data)\n\n{\n  FUN_080036f0(data,0x10);\n  return;\n}\n\n",
            "current_name": "initialize_memory_0800375c",
            "entrypoint": "0x0800375c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800375c": "initialize_memory_0800375c",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003778": {
            "additional_data": {
                "FUN_08003778": {
                    "1": "reverse_and_print_integer",
                    "10": "convert_and_print_number",
                    "2": "convert_and_print_integer"
                },
                "FUN_08008250": {
                    "1": "print_character"
                },
                "acStack_15": {
                    "1": "char_string",
                    "2": "char_stack",
                    "5": "digits",
                    "7": "digit_array"
                },
                "local_1c": {
                    "1": "remaining_decimal",
                    "2": "temp_number",
                    "4": "current_number",
                    "5": "dividend",
                    "7": "remainder"
                },
                "local_9": {
                    "1": "char_index",
                    "10": "digit_count",
                    "4": "digit"
                },
                "param_1": {
                    "1": "input_value",
                    "23": "number",
                    "6": "input_number"
                },
                "uVar1": {
                    "1": "quotient",
                    "10": "index",
                    "5": "temp_var1",
                    "6": "temp"
                }
            },
            "called": [
                "FUN_08008250"
            ],
            "calling": [
                "FUN_080037fc"
            ],
            "code": "\nvoid convert_and_print_number_08003778(uint number)\n\n{\n  uint index;\n  uint remainder;\n  char digit_array [12];\n  byte digit_count;\n  \n  digit_count = 0;\n  remainder = number;\n  if (number == 0) {\n    FUN_08008250(0x30);\n  }\n  else {\n    for (; remainder != 0; remainder = remainder / 10) {\n      index = (uint)digit_count;\n      digit_count = digit_count + 1;\n      digit_array[index + 1] = (char)(remainder % 10) + '0';\n    }\n    for (; digit_count != 0; digit_count = digit_count - 1) {\n      FUN_08008250(digit_array[digit_count]);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "convert_and_print_number_08003778",
            "entrypoint": "0x08003778",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003778": "convert_and_print_number_08003778",
                "acStack_15": "digit_array",
                "local_1c": "remainder",
                "local_9": "digit_count",
                "param_1": "number",
                "uVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080037fc": {
            "additional_data": {
                "FUN_08003778": {
                    "1": "print_num",
                    "6": "print_value"
                },
                "FUN_080037fc": {
                    "2": "convert_and_print_number",
                    "27": "print_absolute_value"
                },
                "FUN_08008250": {
                    "1": "print_char",
                    "7": "print_character"
                },
                "local_c": {
                    "1": "abs_num",
                    "2": "abs_value",
                    "25": "absolute_value"
                },
                "param_1": {
                    "1": "num",
                    "10": "value",
                    "18": "number"
                }
            },
            "called": [
                "FUN_08003778",
                "FUN_08008250"
            ],
            "calling": [
                "FUN_08004250",
                "FUN_08004900",
                "FUN_080046d0"
            ],
            "code": "\nvoid print_absolute_value_080037fc(int number)\n\n{\n  int absolute_value;\n  \n  absolute_value = number;\n  if (number < 0) {\n    FUN_08008250(0x2d);\n    absolute_value = -number;\n  }\n  FUN_08003778(absolute_value);\n  return;\n}\n\n",
            "current_name": "print_absolute_value_080037fc",
            "entrypoint": "0x080037fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080037fc": "print_absolute_value_080037fc",
                "local_c": "absolute_value",
                "param_1": "number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003826": {
            "additional_data": {
                "FUN_08003826": {
                    "1": "print_unsigned_number",
                    "2": "format_and_print_number",
                    "3": "convert_number_to_ascii",
                    "4": "print_number"
                },
                "acStack_1d": {
                    "1": "formatted_digits",
                    "10": "number_string",
                    "2": "char_array",
                    "3": "digit_array"
                },
                "bVar3": {
                    "1": "extra_digit",
                    "12": "digit",
                    "13": "temp_byte",
                    "3": "byte_value"
                },
                "fVar1": {
                    "1": "result"
                },
                "iVar1": {
                    "1": "check_result",
                    "26": "result"
                },
                "local_10": {
                    "1": "quotient",
                    "2": "div_result",
                    "4": "divided_number",
                    "5": "division_result"
                },
                "local_24": {
                    "1": "local_number",
                    "3": "temp_number",
                    "4": "number",
                    "8": "modified_number"
                },
                "local_9": {
                    "1": "length",
                    "15": "loop_counter",
                    "2": "num_digits",
                    "3": "temp_byte2"
                },
                "local_a": {
                    "1": "loop_index",
                    "15": "index",
                    "2": "current_digit",
                    "4": "digit_index",
                    "6": "current_index"
                },
                "param_1": {
                    "1": "input_value",
                    "11": "input_number",
                    "14": "number",
                    "5": "input"
                },
                "uVar2": {
                    "1": "transformed_value",
                    "12": "converted_number",
                    "2": "normalized_number",
                    "3": "modified_number",
                    "5": "converted_value",
                    "6": "formatted_number"
                },
                "uVar4": {
                    "1": "temp_number",
                    "10": "temp",
                    "2": "temp_int",
                    "4": "temp_u_int",
                    "6": "index"
                }
            },
            "called": [
                "FUN_08009228",
                "FUN_08009278",
                "FUN_08008eec",
                "FUN_08008cdc",
                "FUN_08008250"
            ],
            "calling": [
                "FUN_08004250",
                "FUN_08004940",
                "FUN_080044e8",
                "FUN_080046d0"
            ],
            "code": "\nvoid print_number_08003826(uint number)\n\n{\n  int result;\n  undefined4 converted_number;\n  byte temp_byte;\n  uint temp;\n  uint modified_number;\n  char number_string [13];\n  uint division_result;\n  byte index;\n  byte loop_counter;\n  \n  result = FUN_08009228(number,0);\n  modified_number = number;\n  if (result != 0) {\n    FUN_08008250(0x2d);\n    modified_number = number ^ 0x80000000;\n  }\n  for (loop_counter = DAT_20000ef9; 1 < loop_counter; loop_counter = loop_counter - 2) {\n    modified_number = FUN_08008eec(modified_number,0x42c80000);\n  }\n  if (loop_counter != 0) {\n    modified_number = FUN_08008eec(modified_number,0x41200000);\n  }\n  converted_number = FUN_08008cdc(modified_number,0x3f000000);\n  index = 0;\n  division_result = FUN_08009278(converted_number);\n  number_string[DAT_20000ef9 + 1] = '.';\n  for (; division_result != 0; division_result = division_result / 10) {\n    if (index == DAT_20000ef9) {\n      index = index + 1;\n    }\n    temp = (uint)index;\n    index = index + 1;\n    number_string[temp + 1] = (char)(division_result % 10) + '0';\n  }\n  while (index < DAT_20000ef9) {\n    temp = (uint)index;\n    index = index + 1;\n    number_string[temp + 1] = '0';\n  }\n  if (index == DAT_20000ef9) {\n    temp_byte = index + 1;\n    index = index + 2;\n    number_string[temp_byte + 1] = '0';\n  }\n  for (; index != 0; index = index - 1) {\n    FUN_08008250(number_string[index]);\n  }\n  return;\n}\n\n",
            "current_name": "print_number_08003826",
            "entrypoint": "0x08003826",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003826": "print_number_08003826",
                "acStack_1d": "number_string",
                "bVar3": "temp_byte",
                "iVar1": "result",
                "local_10": "division_result",
                "local_24": "modified_number",
                "local_9": "loop_counter",
                "local_a": "index",
                "param_1": "number",
                "uVar2": "converted_number",
                "uVar4": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003980": {
            "additional_data": {
                "DATA_20000e10": {
                    "1": "counter1"
                },
                "DATA_20000e11": {
                    "1": "counter2"
                },
                "DAT_20000e10": {
                    "1": "data0",
                    "2": "count1",
                    "3": "data_counter",
                    "4": "counter",
                    "5": "data_value1"
                },
                "DAT_20000e11": {
                    "1": "data_flag2",
                    "2": "count2",
                    "3": "counter2",
                    "4": "data_flag",
                    "5": "data_value2"
                },
                "FUN_08003980": {
                    "1": "reset_variables",
                    "24": "initialize_data",
                    "3": "reset_data"
                }
            },
            "called": [],
            "calling": [
                "FUN_080039a0",
                "FUN_08003f34"
            ],
            "code": "\nvoid initialize_data_08003980(void)\n\n{\n  DAT_20000e10 = 0;\n  DAT_20000e11 = 0;\n  return;\n}\n\n",
            "current_name": "initialize_data_08003980",
            "entrypoint": "0x08003980",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003980": "initialize_data_08003980"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080039a0": {
            "additional_data": {
                "FUN_08003980": {
                    "1": "first_task",
                    "2": "perform_first_action",
                    "3": "perform_first_task",
                    "5": "perform_initialization"
                },
                "FUN_080039a0": {
                    "1": "execute_setup",
                    "17": "initialize_program",
                    "2": "initialize_data",
                    "5": "initialize_application"
                },
                "FUN_08004228": {
                    "1": "perform_cleanup",
                    "2": "perform_initialization",
                    "3": "perform_second_task"
                }
            },
            "called": [
                "FUN_08004228",
                "FUN_08003980"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid initialize_program_080039a0(void)\n\n{\n  FUN_08003980();\n  FUN_08004228();\n  DAT_20000e50 = 1;\n  return;\n}\n\n",
            "current_name": "initialize_program_080039a0",
            "entrypoint": "0x080039a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080039a0": "initialize_program_080039a0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080039bc": {
            "additional_data": {
                "&DAT_20000d10": {
                    "1": "data"
                },
                "DAT_20000d10": {
                    "1": "data_flag",
                    "2": "data"
                },
                "FUN_080005b4": {
                    "1": "process_data2",
                    "8": "calculate_value"
                },
                "FUN_0800369c": {
                    "1": "clear_data_flag",
                    "3": "clear_data"
                },
                "FUN_080039bc": {
                    "1": "check_data",
                    "11": "check_and_process_data",
                    "12": "process_data",
                    "2": "check_data_and_execute"
                },
                "FUN_08004030": {
                    "1": "execute_operation",
                    "5": "print_result"
                },
                "FUN_08004d2c": {
                    "1": "check_value",
                    "8": "check_data"
                },
                "iVar1": {
                    "1": "return_value",
                    "26": "result"
                },
                "local_9": {
                    "1": "count",
                    "2": "loop_counter",
                    "3": "index",
                    "5": "iteration",
                    "8": "iteration_count",
                    "9": "counter"
                },
                "param_1": {
                    "1": "counter"
                },
                "param_2": {
                    "1": "flag_ptr"
                },
                "param_3": {
                    "1": "status"
                },
                "uVar2": {
                    "1": "conversion_result",
                    "2": "data_value",
                    "4": "error_code",
                    "7": "processed_value",
                    "8": "value"
                }
            },
            "called": [
                "FUN_0800369c",
                "FUN_080005b4",
                "FUN_08004030",
                "FUN_08004d2c"
            ],
            "calling": [
                "FUN_08003b98",
                "FUN_08001ddc"
            ],
            "code": "\nvoid process_data_080039bc(void)\n\n{\n  int result;\n  undefined4 value;\n  byte counter;\n  \n  for (counter = 0; counter < 2; counter = counter + 1) {\n    result = FUN_08004d2c(counter,&DAT_20000d10);\n    if (result == 0) {\n      FUN_08004030(10);\n    }\n    else if (DAT_20000d10 != '\\0') {\n      FUN_0800369c(&DAT_20000d10);\n      value = FUN_080005b4(&DAT_20000d10);\n      FUN_08004030(value);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_data_080039bc",
            "entrypoint": "0x080039bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080039bc": "process_data_080039bc",
                "iVar1": "result",
                "local_9": "counter",
                "uVar2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003a18": {
            "additional_data": {
                "DAT_20000eaa": {
                    "1": "status_flags",
                    "2": "flags_register",
                    "3": "status",
                    "5": "flags"
                },
                "FUN_080025e8": {
                    "1": "perform_initialization",
                    "2": "handle_flag_error",
                    "3": "handle_error"
                },
                "FUN_08003a18": {
                    "1": "set_flags_based_on_param1",
                    "2": "update_flags",
                    "3": "process_flags",
                    "4": "process_param",
                    "6": "update_flags_based_on_param"
                },
                "param_1": {
                    "1": "configuration",
                    "2": "input_value",
                    "4": "input",
                    "5": "param",
                    "6": "flags"
                }
            },
            "called": [
                "FUN_080025e8"
            ],
            "calling": [
                "FUN_080074c8"
            ],
            "code": "\nvoid update_flags_based_on_param_08003a18(uint flags)\n\n{\n  if ((flags & 0x80) == 0) {\n    if ((flags & 0x40) == 0) {\n      if ((flags & 0x20) != 0) {\n        DAT_20000eaa = DAT_20000eaa | 2;\n      }\n    }\n    else {\n      DAT_20000eaa = DAT_20000eaa | 8;\n    }\n  }\n  else {\n    FUN_080025e8();\n  }\n  return;\n}\n\n",
            "current_name": "update_flags_based_on_param_08003a18",
            "entrypoint": "0x08003a18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003a18": "update_flags_based_on_param_08003a18",
                "param_1": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003a74": {
            "additional_data": {
                "DAT_20000ea9": {
                    "1": "error_code"
                },
                "DAT_20000eaa": {
                    "1": "data_var"
                },
                "DAT_20000eb8": {
                    "1": "status_flag"
                },
                "DAT_20000ee4": {
                    "1": "control_flag"
                },
                "FUN_08003a74": {
                    "1": "handle_data_processing",
                    "16": "process_data",
                    "2": "execute_function",
                    "3": "process_flags"
                },
                "FUN_08004148": {
                    "1": "initialize_value",
                    "2": "set_error_code",
                    "4": "set_flag"
                },
                "FUN_080041a0": {
                    "1": "initialize_process",
                    "3": "initialize_flag",
                    "4": "set_flag"
                },
                "FUN_08004940": {
                    "1": "reverse_bits",
                    "2": "execute_function_a"
                },
                "FUN_0800585c": {
                    "1": "execute_operation_b"
                },
                "FUN_0800587c": {
                    "1": "handle_case2",
                    "2": "execute_function_b"
                },
                "FUN_080058a0": {
                    "1": "modify_process"
                },
                "bVar1": {
                    "1": "flag_byte",
                    "2": "current_byte",
                    "3": "data_byte",
                    "8": "byte_value"
                }
            },
            "called": [
                "FUN_080058a0",
                "FUN_0800585c",
                "FUN_08004940",
                "FUN_0800587c",
                "FUN_080041a0",
                "FUN_08004148"
            ],
            "calling": [
                "FUN_08001e98",
                "FUN_08002408",
                "FUN_08003f34",
                "FUN_08001ddc",
                "FUN_08002fd4",
                "FUN_080024c4"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08003ad2) */\n\nvoid process_data_08003a74(void)\n\n{\n  byte byte_value;\n  \n  byte_value = DAT_20000eaa;\n  if (DAT_20000eaa != 0) {\n    if ((DAT_20000eaa & 0x60) != 0) {\n      DAT_20000ea9 = 6;\n      if ((DAT_20000eaa & 0x40) != 0) {\n        FUN_08004148(0xffffffff);\n        FUN_080041a0(1);\n        do {\n        } while( true );\n      }\n      FUN_08004148(0xfffffffe);\n      DAT_20000eaa = DAT_20000eaa & 0x9f;\n    }\n    if ((byte_value & 0x10) == 0) {\n      if ((byte_value & 1) != 0) {\n        FUN_08004940();\n        DAT_20000eaa = DAT_20000eaa & 0xfe;\n      }\n      if ((byte_value & 8) != 0) {\n        FUN_0800587c();\n        DAT_20000eaa = DAT_20000eaa & 0xf7;\n      }\n      if ((byte_value & 4) != 0) {\n        FUN_080058a0();\n        DAT_20000eaa = DAT_20000eaa & 0xfb;\n      }\n      if ((byte_value & 2) != 0) {\n        FUN_0800585c();\n        if ((DAT_20000ee4 & 2) != 0) {\n          DAT_20000eb8 = 1;\n        }\n        DAT_20000eaa = DAT_20000eaa & 0xfd;\n      }\n    }\n    else {\n      DAT_20000ea8 = 1;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08003a74",
            "entrypoint": "0x08003a74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003a74": "process_data_08003a74",
                "bVar1": "byte_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003b98": {
            "additional_data": {
                "DAT_20000ea8": {
                    "1": "global_variable2",
                    "2": "flag2"
                },
                "DAT_20000ea9": {
                    "1": "variable1",
                    "2": "global_flag1"
                },
                "DAT_20000ee4": {
                    "1": "flag2",
                    "2": "global_flag3"
                },
                "FUN_080005b4": {
                    "1": "pre_process_string",
                    "2": "validate_input"
                },
                "FUN_080024c4": {
                    "1": "do_something3"
                },
                "FUN_080025e8": {
                    "1": "perform_operation_3"
                },
                "FUN_08002638": {
                    "1": "get_arg_value",
                    "2": "parse_input"
                },
                "FUN_080039bc": {
                    "1": "function4",
                    "2": "perform_operation_7"
                },
                "FUN_08003b98": {
                    "1": "validate_and_process_input",
                    "2": "process_param",
                    "4": "parse_input",
                    "5": "process_command",
                    "6": "process_input",
                    "7": "parse_command"
                },
                "FUN_08004030": {
                    "1": "function_12",
                    "2": "print_error"
                },
                "FUN_080041a0": {
                    "1": "function_13",
                    "4": "print_message"
                },
                "FUN_0800423c": {
                    "1": "handle_invalid_character",
                    "6": "handle_invalid_input"
                },
                "FUN_08004250": {
                    "1": "handle_case_dollar_sign",
                    "2": "perform_operation_2"
                },
                "FUN_080044e8": {
                    "1": "handle_command_0x24",
                    "2": "perform_operation_1"
                },
                "FUN_080046d0": {
                    "1": "process_input2",
                    "2": "perform_operation_5"
                },
                "FUN_08004900": {
                    "1": "do_something6"
                },
                "FUN_08004bc0": {
                    "1": "function_12",
                    "2": "save_result",
                    "3": "store_result"
                },
                "FUN_08004d2c": {
                    "1": "function4"
                },
                "FUN_08004e30": {
                    "1": "calculate_hash",
                    "2": "perform_operation"
                },
                "FUN_08008590": {
                    "1": "calculate_hash",
                    "2": "perform_operation_8"
                },
                "FUN_08008bf0": {
                    "1": "calculate_result",
                    "3": "calculate_checksum"
                },
                "FUN_0800919c": {
                    "1": "convert_value_to_hex"
                },
                "FUN_08009278": {
                    "1": "convert_to_register_value"
                },
                "FUN_08009798": {
                    "1": "perform_operation_9"
                },
                "bVar1": {
                    "1": "command",
                    "16": "first_char",
                    "2": "char1",
                    "3": "current_char"
                },
                "data1 != '\\0' && data1 != '\\x06'": {
                    "1": "check2"
                },
                "data3 & 0x10": {
                    "1": "check1"
                },
                "iVar2": {
                    "1": "temp_var1",
                    "3": "result",
                    "4": "return_value",
                    "6": "status"
                },
                "local_10": {
                    "1": "value_2",
                    "2": "arg_index",
                    "3": "param3",
                    "7": "value2"
                },
                "local_14": {
                    "1": "value2",
                    "2": "arg_value",
                    "3": "param2",
                    "4": "value1",
                    "5": "param_value"
                },
                "local_4": {
                    "1": "temp"
                },
                "local_9": {
                    "1": "is_flag_set",
                    "15": "flag",
                    "2": "is_loop",
                    "4": "flag2"
                },
                "local_a": {
                    "1": "param_1_value",
                    "10": "index",
                    "2": "state",
                    "4": "flag1"
                },
                "param_1": {
                    "1": "command_string",
                    "11": "command",
                    "13": "input_string",
                    "2": "input",
                    "3": "input_str"
                },
                "param_2": {
                    "1": "param_2"
                },
                "param_3": {
                    "1": "param_3"
                },
                "switchD_08003bdc_caseD_25": {
                    "3": "default_case"
                },
                "uVar3": {
                    "1": "converted_param",
                    "2": "result",
                    "3": "temp"
                },
                "uVar4": {
                    "21": "result",
                    "8": "return_value"
                },
                "uVar5": {
                    "1": "conversion_result",
                    "2": "temp2"
                }
            },
            "called": [
                "FUN_0800423c",
                "FUN_08004bc0",
                "FUN_08002638",
                "FUN_08009798",
                "FUN_08004900",
                "FUN_080025e8",
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_080046d0",
                "FUN_080039bc",
                "FUN_08008bf0",
                "FUN_08004d2c",
                "FUN_08008590",
                "FUN_08004250",
                "FUN_08009278",
                "FUN_080044e8",
                "FUN_08004030",
                "FUN_080041a0",
                "FUN_080024c4"
            ],
            "calling": [
                "FUN_08003f34"
            ],
            "code": "\nuint parse_command_08003b98(char *input_string)\n\n{\n  byte first_char;\n  int status;\n  undefined4 temp;\n  uint result;\n  undefined8 temp2;\n  undefined4 param_value;\n  undefined4 value2;\n  byte index;\n  byte flag;\n  \n  if (*input_string != '$') {\n    result = FUN_080005b4(input_string);\n    return result;\n  }\n  index = 1;\n  flag = '\\0';\n  first_char = input_string[1];\n  if (first_char == 0) {\n    FUN_0800423c();\n    return 0;\n  }\n  if ((0x58 < first_char) || (first_char < 0x23)) goto default_case;\n  switch(first_char) {\n  case 0x23:\n    index = 2;\n    if (input_string[2] != '\\0') {\n      return 3;\n    }\n    FUN_080044e8();\n    break;\n  case 0x24:\n    index = 2;\n    if (input_string[2] != '\\0') {\n      return 3;\n    }\n    FUN_08004250();\n    break;\n  case 0x43:\n    index = 2;\n    if (input_string[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\a') {\n      FUN_080025e8();\n      FUN_080041a0(5);\n    }\n    else {\n      if (DAT_20000ea9 != '\\0') {\n        return 0xb;\n      }\n      DAT_20000ea9 = '\\a';\n      FUN_080041a0(4);\n    }\n    break;\n  case 0x47:\n    index = 2;\n    if (input_string[2] != '\\0') {\n      return 3;\n    }\n    FUN_080046d0();\n    break;\n  case 0x48:\n    if ((DAT_20000ee4 & 0x10) == 0) {\n      return 7;\n    }\n    if ((DAT_20000ea9 != '\\0') && (DAT_20000ea9 != '\\x06')) {\n      return 0xb;\n    }\n    FUN_080024c4();\n    if (DAT_20000ea8 == '\\0') {\n      FUN_080039bc();\n    }\n    break;\n  case 0x4e:\n    index = 2;\n    if (input_string[2] == '\\0') {\n      for (flag = 0; flag < 2; flag = flag + 1) {\n        status = FUN_08004d2c(flag,input_string);\n        if (status == 0) {\n          FUN_08004030(10);\n        }\n        else {\n          FUN_08004900(flag,input_string);\n        }\n      }\n      return 0;\n    }\n    flag = '\\x01';\n  default:\ndefault_case:\n    status = FUN_08002638(input_string,&index,&value2);\n    if (status == 0) {\n      return 1;\n    }\n    first_char = index + 1;\n    if (input_string[index] != '=') {\n      return 3;\n    }\n    index = first_char;\n    if (flag == '\\0') {\n      status = FUN_08002638(input_string,&index,&param_value);\n      if (status == 0) {\n        return 1;\n      }\n      if (input_string[index] == '\\0') {\n        temp = FUN_08009278(value2);\n        result = FUN_08004e30(temp,param_value);\n        return result;\n      }\n      return 3;\n    }\n    do {\n      input_string[(uint)index - (uint)first_char] = input_string[index];\n      result = (uint)index;\n      index = index + 1;\n    } while (input_string[result] != '\\0');\n    flag = first_char;\n    flag = FUN_080005b4(input_string);\n    if (flag != 0) {\n      return (uint)flag;\n    }\n    temp2 = FUN_08008590(value2);\n    temp2 = FUN_08009798((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    flag = FUN_08008bf0((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    FUN_08004bc0(flag,input_string);\n    break;\n  case 0x58:\n    index = 2;\n    if (input_string[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\x06') {\n      FUN_080041a0(3);\n      DAT_20000ea9 = '\\0';\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "parse_command_08003b98",
            "entrypoint": "0x08003b98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003b98": "parse_command_08003b98",
                "bVar1": "first_char",
                "iVar2": "status",
                "local_10": "value2",
                "local_14": "param_value",
                "local_9": "flag",
                "local_a": "index",
                "param_1": "input_string",
                "switchD_08003bdc_caseD_25": "default_case",
                "uVar3": "temp",
                "uVar4": "result",
                "uVar5": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003f34": {
            "additional_data": {
                "&DAT_20000d10": {
                    "1": "input_buffer",
                    "2": "input_array"
                },
                "DAT_20000d10": {
                    "1": "user_input",
                    "2": "input_buffer"
                },
                "DAT_20000e10": {
                    "1": "char_index",
                    "2": "array_size",
                    "7": "input_index"
                },
                "DAT_20000e11": {
                    "1": "is_inside_parentheses",
                    "2": "is_inside_parenthesis",
                    "4": "in_parentheses"
                },
                "DAT_20000ea8": {
                    "1": "should_terminate",
                    "4": "exit_flag"
                },
                "FUN_08003980": {
                    "1": "reset_variables",
                    "2": "print_new_line",
                    "3": "reset_buffer",
                    "4": "newline",
                    "5": "clear_buffer"
                },
                "FUN_08003a74": {
                    "1": "process_user_input",
                    "2": "reverse_string",
                    "4": "process_input",
                    "5": "process_buffer"
                },
                "FUN_08003b98": {
                    "1": "compute_hash",
                    "12": "calculate_checksum",
                    "6": "calculate_hash"
                },
                "FUN_08003f34": {
                    "1": "decode_input",
                    "17": "process_input",
                    "2": "extract_user_input",
                    "9": "parse_input"
                },
                "FUN_08004030": {
                    "1": "output_to_console",
                    "10": "print_character",
                    "2": "print_message",
                    "3": "output_character",
                    "4": "print_output"
                },
                "FUN_08008286": {
                    "1": "get_user_byte",
                    "11": "read_byte",
                    "2": "get_next_char",
                    "3": "get_input_byte",
                    "4": "read_input_byte"
                },
                "bVar1": {
                    "1": "current_byte",
                    "5": "input_byte",
                    "6": "byte_value"
                },
                "uVar2": {
                    "1": "error_code",
                    "2": "checksum",
                    "5": "return_value"
                },
                "uVar3": {
                    "1": "buffer_index",
                    "11": "index"
                }
            },
            "called": [
                "FUN_08003b98",
                "FUN_08003a74",
                "FUN_08008286",
                "FUN_08004030",
                "FUN_08003980"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid process_input_08003f34(void)\n\n{\n  byte byte_value;\n  undefined4 result;\n  uint index;\n  \n  while( true ) {\n    while( true ) {\n      byte_value = FUN_08008286();\n      if (byte_value == 0xff) {\n        return;\n      }\n      if ((byte_value == 10) || (byte_value == 0xd)) break;\n      if (DAT_20000e11 == '\\0') {\n        if ((0x20 < byte_value) && (byte_value != 0x2f)) {\n          if (byte_value == 0x28) {\n            DAT_20000e11 = '\\x01';\n          }\n          else if (DAT_20000e10 == 0xff) {\n            FUN_08004030(0xd);\n            FUN_08003980();\n          }\n          else if ((byte_value < 0x61) || (0x7a < byte_value)) {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = byte_value;\n          }\n          else {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = byte_value - 0x20;\n          }\n        }\n      }\n      else if (byte_value == 0x29) {\n        DAT_20000e11 = '\\0';\n      }\n    }\n    FUN_08003a74();\n    if (DAT_20000ea8 != '\\0') break;\n    if (DAT_20000e10 == 0) {\n      FUN_08004030(0);\n    }\n    else {\n      (&DAT_20000d10)[DAT_20000e10] = 0;\n      result = FUN_08003b98(&DAT_20000d10);\n      FUN_08004030(result);\n    }\n    FUN_08003980();\n  }\n  return;\n}\n\n",
            "current_name": "process_input_08003f34",
            "entrypoint": "0x08003f34",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003f34": "process_input_08003f34",
                "bVar1": "byte_value",
                "uVar2": "result",
                "uVar3": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004030": {
            "additional_data": {
                "&DAT_0800b5c8": {
                    "2": "empty_string",
                    "4": "default_error_message"
                },
                "&DAT_0800b6d8": {
                    "1": "end_error_message"
                },
                "'Alarm lock'": {
                    "1": "alarm_lock"
                },
                "'Bad number format'": {
                    "1": "bad_number_format"
                },
                "'Busy or queued'": {
                    "1": "busy_or_queued"
                },
                "'EEPROM read fail. Using defaults'": {
                    "1": "eeprom_read_fail"
                },
                "'Expected command letter'": {
                    "1": "expected_command_letter"
                },
                "'Invalid radius'": {
                    "1": "invalid_radius"
                },
                "'Invalid statement'": {
                    "1": "invalid_statement"
                },
                "'Line overflow'": {
                    "1": "line_overflow"
                },
                "'Modal group violation'": {
                    "1": "modal_group_violation"
                },
                "'Setting disabled'": {
                    "1": "setting_disabled"
                },
                "'Unsupported statement'": {
                    "1": "unsupported_statement"
                },
                "'Value < 0.0'": {
                    "1": "value_less_than_zero"
                },
                "'Value < 3 usec'": {
                    "1": "value_less_than3_usec"
                },
                "'\\0'": {
                    "1": "no_error"
                },
                "'\\a'": {
                    "1": "error_setting_disabled",
                    "4": "setting_disabled"
                },
                "'\\b'": {
                    "1": "error_value_less_than_zero",
                    "3": "value_less_than_zero"
                },
                "'\\f'": {
                    "1": "alarm_lock_error_code",
                    "4": "alarm_lock"
                },
                "'\\n'": {
                    "1": "eeprom_read_fail_error_code",
                    "4": "eeprom_read_fail"
                },
                "'\\r'": {
                    "1": "line_overflow_error_code",
                    "3": "line_overflow"
                },
                "'\\t'": {
                    "1": "value_less_than_three_microsecond"
                },
                "'\\v'": {
                    "1": "error_busy_or_queued",
                    "4": "busy_or_queued"
                },
                "'\\x01'": {
                    "1": "error_bad_number_format",
                    "3": "bad_number_format"
                },
                "'\\x02'": {
                    "1": "command_letter_error",
                    "3": "expected_command_letter"
                },
                "'\\x03'": {
                    "1": "unsupported_statement_error",
                    "3": "unsupported_statement"
                },
                "'\\x04'": {
                    "1": "invalid_radius_error",
                    "3": "invalid_radius"
                },
                "'\\x05'": {
                    "1": "error_modal_group_violation",
                    "4": "modal_group_violation"
                },
                "'\\x06'": {
                    "1": "invalid_statement_error_code",
                    "3": "invalid_statement"
                },
                "DAT_0800b5c8": {
                    "1": "default_error_msg",
                    "4": "default_error_message"
                },
                "DAT_0800b6d8": {
                    "1": "end_msg",
                    "2": "error_message_suffix"
                },
                "FUN_080036c6": {
                    "1": "print_string",
                    "13": "print_message",
                    "4": "print_error_message"
                },
                "FUN_08004030": {
                    "10": "handle_error",
                    "2": "show_error_message",
                    "4": "print_error_message",
                    "6": "handle_error_message",
                    "9": "display_error_message"
                },
                "char": {
                    "1": "char"
                },
                "param_1": {
                    "1": "error_type",
                    "30": "error_code"
                }
            },
            "called": [
                "FUN_080036c6"
            ],
            "calling": [
                "FUN_08003b98",
                "FUN_080004ac",
                "FUN_080044e8",
                "FUN_08003f34",
                "FUN_080039bc",
                "FUN_080051b4"
            ],
            "code": "\nvoid handle_error_08004030(char error_code)\n\n{\n  if (error_code == '\\0') {\n    FUN_080036c6(&DAT_0800b5c8);\n  }\n  else {\n    FUN_080036c6(\"error: \");\n    switch(error_code) {\n    case '\\x01':\n      FUN_080036c6(\"Bad number format\");\n      break;\n    case '\\x02':\n      FUN_080036c6(\"Expected command letter\");\n      break;\n    case '\\x03':\n      FUN_080036c6(\"Unsupported statement\");\n      break;\n    case '\\x04':\n      FUN_080036c6(\"Invalid radius\");\n      break;\n    case '\\x05':\n      FUN_080036c6(\"Modal group violation\");\n      break;\n    case '\\x06':\n      FUN_080036c6(\"Invalid statement\");\n      break;\n    case '\\a':\n      FUN_080036c6(\"Setting disabled\");\n      break;\n    case '\\b':\n      FUN_080036c6(\"Value < 0.0\");\n      break;\n    case '\\t':\n      FUN_080036c6(\"Value < 3 usec\");\n      break;\n    case '\\n':\n      FUN_080036c6(\"EEPROM read fail. Using defaults\");\n      break;\n    case '\\v':\n      FUN_080036c6(\"Busy or queued\");\n      break;\n    case '\\f':\n      FUN_080036c6(\"Alarm lock\");\n      break;\n    case '\\r':\n      FUN_080036c6(\"Line overflow\");\n    }\n    FUN_080036c6(&DAT_0800b6d8);\n  }\n  return;\n}\n\n",
            "current_name": "handle_error_08004030",
            "entrypoint": "0x08004030",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004030": "handle_error_08004030",
                "param_1": "error_code"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004148": {
            "additional_data": {
                "500": {
                    "1": "delay_time"
                },
                "DAT_": {
                    "1": "unchanged_variable"
                },
                "FUNC_08002814": {
                    "1": "delay_milliseconds",
                    "2": "delay_function",
                    "20": "delay"
                },
                "FUN_080036c6": {
                    "1": "display_message",
                    "19": "print_message",
                    "3": "print_string"
                },
                "FUN_08004148": {
                    "1": "display_alarm",
                    "18": "display_alarm_message",
                    "4": "handle_alarm",
                    "8": "print_alarm_message"
                },
                "param_1": {
                    "1": "message",
                    "2": "alarm_type",
                    "24": "error_code"
                }
            },
            "called": [
                "FUN_08002814",
                "FUN_080036c6"
            ],
            "calling": [
                "FUN_08003a74"
            ],
            "code": "\nvoid display_alarm_message_08004148(char error_code)\n\n{\n  FUN_080036c6(\"ALARM: \");\n  if (error_code == -2) {\n    FUN_080036c6(\"Abort during cycle\");\n  }\n  else if (error_code == -1) {\n    FUN_080036c6(\"Hard limit\");\n  }\n  FUN_080036c6(\". MPos?\\r\\n\");\n  FUNC_08002814(500);\n  return;\n}\n\n",
            "current_name": "display_alarm_message_08004148",
            "entrypoint": "0x08004148",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004148": "display_alarm_message_08004148",
                "param_1": "error_code"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080041a0": {
            "additional_data": {
                "&DAT_0800b710": {
                    "1": "warning_header",
                    "5": "reset_message"
                },
                "&DAT_0800b764": {
                    "1": "goodbye_message",
                    "3": "end_message"
                },
                "1": {
                    "3": "reset_message"
                },
                "2": {
                    "3": "unlock_message"
                },
                "3": {
                    "1": "unlocked_caution_message",
                    "2": "caution_message"
                },
                "4": {
                    "3": "enabled_message"
                },
                "5": {
                    "3": "disabled_message"
                },
                "DAT_0800b710": {
                    "1": "message1",
                    "6": "reset_message"
                },
                "DAT_0800b764": {
                    "1": "message2",
                    "2": "ending_message"
                },
                "FUN_080036c6": {
                    "1": "display_message",
                    "22": "print_message"
                },
                "FUN_080041a0": {
                    "1": "print_status_message",
                    "21": "display_message",
                    "9": "display_status_message"
                },
                "param_1": {
                    "1": "message",
                    "2": "status_code",
                    "21": "message_type",
                    "5": "status"
                }
            },
            "called": [
                "FUN_080036c6"
            ],
            "calling": [
                "FUN_08003b98",
                "FUN_08003a74",
                "FUN_08001ddc"
            ],
            "code": "\nvoid display_message_080041a0(undefined message_type)\n\n{\n  FUN_080036c6(&DAT_0800b710);\n  switch(message_type) {\n  case 1:\n    FUN_080036c6(\"Reset to continue\");\n    break;\n  case 2:\n    FUN_080036c6(\"\\'$H\\'|\\'$X\\' to unlock\");\n    break;\n  case 3:\n    FUN_080036c6(\"Caution: Unlocked\");\n    break;\n  case 4:\n    FUN_080036c6(\"Enabled\");\n    break;\n  case 5:\n    FUN_080036c6(\"Disabled\");\n  }\n  FUN_080036c6(&DAT_0800b764);\n  return;\n}\n\n",
            "current_name": "display_message_080041a0",
            "entrypoint": "0x080041a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080041a0": "display_message_080041a0",
                "param_1": "message_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004228": {
            "additional_data": {
                "FUN_080036c6": {
                    "2": "print_string",
                    "27": "print_message"
                },
                "FUN_08004228": {
                    "1": "print_grbl_info",
                    "22": "print_grbl_version",
                    "3": "display_grbl_version",
                    "4": "print_welcome_message"
                },
                "param_1": {
                    "30": "message"
                }
            },
            "called": [
                "FUN_080036c6"
            ],
            "calling": [
                "FUN_080039a0"
            ],
            "code": "\nvoid print_grbl_version_08004228(void)\n\n{\n  FUN_080036c6(\"\\r\\nGrbl 0.8c [\\'$\\' for help]\\r\\n\");\n  return;\n}\n\n",
            "current_name": "print_grbl_version_08004228",
            "entrypoint": "0x08004228",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004228": "print_grbl_version_08004228"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800423c": {
            "additional_data": {
                "FUN_080036c6": {
                    "1": "print_to_display",
                    "10": "print_string",
                    "11": "print_message",
                    "3": "print_text"
                },
                "FUN_0800423c": {
                    "1": "show_menu_options",
                    "12": "print_grbl_commands",
                    "2": "display_grbl_menu",
                    "3": "display_menu",
                    "5": "print_menu_options"
                },
                "char *param_1": {
                    "1": "menu_string"
                },
                "param_1": {
                    "1": "command_string",
                    "12": "message",
                    "2": "str",
                    "5": "text"
                }
            },
            "called": [
                "FUN_080036c6"
            ],
            "calling": [
                "FUN_08003b98"
            ],
            "code": "\nvoid print_grbl_commands_0800423c(void)\n\n{\n  FUN_080036c6(\n              \"$$ (view Grbl settings)\\r\\n$# (view # parameters)\\r\\n$G (view parser state)\\r\\n$N (view startup blocks)\\r\\n$x=value (save Grbl setting)\\r\\n$Nx=line (save startup block)\\r\\n$C (check gcode mode)\\r\\n$X (kill alarm lock)\\r\\n$H (run homing cycle)\\r\\n~ (cycle start)\\r\\n! (feed hold)\\r\\n? (current status)\\r\\nctrl-x (reset Grbl)\\r\\n\"\n              );\n  return;\n}\n\n",
            "current_name": "print_grbl_commands_0800423c",
            "entrypoint": "0x0800423c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800423c": "print_grbl_commands_0800423c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004250": {
            "additional_data": {
                "DAT_0800b8b8": {
                    "1": "x_step"
                },
                "DAT_0800bb94": {
                    "1": "string2"
                },
                "DAT_20000ebc": {
                    "1": "y_step"
                },
                "DAT_20000ec0": {
                    "1": "y_step_per_mm"
                },
                "DAT_20000ec4": {
                    "1": "step_pulse"
                },
                "DAT_20000ec9": {
                    "1": "step_pulse"
                },
                "DAT_20000ecc": {
                    "1": "default_feed"
                },
                "DAT_20000ed0": {
                    "1": "step_port_invert_mask"
                },
                "DAT_20000ed4": {
                    "1": "step_port_invert_mask"
                },
                "DAT_20000ed6": {
                    "1": "dir_port_invert_mask"
                },
                "DAT_20000ed8": {
                    "2": "junction_deviation"
                },
                "DAT_20000edc": {
                    "1": "homing_dir_invert_mask"
                },
                "DAT_20000ee0": {
                    "2": "acceleration"
                },
                "DAT_20000ee4": {
                    "1": "report_inches_auto_start_invert_enable_limits_homing_cycle"
                },
                "DAT_20000ee6": {
                    "1": "homing_cycle"
                },
                "DAT_20000ee8": {
                    "1": "homing_feed"
                },
                "DAT_20000eec": {
                    "1": "homing_seek"
                },
                "DAT_20000ef0": {
                    "1": "homing_debounce"
                },
                "DAT_20000ef4": {
                    "1": "homing_pull_off"
                },
                "DAT_20000ef8": {
                    "1": "arc_mm_segment"
                },
                "DAT_20000ef9": {
                    "2": "n_decimals"
                },
                "DAT_20000efa": {
                    "2": "n_arc_correction"
                },
                "FUN_080036c6": {
                    "1": "print_string_value",
                    "2": "print_text",
                    "26": "print_string"
                },
                "FUN_0800375c": {
                    "1": "print_hexadecimal",
                    "2": "print_integer_value",
                    "3": "print_hex",
                    "4": "print_integer",
                    "6": "print_hex_value",
                    "7": "print_int"
                },
                "FUN_080037fc": {
                    "1": "print_bool_parameter",
                    "11": "print_boolean",
                    "3": "print_boolean_value",
                    "5": "print_bool_value",
                    "9": "print_bool"
                },
                "FUN_08003826": {
                    "1": "print_uint_parameter",
                    "2": "print_parameter_value",
                    "22": "print_value"
                },
                "FUN_08004250": {
                    "1": "print_configuration_details",
                    "10": "print_configuration",
                    "14": "print_settings",
                    "4": "print_configuration_settings"
                },
                "FUN_08009054": {
                    "28": "calculate_acceleration"
                },
                "newVariable1": {
                    "1": "acceleration_value"
                },
                "newVariable2": {
                    "1": "temp_var"
                },
                "newVariable3": {
                    "1": "temp_var2"
                },
                "newVariable4": {
                    "1": "temp_var3"
                },
                "newVariable5": {
                    "1": "temp_var4"
                },
                "newVariable6": {
                    "1": "temp_var5"
                },
                "param_1": {
                    "1": "x_step"
                },
                "param_10": {
                    "1": "junction_deviation"
                },
                "param_11": {
                    "1": "arc"
                },
                "param_12": {
                    "1": "n_arc_correction"
                },
                "param_13": {
                    "1": "n_decimals"
                },
                "param_14": {
                    "1": "report_inches"
                },
                "param_15": {
                    "1": "auto_start"
                },
                "param_16": {
                    "1": "invert_step_enable"
                },
                "param_17": {
                    "1": "hard_limits"
                },
                "param_18": {
                    "1": "homing_cycle"
                },
                "param_19": {
                    "1": "homing_dir_invert_mask"
                },
                "param_2": {
                    "1": "y_step"
                },
                "param_20": {
                    "1": "homing_feed"
                },
                "param_21": {
                    "1": "homing_seek"
                },
                "param_22": {
                    "1": "homing_debounce"
                },
                "param_23": {
                    "1": "homing_pull_off"
                },
                "param_3": {
                    "1": "z_step"
                },
                "param_4": {
                    "1": "step_pulse"
                },
                "param_5": {
                    "1": "default_feed"
                },
                "param_6": {
                    "1": "default_seek"
                },
                "param_7": {
                    "1": "step_port_invert_mask"
                },
                "param_8": {
                    "1": "step_idle_delay"
                },
                "param_9": {
                    "1": "acceleration"
                },
                "uVar1": {
                    "1": "acceleration_result",
                    "4": "acceleration",
                    "7": "acceleration_value"
                }
            },
            "called": [
                "FUN_08003826",
                "FUN_08009054",
                "FUN_080037fc",
                "FUN_080036c6",
                "FUN_0800375c"
            ],
            "calling": [
                "FUN_08003b98",
                "FUN_080051b4"
            ],
            "code": "\nvoid print_settings_08004250(void)\n\n{\n  undefined4 acceleration_value;\n  \n  FUN_080036c6(&DAT_0800b8b8);\n  FUN_08003826(DAT_20000ebc);\n  FUN_080036c6(\" (x, step/mm)\\r\\n$1=\");\n  FUN_08003826(DAT_20000ec0);\n  FUN_080036c6(\" (y, step/mm)\\r\\n$2=\");\n  FUN_08003826(DAT_20000ec4);\n  FUN_080036c6(\" (z, step/mm)\\r\\n$3=\");\n  FUN_080037fc(DAT_20000ec9);\n  FUN_080036c6(\" (step pulse, usec)\\r\\n$4=\");\n  FUN_08003826(DAT_20000ecc);\n  FUN_080036c6(\" (default feed, mm/min)\\r\\n$5=\");\n  FUN_08003826(DAT_20000ed0);\n  FUN_080036c6(\" (default seek, mm/min)\\r\\n$6=\");\n  FUN_080037fc(DAT_20000ed4);\n  FUN_080036c6(\" (step port invert mask, int:\");\n  FUN_0800375c(DAT_20000ed4);\n  FUN_080036c6(\")\\r\\n$7=\");\n  FUN_080037fc(DAT_20000ef8);\n  FUN_080036c6(\" (step idle delay, msec)\\r\\n$8=\");\n  acceleration_value = FUN_08009054(DAT_20000edc,0x45610000);\n  FUN_08003826(acceleration_value);\n  FUN_080036c6(\" (acceleration, mm/sec^2)\\r\\n$9=\");\n  FUN_08003826(DAT_20000ee0);\n  FUN_080036c6(\" (junction deviation, mm)\\r\\n$10=\");\n  FUN_08003826(DAT_20000ed8);\n  FUN_080036c6(\" (arc, mm/segment)\\r\\n$11=\");\n  FUN_080037fc(DAT_20000efa);\n  FUN_080036c6(\" (n-arc correction, int)\\r\\n$12=\");\n  FUN_080037fc(DAT_20000ef9);\n  FUN_080036c6(\" (n-decimals, int)\\r\\n$13=\");\n  FUN_080037fc((DAT_20000ee4 & 1) != 0);\n  FUN_080036c6(\" (report inches, bool)\\r\\n$14=\");\n  FUN_080037fc((DAT_20000ee4 & 2) != 0);\n  FUN_080036c6(\" (auto start, bool)\\r\\n$15=\");\n  FUN_080037fc((DAT_20000ee4 & 4) != 0);\n  FUN_080036c6(\" (invert step enable, bool)\\r\\n$16=\");\n  FUN_080037fc((DAT_20000ee4 & 8) != 0);\n  FUN_080036c6(\" (hard limits, bool)\\r\\n$17=\");\n  FUN_080037fc((DAT_20000ee4 & 0x10) != 0);\n  FUN_080036c6(\" (homing cycle, bool)\\r\\n$18=\");\n  FUN_080037fc(DAT_20000ee6);\n  FUN_080036c6(\" (homing dir invert mask, int:\");\n  FUN_0800375c(DAT_20000ee6);\n  FUN_080036c6(\")\\r\\n$19=\");\n  FUN_08003826(DAT_20000ee8);\n  FUN_080036c6(\" (homing feed, mm/min)\\r\\n$20=\");\n  FUN_08003826(DAT_20000eec);\n  FUN_080036c6(\" (homing seek, mm/min)\\r\\n$21=\");\n  FUN_080037fc(DAT_20000ef0);\n  FUN_080036c6(\" (homing debounce, msec)\\r\\n$22=\");\n  FUN_08003826(DAT_20000ef4);\n  FUN_080036c6(\" (homing pull-off, mm)\\r\\n$23=\");\n  FUN_080037fc(DAT_20000ed6);\n  FUN_080036c6(\" (dir port invert mask, int:\");\n  FUN_0800375c(DAT_20000ed6);\n  FUN_080036c6(&DAT_0800bb94);\n  return;\n}\n\n",
            "current_name": "print_settings_08004250",
            "entrypoint": "0x08004250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004250": "print_settings_08004250",
                "uVar1": "acceleration_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080044e8": {
            "additional_data": {
                "&DAT_0800b764": {
                    "1": "message2"
                },
                "&DAT_0800bb98": {
                    "1": "message3"
                },
                "&DAT_0800bb9c": {
                    "1": "message4"
                },
                "&DAT_0800bba0": {
                    "1": "message5"
                },
                "&DAT_0800bba4": {
                    "1": "message6"
                },
                "&DAT_0800bba8": {
                    "1": "message7"
                },
                "&DAT_0800bbac": {
                    "1": "message8"
                },
                "&DAT_0800bbb0": {
                    "1": "message9"
                },
                "&DAT_0800bbb4": {
                    "1": "message10"
                },
                "&DAT_0800bbb8": {
                    "1": "message11"
                },
                "&DAT_0800bbbc": {
                    "1": "message12"
                },
                "&DAT_20000e74": {
                    "1": "data_array_pointer"
                },
                "DAT_0800b764": {
                    "1": "message_b",
                    "4": "message2"
                },
                "DAT_0800bb98": {
                    "1": "switch_string1",
                    "3": "string3",
                    "4": "message3"
                },
                "DAT_0800bb9c": {
                    "1": "message_d",
                    "3": "string4",
                    "4": "message4"
                },
                "DAT_0800bba0": {
                    "1": "message_e",
                    "3": "string5",
                    "4": "message5"
                },
                "DAT_0800bba4": {
                    "1": "message_f",
                    "3": "string6",
                    "4": "message6"
                },
                "DAT_0800bba8": {
                    "1": "message_g",
                    "3": "string7",
                    "4": "message7"
                },
                "DAT_0800bbac": {
                    "1": "message_h",
                    "3": "string8",
                    "4": "message8"
                },
                "DAT_0800bbb0": {
                    "1": "switch_string7",
                    "3": "string9",
                    "4": "message9"
                },
                "DAT_0800bbb4": {
                    "1": "switch_string8",
                    "3": "string10",
                    "4": "message10"
                },
                "DAT_0800bbb8": {
                    "1": "message_k",
                    "3": "string11",
                    "4": "message11"
                },
                "DAT_0800bbbc": {
                    "1": "message_a",
                    "4": "message1"
                },
                "DAT_20000e74": {
                    "1": "data_address",
                    "2": "data_buffer",
                    "3": "data"
                },
                "DAT_20000ee4": {
                    "1": "condition_flag",
                    "5": "data_flag",
                    "8": "flag"
                },
                "FUN_080036c6": {
                    "5": "print_string",
                    "8": "print_message"
                },
                "FUN_08003826": {
                    "1": "display_result",
                    "2": "process_data",
                    "7": "process_value"
                },
                "FUN_08004030": {
                    "1": "execute_operation",
                    "2": "cleanup",
                    "3": "reset_data"
                },
                "FUN_080044e8": {
                    "1": "analyze_and_process_data",
                    "22": "process_data"
                },
                "FUN_08004d7c": {
                    "1": "check_data",
                    "2": "check_condition",
                    "6": "check_value"
                },
                "FUN_08008590": {
                    "1": "calculate_result",
                    "2": "calculate_hash"
                },
                "FUN_08008640": {
                    "1": "calculate_checksum",
                    "2": "calculate_value",
                    "3": "transform_value"
                },
                "FUN_08008c30": {
                    "1": "calculate_checksum",
                    "3": "perform_operation"
                },
                "auStack_18": {
                    "1": "stack_params",
                    "2": "input_data",
                    "3": "input_array",
                    "4": "values",
                    "8": "stack_array"
                },
                "iVar1": {
                    "13": "result",
                    "6": "return_value"
                },
                "local_9": {
                    "1": "iteration_count",
                    "16": "counter",
                    "2": "count",
                    "5": "index"
                },
                "local_a": {
                    "1": "inner_iteration_count",
                    "18": "index",
                    "2": "i",
                    "4": "inner_index"
                },
                "uVar2": {
                    "1": "transformed_value",
                    "4": "processed_value",
                    "5": "result",
                    "7": "processed_data"
                },
                "uVar3": {
                    "1": "checksum",
                    "2": "result",
                    "3": "transformed_value",
                    "4": "processed_value"
                }
            },
            "called": [
                "FUN_08008590",
                "FUN_08003826",
                "FUN_08004d7c",
                "FUN_08008640",
                "FUN_08004030",
                "FUN_080036c6",
                "FUN_08008c30"
            ],
            "calling": [
                "FUN_08003b98"
            ],
            "code": "\nvoid process_data_080044e8(void)\n\n{\n  int result;\n  undefined4 processed_data;\n  undefined8 transformed_data;\n  undefined4 stack_array [3];\n  byte index;\n  byte counter;\n  \n  counter = 0;\n  while( true ) {\n    if (7 < counter) {\n      FUN_080036c6(\"[G92:\");\n      for (index = 0; index < 3; index = index + 1) {\n        if ((DAT_20000ee4 & 1) == 0) {\n          FUN_08003826(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n        }\n        else {\n          transformed_data = FUN_08008590(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n          transformed_data = FUN_08008640((int)transformed_data,(int)((ulonglong)transformed_data >> 0x20),0x57e16865,0x3fa42851);\n          processed_data = FUN_08008c30((int)transformed_data,(int)((ulonglong)transformed_data >> 0x20));\n          FUN_08003826(processed_data);\n        }\n        if (index < 2) {\n          FUN_080036c6(&DAT_0800bbbc);\n        }\n        else {\n          FUN_080036c6(&DAT_0800b764);\n        }\n      }\n      return;\n    }\n    result = FUN_08004d7c(counter,stack_array);\n    if (result == 0) break;\n    FUN_080036c6(&DAT_0800bb98);\n    switch(counter) {\n    case 0:\n      FUN_080036c6(&DAT_0800bb9c);\n      break;\n    case 1:\n      FUN_080036c6(&DAT_0800bba0);\n      break;\n    case 2:\n      FUN_080036c6(&DAT_0800bba4);\n      break;\n    case 3:\n      FUN_080036c6(&DAT_0800bba8);\n      break;\n    case 4:\n      FUN_080036c6(&DAT_0800bbac);\n      break;\n    case 5:\n      FUN_080036c6(&DAT_0800bbb0);\n      break;\n    case 6:\n      FUN_080036c6(&DAT_0800bbb4);\n      break;\n    case 7:\n      FUN_080036c6(&DAT_0800bbb8);\n    }\n    for (index = 0; index < 3; index = index + 1) {\n      if ((DAT_20000ee4 & 1) == 0) {\n        FUN_08003826(stack_array[index]);\n      }\n      else {\n        transformed_data = FUN_08008590(stack_array[index]);\n        transformed_data = FUN_08008640((int)transformed_data,(int)((ulonglong)transformed_data >> 0x20),0x57e16865,0x3fa42851);\n        processed_data = FUN_08008c30((int)transformed_data,(int)((ulonglong)transformed_data >> 0x20));\n        FUN_08003826(processed_data);\n      }\n      if (index < 2) {\n        FUN_080036c6(&DAT_0800bbbc);\n      }\n      else {\n        FUN_080036c6(&DAT_0800b764);\n      }\n    }\n    counter = counter + 1;\n  }\n  FUN_08004030(10);\n  return;\n}\n\n",
            "current_name": "process_data_080044e8",
            "entrypoint": "0x080044e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080044e8": "process_data_080044e8",
                "auStack_18": "stack_array",
                "iVar1": "result",
                "local_9": "counter",
                "local_a": "index",
                "uVar2": "processed_data",
                "uVar3": "transformed_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080046d0": {
            "additional_data": {
                "&DAT_0800b764": {
                    "1": "string27"
                },
                "&DAT_0800bbc8": {
                    "1": "string1"
                },
                "&DAT_0800bbcc": {
                    "1": "string2"
                },
                "&DAT_0800bbd0": {
                    "1": "string3"
                },
                "&DAT_0800bbd4": {
                    "1": "string4"
                },
                "&DAT_0800bbd8": {
                    "1": "string5"
                },
                "&DAT_0800bbe0": {
                    "1": "string6"
                },
                "&DAT_0800bbe4": {
                    "1": "string7"
                },
                "&DAT_0800bbec": {
                    "1": "string8"
                },
                "&DAT_0800bbf4": {
                    "1": "string9"
                },
                "&DAT_0800bbfc": {
                    "1": "string11"
                },
                "&DAT_0800bc04": {
                    "1": "string10"
                },
                "&DAT_0800bc0c": {
                    "1": "string13"
                },
                "&DAT_0800bc14": {
                    "1": "string12"
                },
                "&DAT_0800bc1c": {
                    "1": "string15"
                },
                "&DAT_0800bc24": {
                    "1": "string14"
                },
                "&DAT_0800bc2c": {
                    "1": "string17"
                },
                "&DAT_0800bc30": {
                    "1": "string18"
                },
                "&DAT_0800bc34": {
                    "1": "string16"
                },
                "&DAT_0800bc38": {
                    "1": "string19"
                },
                "&DAT_0800bc3c": {
                    "1": "string20"
                },
                "&DAT_0800bc40": {
                    "1": "string21"
                },
                "&DAT_0800bc44": {
                    "1": "string23"
                },
                "&DAT_0800bc48": {
                    "1": "string24"
                },
                "&DAT_0800bc4c": {
                    "1": "string22"
                },
                "&DAT_0800bc50": {
                    "1": "string25"
                },
                "&DAT_0800bc54": {
                    "1": "string26"
                },
                "<DAT_20000e71>": {
                    "1": "switch_variable_1"
                },
                "<DAT_20000e72>": {
                    "1": "condition_5"
                },
                "<DAT_20000e73>": {
                    "1": "condition_3"
                },
                "<DAT_20000e74>": {
                    "1": "condition_4"
                },
                "<DAT_20000e75>": {
                    "1": "value_2"
                },
                "<DAT_20000e76>": {
                    "1": "value_3"
                },
                "<DAT_20000e77>": {
                    "1": "value_4"
                },
                "<DAT_20000e78>": {
                    "1": "input_value"
                },
                "<DAT_20000e88>": {
                    "1": "value_5"
                },
                "<DAT_20000e89>": {
                    "1": "condition_1"
                },
                "<DAT_20000e8a>": {
                    "1": "condition_2"
                },
                "<DAT_20000e8c>": {
                    "1": "value_1"
                },
                "<FUN_080036c6>": {
                    "1": "print_data"
                },
                "<FUN_080037fc>": {
                    "1": "perform_operation"
                },
                "<uVar1>": {
                    "1": "result"
                },
                "<uVar2>": {
                    "1": "value"
                },
                "DAT_0800b764": {
                    "1": "stop_event"
                },
                "DAT_0800bbc8": {
                    "1": "option0_data"
                },
                "DAT_0800bbcc": {
                    "1": "option1_data"
                },
                "DAT_0800bbd0": {
                    "1": "option2_data"
                },
                "DAT_0800bbd4": {
                    "1": "component_data4"
                },
                "DAT_0800bbd8": {
                    "1": "option4_data"
                },
                "DAT_0800bbe4": {
                    "1": "component_data6"
                },
                "DAT_0800bbec": {
                    "1": "option_type2_data"
                },
                "DAT_0800bbf4": {
                    "1": "option_type3_data"
                },
                "DAT_0800bbfc": {
                    "1": "condition2_data"
                },
                "DAT_0800bc04": {
                    "1": "component_data9"
                },
                "DAT_0800bc0c": {
                    "1": "component_data12"
                },
                "DAT_0800bc14": {
                    "1": "component_data11"
                },
                "DAT_0800bc1c": {
                    "1": "condition6_data"
                },
                "DAT_0800bc24": {
                    "1": "component_data13"
                },
                "DAT_0800bc2c": {
                    "1": "condition8_data"
                },
                "DAT_0800bc30": {
                    "1": "component_data17"
                },
                "DAT_0800bc34": {
                    "1": "condition7_data"
                },
                "DAT_0800bc38": {
                    "1": "component_data18"
                },
                "DAT_0800bc3c": {
                    "1": "condition11_data"
                },
                "DAT_0800bc40": {
                    "1": "component_data20"
                },
                "DAT_0800bc44": {
                    "1": "component_data22"
                },
                "DAT_0800bc48": {
                    "1": "condition15_data"
                },
                "DAT_0800bc4c": {
                    "1": "condition13_data"
                },
                "DAT_0800bc50": {
                    "1": "response_data"
                },
                "DAT_0800bc54": {
                    "1": "end_event_data"
                },
                "DAT_20000e71": {
                    "1": "component_type"
                },
                "DAT_20000e72": {
                    "1": "is_condition3_true"
                },
                "DAT_20000e73": {
                    "1": "condition3"
                },
                "DAT_20000e74": {
                    "1": "condition4"
                },
                "DAT_20000e75": {
                    "1": "value1"
                },
                "DAT_20000e76": {
                    "1": "value2"
                },
                "DAT_20000e77": {
                    "1": "condition3_value"
                },
                "DAT_20000e78": {
                    "1": "param"
                },
                "DAT_20000e88": {
                    "1": "data_offset2"
                },
                "DAT_20000e89": {
                    "1": "flag1"
                },
                "DAT_20000e8a": {
                    "1": "flag2"
                },
                "DAT_20000e8c": {
                    "1": "offset",
                    "2": "data_offset"
                },
                "FUN_080036c6": {
                    "1": "print_text",
                    "2": "update_data",
                    "4": "load_data",
                    "5": "print_message"
                },
                "FUN_080037fc": {
                    "1": "calculate_checksum",
                    "2": "display_message",
                    "3": "perform_operation",
                    "6": "perform_action"
                },
                "FUN_08003826": {
                    "1": "initialize_memory",
                    "2": "display_result",
                    "3": "execute_operation"
                },
                "FUN_080046d0": {
                    "1": "initialize_components",
                    "2": "initialize_settings",
                    "7": "initialize_application"
                },
                "FUN_08008590": {
                    "1": "process_input_data",
                    "13": "calculate_checksum",
                    "2": "compute_value",
                    "4": "calculate_hash",
                    "5": "calculate_value"
                },
                "FUN_08008640": {
                    "1": "modify_hash",
                    "2": "perform_operation",
                    "4": "transform_data"
                },
                "FUN_08008c30": {
                    "1": "calculate_checksum",
                    "2": "calculate_result",
                    "4": "process_data",
                    "5": "perform_operation"
                },
                "uVar1": {
                    "1": "transformed_value",
                    "3": "result"
                },
                "uVar2": {
                    "1": "result",
                    "2": "result2"
                }
            },
            "called": [
                "FUN_08008590",
                "FUN_08003826",
                "FUN_080037fc",
                "FUN_08008640",
                "FUN_080036c6",
                "FUN_08008c30"
            ],
            "calling": [
                "FUN_08003b98"
            ],
            "code": "\nvoid initialize_application_080046d0(void)\n\n{\n  undefined4 result;\n  undefined8 result2;\n  \n  switch(DAT_20000e71) {\n  case 0:\n    FUN_080036c6(&DAT_0800bbc8);\n    break;\n  case 1:\n    FUN_080036c6(&DAT_0800bbcc);\n    break;\n  case 2:\n    FUN_080036c6(&DAT_0800bbd0);\n    break;\n  case 3:\n    FUN_080036c6(&DAT_0800bbd4);\n    break;\n  case 4:\n    FUN_080036c6(&DAT_0800bbd8);\n  }\n  FUN_080036c6(&DAT_0800bbe0);\n  FUN_080037fc(DAT_20000e8c + 0x36);\n  if (DAT_20000e89 == '\\0') {\n    if (DAT_20000e8a == '\\x01') {\n      FUN_080036c6(&DAT_0800bbe4);\n    }\n    else {\n      FUN_080036c6(&DAT_0800bbec);\n    }\n  }\n  else {\n    FUN_080036c6(&DAT_0800bbf4);\n  }\n  if (DAT_20000e73 == '\\0') {\n    FUN_080036c6(&DAT_0800bc04);\n  }\n  else {\n    FUN_080036c6(&DAT_0800bbfc);\n  }\n  if (DAT_20000e74 == '\\0') {\n    FUN_080036c6(&DAT_0800bc14);\n  }\n  else {\n    FUN_080036c6(&DAT_0800bc0c);\n  }\n  if (DAT_20000e72 == '\\0') {\n    FUN_080036c6(&DAT_0800bc24);\n  }\n  else {\n    FUN_080036c6(&DAT_0800bc1c);\n  }\n  if (DAT_20000e75 == 2) {\n    FUN_080036c6(&DAT_0800bc34);\n  }\n  else if (DAT_20000e75 < 3) {\n    if (DAT_20000e75 == 0) {\n      FUN_080036c6(&DAT_0800bc2c);\n    }\n    else if (DAT_20000e75 == 1) {\n      FUN_080036c6(&DAT_0800bc30);\n    }\n  }\n  if (DAT_20000e76 == '\\x01') {\n    FUN_080036c6(&DAT_0800bc38);\n  }\n  else if (DAT_20000e76 < '\\x02') {\n    if (DAT_20000e76 == -1) {\n      FUN_080036c6(&DAT_0800bc3c);\n    }\n    else if (DAT_20000e76 == '\\0') {\n      FUN_080036c6(&DAT_0800bc40);\n    }\n  }\n  if (DAT_20000e77 == 2) {\n    FUN_080036c6(&DAT_0800bc4c);\n  }\n  else if (DAT_20000e77 < 3) {\n    if (DAT_20000e77 == 0) {\n      FUN_080036c6(&DAT_0800bc44);\n    }\n    else if (DAT_20000e77 == 1) {\n      FUN_080036c6(&DAT_0800bc48);\n    }\n  }\n  FUN_080036c6(&DAT_0800bc50);\n  FUN_080037fc(DAT_20000e88);\n  FUN_080036c6(&DAT_0800bc54);\n  if (DAT_20000e73 == '\\0') {\n    FUN_08003826(DAT_20000e78);\n  }\n  else {\n    result2 = FUN_08008590(DAT_20000e78);\n    result2 = FUN_08008640((int)result2,(int)((ulonglong)result2 >> 0x20),0x57e16865,0x3fa42851);\n    result = FUN_08008c30((int)result2,(int)((ulonglong)result2 >> 0x20));\n    FUN_08003826(result);\n  }\n  FUN_080036c6(&DAT_0800b764);\n  return;\n}\n\n",
            "current_name": "initialize_application_080046d0",
            "entrypoint": "0x080046d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080046d0": "initialize_application_080046d0",
                "uVar1": "result",
                "uVar2": "result2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004900": {
            "additional_data": {
                "&DAT_0800b6d8": {
                    "1": "log_message_3_data"
                },
                "&DAT_0800bc58": {
                    "1": "log_message_1_data"
                },
                "&DAT_0800bc5c": {
                    "1": "log_message_2_data"
                },
                "DAT_0800b6d8": {
                    "1": "log_msg3",
                    "2": "data_3"
                },
                "DAT_0800bc58": {
                    "1": "log_msg1",
                    "2": "data_1"
                },
                "DAT_0800bc5c": {
                    "1": "log_msg2",
                    "2": "data_2"
                },
                "FUN_0800369c": {
                    "1": "parse_config_file",
                    "2": "initialize_variable",
                    "3": "process_data",
                    "4": "initialize_param_1",
                    "5": "initialize_data"
                },
                "FUN_080036c6": {
                    "1": "initialize_variable",
                    "5": "initialize_data",
                    "6": "print_message",
                    "8": "log_message"
                },
                "FUN_080037fc": {
                    "1": "process_initial_value",
                    "2": "process_value",
                    "3": "initialize_param_2",
                    "5": "process_input"
                },
                "FUN_08004900": {
                    "1": "initialize_components",
                    "14": "initialize",
                    "2": "initialize_binary",
                    "3": "initialize_and_process_data"
                },
                "param_1": {
                    "1": "param",
                    "2": "data_pointer",
                    "3": "undefined_value",
                    "9": "undefined_param"
                },
                "param_2": {
                    "1": "param",
                    "2": "undefined4",
                    "7": "param_value",
                    "9": "value"
                }
            },
            "called": [
                "FUN_0800369c",
                "FUN_080037fc",
                "FUN_080036c6"
            ],
            "calling": [
                "FUN_08003b98"
            ],
            "code": "\nvoid initialize_08004900(undefined undefined_param,undefined4 value)\n\n{\n  FUN_080036c6(&DAT_0800bc58);\n  FUN_080037fc(undefined_param);\n  FUN_080036c6(&DAT_0800bc5c);\n  FUN_0800369c(value);\n  FUN_080036c6(&DAT_0800b6d8);\n  return;\n}\n\n",
            "current_name": "initialize_08004900",
            "entrypoint": "0x08004900",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004900": "initialize_08004900",
                "param_1": "undefined_param",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004940": {
            "additional_data": {
                "DAT_0800bbbc": {
                    "1": "comma_text"
                },
                "DAT_0800bc70": {
                    "1": "queue_text"
                },
                "DAT_0800bca8": {
                    "1": "w_pos_text"
                },
                "DAT_20000ba8": {
                    "1": "separator4"
                },
                "DAT_20000bb0": {
                    "1": "separator3"
                },
                "DAT_20000bb4": {
                    "1": "separator2"
                },
                "DAT_20000bb8": {
                    "1": "separator1"
                },
                "DAT_20000bc0": {
                    "1": "message2"
                },
                "DAT_20000e70": {
                    "1": "position1"
                },
                "DAT_20000e74": {
                    "1": "w_pos_param2"
                },
                "DAT_20000ea9": {
                    "1": "status_type",
                    "2": "status"
                },
                "DAT_20000eac": {
                    "1": "data1"
                },
                "DAT_20000eb0": {
                    "1": "queue_status"
                },
                "DAT_20000eb4": {
                    "1": "data3"
                },
                "DAT_20000ebc": {
                    "1": "m_pos_text"
                },
                "DAT_20000ee4": {
                    "3": "flag"
                },
                "FUN_080036c6": {
                    "1": "print_text",
                    "3": "print_message"
                },
                "FUN_08003826": {
                    "1": "print_info"
                },
                "FUN_08004940": {
                    "1": "display_status",
                    "22": "print_status",
                    "3": "print_status_information",
                    "4": "print_status_info"
                },
                "FUN_080082d0": {
                    "1": "combine_values"
                },
                "FUN_08008590": {
                    "1": "calculate_checksum"
                },
                "FUN_08008640": {
                    "1": "perform_operation"
                },
                "FUN_08008c30": {
                    "1": "truncate_float"
                },
                "FUN_08008cd8": {
                    "1": "calculate_position"
                },
                "FUN_08008cdc": {
                    "1": "calculate_position"
                },
                "FUN_08008e44": {
                    "1": "convert_to_hex"
                },
                "FUN_08009054": {
                    "1": "format_float"
                },
                "MPosMessage": {
                    "1": ",m_pos:"
                },
                "WPosMessage": {
                    "1": "w_pos:"
                },
                "auStack_2c": {
                    "1": "temp_vars",
                    "11": "status_array",
                    "3": "positions",
                    "4": "status_values"
                },
                "auxiliarVar": {
                    "1": "u_var1"
                },
                "auxiliarVar2": {
                    "1": "u_var3"
                },
                "bitwiseFlag": {
                    "1": "dat_20000ee4"
                },
                "counter": {
                    "1": "u_var2"
                },
                "functionName1": {
                    "1": "print_idle"
                },
                "functionName2": {
                    "1": "print_queue"
                },
                "functionName3": {
                    "1": "print_data"
                },
                "functionName4": {
                    "1": "print_hold"
                },
                "functionName5": {
                    "1": "print_home"
                },
                "functionName6": {
                    "1": "print_alarm"
                },
                "functionName7": {
                    "1": "print_check"
                },
                "hashConstant1": {
                    "1": "0x57e16865"
                },
                "hashConstant2": {
                    "1": "0x3fa42851"
                },
                "localVar1": {
                    "1": "u_var4"
                },
                "localVar2": {
                    "1": "u_var5"
                },
                "local_11": {
                    "1": "loop_index",
                    "12": "i",
                    "13": "index"
                },
                "param_1": {
                    "1": "input1"
                },
                "param_2": {
                    "1": "pos"
                },
                "param_3": {
                    "1": "pos_ref"
                },
                "param_4": {
                    "1": "input4"
                },
                "printDataMessage1": {
                    "1": "<_idle"
                },
                "printDataMessage2": {
                    "1": "<_queue"
                },
                "printDataMessage3": {
                    "1": "<_hold"
                },
                "printDataMessage4": {
                    "1": "<_home"
                },
                "printDataMessage5": {
                    "1": "<_alarm"
                },
                "printDataMessage6": {
                    "1": "<_check"
                },
                "statusArray": {
                    "1": "au_stack_2c"
                },
                "statusValue": {
                    "1": "local_11"
                },
                "uVar1": {
                    "1": "status_value",
                    "2": "temp_var1",
                    "3": "value1",
                    "4": "result",
                    "7": "status"
                },
                "uVar2": {
                    "1": "temp2",
                    "13": "index",
                    "2": "value2",
                    "3": "temp"
                },
                "uVar3": {
                    "1": "value2",
                    "2": "value3",
                    "3": "result",
                    "4": "temp2"
                },
                "uVar4": {
                    "1": "result4",
                    "2": "temp_var4",
                    "5": "result"
                },
                "uVar5": {
                    "1": "temp2",
                    "2": "value2",
                    "3": "temp_result",
                    "5": "result2"
                }
            },
            "called": [
                "FUN_08008590",
                "FUN_080082d0",
                "FUN_08008cd8",
                "FUN_08003826",
                "FUN_08008e44",
                "FUN_08009054",
                "FUN_08008cdc",
                "FUN_08008640",
                "FUN_08008c30",
                "FUN_080036c6"
            ],
            "calling": [
                "FUN_08003a74"
            ],
            "code": "\nvoid print_status_08004940(void)\n\n{\n  undefined4 status;\n  uint index;\n  undefined4 temp2;\n  undefined8 result;\n  undefined8 result2;\n  undefined4 status_array [6];\n  byte index;\n  \n  status_array[3] = DAT_20000eac;\n  status_array[4] = DAT_20000eb0;\n  status_array[5] = DAT_20000eb4;\n  switch(DAT_20000ea9) {\n  case 0:\n    FUN_080036c6(\"<Idle\");\n    break;\n  case 2:\n    FUN_080036c6(\"<Queue\");\n    break;\n  case 3:\n    FUN_080036c6(&DAT_0800bc70);\n    break;\n  case 4:\n    FUN_080036c6(\"<Hold\");\n    break;\n  case 5:\n    FUN_080036c6(\"<Home\");\n    break;\n  case 6:\n    FUN_080036c6(\"<Alarm\");\n    break;\n  case 7:\n    FUN_080036c6(\"<Check\");\n  }\n  FUN_080036c6(\",MPos:\");\n  for (index = 0; index < 3; index = index + 1) {\n    status = FUN_08008e44(status_array[index + 3]);\n    index = (uint)index;\n    status = FUN_08009054(status,(&DAT_20000ebc)[index]);\n    status_array[index] = status;\n    if ((DAT_20000ee4 & 1) != 0) {\n      result = FUN_08008590(status_array[index]);\n      result = FUN_08008640((int)result,(int)((ulonglong)result >> 0x20),0x57e16865,0x3fa42851);\n      index = (uint)index;\n      status = FUN_08008c30((int)result,(int)((ulonglong)result >> 0x20));\n      status_array[index] = status;\n    }\n    FUN_08003826(status_array[index]);\n    FUN_080036c6(&DAT_0800bbbc);\n  }\n  FUN_080036c6(\"WPos:\");\n  for (index = 0; index < 3; index = index + 1) {\n    if ((DAT_20000ee4 & 1) == 0) {\n      temp2 = status_array[index];\n      status = FUN_08008cdc(*(undefined4 *)(&DAT_20000e70 + (index + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n      index = (uint)index;\n      status = FUN_08008cd8(temp2,status);\n      status_array[index] = status;\n    }\n    else {\n      result = FUN_08008590(status_array[index]);\n      status = FUN_08008cdc(*(undefined4 *)(&DAT_20000e70 + (index + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n      result2 = FUN_08008590(status);\n      result2 = FUN_08008640((int)result2,(int)((ulonglong)result2 >> 0x20),0x57e16865,0x3fa42851);\n      result = FUN_080082d0((int)result,(int)((ulonglong)result >> 0x20),(int)result2,\n                           (int)((ulonglong)result2 >> 0x20));\n      index = (uint)index;\n      status = FUN_08008c30((int)result,(int)((ulonglong)result >> 0x20));\n      status_array[index] = status;\n    }\n    FUN_08003826(status_array[index]);\n    if (index < 2) {\n      FUN_080036c6(&DAT_0800bbbc);\n    }\n  }\n  FUN_080036c6(&DAT_0800bca8);\n  return;\n}\n\n",
            "current_name": "print_status_08004940",
            "entrypoint": "0x08004940",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004940": "print_status_08004940",
                "auStack_2c": "status_array",
                "local_11": "index",
                "uVar1": "status",
                "uVar2": "index",
                "uVar3": "temp2",
                "uVar4": "result",
                "uVar5": "result2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004bc0": {
            "additional_data": {
                "FUN_08000374": {
                    "1": "write_data_to_memory",
                    "2": "process_data_helper",
                    "5": "copy_data_to_memory",
                    "7": "copy_data"
                },
                "FUN_08004bc0": {
                    "1": "calculate_checksum",
                    "3": "decode_and_process_data",
                    "4": "initialize_memory",
                    "5": "convert_byte_to_address"
                },
                "byte param_1": {
                    "1": "input_byte"
                },
                "char *param_2": {
                    "1": "data_ptr"
                },
                "int param_1": {
                    "1": "data"
                },
                "int param_3": {
                    "1": "data_length"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "input_data",
                    "3": "input_byte",
                    "4": "start_address",
                    "6": "source_address"
                },
                "param_2": {
                    "1": "output_buffer",
                    "2": "destination_buffer",
                    "3": "source_data",
                    "4": "buffer"
                },
                "param_3": {
                    "1": "data_param_3",
                    "2": "block_size",
                    "4": "length",
                    "6": "size",
                    "7": "data_size"
                },
                "undefined4 param_2": {
                    "1": "param"
                }
            },
            "called": [
                "FUN_08000374"
            ],
            "calling": [
                "FUN_08003b98",
                "FUN_08004d2c"
            ],
            "code": "\nvoid convert_byte_to_address_08004bc0(byte source_address,undefined4 buffer)\n\n{\n  FUN_08000374((ushort)source_address * 0x101 + 0x300,buffer,0x100);\n  return;\n}\n\n",
            "current_name": "convert_byte_to_address_08004bc0",
            "entrypoint": "0x08004bc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004bc0": "convert_byte_to_address_08004bc0",
                "param_1": "source_address",
                "param_2": "buffer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004bf4": {
            "additional_data": {
                "FUN_08000374": {
                    "1": "process_bytes",
                    "15": "process_data",
                    "2": "copy_data",
                    "6": "perform_operation"
                },
                "FUN_08004bf4": {
                    "1": "calculate_checksum",
                    "14": "calculate_offset",
                    "3": "multiply_and_add_constant",
                    "4": "calculate_offset_and_call_function"
                },
                "param_1": {
                    "1": "data_offset",
                    "11": "input_byte",
                    "2": "source_address",
                    "6": "offset"
                },
                "param_2": {
                    "1": "input_data",
                    "2": "data_param_2",
                    "3": "buffer",
                    "8": "data"
                },
                "param_3": {
                    "1": "operation_size",
                    "14": "length",
                    "2": "size",
                    "3": "data_size"
                }
            },
            "called": [
                "FUN_08000374"
            ],
            "calling": [
                "FUN_08004d7c",
                "FUN_080005b4"
            ],
            "code": "\nvoid calculate_offset_08004bf4(byte input_byte,undefined4 data)\n\n{\n  FUN_08000374((ushort)input_byte * 0xd + 0x200,data,0xc);\n  return;\n}\n\n",
            "current_name": "calculate_offset_08004bf4",
            "entrypoint": "0x08004bf4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004bf4": "calculate_offset_08004bf4",
                "param_1": "input_byte",
                "param_2": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c2a": {
            "additional_data": {
                "FUN_08000340": {
                    "1": "perform_operation",
                    "2": "set_initial_value",
                    "4": "set_initial_values",
                    "5": "set_parameters"
                },
                "FUN_08000374": {
                    "1": "set_data",
                    "2": "configure_system",
                    "4": "copy_data_to_memory",
                    "6": "copy_data"
                },
                "FUN_080004c2a": {
                    "1": "initialize_system"
                },
                "FUN_08004c2a": {
                    "1": "initialize_binary",
                    "3": "initialize_application",
                    "4": "initialize",
                    "5": "initialize_data",
                    "7": "initialize_components",
                    "9": "initialize_system"
                },
                "param_1": {
                    "1": "param",
                    "2": "flags",
                    "3": "value"
                },
                "param_2": {
                    "1": "value2",
                    "11": "data",
                    "2": "buffer"
                },
                "param_3": {
                    "1": "value3",
                    "10": "size",
                    "2": "param3",
                    "3": "length"
                }
            },
            "called": [
                "FUN_08000374",
                "FUN_08000340"
            ],
            "calling": [
                "FUN_08004e30",
                "FUN_08004c48"
            ],
            "code": "\nvoid initialize_system_08004c2a(void)\n\n{\n  FUN_08000340(0,5);\n  FUN_08000374(1,&DAT_20000ebc,0x40);\n  return;\n}\n\n",
            "current_name": "initialize_system_08004c2a",
            "entrypoint": "0x08004c2a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c2a": "initialize_system_08004c2a"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c48": {
            "additional_data": {
                "DAT_20000ebc": {
                    "1": "data_1"
                },
                "DAT_20000ec0": {
                    "1": "constant2"
                },
                "DAT_20000ec4": {
                    "1": "constant3"
                },
                "DAT_20000ec9": {
                    "1": "constant_4"
                },
                "DAT_20000ecc": {
                    "1": "constant_5"
                },
                "DAT_20000ed0": {
                    "1": "constant_6"
                },
                "DAT_20000ed4": {
                    "1": "value_i"
                },
                "DAT_20000ed6": {
                    "1": "constant10"
                },
                "DAT_20000ed8": {
                    "1": "constant8"
                },
                "DAT_20000edc": {
                    "1": "value_3"
                },
                "DAT_20000ee0": {
                    "1": "value_7"
                },
                "DAT_20000ee4": {
                    "1": "constant12"
                },
                "DAT_20000ee6": {
                    "1": "constant_2"
                },
                "DAT_20000ee8": {
                    "1": "value_n"
                },
                "DAT_20000eec": {
                    "1": "constant_4"
                },
                "DAT_20000ef0": {
                    "1": "constant_16"
                },
                "DAT_20000ef4": {
                    "1": "constant_6"
                },
                "DAT_20000ef8": {
                    "1": "constant_4"
                },
                "DAT_20000ef9": {
                    "1": "constant_19"
                },
                "DAT_20000efa": {
                    "1": "constant_6"
                },
                "FUNG_08004c48": {
                    "1": "initialize_data"
                },
                "FUN_08004c2a": {
                    "1": "perform_initialization",
                    "2": "perform_operation",
                    "3": "execute_sub_function",
                    "4": "process_data"
                },
                "FUN_08004c48": {
                    "1": "initialize_parameters",
                    "2": "initialize_settings",
                    "22": "initialize_data",
                    "4": "initialize_variables"
                },
                "flag": {
                    "1": "flag"
                },
                "initializeUserData": {
                    "1": "initialize_user_data"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "character",
                    "4": "flag",
                    "5": "input_flag",
                    "6": "input_char",
                    "7": "input"
                },
                "performInitialization": {
                    "1": "perform_initialization"
                }
            },
            "called": [
                "FUN_08004c2a"
            ],
            "calling": [
                "FUN_08004dd2",
                "FUN_080051b4"
            ],
            "code": "\nvoid initialize_data_08004c48(char input)\n\n{\n  if (input != '\\0') {\n    DAT_20000ebc = 0x431d7af6;\n    DAT_20000ec0 = 0x431d7af6;\n    DAT_20000ec4 = 0x431d7af6;\n    DAT_20000ec9 = 10;\n    DAT_20000ecc = 0x437a0000;\n    DAT_20000ed0 = 0x43fa0000;\n    DAT_20000edc = 0x470ca000;\n    DAT_20000ed8 = 0x3dcccccd;\n    DAT_20000ed4 = 0;\n    DAT_20000ed6 = 0xa80;\n    DAT_20000ee0 = 0x3d4ccccd;\n  }\n  DAT_20000ee4 = 0x12;\n  DAT_20000ee6 = 0;\n  DAT_20000ee8 = 0x41c80000;\n  DAT_20000eec = 0x437a0000;\n  DAT_20000ef0 = 100;\n  DAT_20000ef4 = 0x3f800000;\n  DAT_20000ef8 = 0x19;\n  DAT_20000ef9 = 3;\n  DAT_20000efa = 0x19;\n  FUN_08004c2a();\n  return;\n}\n\n",
            "current_name": "initialize_data_08004c48",
            "entrypoint": "0x08004c48",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c48": "initialize_data_08004c48",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d2c": {
            "additional_data": {
                "FUN_080003ec": {
                    "1": "copy_data_to_array",
                    "2": "copy_data"
                },
                "FUN_08003ec": {
                    "1": "copy_to_output_buffer"
                },
                "FUN_08004bc0": {
                    "1": "process_decoded_data",
                    "2": "process_data",
                    "3": "handle_error"
                },
                "FUN_08004d2c": {
                    "1": "check_and_initialize_data",
                    "2": "verify_data",
                    "8": "check_and_process_data"
                },
                "iVar1": {
                    "1": "validation_result",
                    "30": "result"
                },
                "param_1": {
                    "1": "byte_param",
                    "10": "byte_value",
                    "12": "input_byte",
                    "2": "byte_input"
                },
                "param_2": {
                    "1": "start_offset",
                    "2": "output_buffer",
                    "3": "output_data",
                    "6": "buffer",
                    "7": "data_buffer"
                },
                "param_3": {
                    "1": "data_length",
                    "2": "buffer_size",
                    "5": "size"
                }
            },
            "called": [
                "FUN_08004bc0",
                "FUN_080003ec"
            ],
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "code": "\nbool check_and_process_data_08004d2c(byte input_byte,undefined *data_buffer)\n\n{\n  int result;\n  \n  result = FUN_080003ec(data_buffer,(ushort)input_byte * 0x101 + 0x300,0x100);\n  if (result == 0) {\n    *data_buffer = 0;\n    FUN_08004bc0(input_byte,data_buffer);\n  }\n  return result != 0;\n}\n\n",
            "current_name": "check_and_process_data_08004d2c",
            "entrypoint": "0x08004d2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d2c": "check_and_process_data_08004d2c",
                "iVar1": "result",
                "param_1": "input_byte",
                "param_2": "data_buffer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d7c": {
            "additional_data": {
                "FUN_080003ec": {
                    "1": "check_data_validity",
                    "2": "perform_operation",
                    "3": "check_condition"
                },
                "FUN_080003ec_param_3": {
                    "1": "param3"
                },
                "FUN_080004ec": {
                    "1": "run_operation"
                },
                "FUN_08004bf4": {
                    "1": "update_data",
                    "2": "process_byte_data",
                    "4": "execute_operation",
                    "5": "process_data"
                },
                "FUN_08004bf4_param_1": {
                    "1": "byte_code"
                },
                "FUN_08004bf4_param_2": {
                    "1": "param"
                },
                "FUN_08004d7c": {
                    "1": "check_memory_access",
                    "2": "check_and_modify_data",
                    "3": "check_and_execute",
                    "4": "check_and_execute_operation",
                    "8": "check_and_process_data"
                },
                "FUN_0800b430": {
                    "1": "clear_memory_range",
                    "2": "zero_out_memory",
                    "3": "initialize_data",
                    "4": "clear_memory",
                    "5": "reset_data"
                },
                "FUN_0800b430_param_1": {
                    "1": "param1"
                },
                "F_UN003ec_param_1": {
                    "1": "input_string"
                },
                "F_UN003ec_param_2": {
                    "1": "param2"
                },
                "iVar1": {
                    "1": "access_result",
                    "28": "result"
                },
                "param_1": {
                    "1": "byte_param",
                    "15": "input_byte",
                    "2": "data",
                    "4": "data_byte",
                    "6": "byte_value"
                },
                "param_2": {
                    "1": "offset",
                    "2": "ptr",
                    "3": "memory_address"
                },
                "param_3": {
                    "1": "start",
                    "3": "length",
                    "4": "size"
                }
            },
            "called": [
                "FUN_0800b430",
                "FUN_080003ec",
                "FUN_08004bf4"
            ],
            "calling": [
                "FUN_080004ac",
                "FUN_080005b4",
                "FUN_080044e8",
                "FUN_080051b4"
            ],
            "code": "\nbool check_and_process_data_08004d7c(byte input_byte,undefined4 memory_address)\n\n{\n  int result;\n  \n  result = FUN_080003ec(memory_address,(ushort)input_byte * 0xd + 0x200,0xc);\n  if (result == 0) {\n    FUN_0800b430(memory_address,0,0xc);\n    FUN_08004bf4(input_byte,memory_address);\n  }\n  return result != 0;\n}\n\n",
            "current_name": "check_and_process_data_08004d7c",
            "entrypoint": "0x08004d7c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d7c": "check_and_process_data_08004d7c",
                "iVar1": "result",
                "param_1": "input_byte",
                "param_2": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004dd2": {
            "additional_data": {
                "DAT_20000ebc": {
                    "1": "resource_data"
                },
                "FUN_08000310": {
                    "1": "get_status",
                    "3": "get_byte",
                    "4": "get_data",
                    "6": "get_input_value"
                },
                "FUN_080003ec": {
                    "1": "allocate_memory_for_resource",
                    "15": "allocate_memory"
                },
                "FUN_08004c48": {
                    "1": "process_error",
                    "2": "perform_operation",
                    "3": "process_data",
                    "4": "cleanup_resources"
                },
                "FUN_08004dd2": {
                    "1": "extract_and_process_data",
                    "2": "check_and_initialize_memory",
                    "3": "check_data",
                    "6": "check_and_initialize",
                    "8": "check_and_process_data"
                },
                "bVar1": {
                    "1": "value",
                    "2": "status",
                    "7": "result"
                },
                "iVar2": {
                    "1": "extraction_result",
                    "2": "error_code",
                    "4": "result"
                },
                "param_1": {
                    "1": "string"
                },
                "param_2": {
                    "1": "count"
                },
                "param_3": {
                    "1": "size"
                }
            },
            "called": [
                "FUN_080003ec",
                "FUN_08000310",
                "FUN_08004c48"
            ],
            "calling": [
                "FUN_080051b4"
            ],
            "code": "\nundefined4 check_and_process_data_08004dd2(void)\n\n{\n  byte result;\n  int result;\n  \n  result = FUN_08000310(0);\n  if (result == 5) {\n    result = FUN_080003ec(&DAT_20000ebc,1,0x40);\n    if (result == 0) {\n      return 0;\n    }\n  }\n  else {\n    if (4 < result) {\n      return 0;\n    }\n    result = FUN_080003ec(&DAT_20000ebc,1,0x28);\n    if (result == 0) {\n      return 0;\n    }\n    FUN_08004c48(0);\n  }\n  return 1;\n}\n\n",
            "current_name": "check_and_process_data_08004dd2",
            "entrypoint": "0x08004dd2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004dd2": "check_and_process_data_08004dd2",
                "bVar1": "result",
                "iVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e30": {
            "additional_data": {
                "&DAT_20000ebc": {
                    "1": "data_arr"
                },
                "(int)((ulonglong)uVar3 >> 0x20)": {
                    "1": "computed_value_high"
                },
                "(int)uVar3": {
                    "1": "computed_value_low"
                },
                "0": {
                    "1": "success"
                },
                "0x10": {
                    "1": "some_operation"
                },
                "0x11": {
                    "1": "flag_update4"
                },
                "0x12": {
                    "1": "action_index3"
                },
                "0x13": {
                    "1": "reverse_value3"
                },
                "0x14": {
                    "1": "action_index5"
                },
                "0x15": {
                    "1": "reverse_calculation2"
                },
                "0x16": {
                    "1": "reverse_value5"
                },
                "0x17": {
                    "1": "reverse_calculation3"
                },
                "0x40400000": {
                    "1": "memory_threshold"
                },
                "0x42700000": {
                    "1": "binary_threshold"
                },
                "0x7fffffff": {
                    "1": "clear_bit_mask",
                    "2": "mask"
                },
                "0xb": {
                    "1": "reverse_value"
                },
                "0xc": {
                    "1": "reverse_value2"
                },
                "0xd": {
                    "1": "flag_update1"
                },
                "0xe": {
                    "1": "flag_update2"
                },
                "0xef": {
                    "1": "some_flag_error"
                },
                "0xf": {
                    "1": "flag_update3"
                },
                "0xf7": {
                    "1": "bit_mask4"
                },
                "0xfb": {
                    "1": "bit_mask3"
                },
                "0xfd": {
                    "1": "bit_mask2"
                },
                "0xfe": {
                    "1": "bit_mask1"
                },
                "6": {
                    "1": "failure"
                },
                "8": {
                    "1": "validation_error"
                },
                "9": {
                    "1": "calculation_error"
                },
                "DAT_20000ebc": {
                    "1": "setting_array",
                    "2": "data1"
                },
                "DAT_20000ec9": {
                    "1": "config_value_a",
                    "2": "result1"
                },
                "DAT_20000ecc": {
                    "1": "config4",
                    "3": "config_value4"
                },
                "DAT_20000ed0": {
                    "1": "value4",
                    "3": "config_value5"
                },
                "DAT_20000ed4": {
                    "1": "config_value_d",
                    "2": "config_value6"
                },
                "DAT_20000ed6": {
                    "1": "xor_result_four",
                    "2": "config_value23"
                },
                "DAT_20000ed8": {
                    "1": "modified_value8",
                    "4": "config_value10"
                },
                "DAT_20000edc": {
                    "1": "binary_result",
                    "2": "result8"
                },
                "DAT_20000ee0": {
                    "1": "setting9_result",
                    "4": "config_value9"
                },
                "DAT_20000ee4": {
                    "1": "bit_mask_result",
                    "2": "config_flags"
                },
                "DAT_20000ee6": {
                    "1": "data_18"
                },
                "DAT_20000ee8": {
                    "1": "data_19",
                    "2": "config_value19"
                },
                "DAT_20000eec": {
                    "1": "data_20",
                    "3": "config_value20"
                },
                "DAT_20000ef0": {
                    "1": "result_9",
                    "2": "config_value21"
                },
                "DAT_20000ef4": {
                    "1": "value18",
                    "3": "config_value22"
                },
                "DAT_20000ef8": {
                    "1": "checksum_result",
                    "2": "config_value7"
                },
                "DAT_20000ef9": {
                    "1": "config_value_j",
                    "2": "config_value12"
                },
                "DAT_20000efa": {
                    "1": "result4",
                    "2": "config_value11"
                },
                "FUN_0800192c": {
                    "1": "perform_operation",
                    "2": "reverse_something"
                },
                "FUN_08004c2a": {
                    "1": "update_data",
                    "2": "perform_cleanup"
                },
                "FUN_08004e30": {
                    "1": "process_command",
                    "2": "update_settings",
                    "5": "update_data",
                    "6": "update_config",
                    "7": "update_configuration"
                },
                "FUN_08008590": {
                    "1": "calculate_hash",
                    "2": "process_data"
                },
                "FUN_08008bf0": {
                    "1": "calculate_c",
                    "2": "calculate_result"
                },
                "FUN_08008eec": {
                    "1": "modify_value4"
                },
                "FUN_08009214": {
                    "1": "verify_data"
                },
                "FUN_08009228": {
                    "1": "calculate_value1",
                    "2": "check_config_type3"
                },
                "FUN_0800923c": {
                    "1": "check_data",
                    "2": "check_value"
                },
                "FUN_08009654": {
                    "1": "modify_value2",
                    "2": "reverse_bits"
                },
                "FUN_08009798": {
                    "1": "calculate_xor"
                },
                "iVar2": {
                    "15": "result",
                    "2": "status",
                    "4": "error",
                    "7": "return_value"
                },
                "param_1": {
                    "1": "command",
                    "2": "setting_type",
                    "4": "config_option",
                    "9": "config_type"
                },
                "param_2": {
                    "1": "parameter_value",
                    "2": "param_value",
                    "3": "data_value",
                    "4": "setting_value",
                    "6": "value",
                    "9": "config_value"
                },
                "param_2 & 0x7fffffff": {
                    "1": "config_value9"
                },
                "param_3": {
                    "1": "param4"
                },
                "return": {
                    "1": "result"
                },
                "return 0": {
                    "1": "config_update_success"
                },
                "return 6": {
                    "1": "config_type_invalid"
                },
                "return 8": {
                    "1": "config_update_failed_a"
                },
                "return 9": {
                    "1": "config_update_failed_b"
                },
                "uVar1": {
                    "1": "result_code",
                    "11": "result",
                    "2": "return_code",
                    "3": "error_code",
                    "5": "return_value"
                },
                "uVar3": {
                    "1": "transformed_value",
                    "2": "result",
                    "3": "temp",
                    "6": "processed_value",
                    "8": "temp_value"
                }
            },
            "called": [
                "FUN_08008590",
                "FUN_08009228",
                "FUN_08009798",
                "FUN_08009214",
                "FUN_08004c2a",
                "FUN_08008eec",
                "FUN_08009654",
                "FUN_0800923c",
                "FUN_08008bf0",
                "FUN_0800192c"
            ],
            "calling": [
                "FUN_08003b98"
            ],
            "code": "\nundefined4 update_configuration_08004e30(int config_type,uint config_value)\n\n{\n  undefined4 result;\n  int result;\n  undefined8 temp_value;\n  \n  switch(config_type) {\n  case 0:\n  case 1:\n  case 2:\n    result = FUN_0800923c(config_value,0);\n    if (result != 0) {\n      result 8;\n    }\n    (&DAT_20000ebc)[config_type] = config_value;\n    break;\n  case 3:\n    result = FUN_08009228(config_value,0x40400000);\n    if (result != 0) {\n      result 9;\n    }\n    temp_value = FUN_08008590(config_value);\n    temp_value = FUN_08009654(computed_value_low,(int)((ulonglong)temp_value >> 0x20));\n    DAT_20000ec9 = FUN_08008bf0(computed_value_low,(int)((ulonglong)temp_value >> 0x20));\n    break;\n  case 4:\n    DAT_20000ecc = config_value;\n    break;\n  case 5:\n    DAT_20000ed0 = config_value;\n    break;\n  case 6:\n    temp_value = FUN_08008590(config_value);\n    temp_value = FUN_08009798(computed_value_low,(int)((ulonglong)temp_value >> 0x20));\n    DAT_20000ed4 = FUN_08008bf0(computed_value_low,(int)((ulonglong)temp_value >> 0x20));\n    break;\n  case 7:\n    temp_value = FUN_08008590(config_value);\n    temp_value = FUN_08009654(computed_value_low,(int)((ulonglong)temp_value >> 0x20));\n    DAT_20000ef8 = FUN_08008bf0(computed_value_low,(int)((ulonglong)temp_value >> 0x20));\n    break;\n  case 8:\n    result = FUN_08008eec(config_value,0x42700000);\n    DAT_20000edc = FUN_08008eec(result,0x42700000);\n    break;\n  case 9:\n    DAT_20000ee0 = config_value & 0x7fffffff;\n    break;\n  case 10:\n    DAT_20000ed8 = config_value;\n    break;\n  case 0xb:\n    temp_value = FUN_08008590(config_value);\n    temp_value = FUN_08009654(computed_value_low,(int)((ulonglong)temp_value >> 0x20));\n    DAT_20000efa = FUN_08008bf0(computed_value_low,(int)((ulonglong)temp_value >> 0x20));\n    break;\n  case 0xc:\n    temp_value = FUN_08008590(config_value);\n    temp_value = FUN_08009654(computed_value_low,(int)((ulonglong)temp_value >> 0x20));\n    DAT_20000ef9 = FUN_08008bf0(computed_value_low,(int)((ulonglong)temp_value >> 0x20));\n    break;\n  case 0xd:\n    result = FUN_08009214(config_value,0);\n    if (result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 1;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfe;\n    }\n    break;\n  case 0xe:\n    result = FUN_08009214(config_value,0);\n    if (result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 2;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfd;\n    }\n    break;\n  case 0xf:\n    result = FUN_08009214(config_value,0);\n    if (result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 4;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfb;\n    }\n    break;\n  case 0x10:\n    result = FUN_08009214(config_value,0);\n    if (result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 8;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xf7;\n    }\n    FUN_0800192c();\n    break;\n  case 0x11:\n    result = FUN_08009214(config_value,0);\n    if (result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 0x10;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xef;\n    }\n    break;\n  case 0x12:\n    temp_value = FUN_08008590(config_value);\n    temp_value = FUN_08009798(computed_value_low,(int)((ulonglong)temp_value >> 0x20));\n    DAT_20000ee6 = FUN_08008bf0(computed_value_low,(int)((ulonglong)temp_value >> 0x20));\n    break;\n  case 0x13:\n    DAT_20000ee8 = config_value;\n    break;\n  case 0x14:\n    DAT_20000eec = config_value;\n    break;\n  case 0x15:\n    temp_value = FUN_08008590(config_value);\n    temp_value = FUN_08009654(computed_value_low,(int)((ulonglong)temp_value >> 0x20));\n    DAT_20000ef0 = FUN_08008bf0(computed_value_low,(int)((ulonglong)temp_value >> 0x20));\n    break;\n  case 0x16:\n    DAT_20000ef4 = config_value;\n    break;\n  case 0x17:\n    temp_value = FUN_08008590(config_value);\n    temp_value = FUN_08009798(computed_value_low,(int)((ulonglong)temp_value >> 0x20));\n    DAT_20000ed6 = FUN_08008bf0(computed_value_low,(int)((ulonglong)temp_value >> 0x20));\n    break;\n  default:\n    result 6;\n  }\n  FUN_08004c2a();\n  result 0;\n}\n\n",
            "current_name": "update_configuration_08004e30",
            "entrypoint": "0x08004e30",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)uVar3": "computed_value_low",
                "FUN_08004e30": "update_configuration_08004e30",
                "iVar2": "result",
                "param_1": "config_type",
                "param_2": "config_value",
                "return": "result",
                "uVar1": "result",
                "uVar3": "temp_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080051b4": {
            "additional_data": {
                "FUNK_08004dd2": {
                    "1": "check_data_validity"
                },
                "FUN_08004030": {
                    "1": "print_error",
                    "2": "display_error",
                    "3": "log_error",
                    "4": "print_error_message"
                },
                "FUN_08004250": {
                    "1": "process_data_entry",
                    "9": "process_data"
                },
                "FUN_08004c48": {
                    "1": "set_error_flag",
                    "8": "set_flag"
                },
                "FUN_08004d7c": {
                    "1": "check_buffer_validity"
                },
                "FUN_08004dd2": {
                    "1": "check_condition",
                    "3": "check_data",
                    "4": "check_data_validity"
                },
                "FUN_080051b4": {
                    "1": "check_and_handle_errors",
                    "2": "process_data",
                    "24": "check_and_process_data"
                },
                "auStack_18": {
                    "1": "data_chunk",
                    "11": "data_buffer",
                    "12": "buffer"
                },
                "iVar1": {
                    "1": "return_value",
                    "11": "result"
                },
                "local_9": {
                    "1": "iteration_count",
                    "10": "counter",
                    "16": "index",
                    "2": "loop_counter"
                },
                "param_1": {
                    "1": "byte_value"
                },
                "param_2": {
                    "1": "data_buffer"
                }
            },
            "called": [
                "FUN_08004250",
                "FUN_08004d7c",
                "FUN_08004dd2",
                "FUN_08004030",
                "FUN_08004c48"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid check_and_process_data_080051b4(void)\n\n{\n  int result;\n  undefined buffer [15];\n  byte index;\n  \n  result = FUN_08004dd2();\n  if (result == 0) {\n    FUN_08004030(10);\n    FUN_08004c48(1);\n    FUN_08004250();\n  }\n  for (index = 0; index < 8; index = index + 1) {\n    result = FUN_08004d7c(index,buffer);\n    if (result == 0) {\n      FUN_08004030(10);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "check_and_process_data_080051b4",
            "entrypoint": "0x080051b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080051b4": "check_and_process_data_080051b4",
                "auStack_18": "buffer",
                "iVar1": "result",
                "local_9": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005208": {
            "called": [],
            "calling": [
                "FUN_0800525c"
            ],
            "code": "\nvoid FUNC_08005208(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005208",
            "entrypoint": "0x08005208",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005208": "FUNC_08005208"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005214": {
            "called": [],
            "calling": [
                "FUN_08005250"
            ],
            "code": "\nvoid FUNC_08005214(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005214",
            "entrypoint": "0x08005214",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005214": "FUNC_08005214"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005220": {
            "called": [],
            "calling": [
                "FUN_0800525c"
            ],
            "code": "\nvoid FUNC_08005220(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005220",
            "entrypoint": "0x08005220",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005220": "FUNC_08005220"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800522c": {
            "called": [],
            "calling": [
                "FUN_0800525c"
            ],
            "code": "\nvoid FUNC_0800522c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800522c",
            "entrypoint": "0x0800522c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800522c": "FUNC_0800522c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005238": {
            "additional_data": {
                "FUN_08005238": {
                    "1": "initialize_global_variable",
                    "30": "initialize_data"
                },
                "FUN_08005250": {
                    "1": "execute_subroutine",
                    "3": "perform_operation",
                    "8": "perform_initialization",
                    "9": "process_data"
                }
            },
            "called": [
                "FUN_08005250"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid initialize_data_08005238(void)\n\n{\n  DAT_20000e12 = 0;\n  FUN_08005250();\n  return;\n}\n\n",
            "current_name": "initialize_data_08005238",
            "entrypoint": "0x08005238",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005238": "initialize_data_08005238"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005250": {
            "additional_data": {
                "FUNC_08005214": {
                    "1": "invoke_subroutine",
                    "2": "call_subfunction",
                    "3": "execute_sub_function",
                    "5": "execute_initialization",
                    "8": "perform_initialization"
                },
                "FUN_08005250": {
                    "1": "call_sub_functions",
                    "3": "execute_function",
                    "6": "initialize_system"
                }
            },
            "called": [
                "FUN_08005214"
            ],
            "calling": [
                "FUN_0800525c",
                "FUN_080025e8",
                "FUN_08005238"
            ],
            "code": "\nvoid execute_initialization_08005250(void)\n\n{\n  FUNC_08005214();\n  return;\n}\n\n",
            "current_name": "execute_initialization_08005250",
            "entrypoint": "0x08005250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005250": "execute_initialization_08005250"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800525c": {
            "additional_data": {
                "DAT_20000e12": {
                    "1": "saved_value",
                    "2": "stored_value"
                },
                "FUNC_08005208": {
                    "1": "update_data_finalize",
                    "2": "update_state",
                    "3": "finalize_update",
                    "6": "update_data"
                },
                "FUNC_08005220": {
                    "1": "handle_input_param_b",
                    "2": "handle_positive_data",
                    "3": "handle_valid_input",
                    "4": "handle_positive_input"
                },
                "FUNC_0800522c": {
                    "1": "handle_invalid_value",
                    "2": "handle_invalid_param",
                    "3": "handle_negative_value",
                    "8": "handle_invalid_input"
                },
                "FUN_08002fd4": {
                    "1": "trigger_error",
                    "2": "handle_mismatch"
                },
                "FUN_08005250": {
                    "1": "reset_param",
                    "2": "reset_value",
                    "3": "handle_zero_param",
                    "6": "handle_zero_input"
                },
                "FUN_0800525c": {
                    "1": "update_state",
                    "2": "process_byte",
                    "3": "update_value",
                    "5": "check_and_update_param",
                    "6": "update_data"
                },
                "param_1": {
                    "1": "parameter",
                    "2": "byte_value",
                    "3": "input_byte",
                    "6": "input_param"
                }
            },
            "called": [
                "FUN_08005208",
                "FUN_0800522c",
                "FUN_08005250",
                "FUN_08005220",
                "FUN_08002fd4"
            ],
            "calling": [
                "FUN_080005b4"
            ],
            "code": "\nvoid update_data_0800525c(byte input_value)\n\n{\n  if ((int)(char)input_value != (uint)DAT_20000e12) {\n    FUN_08002fd4();\n    if (input_value == 0) {\n      FUN_08005250();\n      DAT_20000e12 = input_value;\n    }\n    else {\n      if ((char)input_value < '\\x01') {\n        FUNC_0800522c();\n      }\n      else {\n        FUNC_08005220();\n      }\n      FUNC_08005208();\n      DAT_20000e12 = input_value;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "update_data_0800525c",
            "entrypoint": "0x0800525c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800525c": "update_data_0800525c",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080052ac": {
            "additional_data": {
                "0xfffffaaf": {
                    "1": "mask"
                },
                "FUN_080052ac": {
                    "1": "update_status_register",
                    "3": "update_memory_value",
                    "7": "update_data"
                },
                "_DAT_40021014": {
                    "1": "status_value",
                    "3": "memory_address",
                    "4": "register_value",
                    "5": "existing_data"
                },
                "_DAT_40021014 & 0xfffffaaf": {
                    "2": "masked_data"
                },
                "param_1": {
                    "1": "configuration",
                    "13": "new_value",
                    "2": "new_data",
                    "5": "input_value",
                    "7": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800583c",
                "FUN_08005778",
                "FUN_08005760"
            ],
            "code": "\n\n\nvoid update_data_080052ac(uint new_value)\n\n{\n  _DAT_40021014 = new_value | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "current_name": "update_data_080052ac",
            "entrypoint": "0x080052ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080052ac": "update_data_080052ac",
                "param_1": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080052dc": {
            "additional_data": {
                "FUN_080052dc": {
                    "1": "update_data_bits_in_register",
                    "2": "update_configuration",
                    "6": "update_data"
                },
                "_DAT_40021014": {
                    "1": "original_value",
                    "3": "register_value"
                },
                "_DAT_40021014 & 0xfffff55f": {
                    "1": "masked_value"
                },
                "param_1": {
                    "1": "input_param",
                    "10": "new_value",
                    "2": "value",
                    "6": "input_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_080053a0"
            ],
            "code": "\n\n\nvoid update_data_080052dc(uint new_value)\n\n{\n  _DAT_40021014 = new_value | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "current_name": "update_data_080052dc",
            "entrypoint": "0x080052dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080052dc": "update_data_080052dc",
                "param_1": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800530c": {
            "called": [],
            "calling": [
                "FUN_080057e4"
            ],
            "code": "\nvoid FUNC_0800530c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800530c",
            "entrypoint": "0x0800530c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800530c": "FUNC_0800530c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005318": {
            "called": [],
            "calling": [
                "FUN_08005790"
            ],
            "code": "\nvoid FUNC_08005318(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005318",
            "entrypoint": "0x08005318",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005318": "FUNC_08005318"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005324": {
            "additional_data": {
                "FUN_08005324": {
                    "1": "calculate_optimal_division",
                    "2": "calculate_speed",
                    "4": "calculate_divisor",
                    "5": "calculate_division"
                },
                "FUN_08007bf0": {
                    "1": "update_refresh_rate",
                    "2": "perform_action"
                },
                "local_14": {
                    "1": "adjusted_time",
                    "10": "adjusted_value",
                    "2": "adjusted_input",
                    "3": "divisor"
                },
                "param_1": {
                    "1": "input_param",
                    "15": "input_value",
                    "2": "input_frequency",
                    "3": "input"
                }
            },
            "called": [
                "FUN_08007bf0"
            ],
            "calling": [
                "FUN_08005814",
                "FUN_080058a0",
                "FUN_080053a0"
            ],
            "code": "\nvoid calculate_division_08005324(uint input_value)\n\n{\n  uint adjusted_value;\n  \n  adjusted_value = input_value;\n  if (input_value < 800) {\n    adjusted_value = 800;\n  }\n  DAT_20000e28 = 1260000000 / adjusted_value;\n  FUN_08007bf0(DAT_20000e28);\n  return;\n}\n\n",
            "current_name": "calculate_division_08005324",
            "entrypoint": "0x08005324",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005324": "calculate_division_08005324",
                "local_14": "adjusted_value",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005360": {
            "additional_data": {
                "DAT_20000e28": {
                    "1": "increment",
                    "2": "previous_value",
                    "3": "base_value",
                    "8": "initial_value"
                },
                "DAT_20000e2c": {
                    "1": "threshold_value",
                    "3": "accumulator",
                    "9": "current_value"
                },
                "FUN_08005360": {
                    "1": "calculate_and_check_threshold",
                    "2": "check_if_exceeded_threshold",
                    "3": "check_if_threshold_exceeded",
                    "4": "check_overflow"
                },
                "bVar1": {
                    "1": "exceeds_limit",
                    "15": "is_threshold_exceeded",
                    "2": "exceeds_threshold",
                    "3": "exceeded_threshold",
                    "5": "is_overflow"
                }
            },
            "called": [],
            "calling": [
                "FUN_080053a0"
            ],
            "code": "\nbool check_threshold_exceeded_08005360(void)\n\n{\n  bool is_threshold_exceeded;\n  \n  DAT_20000e2c = DAT_20000e28 + DAT_20000e2c;\n  is_threshold_exceeded = 420000 < DAT_20000e2c;\n  if (is_threshold_exceeded) {\n    DAT_20000e2c = DAT_20000e2c - 420000;\n  }\n  return is_threshold_exceeded;\n}\n\n",
            "current_name": "check_threshold_exceeded_08005360",
            "entrypoint": "0x08005360",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005360": "check_threshold_exceeded_08005360",
                "bVar1": "is_threshold_exceeded"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080053a0": {
            "additional_data": {
                "DAT_20000e14": {
                    "1": "sum1"
                },
                "DAT_20000e18": {
                    "1": "sum2"
                },
                "DAT_20000e1c": {
                    "1": "sum3"
                },
                "DAT_20000e20": {
                    "1": "offset"
                },
                "DAT_20000e24": {
                    "1": "counter"
                },
                "DAT_20000e2c": {
                    "1": "constant"
                },
                "DAT_20000e30": {
                    "1": "temp_value"
                },
                "DAT_20000e34": {
                    "1": "temp_sum"
                },
                "DAT_20000e38": {
                    "1": "data_ptr"
                },
                "DAT_20000e3c": {
                    "1": "data_offset"
                },
                "DAT_20000e3e": {
                    "1": "data_value"
                },
                "DAT_20000e40": {
                    "1": "original_data_ptr"
                },
                "DAT_20000ea9": {
                    "1": "condition"
                },
                "DAT_20000eaa": {
                    "1": "flag1"
                },
                "DAT_20000eac": {
                    "1": "flag2"
                },
                "DAT_20000eb0": {
                    "1": "flag3"
                },
                "DAT_20000eb4": {
                    "1": "flag4"
                },
                "DAT_20000ed4": {
                    "1": "key1"
                },
                "DAT_20000ed6": {
                    "1": "key2"
                },
                "FUN_08002f40": {
                    "1": "cleanup",
                    "2": "reset_data_values",
                    "25": "reset_data"
                },
                "FUN_08002f74": {
                    "1": "get_new_data_values",
                    "28": "allocate_memory"
                },
                "FUN_080052dc": {
                    "1": "update_data_value",
                    "19": "initialize_data",
                    "2": "init_data",
                    "3": "process_data"
                },
                "FUN_08005324": {
                    "1": "update_data_value",
                    "12": "update_data",
                    "13": "update_value"
                },
                "FUN_08005360": {
                    "1": "check_data",
                    "26": "check_condition"
                },
                "FUN_080053a0": {
                    "1": "handle_data_processing",
                    "11": "process_data",
                    "15": "update_data",
                    "2": "update_data_values"
                },
                "FUN_080057e4": {
                    "1": "handle_failure",
                    "28": "handle_error"
                },
                "iVar1": {
                    "2": "result"
                },
                "param_1": {
                    "2": "data"
                }
            },
            "called": [
                "FUN_080052dc",
                "FUN_080057e4",
                "FUN_08005324",
                "FUN_08002f40",
                "FUN_08005360",
                "FUN_08002f74"
            ],
            "calling": [
                "FUN_08007c7c"
            ],
            "code": "\nvoid update_data_080053a0(void)\n\n{\n  int result;\n  \n  FUN_080052dc(DAT_20000e3e);\n  DAT_20000e40 = DAT_20000e3c;\n  if (DAT_20000e38 == (ushort *)0x0) {\n    DAT_20000e38 = (ushort *)FUN_08002f74();\n    if (DAT_20000e38 == (ushort *)0x0) {\n      FUN_080057e4();\n      DAT_20000eaa = DAT_20000eaa | 4;\n    }\n    else {\n      if (DAT_20000ea9 == '\\x03') {\n        DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x14);\n        FUN_08005324(DAT_20000e30);\n        DAT_20000e2c = 210000;\n      }\n      DAT_20000e34 = (*(int *)(DAT_20000e38 + 0x18) >> 1) + *(int *)(DAT_20000e38 + 0x18);\n      DAT_20000e14 = -(*(int *)(DAT_20000e38 + 8) >> 1);\n      DAT_20000e20 = *(int *)(DAT_20000e38 + 8);\n      DAT_20000e24 = 0;\n      DAT_20000e18 = DAT_20000e14;\n      DAT_20000e1c = DAT_20000e14;\n    }\n  }\n  if (DAT_20000e38 != (ushort *)0x0) {\n    DAT_20000e3e = *DAT_20000e38;\n    DAT_20000e3c = 0;\n    DAT_20000e14 = *(int *)(DAT_20000e38 + 2) + DAT_20000e14;\n    if (0 < DAT_20000e14) {\n      DAT_20000e3c = 0x10;\n      DAT_20000e14 = DAT_20000e14 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x20) == 0) {\n        DAT_20000eac = DAT_20000eac + 1;\n      }\n      else {\n        DAT_20000eac = DAT_20000eac + -1;\n      }\n    }\n    DAT_20000e18 = *(int *)(DAT_20000e38 + 4) + DAT_20000e18;\n    if (0 < DAT_20000e18) {\n      DAT_20000e3c = DAT_20000e3c | 0x440;\n      DAT_20000e18 = DAT_20000e18 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x80) == 0) {\n        DAT_20000eb0 = DAT_20000eb0 + 1;\n      }\n      else {\n        DAT_20000eb0 = DAT_20000eb0 + -1;\n      }\n    }\n    DAT_20000e1c = *(int *)(DAT_20000e38 + 6) + DAT_20000e1c;\n    if (0 < DAT_20000e1c) {\n      DAT_20000e3c = DAT_20000e3c | 0x100;\n      DAT_20000e1c = DAT_20000e1c - DAT_20000e20;\n      if ((DAT_20000e3e & 0x200) == 0) {\n        DAT_20000eb4 = DAT_20000eb4 + 1;\n      }\n      else {\n        DAT_20000eb4 = DAT_20000eb4 + -1;\n      }\n    }\n    DAT_20000e24 = DAT_20000e24 + 1;\n    if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 8)) {\n      if (DAT_20000ea9 == '\\x04') {\n        result = FUN_08005360();\n        if (result != 0) {\n          if (*(uint *)(DAT_20000e38 + 0x18) < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n            FUN_08005324(DAT_20000e30);\n          }\n          else {\n            FUN_080057e4();\n            DAT_20000eaa = DAT_20000eaa | 4;\n          }\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1a)) {\n        result = FUN_08005360();\n        if (result != 0) {\n          DAT_20000e30 = DAT_20000e30 + *(int *)(DAT_20000e38 + 0x18);\n          if (*(uint *)(DAT_20000e38 + 0x1e) <= DAT_20000e30) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          }\n          FUN_08005324(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 != *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          FUN_08005324(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 == *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 == *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e2c = 210000;\n        }\n        else {\n          DAT_20000e2c = 420000 - DAT_20000e2c;\n        }\n      }\n      else {\n        result = FUN_08005360();\n        if (result != 0) {\n          if (DAT_20000e34 < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n          }\n          else {\n            DAT_20000e30 = DAT_20000e30 >> 1;\n          }\n          if (DAT_20000e30 < *(uint *)(DAT_20000e38 + 0x16)) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x16);\n          }\n          FUN_08005324(DAT_20000e30);\n        }\n      }\n    }\n    else {\n      DAT_20000e3c = 0;\n      DAT_20000e38 = (ushort *)0x0;\n      FUN_08002f40();\n    }\n  }\n  DAT_20000e3c = DAT_20000e3c ^ DAT_20000ed4;\n  DAT_20000e3e = DAT_20000e3e ^ DAT_20000ed6;\n  return;\n}\n\n",
            "current_name": "update_data_080053a0",
            "entrypoint": "0x080053a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080053a0": "update_data_080053a0",
                "iVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005760": {
            "additional_data": {
                "FUN_080052ac": {
                    "1": "configure_app",
                    "21": "process_data"
                },
                "FUN_08005760": {
                    "1": "initialize_main_function",
                    "18": "initialize_data",
                    "2": "execute_initialization",
                    "4": "initialize_application"
                },
                "param_1": {
                    "1": "data_parameter",
                    "18": "data",
                    "2": "input_data",
                    "3": "data_address"
                }
            },
            "called": [
                "FUN_080052ac"
            ],
            "calling": [
                "FUN_08007c7c"
            ],
            "code": "\nvoid initialize_data_08005760(void)\n\n{\n  FUN_080052ac(DAT_20000ed4);\n  return;\n}\n\n",
            "current_name": "initialize_data_08005760",
            "entrypoint": "0x08005760",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005760": "initialize_data_08005760"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005778": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "initialize_data"
                },
                "<original_parameter_name_1>": {
                    "1": "param"
                },
                "<original_variable_name_1>": {
                    "1": "data"
                },
                "FUN_080052ac": {
                    "1": "initialize_parameter",
                    "15": "process_data",
                    "2": "initialize_data_helper"
                },
                "FUN_08005778": {
                    "1": "initialize_data_structures",
                    "25": "initialize_data",
                    "3": "initialize_system"
                },
                "param_1": {
                    "1": "param",
                    "10": "data",
                    "3": "data_address",
                    "4": "data_pointer"
                }
            },
            "called": [
                "FUN_080052ac"
            ],
            "calling": [
                "FUN_08007c7c"
            ],
            "code": "\nvoid initialize_data_08005778(void)\n\n{\n  FUN_080052ac(DAT_20000e40);\n  return;\n}\n\n",
            "current_name": "initialize_data_08005778",
            "entrypoint": "0x08005778",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005778": "initialize_data_08005778"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005790": {
            "additional_data": {
                "DAT_20000e3c": {
                    "1": "data_1"
                },
                "DAT_20000e3e": {
                    "1": "data2"
                },
                "DAT_20000ea9": {
                    "1": "condition"
                },
                "DAT_20000ec9": {
                    "1": "offset_data"
                },
                "DAT_20000ed4": {
                    "1": "new_data1"
                },
                "DAT_20000ed6": {
                    "1": "initial_data_2"
                },
                "FUNC_08005318": {
                    "1": "perform_initial_setup",
                    "2": "perform_initialization",
                    "7": "initialize_data",
                    "9": "initialize"
                },
                "FUN_08005790": {
                    "1": "execute_process",
                    "10": "process_data",
                    "14": "initialize_data"
                },
                "FUN_08007b70": {
                    "1": "perform_operation",
                    "14": "cleanup",
                    "2": "perform_cleanup",
                    "3": "finalize"
                },
                "FUN_08007c40": {
                    "1": "initialize_value",
                    "12": "display_message",
                    "2": "print_info",
                    "7": "print_message"
                },
                "FUN_08007c5e": {
                    "1": "adjust_size",
                    "16": "calculate_value",
                    "9": "calculate_offset"
                }
            },
            "called": [
                "FUN_08007c5e",
                "FUN_08007c40",
                "FUN_08005318",
                "FUN_08007b70"
            ],
            "calling": [
                "FUN_0800585c",
                "FUN_0800583c",
                "FUN_08001d4c"
            ],
            "code": "\nvoid initialize_data_08005790(void)\n\n{\n  FUNC_08005318();\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000e3c = DAT_20000ed4;\n    DAT_20000e3e = DAT_20000ed6;\n    FUN_08007c40(0x69);\n    FUN_08007c5e((DAT_20000ec9 + 5) * 0x15);\n    FUN_08007b70();\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_08005790",
            "entrypoint": "0x08005790",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005790": "initialize_data_08005790"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080057e4": {
            "additional_data": {
                "DAT_20000eaa": {
                    "1": "flags",
                    "2": "control_flag"
                },
                "DAT_20000ef8": {
                    "1": "condition_var"
                },
                "FUNC_0800530c": {
                    "1": "perform_required_tasks",
                    "2": "perform_additional_tasks",
                    "3": "perform_additional_checks",
                    "4": "handle_condition",
                    "5": "check_conditions"
                },
                "FUN_080057e4": {
                    "1": "execute_logic",
                    "10": "execute_function",
                    "2": "execute_process",
                    "6": "execute_main_function"
                },
                "FUN_08007bc2": {
                    "1": "initialize_values",
                    "14": "initialize_data",
                    "2": "initialize",
                    "3": "initialize_resources",
                    "8": "initialize_variables"
                }
            },
            "called": [
                "FUN_0800530c",
                "FUN_08007bc2"
            ],
            "calling": [
                "FUN_080053a0",
                "FUN_0800583c",
                "FUN_080025e8",
                "FUN_08001d4c"
            ],
            "code": "\nvoid execute_function_080057e4(void)\n\n{\n  FUN_08007bc2();\n  if ((DAT_20000ef8 != -1) || ((DAT_20000eaa & 0x20) != 0)) {\n    FUNC_0800530c();\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_080057e4",
            "entrypoint": "0x080057e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080057e4": "execute_function_080057e4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005814": {
            "additional_data": {
                "DAT_20000e14": {
                    "1": "buffer"
                },
                "DAT_20000e38": {
                    "1": "flag_value",
                    "2": "counter"
                },
                "FUN_08005324": {
                    "1": "display_message",
                    "11": "set_threshold",
                    "2": "process_data",
                    "8": "set_timer"
                },
                "FUN_08005324.argument_1": {
                    "1": "value"
                },
                "FUN_08005814": {
                    "1": "initialize_function",
                    "18": "initialize_data",
                    "2": "initialize",
                    "3": "initialize_program",
                    "5": "initialize_application"
                },
                "FUN_0800b430": {
                    "1": "allocate_memory",
                    "2": "initialize_array",
                    "3": "initialize_data",
                    "6": "copy_data",
                    "7": "initialize_memory"
                },
                "FUN_0800b430.argument_1": {
                    "1": "data_pointer"
                },
                "FUN_0800b430.argument_2": {
                    "1": "flag"
                },
                "FUN_0800b430.argument_3": {
                    "1": "size"
                },
                "param_1": {
                    "1": "data_ptr",
                    "2": "buffer",
                    "5": "data_pointer"
                },
                "param_2": {
                    "1": "start_value",
                    "10": "flag",
                    "2": "padding",
                    "3": "param"
                },
                "param_3": {
                    "1": "memory_size",
                    "17": "size",
                    "2": "buffer_size",
                    "3": "length"
                }
            },
            "called": [
                "FUN_0800b430",
                "FUN_08005324"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid initialize_data_08005814(void)\n\n{\n  FUN_0800b430(&DAT_20000e14,0,0x24);\n  FUN_08005324(800);\n  DAT_20000e38 = 0;\n  return;\n}\n\n",
            "current_name": "initialize_data_08005814",
            "entrypoint": "0x08005814",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005814": "initialize_data_08005814"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800583c": {
            "additional_data": {
                "DAT_20000ed4": {
                    "1": "data_param"
                },
                "FUN_080052ac": {
                    "1": "set_initial_param",
                    "2": "configure_settings",
                    "6": "initialize_data",
                    "7": "process_data",
                    "9": "load_data"
                },
                "FUN_08005790": {
                    "1": "execute_task1",
                    "3": "perform_task_a",
                    "4": "perform_task1",
                    "5": "perform_initialization"
                },
                "FUN_080057e4": {
                    "1": "perform_initialization",
                    "2": "cleanup_resources",
                    "3": "configure_settings",
                    "4": "perform_task2"
                },
                "FUN_0800583c": {
                    "1": "initialize_components",
                    "12": "initialize_system",
                    "2": "initialize",
                    "6": "initialize_application",
                    "8": "initialize_program"
                },
                "param_1": {
                    "1": "data_address",
                    "4": "data"
                }
            },
            "called": [
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_080052ac"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid initialize_system_0800583c(void)\n\n{\n  FUN_080052ac(DAT_20000ed4);\n  FUN_08005790();\n  FUN_080057e4();\n  return;\n}\n\n",
            "current_name": "initialize_system_0800583c",
            "entrypoint": "0x0800583c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800583c": "initialize_system_0800583c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800585c": {
            "additional_data": {
                "DAT_20000ea9": {
                    "1": "current_state",
                    "2": "status"
                },
                "FUN_08005790": {
                    "1": "execute_subroutine",
                    "2": "execute_function",
                    "3": "execute_update",
                    "7": "perform_update",
                    "8": "perform_action"
                },
                "FUN_0800585c": {
                    "1": "change_status_and_call_function",
                    "2": "update_state_if_condition_met",
                    "3": "update_state",
                    "7": "update_status_and_call_function"
                }
            },
            "called": [
                "FUN_08005790"
            ],
            "calling": [
                "FUN_08001e98",
                "FUN_08003a74",
                "FUN_080024c4"
            ],
            "code": "\nvoid update_status_0800585c(void)\n\n{\n  if (DAT_20000ea9 == '\\x02') {\n    DAT_20000ea9 = '\\x03';\n    FUN_08005790();\n  }\n  return;\n}\n\n",
            "current_name": "update_status_0800585c",
            "entrypoint": "0x0800585c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800585c": "update_status_0800585c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800587c": {
            "additional_data": {
                "": {
                    "2": ""
                },
                "04": {
                    "1": "new_condition_value"
                },
                "20000ea9": {
                    "1": "condition_flag"
                },
                "20000eb8": {
                    "1": "counter"
                },
                "DAT_20000ea9": {
                    "1": "status_value",
                    "2": "current_state",
                    "4": "status",
                    "9": "current_status"
                },
                "DAT_20000eb8": {
                    "1": "error_code",
                    "21": "counter"
                },
                "FUN_0800587c": {
                    "1": "update_flag_if_condition_met",
                    "17": "update_status",
                    "3": "update_data",
                    "4": "update_state"
                },
                "VAR_20000ea9": {
                    "1": "current_state"
                },
                "VAR_20000eb8": {
                    "1": "counter"
                },
                "ea9": {
                    "1": "condition_flag"
                },
                "eb8": {
                    "2": "counter"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003a74"
            ],
            "code": "\nvoid update_status_0800587c(void)\n\n{\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000ea9 = '\\x04';\n    DAT_20000eb8 = 0;\n  }\n  return;\n}\n\n",
            "current_name": "update_status_0800587c",
            "entrypoint": "0x0800587c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800587c": "update_status_0800587c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080058a0": {
            "additional_data": {
                "DAT_20000e24": {
                    "1": "offset",
                    "2": "previous_offset",
                    "6": "initial_offset"
                },
                "DAT_20000e2c": {
                    "1": "delay",
                    "2": "limit"
                },
                "DAT_20000e30": {
                    "1": "initialized_flag",
                    "3": "counter",
                    "4": "flag"
                },
                "DAT_20000e38": {
                    "1": "data",
                    "4": "data_pointer",
                    "5": "data_ptr"
                },
                "DAT_20000ea9": {
                    "1": "data_initialized",
                    "9": "status"
                },
                "FUN_08003618": {
                    "1": "adjust_data_offset",
                    "11": "adjust_offset",
                    "2": "update_offset",
                    "3": "calculate_difference",
                    "4": "adjust_parameter"
                },
                "FUN_08005324": {
                    "1": "set_max_value",
                    "2": "set_threshold",
                    "3": "display_message",
                    "7": "set_flag"
                },
                "FUN_080058a0": {
                    "1": "update_data",
                    "2": "initialize_function",
                    "24": "initialize_data"
                },
                "PTR_08003618": {
                    "1": "update_offset"
                },
                "PTR_08005324": {
                    "1": "set_status"
                },
                "PTR_20000e38": {
                    "1": "ptr_data"
                },
                "int": {
                    "1": "integer"
                },
                "param_1": {
                    "1": "flag_value",
                    "2": "value",
                    "3": "mode",
                    "8": "offset"
                },
                "param_2": {
                    "1": "mode",
                    "2": "value"
                },
                "uint": {
                    "1": "unsigned_integer"
                }
            },
            "called": [
                "FUN_08003618",
                "FUN_08005324"
            ],
            "calling": [
                "FUN_08003a74"
            ],
            "code": "\nvoid initialize_data_080058a0(void)\n\n{\n  if (DAT_20000e38 == 0) {\n    DAT_20000ea9 = 0;\n  }\n  else {\n    FUN_08003618(*(integer *)(DAT_20000e38 + 0x10) - DAT_20000e24);\n    DAT_20000e30 = 0;\n    FUN_08005324(0);\n    DAT_20000e2c = 210000;\n    DAT_20000e24 = 0;\n    DAT_20000ea9 = 2;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_080058a0",
            "entrypoint": "0x080058a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080058a0": "initialize_data_080058a0",
                "int": "integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005900": {
            "additional_data": {
                "0": {
                    "1": "false"
                },
                "0x18": {
                    "1": "cancel"
                },
                "0x21": {
                    "1": "exclamation_mark"
                },
                "0x3f": {
                    "1": "question_mark"
                },
                "0x40": {
                    "1": "flag_c"
                },
                "0x7e": {
                    "1": "flag_a"
                },
                "1": {
                    "1": "success"
                },
                "DAT_20000eaa": {
                    "1": "flag_value",
                    "2": "flag",
                    "5": "flags"
                },
                "FUN_080025e8": {
                    "1": "execute_operation",
                    "2": "handle_special_character",
                    "4": "handle_special_case"
                },
                "FUN_08005900": {
                    "1": "handle_byte",
                    "12": "process_byte",
                    "2": "check_special_character",
                    "4": "check_and_update_flags"
                },
                "MOV_20000eaa": {
                    "1": "bit_flags"
                },
                "byte param_1": {
                    "1": "input_byte"
                },
                "param_1": {
                    "1": "byte",
                    "17": "byte_value",
                    "2": "input",
                    "4": "input_byte",
                    "5": "character"
                }
            },
            "called": [
                "FUN_080025e8"
            ],
            "calling": [
                "FUN_08008286"
            ],
            "code": "\nundefined4 process_byte_08005900(byte byte_value)\n\n{\n  if (byte_value == 0x7e) {\n    DAT_20000eaa = DAT_20000eaa | 2;\n    return 1;\n  }\n  if (byte_value < 0x7f) {\n    if (byte_value == 0x3f) {\n      DAT_20000eaa = DAT_20000eaa | 1;\n      return 1;\n    }\n    if (byte_value < 0x40) {\n      if (byte_value == 0x18) {\n        FUN_080025e8();\n        return 1;\n      }\n      if (byte_value == 0x21) {\n        DAT_20000eaa = DAT_20000eaa | 8;\n        return 1;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_byte_08005900",
            "entrypoint": "0x08005900",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005900": "process_byte_08005900",
                "param_1": "byte_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800597c": {
            "additional_data": {
                "": {
                    "2": ""
                },
                "0x3f": {
                    "1": "interrupt_type"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "DAT_XXX": {
                    "1": ""
                },
                "DAT_variable_1": {
                    "1": "variable_1"
                },
                "FUN_0800597c": {
                    "1": "send_system_interrupt",
                    "2": "call_software_interrupt",
                    "3": "invoke_system_interrupt",
                    "4": "execute_system_call",
                    "7": "execute_software_interrupt"
                },
                "PTR_0800597c": {
                    "1": "ptr_execute_software_interrupt"
                },
                "PTR_XXX": {
                    "1": ""
                },
                "PTR_a": {
                    "1": "a"
                },
                "PTR_b": {
                    "1": "b"
                },
                "PTR_param_1": {
                    "1": "param_1"
                },
                "software_interrupt": {
                    "1": "invoke_kernel_interrupt",
                    "2": "call_interrupt",
                    "4": "invoke_interrupt",
                    "5": "trigger_interrupt"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005984"
            ],
            "code": "\nvoid execute_software_interrupt_0800597c(void)\n\n{\n  trigger_interrupt(0x3f);\n  return;\n}\n\n",
            "current_name": "execute_software_interrupt_0800597c",
            "entrypoint": "0x0800597c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800597c": "execute_software_interrupt_0800597c",
                "software_interrupt": "trigger_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005984": {
            "additional_data": {
                "FUN_0800597c": {
                    "1": "perform_operation"
                },
                "FUN_08005984": {
                    "1": "find_result",
                    "3": "initialize_if_zero",
                    "4": "initialize",
                    "5": "initialize_data"
                },
                "param_1": {
                    "1": "input_param",
                    "15": "input",
                    "2": "data",
                    "6": "input_value"
                },
                "uVar1": {
                    "12": "return_value",
                    "19": "result"
                }
            },
            "called": [
                "FUN_0800597c"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\nundefined4 initialize_data_08005984(undefined4 input)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000e44 == 0) {\n    result = FUN_0800597c(1,input,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "initialize_data_08005984",
            "entrypoint": "0x08005984",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005984": "initialize_data_08005984",
                "param_1": "input",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080059b4": {
            "additional_data": {
                "FUNC_08005a50": {
                    "1": "perform_initialization",
                    "2": "perform_cleanup",
                    "3": "perform_task",
                    "5": "perform_action"
                },
                "FUN_080059b4": {
                    "1": "initialize_components",
                    "18": "initialize_system",
                    "2": "initialize_device",
                    "3": "initialize_program"
                },
                "FUN_08006ce0": {
                    "1": "set_operating_mode",
                    "14": "set_mode",
                    "2": "configure_mode",
                    "3": "configure_settings"
                },
                "FUN_08006d72": {
                    "1": "set_processing_time",
                    "13": "set_timer",
                    "2": "set_sampling_rate",
                    "3": "set_delay"
                },
                "_DAT_40023c00": {
                    "1": "register_value"
                },
                "param_1": {
                    "1": "time_delay",
                    "5": "delay_time"
                },
                "undefined4": {
                    "1": "return_type"
                }
            },
            "called": [
                "FUN_08005a50",
                "FUN_08006d72",
                "FUN_08006ce0"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\n\n\nreturn_type initialize_system_080059b4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  FUN_08006d72(16000);\n  FUN_08006ce0(3);\n  FUNC_08005a50();\n  return 0;\n}\n\n",
            "current_name": "initialize_system_080059b4",
            "entrypoint": "0x080059b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080059b4": "initialize_system_080059b4",
                "undefined4": "return_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080059f8": {
            "additional_data": {
                "FUNC_08005a5c": {
                    "1": "execute_operation",
                    "2": "do_something",
                    "3": "perform_additional_tasks",
                    "4": "perform_operation",
                    "5": "perform_action"
                },
                "FUN_080059f8": {
                    "2": "initialize_global_variables",
                    "25": "initialize_data",
                    "4": "initialize_variables"
                },
                "_DAT_40023810": {
                    "1": "num3",
                    "2": "data_3",
                    "7": "data3"
                },
                "_DAT_40023814": {
                    "1": "variable2",
                    "2": "data_4",
                    "7": "data4"
                },
                "_DAT_40023818": {
                    "1": "variable3",
                    "2": "data_5",
                    "7": "data5"
                },
                "_DAT_40023820": {
                    "1": "num1",
                    "2": "data_1",
                    "3": "data_variable1",
                    "8": "data1"
                },
                "_DAT_40023824": {
                    "1": "var2",
                    "2": "data_2",
                    "3": "data_variable2",
                    "8": "data2"
                }
            },
            "called": [
                "FUN_08005a5c"
            ],
            "calling": [],
            "code": "\n\n\nundefined4 initialize_data_080059f8(void)\n\n{\n  _DAT_40023820 = 0;\n  _DAT_40023824 = 0;\n  _DAT_40023810 = 0;\n  _DAT_40023814 = 0;\n  _DAT_40023818 = 0;\n  FUNC_08005a5c();\n  return 0;\n}\n\n",
            "current_name": "initialize_data_080059f8",
            "entrypoint": "0x080059f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080059f8": "initialize_data_080059f8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005a50": {
            "called": [],
            "calling": [
                "FUN_080059b4"
            ],
            "code": "\nvoid FUNC_08005a50(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005a50",
            "entrypoint": "0x08005a50",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005a50": "FUNC_08005a50"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005a5c": {
            "called": [],
            "calling": [
                "FUN_080059f8"
            ],
            "code": "\nvoid FUNC_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005a5c",
            "entrypoint": "0x08005a5c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005a5c": "FUNC_08005a5c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005a68": {
            "additional_data": {
                "DAT_20000e48": {
                    "1": "count",
                    "2": "data_counter",
                    "25": "counter"
                },
                "FUN_08005a68": {
                    "1": "increment_dat_20000e48",
                    "24": "increment_counter",
                    "4": "increment_data_counter"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007756"
            ],
            "code": "\nvoid increment_counter_08005a68(void)\n\n{\n  DAT_20000e48 = DAT_20000e48 + 1;\n  return;\n}\n\n",
            "current_name": "increment_counter_08005a68",
            "entrypoint": "0x08005a68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005a68": "increment_counter_08005a68"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005a84": {
            "additional_data": {
                "DAT_20000e48": {
                    "1": "data_from_memory",
                    "10": "data",
                    "2": "global_value"
                },
                "FUN_08005a84": {
                    "1": "get_return_value",
                    "11": "get_data_value",
                    "2": "get_dat_value",
                    "3": "get_global_value",
                    "9": "get_data"
                },
                "undefined4": {
                    "1": "data"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007756",
                "FUN_08000268",
                "FUN_0800618c",
                "FUN_08005a98",
                "FUN_08005cec"
            ],
            "code": "\ndata get_data_value_08005a84(void)\n\n{\n  return DAT_20000e48;\n}\n\n",
            "current_name": "get_data_value_08005a84",
            "entrypoint": "0x08005a84",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005a84": "get_data_value_08005a84",
                "undefined4": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005a98": {
            "additional_data": {
                "FUNK_08005a98": {
                    "1": "limit_function"
                },
                "FUN_08005a98": {
                    "1": "reverse_and_check_range",
                    "2": "check_range",
                    "3": "find_target_value",
                    "6": "find_upper_bound"
                },
                "iVar1": {
                    "1": "offset",
                    "16": "initial_value",
                    "2": "initial_sum",
                    "4": "base_value"
                },
                "param_1": {
                    "1": "lower_limit",
                    "2": "range_limit",
                    "3": "target",
                    "4": "limit",
                    "9": "target_value"
                },
                "uVar2": {
                    "1": "result",
                    "17": "current_value",
                    "2": "random_value2",
                    "7": "random_value"
                }
            },
            "called": [
                "FUN_08005a84"
            ],
            "calling": [
                "FUN_080002a0"
            ],
            "code": "\nvoid find_upper_bound_08005a98(int target_value)\n\n{\n  int initial_value;\n  uint current_value;\n  \n  initial_value = FUN_08005a84();\n  do {\n    current_value = FUN_08005a84();\n  } while (current_value < (uint)(target_value + initial_value));\n  return;\n}\n\n",
            "current_name": "find_upper_bound_08005a98",
            "entrypoint": "0x08005a98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005a98": "find_upper_bound_08005a98",
                "iVar1": "initial_value",
                "param_1": "target_value",
                "uVar2": "current_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005bdc": {
            "additional_data": {
                "& 0xf": {
                    "1": "masked_param1"
                },
                "& 0xff": {
                    "1": "masked_value"
                },
                "(char)((param_2 & 0xff) << 4)": {
                    "1": "shifted_data",
                    "2": "shifted_value"
                },
                "(char)param_1 + -0x1fff1c00": {
                    "1": "target_memory1"
                },
                "(char)param_1 < '\\0'": {
                    "1": "is_negative"
                },
                "(maskedLowNibble + 0xe000ed14)": {
                    "1": "memory_address1"
                },
                "(param_1 & 0xf) + 0xe000ed14": {
                    "1": "target_memory2"
                },
                "*(char *)((char)param_1 + -0x1fff1c00)": {
                    "1": "memory_address2"
                },
                "*(char *)((param_1 & 0xf) + 0xe000ed14)": {
                    "1": "target_address1"
                },
                "+ -0x1fff1c00": {
                    "1": "offset2"
                },
                "+ 0xe000ed14": {
                    "1": "offset1"
                },
                "-0x1fff1c00": {
                    "1": "memory_location2"
                },
                "0x1fff1c00": {
                    "1": "address_b"
                },
                "0xe000ed14": {
                    "1": "memory_address_1"
                },
                "<< 4": {
                    "1": "shifted_value"
                },
                "FUN_08005bdc": {
                    "1": "update_memory_byte",
                    "2": "set_byte_value",
                    "3": "store_byte",
                    "5": "write_byte_to_memory",
                    "8": "update_memory"
                },
                "PTR_0x1fff1c00": {
                    "1": "alternative_memory_address"
                },
                "PTR_e000ed14": {
                    "1": "memory_address"
                },
                "char": {
                    "1": "byte_value"
                },
                "char_1": {
                    "1": "lower_nibble"
                },
                "char_2": {
                    "1": "upper_nibble"
                },
                "param_1": {
                    "1": "address_offset",
                    "13": "input_byte",
                    "2": "byte_value",
                    "3": "input_value",
                    "9": "address"
                },
                "param_1 & 0xf": {
                    "1": "masked_input_byte"
                },
                "param_1 & 0xf + 0xe000ed14": {
                    "1": "memory_address1"
                },
                "param_1 + -0x1fff1c00": {
                    "1": "memory_address2"
                },
                "param_2": {
                    "1": "new_data",
                    "10": "data",
                    "2": "value_to_store",
                    "3": "input_value",
                    "9": "value"
                },
                "param_2 & 0xff": {
                    "2": "masked_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005c30"
            ],
            "code": "\nvoid update_memory_08005bdc(byte input_byte,uint data)\n\n{\n  if ((byte_value)input_byte < '\\0') {\n    *(byte_value *)((input_byte & 0xf) + 0xe000ed14) = (byte_value)((data & 0xff) << 4);\n  }\n  else {\n    *(byte_value *)((byte_value)input_byte + -0x1fff1c00) = (byte_value)((data & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "current_name": "update_memory_08005bdc",
            "entrypoint": "0x08005bdc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005bdc": "update_memory_08005bdc",
                "char": "byte_value",
                "param_1": "input_byte",
                "param_2": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005c30": {
            "additional_data": {
                "FUN_08005bdc": {
                    "1": "apply_configuration",
                    "2": "update_values",
                    "3": "set_flags"
                },
                "FUN_08005c30": {
                    "1": "check_and_set_parameter",
                    "2": "check_and_set_params",
                    "3": "check_and_set_values",
                    "4": "is_param_valid",
                    "8": "check_and_initialize",
                    "9": "check_and_set_param"
                },
                "_DAT_e000e010": {
                    "1": "value2",
                    "2": "flag2"
                },
                "_DAT_e000e014": {
                    "1": "lower_limit",
                    "2": "modified_value"
                },
                "_DAT_e000e018": {
                    "1": "reset_param",
                    "2": "flag1"
                },
                "bVar1": {
                    "1": "is_valid_param",
                    "2": "is_param_valid",
                    "3": "is_within_range",
                    "4": "is_valid",
                    "5": "is_input_valid",
                    "7": "is_in_range"
                },
                "param_1": {
                    "1": "parameter",
                    "2": "value",
                    "3": "byte_value",
                    "4": "input_param",
                    "6": "input",
                    "7": "input_value"
                },
                "param_2": {
                    "1": "flag_value"
                }
            },
            "called": [
                "FUN_08005bdc"
            ],
            "calling": [
                "FUN_0800618c"
            ],
            "code": "\n\n\nbool check_and_set_param_08005c30(int input_value)\n\n{\n  bool is_in_range;\n  \n  is_in_range = input_value - 1U < 0x1000000;\n  if (is_in_range) {\n    _DAT_e000e014 = input_value + -1;\n    FUN_08005bdc(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !is_in_range;\n}\n\n",
            "current_name": "check_and_set_param_08005c30",
            "entrypoint": "0x08005c30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005c30": "check_and_set_param_08005c30",
                "bVar1": "is_in_range",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005cec": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "handle_flags"
                },
                "DAT_40007000": {
                    "1": "variable2"
                },
                "DAT_40023800": {
                    "1": "system_status"
                },
                "DAT_40023800_1": {
                    "1": "first_byte"
                },
                "DAT_40023800_2": {
                    "1": "register3_2"
                },
                "DAT_40023800_3": {
                    "1": "register_3_3",
                    "3": "register3_3"
                },
                "DAT_40023804": {
                    "1": "flag2"
                },
                "DAT_40023808": {
                    "1": "flag1"
                },
                "DAT_40023840": {
                    "1": "register6"
                },
                "DAT_40023870": {
                    "1": "another_config",
                    "2": "register4"
                },
                "DAT_40023870_1": {
                    "1": "bits_in_register2",
                    "2": "register4_1"
                },
                "DAT_40023874": {
                    "1": "register_4"
                },
                "DAT_42470060": {
                    "1": "register10"
                },
                "FUNC_08005a84": {
                    "1": "generate_value"
                },
                "FUN_08005a84": {
                    "1": "get_random_number",
                    "5": "get_random_value"
                },
                "FUN_08005cec": {
                    "1": "process_flags",
                    "2": "check_parameters",
                    "6": "check_flags",
                    "7": "check_conditions"
                },
                "_DAT_40007000": {
                    "1": "register2"
                },
                "_DAT_40023800": {
                    "1": "global_status",
                    "2": "control_register",
                    "6": "register3"
                },
                "_DAT_40023804": {
                    "1": "control_register2",
                    "2": "register_2",
                    "6": "register2"
                },
                "_DAT_40023808": {
                    "1": "system_config_register",
                    "2": "register_1",
                    "6": "register1"
                },
                "_DAT_4002380c": {
                    "1": "parameter_9"
                },
                "_DAT_40023840": {
                    "1": "parameter_4"
                },
                "_DAT_40023870": {
                    "1": "register_4",
                    "2": "register7"
                },
                "_DAT_40023874": {
                    "1": "register4"
                },
                "_DAT_42470000": {
                    "1": "global_variable1",
                    "2": "flag1"
                },
                "_DAT_42470030": {
                    "1": "parameter_10"
                },
                "_DAT_42470060": {
                    "1": "global_variable3",
                    "2": "flag3"
                },
                "_DAT_42470e80": {
                    "1": "parameter_12",
                    "2": "flag2"
                },
                "iVar1": {
                    "1": "temp_var1",
                    "19": "result",
                    "4": "counter"
                },
                "param_1": {
                    "1": "status_flags",
                    "2": "parameters",
                    "27": "flags"
                },
                "param_1[0xb]": {
                    "1": "hardware_control_data_two"
                },
                "param_1[10]": {
                    "1": "value10"
                },
                "param_1[11]": {
                    "1": "flags[11]"
                },
                "param_1[1]": {
                    "1": "status_flag_one"
                },
                "param_1[2]": {
                    "1": "status_flag_three"
                },
                "param_1[3]": {
                    "1": "flags_bit3"
                },
                "param_1[4]": {
                    "1": "value4"
                },
                "param_1[5]": {
                    "1": "sixth_parameter"
                },
                "param_1[6]": {
                    "1": "status_flag_four"
                },
                "param_1[7]": {
                    "1": "hardware_control_data_six"
                },
                "param_1[8]": {
                    "1": "register_6"
                },
                "param_1[9]": {
                    "1": "flags[9]"
                },
                "return 0": {
                    "1": "conditions_not_passed"
                },
                "return 1": {
                    "1": "condition_1_passed"
                },
                "return 3": {
                    "1": "condition_2_passed"
                },
                "uVar2": {
                    "1": "random_num",
                    "19": "random_value",
                    "2": "random_number",
                    "5": "value"
                }
            },
            "called": [
                "FUN_08005a84"
            ],
            "calling": [
                "FUN_08007436"
            ],
            "code": "\n\n\nundefined4 check_conditions_08005cec(uint *flags)\n\n{\n  int result;\n  uint random_value;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0x400000)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (value1 != 1)) {\n        return 1;\n      }\n    }\n    else {\n      _DAT_40023800 = (uint3)_DAT_40023800;\n      result = FUN_08005a84();\n      while ((_DAT_40023800 & 0x20000) != 0) {\n        random_value = FUN_08005a84();\n        if (result + 5000U <= random_value) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = CONCAT13(DAT_40023800_3,CONCAT12((char)value1,_DAT_40023800));\n      if (value1 == 1) {\n        result = FUN_08005a84();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          random_value = FUN_08005a84();\n          if (result + 5000U <= random_value) {\n            return 3;\n          }\n        }\n      }\n      else {\n        result = FUN_08005a84();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          random_value = FUN_08005a84();\n          if (result + 5000U <= random_value) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (value3 != 1)) {\n        return 1;\n      }\n    }\n    else if (value3 == 0) {\n      _DAT_42470000 = 0;\n      result = FUN_08005a84();\n      while ((_DAT_40023800 & 2) != 0) {\n        random_value = FUN_08005a84();\n        if (result + 100U <= random_value) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      result = FUN_08005a84();\n      while ((_DAT_40023800 & 2) == 0) {\n        random_value = FUN_08005a84();\n        if (result + 100U <= random_value) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = value4 << 3 | _DAT_40023800 & 0xffffff07;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (value5 == 0) {\n      _DAT_42470e80 = 0;\n      result = FUN_08005a84();\n      while ((_DAT_40023874 & 2) != 0) {\n        random_value = FUN_08005a84();\n        if (result + 100U <= random_value) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      result = FUN_08005a84();\n      while ((_DAT_40023874 & 2) == 0) {\n        random_value = FUN_08005a84();\n        if (result + 100U <= random_value) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*flags & 4) != 0) {\n    _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    _DAT_40007000 = _DAT_40007000 | 0x100;\n    result = FUN_08005a84();\n    while ((_DAT_40007000 & 0x100) == 0) {\n      random_value = FUN_08005a84();\n      if (result + 100U <= random_value) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = _DAT_40023870 & 0xffffff00;\n    result = FUN_08005a84();\n    while ((_DAT_40023870 & 2) != 0) {\n      random_value = FUN_08005a84();\n      if (result + 5000U <= random_value) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = CONCAT31(DAT_40023870_1,(char)value2);\n    if (value2 == 1) {\n      result = FUN_08005a84();\n      while ((_DAT_40023870 & 2) == 0) {\n        random_value = FUN_08005a84();\n        if (result + 5000U <= random_value) {\n          return 3;\n        }\n      }\n    }\n    else {\n      result = FUN_08005a84();\n      while ((_DAT_40023870 & 2) != 0) {\n        random_value = FUN_08005a84();\n        if (result + 5000U <= random_value) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (value6 != 0) {\n    if ((_DAT_40023808 & 0xc) == 8) {\n      return 1;\n    }\n    if (value6 == 2) {\n      _DAT_42470060 = 0;\n      result = FUN_08005a84();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        random_value = FUN_08005a84();\n        if (result + 100U <= random_value) {\n          return 3;\n        }\n      }\n      _DAT_40023804 =\n           hardware_control_data_two << 0x18 |\n           value8 | value9 << 6 | ((value10 >> 1) - 1) * 0x10000 | value7 |\n           0x20000000;\n      _DAT_42470060 = 1;\n      result = FUN_08005a84();\n      while ((_DAT_40023800 & 0x2000000) == 0) {\n        random_value = FUN_08005a84();\n        if (result + 100U <= random_value) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470060 = 0;\n      result = FUN_08005a84();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        random_value = FUN_08005a84();\n        if (result + 100U <= random_value) {\n          return 3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "check_conditions_08005cec",
            "entrypoint": "0x08005cec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005cec": "check_conditions_08005cec",
                "iVar1": "result",
                "param_1": "flags",
                "param_1[0xb]": "hardware_control_data_two",
                "param_1[10]": "value10",
                "param_1[1]": "value1",
                "param_1[2]": "value2",
                "param_1[3]": "value3",
                "param_1[4]": "value4",
                "param_1[5]": "value5",
                "param_1[6]": "value6",
                "param_1[7]": "value7",
                "param_1[8]": "value8",
                "param_1[9]": "value9",
                "uVar2": "random_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800618c": {
            "additional_data": {
                "DAT_40023c00_1": {
                    "1": "global_var2"
                },
                "FUF_08005a84": {
                    "1": "get_random_value"
                },
                "FUF_08005c30": {
                    "1": "process_data"
                },
                "FUF_08006628": {
                    "1": "get_time"
                },
                "FUM_08005a84": {
                    "1": "get_random_value"
                },
                "FUN_08005a84": {
                    "1": "random_function1",
                    "2": "get_current_time",
                    "4": "get_random_number",
                    "8": "get_random_value"
                },
                "FUN_08005c30": {
                    "1": "perform_operation",
                    "2": "perform_task",
                    "6": "process_data"
                },
                "FUN_0800618c": {
                    "1": "validate_and_execute",
                    "5": "process_data",
                    "7": "check_and_process_data"
                },
                "FUN_08006628": {
                    "1": "get_elapsed_time",
                    "12": "get_current_time",
                    "2": "get_execution_time"
                },
                "_DAT_40023800": {
                    "1": "global_variable2"
                },
                "_DAT_40023808": {
                    "1": "global_variable3"
                },
                "_DAT_40023c00": {
                    "1": "buffer_register"
                },
                "iVar1": {
                    "1": "temp_var1",
                    "18": "result",
                    "2": "temp_variable"
                },
                "param_1": {
                    "1": "parameter",
                    "2": "parameters",
                    "3": "input_params",
                    "7": "flags",
                    "9": "data"
                },
                "param_2": {
                    "1": "num_flags",
                    "2": "param_count",
                    "3": "value",
                    "4": "length",
                    "6": "size"
                },
                "uVar2": {
                    "1": "temp_variable2",
                    "12": "random_value",
                    "2": "current_value",
                    "9": "current_time"
                },
                "uVar3": {
                    "1": "max_time",
                    "3": "threshold",
                    "4": "timeout_value",
                    "9": "timeout"
                },
                "uVar4": {
                    "1": "result",
                    "3": "execution_time",
                    "4": "time_elapsed",
                    "5": "timestamp"
                }
            },
            "called": [
                "FUN_08005a84",
                "FUN_08006628",
                "FUN_08005c30"
            ],
            "calling": [
                "FUN_08007436"
            ],
            "code": "\n\n\nundefined4 check_and_process_data_0800618c(uint *data,uint size)\n\n{\n  int result;\n  uint random_value;\n  uint timeout;\n  undefined8 timestamp;\n  \n  if ((_DAT_40023c00 & 0xf) < size) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)size);\n    if (size != (size & 0xf)) {\n      return 1;\n    }\n    if ((*data & 1) != 0) {\n      if (data[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((data[1] != 2) && ((_DAT_40023800 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40023808 = data[1] | _DAT_40023808 & 0xfffffffc;\n      result = FUN_08005a84();\n      timeout = result + 5000;\n      if (data[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          random_value = FUN_08005a84();\n          if (timeout <= random_value) {\n            return 3;\n          }\n        }\n      }\n      else if (data[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          random_value = FUN_08005a84();\n          if (timeout <= random_value) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          random_value = FUN_08005a84();\n          if (timeout <= random_value) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  else {\n    if ((*data & 1) != 0) {\n      if (data[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if (data[1] == 2) {\n        if ((_DAT_40023800 & 0x2000000) == 0) {\n          return 1;\n        }\n      }\n      else if ((_DAT_40023800 & 2) == 0) {\n        return 1;\n      }\n      _DAT_40023808 = data[1] | _DAT_40023808 & 0xfffffffc;\n      result = FUN_08005a84();\n      timeout = result + 5000;\n      if (data[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          random_value = FUN_08005a84();\n          if (timeout <= random_value) {\n            return 3;\n          }\n        }\n      }\n      else if (data[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          random_value = FUN_08005a84();\n          if (timeout <= random_value) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          random_value = FUN_08005a84();\n          if (timeout <= random_value) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)size);\n    if (size != (size & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*data & 2) != 0) {\n    _DAT_40023808 = data[2] | _DAT_40023808 & 0xffffff0f;\n  }\n  if ((*data & 4) != 0) {\n    _DAT_40023808 = data[3] | _DAT_40023808 & 0xffffe3ff;\n  }\n  if ((*data & 8) != 0) {\n    _DAT_40023808 = data[4] << 3 | _DAT_40023808 & 0xffff1fff;\n  }\n  timestamp = FUN_08006628();\n  FUN_08005c30((uint)timestamp / 1000,(int)((ulonglong)timestamp >> 0x20),(uint)timestamp * 0x10624dd3);\n  return 0;\n}\n\n",
            "current_name": "check_and_process_data_0800618c",
            "entrypoint": "0x0800618c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800618c": "check_and_process_data_0800618c",
                "iVar1": "result",
                "param_1": "data",
                "param_2": "size",
                "uVar2": "random_value",
                "uVar3": "timeout",
                "uVar4": "timestamp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800640c": {
            "additional_data": {
                "FUN_0800640c": {
                    "1": "update_flags_and_data",
                    "2": "update_flags_and_values",
                    "3": "initialize_data",
                    "5": "update_data"
                },
                "FUN_08006e88": {
                    "1": "update_values",
                    "2": "update_memory"
                },
                "_DAT_40023808": {
                    "1": "register"
                },
                "_DAT_40023830": {
                    "1": "hardware_config"
                },
                "local_10": {
                    "1": "register_4",
                    "10": "constant2",
                    "2": "var2",
                    "6": "constant3"
                },
                "local_14": {
                    "1": "constant2",
                    "2": "value4",
                    "4": "constant4",
                    "5": "constant3"
                },
                "local_18": {
                    "1": "flag2",
                    "11": "constant1",
                    "2": "value2",
                    "3": "var1",
                    "5": "constant2"
                },
                "local_1c": {
                    "1": "setting1",
                    "2": "flag_value",
                    "4": "size",
                    "5": "constant1",
                    "6": "buffer_size"
                },
                "local_c": {
                    "1": "constant_5",
                    "2": "unused_var2",
                    "3": "var4",
                    "4": "constant5",
                    "6": "constant4"
                },
                "param_1": {
                    "1": "value_to_update",
                    "19": "flag",
                    "2": "param1"
                },
                "param_2": {
                    "1": "input_param_1",
                    "18": "value1",
                    "3": "value_1"
                },
                "param_3": {
                    "1": "flag2",
                    "19": "value2",
                    "3": "value_2"
                }
            },
            "called": [
                "FUN_08006e88"
            ],
            "calling": [],
            "code": "\n\n\nvoid update_data_0800640c(int flag,uint value1,uint value2)\n\n{\n  undefined4 buffer_size;\n  undefined4 constant1;\n  undefined4 constant3;\n  undefined4 constant2;\n  undefined4 constant4;\n  \n  if (flag == 0) {\n    _DAT_40023830 = _DAT_40023830 | 1;\n    buffer_size = 0x100;\n    constant1 = 2;\n    constant2 = 3;\n    constant3 = 0;\n    constant4 = 0;\n    FUN_08006e88(0x40020000,&buffer_size);\n    _DAT_40023808 = value2 | value1 | _DAT_40023808 & 0xf89fffff;\n  }\n  else {\n    _DAT_40023830 = _DAT_40023830 | 4;\n    buffer_size = 0x200;\n    constant1 = 2;\n    constant2 = 3;\n    constant3 = 0;\n    constant4 = 0;\n    FUN_08006e88(0x40020800,&buffer_size);\n    _DAT_40023808 = value1 | value2 << 3 | _DAT_40023808 & 0x7ffffff;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_0800640c",
            "entrypoint": "0x0800640c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800640c": "update_data_0800640c",
                "local_10": "constant2",
                "local_14": "constant3",
                "local_18": "constant1",
                "local_1c": "buffer_size",
                "local_c": "constant4",
                "param_1": "flag",
                "param_2": "value1",
                "param_3": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080064ec": {
            "additional_data": {
                "FUN_080064ec": {
                    "14": "calculate_clock_speed",
                    "15": "calculate_clock_frequency",
                    "2": "get_clock_frequency"
                },
                "_DAT_40023804": {
                    "1": "value2",
                    "2": "clock_config_register"
                },
                "_DAT_40023808": {
                    "1": "clock_config_register",
                    "2": "config_register"
                },
                "local_c": {
                    "1": "result",
                    "10": "clock_frequency",
                    "2": "calculated_frequency",
                    "3": "calculated_speed",
                    "8": "clock_speed"
                },
                "uVar1": {
                    "1": "circuit_configuration",
                    "2": "config_bits",
                    "3": "mode",
                    "8": "clock_config"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006628"
            ],
            "code": "\n\n\nuint calculate_clock_frequency_080064ec(void)\n\n{\n  uint clock_config;\n  uint clock_frequency;\n  \n  clock_config = _DAT_40023808 & 0xc;\n  if (clock_config == 8) {\n    if ((_DAT_40023804 & 0x400000) == 0) {\n      clock_frequency = ((_DAT_40023804 & 0x7fc0) >> 6) * (16000000 / (_DAT_40023804 & 0x3f));\n    }\n    else {\n      clock_frequency = ((_DAT_40023804 & 0x7fc0) >> 6) * (8000000 / (_DAT_40023804 & 0x3f));\n    }\n    return clock_frequency / ((((_DAT_40023804 & 0x30000) >> 0x10) + 1) * 2);\n  }\n  if (clock_config < 9) {\n    if (clock_config == 0) {\n      return 16000000;\n    }\n    if (clock_config == 4) {\n      return 8000000;\n    }\n  }\n  return 16000000;\n}\n\n",
            "current_name": "calculate_clock_frequency_080064ec",
            "entrypoint": "0x080064ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080064ec": "calculate_clock_frequency_080064ec",
                "local_c": "clock_frequency",
                "uVar1": "clock_config"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006628": {
            "additional_data": {
                "&DAT_0800bcac": {
                    "1": "ptr2",
                    "4": "shift_table"
                },
                "DAT_0800bcac": {
                    "1": "shift_amounts"
                },
                "DAT_20000000": {
                    "1": "result",
                    "2": "extracted_data",
                    "6": "shifted_value"
                },
                "DIC_0800bcac": {
                    "1": "lookup_table"
                },
                "FUN_080064ec": {
                    "1": "get_input",
                    "2": "retrieve_data",
                    "4": "get_data",
                    "5": "get_initial_value"
                },
                "FUN_08006628": {
                    "1": "extract_and_shift_value",
                    "3": "extract_and_shift_data",
                    "7": "extract_and_shift",
                    "8": "calculate_shifted_value"
                },
                "F_UNDECODED_FUNCTION": {
                    "1": "decode_input"
                },
                "_DAT_40023808": {
                    "1": "data_1",
                    "3": "shift_value",
                    "5": "input_data",
                    "7": "input_value"
                },
                "decoded_value": {
                    "1": "decoded_result"
                },
                "uVar1": {
                    "1": "ret_data",
                    "2": "original_value",
                    "4": "initial_value",
                    "5": "data",
                    "6": "result"
                }
            },
            "called": [
                "FUN_080064ec"
            ],
            "calling": [
                "FUN_08006680",
                "FUN_080066cc",
                "FUN_0800618c"
            ],
            "code": "\n\n\nuint calculate_shifted_value_08006628(void)\n\n{\n  uint result;\n  \n  result = FUN_080064ec();\n  DAT_20000000 = result >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n  return result >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n}\n\n",
            "current_name": "calculate_shifted_value_08006628",
            "entrypoint": "0x08006628",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006628": "calculate_shifted_value_08006628",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006680": {
            "additional_data": {
                "&DAT_0800bcac": {
                    "1": "shift_amount_table",
                    "2": "shift_amount",
                    "3": "shift_array"
                },
                "0x1c00": {
                    "1": "flag_mask"
                },
                "10": {
                    "1": "flag_shift"
                },
                ">>": {
                    "1": "right_shift"
                },
                "DAT_0800bcac": {
                    "1": "bit_mask",
                    "2": "shift_array",
                    "3": "shift_table"
                },
                "FUND_08006680": {
                    "1": "shift_data"
                },
                "FUN_08006628": {
                    "1": "get_value_to_shift",
                    "2": "retrieve_value",
                    "3": "get_value",
                    "4": "get_original_value"
                },
                "FUN_08006680": {
                    "1": "shift_and_return",
                    "2": "shifted_value",
                    "4": "get_shifted_value"
                },
                "_DAT_40023808": {
                    "1": "data_1",
                    "2": "condition_variable",
                    "5": "input_data"
                },
                "uVar1": {
                    "1": "result_of_fun_08006628",
                    "2": "original_value",
                    "3": "value",
                    "8": "result"
                }
            },
            "called": [
                "FUN_08006628"
            ],
            "calling": [
                "FUN_08007f54"
            ],
            "code": "\n\n\nuint calculate_shifted_value_08006680(void)\n\n{\n  uint result;\n  \n  result = FUN_08006628();\n  return result >> (&DAT_0800bcac)[(_DAT_40023808 & 0x1c00) >> 10];\n}\n\n",
            "current_name": "calculate_shifted_value_08006680",
            "entrypoint": "0x08006680",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006680": "calculate_shifted_value_08006680",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080066cc": {
            "additional_data": {
                "&DAT_0800bcac": {
                    "1": "bit_shift_value",
                    "2": "shift_amount"
                },
                "DAT_0800bcac": {
                    "1": "shift_amount_table",
                    "3": "shift_array"
                },
                "FUN_08006628": {
                    "1": "get_value_from_sub_function",
                    "2": "get_input_value",
                    "4": "get_original_value",
                    "5": "get_initial_value"
                },
                "FUN_080066cc": {
                    "1": "shift_value_based_on_memory_location",
                    "2": "shifted_value",
                    "3": "get_shifted_result",
                    "4": "get_shifted_value",
                    "5": "calculate_shifted_value"
                },
                "_DAT_40023808": {
                    "1": "metadata",
                    "2": "input_data",
                    "5": "input_value"
                },
                "uVar1": {
                    "1": "result_of_subfunction",
                    "2": "original_value",
                    "9": "result"
                }
            },
            "called": [
                "FUN_08006628"
            ],
            "calling": [
                "FUN_08007f54"
            ],
            "code": "\n\n\nuint calculate_shifted_value_080066cc(void)\n\n{\n  uint result;\n  \n  result = FUN_08006628();\n  return result >> (&DAT_0800bcac)[(_DAT_40023808 & 0xe000) >> 0xd];\n}\n\n",
            "current_name": "calculate_shifted_value_080066cc",
            "entrypoint": "0x080066cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080066cc": "calculate_shifted_value_080066cc",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006950": {
            "additional_data": {
                "0x5fa0000": {
                    "1": "default_mask"
                },
                "0xf8ff": {
                    "1": "clear_out_bits"
                },
                "FUN_08006950": {
                    "1": "update_status_register",
                    "2": "set_memory_configuration"
                },
                "_DAT_e000ed0c": {
                    "1": "configuration",
                    "2": "configuration_register",
                    "3": "control_register",
                    "6": "register_value"
                },
                "param_1": {
                    "1": "param",
                    "2": "config_value",
                    "3": "mode",
                    "7": "configuration"
                },
                "param_2": {
                    "1": "new_parameter_name_2"
                },
                "param_3": {
                    "1": "new_parameter_name_3"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006ce0"
            ],
            "code": "\n\n\nvoid set_memory_configuration_08006950(uint configuration)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (configuration & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "current_name": "set_memory_configuration_08006950",
            "entrypoint": "0x08006950",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006950": "set_memory_configuration_08006950",
                "param_1": "configuration"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006998": {
            "additional_data": {
                "7": {
                    "1": "bit_mask"
                },
                "8": {
                    "1": "bit_shift"
                },
                "DAT_e000ed0c": {
                    "1": "input_value"
                },
                "FUN_08006998": {
                    "1": "extract_bits",
                    "2": "get_bit_mask",
                    "3": "get_shifted_value",
                    "4": "get_bit_value",
                    "5": "get_shifted_bits",
                    "6": "get_bits_from_register"
                },
                "_DAT_e000ed0c": {
                    "1": "data_value",
                    "2": "value",
                    "3": "input_data",
                    "7": "data_register",
                    "8": "register_value"
                },
                "return": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006d8a",
                "FUN_08006cf6"
            ],
            "code": "\n\n\nuint get_bits_from_register_08006998(void)\n\n{\n  result _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "current_name": "get_bits_from_register_08006998",
            "entrypoint": "0x08006998",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006998": "get_bits_from_register_08006998",
                "return": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080069b4": {
            "additional_data": {
                "(uint)(int)(char)param_1": {
                    "1": "shifted_value"
                },
                "(uint)(int)(char)param_1 >> 5": {
                    "1": "byte_index"
                },
                "*(int *)(((uint)(int)(char)param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "memory_location",
                    "3": "address",
                    "7": "memory_address"
                },
                "1 << (param_1 & 0x1f)": {
                    "1": "bit_pattern",
                    "5": "bit_mask",
                    "7": "bit_value"
                },
                "DAT_": {
                    "1": ""
                },
                "DAT_080069b4": {
                    "1": "constant"
                },
                "FUN_080069b4": {
                    "1": "set_bit_in_the_array",
                    "17": "set_bit_in_memory",
                    "3": "set_bit_at_index",
                    "4": "set_bit"
                },
                "PTR_": {
                    "1": ""
                },
                "PTR_080069b4": {
                    "1": "pointer_mem_base"
                },
                "PTR_0x1fff1f00": {
                    "1": "pointer_mem_offset"
                },
                "byte": {
                    "1": "byte_to_set"
                },
                "char": {
                    "1": "character"
                },
                "int": {
                    "1": "int_pointer"
                },
                "new_variable_name_1": {
                    "1": "index_to_set"
                },
                "new_variable_name_2": {
                    "1": "shifted_value"
                },
                "param_1": {
                    "1": "param_1",
                    "10": "byte_value",
                    "14": "input_byte",
                    "4": "byte_to_set"
                },
                "param_1 & 0x1f": {
                    "2": "bit_index"
                },
                "param_1 >> 5": {
                    "1": "array_index"
                },
                "param_2": {
                    "1": "new_value"
                },
                "uint": {
                    "1": "unsigned_int"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006d2e"
            ],
            "code": "\nvoid set_bit_in_memory_080069b4(byte_to_set input_byte)\n\n{\n  *(int_pointer *)((shifted_value >> 5) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_080069b4",
            "entrypoint": "0x080069b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "(uint)(int)(char)param_1": "shifted_value",
                "FUN_080069b4": "set_bit_in_memory_080069b4",
                "byte": "byte_to_set",
                "char": "character",
                "int": "int_pointer",
                "param_1": "input_byte",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080069e4": {
            "additional_data": {
                "&": {
                    "1": "bitwise_and"
                },
                "((uint)(int)(char)param_1 >> 5)": {
                    "1": "shifted_index"
                },
                "(*(int *)((((uint)(int)(char)param_1 >> 5) + 0x20) * 4 + -0x1fff1f00))": {
                    "1": "array_address"
                },
                "(1 << (param_1 & 0x1f))": {
                    "1": "bit_mask"
                },
                "(param_1 & 0x1f)": {
                    "1": "bit_offset"
                },
                "(shiftedValue >> 5) + 0x20": {
                    "1": "array_index"
                },
                "(uint)(int)(char)param_1": {
                    "1": "shifted_value"
                },
                "*((((uint)(int)(char)param_1 >> 5) + 0x20) * 4 + -0x1fff1f00)": {
                    "1": "memory_address"
                },
                "*(int *)": {
                    "1": "memory_pointer"
                },
                "*(int *)((((uint)(int)(char)param_1 >> 5) + 0x20) * 4 + -0x1fff1f00)": {
                    "1": "array",
                    "2": "memory_address",
                    "4": "bit_array"
                },
                "1 << (param_1 & 0x1f)": {
                    "2": "bit_to_set",
                    "3": "bit_value",
                    "5": "bit_mask"
                },
                "<<": {
                    "1": "bit_shift_left"
                },
                "FUN_080069e4": {
                    "1": "set_bit_in_integer",
                    "2": "set_bit_in_int_array",
                    "6": "set_bit",
                    "7": "set_bit_in_array",
                    "8": "set_bit_in_memory"
                },
                "bitMask": {
                    "1": "mask"
                },
                "char": {
                    "1": "character"
                },
                "charValue": {
                    "1": "character"
                },
                "int": {
                    "1": "int_value"
                },
                "param_1": {
                    "1": "bit_position",
                    "15": "input_byte",
                    "3": "bit_index",
                    "4": "byte_to_set",
                    "8": "byte_value"
                },
                "param_1 & 0x1f": {
                    "1": "bit_index"
                },
                "param_1 >> 5": {
                    "1": "shifted_value"
                },
                "param_2": {
                    "1": "index"
                },
                "param_3": {
                    "1": "array"
                },
                "param_4": {
                    "1": "array_size"
                },
                "ptr_int": {
                    "1": "memory_location"
                },
                "shiftedValue": {
                    "1": "shifted"
                },
                "uint": {
                    "1": "unsigned_integer"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006d4a"
            ],
            "code": "\nvoid set_bit_in_memory_080069e4(byte input_byte)\n\n{\n  *(int_value *)(((shifted_value >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (input_byte bitwise_and 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_080069e4",
            "entrypoint": "0x080069e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "&": "bitwise_and",
                "(uint)(int)(char)param_1": "shifted_value",
                "FUN_080069e4": "set_bit_in_memory_080069e4",
                "char": "char_value",
                "int": "int_value",
                "param_1": "input_byte",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006a18": {
            "additional_data": {
                "!= 0": {
                    "1": "is_not_zero"
                },
                "&": {
                    "1": "bitwise_and"
                },
                "(*(uint *)((((uint)(int)(char)param_1 >> 5) + 0x40) * 4 + -0x1fff1f00)": {
                    "2": "bit_array"
                },
                "(*(uint *)((((uint)(int)(char)param_1 >> 5) + 0x40) * 4 + -0x1fff1f00) & 1 << (param_1 & 0x1f))": {
                    "2": "is_bit_set"
                },
                "(*(uint *)((((uint)shifted_value + 0x40) * 4 + -0x1fff1f00)": {
                    "1": "bit_field"
                },
                "(byteValue & 0x1f)": {
                    "1": "bit_position"
                },
                "(param_1 & 0x1f)": {
                    "2": "bit_position"
                },
                "(param_1 & 0x1f))": {
                    "1": "bit_mask"
                },
                "(uint)(int)(char)": {
                    "1": "converted_byte"
                },
                "(uint)(int)(char)param_1": {
                    "1": "shifted_value"
                },
                "(uint)(int)(char)param_1 >> 5)": {
                    "1": "shifted_value"
                },
                "*": {
                    "1": "multiply"
                },
                "*((uint *)((((uint)(int)(char)byteValue >> 5) + 0x40) * 4 + -0x1fff1f00)": {
                    "1": "bit_field_pointer"
                },
                "*(uint *)": {
                    "1": "bit_array"
                },
                "*(uint *)((((uint)(int)(char)byte_value >> 5) + 0x40) * 4 + -0x1fff1f00)": {
                    "1": "bit_array"
                },
                "*(uint *)((((uint)(int)(char)param_1 >> 5) + 0x40) * 4 + -0x1fff1f00)": {
                    "1": "bit_vector",
                    "6": "bit_array"
                },
                "+": {
                    "1": "add"
                },
                "-": {
                    "1": "subtract"
                },
                "0x1fff1f00": {
                    "1": "offset_constant"
                },
                "0x40": {
                    "1": "shift_constant"
                },
                "1 << (param_1 & 0x1f)": {
                    "4": "bit_mask"
                },
                "<<": {
                    "1": "left_shifted_value"
                },
                ">>": {
                    "1": "right_shift"
                },
                "DAT_": {
                    "1": "data_"
                },
                "FUN_08006a18": {
                    "1": "check_bit_in_memory",
                    "15": "check_bit",
                    "2": "check_bit_status",
                    "3": "is_bit_set",
                    "4": "check_bit_set"
                },
                "PTR_": {
                    "1": "pointer_"
                },
                "char": {
                    "4": "character"
                },
                "int": {
                    "1": "integer"
                },
                "param_1": {
                    "1": "bit_index",
                    "12": "input_byte",
                    "13": "byte_value",
                    "4": "byte_to_check"
                },
                "param_1 & 0x1f": {
                    "1": "bit_mask",
                    "2": "bit_index",
                    "5": "bit_position"
                },
                "uint": {
                    "1": "unsigned_integer",
                    "2": "unsigned_int"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006de0"
            ],
            "code": "\nbool check_bit_08006a18(byte byte_value)\n\n{\n  return (*(unsigned_int *)(((shifted_value >> 5) + 0x40) * 4 + subtract0x1fff1f00) bitwise_and\n         1 << (byte_value bitwise_and 0x1f)) != 0;\n}\n\n",
            "current_name": "check_bit_08006a18",
            "entrypoint": "0x08006a18",
            "imported": false,
            "improved": true,
            "renaming": {
                "&": "bitwise_and",
                "(uint)(int)(char)": "converted_byte",
                "(uint)(int)(char)param_1": "shifted_value",
                "-": "subtract",
                "FUN_08006a18": "check_bit_08006a18",
                "char": "character",
                "int": "integer",
                "param_1": "byte_value",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006a58": {
            "additional_data": {
                "&": {
                    "1": "bitwise_and"
                },
                "((((uint)(int)(char)param_1 >> 5) + 0x40) * 4 + -0x1fff1f00)": {
                    "1": "bit_array_index"
                },
                "(((uint)(int)(char)param_1 >> 5) + 0x40)": {
                    "1": "shifted_index"
                },
                "(int)(char)param_1": {
                    "1": "signed_input_byte"
                },
                "(param_1 & 0x1f)": {
                    "1": "bit_position"
                },
                "(uint)(int)(char)param_1": {
                    "1": "unsigned_signed_input_byte"
                },
                "*": {
                    "1": "multiply"
                },
                "*((((uint)(int)(char)param_1 >> 5) + 0x40) * 4 + -0x1fff1f00)": {
                    "1": "memory_address"
                },
                "*((uint *)(byteValue & 0xE0) + 0x40)": {
                    "1": "array_index"
                },
                "*(int *)((((uint)(int)(char)param_1 >> 5) + 0x40) * 4 + -0x1fff1f00)": {
                    "1": "bit_array",
                    "2": "memory_location",
                    "3": "array"
                },
                "+": {
                    "1": "plus"
                },
                "-": {
                    "1": "minus"
                },
                "0x1f": {
                    "1": "bit_mask"
                },
                "1": {
                    "1": "one"
                },
                "1 << (byteValue & 0x1F)": {
                    "1": "bit_mask"
                },
                "1 << (param_1 & 0x1f)": {
                    "1": "bit",
                    "3": "bit_to_set",
                    "6": "bit_mask"
                },
                ">>": {
                    "1": "right_shift"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "FUN_08006a58": {
                    "1": "update_bit_value",
                    "19": "set_bit_in_memory",
                    "3": "set_bit",
                    "7": "set_bit_in_array"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "bitIndex": {
                    "1": "index"
                },
                "char": {
                    "1": "character"
                },
                "int": {
                    "1": "int_pointer",
                    "2": "signed_int"
                },
                "newVariable_1": {
                    "1": "shifted_value"
                },
                "newVariable_2": {
                    "1": "index"
                },
                "param_1": {
                    "1": "param",
                    "2": "byte_value",
                    "21": "input_byte",
                    "3": "byte_to_set"
                },
                "param_1 & 0x1f": {
                    "1": "bit_position"
                },
                "param_1 >> 5": {
                    "1": "shifted_value"
                },
                "param_1[0]": {
                    "1": "bit_index"
                },
                "param_2": {
                    "1": "new_parameter_name_2"
                },
                "param_n": {
                    "1": "new_parameter_name_n"
                },
                "return": {
                    "1": "return"
                },
                "should remain unchanged": {
                    "1": "input_byte"
                },
                "uint": {
                    "3": "unsigned_int"
                },
                "value": {
                    "1": "array"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006dc4"
            ],
            "code": "\nvoid set_bit_in_memory_08006a58(byte input_byte)\n\n{\n  *(signed_int *)(((unsigned_signed_input_byte >> 5) plus 0x40) * 4 plus minus0x1fff1f00) = 1 << (input_byte bitwise_and 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_08006a58",
            "entrypoint": "0x08006a58",
            "imported": false,
            "improved": true,
            "renaming": {
                "&": "bitwise_and",
                "(int)(char)param_1": "signed_input_byte",
                "(uint)(int)(char)param_1": "unsigned_signed_input_byte",
                "+": "plus",
                "-": "minus",
                "FUN_08006a58": "set_bit_in_memory_08006a58",
                "char": "character",
                "int": "signed_int",
                "param_1": "input_byte",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006a8c": {
            "additional_data": {
                "&": {
                    "1": "bitwise_and"
                },
                "(((uint)(int)(char)param_1 >> 5) + 0x60) * 4 + -0x1fff1f00": {
                    "1": "address"
                },
                "(byteToSet & 0x1f)": {
                    "1": "bit_mask"
                },
                "(param_1 & 0x1f)": {
                    "1": "bit_position"
                },
                "(uint)(int)(char)param_1 >> 5": {
                    "1": "shifted_value"
                },
                "*((((uint)(int)(char)param_1 >> 5) + 0x60) * 4 + -0x1fff1f00)": {
                    "1": "memory_location"
                },
                "*((uint)(int)(char)param_1 >> 5) + 0x60)": {
                    "1": "address_to_set"
                },
                "*((uint*)(byteToSet >> 5) + 0x60 * 4 - 0x1fff1f00)": {
                    "1": "memory_address"
                },
                "*(int *)": {
                    "1": "memory_ptr"
                },
                "*(int *)((((uint)(int)(char)param_1 >> 5) + 0x60) * 4 + -0x1fff1f00)": {
                    "1": "bit_array",
                    "3": "memory_location",
                    "6": "memory_address"
                },
                "0x1f": {
                    "1": "mask"
                },
                "0x1fff1f00": {
                    "1": "offset_constant"
                },
                "0x60": {
                    "1": "base_offset"
                },
                "1 <<": {
                    "1": "bit_shift"
                },
                "1 << (param_1 & 0x1f)": {
                    "4": "bit_mask",
                    "5": "bit_value",
                    "6": "bit_to_set"
                },
                ">>": {
                    "1": "right_shift"
                },
                "FUN_08006a8c": {
                    "1": "update_bit_array",
                    "16": "set_bit_in_memory",
                    "4": "set_bit_in_array",
                    "5": "set_bit"
                },
                "char": {
                    "1": "input_char"
                },
                "param_1": {
                    "1": "byte_to_set_value",
                    "14": "input_byte",
                    "4": "byte_to_set",
                    "8": "byte_value"
                },
                "param_1 & 0x1f": {
                    "1": "bit_index",
                    "2": "bit_position"
                },
                "param_n": {
                    "1": "new_parameter_name_n"
                },
                "uint": {
                    "2": "unsigned_int"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006dfe"
            ],
            "code": "\nvoid set_bit_in_memory_08006a8c(byte input_byte)\n\n{\n  *(int *)((((unsigned_int)(int)(signed_char)input_byte >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (input_byte bitwise_and 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_08006a8c",
            "entrypoint": "0x08006a8c",
            "imported": false,
            "improved": true,
            "renaming": {
                "&": "bitwise_and",
                "FUN_08006a8c": "set_bit_in_memory_08006a8c",
                "char": "signed_char",
                "param_1": "input_byte",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006ac0": {
            "additional_data": {
                "(*(uint *)((((uint)(int)(char)param_1 >> 5) + 0x80) * 4 + -0x1fff1f00)": {
                    "1": "memory_address"
                },
                "(param_1 & 0x1f)": {
                    "1": "bit_index"
                },
                "*((uint *)(original calculation))": {
                    "1": "ptr_offset"
                },
                "*(uint *)((((uint)(int)(char)param_1 >> 5) + 0x80) * 4 + -0x1fff1f00)": {
                    "1": "bit_mask",
                    "4": "bit_array"
                },
                "DAT": {
                    "1": "data"
                },
                "DAT_": {
                    "1": ""
                },
                "DAT_08006ac4": {
                    "1": "data"
                },
                "FUN_08006ac0": {
                    "1": "check_bit_in_memory",
                    "12": "check_bit",
                    "2": "check_bit_value",
                    "3": "check_bit_status",
                    "5": "is_bit_set"
                },
                "PTR": {
                    "1": "pointer"
                },
                "PTR_": {
                    "1": ""
                },
                "PTR_08006ac0": {
                    "1": "ptr"
                },
                "char": {
                    "1": "char"
                },
                "new_variable_name_1": {
                    "1": "bit_shift"
                },
                "new_variable_name_2": {
                    "1": "bit_mask"
                },
                "param_1": {
                    "11": "byte_value",
                    "14": "input_byte",
                    "2": "bit_position",
                    "4": "byte_to_check"
                },
                "param_1 & 0x1f": {
                    "1": "bit_to_check",
                    "2": "bit_index",
                    "4": "bit_position"
                },
                "uint": {
                    "1": "unsigned_int"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006e1a"
            ],
            "code": "\nbool check_bit_08006ac0(byte input_byte)\n\n{\n  return (*(unsigned_int *)((((unsigned_int)(int)(character)input_byte >> 5) + 0x80) * 4 + -0x1fff1f00) &\n         1 << (input_byte & 0x1f)) != 0;\n}\n\n",
            "current_name": "check_bit_08006ac0",
            "entrypoint": "0x08006ac0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006ac0": "check_bit_08006ac0",
                "char": "character",
                "param_1": "input_byte",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006b00": {
            "additional_data": {
                "(char)((param_2 & 0xff) << 4)": {
                    "1": "shifted_data"
                },
                "(char)param_1": {
                    "1": "signed_input_byte"
                },
                "(char)param_1 + -0x1fff1c00": {
                    "2": "memory_address2"
                },
                "(char)param_1 < '\\0'": {
                    "1": "is_negative_input_byte"
                },
                "(param_2 & 0xff) << 4": {
                    "1": "shifted_data"
                },
                "*(char *)((char)param_1 + -0x1fff1c00)": {
                    "1": "alternative_memory_location"
                },
                "*(char *)((param_1 & 0xf) + 0xe000ed14)": {
                    "1": "store_in_memory_a"
                },
                "0x1fff1c00": {
                    "1": "buffer2"
                },
                "0xe000ed14": {
                    "1": "memory_block1"
                },
                "FUN_08006b00": {
                    "1": "update_memory_with_byte",
                    "2": "write_byte_to_memory",
                    "3": "store_byte",
                    "4": "store_byte_value"
                },
                "PTR_08006b00": {
                    "1": "new_pointer"
                },
                "PTR_1FFF1C00": {
                    "1": "pointer2"
                },
                "PTR_E000ED14": {
                    "1": "pointer1"
                },
                "byteMask": {
                    "1": "mask_value"
                },
                "byte_value_shifted": {
                    "1": "shifted_byte_value"
                },
                "char": {
                    "1": "byte_val"
                },
                "destinationAddress": {
                    "1": "mem_address"
                },
                "leftShift": {
                    "1": "bit_shift"
                },
                "lowerByte << 4": {
                    "1": "shifted_data"
                },
                "mask": {
                    "1": "byte_mask"
                },
                "newValue": {
                    "1": "stored_value"
                },
                "offset": {
                    "1": "mem_offset"
                },
                "param_1": {
                    "1": "source_value",
                    "2": "memory_address",
                    "5": "byte_value",
                    "8": "input_byte"
                },
                "param_1 & 0xf": {
                    "1": "index"
                },
                "param_1 & 0xf + 0xe000ed14": {
                    "1": "memory_address1"
                },
                "param_1 & 0xf) + 0xe000ed14": {
                    "1": "memory_address1"
                },
                "param_1_old_char": {
                    "1": "source_value_old_char"
                },
                "param_2": {
                    "1": "byte_value",
                    "11": "data",
                    "2": "value_to_store",
                    "8": "value"
                },
                "param_2 & 0xff": {
                    "1": "lower_byte"
                },
                "param_3": {
                    "1": "destination_address"
                },
                "param_4": {
                    "1": "offset"
                },
                "param_5": {
                    "1": "mask"
                },
                "param_6": {
                    "1": "shift"
                },
                "param_7": {
                    "1": "new_value"
                },
                "shift": {
                    "1": "left_shift"
                },
                "value": {
                    "1": "input_value"
                },
                "value_2": {
                    "1": "new_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006c9c",
                "FUN_08006cf6"
            ],
            "code": "\nvoid store_byte_value_08006b00(byte input_byte,uint data)\n\n{\n  if (signed_input_byte < '\\0') {\n    *(character *)((input_byte & 0xf) + 0xe000ed14) = (character)((data & 0xff) << 4);\n  }\n  else {\n    *(character *)(signed_input_byte + -0x1fff1c00) = (character)((data & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "current_name": "store_byte_value_08006b00",
            "entrypoint": "0x08006b00",
            "imported": false,
            "improved": true,
            "renaming": {
                "(char)param_1": "signed_input_byte",
                "FUN_08006b00": "store_byte_value_08006b00",
                "char": "character",
                "param_1": "input_byte",
                "param_2": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006b54": {
            "additional_data": {
                "FUN_08006b54": {
                    "1": "extract_high_nibble",
                    "13": "extract_byte",
                    "2": "get_nibble",
                    "6": "extracted_byte"
                },
                "bVar1": {
                    "1": "output_nibble",
                    "10": "output_byte",
                    "3": "result_byte",
                    "5": "result",
                    "7": "extracted_byte"
                },
                "param_1": {
                    "1": "value",
                    "24": "input_byte",
                    "3": "input_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006d98"
            ],
            "code": "\nbyte extract_byte_08006b54(byte input_byte)\n\n{\n  byte output_byte;\n  \n  if ((char)input_byte < '\\0') {\n    output_byte = *(byte *)((input_byte & 0xf) + 0xe000ed14);\n  }\n  else {\n    output_byte = *(byte *)((char)input_byte + -0x1fff1c00);\n  }\n  return output_byte >> 4;\n}\n\n",
            "current_name": "extract_byte_08006b54",
            "entrypoint": "0x08006b54",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006b54": "extract_byte_08006b54",
                "bVar1": "output_byte",
                "param_1": "input_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006ba0": {
            "additional_data": {
                "((1 << (uVar1 & 0xff)) - 1U & param_2) << (param_1 & 0xff)": {
                    "1": "bit_mask2_result"
                },
                "(1 << (param_1 & 0xff)) - 1U": {
                    "1": "masked_input1"
                },
                "(1 << (uVar1 & 0xff)) - 1U": {
                    "1": "masked_input2"
                },
                "1 << (param_1 & 0xff)": {
                    "1": "mask1"
                },
                "1 << (param_1 & 0xff)) - 1U": {
                    "1": "bitmask_mask"
                },
                "1 << (uVar1 & 0xff)": {
                    "1": "mask2"
                },
                "1 << (uVar1 & 0xff)) - 1U": {
                    "1": "max_bitmask_mask"
                },
                "FUN_08006ba0": {
                    "1": "apply_param_mask",
                    "12": "bitwise_operation",
                    "2": "bitwise_combination",
                    "3": "extract_bits",
                    "4": "apply_bit_mask"
                },
                "param_1": {
                    "1": "num_bits",
                    "2": "input1",
                    "3": "bit_position",
                    "4": "input_bits"
                },
                "param_1 & 0xff": {
                    "1": "input_value_mod"
                },
                "param_1 & 7": {
                    "1": "bitmask_offset"
                },
                "param_1 + 4": {
                    "1": "bitmask_offset_threshold"
                },
                "param_1 - 3": {
                    "1": "adjusted_input1"
                },
                "param_1_updated": {
                    "1": "new_bit_position"
                },
                "param_1_updated2": {
                    "1": "new_bit_position2"
                },
                "param_2": {
                    "1": "original_value",
                    "2": "bitmask",
                    "3": "bit_mask",
                    "4": "input_value"
                },
                "param_2 & (1 << (param_1 & 0xff)) - 1U": {
                    "1": "bit_mask1_result"
                },
                "param_2 + param_3 << (param_1 & 0xff)": {
                    "1": "result"
                },
                "param_2_new": {
                    "1": "masked_value1"
                },
                "param_3": {
                    "1": "data_value",
                    "2": "result",
                    "3": "input3"
                },
                "param_3_new": {
                    "1": "masked_value2"
                },
                "uVar1": {
                    "1": "calculation1",
                    "2": "bit_count",
                    "3": "shift_value",
                    "4": "remaining_bits",
                    "7": "shift_amount"
                },
                "uVar1 & 0xff": {
                    "1": "end_bit"
                },
                "uVar2": {
                    "1": "temp_var2"
                },
                "uVar3": {
                    "1": "shifted_bits"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006cf6"
            ],
            "code": "\nuint bitwise_operation_08006ba0(uint input_bits,uint input2,uint input3)\n\n{\n  uint shift_amount;\n  \n  input_bits = input_bits & 7;\n  shift_amount = 7 - input_bits;\n  if (3 < shift_amount) {\n    shift_amount = 4;\n  }\n  if (input_bits + 4 < 7) {\n    input_bits = 0;\n  }\n  else {\n    input_bits = input_bits - 3;\n  }\n  return input3 & (1 << (input_bits & 0xff)) - 1U |\n         ((1 << (shift_amount & 0xff)) - 1U & input2) << (input_bits & 0xff);\n}\n\n",
            "current_name": "bitwise_operation_08006ba0",
            "entrypoint": "0x08006ba0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006ba0": "bitwise_operation_08006ba0",
                "param_1": "input_bits",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006c04": {
            "additional_data": {
                "*param_3": {
                    "1": "bit_masked_result1",
                    "2": "masked_output_1",
                    "3": "extracted_bits_1"
                },
                "*param_4": {
                    "1": "result_2",
                    "2": "masked_output_2",
                    "3": "extracted_bits_2"
                },
                "FUN_08006c04": {
                    "1": "extract_bits_and_mask",
                    "2": "bitwise_shift_and_mask",
                    "26": "extract_bits"
                },
                "param_1": {
                    "1": "source",
                    "18": "input_value",
                    "2": "input_data",
                    "9": "input"
                },
                "param_2": {
                    "1": "shift_count",
                    "10": "bit_position",
                    "13": "bit_offset",
                    "2": "num_bits",
                    "3": "start_bit"
                },
                "param_3": {
                    "1": "high_bits",
                    "2": "output_1",
                    "3": "result_1",
                    "4": "output_value1",
                    "5": "output1",
                    "7": "output_value_1"
                },
                "param_4": {
                    "1": "extracted_bits2",
                    "2": "output_data2",
                    "3": "result_2",
                    "4": "output_value2",
                    "5": "output2",
                    "7": "output_value_2"
                },
                "uVar1": {
                    "1": "bit_shift_amount",
                    "2": "num_shifts",
                    "3": "num_bits_to_extract",
                    "4": "num_bits",
                    "6": "remaining_bits",
                    "9": "shift_amount"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006d98"
            ],
            "code": "\nvoid extract_bits_08006c04(uint input_value,uint bit_offset,uint *output_value_1,uint *output_value_2)\n\n{\n  uint shift_amount;\n  \n  bit_offset = bit_offset & 7;\n  shift_amount = 7 - bit_offset;\n  if (3 < shift_amount) {\n    shift_amount = 4;\n  }\n  if (bit_offset + 4 < 7) {\n    bit_offset = 0;\n  }\n  else {\n    bit_offset = bit_offset - 3;\n  }\n  *output_value_1 = (1 << (shift_amount & 0xff)) - 1U & input_value >> (bit_offset & 0xff);\n  *output_value_2 = (1 << (bit_offset & 0xff)) - 1U & input_value;\n  return;\n}\n\n",
            "current_name": "extract_bits_08006c04",
            "entrypoint": "0x08006c04",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006c04": "extract_bits_08006c04",
                "param_1": "input_value",
                "param_2": "bit_offset",
                "param_3": "output_value_1",
                "param_4": "output_value_2",
                "uVar1": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006c70": {
            "additional_data": {
                "0xf": {
                    "1": "barrier_flag",
                    "2": "sync_value"
                },
                "<original_variable_name>": {
                    "2": "<new_variable_name>"
                },
                "DAT_": {
                    "1": "unchanged"
                },
                "DataSynchronizationBarrier": {
                    "1": "sync",
                    "16": "sync_barrier",
                    "3": "synchronize_data",
                    "6": "barrier"
                },
                "FUN_08006c70": {
                    "1": "data_synchronization",
                    "2": "endless_loop",
                    "3": "continuous_loop",
                    "9": "run_infinite_loop"
                },
                "PTR_": {
                    "1": "unchanged"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006d66"
            ],
            "code": "\nvoid infinite_loop_08006c70(void)\n\n{\n  sync_barrier(0xf);\n  sync_barrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "infinite_loop_08006c70",
            "entrypoint": "0x08006c70",
            "imported": false,
            "improved": true,
            "renaming": {
                "DataSynchronizationBarrier": "sync_barrier",
                "FUN_08006c70": "infinite_loop_08006c70"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006c9c": {
            "additional_data": {
                "FUN_08006b00": {
                    "1": "set_byte_and_parameter",
                    "2": "perform_operation"
                },
                "FUN_08006c9c": {
                    "1": "reverse_and_initialize",
                    "4": "check_and_initialize_param",
                    "5": "check_and_set_param",
                    "7": "check_and_initialize"
                },
                "_DAT_e000e010": {
                    "1": "parameter_value"
                },
                "_DAT_e000e014": {
                    "1": "modified_parameter",
                    "2": "modified_value"
                },
                "_DAT_e000e018": {
                    "1": "initialized_flag"
                },
                "bVar1": {
                    "1": "is_less_than_threshold",
                    "2": "is_valid_input",
                    "3": "is_param_valid",
                    "5": "is_input_valid",
                    "6": "is_in_range"
                },
                "param_1": {
                    "1": "operation_param_1",
                    "12": "input_value",
                    "2": "byte_value",
                    "3": "value",
                    "5": "input",
                    "8": "input_param"
                },
                "param_2": {
                    "1": "operation_param_2",
                    "2": "uint_value"
                }
            },
            "called": [
                "FUN_08006b00"
            ],
            "calling": [
                "FUN_08006d72"
            ],
            "code": "\n\n\nbool check_and_initialize_08006c9c(int input_value)\n\n{\n  bool is_in_range;\n  \n  is_in_range = input_value - 1U < 0x1000000;\n  if (is_in_range) {\n    _DAT_e000e014 = input_value + -1;\n    FUN_08006b00(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !is_in_range;\n}\n\n",
            "current_name": "check_and_initialize_08006c9c",
            "entrypoint": "0x08006c9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006c9c": "check_and_initialize_08006c9c",
                "bVar1": "is_in_range",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006ce0": {
            "additional_data": {
                "FUN_08006950": {
                    "1": "initialize_value",
                    "2": "perform_initialization",
                    "5": "process_data",
                    "6": "process_input"
                },
                "FUN_08006ce0": {
                    "1": "invoke_main_function",
                    "10": "execute_function",
                    "2": "process_data",
                    "5": "initialize",
                    "7": "execute_initialization"
                },
                "param_1": {
                    "1": "initialization_param",
                    "2": "param",
                    "4": "data",
                    "5": "input",
                    "7": "input_param"
                }
            },
            "called": [
                "FUN_08006950"
            ],
            "calling": [
                "FUN_080059b4"
            ],
            "code": "\nvoid execute_function_08006ce0(undefined4 input_param)\n\n{\n  FUN_08006950(input_param);\n  return;\n}\n\n",
            "current_name": "execute_function_08006ce0",
            "entrypoint": "0x08006ce0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006ce0": "execute_function_08006ce0",
                "param_1": "input_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006cf6": {
            "additional_data": {
                "FUN_08006998": {
                    "1": "generate_value",
                    "15": "get_initial_value",
                    "4": "get_random_number"
                },
                "FUN_08006b00": {
                    "1": "set_character_value",
                    "4": "print_data",
                    "5": "print_result"
                },
                "FUN_08006ba0": {
                    "1": "do_calculation",
                    "2": "perform_operation",
                    "3": "calculate_new_value"
                },
                "FUN_08006cf6": {
                    "1": "execute_process",
                    "12": "process_data",
                    "2": "execute_operation",
                    "4": "execute_function"
                },
                "FUn_08006cf6": {
                    "1": "reverse_and_send_data"
                },
                "param_1": {
                    "1": "input_param",
                    "10": "input_byte",
                    "3": "input",
                    "4": "data",
                    "8": "character"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "input_param1",
                    "3": "arg1",
                    "4": "param_a",
                    "8": "value1"
                },
                "param_3": {
                    "1": "second_parameter",
                    "2": "input_param2",
                    "3": "arg2",
                    "5": "param_b",
                    "7": "value2"
                },
                "param_3: : value2: ,\n: uVar1": {
                    "1": "return_value"
                },
                "uVar1": {
                    "1": "random_num",
                    "18": "result",
                    "2": "result_a",
                    "3": "return_value"
                }
            },
            "called": [
                "FUN_08006998",
                "FUN_08006b00",
                "FUN_08006ba0"
            ],
            "calling": [
                "FUN_08007a70"
            ],
            "code": "\nvoid process_data_08006cf6(char input_byte,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 result;\n  \n  result = FUN_08006998();\n  result = FUN_08006ba0(result,value1,value2);\n  FUN_08006b00((int)input_byte,result);\n  return;\n}\n\n",
            "current_name": "process_data_08006cf6",
            "entrypoint": "0x08006cf6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006cf6": "process_data_08006cf6",
                "param_1": "input_byte",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d2e": {
            "additional_data": {
                "FUN_080069b4": {
                    "1": "perform_sub_process",
                    "2": "handle_input",
                    "5": "process_byte",
                    "6": "process_data"
                },
                "FUN_08006d2e": {
                    "1": "perform_initial_setup",
                    "2": "process_char",
                    "3": "process_input",
                    "6": "process_character",
                    "7": "execute_function"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "input_byte",
                    "3": "input_value",
                    "5": "data",
                    "7": "character",
                    "8": "input"
                }
            },
            "called": [
                "FUN_080069b4"
            ],
            "calling": [],
            "code": "\nvoid execute_function_08006d2e(char input)\n\n{\n  FUN_080069b4((int)input);\n  return;\n}\n\n",
            "current_name": "execute_function_08006d2e",
            "entrypoint": "0x08006d2e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d2e": "execute_function_08006d2e",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d4a": {
            "additional_data": {
                "FUN_080069e4": {
                    "1": "handle_byte",
                    "2": "process_data",
                    "3": "process_input",
                    "4": "process_byte"
                },
                "FUN_08006d4a": {
                    "1": "execute_operation",
                    "2": "execute_param_function",
                    "3": "process_char",
                    "4": "process_character",
                    "6": "execute_function"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "byte_param",
                    "7": "input_byte"
                }
            },
            "called": [
                "FUN_080069e4"
            ],
            "calling": [],
            "code": "\nvoid execute_function_08006d4a(char input)\n\n{\n  FUN_080069e4((int)input);\n  return;\n}\n\n",
            "current_name": "execute_function_08006d4a",
            "entrypoint": "0x08006d4a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d4a": "execute_function_08006d4a",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d66": {
            "additional_data": {
                "FUN_08006c70": {
                    "1": "initialize_components",
                    "16": "perform_initialization",
                    "2": "execute_sub_function",
                    "3": "initialize_data",
                    "4": "execute_initialization"
                },
                "FUN_08006d66": {
                    "1": "execute_initial_setup",
                    "2": "execute_main_function",
                    "4": "initialize_program",
                    "6": "initialize_system",
                    "7": "execute_initialization",
                    "8": "initialize_application"
                }
            },
            "called": [
                "FUN_08006c70"
            ],
            "calling": [],
            "code": "\nvoid initialize_application_08006d66(void)\n\n{\n  FUN_08006c70();\n  return;\n}\n\n",
            "current_name": "initialize_application_08006d66",
            "entrypoint": "0x08006d66",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d66": "initialize_application_08006d66"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d72": {
            "additional_data": {
                "FUN_08006c9c": {
                    "1": "check_value",
                    "2": "check_validity"
                },
                "FUN_08006d72": {
                    "1": "process_param",
                    "9": "process_data"
                },
                "param_1": {
                    "1": "input_data",
                    "18": "input",
                    "2": "data",
                    "5": "input_param"
                },
                "uVar1": {
                    "1": "output",
                    "2": "return_value",
                    "22": "result"
                },
                "undefined4": {
                    "1": "result"
                }
            },
            "called": [
                "FUN_08006c9c"
            ],
            "calling": [
                "FUN_080059b4"
            ],
            "code": "\nresult process_data_08006d72(result input)\n\n{\n  result result;\n  \n  result = FUN_08006c9c(input);\n  return result;\n}\n\n",
            "current_name": "process_data_08006d72",
            "entrypoint": "0x08006d72",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d72": "process_data_08006d72",
                "param_1": "input",
                "uVar1": "result",
                "undefined4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d8a": {
            "additional_data": {
                "FUN_08006998": {
                    "1": "retrieve_value",
                    "2": "retrieve_data",
                    "3": "fetch_data",
                    "5": "get_data",
                    "6": "calculate_value"
                },
                "FUN_08006d8a": {
                    "1": "extract_and_return_value",
                    "11": "get_return_value",
                    "2": "retrieve_data"
                },
                "uVar1": {
                    "1": "data_value",
                    "3": "return_value"
                }
            },
            "called": [
                "FUN_08006998"
            ],
            "calling": [],
            "code": "\nundefined4 get_return_value_08006d8a(void)\n\n{\n  undefined4 result;\n  \n  result = FUN_08006998();\n  return result;\n}\n\n",
            "current_name": "get_return_value_08006d8a",
            "entrypoint": "0x08006d8a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d8a": "get_return_value_08006d8a",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d98": {
            "additional_data": {
                "FUM_08006d98": {
                    "1": "decode_and_process"
                },
                "FUN_08006b54": {
                    "1": "convert_character_to_byte"
                },
                "FUN_08006c04": {
                    "1": "execute_function_with_parameters",
                    "2": "process_data"
                },
                "FUN_08006d98": {
                    "1": "extract_and_process_data",
                    "2": "process_input",
                    "4": "process_character",
                    "9": "process_data"
                },
                "param_1": {
                    "1": "input_param",
                    "6": "input_char",
                    "7": "input_byte",
                    "8": "input"
                },
                "param_2": {
                    "1": "first_param",
                    "14": "param2",
                    "3": "param_a",
                    "4": "param_2"
                },
                "param_3": {
                    "1": "second_param",
                    "14": "param3",
                    "3": "param_b",
                    "4": "value2"
                },
                "param_4": {
                    "1": "third_param",
                    "14": "param4",
                    "3": "param_c",
                    "4": "value3"
                },
                "uVar1": {
                    "1": "processed_value",
                    "2": "decoded_byte",
                    "3": "converted_input",
                    "6": "converted_value",
                    "8": "result"
                }
            },
            "called": [
                "FUN_08006b54",
                "FUN_08006c04"
            ],
            "calling": [],
            "code": "\nvoid process_data_08006d98(char input,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 result;\n  \n  result = FUN_08006b54((int)input);\n  FUN_08006c04(result,param2,param3,param4);\n  return;\n}\n\n",
            "current_name": "process_data_08006d98",
            "entrypoint": "0x08006d98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d98": "process_data_08006d98",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006dc4": {
            "additional_data": {
                "FUN_08006a58": {
                    "1": "reverse_byte_order",
                    "2": "process_data",
                    "5": "process_input",
                    "6": "process_byte"
                },
                "FUN_08006dc4": {
                    "1": "improve_code",
                    "13": "execute_function",
                    "3": "process_input",
                    "4": "process_character"
                },
                "char param_1": {
                    "1": "character"
                },
                "param_1": {
                    "1": "input_param",
                    "13": "input",
                    "2": "input_parameter",
                    "3": "character",
                    "5": "input_byte"
                }
            },
            "called": [
                "FUN_08006a58"
            ],
            "calling": [],
            "code": "\nvoid execute_function_08006dc4(char input)\n\n{\n  FUN_08006a58((int)input);\n  return;\n}\n\n",
            "current_name": "execute_function_08006dc4",
            "entrypoint": "0x08006dc4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006dc4": "execute_function_08006dc4",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006de0": {
            "additional_data": {
                "FUN_08006a18": {
                    "1": "check_condition"
                },
                "FUN_08006de0": {
                    "1": "parse_character",
                    "2": "convert_byte_to_unsigned_int",
                    "3": "decode_char",
                    "4": "decode_character"
                },
                "param_1": {
                    "1": "byte_value",
                    "12": "input_byte",
                    "5": "input_char",
                    "6": "character"
                },
                "uVar1": {
                    "1": "reversed_byte",
                    "23": "result"
                }
            },
            "called": [
                "FUN_08006a18"
            ],
            "calling": [],
            "code": "\nundefined4 decode_character_08006de0(char input_byte)\n\n{\n  undefined4 result;\n  \n  result = FUN_08006a18((int)input_byte);\n  return result;\n}\n\n",
            "current_name": "decode_character_08006de0",
            "entrypoint": "0x08006de0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006de0": "decode_character_08006de0",
                "param_1": "input_byte",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006dfe": {
            "additional_data": {
                "FUN_08006a8c": {
                    "1": "convert_byte_to_string",
                    "2": "process_input",
                    "3": "handle_byte",
                    "4": "process_data",
                    "5": "process_byte"
                },
                "FUN_08006dfe": {
                    "1": "execute_param_1",
                    "2": "execute_process",
                    "4": "process_character",
                    "5": "execute_function"
                },
                "param_1": {
                    "1": "process_id",
                    "2": "byte_value",
                    "3": "input_char",
                    "4": "data",
                    "5": "input_byte",
                    "7": "input"
                }
            },
            "called": [
                "FUN_08006a8c"
            ],
            "calling": [],
            "code": "\nvoid execute_function_08006dfe(char input)\n\n{\n  FUN_08006a8c((int)input);\n  return;\n}\n\n",
            "current_name": "execute_function_08006dfe",
            "entrypoint": "0x08006dfe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006dfe": "execute_function_08006dfe",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006e1a": {
            "additional_data": {
                "FUN_08006ac0": {
                    "1": "check_byte_validity",
                    "2": "check_validity"
                },
                "FUN_08006e1a": {
                    "1": "reverse_something",
                    "2": "convert_byte_to_undefined4",
                    "6": "decode_byte"
                },
                "param_1": {
                    "1": "input_char",
                    "14": "input_byte",
                    "2": "byte_value",
                    "3": "character",
                    "4": "input_character"
                },
                "uVar1": {
                    "1": "decoding_result",
                    "13": "result",
                    "2": "converted_value",
                    "5": "decoded_value"
                }
            },
            "called": [
                "FUN_08006ac0"
            ],
            "calling": [],
            "code": "\nundefined4 decode_character_08006e1a(char input_byte)\n\n{\n  undefined4 result;\n  \n  result = FUN_08006ac0((int)input_byte);\n  return result;\n}\n\n",
            "current_name": "decode_character_08006e1a",
            "entrypoint": "0x08006e1a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006e1a": "decode_character_08006e1a",
                "param_1": "input_byte",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006e88": {
            "additional_data": {
                "FUN_08006e88": {
                    "1": "update_param",
                    "2": "update_data",
                    "3": "update_bits",
                    "4": "update_flags",
                    "9": "update_parameters"
                },
                "_DAT_40013800": {
                    "1": "register_2"
                },
                "_DAT_40013c00": {
                    "1": "register_3"
                },
                "_DAT_40013c04": {
                    "1": "register_4"
                },
                "_DAT_40013c08": {
                    "1": "register5"
                },
                "_DAT_40013c0c": {
                    "1": "register6"
                },
                "_DAT_40023844": {
                    "1": "register_1"
                },
                "iVar3": {
                    "1": "target_index",
                    "13": "index",
                    "3": "block_index",
                    "4": "register_index"
                },
                "local_c": {
                    "1": "loop_index",
                    "10": "bit_index",
                    "3": "index",
                    "4": "bit_position",
                    "8": "counter"
                },
                "param_1": {
                    "1": "config_ptr",
                    "2": "input_params",
                    "5": "output_params"
                },
                "param_2": {
                    "1": "control_params",
                    "2": "input_data",
                    "3": "input_array",
                    "4": "input",
                    "5": "input_params"
                },
                "uVar1": {
                    "1": "bit_mask_1",
                    "23": "bit_mask",
                    "6": "mask"
                },
                "uVar2": {
                    "1": "bitwise_result",
                    "15": "bit_value",
                    "2": "bit",
                    "6": "bit_check"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800640c",
                "FUN_0800778c"
            ],
            "code": "\n\n\nvoid update_parameters_08006e88(uint *output_params,uint *input_params)\n\n{\n  uint bit_mask;\n  uint bit_value;\n  int index;\n  uint bit_index;\n  \n  for (bit_index = 0; bit_index < 0x10; bit_index = bit_index + 1) {\n    bit_mask = 1 << (bit_index & 0xff);\n    bit_value = *input_params & bit_mask;\n    if (bit_value == bit_mask) {\n      if ((input_params[1] == 2) || (input_params[1] == 0x12)) {\n        bit_mask = input_params[4];\n        output_params[(bit_index >> 3) + 8] = output_params[(bit_index >> 3) + 8] & ~(0xf << ((bit_index & 7) << 2));\n        output_params[(bit_index >> 3) + 8] = output_params[(bit_index >> 3) + 8] | bit_mask << ((bit_index & 7) << 2);\n      }\n      *output_params = *output_params & ~(3 << ((bit_index & 0x7f) << 1));\n      *output_params = *output_params | (input_params[1] & 3) << ((bit_index & 0x7f) << 1);\n      if ((((input_params[1] == 1) || (input_params[1] == 2)) || (input_params[1] == 0x11)) || (input_params[1] == 0x12)\n         ) {\n        output_params[2] = output_params[2] & ~(3 << ((bit_index & 0x7f) << 1));\n        output_params[2] = output_params[2] | input_params[3] << ((bit_index & 0x7f) << 1);\n        output_params[1] = output_params[1] & ~(1 << (bit_index & 0xff));\n        output_params[1] = output_params[1] | (input_params[1] >> 4 & 1) << (bit_index & 0xff);\n      }\n      output_params[3] = output_params[3] & ~(3 << ((bit_index & 0x7f) << 1));\n      output_params[3] = output_params[3] | input_params[2] << ((bit_index & 0x7f) << 1);\n      if ((input_params[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        *(uint *)(((bit_index >> 2) + 2) * 4 + 0x40013800) =\n             ~(0xf << ((bit_index & 3) << 2)) & *(uint *)(((bit_index >> 2) + 2) * 4 + 0x40013800);\n        if (output_params == (uint *)0x40020000) {\n          index = 0;\n        }\n        else if (output_params == (uint *)0x40020400) {\n          index = 1;\n        }\n        else if (output_params == (uint *)0x40020800) {\n          index = 2;\n        }\n        else if (output_params == (uint *)0x40020c00) {\n          index = 3;\n        }\n        else if (output_params == (uint *)0x40021000) {\n          index = 4;\n        }\n        else if (output_params == (uint *)0x40021400) {\n          index = 5;\n        }\n        else if (output_params == (uint *)0x40021800) {\n          index = 6;\n        }\n        else if (output_params == (uint *)0x40021c00) {\n          index = 7;\n        }\n        else if (output_params == (uint *)0x40022000) {\n          index = 8;\n        }\n        else if (output_params == (uint *)0x40022400) {\n          index = 9;\n        }\n        else {\n          index = 10;\n        }\n        *(uint *)(((bit_index >> 2) + 2) * 4 + 0x40013800) =\n             index << ((bit_index & 3) << 2) | *(uint *)(((bit_index >> 2) + 2) * 4 + 0x40013800);\n        _DAT_40013c00 = ~bit_value & _DAT_40013c00;\n        _DAT_40013c04 = ~bit_value & _DAT_40013c04;\n        if ((input_params[1] & 0x10000) != 0) {\n          _DAT_40013c00 = bit_value | _DAT_40013c00;\n        }\n        if ((input_params[1] & 0x20000) != 0) {\n          _DAT_40013c04 = bit_value | _DAT_40013c04;\n        }\n        _DAT_40013c08 = ~bit_value & _DAT_40013c08;\n        _DAT_40013c0c = ~bit_value & _DAT_40013c0c;\n        if ((input_params[1] & 0x100000) != 0) {\n          _DAT_40013c08 = bit_value | _DAT_40013c08;\n        }\n        if ((input_params[1] & 0x200000) != 0) {\n          _DAT_40013c0c = bit_value | _DAT_40013c0c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "update_parameters_08006e88",
            "entrypoint": "0x08006e88",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006e88": "update_parameters_08006e88",
                "iVar3": "index",
                "local_c": "bit_index",
                "param_1": "output_params",
                "param_2": "input_params",
                "uVar1": "bit_mask",
                "uVar2": "bit_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800733e": {
            "additional_data": {
                "*(undefined2 *)(param_1 + 0x18)": {
                    "1": "secondary_param_pointer"
                },
                "*(undefined2 *)(param_1 + 0x1a)": {
                    "1": "parameter_a"
                },
                "0x18": {
                    "1": "second_parameter_offset",
                    "2": "offset2"
                },
                "0x1a": {
                    "1": "first_param_offset",
                    "2": "offset1"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "FUN_0800733e": {
                    "1": "assign_param_value",
                    "11": "set_param_value",
                    "2": "update_param_value",
                    "5": "update_param",
                    "6": "update_parameter"
                },
                "dataAddress": {
                    "1": "data_address"
                },
                "newValue": {
                    "1": "new_value"
                },
                "param_1": {
                    "1": "object_addr",
                    "10": "base_address",
                    "3": "memory_address",
                    "8": "object_address"
                },
                "param_1 + 0x18": {
                    "1": "second_param_address"
                },
                "param_1 + 0x1a": {
                    "1": "first_param_address"
                },
                "param_1+0x18": {
                    "1": "object_field_b"
                },
                "param_1+0x1a": {
                    "1": "object_field_a"
                },
                "param_2": {
                    "1": "parameter_value",
                    "11": "new_value",
                    "12": "value",
                    "3": "new_param_value"
                },
                "param_3": {
                    "1": "is_flag_set",
                    "2": "is_second_parameter",
                    "3": "is_secondary",
                    "4": "condition",
                    "5": "is_second_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800778c"
            ],
            "code": "\nvoid set_param_value_0800733e(int base_address,undefined2 value,char is_second_value)\n\n{\n  if (is_second_value == '\\0') {\n    *(undefined2 *)(base_address + 0x1a) = value;\n  }\n  else {\n    *(undefined2 *)(base_address + 0x18) = value;\n  }\n  return;\n}\n\n",
            "current_name": "set_param_value_0800733e",
            "entrypoint": "0x0800733e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800733e": "set_param_value_0800733e",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "is_second_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800738e": {
            "additional_data": {
                "FUNC_080073c0": {
                    "1": "handle_update",
                    "2": "perform_operation",
                    "4": "perform_update",
                    "6": "execute_function"
                },
                "FUN_0800738e": {
                    "1": "update_and_call",
                    "2": "update_data",
                    "3": "update_and_call_function",
                    "5": "update_data_if_flag_set"
                },
                "_DAT_40013c14": {
                    "1": "data_value",
                    "3": "data_flag",
                    "4": "flag_value"
                },
                "param_1": {
                    "1": "parameter",
                    "13": "input_value",
                    "2": "input_param",
                    "4": "input",
                    "8": "data"
                }
            },
            "called": [
                "FUN_080073c0"
            ],
            "calling": [],
            "code": "\n\n\nvoid update_data_if_flag_set_0800738e(ushort input_value)\n\n{\n  if ((input_value & _DAT_40013c14) != 0) {\n    _DAT_40013c14 = (uint)input_value;\n    FUNC_080073c0(input_value);\n  }\n  return;\n}\n\n",
            "current_name": "update_data_if_flag_set_0800738e",
            "entrypoint": "0x0800738e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800738e": "update_data_if_flag_set_0800738e",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080073c0": {
            "called": [],
            "calling": [
                "FUN_0800738e"
            ],
            "code": "\nvoid FUNC_080073c0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080073c0",
            "entrypoint": "0x080073c0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080073c0": "FUNC_080073c0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080073d4": {
            "additional_data": {
                "(((int)value >> 4) * 0x400 + 0x4002001a)": {
                    "1": "memory_address"
                },
                "(1 << (param_1 & 0xf))": {
                    "1": "bit_value"
                },
                "(int)value": {
                    "1": "index"
                },
                "(param_1 & 0xf)": {
                    "1": "bit_index"
                },
                "(param_1 >> 4)": {
                    "1": "shifted_index"
                },
                "(short)(1 << (param_1 & 0xf))": {
                    "1": "bitwise_value",
                    "7": "bit_value"
                },
                "(short)(1 << (value & 0xf))": {
                    "1": "updated_value"
                },
                "*(((int)param_1 >> 4) * 0x400 + 0x4002001a)": {
                    "1": "target_address"
                },
                "*(((int)value >> 4) * 0x400 + 0x4002001a)": {
                    "1": "target_address"
                },
                "*(short *)": {
                    "1": "memory"
                },
                "*(short *)(((int)param_1 >> 4) * 0x400 + 0x4002001a)": {
                    "1": "target_address",
                    "4": "memory_address"
                },
                "*(short *)((int)param_1 >> 4) * 0x400 + 0x4002001a": {
                    "1": "address"
                },
                "0x4002001a": {
                    "1": "array_base_address"
                },
                "1": {
                    "1": "bit_value"
                },
                "1 << (param_1 & 0xf)": {
                    "1": "bit_shifted_value"
                },
                "FUN_080073d4": {
                    "1": "set_bits_in_array",
                    "2": "update_bitmask",
                    "3": "set_bit_in_array",
                    "8": "set_bit_in_memory"
                },
                "int": {
                    "1": "index"
                },
                "param_1": {
                    "1": "offset",
                    "3": "index",
                    "4": "bit_position",
                    "5": "value",
                    "8": "input_value"
                },
                "param_1 & 0xf": {
                    "1": "bit_offset"
                },
                "short": {
                    "1": "int16",
                    "4": "short"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007520"
            ],
            "code": "\nvoid set_bit_in_memory_080073d4(uindex input_value)\n\n{\n  *(short *)(((index)input_value >> 4) * 0x400 + 0x4002001a) = (short)(1 << (input_value & 0xf));\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_080073d4",
            "entrypoint": "0x080073d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080073d4": "set_bit_in_memory_080073d4",
                "int": "index",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007402": {
            "additional_data": {
                "(int)param_1": {
                    "1": "int_value"
                },
                "(short)(1 << (param_1 & 0xf))": {
                    "1": "bitwise_value",
                    "6": "bit_value"
                },
                "*((int)param_1 >> 4) * 0x400 + 0x40020018": {
                    "1": "address"
                },
                "*(short *)(((int)param_1 >> 4) * 0x400 + 0x40020018)": {
                    "1": "dest_address",
                    "2": "address",
                    "4": "memory_address"
                },
                "0x400": {
                    "1": "memory_offset"
                },
                "0x40020018": {
                    "1": "memory_address",
                    "2": "memory_base_address"
                },
                "1": {
                    "1": "bit_mask"
                },
                "FUN_08007402": {
                    "1": "update_bit_in_memory",
                    "2": "store_bitwise_value",
                    "3": "write_bit_to_memory",
                    "4": "set_bit_value",
                    "8": "set_bit_in_memory"
                },
                "PTR_0x40020018": {
                    "1": "data_ptr"
                },
                "int": {
                    "1": "memory_index"
                },
                "new_variable_name_1": {
                    "1": "memory_address"
                },
                "new_variable_name_2": {
                    "1": "shift_amount"
                },
                "param_1": {
                    "1": "input_param",
                    "10": "input_value",
                    "2": "bit_index",
                    "3": "offset",
                    "4": "input"
                },
                "short": {
                    "1": "bit_flag"
                },
                "short((1 << (param_1 & 0xf)))": {
                    "1": "bit_value"
                },
                "x": {
                    "1": "shifted_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_080074c8"
            ],
            "code": "\nvoid set_bit_in_memory_08007402(umemory_index input_value)\n\n{\n  *(bit_flag *)((int_value >> 4) * 0shifted_value400 + 0shifted_value40020018) = (bit_flag)(1 << (input_value & 0shifted_valuef));\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_08007402",
            "entrypoint": "0x08007402",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "int_value",
                "FUN_08007402": "set_bit_in_memory_08007402",
                "int": "memory_index",
                "param_1": "input_value",
                "short": "bit_flag",
                "x": "shifted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007430": {
            "additional_data": {
                "<original_parameter_name>": {
                    "1": "<new_parameter_name>"
                },
                "<original_variable_name>": {
                    "1": "loop_counter",
                    "2": "<new_variable_name>"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "temp_var2"
                },
                "<variable_name>": {
                    "1": "<new_variable_name>"
                },
                "FUN_08007430": {
                    "1": "do_nothing_loop",
                    "26": "infinite_loop",
                    "3": "run_infinite_loop"
                },
                "PTR_XXXXXX": {
                    "1": "ptr_variable"
                },
                "do": {
                    "1": "execute",
                    "2": "do"
                },
                "original_variable_name_1": {
                    "1": "temporary_variable_1"
                },
                "original_variable_name_2": {
                    "1": "temporary_variable_2"
                },
                "true": {
                    "1": "always_true",
                    "2": "true"
                },
                "while": {
                    "1": "loop_condition"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007436"
            ],
            "code": "\nvoid infinite_loop_08007430(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } loop_condition( condition );\n}\n\n",
            "current_name": "infinite_loop_08007430",
            "entrypoint": "0x08007430",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007430": "infinite_loop_08007430",
                "true": "condition",
                "while": "loop_condition"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007436": {
            "called": [
                "FUN_0800618c",
                "FUN_08007430",
                "FUN_08005cec"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\n\n\nvoid FUNC_08007436(void)\n\n{\n  int iVar1;\n  undefined4 local_4c;\n  undefined4 local_48;\n  undefined4 local_34;\n  undefined4 local_30;\n  undefined4 local_2c;\n  undefined4 local_28;\n  undefined4 local_24;\n  undefined4 local_20;\n  undefined4 local_1c;\n  undefined4 local_18;\n  undefined4 local_14;\n  undefined4 local_10;\n  undefined4 local_c;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  local_4c = 1;\n  local_48 = 1;\n  local_34 = 2;\n  local_30 = 0x400000;\n  local_2c = 8;\n  local_28 = 0x150;\n  local_24 = 2;\n  local_20 = 7;\n  iVar1 = FUN_08005cec(&local_4c);\n  if (iVar1 != 0) {\n    FUN_08007430();\n  }\n  local_1c = 0xf;\n  local_18 = 2;\n  local_14 = 0;\n  local_10 = 0x1400;\n  local_c = 0x1000;\n  iVar1 = FUN_0800618c(&local_1c,5);\n  if (iVar1 != 0) {\n    FUN_08007430();\n  }\n  return;\n}\n\n",
            "current_name": "FUNC_08007436",
            "entrypoint": "0x08007436",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08007436": "FUNC_08007436"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080074c8": {
            "additional_data": {
                "0x1e": {
                    "1": "flag_b",
                    "2": "flag_b_mask"
                },
                "0x3e": {
                    "1": "action_a_param",
                    "2": "flag_a_value",
                    "3": "value_a"
                },
                "0x80": {
                    "1": "flag3_mask",
                    "2": "condition_2_mask"
                },
                "DAT_20000e4c": {
                    "1": "is_condition_1_met",
                    "2": "flag_a",
                    "3": "flag1"
                },
                "DAT_20000e50": {
                    "1": "condition_two",
                    "2": "condition_b",
                    "3": "flag2"
                },
                "FUN_0800195c": {
                    "1": "handle_case_2",
                    "2": "handle_case2"
                },
                "FUN_08003a18": {
                    "1": "execute_condition_two",
                    "2": "handle_flag_c"
                },
                "FUN_08007402": {
                    "1": "handle_flag1",
                    "2": "handle_case_a"
                },
                "FUN_080074c8": {
                    "1": "handle_params",
                    "10": "process_flags",
                    "2": "process_parameters",
                    "7": "process_param"
                },
                "param_1": {
                    "1": "parameters",
                    "15": "flags",
                    "2": "input_param",
                    "3": "param",
                    "4": "input"
                },
                "param_1 & 0x1e": {
                    "1": "are_condition_one_bits_set"
                },
                "param_1 & 0x80": {
                    "1": "is_condition_two_set"
                },
                "param_1 & 1": {
                    "1": "is_flag_one_set"
                }
            },
            "called": [
                "FUN_0800195c",
                "FUN_08007402",
                "FUN_08003a18"
            ],
            "calling": [
                "FUN_08007930"
            ],
            "code": "\nvoid process_flags_080074c8(uint flags)\n\n{\n  if ((flags & 1) != 0) {\n    FUN_08007402(0x3e);\n  }\n  if ((DAT_20000e4c != 0) && ((flags & 0x1e) != 0)) {\n    FUN_0800195c();\n  }\n  if ((DAT_20000e50 != 0) && ((flags & 0x80) != 0)) {\n    FUN_08003a18(flags);\n  }\n  return;\n}\n\n",
            "current_name": "process_flags_080074c8",
            "entrypoint": "0x080074c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080074c8": "process_flags_080074c8",
                "param_1": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007520": {
            "additional_data": {
                "FUN_080073d4": {
                    "1": "handle_value",
                    "2": "call_function"
                },
                "FUN_08007520": {
                    "1": "perform_operation",
                    "12": "check_and_call_function",
                    "2": "handle_parameter",
                    "4": "process_param"
                },
                "param_1": {
                    "1": "parameter",
                    "2": "input_param",
                    "3": "data",
                    "9": "input_value"
                }
            },
            "called": [
                "FUN_080073d4"
            ],
            "calling": [
                "FUN_08007930"
            ],
            "code": "\nvoid check_and_call_function_08007520(uint input_value)\n\n{\n  if ((input_value & 1) != 0) {\n    FUN_080073d4(0x3e);\n  }\n  return;\n}\n\n",
            "current_name": "check_and_call_function_08007520",
            "entrypoint": "0x08007520",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007520": "check_and_call_function_08007520",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007540": {
            "additional_data": {
                "FUN_08001ddc": {
                    "1": "perform_initialization",
                    "2": "cleanup",
                    "7": "finalize_initialization",
                    "9": "cleanup_resources"
                },
                "FUN_08005984": {
                    "1": "configure_settings",
                    "2": "set_default_settings",
                    "3": "set_logging_level",
                    "5": "set_option"
                },
                "FUN_080059b4": {
                    "1": "initialize_subsystem_a",
                    "2": "setup_logging",
                    "3": "initialize_module1",
                    "4": "initialize_subsystem1",
                    "8": "initialize_graphics"
                },
                "FUN_08007436": {
                    "1": "initialize_module4",
                    "2": "initialize_module2",
                    "3": "initialize_audio",
                    "4": "load_configuration",
                    "5": "load_data"
                },
                "FUN_08007540": {
                    "1": "execute_program",
                    "13": "initialize_program",
                    "3": "initialize",
                    "5": "initialize_system"
                },
                "FUN_0800778c": {
                    "1": "initialize_graphics",
                    "2": "initialize_audio",
                    "3": "initialize_database"
                },
                "FUN_080079c0": {
                    "1": "initialize_input",
                    "2": "initialize_database",
                    "3": "initialize_audio"
                },
                "FUN_08007e08": {
                    "1": "initialize_database",
                    "2": "initialize_input",
                    "3": "initialize_graphics",
                    "4": "initialize_network"
                },
                "FUN_08008190": {
                    "1": "load_settings",
                    "2": "initialize_audio"
                }
            },
            "called": [
                "FUN_080059b4",
                "FUN_08007e08",
                "FUN_0800778c",
                "FUN_08005984",
                "FUN_08007436",
                "FUN_08008190",
                "FUN_080079c0",
                "FUN_08001ddc"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nundefined4 initialize_program_08007540(void)\n\n{\n  FUN_080059b4();\n  FUN_08007436();\n  FUN_0800778c();\n  FUN_08007e08();\n  FUN_080079c0();\n  FUN_08008190();\n  FUN_08005984(0);\n  FUN_08001ddc();\n  return 0;\n}\n\n",
            "current_name": "initialize_program_08007540",
            "entrypoint": "0x08007540",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007540": "initialize_program_08007540"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800756c": {
            "additional_data": {
                "0x24003010": {
                    "1": "default_configuration_value"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "FUN_0800756c": {
                    "1": "initialize_data",
                    "11": "initialize_system",
                    "2": "initialize_settings",
                    "3": "initialize_memory",
                    "8": "initialize_hardware"
                },
                "_DAT_40023800": {
                    "1": "status_register",
                    "2": "system_flags",
                    "3": "config_register",
                    "8": "control_register"
                },
                "_DAT_40023804": {
                    "1": "gpiod_cfg",
                    "2": "gpio_base_address",
                    "6": "base_address"
                },
                "_DAT_40023808": {
                    "1": "memory_value1"
                },
                "_DAT_4002380c": {
                    "1": "register4"
                },
                "_DAT_e000ed08": {
                    "1": "enable_register",
                    "2": "interrupt_control",
                    "3": "interrupt_control_register",
                    "5": "interrupt_enable_register"
                },
                "return": {
                    "1": "void"
                }
            },
            "called": [],
            "calling": [
                "entry"
            ],
            "code": "\n\n\nvoid initialize_system_0800756c(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  void;\n}\n\n",
            "current_name": "initialize_system_0800756c",
            "entrypoint": "0x0800756c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800756c": "initialize_system_0800756c",
                "return": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080076c8": {
            "additional_data": {
                "(((int)param_1 >> 4) * 0x400 + 0x40020014)": {
                    "1": "target_location"
                },
                "(param_1 & 0xf)": {
                    "2": "bit_position"
                },
                "*((int)param_1 >> 4) * 0x400 + 0x40020014": {
                    "1": "memory_address"
                },
                "*(uint *)(((int)param_1 >> 4) * 0x400 + 0x40020014)": {
                    "1": "target",
                    "2": "memory_address"
                },
                "*(uint *)(((int)param_1 >> 4) * 0x400 + 0x40020014) ^ 1 << (param_1 & 0xf)": {
                    "1": "updated_target"
                },
                "*(uint *)(((int)value >> 4) * 0x400 + 0x40020014)": {
                    "1": "memory_address"
                },
                "*(uint *)targetLocation": {
                    "1": "target_value"
                },
                "->": {
                    "1": "output"
                },
                "0x40020014": {
                    "1": "memory_address"
                },
                "0xf": {
                    "1": "bit_mask"
                },
                "<variable_name>": {
                    "1": "<new_variable_name>"
                },
                "FUN_080076c8": {
                    "1": "update_bits_in_memory",
                    "2": "update_bit_in_array",
                    "4": "toggle_bit",
                    "5": "update_bit",
                    "6": "toggle_bit_in_memory"
                },
                "^(1 << (param_1 & 0xf))": {
                    "1": "bit_to_toggle"
                },
                "^(param_1 & 0xf)": {
                    "1": "bit_position"
                },
                "int": {
                    "1": "index"
                },
                "param_1": {
                    "1": "position",
                    "13": "input",
                    "2": "number",
                    "3": "index",
                    "5": "input_value"
                },
                "param_1 & 0xf": {
                    "4": "bit_index",
                    "8": "bit_position"
                },
                "param_1 >> 4": {
                    "1": "block_index"
                },
                "uint": {
                    "1": "unsigned_integer"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007756"
            ],
            "code": "\nvoid toggle_bit_in_memory_080076c8(unsigned_integer input)\n\n{\n  *(unsigned_integer *)(((index)input >> 4) * 0x400 + 0x40020014) =\n       *(unsigned_integer *)(((index)input >> 4) * 0x400 + 0x40020014) ^ 1 << (input & 0xf);\n  return;\n}\n\n",
            "current_name": "toggle_bit_in_memory_080076c8",
            "entrypoint": "0x080076c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080076c8": "toggle_bit_in_memory_080076c8",
                "int": "index",
                "param_1": "input",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007756": {
            "additional_data": {
                "0x1ff": {
                    "1": "flag_mask"
                },
                "0x3c": {
                    "1": "action1_param"
                },
                "0xf": {
                    "1": "another_flag_mask"
                },
                "F: 08005a68": {
                    "1": "perform_additional_tasks"
                },
                "F: 08005a84": {
                    "1": "get_flag_value"
                },
                "F: 080076c8": {
                    "1": "execute_operation"
                },
                "F: 08007756": {
                    "1": "check_and_execute_operations"
                },
                "F: 08007930": {
                    "1": "execute_secondary_operation"
                },
                "FUN_08005a68": {
                    "1": "perform_initialization",
                    "4": "perform_additional_tasks",
                    "7": "perform_cleanup"
                },
                "FUN_08005a84": {
                    "1": "get_status",
                    "2": "get_masked_value",
                    "3": "get_flags",
                    "7": "get_flag_value"
                },
                "FUN_080076c8": {
                    "1": "set_register_value",
                    "2": "execute_function",
                    "3": "perform_action"
                },
                "FUN_08007756": {
                    "1": "check_and_execute_tasks",
                    "2": "check_and_perform_actions",
                    "5": "check_and_execute_actions",
                    "6": "check_and_execute",
                    "8": "check_and_execute_operations"
                },
                "FUN_08007930": {
                    "1": "execute_routine_tasks",
                    "2": "execute_task"
                },
                "param_1": {
                    "1": "status"
                },
                "uVar1": {
                    "1": "operation_flags",
                    "12": "result"
                }
            },
            "called": [
                "FUN_08005a68",
                "FUN_08007930",
                "FUN_08005a84",
                "FUN_080076c8"
            ],
            "calling": [],
            "code": "\nvoid check_and_execute_operations_08007756(void)\n\n{\n  uint result;\n  \n  result = FUN_08005a84();\n  if ((result & 0x1ff) == 0) {\n    FUN_080076c8(0x3c);\n  }\n  if ((result & 0xf) == 0) {\n    FUN_08007930();\n  }\n  FUN_08005a68();\n  return;\n}\n\n",
            "current_name": "check_and_execute_operations_08007756",
            "entrypoint": "0x08007756",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007756": "check_and_execute_operations_08007756",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800778c": {
            "additional_data": {
                "FUN_08006e88": {
                    "1": "initialize_device"
                },
                "FUN_0800733e": {
                    "1": "apply_config"
                },
                "FUN_0800778c": {
                    "1": "initialize_and_configure_module",
                    "2": "initialize_bits_and_call_functions",
                    "3": "initialize_flags",
                    "4": "initialize_registers"
                },
                "_DAT_40023830": {
                    "1": "register"
                },
                "iVar1": {
                    "1": "temp_var",
                    "15": "offset",
                    "6": "index"
                },
                "local_10": {
                    "1": "config_data",
                    "2": "device_data",
                    "5": "address",
                    "9": "pointer"
                },
                "local_14": {
                    "1": "value_d",
                    "12": "value4",
                    "2": "address4",
                    "7": "data4"
                },
                "local_18": {
                    "1": "variable3",
                    "12": "value3",
                    "2": "address3",
                    "7": "data3"
                },
                "local_1c": {
                    "1": "variable_2",
                    "12": "value2",
                    "2": "address2",
                    "7": "data2"
                },
                "local_20": {
                    "1": "variable1",
                    "12": "value1",
                    "2": "address1",
                    "7": "data1"
                },
                "local_24": {
                    "1": "shifted_bit",
                    "16": "bit_mask",
                    "2": "bitmask"
                },
                "local_c": {
                    "1": "current_index",
                    "15": "counter",
                    "2": "index",
                    "4": "device_index",
                    "6": "loop_counter"
                }
            },
            "called": [
                "FUN_08006e88",
                "FUN_0800733e"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\n\n\nvoid initialize_registers_0800778c(void)\n\n{\n  int offset;\n  int bit_mask;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  uint *pointer;\n  uint counter;\n  \n  for (counter = 0; counter < 0x11; counter = counter + 1) {\n    offset = counter * 0x18;\n    pointer = (uint *)(&DAT_0800bcbc + offset);\n    _DAT_40023830 = _DAT_40023830 | 1 << (*pointer >> 4 & 0xff);\n    bit_mask = 1 << (*pointer & 0xf);\n    value1 = *(undefined4 *)(&DAT_0800bcc0 + offset);\n    value2 = *(undefined4 *)(&DAT_0800bcc4 + offset);\n    value3 = *(undefined4 *)(&DAT_0800bcc8 + offset);\n    value4 = *(undefined4 *)(&DAT_0800bccc + offset);\n    FUN_08006e88(((*pointer >> 4) + 0x100080) * 0x400,&bit_mask);\n    if (-1 < (int)pointer[5]) {\n      FUN_0800733e(((*pointer >> 4) + 0x100080) * 0x400,1 << (*pointer & 0xf) & 0xffff,\n                   pointer[5] & 0xff);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "initialize_registers_0800778c",
            "entrypoint": "0x0800778c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800778c": "initialize_registers_0800778c",
                "iVar1": "offset",
                "local_10": "pointer",
                "local_14": "value4",
                "local_18": "value3",
                "local_1c": "value2",
                "local_20": "value1",
                "local_24": "bit_mask",
                "local_c": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007854": {
            "additional_data": {
                "&": {
                    "1": "address-of"
                },
                "(param_1 & 0xf)": {
                    "2": "bit_position",
                    "3": "bit_offset"
                },
                "(word & 0xf)": {
                    "1": "bit_position"
                },
                "*(((int)param_1 >> 4) * 0x400 + 0x40020010)": {
                    "1": "address"
                },
                "*(((int)word >> 4) * 0x400 + 0x40020010)": {
                    "1": "word_address"
                },
                "*(uint *)(((int)param_1 >> 4) * 0x400 + 0x40020010)": {
                    "1": "ptr_value",
                    "3": "memory_address"
                },
                "0x400": {
                    "1": "constant_1"
                },
                "0x40020010": {
                    "1": "memory_base"
                },
                "0xf": {
                    "1": "bit_mask"
                },
                "1": {
                    "2": "bit_value"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "FUN_08007854": {
                    "1": "get_bit_from_uint",
                    "2": "get_bit",
                    "3": "check_bit_value",
                    "6": "get_bit_value",
                    "7": "check_bit"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "PTR_40020010": {
                    "1": "data_ptr"
                },
                "data_ptr": {
                    "1": "data_ptr"
                },
                "int": {
                    "1": "value_shifted"
                },
                "param_1": {
                    "1": "word",
                    "17": "input_value",
                    "2": "input_number",
                    "9": "input"
                },
                "param_1 & 0xf": {
                    "3": "bit_mask"
                },
                "param_2": {
                    "1": "new_input"
                },
                "uint": {
                    "1": "unsigned_integer"
                },
                "value": {
                    "1": "bit_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007884"
            ],
            "code": "\nunsigned_integer check_bit_08007854(unsigned_integer input_value)\n\n{\n  return *(unsigned_integer *)(((value_shifted)input_value >> 4) * 0x400 + 0x40020010) >> (input_value address-of 0xf) address-of 1;\n}\n\n",
            "current_name": "check_bit_08007854",
            "entrypoint": "0x08007854",
            "imported": false,
            "improved": true,
            "renaming": {
                "&": "address-of",
                "FUN_08007854": "check_bit_08007854",
                "int": "value_shifted",
                "param_1": "input_value",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007884": {
            "additional_data": {
                "FUN_08007854": {
                    "1": "get_bit_value",
                    "4": "get_value"
                },
                "FUN_08007884": {
                    "1": "get_flag_value",
                    "2": "calculate_combined_value",
                    "4": "combine_results",
                    "6": "combine_values",
                    "7": "combine_bits"
                },
                "iVar1": {
                    "1": "result_1",
                    "10": "value1",
                    "2": "value0x36",
                    "3": "bit0"
                },
                "iVar2": {
                    "1": "result_2",
                    "10": "value2",
                    "2": "result2",
                    "3": "value_0x37"
                },
                "iVar3": {
                    "1": "multiplier3",
                    "10": "value3",
                    "2": "bit3",
                    "3": "result_0x38"
                },
                "iVar4": {
                    "1": "fourth_value",
                    "10": "value4",
                    "2": "bit4",
                    "3": "result_0x39"
                },
                "iVar5": {
                    "1": "multiplier5",
                    "10": "value5",
                    "2": "value0xf",
                    "3": "bit4"
                },
                "param_1": {
                    "1": "binary_value",
                    "2": "bit_value",
                    "3": "value"
                },
                "uVar6": {
                    "1": "result_6",
                    "2": "bit0",
                    "3": "value6",
                    "8": "result"
                }
            },
            "called": [
                "FUN_08007854"
            ],
            "calling": [
                "FUN_08007930"
            ],
            "code": "\nuint combine_bits_08007884(void)\n\n{\n  int value1;\n  int value2;\n  int value3;\n  int value4;\n  int value5;\n  uint result;\n  \n  value1 = FUN_08007854(0x36);\n  value2 = FUN_08007854(0x37);\n  value3 = FUN_08007854(0x38);\n  value4 = FUN_08007854(0x39);\n  value5 = FUN_08007854(0xf);\n  result = FUN_08007854(0);\n  return result | value1 << 4 | value2 << 3 | value3 << 2 | value4 << 1 | value5 << 7;\n}\n\n",
            "current_name": "combine_bits_08007884",
            "entrypoint": "0x08007884",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007884": "combine_bits_08007884",
                "iVar1": "value1",
                "iVar2": "value2",
                "iVar3": "value3",
                "iVar4": "value4",
                "iVar5": "value5",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080078f4": {
            "additional_data": {
                "FUN_080078f4": {
                    "1": "combine_uint_values",
                    "2": "combine_and_or",
                    "3": "calculate_combined_value",
                    "4": "calculate_sum",
                    "5": "calculate_bitwise_or",
                    "6": "combine_bits",
                    "7": "combine_values"
                },
                "local_10": {
                    "1": "iteration_count",
                    "2": "counter",
                    "26": "index"
                },
                "local_c": {
                    "1": "bitwise_or_result",
                    "12": "combined_value",
                    "4": "combined_result",
                    "9": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007930",
                "FUN_08001994"
            ],
            "code": "\nuint combine_values_080078f4(void)\n\n{\n  int index;\n  uint combined_value;\n  \n  combined_value = 0;\n  for (index = 0; index < 4; index = index + 1) {\n    combined_value = *(uint *)(&DAT_20000e54 + index * 4) | combined_value;\n  }\n  return combined_value;\n}\n\n",
            "current_name": "combine_values_080078f4",
            "entrypoint": "0x080078f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080078f4": "combine_values_080078f4",
                "local_10": "index",
                "local_c": "combined_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007930": {
            "additional_data": {
                "DAT_20000e64": {
                    "1": "previous_value"
                },
                "DAT_20000e68": {
                    "1": "data_index"
                },
                "FUN_080074c8": {
                    "1": "perform_complement",
                    "2": "handle_mismatch"
                },
                "FUN_08007520": {
                    "1": "apply_additional_mask"
                },
                "FUN_08007884": {
                    "1": "calculate_new_value",
                    "3": "calculate_value",
                    "5": "get_new_value"
                },
                "FUN_080078f4": {
                    "1": "get_latest_value",
                    "2": "get_updated_value",
                    "5": "get_current_value"
                },
                "FUN_08007930": {
                    "1": "update_variable",
                    "11": "process_data",
                    "17": "update_data"
                },
                "iVar1": {
                    "1": "current_value",
                    "2": "data_index",
                    "3": "previous_index",
                    "6": "index",
                    "7": "current_index"
                },
                "uVar2": {
                    "1": "current_value",
                    "15": "previous_value",
                    "2": "original_value",
                    "3": "previous_data"
                },
                "uVar3": {
                    "1": "new_status",
                    "12": "new_value",
                    "3": "new_data",
                    "5": "result"
                },
                "uVar4": {
                    "1": "new_data",
                    "12": "current_value",
                    "2": "updated_value",
                    "5": "new_value"
                },
                "uVar5": {
                    "1": "status_change",
                    "16": "changed_bits",
                    "2": "difference"
                }
            },
            "called": [
                "FUN_080074c8",
                "FUN_080078f4",
                "FUN_08007884",
                "FUN_08007520"
            ],
            "calling": [
                "FUN_08007756"
            ],
            "code": "\nvoid update_data_08007930(void)\n\n{\n  int current_index;\n  uint previous_value;\n  undefined4 new_value;\n  uint current_value;\n  uint changed_bits;\n  \n  current_index = DAT_20000e68;\n  previous_value = DAT_20000e64;\n  if (DAT_20000e6c != 0) {\n    new_value = FUN_08007884();\n    *(undefined4 *)(&DAT_20000e54 + current_index * 4) = new_value;\n    if (DAT_20000e68 == 3) {\n      DAT_20000e68 = 0;\n    }\n    else {\n      DAT_20000e68 = DAT_20000e68 + 1;\n    }\n    current_value = FUN_080078f4();\n    previous_value = DAT_20000e64;\n    if (current_value != DAT_20000e64) {\n      changed_bits = ~current_value & DAT_20000e64;\n      if ((~DAT_20000e64 & current_value) != 0) {\n        FUN_080074c8(~DAT_20000e64 & current_value);\n      }\n      previous_value = current_value;\n      if (changed_bits != 0) {\n        FUN_08007520(changed_bits);\n      }\n    }\n  }\n  DAT_20000e64 = previous_value;\n  return;\n}\n\n",
            "current_name": "update_data_08007930",
            "entrypoint": "0x08007930",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007930": "update_data_08007930",
                "iVar1": "current_index",
                "uVar2": "previous_value",
                "uVar3": "new_value",
                "uVar4": "current_value",
                "uVar5": "changed_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080079c0": {
            "additional_data": {
                "DAT_20000e54": {
                    "1": "destination_buffer",
                    "2": "data_array"
                },
                "DAT_20000e6c": {
                    "1": "data_flag",
                    "7": "flag"
                },
                "FUN_080079c0": {
                    "1": "initialize_data_structure",
                    "29": "initialize_data"
                },
                "FUN_0800b430": {
                    "1": "copy_data_to_memory",
                    "11": "copy_data",
                    "2": "initialize_memory",
                    "4": "copy_memory"
                },
                "dataPointer": {
                    "1": "new_data_pointer"
                },
                "flag": {
                    "1": "is_set"
                },
                "param": {
                    "1": "param"
                },
                "param_1": {
                    "1": "source",
                    "11": "data_pointer",
                    "3": "dest",
                    "7": "destination"
                },
                "param_2": {
                    "1": "initialize_value",
                    "2": "start_value",
                    "3": "param",
                    "4": "flag",
                    "5": "value"
                },
                "param_3": {
                    "1": "block_size",
                    "19": "size",
                    "2": "data_length",
                    "7": "length"
                },
                "size": {
                    "1": "size"
                }
            },
            "called": [
                "FUN_0800b430"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\nvoid initialize_data_080079c0(void)\n\n{\n  FUN_0800b430(&DAT_20000e54,0,0x18);\n  DAT_20000e6c = 1;\n  return;\n}\n\n",
            "current_name": "initialize_data_080079c0",
            "entrypoint": "0x080079c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080079c0": "initialize_data_080079c0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080079e0": {
            "additional_data": {
                "(uint)(int)(char)param_1 >> 5": {
                    "1": "shifted_value"
                },
                "*(((uint)(int)(char)param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "address"
                },
                "*((uint *)(byteToSet >> 5) * 4 + -0x1fff1f00)": {
                    "1": "memory_address"
                },
                "*((uint *)(int *)(char)byte_val >> 5) * 4 + -0x1fff1f00": {
                    "1": "ptr_offset"
                },
                "*(int *)(((uint)(int)(char)param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "bitmask",
                    "2": "target_address",
                    "3": "memory_address"
                },
                "-0x1fff1f00": {
                    "1": "memory_address"
                },
                "1 << (byte_val & 0x1f)": {
                    "1": "bit_to_set"
                },
                "1 << (param_1 & 0x1f)": {
                    "1": "bit_shifted_value",
                    "2": "bit_to_set",
                    "3": "bit_mask",
                    "4": "bit_value"
                },
                "1 << bitPosition": {
                    "1": "bit_mask"
                },
                "<no_changes>": {
                    "1": "<no_changes>"
                },
                "FUN_080079e0": {
                    "1": "set_bit_in_array",
                    "13": "set_bit_in_memory",
                    "2": "set_bit_at_position",
                    "3": "set_bit_at_index",
                    "9": "set_bit"
                },
                "byte": {
                    "1": "input_byte"
                },
                "param_1": {
                    "1": "byte_val",
                    "17": "input_byte",
                    "2": "bit_index",
                    "3": "byte_to_set",
                    "4": "byte_value"
                },
                "param_1 & 0x1f": {
                    "2": "bit_position"
                },
                "param_1 >> 5": {
                    "1": "shift_amount"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007a70"
            ],
            "code": "\nvoid set_bit_in_memory_080079e0(input_byte input_byte)\n\n{\n  *(int *)(((uint)(int)(char)input_byte >> 5) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_080079e0",
            "entrypoint": "0x080079e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080079e0": "set_bit_in_memory_080079e0",
                "byte": "input_byte",
                "param_1": "input_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007a10": {
            "additional_data": {
                "&DAT_40000800": {
                    "1": "data_address3",
                    "2": "dat_40000800"
                },
                "0x40000000": {
                    "1": "mem_address1"
                },
                "0x40000400": {
                    "1": "mem_address2"
                },
                "FUN_08007a10": {
                    "1": "update_permissions",
                    "2": "set_flag_based_on_param",
                    "3": "update_flags",
                    "7": "update_flag"
                },
                "_DAT_40023840": {
                    "1": "flag_value",
                    "2": "flag_register",
                    "6": "flags",
                    "8": "flag"
                },
                "param_1": {
                    "1": "source_pointer",
                    "3": "input_param",
                    "4": "param",
                    "5": "address",
                    "6": "input"
                },
                "undefined": {
                    "1": "u"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007d08",
                "FUN_08007ad0"
            ],
            "code": "\n\n\nvoid update_flag_08007a10(void *input)\n\n{\n  if (input == (void *)0x40000000) {\n    _DAT_40023840 = _DAT_40023840 | 1;\n  }\n  else if (input == (void *)0x40000400) {\n    _DAT_40023840 = _DAT_40023840 | 2;\n  }\n  else if (input == &DAT_40000800) {\n    _DAT_40023840 = _DAT_40023840 | 4;\n  }\n  return;\n}\n\n",
            "current_name": "update_flag_08007a10",
            "entrypoint": "0x08007a10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007a10": "update_flag_08007a10",
                "param_1": "input",
                "undefined": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007a70": {
            "additional_data": {
                "FUN_08006cf6": {
                    "1": "perform_operation"
                },
                "FUN_080079e0": {
                    "1": "perform_action1"
                },
                "FUN_08007a70": {
                    "1": "classify_address",
                    "13": "process_param",
                    "2": "process_input",
                    "6": "process_parameter"
                },
                "local_c": {
                    "1": "classification",
                    "2": "new_value",
                    "3": "result",
                    "7": "value"
                },
                "param_1": {
                    "1": "input_param",
                    "12": "param",
                    "3": "address",
                    "4": "input_pointer",
                    "5": "parameter"
                },
                "param_2": {
                    "1": "arg_1",
                    "14": "param2",
                    "3": "param_2",
                    "7": "value1"
                },
                "param_3": {
                    "1": "arg2",
                    "14": "param3",
                    "3": "param_3",
                    "7": "value2"
                }
            },
            "called": [
                "FUN_080079e0",
                "FUN_08006cf6"
            ],
            "calling": [
                "FUN_08007ad0"
            ],
            "code": "\nvoid process_param_08007a70(undefined *param,undefined4 param2,undefined4 param3)\n\n{\n  undefined value;\n  \n  if (param == (undefined *)0x40000000) {\n    value = 0x1c;\n  }\n  else if (param == (undefined *)0x40000400) {\n    value = 0x1d;\n  }\n  else {\n    if (param != &DAT_40000800) {\n      return;\n    }\n    value = 0x1e;\n  }\n  FUN_08006cf6(value,param2,param3);\n  FUN_080079e0(value);\n  return;\n}\n\n",
            "current_name": "process_param_08007a70",
            "entrypoint": "0x08007a70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007a70": "process_param_08007a70",
                "local_c": "value",
                "param_1": "param",
                "param_2": "param2",
                "param_3": "param3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007ad0": {
            "additional_data": {
                "0": {
                    "1": "param1_value"
                },
                "0x40000000": {
                    "1": "memory_address"
                },
                "DAT_20000000": {
                    "1": "data_value"
                },
                "FUN_08007a10": {
                    "1": "set_initial_memory_values",
                    "3": "set_memory_address",
                    "8": "set_memory_value",
                    "9": "set_memory"
                },
                "FUN_08007a70": {
                    "1": "copy_data",
                    "2": "initialize_memory_with_data",
                    "4": "initialize_memory_with_values"
                },
                "FUN_08007ad0": {
                    "2": "initialize_registers",
                    "23": "initialize_memory",
                    "6": "initialize_data"
                },
                "_DAT_40000000": {
                    "1": "data0"
                },
                "_DAT_40000004": {
                    "1": "data1"
                },
                "_DAT_40000008": {
                    "1": "data2"
                },
                "_DAT_4000000c": {
                    "1": "data3"
                },
                "_DAT_40000010": {
                    "1": "data4"
                },
                "_DAT_40000028": {
                    "1": "number_of_iterations"
                },
                "_DAT_4000002c": {
                    "1": "data12"
                },
                "_DAT_40000034": {
                    "1": "data13"
                },
                "_DAT_40000038": {
                    "1": "data14"
                },
                "_DAT_4000003c": {
                    "1": "data15"
                },
                "_DAT_40000040": {
                    "1": "data16"
                },
                "_DAT_40000048": {
                    "1": "data17"
                },
                "_DAT_4000004c": {
                    "1": "data18"
                },
                "param_1": {
                    "1": "memory_pointer",
                    "2": "memory_block",
                    "5": "memory_address"
                },
                "param_2": {
                    "1": "data_offset",
                    "2": "value1",
                    "3": "param2"
                },
                "param_3": {
                    "1": "parameter_2",
                    "2": "value2",
                    "3": "param3"
                }
            },
            "called": [
                "FUN_08007a10",
                "FUN_08007a70"
            ],
            "calling": [
                "FUN_08007e08"
            ],
            "code": "\n\n\nvoid initialize_memory_08007ad0(void)\n\n{\n  FUN_08007a10(0x40000000);\n  _DAT_40000000 = 0;\n  _DAT_40000004 = 0;\n  _DAT_40000008 = 0;\n  _DAT_4000000c = 0;\n  _DAT_40000010 = 0;\n  _DAT_40000018 = 0;\n  _DAT_4000001c = 0;\n  _DAT_40000020 = 0;\n  _DAT_40000024 = 0;\n  _DAT_40000028 = DAT_20000000 / 42000000 - 1;\n  _DAT_4000002c = 0;\n  _DAT_40000034 = 0;\n  _DAT_40000038 = 0;\n  _DAT_4000003c = 0;\n  _DAT_40000040 = 0;\n  _DAT_40000048 = 0;\n  _DAT_4000004c = 0;\n  FUN_08007a70(0x40000000,0,0);\n  return;\n}\n\n",
            "current_name": "initialize_memory_08007ad0",
            "entrypoint": "0x08007ad0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007ad0": "initialize_memory_08007ad0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007b70": {
            "additional_data": {
                "FUN_08007b70": {
                    "1": "set_flags_based_on_conditions",
                    "2": "initialize_flags",
                    "3": "set_flags_and_values",
                    "4": "configure_flags",
                    "5": "update_flags",
                    "9": "set_flags"
                },
                "F_08007b70": {
                    "1": "configure_flags"
                },
                "_DAT_40000000": {
                    "1": "register2"
                },
                "_DAT_4000000c": {
                    "1": "result1"
                },
                "_DAT_40000034": {
                    "1": "is_condition1_met",
                    "13": "condition1",
                    "3": "flag1"
                },
                "_DAT_40000038": {
                    "1": "var2",
                    "13": "condition2",
                    "3": "flag2"
                },
                "local_c": {
                    "1": "status",
                    "23": "flags",
                    "3": "flag_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005790"
            ],
            "code": "\n\n\nvoid set_flags_08007b70(void)\n\n{\n  uint flags;\n  \n  flags = 1;\n  if (_DAT_40000034 != 0) {\n    flags = 3;\n  }\n  if (_DAT_40000038 != 0) {\n    flags = flags | 4;\n  }\n  _DAT_4000000c = _DAT_4000000c | flags;\n  _DAT_40000000 = _DAT_40000000 | 1;\n  return;\n}\n\n",
            "current_name": "set_flags_08007b70",
            "entrypoint": "0x08007b70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007b70": "set_flags_08007b70",
                "local_c": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007bc2": {
            "additional_data": {
                "": {
                    "2": ""
                },
                "FUN_08007bc2": {
                    "1": "update_data_registers",
                    "20": "clear_flags",
                    "5": "clear_bits"
                },
                "_": {
                    "1": "_"
                },
                "_DAT_40000000": {
                    "1": "flags1",
                    "2": "flag_a",
                    "4": "data_register1",
                    "5": "flags_register",
                    "8": "flag1"
                },
                "_DAT_4000000c": {
                    "1": "flags2",
                    "2": "value2",
                    "4": "data_register2",
                    "8": "flag2"
                }
            },
            "called": [],
            "calling": [
                "FUN_080057e4"
            ],
            "code": "\n\n\nvoid clear_flags_08007bc2(void)\n\n{\n  _DAT_40000000 = _DAT_40000000 & 0xfffffffe;\n  _DAT_4000000c = _DAT_4000000c & 0xfffffff8;\n  return;\n}\n\n",
            "current_name": "clear_flags_08007bc2",
            "entrypoint": "0x08007bc2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007bc2": "clear_flags_08007bc2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007bf0": {
            "additional_data": {
                "FUN_08007bf0": {
                    "1": "update_parameters",
                    "11": "update_data",
                    "2": "update_param_and_limit",
                    "3": "update_minimum_value",
                    "6": "update_min_value"
                },
                "_DAT_40000024": {
                    "1": "current_smallest_value",
                    "10": "min_value",
                    "2": "current_min_value",
                    "7": "minimum_value"
                },
                "_DAT_4000002c": {
                    "1": "current_param_value",
                    "11": "current_value",
                    "7": "current_min_value"
                },
                "param_1": {
                    "1": "new_min_value",
                    "2": "value",
                    "21": "new_value",
                    "3": "new_param"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005324"
            ],
            "code": "\n\n\nvoid update_data_08007bf0(uint new_value)\n\n{\n  _DAT_4000002c = new_value;\n  if (new_value <= _DAT_40000024) {\n    _DAT_40000024 = new_value;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_08007bf0",
            "entrypoint": "0x08007bf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007bf0": "update_data_08007bf0",
                "param_1": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007c40": {
            "additional_data": {
                "FUN_08007c40": {
                    "1": "set_data",
                    "11": "set_global_variable",
                    "3": "set_global_parameter",
                    "5": "set_global_value"
                },
                "_DAT_40000034": {
                    "1": "param_initialized",
                    "12": "global_variable",
                    "2": "global_value"
                },
                "param_1": {
                    "1": "input_param",
                    "11": "new_value",
                    "13": "value",
                    "4": "data"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005790"
            ],
            "code": "\n\n\nvoid set_global_variable_08007c40(undefined4 value)\n\n{\n  _DAT_40000034 = value;\n  return;\n}\n\n",
            "current_name": "set_global_variable_08007c40",
            "entrypoint": "0x08007c40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007c40": "set_global_variable_08007c40",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007c5e": {
            "additional_data": {
                "DAT_40000038": {
                    "1": "global_variable"
                },
                "FUN_08007c5e": {
                    "1": "set_value_to_variable",
                    "2": "initialize_data",
                    "4": "set_data",
                    "7": "set_global_variable"
                },
                "_DAT_40000038": {
                    "1": "new_data",
                    "2": "global_parameter",
                    "4": "data_ptr",
                    "5": "global_variable"
                },
                "param_1": {
                    "1": "param",
                    "13": "value",
                    "5": "data",
                    "6": "new_value"
                },
                "param_2": {
                    "1": "new_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005790"
            ],
            "code": "\n\n\nvoid set_global_variable_08007c5e(undefined4 value)\n\n{\n  _DAT_40000038 = value;\n  return;\n}\n\n",
            "current_name": "set_global_variable_08007c5e",
            "entrypoint": "0x08007c5e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007c5e": "set_global_variable_08007c5e",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007c7c": {
            "additional_data": {
                "FUN_080053a0": {
                    "1": "perform_operation_3",
                    "2": "process_flag_one"
                },
                "FUN_08005760": {
                    "1": "process_flag_3",
                    "2": "execute_function_3"
                },
                "FUN_08005778": {
                    "1": "execute_if_bit_1_set",
                    "2": "execute_function_2"
                },
                "FUN_08007c7c": {
                    "1": "process_flags",
                    "10": "check_and_call_functions",
                    "2": "update_data",
                    "4": "check_and_execute_functions"
                },
                "_DAT_4000000c": {
                    "1": "register2",
                    "2": "condition_register",
                    "3": "register_2",
                    "5": "control_register"
                },
                "_DAT_40000010": {
                    "1": "data_reg_1",
                    "2": "flags_register",
                    "3": "register_1",
                    "4": "status_register"
                }
            },
            "called": [
                "FUN_080053a0",
                "FUN_08005778",
                "FUN_08005760"
            ],
            "calling": [],
            "code": "\n\n\nvoid check_and_call_functions_08007c7c(void)\n\n{\n  if (((_DAT_40000010 & 2) != 0) && ((_DAT_4000000c & 2) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffd;\n    FUN_08005778();\n  }\n  if (((_DAT_40000010 & 4) != 0) && ((_DAT_4000000c & 4) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffb;\n    FUN_08005760();\n  }\n  if (((_DAT_40000010 & 1) != 0) && ((_DAT_4000000c & 1) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffe;\n    FUN_080053a0();\n  }\n  return;\n}\n\n",
            "current_name": "check_and_call_functions_08007c7c",
            "entrypoint": "0x08007c7c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007c7c": "check_and_call_functions_08007c7c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007d08": {
            "additional_data": {
                "0": {
                    "1": "value2"
                },
                "0x6800": {
                    "1": "value3"
                },
                "0x80": {
                    "1": "value1"
                },
                "100": {
                    "1": "value4"
                },
                "199": {
                    "1": "constant"
                },
                "4800000": {
                    "1": "divider"
                },
                "DAT_20000000": {
                    "1": "data_variable2",
                    "4": "clock_frequency"
                },
                "DAT_40000800": {
                    "1": "device_pointer"
                },
                "DAT_40000818": {
                    "1": "register_2"
                },
                "FUN_08007a10": {
                    "1": "initialize_sub_function",
                    "2": "configure_peripheral",
                    "7": "initialize_memory"
                },
                "FUN_08007d08": {
                    "1": "initialize_data",
                    "2": "initialize_peripheral",
                    "3": "initialize_hardware_settings",
                    "5": "initialize_settings",
                    "9": "initialize_registers"
                },
                "_DAT_40000800": {
                    "1": "peripheral_register1",
                    "2": "register1"
                },
                "_DAT_40000804": {
                    "1": "register2"
                },
                "_DAT_40000808": {
                    "1": "unused2"
                },
                "_DAT_4000080c": {
                    "1": "register_4"
                },
                "_DAT_40000810": {
                    "1": "peripheral_register5"
                },
                "_DAT_40000814": {
                    "1": "register2",
                    "3": "enable_flag",
                    "7": "flag"
                },
                "_DAT_40000818": {
                    "1": "register2"
                },
                "_DAT_4000081c": {
                    "1": "peripheral_register7"
                },
                "_DAT_40000820": {
                    "1": "device_value8"
                },
                "_DAT_40000824": {
                    "1": "unused7"
                },
                "_DAT_40000828": {
                    "1": "prescaler_value",
                    "2": "prescaler"
                },
                "_DAT_4000082c": {
                    "1": "register5",
                    "2": "reload_value",
                    "3": "constant_value"
                },
                "_DAT_40000834": {
                    "1": "device_register12"
                },
                "_DAT_40000838": {
                    "1": "register5"
                },
                "_DAT_4000083c": {
                    "1": "device_setting14"
                },
                "_DAT_40000840": {
                    "1": "constant4"
                },
                "_DAT_40000848": {
                    "1": "setting16"
                },
                "_DAT_4000084c": {
                    "1": "device_value17"
                },
                "param_1": {
                    "1": "register_array",
                    "2": "peripheral_config",
                    "3": "memory_address",
                    "4": "memory_pointer"
                },
                "register_1": {
                    "1": "base_address"
                },
                "register_2": {
                    "1": "initial_value"
                }
            },
            "called": [
                "FUN_08007a10"
            ],
            "calling": [
                "FUN_08007e08"
            ],
            "code": "\n\n\nvoid initialize_registers_08007d08(void)\n\n{\n  FUN_08007a10(&DAT_40000800);\n  _DAT_40000800 = 0x80;\n  _DAT_40000804 = 0;\n  _DAT_40000808 = 0;\n  _DAT_4000080c = 0;\n  _DAT_40000810 = 0;\n  _DAT_40000818 = 0x6800;\n  _DAT_4000081c = 0;\n  _DAT_40000820 = 0;\n  _DAT_40000824 = 0;\n  _DAT_40000828 = DAT_20000000 / 4800000 - 1;\n  _DAT_4000082c = 199;\n  _DAT_40000834 = 0;\n  _DAT_40000838 = 100;\n  _DAT_4000083c = 0;\n  _DAT_40000840 = 0;\n  _DAT_40000848 = 0;\n  _DAT_4000084c = 0;\n  _DAT_40000814 = 1;\n  return;\n}\n\n",
            "current_name": "initialize_registers_08007d08",
            "entrypoint": "0x08007d08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007d08": "initialize_registers_08007d08"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007da8": {
            "additional_data": {
                "FUN_08007da8": {
                    "1": "set_status_flags",
                    "17": "set_flags",
                    "2": "set_flags_and_status",
                    "4": "set_flags_and_enable"
                },
                "_DAT_40000800": {
                    "1": "bit",
                    "2": "flag2",
                    "3": "status",
                    "6": "control_register"
                },
                "_DAT_40000820": {
                    "1": "memory_flag1",
                    "12": "flags",
                    "2": "flag_register_1",
                    "3": "status_flags",
                    "4": "flags_register"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007e08"
            ],
            "code": "\n\n\nvoid set_flags_08007da8(void)\n\n{\n  _DAT_40000820 = _DAT_40000820 | 0x10;\n  _DAT_40000800 = _DAT_40000800 | 1;\n  return;\n}\n\n",
            "current_name": "set_flags_08007da8",
            "entrypoint": "0x08007da8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007da8": "set_flags_08007da8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007e08": {
            "additional_data": {
                "FUN_08007ad0": {
                    "1": "perform_preprocessing",
                    "2": "perform_initialization"
                },
                "FUN_08007d08": {
                    "1": "initialize_display",
                    "2": "perform_initialization"
                },
                "FUN_08007da8": {
                    "1": "perform_initialization",
                    "2": "configure_settings",
                    "3": "initialize_audio"
                },
                "FUN_08007e08": {
                    "1": "initialize_components",
                    "10": "initialize_system",
                    "2": "initialize_application",
                    "3": "initialize_program"
                }
            },
            "called": [
                "FUN_08007d08",
                "FUN_08007da8",
                "FUN_08007ad0"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\nvoid initialize_system_08007e08(void)\n\n{\n  FUN_08007ad0();\n  FUN_08007d08();\n  FUN_08007da8();\n  return;\n}\n\n",
            "current_name": "initialize_system_08007e08",
            "entrypoint": "0x08007e08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007e08": "initialize_system_08007e08"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007e1c": {
            "additional_data": {
                "FUN_08007e1c": {
                    "1": "set_byte_param_and_wait_for_signal",
                    "2": "store_byte_in_memory",
                    "3": "set_byte_value",
                    "4": "write_byte_to_memory"
                },
                "_DAT_40004400": {
                    "1": "memory_value",
                    "9": "status_register"
                },
                "_DAT_40004404": {
                    "1": "register_data",
                    "2": "memory_address",
                    "3": "data_register",
                    "4": "output_register"
                },
                "param_1": {
                    "1": "byte_param",
                    "2": "byte_value",
                    "3": "input_byte",
                    "5": "byte_to_send",
                    "7": "byte_to_write"
                },
                "param_2": {
                    "1": "unused"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800826a",
                "FUN_08008250"
            ],
            "code": "\n\n\nvoid write_byte_to_memory_08007e1c(byte byte_to_write)\n\n{\n  do {\n  } while ((_DAT_40004400 & 0x80) == 0);\n  _DAT_40004404 = (uint)byte_to_write;\n  return;\n}\n\n",
            "current_name": "write_byte_to_memory_08007e1c",
            "entrypoint": "0x08007e1c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007e1c": "write_byte_to_memory_08007e1c",
                "param_1": "byte_to_write"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007e58": {
            "additional_data": {
                "0x20": {
                    "1": "flag_mask"
                },
                "FUN_08007e58": {
                    "1": "check_bit_20_set",
                    "2": "is_flag_set",
                    "3": "check_flag",
                    "4": "is_bit_set",
                    "5": "check_bit_set",
                    "6": "check_flag_set"
                },
                "_DAT_40004400": {
                    "1": "bit_flags",
                    "2": "register_value",
                    "3": "flag_value",
                    "4": "status_register",
                    "7": "flag"
                },
                "return": {
                    "1": "is_bit_5_set"
                },
                "return value": {
                    "1": "is_bit_set"
                }
            },
            "called": [],
            "calling": [
                "FUN_08008286"
            ],
            "code": "\n\n\nbool check_flag_set_08007e58(void)\n\n{\n  is_bit_5_set (_DAT_40004400 & 0x20) != 0;\n}\n\n",
            "current_name": "check_flag_set_08007e58",
            "entrypoint": "0x08007e58",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007e58": "check_flag_set_08007e58",
                "return": "is_bit_5_set"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007e84": {
            "additional_data": {
                "& 0xff": {
                    "1": "and_mask"
                },
                "0xff": {
                    "2": "mask"
                },
                "FUN_08007e84": {
                    "1": "get_low_byte",
                    "18": "get_lowest_byte",
                    "2": "get_last_byte",
                    "3": "get_lower_byte",
                    "5": "get_least_significant_byte"
                },
                "_DAT_40004404": {
                    "1": "input_data",
                    "2": "original_value",
                    "4": "data_register",
                    "5": "data_variable",
                    "8": "data_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08008286"
            ],
            "code": "\n\n\nuint get_lowest_byte_08007e84(void)\n\n{\n  return _DAT_40004404 & 0xff;\n}\n\n",
            "current_name": "get_lowest_byte_08007e84",
            "entrypoint": "0x08007e84",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007e84": "get_lowest_byte_08007e84"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007ea4": {
            "additional_data": {
                "&DAT_40004400": {
                    "1": "constant_memory_2"
                },
                "(undefined *)0x40004800": {
                    "1": "memory_block_b"
                },
                "(undefined *)0x40004c00": {
                    "1": "address4"
                },
                "(undefined *)0x40005000": {
                    "1": "memory_block_d"
                },
                "(undefined *)0x40011000": {
                    "1": "memory_block_e"
                },
                "(undefined *)0x40011400": {
                    "1": "memory_block_f"
                },
                "/pointer/0x40004800": {
                    "1": "constant_memory_3"
                },
                "/pointer/0x40004c00": {
                    "1": "constant_memory_4"
                },
                "/pointer/0x40005000": {
                    "1": "constant_memory_5"
                },
                "/pointer/0x40011400": {
                    "1": "constant_memory_6"
                },
                "0x40004800": {
                    "1": "address_3"
                },
                "0x40004c00": {
                    "1": "address_4"
                },
                "0x40005000": {
                    "1": "address_5"
                },
                "0x40011000": {
                    "1": "address1"
                },
                "0x40011400": {
                    "1": "address_6"
                },
                "DAT_40004400": {
                    "1": "memory_block_a"
                },
                "FUN_08007ea4": {
                    "1": "update_permissions",
                    "10": "update_flags",
                    "12": "update_memory_flags",
                    "4": "update_status"
                },
                "_DAT_40023840": {
                    "1": "flags_b",
                    "2": "status_flag2",
                    "3": "flag2",
                    "5": "memory_flag2"
                },
                "_DAT_40023844": {
                    "1": "flag_a",
                    "2": "memory_flags1",
                    "3": "flag_register_1",
                    "5": "memory_flag1"
                },
                "param_1": {
                    "1": "param",
                    "12": "address",
                    "17": "memory_address"
                },
                "undefined": {
                    "1": "undefined"
                }
            },
            "called": [],
            "calling": [
                "FUN_08008190"
            ],
            "code": "\n\n\nvoid update_memory_flags_08007ea4(undefined *memory_address)\n\n{\n  if (memory_address == (undefined *)0x40011000) {\n    _DAT_40023844 = _DAT_40023844 | 0x10;\n  }\n  else if (memory_address == &DAT_40004400) {\n    _DAT_40023840 = _DAT_40023840 | 0x20000;\n  }\n  else if (memory_address == (undefined *)0x40004800) {\n    _DAT_40023840 = _DAT_40023840 | 0x40000;\n  }\n  else if (memory_address == (undefined *)0x40004c00) {\n    _DAT_40023840 = _DAT_40023840 | 0x80000;\n  }\n  else if (memory_address == (undefined *)0x40005000) {\n    _DAT_40023840 = _DAT_40023840 | 0x100000;\n  }\n  else if (memory_address == (undefined *)0x40011400) {\n    _DAT_40023844 = _DAT_40023844 | 0x20;\n  }\n  return;\n}\n\n",
            "current_name": "update_memory_flags_08007ea4",
            "entrypoint": "0x08007ea4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007ea4": "update_memory_flags_08007ea4",
                "param_1": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007f54": {
            "additional_data": {
                "FUN_08006680": {
                    "1": "calculate_value1",
                    "2": "get_value1",
                    "3": "get_multiplier1",
                    "5": "get_random_value1"
                },
                "FUN_080066cc": {
                    "1": "generate_different_random",
                    "2": "get_value2",
                    "3": "get_multiplier2",
                    "6": "get_random_value2"
                },
                "FUN_08007f54": {
                    "1": "calculate_percentage_offset",
                    "14": "calculate_checksum",
                    "3": "calculate_value",
                    "5": "calculate_parameter"
                },
                "iVar2": {
                    "1": "division_result2",
                    "2": "calculation2",
                    "3": "result1",
                    "4": "result2",
                    "5": "temp2",
                    "6": "temp_var1"
                },
                "iVar3": {
                    "1": "division_result3",
                    "2": "calculation3",
                    "3": "result2",
                    "4": "temp_value2",
                    "5": "temp3",
                    "6": "temp_var2"
                },
                "param_1": {
                    "1": "memory_location",
                    "2": "input_address",
                    "20": "address",
                    "5": "data_address"
                },
                "param_2": {
                    "1": "divisor",
                    "13": "value",
                    "2": "count",
                    "3": "multiplier"
                },
                "uVar1": {
                    "1": "calculation_result",
                    "2": "calculation1",
                    "4": "result",
                    "5": "quotient"
                },
                "uVar4": {
                    "1": "temp4",
                    "11": "result",
                    "14": "random_value",
                    "2": "function_result"
                },
                "v_0x19": {
                    "1": "constant1"
                },
                "v_0x51eb851f": {
                    "1": "constant2"
                }
            },
            "called": [
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "calling": [
                "FUN_08008190"
            ],
            "code": "\nvoid calculate_checksum_08007f54(int address,int value)\n\n{\n  ulonglong quotient;\n  int temp_var1;\n  int temp_var2;\n  undefined8 random_value;\n  \n  if ((*(uint *)(address + 0xc) & 0x8000) == 0) {\n    if ((address != 0x40011000) && (address != 0x40011400)) {\n      random_value = FUN_08006680();\n      quotient = (ulonglong)(uint)((int)random_value * 0x19) / (ulonglong)(uint)(value << 2);\n      temp_var1 = FUN_08006680((int)random_value,(int)((ulonglong)random_value >> 0x20),(int)(quotient * 0x51eb851f));\n      temp_var2 = FUN_08006680();\n      *(uint *)(address + 8) =\n           (int)(quotient / 100) << 4 |\n           (((uint)(temp_var1 * 0x19) / (uint)(value << 2) +\n            (int)(((ulonglong)(uint)(temp_var2 * 0x19) / (ulonglong)(uint)(value << 2)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    random_value = FUN_080066cc();\n    quotient = (ulonglong)(uint)((int)random_value * 0x19) / (ulonglong)(uint)(value << 2);\n    temp_var1 = FUN_080066cc((int)random_value,(int)((ulonglong)random_value >> 0x20),(int)(quotient * 0x51eb851f));\n    temp_var2 = FUN_080066cc();\n    *(uint *)(address + 8) =\n         (int)(quotient / 100) << 4 |\n         (((uint)(temp_var1 * 0x19) / (uint)(value << 2) +\n          (int)(((ulonglong)(uint)(temp_var2 * 0x19) / (ulonglong)(uint)(value << 2)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  else {\n    if ((address != 0x40011000) && (address != 0x40011400)) {\n      random_value = FUN_08006680();\n      quotient = (ulonglong)(uint)((int)random_value * 0x19) / (ulonglong)(uint)(value << 1);\n      temp_var1 = FUN_08006680((int)random_value,(int)((ulonglong)random_value >> 0x20),(int)(quotient * 0x51eb851f));\n      temp_var2 = FUN_08006680();\n      *(uint *)(address + 8) =\n           (int)(quotient / 100) << 4 |\n           (((uint)(temp_var1 * 0x19) / (uint)(value << 1) +\n            (int)(((ulonglong)(uint)(temp_var2 * 0x19) / (ulonglong)(uint)(value << 1)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    random_value = FUN_080066cc();\n    quotient = (ulonglong)(uint)((int)random_value * 0x19) / (ulonglong)(uint)(value << 1);\n    temp_var1 = FUN_080066cc((int)random_value,(int)((ulonglong)random_value >> 0x20),(int)(quotient * 0x51eb851f));\n    temp_var2 = FUN_080066cc();\n    *(uint *)(address + 8) =\n         (int)(quotient / 100) << 4 |\n         (((uint)(temp_var1 * 0x19) / (uint)(value << 1) +\n          (int)(((ulonglong)(uint)(temp_var2 * 0x19) / (ulonglong)(uint)(value << 1)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  return;\n}\n\n",
            "current_name": "calculate_checksum_08007f54",
            "entrypoint": "0x08007f54",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007f54": "calculate_checksum_08007f54",
                "iVar2": "temp_var1",
                "iVar3": "temp_var2",
                "param_1": "address",
                "param_2": "value",
                "uVar1": "quotient",
                "uVar4": "random_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008190": {
            "additional_data": {
                "0x1c200": {
                    "1": "write_value"
                },
                "0xc": {
                    "1": "flag_mask1"
                },
                "0xffff400c": {
                    "1": "mask1"
                },
                "0xffff8090": {
                    "1": "mask2"
                },
                "0xfffff000": {
                    "1": "mask3"
                },
                "0xfffffc00": {
                    "1": "mask4"
                },
                "FUNK_08008190": {
                    "1": "initialize_memory"
                },
                "FUN_08007ea4": {
                    "1": "copy_data_to_pointer",
                    "2": "copy_data",
                    "4": "initialize_data",
                    "5": "set_memory",
                    "6": "initialize_memory"
                },
                "FUN_08007f54": {
                    "1": "set_permissions",
                    "2": "configure_memory",
                    "3": "load_data",
                    "5": "load_data_into_memory"
                },
                "FUN_08008190": {
                    "1": "initialize_register",
                    "19": "initialize_memory",
                    "6": "initialize_registers"
                },
                "_DAT_40004400": {
                    "1": "memory_address",
                    "2": "register4",
                    "3": "memory_data"
                },
                "_DAT_4000440c": {
                    "1": "flags",
                    "2": "register1"
                },
                "_DAT_40004410": {
                    "1": "data_value1",
                    "2": "register2"
                },
                "_DAT_40004414": {
                    "1": "page",
                    "2": "register3"
                },
                "param_1": {
                    "1": "memory_ptr",
                    "2": "memory",
                    "3": "data_pointer"
                },
                "param_2": {
                    "1": "memory_value",
                    "6": "size"
                }
            },
            "called": [
                "FUN_08007ea4",
                "FUN_08007f54"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\n\n\nvoid initialize_memory_08008190(void)\n\n{\n  FUN_08007ea4(&DAT_40004400);\n  _DAT_4000440c = _DAT_4000440c & 0xffff400c | 0xc;\n  _DAT_40004410 = _DAT_40004410 & 0xffff8090;\n  _DAT_40004414 = _DAT_40004414 & 0xfffff000;\n  _DAT_40004400 = _DAT_40004400 & 0xfffffc00;\n  FUN_08007f54(&DAT_40004400,0x1c200);\n  _DAT_4000440c = _DAT_4000440c | 0x2000;\n  return;\n}\n\n",
            "current_name": "initialize_memory_08008190",
            "entrypoint": "0x08008190",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008190": "initialize_memory_08008190"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008244": {
            "called": [],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid FUNC_08008244(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08008244",
            "entrypoint": "0x08008244",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08008244": "FUNC_08008244"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08008250": {
            "additional_data": {
                "FUN_08007e1c": {
                    "1": "perform_operation",
                    "2": "initialize_data",
                    "3": "process_input",
                    "6": "process_data",
                    "7": "process_byte"
                },
                "FUN_08008250": {
                    "1": "execute_operation",
                    "11": "initialize",
                    "2": "execute_function",
                    "3": "process_data",
                    "4": "execute_initialization"
                },
                "param_1": {
                    "1": "parameter",
                    "2": "byte_data",
                    "3": "input_data",
                    "9": "data"
                }
            },
            "called": [
                "FUN_08007e1c"
            ],
            "calling": [
                "FUN_0800369c",
                "FUN_08003826",
                "FUN_080037fc",
                "FUN_080036f0",
                "FUN_08003778",
                "FUN_080036c6"
            ],
            "code": "\nvoid initialize_08008250(undefined data)\n\n{\n  FUN_08007e1c(data);\n  return;\n}\n\n",
            "current_name": "initialize_08008250",
            "entrypoint": "0x08008250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008250": "initialize_08008250",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800826a": {
            "additional_data": {
                "FUN_08007e1c": {
                    "1": "perform_initialization",
                    "2": "handle_data",
                    "8": "process_byte"
                },
                "FUN_0800826a": {
                    "1": "initialize_function",
                    "10": "initialize",
                    "2": "initialize_data",
                    "9": "process_data"
                },
                "param_1": {
                    "1": "system_data",
                    "17": "data",
                    "2": "input_data",
                    "3": "input_param",
                    "6": "input"
                }
            },
            "called": [
                "FUN_08007e1c"
            ],
            "calling": [],
            "code": "\nundefined4 initialize_0800826a(undefined data)\n\n{\n  FUN_08007e1c(data);\n  return 0;\n}\n\n",
            "current_name": "initialize_0800826a",
            "entrypoint": "0x0800826a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800826a": "initialize_0800826a",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008286": {
            "additional_data": {
                "FUN_08005900": {
                    "1": "verify_value",
                    "2": "process_value",
                    "3": "validate_data",
                    "4": "check_value",
                    "6": "process_data"
                },
                "FUN_08007e58": {
                    "1": "is_condition_true",
                    "2": "is_data_available",
                    "3": "check_connection",
                    "6": "is_valid",
                    "9": "check_condition"
                },
                "FUN_08007e84": {
                    "1": "get_security_code",
                    "4": "get_byte_value",
                    "8": "get_value",
                    "9": "get_data"
                },
                "FUN_08008286": {
                    "1": "process_binary_function",
                    "2": "check_validity",
                    "4": "check_result",
                    "6": "check_status"
                },
                "iVar2": {
                    "1": "error_status",
                    "11": "result",
                    "2": "status"
                },
                "uVar1": {
                    "1": "byte_value",
                    "3": "value",
                    "4": "data"
                }
            },
            "called": [
                "FUN_08007e84",
                "FUN_08005900",
                "FUN_08007e58"
            ],
            "calling": [
                "FUN_08003f34"
            ],
            "code": "\nundefined check_status_08008286(void)\n\n{\n  undefined data;\n  int result;\n  \n  result = FUN_08007e58();\n  if (result != 0) {\n    data = FUN_08007e84();\n    result = FUN_08005900(data);\n    if (result == 0) {\n      return data;\n    }\n  }\n  return 0xff;\n}\n\n",
            "current_name": "check_status_08008286",
            "entrypoint": "0x08008286",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008286": "check_status_08008286",
                "iVar2": "result",
                "uVar1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080082ba": {
            "called": [],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid FUNC_080082ba(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080082ba",
            "entrypoint": "0x080082ba",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080082ba": "FUNC_080082ba"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080082d0": {
            "additional_data": {
                "FUN_080082d0": {
                    "1": "perform_bitwise_operations",
                    "2": "calculate_result",
                    "4": "reverse_bits"
                },
                "bVar13": {
                    "1": "is_param2_equals_complement_of_param4",
                    "2": "is_condition_true1",
                    "3": "flag1",
                    "4": "condition1"
                },
                "bVar14": {
                    "1": "temp7",
                    "2": "is_negative",
                    "3": "is_zero",
                    "4": "condition2"
                },
                "bVar15": {
                    "1": "is_borrow",
                    "2": "flag_3",
                    "3": "flag3",
                    "4": "is_negative"
                },
                "bVar2": {
                    "1": "variable2",
                    "3": "carry_flag",
                    "4": "carry"
                },
                "iVar1": {
                    "1": "bit_count1",
                    "2": "result_1",
                    "3": "shift1",
                    "4": "shift_amount1"
                },
                "iVar8": {
                    "1": "variable8",
                    "3": "shift2",
                    "4": "shift_amount2"
                },
                "ioVar1": {
                    "1": "shift_amount"
                },
                "param_1": {
                    "1": "first_parameter",
                    "22": "input1",
                    "7": "input_1"
                },
                "param_2": {
                    "1": "second_parameter",
                    "22": "input2",
                    "7": "input_2"
                },
                "param_3": {
                    "1": "third_parameter",
                    "21": "input3",
                    "7": "input_3"
                },
                "param_4": {
                    "1": "w",
                    "21": "input4",
                    "7": "input_4"
                },
                "sVar2": {
                    "1": "bit_index"
                },
                "uVar10": {
                    "1": "result_2",
                    "2": "temp4",
                    "3": "result2"
                },
                "uVar11": {
                    "1": "difference",
                    "2": "temp5",
                    "5": "result3"
                },
                "uVar12": {
                    "1": "updated_variable3",
                    "2": "temp6",
                    "4": "result4"
                },
                "uVar3": {
                    "1": "variable3",
                    "2": "temp_1",
                    "3": "result1",
                    "9": "temp1"
                },
                "uVar4": {
                    "1": "temp9",
                    "2": "u_var4",
                    "7": "temp2"
                },
                "uVar5": {
                    "1": "result2",
                    "2": "u_var5",
                    "7": "temp3"
                },
                "uVar6": {
                    "1": "temp_var6",
                    "2": "temp_4",
                    "3": "temp4",
                    "4": "temp1"
                },
                "uVar7": {
                    "1": "result4",
                    "2": "temp4",
                    "3": "temp2",
                    "4": "temp5"
                },
                "uVar9": {
                    "1": "temp4",
                    "2": "temp3",
                    "3": "result1",
                    "4": "shifted_input2"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003004",
                "FUN_080096e8",
                "FUN_08009d78",
                "FUN_0800a5a0",
                "FUN_08001f00",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_0800a1bc",
                "FUN_08009410",
                "FUN_0800a348",
                "FUN_08009b24",
                "FUN_0800adf0",
                "FUN_08009990"
            ],
            "code": "\nulonglong reverse_bits_080082d0(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift_amount1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp1;\n  uint temp5;\n  int temp6;\n  uint shifted_input2;\n  uint result2;\n  uint result3;\n  uint result4;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  temp1 = input4 ^ 0x80000000;\n  shifted_input2 = input2 << 1;\n  input4 = input4 << 1;\n  condition1 = ((input2 ^ temp1) & 0x7fffffff) == 0;\n  condition2 = condition1 && input1 == input3;\n  if (!condition1 || input1 != input3) {\n    condition2 = (shifted_input2 | input1) == 0;\n  }\n  if (!condition2) {\n    condition2 = (input4 | input3) == 0;\n  }\n  temp6 = (int)shifted_input2 >> 0x15;\n  if (!condition2) {\n    condition2 = temp6 == -1;\n  }\n  shift_amount1 = (int)input4 >> 0x15;\n  if (!condition2) {\n    condition2 = shift_amount1 == -1;\n  }\n  if (condition2) {\n    if (temp6 == -1 || shift_amount1 == -1) {\n      shifted_input2 = temp1;\n      result3 = input3;\n      if (temp6 == -1) {\n        shifted_input2 = input2;\n        result3 = input1;\n      }\n      if (temp6 != -1 || shift_amount1 != -1) {\n        input3 = result3;\n        temp1 = shifted_input2;\n      }\n      condition2 = (result3 | shifted_input2 << 0xc) == 0;\n      if (condition2) {\n        condition2 = (input3 | temp1 << 0xc) == 0;\n      }\n      if (condition2) {\n        condition2 = shifted_input2 == temp1;\n      }\n      if (!condition2) {\n        shifted_input2 = shifted_input2 | 0x80000;\n      }\n      return CONCAT44(shifted_input2,result3);\n    }\n    if (((input2 ^ temp1) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shifted_input2 | input1) == 0) {\n        input1 = input3;\n        input2 = temp1;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp1) {\n      return 0;\n    }\n    if (shifted_input2 >> 0x15 == 0) {\n      condition2 = (input1 & 0x80000000) != 0;\n      temp1 = input2 * 2 + (uint)condition2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)condition2)) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return CONCAT44(temp1,input1 << 1);\n    }\n    if (shifted_input2 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input2 = shifted_input2 >> 0x15;\n  input4 = input4 >> 0x15;\n  result3 = input4 - shifted_input2;\n  condition2 = result3 != 0;\n  if (input4 < shifted_input2) {\n    result3 = -result3;\n  }\n  result2 = input1;\n  temp5 = input2;\n  if (condition2 && shifted_input2 <= input4) {\n    shifted_input2 = shifted_input2 + result3;\n    result2 = input3;\n    temp5 = temp1;\n    input3 = input1;\n    temp1 = input2;\n  }\n  if (0x36 < result3) {\n    return CONCAT44(temp5,result2);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    condition2 = result2 != 0;\n    result2 = -result2;\n    temp2 = -temp2 - (uint)condition2;\n  }\n  temp5 = temp1 & 0xfffff | 0x100000;\n  if ((temp1 & 0x80000000) != 0) {\n    condition2 = input3 != 0;\n    input3 = -input3;\n    temp5 = -temp5 - (uint)condition2;\n  }\n  if (shifted_input2 == result3) {\n    temp5 = temp5 ^ 0x100000;\n    if (shifted_input2 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      shifted_input2 = 1;\n    }\n    else {\n      result3 = result3 - 1;\n    }\n  }\n  temp1 = -result3 + 0x20;\n  if ((int)result3 < 0x21) {\n    result4 = input3 << (temp1 & 0xff);\n    input3 = input3 >> (result3 & 0xff);\n    temp1 = result2 + input3;\n    temp3 = temp5 << (temp1 & 0xff);\n    temp1 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(result2,input3) + ((int)temp5 >> (result3 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    result4 = temp5 << (-result3 + 0x40 & 0xff);\n    if (input3 != 0) {\n      result4 = result4 | 2;\n    }\n    temp5 = (int)temp5 >> (result3 - 0x20 & 0xff);\n    temp1 = result2 + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)CARRY4(result2,temp5);\n  }\n  input2 = temp2 & 0x80000000;\n  result3 = temp2;\n  if ((int)temp2 < 0) {\n    condition2 = result4 == 0;\n    result4 = -result4;\n    result3 = -temp1;\n    temp1 = -(uint)!condition2 - temp1;\n    result3 = -(uint)(condition2 <= result3) - temp2;\n  }\n  if (0xfffff < result3) {\n    result2 = shifted_input2 - 1;\n    if (0x1fffff < result3) {\n      result2 = result3 & 1;\n      result3 = result3 >> 1;\n      carry = (byte)temp1;\n      temp1 = (uint)(result2 != 0) << 0x1f | temp1 >> 1;\n      result4 = (uint)(carry & 1) << 0x1f | result4 >> 1;\n      result2 = shifted_input2;\n      if (0xffbfffff < shifted_input2 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    condition2 = 0x7fffffff < result4;\n    if (result4 == 0x80000000) {\n      condition2 = (temp1 & 1) != 0;\n    }\n    return CONCAT44(result3 + result2 * 0x100000 + (uint)CARRY4(temp1,(uint)condition2) | input2,\n                    temp1 + condition2);\n  }\n  condition1 = (result4 & 0x80000000) != 0;\n  result4 = result4 << 1;\n  result2 = temp1 * 2;\n  condition2 = CARRY4(temp1,temp1);\n  temp1 = temp1 * 2 + (uint)condition1;\n  result3 = result3 * 2 + (uint)(condition2 || CARRY4(result2,(uint)condition1));\n  result2 = shifted_input2 - 2;\n  if (shifted_input2 - 1 != 0 && 0xfffff < result3) goto LAB_080083e0;\n  temp5 = temp1;\n  shifted_input2 = result3;\n  if (result3 == 0) {\n    temp5 = 0;\n    shifted_input2 = temp1;\n  }\n  temp6 = LZCOUNT(shifted_input2);\n  if (result3 == 0) {\n    temp6 = temp6 + 0x20;\n  }\n  result3 = temp6 - 0xb;\n  condition3 = SBORROW4(result3,0x20);\n  temp1 = temp6 - 0x2b;\n  condition2 = (int)temp1 < 0;\n  condition1 = temp1 == 0;\n  if ((int)result3 < 0x20) {\n    condition3 = SCARRY4(temp1,0xc);\n    temp6 = temp6 + -0x1f;\n    condition2 = temp6 < 0;\n    condition1 = temp6 == 0;\n    temp1 = result3;\n    if (!condition1 && condition2 == condition3) {\n      temp5 = shifted_input2 << (result3 & 0xff);\n      shifted_input2 = shifted_input2 >> (0xcU - temp6 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (condition1 || condition2 != condition3) {\n    result4 = 0x20 - temp1;\n  }\n  shifted_input2 = shifted_input2 << (temp1 & 0xff);\n  if (condition1 || condition2 != condition3) {\n    shifted_input2 = shifted_input2 | temp5 >> (result4 & 0xff);\n  }\n  if (condition1 || condition2 != condition3) {\n    temp5 = temp5 << (temp1 & 0xff);\n  }\nLAB_08008458:\n  if ((int)result3 <= (int)result2) {\n    return CONCAT44(shifted_input2 + (result2 - result3) * 0x100000 | input2,temp5);\n  }\n  temp1 = ~(result2 - result3);\n  if ((int)temp1 < 0x1f) {\n    temp6 = temp1 - 0x13;\n    if (temp6 != 0 && temp6 < 0 == SCARRY4(temp1 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp5 >> (0x20 - (0xcU - temp6) & 0xff) | shifted_input2 << (0xcU - temp6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp1 = temp1 + 1;\n    return CONCAT44(input2 | shifted_input2 >> (temp1 & 0xff),\n                    temp5 >> (temp1 & 0xff) | shifted_input2 << (0x20 - temp1 & 0xff));\n  }\n  return CONCAT44(temp2,shifted_input2 >> (temp1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_bits_080082d0",
            "entrypoint": "0x080082d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080082d0": "reverse_bits_080082d0",
                "bVar13": "condition1",
                "bVar14": "condition2",
                "bVar15": "condition3",
                "bVar2": "carry",
                "iVar1": "shift_amount1",
                "iVar8": "temp6",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar10": "result2",
                "uVar11": "result3",
                "uVar12": "result4",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp1",
                "uVar7": "temp5",
                "uVar9": "shifted_input2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080082d4": {
            "additional_data": {
                "F": {
                    "1": "is_condition_3_satisfied"
                },
                "FUN_080082d4": {
                    "1": "calculate_combined_values",
                    "7": "calculate_result"
                },
                "I": {
                    "1": "shift_amount"
                },
                "I_save": {
                    "1": "shift_amount_save"
                },
                "I_shifted_wover_minus_y": {
                    "1": "shift_amount_shifted_wover_minus_y"
                },
                "J": {
                    "1": "shifted_x"
                },
                "K": {
                    "1": "y_minus_shifted_x"
                },
                "L": {
                    "1": "is_x_shifted_greater"
                },
                "M": {
                    "1": "z_and_w_shifted_right"
                },
                "N": {
                    "1": "is_addition_overflow"
                },
                "N_shifted_y_shift_amount": {
                    "1": "is_addition_overflow_shifted_y_shifted_amount"
                },
                "O": {
                    "1": "is_x_positive"
                },
                "P": {
                    "1": "is_condition_4_satisfied"
                },
                "Q": {
                    "1": "is_condition_2_satisfied"
                },
                "R": {
                    "1": "u_var4_is_negative"
                },
                "S": {
                    "1": "u_var11_is_negative"
                },
                "T": {
                    "1": "is_condition_1_satisfied"
                },
                "bVar13": {
                    "1": "is_greater",
                    "2": "is_same_sign",
                    "4": "flag1",
                    "6": "is_equal"
                },
                "bVar14": {
                    "1": "is_result_zero",
                    "4": "flag2",
                    "8": "is_zero"
                },
                "bVar14_save": {
                    "1": "check_condition_save"
                },
                "bVar15": {
                    "1": "is_same_sign",
                    "3": "flag3",
                    "9": "is_negative"
                },
                "bVar15_save": {
                    "1": "is_negative_save"
                },
                "bVar2": {
                    "1": "bit",
                    "12": "carry",
                    "2": "temp2"
                },
                "e": {
                    "1": "x_plus_shifted_y"
                },
                "g": {
                    "1": "shifted_y_shift_amount"
                },
                "h": {
                    "1": "is_addition_overflow_shifted_y"
                },
                "iVar1": {
                    "1": "shifted_input_4_div_0x20000",
                    "2": "temp1",
                    "3": "shift1"
                },
                "iVar1_save": {
                    "1": "shifted_w_save"
                },
                "iVar6": {
                    "1": "shift_amt1",
                    "2": "shift_amount2",
                    "3": "shift2"
                },
                "iVar6_save": {
                    "1": "shifted_y_save"
                },
                "m": {
                    "1": "u_var11_is_negative_shifted_wover"
                },
                "param_1": {
                    "1": "num1",
                    "14": "input1",
                    "2": "a",
                    "3": "operand1",
                    "5": "input_1"
                },
                "param_2": {
                    "1": "num2",
                    "14": "input2",
                    "2": "b",
                    "3": "operand2",
                    "5": "input_2"
                },
                "param_3": {
                    "1": "num3",
                    "15": "input3",
                    "2": "c",
                    "3": "operand3",
                    "5": "input_3"
                },
                "param_4": {
                    "1": "w",
                    "15": "input4",
                    "2": "d",
                    "3": "operand4",
                    "5": "input_4"
                },
                "u": {
                    "1": "u_var9_is_negative"
                },
                "uC": {
                    "1": "carry_check1"
                },
                "uC_1": {
                    "1": "carry_check2"
                },
                "uVar10": {
                    "1": "difference_abs",
                    "2": "result2",
                    "5": "difference"
                },
                "uVar11": {
                    "1": "temp4",
                    "2": "result3",
                    "3": "carry_bit",
                    "4": "temp5"
                },
                "uVar11_save": {
                    "1": "z_plus_w_shifted_right_save"
                },
                "uVar12": {
                    "1": "result",
                    "2": "result4",
                    "3": "result_high",
                    "4": "temp6"
                },
                "uVar12_save": {
                    "1": "x_plus_y_save"
                },
                "uVar12_shifted_right": {
                    "1": "x_plus_y_shifted_right"
                },
                "uVar13": {
                    "1": "result2"
                },
                "uVar14": {
                    "1": "temp_operand_high"
                },
                "uVar15": {
                    "1": "temp3"
                },
                "uVar16": {
                    "1": "temp7"
                },
                "uVar17": {
                    "1": "u_var2_signbit"
                },
                "uVar18": {
                    "1": "is_operand3_zero"
                },
                "uVar19": {
                    "1": "temp10"
                },
                "uVar20": {
                    "1": "temp11"
                },
                "uVar21": {
                    "1": "left_shifted_operand"
                },
                "uVar22": {
                    "1": "right_shifted_operand"
                },
                "uVar23": {
                    "1": "sign_extended_operand"
                },
                "uVar24": {
                    "1": "carry_extension"
                },
                "uVar25": {
                    "1": "partial_sum_operand1"
                },
                "uVar26": {
                    "1": "final_op_high"
                },
                "uVar27": {
                    "1": "partial_sum_operand2"
                },
                "uVar28": {
                    "1": "final_op_low"
                },
                "uVar3": {
                    "1": "shift_result_1",
                    "11": "temp1",
                    "2": "temp_var1"
                },
                "uVar30": {
                    "1": "is_greater_than_or_equal"
                },
                "uVar31": {
                    "1": "right_shift_amount_high"
                },
                "uVar32": {
                    "1": "sign_bit"
                },
                "uVar33": {
                    "1": "temp_sum"
                },
                "uVar34": {
                    "1": "leading_ones"
                },
                "uVar35": {
                    "1": "leading_zeros"
                },
                "uVar36": {
                    "1": "is_correct_size"
                },
                "uVar37": {
                    "1": "shift_amount"
                },
                "uVar38": {
                    "1": "is_overflow_on_sum"
                },
                "uVar39": {
                    "1": "is_zero_after_shift"
                },
                "uVar4": {
                    "1": "temp4",
                    "11": "temp2",
                    "2": "temp_var2"
                },
                "uVar40": {
                    "1": "is_operand2_zero"
                },
                "uVar41": {
                    "1": "is_operand1_zero"
                },
                "uVar42": {
                    "1": "is_operand1_negative"
                },
                "uVar43": {
                    "1": "is_operand2_negative"
                },
                "uVar44": {
                    "1": "is_operand3_negative"
                },
                "uVar45": {
                    "1": "is_operand4_negative"
                },
                "uVar46": {
                    "1": "temp_result"
                },
                "uVar5": {
                    "1": "y_shifted",
                    "10": "temp3",
                    "2": "temp1"
                },
                "uVar5_save": {
                    "1": "y_result_save"
                },
                "uVar5_shifted_right": {
                    "1": "y_shifted_right"
                },
                "uVar7": {
                    "1": "temp4",
                    "2": "shifted_input_2",
                    "8": "shifted_input2"
                },
                "uVar7_save": {
                    "1": "y_shifted_left_save"
                },
                "uVar7_shifted_left": {
                    "1": "y_shifted_left"
                },
                "uVar7_shifted_right": {
                    "1": "y_result_shifted_right"
                },
                "uVar8": {
                    "1": "temp_input1",
                    "2": "shifted_input1",
                    "5": "temp4"
                },
                "uVar8_save": {
                    "1": "x_result_save"
                },
                "uVar8_shifted_right": {
                    "1": "x_result_shifted_right"
                },
                "uVar9": {
                    "1": "temp9",
                    "2": "result_high",
                    "4": "shifted_input4"
                },
                "uVar9_save": {
                    "1": "z_plus_w_save"
                },
                "uVar9_shifted_right": {
                    "1": "z_plus_w_shifted_right"
                },
                "w": {
                    "1": "y"
                },
                "w_shifted_right": {
                    "1": "y_shifted_right"
                },
                "x": {
                    "1": "x"
                },
                "y_minus_shifted_x": {
                    "1": "k"
                }
            },
            "called": [],
            "calling": [
                "FUN_08009798",
                "FUN_08009d78",
                "FUN_0800a5a0",
                "FUN_08009318",
                "FUN_08009654",
                "FUN_08001f00",
                "FUN_0800af78",
                "FUN_0800b2e8",
                "FUN_080094c0",
                "FUN_0800a1bc",
                "FUN_0800a348",
                "FUN_08009b24",
                "FUN_0800adf0",
                "FUN_08009990"
            ],
            "code": "\nu_var9_is_negativelonshifted_y_shift_amountlonshifted_y_shift_amount calculate_result_080082d4(u_var9_is_negativeint EXXHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSIFWHW,u_var9_is_negativeint WPKis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCXis_x_positiveX,u_var9_is_negativeint input3,u_var9_is_negativeint ZAHis_x_shifted_greateris_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHYDZX)\n\n{\n  int CWis_x_positiveis_condition_1_satisfiedCFVVGY;\n  byte is_condition_1_satisfiedKXis_x_shifted_greaterJJJZBY;\n  u_var9_is_negativeint Fis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVDis_x_positiveDQEGFH;\n  u_var9_is_negativeint temp2;\n  u_var9_is_negativeint GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV;\n  int XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZZMCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCis_condition_1_satisfiedMDUD;\n  u_var9_is_negativeint CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW;\n  u_var9_is_negativeint XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZDPis_x_shifted_greaterAVPDMI;\n  u_var9_is_negativeint ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA;\n  u_var9_is_negativeint difference;\n  u_var9_is_negativeint Uis_condition_1_satisfiedWWFis_x_positiveAGJis_condition_1_satisfied;\n  u_var9_is_negativeint CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH;\n  bool is_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVZZis_condition_1_satisfiedYPis_condition_1_satisfiedCCM;\n  bool WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF;\n  bool AKUVEPWQGXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZ;\n  \n  CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW = WPKis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCXis_x_positiveX << 1;\n  ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA = ZAHis_x_shifted_greateris_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHYDZX << 1;\n  is_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVZZis_condition_1_satisfiedYPis_condition_1_satisfiedCCM = ((WPKis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCXis_x_positiveX ^ ZAHis_x_shifted_greateris_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHYDZX) & 0x7fffffff) == 0;\n  WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF = is_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVZZis_condition_1_satisfiedYPis_condition_1_satisfiedCCM && EXXHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSIFWHW == input3;\n  if (!is_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVZZis_condition_1_satisfiedYPis_condition_1_satisfiedCCM || EXXHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSIFWHW != input3) {\n    WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF = (CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW | EXXHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSIFWHW) == 0;\n  }\n  if (!WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF) {\n    WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF = (ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA | input3) == 0;\n  }\n  XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZZMCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCis_condition_1_satisfiedMDUD = (int)CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW >> 0x15;\n  if (!WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF) {\n    WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF = XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZZMCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCis_condition_1_satisfiedMDUD == -1;\n  }\n  CWis_x_positiveis_condition_1_satisfiedCFVVGY = (int)ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA >> 0x15;\n  if (!WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF) {\n    WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF = CWis_x_positiveis_condition_1_satisfiedCFVVGY == -1;\n  }\n  if (WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF) {\n    if (XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZZMCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCis_condition_1_satisfiedMDUD == -1 || CWis_x_positiveis_condition_1_satisfiedCFVVGY == -1) {\n      ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA = ZAHis_x_shifted_greateris_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHYDZX;\n      CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW = input3;\n      if (XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZZMCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCis_condition_1_satisfiedMDUD == -1) {\n        ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA = WPKis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCXis_x_positiveX;\n        CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW = EXXHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSIFWHW;\n      }\n      if (XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZZMCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCis_condition_1_satisfiedMDUD != -1 || CWis_x_positiveis_condition_1_satisfiedCFVVGY != -1) {\n        input3 = CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW;\n        ZAHis_x_shifted_greateris_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHYDZX = ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA;\n      }\n      WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF = (CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW | ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA << 0xc) == 0;\n      if (WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF) {\n        WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF = (input3 | ZAHis_x_shifted_greateris_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHYDZX << 0xc) == 0;\n      }\n      if (WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF) {\n        WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF = ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA == ZAHis_x_shifted_greateris_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHYDZX;\n      }\n      if (!WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF) {\n        ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA = ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA | 0x80000;\n      }\n      retu_var9_is_negativern Cis_x_positiveis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVCAis_condition_1_satisfied44(ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA,CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW);\n    }\n    if (((WPKis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCXis_x_positiveX ^ ZAHis_x_shifted_greateris_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHYDZX) & 0x7fffffff) != 0 || EXXHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSIFWHW != input3) {\n      if ((CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW | EXXHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSIFWHW) == 0) {\n        EXXHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSIFWHW = input3;\n        WPKis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCXis_x_positiveX = ZAHis_x_shifted_greateris_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHYDZX;\n      }\n      retu_var9_is_negativern Cis_x_positiveis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVCAis_condition_1_satisfied44(WPKis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCXis_x_positiveX,EXXHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSIFWHW);\n    }\n    if (WPKis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCXis_x_positiveX != ZAHis_x_shifted_greateris_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHYDZX) {\n      retu_var9_is_negativern 0;\n    }\n    if (CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW >> 0x15 == 0) {\n      WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF = (EXXHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSIFWHW & 0x80000000) != 0;\n      ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA = WPKis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCXis_x_positiveX * 2 + (u_var9_is_negativeint)WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF;\n      if (CAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZY4(WPKis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCXis_x_positiveX,WPKis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCXis_x_positiveX) || CAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZY4(WPKis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCXis_x_positiveX * 2,(u_var9_is_negativeint)WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF)) {\n        ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA = ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA | 0x80000000;\n      }\n      retu_var9_is_negativern Cis_x_positiveis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVCAis_condition_1_satisfied44(ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA,EXXHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSIFWHW << 1);\n    }\n    if (CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW < 0xffc00000) {\n      retu_var9_is_negativern Cis_x_positiveis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVCAis_condition_1_satisfied44(WPKis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCXis_x_positiveX + 0x100000,EXXHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSIFWHW);\n    }\n    WPKis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCXis_x_positiveX = WPKis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCXis_x_positiveX & 0x80000000;\nis_x_shifted_greaterAB_08008514:\n    retu_var9_is_negativern (u_var9_is_negativelonshifted_y_shift_amountlonshifted_y_shift_amount)(WPKis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCXis_x_positiveX | 0x7ff00000) << 0x20;\n  }\n  CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW = CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW >> 0x15;\n  ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA = ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA >> 0x15;\n  difference = ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA - CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW;\n  WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF = difference != 0;\n  if (ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA < CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW) {\n    difference = -difference;\n  }\n  XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZDPis_x_shifted_greaterAVPDMI = EXXHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSIFWHW;\n  GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV = WPKis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCXis_x_positiveX;\n  if (WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF && CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW <= ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA) {\n    CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW = CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW + difference;\n    XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZDPis_x_shifted_greaterAVPDMI = input3;\n    GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV = ZAHis_x_shifted_greateris_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHYDZX;\n    input3 = EXXHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSIFWHW;\n    ZAHis_x_shifted_greateris_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHYDZX = WPKis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCXis_x_positiveX;\n  }\n  if (0x36 < difference) {\n    retu_var9_is_negativern Cis_x_positiveis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVCAis_condition_1_satisfied44(GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV,XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZDPis_x_shifted_greaterAVPDMI);\n  }\n  ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA = GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV & 0xfffff | 0x100000;\n  if ((GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV & 0x80000000) != 0) {\n    WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF = XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZDPis_x_shifted_greaterAVPDMI != 0;\n    XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZDPis_x_shifted_greaterAVPDMI = -XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZDPis_x_shifted_greaterAVPDMI;\n    ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA = -ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA - (u_var9_is_negativeint)WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF;\n  }\n  GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV = ZAHis_x_shifted_greateris_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHYDZX & 0xfffff | 0x100000;\n  if ((ZAHis_x_shifted_greateris_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHYDZX & 0x80000000) != 0) {\n    WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF = input3 != 0;\n    input3 = -input3;\n    GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV = -GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV - (u_var9_is_negativeint)WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF;\n  }\n  if (CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW == difference) {\n    GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV = GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV ^ 0x100000;\n    if (CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW == 0) {\n      ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA = ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA ^ 0x100000;\n      CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    Uis_condition_1_satisfiedWWFis_x_positiveAGJis_condition_1_satisfied = input3 << (CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH & 0xff);\n    input3 = input3 >> (difference & 0xff);\n    Fis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVDis_x_positiveDQEGFH = XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZDPis_x_shifted_greaterAVPDMI + input3;\n    temp2 = GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV << (CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH & 0xff);\n    CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH = Fis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVDis_x_positiveDQEGFH + temp2;\n    ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA = ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA + CAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZY4(XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZDPis_x_shifted_greaterAVPDMI,input3) + ((int)GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV >> (difference & 0xff)) +\n            (u_var9_is_negativeint)CAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZY4(Fis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVDis_x_positiveDQEGFH,temp2);\n  }\n  else {\n    Uis_condition_1_satisfiedWWFis_x_positiveAGJis_condition_1_satisfied = GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV << (-difference + 0x40 & 0xff);\n    if (input3 != 0) {\n      Uis_condition_1_satisfiedWWFis_x_positiveAGJis_condition_1_satisfied = Uis_condition_1_satisfiedWWFis_x_positiveAGJis_condition_1_satisfied | 2;\n    }\n    GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV = (int)GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV >> (difference - 0x20 & 0xff);\n    CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH = XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZDPis_x_shifted_greaterAVPDMI + GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV;\n    ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA = ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA + ((int)GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV >> 0x1f) + (u_var9_is_negativeint)CAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZY4(XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZDPis_x_shifted_greaterAVPDMI,GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV);\n  }\n  WPKis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCXis_x_positiveX = ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA & 0x80000000;\n  difference = ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA;\n  if ((int)ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA < 0) {\n    WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF = Uis_condition_1_satisfiedWWFis_x_positiveAGJis_condition_1_satisfied == 0;\n    Uis_condition_1_satisfiedWWFis_x_positiveAGJis_condition_1_satisfied = -Uis_condition_1_satisfiedWWFis_x_positiveAGJis_condition_1_satisfied;\n    difference = -CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH;\n    CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH = -(u_var9_is_negativeint)!WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF - CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH;\n    difference = -(u_var9_is_negativeint)(WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF <= difference) - ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA;\n  }\n  if (0xfffff < difference) {\n    XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZDPis_x_shifted_greaterAVPDMI = CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW - 1;\n    if (0x1fffff < difference) {\n      ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA = difference & 1;\n      difference = difference >> 1;\n      is_condition_1_satisfiedKXis_x_shifted_greaterJJJZBY = (byte)CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH;\n      CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH = (u_var9_is_negativeint)(ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA != 0) << 0x1f | CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH >> 1;\n      Uis_condition_1_satisfiedWWFis_x_positiveAGJis_condition_1_satisfied = (u_var9_is_negativeint)(is_condition_1_satisfiedKXis_x_shifted_greaterJJJZBY & 1) << 0x1f | Uis_condition_1_satisfiedWWFis_x_positiveAGJis_condition_1_satisfied >> 1;\n      XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZDPis_x_shifted_greaterAVPDMI = CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW;\n      if (0xffbfffff < CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW * 0x200000) shifted_y_shift_amountoto is_x_shifted_greaterAB_08008514;\n    }\nis_x_shifted_greaterAB_080083e0:\n    WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF = 0x7fffffff < Uis_condition_1_satisfiedWWFis_x_positiveAGJis_condition_1_satisfied;\n    if (Uis_condition_1_satisfiedWWFis_x_positiveAGJis_condition_1_satisfied == 0x80000000) {\n      WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF = (CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH & 1) != 0;\n    }\n    retu_var9_is_negativern Cis_x_positiveis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVCAis_condition_1_satisfied44(difference + XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZDPis_x_shifted_greaterAVPDMI * 0x100000 + (u_var9_is_negativeint)CAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZY4(CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH,(u_var9_is_negativeint)WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF) | WPKis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCXis_x_positiveX,\n                    CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH + WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF);\n  }\n  is_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVZZis_condition_1_satisfiedYPis_condition_1_satisfiedCCM = (Uis_condition_1_satisfiedWWFis_x_positiveAGJis_condition_1_satisfied & 0x80000000) != 0;\n  Uis_condition_1_satisfiedWWFis_x_positiveAGJis_condition_1_satisfied = Uis_condition_1_satisfiedWWFis_x_positiveAGJis_condition_1_satisfied << 1;\n  XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZDPis_x_shifted_greaterAVPDMI = CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH * 2;\n  WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF = CAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZY4(CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH,CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH);\n  CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH = CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH * 2 + (u_var9_is_negativeint)is_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVZZis_condition_1_satisfiedYPis_condition_1_satisfiedCCM;\n  difference = difference * 2 + (u_var9_is_negativeint)(WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF || CAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZY4(XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZDPis_x_shifted_greaterAVPDMI,(u_var9_is_negativeint)is_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVZZis_condition_1_satisfiedYPis_condition_1_satisfiedCCM));\n  XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZDPis_x_shifted_greaterAVPDMI = CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW - 2;\n  if (CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW - 1 != 0 && 0xfffff < difference) shifted_y_shift_amountoto is_x_shifted_greaterAB_080083e0;\n  GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV = CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH;\n  CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW = difference;\n  if (difference == 0) {\n    GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV = 0;\n    CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW = CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH;\n  }\n  XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZZMCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCis_condition_1_satisfiedMDUD = is_x_shifted_greaterZCis_x_positiveUis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfied(CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW);\n  if (difference == 0) {\n    XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZZMCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCis_condition_1_satisfiedMDUD = XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZZMCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCis_condition_1_satisfiedMDUD + 0x20;\n  }\n  CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH = XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZZMCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCis_condition_1_satisfiedMDUD - 0xb;\n  AKUVEPWQGXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZ = CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSBis_x_positiveXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZis_x_positiveW4(CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH,0x20);\n  difference = XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZZMCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCis_condition_1_satisfiedMDUD - 0x2b;\n  WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF = (int)difference < 0;\n  is_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVZZis_condition_1_satisfiedYPis_condition_1_satisfiedCCM = difference == 0;\n  if ((int)CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH < 0x20) {\n    AKUVEPWQGXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZ = CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZY4(difference,0xc);\n    XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZZMCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCis_condition_1_satisfiedMDUD = XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZZMCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCis_condition_1_satisfiedMDUD + -0x1f;\n    WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF = XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZZMCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCis_condition_1_satisfiedMDUD < 0;\n    is_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVZZis_condition_1_satisfiedYPis_condition_1_satisfiedCCM = XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZZMCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCis_condition_1_satisfiedMDUD == 0;\n    difference = CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH;\n    if (!is_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVZZis_condition_1_satisfiedYPis_condition_1_satisfiedCCM && WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF == AKUVEPWQGXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZ) {\n      GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV = CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW << (CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH & 0xff);\n      CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW = CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW >> (0xcU - XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZZMCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCis_condition_1_satisfiedMDUD & 0xff);\n      shifted_y_shift_amountoto is_x_shifted_greaterAB_08008458;\n    }\n  }\n  if (is_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVZZis_condition_1_satisfiedYPis_condition_1_satisfiedCCM || WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF != AKUVEPWQGXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZ) {\n    Uis_condition_1_satisfiedWWFis_x_positiveAGJis_condition_1_satisfied = 0x20 - difference;\n  }\n  CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW = CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW << (difference & 0xff);\n  if (is_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVZZis_condition_1_satisfiedYPis_condition_1_satisfiedCCM || WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF != AKUVEPWQGXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZ) {\n    CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW = CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW | GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV >> (Uis_condition_1_satisfiedWWFis_x_positiveAGJis_condition_1_satisfied & 0xff);\n  }\n  if (is_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVZZis_condition_1_satisfiedYPis_condition_1_satisfiedCCM || WJXCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZQGis_x_shifted_greaterF != AKUVEPWQGXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZ) {\n    GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV = GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV << (difference & 0xff);\n  }\nis_x_shifted_greaterAB_08008458:\n  if ((int)CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH <= (int)XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZDPis_x_shifted_greaterAVPDMI) {\n    retu_var9_is_negativern Cis_x_positiveis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVCAis_condition_1_satisfied44(CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW + (XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZDPis_x_shifted_greaterAVPDMI - CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH) * 0x100000 | WPKis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCXis_x_positiveX,GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV);\n  }\n  difference = ~(XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZDPis_x_shifted_greaterAVPDMI - CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSDHis_x_positiveGHGKMH);\n  if ((int)difference < 0x1f) {\n    XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZZMCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCis_condition_1_satisfiedMDUD = difference - 0x13;\n    if (XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZZMCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCis_condition_1_satisfiedMDUD != 0 && XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZZMCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCis_condition_1_satisfiedMDUD < 0 == CUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZY4(difference - 0x1f,0xc)) {\n      retu_var9_is_negativern Cis_x_positiveis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVCAis_condition_1_satisfied44(ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA,GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV >> (0x20 - (0xcU - XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZZMCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCis_condition_1_satisfiedMDUD) & 0xff) | CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW << (0xcU - XAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZZMCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCis_condition_1_satisfiedMDUD & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference = difference + 1;\n    retu_var9_is_negativern Cis_x_positiveis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVCAis_condition_1_satisfied44(WPKis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVHCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSCXis_x_positiveX | CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW >> (difference & 0xff),\n                    GPis_x_positiveXXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZKYJHV >> (difference & 0xff) | CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW << (0x20 - difference & 0xff));\n  }\n  retu_var9_is_negativern Cis_x_positiveis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVCAis_condition_1_satisfied44(ECEFAXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZPis_x_shifted_greaterYA,CJDCis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVis_condition_1_satisfiedCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSis_condition_1_satisfiedJJXMXAMWECUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSUPCUWRDBis_condition_1_satisfiedOis_condition_1_satisfiedSZENGVKW >> (difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "calculate_result_080082d4",
            "entrypoint": "0x080082d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080082d4": "calculate_result_080082d4",
                "L": "is_x_shifted_greater",
                "N": "is_addition_overflow",
                "O": "is_x_positive",
                "R": "u_var4_is_negative",
                "S": "u_var11_is_negative",
                "T": "is_condition_1_satisfied",
                "bVar13": "is_equal",
                "bVar14": "is_zero",
                "bVar15": "is_negative",
                "bVar2": "carry",
                "g": "shifted_y_shift_amount",
                "iVar1": "shift1",
                "iVar6": "shift2",
                "m": "u_var11_is_negative_shifted_wover",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "u": "u_var9_is_negative",
                "uVar10": "difference",
                "uVar11": "temp5",
                "uVar12": "temp6",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar7": "shifted_input2",
                "uVar8": "temp4",
                "uVar9": "shifted_input4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800854c": {
            "additional_data": {
                "0": {
                    "1": "constant_0"
                },
                "0U": {
                    "1": "zero_unsigned"
                },
                "0x100000": {
                    "1": "concatenation_constant"
                },
                "0x13": {
                    "1": "subtract_amount"
                },
                "0x15": {
                    "1": "shift_addition_constant"
                },
                "0x1e": {
                    "1": "diff_threshold"
                },
                "0x1f": {
                    "1": "bit_shift_subtraction_minus_one"
                },
                "0x20": {
                    "1": "bit_width"
                },
                "0x20 - (0xcU - iVar3)": {
                    "1": "last_bit_shift"
                },
                "0x20 - uVar2": {
                    "1": "bit_shift_and"
                },
                "0x20 - uVar2 & 0xff": {
                    "1": "right_shift_amount"
                },
                "0x432": {
                    "1": "high_threshold"
                },
                "0x433": {
                    "1": "conditional_threshold"
                },
                "0xc": {
                    "1": "shift_amount4"
                },
                "0xcU - iVar3 & 0xff": {
                    "1": "left_shift_amount"
                },
                "CONCAT44": {
                    "1": "concatenate_results"
                },
                "FUN_0800854c": {
                    "1": "reverse_bits_and_concatenate",
                    "3": "bitwise_shift",
                    "4": "reverse_bits",
                    "5": "shift_and_concatenate",
                    "6": "shift_and_concat"
                },
                "LAB_08008458": {
                    "1": "shift_finish",
                    "2": "end_label"
                },
                "SBORROW4": {
                    "1": "subtraction_borrow"
                },
                "SCARRY4": {
                    "1": "subtraction_carry"
                },
                "bVar5": {
                    "1": "is_zero",
                    "20": "is_negative",
                    "4": "is_negative_shift"
                },
                "bVar6": {
                    "1": "equal_to_zero",
                    "2": "is_equal_to_zero",
                    "22": "is_zero",
                    "4": "is_zero_shift"
                },
                "bVar7": {
                    "1": "is_overflow_subtract",
                    "2": "carry_flag",
                    "3": "is_carry",
                    "5": "is_borrow",
                    "7": "is_overflow"
                },
                "concat44": {
                    "1": "combine_values"
                },
                "iVar3": {
                    "1": "num_of_bits",
                    "10": "leading_zeros",
                    "2": "shift_amount",
                    "4": "lzcount_result",
                    "5": "bit_count"
                },
                "in_r12": {
                    "1": "difference",
                    "19": "remaining_bits",
                    "2": "remaining_shift",
                    "3": "remainder"
                },
                "param_1": {
                    "1": "number",
                    "19": "input",
                    "4": "input_number",
                    "7": "input_value"
                },
                "param_1_temp": {
                    "1": "temp_input_value"
                },
                "uVar1": {
                    "1": "output",
                    "2": "upper_bits",
                    "3": "result",
                    "6": "shifted_value"
                },
                "uVar2": {
                    "1": "shifted_input",
                    "16": "shift_amount",
                    "2": "shift_amount1"
                },
                "uVar2_temp": {
                    "1": "temp_shift_amount"
                },
                "uVar4": {
                    "1": "new_num_of_bits",
                    "2": "offset",
                    "3": "shift_amount",
                    "4": "total_bits"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001994"
            ],
            "code": "\nulonglong shift_and_concat_0800854c(uint input)\n\n{\n  uint shifted_value;\n  uint shift_amount;\n  int leading_zeros;\n  uint total_bits;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_overflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  shifted_value = 0;\n  leading_zeros = LZCOUNT(input);\n  total_bits = leading_zeros + 0x15;\n  is_overflow = subtraction_borrow(total_bits,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (total_bits < 0x20) {\n    is_overflow = subtraction_carry(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = total_bits;\n    if (!is_zero && is_overflow == false) {\n      shifted_value = input << total_bits;\n      input = input >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto end_label;\n    }\n  }\n  if (is_zero || is_negative != is_overflow) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  input = input << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_overflow) {\n    input = input | zero_unsigned >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_overflow) {\n    shifted_value = 0 << (shift_amount & 0xff);\n  }\nend_label:\n  if (total_bits < 0x433) {\n    return concatenate_results(input + (0x432 - total_bits) * 0x100000,shifted_value);\n  }\n  shift_amount = ~(0x432 - total_bits);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(input >> (shift_amount - 0x1f & 0xff));\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != subtraction_carry(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return concatenate_results(input >> (shift_amount & 0xff),\n                    shifted_value >> (shift_amount & 0xff) | input << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(shifted_value >> (0x20 - (0xcU - leading_zeros) & 0xff) | input << (0xcU - leading_zeros & 0xff));\n}\n\n",
            "current_name": "shift_and_concat_0800854c",
            "entrypoint": "0x0800854c",
            "imported": false,
            "improved": true,
            "renaming": {
                "0U": "zero_unsigned",
                "CONCAT44": "concatenate_results",
                "FUN_0800854c": "shift_and_concat_0800854c",
                "LAB_08008458": "end_label",
                "SBORROW4": "subtraction_borrow",
                "SCARRY4": "subtraction_carry",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_overflow",
                "iVar3": "leading_zeros",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "uVar1": "shifted_value",
                "uVar2": "shift_amount",
                "uVar4": "total_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800856c": {
            "additional_data": {
                "0x100000": {
                    "1": "shift_constant_3"
                },
                "0x13": {
                    "1": "amount_threshold"
                },
                "0x15": {
                    "1": "shift_constant_1"
                },
                "0x1e": {
                    "1": "max_shift_diff_minus_one"
                },
                "0x20": {
                    "1": "word_size"
                },
                "0x20 - (0xcU - iVar4)": {
                    "1": "inverse_shift_amount2"
                },
                "0x20 - (0xcU - iVar4) & 0xff": {
                    "1": "inverse_shift_amount2_tail_mask"
                },
                "0x20 - uVar3": {
                    "1": "inverse_shift_amount"
                },
                "0x20 - uVar3 & 0xff": {
                    "1": "inverse_shift_amount_tail_mask"
                },
                "0x432": {
                    "1": "max_shift_minus_one"
                },
                "0x433": {
                    "1": "max_shift"
                },
                "0x80000000": {
                    "1": "sign_bit"
                },
                "0x80000000ffffffff": {
                    "1": "upper_32_bits_mask"
                },
                "0xb": {
                    "1": "shift_constant_2"
                },
                "0xc": {
                    "1": "half_word_size"
                },
                "0xcU - iVar4": {
                    "1": "inverse_shift_amount2"
                },
                "0xcU - iVar4 & 0xff": {
                    "1": "inverse_shift_amount2_tail_mask"
                },
                "0xffffffffffffffff": {
                    "1": "lower_64_bits_mask"
                },
                "CONCAT44": {
                    "1": "combine_bits"
                },
                "FUN_0800856c": {
                    "1": "perform_shift_operation",
                    "12": "reverse_bits",
                    "2": "shift_and_concatenate",
                    "4": "bitwise_shift"
                },
                "LAB_08008458": {
                    "1": "shift_operations"
                },
                "LZCOUNT": {
                    "1": "leading_zero_count"
                },
                "bVar7": {
                    "1": "leading_zeros_less_than_zero",
                    "16": "is_negative",
                    "3": "less_than_zero"
                },
                "bVar8": {
                    "1": "equals_zero",
                    "17": "is_zero",
                    "2": "is_zero_shift"
                },
                "bVar9": {
                    "1": "is_carry_over",
                    "2": "is_borrow",
                    "3": "carry_flag",
                    "4": "is_carry",
                    "5": "overflow"
                },
                "iVar4": {
                    "1": "bit_difference",
                    "17": "leading_zeros",
                    "2": "leading_zero_bits",
                    "3": "bit_count",
                    "4": "leading_zeroes"
                },
                "in_r12": {
                    "1": "constant_32",
                    "13": "remaining_bits",
                    "2": "bit_mask",
                    "4": "temp"
                },
                "new_param_1": {
                    "1": "new_input"
                },
                "new_var_1": {
                    "1": "new_shift_count"
                },
                "new_var_10": {
                    "1": "new_invert_mask"
                },
                "new_var_2": {
                    "1": "new_temp"
                },
                "new_var_3": {
                    "1": "new_remaining_bits"
                },
                "new_var_4": {
                    "1": "new_bit_count"
                },
                "new_var_5": {
                    "1": "new_shift_amount"
                },
                "new_var_6": {
                    "1": "new_sign_bit"
                },
                "new_var_7": {
                    "1": "is_negative"
                },
                "new_var_8": {
                    "1": "is_zero"
                },
                "new_var_9": {
                    "1": "is_borrow"
                },
                "param_1": {
                    "1": "number",
                    "20": "input",
                    "6": "input_value"
                },
                "param_1 & uVar2 >> (uVar3 - 0x1f & 0xff)": {
                    "1": "result3"
                },
                "uVar1": {
                    "1": "temporary_var1",
                    "2": "shift_count",
                    "3": "count",
                    "4": "shift_amount",
                    "6": "bit_count"
                },
                "uVar1 >> (0x20 - (0xcU - iVar4) & 0xff) | uVar2 << (0xcU - iVar4 & 0xff)": {
                    "1": "result4"
                },
                "uVar1 >> (uVar3 & 0xff) | uVar2 << (0x20 - uVar3 & 0xff)": {
                    "1": "result2"
                },
                "uVar2": {
                    "1": "abs_num",
                    "10": "abs_input",
                    "2": "abs_number",
                    "4": "absolute_value",
                    "5": "abs_value"
                },
                "uVar2 << (0xcU - iVar4 & 0xff)": {
                    "1": "shifted_value1"
                },
                "uVar3": {
                    "1": "bit_count1",
                    "14": "shift_amount",
                    "2": "shift",
                    "5": "shift_count"
                },
                "uVar3 & 0xff": {
                    "1": "shift_amount_tail_mask"
                },
                "uVar5": {
                    "1": "adjusted_shift_amount",
                    "2": "shifted_amount",
                    "3": "shift_amount"
                },
                "uVar6": {
                    "1": "bit31",
                    "24": "sign_bit"
                },
                "uVar6 | uVar2 >> (uVar3 & 0xff)": {
                    "1": "result1"
                },
                "uVar7": {
                    "1": "bit_mask"
                },
                "uVar_h": {
                    "1": "high_bits"
                },
                "uVar_l": {
                    "1": "low_bits"
                }
            },
            "called": [],
            "calling": [
                "FUN_08009d78",
                "FUN_0800a5a0",
                "FUN_08002c18"
            ],
            "code": "\nulonglong reverse_bits_0800856c(uint input)\n\n{\n  uint bit_count;\n  uint abs_input;\n  uint shift_amount;\n  int leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool overflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  sign_bit = input & 0x80000000;\n  abs_input = input;\n  if ((int)sign_bit < 0) {\n    abs_input = -input;\n  }\n  bit_count = 0;\n  leading_zeros = leading_zero_count(abs_input);\n  shift_amount = leading_zeros + 0x15;\n  overflow = SBORROW4(shift_amount,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (shift_amount < 0x20) {\n    overflow = SCARRY4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = shift_amount;\n    if (!is_zero && overflow == false) {\n      bit_count = abs_input << shift_amount;\n      abs_input = abs_input >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto calculate_result;\n    }\n  }\n  if (is_zero || is_negative != overflow) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  abs_input = abs_input << (shift_amount & 0xff);\n  if (is_zero || is_negative != overflow) {\n    abs_input = abs_input | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != overflow) {\n    bit_count = 0 << (shift_amount & 0xff);\n  }\ncalculate_result:\n  if (shift_amount < 0x433) {\n    return combine_bits(abs_input + (0x432 - shift_amount) * 0x100000 | sign_bit,bit_count);\n  }\n  shift_amount = ~(0x432 - shift_amount);\n  if (0x1e < (int)shift_amount) {\n    return combine_bits(input,abs_input >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return combine_bits(sign_bit | abs_input >> (shift_amount & 0xff),\n                    bit_count >> (shift_amount & 0xff) | abs_input << (0x20 - shift_amount & 0xff));\n  }\n  return combine_bits(input,bit_count >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_input << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_bits_0800856c",
            "entrypoint": "0x0800856c",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "combine_bits",
                "FUN_0800856c": "reverse_bits_0800856c",
                "LAB_08008458": "calculate_result",
                "LZCOUNT": "leading_zero_count",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "overflow",
                "iVar4": "leading_zeros",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "uVar1": "bit_count",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "uVar5": "shift_amount",
                "uVar6": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008590": {
            "additional_data": {
                "0x1e": {
                    "1": "comparison_constant"
                },
                "0x380 - uVar7": {
                    "1": "shift_constant_inverse"
                },
                "CONCAT44": {
                    "1": "concatenate_64bits"
                },
                "FUN_08008590": {
                    "1": "calculate_shifted_value",
                    "17": "reverse_bits",
                    "2": "process_input"
                },
                "LZCOUNT": {
                    "1": "leading_zeros_count",
                    "2": "leading_zero_count"
                },
                "SBORROW4": {
                    "1": "subtract_borrow4"
                },
                "SCARRY4": {
                    "1": "signed_carry_flag_check"
                },
                "bVar10": {
                    "1": "is_borrow",
                    "2": "carry_flag",
                    "3": "is_negative"
                },
                "bVar8": {
                    "1": "is_shift_negative",
                    "2": "carry",
                    "3": "is_zero_shift",
                    "4": "is_negative",
                    "8": "is_zero"
                },
                "bVar9": {
                    "1": "temp4",
                    "2": "is_param4_zero",
                    "4": "is_zero"
                },
                "iVar6": {
                    "1": "shift_count",
                    "10": "bit_count",
                    "2": "leading_zeros",
                    "4": "num_bits",
                    "7": "count"
                },
                "in_r12": {
                    "1": "ignore4",
                    "2": "temp2",
                    "4": "remaining_bits",
                    "5": "temp",
                    "6": "remainder"
                },
                "param_1": {
                    "1": "input_num",
                    "10": "input_value",
                    "19": "input"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "unused_param_1",
                    "3": "unused",
                    "7": "param2"
                },
                "param_3": {
                    "1": "unused2",
                    "2": "unused_param2",
                    "3": "unused",
                    "7": "param3"
                },
                "param_4": {
                    "1": "arg3",
                    "2": "unused_param_3",
                    "3": "flag",
                    "5": "mask",
                    "7": "param4"
                },
                "uVar1": {
                    "1": "bit31_set",
                    "3": "bit31",
                    "6": "sign_extension",
                    "8": "sign_bit"
                },
                "uVar2": {
                    "1": "var2",
                    "3": "result",
                    "6": "temp1",
                    "8": "shifted_input"
                },
                "uVar3": {
                    "1": "extended_sign_bit",
                    "12": "result",
                    "2": "bit_mask",
                    "4": "result_high"
                },
                "uVar4": {
                    "1": "shifted_val",
                    "2": "shifted_input",
                    "5": "shift_amount",
                    "6": "shift_count"
                },
                "uVar5": {
                    "1": "shifted_input_times_two",
                    "2": "temp_value",
                    "4": "temp2",
                    "5": "temp"
                },
                "uVar7": {
                    "1": "difference",
                    "2": "shifted_count",
                    "8": "shift_amount"
                },
                "~(0x380 - uVar7)": {
                    "1": "shift_constant"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003004",
                "FUN_08002638",
                "FUN_080005b4",
                "FUN_08002408",
                "FUN_08004e30",
                "FUN_080046d0",
                "FUN_08001f00",
                "FUN_08003b98",
                "FUN_08004940",
                "FUN_0800056c",
                "FUN_080044e8",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_08002c18"
            ],
            "code": "\nulonglong reverse_bits_08008590(uint input,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  uint sign_bit;\n  uint shifted_input;\n  uint result;\n  uint shift_count;\n  uint shifted_input;\n  int bit_count;\n  uint shift_amount;\n  uint remainder;\n  bool is_zero;\n  bool is_zero;\n  bool is_negative;\n  \n  shifted_input = input << 1;\n  is_zero = shifted_input == 0;\n  sign_bit = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shift_count = (uint)((int)shifted_input >> 3) >> 1;\n  result = sign_bit | shift_count;\n  input = input << 0x1d;\n  if (!is_zero) {\n    param4 = shifted_input & 0xff000000;\n    is_zero = param4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = param4 == 0xff000000;\n  }\n  if (!is_zero) {\n    return concatenate_64bits(result,input) ^ 0x3800000000000000;\n  }\n  if ((shifted_input & 0xffffff) == 0) {\n    return concatenate_64bits(result,input);\n  }\n  if (param4 == 0xff000000) {\n    return concatenate_64bits(result,input) | 0x8000000000000;\n  }\n  shifted_input = input;\n  shifted_input = shift_count;\n  if (shift_count == 0) {\n    shifted_input = 0;\n    shifted_input = input;\n  }\n  bit_count = leading_zero_count(shifted_input);\n  if (shift_count == 0) {\n    bit_count = bit_count + 0x20;\n  }\n  shift_amount = bit_count - 0xb;\n  is_negative = subtract_borrow4(shift_amount,0x20);\n  shift_count = bit_count - 0x2b;\n  is_zero = (int)shift_count < 0;\n  is_zero = shift_count == 0;\n  if ((int)shift_amount < 0x20) {\n    is_negative = subtract_carry4(shift_count,0xc);\n    bit_count = bit_count + -0x1f;\n    is_zero = bit_count < 0;\n    is_zero = bit_count == 0;\n    shift_count = shift_amount;\n    if (!is_zero && is_zero == is_negative) {\n      shifted_input = shifted_input << (shift_amount & 0xff);\n      shifted_input = shifted_input >> (0xcU - bit_count & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_zero || is_zero != is_negative) {\n    remainder = 0x20 - shift_count;\n  }\n  shifted_input = shifted_input << (shift_count & 0xff);\n  if (is_zero || is_zero != is_negative) {\n    shifted_input = shifted_input | shifted_input >> (remainder & 0xff);\n  }\n  if (is_zero || is_zero != is_negative) {\n    shifted_input = shifted_input << (shift_count & 0xff);\n  }\nLAB_08008458:\n  if ((int)shift_amount < 0x381) {\n    return concatenate_64bits(shifted_input + (0x380 - shift_amount) * 0x100000 | sign_bit,shifted_input);\n  }\n  shift_count = ~(0x380 - shift_amount);\n  if (0x1e < (int)shift_count) {\n    return concatenate_64bits(result,shifted_input >> (shift_count - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  bit_count = shift_count - 0x13;\n  if (bit_count == 0 || bit_count < 0 != subtract_carry4(shift_count - 0x1f,0xc)) {\n    shift_count = shift_count + 1;\n    return concatenate_64bits(sign_bit | shifted_input >> (shift_count & 0xff),\n                    shifted_input >> (shift_count & 0xff) | shifted_input << (0x20 - shift_count & 0xff));\n  }\n  return concatenate_64bits(result,shifted_input >> (0x20 - (0xcU - bit_count) & 0xff) | shifted_input << (0xcU - bit_count & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_bits_08008590",
            "entrypoint": "0x08008590",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate_64bits",
                "FUN_08008590": "reverse_bits_08008590",
                "LZCOUNT": "leading_zero_count",
                "SBORROW4": "subtract_borrow4",
                "SCARRY4": "subtract_carry4",
                "bVar10": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "is_zero",
                "iVar6": "bit_count",
                "in_r12": "remainder",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "sign_bit",
                "uVar2": "shifted_input",
                "uVar3": "result",
                "uVar4": "shift_count",
                "uVar5": "shifted_input",
                "uVar7": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008640": {
            "additional_data": {
                "FUN_08008640": {
                    "1": "calculate_product_with_carry",
                    "15": "calculate_result",
                    "3": "calculate_floating_point",
                    "6": "calculate_sum"
                },
                "bVar10": {
                    "1": "is_condition2",
                    "15": "flag2",
                    "2": "condition2",
                    "3": "is_negative"
                },
                "bVar11": {
                    "1": "flag2",
                    "15": "flag3",
                    "2": "condition3"
                },
                "bVar9": {
                    "1": "temp_bool1",
                    "15": "flag1",
                    "2": "is_zero1",
                    "5": "is_zero"
                },
                "iVar5": {
                    "1": "result",
                    "14": "temp3",
                    "2": "temp_var3",
                    "3": "var3",
                    "4": "temp5"
                },
                "lVar2": {
                    "1": "temp_var1",
                    "16": "result2",
                    "2": "temp",
                    "3": "temp_var",
                    "4": "temp2"
                },
                "param_1": {
                    "1": "input_value1",
                    "20": "input1"
                },
                "param_2": {
                    "1": "arg2",
                    "20": "input2",
                    "3": "exponent_bits"
                },
                "param_3": {
                    "1": "num3",
                    "2": "fraction_bits",
                    "20": "input3"
                },
                "param_4": {
                    "1": "value4",
                    "20": "input4"
                },
                "uVar1": {
                    "1": "result_1",
                    "16": "result1",
                    "2": "product",
                    "4": "temp1",
                    "5": "result"
                },
                "uVar12": {
                    "1": "temp10",
                    "2": "temp8",
                    "3": "result",
                    "5": "combined_input"
                },
                "uVar3": {
                    "1": "prod_upper32",
                    "14": "temp1",
                    "2": "temp_var1",
                    "3": "var1",
                    "4": "temp3"
                },
                "uVar4": {
                    "1": "upper11_bits_input2",
                    "14": "temp2",
                    "2": "temp_var2",
                    "3": "var2",
                    "4": "temp4"
                },
                "uVar6": {
                    "1": "difference",
                    "14": "temp4",
                    "2": "temp_var4",
                    "3": "var4",
                    "4": "temp6"
                },
                "uVar7": {
                    "1": "temp_mant2",
                    "11": "temp6",
                    "2": "temp5",
                    "3": "temp8"
                },
                "uVar8": {
                    "1": "round_low",
                    "12": "temp7",
                    "2": "temp6",
                    "3": "temp9"
                },
                "uint param_2": {
                    "1": "input2"
                },
                "uint param_3": {
                    "1": "input3"
                },
                "uint param_4": {
                    "1": "input4"
                },
                "unaff_r5": {
                    "1": "upper11_bits_input4",
                    "12": "temp5",
                    "2": "temp2",
                    "3": "temp7"
                },
                "undefined4 param_1": {
                    "1": "input1"
                }
            },
            "called": [
                "FUN_0800881c"
            ],
            "calling": [
                "FUN_08003004",
                "FUN_08002638",
                "FUN_08009d78",
                "FUN_0800a5a0",
                "FUN_080046d0",
                "FUN_08001f00",
                "FUN_0800af78",
                "FUN_0800b2e8",
                "FUN_08004940",
                "FUN_0800a1bc",
                "FUN_0800056c",
                "FUN_0800a348",
                "FUN_080044e8",
                "FUN_08009b24",
                "FUN_08001994",
                "FUN_0800adf0",
                "FUN_08002c18"
            ],
            "code": "\nulonglong calculate_result_08008640(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong combined_input;\n  \n  combined_input = CONCAT44(input2,input1);\n  temp6 = 0x7ff;\n  temp2 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    temp5 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp5 == 0x7ff;\n  }\n  if (flag1) {\n    combined_input = FUN_0800881c();\n  }\n  temp1 = (uint)(combined_input >> 0x20);\n  temp3 = temp2 + temp5;\n  temp2 = temp1 ^ input4;\n  temp1 = temp1 & ~(temp6 << 0x15);\n  input4 = input4 & ~(temp6 << 0x15);\n  flag1 = ((uint)combined_input | temp1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input3 | input4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (flag1) {\n    input3 = (uint)combined_input | input3;\n    input4 = (temp2 & 0x80000000 | temp1) ^ input4;\n    temp2 = temp6 >> 1;\n    flag3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    flag1 = temp4 == 0;\n    temp1 = temp4;\n    if (!flag1 && (int)temp2 <= temp3) {\n      flag3 = SBORROW4(temp6,temp4);\n      temp1 = temp6 - temp4;\n      flag1 = temp6 == temp4;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      input4 = input4 | temp4 * 0x100000;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp6 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    flag1 = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    result1 = (combined_input & 0xffffffff) * (ulonglong)input3;\n    combined_input = (combined_input & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp1 * (ulonglong)input3 + (result1 >> 0x20);\n    temp7 = (uint)combined_input;\n    result2 = (ulonglong)temp1 * (ulonglong)input4 + (combined_input >> 0x20);\n    temp6 = (uint)result2;\n    temp1 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      temp7 = temp7 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      flag1 = (temp7 & 0x80000000) != 0;\n      temp7 = temp7 << 1;\n      result2 = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp6,temp6) || CARRY4(temp6 * 2,(uint)flag1)),\n                       temp6 * 2 + (uint)flag1);\n    }\n    input4 = temp2 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    input3 = (uint)result2 << 0xb | temp7 >> 0x15;\n    temp6 = temp7 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    flag1 = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      flag1 = temp1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp6;\n      if (temp6 == 0x80000000) {\n        flag1 = (temp7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp4 * 0x100000 + (uint)CARRY4(input3,(uint)flag1),input3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  flag1 = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = input3 >> (temp1 & 0xff) | input4 << (0x20 - temp1 & 0xff);\n    temp2 = (input4 >> (temp1 & 0xff) & ~((input4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp6 | input3 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(input4,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    temp7 = input3 << (temp4 + 0x20 & 0xff);\n    temp1 = input3 >> (temp2 & 0xff) | input4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp7 >> 0x1f);\n    if ((temp6 | temp7 << 1) == 0) {\n      temp4 = temp4 & ~(temp7 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp7 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = input3 << (temp2 & 0xff);\n  temp2 = input3 >> (0x20 - temp2 & 0xff) | input4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp6 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "current_name": "calculate_result_08008640",
            "entrypoint": "0x08008640",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008640": "calculate_result_08008640",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "bVar9": "flag1",
                "iVar5": "temp3",
                "lVar2": "result2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar12": "combined_input",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar6": "temp4",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "unaff_r5": "temp5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800881c": {
            "additional_data": {
                "<bVar4>": {
                    "1": "bool_var"
                },
                "<in_r12>": {
                    "1": "constant_val"
                },
                "<param_1>": {
                    "1": "input1"
                },
                "<param_2>": {
                    "1": "input2"
                },
                "<param_3>": {
                    "1": "input3"
                },
                "<param_4>": {
                    "1": "input4"
                },
                "<uVar1>": {
                    "1": "temp_var2"
                },
                "<uVar2>": {
                    "1": "temp_var3"
                },
                "<uVar3>": {
                    "1": "temp_var4"
                },
                "<unaff_r4>": {
                    "1": "temp_var1"
                },
                "FUN_0800881c": {
                    "1": "calculate_bitwise_xor",
                    "2": "calculate_bitwise_difference",
                    "3": "calculate_shifted_value",
                    "5": "calculate_result",
                    "6": "reverse_bits"
                },
                "bVar4": {
                    "1": "temp_var_6",
                    "2": "flag_1",
                    "24": "is_zero"
                },
                "in_r12": {
                    "1": "flag2",
                    "2": "constant",
                    "3": "temp2",
                    "4": "bit_5"
                },
                "param_1": {
                    "1": "input_value1",
                    "11": "input_1",
                    "15": "input1"
                },
                "param_2": {
                    "1": "value_2",
                    "11": "input_2",
                    "15": "input2"
                },
                "param_3": {
                    "1": "num3",
                    "11": "input_3",
                    "15": "input3"
                },
                "param_4": {
                    "1": "input_value4",
                    "11": "input_4",
                    "15": "input4"
                },
                "uVar1": {
                    "1": "bit_check_1",
                    "2": "temp_2",
                    "3": "bit_1",
                    "8": "bit1"
                },
                "uVar2": {
                    "1": "shifted_val",
                    "2": "bit3",
                    "3": "temp3",
                    "6": "bit2"
                },
                "uVar3": {
                    "1": "temp2",
                    "2": "bit4",
                    "3": "temp4",
                    "4": "bit3",
                    "5": "result"
                },
                "uVar5": {
                    "1": "temp1",
                    "2": "result"
                },
                "uVar6": {
                    "1": "temp2"
                },
                "unaff_r4": {
                    "1": "input4_backup",
                    "2": "temp2",
                    "3": "temp_1",
                    "4": "bit_2",
                    "6": "temp1"
                }
            },
            "called": [],
            "calling": [
                "FUN_08008640"
            ],
            "code": "\nulonglong reverse_bits_0800881c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint bit2;\n  uint result;\n  uint mask;\n  bool is_zero;\n  \n  bit2 = mask & input4 >> 0x14;\n  if (temp1 != mask && bit2 != mask) {\n    is_zero = (input1 | input2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input3 | input4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (temp1 == 0) {\n      result = input2 & 0x80000000;\n      do {\n        bit1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(bit1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | result;\n      if (bit2 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      bit2 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(bit2 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  is_zero = (input1 | input2 << 1) == 0;\n  if (is_zero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 1) == 0;\n  }\n  result = input2;\n  if (((!is_zero) && ((temp1 != mask || ((input1 | input2 << 0xc) == 0)))) &&\n     ((bit2 != mask || (input1 = input3, result = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(result,input1) | 0x7ff8000000000000;\n}\n\n",
            "current_name": "reverse_bits_0800881c",
            "entrypoint": "0x0800881c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800881c": "reverse_bits_0800881c",
                "bVar4": "is_zero",
                "in_r12": "mask",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "uVar2": "bit2",
                "uVar3": "result",
                "unaff_r4": "temp1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008894": {
            "additional_data": {
                "FUN_08008894": {
                    "1": "calculate_float_value",
                    "17": "calculate_floating_point",
                    "2": "calculate_floating_point_value"
                },
                "bVar14": {
                    "1": "condition_check",
                    "2": "is_zero1",
                    "7": "flag1",
                    "9": "is_zero"
                },
                "bVar15": {
                    "1": "temp_bool1",
                    "2": "is_zero2",
                    "5": "is_equal",
                    "7": "flag2"
                },
                "bVar16": {
                    "1": "flag_var_3",
                    "2": "carry_check",
                    "3": "is_negative",
                    "4": "is_overflow",
                    "7": "flag3"
                },
                "bVar17": {
                    "1": "is_last_bit_set",
                    "2": "is_carry",
                    "3": "flag4"
                },
                "bVar18": {
                    "1": "is_bit_set"
                },
                "iVar8": {
                    "1": "diff_exponent",
                    "2": "temp_8",
                    "3": "temp_var8",
                    "5": "difference",
                    "7": "exponent_difference"
                },
                "param_1": {
                    "1": "integer_part",
                    "12": "sign",
                    "2": "input_param1",
                    "5": "input1"
                },
                "param_2": {
                    "1": "fractional_bit_pattern",
                    "12": "exponent",
                    "2": "input_param2",
                    "5": "input2"
                },
                "param_3": {
                    "1": "third_parameter",
                    "2": "mantissa1",
                    "5": "mantissa_high"
                },
                "param_4": {
                    "1": "sign_and_exponent_bits_2",
                    "2": "input_param4",
                    "5": "input4"
                },
                "uVar1": {
                    "1": "first_bit_of_exponent",
                    "10": "temp1",
                    "2": "temp_1",
                    "3": "temp_var1"
                },
                "uVar10": {
                    "1": "temp_var_10",
                    "2": "temp10",
                    "3": "temp11",
                    "4": "temp9"
                },
                "uVar11": {
                    "1": "temp_result1",
                    "2": "temp10",
                    "3": "temp12"
                },
                "uVar12": {
                    "1": "result2",
                    "2": "difference",
                    "3": "temp13"
                },
                "uVar13": {
                    "1": "u_var13",
                    "2": "max_value",
                    "3": "temp14"
                },
                "uVar15": {
                    "1": "result_exponent"
                },
                "uVar17": {
                    "1": "u_var17",
                    "11": "result",
                    "3": "temp_result"
                },
                "uVar18": {
                    "1": "temp13"
                },
                "uVar19": {
                    "1": "mantissa_result"
                },
                "uVar2": {
                    "1": "first_bit_of_mantissa_high",
                    "10": "temp2",
                    "2": "temp_2",
                    "3": "temp_var2"
                },
                "uVar20": {
                    "1": "fraction_bit_shift_1"
                },
                "uVar21": {
                    "1": "fraction_bit_shift_2"
                },
                "uVar22": {
                    "1": "result15"
                },
                "uVar23": {
                    "1": "result16"
                },
                "uVar24": {
                    "1": "fraction_bit_shift_5"
                },
                "uVar25": {
                    "1": "fraction_bit_shift_6"
                },
                "uVar26": {
                    "1": "fraction_bit_shift_7"
                },
                "uVar27": {
                    "1": "fraction_bit_shift_8"
                },
                "uVar28": {
                    "1": "fraction_bit_shift_9"
                },
                "uVar29": {
                    "1": "fraction_bit_shift_10"
                },
                "uVar3": {
                    "1": "shifted_fraction",
                    "10": "temp3",
                    "2": "temp_3",
                    "3": "temp_var3"
                },
                "uVar30": {
                    "1": "fraction_bit_shift_11"
                },
                "uVar31": {
                    "1": "fraction_bit_shift_12"
                },
                "uVar32": {
                    "1": "fraction_bit_shift_16"
                },
                "uVar33": {
                    "1": "fraction_bit_shift_20"
                },
                "uVar34": {
                    "1": "fraction_bit_shift_24"
                },
                "uVar35": {
                    "1": "fraction_bit_shift_25"
                },
                "uVar36": {
                    "1": "fraction_bit_shift_26"
                },
                "uVar37": {
                    "1": "fraction_bit_shift_28"
                },
                "uVar38": {
                    "1": "fraction_bit_shift_29"
                },
                "uVar39": {
                    "1": "fraction_bit_shift_32"
                },
                "uVar4": {
                    "1": "result4",
                    "10": "temp4",
                    "2": "temp_4",
                    "3": "temp_var4"
                },
                "uVar40": {
                    "1": "fraction_bit_shift_36"
                },
                "uVar41": {
                    "1": "fraction_bit_shift_40"
                },
                "uVar42": {
                    "1": "fraction_bit_shift_44"
                },
                "uVar43": {
                    "1": "fraction_bit_shift_48"
                },
                "uVar44": {
                    "1": "biased_exponent_check"
                },
                "uVar45": {
                    "1": "carry_bit"
                },
                "uVar46": {
                    "1": "fraction_bit_32"
                },
                "uVar47": {
                    "1": "fraction_bit_16"
                },
                "uVar48": {
                    "1": "fraction_bit_8"
                },
                "uVar49": {
                    "1": "fraction_bit_4"
                },
                "uVar5": {
                    "1": "bit",
                    "10": "temp5",
                    "2": "temp2",
                    "3": "temp_var5"
                },
                "uVar50": {
                    "1": "fraction_bit_2"
                },
                "uVar51": {
                    "1": "fraction_bit_1"
                },
                "uVar6": {
                    "1": "shift_amount",
                    "10": "temp6",
                    "2": "temp2",
                    "3": "temp_var6"
                },
                "uVar7": {
                    "1": "result",
                    "10": "temp7",
                    "2": "temp_7",
                    "3": "temp_var7"
                },
                "uVar8": {
                    "1": "result_mantissa"
                },
                "uVar9": {
                    "1": "shifted_fraction",
                    "2": "temp_9",
                    "3": "temp_var9",
                    "4": "temp8",
                    "5": "temp9"
                },
                "unaff_r5": {
                    "1": "end",
                    "2": "temp_10",
                    "3": "temp10"
                }
            },
            "called": [
                "FUN_08008a02"
            ],
            "calling": [
                "FUN_080098d0",
                "FUN_08003004",
                "FUN_0800a1bc",
                "FUN_080005b4",
                "FUN_08001994",
                "FUN_0800af78",
                "FUN_08009990"
            ],
            "code": "\nulonglong calculate_floating_point_08008894(undefined4 sign,uint exponent,uint mantissa_high,uint mantissa_low)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int exponent_difference;\n  uint temp9;\n  uint temp10;\n  uint temp9;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool is_zero;\n  bool flag2;\n  bool flag3;\n  undefined8 result;\n  \n  result = CONCAT44(exponent,sign);\n  temp14 = 0x7ff;\n  temp7 = exponent >> 0x14 & 0x7ff;\n  is_zero = temp7 == 0;\n  if (!is_zero) {\n    temp10 = mantissa_low >> 0x14 & 0x7ff;\n    is_zero = temp10 == 0;\n  }\n  if (!is_zero) {\n    is_zero = temp7 == 0x7ff;\n  }\n  if (!is_zero) {\n    is_zero = temp10 == 0x7ff;\n  }\n  if (is_zero) {\n    result = FUN_08008a02();\n  }\n  temp9 = (uint)((ulonglong)result >> 0x20);\n  temp12 = (uint)result;\n  exponent_difference = temp7 - temp10;\n  if ((mantissa_high | mantissa_low << 0xc) == 0) {\n    temp7 = (temp9 ^ mantissa_low) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(exponent_difference,temp14 >> 1);\n    temp9 = exponent_difference + (temp14 >> 1);\n    is_zero = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && is_zero == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      is_zero = (int)(temp14 - temp9) < 0;\n      flag2 = temp14 == temp9;\n    }\n    if (!flag2 && is_zero == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && is_zero == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    is_zero = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (mantissa_low << 0xc) >> 4 | 0x10000000 | mantissa_high >> 0x18;\n    temp14 = mantissa_high << 8;\n    temp9 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ mantissa_low) & 0x80000000;\n    is_zero = temp3 <= temp9;\n    if (temp9 == temp3) {\n      is_zero = temp14 <= temp12;\n    }\n    exponent_difference = exponent_difference + (uint)is_zero;\n    temp9 = exponent_difference + 0x3fd;\n    if (is_zero == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((mantissa_high >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp9 = (temp9 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      is_zero = temp1 <= temp13;\n      if (temp4 < temp9 || temp9 - temp4 < (uint)is_zero) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp9 = (temp9 - temp4) - (uint)!is_zero;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp13;\n      is_zero = temp9 - temp5 < (uint)flag2;\n      temp14 = temp9;\n      if (temp5 < temp9 || is_zero) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp9 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp9 || is_zero) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp9 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp13;\n      is_zero = temp14 - temp9 < (uint)flag2;\n      temp5 = temp14;\n      if (temp9 < temp14 || is_zero) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp9) - (uint)!flag2;\n      }\n      if (temp9 < temp14 || is_zero) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp9 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp13;\n      is_zero = temp5 - temp6 < (uint)flag2;\n      temp9 = temp5;\n      if (temp6 < temp5 || is_zero) {\n        temp13 = temp13 - temp1;\n        temp9 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || is_zero) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp9 | temp13;\n      if (temp14 == 0) break;\n      temp9 = temp9 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_080089b2;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_080089b2:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = exponent_difference + 0x300;\n    is_zero = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !is_zero) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = exponent_difference - 0x400;\n      is_zero = temp4 == 0x700;\n    }\n    if (!flag3 || is_zero) {\n      is_zero = temp6 <= temp9;\n      if (temp9 == temp6) {\n        is_zero = temp1 <= temp13;\n      }\n      if (temp9 == temp6 && temp13 == temp1) {\n        is_zero = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)is_zero),temp12 + is_zero);\n    }\n  }\n  if (!is_zero && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  is_zero = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || is_zero != flag3) {\n    temp12 = 0;\n  }\n  if (flag2 || is_zero != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || is_zero != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp9 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp9 & 0xff) | temp7 << (0x20 - temp9 & 0xff);\n    temp9 = (temp7 >> (temp9 & 0xff) & ~((temp7 & 0x80000000) >> (temp9 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp9 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  exponent_difference = temp3 - 0x14;\n  if (exponent_difference != 0 && exponent_difference < 0 == SCARRY4(temp9,0xc)) {\n    temp9 = 0xc - exponent_difference;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp9 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp9 >> 0x1f);\n  if ((temp14 | temp9 << 1) == 0) {\n    temp9 = temp9 & ~(temp9 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp9 >> 0x1f)),temp9);\n}\n\n",
            "current_name": "calculate_floating_point_08008894",
            "entrypoint": "0x08008894",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008894": "calculate_floating_point_08008894",
                "bVar14": "is_zero",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "iVar8": "exponent_difference",
                "param_1": "sign",
                "param_2": "exponent",
                "param_3": "mantissa_high",
                "param_4": "mantissa_low",
                "uVar1": "temp1",
                "uVar10": "temp9",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "uVar17": "result",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "uVar9": "temp9",
                "unaff_r5": "temp10"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008a02": {
            "additional_data": {
                "CONCAT44": {
                    "1": "concatenate"
                },
                "FUN_08008a02": {
                    "1": "calculate_floating_point",
                    "2": "decode_float",
                    "4": "reverse_bits"
                },
                "LAB_08008838": {
                    "1": "return_case_2"
                },
                "LAB_08008874": {
                    "1": "return_case_1"
                },
                "bVar4": {
                    "1": "is_value_zero",
                    "2": "flag",
                    "22": "is_zero"
                },
                "in_r12": {
                    "1": "magic_value",
                    "2": "temp5",
                    "3": "temp2",
                    "4": "mask",
                    "5": "bit5"
                },
                "param_1": {
                    "1": "first_param",
                    "14": "input1",
                    "3": "input_1",
                    "6": "value1"
                },
                "param_1 & 0x80000000": {
                    "1": "temp7"
                },
                "param_1 << 0xc": {
                    "1": "shifted_input1"
                },
                "param_1 << 1": {
                    "1": "shifted_input1"
                },
                "param_1 | param_2 << 0xc": {
                    "1": "combine_inputs1_and2"
                },
                "param_1 | param_2 << 1": {
                    "1": "combine_inputs1_and2"
                },
                "param_2": {
                    "1": "second_param",
                    "14": "input2",
                    "2": "exponent",
                    "3": "input_2",
                    "6": "value2"
                },
                "param_2 & 0x80000000": {
                    "1": "temp6"
                },
                "param_2 << 0xc": {
                    "1": "shifted_input2"
                },
                "param_2 ^ param_4": {
                    "1": "xor_result"
                },
                "param_3": {
                    "1": "third_param",
                    "14": "input3",
                    "3": "input_3",
                    "6": "value3"
                },
                "param_3 & 0x80000000": {
                    "1": "temp8"
                },
                "param_3 << 1": {
                    "1": "shifted_input3"
                },
                "param_3 | param_4 << 1": {
                    "1": "combine_inputs3_and4"
                },
                "param_4": {
                    "1": "input_param_4",
                    "14": "input4",
                    "3": "input_4",
                    "6": "value4"
                },
                "param_4 & 0x100000": {
                    "1": "temp10"
                },
                "param_4 & 0x80000000": {
                    "1": "temp9"
                },
                "param_4 << 0xc": {
                    "1": "shifted_input4"
                },
                "param_4 << 1": {
                    "1": "shifted_input4"
                },
                "uVar1": {
                    "1": "bit_a",
                    "14": "bit1",
                    "2": "temp3",
                    "4": "temp1"
                },
                "uVar2": {
                    "1": "masked_r4",
                    "2": "temp4",
                    "3": "temp2",
                    "5": "bit3",
                    "8": "bit2"
                },
                "uVar3": {
                    "1": "temp_exponent",
                    "2": "temp4",
                    "3": "temp3",
                    "5": "bit4",
                    "6": "bit3"
                },
                "uVar4": {
                    "1": "bit_2"
                },
                "uVar5": {
                    "1": "sign_bit"
                },
                "unaff_r4": {
                    "1": "variable1",
                    "2": "temp2",
                    "5": "bit2",
                    "6": "temp1"
                }
            },
            "called": [],
            "calling": [
                "FUN_08008894"
            ],
            "code": "\nulonglong reverse_bits_08008a02(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint bit2;\n  uint bit3;\n  uint bit5;\n  bool is_zero;\n  \n  bit2 = bit5 & input4 >> 0x14;\n  bit3 = input2;\n  if (temp1 != bit5 || bit2 != bit5) {\n    if (temp1 == bit5) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, bit3 = input4, bit2 != bit5)\n         ) {\nreturn_case_1:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit2 == bit5) {\n      input1 = input3;\n      bit3 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nreturn_case_2:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input1 | input2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input3 | input4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (temp1 == 0) {\n          bit3 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | bit3;\n          if (bit2 != 0) {\n            return concatenate(input2,input1);\n          }\n        }\n        do {\n          bit3 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(bit3 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return concatenate(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto return_case_1;\n      if ((input3 | input4 << 1) != 0) goto return_case_2;\n    }\n  }\n  return concatenate(bit3,input1) | 0x7ff8000000000000;\n}\n\n",
            "current_name": "reverse_bits_08008a02",
            "entrypoint": "0x08008a02",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate",
                "FUN_08008a02": "reverse_bits_08008a02",
                "LAB_08008838": "return_case_2",
                "LAB_08008874": "return_case_1",
                "bVar4": "is_zero",
                "in_r12": "bit5",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "uVar2": "bit2",
                "uVar3": "bit3",
                "unaff_r4": "temp1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008a74": {
            "additional_data": {
                "FUN_08008a74": {
                    "1": "compare_parameters",
                    "13": "check_parameters",
                    "2": "check_equality"
                },
                "bVar2": {
                    "1": "params_equal",
                    "16": "is_zero",
                    "3": "are_params_zero"
                },
                "bVar3": {
                    "1": "is_result_zero",
                    "2": "is_greater",
                    "7": "is_negative"
                },
                "param_1": {
                    "1": "first_parameter",
                    "3": "first_param",
                    "5": "value_1",
                    "6": "input_1",
                    "9": "value1"
                },
                "param_2": {
                    "1": "shifted_param2",
                    "10": "value2",
                    "2": "b",
                    "3": "second_param",
                    "5": "value_2",
                    "7": "input_2"
                },
                "param_2_1": {
                    "1": "shifted_param2"
                },
                "param_3": {
                    "1": "input3",
                    "10": "value3",
                    "3": "third_param",
                    "5": "value_3",
                    "7": "input_3"
                },
                "param_4": {
                    "1": "input4",
                    "2": "d",
                    "3": "fourth_param",
                    "4": "value_4",
                    "6": "input_4",
                    "9": "value4"
                },
                "param_4_1": {
                    "1": "shifted_param4"
                },
                "uVar1": {
                    "1": "result_1",
                    "11": "xor_result",
                    "16": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08008b00"
            ],
            "code": "\nuint check_parameters_08008a74(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint result;\n  bool is_zero;\n  bool is_negative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  is_zero = (value1 | value2 << 1) == 0;\n  if (is_zero) {\n    is_zero = (value3 | value4 << 1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = value2 == value4;\n  }\n  if (is_zero) {\n    is_zero = value1 == value3;\n  }\n  if (!is_zero) {\n    result = value2 ^ value4;\n    is_zero = result == 0;\n    if (-1 < (int)result) {\n      is_zero = value2 == value4;\n    }\n    is_negative = -1 < (int)result && value4 <= value2;\n    if (is_zero) {\n      is_negative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!is_negative) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "current_name": "check_parameters_08008a74",
            "entrypoint": "0x08008a74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008a74": "check_parameters_08008a74",
                "bVar2": "is_zero",
                "bVar3": "is_negative",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008af0": {
            "additional_data": {
                "FUN_08008af0": {
                    "1": "execute_operation",
                    "15": "execute_function",
                    "2": "call_sub_function",
                    "3": "execute_process"
                },
                "FUN_08008b00": {
                    "1": "perform_operation",
                    "2": "call_sub_function",
                    "5": "sub_function"
                },
                "param_1": {
                    "1": "first_parameter",
                    "10": "input1",
                    "2": "param_a"
                },
                "param_2": {
                    "1": "param_2",
                    "10": "arg2",
                    "2": "param_b"
                },
                "param_3": {
                    "1": "input_param_3",
                    "10": "arg3",
                    "2": "param_c",
                    "4": "input3"
                },
                "param_4": {
                    "1": "parameter_4",
                    "10": "arg4",
                    "2": "param_d",
                    "4": "input4"
                }
            },
            "called": [
                "FUN_08008b00"
            ],
            "calling": [
                "FUN_08008b4c",
                "FUN_08008b60"
            ],
            "code": "\nvoid execute_function_08008af0(undefined4 input1,undefined4 input2,undefined4 arg3,undefined4 arg4)\n\n{\n  FUN_08008b00(arg3,arg4,input1,input2);\n  return;\n}\n\n",
            "current_name": "execute_function_08008af0",
            "entrypoint": "0x08008af0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008af0": "execute_function_08008af0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008b00": {
            "additional_data": {
                "FUN_08008a74": {
                    "1": "calculate_result",
                    "12": "perform_operation",
                    "2": "sub_function",
                    "3": "execute_sub_function",
                    "4": "process_data"
                },
                "FUN_08008a74.param_1": {
                    "1": "op_param_1",
                    "2": "param1"
                },
                "FUN_08008a74.param_2": {
                    "1": "op_param_2",
                    "2": "param2"
                },
                "FUN_08008a74.param_3": {
                    "1": "sub_func_param3",
                    "2": "param3"
                },
                "FUN_08008a74.param_4": {
                    "1": "sub_func_param4",
                    "2": "param4"
                },
                "FUN_08008a74:param_1": {
                    "1": "op_param_1"
                },
                "FUN_08008a74:param_2": {
                    "1": "op_param_2"
                },
                "FUN_08008a74:param_3": {
                    "1": "param_3"
                },
                "FUN_08008a74:param_4": {
                    "1": "param_4"
                },
                "FUN_08008a74_PARAM_1": {
                    "1": "op_param_1"
                },
                "FUN_08008a74_PARAM_2": {
                    "1": "op_param_2"
                },
                "FUN_08008a74_PARAM_3": {
                    "1": "op_param_3"
                },
                "FUN_08008a74_PARAM_4": {
                    "1": "op_param_4"
                },
                "FUN_08008a74_param_1": {
                    "1": "calc_param_1"
                },
                "FUN_08008a74_param_2": {
                    "1": "calc_param_2"
                },
                "FUN_08008a74_param_3": {
                    "1": "param3"
                },
                "FUN_08008a74_param_4": {
                    "1": "subfunc_param_4"
                },
                "FUN_08008a74_parameter_1": {
                    "1": "operand_1"
                },
                "FUN_08008a74_parameter_2": {
                    "1": "p2"
                },
                "FUN_08008a74_parameter_3": {
                    "1": "operand_3"
                },
                "FUN_08008a74_parameter_4": {
                    "1": "p4"
                },
                "FUN_08008b00": {
                    "1": "execute_operation",
                    "2": "initialize_function",
                    "3": "initialize_and_return",
                    "5": "initialize",
                    "7": "execute_function"
                },
                "param_1": {
                    "1": "param",
                    "14": "input",
                    "2": "input_data",
                    "3": "input_param",
                    "5": "input_value"
                },
                "param_2": {
                    "1": "param",
                    "5": "value1"
                },
                "param_3": {
                    "1": "index",
                    "5": "value2"
                },
                "param_4": {
                    "1": "action_param3",
                    "5": "value3"
                }
            },
            "called": [
                "FUN_08008a74"
            ],
            "calling": [
                "FUN_08008b24",
                "FUN_08008b10",
                "FUN_08008af0"
            ],
            "code": "\nundefined4 execute_function_08008b00(undefined4 input)\n\n{\n  FUN_08008a74();\n  return input;\n}\n\n",
            "current_name": "execute_function_08008b00",
            "entrypoint": "0x08008b00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008b00": "execute_function_08008b00",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008b10": {
            "additional_data": {
                "FUN_08008b00": {
                    "1": "initialize_zr"
                },
                "FUN_08008b10": {
                    "1": "check_nonzero_char",
                    "2": "check_if_non_zero",
                    "3": "check_if_not_null",
                    "4": "check_if_initialized"
                },
                "in_ZR": {
                    "1": "flag_value",
                    "4": "is_initialized",
                    "5": "input_character",
                    "7": "result"
                }
            },
            "called": [
                "FUN_08008b00"
            ],
            "calling": [
                "FUN_08009d78",
                "FUN_0800a5a0"
            ],
            "code": "\nbool check_if_initialized_08008b10(void)\n\n{\n  char result;\n  \n  FUN_08008b00();\n  return result != '\\0';\n}\n\n",
            "current_name": "check_if_initialized_08008b10",
            "entrypoint": "0x08008b10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008b10": "check_if_initialized_08008b10",
                "in_ZR": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008b24": {
            "additional_data": {
                "FUN_08008b24": {
                    "1": "check_end_of_input",
                    "2": "check_if_empty",
                    "3": "is_null_terminated"
                },
                "in_CY": {
                    "1": "input_cy",
                    "12": "input_char",
                    "14": "input_character"
                }
            },
            "called": [
                "FUN_08008b00"
            ],
            "calling": [
                "FUN_080098d0",
                "FUN_08003004",
                "FUN_08009b24"
            ],
            "code": "\nbool check_if_cy_is_null_08008b24(void)\n\n{\n  char input_character;\n  \n  FUN_08008b00();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "check_if_cy_is_null_08008b24",
            "entrypoint": "0x08008b24",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008b24": "check_if_cy_is_null_08008b24",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008b4c": {
            "additional_data": {
                "FUN_08008af0": {
                    "1": "perform_additional_tasks",
                    "2": "perform_initialization",
                    "4": "initialize_flags"
                },
                "FUN_08008b4c": {
                    "1": "check_zero_and_carry_flags",
                    "11": "check_cy_and_zr",
                    "2": "check_flags",
                    "7": "check_cy_zr"
                },
                "in_CY": {
                    "1": "is_cy",
                    "17": "carry_flag",
                    "2": "is_carry_flag",
                    "3": "is_carry_flag_set"
                },
                "in_ZR": {
                    "1": "zr_flag",
                    "17": "zero_flag",
                    "2": "is_zero_flag",
                    "3": "is_zero_flag_set"
                }
            },
            "called": [
                "FUN_08008af0"
            ],
            "calling": [
                "FUN_0800a5a0"
            ],
            "code": "\nbool check_cy_and_zr_08008b4c(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_08008af0();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "current_name": "check_cy_and_zr_08008b4c",
            "entrypoint": "0x08008b4c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008b4c": "check_cy_and_zr_08008b4c",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008b60": {
            "additional_data": {
                "FUN_08008af0": {
                    "1": "initialize_input_string",
                    "4": "initialize_cy"
                },
                "FUN_08008b60": {
                    "1": "check_if_in_cy_null",
                    "2": "is_null_terminated",
                    "3": "check_if_cy_is_null",
                    "5": "check_if_null_terminated",
                    "6": "is_cy_null"
                },
                "in_CY": {
                    "1": "input_string",
                    "14": "input_character",
                    "5": "cy",
                    "9": "input_char"
                }
            },
            "called": [
                "FUN_08008af0"
            ],
            "calling": [
                "FUN_080094c0",
                "FUN_08003004",
                "FUN_08009318",
                "FUN_0800af78"
            ],
            "code": "\nbool is_cy_null_08008b60(void)\n\n{\n  char input_character;\n  \n  FUN_08008af0();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "is_cy_null_08008b60",
            "entrypoint": "0x08008b60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008b60": "is_cy_null_08008b60",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008b74": {
            "additional_data": {
                "FUN_08008b74": {
                    "1": "is_valid_params",
                    "12": "check_parameters",
                    "2": "check_parameters_validity",
                    "3": "check_params"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "num1",
                    "6": "input_1",
                    "7": "value1",
                    "9": "input1"
                },
                "param_2": {
                    "1": "n2",
                    "2": "value_2",
                    "6": "input_2",
                    "7": "value2",
                    "8": "input2"
                },
                "param_3": {
                    "1": "input_value3",
                    "2": "num3",
                    "6": "input_3",
                    "7": "value3",
                    "8": "input3"
                },
                "param_4": {
                    "1": "input_value4",
                    "2": "num4",
                    "6": "input_4",
                    "7": "value4",
                    "8": "input4"
                },
                "value1": {
                    "1": "param_value1"
                },
                "value2": {
                    "1": "param_value2"
                },
                "value3": {
                    "1": "param_value3"
                },
                "value4": {
                    "1": "param_value4"
                }
            },
            "called": [],
            "calling": [
                "FUN_080098d0"
            ],
            "code": "\nundefined4 check_parameters_08008b74(uint input1,int input2,uint input3,int input4)\n\n{\n  if ((((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0)) &&\n     (((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "check_parameters_08008b74",
            "entrypoint": "0x08008b74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008b74": "check_parameters_08008b74",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008ba0": {
            "additional_data": {
                "FUN_08008ba0": {
                    "1": "convert_param_to_integer",
                    "2": "perform_calculation",
                    "3": "calculate_shifted_value"
                },
                "iVar2": {
                    "1": "multiplier",
                    "2": "scaled_divisor",
                    "3": "offset",
                    "4": "shifted_value"
                },
                "param_1": {
                    "1": "input_value1",
                    "13": "input_value",
                    "3": "dividend",
                    "4": "input_value_1",
                    "6": "input1"
                },
                "param_1_shifted": {
                    "1": "shifted_input_x"
                },
                "param_2": {
                    "1": "input_2",
                    "2": "multiplier",
                    "3": "shift_value",
                    "4": "input_value_2",
                    "6": "shift_amount"
                },
                "param_2_new": {
                    "1": "signed_input_y"
                },
                "param_2_shifted": {
                    "1": "shifted_input_y"
                },
                "uVar1": {
                    "1": "shifted_value_divided",
                    "2": "shifted_divisor",
                    "3": "result1",
                    "4": "result",
                    "8": "shifted_value"
                },
                "uVar1_new": {
                    "1": "result"
                },
                "uVar1_shifted": {
                    "1": "shifted_result"
                },
                "uVar3": {
                    "1": "shift_amount_complement",
                    "2": "shifted_result",
                    "3": "result3",
                    "4": "shift_amount"
                },
                "uVar3_new": {
                    "1": "negative_result"
                },
                "uVar3_shifted": {
                    "1": "shifted_negative_result"
                },
                "uVar4": {
                    "1": "shift_amount",
                    "2": "result"
                },
                "uVar5": {
                    "1": "result"
                },
                "uVar6": {
                    "1": "mask"
                }
            },
            "called": [],
            "calling": [
                "FUN_080095b8",
                "FUN_08003004",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_0800a5a0",
                "FUN_080005b4",
                "FUN_0800adf0",
                "FUN_08002c18"
            ],
            "code": "\nuint calculate_shifted_value_08008ba0(uint input_value,uint input2)\n\n{\n  uint shifted_value;\n  int shifted_value;\n  uint shift_amount;\n  \n  shifted_value = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < shifted_value) {\n      return 0;\n    }\n    shifted_value = shifted_value >> 0x15;\n    shift_amount = -shifted_value - 0x3e1;\n    if (shifted_value < 0xfffffc20 && shift_amount != 0) {\n      shifted_value = (input2 << 0xb | 0x80000000 | input_value >> 0x15) >> (shift_amount & 0xff);\n      if ((input2 & 0x80000000) != 0) {\n        shifted_value = -shifted_value;\n      }\n      return shifted_value;\n    }\n  }\n  else if ((input_value | input2 << 0xc) != 0) {\n    return 0;\n  }\n  input2 = input2 & 0x80000000;\n  if (input2 == 0) {\n    input2 = 0x7fffffff;\n  }\n  return input2;\n}\n\n",
            "current_name": "calculate_shifted_value_08008ba0",
            "entrypoint": "0x08008ba0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008ba0": "calculate_shifted_value_08008ba0",
                "iVar2": "shifted_value",
                "param_1": "input_value",
                "param_2": "input2",
                "uVar1": "shifted_value",
                "uVar3": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008bf0": {
            "additional_data": {
                "AND_MASK": {
                    "1": "0x80000000"
                },
                "DIVIDER": {
                    "1": "0x15"
                },
                "FUN_08008bf0": {
                    "1": "validate_parameters",
                    "11": "calculate_shifted_value",
                    "2": "validate_param"
                },
                "MAX_VALUE": {
                    "1": "0xffe00000"
                },
                "MULTIPLIER": {
                    "1": "2"
                },
                "NEGATIVE_THRESHOLD": {
                    "1": "-1"
                },
                "OFFSET": {
                    "1": "0x200000"
                },
                "OR_MASK": {
                    "1": "0x80000000"
                },
                "SHIFT_CONSTANT": {
                    "1": "0xb"
                },
                "iVar1": {
                    "1": "multiplied_result",
                    "14": "shifted_value",
                    "3": "temp_var1",
                    "4": "temp_var"
                },
                "newValue1": {
                    "1": "<new_variable_name_1>"
                },
                "newValue2": {
                    "1": "<new_variable_name_2>"
                },
                "newValueN": {
                    "1": "<new_variable_name_n>"
                },
                "param_1": {
                    "1": "input_param",
                    "18": "input_value",
                    "2": "input1",
                    "3": "input_value1"
                },
                "param_2": {
                    "1": "input_2",
                    "2": "input_value_2",
                    "3": "bit_mask",
                    "5": "multiplier",
                    "6": "shift_amount"
                },
                "uVar2": {
                    "1": "shift",
                    "14": "shift_amount",
                    "2": "final_value",
                    "3": "shift_count",
                    "4": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003b98",
                "FUN_08003004",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08001994",
                "FUN_08001f00",
                "FUN_08002c18"
            ],
            "code": "\nuint calculate_shifted_value_08008bf0(uint input_value,uint shift_amount)\n\n{\n  int shifted_value;\n  uint shift_amount;\n  \n  if ((shift_amount & 0x80000000) != 0) {\n    return 0;\n  }\n  shifted_value = shift_amount * 2 + 0x200000;\n  if (shift_amount * 2 < 0xffe00000) {\n    if (-1 < shifted_value) {\n      return 0;\n    }\n    shift_amount = -(shifted_value >> 0x15) - 0x3e1;\n    if (-1 < (int)shift_amount) {\n      return (shift_amount << 0xb | 0x80000000 | input_value >> 0x15) >> (shift_amount & 0xff);\n    }\n  }\n  else if ((input_value | shift_amount << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "calculate_shifted_value_08008bf0",
            "entrypoint": "0x08008bf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008bf0": "calculate_shifted_value_08008bf0",
                "iVar1": "shifted_value",
                "param_1": "input_value",
                "param_2": "shift_amount",
                "uVar2": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008c30": {
            "additional_data": {
                "FUN_08008c30": {
                    "1": "convert_float_to_u_int32",
                    "2": "calculate_result",
                    "4": "convert_to_float",
                    "5": "calculate_floating_point",
                    "8": "calculate_float"
                },
                "SCARRY4": {
                    "1": "signed_carry",
                    "2": "overflow_check"
                },
                "bVar4": {
                    "1": "is_condition_met",
                    "25": "is_zero"
                },
                "bVar5": {
                    "1": "is_normal",
                    "2": "is_valid",
                    "3": "is_less_than70000000",
                    "5": "is_less_than",
                    "8": "is_less_than_threshold"
                },
                "in_r12": {
                    "1": "temp_value3",
                    "2": "additional_value",
                    "3": "temp_var",
                    "4": "temp3"
                },
                "param_1": {
                    "1": "numerator",
                    "10": "input1",
                    "2": "input_float",
                    "3": "input",
                    "5": "input_value"
                },
                "param_2": {
                    "1": "number2",
                    "10": "input2",
                    "2": "exponent",
                    "3": "multiplier"
                },
                "uVar1": {
                    "1": "fp_value",
                    "29": "result"
                },
                "uVar2": {
                    "1": "twice_input2",
                    "2": "shifted_exponent",
                    "3": "multiplied_value",
                    "5": "temp1"
                },
                "uVar3": {
                    "1": "value",
                    "2": "adjusted_exponent",
                    "3": "modified_value",
                    "6": "temp2"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003004",
                "FUN_08002638",
                "FUN_08004940",
                "FUN_0800056c",
                "FUN_080005b4",
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_08001f00"
            ],
            "code": "\nuint calculate_float_08008c30(uint input1,uint input2)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool is_zero;\n  bool is_less_than_threshold;\n  \n  temp1 = input2 * 2;\n  is_less_than_threshold = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!is_less_than_threshold) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  is_zero = result == 0;\n  if (!is_less_than_threshold && temp2 >= 0x200000) {\n    is_zero = temp3 == 0x1fc00000;\n  }\n  if (((is_less_than_threshold || temp2 < 0x200000) || 0x1fc00000 < temp3) || is_zero) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((input1 | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != overflow_check(temp2,0x2e00000)) {\n      return input2 & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = input1 >> (temp1 & 0xff);\n    if (input1 << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = input2 & 0x1fffff | 0x100000;\n    input1 = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (input2 & 0x80000000 | input1 >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < input1 * 8);\n  if (input1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_float_08008c30",
            "entrypoint": "0x08008c30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008c30": "calculate_float_08008c30",
                "SCARRY4": "overflow_check",
                "bVar4": "is_zero",
                "bVar5": "is_less_than_threshold",
                "in_r12": "temp3",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008cd8": {
            "additional_data": {
                "FUN_08008cd8": {
                    "1": "calculate_new_result",
                    "2": "perform_calculation",
                    "3": "calculate_result",
                    "5": "calculate_floating_point"
                },
                "LZCOUNT": {
                    "1": "count_leading_zeroes"
                },
                "LZCOUNT()": {
                    "2": "leading_zero_count"
                },
                "bVar8": {
                    "1": "check",
                    "11": "is_equal",
                    "2": "is_true",
                    "3": "is_zero",
                    "4": "is_condition_met"
                },
                "iVar1": {
                    "1": "shift_amount",
                    "2": "shift_amount1",
                    "4": "shifted_input_1",
                    "5": "shifted_input1"
                },
                "iVar2": {
                    "1": "shifted_sign",
                    "2": "shifted_value2",
                    "3": "shift_amount2",
                    "4": "shifted_input_2",
                    "5": "shifted_input2"
                },
                "param_1": {
                    "1": "num1",
                    "2": "input_value1",
                    "4": "input",
                    "7": "input_1",
                    "8": "input1"
                },
                "param_2": {
                    "1": "input_sign",
                    "2": "bit_mask",
                    "7": "input_2",
                    "8": "input2"
                },
                "param_3": {
                    "1": "value_3",
                    "2": "input_value3",
                    "4": "flag",
                    "5": "input3",
                    "6": "input_3"
                },
                "param_4": {
                    "1": "shift_num",
                    "2": "param4",
                    "5": "input4",
                    "6": "input_4"
                },
                "uVar10": {
                    "1": "shift_amount"
                },
                "uVar3": {
                    "1": "bitwise_xor_value1",
                    "2": "flipped_mask",
                    "3": "temp1"
                },
                "uVar4": {
                    "1": "u_var4",
                    "2": "result2",
                    "3": "result_2"
                },
                "uVar5": {
                    "1": "temp3",
                    "2": "result",
                    "3": "temp_1"
                },
                "uVar6": {
                    "1": "temp4",
                    "2": "temp2",
                    "3": "temp_2"
                },
                "uVar7": {
                    "1": "exp_diff",
                    "19": "difference",
                    "2": "temp3"
                },
                "uVar9": {
                    "1": "mask"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002908",
                "FUN_08003004",
                "FUN_08004940",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08002978",
                "FUN_080028bc",
                "FUN_08001f00"
            ],
            "code": "\nuint calculate_floating_point_08008cd8(uint input1,uint input2,undefined4 input_3,uint input_4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint temp1;\n  uint temp2;\n  uint temp_1;\n  uint temp_2;\n  uint difference;\n  bool is_equal;\n  \n  temp1 = input2 ^ 0x80000000;\n  temp_1 = input1 << 1;\n  is_equal = temp_1 == 0;\n  if (!is_equal) {\n    input_4 = input2 << 1;\n    is_equal = input_4 == 0;\n  }\n  if (!is_equal) {\n    is_equal = temp_1 == input_4;\n  }\n  shifted_input1 = (int)temp_1 >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_input1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)input_4 >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      temp_1 = temp1;\n      if (shifted_input1 == -1) {\n        temp_1 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        temp1 = temp_1;\n      }\n      is_equal = (temp_1 & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (temp1 & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = temp_1 == temp1;\n      }\n      if (!is_equal) {\n        temp_1 = temp_1 | 0x400000;\n      }\n      return temp_1;\n    }\n    if (((input1 ^ temp1) & 0x7fffffff) != 0) {\n      if (temp_1 == 0) {\n        input1 = temp1;\n      }\n      return input1;\n    }\n    if (input1 != temp1) {\n      return 0;\n    }\n    if ((temp_1 & 0xff000000) == 0) {\n      temp1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (temp_1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08008e12:\n    return input1 | 0x7f800000;\n  }\n  temp_1 = temp_1 >> 0x18;\n  input_4 = input_4 >> 0x18;\n  difference = input_4 - temp_1;\n  is_equal = difference != 0;\n  temp_2 = temp_1;\n  if (is_equal && temp_1 <= input_4) {\n    temp_2 = temp_1 + difference;\n  }\n  if (is_equal && temp_1 <= input_4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (is_equal && temp_1 <= input_4) {\n    input1 = input1 ^ temp1;\n  }\n  if (is_equal && temp_1 <= input_4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (input_4 < temp_1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  temp_1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    temp_1 = -temp_1;\n  }\n  temp2 = temp1 & 0xffffff | 0x800000;\n  if ((temp1 & 0x80000000) != 0) {\n    temp2 = -temp2;\n  }\n  if (temp_2 == difference) {\n    temp2 = temp2 ^ 0x800000;\n    if (temp_2 == 0) {\n      temp_1 = temp_1 ^ 0x800000;\n      temp_2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp_1 = temp_1 + ((int)temp2 >> (difference & 0xff));\n  temp2 = temp2 << (0x20 - difference & 0xff);\n  input1 = temp_1 & 0x80000000;\n  if ((int)temp_1 < 0) {\n    is_equal = temp2 != 0;\n    temp2 = -temp2;\n    temp_1 = -temp_1 - (uint)is_equal;\n  }\n  if (temp_1 < 0x800000) {\n    temp1 = temp2 & 0x80000000;\n    temp2 = temp2 << 1;\n    temp_1 = temp_1 * 2 + (uint)(temp1 != 0);\n    temp1 = temp_2 - 2;\n    if (temp_2 - 1 == 0 || temp_1 < 0x800000) {\n      difference = count_leading_zeroes(temp_1) - 8;\n      temp_1 = temp_1 << (difference & 0xff);\n      if ((int)temp1 < (int)difference) {\n        temp_1 = temp_1 >> (-(temp1 - difference) & 0xff);\n      }\n      else {\n        temp_1 = temp_1 + (temp1 - difference) * 0x800000;\n      }\n      return temp_1 | input1;\n    }\n  }\n  else {\n    temp1 = temp_2 - 1;\n    if (0xffffff < temp_1) {\n      temp1 = temp_1 & 1;\n      temp_1 = temp_1 >> 1;\n      temp2 = (uint)(temp1 != 0) << 0x1f | temp2 >> 1;\n      temp1 = temp_2;\n      if (0xfd < temp_2) goto LAB_08008e12;\n    }\n  }\n  temp_1 = temp_1 + temp1 * 0x800000 + (uint)(0x7fffffff < temp2);\n  if (temp2 == 0x80000000) {\n    temp_1 = temp_1 & 0xfffffffe;\n  }\n  return temp_1 | input1;\n}\n\n",
            "current_name": "calculate_floating_point_08008cd8",
            "entrypoint": "0x08008cd8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008cd8": "calculate_floating_point_08008cd8",
                "LZCOUNT": "count_leading_zeroes",
                "bVar8": "is_equal",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp_1",
                "uVar6": "temp_2",
                "uVar7": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008cdc": {
            "additional_data": {
                "FUN_08008cdc": {
                    "1": "reverse_integer",
                    "2": "calculate_float_value",
                    "4": "calculate_floating_point",
                    "8": "calculate_float"
                },
                "LZCOUNT": {
                    "1": "leading_zeros_count",
                    "3": "leading_zero_count"
                },
                "bVar7": {
                    "14": "is_zero",
                    "15": "is_equal",
                    "2": "condition"
                },
                "iVar1": {
                    "1": "msb_input1",
                    "2": "shifted_value1",
                    "3": "shifted_num1",
                    "8": "shifted_input1"
                },
                "iVar2": {
                    "1": "shifted_bits2",
                    "2": "shifted_value2",
                    "3": "shifted_num2",
                    "8": "shifted_input2"
                },
                "param_1": {
                    "1": "input_a",
                    "12": "input1",
                    "2": "input_value1",
                    "3": "value1",
                    "6": "num1"
                },
                "param_2": {
                    "1": "input_2",
                    "12": "input2",
                    "2": "number2",
                    "3": "value2",
                    "6": "num2"
                },
                "param_3": {
                    "1": "flags",
                    "2": "precision",
                    "3": "param_3",
                    "5": "flag",
                    "7": "input3"
                },
                "param_4": {
                    "1": "mask_bit",
                    "2": "value4",
                    "7": "input4",
                    "9": "result"
                },
                "uVar3": {
                    "1": "abs_b",
                    "2": "result",
                    "5": "result1"
                },
                "uVar4": {
                    "1": "result_2",
                    "3": "result2"
                },
                "uVar5": {
                    "1": "difference",
                    "2": "exponent1"
                },
                "uVar6": {
                    "1": "temp_value2",
                    "18": "difference",
                    "2": "temp2",
                    "3": "diff"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002908",
                "FUN_08003826",
                "FUN_08003004",
                "FUN_08004940",
                "FUN_080005b4",
                "FUN_08002978",
                "FUN_080028bc",
                "FUN_08001f00"
            ],
            "code": "\nuint calculate_float_08008cdc(uint input1,uint input2,undefined4 input3,uint result)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint result1;\n  uint result2;\n  uint shift;\n  uint difference;\n  bool is_equal;\n  \n  result2 = input1 << 1;\n  is_equal = result2 == 0;\n  if (!is_equal) {\n    result = input2 << 1;\n    is_equal = result == 0;\n  }\n  if (!is_equal) {\n    is_equal = result2 == result;\n  }\n  shifted_input1 = (int)result2 >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_input1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)result >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      result2 = input2;\n      if (shifted_input1 == -1) {\n        result2 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        input2 = result2;\n      }\n      is_equal = (result2 & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (input2 & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = result2 == input2;\n      }\n      if (!is_equal) {\n        result2 = result2 | 0x400000;\n      }\n      return result2;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (result2 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((result2 & 0xff000000) == 0) {\n      result2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        result2 = result2 | 0x80000000;\n      }\n      return result2;\n    }\n    if (result2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08008e12:\n    return input1 | 0x7f800000;\n  }\n  result2 = result2 >> 0x18;\n  result = result >> 0x18;\n  difference = result - result2;\n  is_equal = difference != 0;\n  shift = result2;\n  if (is_equal && result2 <= result) {\n    shift = result2 + difference;\n  }\n  if (is_equal && result2 <= result) {\n    input2 = input2 ^ input1;\n  }\n  if (is_equal && result2 <= result) {\n    input1 = input1 ^ input2;\n  }\n  if (is_equal && result2 <= result) {\n    input2 = input2 ^ input1;\n  }\n  if (result < result2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  result2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (shift == difference) {\n    result1 = result1 ^ 0x800000;\n    if (shift == 0) {\n      result2 = result2 ^ 0x800000;\n      shift = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result2 = result2 + ((int)result1 >> (difference & 0xff));\n  result1 = result1 << (0x20 - difference & 0xff);\n  input1 = result2 & 0x80000000;\n  if ((int)result2 < 0) {\n    is_equal = result1 != 0;\n    result1 = -result1;\n    result2 = -result2 - (uint)is_equal;\n  }\n  if (result2 < 0x800000) {\n    difference = result1 & 0x80000000;\n    result1 = result1 << 1;\n    result2 = result2 * 2 + (uint)(difference != 0);\n    difference = shift - 2;\n    if (shift - 1 == 0 || result2 < 0x800000) {\n      shift = leading_zero_count(result2) - 8;\n      result2 = result2 << (shift & 0xff);\n      if ((int)difference < (int)shift) {\n        result2 = result2 >> (-(difference - shift) & 0xff);\n      }\n      else {\n        result2 = result2 + (difference - shift) * 0x800000;\n      }\n      return result2 | input1;\n    }\n  }\n  else {\n    difference = shift - 1;\n    if (0xffffff < result2) {\n      difference = result2 & 1;\n      result2 = result2 >> 1;\n      result1 = (uint)(difference != 0) << 0x1f | result1 >> 1;\n      difference = shift;\n      if (0xfd < shift) goto LAB_08008e12;\n    }\n  }\n  result2 = result2 + difference * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    result2 = result2 & 0xfffffffe;\n  }\n  return result2 | input1;\n}\n\n",
            "current_name": "calculate_float_08008cdc",
            "entrypoint": "0x08008cdc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008cdc": "calculate_float_08008cdc",
                "LZCOUNT": "leading_zero_count",
                "bVar7": "is_equal",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "result",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "shift",
                "uVar6": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008e3c": {
            "additional_data": {
                "(0x20 - (uVar1 + 0x18) & 0xff)": {
                    "1": "shift_left_value"
                },
                "(int)uVar2 >> 0x1f": {
                    "1": "signed_shifted_leading_zeros"
                },
                "(param_1 >> (0x20 - (uVar1 + 0x18) & 0xff))": {
                    "1": "shifted_input3"
                },
                "(uVar2 & 0x7fffffff)": {
                    "1": "masked_shifted_leading_zeros"
                },
                "(uVar2 & 0x7fffffff) == 0": {
                    "1": "is_mask_check_value_zero"
                },
                "0 << (uVar2 & 0xff)": {
                    "1": "shifted_value"
                },
                "0U >> (0x20 - uVar2 & 0xff)": {
                    "1": "shifted_zeroes"
                },
                "0x7fffffff": {
                    "2": "max_value"
                },
                "0x7fffffff < uVar4": {
                    "1": "is_less_than_positive_max"
                },
                "<original_function_name>": {
                    "1": "calculate_value"
                },
                "<param_1>": {
                    "1": "input_value"
                },
                "CONSTANT": {
                    "1": "constant_offset"
                },
                "FUN_08008e3c": {
                    "1": "calculate_modified_value",
                    "2": "reverse_bits",
                    "3": "calculate_hash",
                    "7": "calculate_result"
                },
                "iVar3": {
                    "1": "result",
                    "2": "intermediate_result",
                    "3": "constant_value",
                    "5": "intermediate_value",
                    "8": "constant"
                },
                "param_1": {
                    "1": "number",
                    "10": "input",
                    "15": "input_value",
                    "4": "input_number"
                },
                "param_1 << (uVar2 & 0xff)": {
                    "1": "shifted_input"
                },
                "param_1 << uVar1 + 0x18": {
                    "1": "shifted_input2"
                },
                "uVar1": {
                    "1": "leading_zeroes_count",
                    "15": "leading_zeros",
                    "2": "leading_zeroes",
                    "3": "leading_zero_count",
                    "7": "result"
                },
                "uVar1 & 0xfffffffe": {
                    "1": "cleared_lsb"
                },
                "uVar1 + 0x18": {
                    "1": "shifted_leading_zeros"
                },
                "uVar1 > 7": {
                    "1": "is_greater_than7"
                },
                "uVar1_1": {
                    "1": "leading_zeros_minus8"
                },
                "uVar1_2": {
                    "1": "leading_zeros_minus_8"
                },
                "uVar1_3": {
                    "1": "leading_zeros_plus_24"
                },
                "uVar1_4": {
                    "1": "leading_zeros_minus_one"
                },
                "uVar1_5": {
                    "1": "leading_zeros_bits31"
                },
                "uVar1_6": {
                    "1": "leading_zeros_plus24_bits31"
                },
                "uVar1_adjusted": {
                    "1": "leading_zero_count_adjusted"
                },
                "uVar1_check": {
                    "1": "bit_check"
                },
                "uVar1_extended": {
                    "1": "extended_leading_zeroes_count"
                },
                "uVar1_final": {
                    "1": "final_result"
                },
                "uVar1_shifted": {
                    "1": "input_shifted"
                },
                "uVar1_shifted_and_added": {
                    "1": "shifted_value_and_added"
                },
                "uVar1_shifted_extended": {
                    "1": "extended_value"
                },
                "uVar2": {
                    "1": "shifted_input",
                    "16": "shift_amount",
                    "2": "temp_value",
                    "3": "shift_value",
                    "4": "shift"
                },
                "uVar2 & 0x7fffffff": {
                    "1": "unsign_value"
                },
                "uVar2 & 0xff": {
                    "1": "shift_value",
                    "2": "shift_mask"
                },
                "uVar2 >> 0x1f": {
                    "1": "shift_right_value"
                },
                "uVar2_1": {
                    "1": "shift_amount_minus8"
                },
                "uVar2_2": {
                    "1": "shifted_input_value"
                },
                "uVar2_3": {
                    "1": "shifted_input_value_signed"
                },
                "uVar2_4": {
                    "1": "shift_amount_plus_31"
                },
                "uVar2_5": {
                    "1": "shift_amount_and_sign_bit"
                },
                "uVar2_6": {
                    "1": "shift_amount_and_sign_bit_bits31"
                },
                "uVar2_7": {
                    "1": "shift_amount_bits31"
                },
                "uVar2_8": {
                    "1": "shift_amount_plus24_bits31"
                },
                "uVar2_and": {
                    "1": "shift_count_and"
                },
                "uVar2_final": {
                    "1": "shifted_value"
                },
                "uVar2_masked": {
                    "1": "masked_value"
                },
                "uVar2_new": {
                    "1": "shift_count_adjusted"
                },
                "uVar2_normalized": {
                    "1": "normalized_value"
                },
                "uVar2_normalized_and_added": {
                    "1": "normalized_value_and_added"
                },
                "uVar2_shifted": {
                    "1": "shifted_value2"
                },
                "uVar2_shifted_and_added": {
                    "1": "shifted_value_and_subtracted"
                },
                "uVar2_shifted_and_added_signed": {
                    "1": "shifted_value_and_subtracted_signed"
                },
                "uVar2_shifted_and_added_unsigned": {
                    "1": "shifted_value_and_subtracted_unsigned"
                },
                "uVar2_sign_bit_check": {
                    "1": "sign_bit_check"
                },
                "uVar2_sign_bit_mask": {
                    "1": "sign_bit_mask"
                },
                "uVar3": {
                    "1": "temp",
                    "2": "result"
                },
                "uVar4": {
                    "1": "leading_zero_check",
                    "2": "comparison_value",
                    "3": "shifted_value",
                    "6": "mask"
                },
                "uVar4 == 0x80000000": {
                    "1": "check_flag_condition"
                },
                "uVar4_2": {
                    "1": "shifted_one_masked"
                },
                "uVar5": {
                    "1": "modified_result",
                    "2": "shifted_input"
                },
                "uVar6": {
                    "1": "masked_result"
                },
                "uVar7": {
                    "1": "result"
                },
                "uVarTemp": {
                    "1": "temp_value"
                },
                "uVarTemp2": {
                    "1": "temp_value2"
                },
                "~(uVar2 >> 0x1f)": {
                    "1": "negated_shifted_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002638",
                "FUN_08002c18"
            ],
            "code": "\nuint calculate_result_08008e3c(uint input_value)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  int constant;\n  uint mask;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeros = LZCOUNT(input_value);\n  shift_amount = leading_zeros - 8;\n  constant = shift_amount * -0x800000 + 0x4a800000;\n  if (7 < leading_zeros) {\n    mask = 0 << (shift_amount & 0xff);\n    leading_zeros = constant + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leading_zeros = leading_zeros & 0xfffffffe;\n    }\n    return leading_zeros;\n  }\n  shift_amount = input_value << leading_zeros + 0x18;\n  leading_zeros = constant + ((input_value >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    leading_zeros = leading_zeros & ~(shift_amount >> 0x1f);\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "calculate_result_08008e3c",
            "entrypoint": "0x08008e3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008e3c": "calculate_result_08008e3c",
                "iVar3": "constant",
                "param_1": "input_value",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar4": "mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008e44": {
            "additional_data": {
                "FUN_08008e44": {
                    "1": "calculate_reversed_integer",
                    "2": "calculate_unsigned_result",
                    "3": "calculate_unsigned_value",
                    "4": "count_leading_zeros"
                },
                "LZCOUNT": {
                    "1": "count_leading_zeroes"
                },
                "iVar4": {
                    "1": "offset",
                    "2": "adjusted_value",
                    "26": "result"
                },
                "iVar4_orig": {
                    "1": "i_var4"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "input_number",
                    "7": "input",
                    "8": "number"
                },
                "uVar1": {
                    "1": "leading_zeros_count",
                    "18": "leading_zeros",
                    "3": "count",
                    "5": "leading_zeroes"
                },
                "uVar1_orig": {
                    "1": "u_var1"
                },
                "uVar2": {
                    "1": "shifted_number",
                    "2": "shift_value",
                    "23": "shift_amount",
                    "3": "shift"
                },
                "uVar2_orig": {
                    "1": "u_var2"
                },
                "uVar3": {
                    "1": "adjusted_result",
                    "15": "sign_bit",
                    "2": "final_result",
                    "5": "sign"
                },
                "uVar3_orig": {
                    "1": "u_var3"
                },
                "uVar4": {
                    "1": "mask"
                },
                "uVar5": {
                    "1": "shifted_input"
                },
                "uVar6": {
                    "1": "normalized_input"
                },
                "uVar7": {
                    "1": "overflow_check"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003618",
                "FUN_08003004",
                "FUN_08004940",
                "FUN_08002408",
                "FUN_08001f00",
                "FUN_080004fc",
                "FUN_08002c18",
                "FUN_080024c4"
            ],
            "code": "\nuint count_leading_zeros_08008e44(uint number)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = number & 0x80000000;\n  if ((int)sign_bit < 0) {\n    number = -number;\n  }\n  if (number == 0) {\n    return 0;\n  }\n  leading_zeros = count_leading_zeroes(number);\n  shift_amount = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_bit = result + (number << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = number << leading_zeros + 0x18;\n  sign_bit = result + ((number >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "current_name": "count_leading_zeros_08008e44",
            "entrypoint": "0x08008e44",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008e44": "count_leading_zeros_08008e44",
                "LZCOUNT": "count_leading_zeroes",
                "iVar4": "result",
                "param_1": "number",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008eec": {
            "additional_data": {
                "FUN_08008eec": {
                    "1": "calculate_float_from_binary",
                    "13": "calculate_float",
                    "2": "calculate_float_value",
                    "8": "calculate_floating_point"
                },
                "SBORROW4": {
                    "1": "saturated_subtraction"
                },
                "bVar10": {
                    "1": "flag2",
                    "11": "is_negative",
                    "2": "is_zero2",
                    "4": "condition2"
                },
                "bVar9": {
                    "1": "is_zero_msb",
                    "13": "is_zero",
                    "2": "is_zero1",
                    "4": "condition1"
                },
                "iVar4": {
                    "1": "addition_result",
                    "15": "sum",
                    "3": "sum_of_exponents"
                },
                "iVar5": {
                    "1": "adjusted_exponent",
                    "2": "temp_var",
                    "5": "diff",
                    "6": "difference"
                },
                "iVar7": {
                    "1": "difference_temp",
                    "2": "difference2",
                    "3": "difference"
                },
                "lVar1": {
                    "1": "result",
                    "2": "product"
                },
                "param_1": {
                    "1": "number1",
                    "11": "input1",
                    "2": "input_value1",
                    "3": "num1",
                    "5": "value1"
                },
                "param_2": {
                    "1": "input_float2",
                    "11": "input2",
                    "2": "input_2",
                    "3": "num2",
                    "5": "value2"
                },
                "param_3": {
                    "1": "float_value1",
                    "2": "unused_param",
                    "6": "input3",
                    "8": "param3"
                },
                "param_4": {
                    "1": "val2",
                    "2": "constant2",
                    "5": "input4",
                    "7": "param4"
                },
                "uVar2": {
                    "1": "output",
                    "23": "result"
                },
                "uVar3": {
                    "1": "bit_24_32_param_1",
                    "2": "shifted_input1",
                    "3": "byte1",
                    "4": "exponent1"
                },
                "uVar6": {
                    "1": "shifted_value1_product",
                    "2": "product_lower",
                    "3": "temp_result",
                    "9": "product"
                },
                "uVar8": {
                    "1": "shifted_num1",
                    "2": "temp",
                    "4": "temp_result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003618",
                "FUN_08003826",
                "FUN_08003004",
                "FUN_08002638",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_080028bc",
                "FUN_08001f00",
                "FUN_08002908",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_080024c4"
            ],
            "code": "\nuint calculate_float_08008eec(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  longlong product;\n  uint result;\n  uint exponent1;\n  int sum;\n  int difference;\n  uint product;\n  int difference;\n  uint temp_result;\n  bool is_zero;\n  bool is_negative;\n  \n  exponent1 = input1 >> 0x17 & 0xff;\n  is_zero = exponent1 == 0;\n  if (!is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    is_zero = param4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = exponent1 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = param4 == 0xff;\n  }\n  if (is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    if (exponent1 == 0xff || param4 == 0xff) {\n      is_zero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        is_zero = input2 == 0;\n        result = input1;\n      }\n      if (!is_zero) {\n        is_zero = input2 == 0x80000000;\n      }\n      temp_result = result;\n      if (((is_zero) || ((exponent1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (temp_result = input2, (input2 & 0x7fffff) != 0)))) {\n        return temp_result | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_0800903c;\n    }\n    is_zero = (input1 & 0x7fffffff) == 0;\n    if (!is_zero) {\n      is_zero = (input2 & 0x7fffffff) == 0;\n    }\n    if (is_zero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    is_zero = exponent1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input1 = input1 << 1;\n        is_zero = (input1 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      exponent1 = exponent1 - 1;\n    }\n    input1 = input1 | result;\n    is_zero = param4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input2 = input2 << 1;\n        is_zero = (input2 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      param4 = param4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = exponent1 + param4;\n  temp_result = input1 ^ input2;\n  exponent1 = input1 << 9;\n  is_zero = exponent1 == 0;\n  if (!is_zero) {\n    input2 = input2 << 9;\n    is_zero = input2 == 0;\n  }\n  if (is_zero) {\n    if (exponent1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = temp_result & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    is_negative = saturated_subtraction(sum,0x7f);\n    difference = sum + -0x7f;\n    is_zero = difference == 0;\n    difference = difference;\n    if (!is_zero && 0x7e < sum) {\n      is_negative = saturated_subtraction(0xff,difference);\n      difference = 0xff - difference;\n      is_zero = difference == 0xff;\n    }\n    if (!is_zero && difference < 0 == is_negative) {\n      result = result | difference * 0x800000;\n    }\n    if (!is_zero && difference < 0 == is_negative) {\n      return result;\n    }\n    result = result | 0x800000;\n    product = 0;\n    is_negative = saturated_subtraction(difference,1);\n    temp_result = sum - 0x80;\n    is_zero = temp_result == 0;\n    exponent1 = temp_result;\n  }\n  else {\n    product = (ulonglong)(exponent1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    product = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    is_zero = result < 0x800000;\n    if (is_zero) {\n      result = result << 1;\n    }\n    if (is_zero) {\n      result = result | product >> 0x1f;\n      product = product << 1;\n    }\n    result = temp_result & 0x80000000 | result;\n    temp_result = (sum + -0x7f) - (uint)is_zero;\n    is_negative = saturated_subtraction(temp_result,0xfd);\n    is_zero = temp_result == 0xfd;\n    exponent1 = temp_result - 0xfd;\n    if (temp_result < 0xfe) {\n      result = result + temp_result * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (is_zero || (int)exponent1 < 0 != is_negative) {\n    is_zero = (int)(temp_result + 0x19) < 0;\n    if (temp_result == 0xffffffe7 || is_zero != SCARRY4(temp_result,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (temp_result != 0xffffffe7 && is_zero == SCARRY4(temp_result,0x19)) {\n      exponent1 = (result << 1) >> (-temp_result & 0xff);\n      temp_result = result << (temp_result + 0x20 & 0xff);\n      exponent1 = ((uint)((result & 0x80000000) != 0) << 0x1f | exponent1 >> 1) + (uint)((byte)exponent1 & 1);\n      if ((product | temp_result << 1) == 0) {\n        exponent1 = exponent1 & ~(temp_result >> 0x1f);\n      }\n      return exponent1;\n    }\n    return result;\n  }\nLAB_0800903c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "current_name": "calculate_float_08008eec",
            "entrypoint": "0x08008eec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008eec": "calculate_float_08008eec",
                "SBORROW4": "saturated_subtraction",
                "bVar10": "is_negative",
                "bVar9": "is_zero",
                "iVar4": "sum",
                "iVar5": "difference",
                "iVar7": "difference",
                "lVar1": "product",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar2": "result",
                "uVar3": "exponent1",
                "uVar6": "product",
                "uVar8": "temp_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009054": {
            "additional_data": {
                "FUN_08009054": {
                    "1": "decode_float",
                    "13": "calculate_float",
                    "3": "calculate_floating_point_value",
                    "6": "calculate_floating_point"
                },
                "LAB_08009000": {
                    "1": "label2"
                },
                "LAB_0800904a": {
                    "1": "label1"
                },
                "LAB_0800906c": {
                    "1": "label3"
                },
                "SBORROW4": {
                    "1": "signed_borrow"
                },
                "SCARRY4": {
                    "1": "signed_carry"
                },
                "bVar7": {
                    "1": "is_zero_exp1",
                    "2": "condition",
                    "6": "is_zero",
                    "7": "flag1",
                    "8": "condition1"
                },
                "bVar8": {
                    "1": "cond2",
                    "2": "check2",
                    "3": "is_negative",
                    "7": "flag2",
                    "9": "condition2"
                },
                "bVar9": {
                    "1": "bool_var3",
                    "2": "overflow",
                    "7": "flag3",
                    "9": "condition3"
                },
                "iVar3": {
                    "1": "int_var1",
                    "13": "difference",
                    "2": "exponent_difference",
                    "5": "temp3"
                },
                "iVar5": {
                    "1": "int_var2",
                    "2": "adjusted_exponent",
                    "5": "temp5",
                    "6": "temp2"
                },
                "param_1": {
                    "1": "input_float_a",
                    "2": "input_value1",
                    "3": "value1",
                    "4": "float1",
                    "9": "input1"
                },
                "param_2": {
                    "1": "exponent_bits2",
                    "2": "input_2",
                    "3": "value2",
                    "4": "float2",
                    "9": "input2"
                },
                "param_3": {
                    "1": "input_param",
                    "2": "param_3",
                    "4": "input3",
                    "9": "param3"
                },
                "param_4": {
                    "1": "shift_amount",
                    "2": "float4",
                    "4": "input4",
                    "8": "param4"
                },
                "uVar1": {
                    "1": "normalized_input_2",
                    "2": "result1",
                    "3": "quotient",
                    "7": "temp1"
                },
                "uVar2": {
                    "1": "shifted_num1",
                    "2": "exponent1",
                    "6": "temp2"
                },
                "uVar4": {
                    "1": "temp3",
                    "2": "sum",
                    "4": "temp1",
                    "5": "temp4"
                },
                "uVar6": {
                    "1": "bit_pattern1",
                    "21": "result",
                    "5": "temp6"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004250",
                "FUN_08003618",
                "FUN_08002908",
                "FUN_08003004",
                "FUN_08004940",
                "FUN_08002e08",
                "FUN_080028bc",
                "FUN_08001994",
                "FUN_08001f00",
                "FUN_080004fc"
            ],
            "code": "\nuint calculate_float_08009054(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  uint temp1;\n  uint temp2;\n  int difference;\n  uint temp4;\n  int temp2;\n  uint result;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  temp2 = input1 >> 0x17 & 0xff;\n  condition1 = temp2 == 0;\n  if (!condition1) {\n    param4 = input2 >> 0x17 & 0xff;\n    condition1 = param4 == 0;\n  }\n  if (!condition1) {\n    condition1 = temp2 == 0xff;\n  }\n  if (!condition1) {\n    condition1 = param4 == 0xff;\n  }\n  if (condition1) {\n    param4 = input2 >> 0x17 & 0xff;\n    result = input1;\n    if (temp2 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (result = input2, param4 == 0xff)) {\nlabel1:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (param4 == 0xff) {\n        result = input2;\n        if ((input2 & 0x7fffff) == 0) {\nlabel2:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto label1;\n      }\n      condition1 = (input1 & 0x7fffffff) == 0;\n      if (!condition1) {\n        condition1 = (input2 & 0x7fffffff) == 0;\n      }\n      if (!condition1) {\n        condition1 = temp2 == 0;\n        result = input1 & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            input1 = input1 << 1;\n            condition1 = (input1 & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          temp2 = temp2 - 1;\n        }\n        input1 = input1 | result;\n        condition1 = param4 == 0;\n        result = input2 & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            input2 = input2 << 1;\n            condition1 = (input2 & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          param4 = param4 - 1;\n        }\n        input2 = input2 | result;\n        goto label3;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto label2;\n        goto label1;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nlabel3:\n    difference = temp2 - param4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      condition3 = signed_carry(difference,0x7f);\n      temp2 = difference + 0x7f;\n      condition1 = temp2 < 0;\n      condition2 = temp2 == 0;\n      if (!condition2 && condition1 == condition3) {\n        condition3 = signed_borrow(0xff,temp2);\n        condition1 = 0xff - temp2 < 0;\n        condition2 = temp2 == 0xff;\n      }\n      if (!condition2 && condition1 == condition3) {\n        input1 = input1 | temp2 * 0x800000;\n      }\n      if (!condition2 && condition1 == condition3) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      temp2 = 0;\n      condition2 = signed_borrow(temp2,1);\n      temp4 = difference + 0x7e;\n      condition1 = temp4 == 0;\n      result = temp4;\n    }\n    else {\n      temp1 = (input2 << 9) >> 4 | 0x10000000;\n      temp2 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      condition1 = temp1 <= temp2;\n      if (!condition1) {\n        temp2 = temp2 << 1;\n      }\n      temp4 = difference + 0x7d + (uint)condition1;\n      result = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          input1 = input1 | result;\n        }\n        condition1 = temp1 >> 1 <= temp2;\n        if (condition1) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (condition1) {\n          input1 = input1 | result >> 1;\n        }\n        condition1 = temp1 >> 2 <= temp2;\n        if (condition1) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (condition1) {\n          input1 = input1 | result >> 2;\n        }\n        condition1 = temp1 >> 3 <= temp2;\n        if (condition1) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (condition1) {\n          input1 = input1 | result >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        condition1 = temp2 == 0;\n        if (!condition1) {\n          result = result >> 4;\n          condition1 = result == 0;\n        }\n      } while (!condition1);\n      condition2 = signed_borrow(temp4,0xfd);\n      condition1 = temp4 == 0xfd;\n      result = temp4 - 0xfd;\n      if (temp4 < 0xfe) {\n        input1 = input1 + temp4 * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (condition1 || (int)result < 0 != condition2) {\n      condition1 = (int)(temp4 + 0x19) < 0;\n      if (temp4 == 0xffffffe7 || condition1 != signed_carry(temp4,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (temp4 == 0xffffffe7 || condition1 != signed_carry(temp4,0x19)) {\n        return input1;\n      }\n      result = (input1 << 1) >> (-temp4 & 0xff);\n      temp4 = input1 << (temp4 + 0x20 & 0xff);\n      result = ((uint)((input1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((temp2 | temp4 << 1) == 0) {\n        result = result & ~(temp4 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "current_name": "calculate_float_08009054",
            "entrypoint": "0x08009054",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009054": "calculate_float_08009054",
                "LAB_08009000": "label2",
                "LAB_0800904a": "label1",
                "LAB_0800906c": "label3",
                "SBORROW4": "signed_borrow",
                "SCARRY4": "signed_carry",
                "bVar7": "condition1",
                "bVar8": "condition2",
                "bVar9": "condition3",
                "iVar3": "difference",
                "iVar5": "temp2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar4": "temp4",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800919c": {
            "additional_data": {
                "FUN_0800919c": {
                    "1": "check_int_overflow",
                    "2": "multiply_and_check_overflow",
                    "4": "multiply_and_compare",
                    "5": "check_overflow",
                    "7": "calculate_result"
                },
                "bVar1": {
                    "1": "has_overflow",
                    "20": "is_negative",
                    "3": "is_negative_result"
                },
                "bVar5": {
                    "1": "is_modified_param_zero",
                    "23": "is_zero",
                    "3": "is_zero_result"
                },
                "param_1": {
                    "1": "input_a",
                    "17": "input_1",
                    "2": "result",
                    "4": "num1"
                },
                "param_1 ^ param_2": {
                    "1": "xor_inputs"
                },
                "param_1_times_2": {
                    "1": "updated_input_1"
                },
                "param_1_times_2_minus_2_times_param_2": {
                    "1": "updated_input_1_plus_minus_2_times_input_2"
                },
                "param_2": {
                    "1": "result",
                    "18": "input_2",
                    "2": "input_b",
                    "4": "num2"
                },
                "return_val": {
                    "1": "result"
                },
                "return_value": {
                    "2": "result"
                },
                "uVar2": {
                    "1": "num1_multiplied_by_2",
                    "2": "input_1_times_two",
                    "4": "input_1_times_2",
                    "5": "input_1_doubled"
                },
                "uVar3": {
                    "1": "num2_times_2",
                    "2": "input_2_times_two",
                    "4": "input_2_times_2",
                    "5": "input_2_doubled"
                },
                "uVar4": {
                    "1": "result",
                    "2": "combined",
                    "3": "combined_result",
                    "5": "combined_inputs",
                    "9": "combined_input"
                }
            },
            "called": [],
            "calling": [
                "FUN_08009204"
            ],
            "code": "\nuint calculate_result_0800919c(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint input_1_doubled;\n  uint input_2_doubled;\n  uint combined_input;\n  bool is_zero;\n  \n  input_1_doubled = input_1 * 2;\n  input_2_doubled = input_2 * 2;\n  if (((int)input_1_doubled >> 0x18 == -1 || (int)input_2_doubled >> 0x18 == -1) &&\n     ((((int)input_1_doubled >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_doubled >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_input = input_1_doubled | input_2 & 0x7fffffff;\n  is_zero = combined_input == 0;\n  if (!is_zero) {\n    combined_input = input_1 ^ input_2;\n    is_zero = combined_input == 0;\n  }\n  is_negative = -1 < (int)combined_input;\n  if (is_negative) {\n    input_1 = input_1_doubled + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && input_2_doubled <= input_1_doubled) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || input_2_doubled > input_1_doubled) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "current_name": "calculate_result_0800919c",
            "entrypoint": "0x0800919c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800919c": "calculate_result_0800919c",
                "bVar1": "is_negative",
                "bVar5": "is_zero",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "input_1_doubled",
                "uVar3": "input_2_doubled",
                "uVar4": "combined_input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080091fc": {
            "additional_data": {
                "FUN_080091fc": {
                    "1": "perform_reverse_operation",
                    "10": "execute_function",
                    "2": "reverse_order"
                },
                "FUN_08009204": {
                    "1": "reverse_input_params",
                    "2": "copy_data",
                    "3": "invoke_sub_function",
                    "4": "call_sub_function"
                },
                "param_1": {
                    "1": "input_param_1",
                    "13": "input1",
                    "2": "param1",
                    "3": "input_param"
                },
                "param_2": {
                    "1": "value2",
                    "13": "input2",
                    "2": "param2",
                    "3": "arg2"
                },
                "undefined8": {
                    "1": "return_value"
                }
            },
            "called": [
                "FUN_08009204"
            ],
            "calling": [
                "FUN_08009250",
                "FUN_08009264"
            ],
            "code": "\nvoid execute_function_080091fc(undefined4 input1,undefined4 input2)\n\n{\n  FUN_08009204(input2,input1);\n  return;\n}\n\n",
            "current_name": "execute_function_080091fc",
            "entrypoint": "0x080091fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080091fc": "execute_function_080091fc",
                "param_1": "input1",
                "param_2": "input2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009204": {
            "additional_data": {
                "FUN_0800919c": {
                    "1": "concatenate_integers",
                    "2": "combine_values",
                    "4": "concatenate_values",
                    "5": "perform_concatenation"
                },
                "FUN_0800919c_param_1": {
                    "1": "value_1"
                },
                "FUN_0800919c_param_2": {
                    "1": "value_2"
                },
                "FUN_08009204": {
                    "1": "concatenate_values",
                    "18": "concatenate_params",
                    "9": "concatenate_parameters"
                },
                "param_1": {
                    "1": "num1",
                    "2": "input_param_1",
                    "3": "first_parameter",
                    "7": "first_param"
                },
                "param_2": {
                    "1": "second_uint32",
                    "2": "input_2",
                    "3": "value2",
                    "7": "second_param"
                }
            },
            "called": [
                "FUN_0800919c"
            ],
            "calling": [
                "FUN_08009228",
                "FUN_080091fc",
                "FUN_08009214",
                "FUN_0800923c"
            ],
            "code": "\nundefined8 concatenate_params_08009204(undefined4 first_param,undefined4 second_param)\n\n{\n  FUN_0800919c();\n  return CONCAT44(second_param,first_param);\n}\n\n",
            "current_name": "concatenate_params_08009204",
            "entrypoint": "0x08009204",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009204": "concatenate_params_08009204",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009214": {
            "additional_data": {
                "FUN_08009204": {
                    "1": "initialize_zr",
                    "2": "initialize"
                },
                "FUN_08009214": {
                    "1": "is_zr_set",
                    "2": "check_if_character_not_null",
                    "4": "check_if_nonzero",
                    "5": "check_if_not_null"
                },
                "in_ZR": {
                    "1": "is_zero_return",
                    "2": "character",
                    "3": "input_character",
                    "5": "input_char",
                    "6": "result"
                },
                "param_1": {
                    "1": "param1"
                },
                "param_2": {
                    "1": "param2"
                }
            },
            "called": [
                "FUN_08009204"
            ],
            "calling": [
                "FUN_08002638",
                "FUN_08002afc",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08001f00"
            ],
            "code": "\nbool check_if_not_null_08009214(void)\n\n{\n  char result;\n  \n  FUN_08009204();\n  return result != '\\0';\n}\n\n",
            "current_name": "check_if_not_null_08009214",
            "entrypoint": "0x08009214",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009214": "check_if_not_null_08009214",
                "in_ZR": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009228": {
            "additional_data": {
                "FUN_08009204": {
                    "1": "initialize_input",
                    "2": "initialize"
                },
                "FUN_08009228": {
                    "1": "check_null_terminator",
                    "2": "check_if_in_cy_null",
                    "3": "is_cy_null",
                    "4": "check_null_termination",
                    "6": "check_if_null_terminated"
                },
                "in_CY": {
                    "1": "input_cy",
                    "17": "input_character",
                    "8": "input_char"
                },
                "param_1": {
                    "1": "param1"
                },
                "param_2": {
                    "1": "param2"
                }
            },
            "called": [
                "FUN_08009204"
            ],
            "calling": [
                "FUN_08003826",
                "FUN_08003004",
                "FUN_08002afc",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "code": "\nbool check_if_null_terminated_08009228(void)\n\n{\n  char input_character;\n  \n  FUN_08009204();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "check_if_null_terminated_08009228",
            "entrypoint": "0x08009228",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009228": "check_if_null_terminated_08009228",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800923c": {
            "additional_data": {
                "FUN_08009204": {
                    "1": "execute_subroutine"
                },
                "FUN_0800923c": {
                    "1": "check_carry_and_zero",
                    "2": "check_condition",
                    "4": "check_flags",
                    "7": "check_conditions"
                },
                "in_CY": {
                    "1": "carry",
                    "17": "carry_flag",
                    "2": "is_cy_set",
                    "3": "is_carry_set"
                },
                "in_ZR": {
                    "1": "is_zero_clear",
                    "15": "zero_flag",
                    "2": "is_zr_set",
                    "3": "is_zero_result",
                    "4": "is_zero"
                },
                "param_1": {
                    "1": "argument_1"
                },
                "param_2": {
                    "1": "argument_2"
                }
            },
            "called": [
                "FUN_08009204"
            ],
            "calling": [
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08001f00"
            ],
            "code": "\nbool check_conditions_0800923c(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_08009204();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "current_name": "check_conditions_0800923c",
            "entrypoint": "0x0800923c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800923c": "check_conditions_0800923c",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009250": {
            "additional_data": {
                "BOOL_VAL_1": {
                    "1": "cleared_cy"
                },
                "BOOL_VAL_2": {
                    "1": "cleared_zr"
                },
                "FUN_080091fc": {
                    "1": "perform_initialization"
                },
                "FUN_08009250": {
                    "1": "check_for_zero_values",
                    "2": "check_zr_cy",
                    "3": "check_flags",
                    "6": "check_cy_zr",
                    "7": "check_cy_and_zr"
                },
                "in_CY": {
                    "1": "has_carry",
                    "11": "carry_flag",
                    "2": "is_carry_flag",
                    "3": "is_carry_set"
                },
                "in_ZR": {
                    "1": "is_zero_flag",
                    "11": "zero_flag",
                    "2": "zero",
                    "3": "is_zero"
                },
                "param_1": {
                    "1": "unknown_param_1"
                },
                "param_2": {
                    "1": "unused_param2"
                }
            },
            "called": [
                "FUN_080091fc"
            ],
            "calling": [
                "FUN_08003004",
                "FUN_08001f00"
            ],
            "code": "\nbool check_cy_and_zr_08009250(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_080091fc();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "current_name": "check_cy_and_zr_08009250",
            "entrypoint": "0x08009250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009250": "check_cy_and_zr_08009250",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009264": {
            "additional_data": {
                "FUN_080091fc": {
                    "1": "initialize_cy"
                },
                "FUN_08009264": {
                    "1": "is_null_terminated",
                    "2": "check_if_cy_is_null",
                    "3": "check_if_input_is_empty",
                    "4": "check_null_termination"
                },
                "in_CY": {
                    "1": "char_input",
                    "10": "input_char",
                    "14": "input_character",
                    "2": "cy"
                }
            },
            "called": [
                "FUN_080091fc"
            ],
            "calling": [
                "FUN_08003004",
                "FUN_080029d8"
            ],
            "code": "\nbool check_null_termination_08009264(void)\n\n{\n  char input_character;\n  \n  FUN_080091fc();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "check_null_termination_08009264",
            "entrypoint": "0x08009264",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009264": "check_null_termination_08009264",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009278": {
            "additional_data": {
                "FUN_08009278": {
                    "1": "convert_to_positive_integer",
                    "2": "decode_signed_integer",
                    "3": "extract_integer",
                    "4": "convert_to_signed_integer"
                },
                "param_1": {
                    "1": "unsigned_int",
                    "12": "input_value",
                    "2": "value",
                    "3": "input_number",
                    "4": "number"
                },
                "param_1_result": {
                    "1": "converted_result"
                },
                "param_2": {
                    "2": "output_value"
                },
                "uVar1": {
                    "1": "shifted_num",
                    "13": "shifted_value",
                    "2": "shifted_input",
                    "4": "shifted_number"
                },
                "uVar1_initial": {
                    "1": "shifted_value_initial"
                },
                "uVar1_result": {
                    "1": "converted"
                },
                "uVar1_shifted": {
                    "1": "shifted_value_shifted"
                },
                "uVar1_temp": {
                    "1": "shifted_temp"
                },
                "uVar2": {
                    "1": "shifted_dist",
                    "19": "difference",
                    "2": "offset"
                },
                "uVar2_initial": {
                    "1": "difference_initial"
                },
                "uVar2_shifted": {
                    "1": "difference_shifted"
                },
                "uVar3": {
                    "1": "result",
                    "2": "shifted_value2"
                },
                "uVar4": {
                    "1": "sign_adjusted_value",
                    "2": "result"
                },
                "uVar5": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003b98",
                "FUN_08003826"
            ],
            "code": "\nuint convert_to_signed_integer_08009278(uint input_value)\n\n{\n  uint shifted_value;\n  uint difference;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (input_value << 1) >> 0x18;\n  difference = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && difference != 0) {\n    shifted_value = (input_value << 8 | 0x80000000) >> (difference & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((difference == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "current_name": "convert_to_signed_integer_08009278",
            "entrypoint": "0x08009278",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009278": "convert_to_signed_integer_08009278",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009318": {
            "additional_data": {
                "FUN_08009318": {
                    "1": "process_number",
                    "4": "calculate_floating_point"
                },
                "bVar4": {
                    "1": "carry_bit",
                    "18": "carry_flag",
                    "3": "is_carry",
                    "9": "carry"
                },
                "iVar1": {
                    "1": "check_var",
                    "2": "result1",
                    "5": "comparison_result",
                    "8": "result",
                    "9": "return_value"
                },
                "lVar6": {
                    "1": "concatenated",
                    "2": "final_value",
                    "3": "final_result",
                    "4": "converted_value",
                    "8": "output"
                },
                "param_1": {
                    "1": "input_value1",
                    "13": "input1",
                    "2": "integer_part",
                    "3": "mantissa"
                },
                "param_2": {
                    "1": "arg2",
                    "13": "input2",
                    "2": "fractional_part",
                    "4": "exponent"
                },
                "param_3": {
                    "1": "unused_param_1",
                    "11": "param3",
                    "2": "input3",
                    "3": "constant1",
                    "5": "unused_param1"
                },
                "param_4": {
                    "1": "unused_param",
                    "11": "param4",
                    "2": "input4",
                    "3": "constant2",
                    "5": "unused_param2"
                },
                "uVar2": {
                    "1": "difference",
                    "3": "exponent_offset",
                    "5": "exponent",
                    "6": "shifted_bits",
                    "7": "exponent_diff"
                },
                "uVar3": {
                    "1": "shifted_exponent",
                    "2": "bit_mask",
                    "20": "mask"
                },
                "uVar5": {
                    "1": "temporary_value",
                    "20": "result",
                    "4": "temp_result"
                }
            },
            "called": [
                "FUN_08008b60",
                "FUN_080082d4"
            ],
            "calling": [
                "FUN_08003004",
                "FUN_08001994",
                "FUN_08002c18"
            ],
            "code": "\nlonglong calculate_floating_point_08009318(uint input1,uint input2,undefined4 param3,undefined4 param4)\n\n{\n  int return_value;\n  uint exponent_diff;\n  uint mask;\n  bool carry_flag;\n  undefined8 result;\n  longlong output;\n  \n  mask = (input2 << 1) >> 0x15;\n  exponent_diff = mask - 0x3ff;\n  if ((int)exponent_diff < 0x14) {\n    if ((int)exponent_diff < 0) {\n      result = FUN_080082d4(input1,input2,0x8800759c,0x7e37e43c,param4);\n      return_value = FUN_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      output = CONCAT44(input2,input1);\n      if (return_value != 0) {\n        if ((int)input2 < 0) {\n          output = -0x8000000000000000;\n        }\n        else if ((input1 | input2) == 0) {\n          output = 0;\n        }\n        else {\n          output = 0x3ff0000000000000;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (exponent_diff & 0xff);\n      output = CONCAT44(input2,input1);\n      if ((input2 & mask | input1) != 0) {\n        result = FUN_080082d4(input1,input2,0x8800759c,0x7e37e43c,param4);\n        return_value = FUN_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n        output = CONCAT44(input2,input1);\n        if (return_value != 0) {\n          if (0 < (int)input2) {\n            input2 = input2 + (0x100000 >> (exponent_diff & 0xff));\n          }\n          output = (ulonglong)(input2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)exponent_diff < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    output = CONCAT44(input2,input1);\n    if ((mask & input1) != 0) {\n      result = FUN_080082d4(input1,input2,0x8800759c,0x7e37e43c,param4);\n      return_value = FUN_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      output = CONCAT44(input2,input1);\n      if (return_value != 0) {\n        if (0 < (int)input2) {\n          if (exponent_diff == 0x14) {\n            input2 = input2 + 1;\n          }\n          else {\n            exponent_diff = 1 << (0x34 - exponent_diff & 0xff);\n            carry_flag = CARRY4(exponent_diff,input1);\n            input1 = exponent_diff + input1;\n            if (carry_flag != false) {\n              input2 = input2 + 1;\n            }\n          }\n        }\n        output = CONCAT44(input2,input1 & ~mask);\n      }\n    }\n  }\n  else {\n    output = CONCAT44(input2,input1);\n    if (exponent_diff == 0x400) {\n      output = FUN_080082d4();\n    }\n  }\n  return output;\n}\n\n",
            "current_name": "calculate_floating_point_08009318",
            "entrypoint": "0x08009318",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009318": "calculate_floating_point_08009318",
                "bVar4": "carry_flag",
                "iVar1": "return_value",
                "lVar6": "output",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar2": "exponent_diff",
                "uVar3": "mask",
                "uVar5": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009410": {
            "additional_data": {
                "FUN_080082d0": {
                    "1": "handle_large_input"
                },
                "FUN_08009410": {
                    "1": "calculate_result",
                    "2": "process_binary_function",
                    "3": "process_number",
                    "4": "process_input",
                    "6": "process_data"
                },
                "FUN_08009d78": {
                    "1": "calculate_something",
                    "2": "process_value"
                },
                "FUN_0800a348": {
                    "1": "apply_transformation2"
                },
                "FUN_0800adf0": {
                    "1": "handle_result"
                },
                "local_20": {
                    "1": "output_var3",
                    "2": "local_variable3",
                    "3": "temp3",
                    "4": "local_var3",
                    "5": "temp_var3",
                    "6": "result3"
                },
                "local_28": {
                    "1": "buffer",
                    "2": "temp_var_1",
                    "3": "temp1",
                    "4": "local_var1",
                    "5": "temp_var1",
                    "6": "result1"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "input_param1",
                    "6": "input_param",
                    "9": "input1"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "input_param2",
                    "3": "number",
                    "6": "value",
                    "9": "input2"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "param4"
                },
                "uStack_1c": {
                    "1": "output_var4",
                    "2": "local_variable4",
                    "3": "temp4",
                    "4": "local_var4",
                    "5": "temp_var4",
                    "6": "result4"
                },
                "uStack_24": {
                    "1": "output2",
                    "2": "local_variable2",
                    "3": "temp2",
                    "4": "var2",
                    "5": "temp_var2",
                    "6": "result2"
                },
                "uVar1": {
                    "1": "return_value1",
                    "17": "result",
                    "4": "output",
                    "8": "return_value"
                },
                "uVar2": {
                    "1": "bitwise_flag",
                    "2": "processed_value",
                    "3": "status",
                    "4": "result",
                    "6": "flag"
                }
            },
            "called": [
                "FUN_080082d0",
                "FUN_0800a348",
                "FUN_08009d78",
                "FUN_0800adf0"
            ],
            "calling": [
                "FUN_08001f00"
            ],
            "code": "\nundefined4 process_data_08009410(undefined4 input,uint input2)\n\n{\n  undefined4 result;\n  uint flag;\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  \n  if (0x3fe921fb < (input2 & 0x7fffffff)) {\n    if ((input2 & 0x7fffffff) < 0x7ff00000) {\n      flag = FUN_08009d78(input,input2,&result1);\n      flag = flag & 3;\n      if (flag == 1) {\n        result = FUN_0800adf0(result1,result2,result3,result4,1);\n      }\n      else if (flag == 2) {\n        result = FUN_0800a348(result1,result2,result3,result4);\n      }\n      else if (flag == 0) {\n        result = FUN_0800a348(result1,result2,result3,result4);\n      }\n      else {\n        result = FUN_0800adf0(result1,result2,result3,result4,1);\n      }\n    }\n    else {\n      result = FUN_080082d0(input,input2,input,input2);\n    }\n    return result;\n  }\n  result = FUN_0800a348(input,input2,0,0);\n  return result;\n}\n\n",
            "current_name": "process_data_08009410",
            "entrypoint": "0x08009410",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009410": "process_data_08009410",
                "local_20": "result3",
                "local_28": "result1",
                "param_1": "input",
                "param_2": "input2",
                "uStack_1c": "result4",
                "uStack_24": "result2",
                "uVar1": "result",
                "uVar2": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080094c0": {
            "additional_data": {
                "FUC_080082d4": {
                    "1": "calculate_result"
                },
                "FUN_08008b60": {
                    "1": "check_result"
                },
                "FUN_080094c0": {
                    "1": "process_number",
                    "2": "calculate_floating_point_value",
                    "3": "calculate_floating_point",
                    "6": "calculate_result"
                },
                "bVar4": {
                    "1": "carry_over",
                    "10": "carry",
                    "20": "carry_flag"
                },
                "iVar1": {
                    "1": "comparison",
                    "17": "result",
                    "2": "comparison_result",
                    "3": "return_value"
                },
                "lVar6": {
                    "1": "concatenated_result",
                    "13": "final_result",
                    "2": "output",
                    "3": "result",
                    "4": "return_value"
                },
                "param_1": {
                    "1": "input_bits",
                    "13": "input1",
                    "2": "num1",
                    "3": "input_value1"
                },
                "param_2": {
                    "1": "fraction",
                    "13": "input2",
                    "2": "num2",
                    "3": "exponent"
                },
                "param_3": {
                    "1": "input_value3",
                    "12": "param3",
                    "2": "constant_1",
                    "3": "input_param_3",
                    "5": "constant1"
                },
                "param_4": {
                    "1": "dummy2",
                    "12": "param4",
                    "2": "constant_2",
                    "3": "input_param_4",
                    "5": "constant2"
                },
                "uVar2": {
                    "1": "shifted_input",
                    "2": "exponent_difference",
                    "4": "shifted_amount",
                    "5": "shift_amount"
                },
                "uVar3": {
                    "1": "var2",
                    "19": "mask",
                    "2": "shifted_input2",
                    "3": "bit_mask"
                },
                "uVar5": {
                    "1": "processed_value",
                    "2": "temp_var",
                    "6": "temp_result",
                    "9": "result"
                }
            },
            "called": [
                "FUN_08008b60",
                "FUN_080082d4"
            ],
            "calling": [
                "FUN_0800a5a0",
                "FUN_08002408",
                "FUN_08001f00",
                "FUN_08002c18"
            ],
            "code": "\nlonglong calculate_result_080094c0(uint input1,uint input2,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  uint shift_amount;\n  uint mask;\n  bool carry_flag;\n  undefined8 result;\n  longlong final_result;\n  \n  mask = (input2 << 1) >> 0x15;\n  shift_amount = mask - 0x3ff;\n  if ((int)shift_amount < 0x14) {\n    if ((int)shift_amount < 0) {\n      result = FUN_080082d4(input1,input2,0x8800759c,0x7e37e43c,param4);\n      result = FUN_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      final_result = CONCAT44(input2,input1);\n      if (result != 0) {\n        if ((int)input2 < 0) {\n          if ((input1 | input2 & 0x7fffffff) != 0) {\n            input2 = 0xbff00000;\n          }\n          final_result = (ulonglong)input2 << 0x20;\n        }\n        else {\n          final_result = 0;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (shift_amount & 0xff);\n      final_result = CONCAT44(input2,input1);\n      if ((input2 & mask | input1) != 0) {\n        result = FUN_080082d4(input1,input2,0x8800759c,0x7e37e43c,param4);\n        result = FUN_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n        final_result = CONCAT44(input2,input1);\n        if (result != 0) {\n          if ((int)input2 < 0) {\n            input2 = input2 + (0x100000 >> (shift_amount & 0xff));\n          }\n          final_result = (ulonglong)(input2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shift_amount < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    final_result = CONCAT44(input2,input1);\n    if ((mask & input1) != 0) {\n      result = FUN_080082d4(input1,input2,0x8800759c,0x7e37e43c,param4);\n      result = FUN_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      final_result = CONCAT44(input2,input1);\n      if (result != 0) {\n        if ((int)input2 < 0) {\n          if (shift_amount == 0x14) {\n            input2 = input2 + 1;\n          }\n          else {\n            shift_amount = 1 << (0x34 - shift_amount & 0xff);\n            carry_flag = CARRY4(shift_amount,input1);\n            input1 = shift_amount + input1;\n            if (carry_flag != false) {\n              input2 = input2 + 1;\n            }\n          }\n        }\n        final_result = CONCAT44(input2,input1 & ~mask);\n      }\n    }\n  }\n  else {\n    final_result = CONCAT44(input2,input1);\n    if (shift_amount == 0x400) {\n      final_result = FUN_080082d4();\n    }\n  }\n  return final_result;\n}\n\n",
            "current_name": "calculate_result_080094c0",
            "entrypoint": "0x080094c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080094c0": "calculate_result_080094c0",
                "bVar4": "carry_flag",
                "iVar1": "result",
                "lVar6": "final_result",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar2": "shift_amount",
                "uVar3": "mask",
                "uVar5": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080095b8": {
            "additional_data": {
                "FUN_08008ba0": {
                    "1": "handle_overflow",
                    "2": "calculate_carry"
                },
                "FUN_080095b8": {
                    "1": "process_input",
                    "2": "calculate_multiplier",
                    "22": "calculate_product",
                    "6": "calculate_result"
                },
                "F_08008ba0": {
                    "1": "calculate_carry"
                },
                "iVar4": {
                    "1": "multiplier",
                    "29": "sign"
                },
                "param_1": {
                    "1": "input_num1",
                    "11": "input_1",
                    "3": "multiplier",
                    "8": "input1"
                },
                "param_2": {
                    "1": "b",
                    "11": "input_2",
                    "2": "multiplicand",
                    "3": "input_value_2",
                    "8": "input2"
                },
                "uVar1": {
                    "1": "shifted_bits",
                    "2": "bitwise_shift",
                    "4": "bit_shifted_value",
                    "6": "carry"
                },
                "uVar2": {
                    "1": "shifted_bit_position",
                    "2": "shifted_param2",
                    "3": "shift_count",
                    "4": "shifted_input2",
                    "6": "shifted_bits"
                },
                "uVar3": {
                    "1": "modified_input_2",
                    "28": "result"
                },
                "uVar4": {
                    "1": "temp"
                },
                "uVar5": {
                    "1": "shifted_diff",
                    "11": "difference",
                    "12": "exponent",
                    "2": "shift_amount"
                },
                "uVar6": {
                    "1": "shifted_value"
                },
                "uVar7": {
                    "1": "temp_value"
                },
                "uVar8": {
                    "1": "temp_value2"
                }
            },
            "called": [
                "FUN_08008ba0"
            ],
            "calling": [
                "FUN_08003004",
                "FUN_08001994"
            ],
            "code": "\nint calculate_product_080095b8(uint input_1,uint input_2)\n\n{\n  uint carry;\n  uint shifted_bits;\n  uint result;\n  int sign;\n  uint exponent;\n  \n  shifted_bits = (input_2 << 1) >> 0x15;\n  exponent = shifted_bits - 0x3ff;\n  if ((int)input_2 < 0) {\n    sign = -1;\n  }\n  else {\n    sign = 1;\n  }\n  result = input_2 & 0xfffff | 0x100000;\n  if ((int)exponent < 0x14) {\n    if ((int)exponent < 0) {\n      if (exponent != 0xffffffff) {\n        sign = 0;\n      }\n      return sign;\n    }\n    result = result + (0x80000 >> (exponent & 0xff)) >> (0x14 - exponent & 0xff);\n  }\n  else {\n    if (0x1e < exponent) {\n      sign = FUN_08008ba0();\n      return sign;\n    }\n    if ((int)exponent < 0x34) {\n      carry = 0x80000000 >> (shifted_bits - 0x413 & 0xff);\n      if (CARRY4(carry,input_1) != false) {\n        result = result + 1;\n      }\n      result = result << (shifted_bits - 0x413 & 0xff);\n      if (exponent != 0x14) {\n        result = result | carry + input_1 >> (0x34 - exponent & 0xff);\n      }\n    }\n    else {\n      result = result << (shifted_bits - 0x413 & 0xff) | input_1 << (shifted_bits - 0x433 & 0xff);\n    }\n  }\n  return result * sign;\n}\n\n",
            "current_name": "calculate_product_080095b8",
            "entrypoint": "0x080095b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080095b8": "calculate_product_080095b8",
                "iVar4": "sign",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "carry",
                "uVar2": "shifted_bits",
                "uVar3": "result",
                "uVar5": "exponent"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009654": {
            "additional_data": {
                "0x80000 >> (uVar1 & 0xff)": {
                    "1": "carry_bit_shift"
                },
                "0xfffff >> (uVar1 & 0xff)": {
                    "1": "mantissa_mask"
                },
                "1 << (0x33 - uVar1 & 0xff)": {
                    "1": "carry_bit_value"
                },
                "FUN_080082d4": {
                    "1": "compute_special_float",
                    "2": "get_na_n_value",
                    "3": "handle_special_case"
                },
                "FUN_08009654": {
                    "1": "convert_to_float",
                    "2": "convert_float_to_double",
                    "3": "decode_float",
                    "7": "convert_to_double"
                },
                "lVar3": {
                    "1": "decoded_float",
                    "22": "result"
                },
                "param_1": {
                    "1": "first_param",
                    "2": "input_low",
                    "3": "value1",
                    "5": "integer_part",
                    "7": "input1"
                },
                "param_2": {
                    "1": "fraction",
                    "2": "input_high",
                    "3": "value2",
                    "5": "fractional_part",
                    "7": "input2"
                },
                "param_2 & 0x80000000": {
                    "1": "input2_sign"
                },
                "param_2 & uVar2 | param_1": {
                    "1": "mantissa_bits"
                },
                "param_2 + (0x80000 >> (uVar1 & 0xff)) & ~uVar2": {
                    "1": "incremented_mantissa"
                },
                "param_3": {
                    "1": "third_param"
                },
                "param_4": {
                    "1": "value4"
                },
                "uVar1": {
                    "1": "adjusted_value1",
                    "2": "temp1",
                    "3": "difference",
                    "4": "exponent_difference",
                    "5": "exponent_diff",
                    "6": "exponent"
                },
                "uVar2": {
                    "1": "shifted_param2",
                    "10": "shifted_exponent",
                    "2": "temp2",
                    "3": "shift_amount"
                },
                "uVar2 - 0x3ff": {
                    "1": "exponent_diff_minus_bias"
                },
                "uVar2 - 0x413 & 0xff": {
                    "1": "mask_shift"
                },
                "uVar2 << 1": {
                    "1": "shifted_input2"
                },
                "uVar3": {
                    "1": "bottom_bits"
                },
                "uVar4": {
                    "1": "bit_mask"
                },
                "uVar5": {
                    "1": "left_shift"
                },
                "uVar6": {
                    "1": "right_shift"
                }
            },
            "called": [
                "FUN_080082d4"
            ],
            "calling": [
                "FUN_08004e30"
            ],
            "code": "\nlonglong convert_to_double_08009654(uint input1,uint input2)\n\n{\n  uint exponent;\n  uint shifted_exponent;\n  longlong result;\n  \n  result = CONCAT44(input2,input1);\n  shifted_exponent = (input2 << 1) >> 0x15;\n  exponent = shifted_exponent - 0x3ff;\n  if ((int)exponent < 0x14) {\n    if ((int)exponent < 0) {\n      input2 = input2 & 0x80000000;\n      if (exponent == 0xffffffff) {\n        input2 = input2 | 0x3ff00000;\n      }\n      result = (ulonglong)input2 << 0x20;\n    }\n    else {\n      shifted_exponent = 0xfffff >> (exponent & 0xff);\n      result = CONCAT44(input2,input1);\n      if ((input2 & shifted_exponent | input1) != 0) {\n        result = (ulonglong)(input2 + (0x80000 >> (exponent & 0xff)) & ~shifted_exponent) << 0x20;\n      }\n    }\n  }\n  else if ((int)exponent < 0x34) {\n    shifted_exponent = 0xffffffff >> (shifted_exponent - 0x413 & 0xff);\n    if ((input1 & shifted_exponent) != 0) {\n      exponent = 1 << (0x33 - exponent & 0xff);\n      if (CARRY4(input1,exponent) != false) {\n        input2 = input2 + 1;\n      }\n      result = CONCAT44(input2,input1 + exponent & ~shifted_exponent);\n    }\n  }\n  else {\n    result = CONCAT44(input2,input1);\n    if (exponent == 0x400) {\n      result = FUN_080082d4();\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "convert_to_double_08009654",
            "entrypoint": "0x08009654",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009654": "convert_to_double_08009654",
                "lVar3": "result",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "exponent",
                "uVar2": "shifted_exponent"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080096e8": {
            "additional_data": {
                "FUN_080082d0": {
                    "1": "reverse_value"
                },
                "FUN_080096e8": {
                    "1": "parse_and_process_value",
                    "10": "process_number",
                    "11": "process_data"
                },
                "FUN_08009d78": {
                    "1": "calculate"
                },
                "FUN_0800a348": {
                    "1": "compute_value"
                },
                "FUN_0800adf0": {
                    "1": "handle_error"
                },
                "local_20": {
                    "1": "var_3",
                    "2": "local_var3",
                    "3": "result3",
                    "6": "temp_var3",
                    "7": "temp3"
                },
                "local_28": {
                    "1": "var_1",
                    "2": "local_var1",
                    "3": "result1",
                    "6": "temp_var1",
                    "7": "temp1"
                },
                "param_1": {
                    "1": "value",
                    "10": "input",
                    "3": "input_data",
                    "4": "input1",
                    "6": "input_value",
                    "7": "input_param"
                },
                "param_2": {
                    "1": "bit_mask",
                    "2": "input_size",
                    "3": "flag",
                    "4": "input2",
                    "6": "value",
                    "7": "number"
                },
                "uStack_1c": {
                    "1": "var_4",
                    "2": "local_var4",
                    "3": "result4",
                    "6": "temp_var4",
                    "7": "temp4"
                },
                "uStack_24": {
                    "1": "var_2",
                    "2": "temp_value2",
                    "3": "result2",
                    "6": "var2",
                    "7": "temp2"
                },
                "uVar1": {
                    "2": "output",
                    "21": "result",
                    "7": "return_value"
                },
                "uVar2": {
                    "1": "modified_data_size",
                    "14": "flag",
                    "2": "result",
                    "3": "status"
                }
            },
            "called": [
                "FUN_080082d0",
                "FUN_0800a348",
                "FUN_08009d78",
                "FUN_0800adf0"
            ],
            "calling": [
                "FUN_08001f00"
            ],
            "code": "\nundefined4 process_data_080096e8(undefined4 input,uint number)\n\n{\n  undefined4 result;\n  uint flag;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  \n  if (0x3fe921fb < (number & 0x7fffffff)) {\n    if ((number & 0x7fffffff) < 0x7ff00000) {\n      flag = FUN_08009d78(input,number,&temp1);\n      flag = flag & 3;\n      if (flag == 1) {\n        result = FUN_0800a348(temp1,temp2,temp3,temp4);\n      }\n      else if (flag == 2) {\n        result = FUN_0800adf0(temp1,temp2,temp3,temp4,1);\n      }\n      else if (flag == 0) {\n        result = FUN_0800adf0(temp1,temp2,temp3,temp4,1);\n      }\n      else {\n        result = FUN_0800a348(temp1,temp2,temp3,temp4);\n      }\n    }\n    else {\n      result = FUN_080082d0(input,number,input,number);\n    }\n    return result;\n  }\n  result = FUN_0800adf0(input,number,0,0,0);\n  return result;\n}\n\n",
            "current_name": "process_data_080096e8",
            "entrypoint": "0x080096e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080096e8": "process_data_080096e8",
                "local_20": "temp3",
                "local_28": "temp1",
                "param_1": "input",
                "param_2": "number",
                "uStack_1c": "temp4",
                "uStack_24": "temp2",
                "uVar1": "result",
                "uVar2": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009798": {
            "additional_data": {
                "FUN_080082d4": {
                    "1": "perform_operation"
                },
                "FUN_08009798": {
                    "1": "perform_bitwise_operations",
                    "10": "extract_bits",
                    "2": "shift_and_mask",
                    "3": "extract_bit_range",
                    "7": "calculate_shifted_value"
                },
                "lVar3": {
                    "1": "output",
                    "29": "result"
                },
                "param_1": {
                    "1": "input_value1",
                    "13": "input1",
                    "2": "input_value_1",
                    "3": "input_value",
                    "7": "input_1"
                },
                "param_2": {
                    "1": "num2",
                    "13": "input2",
                    "2": "input_value_2",
                    "7": "input_2"
                },
                "param_3": {
                    "1": "unknown_1",
                    "2": "param_3",
                    "3": "unused",
                    "4": "unused_param",
                    "5": "unused_param1",
                    "6": "unused_param_1"
                },
                "param_4": {
                    "1": "temp2",
                    "2": "param_4",
                    "3": "unused_param",
                    "5": "param4",
                    "6": "unused_param2"
                },
                "uVar1": {
                    "1": "offset_difference",
                    "2": "bit_difference",
                    "4": "shifted_amount",
                    "5": "shift_amount",
                    "7": "shifted_bits"
                },
                "uVar2": {
                    "1": "shifted_value_divided",
                    "3": "shifted_input2",
                    "5": "shift_amount",
                    "8": "shifted_value"
                }
            },
            "called": [
                "FUN_080082d4"
            ],
            "calling": [
                "FUN_08003b98",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "code": "\nlonglong extract_bits_08009798(uint input1,uint input2,undefined4 unused_param_1,undefined4 unused_param2)\n\n{\n  uint shifted_bits;\n  uint shifted_value;\n  longlong result;\n  \n  shifted_value = (input2 << 1) >> 0x15;\n  shifted_bits = shifted_value - 0x3ff;\n  if ((int)shifted_bits < 0x14) {\n    if ((int)shifted_bits < 0) {\n      return ((ulonglong)input2 & 0x80000000) << 0x20;\n    }\n    result = (ulonglong)(input2 & ~(0xfffff >> (shifted_bits & 0xff))) << 0x20;\n  }\n  else {\n    if ((int)shifted_bits < 0x34) {\n      return CONCAT44(input2,input1 & ~(0xffffffffU >> (shifted_value - 0x413 & 0xff)));\n    }\n    if (shifted_bits != 0x400) {\n      return CONCAT44(input2,input1);\n    }\n    result = FUN_080082d4(input1,input2,input1,input2,unused_param2);\n  }\n  return result;\n}\n\n",
            "current_name": "extract_bits_08009798",
            "entrypoint": "0x08009798",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009798": "extract_bits_08009798",
                "lVar3": "result",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "unused_param_1",
                "param_4": "unused_param2",
                "uVar1": "shifted_bits",
                "uVar2": "shifted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800981c": {
            "additional_data": {
                "FUN_0800981c": {
                    "1": "process_data",
                    "28": "calculate_hypotenuse"
                },
                "FUN_08009b24": {
                    "1": "initialize_variables"
                },
                "FUN_0800b2d4": {
                    "1": "check_parameters"
                },
                "FUN_0800b2e0": {
                    "1": "perform_operation"
                },
                "FUN_0800b3dc": {
                    "1": "get_memory_address"
                },
                "F_0800981c": {
                    "1": "calculate_result"
                },
                "iVar1": {
                    "1": "error_check",
                    "14": "result",
                    "5": "status"
                },
                "local_30": {
                    "1": "success",
                    "12": "result",
                    "2": "temp_variable"
                },
                "local_38": {
                    "1": "min_float_value",
                    "3": "min_range",
                    "4": "min_value",
                    "8": "lower_limit"
                },
                "local_40": {
                    "1": "side3_1",
                    "2": "param_3_copy",
                    "3": "input_c",
                    "4": "side3_value",
                    "5": "side_c"
                },
                "local_48": {
                    "1": "constant_var_2",
                    "2": "side_1",
                    "3": "input_a",
                    "4": "side1_value",
                    "5": "side_a"
                },
                "local_50": {
                    "1": "constant_var_1",
                    "2": "option",
                    "3": "calculation_type"
                },
                "param_1": {
                    "1": "base",
                    "13": "side_a",
                    "2": "side_1",
                    "6": "side1"
                },
                "param_2": {
                    "1": "value2",
                    "13": "side_b",
                    "2": "side_2",
                    "6": "side2"
                },
                "param_3": {
                    "1": "side_length_3",
                    "13": "side_c",
                    "6": "side3"
                },
                "param_4": {
                    "1": "input4",
                    "13": "side_d",
                    "6": "side4"
                },
                "pcStack_4c": {
                    "1": "string_ptr",
                    "11": "function_name",
                    "2": "shape_name",
                    "3": "algorithm_name",
                    "4": "calculation_name",
                    "8": "operation_name"
                },
                "piVar3": {
                    "1": "ptr",
                    "2": "pointer",
                    "3": "integer_pointer",
                    "4": "int_pointer"
                },
                "puVar2": {
                    "1": "result_pointer",
                    "11": "pointer",
                    "2": "ptr",
                    "3": "pointer_var"
                },
                "uStack_34": {
                    "1": "static_var_2",
                    "3": "max_range",
                    "4": "upper_bound",
                    "8": "upper_limit"
                },
                "uStack_3c": {
                    "1": "length_d_copy",
                    "2": "param_4_copy",
                    "3": "side_d_copy",
                    "4": "side4_value",
                    "5": "side_d"
                },
                "uStack_44": {
                    "1": "side2_1",
                    "2": "side_2",
                    "3": "input_b",
                    "4": "side2_value",
                    "5": "side_b"
                },
                "uVar4": {
                    "1": "output",
                    "15": "return_value",
                    "2": "result",
                    "5": "final_result"
                }
            },
            "called": [
                "FUN_0800b2d4",
                "FUN_0800b3dc",
                "FUN_0800b2e0",
                "FUN_08009b24"
            ],
            "calling": [
                "FUN_080005b4",
                "FUN_08001f00"
            ],
            "code": "\nundefined8 calculate_hypotenuse_0800981c(undefined4 side_a,undefined4 side_b,undefined4 side_c,undefined4 side_d)\n\n{\n  int result;\n  undefined4 *pointer;\n  int *int_pointer;\n  undefined8 return_value;\n  undefined4 num_sides;\n  char *function_name;\n  undefined4 side_a;\n  undefined4 side_b;\n  undefined4 side_c;\n  undefined4 side_d;\n  undefined4 lower_limit;\n  undefined4 upper_limit;\n  int error_code;\n  \n  return_value = FUN_08009b24();\n  if (DAT_20000014 == -1) {\n    return return_value;\n  }\n  error_code = FUN_0800b2d4();\n  if (error_code != 0) {\n    return return_value;\n  }\n  result = FUN_0800b2d4(side_a,side_b);\n  if (result == 0) {\n    return return_value;\n  }\n  result = FUN_0800b2d4(side_c,side_d);\n  if (result == 0) {\n    return return_value;\n  }\n  num_sides = 3;\n  function_name = \"hypot\";\n  side_a = side_a;\n  side_b = side_b;\n  side_c = side_c;\n  side_d = side_d;\n  if (DAT_20000014 == '\\0') {\n    lower_limit = 0xe0000000;\n    upper_limit = 0x47efffff;\nLAB_080098aa:\n    result = FUN_0800b2e0(&num_sides);\n    if (result != 0) goto LAB_08009896;\n  }\n  else {\n    lower_limit = 0;\n    upper_limit = 0x7ff00000;\n    if (DAT_20000014 != '\\x02') goto LAB_080098aa;\n  }\n  pointer = (undefined4 *)FUN_0800b3dc();\n  *pointer = 0x22;\nLAB_08009896:\n  return_value = CONCAT44(upper_limit,lower_limit);\n  if (error_code != 0) {\n    int_pointer = (int *)FUN_0800b3dc();\n    return_value = CONCAT44(upper_limit,lower_limit);\n    *int_pointer = error_code;\n  }\n  return return_value;\n}\n\n",
            "current_name": "calculate_hypotenuse_0800981c",
            "entrypoint": "0x0800981c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800981c": "calculate_hypotenuse_0800981c",
                "iVar1": "result",
                "local_30": "error_code",
                "local_38": "lower_limit",
                "local_40": "side_c",
                "local_48": "side_a",
                "local_50": "num_sides",
                "param_1": "side_a",
                "param_2": "side_b",
                "param_3": "side_c",
                "param_4": "side_d",
                "pcStack_4c": "function_name",
                "piVar3": "int_pointer",
                "puVar2": "pointer",
                "uStack_34": "upper_limit",
                "uStack_3c": "side_d",
                "uStack_44": "side_b",
                "uVar4": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080098d0": {
            "additional_data": {
                "DAT_20000014": {
                    "1": "constant_value"
                },
                "FUN_08008894": {
                    "1": "process_data_part2"
                },
                "FUN_08008b24": {
                    "1": "check_flag"
                },
                "FUN_08008b74": {
                    "2": "check_condition"
                },
                "FUN_080098d0": {
                    "1": "execute_process",
                    "2": "extract_data",
                    "9": "process_data"
                },
                "FUN_0800a1bc": {
                    "1": "initialize_value"
                },
                "FUN_0800b2e0": {
                    "2": "perform_operation"
                },
                "FUN_0800b3dc": {
                    "1": "get_memory_address"
                },
                "cVar1": {
                    "1": "flag_char",
                    "2": "constant_value",
                    "4": "flag"
                },
                "iVar3": {
                    "1": "result_code",
                    "2": "return_value",
                    "7": "status",
                    "8": "result"
                },
                "local_30": {
                    "1": "local_var6",
                    "2": "local_variable8",
                    "4": "temp_result",
                    "6": "temp"
                },
                "local_38": {
                    "1": "result_2",
                    "2": "output",
                    "3": "value",
                    "8": "result"
                },
                "local_40": {
                    "1": "temp_param_1",
                    "2": "param_1_copy_2"
                },
                "local_48": {
                    "1": "temp_param_1",
                    "2": "local_variable3",
                    "3": "input_1_copy",
                    "4": "input_param_copy"
                },
                "local_4c": {
                    "1": "char_pointer_var",
                    "2": "data_pointer",
                    "4": "string_ptr",
                    "5": "message",
                    "7": "data_ptr"
                },
                "local_50": {
                    "1": "value_1",
                    "17": "flag",
                    "2": "value1",
                    "5": "flag1"
                },
                "param_1": {
                    "1": "input_parameter_1",
                    "11": "input1",
                    "3": "input_param_1",
                    "4": "input_param",
                    "8": "input_1"
                },
                "param_2": {
                    "1": "input_parameter2",
                    "11": "input2",
                    "3": "input_param_2",
                    "4": "output_param",
                    "8": "input_2"
                },
                "piVar5": {
                    "1": "pointer3",
                    "2": "pointer2",
                    "3": "ptr2",
                    "4": "int_pointer"
                },
                "puVar4": {
                    "1": "ptr_data",
                    "2": "pointer1",
                    "3": "ptr",
                    "6": "pointer_var"
                },
                "uStack_3c": {
                    "1": "input_param_2_copy_2",
                    "2": "param2_copy"
                },
                "uStack_44": {
                    "1": "var2",
                    "2": "local_variable4",
                    "3": "param2_copy",
                    "4": "output_param_copy"
                },
                "uVar2": {
                    "1": "temp_val",
                    "11": "return_value",
                    "12": "result"
                }
            },
            "called": [
                "FUN_08008b24",
                "FUN_0800b3dc",
                "FUN_0800a1bc",
                "FUN_0800b2e0",
                "FUN_08008894",
                "FUN_08008b74"
            ],
            "calling": [
                "FUN_08003004",
                "FUN_080005b4",
                "FUN_08002978",
                "FUN_08001994"
            ],
            "code": "\nundefined4 process_data_080098d0(undefined4 input1,undefined4 input2)\n\n{\n  char flag;\n  undefined4 result;\n  int result;\n  undefined4 *pointer_var;\n  int *int_ptr;\n  undefined4 flag;\n  undefined *data_ptr;\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param1_copy;\n  undefined4 param2_copy;\n  undefined8 result;\n  int temp;\n  \n  result = FUN_0800a1bc();\n  flag = DAT_20000014;\n  if (((DAT_20000014 == -1) ||\n      (temp = FUN_08008b74(input1,input2,input1,input2), temp != 0)) ||\n     (result = FUN_08008b24(input1,input2,0,0), result == 0)) {\n    return result;\n  }\n  flag = 1;\n  data_ptr = &DAT_0800be5c;\n  param1 = input1;\n  param2 = input2;\n  param1_copy = input1;\n  param2_copy = input2;\n  if (flag == '\\0') {\n    result = 0;\nLAB_0800996c:\n    result = FUN_0800b2e0(&flag);\n    if (result != 0) goto joined_r0x0800997a;\n  }\n  else {\n    result = FUN_08008894(0,0,0,0);\n    if (flag != '\\x02') goto LAB_0800996c;\n  }\n  pointer_var = (undefined4 *)FUN_0800b3dc();\n  *pointer_var = 0x21;\njoined_r0x0800997a:\n  if (temp != 0) {\n    int_ptr = (int *)FUN_0800b3dc();\n    *int_ptr = temp;\n  }\n  return (undefined4)result;\n}\n\n",
            "current_name": "process_data_080098d0",
            "entrypoint": "0x080098d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080098d0": "process_data_080098d0",
                "cVar1": "flag",
                "iVar3": "result",
                "local_30": "temp",
                "local_38": "result",
                "local_40": "param1_copy",
                "local_48": "param1",
                "local_4c": "data_ptr",
                "local_50": "flag",
                "param_1": "input1",
                "param_2": "input2",
                "piVar5": "int_ptr",
                "puVar4": "pointer_var",
                "uStack_3c": "param2_copy",
                "uStack_44": "param2",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009990": {
            "additional_data": {
                "FUM_0800af78": {
                    "1": "get_value"
                },
                "FUNC_0800b2cc": {
                    "1": "perform_operation"
                },
                "FUN_080082d0": {
                    "1": "calculate_value1",
                    "2": "calculate_value"
                },
                "FUN_080082d4": {
                    "1": "reverse_inputs_and_calculate"
                },
                "FUN_08008894": {
                    "1": "perform_operation",
                    "2": "perform_calculations"
                },
                "FUN_08009990": {
                    "1": "calculate_normalized_value",
                    "8": "calculate_result"
                },
                "FUN_0800af78": {
                    "1": "computation3",
                    "2": "calculate_result"
                },
                "F_UN08009990": {
                    "1": "calculate_result"
                },
                "iVar1": {
                    "1": "intermediate1",
                    "14": "difference",
                    "2": "temp1",
                    "6": "temp_var1"
                },
                "param_1": {
                    "1": "input_a",
                    "2": "input_param1",
                    "21": "input1",
                    "3": "input_1"
                },
                "param_2": {
                    "1": "b",
                    "2": "input_param2",
                    "21": "input2",
                    "3": "input_2"
                },
                "param_3": {
                    "1": "num3",
                    "2": "input_param3",
                    "21": "input3",
                    "3": "input_3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "2": "input_param4",
                    "21": "input4",
                    "3": "input_4"
                },
                "uVar2": {
                    "1": "result_var1",
                    "2": "temp2",
                    "4": "result1"
                },
                "uVar3": {
                    "1": "result",
                    "2": "temp3",
                    "3": "result2",
                    "4": "temp_var3"
                },
                "uVar4": {
                    "1": "input4_masked",
                    "2": "temp4",
                    "3": "temp_var4",
                    "5": "modified_input4"
                },
                "uVar5": {
                    "1": "result4",
                    "2": "temp5",
                    "3": "temp_var5",
                    "6": "modified_input2"
                },
                "uVar6": {
                    "1": "result_var5",
                    "11": "result",
                    "2": "temp6",
                    "3": "temp_var6"
                }
            },
            "called": [
                "FUN_080082d0",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_0800af78",
                "FUN_080082d4"
            ],
            "calling": [
                "thunk_FUN_08009990"
            ],
            "code": "\nuint calculate_result_08009990(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int difference;\n  undefined4 temp_var2;\n  uint temp_var3;\n  uint modified_input4;\n  uint modified_input2;\n  undefined8 result;\n  \n  modified_input4 = input4 & 0x7fffffff;\n  if (((modified_input4 | (-input3 | input3) >> 0x1f) < 0x7ff00001) &&\n     (modified_input2 = input2 & 0x7fffffff, (modified_input2 | (-input1 | input1) >> 0x1f) < 0x7ff00001)) {\n    if ((input4 + 0xc0100000 | input3) == 0) {\n      modified_input4 = FUN_0800af78();\n      return modified_input4;\n    }\n    temp_var3 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n    if ((modified_input2 | input1) == 0) {\n      if (temp_var3 == 2) {\n        input1 = 0x54442d18;\n      }\n      else if (temp_var3 == 3) {\n        input1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((modified_input4 | input3) != 0) {\n        if (modified_input4 == 0x7ff00000) {\n          temp_var3 = temp_var3 - 1;\n          if (modified_input2 == 0x7ff00000) {\n            if (temp_var3 < 3) {\n              return *(uint *)(&DAT_0800be68 + temp_var3 * 8);\n            }\n            return 0x54442d18;\n          }\n          if (temp_var3 < 3) {\n            return *(uint *)(&DAT_0800be80 + temp_var3 * 8);\n          }\n          return 0;\n        }\n        if (modified_input2 != 0x7ff00000) {\n          difference = (int)(modified_input2 - modified_input4) >> 0x14;\n          if ((int)(modified_input2 - modified_input4) < 0x3d00000) {\n            if (((int)input4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n              result = 0;\n            }\n            else {\n              FUN_08008894(input1,input2,input3,input4,input4);\n              FUNC_0800b2cc();\n              result = FUN_0800af78();\n            }\n          }\n          else {\n            result = 0x3ff921fb54442d18;\n          }\n          temp_var2 = (undefined4)((ulonglong)result >> 0x20);\n          modified_input4 = (uint)result;\n          if (temp_var3 == 1) {\n            return modified_input4;\n          }\n          if (temp_var3 == 2) {\n            result = FUN_080082d0(modified_input4,temp_var2,0x33145c07,0x3ca1a626);\n            modified_input4 = FUN_080082d0(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n            return modified_input4;\n          }\n          if (temp_var3 == 0) {\n            return modified_input4;\n          }\n          result = FUN_080082d0(modified_input4,temp_var2,0x33145c07,0x3ca1a626);\n          modified_input4 = FUN_080082d0((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n          return modified_input4;\n        }\n      }\n      if ((int)input2 < 0) {\n        input1 = 0x54442d18;\n      }\n      else {\n        input1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    input1 = FUN_080082d4(input3,input4,input1,input2);\n  }\n  return input1;\n}\n\n",
            "current_name": "calculate_result_08009990",
            "entrypoint": "0x08009990",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009990": "calculate_result_08009990",
                "iVar1": "difference",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar2": "temp_var2",
                "uVar3": "temp_var3",
                "uVar4": "modified_input4",
                "uVar5": "modified_input2",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009b24": {
            "additional_data": {
                "FUN_08009b24": {
                    "1": "calculate",
                    "14": "calculate_result"
                },
                "iVar2": {
                    "1": "comparison",
                    "16": "result2",
                    "2": "temp2",
                    "6": "result_2"
                },
                "iVar4": {
                    "1": "var2",
                    "2": "temp3",
                    "7": "temp2",
                    "8": "result4"
                },
                "iVar6": {
                    "1": "result4",
                    "2": "result_6",
                    "4": "temp4",
                    "8": "result6"
                },
                "local_3c": {
                    "1": "temp13",
                    "2": "local_variable_1",
                    "3": "result14",
                    "7": "local_var",
                    "8": "local_variable"
                },
                "param_1": {
                    "1": "first_param",
                    "13": "input1",
                    "2": "num1",
                    "4": "input_value_1"
                },
                "param_2": {
                    "1": "value2",
                    "13": "input2",
                    "2": "num2",
                    "4": "input_2"
                },
                "param_3": {
                    "1": "third_param",
                    "13": "input3",
                    "2": "num3",
                    "4": "input_value_3"
                },
                "param_4": {
                    "1": "value_3",
                    "13": "input4",
                    "2": "num4",
                    "4": "input_value_4"
                },
                "uVar1": {
                    "1": "result_var1",
                    "17": "result1",
                    "2": "temp1",
                    "3": "result",
                    "6": "result_1"
                },
                "uVar10": {
                    "1": "temp_result3",
                    "2": "temp_8",
                    "4": "temp8",
                    "8": "result10"
                },
                "uVar11": {
                    "1": "temp3",
                    "2": "result7",
                    "4": "temp9",
                    "8": "result11"
                },
                "uVar12": {
                    "1": "temp_var_10",
                    "2": "temp_10",
                    "4": "temp10",
                    "8": "result12"
                },
                "uVar13": {
                    "1": "u_var13",
                    "2": "result9",
                    "4": "temp11",
                    "8": "result13"
                },
                "uVar3": {
                    "1": "temp_var1",
                    "2": "output",
                    "3": "result",
                    "7": "temp1",
                    "8": "result3"
                },
                "uVar5": {
                    "1": "result4",
                    "2": "temp4",
                    "3": "result3",
                    "4": "temp3",
                    "8": "result5"
                },
                "uVar7": {
                    "1": "arg2",
                    "2": "temp4",
                    "3": "temp5",
                    "5": "max_value",
                    "8": "result7"
                },
                "uVar8": {
                    "1": "temp_value_5",
                    "2": "result4",
                    "4": "temp6",
                    "8": "result8"
                },
                "uVar9": {
                    "1": "var7",
                    "2": "result_9",
                    "4": "temp7",
                    "8": "result9"
                }
            },
            "called": [
                "FUN_08008b24",
                "FUN_080082d0",
                "FUN_0800a1bc",
                "FUN_08008640",
                "FUN_080082d4"
            ],
            "calling": [
                "FUN_0800981c"
            ],
            "code": "\nuint calculate_result_08009b24(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 result1;\n  int result2;\n  uint result3;\n  int result4;\n  undefined4 result5;\n  int result6;\n  uint result7;\n  undefined4 result8;\n  undefined4 result9;\n  undefined8 result10;\n  undefined8 result11;\n  undefined8 result12;\n  undefined8 result13;\n  int local_variable;\n  \n  input2 = input2 & 0x7fffffff;\n  input4 = input4 & 0x7fffffff;\n  result3 = input1;\n  result7 = input2;\n  if (input2 < input4) {\n    result3 = input3;\n    input3 = input1;\n    result7 = input4;\n    input4 = input2;\n  }\n  if (0x3c00000 < (int)(result7 - input4)) {\n    result3 = FUN_080082d4(result3,result7,input3,input4);\n    return result3;\n  }\n  if (result7 < 0x5f300001) {\n    local_variable = 0;\n  }\n  else {\n    if (0x7fefffff < result7) {\n      if ((result7 & 0xfffff | result3) != 0) {\n        result3 = FUN_080082d4(result3,result7,input3,input4);\n      }\n      if ((input4 ^ 0x7ff00000 | input3) != 0) {\n        return result3;\n      }\n      return input3;\n    }\n    result7 = result7 + 0xda800000;\n    input4 = input4 + 0xda800000;\n    local_variable = 600;\n  }\n  result11 = CONCAT44(result7,result3);\n  result10 = CONCAT44(input4,input3);\n  if ((int)input4 < 0x20b00000) {\n    if ((int)input4 < 0x100000) {\n      if ((input4 | input3) == 0) {\n        return result3;\n      }\n      result10 = FUN_08008640(input3,input4,0,0x7fd00000);\n      result11 = FUN_08008640(result3,result7,0,0x7fd00000);\n      local_variable = local_variable + -0x3fe;\n    }\n    else {\n      result7 = result7 + 0x25800000;\n      result11 = CONCAT44(result7,result3);\n      input4 = input4 + 0x25800000;\n      result10 = CONCAT44(input4,input3);\n      local_variable = local_variable + -600;\n    }\n  }\n  result9 = (undefined4)((ulonglong)result11 >> 0x20);\n  result8 = (undefined4)result11;\n  result6 = (int)((ulonglong)result10 >> 0x20);\n  result5 = (undefined4)result10;\n  result10 = FUN_080082d0(result8,result9,result5,result6);\n  result4 = (int)((ulonglong)result10 >> 0x20);\n  result1 = (undefined4)result10;\n  result2 = FUN_08008b24(result5,result6,result1,result4);\n  if (result2 == 0) {\n    result10 = FUN_08008640(0,input4,0);\n    result11 = FUN_08008640(result1,result4 + -0x80000000,result1,result4);\n    result12 = FUN_080082d4(result8,result9,result8,result9);\n    result12 = FUN_080082d0((int)result12,(int)((ulonglong)result12 >> 0x20),0,result7 + 0x100000);\n    result12 = FUN_08008640((int)result12,(int)((ulonglong)result12 >> 0x20),result5,result6);\n    result13 = FUN_080082d0(result5,result6,0,input4);\n    result13 = FUN_08008640((int)result13,(int)((ulonglong)result13 >> 0x20),0,result7 + 0x100000);\n    result12 = FUN_080082d4((int)result12,(int)((ulonglong)result12 >> 0x20),(int)result13,\n                          (int)((ulonglong)result13 >> 0x20));\n    result11 = FUN_080082d0((int)result11,(int)((ulonglong)result11 >> 0x20),(int)result12,\n                          (int)((ulonglong)result12 >> 0x20));\n    FUN_080082d0((int)result10,(int)((ulonglong)result10 >> 0x20),(int)result11,\n                 (int)((ulonglong)result11 >> 0x20));\n    result10 = FUN_0800a1bc();\n  }\n  else {\n    result10 = FUN_08008640(0,result7,0,result7);\n    result11 = FUN_08008640(result5,result6 + -0x80000000,result5,result6);\n    result12 = FUN_080082d4(result8,result9,0,result7);\n    result13 = FUN_080082d0(result8,result9,0,result7);\n    result12 = FUN_08008640((int)result12,(int)((ulonglong)result12 >> 0x20),(int)result13,\n                          (int)((ulonglong)result13 >> 0x20));\n    result11 = FUN_080082d0((int)result11,(int)((ulonglong)result11 >> 0x20),(int)result12,\n                          (int)((ulonglong)result12 >> 0x20));\n    FUN_080082d0((int)result10,(int)((ulonglong)result10 >> 0x20),(int)result11,\n                 (int)((ulonglong)result11 >> 0x20));\n    result10 = FUN_0800a1bc();\n  }\n  result3 = (uint)result10;\n  if (local_variable != 0) {\n    result3 = FUN_08008640(result3,(int)((ulonglong)result10 >> 0x20),0,local_variable * 0x100000 + 0x3ff00000);\n  }\n  return result3;\n}\n\n",
            "current_name": "calculate_result_08009b24",
            "entrypoint": "0x08009b24",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009b24": "calculate_result_08009b24",
                "iVar2": "result2",
                "iVar4": "result4",
                "iVar6": "result6",
                "local_3c": "local_variable",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar10": "result10",
                "uVar11": "result11",
                "uVar12": "result12",
                "uVar13": "result13",
                "uVar3": "result3",
                "uVar5": "result5",
                "uVar7": "result7",
                "uVar8": "result8",
                "uVar9": "result9"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009d78": {
            "additional_data": {
                "DAT_0800be98": {
                    "1": "constant_value1"
                },
                "FIND_FLOAT": {
                    "1": "find_float"
                },
                "FUNC_0800b2cc": {
                    "1": "more_descriptive_function7"
                },
                "FUN_080082d0": {
                    "1": "more_descriptive_function1"
                },
                "FUN_080082d4": {
                    "1": "more_descriptive_function2"
                },
                "FUN_0800856c": {
                    "1": "more_descriptive_function3"
                },
                "FUN_08008640": {
                    "1": "more_descriptive_function4"
                },
                "FUN_08008ba0": {
                    "1": "more_descriptive_function5"
                },
                "FUN_08009d78": {
                    "1": "calculate_values",
                    "4": "calculate_result"
                },
                "FUN_0800a5a0": {
                    "1": "more_descriptive_function6"
                },
                "PARAM_1": {
                    "1": "input_value"
                },
                "PARAM_2": {
                    "1": "bitwise_value"
                },
                "PARAM_3": {
                    "1": "output_value"
                },
                "iVar9": {
                    "1": "temp2",
                    "12": "result",
                    "2": "temp9",
                    "5": "return_value"
                },
                "local_30": {
                    "1": "temp13",
                    "10": "local_var5",
                    "2": "local_var6"
                },
                "local_38": {
                    "1": "value2",
                    "10": "local_var4",
                    "2": "local_var3"
                },
                "local_40": {
                    "1": "temp_local40",
                    "10": "local_var3",
                    "2": "temp13"
                },
                "local_50": {
                    "1": "local_var3",
                    "12": "local_var1",
                    "2": "local_variable1",
                    "3": "temp11"
                },
                "param_1": {
                    "1": "input_param_1",
                    "13": "input1",
                    "2": "input_param1",
                    "3": "input_value1",
                    "5": "input_value"
                },
                "param_2": {
                    "1": "param",
                    "13": "input2",
                    "2": "flags",
                    "3": "input_value2"
                },
                "param_3": {
                    "1": "result_array",
                    "14": "output",
                    "2": "output_value",
                    "3": "result",
                    "5": "output_array"
                },
                "uStack_4c": {
                    "1": "local_var3",
                    "11": "local_var2",
                    "2": "u_stack_4c",
                    "3": "temp12"
                },
                "uVar1": {
                    "1": "temp_variable_1",
                    "13": "temp1",
                    "4": "temp_var1",
                    "8": "var1"
                },
                "uVar10": {
                    "1": "temp10",
                    "2": "var10",
                    "3": "result1",
                    "4": "temp_var10",
                    "8": "temp8"
                },
                "uVar11": {
                    "1": "temp_variable11",
                    "2": "var11",
                    "3": "temp_value2",
                    "4": "temp_var11",
                    "8": "temp9"
                },
                "uVar12": {
                    "1": "res_var3",
                    "2": "var12",
                    "3": "temp_value3",
                    "4": "temp_var12",
                    "8": "temp10"
                },
                "uVar2": {
                    "1": "temp1_2",
                    "13": "temp2",
                    "4": "temp_var2",
                    "8": "var2"
                },
                "uVar3": {
                    "1": "temp1_3",
                    "13": "temp3",
                    "4": "temp_var3",
                    "8": "var3"
                },
                "uVar4": {
                    "1": "result4",
                    "13": "temp4",
                    "4": "temp_var4",
                    "8": "var4"
                },
                "uVar5": {
                    "1": "temporary_value5",
                    "13": "temp5",
                    "4": "temp_var5",
                    "8": "var5"
                },
                "uVar6": {
                    "1": "temp1_6",
                    "13": "temp6",
                    "4": "temp_var6",
                    "8": "var6"
                },
                "uVar7": {
                    "1": "temp_variable_7",
                    "13": "temp7",
                    "4": "temp_var7",
                    "8": "var7"
                },
                "uVar8": {
                    "1": "temp1",
                    "2": "var8",
                    "3": "abs_input2"
                },
                "undefined4": {
                    "1": "uint32"
                },
                "undefined8": {
                    "1": "uint64"
                }
            },
            "called": [
                "FUN_08008b10",
                "FUN_080082d0",
                "FUN_0800b2cc",
                "FUN_0800856c",
                "FUN_0800a5a0",
                "FUN_08008ba0",
                "FUN_08008640",
                "FUN_080082d4"
            ],
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "code": "\nint calculate_result_08009d78(uint32 input1,uint input2,uint64 *output)\n\n{\n  uint32 temp1;\n  uint32 temp2;\n  uint32 temp3;\n  uint32 temp4;\n  uint32 temp5;\n  uint32 temp6;\n  uint32 temp7;\n  uint abs_input2;\n  int result;\n  uint64 temp8;\n  uint64 temp9;\n  uint64 temp10;\n  uint32 local_var1;\n  uint32 local_var2;\n  uint64 local_var3;\n  uint64 local_var4;\n  uint64 local_var5;\n  \n  abs_input2 = input2 & 0x7fffffff;\n  if (abs_input2 < 0x3fe921fc) {\n    *(uint32 *)output = input1;\n    *(uint *)((int)output + 4) = input2;\n    *(uint32 *)(output + 1) = 0;\n    *(uint32 *)((int)output + 0xc) = 0;\n    return 0;\n  }\n  if (abs_input2 < 0x4002d97c) {\n    if ((int)input2 < 1) {\n      temp8 = FUN_080082d4(input1,input2,0x54400000,0x3ff921fb);\n      temp3 = (uint32)((ulonglong)temp8 >> 0x20);\n      temp1 = (uint32)temp8;\n      if (abs_input2 != 0x3ff921fb) {\n        temp8 = FUN_080082d4(temp1,temp3,0x1a626331,0x3dd0b461);\n        *output = temp8;\n        temp8 = FUN_080082d0(temp1,temp3);\n        temp8 = FUN_080082d4((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x1a626331,0x3dd0b461);\n        output[1] = temp8;\n        return -1;\n      }\n      temp8 = FUN_080082d4(temp1,temp3,0x1a600000,0x3dd0b461);\n      temp1 = (uint32)((ulonglong)temp8 >> 0x20);\n      temp9 = FUN_080082d4((int)temp8,temp1,0x2e037073,0x3ba3198a);\n      *output = temp9;\n      temp8 = FUN_080082d0((int)temp8,temp1);\n      temp8 = FUN_080082d4((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x2e037073,0x3ba3198a);\n      output[1] = temp8;\n      return -1;\n    }\n    temp8 = FUN_080082d0();\n    temp3 = (uint32)((ulonglong)temp8 >> 0x20);\n    temp1 = (uint32)temp8;\n    if (abs_input2 != 0x3ff921fb) {\n      temp8 = FUN_080082d0(temp1,temp3,0x1a626331,0x3dd0b461);\n      *output = temp8;\n      temp8 = FUN_080082d0(temp1,temp3);\n      temp8 = FUN_080082d0((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x1a626331,0x3dd0b461);\n      output[1] = temp8;\n      return 1;\n    }\n    temp8 = FUN_080082d0(temp1,temp3,0x1a600000,0x3dd0b461);\n    temp1 = (uint32)((ulonglong)temp8 >> 0x20);\n    temp9 = FUN_080082d0((int)temp8,temp1,0x2e037073,0x3ba3198a);\n    *output = temp9;\n    temp8 = FUN_080082d0((int)temp8,temp1);\n    temp8 = FUN_080082d0((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x2e037073,0x3ba3198a);\n    output[1] = temp8;\n    return 1;\n  }\n  if (0x413921fb < abs_input2) {\n    if (0x7fefffff < abs_input2) {\n      temp8 = FUN_080082d0(input1,input2,input1,input2);\n      output[1] = temp8;\n      *output = temp8;\n      return 0;\n    }\n    result = ((int)abs_input2 >> 0x14) + -0x416;\n    FUN_08008ba0();\n    local_var3 = FUN_0800856c();\n    temp8 = FUN_080082d0(input1,abs_input2 + result * -0x100000,(int)local_var3,\n                          (int)((ulonglong)local_var3 >> 0x20));\n    temp8 = FUN_08008640((int)temp8,(int)((ulonglong)temp8 >> 0x20),0,0x41700000);\n    FUN_08008ba0();\n    local_var4 = FUN_0800856c();\n    temp8 = FUN_080082d0((int)temp8,(int)((ulonglong)temp8 >> 0x20));\n    local_var5 = FUN_08008640((int)temp8,(int)((ulonglong)temp8 >> 0x20),0,0x41700000);\n    FUN_08008b10((int)local_var5,(int)((ulonglong)local_var5 >> 0x20),0,0);\n    result = FUN_0800a5a0(&local_var3,output,result);\n    if (-1 < (int)input2) {\n      return result;\n    }\n    *(int *)((int)output + 4) = *(int *)((int)output + 4) + -0x80000000;\n    *(int *)((int)output + 0xc) = *(int *)((int)output + 0xc) + -0x80000000;\n    return -result;\n  }\n  temp8 = FUNC_0800b2cc();\n  temp3 = (uint32)((ulonglong)temp8 >> 0x20);\n  temp9 = FUN_08008640((int)temp8,temp3,0x6dc9c883,0x3fe45f30);\n  FUN_080082d4((int)temp9,(int)((ulonglong)temp9 >> 0x20),0,0x3fe00000);\n  result = FUN_08008ba0();\n  temp9 = FUN_0800856c();\n  temp4 = (uint32)((ulonglong)temp9 >> 0x20);\n  temp1 = (uint32)temp9;\n  temp9 = FUN_08008640(temp1,temp4,0x54400000,0x3ff921fb);\n  temp8 = FUN_080082d0((int)temp8,temp3,(int)temp9,(int)((ulonglong)temp9 >> 0x20));\n  temp5 = (uint32)((ulonglong)temp8 >> 0x20);\n  temp3 = (uint32)temp8;\n  temp9 = FUN_08008640(temp1,temp4,0x1a626331,0x3dd0b461);\n  if ((0x1f < result) || (*(uint *)(&DAT_0800be98 + (result + -1) * 4) == abs_input2)) {\n    temp10 = FUN_080082d0(temp3,temp5,(int)temp9,(int)((ulonglong)temp9 >> 0x20));\n    if ((int)((abs_input2 >> 0x14) - ((uint)((int)((ulonglong)temp10 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    temp9 = FUN_08008640(temp1,temp4,0x1a600000,0x3dd0b461);\n    temp6 = (uint32)((ulonglong)temp9 >> 0x20);\n    temp8 = FUN_080082d0(temp3,temp5,(int)temp9,temp6);\n    temp7 = (uint32)((ulonglong)temp8 >> 0x20);\n    temp2 = (uint32)temp8;\n    temp10 = FUN_080082d0(temp3,temp5,temp2,temp7);\n    temp9 = FUN_080082d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp9,temp6);\n    temp10 = FUN_08008640(temp1,temp4,0x2e037073,0x3ba3198a);\n    temp9 = FUN_080082d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp9,\n                          (int)((ulonglong)temp9 >> 0x20));\n    temp10 = FUN_080082d0(temp2,temp7,(int)temp9,(int)((ulonglong)temp9 >> 0x20));\n    if ((int)(((int)abs_input2 >> 0x14) - ((uint)((int)((ulonglong)temp10 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    temp9 = FUN_08008640(temp1,temp4,0x2e000000,0x3ba3198a);\n    temp3 = (uint32)((ulonglong)temp9 >> 0x20);\n    temp8 = FUN_080082d0(temp2,temp7,(int)temp9,temp3);\n    temp10 = FUN_080082d0(temp2,temp7);\n    temp9 = FUN_080082d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp9,temp3);\n    temp10 = FUN_08008640(temp1,temp4,0x252049c1,0x397b839a);\n    temp9 = FUN_080082d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp9,\n                          (int)((ulonglong)temp9 >> 0x20));\n  }\n  temp10 = FUN_080082d0((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp9,\n                        (int)((ulonglong)temp9 >> 0x20));\nLAB_0800a0ce:\n  local_var2 = (uint32)((ulonglong)temp8 >> 0x20);\n  local_var1 = (uint32)temp8;\n  *output = temp10;\n  temp8 = FUN_080082d0(local_var1,local_var2);\n  temp8 = FUN_080082d0((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp9,\n                        (int)((ulonglong)temp9 >> 0x20));\n  output[1] = temp8;\n  if ((int)input2 < 0) {\n    *(int *)output = (int)temp10;\n    *(int *)((int)output + 4) = (int)((ulonglong)temp10 >> 0x20) + -0x80000000;\n    *(int *)(output + 1) = (int)temp8;\n    *(int *)((int)output + 0xc) = (int)((ulonglong)temp8 >> 0x20) + -0x80000000;\n    result = -result;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_result_08009d78",
            "entrypoint": "0x08009d78",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009d78": "calculate_result_08009d78",
                "iVar9": "result",
                "local_30": "local_var5",
                "local_38": "local_var4",
                "local_40": "local_var3",
                "local_50": "local_var1",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output",
                "uStack_4c": "local_var2",
                "uVar1": "temp1",
                "uVar10": "temp8",
                "uVar11": "temp9",
                "uVar12": "temp10",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "uVar8": "abs_input2",
                "undefined4": "uint32",
                "undefined8": "uint64"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800a1bc": {
            "additional_data": {
                "FUNCH_080082d0": {
                    "1": "calculate_c"
                },
                "FUNCH_080082d4": {
                    "1": "calculate_b"
                },
                "FUNCH_08008640": {
                    "1": "calculate_a"
                },
                "FUNCH_08008894": {
                    "1": "calculate_d"
                },
                "FUN_080082d0": {
                    "1": "function1"
                },
                "FUN_080082d4": {
                    "1": "add"
                },
                "FUN_08008640": {
                    "1": "add_values"
                },
                "FUN_08008894": {
                    "1": "subtract"
                },
                "FUN_0800a1bc": {
                    "1": "extract_bits",
                    "2": "reverse_bits",
                    "5": "calculate_result"
                },
                "iVar10": {
                    "1": "temp7",
                    "2": "counter",
                    "3": "loop_counter",
                    "4": "temp_var10"
                },
                "iVar2": {
                    "1": "value2",
                    "2": "iteration_count",
                    "3": "temp2",
                    "4": "temp_var2",
                    "6": "counter"
                },
                "param_1": {
                    "1": "input_param",
                    "12": "input1",
                    "3": "input_value",
                    "4": "input",
                    "5": "input_value1"
                },
                "param_2": {
                    "1": "shift",
                    "12": "input2",
                    "3": "input_2",
                    "5": "input_value2"
                },
                "uVar1": {
                    "1": "shift",
                    "2": "shifted_input2",
                    "3": "result",
                    "4": "temp_var1"
                },
                "uVar11": {
                    "1": "result4",
                    "2": "temp4",
                    "4": "temp_var11"
                },
                "uVar12": {
                    "1": "remaining_shifts",
                    "2": "shift_amount",
                    "3": "bit_shift",
                    "4": "temp_var12"
                },
                "uVar13": {
                    "1": "temp9",
                    "2": "result",
                    "4": "temp_var13"
                },
                "uVar14": {
                    "1": "u_var14"
                },
                "uVar3": {
                    "1": "compare_value",
                    "2": "temp_var2",
                    "3": "temp3",
                    "4": "temp",
                    "5": "mask"
                },
                "uVar4": {
                    "1": "u_var4",
                    "2": "result",
                    "3": "temp4",
                    "4": "temp2"
                },
                "uVar5": {
                    "1": "shift_count",
                    "2": "temp2",
                    "3": "temp5",
                    "4": "temp_var5",
                    "5": "mask"
                },
                "uVar6": {
                    "1": "bit_mask",
                    "2": "temp_mask",
                    "3": "bit",
                    "4": "temp_var6"
                },
                "uVar7": {
                    "1": "checksum",
                    "2": "temp4",
                    "4": "temp_var7",
                    "7": "result"
                },
                "uVar8": {
                    "1": "difference",
                    "2": "temp5",
                    "3": "remainder",
                    "4": "temp_var8"
                },
                "uVar9": {
                    "1": "result",
                    "2": "temp6",
                    "3": "shifted_value",
                    "4": "temp_var9"
                }
            },
            "called": [
                "FUN_080082d0",
                "FUN_08008894",
                "FUN_08008640",
                "FUN_080082d4"
            ],
            "calling": [
                "FUN_080098d0",
                "FUN_08009b24"
            ],
            "code": "\nuint calculate_result_0800a1bc(uint input1,uint input2)\n\n{\n  uint shifted_bits;\n  int counter;\n  uint mask;\n  undefined4 temp_var4;\n  uint mask;\n  uint temp_var6;\n  uint result;\n  uint temp_var8;\n  uint temp_var9;\n  int temp_var10;\n  uint temp_var11;\n  uint temp_var12;\n  undefined8 temp_var13;\n  \n  if ((~input2 & 0x7ff00000) == 0) {\n    temp_var13 = FUN_08008640(input1,input2,input1,input2);\n    result = FUN_080082d4((int)temp_var13,(int)((ulonglong)temp_var13 >> 0x20),input1,input2);\n    return result;\n  }\n  if ((int)input2 < 1) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return input1;\n    }\n    if (input2 != 0) {\n      temp_var13 = FUN_080082d0(input1,input2,input1);\n      temp_var4 = (undefined4)((ulonglong)temp_var13 >> 0x20);\n      result = FUN_08008894((int)temp_var13,temp_var4,(int)temp_var13,temp_var4);\n      return result;\n    }\n    do {\n      temp_var9 = input1;\n      result = temp_var9 >> 0xb;\n      input2 = input2 - 0x15;\n      input1 = temp_var9 << 0x15;\n    } while (result == 0);\n    shifted_bits = input2;\n    if (-1 < (int)temp_var9) goto LAB_0800a290;\n    temp_var12 = 0x20;\n    mask = 0xffffffff;\n    temp_var9 = input1;\n  }\n  else {\n    shifted_bits = (int)input2 >> 0x14;\n    result = input2;\n    temp_var9 = input1;\n    if (shifted_bits != 0) goto LAB_0800a1da;\nLAB_0800a290:\n    temp_var9 = 0;\n    temp_var12 = result;\n    do {\n      mask = temp_var9;\n      result = temp_var12 << 1;\n      temp_var10 = temp_var12 << 0xc;\n      temp_var9 = mask + 1;\n      temp_var12 = result;\n    } while (-1 < temp_var10);\n    temp_var12 = 0x20 - temp_var9;\n    input2 = shifted_bits;\n    temp_var9 = input1 << (temp_var9 & 0xff);\n  }\n  result = input1 >> (temp_var12 & 0xff) | result;\n  shifted_bits = input2 - mask;\nLAB_0800a1da:\n  result = result & 0xfffff | 0x100000;\n  if (-1 < (int)(shifted_bits << 0x1f)) {\n    result = result * 2 - ((int)temp_var9 >> 0x1f);\n    temp_var9 = temp_var9 << 1;\n  }\n  temp_var12 = 0;\n  result = result * 2 - ((int)temp_var9 >> 0x1f);\n  temp_var9 = temp_var9 << 1;\n  shifted_bits = 0;\n  temp_var10 = 0x16;\n  mask = 0x200000;\n  do {\n    counter = shifted_bits + mask;\n    if (counter <= (int)result) {\n      result = result - counter;\n      shifted_bits = counter + mask;\n      temp_var12 = temp_var12 + mask;\n    }\n    temp_var10 = temp_var10 + -1;\n    result = result * 2 - ((int)temp_var9 >> 0x1f);\n    mask = mask >> 1;\n    temp_var9 = temp_var9 << 1;\n  } while (temp_var10 != 0);\n  counter = 0x20;\n  temp_var6 = 0x80000000;\n  temp_var10 = 0;\n  mask = 0;\n  do {\n    mask = temp_var6 + temp_var10;\n    temp_var11 = shifted_bits;\n    if ((int)shifted_bits < (int)result) {\n      if ((int)mask < 0) {\nLAB_0800a26a:\n        if (-1 < (int)(mask + temp_var6)) {\n          temp_var11 = shifted_bits + 1;\n        }\n      }\n      temp_var8 = result - shifted_bits;\n      shifted_bits = temp_var11;\n      if (temp_var9 < mask) {\n        temp_var8 = temp_var8 - 1;\n      }\nLAB_0800a262:\n      temp_var10 = mask + temp_var6;\n      temp_var9 = temp_var9 - mask;\n      mask = mask + temp_var6;\n      result = temp_var8;\n    }\n    else if ((result == shifted_bits) && (mask <= temp_var9)) {\n      if ((int)mask < 0) goto LAB_0800a26a;\n      temp_var8 = 0;\n      shifted_bits = result;\n      goto LAB_0800a262;\n    }\n    counter = counter + -1;\n    temp_var6 = temp_var6 >> 1;\n    result = result * 2 - ((int)temp_var9 >> 0x1f);\n    temp_var9 = temp_var9 << 1;\n    if (counter == 0) {\n      if ((result | temp_var9) == 0) {\n        mask = mask >> 1;\n      }\n      else if (mask == 0xffffffff) {\n        temp_var12 = temp_var12 + 1;\n        mask = 0;\n      }\n      else {\n        mask = mask + 1 >> 1;\n      }\n      if ((temp_var12 & 1) != 0) {\n        mask = mask | 0x80000000;\n      }\n      return mask;\n    }\n  } while( true );\n}\n\n",
            "current_name": "calculate_result_0800a1bc",
            "entrypoint": "0x0800a1bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800a1bc": "calculate_result_0800a1bc",
                "iVar10": "temp_var10",
                "iVar2": "counter",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "shifted_bits",
                "uVar11": "temp_var11",
                "uVar12": "temp_var12",
                "uVar13": "temp_var13",
                "uVar3": "mask",
                "uVar4": "temp_var4",
                "uVar5": "mask",
                "uVar6": "temp_var6",
                "uVar7": "result",
                "uVar8": "temp_var8",
                "uVar9": "temp_var9"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800a348": {
            "additional_data": {
                "FUN_0800a348": {
                    "1": "calculate_output",
                    "2": "perform_calculation",
                    "21": "calculate_result"
                },
                "iVar1": {
                    "1": "success_flag",
                    "17": "result",
                    "3": "return_value",
                    "5": "result1"
                },
                "local_28": {
                    "1": "temp2",
                    "2": "local_variable3",
                    "3": "local_var2",
                    "4": "temp3",
                    "8": "local_var3"
                },
                "local_30": {
                    "1": "var7",
                    "11": "local_var1",
                    "2": "temp_var1",
                    "5": "temp1"
                },
                "param_1": {
                    "1": "input",
                    "26": "input1",
                    "4": "input_1"
                },
                "param_2": {
                    "1": "mask",
                    "26": "input2",
                    "4": "input_2"
                },
                "param_3": {
                    "2": "param1",
                    "25": "input3",
                    "4": "input_3"
                },
                "param_4": {
                    "2": "param2",
                    "25": "input4",
                    "4": "input_4"
                },
                "uStack_24": {
                    "1": "result4",
                    "2": "temp_var4",
                    "4": "temp4",
                    "8": "local_var4"
                },
                "uStack_2c": {
                    "1": "tmp_result2",
                    "2": "temp4",
                    "3": "temp2",
                    "8": "local_var2"
                },
                "uVar1": {
                    "1": "result"
                },
                "uVar2": {
                    "1": "high_bits",
                    "4": "var1",
                    "5": "result2",
                    "6": "result1",
                    "7": "temp1"
                },
                "uVar3": {
                    "1": "result_part2",
                    "4": "var2",
                    "5": "result3",
                    "7": "temp2"
                },
                "uVar4": {
                    "1": "u_var4",
                    "10": "abs_input2",
                    "2": "unsigned_input2",
                    "3": "temp3",
                    "4": "modified_input2"
                },
                "uVar5": {
                    "1": "func_result1",
                    "2": "result4",
                    "3": "temp_var1",
                    "4": "temp1"
                },
                "uVar6": {
                    "1": "result4",
                    "2": "calculation_result2",
                    "3": "temp2",
                    "4": "temp4"
                },
                "uVar7": {
                    "1": "result4",
                    "2": "calculation_result3",
                    "3": "temp_result3",
                    "4": "temp5"
                }
            },
            "called": [
                "FUN_080082d0",
                "FUN_08008ba0",
                "FUN_08008640",
                "FUN_080082d4"
            ],
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "code": "\nundefined4 calculate_result_0800a348(undefined4 input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  int result;\n  undefined4 temp1;\n  undefined4 temp2;\n  uint abs_input2;\n  undefined8 temp1;\n  undefined8 temp4;\n  undefined8 temp5;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined4 local_var3;\n  undefined4 local_var4;\n  \n  abs_input2 = input2 & 0x7fffffff;\n  if (abs_input2 < 0x3e400000) {\n    result = FUN_08008ba0();\n    if (result == 0) {\n      return 0;\n    }\n    temp1 = FUN_08008640(input1,input2,input1,input2);\n    temp2 = (undefined4)((ulonglong)temp1 >> 0x20);\n    temp1 = (undefined4)temp1;\n    temp4 = FUN_08008640(temp1,temp2,0xbe8838d4,0xbda8fae9);\n    temp4 = FUN_080082d4((int)temp4,(int)((ulonglong)temp4 >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    temp4 = FUN_08008640((int)temp4,(int)((ulonglong)temp4 >> 0x20),temp1,temp2);\n    temp4 = FUN_080082d0((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x809c52ad,0x3e927e4f);\n    temp4 = FUN_08008640((int)temp4,(int)((ulonglong)temp4 >> 0x20),temp1,temp2);\n    temp4 = FUN_080082d4((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x19cb1590,0x3efa01a0);\n    temp4 = FUN_08008640((int)temp4,(int)((ulonglong)temp4 >> 0x20),temp1,temp2);\n    temp4 = FUN_080082d0((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x16c15177,0x3f56c16c);\n    temp4 = FUN_08008640((int)temp4,(int)((ulonglong)temp4 >> 0x20),temp1,temp2);\n    temp4 = FUN_080082d4((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x5555554c,0x3fa55555);\n    temp4 = FUN_08008640((int)temp4,(int)((ulonglong)temp4 >> 0x20),temp1,temp2);\n  }\n  else {\n    temp1 = FUN_08008640(input1,input2,input1,input2);\n    temp2 = (undefined4)((ulonglong)temp1 >> 0x20);\n    temp1 = (undefined4)temp1;\n    temp4 = FUN_08008640(temp1,temp2,0xbe8838d4,0xbda8fae9);\n    temp4 = FUN_080082d4((int)temp4,(int)((ulonglong)temp4 >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    temp4 = FUN_08008640((int)temp4,(int)((ulonglong)temp4 >> 0x20),temp1,temp2);\n    temp4 = FUN_080082d0((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x809c52ad,0x3e927e4f);\n    temp4 = FUN_08008640((int)temp4,(int)((ulonglong)temp4 >> 0x20),temp1,temp2);\n    temp4 = FUN_080082d4((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x19cb1590,0x3efa01a0);\n    temp4 = FUN_08008640((int)temp4,(int)((ulonglong)temp4 >> 0x20),temp1,temp2);\n    temp4 = FUN_080082d0((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x16c15177,0x3f56c16c);\n    temp4 = FUN_08008640((int)temp4,(int)((ulonglong)temp4 >> 0x20),temp1,temp2);\n    temp4 = FUN_080082d4((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x5555554c,0x3fa55555);\n    temp4 = FUN_08008640((int)temp4,(int)((ulonglong)temp4 >> 0x20),temp1,temp2);\n    if (0x3fd33332 < abs_input2) {\n      if (abs_input2 < 0x3fe90001) {\n        result = abs_input2 - 0x200000;\n        temp1 = FUN_080082d0(0,0x3ff00000,0,result);\n      }\n      else {\n        result = 0x3fd20000;\n        temp1 = 0x3fe7000000000000;\n      }\n      local_var4 = (undefined4)((ulonglong)temp1 >> 0x20);\n      local_var3 = (undefined4)temp1;\n      temp1 = FUN_08008640(temp1,temp2,0,0x3fe00000);\n      temp1 = FUN_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,result);\n      temp4 = FUN_08008640(temp1,temp2,(int)temp4,(int)((ulonglong)temp4 >> 0x20));\n      temp5 = FUN_08008640(input1,input2,input3,input4);\n      temp4 = FUN_080082d0((int)temp4,(int)((ulonglong)temp4 >> 0x20),(int)temp5,\n                           (int)((ulonglong)temp5 >> 0x20));\n      temp1 = FUN_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp4,\n                           (int)((ulonglong)temp4 >> 0x20));\n      temp1 = FUN_080082d0(local_var3,local_var4,(int)temp1,(int)((ulonglong)temp1 >> 0x20));\n      return temp1;\n    }\n  }\n  local_var2 = (undefined4)((ulonglong)temp4 >> 0x20);\n  local_var1 = (undefined4)temp4;\n  temp1 = (undefined4)((ulonglong)temp1 >> 0x20);\n  temp4 = FUN_08008640((int)temp1,temp1,0,0x3fe00000);\n  temp1 = FUN_08008640((int)temp1,temp1,local_var1,local_var2);\n  temp5 = FUN_08008640(input1,input2,input3,input4);\n  temp1 = FUN_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp5,\n                       (int)((ulonglong)temp5 >> 0x20));\n  temp1 = FUN_080082d0((int)temp4,(int)((ulonglong)temp4 >> 0x20),(int)temp1,\n                       (int)((ulonglong)temp1 >> 0x20));\n  temp1 = FUN_080082d0(0,0x3ff00000,(int)temp1,(int)((ulonglong)temp1 >> 0x20));\n  return temp1;\n}\n\n",
            "current_name": "calculate_result_0800a348",
            "entrypoint": "0x0800a348",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800a348": "calculate_result_0800a348",
                "iVar1": "result",
                "local_28": "local_var3",
                "local_30": "local_var1",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uStack_24": "local_var4",
                "uStack_2c": "local_var2",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "abs_input2",
                "uVar5": "temp1",
                "uVar6": "temp4",
                "uVar7": "temp5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800a5a0": {
            "additional_data": {
                "\tiVar9": {
                    "1": "count_temp"
                },
                "FUN_080082d0": {
                    "1": "function_7"
                },
                "FUN_080082d4": {
                    "1": "function_3"
                },
                "FUN_0800856c": {
                    "1": "function_1"
                },
                "FUN_08008640": {
                    "1": "function_2"
                },
                "FUN_08008b10": {
                    "1": "function_6"
                },
                "FUN_08008b4c": {
                    "1": "function_9"
                },
                "FUN_08008ba0": {
                    "1": "function_4"
                },
                "FUN_080094c0": {
                    "1": "function_8"
                },
                "FUN_0800a5a0": {
                    "1": "optimized_function",
                    "11": "calculate_result"
                },
                "FUN_0800b2e8": {
                    "1": "function_5"
                },
                "LAB_0800a626": {
                    "1": "label_1"
                },
                "LAB_0800a7a4": {
                    "1": "label_5"
                },
                "LAB_0800a8b8": {
                    "1": "label_2"
                },
                "LAB_0800a8c8": {
                    "1": "label_3"
                },
                "LAB_0800a8e2": {
                    "1": "label_4"
                },
                "LAB_0800aafc": {
                    "1": "label_7"
                },
                "LAB_0800ab0e": {
                    "1": "label_8"
                },
                "LAB_0800abe4": {
                    "1": "label_6"
                },
                "LAB_0800ad04": {
                    "1": "label_9"
                },
                "LAB_0800ad26": {
                    "1": "label_10"
                },
                "SCARRY4": {
                    "1": "check_if_carry"
                },
                "bVar24": {
                    "1": "temp_bool1",
                    "12": "flag",
                    "2": "bool_var"
                },
                "bool FUN_08008b10": {
                    "1": "some_function_2"
                },
                "bool FUN_08008b4c": {
                    "1": "some_function_6"
                },
                "iVar11": {
                    "1": "temp_variable4"
                },
                "iVar14": {
                    "1": "loop_var3",
                    "2": "counter_3",
                    "3": "counter3"
                },
                "iVar15": {
                    "1": "temp_length",
                    "2": "temp_index"
                },
                "iVar16": {
                    "1": "temp_variable7"
                },
                "iVar17": {
                    "1": "loop_index4",
                    "2": "temp_index2"
                },
                "iVar18": {
                    "1": "temp_index2"
                },
                "iVar19": {
                    "1": "ptr5"
                },
                "iVar20": {
                    "1": "i_var20"
                },
                "iVar21": {
                    "1": "iter5",
                    "2": "i_var3"
                },
                "iVar22": {
                    "1": "counter_6"
                },
                "iVar23": {
                    "1": "temp_variable9"
                },
                "iVar4": {
                    "1": "i_temp2",
                    "2": "var1",
                    "4": "loop_counter",
                    "5": "index",
                    "6": "counter"
                },
                "iVar6": {
                    "1": "temp_variable3"
                },
                "iVar9": {
                    "1": "temp_data_value",
                    "2": "count",
                    "3": "temp_counter"
                },
                "local_160": {
                    "1": "array3",
                    "2": "local_array_4",
                    "3": "local_array3",
                    "4": "temp_array4"
                },
                "local_160[]": {
                    "1": "var10"
                },
                "local_168": {
                    "1": "temp_array3",
                    "2": "local_var4"
                },
                "local_16c": {
                    "1": "temp_result_7"
                },
                "local_248": {
                    "1": "temp_value_3"
                },
                "local_258": {
                    "1": "array3",
                    "2": "local_array_3",
                    "3": "local_array3",
                    "4": "temp_array3"
                },
                "local_258[]": {
                    "1": "result_array"
                },
                "local_260": {
                    "1": "array1",
                    "2": "local_array1",
                    "4": "local_array2",
                    "5": "temp_array2"
                },
                "local_260[1]": {
                    "1": "temp_array"
                },
                "local_268": {
                    "1": "temp_result_6"
                },
                "local_26c": {
                    "1": "temp_index6",
                    "2": "local_var3"
                },
                "local_270": {
                    "1": "local_value_2",
                    "2": "var7"
                },
                "local_280": {
                    "1": "temp_int1",
                    "3": "local_var1"
                },
                "local_284": {
                    "1": "temp_var_13",
                    "2": "local_array_1",
                    "4": "local_array1",
                    "6": "temp_array1"
                },
                "longlong FUN_080094c0": {
                    "1": "some_function_5"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "input_param1",
                    "4": "input1",
                    "6": "input_param"
                },
                "param_2": {
                    "1": "second_param",
                    "2": "output_array",
                    "4": "input2",
                    "5": "input_array"
                },
                "param_3": {
                    "1": "input_array_length",
                    "2": "length",
                    "4": "input3",
                    "5": "array_length"
                },
                "param_4": {
                    "1": "fourth_param",
                    "2": "length",
                    "4": "input4"
                },
                "param_5": {
                    "1": "i_var5",
                    "2": "input_param5",
                    "4": "param_5"
                },
                "param_6": {
                    "1": "offset_param",
                    "2": "input_6",
                    "4": "input6"
                },
                "ppuVar7": {
                    "1": "temp_ptr_ptr",
                    "2": "pointer3",
                    "3": "pointer_array"
                },
                "pram_5*4": {
                    "1": "lookup_table_ptr"
                },
                "puVar1": {
                    "1": "pointer_var_1",
                    "2": "temp_ptr1",
                    "3": "pointer_1",
                    "4": "ptr1",
                    "7": "pointer1"
                },
                "puVar10": {
                    "1": "nested_ptr_2",
                    "2": "pointer_4",
                    "4": "pointer3"
                },
                "puVar11": {
                    "1": "pointer_var4"
                },
                "puVar13": {
                    "1": "pointer_var13",
                    "2": "ptr5",
                    "4": "pointer4"
                },
                "puVar16": {
                    "1": "pointer_var5",
                    "2": "pointer5"
                },
                "puVar18": {
                    "1": "pointer6",
                    "2": "pointer_var6"
                },
                "puVar19": {
                    "1": "pointer_var3",
                    "2": "ptr2"
                },
                "puVar20": {
                    "1": "pointer_var7"
                },
                "puVar21": {
                    "1": "pu_var36"
                },
                "puVar22": {
                    "1": "array_pointer2",
                    "2": "ptr7"
                },
                "puVar23": {
                    "1": "ptr5",
                    "2": "pointer8"
                },
                "puVar24": {
                    "1": "ptr10"
                },
                "puVar5": {
                    "1": "result_pointer",
                    "2": "temp_ptr2",
                    "3": "pointer_2",
                    "4": "ptr2",
                    "6": "pointer2"
                },
                "puVar6": {
                    "1": "pu_var55"
                },
                "puVar7": {
                    "1": "temp_pointer1"
                },
                "puVar8": {
                    "1": "ptr3"
                },
                "uParam26": {
                    "1": "temp_val8"
                },
                "uStack_208": {
                    "1": "u_stack_208",
                    "3": "stack_var1"
                },
                "uStack_c8": {
                    "1": "var_3",
                    "3": "stack_var2"
                },
                "uVar10": {
                    "1": "temp_value3"
                },
                "uVar11": {
                    "1": "var16",
                    "2": "temp_value3",
                    "3": "temp_value_3",
                    "7": "temp3"
                },
                "uVar12": {
                    "1": "value4",
                    "2": "temp_var4",
                    "3": "temp_value4",
                    "7": "temp4"
                },
                "uVar16": {
                    "1": "temp_5"
                },
                "uVar17": {
                    "1": "temp_value5"
                },
                "uVar18": {
                    "1": "temp6"
                },
                "uVar19": {
                    "1": "temp_value_5"
                },
                "uVar2": {
                    "1": "checksum",
                    "23": "result",
                    "3": "result1"
                },
                "uVar20": {
                    "1": "temp_value7",
                    "2": "temp_value_5"
                },
                "uVar21": {
                    "1": "temp_value_6"
                },
                "uVar22": {
                    "1": "nested_result_4"
                },
                "uVar23": {
                    "1": "temp7"
                },
                "uVar25": {
                    "1": "temp7",
                    "2": "temp_var6"
                },
                "uVar26": {
                    "1": "temp_value7",
                    "2": "temp9"
                },
                "uVar27": {
                    "1": "temp9",
                    "2": "temp7"
                },
                "uVar3": {
                    "1": "var19",
                    "13": "temp_result",
                    "2": "temp_var",
                    "3": "result2",
                    "5": "temp"
                },
                "uVar5": {
                    "1": "temp_variable2"
                },
                "uVar6": {
                    "1": "value2",
                    "2": "temp_var1",
                    "9": "temp1"
                },
                "uVar7": {
                    "1": "temp3"
                },
                "uVar8": {
                    "1": "temp_val2",
                    "2": "temp_value2",
                    "3": "temp_value_2",
                    "8": "temp2"
                },
                "uVar9": {
                    "1": "temp_value2"
                },
                "uint FUN_0800856c": {
                    "1": "some_function_4"
                },
                "uint FUN_08008ba0": {
                    "1": "some_function_7"
                },
                "uint FUN_0800b2e8": {
                    "1": "some_function_1"
                },
                "ulonglong FUN_080082d0": {
                    "1": "some_function_3"
                },
                "ulonglong FUN_080082d4": {
                    "1": "some_function_9"
                },
                "ulonglong FUN_08008640": {
                    "1": "some_function_8"
                },
                "undefined8 *param_2": {
                    "1": "output_array"
                }
            },
            "called": [
                "FUN_0800b2e8",
                "FUN_08008b10",
                "FUN_080082d0",
                "FUN_0800856c",
                "FUN_080094c0",
                "FUN_08008b4c",
                "FUN_08008ba0",
                "FUN_08008640",
                "FUN_080082d4"
            ],
            "calling": [
                "FUN_08009d78"
            ],
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nuint calculate_result_0800a5a0(int input_param,undefined8 *input_array,int array_length,int input4,int input5,int input6)\n\n{\n  undefined4 *pointer1;\n  uint result;\n  uint temp_result;\n  int counter;\n  uint *pointer2;\n  undefined4 temp1;\n  uint **pointer_array;\n  undefined4 temp2;\n  int temp_counter;\n  undefined4 *pointer3;\n  undefined4 temp3;\n  uint temp4;\n  uint *pointer4;\n  int counter3;\n  int temp_index;\n  undefined8 *pointer5;\n  int i_var2;\n  undefined4 *pointer_var6;\n  undefined8 *ptr2;\n  undefined4 temp7;\n  int temp_var3;\n  undefined8 *pointer7;\n  undefined4 *pointer8;\n  bool flag;\n  undefined8 temp5;\n  undefined8 result2;\n  undefined8 temp_var9;\n  undefined8 *temp_array1;\n  int local_var1;\n  int temp_offset;\n  int local_var3;\n  uint *temp_array2 [2];\n  uint result_array [20];\n  undefined8 stack_var1;\n  undefined8 local_var4;\n  int temp_array4 [38];\n  undefined8 stack_var2;\n  \n  temp_index = *(int *)(&DAT_0800c060 + input5 * 4);\n  temp_counter = input4 + -1;\n  temp_array = (uint *)input_array;\n  if (array_length + 0x14 < 0 == check_if_carry(array_length,0x14)) {\n    local_var3 = (array_length + -3) / 0x18;\n    temp_offset = (local_var3 + 1) * -0x18;\n  }\n  else {\n    temp_offset = -0x18;\n    local_var3 = 0;\n  }\n  temp_offset = array_length + temp_offset;\n  i_var2 = local_var3 - temp_counter;\n  if (-1 < temp_index + temp_counter) {\n    temp_var3 = temp_index + temp_counter + 1 + i_var2;\n    pointer5 = &stack_var1;\n    do {\n      while (i_var2 < 0) {\n        i_var2 = i_var2 + 1;\n        *(undefined4 *)pointer5 = 0;\n        *(undefined4 *)((int)pointer5 + 4) = 0;\n        pointer5 = pointer5 + 1;\n        if (i_var2 == temp_var3) goto label_1;\n      }\n      result2 = FUN_0800856c(*(undefined4 *)(input6 + i_var2 * 4));\n      i_var2 = i_var2 + 1;\n      *pointer5 = result2;\n      pointer5 = pointer5 + 1;\n    } while (i_var2 != temp_var3);\n  }\nlabel_1:\n  pointer3 = (undefined4 *)(input_param + -8);\n  if (-1 < temp_index) {\n    pointer7 = &stack_var1 + input4;\n    i_var2 = temp_counter;\n    pointer5 = &stack_var2;\n    do {\n      if (temp_counter < 0) {\n        result2 = 0;\n      }\n      else {\n        result2 = 0;\n        pointer8 = pointer3;\n        ptr2 = pointer7;\n        do {\n          pointer_var6 = pointer8 + 2;\n          temp5 = FUN_08008640(*pointer_var6,pointer8[3],*(undefined4 *)(ptr2 + -1),\n                                *(undefined4 *)((int)ptr2 + -4));\n          result2 = FUN_080082d4((int)result2,(int)((ulonglong)result2 >> 0x20),(int)temp5,\n                                (int)((ulonglong)temp5 >> 0x20));\n          pointer8 = pointer_var6;\n          ptr2 = ptr2 + -1;\n        } while (pointer_var6 != pointer3 + input4 * 2);\n      }\n      i_var2 = i_var2 + 1;\n      *pointer5 = result2;\n      pointer7 = pointer7 + 1;\n      pointer5 = pointer5 + 1;\n    } while (i_var2 != temp_index + input4);\n  }\n  temp_array2[0] = result_array + temp_index + -1;\n  i_var2 = temp_index;\n  do {\n    result2 = CONCAT44(*(undefined4 *)((int)&stack_var2 + i_var2 * 8 + 4),\n                      *(undefined4 *)(&stack_var2 + i_var2));\n    if (0 < i_var2) {\n      pointer5 = &stack_var2 + i_var2;\n      pointer2 = result_array;\n      do {\n        temp1 = (undefined4)((ulonglong)result2 >> 0x20);\n        FUN_08008640((int)result2,temp1,0,0x3e700000);\n        FUN_08008ba0();\n        temp5 = FUN_0800856c();\n        temp2 = (undefined4)((ulonglong)temp5 >> 0x20);\n        temp_var9 = FUN_08008640((int)temp5,temp2,0,0x41700000);\n        FUN_080082d0((int)result2,temp1,(int)temp_var9,(int)((ulonglong)temp_var9 >> 0x20));\n        result = FUN_08008ba0();\n        pointer7 = pointer5 + -1;\n        temp1 = *(undefined4 *)pointer7;\n        temp3 = *(undefined4 *)((int)pointer5 + -4);\n        *pointer2 = result;\n        result2 = FUN_080082d4((int)temp5,temp2,temp1,temp3);\n        pointer5 = pointer7;\n        pointer2 = pointer2 + 1;\n      } while (pointer7 != &stack_var2);\n    }\n    result2 = FUN_0800b2e8((int)result2,(int)((ulonglong)result2 >> 0x20),temp_offset);\n    temp2 = (undefined4)((ulonglong)result2 >> 0x20);\n    FUN_08008640((int)result2,temp2,0,0x3fc00000);\n    temp5 = FUN_080094c0();\n    temp5 = FUN_08008640((int)temp5,(int)((ulonglong)temp5 >> 0x20),0,0x40200000);\n    result2 = FUN_080082d0((int)result2,temp2,(int)temp5,(int)((ulonglong)temp5 >> 0x20));\n    result = FUN_08008ba0();\n    temp5 = FUN_0800856c();\n    result2 = FUN_080082d0((int)result2,(int)((ulonglong)result2 >> 0x20),(int)temp5,\n                          (int)((ulonglong)temp5 >> 0x20));\n    temp1 = (undefined4)((ulonglong)result2 >> 0x20);\n    temp2 = (undefined4)result2;\n    if (temp_offset < 1) {\n      if (temp_offset == 0) {\n        temp_var3 = (int)result_array[i_var2 + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      temp_var3 = FUN_08008b4c(temp2,temp1,0,0x3fe00000);\n      if (temp_var3 != 0) {\n        result = result + 1;\n        if (i_var2 < 1) {\n          result2 = FUN_080082d0(0,0x3ff00000,temp2,temp1);\n          temp_var3 = 2;\n          goto label_5;\n        }\n        temp_var3 = 2;\n        goto label_3;\n      }\n    }\n    else {\n      counter = (int)result_array[i_var2 + -1] >> (0x18U - temp_offset & 0xff);\n      temp4 = result_array[i_var2 + -1] - (counter << (0x18U - temp_offset & 0xff));\n      temp_var3 = (int)temp4 >> (0x17U - temp_offset & 0xff);\n      result_array[i_var2 + -1] = temp4;\n      result = result + counter;\njoined_r0x0800a8b8:\n      if (0 < temp_var3) {\n        result = result + 1;\n        if (i_var2 < 1) {\n          flag = false;\n        }\n        else {\nlabel_3:\n          if (result_array[0] == 0) {\n            flag = false;\n            if (i_var2 != 1) {\n              pointer2 = result_array;\n              counter = 1;\n              do {\n                pointer2 = pointer2 + 1;\n                if (*pointer2 != 0) {\n                  counter3 = counter + 1;\n                  temp4 = *pointer2;\n                  goto label_4;\n                }\n                counter = counter + 1;\n              } while (counter != i_var2);\n              flag = false;\n            }\n          }\n          else {\n            counter3 = 1;\n            counter = 0;\n            temp4 = result_array[0];\nlabel_4:\n            result_array[counter] = 0x1000000 - temp4;\n            if (counter3 < i_var2) {\n              temp4 = result_array[counter3];\n              pointer2 = result_array + counter3;\n              while( true ) {\n                pointer4 = pointer2 + 1;\n                *pointer2 = 0xffffff - temp4;\n                if (pointer4 == result_array + i_var2) break;\n                temp4 = *pointer4;\n                pointer2 = pointer4;\n              }\n            }\n            flag = true;\n          }\n        }\n        if (0 < temp_offset) {\n          if (temp_offset == 1) {\n            result_array[i_var2 + -1] = result_array[i_var2 + -1] & 0x7fffff;\n          }\n          else if (temp_offset == 2) {\n            result_array[i_var2 + -1] = result_array[i_var2 + -1] & 0x3fffff;\n          }\n        }\n        if (temp_var3 == 2) {\n          result2 = FUN_080082d0(0,0x3ff00000,temp2,temp1);\n          if (flag) {\n            temp5 = FUN_0800b2e8(0,0x3ff00000,temp_offset);\n            result2 = FUN_080082d0((int)result2,(int)((ulonglong)result2 >> 0x20),(int)temp5,\n                                  (int)((ulonglong)temp5 >> 0x20));\n          }\n        }\n      }\n    }\nlabel_5:\n    temp2 = (undefined4)((ulonglong)result2 >> 0x20);\n    counter = FUN_08008b10((int)result2,temp2,0,0);\n    if (counter == 0) {\n      result2 = FUN_0800b2e8((int)result2,temp2,-temp_offset);\n      temp1 = (undefined4)((ulonglong)result2 >> 0x20);\n      temp2 = (undefined4)result2;\n      temp_counter = FUN_08008b4c(temp2,temp1,0,0x41700000);\n      if (temp_counter == 0) {\n        temp4 = FUN_08008ba0(temp2,temp1);\n        result_array[i_var2] = temp4;\n        counter = i_var2;\n      }\n      else {\n        FUN_08008640(temp2,temp1,0,0x3e700000);\n        temp4 = FUN_08008ba0();\n        result2 = FUN_0800856c();\n        result2 = FUN_08008640((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x41700000);\n        FUN_080082d0(temp2,temp1,(int)result2,(int)((ulonglong)result2 >> 0x20));\n        temp_result = FUN_08008ba0();\n        temp_offset = temp_offset + 0x18;\n        result_array[i_var2] = temp_result;\n        result_array[i_var2 + 1] = temp4;\n        counter = i_var2 + 1;\n      }\n      goto LAB_0800a9f6;\n    }\n    counter = i_var2 + -1;\n    if (temp_index <= counter) {\n      temp4 = 0;\n      pointer2 = result_array + i_var2 + 0x3fffffff;\n      do {\n        pointer4 = pointer2 + -1;\n        temp4 = temp4 | *pointer2;\n        pointer2 = pointer4;\n      } while (pointer4 != temp_array2[0]);\n      if (temp4 != 0) break;\n    }\n    if (result_array[temp_index + -1] == 0) {\n      local_var1 = 1;\n      pointer_array = temp_array2 + temp_index;\n      do {\n        pointer2 = *pointer_array;\n        local_var1 = local_var1 + 1;\n        pointer_array = pointer_array + -1;\n      } while (pointer2 == (uint *)0x0);\n      local_var1 = i_var2 + local_var1;\n    }\n    else {\n      local_var1 = i_var2 + 1;\n    }\n    temp_var3 = i_var2 + 1;\n    pointer8 = (undefined4 *)(input6 + (temp_var3 + local_var3 + 0x3fffffff) * 4);\n    pointer5 = &stack_var1 + i_var2 + input4;\n    temp_array1 = &stack_var2 + temp_var3;\n    do {\n      pointer8 = pointer8 + 1;\n      result2 = FUN_0800856c(*pointer8);\n      *pointer5 = result2;\n      pointer7 = pointer5 + 1;\n      if (temp_counter < 0) {\n        temp5 = 0;\n      }\n      else {\n        temp5 = 0;\n        pointer_var6 = pointer3;\n        while( true ) {\n          pointer5 = pointer5 + -1;\n          pointer1 = pointer_var6 + 2;\n          result2 = FUN_08008640((int)result2,(int)((ulonglong)result2 >> 0x20),*pointer1,pointer_var6[3]);\n          temp5 = FUN_080082d4((int)temp5,(int)((ulonglong)temp5 >> 0x20),(int)result2,\n                                (int)((ulonglong)result2 >> 0x20));\n          if (pointer1 == pointer3 + input4 * 2) break;\n          result2 = *pointer5;\n          pointer_var6 = pointer1;\n        }\n      }\n      *temp_array1 = temp5;\n      temp_var3 = temp_var3 + 1;\n      i_var2 = local_var1;\n      pointer5 = pointer7;\n      temp_array1 = temp_array1 + 1;\n    } while (temp_var3 <= local_var1);\n  } while( true );\n  temp_offset = temp_offset + -0x18;\n  if (result_array[counter] == 0) {\n    pointer2 = result_array + i_var2 + 0x3ffffffe;\n    do {\n      temp4 = *pointer2;\n      counter = counter + -1;\n      temp_offset = temp_offset + -0x18;\n      pointer2 = pointer2 + -1;\n    } while (temp4 == 0);\n  }\nLAB_0800a9f6:\n  result2 = FUN_0800b2e8(0,0x3ff00000,temp_offset);\n  if (counter < 0) {\n    if (2 < input5) {\n      if (input5 == 3) {\n        result2 = 0;\nlabel_6:\n        if (temp_var3 == 0) {\n          *temp_array = (undefined4)local_var4;\n          *(int *)((int)temp_array + 4) = local_var4._4_4_;\n          *(undefined8 *)((int)temp_array + 0x10) = result2;\n          *(int *)((int)temp_array + 8) = temp_array4[0];\n          *(int *)((int)temp_array + 0xc) = temp_array4[1];\n          return result & 7;\n        }\n        *(int *)((int)temp_array + 0x10) = (int)result2;\n        *(int *)((int)temp_array + 8) = temp_array4[0];\n        *(int *)((int)temp_array + 0x14) = (int)((ulonglong)result2 >> 0x20) + -0x80000000;\n        *(int *)((int)temp_array + 4) = local_var4._4_4_ + -0x80000000;\n        *(int *)((int)temp_array + 0xc) = temp_array4[1] + -0x80000000;\n        *temp_array = (undefined4)local_var4;\n        return result & 7;\n      }\n      goto label_8;\n    }\n    if (input5 < 1) {\n      if (input5 != 0) goto label_8;\n      result2 = 0;\nlabel_7:\n      temp_counter = (int)((ulonglong)result2 >> 0x20);\n      if (temp_var3 != 0) {\n        temp_counter = temp_counter + -0x80000000;\n      }\n      *temp_array = (int)result2;\n      *(int *)((int)temp_array + 4) = temp_counter;\nlabel_8:\n      return result & 7;\n    }\n    result2 = 0;\n  }\n  else {\n    pointer7 = &stack_var2 + counter;\n    pointer2 = result_array + counter + 1;\n    pointer5 = &stack_var2 + counter + 1;\n    do {\n      temp2 = (undefined4)((ulonglong)result2 >> 0x20);\n      pointer2 = pointer2 + -1;\n      temp5 = FUN_0800856c(*pointer2);\n      temp5 = FUN_08008640((int)temp5,(int)((ulonglong)temp5 >> 0x20),(int)result2,temp2);\n      pointer5 = pointer5 + -1;\n      *pointer5 = temp5;\n      result2 = FUN_08008640((int)result2,temp2,0,0x3e700000);\n    } while (pointer2 != result_array);\n    temp_counter = 0;\n    do {\n      if (temp_index < 0) {\n        result2 = 0;\n      }\n      else {\n        temp2 = 0x40000000;\n        temp1 = 0x3ff921fb;\n        result2 = 0;\n        i_var2 = 0;\n        pointer5 = pointer7;\n        pointer3 = &DAT_0800c028;\n        while( true ) {\n          temp5 = FUN_08008640(*(undefined4 *)pointer5,*(undefined4 *)((int)pointer5 + 4),temp2,temp1\n                               );\n          result2 = FUN_080082d4((int)result2,(int)((ulonglong)result2 >> 0x20),(int)temp5,\n                                (int)((ulonglong)temp5 >> 0x20));\n          i_var2 = i_var2 + 1;\n          if ((temp_index < i_var2) || (temp_counter < i_var2)) break;\n          temp2 = *pointer3;\n          temp1 = pointer3[1];\n          pointer5 = pointer5 + 1;\n          pointer3 = pointer3 + 2;\n        }\n      }\n      flag = temp_counter != counter;\n      *(int *)(&local_var4 + temp_counter) = (int)result2;\n      *(int *)((int)&local_var4 + (temp_counter * 2 + 1) * 4) = (int)((ulonglong)result2 >> 0x20);\n      pointer7 = pointer7 + -1;\n      temp_counter = temp_counter + 1;\n    } while (flag);\n    if (2 < input5) {\n      if (input5 == 3) {\n        if (counter != 0) {\n          pointer5 = &local_var4 + counter;\n          result2 = CONCAT44(*(undefined4 *)((int)&local_var4 + (counter * 2 + 1) * 4),\n                            *(undefined4 *)pointer5);\n          do {\n            temp1 = (undefined4)((ulonglong)result2 >> 0x20);\n            temp2 = (undefined4)result2;\n            temp3 = *(undefined4 *)(pointer5 + -1);\n            temp7 = *(undefined4 *)((int)pointer5 + -4);\n            result2 = FUN_080082d4(temp2,temp1,temp3,temp7);\n            temp5 = FUN_080082d0(temp3,temp7,(int)result2,(int)((ulonglong)result2 >> 0x20));\n            temp5 = FUN_080082d4((int)temp5,(int)((ulonglong)temp5 >> 0x20),temp2,temp1);\n            *pointer5 = temp5;\n            pointer5 = pointer5 + -1;\n            *pointer5 = result2;\n          } while (&local_var4 != pointer5);\n          if (1 < counter) {\n            pointer5 = &local_var4 + counter;\n            result2 = CONCAT44(*(undefined4 *)((int)&local_var4 + (counter * 2 + 1) * 4),\n                              *(undefined4 *)pointer5);\n            do {\n              temp1 = (undefined4)((ulonglong)result2 >> 0x20);\n              temp2 = (undefined4)result2;\n              temp3 = *(undefined4 *)(pointer5 + -1);\n              temp7 = *(undefined4 *)((int)pointer5 + -4);\n              result2 = FUN_080082d4(temp2,temp1,temp3,temp7);\n              temp5 = FUN_080082d0(temp3,temp7,(int)result2,(int)((ulonglong)result2 >> 0x20));\n              temp5 = FUN_080082d4((int)temp5,(int)((ulonglong)temp5 >> 0x20),temp2,temp1);\n              *pointer5 = temp5;\n              pointer5 = pointer5 + -1;\n              *pointer5 = result2;\n            } while (&local_var4 + 1 != pointer5);\n            result2 = 0;\n            pointer5 = &local_var4 + counter + 1;\n            do {\n              pointer7 = pointer5 + -1;\n              result2 = FUN_080082d4((int)result2,(int)((ulonglong)result2 >> 0x20),\n                                    *(undefined4 *)pointer7,*(undefined4 *)((int)pointer5 + -4));\n              pointer5 = pointer7;\n            } while (&local_var4 + 2 != pointer7);\n            goto label_6;\n          }\n        }\n        result2 = 0;\n        goto label_6;\n      }\n      goto label_8;\n    }\n    if (input5 < 1) {\n      if (input5 != 0) goto label_8;\n      result2 = 0;\n      pointer5 = &local_var4 + counter + 1;\n      do {\n        pointer7 = pointer5 + -1;\n        result2 = FUN_080082d4((int)result2,(int)((ulonglong)result2 >> 0x20),*(undefined4 *)pointer7,\n                              *(undefined4 *)((int)pointer5 + -4));\n        pointer5 = pointer7;\n      } while (&local_var4 != pointer7);\n      goto label_7;\n    }\n    result2 = 0;\n    pointer5 = &local_var4 + counter + 1;\n    do {\n      pointer7 = pointer5 + -1;\n      result2 = FUN_080082d4((int)result2,(int)((ulonglong)result2 >> 0x20),*(undefined4 *)pointer7,\n                            *(undefined4 *)((int)pointer5 + -4));\n      pointer5 = pointer7;\n    } while (&local_var4 != pointer7);\n  }\n  temp_counter = (int)((ulonglong)result2 >> 0x20);\n  temp2 = (undefined4)result2;\n  if (temp_var3 == 0) {\n    *(undefined8 *)temp_array = result2;\n    result2 = FUN_080082d0((undefined4)local_var4,local_var4._4_4_,temp2,temp_counter);\n    if (counter < 1) goto label_10;\nlabel_9:\n    temp_counter = 1;\n    pointer5 = &local_var4;\n    do {\n      result2 = FUN_080082d4((int)result2,(int)((ulonglong)result2 >> 0x20),\n                            *(undefined4 *)(pointer5 + 1),*(undefined4 *)((int)pointer5 + 0xc));\n      temp_counter = temp_counter + 1;\n      pointer5 = pointer5 + 1;\n    } while (temp_counter <= counter);\n    if (temp_var3 == 0) goto label_10;\n  }\n  else {\n    *temp_array = temp2;\n    *(int *)((int)temp_array + 4) = temp_counter + -0x80000000;\n    result2 = FUN_080082d0((undefined4)local_var4,local_var4._4_4_,temp2,temp_counter);\n    if (0 < counter) goto label_9;\n  }\n  result2 = CONCAT44((int)((ulonglong)result2 >> 0x20) + -0x80000000,(int)result2);\nlabel_10:\n  *(undefined8 *)((int)temp_array + 8) = result2;\n  return result & 7;\n}\n\n",
            "current_name": "calculate_result_0800a5a0",
            "entrypoint": "0x0800a5a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800a5a0": "calculate_result_0800a5a0",
                "LAB_0800a626": "label_1",
                "LAB_0800a7a4": "label_5",
                "LAB_0800a8c8": "label_3",
                "LAB_0800a8e2": "label_4",
                "LAB_0800aafc": "label_7",
                "LAB_0800ab0e": "label_8",
                "LAB_0800abe4": "label_6",
                "LAB_0800ad04": "label_9",
                "LAB_0800ad26": "label_10",
                "SCARRY4": "check_if_carry",
                "bVar24": "flag",
                "iVar14": "counter3",
                "iVar15": "temp_index",
                "iVar17": "i_var2",
                "iVar21": "temp_var3",
                "iVar4": "counter",
                "iVar9": "temp_counter",
                "local_160": "temp_array4",
                "local_168": "local_var4",
                "local_258": "result_array",
                "local_260": "temp_array2",
                "local_260[1]": "temp_array",
                "local_26c": "local_var3",
                "local_270": "temp_offset",
                "local_280": "local_var1",
                "local_284": "temp_array1",
                "param_1": "input_param",
                "param_2": "input_array",
                "param_3": "array_length",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "ppuVar7": "pointer_array",
                "puVar1": "pointer1",
                "puVar10": "pointer3",
                "puVar13": "pointer4",
                "puVar16": "pointer5",
                "puVar18": "pointer_var6",
                "puVar19": "ptr2",
                "puVar22": "pointer7",
                "puVar23": "pointer8",
                "puVar5": "pointer2",
                "puVar7": "temp_pointer1",
                "uStack_208": "stack_var1",
                "uStack_c8": "stack_var2",
                "uVar10": "temp_value3",
                "uVar11": "temp3",
                "uVar12": "temp4",
                "uVar16": "temp_var5",
                "uVar18": "temp_result_2",
                "uVar19": "temp_value6",
                "uVar2": "result",
                "uVar20": "temp7",
                "uVar22": "nested_result_4",
                "uVar23": "temp7",
                "uVar25": "temp5",
                "uVar26": "result2",
                "uVar27": "temp_var9",
                "uVar3": "temp_result",
                "uVar5": "temp_variable2",
                "uVar6": "temp1",
                "uVar7": "temp3",
                "uVar8": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800adf0": {
            "additional_data": {
                "0": {
                    "1": "constant_zero"
                },
                "0x1110f8a6": {
                    "1": "constant_11"
                },
                "0x19c161d5": {
                    "1": "constant_9"
                },
                "0x3de5d93a": {
                    "1": "constant_4"
                },
                "0x3e400000": {
                    "1": "constant_1"
                },
                "0x3e5ae5e6": {
                    "1": "constant_6"
                },
                "0x3ec71de3": {
                    "1": "constant_8"
                },
                "0x3f2a01a0": {
                    "1": "constant_10"
                },
                "0x3f811111": {
                    "1": "constant_12"
                },
                "0x3fc55555": {
                    "1": "constant_15"
                },
                "0x3fe00000": {
                    "1": "constant_13"
                },
                "0x55555549": {
                    "1": "constant_14"
                },
                "0x57b1fe7d": {
                    "1": "constant_7"
                },
                "0x5acfd57c": {
                    "1": "constant_3"
                },
                "0x7fffffff": {
                    "1": "constant_2"
                },
                "0x8a2b9ceb": {
                    "1": "constant_5"
                },
                "FUN_080082d0": {
                    "1": "combine_values1",
                    "2": "perform_calculation1"
                },
                "FUN_080082d4": {
                    "1": "combine_values2",
                    "2": "perform_calculation4"
                },
                "FUN_08008640": {
                    "1": "perform_operation",
                    "2": "perform_calculation3"
                },
                "FUN_08008ba0": {
                    "1": "check_condition",
                    "2": "perform_calculation2"
                },
                "FUN_0800adf0": {
                    "1": "optimized_function",
                    "11": "calculate_result",
                    "3": "process_data"
                },
                "iVar1": {
                    "1": "check_result",
                    "24": "result",
                    "4": "status"
                },
                "param_1": {
                    "1": "input_data",
                    "3": "input_param",
                    "4": "input1",
                    "6": "input",
                    "9": "input_value"
                },
                "param_2": {
                    "1": "value_limit",
                    "2": "flag",
                    "3": "input_value",
                    "4": "size",
                    "5": "input_size"
                },
                "param_3": {
                    "1": "input_value3",
                    "2": "param_a",
                    "4": "param_3",
                    "7": "param3"
                },
                "param_4": {
                    "1": "param_4_value",
                    "2": "param_b",
                    "4": "input4",
                    "7": "param4"
                },
                "param_5": {
                    "1": "is_param_set",
                    "14": "flag",
                    "2": "condition",
                    "3": "reverse_flag",
                    "5": "is_reversed"
                },
                "uVar2": {
                    "1": "return_val1",
                    "2": "result_1",
                    "3": "temp1",
                    "9": "result1"
                },
                "uVar3": {
                    "1": "lower_result",
                    "2": "result_part2",
                    "3": "var2",
                    "8": "result2"
                },
                "uVar4": {
                    "1": "result4",
                    "2": "temp3",
                    "3": "var3",
                    "8": "result3"
                },
                "uVar5": {
                    "1": "lower_temp",
                    "2": "temp4",
                    "3": "var4",
                    "8": "result4"
                },
                "uVar6": {
                    "1": "temp_part3",
                    "2": "temp3",
                    "3": "var5",
                    "7": "result5"
                },
                "uVar7": {
                    "1": "temp_result_low",
                    "2": "temp4",
                    "4": "temp_result1",
                    "6": "temp1"
                },
                "uVar8": {
                    "1": "temp_value2",
                    "2": "temp5",
                    "6": "temp2",
                    "9": "temp_result2"
                }
            },
            "called": [
                "FUN_080082d0",
                "FUN_08008ba0",
                "FUN_08008640",
                "FUN_080082d4"
            ],
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "code": "\nundefined4\ncalculate_result_0800adf0(undefined4 input_value,uint input_size,undefined4 param3,undefined4 param4,int flag)\n\n{\n  int result;\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined8 temp_result;\n  undefined8 temp_result2;\n  \n  if (((input_size & 0x7fffffff) < 0x3e400000) && (result = FUN_08008ba0(), result == 0)) {\n    return input_value;\n  }\n  temp_result = FUN_08008640(input_value,input_size,input_value);\n  result3 = (undefined4)((ulonglong)temp_result >> 0x20);\n  result2 = (undefined4)temp_result;\n  temp_result = FUN_08008640(input_value,input_size,result2,result3);\n  result4 = (undefined4)((ulonglong)temp_result >> 0x20);\n  result1 = (undefined4)temp_result;\n  temp_result = FUN_08008640(result2,result3,0x5acfd57c,0x3de5d93a);\n  temp_result = FUN_080082d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x8a2b9ceb,0x3e5ae5e6);\n  temp_result = FUN_08008640((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result2,result3);\n  temp_result = FUN_080082d4((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x57b1fe7d,0x3ec71de3);\n  temp_result = FUN_08008640((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result2,result3);\n  temp_result = FUN_080082d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x19c161d5,0x3f2a01a0);\n  temp_result = FUN_08008640((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result2,result3);\n  temp_result = FUN_080082d4((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x1110f8a6,0x3f811111);\n  result5 = (undefined4)((ulonglong)temp_result >> 0x20);\n  if (flag != 0) {\n    temp_result2 = FUN_08008640(param3,param4,0,0x3fe00000);\n    temp_result = FUN_08008640(result1,result4,(int)temp_result,result5);\n    temp_result = FUN_080082d0((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),(int)temp_result,\n                         (int)((ulonglong)temp_result >> 0x20));\n    temp_result = FUN_08008640((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result2,result3);\n    temp_result = FUN_080082d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),param3,param4);\n    temp_result2 = FUN_08008640(result1,result4,0x55555549,0x3fc55555);\n    temp_result = FUN_080082d4((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)temp_result2,\n                         (int)((ulonglong)temp_result2 >> 0x20));\n    result2 = FUN_080082d0(input_value,input_size,(int)temp_result,(int)((ulonglong)temp_result >> 0x20));\n    return result2;\n  }\n  temp_result = FUN_08008640(result2,result3,(int)temp_result,result5);\n  temp_result = FUN_080082d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x55555549,0x3fc55555);\n  temp_result = FUN_08008640((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result1,result4);\n  result2 = FUN_080082d4((int)temp_result,(int)((ulonglong)temp_result >> 0x20),input_value,input_size);\n  return result2;\n}\n\n",
            "current_name": "calculate_result_0800adf0",
            "entrypoint": "0x0800adf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800adf0": "calculate_result_0800adf0",
                "iVar1": "result",
                "param_1": "input_value",
                "param_2": "input_size",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "flag",
                "uVar2": "result1",
                "uVar3": "result2",
                "uVar4": "result3",
                "uVar5": "result4",
                "uVar6": "result5",
                "uVar7": "temp_result",
                "uVar8": "temp_result2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800af78": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "<more_descriptive_function_name>"
                },
                "FUNC_0800b2cc": {
                    "1": "helper_function"
                },
                "FUN_080082d0": {
                    "1": "combine_outputs"
                },
                "FUN_080082d4": {
                    "1": "calculate1"
                },
                "FUN_08008640": {
                    "1": "calculate_outputs"
                },
                "FUN_08008894": {
                    "1": "calculate_values"
                },
                "FUN_08008b60": {
                    "1": "check_condition"
                },
                "FUN_0800af78": {
                    "1": "improved_func",
                    "10": "calculate_result"
                },
                "FUN_0800b2cc": {
                    "1": "get_func_result"
                },
                "iVar5": {
                    "1": "return_var",
                    "14": "return_value",
                    "2": "status",
                    "3": "output",
                    "8": "result"
                },
                "local_2c": {
                    "1": "temp_var7",
                    "2": "temp4",
                    "7": "local_var",
                    "8": "local_variable"
                },
                "param_1": {
                    "1": "num1",
                    "16": "input1",
                    "2": "value1",
                    "3": "input_value1",
                    "4": "input_param"
                },
                "param_2": {
                    "1": "num2",
                    "16": "input2",
                    "2": "value2",
                    "3": "input_value2"
                },
                "uVar1": {
                    "1": "result_1",
                    "2": "temp1",
                    "20": "result1",
                    "3": "temp_var1"
                },
                "uVar2": {
                    "1": "return_value2",
                    "2": "var2",
                    "20": "result2",
                    "3": "temp_var2"
                },
                "uVar3": {
                    "1": "return_value3",
                    "2": "temp3",
                    "20": "result3",
                    "3": "temp_var3"
                },
                "uVar4": {
                    "1": "fourth_result",
                    "2": "temp4",
                    "20": "result4",
                    "3": "temp_var4"
                },
                "uVar6": {
                    "1": "fifth_result",
                    "13": "result5",
                    "2": "temp_var6",
                    "3": "temp1"
                },
                "uVar7": {
                    "1": "temp_var",
                    "2": "temp1",
                    "3": "temp2"
                },
                "uVar8": {
                    "1": "concatenated_value",
                    "2": "temp_var8",
                    "3": "temp3",
                    "4": "result6"
                },
                "uVar9": {
                    "1": "temp_var6",
                    "2": "temp_result3",
                    "3": "temp4",
                    "4": "result7",
                    "5": "temp_result2"
                }
            },
            "called": [
                "FUN_080082d0",
                "FUN_0800b2cc",
                "FUN_08008b60",
                "FUN_08008894",
                "FUN_08008640",
                "FUN_080082d4"
            ],
            "calling": [
                "FUN_08009990"
            ],
            "code": "\nint calculate_result_0800af78(int input1,uint input2)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  int return_value;\n  undefined4 result5;\n  uint temp2;\n  undefined8 result6;\n  undefined8 temp_result2;\n  undefined4 local_variable;\n  \n  result6 = CONCAT44(input2,input1);\n  temp2 = input2 & 0x7fffffff;\n  if (temp2 < 0x44100000) {\n    if (temp2 < 0x3fdc0000) {\n      if (temp2 < 0x3e200000) {\n        temp_result2 = FUN_080082d4(input1,input2,0x8800759c,0x7e37e43c);\n        return_value = FUN_08008b60((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0,0x3ff00000);\n        if (return_value != 0) {\n          return input1;\n        }\n      }\n      return_value = -1;\n    }\n    else {\n      result6 = FUNC_0800b2cc();\n      result4 = (undefined4)((ulonglong)result6 >> 0x20);\n      result1 = (undefined4)result6;\n      if (temp2 < 0x3ff30000) {\n        if (temp2 < 0x3fe60000) {\n          result6 = FUN_080082d4(result1,result4,result1,result4);\n          result6 = FUN_080082d0((int)result6,(int)((ulonglong)result6 >> 0x20),0,0x3ff00000);\n          temp_result2 = FUN_080082d4(result1,result4,0,0x40000000);\n          result6 = FUN_08008894((int)result6,(int)((ulonglong)result6 >> 0x20),(int)temp_result2,\n                               (int)((ulonglong)temp_result2 >> 0x20));\n          return_value = 0;\n        }\n        else {\n          result6 = FUN_080082d0(result1,result4,0,0x3ff00000);\n          temp_result2 = FUN_080082d4(result1,result4,0,0x3ff00000);\n          result6 = FUN_08008894((int)result6,(int)((ulonglong)result6 >> 0x20),(int)temp_result2,\n                               (int)((ulonglong)temp_result2 >> 0x20));\n          return_value = 1;\n        }\n      }\n      else if (temp2 < 0x40038000) {\n        result6 = FUN_080082d0(result1,result4,0,0x3ff80000);\n        temp_result2 = FUN_08008640(result1,result4,0,0x3ff80000);\n        temp_result2 = FUN_080082d4((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0,0x3ff00000);\n        result6 = FUN_08008894((int)result6,(int)((ulonglong)result6 >> 0x20),(int)temp_result2,\n                             (int)((ulonglong)temp_result2 >> 0x20));\n        return_value = 2;\n      }\n      else {\n        result6 = FUN_08008894(0,0xbff00000,result1,result4);\n        return_value = 3;\n      }\n    }\n    local_variable = (undefined4)((ulonglong)result6 >> 0x20);\n    result5 = (undefined4)result6;\n    result6 = FUN_08008640(result5,local_variable,result5);\n    result2 = (undefined4)((ulonglong)result6 >> 0x20);\n    result1 = (undefined4)result6;\n    result6 = FUN_08008640(result1,result2,result1,result2);\n    result3 = (undefined4)((ulonglong)result6 >> 0x20);\n    result4 = (undefined4)result6;\n    result6 = FUN_08008640(result4,result3,0xe322da11,0x3f90ad3a);\n    result6 = FUN_080082d4((int)result6,(int)((ulonglong)result6 >> 0x20),0x24760deb,0x3fa97b4b);\n    result6 = FUN_08008640((int)result6,(int)((ulonglong)result6 >> 0x20),result4,result3);\n    result6 = FUN_080082d4((int)result6,(int)((ulonglong)result6 >> 0x20),0xa0d03d51,0x3fb10d66);\n    result6 = FUN_08008640((int)result6,(int)((ulonglong)result6 >> 0x20),result4,result3);\n    result6 = FUN_080082d4((int)result6,(int)((ulonglong)result6 >> 0x20),0xc54c206e,0x3fb745cd);\n    result6 = FUN_08008640((int)result6,(int)((ulonglong)result6 >> 0x20),result4,result3);\n    result6 = FUN_080082d4((int)result6,(int)((ulonglong)result6 >> 0x20),0x920083ff,0x3fc24924);\n    result6 = FUN_08008640((int)result6,(int)((ulonglong)result6 >> 0x20),result4,result3);\n    result6 = FUN_080082d4((int)result6,(int)((ulonglong)result6 >> 0x20),0x5555550d,0x3fd55555);\n    result6 = FUN_08008640((int)result6,(int)((ulonglong)result6 >> 0x20),result1,result2);\n    result1 = (undefined4)((ulonglong)result6 >> 0x20);\n    temp_result2 = FUN_08008640(result4,result3,0x2c6a6c2f,0xbfa2b444);\n    temp_result2 = FUN_080082d0((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0x52defd9a,0x3fadde2d);\n    temp_result2 = FUN_08008640((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),result4,result3);\n    temp_result2 = FUN_080082d0((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp_result2 = FUN_08008640((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),result4,result3);\n    temp_result2 = FUN_080082d0((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0xfe231671,0x3fbc71c6);\n    temp_result2 = FUN_08008640((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),result4,result3);\n    temp_result2 = FUN_080082d0((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0x9998ebc4,0x3fc99999);\n    temp_result2 = FUN_08008640((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),result4,result3);\n    result4 = (undefined4)((ulonglong)temp_result2 >> 0x20);\n    if (return_value == -1) {\n      result6 = FUN_080082d4((int)result6,result1,(int)temp_result2,result4);\n      result6 = FUN_08008640((int)result6,(int)((ulonglong)result6 >> 0x20),result5,local_variable);\n      return_value = FUN_080082d0(result5,local_variable,(int)result6,(int)((ulonglong)result6 >> 0x20));\n      return return_value;\n    }\n    result6 = FUN_080082d4((int)result6,result1,(int)temp_result2,result4);\n    result6 = FUN_08008640((int)result6,(int)((ulonglong)result6 >> 0x20),result5,local_variable);\n    result6 = FUN_080082d0((int)result6,(int)((ulonglong)result6 >> 0x20),\n                         *(undefined4 *)(&UNK_0800c090 + return_value * 8),\n                         *(undefined4 *)(&UNK_0800c094 + return_value * 8));\n    result6 = FUN_080082d0((int)result6,(int)((ulonglong)result6 >> 0x20),result5,local_variable);\n    return_value = FUN_080082d0(*(undefined4 *)(&UNK_0800c070 + return_value * 8),\n                         *(undefined4 *)(&UNK_0800c074 + return_value * 8),(int)result6,\n                         (int)((ulonglong)result6 >> 0x20));\n    if ((int)input2 < 0) {\n      return return_value;\n    }\n  }\n  else {\n    if ((0x7ff00000 < temp2) || ((temp2 == 0x7ff00000 && (input1 != 0)))) {\n      return_value = FUN_080082d4(input1,input2,input1);\n      return return_value;\n    }\n    return_value = 0x54442d18;\n  }\n  return return_value;\n}\n\n",
            "current_name": "calculate_result_0800af78",
            "entrypoint": "0x0800af78",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800af78": "calculate_result_0800af78",
                "iVar5": "return_value",
                "local_2c": "local_variable",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar6": "result5",
                "uVar7": "temp2",
                "uVar8": "result6",
                "uVar9": "temp_result2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b2cc": {
            "called": [],
            "calling": [
                "FUN_08009d78",
                "FUN_0800af78",
                "FUN_08009990"
            ],
            "code": "\nvoid FUNC_0800b2cc(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800b2cc",
            "entrypoint": "0x0800b2cc",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800b2cc": "FUNC_0800b2cc"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800b2d4": {
            "additional_data": {
                "0x100000": {
                    "1": "bit_shift"
                },
                "0x1f": {
                    "1": "right_shift"
                },
                "<original_variable_name_1>": {
                    "1": "result"
                },
                "FUN_0800b2d4": {
                    "1": "set_bit_as_most_significant",
                    "2": "calculate_shift_amount",
                    "3": "calculate_offset"
                },
                "param_1": {
                    "1": "result",
                    "2": "param1",
                    "3": "value",
                    "4": "input_flag"
                },
                "param_2": {
                    "1": "original_value",
                    "12": "input_value",
                    "2": "arg2",
                    "3": "value",
                    "4": "number"
                },
                "param_2 | 0x80000000": {
                    "1": "signed_value"
                },
                "param_3": {
                    "1": "result"
                },
                "param_4": {
                    "1": "shift_amount"
                },
                "param_5": {
                    "1": "bitwise_or"
                },
                "param_6": {
                    "1": "added_value"
                },
                "param_7": {
                    "1": "shift_amount"
                },
                "return_value": {
                    "1": "result"
                },
                "var_1": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800981c"
            ],
            "code": "\nuint calculate_offset_0800b2d4(undefined4 input,uint input_value)\n\n{\n  return (input_value | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "current_name": "calculate_offset_0800b2d4",
            "entrypoint": "0x0800b2d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b2d4": "calculate_offset_0800b2d4",
                "param_1": "input",
                "param_2": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b2e0": {
            "additional_data": {
                "<NO PARAMETER>": {
                    "1": ""
                },
                "<NO VARIABLE>": {
                    "1": ""
                },
                "<no-original-parameters>": {
                    "1": "<no-new-parameters>"
                },
                "<no-original-variables>": {
                    "1": "<no-new-variables>"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "FUN_0800b2e0": {
                    "1": "get_return_value",
                    "2": "get_zero",
                    "20": "initialize",
                    "3": "get_default_value"
                },
                "PTR_param1": {
                    "1": "param1"
                },
                "PTR_param2": {
                    "1": "param2"
                },
                "result": {
                    "1": "status"
                },
                "return": {
                    "1": "result"
                },
                "returnType": {
                    "1": "void"
                },
                "return_value": {
                    "1": "status"
                },
                "undefined4": {
                    "14": "void",
                    "2": "int"
                },
                "undefined4_1": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_080098d0",
                "FUN_0800981c"
            ],
            "code": "\nvoid initialize_0800b2e0(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_0800b2e0",
            "entrypoint": "0x0800b2e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b2e0": "initialize_0800b2e0",
                "return": "result",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b2e8": {
            "additional_data": {
                "FUN_080082d4": {
                    "1": "calculate_result_b",
                    "2": "sub_function2"
                },
                "FUN_08008640": {
                    "1": "calculate_result",
                    "2": "perform_calculation"
                },
                "FUN_0800b2e8": {
                    "1": "process_numbers",
                    "6": "calculate_result"
                },
                "SCARRY4": {
                    "1": "is_carry_set"
                },
                "iVar2": {
                    "1": "shifted_input2_plus_count",
                    "11": "sum",
                    "2": "modified_value"
                },
                "param_1": {
                    "1": "input_param_1",
                    "2": "input_a",
                    "22": "input1",
                    "3": "input_value1"
                },
                "param_2": {
                    "1": "input_2",
                    "2": "input_b",
                    "22": "input2",
                    "3": "input_value2"
                },
                "param_3": {
                    "1": "limit",
                    "13": "offset",
                    "2": "value",
                    "3": "modifier",
                    "5": "counter"
                },
                "param_4": {
                    "1": "input4",
                    "16": "constant",
                    "2": "parameter"
                },
                "uVar1": {
                    "1": "shifted_bit",
                    "13": "shifted_input2",
                    "3": "shift_amount",
                    "9": "shifted_value"
                },
                "uVar3": {
                    "1": "input1_triple",
                    "2": "high_part",
                    "3": "upper_part",
                    "4": "upper_bits",
                    "7": "high_bits"
                },
                "uVar4": {
                    "1": "concatenated",
                    "13": "combined_inputs",
                    "2": "combined_input",
                    "3": "combined_value",
                    "4": "concatenated_value"
                },
                "uVar4_hi": {
                    "1": "combined_inputs_hi"
                },
                "uVar4_lo": {
                    "1": "combined_inputs_lo"
                },
                "uVar5": {
                    "1": "result"
                }
            },
            "called": [
                "FUN_08008640",
                "FUN_080082d4"
            ],
            "calling": [
                "FUN_0800a5a0"
            ],
            "code": "\nuint calculate_result_0800b2e8(uint input1,uint input2,int offset,undefined4 constant)\n\n{\n  uint shifted_input2;\n  int sum;\n  uint high_bits;\n  undefined8 combined_inputs;\n  \n  combined_inputs = CONCAT44(input2,input1);\n  shifted_input2 = (input2 << 1) >> 0x15;\n  if (shifted_input2 == 0) {\n    if ((input1 | input2 & 0x7fffffff) == 0) {\n      return input1;\n    }\n    combined_inputs = FUN_08008640(input1,input2,0,0x43500000);\n    if (offset < -50000) goto LAB_0800b34a;\n    shifted_input2 = ((uint)((int)((ulonglong)combined_inputs >> 0x20) << 1) >> 0x15) - 0x36;\n  }\n  else if (shifted_input2 == 0x7ff) {\n    shifted_input2 = FUN_080082d4(input1,input2,input1,input2,constant);\n    return shifted_input2;\n  }\n  high_bits = (uint)((ulonglong)combined_inputs >> 0x20);\n  sum = shifted_input2 + offset;\n  if (sum < 0x7ff) {\n    if (0 < sum) {\n      return (uint)combined_inputs;\n    }\n    if (sum + 0x35 < 0 == is_carry_set(sum,0x35)) {\n      shifted_input2 = FUN_08008640((uint)combined_inputs,high_bits & 0x800fffff | (sum + 0x36) * 0x100000,0,0x3c900000);\n      return shifted_input2;\n    }\n    if (offset < 0xc351) {\n      combined_inputs = CONCAT44(high_bits & 0x80000000 | 0x1a56e1f,0xc2f8f359);\nLAB_0800b34a:\n      shifted_input2 = FUN_08008640((int)combined_inputs,(int)((ulonglong)combined_inputs >> 0x20),0xc2f8f359,0x1a56e1f);\n      return shifted_input2;\n    }\n  }\n  shifted_input2 = FUN_08008640(0x8800759c,high_bits & 0x80000000 | 0x7e37e43c,0x8800759c,0x7e37e43c);\n  return shifted_input2;\n}\n\n",
            "current_name": "calculate_result_0800b2e8",
            "entrypoint": "0x0800b2e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b2e8": "calculate_result_0800b2e8",
                "SCARRY4": "is_carry_set",
                "iVar2": "sum",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "offset",
                "param_4": "constant",
                "uVar1": "shifted_input2",
                "uVar3": "high_bits",
                "uVar4": "combined_inputs"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b3dc": {
            "additional_data": {
                "DAT_20000018": {
                    "1": "data_address",
                    "10": "data",
                    "2": "data_value",
                    "3": "global_data"
                },
                "FUN_0800b3dc": {
                    "1": "get_global_constant",
                    "11": "get_data",
                    "2": "get_data_value",
                    "3": "get_global_value",
                    "4": "get_global_data"
                },
                "return": {
                    "1": "global_data"
                }
            },
            "called": [],
            "calling": [
                "FUN_080098d0",
                "FUN_0800981c"
            ],
            "code": "\nundefined4 get_data_0800b3dc(void)\n\n{\n  global_data DAT_20000018;\n}\n\n",
            "current_name": "get_data_0800b3dc",
            "entrypoint": "0x0800b3dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b3dc": "get_data_0800b3dc",
                "return": "global_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b3e8": {
            "additional_data": {
                "FUNC_0800b4d0": {
                    "1": "unused_function",
                    "2": "sub_function1",
                    "3": "perform_task"
                },
                "FUNC_0800b5b0": {
                    "1": "initialize_system",
                    "7": "initialize"
                },
                "FUN_080001ac": {
                    "1": "helper_function",
                    "2": "sub_function2"
                },
                "FUN_0800b3e8": {
                    "1": "perform_sequential_calls",
                    "17": "execute_sub_functions",
                    "2": "process_sub_functions",
                    "4": "execute_functions"
                },
                "iVar1": {
                    "1": "sub_function_count",
                    "11": "iteration_count",
                    "12": "counter",
                    "2": "count",
                    "3": "index"
                },
                "ppcVar2": {
                    "1": "code_pointers",
                    "10": "function_pointer",
                    "4": "function_array",
                    "5": "function_pointer_array",
                    "7": "function_pointers"
                }
            },
            "called": [
                "FUN_0800b5b0",
                "FUN_0800b4d0",
                "FUN_080001ac"
            ],
            "calling": [
                "entry"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b3f4) */\n/* WARNING: Removing unreachable block (ram,0x0800b3f6) */\n\nvoid execute_sub_functions_0800b3e8(void)\n\n{\n  int counter;\n  code **function_pointer;\n  \n  FUNC_0800b5b0();\n  counter = 0;\n  function_pointer = (code **)&DAT_0800c0b4;\n  do {\n    counter = counter + 1;\n    (**function_pointer)();\n    function_pointer = function_pointer + 1;\n  } while (counter != 2);\n  return;\n}\n\n",
            "current_name": "execute_sub_functions_0800b3e8",
            "entrypoint": "0x0800b3e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b3e8": "execute_sub_functions_0800b3e8",
                "iVar1": "counter",
                "ppcVar2": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b430": {
            "additional_data": {
                "(param_3 - 0x10 >> 4) + 1) * 4": {
                    "1": "aligned_block_count"
                },
                "FUN_0800b430": {
                    "1": "memset_with_byte",
                    "3": "initialize_memory",
                    "4": "fill_memory_with_byte",
                    "5": "memset",
                    "7": "fill_memory"
                },
                "bVar5": {
                    "1": "is_zero_length",
                    "2": "is_empty",
                    "3": "is_length_zero",
                    "4": "is_zero_size",
                    "5": "is_zero",
                    "7": "is_size_zero"
                },
                "joined_r0x0800b4a8": {
                    "1": "end"
                },
                "param_1": {
                    "1": "memory_array",
                    "13": "dest",
                    "2": "memory",
                    "7": "buffer"
                },
                "param_2": {
                    "1": "pattern",
                    "18": "value",
                    "2": "fill_byte",
                    "3": "byte",
                    "4": "byte_value"
                },
                "param_3": {
                    "1": "n",
                    "10": "length",
                    "15": "size",
                    "3": "count"
                },
                "param_3 & 0xc": {
                    "1": "remainder_count"
                },
                "param_3 & 3": {
                    "1": "final_count"
                },
                "param_3 - 0x10 & 0xfffffff0": {
                    "1": "aligned_count"
                },
                "puVar1": {
                    "1": "dst_ptr",
                    "17": "dest_ptr",
                    "2": "current_pointer",
                    "3": "buffer_ptr"
                },
                "puVar2": {
                    "1": "temp_pointer",
                    "2": "source_ptr",
                    "3": "ptr",
                    "5": "temp_ptr"
                },
                "uVar3": {
                    "1": "remainder",
                    "14": "remaining_size",
                    "5": "remaining",
                    "8": "remaining_length"
                },
                "uVar4": {
                    "1": "byte4",
                    "2": "concat_value",
                    "3": "byte_pattern",
                    "5": "fill_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005814",
                "FUN_08004d7c",
                "FUN_080004ac",
                "FUN_080005b4",
                "FUN_08002f24",
                "FUN_08001994",
                "FUN_080002f0",
                "FUN_08001ddc",
                "FUN_080079c0",
                "FUN_080024c4"
            ],
            "code": "\nvoid fill_memory_0800b430(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *temp_ptr;\n  uint remaining_size;\n  undefined4 fill_value;\n  bool is_size_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    remaining_size = size - 1;\n    dest_ptr = dest;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      size = remaining_size;\n      if (((uint)dest & 3) == 0) break;\n      is_size_zero = remaining_size == 0;\n      remaining_size = remaining_size - 1;\n      dest_ptr = dest;\n      if (is_size_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    fill_value = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    if (0xf < size) {\n      dest_ptr = dest + 4;\n      do {\n        dest_ptr[-4] = fill_value;\n        dest_ptr[-3] = fill_value;\n        dest_ptr[-2] = fill_value;\n        dest_ptr[-1] = fill_value;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x20));\n      remaining_size = size & 0xc;\n      dest = dest + ((size - 0x10 >> 4) + 1) * 4;\n      size = size & 0xf;\n      if (remaining_size == 0) goto end_of_loop;\n    }\n    dest_ptr = (undefined4 *)((size - 4 & 0xfffffffc) + 4 + (int)dest);\n    do {\n      temp_ptr = dest + 1;\n      *dest = fill_value;\n      dest = temp_ptr;\n    } while (dest_ptr != temp_ptr);\n    size = size & 3;\n    dest = dest_ptr;\n  }\nend_of_loop:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      temp_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = temp_ptr;\n    } while ((undefined4 *)(size + (int)dest) != temp_ptr);\n  }\n  return;\n}\n\n",
            "current_name": "fill_memory_0800b430",
            "entrypoint": "0x0800b430",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b430": "fill_memory_0800b430",
                "bVar5": "is_size_zero",
                "joined_r0x0800b4a8": "end_of_loop",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "temp_ptr",
                "uVar3": "remaining_size",
                "uVar4": "fill_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b4d0": {
            "called": [
                "FUN_0800b524"
            ],
            "calling": [
                "FUN_0800b3e8"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b4d4) */\n\nvoid FUNC_0800b4d0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800b4d0",
            "entrypoint": "0x0800b4d0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800b4d0": "FUNC_0800b4d0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800b51c": {
            "called": [],
            "calling": [
                "FUN_0800b524"
            ],
            "code": "\nvoid FUNC_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800b51c",
            "entrypoint": "0x0800b51c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800b51c": "FUNC_0800b51c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800b520": {
            "called": [],
            "calling": [
                "FUN_0800b524"
            ],
            "code": "\nvoid FUNC_0800b520(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800b520",
            "entrypoint": "0x0800b520",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800b520": "FUNC_0800b520"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800b524": {
            "additional_data": {
                "FUNC_0800b51c": {
                    "1": "initialize_database"
                },
                "FUNC_0800b520": {
                    "1": "finalize_database"
                },
                "FUN_0800b524": {
                    "1": "update_parameters",
                    "7": "update_data",
                    "8": "process_data"
                },
                "param_1": {
                    "1": "data_flag",
                    "12": "type",
                    "2": "operation",
                    "5": "input_type"
                },
                "param_2": {
                    "1": "new_data",
                    "10": "value",
                    "12": "data",
                    "2": "param2"
                },
                "param_3": {
                    "1": "arg2",
                    "11": "value1",
                    "2": "data_1",
                    "3": "param3"
                },
                "param_4": {
                    "1": "data_value",
                    "11": "value2",
                    "2": "new_param2",
                    "3": "data2"
                },
                "puVar1": {
                    "1": "current_collection",
                    "11": "data_ptr",
                    "2": "current_data",
                    "3": "data_pointer",
                    "7": "ptr"
                },
                "uVar2": {
                    "14": "return_value",
                    "17": "result"
                },
                "uVar3": {
                    "1": "bit",
                    "22": "bit_mask",
                    "3": "bit_flag"
                },
                "uVar4": {
                    "1": "data_counter",
                    "11": "count",
                    "2": "current_size",
                    "3": "counter",
                    "4": "index"
                }
            },
            "called": [
                "FUN_0800b51c",
                "FUN_0800b520"
            ],
            "calling": [
                "FUN_0800b4d0"
            ],
            "code": "\nundefined4 process_data_0800b524(int type,undefined4 data,undefined4 value1,undefined4 value2)\n\n{\n  undefined *data_ptr;\n  undefined4 result;\n  uint bit_mask;\n  uint count;\n  \n  FUNC_0800b51c(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  data_ptr = DAT_20000168;\n  count = *(uint *)(DAT_20000168 + 4);\n  if ((int)count < 0x20) {\n    if (type != 0) {\n      *(undefined4 *)(DAT_20000168 + count * 4 + 0x88) = value1;\n      bit_mask = 1 << (count & 0xff);\n      *(uint *)(data_ptr + 0x188) = *(uint *)(data_ptr + 0x188) | bit_mask;\n      *(undefined4 *)(data_ptr + count * 4 + 0x108) = value2;\n      if (type == 2) {\n        *(uint *)(data_ptr + 0x18c) = bit_mask | *(uint *)(data_ptr + 0x18c);\n      }\n    }\n    result = DAT_20000448;\n    *(uint *)(data_ptr + 4) = count + 1;\n    *(undefined4 *)(data_ptr + (count + 2) * 4) = data;\n    FUNC_0800b520(result);\n    result = 0;\n  }\n  else {\n    FUNC_0800b520(DAT_20000448);\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_0800b524",
            "entrypoint": "0x0800b524",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b524": "process_data_0800b524",
                "param_1": "type",
                "param_2": "data",
                "param_3": "value1",
                "param_4": "value2",
                "puVar1": "data_ptr",
                "uVar2": "result",
                "uVar3": "bit_mask",
                "uVar4": "count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b5b0": {
            "called": [],
            "calling": [
                "FUN_08000188",
                "FUN_080001ac",
                "FUN_0800b3e8"
            ],
            "code": "\nvoid FUNC_0800b5b0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800b5b0",
            "entrypoint": "0x0800b5b0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800b5b0": "FUNC_0800b5b0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800b5bc": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800b5bc",
            "entrypoint": "0x0800b5bc",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800b5bc": "FUNC_0800b5bc"
            },
            "skipped": true,
            "tags": []
        },
        "entry": {
            "called": [
                "FUN_0800756c",
                "FUN_08007540",
                "FUN_0800b3e8"
            ],
            "calling": [],
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_2000044c; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800c0c0);\n  }\n  for (puVar2 = &DAT_2000044c; puVar2 < &DAT_20000f20; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  FUN_0800756c();\n  FUN_0800b3e8();\n  UNRECOVERED_JUMPTABLE = (code *)0x80092fa;\n  FUN_08007540();\n                    /* WARNING: Could not recover jumptable at 0x080092fa. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x080092c4",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_08009990": {
            "additional_data": {
                "0": {
                    "1": "zero_value"
                },
                "0x33145c07": {
                    "1": "constant_1"
                },
                "0x3ca1a626": {
                    "1": "constant_2"
                },
                "0x400921fb": {
                    "1": "constant_3"
                },
                "140361102520024": {
                    "1": "constant_4"
                },
                "DAT_0800be68": {
                    "1": "constant_values_1"
                },
                "DAT_0800be80": {
                    "1": "special_cases2"
                },
                "FUNC_0800b2cc": {
                    "1": "perform_operation"
                },
                "FUN_080082d0": {
                    "1": "perform_operation_2"
                },
                "FUN_080082d4": {
                    "1": "handle_invalid_input"
                },
                "FUN_08008894": {
                    "1": "perform_operation"
                },
                "FUN_0800af78": {
                    "1": "calculate_result",
                    "2": "get_result"
                },
                "FUN_0800b2cc": {
                    "1": "compute_2"
                },
                "FUN_0800bafc": {
                    "1": "normalize_result"
                },
                "SCARRY4": {
                    "1": "subtract_overflow_check",
                    "2": "is_overflow"
                },
                "iVar1": {
                    "1": "temp_var1",
                    "17": "difference",
                    "2": "temp1",
                    "6": "temp_var_1"
                },
                "param_1": {
                    "1": "input_param",
                    "17": "input_1",
                    "3": "input_param_1",
                    "8": "input1"
                },
                "param_2": {
                    "1": "input_value_2",
                    "17": "input_2",
                    "3": "input_param_2",
                    "8": "input2"
                },
                "param_3": {
                    "1": "input_value_3",
                    "17": "input_3",
                    "3": "input_param_3",
                    "8": "input3"
                },
                "param_4": {
                    "1": "input_value_4",
                    "17": "input_4",
                    "3": "input_param_4",
                    "8": "input4"
                },
                "thunk_FUN_08009990": {
                    "1": "evaluate_parameters",
                    "21": "calculate_result",
                    "3": "compute_result"
                },
                "uVar2": {
                    "1": "result_high_bits",
                    "2": "result",
                    "3": "result_upper",
                    "5": "temp_var_2"
                },
                "uVar3": {
                    "1": "result_2",
                    "2": "shifted_bits",
                    "3": "shifted_value",
                    "5": "temp_var_3"
                },
                "uVar4": {
                    "1": "positive_param4",
                    "2": "positive_input_4",
                    "4": "temp_var_4"
                },
                "uVar5": {
                    "1": "filtered_value2",
                    "2": "positive_input_2",
                    "4": "temp_var_5"
                },
                "uVar6": {
                    "1": "combined_result",
                    "11": "result",
                    "4": "temp_var_6",
                    "5": "temp_result"
                }
            },
            "called": [
                "FUN_08009990"
            ],
            "calling": [
                "FUN_08001f00"
            ],
            "code": "\nuint calculate_result_thunk_08009990(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int difference;\n  undefined4 temp_var_2;\n  uint temp_var_3;\n  uint temp_var_4;\n  uint temp_var_5;\n  undefined8 result;\n  \n  temp_var_4 = input_4 & 0x7fffffff;\n  if (((temp_var_4 | (-input_3 | input_3) >> 0x1f) < 0x7ff00001) &&\n     (temp_var_5 = input_2 & 0x7fffffff, (temp_var_5 | (-input_1 | input_1) >> 0x1f) < 0x7ff00001)) {\n    if ((input_4 + 0xc0100000 | input_3) == 0) {\n      temp_var_4 = FUN_0800af78();\n      return temp_var_4;\n    }\n    temp_var_3 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n    if ((temp_var_5 | input_1) == 0) {\n      if (temp_var_3 == 2) {\n        input_1 = 0x54442d18;\n      }\n      else if (temp_var_3 == 3) {\n        input_1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((temp_var_4 | input_3) != 0) {\n        if (temp_var_4 == 0x7ff00000) {\n          temp_var_3 = temp_var_3 - 1;\n          if (temp_var_5 == 0x7ff00000) {\n            if (temp_var_3 < 3) {\n              return *(uint *)(&DAT_0800be68 + temp_var_3 * 8);\n            }\n            return 0x54442d18;\n          }\n          if (temp_var_3 < 3) {\n            return *(uint *)(&DAT_0800be80 + temp_var_3 * 8);\n          }\n          return 0;\n        }\n        if (temp_var_5 != 0x7ff00000) {\n          difference = (int)(temp_var_5 - temp_var_4) >> 0x14;\n          if ((int)(temp_var_5 - temp_var_4) < 0x3d00000) {\n            if (((int)input_4 < 0) && (difference + 0x3c < 0 != is_overflow(difference,0x3c))) {\n              result = 0;\n            }\n            else {\n              FUN_08008894(input_1,input_2,input_3,input_4,input_4);\n              FUNC_0800b2cc();\n              result = FUN_0800af78();\n            }\n          }\n          else {\n            result = 0x3ff921fb54442d18;\n          }\n          temp_var_2 = (undefined4)((ulonglong)result >> 0x20);\n          temp_var_4 = (uint)result;\n          if (temp_var_3 == 1) {\n            return temp_var_4;\n          }\n          if (temp_var_3 == 2) {\n            result = FUN_080082d0(temp_var_4,temp_var_2,0x33145c07,0x3ca1a626);\n            temp_var_4 = FUN_080082d0(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n            return temp_var_4;\n          }\n          if (temp_var_3 == 0) {\n            return temp_var_4;\n          }\n          result = FUN_080082d0(temp_var_4,temp_var_2,0x33145c07,0x3ca1a626);\n          temp_var_4 = FUN_080082d0((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n          return temp_var_4;\n        }\n      }\n      if ((int)input_2 < 0) {\n        input_1 = 0x54442d18;\n      }\n      else {\n        input_1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    input_1 = FUN_080082d4(input_3,input_4,input_1,input_2);\n  }\n  return input_1;\n}\n\n",
            "current_name": "calculate_result_thunk_08009990",
            "entrypoint": "0x08009818",
            "imported": false,
            "improved": true,
            "renaming": {
                "SCARRY4": "is_overflow",
                "iVar1": "difference",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "thunk_FUN_08009990": "calculate_result_thunk_08009990",
                "uVar2": "temp_var_2",
                "uVar3": "temp_var_3",
                "uVar4": "temp_var_4",
                "uVar5": "temp_var_5",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_08000188",
            "FUN_080001ac",
            "FUN_080001f8",
            "FUN_08000210",
            "FUN_08000220",
            "FUN_08000268",
            "FUN_080002a0",
            "FUN_080002b6",
            "FUN_080002f0",
            "FUN_08000310",
            "FUN_08000340",
            "FUN_08000374",
            "FUN_080003ec",
            "FUN_08000478",
            "FUN_080004ac",
            "FUN_080004fc",
            "FUN_0800056c",
            "FUN_080005b4",
            "FUN_0800184c",
            "FUN_080018cc",
            "FUN_080018fc",
            "FUN_0800192c",
            "FUN_0800195c",
            "FUN_08001994",
            "FUN_08001d4c",
            "FUN_08001ddc",
            "FUN_08001e98",
            "FUN_08001f00",
            "FUN_08002408",
            "FUN_080024c4",
            "FUN_080025e8",
            "FUN_08002638",
            "FUN_0800283a",
            "FUN_08002870",
            "FUN_08002896",
            "FUN_080028bc",
            "FUN_08002908",
            "FUN_08002978",
            "FUN_080029d8",
            "FUN_08002a94",
            "FUN_08002afc",
            "FUN_08002ba8",
            "FUN_08002c18",
            "FUN_08002e08",
            "FUN_08002edc",
            "FUN_08002ef0",
            "FUN_08002f24",
            "FUN_08002f40",
            "FUN_08002f74",
            "FUN_08002fac",
            "FUN_08002fd4",
            "FUN_08003004",
            "FUN_080035ec",
            "FUN_08003618",
            "FUN_0800369c",
            "FUN_080036c6",
            "FUN_080036f0",
            "FUN_08003740",
            "FUN_0800375c",
            "FUN_08003778",
            "FUN_080037fc",
            "FUN_08003826",
            "FUN_08003980",
            "FUN_080039a0",
            "FUN_080039bc",
            "FUN_08003a18",
            "FUN_08003a74",
            "FUN_08003b98",
            "FUN_08003f34",
            "FUN_08004030",
            "FUN_08004148",
            "FUN_080041a0",
            "FUN_08004228",
            "FUN_0800423c",
            "FUN_08004250",
            "FUN_080044e8",
            "FUN_080046d0",
            "FUN_08004900",
            "FUN_08004940",
            "FUN_08004bc0",
            "FUN_08004bf4",
            "FUN_08004c2a",
            "FUN_08004c48",
            "FUN_08004d2c",
            "FUN_08004d7c",
            "FUN_08004dd2",
            "FUN_08004e30",
            "FUN_080051b4",
            "FUN_08005238",
            "FUN_08005250",
            "FUN_0800525c",
            "FUN_080052ac",
            "FUN_080052dc",
            "FUN_08005324",
            "FUN_08005360",
            "FUN_080053a0",
            "FUN_08005760",
            "FUN_08005778",
            "FUN_08005790",
            "FUN_080057e4",
            "FUN_08005814",
            "FUN_0800583c",
            "FUN_0800585c",
            "FUN_0800587c",
            "FUN_080058a0",
            "FUN_08005900",
            "FUN_0800597c",
            "FUN_08005984",
            "FUN_080059b4",
            "FUN_080059f8",
            "FUN_08005a68",
            "FUN_08005a84",
            "FUN_08005a98",
            "FUN_08005bdc",
            "FUN_08005c30",
            "FUN_08005cec",
            "FUN_0800618c",
            "FUN_0800640c",
            "FUN_080064ec",
            "FUN_08006628",
            "FUN_08006680",
            "FUN_080066cc",
            "FUN_08006950",
            "FUN_08006998",
            "FUN_080069b4",
            "FUN_080069e4",
            "FUN_08006a18",
            "FUN_08006a58",
            "FUN_08006a8c",
            "FUN_08006ac0",
            "FUN_08006b00",
            "FUN_08006b54",
            "FUN_08006ba0",
            "FUN_08006c04",
            "FUN_08006c70",
            "FUN_08006c9c",
            "FUN_08006ce0",
            "FUN_08006cf6",
            "FUN_08006d2e",
            "FUN_08006d4a",
            "FUN_08006d66",
            "FUN_08006d72",
            "FUN_08006d8a",
            "FUN_08006d98",
            "FUN_08006dc4",
            "FUN_08006de0",
            "FUN_08006dfe",
            "FUN_08006e1a",
            "FUN_08006e88",
            "FUN_0800733e",
            "FUN_0800738e",
            "FUN_080073d4",
            "FUN_08007402",
            "FUN_08007430",
            "FUN_08007436",
            "FUN_080074c8",
            "FUN_08007520",
            "FUN_08007540",
            "FUN_0800756c",
            "FUN_080076c8",
            "FUN_08007756",
            "FUN_0800778c",
            "FUN_08007854",
            "FUN_08007884",
            "FUN_080078f4",
            "FUN_08007930",
            "FUN_080079c0",
            "FUN_080079e0",
            "FUN_08007a10",
            "FUN_08007a70",
            "FUN_08007ad0",
            "FUN_08007b70",
            "FUN_08007bc2",
            "FUN_08007bf0",
            "FUN_08007c40",
            "FUN_08007c5e",
            "FUN_08007c7c",
            "FUN_08007d08",
            "FUN_08007da8",
            "FUN_08007e08",
            "FUN_08007e1c",
            "FUN_08007e58",
            "FUN_08007e84",
            "FUN_08007ea4",
            "FUN_08007f54",
            "FUN_08008190",
            "FUN_08008250",
            "FUN_0800826a",
            "FUN_08008286",
            "FUN_080082d0",
            "FUN_080082d4",
            "FUN_0800854c",
            "FUN_0800856c",
            "FUN_08008590",
            "FUN_08008640",
            "FUN_0800881c",
            "FUN_08008894",
            "FUN_08008a02",
            "FUN_08008a74",
            "FUN_08008af0",
            "FUN_08008b00",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_08008b4c",
            "FUN_08008b60",
            "FUN_08008b74",
            "FUN_08008ba0",
            "FUN_08008bf0",
            "FUN_08008c30",
            "FUN_08008cd8",
            "FUN_08008cdc",
            "FUN_08008e3c",
            "FUN_08008e44",
            "FUN_08008eec",
            "FUN_08009054",
            "FUN_0800919c",
            "FUN_080091fc",
            "FUN_08009204",
            "FUN_08009214",
            "FUN_08009228",
            "FUN_0800923c",
            "FUN_08009250",
            "FUN_08009264",
            "FUN_08009278",
            "FUN_08009318",
            "FUN_08009410",
            "FUN_080094c0",
            "FUN_080095b8",
            "FUN_08009654",
            "FUN_080096e8",
            "FUN_08009798",
            "thunk_FUN_08009990",
            "FUN_0800981c",
            "FUN_080098d0",
            "FUN_08009990",
            "FUN_08009b24",
            "FUN_08009d78",
            "FUN_0800a1bc",
            "FUN_0800a348",
            "FUN_0800a5a0",
            "FUN_0800adf0",
            "FUN_0800af78",
            "FUN_0800b2d4",
            "FUN_0800b2e0",
            "FUN_0800b2e8",
            "FUN_0800b3dc",
            "FUN_0800b3e8",
            "FUN_0800b430",
            "FUN_0800b524"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 938331
}