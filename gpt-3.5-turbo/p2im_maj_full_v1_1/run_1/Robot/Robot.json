{
    "functions": {
        "FUN_08000110": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "set_flag_if_needed"
                },
                "<original_parameter_1>": {
                    "1": "flag"
                },
                "<original_variable_1>": {
                    "1": "data"
                },
                "DAT_200009c8": {
                    "1": "flag_variable",
                    "15": "flag"
                },
                "FUN_08000110": {
                    "1": "initialize_data_if_needed",
                    "22": "initialize_flag",
                    "4": "set_flag_if_not_set"
                },
                "param_1": {
                    "1": "input_param",
                    "12": "input",
                    "13": "input_value",
                    "2": "input_parameter"
                }
            },
            "called": [
                "FUN_08009e68"
            ],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initialize_flag_08000110(undefined4 input_value)\n\n{\n  if ((char)DAT_200009c8 == '\\0') {\n    DAT_200009c8._0_1_ = '\\x01';\n  }\n  return input_value;\n}\n\n",
            "current_name": "initialize_flag_08000110",
            "entrypoint": "0x08000110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000134": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "concatenate_values"
                },
                "<param_1>": {
                    "1": "value1"
                },
                "<param_2>": {
                    "1": "value2"
                },
                "FUN_08000134": {
                    "1": "concatenate_and_merge",
                    "2": "concatenate_and_convert",
                    "3": "concatenate_parameters",
                    "4": "concatenate_params",
                    "5": "concatenate_integers",
                    "6": "concatenate_values"
                },
                "param_1": {
                    "1": "input1",
                    "2": "first_value",
                    "3": "value1",
                    "4": "first_param",
                    "5": "first_parameter"
                },
                "param_2": {
                    "1": "input_2",
                    "2": "second_value",
                    "3": "value2",
                    "4": "second_integer",
                    "5": "second_parameter"
                }
            },
            "called": [
                "FUN_08009e68"
            ],
            "calling": [
                "FUN_08005d20"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_values_08000134(undefined4 first_parameter,undefined4 second_parameter)\n\n{\n  return CONCAT44(second_parameter,first_parameter);\n}\n\n",
            "current_name": "concatenate_values_08000134",
            "entrypoint": "0x08000134",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000134": "concatenate_values_08000134",
                "param_1": "first_parameter",
                "param_2": "second_parameter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000158": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "<more_descriptive_function_name>"
                },
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                },
                "<original_parameter_name_2>": {
                    "1": "<new_parameter_name_2>"
                },
                "<original_parameter_name_3>": {
                    "1": "<new_parameter_name_3>"
                },
                "<original_parameter_name_4>": {
                    "1": "<new_parameter_name_4>"
                },
                "<original_variable_name_10>": {
                    "1": "<new_variable_name_10>"
                },
                "<original_variable_name_11>": {
                    "1": "<new_variable_name_11>"
                },
                "<original_variable_name_12>": {
                    "1": "<new_variable_name_12>"
                },
                "<original_variable_name_13>": {
                    "1": "<new_variable_name_13>"
                },
                "<original_variable_name_14>": {
                    "1": "<new_variable_name_14>"
                },
                "<original_variable_name_15>": {
                    "1": "<new_variable_name_15>"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_3>": {
                    "1": "<new_variable_name_3>"
                },
                "<original_variable_name_4>": {
                    "1": "<new_variable_name_4>"
                },
                "<original_variable_name_5>": {
                    "1": "<new_variable_name_5>"
                },
                "<original_variable_name_6>": {
                    "1": "<new_variable_name_6>"
                },
                "<original_variable_name_7>": {
                    "1": "<new_variable_name_7>"
                },
                "<original_variable_name_8>": {
                    "1": "<new_variable_name_8>"
                },
                "<original_variable_name_9>": {
                    "1": "<new_variable_name_9>"
                },
                "FUN_08000158": {
                    "1": "calculate_unsigned",
                    "6": "calculate_result"
                },
                "bVar13": {
                    "1": "is_equal",
                    "2": "is_true1",
                    "4": "is_zero",
                    "8": "flag1"
                },
                "bVar14": {
                    "1": "condition_2",
                    "2": "is_true2",
                    "4": "condition2",
                    "8": "flag2"
                },
                "bVar15": {
                    "1": "bool3",
                    "2": "flag2",
                    "4": "condition3",
                    "8": "flag3"
                },
                "bVar2": {
                    "1": "var2",
                    "3": "temp2",
                    "5": "carry"
                },
                "iVar1": {
                    "1": "shifted_value1",
                    "3": "temp1",
                    "4": "shift1"
                },
                "iVar8": {
                    "1": "shifted_input2_msb",
                    "2": "temp5",
                    "3": "temp8",
                    "4": "shift2",
                    "5": "temp6"
                },
                "iVar9": {
                    "1": "shifted_input3"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "a",
                    "22": "input1",
                    "3": "input_1"
                },
                "param_2": {
                    "1": "divisor",
                    "2": "b",
                    "22": "input2",
                    "3": "input_2"
                },
                "param_3": {
                    "1": "quotient_low",
                    "2": "c",
                    "21": "input3",
                    "3": "input_3"
                },
                "param_4": {
                    "1": "quotient_high",
                    "2": "d",
                    "21": "input4",
                    "3": "input_4"
                },
                "uVar10": {
                    "1": "temp4",
                    "2": "temp5",
                    "3": "result2"
                },
                "uVar11": {
                    "1": "difference",
                    "2": "diff",
                    "3": "temp9"
                },
                "uVar12": {
                    "1": "temp4",
                    "3": "result4"
                },
                "uVar13": {
                    "1": "temp_var1"
                },
                "uVar14": {
                    "1": "temp_var2"
                },
                "uVar15": {
                    "1": "temp_var3"
                },
                "uVar16": {
                    "1": "carry_carry"
                },
                "uVar17": {
                    "1": "overflow_carry"
                },
                "uVar18": {
                    "1": "carry_negative"
                },
                "uVar19": {
                    "1": "result1"
                },
                "uVar20": {
                    "1": "result2"
                },
                "uVar21": {
                    "1": "temp3"
                },
                "uVar22": {
                    "1": "temp4"
                },
                "uVar23": {
                    "1": "carry_bit"
                },
                "uVar24": {
                    "1": "result_shift"
                },
                "uVar25": {
                    "1": "temp_shift"
                },
                "uVar3": {
                    "1": "temp0",
                    "12": "temp1",
                    "3": "result"
                },
                "uVar4": {
                    "1": "result1",
                    "11": "temp2",
                    "2": "temp_2",
                    "3": "temp4"
                },
                "uVar5": {
                    "1": "quot_low",
                    "11": "temp3",
                    "2": "temp_3",
                    "3": "temp5",
                    "4": "temp2"
                },
                "uVar6": {
                    "1": "result_2",
                    "2": "result1",
                    "3": "temp3",
                    "8": "temp4"
                },
                "uVar7": {
                    "1": "param_4_2",
                    "2": "temp2",
                    "3": "temp4",
                    "8": "temp5"
                },
                "uVar8": {
                    "1": "sum_input1_input3_msb"
                },
                "uVar9": {
                    "1": "shifted_input2_divided",
                    "2": "temp4",
                    "3": "temp7"
                }
            },
            "called": [],
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005e9c",
                "FUN_08005838",
                "FUN_080079e8"
            ],
            "code": "\nulonglong calculate_result_08000158(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int temp6;\n  uint result1;\n  uint result2;\n  uint temp11;\n  uint temp12;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  temp4 = input4 ^ 0x80000000;\n  result1 = input2 << 1;\n  input4 = input4 << 1;\n  flag1 = ((input2 ^ temp4) & 0x7fffffff) == 0;\n  flag2 = flag1 && input1 == input3;\n  if (!flag1 || input1 != input3) {\n    flag2 = (result1 | input1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (input4 | input3) == 0;\n  }\n  temp6 = (int)result1 >> 0x15;\n  if (!flag2) {\n    flag2 = temp6 == -1;\n  }\n  shift1 = (int)input4 >> 0x15;\n  if (!flag2) {\n    flag2 = shift1 == -1;\n  }\n  if (flag2) {\n    if (temp6 == -1 || shift1 == -1) {\n      result1 = temp4;\n      temp11 = input3;\n      if (temp6 == -1) {\n        result1 = input2;\n        temp11 = input1;\n      }\n      if (temp6 != -1 || shift1 != -1) {\n        input3 = temp11;\n        temp4 = result1;\n      }\n      flag2 = (temp11 | result1 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (input3 | temp4 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = result1 == temp4;\n      }\n      if (!flag2) {\n        result1 = result1 | 0x80000;\n      }\n      return CONCAT44(result1,temp11);\n    }\n    if (((input2 ^ temp4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((result1 | input1) == 0) {\n        input1 = input3;\n        input2 = temp4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp4) {\n      return 0;\n    }\n    if (result1 >> 0x15 == 0) {\n      flag2 = (input1 & 0x80000000) != 0;\n      temp4 = input2 * 2 + (uint)flag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)flag2)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,input1 << 1);\n    }\n    if (result1 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  result1 = result1 >> 0x15;\n  input4 = input4 >> 0x15;\n  temp11 = input4 - result1;\n  flag2 = temp11 != 0;\n  if (input4 < result1) {\n    temp11 = -temp11;\n  }\n  result2 = input1;\n  temp5 = input2;\n  if (flag2 && result1 <= input4) {\n    result1 = result1 + temp11;\n    result2 = input3;\n    temp5 = temp4;\n    input3 = input1;\n    temp4 = input2;\n  }\n  if (0x36 < temp11) {\n    return CONCAT44(temp5,result2);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    flag2 = result2 != 0;\n    result2 = -result2;\n    temp2 = -temp2 - (uint)flag2;\n  }\n  temp5 = temp4 & 0xfffff | 0x100000;\n  if ((temp4 & 0x80000000) != 0) {\n    flag2 = input3 != 0;\n    input3 = -input3;\n    temp5 = -temp5 - (uint)flag2;\n  }\n  if (result1 == temp11) {\n    temp5 = temp5 ^ 0x100000;\n    if (result1 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      result1 = 1;\n    }\n    else {\n      temp11 = temp11 - 1;\n    }\n  }\n  temp4 = -temp11 + 0x20;\n  if ((int)temp11 < 0x21) {\n    temp12 = input3 << (temp4 & 0xff);\n    input3 = input3 >> (temp11 & 0xff);\n    temp1 = result2 + input3;\n    temp3 = temp5 << (temp4 & 0xff);\n    temp4 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(result2,input3) + ((int)temp5 >> (temp11 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    temp12 = temp5 << (-temp11 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp12 = temp12 | 2;\n    }\n    temp5 = (int)temp5 >> (temp11 - 0x20 & 0xff);\n    temp4 = result2 + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)CARRY4(result2,temp5);\n  }\n  input2 = temp2 & 0x80000000;\n  temp11 = temp2;\n  if ((int)temp2 < 0) {\n    flag2 = temp12 == 0;\n    temp12 = -temp12;\n    temp11 = -temp4;\n    temp4 = -(uint)!flag2 - temp4;\n    temp11 = -(uint)(flag2 <= temp11) - temp2;\n  }\n  if (0xfffff < temp11) {\n    result2 = result1 - 1;\n    if (0x1fffff < temp11) {\n      result2 = temp11 & 1;\n      temp11 = temp11 >> 1;\n      carry = (byte)temp4;\n      temp4 = (uint)(result2 != 0) << 0x1f | temp4 >> 1;\n      temp12 = (uint)(carry & 1) << 0x1f | temp12 >> 1;\n      result2 = result1;\n      if (0xffbfffff < result1 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    flag2 = 0x7fffffff < temp12;\n    if (temp12 == 0x80000000) {\n      flag2 = (temp4 & 1) != 0;\n    }\n    return CONCAT44(temp11 + result2 * 0x100000 + (uint)CARRY4(temp4,(uint)flag2) | input2,\n                    temp4 + flag2);\n  }\n  flag1 = (temp12 & 0x80000000) != 0;\n  temp12 = temp12 << 1;\n  result2 = temp4 * 2;\n  flag2 = CARRY4(temp4,temp4);\n  temp4 = temp4 * 2 + (uint)flag1;\n  temp11 = temp11 * 2 + (uint)(flag2 || CARRY4(result2,(uint)flag1));\n  result2 = result1 - 2;\n  if ((temp11 & 0x100000) != 0) goto LAB_08000268;\n  temp5 = temp4;\n  result1 = temp11;\n  if (temp11 == 0) {\n    temp5 = 0;\n    result1 = temp4;\n  }\n  temp6 = LZCOUNT(result1);\n  if (temp11 == 0) {\n    temp6 = temp6 + 0x20;\n  }\n  temp11 = temp6 - 0xb;\n  flag3 = SBORROW4(temp11,0x20);\n  temp4 = temp6 - 0x2b;\n  flag2 = (int)temp4 < 0;\n  flag1 = temp4 == 0;\n  if ((int)temp11 < 0x20) {\n    flag3 = SCARRY4(temp4,0xc);\n    temp6 = temp6 + -0x1f;\n    flag2 = temp6 < 0;\n    flag1 = temp6 == 0;\n    temp4 = temp11;\n    if (!flag1 && flag2 == flag3) {\n      temp5 = result1 << (temp11 & 0xff);\n      result1 = result1 >> (0xcU - temp6 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    temp12 = 0x20 - temp4;\n  }\n  result1 = result1 << (temp4 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    result1 = result1 | temp5 >> (temp12 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    temp5 = temp5 << (temp4 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)temp11 <= (int)result2) {\n    return CONCAT44(result1 + (result2 - temp11) * 0x100000 | input2,temp5);\n  }\n  temp4 = ~(result2 - temp11);\n  if ((int)temp4 < 0x1f) {\n    temp6 = temp4 - 0x13;\n    if (temp6 != 0 && temp6 < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp5 >> (0x20 - (0xcU - temp6) & 0xff) | result1 << (0xcU - temp6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(input2 | result1 >> (temp4 & 0xff),\n                    temp5 >> (temp4 & 0xff) | result1 << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp2,result1 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "calculate_result_08000158",
            "entrypoint": "0x08000158",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000158": "calculate_result_08000158",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3",
                "bVar2": "carry",
                "iVar1": "shift1",
                "iVar8": "temp6",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar10": "result2",
                "uVar11": "temp11",
                "uVar12": "temp12",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar9": "result1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800015c": {
            "additional_data": {
                "FUN_0800015c": {
                    "1": "reverse_bits",
                    "2": "perform_operation",
                    "4": "calculate_result"
                },
                "bVar13": {
                    "1": "is_negative_input2",
                    "2": "check1",
                    "3": "flag1",
                    "4": "is_zero",
                    "5": "is_equal"
                },
                "bVar13_bit_1": {
                    "1": "bit_b"
                },
                "bVar14": {
                    "1": "result",
                    "2": "check2",
                    "3": "flag2",
                    "6": "is_zero"
                },
                "bVar15": {
                    "1": "flag_3",
                    "2": "is_borrow",
                    "3": "is_carry"
                },
                "bVar2": {
                    "1": "bit_a",
                    "2": "carry_flag1",
                    "3": "carry_flag",
                    "7": "carry"
                },
                "flag_a": {
                    "1": "is_negative_a"
                },
                "flag_b": {
                    "1": "is_negative_b"
                },
                "flag_c": {
                    "1": "is_negative_c"
                },
                "flag_d": {
                    "1": "is_negative_d"
                },
                "iVar1": {
                    "1": "shift_amt1",
                    "2": "shifted_input2",
                    "8": "shift1"
                },
                "iVar6": {
                    "1": "temp4",
                    "2": "shift_amount_2",
                    "8": "shift2"
                },
                "param_1": {
                    "1": "input_a",
                    "15": "input1",
                    "2": "num1",
                    "3": "a",
                    "5": "input_1"
                },
                "param_1_res": {
                    "1": "result_b"
                },
                "param_2": {
                    "1": "second_param",
                    "15": "input2",
                    "2": "num2",
                    "3": "b",
                    "4": "input_2"
                },
                "param_2_res": {
                    "1": "result_a"
                },
                "param_3": {
                    "1": "third_param",
                    "15": "input3",
                    "2": "num3",
                    "3": "c",
                    "5": "input_3"
                },
                "param_4": {
                    "1": "input_value_4",
                    "15": "input4",
                    "2": "num4",
                    "3": "d",
                    "5": "input_4"
                },
                "result_1": {
                    "1": "u_var7"
                },
                "result_2": {
                    "1": "u_var5"
                },
                "uVar10": {
                    "1": "temp_var_6",
                    "3": "result2",
                    "4": "temp7",
                    "5": "difference"
                },
                "uVar10_minus_1": {
                    "1": "minus_one_a"
                },
                "uVar10_or_param_2": {
                    "1": "result_c"
                },
                "uVar10_shifted_minus_1": {
                    "1": "shifted_var_a"
                },
                "uVar11": {
                    "1": "temp4",
                    "2": "result",
                    "3": "temp1",
                    "4": "temp8"
                },
                "uVar11_carry": {
                    "1": "carry_bit_b"
                },
                "uVar11_shifted_minus_1": {
                    "1": "shifted_var_b"
                },
                "uVar11_shifted_plus_1": {
                    "1": "shifted_plus_one_b"
                },
                "uVar12": {
                    "1": "result4",
                    "2": "u_var12",
                    "3": "result",
                    "4": "temp9"
                },
                "uVar12_carry": {
                    "1": "carry_bit_a"
                },
                "uVar12_minus_1": {
                    "1": "minus_one_b"
                },
                "uVar12_shifted_minus_1": {
                    "1": "shifted_minus_one_b"
                },
                "uVar12_shifted_minus_1_bit_1": {
                    "1": "shifted_bit_b"
                },
                "uVar12_shifted_plus_1": {
                    "1": "shifted_plus_one_b"
                },
                "uVar15": {
                    "1": "temp_6"
                },
                "uVar16": {
                    "1": "masked_input_with_most_significant_bit_set"
                },
                "uVar17": {
                    "1": "masked_output_with_most_significant_bit_set"
                },
                "uVar18": {
                    "1": "shifted_input1"
                },
                "uVar19": {
                    "1": "shifted_input3"
                },
                "uVar2": {
                    "1": "sum_ad"
                },
                "uVar20": {
                    "1": "masked_input1"
                },
                "uVar21": {
                    "1": "masked_input3"
                },
                "uVar22": {
                    "1": "shifted_sum"
                },
                "uVar23": {
                    "1": "shifted_input1_with_carry"
                },
                "uVar24": {
                    "1": "shifted_sum_with_carry"
                },
                "uVar25": {
                    "1": "output1_with_carry"
                },
                "uVar26": {
                    "1": "is_less_than_zero"
                },
                "uVar27": {
                    "1": "temp4"
                },
                "uVar28": {
                    "1": "temp5"
                },
                "uVar3": {
                    "1": "temp_var1",
                    "11": "temp1",
                    "2": "result1"
                },
                "uVar4": {
                    "1": "var2",
                    "11": "temp2",
                    "2": "temp_2"
                },
                "uVar5": {
                    "1": "b",
                    "10": "temp3",
                    "2": "u_var5"
                },
                "uVar5_res": {
                    "1": "result_b"
                },
                "uVar5_shifted_minus_1": {
                    "1": "shifted_var_b"
                },
                "uVar5_shifted_minus_1_bit_1": {
                    "1": "shifted_bit_b"
                },
                "uVar6": {
                    "1": "sum_bc"
                },
                "uVar7": {
                    "1": "left_shifted_input1",
                    "2": "shifted_input_2",
                    "4": "temp4",
                    "8": "shifted_input2"
                },
                "uVar7_or_param_3": {
                    "1": "result_d"
                },
                "uVar7_res": {
                    "1": "result_a"
                },
                "uVar7_shifted_minus_1": {
                    "1": "shifted_minus_one_a"
                },
                "uVar8": {
                    "1": "result",
                    "2": "temp4",
                    "5": "temp5"
                },
                "uVar8_or_param_1": {
                    "1": "result_d"
                },
                "uVar8_shifted_minus_1": {
                    "1": "shifted_var_a"
                },
                "uVar8_shifted_plus_1": {
                    "1": "shifted_plus_one_a"
                },
                "uVar9": {
                    "1": "result_2",
                    "2": "result1",
                    "4": "temp6",
                    "6": "shifted_input4"
                },
                "uVar9_or_param_4": {
                    "1": "result_c"
                }
            },
            "called": [],
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005838",
                "FUN_080079e8"
            ],
            "code": "\nulonglong calculate_0800015c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift2;\n  uint shifted_input2;\n  uint temp5;\n  uint shifted_input4;\n  uint difference;\n  uint temp8;\n  uint temp9;\n  bool is_equal;\n  bool is_zero;\n  bool is_carry;\n  \n  shifted_input2 = input2 << 1;\n  shifted_input4 = input4 << 1;\n  is_equal = ((input2 ^ input4) & 0x7fffffff) == 0;\n  is_zero = is_equal && input1 == input3;\n  if (!is_equal || input1 != input3) {\n    is_zero = (shifted_input2 | input1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = (shifted_input4 | input3) == 0;\n  }\n  shift2 = (int)shifted_input2 >> 0x15;\n  if (!is_zero) {\n    is_zero = shift2 == -1;\n  }\n  shift1 = (int)shifted_input4 >> 0x15;\n  if (!is_zero) {\n    is_zero = shift1 == -1;\n  }\n  if (is_zero) {\n    if (shift2 == -1 || shift1 == -1) {\n      shifted_input4 = input4;\n      shifted_input2 = input3;\n      if (shift2 == -1) {\n        shifted_input4 = input2;\n        shifted_input2 = input1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input3 = shifted_input2;\n        input4 = shifted_input4;\n      }\n      is_zero = (shifted_input2 | shifted_input4 << 0xc) == 0;\n      if (is_zero) {\n        is_zero = (input3 | input4 << 0xc) == 0;\n      }\n      if (is_zero) {\n        is_zero = shifted_input4 == input4;\n      }\n      if (!is_zero) {\n        shifted_input4 = shifted_input4 | 0x80000;\n      }\n      return CONCAT44(shifted_input4,shifted_input2);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shifted_input2 | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (shifted_input2 >> 0x15 == 0) {\n      is_zero = (input1 & 0x80000000) != 0;\n      shifted_input4 = input2 * 2 + (uint)is_zero;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)is_zero)) {\n        shifted_input4 = shifted_input4 | 0x80000000;\n      }\n      return CONCAT44(shifted_input4,input1 << 1);\n    }\n    if (shifted_input2 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input2 = shifted_input2 >> 0x15;\n  shifted_input4 = shifted_input4 >> 0x15;\n  difference = shifted_input4 - shifted_input2;\n  is_zero = difference != 0;\n  if (shifted_input4 < shifted_input2) {\n    difference = -difference;\n  }\n  temp5 = input1;\n  temp3 = input2;\n  if (is_zero && shifted_input2 <= shifted_input4) {\n    shifted_input2 = shifted_input2 + difference;\n    temp5 = input3;\n    temp3 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(temp3,temp5);\n  }\n  shifted_input4 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    is_zero = temp5 != 0;\n    temp5 = -temp5;\n    shifted_input4 = -shifted_input4 - (uint)is_zero;\n  }\n  temp3 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    is_zero = input3 != 0;\n    input3 = -input3;\n    temp3 = -temp3 - (uint)is_zero;\n  }\n  if (shifted_input2 == difference) {\n    temp3 = temp3 ^ 0x100000;\n    if (shifted_input2 == 0) {\n      shifted_input4 = shifted_input4 ^ 0x100000;\n      shifted_input2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp9 = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    temp8 = input3 << (temp9 & 0xff);\n    input3 = input3 >> (difference & 0xff);\n    temp1 = temp5 + input3;\n    temp2 = temp3 << (temp9 & 0xff);\n    temp9 = temp1 + temp2;\n    shifted_input4 = shifted_input4 + CARRY4(temp5,input3) + ((int)temp3 >> (difference & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    temp8 = temp3 << (-difference + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp8 = temp8 | 2;\n    }\n    temp3 = (int)temp3 >> (difference - 0x20 & 0xff);\n    temp9 = temp5 + temp3;\n    shifted_input4 = shifted_input4 + ((int)temp3 >> 0x1f) + (uint)CARRY4(temp5,temp3);\n  }\n  input2 = shifted_input4 & 0x80000000;\n  difference = shifted_input4;\n  if ((int)shifted_input4 < 0) {\n    is_zero = temp8 == 0;\n    temp8 = -temp8;\n    difference = -temp9;\n    temp9 = -(uint)!is_zero - temp9;\n    difference = -(uint)(is_zero <= difference) - shifted_input4;\n  }\n  if (0xfffff < difference) {\n    temp5 = shifted_input2 - 1;\n    if (0x1fffff < difference) {\n      shifted_input4 = difference & 1;\n      difference = difference >> 1;\n      carry = (byte)temp9;\n      temp9 = (uint)(shifted_input4 != 0) << 0x1f | temp9 >> 1;\n      temp8 = (uint)(carry & 1) << 0x1f | temp8 >> 1;\n      temp5 = shifted_input2;\n      if (0xffbfffff < shifted_input2 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    is_zero = 0x7fffffff < temp8;\n    if (temp8 == 0x80000000) {\n      is_zero = (temp9 & 1) != 0;\n    }\n    return CONCAT44(difference + temp5 * 0x100000 + (uint)CARRY4(temp9,(uint)is_zero) | input2,\n                    temp9 + is_zero);\n  }\n  is_equal = (temp8 & 0x80000000) != 0;\n  temp8 = temp8 << 1;\n  temp5 = temp9 * 2;\n  is_zero = CARRY4(temp9,temp9);\n  temp9 = temp9 * 2 + (uint)is_equal;\n  difference = difference * 2 + (uint)(is_zero || CARRY4(temp5,(uint)is_equal));\n  temp5 = shifted_input2 - 2;\n  if ((difference & 0x100000) != 0) goto LAB_08000268;\n  temp3 = temp9;\n  shifted_input2 = difference;\n  if (difference == 0) {\n    temp3 = 0;\n    shifted_input2 = temp9;\n  }\n  shift2 = LZCOUNT(shifted_input2);\n  if (difference == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  temp9 = shift2 - 0xb;\n  is_carry = SBORROW4(temp9,0x20);\n  difference = shift2 - 0x2b;\n  is_zero = (int)difference < 0;\n  is_equal = difference == 0;\n  if ((int)temp9 < 0x20) {\n    is_carry = SCARRY4(difference,0xc);\n    shift2 = shift2 + -0x1f;\n    is_zero = shift2 < 0;\n    is_equal = shift2 == 0;\n    difference = temp9;\n    if (!is_equal && is_zero == is_carry) {\n      temp3 = shifted_input2 << (temp9 & 0xff);\n      shifted_input2 = shifted_input2 >> (0xcU - shift2 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_equal || is_zero != is_carry) {\n    temp8 = 0x20 - difference;\n  }\n  shifted_input2 = shifted_input2 << (difference & 0xff);\n  if (is_equal || is_zero != is_carry) {\n    shifted_input2 = shifted_input2 | temp3 >> (temp8 & 0xff);\n  }\n  if (is_equal || is_zero != is_carry) {\n    temp3 = temp3 << (difference & 0xff);\n  }\nLAB_080002e0:\n  if ((int)temp9 <= (int)temp5) {\n    return CONCAT44(shifted_input2 + (temp5 - temp9) * 0x100000 | input2,temp3);\n  }\n  difference = ~(temp5 - temp9);\n  if ((int)difference < 0x1f) {\n    shift2 = difference - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(difference - 0x1f,0xc)) {\n      return CONCAT44(shifted_input4,temp3 >> (0x20 - (0xcU - shift2) & 0xff) | shifted_input2 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference = difference + 1;\n    return CONCAT44(input2 | shifted_input2 >> (difference & 0xff),\n                    temp3 >> (difference & 0xff) | shifted_input2 << (0x20 - difference & 0xff));\n  }\n  return CONCAT44(shifted_input4,shifted_input2 >> (difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "calculate_0800015c",
            "entrypoint": "0x0800015c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800015c": "calculate_0800015c",
                "bVar13": "is_equal",
                "bVar14": "is_zero",
                "bVar15": "is_carry",
                "bVar2": "carry",
                "iVar1": "shift1",
                "iVar6": "shift2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar10": "difference",
                "uVar11": "temp8",
                "uVar12": "temp9",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar7": "shifted_input2",
                "uVar8": "temp5",
                "uVar9": "shifted_input4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080003d4": {
            "additional_data": {
                "(uVar1 >> (0x20 - (0xcU - iVar3) & 0xff) | param_1 << (0xcU - iVar3 & 0xff))": {
                    "1": "combine3"
                },
                "(uVar2 - 0x13) == 0 || (uVar2 - 0x1f) < 0 != SCARRY4(uVar2 - 0x1f,0xc)": {
                    "1": "check1_cond"
                },
                "0": {
                    "1": "zero_value"
                },
                "0U": {
                    "1": "dummy_value",
                    "2": "zero"
                },
                "0x13": {
                    "1": "shift_offset"
                },
                "0x15": {
                    "1": "trailing_zeros"
                },
                "0x1e": {
                    "1": "max_shift2"
                },
                "0x1f": {
                    "1": "offset2"
                },
                "0x20": {
                    "1": "bitwidth_32"
                },
                "0x20 - (0xcU - iVar3)": {
                    "1": "inverse_bit_count2"
                },
                "0x20 - uVar2": {
                    "1": "remaining_shift"
                },
                "0x432": {
                    "1": "magic_number"
                },
                "0x433": {
                    "1": "shift_threshold"
                },
                "0xc": {
                    "1": "offset"
                },
                "0xcU": {
                    "1": "subtraction_amount"
                },
                "0xcU - (iVar3 + 1) & 0xff": {
                    "1": "shift_right"
                },
                "0xcU - iVar3": {
                    "1": "inverse_bit_count"
                },
                "<original_function_name>": {
                    "1": "extract_bits"
                },
                "CONCAT44": {
                    "1": "concat_values",
                    "3": "concatenate"
                },
                "CONCAT44(param_1 + (0x432 - uVar4) * 0x100000,uVar1)": {
                    "1": "combine1"
                },
                "CONCAT44(param_1 >> (uVar2 & 0xff),uVar1 >> (uVar2 & 0xff) | param_1 << (0x20 - uVar2 & 0xff))": {
                    "1": "combine2"
                },
                "DAT_": {
                    "1": ""
                },
                "FUN_080003d4": {
                    "1": "bitwise_shift_function",
                    "10": "reverse_bits",
                    "2": "bitwise_shift",
                    "3": "shift_and_concatenate"
                },
                "LAB_080002e0": {
                    "1": "shift_operations",
                    "2": "bitwise_operations"
                },
                "LZCOUNT": {
                    "1": "leading_zeros_count"
                },
                "PTR_": {
                    "1": ""
                },
                "SBORROW4": {
                    "1": "signed_borrow_check"
                },
                "SCARRY4": {
                    "1": "signed_overflow_check"
                },
                "bVar5": {
                    "1": "is_shift_negative",
                    "2": "is_negative_shift",
                    "22": "is_negative"
                },
                "bVar6": {
                    "1": "is_equal_to_zero",
                    "2": "is_zero_shift",
                    "23": "is_zero"
                },
                "bVar7": {
                    "1": "flag_carry",
                    "2": "carry_flag",
                    "5": "is_borrow",
                    "6": "is_overflow"
                },
                "iVar3": {
                    "1": "leading_zero_count",
                    "11": "leading_zeros",
                    "4": "lzcount_result",
                    "6": "count",
                    "7": "bit_count"
                },
                "in_r12": {
                    "1": "inverted_shift_amount",
                    "19": "remaining_bits",
                    "2": "mask",
                    "3": "temp"
                },
                "newParam1": {
                    "1": "new_input"
                },
                "newVar1": {
                    "1": "new_result1"
                },
                "newVar2": {
                    "1": "new_result2"
                },
                "newVar3": {
                    "1": "new_count"
                },
                "newVar4": {
                    "1": "new_shift"
                },
                "newVar5": {
                    "1": "new_is_negative"
                },
                "newVar6": {
                    "1": "new_is_zero"
                },
                "newVar7": {
                    "1": "new_carry"
                },
                "param_1": {
                    "1": "input_val",
                    "27": "input",
                    "3": "input_value"
                },
                "param_1 << uVar4": {
                    "1": "shift_left"
                },
                "uVar1": {
                    "1": "result_upper",
                    "2": "upper_bits",
                    "3": "shifted_result",
                    "4": "result",
                    "6": "result1"
                },
                "uVar1 = 0 << (uVar2 & 0xff)": {
                    "1": "reset_result1"
                },
                "uVar2": {
                    "1": "shift_amount1",
                    "10": "shift_amount",
                    "2": "trailing_zeros",
                    "3": "shift",
                    "5": "result2"
                },
                "uVar2 - 0x1f": {
                    "1": "shift"
                },
                "uVar4": {
                    "1": "shift",
                    "13": "shift_amount",
                    "2": "total_bits"
                },
                "~": {
                    "1": "bitwise_complement"
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nulonglong reverse_bits_080003d4(uint input)\n\n{\n  uint result1;\n  uint shift_amount;\n  int leading_zeros;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_overflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result1 = 0;\n  leading_zeros = leading_zeros_count(input);\n  shift_amount = leading_zeros + 0x15;\n  is_overflow = signed_borrow_check(shift_amount,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (shift_amount < 0x20) {\n    is_overflow = is_carry(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = shift_amount;\n    if (!is_zero && is_overflow == false) {\n      result1 = input << shift_amount;\n      input = input >> (subtraction_amount - (leading_zeros + 1) & 0xff);\n      goto bitwise_operations;\n    }\n  }\n  if (is_zero || is_negative != is_overflow) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  input = input << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_overflow) {\n    input = input | zero >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_overflow) {\n    result1 = 0 << (shift_amount & 0xff);\n  }\nbitwise_operations:\n  if (shift_amount < 0x433) {\n    return concatenate(input + (0x432 - shift_amount) * 0x100000,result1);\n  }\n  shift_amount = bitwise_complement(0x432 - shift_amount);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(input >> (shift_amount - 0x1f & 0xff));\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != is_carry(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return concatenate(input >> (shift_amount & 0xff),\n                    result1 >> (shift_amount & 0xff) | input << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(result1 >> (0x20 - (subtraction_amount - leading_zeros) & 0xff) | input << (subtraction_amount - leading_zeros & 0xff));\n}\n\n",
            "current_name": "reverse_bits_080003d4",
            "entrypoint": "0x080003d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "0U": "zero",
                "0xcU": "subtraction_amount",
                "CONCAT44": "concatenate",
                "FUN_080003d4": "reverse_bits_080003d4",
                "LAB_080002e0": "bitwise_operations",
                "LZCOUNT": "leading_zeros_count",
                "SBORROW4": "signed_borrow_check",
                "SCARRY4": "is_carry",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_overflow",
                "iVar3": "leading_zeros",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "uVar1": "result1",
                "uVar2": "shift_amount",
                "uVar4": "shift_amount",
                "~": "bitwise_complement"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080003f4": {
            "additional_data": {
                "0x15": {
                    "1": "fixed_shift_amount"
                },
                "0x1e": {
                    "1": "max_remainder"
                },
                "0x20": {
                    "1": "bits_in_uint"
                },
                "0x432": {
                    "1": "max_adjusted_count"
                },
                "0x433": {
                    "1": "max_shift"
                },
                "0x80000000": {
                    "1": "min_int"
                },
                "0x80000000ffffffff": {
                    "1": "int_mask"
                },
                "0xb": {
                    "1": "fixed_offset"
                },
                "0xc": {
                    "1": "min_shift"
                },
                "CONCAT44": {
                    "4": "concatenate"
                },
                "FUN_080003f4": {
                    "1": "reverse_bit_rotation",
                    "13": "reverse_bits",
                    "2": "bitwise_shift"
                },
                "LAB_080002e0": {
                    "1": "shift_and_return"
                },
                "LZCOUNT": {
                    "1": "leading_zeros_count"
                },
                "SCARRY4": {
                    "1": "signed_addition_carry"
                },
                "bVar7": {
                    "1": "has_negative_shift",
                    "15": "is_negative",
                    "2": "is_negative_shift"
                },
                "bVar8": {
                    "1": "shift_amount_zero",
                    "14": "is_zero",
                    "2": "zero_shift",
                    "6": "is_zero_shift"
                },
                "bVar9": {
                    "1": "requires_shift",
                    "2": "is_borrow",
                    "3": "carry",
                    "4": "overflow",
                    "5": "is_carry",
                    "6": "carry_flag"
                },
                "iVar4": {
                    "1": "temp2",
                    "2": "bit_count",
                    "23": "leading_zeros",
                    "3": "count"
                },
                "iVar4_new": {
                    "1": "shifted_lz"
                },
                "in_r12": {
                    "1": "constant",
                    "2": "mask",
                    "22": "remaining_bits",
                    "3": "remainder"
                },
                "in_r12_new": {
                    "1": "remaining_shift"
                },
                "param_1": {
                    "1": "number",
                    "27": "input"
                },
                "uVar1": {
                    "1": "shifted_num",
                    "2": "bit_count",
                    "3": "result",
                    "4": "count"
                },
                "uVar1_final": {
                    "1": "result_high"
                },
                "uVar1_new": {
                    "1": "leading_ones"
                },
                "uVar2": {
                    "1": "absolute_num",
                    "16": "abs_input",
                    "4": "abs_value"
                },
                "uVar2_final": {
                    "1": "result_low"
                },
                "uVar2_new": {
                    "1": "shifted_input"
                },
                "uVar2_temp": {
                    "1": "bit_pattern"
                },
                "uVar3": {
                    "1": "num_bits",
                    "19": "shift_amount",
                    "2": "shift_count",
                    "5": "shift"
                },
                "uVar3_new": {
                    "1": "shifted_amount"
                },
                "uVar3_temp": {
                    "1": "shift_amount"
                },
                "uVar5": {
                    "1": "adjusted_shift_amount",
                    "2": "threshold",
                    "3": "final_shift",
                    "4": "adjusted_count",
                    "6": "total_bits"
                },
                "uVar6": {
                    "1": "input_sign",
                    "18": "sign_bit",
                    "2": "sign_mask",
                    "4": "is_negative"
                },
                "uVar6_new": {
                    "1": "expanded_bit"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "code": "\nulonglong reverse_bits_080003f4(uint input)\n\n{\n  uint count;\n  uint abs_input;\n  uint shift_amount;\n  int leading_zeros;\n  uint total_bits;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool carry_flag;\n  \n  if (input == 0) {\n    return 0;\n  }\n  sign_bit = input & 0x80000000;\n  abs_input = input;\n  if ((int)sign_bit < 0) {\n    abs_input = -input;\n  }\n  count = 0;\n  leading_zeros = leading_zeros_count(abs_input);\n  total_bits = leading_zeros + 0x15;\n  carry_flag = SBORROW4(total_bits,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (total_bits < 0x20) {\n    carry_flag = signed_addition_carry(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = total_bits;\n    if (!is_zero && carry_flag == false) {\n      count = abs_input << total_bits;\n      abs_input = abs_input >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto final_calculation;\n    }\n  }\n  if (is_zero || is_negative != carry_flag) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  abs_input = abs_input << (shift_amount & 0xff);\n  if (is_zero || is_negative != carry_flag) {\n    abs_input = abs_input | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != carry_flag) {\n    count = 0 << (shift_amount & 0xff);\n  }\nfinal_calculation:\n  if (total_bits < 0x433) {\n    return concatenate(abs_input + (0x432 - total_bits) * 0x100000 | sign_bit,count);\n  }\n  shift_amount = ~(0x432 - total_bits);\n  if (0x1e < (int)shift_amount) {\n    return concatenate(input,abs_input >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != signed_addition_carry(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return concatenate(sign_bit | abs_input >> (shift_amount & 0xff),\n                    count >> (shift_amount & 0xff) | abs_input << (0x20 - shift_amount & 0xff));\n  }\n  return concatenate(input,count >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_input << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_bits_080003f4",
            "entrypoint": "0x080003f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate",
                "FUN_080003f4": "reverse_bits_080003f4",
                "LAB_080002e0": "final_calculation",
                "LZCOUNT": "leading_zeros_count",
                "SCARRY4": "signed_addition_carry",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "carry_flag",
                "iVar4": "leading_zeros",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "uVar1": "count",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "uVar5": "total_bits",
                "uVar6": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000418": {
            "additional_data": {
                "FUN_08000418": {
                    "1": "extract_bits",
                    "19": "reverse_bits",
                    "2": "bitwise_operation"
                },
                "LZCOUNT": {
                    "1": "leading_zero_count"
                },
                "SBORROW4": {
                    "1": "subtract_borrow"
                },
                "SCARRY4": {
                    "1": "subtract_carry"
                },
                "bVar10": {
                    "1": "is_negative_case",
                    "2": "condition3",
                    "3": "is_shifted",
                    "4": "is_carry",
                    "6": "is_negative"
                },
                "bVar8": {
                    "1": "is_shifted",
                    "2": "condition1",
                    "8": "is_negative",
                    "9": "is_zero"
                },
                "bVar9": {
                    "1": "b2",
                    "2": "condition2",
                    "3": "is_ff000000",
                    "9": "is_zero"
                },
                "concatenated": {
                    "1": "concatenated_value"
                },
                "iVar6": {
                    "1": "number_of_leading_zeros",
                    "11": "bit_count",
                    "3": "leading_zeros",
                    "4": "shift_amount"
                },
                "in_r12": {
                    "1": "thirty_two_minus_shift",
                    "3": "constant",
                    "4": "temp",
                    "9": "remaining_bits"
                },
                "newVar1": {
                    "1": "temp_var4"
                },
                "newVar2": {
                    "1": "temp_var5"
                },
                "newVar3": {
                    "1": "temp_var6"
                },
                "new_variable_name_1": {
                    "1": "shifted_result"
                },
                "new_variable_name_2": {
                    "1": "temp_shifted_input"
                },
                "new_variable_name_3": {
                    "1": "inverted_shift_amount"
                },
                "new_variable_name_4": {
                    "1": "shifted_input3"
                },
                "new_variable_name_5": {
                    "1": "added_shift"
                },
                "new_variable_name_6": {
                    "1": "final_result"
                },
                "new_variable_name_7": {
                    "1": "final_result"
                },
                "new_variable_name_x": {
                    "1": "new_name_x"
                },
                "param_1": {
                    "1": "number",
                    "22": "input",
                    "8": "input_value"
                },
                "param_2": {
                    "1": "param1",
                    "2": "param_2",
                    "7": "param2"
                },
                "param_3": {
                    "1": "unused2",
                    "2": "unused_param2",
                    "7": "param3"
                },
                "param_4": {
                    "1": "pattern",
                    "2": "flags",
                    "7": "param4",
                    "9": "mask"
                },
                "uVar1": {
                    "1": "bit31_set",
                    "2": "highest_bit",
                    "3": "high_bit",
                    "6": "bit31"
                },
                "uVar10": {
                    "1": "result"
                },
                "uVar2": {
                    "1": "upper_bits",
                    "2": "result",
                    "3": "temp_var",
                    "4": "shifted_input",
                    "7": "temp"
                },
                "uVar3": {
                    "1": "concatenated_value",
                    "11": "result",
                    "2": "result_upper"
                },
                "uVar4": {
                    "1": "var2",
                    "2": "shifted_bits",
                    "3": "shifted",
                    "6": "shift_amount",
                    "7": "shifted_input"
                },
                "uVar5": {
                    "1": "doubled",
                    "2": "temp2",
                    "4": "temp",
                    "9": "shifted_input"
                },
                "uVar6": {
                    "1": "temp3"
                },
                "uVar7": {
                    "1": "adjusted_shift_amount",
                    "2": "u_var7",
                    "8": "shift_amount"
                },
                "uVar8": {
                    "1": "result_lower"
                },
                "uVar9": {
                    "1": "shifted_bits"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "code": "\nulonglong reverse_bits_08000418(uint input,undefined4 param2,undefined4 param3,uint mask)\n\n{\n  uint sign_bit;\n  uint temp;\n  uint result;\n  uint shifted_input;\n  uint shifted_input;\n  int bit_count;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_zero;\n  bool is_zero;\n  bool is_negative;\n  \n  shifted_input = input << 1;\n  is_zero = shifted_input == 0;\n  sign_bit = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shifted_input = (uint)((int)shifted_input >> 3) >> 1;\n  result = sign_bit | shifted_input;\n  input = input << 0x1d;\n  if (!is_zero) {\n    mask = shifted_input & 0xff000000;\n    is_zero = mask == 0;\n  }\n  if (!is_zero) {\n    is_zero = mask == 0xff000000;\n  }\n  if (!is_zero) {\n    return CONCAT44(result,input) ^ 0x3800000000000000;\n  }\n  if ((shifted_input & 0xffffff) == 0) {\n    return CONCAT44(result,input);\n  }\n  if (mask == 0xff000000) {\n    return CONCAT44(result,input) | 0x8000000000000;\n  }\n  temp = input;\n  shifted_input = shifted_input;\n  if (shifted_input == 0) {\n    temp = 0;\n    shifted_input = input;\n  }\n  bit_count = leading_zero_count(shifted_input);\n  if (shifted_input == 0) {\n    bit_count = bit_count + 0x20;\n  }\n  shift_amount = bit_count - 0xb;\n  is_negative = subtract_with_borrow4(shift_amount,0x20);\n  shifted_input = bit_count - 0x2b;\n  is_zero = (int)shifted_input < 0;\n  is_zero = shifted_input == 0;\n  if ((int)shift_amount < 0x20) {\n    is_negative = subtract_carry4(shifted_input,0xc);\n    bit_count = bit_count + -0x1f;\n    is_zero = bit_count < 0;\n    is_zero = bit_count == 0;\n    shifted_input = shift_amount;\n    if (!is_zero && is_zero == is_negative) {\n      temp = shifted_input << (shift_amount & 0xff);\n      shifted_input = shifted_input >> (0xcU - bit_count & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_zero || is_zero != is_negative) {\n    remaining_bits = 0x20 - shifted_input;\n  }\n  shifted_input = shifted_input << (shifted_input & 0xff);\n  if (is_zero || is_zero != is_negative) {\n    shifted_input = shifted_input | temp >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_zero != is_negative) {\n    temp = temp << (shifted_input & 0xff);\n  }\nLAB_080002e0:\n  if ((int)shift_amount < 0x381) {\n    return CONCAT44(shifted_input + (0x380 - shift_amount) * 0x100000 | sign_bit,temp);\n  }\n  shifted_input = ~(0x380 - shift_amount);\n  if (0x1e < (int)shifted_input) {\n    return CONCAT44(result,shifted_input >> (shifted_input - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  bit_count = shifted_input - 0x13;\n  if (bit_count == 0 || bit_count < 0 != subtract_carry4(shifted_input - 0x1f,0xc)) {\n    shifted_input = shifted_input + 1;\n    return CONCAT44(sign_bit | shifted_input >> (shifted_input & 0xff),\n                    temp >> (shifted_input & 0xff) | shifted_input << (0x20 - shifted_input & 0xff));\n  }\n  return CONCAT44(result,temp >> (0x20 - (0xcU - bit_count) & 0xff) | shifted_input << (0xcU - bit_count & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_bits_08000418",
            "entrypoint": "0x08000418",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000418": "reverse_bits_08000418",
                "LZCOUNT": "leading_zero_count",
                "SBORROW4": "subtract_with_borrow4",
                "SCARRY4": "subtract_carry4",
                "bVar10": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "is_zero",
                "iVar6": "bit_count",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "mask",
                "uVar1": "sign_bit",
                "uVar2": "temp",
                "uVar3": "result",
                "uVar4": "shifted_input",
                "uVar5": "shifted_input",
                "uVar7": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080004c8": {
            "additional_data": {
                "FUN_080004c8": {
                    "1": "calculate_float",
                    "10": "calculate_result",
                    "12": "calculate_product",
                    "2": "calculate_floating_point"
                },
                "bVar10": {
                    "1": "condition_2",
                    "2": "carry_flag",
                    "3": "condition2",
                    "5": "is_negative",
                    "8": "flag2"
                },
                "bVar11": {
                    "1": "overflow2",
                    "2": "flag_3",
                    "3": "is_borrow",
                    "8": "flag3"
                },
                "bVar9": {
                    "1": "temp_bool1",
                    "12": "is_zero",
                    "2": "flag_1",
                    "3": "condition1",
                    "8": "flag1"
                },
                "iVar5": {
                    "1": "exponent_sum",
                    "10": "sum",
                    "2": "sum_bits",
                    "3": "sum_exponents",
                    "5": "temp5",
                    "6": "temp3"
                },
                "lVar2": {
                    "1": "exponent_a_times_signif_b",
                    "2": "result_2",
                    "5": "temp2",
                    "6": "temp",
                    "7": "result2"
                },
                "param_1": {
                    "1": "input_a",
                    "14": "input1",
                    "2": "num1",
                    "3": "value1"
                },
                "param_2": {
                    "1": "second_parameter",
                    "14": "input2",
                    "2": "value_2",
                    "3": "value2"
                },
                "param_3": {
                    "1": "multiplier",
                    "11": "input3",
                    "2": "num3",
                    "3": "value3"
                },
                "param_4": {
                    "1": "num3",
                    "11": "input4",
                    "2": "num4",
                    "3": "value4"
                },
                "reverse_bits_080006a4": {
                    "2": "reverse_bits"
                },
                "uVar1": {
                    "1": "product1",
                    "2": "result",
                    "4": "product",
                    "5": "temp1",
                    "7": "result1"
                },
                "uVar12": {
                    "1": "concatenated_value",
                    "2": "combined_num",
                    "3": "combined_inputs",
                    "5": "combined_input"
                },
                "uVar3": {
                    "1": "extracted_value1",
                    "2": "temp_1",
                    "5": "temp3",
                    "7": "temp1"
                },
                "uVar4": {
                    "1": "result4",
                    "2": "temp_2",
                    "5": "temp4",
                    "7": "temp2"
                },
                "uVar6": {
                    "1": "temp_variable3",
                    "2": "difference",
                    "4": "temp6",
                    "6": "temp4"
                },
                "uVar7": {
                    "1": "mantissa_num1",
                    "2": "max_value",
                    "3": "mask",
                    "4": "temp8",
                    "5": "temp6"
                },
                "uVar8": {
                    "1": "temp3",
                    "2": "result",
                    "4": "temp9",
                    "5": "temp7"
                },
                "unaff_r5": {
                    "1": "part_num",
                    "5": "temp7"
                }
            },
            "called": [
                "FUN_080006a4"
            ],
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005e9c",
                "FUN_080096e0",
                "FUN_08004d78",
                "FUN_080079e8"
            ],
            "code": "\nulonglong calculate_product_080004c8(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint temp1;\n  uint temp2;\n  int sum;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool is_zero;\n  bool flag2;\n  bool flag3;\n  ulonglong combined_input;\n  \n  combined_input = CONCAT44(input2,input1);\n  temp6 = 0x7ff;\n  temp2 = input2 >> 0x14 & 0x7ff;\n  is_zero = temp2 == 0;\n  if (!is_zero) {\n    temp5 = input4 >> 0x14 & 0x7ff;\n    is_zero = temp5 == 0;\n  }\n  if (!is_zero) {\n    is_zero = temp2 == 0x7ff;\n  }\n  if (!is_zero) {\n    is_zero = temp5 == 0x7ff;\n  }\n  if (is_zero) {\n    combined_input = reverse_bits();\n  }\n  temp1 = (uint)(combined_input >> 0x20);\n  sum = temp2 + temp5;\n  temp2 = temp1 ^ input4;\n  temp1 = temp1 & ~(temp6 << 0x15);\n  input4 = input4 & ~(temp6 << 0x15);\n  is_zero = ((uint)combined_input | temp1 << 0xc) == 0;\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (is_zero) {\n    input3 = (uint)combined_input | input3;\n    input4 = (temp2 & 0x80000000 | temp1) ^ input4;\n    temp2 = temp6 >> 1;\n    flag3 = SBORROW4(sum,temp2);\n    temp4 = sum - temp2;\n    is_zero = temp4 == 0;\n    temp1 = temp4;\n    if (!is_zero && (int)temp2 <= sum) {\n      flag3 = SBORROW4(temp6,temp4);\n      temp1 = temp6 - temp4;\n      is_zero = temp6 == temp4;\n    }\n    if (!is_zero && (int)temp1 < 0 == flag3) {\n      input4 = input4 | temp4 * 0x100000;\n    }\n    if (!is_zero && (int)temp1 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp6 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    is_zero = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    result1 = (combined_input & 0xffffffff) * (ulonglong)input3;\n    combined_input = (combined_input & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp1 * (ulonglong)input3 + (result1 >> 0x20);\n    temp7 = (uint)combined_input;\n    result2 = (ulonglong)temp1 * (ulonglong)input4 + (combined_input >> 0x20);\n    temp6 = (uint)result2;\n    temp1 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      temp7 = temp7 | 1;\n    }\n    temp4 = (sum + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      is_zero = (temp7 & 0x80000000) != 0;\n      temp7 = temp7 << 1;\n      result2 = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp6,temp6) || CARRY4(temp6 * 2,(uint)is_zero)),\n                       temp6 * 2 + (uint)is_zero);\n    }\n    input4 = temp2 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    input3 = (uint)result2 << 0xb | temp7 >> 0x15;\n    temp6 = temp7 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    is_zero = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !is_zero) {\n      flag2 = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      is_zero = temp1 == 0x700;\n    }\n    if (!flag2 || is_zero) {\n      is_zero = 0x7fffffff < temp6;\n      if (temp6 == 0x80000000) {\n        is_zero = (temp7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp4 * 0x100000 + (uint)CARRY4(input3,(uint)is_zero),input3 + is_zero\n                     );\n    }\n  }\n  if (!is_zero && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  is_zero = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || is_zero != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || is_zero != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || is_zero != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = input3 >> (temp1 & 0xff) | input4 << (0x20 - temp1 & 0xff);\n    temp2 = (input4 >> (temp1 & 0xff) & ~((input4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp6 | input3 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(input4,temp2) & 0x80000000ffffffff;\n  }\n  sum = temp2 - 0x14;\n  if (sum == 0 || sum < 0 != SCARRY4(temp1,0xc)) {\n    temp7 = input3 << (temp4 + 0x20 & 0xff);\n    temp1 = input3 >> (temp2 & 0xff) | input4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp7 >> 0x1f);\n    if ((temp6 | temp7 << 1) == 0) {\n      temp4 = temp4 & ~(temp7 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp7 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - sum;\n  temp4 = input3 << (temp2 & 0xff);\n  temp2 = input3 >> (0x20 - temp2 & 0xff) | input4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp6 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "current_name": "calculate_product_080004c8",
            "entrypoint": "0x080004c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080004c8": "calculate_product_080004c8",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "bVar9": "is_zero",
                "iVar5": "sum",
                "lVar2": "result2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "reverse_bits_080006a4": "reverse_bits",
                "uVar1": "result1",
                "uVar12": "combined_input",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar6": "temp4",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "unaff_r5": "temp5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080006a4": {
            "additional_data": {
                "CONCAT44": {
                    "1": "combine_values"
                },
                "FUN_080006a4": {
                    "1": "reverse_and_check_bits",
                    "2": "calculate_bitwise_result",
                    "4": "reverse_bitwise_operation",
                    "5": "reverse_bits"
                },
                "bVar4": {
                    "1": "zero_check",
                    "25": "is_zero"
                },
                "in_r12": {
                    "1": "condition_2",
                    "2": "bit_5",
                    "3": "temp_2",
                    "4": "bit5",
                    "6": "mask"
                },
                "param_1": {
                    "1": "input_a",
                    "10": "input1",
                    "11": "input_1",
                    "2": "input_value_1",
                    "3": "num1"
                },
                "param_2": {
                    "1": "value2",
                    "10": "input2",
                    "11": "input_2",
                    "2": "input_value_2",
                    "3": "num2"
                },
                "param_3": {
                    "1": "value_3",
                    "10": "input3",
                    "11": "input_3",
                    "2": "input_value_3",
                    "3": "num3"
                },
                "param_4": {
                    "1": "bit4",
                    "10": "input4",
                    "11": "input_4",
                    "2": "input_value_4",
                    "3": "num4"
                },
                "return": {
                    "1": "result"
                },
                "uVar1": {
                    "1": "input_1_bit",
                    "2": "temp_1",
                    "3": "temp1",
                    "4": "bit1"
                },
                "uVar2": {
                    "1": "temp4",
                    "2": "bit_3",
                    "3": "temp_4"
                },
                "uVar3": {
                    "1": "temp4",
                    "2": "result",
                    "3": "bit4"
                },
                "uVar5": {
                    "1": "temp1"
                },
                "uVar6": {
                    "1": "temp2"
                },
                "unaff_r4": {
                    "1": "register_4",
                    "2": "temp_var1",
                    "3": "temp_1",
                    "4": "temp"
                }
            },
            "called": [],
            "calling": [
                "FUN_080004c8"
            ],
            "code": "\nulonglong reverse_bits_080006a4(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint mask;\n  bool is_zero;\n  \n  bit3 = mask & input_4 >> 0x14;\n  if (bit2 != mask && bit3 != mask) {\n    is_zero = (input_1 | input_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero) {\n      result (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (bit2 == 0) {\n      bit4 = input_2 & 0x80000000;\n      do {\n        bit1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(bit1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | bit4;\n      if (bit3 != 0) {\n        result combine_values(input_2,input_1);\n      }\n    }\n    do {\n      bit3 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(bit3 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    result combine_values(input_2,input_1);\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  bit4 = input_2;\n  if (((!is_zero) && ((bit2 != mask || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((bit3 != mask || (input_1 = input_3, bit4 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    result (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  result combine_values(bit4,input_1) | 0x7ff8000000000000;\n}\n\n",
            "current_name": "reverse_bits_080006a4",
            "entrypoint": "0x080006a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "combine_values",
                "FUN_080006a4": "reverse_bits_080006a4",
                "bVar4": "is_zero",
                "in_r12": "mask",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "return": "result",
                "uVar1": "bit1",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "unaff_r4": "bit2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800071c": {
            "additional_data": {
                "FUN_0800071c": {
                    "1": "calculate_result",
                    "14": "calculate_floating_point",
                    "2": "calculate_double_precision",
                    "5": "calculate_floating_point_value",
                    "6": "calculate_float"
                },
                "bVar14": {
                    "1": "is_zero_value",
                    "11": "flag1",
                    "5": "condition1",
                    "7": "is_zero"
                },
                "bVar15": {
                    "1": "condition_2",
                    "11": "flag2",
                    "2": "is_zero",
                    "5": "is_equal"
                },
                "bVar16": {
                    "1": "condition4",
                    "2": "carry_flag",
                    "3": "condition3",
                    "9": "flag3"
                },
                "bVar17": {
                    "1": "flag4"
                },
                "iVar8": {
                    "1": "exponent_difference_result",
                    "11": "difference",
                    "2": "temp_8",
                    "4": "exponent_difference",
                    "5": "temp8"
                },
                "param_1": {
                    "1": "integer_part",
                    "2": "input_1",
                    "3": "input1",
                    "4": "sign_bit",
                    "7": "sign"
                },
                "param_2": {
                    "1": "fraction",
                    "2": "input_2",
                    "3": "value2",
                    "8": "exponent"
                },
                "param_3": {
                    "1": "mantissa1",
                    "2": "input_3",
                    "3": "input3",
                    "4": "param3"
                },
                "param_4": {
                    "1": "int_value4",
                    "2": "rounding_mode",
                    "3": "input4",
                    "4": "param4"
                },
                "uVar1": {
                    "1": "exponent_left_shifted",
                    "11": "temp1",
                    "2": "exponent_diff"
                },
                "uVar10": {
                    "1": "temp_value7",
                    "2": "temp9",
                    "3": "temp11",
                    "4": "temp10"
                },
                "uVar100": {
                    "1": "temp94"
                },
                "uVar101": {
                    "1": "temp95"
                },
                "uVar102": {
                    "1": "temp96"
                },
                "uVar103": {
                    "1": "temp97"
                },
                "uVar104": {
                    "1": "temp98"
                },
                "uVar105": {
                    "1": "temp99"
                },
                "uVar106": {
                    "1": "temp100"
                },
                "uVar107": {
                    "1": "temp101"
                },
                "uVar109": {
                    "1": "temp102"
                },
                "uVar11": {
                    "1": "temp9",
                    "2": "result",
                    "3": "temp11"
                },
                "uVar110": {
                    "1": "temp103"
                },
                "uVar114": {
                    "1": "temp104"
                },
                "uVar115": {
                    "1": "temp105"
                },
                "uVar116": {
                    "1": "temp106"
                },
                "uVar117": {
                    "1": "temp107"
                },
                "uVar118": {
                    "1": "temp108"
                },
                "uVar119": {
                    "1": "temp109"
                },
                "uVar12": {
                    "1": "difference",
                    "2": "result2",
                    "3": "temp13",
                    "4": "temp12"
                },
                "uVar120": {
                    "1": "temp110"
                },
                "uVar121": {
                    "1": "temp111"
                },
                "uVar122": {
                    "1": "temp112"
                },
                "uVar123": {
                    "1": "temp113"
                },
                "uVar124": {
                    "1": "temp114"
                },
                "uVar125": {
                    "1": "temp115"
                },
                "uVar126": {
                    "1": "temp116"
                },
                "uVar127": {
                    "1": "temp117"
                },
                "uVar13": {
                    "1": "zero_pattern",
                    "2": "temp_14",
                    "3": "temp14",
                    "5": "mask"
                },
                "uVar17": {
                    "1": "converted_bits",
                    "12": "reversed_bits",
                    "2": "reverse_bits_result",
                    "4": "result"
                },
                "uVar18": {
                    "1": "result"
                },
                "uVar19": {
                    "1": "result2"
                },
                "uVar2": {
                    "1": "significand_bits1",
                    "11": "temp2",
                    "2": "exponent_bits"
                },
                "uVar20": {
                    "1": "result3"
                },
                "uVar21": {
                    "1": "result4"
                },
                "uVar22": {
                    "1": "result5"
                },
                "uVar23": {
                    "1": "result6"
                },
                "uVar24": {
                    "1": "result7"
                },
                "uVar25": {
                    "1": "temp20"
                },
                "uVar26": {
                    "1": "temp21"
                },
                "uVar27": {
                    "1": "temp22"
                },
                "uVar28": {
                    "1": "temp23"
                },
                "uVar29": {
                    "1": "temp24"
                },
                "uVar3": {
                    "1": "temp1",
                    "11": "temp3",
                    "2": "temp_3"
                },
                "uVar30": {
                    "1": "temp25"
                },
                "uVar31": {
                    "1": "temp26"
                },
                "uVar32": {
                    "1": "temp27"
                },
                "uVar33": {
                    "1": "temp28"
                },
                "uVar34": {
                    "1": "temp29"
                },
                "uVar35": {
                    "1": "temp30"
                },
                "uVar36": {
                    "1": "temp31"
                },
                "uVar37": {
                    "1": "temp32"
                },
                "uVar38": {
                    "1": "shifted_temp"
                },
                "uVar39": {
                    "1": "temp33"
                },
                "uVar4": {
                    "1": "temp3",
                    "11": "temp4",
                    "2": "temp_4"
                },
                "uVar40": {
                    "1": "temp34"
                },
                "uVar41": {
                    "1": "temp35"
                },
                "uVar42": {
                    "1": "temp36"
                },
                "uVar43": {
                    "1": "temp37"
                },
                "uVar44": {
                    "1": "temp38"
                },
                "uVar45": {
                    "1": "temp39"
                },
                "uVar46": {
                    "1": "temp40"
                },
                "uVar47": {
                    "1": "temp41"
                },
                "uVar48": {
                    "1": "temp42"
                },
                "uVar49": {
                    "1": "temp43"
                },
                "uVar5": {
                    "1": "shifted_fraction",
                    "11": "temp5",
                    "2": "temp_5"
                },
                "uVar50": {
                    "1": "temp44"
                },
                "uVar51": {
                    "1": "temp45"
                },
                "uVar52": {
                    "1": "temp46"
                },
                "uVar53": {
                    "1": "temp47"
                },
                "uVar54": {
                    "1": "temp48"
                },
                "uVar55": {
                    "1": "temp49"
                },
                "uVar56": {
                    "1": "temp50"
                },
                "uVar57": {
                    "1": "temp51"
                },
                "uVar58": {
                    "1": "temp52"
                },
                "uVar59": {
                    "1": "temp53"
                },
                "uVar6": {
                    "1": "result",
                    "11": "temp6",
                    "2": "temp_6"
                },
                "uVar60": {
                    "1": "temp54"
                },
                "uVar61": {
                    "1": "temp55"
                },
                "uVar62": {
                    "1": "temp56"
                },
                "uVar63": {
                    "1": "temp57"
                },
                "uVar64": {
                    "1": "temp58"
                },
                "uVar65": {
                    "1": "temp59"
                },
                "uVar66": {
                    "1": "temp60"
                },
                "uVar67": {
                    "1": "temp61"
                },
                "uVar68": {
                    "1": "temp62"
                },
                "uVar69": {
                    "1": "temp63"
                },
                "uVar7": {
                    "1": "result",
                    "11": "temp7",
                    "2": "temp_7",
                    "3": "result_sign"
                },
                "uVar70": {
                    "1": "temp64"
                },
                "uVar71": {
                    "1": "temp65"
                },
                "uVar72": {
                    "1": "temp66"
                },
                "uVar73": {
                    "1": "temp67"
                },
                "uVar74": {
                    "1": "temp68"
                },
                "uVar75": {
                    "1": "temp69"
                },
                "uVar76": {
                    "1": "temp70"
                },
                "uVar77": {
                    "1": "temp71"
                },
                "uVar78": {
                    "1": "temp72"
                },
                "uVar79": {
                    "1": "temp73"
                },
                "uVar8": {
                    "1": "temp8"
                },
                "uVar80": {
                    "1": "temp74"
                },
                "uVar81": {
                    "1": "temp75"
                },
                "uVar82": {
                    "1": "temp76"
                },
                "uVar83": {
                    "1": "temp77"
                },
                "uVar84": {
                    "1": "temp78"
                },
                "uVar85": {
                    "1": "temp79"
                },
                "uVar86": {
                    "1": "temp80"
                },
                "uVar87": {
                    "1": "temp81"
                },
                "uVar88": {
                    "1": "temp82"
                },
                "uVar89": {
                    "1": "temp83"
                },
                "uVar9": {
                    "1": "bitwise_result",
                    "2": "temp_9",
                    "7": "temp9"
                },
                "uVar90": {
                    "1": "temp84"
                },
                "uVar91": {
                    "1": "temp85"
                },
                "uVar92": {
                    "1": "temp86"
                },
                "uVar93": {
                    "1": "temp87"
                },
                "uVar94": {
                    "1": "temp88"
                },
                "uVar95": {
                    "1": "temp89"
                },
                "uVar96": {
                    "1": "temp90"
                },
                "uVar97": {
                    "1": "temp91"
                },
                "uVar98": {
                    "1": "temp92"
                },
                "uVar99": {
                    "1": "temp93"
                },
                "unaff_r5": {
                    "1": "hidden_bit1",
                    "2": "exponent_bits2",
                    "3": "temp10"
                }
            },
            "called": [
                "FUN_0800088a"
            ],
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08004d78",
                "FUN_08005838",
                "FUN_080079e8"
            ],
            "code": "\nulonglong calculate_floating_point_0800071c(undefined4 sign,uint exponent,uint param3,uint param4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int difference;\n  uint temp9;\n  uint temp10;\n  uint temp10;\n  uint temp12;\n  uint temp12;\n  uint mask;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 reversed_bits;\n  \n  reversed_bits = CONCAT44(exponent,sign);\n  mask = 0x7ff;\n  temp7 = exponent >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    temp10 = param4 >> 0x14 & 0x7ff;\n    flag1 = temp10 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp10 == 0x7ff;\n  }\n  if (flag1) {\n    reversed_bits = reverse_bits_0800088a();\n  }\n  temp9 = (uint)((ulonglong)reversed_bits >> 0x20);\n  temp12 = (uint)reversed_bits;\n  difference = temp7 - temp10;\n  if ((param3 | param4 << 0xc) == 0) {\n    temp7 = (temp9 ^ param4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(difference,mask >> 1);\n    temp9 = difference + (mask >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(mask,temp9);\n      flag1 = (int)(mask - temp9) < 0;\n      flag2 = mask == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    mask = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (param4 << 0xc) >> 4 | 0x10000000 | param3 >> 0x18;\n    mask = param3 << 8;\n    temp10 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ param4) & 0x80000000;\n    flag1 = temp3 <= temp10;\n    if (temp10 == temp3) {\n      flag1 = mask <= temp12;\n    }\n    difference = difference + (uint)flag1;\n    temp9 = difference + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      mask = (uint)((param3 >> 0x18 & 1) != 0) << 0x1f | mask >> 1;\n    }\n    temp12 = temp12 - mask;\n    temp10 = (temp10 - temp3) - (uint)(temp12 < mask);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | mask >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp12;\n      if (temp4 < temp10 || temp10 - temp4 < (uint)flag1) {\n        temp12 = temp12 - temp1;\n        temp12 = temp12 | temp3;\n        temp10 = (temp10 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp12;\n      flag1 = temp10 - temp5 < (uint)flag2;\n      mask = temp10;\n      if (temp5 < temp10 || flag1) {\n        temp12 = temp12 - temp1;\n        mask = (temp10 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp10 || flag1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp10 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp12;\n      flag1 = mask - temp10 < (uint)flag2;\n      temp5 = mask;\n      if (temp10 < mask || flag1) {\n        temp12 = temp12 - temp2;\n        temp5 = (mask - temp10) - (uint)!flag2;\n      }\n      if (temp10 < mask || flag1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp10 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp12;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp10 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 - temp1;\n        temp10 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      mask = temp10 | temp12;\n      if (mask == 0) break;\n      temp10 = temp10 << 4 | temp12 >> 0x1c;\n      temp12 = temp12 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_0800083a;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_0800083a:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = difference + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = difference - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp10;\n      if (temp10 == temp6) {\n        flag1 = temp1 <= temp12;\n      }\n      if (temp10 == temp6 && temp12 == temp1) {\n        flag1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)flag1),temp12 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp12 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp10 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp10 & 0xff) | temp7 << (0x20 - temp10 & 0xff);\n    temp9 = (temp7 >> (temp10 & 0xff) & ~((temp7 & 0x80000000) >> (temp10 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((mask | temp12 << (0x20 - temp10 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  difference = temp3 - 0x14;\n  if (difference != 0 && difference < 0 == SCARRY4(temp10,0xc)) {\n    temp9 = 0xc - difference;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((mask | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp10 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp10 >> 0x1f);\n  if ((mask | temp10 << 1) == 0) {\n    temp9 = temp9 & ~(temp10 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp10 >> 0x1f)),temp9);\n}\n\n",
            "current_name": "calculate_floating_point_0800071c",
            "entrypoint": "0x0800071c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800071c": "calculate_floating_point_0800071c",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "iVar8": "difference",
                "param_1": "sign",
                "param_2": "exponent",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp1",
                "uVar10": "temp10",
                "uVar11": "temp12",
                "uVar12": "temp12",
                "uVar13": "mask",
                "uVar17": "reversed_bits",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "uVar9": "temp9",
                "unaff_r5": "temp10"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800088a": {
            "additional_data": {
                "FUN_0800088a": {
                    "1": "decode_float",
                    "10": "reverse_bits",
                    "2": "reverse_binary_operation"
                },
                "LAB_080006c0": {
                    "1": "return_zero"
                },
                "LAB_080006fc": {
                    "1": "return_case1"
                },
                "bVar4": {
                    "1": "condition",
                    "19": "is_zero",
                    "2": "check",
                    "4": "flag"
                },
                "in_r12": {
                    "1": "temp2",
                    "2": "bit_mask",
                    "4": "constant",
                    "5": "bit5"
                },
                "param_1": {
                    "1": "integer_part",
                    "2": "sign",
                    "20": "input1",
                    "3": "input_a"
                },
                "param_2": {
                    "1": "value2",
                    "2": "input_2",
                    "20": "input2",
                    "3": "input_b"
                },
                "param_3": {
                    "1": "fraction",
                    "2": "input_3",
                    "20": "input3",
                    "3": "input_c"
                },
                "param_4": {
                    "1": "value4",
                    "2": "input_4",
                    "20": "input4",
                    "3": "input_d"
                },
                "uVar1": {
                    "1": "bit",
                    "11": "bit1",
                    "2": "temp_var1",
                    "3": "temp1"
                },
                "uVar2": {
                    "1": "masked_param4",
                    "2": "temp3",
                    "5": "temp2",
                    "6": "bit3"
                },
                "uVar3": {
                    "1": "result",
                    "2": "temp4",
                    "5": "temp3",
                    "6": "bit4"
                },
                "uVar4": {
                    "1": "shifted_mask"
                },
                "uVar5": {
                    "1": "temp_a"
                },
                "uVar6": {
                    "1": "temp_b"
                },
                "unaff_r4": {
                    "1": "compare_value",
                    "2": "register4",
                    "3": "temp",
                    "6": "temp1",
                    "7": "bit2"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800071c"
            ],
            "code": "\nulonglong reverse_bits_0800088a(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool is_zero;\n  \n  bit3 = bit5 & input4 >> 0x14;\n  bit4 = input2;\n  if (bit2 != bit5 || bit3 != bit5) {\n    if (bit2 == bit5) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, bit4 = input4, bit3 != bit5)\n         ) {\nreturn_infinity:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit3 == bit5) {\n      input1 = input3;\n      bit4 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nreturn_zero:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input1 | input2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input3 | input4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (bit2 == 0) {\n          bit4 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | bit4;\n          if (bit3 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          bit4 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(bit4 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto return_infinity;\n      if ((input3 | input4 << 1) != 0) goto return_zero;\n    }\n  }\n  return CONCAT44(bit4,input1) | 0x7ff8000000000000;\n}\n\n",
            "current_name": "reverse_bits_0800088a",
            "entrypoint": "0x0800088a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800088a": "reverse_bits_0800088a",
                "LAB_080006c0": "return_zero",
                "LAB_080006fc": "return_infinity",
                "bVar4": "is_zero",
                "in_r12": "bit5",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "unaff_r4": "bit2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080008fc": {
            "additional_data": {
                "0x15": {
                    "1": "shift_value"
                },
                "FUN_080008fc": {
                    "1": "compare_and_validate",
                    "10": "check_parameters",
                    "2": "compare_values",
                    "3": "check_equality",
                    "7": "compare_parameters"
                },
                "bVar2": {
                    "1": "is_all_zeros",
                    "12": "is_zero",
                    "2": "is_equal",
                    "4": "are_inputs_zero"
                },
                "bVar3": {
                    "1": "compare_result",
                    "2": "is_zero2",
                    "3": "is_less_than_or_equal",
                    "5": "is_condition_met",
                    "9": "is_negative"
                },
                "param_1": {
                    "1": "input1",
                    "2": "first_parameter",
                    "3": "first_param",
                    "7": "value_1",
                    "9": "value1"
                },
                "param_2": {
                    "1": "second_data",
                    "2": "second_parameter",
                    "3": "input_2",
                    "7": "value_2",
                    "9": "value2"
                },
                "param_2 << 1": {
                    "1": "value2_shifted"
                },
                "param_2 ^ param_4": {
                    "1": "value2_xo_rvalue4"
                },
                "param_3": {
                    "1": "input3",
                    "2": "num3",
                    "3": "third_param",
                    "7": "value_3",
                    "9": "value3"
                },
                "param_4": {
                    "1": "input4",
                    "2": "num4",
                    "3": "fourth_param",
                    "7": "value_4",
                    "8": "value4"
                },
                "param_4 << 1": {
                    "1": "value4_shifted"
                },
                "param_4 >> 0x1f": {
                    "1": "is_negative"
                },
                "param_4 | 1": {
                    "1": "result"
                },
                "return value": {
                    "1": "result"
                },
                "uVar1": {
                    "1": "temp_var1",
                    "10": "xor_result",
                    "18": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08000988"
            ],
            "code": "\nuint check_parameters_080008fc(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint result;\n  bool is_zero;\n  bool is_negative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  is_zero = (value1 | value2 << 1) == 0;\n  if (is_zero) {\n    is_zero = (value3 | value4 << 1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = value2 == value4;\n  }\n  if (is_zero) {\n    is_zero = value1 == value3;\n  }\n  if (!is_zero) {\n    result = value2 ^ value4;\n    is_zero = result == 0;\n    if (-1 < (int)result) {\n      is_zero = value2 == value4;\n    }\n    is_negative = -1 < (int)result && value4 <= value2;\n    if (is_zero) {\n      is_negative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!is_negative) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "current_name": "check_parameters_080008fc",
            "entrypoint": "0x080008fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080008fc": "check_parameters_080008fc",
                "bVar2": "is_zero",
                "bVar3": "is_negative",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000978": {
            "additional_data": {
                "FUN_08000978": {
                    "1": "validate_and_execute",
                    "11": "validate_parameters",
                    "2": "validate_and_handle_parameters",
                    "3": "validate_and_return_parameters",
                    "4": "validate_and_process",
                    "8": "validate_and_return"
                },
                "param_1": {
                    "1": "input1",
                    "11": "input_param_1",
                    "2": "first_param",
                    "3": "arg1",
                    "4": "input_param1",
                    "5": "input_1"
                },
                "param_2": {
                    "1": "second_argument",
                    "11": "input_param_2",
                    "2": "second_parameter",
                    "3": "arg2",
                    "4": "input_param2",
                    "5": "input_2"
                },
                "param_3": {
                    "1": "third_param",
                    "2": "param_3",
                    "3": "arg3",
                    "8": "input_param_3"
                },
                "param_4": {
                    "1": "validation_param2",
                    "2": "param_4",
                    "3": "arg4",
                    "8": "input_param_4"
                }
            },
            "called": [
                "FUN_08000988"
            ],
            "calling": [
                "FUN_080009d4",
                "FUN_080009e8"
            ],
            "code": "\nvoid validate_parameters_08000978(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  validate_parameters_08000978_08000988(input_param_3,input_param_4,input_param_1,input_param_2);\n  return;\n}\n\n",
            "current_name": "validate_parameters_08000978",
            "entrypoint": "0x08000978",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000978": "validate_parameters_08000978",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000988": {
            "additional_data": {
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "FUN_08000988": {
                    "1": "check_and_return_parameter",
                    "3": "check_and_return",
                    "4": "validate_and_return",
                    "5": "validate_and_return_param",
                    "7": "validate_parameters"
                },
                "check_parameters_080008fc": {
                    "1": "perform_parameter_check",
                    "6": "validate_input"
                },
                "param_1": {
                    "1": "input_data",
                    "10": "input_value",
                    "14": "input_param",
                    "2": "input_parameter",
                    "4": "input"
                }
            },
            "called": [
                "FUN_080008fc"
            ],
            "calling": [
                "FUN_080009ac",
                "FUN_080009c0",
                "FUN_08000978",
                "FUN_08000998"
            ],
            "code": "\nundefined4 validate_parameters_08000988(undefined4 input_param)\n\n{\n  validate_input();\n  return input_param;\n}\n\n",
            "current_name": "validate_parameters_08000988",
            "entrypoint": "0x08000988",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000988": "validate_parameters_08000988",
                "check_parameters_080008fc": "validate_input",
                "param_1": "input_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000998": {
            "additional_data": {
                "FUN_08000988": {
                    "1": "validate_parameters"
                },
                "FUN_08000998": {
                    "1": "check_validity",
                    "2": "validate_parameters",
                    "5": "check_parameters",
                    "6": "is_parameter_valid"
                },
                "in_ZR": {
                    "1": "user_input",
                    "10": "input_character",
                    "2": "result",
                    "5": "is_valid"
                },
                "validate_parameters_08000988": {
                    "1": "validate_function_parameters"
                }
            },
            "called": [
                "FUN_08000988"
            ],
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "code": "\nbool is_parameter_valid_08000998(void)\n\n{\n  char input_char;\n  \n  validate_function_parameters();\n  return input_char != '\\0';\n}\n\n",
            "current_name": "is_parameter_valid_08000998",
            "entrypoint": "0x08000998",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000998": "is_parameter_valid_08000998",
                "in_ZR": "input_char",
                "validate_parameters_08000988": "validate_function_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009ac": {
            "additional_data": {
                "FUN_080009ac": {
                    "1": "check_if_string_empty",
                    "2": "is_null_terminated",
                    "3": "is_in_cy_null",
                    "4": "is_cy_null",
                    "7": "is_string_empty"
                },
                "in_CY": {
                    "1": "check_character",
                    "12": "input_char",
                    "13": "input_character"
                }
            },
            "called": [
                "FUN_08000988"
            ],
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "code": "\nbool is_string_empty_080009ac(void)\n\n{\n  char input_character;\n  \n  validate_parameters_08000988();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "is_string_empty_080009ac",
            "entrypoint": "0x080009ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009ac": "is_string_empty_080009ac",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009c0": {
            "additional_data": {
                "FUN_080009c0": {
                    "1": "check_zero_conditions",
                    "2": "check_parameter_validity",
                    "4": "check_conditions",
                    "9": "check_parameters"
                },
                "in_CY": {
                    "1": "parameter_one",
                    "10": "is_carry",
                    "12": "carry_flag",
                    "2": "carry",
                    "3": "is_carry_set"
                },
                "in_ZR": {
                    "1": "zero_result",
                    "11": "zero_flag",
                    "3": "is_zero_return",
                    "5": "is_zero",
                    "6": "is_zero_result"
                },
                "validate_parameters_08000988": {
                    "5": "validate_parameters"
                }
            },
            "called": [
                "FUN_08000988"
            ],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nbool check_parameters_080009c0(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  validate_parameters();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "current_name": "check_parameters_080009c0",
            "entrypoint": "0x080009c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009c0": "check_parameters_080009c0",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag",
                "validate_parameters_08000988": "validate_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009d4": {
            "additional_data": {
                "FUN_080009d4": {
                    "1": "validate_and_check_parameters",
                    "4": "validate_and_return_result",
                    "6": "validate_parameters",
                    "8": "check_parameters"
                },
                "in_CY": {
                    "1": "has_carry",
                    "11": "is_carry",
                    "12": "carry_flag",
                    "3": "is_carry_flag_set"
                },
                "in_RAW": {
                    "1": "is_raw"
                },
                "in_ZR": {
                    "1": "is_zero_returned",
                    "10": "zero_flag",
                    "2": "is_zero_flag_set",
                    "4": "is_zero_return",
                    "6": "is_zero"
                },
                "validate_parameters_08000978": {
                    "7": "validate_parameters"
                }
            },
            "called": [
                "FUN_08000978"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nbool check_parameters_080009d4(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  validate_parameters();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "current_name": "check_parameters_080009d4",
            "entrypoint": "0x080009d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009d4": "check_parameters_080009d4",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag",
                "validate_parameters_08000978": "validate_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009e8": {
            "additional_data": {
                "FUN_080009e8": {
                    "1": "is_cypher_valid",
                    "2": "is_string_empty",
                    "3": "check_null_termination",
                    "4": "check_if_null_080009e8"
                },
                "in_CY": {
                    "1": "input_cy",
                    "13": "input_char",
                    "15": "input_character"
                },
                "validate_parameters_08000978": {
                    "1": "validate_parameters_08000978",
                    "2": "validate_parameters"
                }
            },
            "called": [
                "FUN_08000978"
            ],
            "calling": [
                "FUN_080059f0",
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "code": "\nbool check_if_null_080009e8_080009e8(void)\n\n{\n  char input_character;\n  \n  validate_parameters();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "check_if_null_080009e8_080009e8",
            "entrypoint": "0x080009e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009e8": "check_if_null_080009e8_080009e8",
                "in_CY": "input_character",
                "validate_parameters_08000978": "validate_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009fc": {
            "additional_data": {
                "FUN_080009fc": {
                    "1": "better_name",
                    "2": "reverse_bits",
                    "3": "calculate_float",
                    "8": "calculate_floating_point"
                },
                "SCARRY4": {
                    "1": "has_overflow",
                    "2": "is_overflow"
                },
                "bVar4": {
                    "1": "is_zero_value",
                    "25": "is_zero"
                },
                "bVar5": {
                    "1": "is_eligible",
                    "6": "is_less_than_threshold",
                    "8": "is_less_than"
                },
                "in_r12": {
                    "1": "temp_value2",
                    "10": "temp3",
                    "2": "temp_var"
                },
                "param_1": {
                    "1": "integer_part",
                    "11": "input1",
                    "2": "exponent",
                    "3": "input_float",
                    "7": "input_value"
                },
                "param_2": {
                    "1": "floating_point_value2",
                    "11": "input2",
                    "2": "fraction"
                },
                "uVar1": {
                    "1": "output_uint",
                    "28": "result"
                },
                "uVar2": {
                    "1": "doubled_limit",
                    "2": "shifted_fraction",
                    "4": "multiplied_value",
                    "9": "temp1"
                },
                "uVar2_shifted": {
                    "1": "shifted_input"
                },
                "uVar3": {
                    "1": "added_value",
                    "10": "temp2",
                    "2": "adjusted_fraction",
                    "6": "adjusted_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "code": "\nuint calculate_floating_point_080009fc(uint input1,uint input2)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool is_zero;\n  bool is_less_than;\n  \n  temp1 = input2 * 2;\n  is_less_than = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!is_less_than) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  is_zero = result == 0;\n  if (!is_less_than && temp2 >= 0x200000) {\n    is_zero = temp3 == 0x1fc00000;\n  }\n  if (((is_less_than || temp2 < 0x200000) || 0x1fc00000 < temp3) || is_zero) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((input1 | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != is_overflow(temp2,0x2e00000)) {\n      return input2 & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = input1 >> (temp1 & 0xff);\n    if (input1 << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = input2 & 0x1fffff | 0x100000;\n    input1 = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (input2 & 0x80000000 | input1 >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < input1 * 8);\n  if (input1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_floating_point_080009fc",
            "entrypoint": "0x080009fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009fc": "calculate_floating_point_080009fc",
                "SCARRY4": "is_overflow",
                "bVar4": "is_zero",
                "bVar5": "is_less_than",
                "in_r12": "temp3",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000aa4": {
            "additional_data": {
                "FUN_08000aa4": {
                    "1": "calculate_boundaries",
                    "2": "calculate_updated_float",
                    "3": "calculate_floating_point",
                    "4": "reverse_bits",
                    "8": "calculate_float"
                },
                "LZCOUNT": {
                    "2": "leading_zero_count"
                },
                "bVar8": {
                    "1": "equal",
                    "11": "is_equal",
                    "2": "is_condition_met",
                    "4": "is_true",
                    "5": "is_zero"
                },
                "iVar1": {
                    "1": "upper_bits1",
                    "2": "shifted_input_1",
                    "3": "shift_amount",
                    "5": "shifted_input1"
                },
                "iVar2": {
                    "1": "exponent_2_shifted",
                    "2": "shift_amount_2",
                    "5": "shifted_input2"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "num1",
                    "4": "input1",
                    "7": "input_1"
                },
                "param_2": {
                    "1": "key",
                    "2": "num2",
                    "4": "input2",
                    "7": "input_2"
                },
                "param_3": {
                    "1": "unknown_param",
                    "2": "param",
                    "4": "input3"
                },
                "param_4": {
                    "1": "shift_amount",
                    "3": "result",
                    "4": "param4"
                },
                "uVar3": {
                    "1": "input_2_complement",
                    "2": "result",
                    "4": "xor_result"
                },
                "uVar4": {
                    "1": "shifted_flipped_input_1",
                    "2": "temp1"
                },
                "uVar5": {
                    "1": "shifted_exponent",
                    "2": "result",
                    "4": "temp1"
                },
                "uVar6": {
                    "1": "temp_dividend_shifted",
                    "2": "shift_amount",
                    "4": "temp2"
                },
                "uVar7": {
                    "1": "temp4",
                    "2": "shift_difference",
                    "23": "difference"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "code": "\nuint calculate_float_08000aa4(uint input_1,uint input_2,undefined4 input_3,uint input_4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint xor_result;\n  uint temp1;\n  uint temp1;\n  uint temp2;\n  uint difference;\n  bool is_equal;\n  \n  xor_result = input_2 ^ 0x80000000;\n  temp1 = input_1 << 1;\n  is_equal = temp1 == 0;\n  if (!is_equal) {\n    input_4 = input_2 << 1;\n    is_equal = input_4 == 0;\n  }\n  if (!is_equal) {\n    is_equal = temp1 == input_4;\n  }\n  shifted_input1 = (int)temp1 >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_input1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)input_4 >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_input2 = (int)(input_2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      temp1 = xor_result;\n      if (shifted_input1 == -1) {\n        temp1 = input_1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        xor_result = temp1;\n      }\n      is_equal = (temp1 & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (xor_result & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = temp1 == xor_result;\n      }\n      if (!is_equal) {\n        temp1 = temp1 | 0x400000;\n      }\n      return temp1;\n    }\n    if (((input_1 ^ xor_result) & 0x7fffffff) != 0) {\n      if (temp1 == 0) {\n        input_1 = xor_result;\n      }\n      return input_1;\n    }\n    if (input_1 != xor_result) {\n      return 0;\n    }\n    if ((temp1 & 0xff000000) == 0) {\n      xor_result = input_1 << 1;\n      if ((input_1 & 0x80000000) != 0) {\n        xor_result = xor_result | 0x80000000;\n      }\n      return xor_result;\n    }\n    if (temp1 < 0xfe000000) {\n      return input_1 + 0x800000;\n    }\n    input_1 = input_1 & 0x80000000;\nLAB_08000bde:\n    return input_1 | 0x7f800000;\n  }\n  temp1 = temp1 >> 0x18;\n  input_4 = input_4 >> 0x18;\n  difference = input_4 - temp1;\n  is_equal = difference != 0;\n  temp2 = temp1;\n  if (is_equal && temp1 <= input_4) {\n    temp2 = temp1 + difference;\n  }\n  if (is_equal && temp1 <= input_4) {\n    xor_result = xor_result ^ input_1;\n  }\n  if (is_equal && temp1 <= input_4) {\n    input_1 = input_1 ^ xor_result;\n  }\n  if (is_equal && temp1 <= input_4) {\n    xor_result = xor_result ^ input_1;\n  }\n  if (input_4 < temp1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input_1;\n  }\n  temp1 = input_1 & 0xffffff | 0x800000;\n  if ((input_1 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  temp1 = xor_result & 0xffffff | 0x800000;\n  if ((xor_result & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  if (temp2 == difference) {\n    temp1 = temp1 ^ 0x800000;\n    if (temp2 == 0) {\n      temp1 = temp1 ^ 0x800000;\n      temp2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp1 = temp1 + ((int)temp1 >> (difference & 0xff));\n  temp1 = temp1 << (0x20 - difference & 0xff);\n  input_1 = temp1 & 0x80000000;\n  if ((int)temp1 < 0) {\n    is_equal = temp1 != 0;\n    temp1 = -temp1;\n    temp1 = -temp1 - (uint)is_equal;\n  }\n  if (temp1 < 0x800000) {\n    xor_result = temp1 & 0x80000000;\n    temp1 = temp1 << 1;\n    temp1 = temp1 * 2 + (uint)(xor_result != 0);\n    xor_result = temp2 - 2;\n    if ((temp1 & 0x800000) == 0) {\n      difference = leading_zero_count(temp1) - 8;\n      temp1 = temp1 << (difference & 0xff);\n      if ((int)xor_result < (int)difference) {\n        temp1 = temp1 >> (-(xor_result - difference) & 0xff);\n      }\n      else {\n        temp1 = temp1 + (xor_result - difference) * 0x800000;\n      }\n      return temp1 | input_1;\n    }\n  }\n  else {\n    xor_result = temp2 - 1;\n    if (0xffffff < temp1) {\n      xor_result = temp1 & 1;\n      temp1 = temp1 >> 1;\n      temp1 = (uint)(xor_result != 0) << 0x1f | temp1 >> 1;\n      xor_result = temp2;\n      if (0xfd < temp2) goto LAB_08000bde;\n    }\n  }\n  temp1 = temp1 + xor_result * 0x800000 + (uint)(0x7fffffff < temp1);\n  if (temp1 == 0x80000000) {\n    temp1 = temp1 & 0xfffffffe;\n  }\n  return temp1 | input_1;\n}\n\n",
            "current_name": "calculate_float_08000aa4",
            "entrypoint": "0x08000aa4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000aa4": "calculate_float_08000aa4",
                "LZCOUNT": "leading_zero_count",
                "bVar8": "is_equal",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar3": "xor_result",
                "uVar4": "temp1",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "uVar7": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "additional_data": {
                "FUN_08000aa8": {
                    "1": "calculate_floating_point_difference",
                    "10": "calculate_float",
                    "2": "calculate_floating_point_value",
                    "3": "perform_arithmetic_operation",
                    "7": "calculate_floating_point"
                },
                "LZCOUNT": {
                    "1": "leading_zeros_count",
                    "4": "leading_zero_count"
                },
                "LZCOUNT()": {
                    "1": "leading_zeros_count"
                },
                "bVar7": {
                    "1": "check",
                    "16": "is_zero",
                    "7": "is_equal"
                },
                "iVar1": {
                    "1": "shift_amt1",
                    "2": "input1_shifted",
                    "3": "shift1",
                    "6": "shifted_input1"
                },
                "iVar2": {
                    "1": "input2_highest_byte",
                    "2": "input2_shifted",
                    "3": "shift2",
                    "6": "shifted_input2"
                },
                "param_1": {
                    "1": "dividend",
                    "16": "input1",
                    "2": "num1",
                    "3": "input_value1",
                    "5": "value1"
                },
                "param_2": {
                    "1": "divisor",
                    "16": "input2",
                    "2": "num2",
                    "3": "input_value2",
                    "5": "value2"
                },
                "param_3": {
                    "1": "value3",
                    "10": "input3",
                    "2": "flags",
                    "5": "param3"
                },
                "param_4": {
                    "1": "num3",
                    "10": "input4",
                    "2": "rounding_mode",
                    "4": "param4"
                },
                "uVar3": {
                    "1": "value1",
                    "2": "result",
                    "5": "result1"
                },
                "uVar4": {
                    "1": "sign_bit_adjusted_input2",
                    "2": "result2",
                    "4": "shifted_input1"
                },
                "uVar5": {
                    "1": "difference",
                    "2": "u_var5",
                    "3": "shifted_input2"
                },
                "uVar6": {
                    "1": "count2",
                    "14": "difference",
                    "2": "temp_value2"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_080049cc"
            ],
            "code": "\nuint calculate_float_08000aa8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint result1;\n  uint shifted_input1;\n  uint shifted_input2;\n  uint difference;\n  bool is_zero;\n  \n  shifted_input1 = input1 << 1;\n  is_zero = shifted_input1 == 0;\n  if (!is_zero) {\n    input4 = input2 << 1;\n    is_zero = input4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = shifted_input1 == input4;\n  }\n  shifted_input1 = (int)shifted_input1 >> 0x18;\n  if (!is_zero) {\n    is_zero = shifted_input1 == -1;\n  }\n  if (!is_zero) {\n    is_zero = (int)input4 >> 0x18 == -1;\n  }\n  if (is_zero) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      shifted_input1 = input2;\n      if (shifted_input1 == -1) {\n        shifted_input1 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        input2 = shifted_input1;\n      }\n      is_zero = (shifted_input1 & 0x7fffff) == 0;\n      if (is_zero) {\n        is_zero = (input2 & 0x7fffff) == 0;\n      }\n      if (is_zero) {\n        is_zero = shifted_input1 == input2;\n      }\n      if (!is_zero) {\n        shifted_input1 = shifted_input1 | 0x400000;\n      }\n      return shifted_input1;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (shifted_input1 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((shifted_input1 & 0xff000000) == 0) {\n      shifted_input1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        shifted_input1 = shifted_input1 | 0x80000000;\n      }\n      return shifted_input1;\n    }\n    if (shifted_input1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000bde:\n    return input1 | 0x7f800000;\n  }\n  shifted_input1 = shifted_input1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - shifted_input1;\n  is_zero = difference != 0;\n  shifted_input2 = shifted_input1;\n  if (is_zero && shifted_input1 <= input4) {\n    shifted_input2 = shifted_input1 + difference;\n  }\n  if (is_zero && shifted_input1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (is_zero && shifted_input1 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (is_zero && shifted_input1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < shifted_input1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  shifted_input1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    shifted_input1 = -shifted_input1;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (shifted_input2 == difference) {\n    result1 = result1 ^ 0x800000;\n    if (shifted_input2 == 0) {\n      shifted_input1 = shifted_input1 ^ 0x800000;\n      shifted_input2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shifted_input1 = shifted_input1 + ((int)result1 >> (difference & 0xff));\n  result1 = result1 << (0x20 - difference & 0xff);\n  input1 = shifted_input1 & 0x80000000;\n  if ((int)shifted_input1 < 0) {\n    is_zero = result1 != 0;\n    result1 = -result1;\n    shifted_input1 = -shifted_input1 - (uint)is_zero;\n  }\n  if (shifted_input1 < 0x800000) {\n    difference = result1 & 0x80000000;\n    result1 = result1 << 1;\n    shifted_input1 = shifted_input1 * 2 + (uint)(difference != 0);\n    difference = shifted_input2 - 2;\n    if ((shifted_input1 & 0x800000) == 0) {\n      shifted_input2 = leading_zero_count(shifted_input1) - 8;\n      shifted_input1 = shifted_input1 << (shifted_input2 & 0xff);\n      if ((int)difference < (int)shifted_input2) {\n        shifted_input1 = shifted_input1 >> (-(difference - shifted_input2) & 0xff);\n      }\n      else {\n        shifted_input1 = shifted_input1 + (difference - shifted_input2) * 0x800000;\n      }\n      return shifted_input1 | input1;\n    }\n  }\n  else {\n    difference = shifted_input2 - 1;\n    if (0xffffff < shifted_input1) {\n      difference = shifted_input1 & 1;\n      shifted_input1 = shifted_input1 >> 1;\n      result1 = (uint)(difference != 0) << 0x1f | result1 >> 1;\n      difference = shifted_input2;\n      if (0xfd < shifted_input2) goto LAB_08000bde;\n    }\n  }\n  shifted_input1 = shifted_input1 + difference * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    shifted_input1 = shifted_input1 & 0xfffffffe;\n  }\n  return shifted_input1 | input1;\n}\n\n",
            "current_name": "calculate_float_08000aa8",
            "entrypoint": "0x08000aa8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000aa8": "calculate_float_08000aa8",
                "LZCOUNT": "leading_zero_count",
                "bVar7": "is_zero",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "result1",
                "uVar4": "shifted_input1",
                "uVar5": "shifted_input2",
                "uVar6": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000c08": {
            "additional_data": {
                "(param_1 >> (0x20 - (leading_zeroes + 0x18) & 0xff)) - ((int)shifted_input_value_2 >> 0x1f)": {
                    "1": "result"
                },
                "(shifted_input_value_2 & 0x7fffffff)": {
                    "1": "masked_shifted_value"
                },
                "(uint)(0x7fffffff < mask)": {
                    "1": "is_mask_overflow"
                },
                "0U >> (0x20 - uVar2 & 0xff)": {
                    "1": "shifted_zeroes"
                },
                "FUN_08000c08": {
                    "1": "calculate_modified_value",
                    "2": "calculate_hash",
                    "3": "reverse_bits",
                    "4": "calculate_result"
                },
                "LZCOUNT": {
                    "1": "count_leading_zeros"
                },
                "iVar3": {
                    "1": "multiplier",
                    "11": "constant",
                    "2": "offset",
                    "4": "constant_value"
                },
                "param_1": {
                    "1": "input_data",
                    "10": "input",
                    "17": "input_value",
                    "2": "input_num"
                },
                "param_1 << (leading_zeroes + 0x18)": {
                    "1": "shifted_input_value_2"
                },
                "param_1 << shifted_amount": {
                    "1": "shifted_input_value"
                },
                "uVar": {
                    "1": "result"
                },
                "uVar1": {
                    "1": "leading_zeros_count",
                    "12": "leading_zeros",
                    "2": "bit_count",
                    "4": "leading_zero_count",
                    "7": "result"
                },
                "uVar1 & 0xfffffffe": {
                    "1": "cleared_lsbit"
                },
                "uVar1 & ~(shifted_input_value_2 >> 0x1f)": {
                    "1": "cleared_msbit"
                },
                "uVar1 > 7": {
                    "1": "is_greater_than_seven"
                },
                "uVar1_addition": {
                    "1": "leading_zero_count_addition"
                },
                "uVar1_addition_final": {
                    "1": "leading_zero_count_addition_final"
                },
                "uVar1_final": {
                    "1": "leading_zero_count_final"
                },
                "uVar1_result_and": {
                    "1": "leading_zero_count_result_and"
                },
                "uVar1_result_and_final": {
                    "1": "leading_zero_count_result_and_final"
                },
                "uVar1_result_shift": {
                    "1": "leading_zero_count_result_shift"
                },
                "uVar1_result_shift_final": {
                    "1": "leading_zero_count_result_shift_final"
                },
                "uVar1_shift": {
                    "1": "leading_zero_count_shift"
                },
                "uVar1_shift_final": {
                    "1": "leading_zero_count_shift_final"
                },
                "uVar2": {
                    "1": "shift_count",
                    "17": "shift_amount",
                    "2": "shift",
                    "3": "shifted_value"
                },
                "uVar2 & 0xff": {
                    "1": "shifted_amount"
                },
                "uVar2_check": {
                    "1": "shift_amount_check"
                },
                "uVar2_check_final": {
                    "1": "shift_amount_check_final"
                },
                "uVar2_condition": {
                    "1": "shift_amount_condition"
                },
                "uVar2_condition_final": {
                    "1": "shift_amount_condition_final"
                },
                "uVar2_final": {
                    "1": "shift_amount_final"
                },
                "uVar2_final_shift": {
                    "1": "shift_amount_final_shift"
                },
                "uVar2_final_shift_final": {
                    "1": "shift_amount_final_shift_final"
                },
                "uVar2_input_shift": {
                    "1": "shift_amount_input_shift"
                },
                "uVar2_input_shift_final": {
                    "1": "shift_amount_input_shift_final"
                },
                "uVar2_negate": {
                    "1": "shift_amount_negate"
                },
                "uVar2_negate_final": {
                    "1": "shift_amount_negate_final"
                },
                "uVar2_overflow_check": {
                    "1": "shift_amount_overflow_check"
                },
                "uVar2_overflow_check_final": {
                    "1": "shift_amount_overflow_check_final"
                },
                "uVar2_result_shift": {
                    "1": "shift_amount_result_shift"
                },
                "uVar2_result_shift_final": {
                    "1": "shift_amount_result_shift_final"
                },
                "uVar2_zero_check": {
                    "1": "shift_amount_zero_check"
                },
                "uVar2_zero_check_final": {
                    "1": "shift_amount_zero_check_final"
                },
                "uVar3": {
                    "1": "shift_value"
                },
                "uVar4": {
                    "1": "carry_bit",
                    "15": "mask",
                    "2": "result",
                    "4": "temp_value"
                },
                "uVar4 == 0x80000000": {
                    "1": "is_mask_negative"
                },
                "uVar4_final": {
                    "1": "overflow_check_final"
                },
                "uVar5": {
                    "1": "temp_value",
                    "2": "result"
                },
                "uVar6": {
                    "1": "negative_flag"
                },
                "uVar7": {
                    "1": "temp_num",
                    "2": "mask2"
                },
                "uVar8": {
                    "1": "final_result"
                },
                "uVarX": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nuint calculate_result_08000c08(uint input_value)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  int constant;\n  uint mask;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeros = count_leading_zeros(input_value);\n  shift_amount = leading_zeros - 8;\n  constant = shift_amount * -0x800000 + 0x4a800000;\n  if (7 < leading_zeros) {\n    mask = 0 << (shift_amount & 0xff);\n    leading_zeros = constant + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leading_zeros = leading_zeros & 0xfffffffe;\n    }\n    return leading_zeros;\n  }\n  shift_amount = input_value << leading_zeros + 0x18;\n  leading_zeros = constant + ((input_value >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    leading_zeros = leading_zeros & ~(shift_amount >> 0x1f);\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "calculate_result_08000c08",
            "entrypoint": "0x08000c08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000c08": "calculate_result_08000c08",
                "LZCOUNT": "count_leading_zeros",
                "iVar3": "constant",
                "param_1": "input_value",
                "uVar": "result",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar4": "mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000c10": {
            "additional_data": {
                "FUN_08000c10": {
                    "1": "calculate_unsigned_value",
                    "11": "count_leading_zeros",
                    "2": "calculate_unsigned"
                },
                "LZCOUNT": {
                    "1": "count_leading_zeros"
                },
                "iVar4": {
                    "1": "output",
                    "2": "modified_value",
                    "21": "result",
                    "3": "adjusted_value"
                },
                "param_1": {
                    "1": "input_number",
                    "18": "input",
                    "2": "number",
                    "8": "input_value"
                },
                "uVar1": {
                    "1": "num_set_bits",
                    "2": "leading_zero_count",
                    "22": "leading_zeros"
                },
                "uVar1_new": {
                    "1": "leading_zeros_minus8"
                },
                "uVar2": {
                    "1": "shift_count",
                    "18": "shift_amount",
                    "2": "shift",
                    "3": "shift_val"
                },
                "uVar2_new": {
                    "1": "shift_val_plus24"
                },
                "uVar2_new2": {
                    "1": "significant_bits"
                },
                "uVar2_new3": {
                    "1": "shift_value_minus31"
                },
                "uVar3": {
                    "1": "input_sign",
                    "2": "sign_mask",
                    "20": "sign_bit",
                    "5": "is_negative"
                },
                "uVar3_new": {
                    "1": "is_negative_adjusted"
                },
                "uVar3_new2": {
                    "1": "temp"
                },
                "uVar3_new3": {
                    "1": "temp_masked"
                },
                "uVar3_new4": {
                    "1": "adjusted_result"
                },
                "uVar3_new5": {
                    "1": "mask"
                },
                "uVar3_new6": {
                    "1": "result_adjusted"
                },
                "uVarX": {
                    "1": "temp1"
                },
                "uVarY": {
                    "1": "temp2"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_08004ae0",
                "FUN_080049cc"
            ],
            "code": "\nuint count_leading_zeros_08000c10(uint input)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeros = count_leading_zeros_08000c10(input);\n  shift_amount = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_bit = result + (input << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = input << leading_zeros + 0x18;\n  sign_bit = result + ((input >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "current_name": "count_leading_zeros_08000c10",
            "entrypoint": "0x08000c10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000c10": "count_leading_zeros_08000c10",
                "LZCOUNT": "count_leading_zeros",
                "iVar4": "result",
                "param_1": "input",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000cb8": {
            "additional_data": {
                "FUN_08000cb8": {
                    "1": "float_to_u_int",
                    "11": "calculate_float",
                    "12": "calculate_floating_point"
                },
                "bVar10": {
                    "1": "is_sum_minus_0x7f_negative",
                    "14": "is_negative",
                    "3": "flag2"
                },
                "bVar9": {
                    "1": "is_equal",
                    "13": "is_zero",
                    "2": "is_input1_zero",
                    "3": "is_zero1"
                },
                "iVar4": {
                    "1": "sum_bytes",
                    "16": "sum",
                    "2": "sum_shifted_inputs"
                },
                "iVar5": {
                    "1": "sum_adjusted",
                    "2": "shifted_sum",
                    "6": "diff",
                    "8": "difference"
                },
                "iVar7": {
                    "1": "bit_difference_abs",
                    "2": "shift_amount",
                    "3": "count"
                },
                "lVar1": {
                    "1": "longlong_result",
                    "7": "product"
                },
                "param_1": {
                    "1": "input_a",
                    "17": "input1",
                    "3": "num1",
                    "4": "value1"
                },
                "param_2": {
                    "1": "input_b",
                    "17": "input2",
                    "3": "input_2",
                    "4": "value2"
                },
                "param_3": {
                    "1": "modifier1",
                    "10": "input3",
                    "2": "value3",
                    "5": "param3"
                },
                "param_4": {
                    "1": "first_byte2",
                    "10": "input4",
                    "2": "value4",
                    "5": "param4"
                },
                "param_4_copy": {
                    "1": "first_byte_of_input2"
                },
                "return": {
                    "1": "output"
                },
                "uVar2": {
                    "1": "extracted_input2",
                    "30": "result"
                },
                "uVar3": {
                    "1": "shift_val1",
                    "2": "exponent1",
                    "3": "shift1",
                    "4": "shifted_input1"
                },
                "uVar4": {
                    "1": "shifted_result"
                },
                "uVar5": {
                    "1": "shifted_input_2"
                },
                "uVar6": {
                    "1": "value1",
                    "2": "temp1",
                    "6": "product"
                },
                "uVar7": {
                    "1": "shifted_input_1"
                },
                "uVar8": {
                    "1": "result_with_sign",
                    "2": "combined",
                    "4": "temp"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nuint calculate_floating_point_08000cb8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  longlong product;\n  uint result;\n  uint shifted_input1;\n  int sum;\n  int difference;\n  uint product;\n  int count;\n  uint temp;\n  bool is_zero;\n  bool is_negative;\n  \n  shifted_input1 = input1 >> 0x17 & 0xff;\n  is_zero = shifted_input1 == 0;\n  if (!is_zero) {\n    input4 = input2 >> 0x17 & 0xff;\n    is_zero = input4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = shifted_input1 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = input4 == 0xff;\n  }\n  if (is_zero) {\n    input4 = input2 >> 0x17 & 0xff;\n    if (shifted_input1 == 0xff || input4 == 0xff) {\n      is_zero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        is_zero = input2 == 0;\n        result = input1;\n      }\n      if (!is_zero) {\n        is_zero = input2 == 0x80000000;\n      }\n      temp = result;\n      if (((is_zero) || ((shifted_input1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((input4 == 0xff && (temp = input2, (input2 & 0x7fffff) != 0)))) {\n        output temp | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_08000e08;\n    }\n    is_zero = (input1 & 0x7fffffff) == 0;\n    if (!is_zero) {\n      is_zero = (input2 & 0x7fffffff) == 0;\n    }\n    if (is_zero) {\n      output (input1 ^ input2) & 0x80000000;\n    }\n    is_zero = shifted_input1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input1 = input1 << 1;\n        is_zero = (input1 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      shifted_input1 = shifted_input1 - 1;\n    }\n    input1 = input1 | result;\n    is_zero = input4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input2 = input2 << 1;\n        is_zero = (input2 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      input4 = input4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = shifted_input1 + input4;\n  temp = input1 ^ input2;\n  shifted_input1 = input1 << 9;\n  is_zero = shifted_input1 == 0;\n  if (!is_zero) {\n    input2 = input2 << 9;\n    is_zero = input2 == 0;\n  }\n  if (is_zero) {\n    if (shifted_input1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = temp & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    is_negative = SBORROW4(sum,0x7f);\n    difference = sum + -0x7f;\n    is_zero = difference == 0;\n    count = difference;\n    if (!is_zero && 0x7e < sum) {\n      is_negative = SBORROW4(0xff,difference);\n      count = 0xff - difference;\n      is_zero = difference == 0xff;\n    }\n    if (!is_zero && count < 0 == is_negative) {\n      result = result | difference * 0x800000;\n    }\n    if (!is_zero && count < 0 == is_negative) {\n      output result;\n    }\n    result = result | 0x800000;\n    product = 0;\n    is_negative = SBORROW4(difference,1);\n    temp = sum - 0x80;\n    is_zero = temp == 0;\n    shifted_input1 = temp;\n  }\n  else {\n    product = (ulonglong)(shifted_input1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    product = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    is_zero = result < 0x800000;\n    if (is_zero) {\n      result = result << 1;\n    }\n    if (is_zero) {\n      result = result | product >> 0x1f;\n      product = product << 1;\n    }\n    result = temp & 0x80000000 | result;\n    temp = (sum + -0x7f) - (uint)is_zero;\n    is_negative = SBORROW4(temp,0xfd);\n    is_zero = temp == 0xfd;\n    shifted_input1 = temp - 0xfd;\n    if (temp < 0xfe) {\n      result = result + temp * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      output result;\n    }\n  }\n  if (is_zero || (int)shifted_input1 < 0 != is_negative) {\n    is_zero = (int)(temp + 0x19) < 0;\n    if (temp == 0xffffffe7 || is_zero != SCARRY4(temp,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (temp != 0xffffffe7 && is_zero == SCARRY4(temp,0x19)) {\n      shifted_input1 = (result << 1) >> (-temp & 0xff);\n      temp = result << (temp + 0x20 & 0xff);\n      shifted_input1 = ((uint)((result & 0x80000000) != 0) << 0x1f | shifted_input1 >> 1) + (uint)((byte)shifted_input1 & 1);\n      if ((product | temp << 1) == 0) {\n        shifted_input1 = shifted_input1 & ~(temp >> 0x1f);\n      }\n      output shifted_input1;\n    }\n    output result;\n  }\nLAB_08000e08:\n  output result & 0x80000000 | 0x7f800000;\n}\n\n",
            "current_name": "calculate_floating_point_08000cb8",
            "entrypoint": "0x08000cb8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000cb8": "calculate_floating_point_08000cb8",
                "bVar10": "is_negative",
                "bVar9": "is_zero",
                "iVar4": "sum",
                "iVar5": "difference",
                "iVar7": "count",
                "lVar1": "product",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "return": "output",
                "uVar2": "result",
                "uVar3": "shifted_input1",
                "uVar6": "product",
                "uVar8": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000e20": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "convert_float_to_int"
                },
                "<param_1>": {
                    "1": "input_float"
                },
                "<param_2>": {
                    "1": "param_2"
                },
                "<param_3>": {
                    "1": "param_3"
                },
                "<param_4>": {
                    "1": "param_4"
                },
                "FUN_08000e20": {
                    "1": "float_to_u_int",
                    "10": "calculate_float",
                    "2": "calculate_float_value",
                    "6": "calculate_floating_point"
                },
                "SBORROW4": {
                    "1": "signed_borrow"
                },
                "SCARRY4": {
                    "1": "signed_carry"
                },
                "bVar10": {
                    "1": "is_carry2"
                },
                "bVar11": {
                    "1": "is_carry3"
                },
                "bVar7": {
                    "1": "temp_var7",
                    "12": "is_zero",
                    "4": "flag1",
                    "6": "condition1"
                },
                "bVar8": {
                    "1": "temp_var8",
                    "2": "is_negative",
                    "3": "b_var8",
                    "4": "flag2",
                    "5": "is_overflow",
                    "6": "condition2"
                },
                "bVar9": {
                    "1": "is_signed_overflow",
                    "2": "carry_flag",
                    "3": "b_var9",
                    "4": "flag3",
                    "6": "condition3"
                },
                "iVar3": {
                    "1": "float_diff",
                    "10": "difference",
                    "3": "temp3",
                    "4": "diff"
                },
                "iVar5": {
                    "1": "offset",
                    "2": "adjusted_exponent",
                    "3": "temp5",
                    "5": "sum"
                },
                "param_1": {
                    "1": "float_a",
                    "2": "input_a",
                    "6": "float1",
                    "9": "input1"
                },
                "param_2": {
                    "1": "input_2",
                    "2": "value2",
                    "6": "float2",
                    "9": "input2"
                },
                "param_3": {
                    "1": "unknown_param",
                    "10": "param3",
                    "2": "input3",
                    "5": "unused"
                },
                "param_4": {
                    "1": "w",
                    "2": "float3",
                    "8": "param4"
                },
                "uVar1": {
                    "1": "abs_value1",
                    "2": "result",
                    "8": "temp1"
                },
                "uVar2": {
                    "1": "bit_count1",
                    "2": "temp_var2",
                    "4": "exponent1",
                    "7": "temp2"
                },
                "uVar4": {
                    "1": "shift_count2",
                    "2": "temp_var4",
                    "3": "temp4"
                },
                "uVar6": {
                    "1": "output",
                    "2": "temp_var6",
                    "21": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_080049cc",
                "FUN_08004d78"
            ],
            "code": "\nuint calculate_float_08000e20(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  uint temp1;\n  uint temp2;\n  int difference;\n  uint temp3;\n  int sum;\n  uint result;\n  bool is_zero;\n  bool condition2;\n  bool condition3;\n  \n  temp2 = input1 >> 0x17 & 0xff;\n  is_zero = temp2 == 0;\n  if (!is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    is_zero = param4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = temp2 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = param4 == 0xff;\n  }\n  if (is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    result = input1;\n    if (temp2 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (result = input2, param4 == 0xff)) {\nLAB_08000e16:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (param4 == 0xff) {\n        result = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      is_zero = (input1 & 0x7fffffff) == 0;\n      if (!is_zero) {\n        is_zero = (input2 & 0x7fffffff) == 0;\n      }\n      if (!is_zero) {\n        is_zero = temp2 == 0;\n        result = input1 & 0x80000000;\n        while( true ) {\n          if (is_zero) {\n            input1 = input1 << 1;\n            is_zero = (input1 & 0x800000) == 0;\n          }\n          if (!is_zero) break;\n          temp2 = temp2 - 1;\n        }\n        input1 = input1 | result;\n        is_zero = param4 == 0;\n        result = input2 & 0x80000000;\n        while( true ) {\n          if (is_zero) {\n            input2 = input2 << 1;\n            is_zero = (input2 & 0x800000) == 0;\n          }\n          if (!is_zero) break;\n          param4 = param4 - 1;\n        }\n        input2 = input2 | result;\n        goto LAB_08000e38;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_08000e38:\n    difference = temp2 - param4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      condition3 = signed_carry(difference,0x7f);\n      sum = difference + 0x7f;\n      is_zero = sum < 0;\n      condition2 = sum == 0;\n      if (!condition2 && is_zero == condition3) {\n        condition3 = signed_borrow(0xff,sum);\n        is_zero = 0xff - sum < 0;\n        condition2 = sum == 0xff;\n      }\n      if (!condition2 && is_zero == condition3) {\n        input1 = input1 | sum * 0x800000;\n      }\n      if (!condition2 && is_zero == condition3) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      temp2 = 0;\n      condition2 = signed_borrow(sum,1);\n      temp3 = difference + 0x7e;\n      is_zero = temp3 == 0;\n      result = temp3;\n    }\n    else {\n      temp1 = (input2 << 9) >> 4 | 0x10000000;\n      temp2 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      is_zero = temp1 <= temp2;\n      if (!is_zero) {\n        temp2 = temp2 << 1;\n      }\n      temp3 = difference + 0x7d + (uint)is_zero;\n      result = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          input1 = input1 | result;\n        }\n        is_zero = temp1 >> 1 <= temp2;\n        if (is_zero) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (is_zero) {\n          input1 = input1 | result >> 1;\n        }\n        is_zero = temp1 >> 2 <= temp2;\n        if (is_zero) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (is_zero) {\n          input1 = input1 | result >> 2;\n        }\n        is_zero = temp1 >> 3 <= temp2;\n        if (is_zero) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (is_zero) {\n          input1 = input1 | result >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        is_zero = temp2 == 0;\n        if (!is_zero) {\n          result = result >> 4;\n          is_zero = result == 0;\n        }\n      } while (!is_zero);\n      condition2 = signed_borrow(temp3,0xfd);\n      is_zero = temp3 == 0xfd;\n      result = temp3 - 0xfd;\n      if (temp3 < 0xfe) {\n        input1 = input1 + temp3 * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (is_zero || (int)result < 0 != condition2) {\n      is_zero = (int)(temp3 + 0x19) < 0;\n      if (temp3 == 0xffffffe7 || is_zero != signed_carry(temp3,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (temp3 == 0xffffffe7 || is_zero != signed_carry(temp3,0x19)) {\n        return input1;\n      }\n      result = (input1 << 1) >> (-temp3 & 0xff);\n      temp3 = input1 << (temp3 + 0x20 & 0xff);\n      result = ((uint)((input1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((temp2 | temp3 << 1) == 0) {\n        result = result & ~(temp3 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "current_name": "calculate_float_08000e20",
            "entrypoint": "0x08000e20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000e20": "calculate_float_08000e20",
                "SBORROW4": "signed_borrow",
                "SCARRY4": "signed_carry",
                "bVar7": "is_zero",
                "bVar8": "condition2",
                "bVar9": "condition3",
                "iVar3": "difference",
                "iVar5": "sum",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar4": "temp3",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000f68": {
            "additional_data": {
                "(int)param_2 >> 0x1f": {
                    "1": "input2_sign_shifted"
                },
                "FUN_08000f68": {
                    "1": "check_overflow_and_sign",
                    "2": "multiply_and_compare",
                    "8": "calculate_result",
                    "9": "check_overflow"
                },
                "bVar1": {
                    "1": "is_negative_result_or",
                    "18": "is_negative",
                    "2": "is_overflow"
                },
                "bVar5": {
                    "1": "is_zero_result_or",
                    "2": "is_combined_zero",
                    "21": "is_zero",
                    "3": "is_combined_input_zero"
                },
                "param_1": {
                    "1": "input_a",
                    "15": "input_1",
                    "2": "value1",
                    "3": "input1",
                    "4": "input_value_1"
                },
                "param_1 & 0x7fffff": {
                    "1": "input1_without_sign"
                },
                "param_1 + param_2 * -2": {
                    "1": "input1_minus_input2_times2"
                },
                "param_1 ^ param_2": {
                    "1": "inputs_xor"
                },
                "param_2": {
                    "1": "num2",
                    "16": "input_2",
                    "2": "value2",
                    "4": "input_value_2"
                },
                "param_2 & 0x7fffff": {
                    "1": "input_value_2_bitmask"
                },
                "return": {
                    "2": "result"
                },
                "return_value": {
                    "2": "result"
                },
                "uVar2": {
                    "1": "result_1",
                    "2": "double_input1",
                    "3": "doubled_input_value_1",
                    "4": "input_1_times_2",
                    "5": "input_1_doubled"
                },
                "uVar3": {
                    "1": "num2_times_2",
                    "2": "double_value_2",
                    "3": "double_input_2",
                    "4": "input_2_times_2",
                    "5": "input_2_doubled"
                },
                "uVar4": {
                    "1": "combined_nums_with_sign",
                    "2": "bitwise_or_result",
                    "3": "combined_values",
                    "4": "combined_value",
                    "7": "combined_input",
                    "8": "combined_inputs"
                }
            },
            "called": [],
            "calling": [
                "FUN_08000fd0"
            ],
            "code": "\nuint check_overflow_08000f68(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint input_1_doubled;\n  uint input_2_doubled;\n  uint combined_inputs;\n  bool is_zero;\n  \n  input_1_doubled = input_1 * 2;\n  input_2_doubled = input_2 * 2;\n  if (((int)input_1_doubled >> 0x18 == -1 || (int)input_2_doubled >> 0x18 == -1) &&\n     ((((int)input_1_doubled >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_doubled >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_inputs = input_1_doubled | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = input_1_doubled + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && input_2_doubled <= input_1_doubled) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || input_2_doubled > input_1_doubled) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  result input_1;\n}\n\n",
            "current_name": "check_overflow_08000f68",
            "entrypoint": "0x08000f68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000f68": "check_overflow_08000f68",
                "bVar1": "is_negative",
                "bVar5": "is_zero",
                "param_1": "input_1",
                "param_2": "input_2",
                "return": "result",
                "uVar2": "input_1_doubled",
                "uVar3": "input_2_doubled",
                "uVar4": "combined_inputs"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000fc8": {
            "additional_data": {
                "FUN_08000fc8": {
                    "25": "concatenate_parameters",
                    "6": "concatenate_params"
                },
                "param_1": {
                    "1": "first_parameter",
                    "12": "destination",
                    "2": "source_parameter",
                    "3": "first_param"
                },
                "param_2": {
                    "1": "first_param",
                    "12": "source",
                    "2": "destination_parameter",
                    "3": "second_param",
                    "4": "src"
                }
            },
            "called": [
                "FUN_08000fd0"
            ],
            "calling": [
                "FUN_08001030"
            ],
            "code": "\nvoid concatenate_parameters_08000fc8(undefined4 destination,undefined4 source)\n\n{\n  concatenate_parameters_08000fc8_08000fd0(source,destination);\n  return;\n}\n\n",
            "current_name": "concatenate_parameters_08000fc8",
            "entrypoint": "0x08000fc8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000fc8": "concatenate_parameters_08000fc8",
                "param_1": "destination",
                "param_2": "source"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000fd0": {
            "additional_data": {
                "FUN_08000fd0": {
                    "1": "concatenate_32_bit_parameters",
                    "2": "combine_params",
                    "3": "concatenate_values",
                    "4": "concatenate_integers",
                    "5": "concatenate_and_return",
                    "7": "concatenate_parameters"
                },
                "param_1": {
                    "1": "integer_param1",
                    "14": "first_parameter",
                    "3": "first_integer",
                    "6": "first_param"
                },
                "param_2": {
                    "1": "param_2",
                    "14": "second_parameter",
                    "3": "second_integer",
                    "6": "second_param"
                }
            },
            "called": [
                "FUN_08000f68"
            ],
            "calling": [
                "FUN_08000fc8",
                "FUN_08000ff4"
            ],
            "code": "\nundefined8 concatenate_parameters_08000fd0(undefined4 first_parameter,undefined4 second_parameter)\n\n{\n  check_overflow_08000f68();\n  return CONCAT44(second_parameter,first_parameter);\n}\n\n",
            "current_name": "concatenate_parameters_08000fd0",
            "entrypoint": "0x08000fd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000fd0": "concatenate_parameters_08000fd0",
                "param_1": "first_parameter",
                "param_2": "second_parameter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000ff4": {
            "additional_data": {
                "FUN_08000ff4": {
                    "1": "is_carry_zero",
                    "2": "check_null_termination",
                    "3": "check_if_concatenated_parameters_are_empty",
                    "4": "is_cy_null",
                    "5": "is_null_terminated"
                },
                "concatenate_parameters_08000fd0": {
                    "1": "combine_parameters_08000fd0",
                    "5": "concatenate_parameters"
                },
                "in_CY": {
                    "1": "last_character",
                    "13": "input_character",
                    "2": "character",
                    "7": "input_char"
                }
            },
            "called": [
                "FUN_08000fd0"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nbool is_null_terminated_08000ff4(void)\n\n{\n  char input_character;\n  \n  concatenate_parameters();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "is_null_terminated_08000ff4",
            "entrypoint": "0x08000ff4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000ff4": "is_null_terminated_08000ff4",
                "concatenate_parameters_08000fd0": "concatenate_parameters",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001030": {
            "additional_data": {
                "FUN_08001030": {
                    "1": "check_if_parameters_concatenated",
                    "2": "is_concatenation_empty",
                    "3": "is_string_empty",
                    "4": "check_if_concatenated_parameters_are_empty",
                    "5": "is_concatenation_successful"
                },
                "concatenate_parameters_08000fc8": {
                    "1": "concatenate_parameters"
                },
                "in_CY": {
                    "1": "concatenated_params_are_empty",
                    "16": "input_character",
                    "2": "concatenation_result",
                    "3": "character",
                    "4": "input_char"
                }
            },
            "called": [
                "FUN_08000fc8"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nbool is_concatenation_successful_08001030(void)\n\n{\n  char input_character;\n  \n  concatenate_parameters();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "is_concatenation_successful_08001030",
            "entrypoint": "0x08001030",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001030": "is_concatenation_successful_08001030",
                "concatenate_parameters_08000fc8": "concatenate_parameters",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001044": {
            "additional_data": {
                "0x18": {
                    "1": "shift_bits"
                },
                "0x7f000000": {
                    "1": "upper_bound"
                },
                "0x7fffff": {
                    "1": "lower_bound"
                },
                "0x8": {
                    "1": "byte_shift"
                },
                "0x80000000": {
                    "2": "msb_mask"
                },
                "0x9e": {
                    "1": "magic_number"
                },
                "0xffffff9f": {
                    "1": "negative_value"
                },
                "0xffffffff": {
                    "1": "invalid_hash"
                },
                "FUN_08001044": {
                    "1": "check_parameter_validity",
                    "3": "decode_value",
                    "4": "extract_bits",
                    "5": "calculate_shifted_value"
                },
                "param_1": {
                    "1": "number",
                    "16": "input_value",
                    "2": "input_number",
                    "4": "value",
                    "5": "input"
                },
                "uVar1": {
                    "1": "shifted_bits",
                    "19": "shift_amount",
                    "2": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nuint calculate_shifted_value_08001044(uint input_value)\n\n{\n  uint shift_amount;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "calculate_shifted_value_08001044",
            "entrypoint": "0x08001044",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001044": "calculate_shifted_value_08001044",
                "param_1": "input_value",
                "uVar1": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001084": {
            "additional_data": {
                "FUN_08001084": {
                    "1": "memcpy",
                    "24": "copy_memory",
                    "4": "copy_data"
                },
                "LAB_08001108": {
                    "1": "partial_copy_label"
                },
                "bVar6": {
                    "1": "do_copy",
                    "2": "is_remaining_size_non_zero",
                    "3": "is_looping",
                    "5": "is_remaining",
                    "9": "loop_condition"
                },
                "param_1": {
                    "1": "dst",
                    "11": "dest",
                    "19": "destination"
                },
                "param_2": {
                    "12": "src",
                    "19": "source"
                },
                "param_3": {
                    "1": "num_bytes",
                    "22": "size",
                    "8": "length"
                },
                "puVar1": {
                    "1": "dest_pointer",
                    "2": "dst_ptr",
                    "27": "dest_ptr"
                },
                "puVar2": {
                    "1": "dst_end_ptr",
                    "11": "src_ptr",
                    "2": "dest_end",
                    "4": "dest_end_ptr"
                },
                "puVar3": {
                    "1": "src",
                    "12": "src_ptr",
                    "2": "temp_dest_ptr",
                    "4": "temp_ptr"
                },
                "uVar4": {
                    "1": "temp2",
                    "13": "remaining_size",
                    "2": "temp_size",
                    "7": "remaining_length"
                },
                "uVar5": {
                    "1": "temp_count",
                    "2": "loop_size",
                    "3": "loop_counter"
                }
            },
            "called": [],
            "calling": [
                "FUN_08009120",
                "FUN_080097cc",
                "FUN_080079e8"
            ],
            "code": "\nundefined4 * copy_memory_08001084(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint loop_counter;\n  bool loop_condition;\n  \n  src_ptr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      loop_counter = size - 4;\n      if (3 < size) {\n        do {\n          dest_ptr = source;\n          src_ptr = src_ptr;\n          loop_condition = loop_counter != 0;\n          loop_counter = loop_counter - 1;\n          *(undefined *)src_ptr = *(undefined *)dest_ptr;\n          src_ptr = (undefined4 *)((int)src_ptr + 1);\n          source = (undefined4 *)((int)dest_ptr + 1);\n        } while (loop_condition);\n        *(undefined *)(undefined4 *)((int)src_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)dest_ptr + 1);\n        *(undefined *)((int)src_ptr + 2) = *(undefined *)((int)dest_ptr + 2);\n        *(undefined *)((int)src_ptr + 3) = *(undefined *)((int)dest_ptr + 3);\n        return destination;\n      }\n      goto copy_remaining_bytes;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      loop_counter = 4 - ((uint)destination & 3);\n      size = size - loop_counter;\n      dest_ptr = destination;\n      src_ptr = source;\n      if (((uint)destination & 1) != 0) {\n        src_ptr = (undefined4 *)((int)source + 1);\n        dest_ptr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      src_ptr = dest_ptr;\n      source = src_ptr;\n      if ((loop_counter & 2) != 0) {\n        source = (undefined4 *)((int)src_ptr + 2);\n        src_ptr = (undefined4 *)((int)dest_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *src_ptr = *source;\n    src_ptr[1] = source[1];\n    src_ptr[2] = source[2];\n    src_ptr[3] = source[3];\n    src_ptr[4] = source[4];\n    src_ptr[5] = source[5];\n    src_ptr[6] = source[6];\n    src_ptr[7] = source[7];\n    src_ptr[8] = source[8];\n    src_ptr[9] = source[9];\n    src_ptr[10] = source[10];\n    src_ptr[0xb] = source[0xb];\n    src_ptr[0xc] = source[0xc];\n    src_ptr[0xd] = source[0xd];\n    src_ptr[0xe] = source[0xe];\n    src_ptr[0xf] = source[0xf];\n    src_ptr = src_ptr + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remaining_size = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *src_ptr = *source;\n      src_ptr[1] = source[1];\n      src_ptr[2] = source[2];\n      src_ptr[3] = source[3];\n      src_ptr = src_ptr + 4;\n      source = source + 4;\n      loop_condition = 0xf < remaining_size;\n      remaining_size = remaining_size - 0x10;\n    } while (loop_condition);\n  }\n  loop_counter = remaining_size + 0xc;\n  src_ptr = src_ptr;\n  dest_ptr = source;\n  if (0xfffffff3 < remaining_size) {\n    do {\n      source = dest_ptr + 1;\n      *src_ptr = *dest_ptr;\n      loop_condition = 3 < loop_counter;\n      loop_counter = loop_counter - 4;\n      src_ptr = src_ptr + 1;\n      src_ptr = src_ptr + 1;\n      dest_ptr = source;\n    } while (loop_condition);\n  }\ncopy_remaining_bytes:\n  if (loop_counter + 4 != 0) {\n    dest_ptr = src_ptr;\n    src_ptr = source;\n    if ((loop_counter & 1) != 0) {\n      src_ptr = (undefined4 *)((int)source + 1);\n      dest_ptr = (undefined4 *)((int)src_ptr + 1);\n      *(undefined *)src_ptr = *(undefined *)source;\n    }\n    if ((loop_counter + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n    }\n  }\n  return destination;\n}\n\n",
            "current_name": "copy_memory_08001084",
            "entrypoint": "0x08001084",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001084": "copy_memory_08001084",
                "LAB_08001108": "copy_remaining_bytes",
                "bVar6": "loop_condition",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "puVar3": "src_ptr",
                "uVar4": "remaining_size",
                "uVar5": "loop_counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001170": {
            "additional_data": {
                "FUN_08001170": {
                    "1": "check_valid_params",
                    "9": "check_params"
                },
                "param_1": {
                    "1": "input_param",
                    "5": "input_1",
                    "6": "value_1",
                    "8": "input1",
                    "9": "value1"
                },
                "param_2": {
                    "1": "bitshifted_value_2",
                    "5": "input_2",
                    "8": "input2",
                    "9": "value2"
                },
                "param_3": {
                    "1": "input_param2",
                    "5": "input_3",
                    "6": "value_3",
                    "8": "input3",
                    "9": "value3"
                },
                "param_4": {
                    "1": "shifted_param2",
                    "5": "input_4",
                    "8": "input4",
                    "9": "value4"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nundefined4 check_parameters_08001170(uint value1,int value2,uint value3,int value4)\n\n{\n  if ((((value2 << 1) >> 0x15 != -1) || ((value1 | value2 << 0xc) == 0)) &&\n     (((value4 << 1) >> 0x15 != -1 || ((value3 | value4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "check_parameters_08001170",
            "entrypoint": "0x08001170",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001170": "check_parameters_08001170",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800119c": {
            "additional_data": {
                "FUN_0800119c": {
                    "1": "reverse_bits_and_sign_extend",
                    "2": "calculate_modified_value",
                    "3": "reverse_and_shift"
                },
                "iVar2": {
                    "1": "temp1",
                    "2": "offset",
                    "3": "result2",
                    "4": "multiplied_value"
                },
                "param_1": {
                    "1": "operand1",
                    "2": "dividend",
                    "4": "input_value_1",
                    "7": "input_value1",
                    "8": "input_value"
                },
                "param_2": {
                    "1": "value_limit",
                    "2": "input_2",
                    "3": "multiplier",
                    "4": "input_value_2",
                    "6": "input2"
                },
                "param_2 & 0x80000000": {
                    "1": "is_negative"
                },
                "param_2_mul_2": {
                    "1": "divisor_times_two"
                },
                "param_2_neg": {
                    "1": "divisor_negated"
                },
                "shifted_result_new": {
                    "1": "final_result"
                },
                "shifted_value_corrected": {
                    "1": "input_value_corrected"
                },
                "uVar1": {
                    "1": "quotient",
                    "2": "shifted_result",
                    "7": "result",
                    "9": "shifted_value"
                },
                "uVar1 < 0xfffffc20 && uVar3 != 0": {
                    "1": "result1_condition"
                },
                "uVar1_neg": {
                    "1": "negated_quotient"
                },
                "uVar1_new": {
                    "1": "shifted_result"
                },
                "uVar1_shifted": {
                    "1": "shifted_quotient"
                },
                "uVar2": {
                    "1": "result"
                },
                "uVar3": {
                    "1": "adjusted_shift_amount",
                    "2": "result3",
                    "3": "offset"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "code": "\nuint calculate_value_0800119c(uint input_value,uint input2)\n\n{\n  uint shifted_value;\n  int multiplied_value;\n  uint shift_amount;\n  \n  multiplied_value = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < multiplied_value) {\n      return 0;\n    }\n    shifted_value = multiplied_value >> 0x15;\n    shift_amount = -shifted_value - 0x3e1;\n    if (shifted_value < 0xfffffc20 && shift_amount != 0) {\n      shifted_value = (input2 << 0xb | 0x80000000 | input_value >> 0x15) >> (shift_amount & 0xff);\n      if ((input2 & 0x80000000) != 0) {\n        shifted_value = -shifted_value;\n      }\n      return shifted_value;\n    }\n  }\n  else if ((input_value | input2 << 0xc) != 0) {\n    return 0;\n  }\n  input2 = input2 & 0x80000000;\n  if (input2 == 0) {\n    input2 = 0x7fffffff;\n  }\n  return input2;\n}\n\n",
            "current_name": "calculate_value_0800119c",
            "entrypoint": "0x0800119c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800119c": "calculate_value_0800119c",
                "iVar2": "multiplied_value",
                "param_1": "input_value",
                "param_2": "input2",
                "uVar1": "shifted_value",
                "uVar3": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080011ec": {
            "additional_data": {
                "CONCAT44": {
                    "1": "combine_values"
                },
                "FUN_080011ec": {
                    "31": "calculate_result"
                },
                "param_1": {
                    "1": "num1",
                    "2": "input_param_1",
                    "21": "input_1",
                    "6": "input1"
                },
                "param_2": {
                    "1": "value2",
                    "2": "input_param_2",
                    "21": "input_2",
                    "6": "input2"
                },
                "param_3": {
                    "1": "condition_1",
                    "18": "input_3",
                    "2": "input_param_3",
                    "3": "input3"
                },
                "param_4": {
                    "1": "condition_2",
                    "18": "input_4",
                    "2": "input_param_4",
                    "3": "input4"
                },
                "uVar1": {
                    "22": "result"
                }
            },
            "called": [
                "FUN_0800121c"
            ],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nundefined8 calculate_result_080011ec(int input_1,int input_2,int input_3,int input_4)\n\n{\n  undefined8 result;\n  \n  if ((input_4 == 0) && (input_3 == 0)) {\n    if (input_2 != 0 || input_1 != 0) {\n      input_2 = -1;\n      input_1 = -1;\n    }\n    return combine_values(input_2,input_1);\n  }\n  result = calculate_division_0800121c();\n  return result;\n}\n\n",
            "current_name": "calculate_result_080011ec",
            "entrypoint": "0x080011ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "combine_values",
                "FUN_080011ec": "calculate_result_080011ec",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800121c": {
            "additional_data": {
                "CARRY4": {
                    "1": "is_carry_set"
                },
                "FUN_0800121c": {
                    "1": "dividing_function",
                    "2": "divide_and_remainder",
                    "3": "calculate_remainder_and_quotient",
                    "4": "calculate_division_remainder",
                    "5": "perform_division",
                    "6": "calculate_division"
                },
                "LZCOUNT": {
                    "2": "leading_zero_count"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "udf_table",
                    "2": "jmp_table",
                    "4": "jump_table"
                },
                "bVar13": {
                    "1": "has_carry",
                    "13": "carry_flag",
                    "7": "is_carry"
                },
                "bVar14": {
                    "1": "carry_flag"
                },
                "bVar15": {
                    "1": "carry_flag"
                },
                "iVar5": {
                    "1": "bit_difference",
                    "8": "shift_count",
                    "9": "shift_amount"
                },
                "iVar6": {
                    "1": "shift_amount"
                },
                "param_1": {
                    "1": "input_a",
                    "27": "dividend"
                },
                "param_2": {
                    "1": "dividend_lower_32bits",
                    "2": "dividend_lower",
                    "3": "dividend_upper_bits",
                    "4": "dividend_high",
                    "9": "divisor"
                },
                "param_3": {
                    "1": "quotient",
                    "17": "divisor",
                    "2": "quotient_high"
                },
                "param_4": {
                    "1": "remainder_bits",
                    "2": "quotient_low",
                    "3": "divisor_upper",
                    "4": "divisor_high"
                },
                "param_5": {
                    "1": "output",
                    "13": "remainder",
                    "2": "result",
                    "3": "quotient_and_remainder",
                    "4": "quotient"
                },
                "puVar9": {
                    "1": "quotient_high",
                    "2": "output"
                },
                "software_udf": {
                    "1": "undefined_function"
                },
                "uVar1": {
                    "1": "quotient_product",
                    "3": "result",
                    "4": "quotient",
                    "7": "product"
                },
                "uVar10": {
                    "1": "remainder_final",
                    "2": "temp1",
                    "5": "temp_quotient"
                },
                "uVar11": {
                    "1": "quotient_product3",
                    "3": "temp_product"
                },
                "uVar12": {
                    "1": "temp9",
                    "2": "temp3"
                },
                "uVar13": {
                    "1": "temp_2"
                },
                "uVar14": {
                    "1": "temp_10",
                    "17": "result",
                    "7": "return_value"
                },
                "uVar2": {
                    "1": "quotient_divisor",
                    "2": "quotient_low",
                    "3": "quotient_lower",
                    "5": "quotient",
                    "6": "quotient1"
                },
                "uVar3": {
                    "1": "quotient_upper_bits",
                    "2": "quotient_low",
                    "3": "quotient_upper",
                    "4": "quotient2"
                },
                "uVar4": {
                    "1": "temp4",
                    "2": "quotient3",
                    "4": "temp"
                },
                "uVar5": {
                    "1": "temp2"
                },
                "uVar6": {
                    "1": "quotient_low",
                    "10": "quotient",
                    "2": "result"
                },
                "uVar7": {
                    "1": "dividend_extended",
                    "2": "temp1"
                },
                "uVar8": {
                    "1": "temp9",
                    "2": "temp2",
                    "3": "remainder_low",
                    "7": "remainder"
                },
                "uVar9": {
                    "1": "temp1_divisor"
                }
            },
            "called": [],
            "calling": [
                "FUN_080011ec"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 calculate_division_0800121c(uint dividend,uint divisor,uint divisor,uint divisor_high,uint *remainder)\n\n{\n  code *jump_table;\n  ulonglong product;\n  uint quotient1;\n  uint quotient2;\n  uint temp;\n  int shift_amount;\n  uint quotient;\n  uint temp1;\n  uint remainder;\n  uint *output;\n  uint temp_quotient;\n  uint divisor_high;\n  uint temp6;\n  bool carry_flag;\n  undefined8 result;\n  \n  if (divisor_high == 0) {\n    if (divisor < divisor) {\n      shift_amount = leading_zero_count(divisor);\n      temp1 = divisor;\n      if (shift_amount != 0) {\n        temp1 = divisor << shift_amount;\n        divisor = dividend >> (0x20U - shift_amount & 0xff) | divisor << shift_amount;\n        dividend = dividend << shift_amount;\n      }\n      divisor_high = temp1 >> 0x10;\n      remainder = divisor / divisor_high;\n      temp_quotient = remainder * (temp1 & 0xffff);\n      quotient = dividend >> 0x10 | (divisor - divisor_high * remainder) * 0x10000;\n      quotient2 = remainder;\n      if (quotient <= temp_quotient && temp_quotient - quotient != 0) {\n        carry_flag = is_carry_set(temp1,quotient);\n        quotient = temp1 + quotient;\n        quotient2 = remainder - 1;\n        if ((carry_flag == false) && (quotient <= temp_quotient && temp_quotient - quotient != 0)) {\n          quotient2 = remainder - 2;\n          quotient = quotient + temp1;\n        }\n      }\n      quotient1 = (quotient - temp_quotient) / divisor_high;\n      temp = quotient1 * (temp1 & 0xffff);\n      remainder = dividend & 0xffff | ((quotient - temp_quotient) - divisor_high * quotient1) * 0x10000;\n      quotient = quotient1;\n      if (remainder <= temp && temp - remainder != 0) {\n        carry_flag = is_carry_set(temp1,remainder);\n        remainder = temp1 + remainder;\n        quotient = quotient1 - 1;\n        if ((carry_flag == false) && (remainder <= temp && temp - remainder != 0)) {\n          quotient = quotient1 - 2;\n          remainder = remainder + temp1;\n        }\n      }\n      quotient = quotient | quotient2 << 0x10;\n      output = (uint *)0x0;\n      remainder = remainder - temp;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jump_table = (code *)undefined_function(0xff,0x8001302);\n        result = (*jump_table)();\n        return result;\n      }\n      shift_amount = leading_zero_count(divisor);\n      if (shift_amount == 0) {\n        output = (uint *)0x1;\n        divisor = divisor - divisor;\n        divisor_high = divisor >> 0x10;\n        quotient1 = divisor & 0xffff;\n        temp1 = divisor;\n      }\n      else {\n        temp1 = divisor << shift_amount;\n        quotient = divisor >> (0x20U - shift_amount & 0xff);\n        divisor_high = temp1 >> 0x10;\n        temp_quotient = quotient / divisor_high;\n        quotient1 = temp1 & 0xffff;\n        temp = temp_quotient * quotient1;\n        remainder = dividend >> (0x20U - shift_amount & 0xff) | divisor << shift_amount;\n        quotient2 = remainder >> 0x10 | (quotient - divisor_high * temp_quotient) * 0x10000;\n        dividend = dividend << shift_amount;\n        quotient = temp_quotient;\n        if (quotient2 <= temp && temp - quotient2 != 0) {\n          carry_flag = is_carry_set(temp1,quotient2);\n          quotient2 = temp1 + quotient2;\n          quotient = temp_quotient - 1;\n          if ((carry_flag == false) && (quotient2 <= temp && temp - quotient2 != 0)) {\n            quotient = temp_quotient - 2;\n            quotient2 = quotient2 + temp1;\n          }\n        }\n        temp_quotient = (quotient2 - temp) / divisor_high;\n        temp6 = temp_quotient * quotient1;\n        divisor = remainder & 0xffff | ((quotient2 - temp) - divisor_high * temp_quotient) * 0x10000;\n        quotient2 = temp_quotient;\n        if (divisor <= temp6 && temp6 - divisor != 0) {\n          carry_flag = is_carry_set(temp1,divisor);\n          divisor = temp1 + divisor;\n          quotient2 = temp_quotient - 1;\n          if ((carry_flag == false) && (divisor <= temp6 && temp6 - divisor != 0)) {\n            quotient2 = temp_quotient - 2;\n            divisor = divisor + temp1;\n          }\n        }\n        divisor = divisor - temp6;\n        output = (uint *)(quotient2 | quotient << 0x10);\n      }\n      temp_quotient = divisor / divisor_high;\n      quotient = quotient1 * temp_quotient;\n      remainder = dividend >> 0x10 | (divisor - divisor_high * temp_quotient) * 0x10000;\n      quotient2 = temp_quotient;\n      if (remainder <= quotient && quotient - remainder != 0) {\n        carry_flag = is_carry_set(temp1,remainder);\n        remainder = temp1 + remainder;\n        quotient2 = temp_quotient - 1;\n        if ((carry_flag == false) && (remainder <= quotient && quotient - remainder != 0)) {\n          quotient2 = temp_quotient - 2;\n          remainder = remainder + temp1;\n        }\n      }\n      temp_quotient = (remainder - quotient) / divisor_high;\n      quotient1 = quotient1 * temp_quotient;\n      remainder = dividend & 0xffff | ((remainder - quotient) - divisor_high * temp_quotient) * 0x10000;\n      quotient = temp_quotient;\n      if (remainder <= quotient1 && quotient1 - remainder != 0) {\n        carry_flag = is_carry_set(temp1,remainder);\n        remainder = temp1 + remainder;\n        quotient = temp_quotient - 1;\n        if ((carry_flag == false) && (remainder <= quotient1 && quotient1 - remainder != 0)) {\n          quotient = temp_quotient - 2;\n          remainder = remainder + temp1;\n        }\n      }\n      remainder = remainder - quotient1;\n      quotient = quotient | quotient2 << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = remainder >> leading_zero_count(divisor);\n      remainder[1] = 0;\n    }\n  }\n  else {\n    output = remainder;\n    if (divisor < divisor_high) {\n      if (remainder != (uint *)0x0) {\n        *remainder = dividend;\n        remainder[1] = divisor;\n        return 0;\n      }\n      quotient = 0;\n    }\n    else {\n      shift_amount = leading_zero_count(divisor_high);\n      if (shift_amount == 0) {\n        if ((divisor_high < divisor) || (divisor <= dividend)) {\n          carry_flag = dividend < divisor;\n          dividend = dividend - divisor;\n          divisor = (divisor - divisor_high) - (uint)carry_flag;\n          quotient = 1;\n        }\n        else {\n          quotient = 0;\n        }\n        output = (uint *)0x0;\n        if (remainder != (uint *)0x0) {\n          *remainder = dividend;\n          remainder[1] = divisor;\n        }\n      }\n      else {\n        remainder = 0x20 - shift_amount;\n        quotient1 = divisor >> (remainder & 0xff) | divisor_high << shift_amount;\n        temp1 = divisor >> (remainder & 0xff);\n        temp = quotient1 >> 0x10;\n        temp_quotient = temp1 / temp;\n        divisor_high = temp_quotient * (quotient1 & 0xffff);\n        quotient = divisor << shift_amount | dividend >> (remainder & 0xff);\n        quotient2 = quotient >> 0x10 | (temp1 - temp * temp_quotient) * 0x10000;\n        dividend = dividend << shift_amount;\n        temp1 = temp_quotient;\n        if (quotient2 <= divisor_high && divisor_high - quotient2 != 0) {\n          carry_flag = is_carry_set(quotient1,quotient2);\n          quotient2 = quotient1 + quotient2;\n          temp1 = temp_quotient - 1;\n          if ((carry_flag == false) && (quotient2 <= divisor_high && divisor_high - quotient2 != 0)) {\n            temp1 = temp_quotient - 2;\n            quotient2 = quotient2 + quotient1;\n          }\n        }\n        temp_quotient = (quotient2 - divisor_high) / temp;\n        temp6 = temp_quotient * (quotient1 & 0xffff);\n        quotient2 = quotient & 0xffff | ((quotient2 - divisor_high) - temp * temp_quotient) * 0x10000;\n        quotient = temp_quotient;\n        if (quotient2 <= temp6 && temp6 - quotient2 != 0) {\n          carry_flag = is_carry_set(quotient1,quotient2);\n          quotient2 = quotient1 + quotient2;\n          quotient = temp_quotient - 1;\n          if ((carry_flag == false) && (quotient2 <= temp6 && temp6 - quotient2 != 0)) {\n            quotient = temp_quotient - 2;\n            quotient2 = quotient2 + quotient1;\n          }\n        }\n        quotient = quotient | temp1 << 0x10;\n        product = (ulonglong)quotient * (ulonglong)(divisor << shift_amount);\n        if (CONCAT44(quotient2 - temp6,dividend) < product) {\n          quotient = quotient - 1;\n          product = product - CONCAT44(quotient1,divisor << shift_amount);\n        }\n        if (remainder != (uint *)0x0) {\n          temp1 = ((quotient2 - temp6) - (int)(product >> 0x20)) - (uint)(dividend < (uint)product);\n          *remainder = temp1 << (remainder & 0xff) | dividend - (uint)product >> shift_amount;\n          remainder[1] = temp1 >> shift_amount;\n          output = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(output,quotient);\n}\n\n",
            "current_name": "calculate_division_0800121c",
            "entrypoint": "0x0800121c",
            "imported": false,
            "improved": true,
            "renaming": {
                "CARRY4": "is_carry_set",
                "FUN_0800121c": "calculate_division_0800121c",
                "LZCOUNT": "leading_zero_count",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "bVar13": "carry_flag",
                "iVar5": "shift_amount",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "param_5": "remainder",
                "puVar9": "output",
                "software_udf": "undefined_function",
                "uVar1": "product",
                "uVar10": "temp_quotient",
                "uVar11": "divisor_high",
                "uVar12": "temp6",
                "uVar14": "result",
                "uVar2": "quotient1",
                "uVar3": "quotient2",
                "uVar4": "temp",
                "uVar6": "quotient",
                "uVar7": "temp1",
                "uVar8": "remainder",
                "uVar9": "temp5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080014f0": {
            "additional_data": {
                "FUNC_08002d8a": {
                    "1": "additional_function",
                    "11": "perform_additional_tasks",
                    "2": "execute_function",
                    "3": "perform_task",
                    "7": "execute_additional_function"
                },
                "FUN_080014f0": {
                    "1": "initialize_and_configure",
                    "24": "initialize_system"
                },
                "_DAT_40022000": {
                    "1": "memory_subsystem_status",
                    "11": "system_flags",
                    "2": "device_flags"
                },
                "_controlBits": {
                    "1": "bits"
                },
                "_memorySize": {
                    "1": "size"
                },
                "initialize_memory_0800151c": {
                    "30": "initialize_memory"
                },
                "set_control_bits_08001714": {
                    "27": "set_control_bits",
                    "3": "configure_control_bits"
                }
            },
            "called": [
                "FUN_0800151c",
                "FUN_08002d8a",
                "FUN_08001714"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\n\n\nundefined4 initialize_system_080014f0(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  set_control_bits(3);\n  initialize_memory(0xf);\n  FUNC_08002d8a();\n  return 0;\n}\n\n",
            "current_name": "initialize_system_080014f0",
            "entrypoint": "0x080014f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080014f0": "initialize_system_080014f0",
                "initialize_memory_0800151c": "initialize_memory",
                "set_control_bits_08001714": "set_control_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800151c": {
            "additional_data": {
                "DAT_20000000": {
                    "1": "current_memory",
                    "2": "allocated_memory"
                },
                "DAT_20000004": {
                    "1": "memory_unit",
                    "2": "unit_size"
                },
                "DAT_20000018": {
                    "3": "total_memory"
                },
                "FUN_0800151c": {
                    "1": "initialize_memory_check",
                    "18": "initialize_memory",
                    "3": "initialize_and_write_to_memory",
                    "4": "initialize_and_write_memory"
                },
                "iVar1": {
                    "1": "memory_check_result",
                    "14": "result",
                    "2": "memory_result",
                    "5": "memory_initialization_result",
                    "6": "memory_init_result"
                },
                "param_1": {
                    "1": "input_param",
                    "10": "input_size",
                    "12": "size",
                    "6": "input_value"
                },
                "uVar2": {
                    "1": "return_val",
                    "15": "return_value",
                    "4": "success",
                    "5": "status"
                },
                "write_byte_to_memory_0800172a": {
                    "4": "write_byte_to_memory"
                }
            },
            "called": [
                "FUN_0800172a",
                "FUN_08001762"
            ],
            "calling": [
                "FUN_080014f0",
                "FUN_08003260"
            ],
            "code": "\nundefined4 initialize_memory_0800151c(uint size)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  result = initialize_memory_0800151c_08001762((int)((ulonglong)DAT_20000018 / (1000 / (ulonglong)DAT_20000004)));\n  if (result == 0) {\n    if (size < 0x10) {\n      write_byte_to_memory(0xffffffff,size,0);\n      return_value = 0;\n      DAT_20000000 = size;\n    }\n    else {\n      return_value = 1;\n    }\n  }\n  else {\n    return_value = 1;\n  }\n  return return_value;\n}\n\n",
            "current_name": "initialize_memory_0800151c",
            "entrypoint": "0x0800151c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800151c": "initialize_memory_0800151c",
                "iVar1": "result",
                "param_1": "size",
                "uVar2": "return_value",
                "write_byte_to_memory_0800172a": "write_byte_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800157c": {
            "additional_data": {
                "DAT_20000004": {
                    "1": "input_data",
                    "2": "value",
                    "9": "increment"
                },
                "DAT_20000a48": {
                    "1": "updated_value",
                    "2": "current_value",
                    "3": "sum",
                    "5": "accumulator"
                },
                "FUN_0800157c": {
                    "1": "update_global_value",
                    "2": "increment_data",
                    "3": "increment_value",
                    "8": "update_data"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005704"
            ],
            "code": "\nvoid update_data_0800157c(void)\n\n{\n  DAT_20000a48 = DAT_20000a48 + (uint)DAT_20000004;\n  return;\n}\n\n",
            "current_name": "update_data_0800157c",
            "entrypoint": "0x0800157c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800157c": "update_data_0800157c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080015a0": {
            "additional_data": {
                "DAT_20000a48": {
                    "1": "data_address",
                    "2": "constant_value",
                    "3": "global_variable_value",
                    "4": "data_value",
                    "9": "data"
                },
                "FUN_080015a0": {
                    "1": "get_main_pointer",
                    "10": "get_data",
                    "2": "get_dat_value",
                    "3": "get_global_value",
                    "9": "get_data_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004436",
                "FUN_08001ccc",
                "FUN_08002c2e",
                "FUN_080027f4",
                "FUN_08002ca8",
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_08004f2c",
                "FUN_08002d98",
                "FUN_08003260",
                "FUN_08002640",
                "FUN_08001f6c"
            ],
            "code": "\nundefined4 get_data_080015a0(void)\n\n{\n  return DAT_20000a48;\n}\n\n",
            "current_name": "get_data_080015a0",
            "entrypoint": "0x080015a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080015a0": "get_data_080015a0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080015b4": {
            "additional_data": {
                "FUN_080015b4": {
                    "1": "configure_memory",
                    "2": "update_configuration_register",
                    "4": "set_control_bits"
                },
                "_DAT_e000ed0c": {
                    "1": "display_control_register",
                    "2": "flag_register",
                    "4": "control_register",
                    "7": "register_value"
                },
                "param_1": {
                    "1": "memory_size",
                    "2": "bits_to_set",
                    "3": "config_value",
                    "5": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001714"
            ],
            "code": "\n\n\nvoid set_control_bits_080015b4(uint value)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (value & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "current_name": "set_control_bits_080015b4",
            "entrypoint": "0x080015b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080015b4": "set_control_bits_080015b4",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080015fc": {
            "additional_data": {
                "7": {
                    "1": "bit_count"
                },
                "8": {
                    "1": "shift_amount"
                },
                "DAT_e000ed0c": {
                    "1": "shifted_value"
                },
                "FUN_080015fc": {
                    "1": "get_last_three_bits",
                    "2": "get_shifted_value",
                    "3": "get_shifted_bits",
                    "5": "get_bits_from_register"
                },
                "_DAT_e000ed0c": {
                    "1": "bit_subset",
                    "2": "bit_mask",
                    "3": "input_value",
                    "4": "input_data",
                    "6": "data_register",
                    "8": "register_value"
                },
                "unsigned int _DAT_e000ed0c": {
                    "1": "register_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800172a"
            ],
            "code": "\n\n\nuint get_bits_from_register_080015fc(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "current_name": "get_bits_from_register_080015fc",
            "entrypoint": "0x080015fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080015fc": "get_bits_from_register_080015fc"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001618": {
            "additional_data": {
                "(char)param_1": {
                    "1": "signed_input_byte"
                },
                "(char)param_1 + -0x1fff1c00)": {
                    "1": "address1"
                },
                "*(char *)((char)param_1 + -0x1fff1c00)": {
                    "1": "mapped_char2"
                },
                "*(char *)((param_1 & 0xf) + 0xe000ed14)": {
                    "1": "memory_address1"
                },
                "-0x1fff1c00": {
                    "1": "base_address2"
                },
                "0x1fff1c00": {
                    "1": "memory_address2"
                },
                "0xe000ed14": {
                    "1": "memory_address_1"
                },
                "<original_variable_name_1>": {
                    "1": "memory_address"
                },
                "<original_variable_name_2>": {
                    "1": "shifted_byte"
                },
                "FUN_08001618": {
                    "1": "update_data",
                    "2": "store_byte",
                    "3": "write_data",
                    "5": "update_memory",
                    "6": "write_byte_to_memory"
                },
                "byte": {
                    "1": "byte"
                },
                "char": {
                    "2": "character"
                },
                "char(param_1) + -0x1fff1c00": {
                    "1": "memory_address_2"
                },
                "char)((param_2 & 0xff) << 4)": {
                    "1": "shifted_value_to_write"
                },
                "e000ed14": {
                    "1": "base_address1"
                },
                "maskedInputByte + 0xe000ed14)": {
                    "1": "address2"
                },
                "param_1": {
                    "1": "byte_index",
                    "10": "address",
                    "3": "input_value",
                    "6": "byte_value"
                },
                "param_1 & 0xf": {
                    "1": "lower_nibble"
                },
                "param_2": {
                    "1": "byte_value",
                    "2": "uint_value",
                    "4": "input_value",
                    "8": "value"
                },
                "param_2 & 0xff": {
                    "1": "masked_value_to_write"
                },
                "param_3": {
                    "1": "output_byte"
                },
                "uint": {
                    "1": "unsigned_int"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800172a",
                "FUN_080016d0"
            ],
            "code": "\nvoid write_byte_to_memory_08001618(byte address,unsigned_int data)\n\n{\n  if (signed_input_byte < '\\0') {\n    *(character *)((address & 0xf) + 0xe000ed14) = (character)((data & 0xff) << 4);\n  }\n  else {\n    *(character *)(signed_input_byte + -0x1fff1c00) = (character)((data & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "current_name": "write_byte_to_memory_08001618",
            "entrypoint": "0x08001618",
            "imported": false,
            "improved": true,
            "renaming": {
                "(char)param_1": "signed_input_byte",
                "FUN_08001618": "write_byte_to_memory_08001618",
                "char": "character",
                "param_1": "address",
                "param_2": "data",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800166c": {
            "additional_data": {
                "DAT_": {
                    "1": "dat_"
                },
                "FUN_0800166c": {
                    "1": "bitwise_masking",
                    "10": "bitwise_operation",
                    "2": "apply_bitmask",
                    "3": "bitwise_operations"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "new_variable_name_1": {
                    "1": "temp"
                },
                "param_1": {
                    "1": "input_flags",
                    "2": "shift_amount",
                    "4": "bit_position",
                    "5": "bit_offset"
                },
                "param_1 & 0xff": {
                    "1": "bit_offset_mask"
                },
                "param_1_after_op": {
                    "1": "adjusted_bit_offset"
                },
                "param_1_result": {
                    "1": "shifted_result"
                },
                "param_2": {
                    "1": "bit_source",
                    "2": "value1",
                    "3": "input_value",
                    "4": "mask"
                },
                "param_2_result": {
                    "1": "masked_result"
                },
                "param_3": {
                    "1": "current_value",
                    "2": "value",
                    "3": "output_value",
                    "7": "result"
                },
                "result": {
                    "1": "final_result"
                },
                "uVar1": {
                    "1": "difference",
                    "2": "bit_difference",
                    "7": "shift_amount"
                },
                "uVar1 & 0xff": {
                    "1": "effective_remaining_bits"
                },
                "uVar2": {
                    "1": "shifted_input2"
                },
                "uVar3": {
                    "1": "mask1"
                },
                "uVar4": {
                    "1": "mask2"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800172a"
            ],
            "code": "\nuint bitwise_operation_0800166c(uint bit_offset,uint mask,uint result)\n\n{\n  uint shift_amount;\n  \n  bit_offset = bit_offset & 7;\n  shift_amount = 7 - bit_offset;\n  if (3 < shift_amount) {\n    shift_amount = 4;\n  }\n  if (bit_offset + 4 < 7) {\n    bit_offset = 0;\n  }\n  else {\n    bit_offset = bit_offset - 3;\n  }\n  return result & ~(-1 << (bit_offset & 0xff)) |\n         (~(-1 << (shift_amount & 0xff)) & mask) << (bit_offset & 0xff);\n}\n\n",
            "current_name": "bitwise_operation_0800166c",
            "entrypoint": "0x0800166c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800166c": "bitwise_operation_0800166c",
                "param_1": "bit_offset",
                "param_2": "mask",
                "param_3": "result",
                "uVar1": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080016d0": {
            "additional_data": {
                "FUN_080016d0": {
                    "1": "check_and_configure",
                    "2": "check_and_set_data",
                    "5": "check_and_initialize"
                },
                "_DAT_e000e010": {
                    "1": "flag_value",
                    "2": "default_value",
                    "3": "another_value"
                },
                "_DAT_e000e014": {
                    "1": "modified_input",
                    "2": "updated_value",
                    "3": "memory_address",
                    "4": "modified_value"
                },
                "_DAT_e000e018": {
                    "1": "variable1",
                    "2": "reset_value",
                    "5": "some_value"
                },
                "bVar1": {
                    "1": "is_within_limit",
                    "16": "is_valid",
                    "2": "is_valid_address",
                    "3": "is_value_valid"
                },
                "param_1": {
                    "1": "start_address",
                    "12": "input_value",
                    "13": "value",
                    "2": "input"
                },
                "write_byte_to_memory_08001618": {
                    "1": "write_to_memory",
                    "6": "write_byte_to_memory"
                }
            },
            "called": [
                "FUN_08001618"
            ],
            "calling": [
                "FUN_08001762"
            ],
            "code": "\n\n\nbool initialize_memory_080016d0(int value)\n\n{\n  bool is_valid;\n  \n  is_valid = value - 1U < 0x1000000;\n  if (is_valid) {\n    _DAT_e000e014 = value + -1;\n    write_byte_to_memory(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !is_valid;\n}\n\n",
            "current_name": "initialize_memory_080016d0",
            "entrypoint": "0x080016d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080016d0": "initialize_memory_080016d0",
                "bVar1": "is_valid",
                "param_1": "value",
                "write_byte_to_memory_08001618": "write_byte_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001714": {
            "additional_data": {
                "FUN_08001714": {
                    "21": "set_control_bits",
                    "3": "configure_control_bits",
                    "7": "initialize_control_bits"
                },
                "param_1": {
                    "1": "input_data",
                    "10": "input",
                    "2": "input_param",
                    "3": "param",
                    "4": "value"
                },
                "set_control_bits_080015b4": {
                    "1": "set_control_bits_impl",
                    "4": "set_control_bits",
                    "6": "set_control_bits_helper"
                }
            },
            "called": [
                "FUN_080015b4"
            ],
            "calling": [
                "FUN_080014f0"
            ],
            "code": "\nvoid set_control_bits_08001714(undefined4 input)\n\n{\n  set_control_bits_08001714_helper(input);\n  return;\n}\n\n",
            "current_name": "set_control_bits_08001714",
            "entrypoint": "0x08001714",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001714": "set_control_bits_08001714",
                "param_1": "input",
                "set_control_bits_080015b4": "set_control_bits_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800172a": {
            "additional_data": {
                "FUN_0800172a": {
                    "1": "write_bit_to_memory",
                    "2": "write_register_value_to_memory",
                    "23": "write_byte_to_memory",
                    "4": "write_bits_to_memory"
                },
                "bitwise_operation_0800166c": {
                    "11": "perform_bitwise_operation"
                },
                "get_bits_from_register_080015fc": {
                    "11": "get_bits_from_register"
                },
                "param_1": {
                    "1": "destination_address",
                    "18": "memory_address",
                    "7": "address"
                },
                "param_2": {
                    "1": "bit_field1",
                    "2": "value1",
                    "3": "bitwise_operand1",
                    "4": "operand1"
                },
                "param_3": {
                    "1": "bits2",
                    "2": "value2",
                    "3": "bitmask2",
                    "4": "operand2"
                },
                "uVar1": {
                    "1": "bits",
                    "24": "bits_from_register",
                    "5": "register_value"
                },
                "uVar2": {
                    "1": "result_after_bitwise_operation"
                },
                "write_byte_to_memory_08001618": {
                    "1": "write_byte_to_memory_function",
                    "10": "write_byte_to_memory"
                }
            },
            "called": [
                "FUN_08001618",
                "FUN_080015fc",
                "FUN_0800166c"
            ],
            "calling": [
                "FUN_0800151c",
                "FUN_080052a0"
            ],
            "code": "\nvoid write_byte_to_memory_0800172a(char memory_address,undefined4 operand1,undefined4 operand2)\n\n{\n  undefined4 bits_from_register;\n  \n  bits_from_register = get_bits_from_register();\n  bits_from_register = perform_bitwise_operation(bits_from_register,operand1,operand2);\n  write_byte_to_memory_0800172a((int)memory_address,bits_from_register);\n  return;\n}\n\n",
            "current_name": "write_byte_to_memory_0800172a",
            "entrypoint": "0x0800172a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800172a": "write_byte_to_memory_0800172a",
                "bitwise_operation_0800166c": "perform_bitwise_operation",
                "get_bits_from_register_080015fc": "get_bits_from_register",
                "param_1": "memory_address",
                "param_2": "operand1",
                "param_3": "operand2",
                "uVar1": "bits_from_register",
                "write_byte_to_memory_08001618": "write_byte_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001762": {
            "additional_data": {
                "FUN_08001762": {
                    "1": "initialize_and_return_result",
                    "2": "initialize_and_return",
                    "22": "initialize_memory",
                    "6": "initialize_and_return_memory"
                },
                "param_1": {
                    "1": "input_param",
                    "13": "input",
                    "2": "input_data",
                    "3": "memory_size",
                    "5": "param"
                },
                "uVar1": {
                    "1": "memory_initialization_result",
                    "23": "result",
                    "6": "return_value"
                }
            },
            "called": [
                "FUN_080016d0"
            ],
            "calling": [
                "FUN_0800151c",
                "FUN_080052a0"
            ],
            "code": "\nundefined4 initialize_memory_08001762(undefined4 input)\n\n{\n  undefined4 result;\n  \n  result = initialize_memory_08001762_080016d0(input);\n  return result;\n}\n\n",
            "current_name": "initialize_memory_08001762",
            "entrypoint": "0x08001762",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001762": "initialize_memory_08001762",
                "param_1": "input",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800177c": {
            "additional_data": {
                "FUN_0800177c": {
                    "1": "set_flag_if_equal",
                    "2": "update_e000e010_register",
                    "6": "set_flag"
                },
                "_DAT_e000e010": {
                    "1": "status_register",
                    "3": "flag",
                    "4": "register_value",
                    "9": "flag_register"
                },
                "param_1": {
                    "1": "peripheral_id",
                    "13": "value",
                    "2": "flag_value",
                    "4": "flag"
                }
            },
            "called": [],
            "calling": [
                "FUN_080052a0"
            ],
            "code": "\n\n\nvoid set_flag_0800177c(int value)\n\n{\n  if (value == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "current_name": "set_flag_0800177c",
            "entrypoint": "0x0800177c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800177c": "set_flag_0800177c",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080017b4": {
            "additional_data": {
                "0": {
                    "2": "data"
                },
                "FUN_080017b4": {
                    "1": "process_initialization",
                    "13": "initialize_data_processing",
                    "14": "process_data",
                    "3": "process_initial_data"
                },
                "process_data_08004f78": {
                    "1": "process_data_step",
                    "17": "process_data",
                    "6": "process_data_helper"
                }
            },
            "called": [
                "FUN_08004f78"
            ],
            "calling": [
                "FUN_08005704"
            ],
            "code": "\nvoid process_data_080017b4(void)\n\n{\n  process_data_080017b4(0);\n  return;\n}\n\n",
            "current_name": "process_data_080017b4",
            "entrypoint": "0x080017b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080017b4": "process_data_080017b4",
                "process_data_08004f78": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080017c4": {
            "additional_data": {
                "FUN_080017c4": {
                    "1": "update_register_values",
                    "2": "update_configuration",
                    "3": "update_flags",
                    "4": "update_flags_and_values"
                },
                "iVar5": {
                    "1": "array_index",
                    "2": "output_index",
                    "22": "index",
                    "3": "register_index"
                },
                "local_10": {
                    "1": "new_bit_value",
                    "16": "new_value",
                    "2": "new_flag_value",
                    "3": "updated_value",
                    "4": "offset"
                },
                "local_c": {
                    "1": "index",
                    "17": "bit_index",
                    "2": "bit_position",
                    "6": "counter"
                },
                "param_1": {
                    "1": "memory1",
                    "2": "bitmask1",
                    "3": "output_values"
                },
                "param_2": {
                    "1": "memory2",
                    "2": "input",
                    "3": "input_values",
                    "4": "input_array"
                },
                "puVar4": {
                    "1": "output_data_ptr",
                    "2": "config_ptr",
                    "6": "output_ptr"
                },
                "uVar1": {
                    "1": "bit_shift",
                    "22": "bit_mask",
                    "3": "bit",
                    "5": "mask"
                },
                "uVar2": {
                    "1": "flag_check",
                    "2": "bit",
                    "3": "input_bit",
                    "5": "bit_value",
                    "9": "bit_check"
                },
                "uVar3": {
                    "1": "flag_value",
                    "10": "opcode",
                    "3": "instruction"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005680",
                "FUN_080055f4"
            ],
            "code": "\n\n\nvoid update_flags_and_values_080017c4(uint *output_values,uint *input_array)\n\n{\n  uint bit_mask;\n  uint bit_check;\n  uint opcode;\n  uint *output_ptr;\n  int index;\n  uint new_value;\n  uint bit_index;\n  \n  new_value = 0;\n  bit_index = 0;\n  do {\n    if (0xf < bit_index) {\n      return;\n    }\n    bit_mask = 1 << (bit_index & 0xff);\n    bit_check = *input_array & bit_mask;\n    if (bit_check == bit_mask) {\n      opcode = input_array[1];\n      if (opcode == 0x12) {\n        new_value = input_array[3] + 0xc;\n      }\n      else if (opcode < 0x13) {\n        if (opcode == 2) {\n          new_value = input_array[3] + 8;\n        }\n        else if (opcode < 3) {\n          if (opcode == 0) goto LAB_08001882;\n          if (opcode == 1) {\n            new_value = input_array[3];\n          }\n        }\n        else if (opcode == 3) {\n          new_value = 0;\n        }\n        else if (opcode == 0x11) {\n          new_value = input_array[3] + 4;\n        }\n      }\n      else if (opcode == 0x10210000) {\nLAB_08001882:\n        if (input_array[2] == 0) {\n          new_value = 4;\n        }\n        else if (input_array[2] == 1) {\n          new_value = 8;\n          output_values[4] = bit_mask;\n        }\n        else {\n          new_value = 8;\n          output_values[5] = bit_mask;\n        }\n      }\n      else if (opcode < 0x10210001) {\n        if ((opcode == 0x10110000) || (opcode == 0x10120000)) goto LAB_08001882;\n      }\n      else if (((opcode == 0x10310000) || (opcode == 0x10320000)) || (opcode == 0x10220000))\n      goto LAB_08001882;\n      if (bit_check < 0x100) {\n        bit_mask = bit_index << 2;\n        output_ptr = output_values;\n      }\n      else {\n        output_ptr = output_values + 1;\n        bit_mask = (bit_index - 8) * 4;\n      }\n      *output_ptr = *output_ptr & ~(0xf << (bit_mask & 0xff)) | new_value << (bit_mask & 0xff);\n      if ((input_array[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        if (output_values == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (output_values == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (output_values == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (output_values == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)(((bit_index >> 2) + 2) * 4 + 0x40010000) =\n             index << ((bit_index & 3) << 2) |\n             ~(0xf << ((bit_index & 3) << 2)) & *(uint *)(((bit_index >> 2) + 2) * 4 + 0x40010000);\n        if ((input_array[1] & 0x10000) == 0) {\n          _DAT_40010400 = ~bit_check & _DAT_40010400;\n        }\n        else {\n          _DAT_40010400 = bit_check | _DAT_40010400;\n        }\n        if ((input_array[1] & 0x20000) == 0) {\n          _DAT_40010404 = ~bit_check & _DAT_40010404;\n        }\n        else {\n          _DAT_40010404 = bit_check | _DAT_40010404;\n        }\n        if ((input_array[1] & 0x100000) == 0) {\n          _DAT_40010408 = ~bit_check & _DAT_40010408;\n        }\n        else {\n          _DAT_40010408 = bit_check | _DAT_40010408;\n        }\n        if ((input_array[1] & 0x200000) == 0) {\n          _DAT_4001040c = ~bit_check & _DAT_4001040c;\n        }\n        else {\n          _DAT_4001040c = bit_check | _DAT_4001040c;\n        }\n      }\n    }\n    bit_index = bit_index + 1;\n  } while( true );\n}\n\n",
            "current_name": "update_flags_and_values_080017c4",
            "entrypoint": "0x080017c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080017c4": "update_flags_and_values_080017c4",
                "iVar5": "index",
                "local_10": "new_value",
                "local_c": "bit_index",
                "param_1": "output_values",
                "param_2": "input_array",
                "puVar4": "output_ptr",
                "uVar1": "bit_mask",
                "uVar2": "bit_check",
                "uVar3": "opcode"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001a80": {
            "additional_data": {
                "(uint *)(param_1 + 0x10)": {
                    "1": "memory_location"
                },
                "(uint)param_2 << 0x10": {
                    "2": "shifted_value"
                },
                "*(uint *)(baseAddress + 0x10)": {
                    "1": "value_to_set"
                },
                "*(uint *)(param_1 + 0x10)": {
                    "1": "parameter",
                    "3": "target_address"
                },
                "DAT_": {
                    "1": ""
                },
                "FUN_08001a80": {
                    "1": "set_param1_value",
                    "15": "set_param_value",
                    "2": "update_param_value",
                    "3": "update_parameter_value"
                },
                "PTR_": {
                    "1": ""
                },
                "isShifted": {
                    "1": "should_be_shifted"
                },
                "new_variable_name": {
                    "1": "new_variable"
                },
                "param_1": {
                    "1": "memory_address",
                    "2": "data_address",
                    "8": "base_address",
                    "9": "object_address"
                },
                "param_1 + 0x10": {
                    "1": "address_offset"
                },
                "param_2": {
                    "1": "parameter2",
                    "23": "value",
                    "4": "new_value"
                },
                "param_3": {
                    "1": "use_high_bits",
                    "19": "is_shifted",
                    "2": "condition_flag",
                    "4": "flag"
                },
                "param_3 == '\\0'": {
                    "1": "is_shifted_zero"
                },
                "param_4": {
                    "1": "new_variable_name"
                },
                "param_5": {
                    "1": "unused"
                },
                "param_6": {
                    "1": "unused"
                },
                "param_7": {
                    "1": "unused"
                },
                "uint": {
                    "1": "unsigned_integer",
                    "2": "unsigned_int"
                },
                "value": {
                    "1": "new_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_080055f4"
            ],
            "code": "\nvoid set_param_value_08001a80(int object_address,ushort value,char is_shifted)\n\n{\n  if (is_shifted == '\\0') {\n    *(unsigned_int *)(object_address + 0x10) = (unsigned_int)value << 0x10;\n  }\n  else {\n    *(unsigned_int *)(object_address + 0x10) = (unsigned_int)value;\n  }\n  return;\n}\n\n",
            "current_name": "set_param_value_08001a80",
            "entrypoint": "0x08001a80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001a80": "set_param_value_08001a80",
                "param_1": "object_address",
                "param_2": "value",
                "param_3": "is_shifted",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "additional_data": {
                "(*param_1)[1]": {
                    "1": "data_array[1]"
                },
                "(*param_1)[1] * 0x19": {
                    "1": "data_array[1]_scaled2"
                },
                "(*param_1)[1] * 3": {
                    "1": "data_array[1]_scaled1"
                },
                "(*param_1)[1] << 1": {
                    "1": "data_array[1]_shifted"
                },
                "(*param_1)[2]": {
                    "1": "data_array[2]"
                },
                "(*param_1)[3]": {
                    "1": "data_array[3]"
                },
                "(*param_1)[4]": {
                    "1": "data_array[4]"
                },
                "(*param_1)[5]": {
                    "1": "data_array[5]"
                },
                "(*param_1)[6]": {
                    "1": "data_array[6]"
                },
                "(*param_1)[7]": {
                    "1": "data_array[7]"
                },
                "(*param_1)[8]": {
                    "1": "data_array[8]"
                },
                "FUNC_08001cb8": {
                    "1": "perform_some_operation"
                },
                "FUN_08001ab0": {
                    "1": "calculate_params",
                    "2": "calculate_data",
                    "4": "initialize_data",
                    "5": "calculate_values",
                    "7": "calculate_parameters"
                },
                "bVar5": {
                    "1": "is_temp_variable_zero",
                    "27": "is_zero"
                },
                "cVar2": {
                    "1": "is_small_value",
                    "11": "is_valid",
                    "2": "is_condition_met",
                    "3": "is_within_range",
                    "4": "condition"
                },
                "param_1": {
                    "1": "param",
                    "2": "input_params",
                    "3": "input",
                    "4": "params",
                    "5": "data",
                    "7": "parameters"
                },
                "param_1[0x10]": {
                    "1": "data_array[16]"
                },
                "shift_data_08003518": {
                    "1": "get_data_shifted",
                    "2": "shift_data_function"
                },
                "uVar1": {
                    "1": "temp_var1",
                    "10": "shift_result",
                    "2": "shift_data",
                    "3": "result",
                    "4": "shift_value",
                    "7": "shifted_value"
                },
                "uVar3": {
                    "1": "success",
                    "12": "return_value",
                    "18": "result"
                },
                "uVar4": {
                    "1": "quotient",
                    "2": "temp_variable",
                    "3": "adjusted_value",
                    "4": "temp",
                    "7": "temp_var"
                }
            },
            "called": [
                "FUN_08003518",
                "FUN_08001cb8"
            ],
            "calling": [
                "FUN_08005348"
            ],
            "code": "\nundefined4 calculate_parameters_08001ab0(uint **parameters)\n\n{\n  uint shift_result;\n  char is_valid;\n  undefined4 result;\n  uint temp_var;\n  bool is_zero;\n  \n  if (parameters == (uint **)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)parameters + 0x3d) == '\\0') {\n      *(undefined *)(parameters + 0xf) = 0;\n      FUNC_08001cb8(parameters);\n    }\n    *(undefined *)((int)parameters + 0x3d) = 0x24;\n    **parameters = **parameters & 0xfffffffe;\n    shift_result = shift_data();\n    if (parameters[1] < (uint *)0x186a1) {\n      temp_var = shift_result;\n      if (shift_result < 2000000) {\n        temp_var = 1;\n      }\n      is_valid = (char)temp_var;\n      if (1999999 < shift_result) {\n        is_valid = '\\0';\n      }\n    }\n    else {\n      temp_var = shift_result;\n      if (shift_result < 4000000) {\n        temp_var = 1;\n      }\n      is_valid = (char)temp_var;\n      if (3999999 < shift_result) {\n        is_valid = '\\0';\n      }\n    }\n    if (is_valid == '\\0') {\n      temp_var = shift_result / 1000000;\n      (*parameters)[1] = temp_var;\n      if ((uint *)0x186a0 < parameters[1]) {\n        temp_var = (temp_var * 300) / 1000;\n      }\n      (*parameters)[8] = temp_var + 1;\n      if (parameters[1] < (uint *)0x186a1) {\n        shift_result = (shift_result - 1) / (uint)((int)parameters[1] << 1) + 1 & 0xfff;\n        if (shift_result < 4) {\n          shift_result = 4;\n        }\n      }\n      else {\n        if (parameters[2] == (uint *)0x0) {\n          temp_var = (shift_result - 1) / (uint)((int)parameters[1] * 3) + 1 & 0xfff;\n          is_zero = temp_var == 0;\n          if (is_zero) {\n            temp_var = 1;\n          }\n          is_valid = (char)temp_var;\n          if (!is_zero) {\n            is_valid = '\\0';\n          }\n        }\n        else {\n          temp_var = (shift_result - 1) / (uint)((int)parameters[1] * 0x19) + 1 & 0xfff;\n          is_zero = temp_var == 0;\n          if (is_zero) {\n            temp_var = 1;\n          }\n          is_valid = (char)temp_var;\n          if (!is_zero) {\n            is_valid = '\\0';\n          }\n        }\n        if (is_valid == '\\0') {\n          if (parameters[2] == (uint *)0x0) {\n            shift_result = (shift_result - 1) / (uint)((int)parameters[1] * 3) + 1 & 0xfff | 0x8000;\n          }\n          else {\n            shift_result = (shift_result - 1) / (uint)((int)parameters[1] * 0x19) + 1 & 0xfff | 0xc000;\n          }\n        }\n        else {\n          shift_result = 1;\n        }\n      }\n      (*parameters)[7] = shift_result;\n      **parameters = (uint)parameters[8] | (uint)parameters[7];\n      (*parameters)[2] = (uint)parameters[3] | (uint)parameters[4];\n      (*parameters)[3] = (uint)parameters[6] | (uint)parameters[5];\n      **parameters = **parameters | 1;\n      data_array[16] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      parameters[0xc] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3e) = 0;\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_parameters_08001ab0",
            "entrypoint": "0x08001ab0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001ab0": "calculate_parameters_08001ab0",
                "bVar5": "is_zero",
                "cVar2": "is_valid",
                "param_1": "parameters",
                "param_1[0x10]": "data_array[16]",
                "shift_data_08003518": "shift_data",
                "uVar1": "shift_result",
                "uVar3": "result",
                "uVar4": "temp_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001cb8": {
            "called": [],
            "calling": [
                "FUN_08001ab0"
            ],
            "code": "\nvoid FUNC_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08001cb8",
            "entrypoint": "0x08001cb8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08001cb8": "FUNC_08001cb8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08001ccc": {
            "additional_data": {
                "FUN_08001ccc": {
                    "1": "reverse_and_update_data",
                    "29": "process_data"
                },
                "check_and_update_data_08002c2e": {
                    "7": "check_and_update_data"
                },
                "check_flag_and_update_08002bb4": {
                    "2": "check_flag_and_update",
                    "5": "check_and_update_flag"
                },
                "get_data_080015a0": {
                    "1": "get_data_value",
                    "5": "get_data"
                },
                "iVar1": {
                    "1": "data_1",
                    "2": "data_size",
                    "3": "data_var1",
                    "6": "data_length",
                    "7": "data_value1"
                },
                "iVar2": {
                    "1": "data_offset2",
                    "2": "result",
                    "3": "data2",
                    "7": "data_value2"
                },
                "param_1": {
                    "1": "data_array",
                    "2": "data_ptr",
                    "27": "data"
                },
                "param_2": {
                    "1": "input1",
                    "16": "param2",
                    "2": "param_2",
                    "8": "param1"
                },
                "param_3": {
                    "1": "arg2",
                    "16": "param3",
                    "2": "value2",
                    "8": "param2"
                },
                "param_4": {
                    "1": "input3",
                    "16": "param4",
                    "2": "value3",
                    "8": "param3"
                },
                "param_5": {
                    "1": "flag_array",
                    "13": "param5",
                    "2": "buffer",
                    "3": "flag",
                    "5": "param4"
                },
                "param_6": {
                    "1": "input4",
                    "16": "param6",
                    "2": "value4",
                    "3": "param4",
                    "5": "param5"
                },
                "param_7": {
                    "1": "input5",
                    "16": "param7",
                    "2": "param_7",
                    "3": "result",
                    "5": "param6"
                },
                "puVar4": {
                    "1": "byte_data",
                    "11": "byte_ptr",
                    "2": "ptr_data",
                    "3": "ptr_var",
                    "4": "pointer_var"
                },
                "uVar3": {
                    "15": "return_value"
                },
                "update_permissions_08002640": {
                    "7": "update_permissions"
                }
            },
            "called": [
                "FUN_08002c2e",
                "FUN_08002bb4",
                "FUN_080015a0",
                "FUN_08002640"
            ],
            "calling": [
                "FUN_08004ea4"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001d5e) */\n/* WARNING: Removing unreachable block (ram,0x08001d70) */\n/* WARNING: Removing unreachable block (ram,0x08001d72) */\n/* WARNING: Removing unreachable block (ram,0x08001d74) */\n\nundefined4\nprocess_data_08001ccc(uint **data,undefined2 param2,undefined2 param3,undefined2 param4,uint *param5,\n            undefined2 param6,undefined4 param7)\n\n{\n  int data_value1;\n  int data_value2;\n  undefined4 return_value;\n  uint *byte_ptr;\n  \n  data_value1 = get_data();\n  if (*(char *)((int)data + 0x3d) == ' ') {\n    do {\n      if ((~(*data)[6] & 2) != 0) {\n        data_value2 = 0;\n        goto LAB_08001d9c;\n      }\n      data_value2 = get_data();\n    } while ((uint)(data_value2 - data_value1) < 0x1a);\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    *(undefined *)(data + 0xf) = 0;\n    data_value2 = 3;\nLAB_08001d9c:\n    if (data_value2 == 0) {\n      if (*(char *)(data + 0xf) == '\\x01') {\n        return_value = 2;\n      }\n      else {\n        *(undefined *)(data + 0xf) = 1;\n        if ((**data & 1) != 1) {\n          **data = **data | 1;\n        }\n        **data = **data & 0xfffff7ff;\n        *(undefined *)((int)data + 0x3d) = 0x21;\n        *(undefined *)((int)data + 0x3e) = 0x40;\n        data[0x10] = (uint *)0x0;\n        data[9] = param5;\n        *(undefined2 *)((int)data + 0x2a) = param6;\n        data[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n        data_value2 = update_permissions(data,param2,param3,param4,param7,data_value1);\n        if (data_value2 == 0) {\n          while (*(short *)(data + 10) != 0) {\n            data_value2 = check_and_update_flag(data,param7,data_value1);\n            if (data_value2 != 0) {\n              if (data[0x10] == (uint *)0x4) {\n                **data = **data | 0x200;\n                return 1;\n              }\n              return 3;\n            }\n            byte_ptr = data[9];\n            data[9] = (uint *)((int)byte_ptr + 1);\n            (*data)[4] = (uint)*(byte *)byte_ptr;\n            *(short *)(data + 10) = *(short *)(data + 10) + -1;\n            *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n            if ((((*data)[5] & 4) == 4) && (*(short *)(data + 10) != 0)) {\n              byte_ptr = data[9];\n              data[9] = (uint *)((int)byte_ptr + 1);\n              (*data)[4] = (uint)*(byte *)byte_ptr;\n              *(short *)(data + 10) = *(short *)(data + 10) + -1;\n              *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n            }\n          }\n          data_value1 = check_and_update_data(data,param7,data_value1);\n          if (data_value1 == 0) {\n            **data = **data | 0x200;\n            *(undefined *)((int)data + 0x3d) = 0x20;\n            *(undefined *)((int)data + 0x3e) = 0;\n            *(undefined *)(data + 0xf) = 0;\n            return_value = 0;\n          }\n          else if (data[0x10] == (uint *)0x4) {\n            **data = **data | 0x200;\n            return_value = 1;\n          }\n          else {\n            return_value = 3;\n          }\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          *(undefined *)(data + 0xf) = 0;\n          return_value = 1;\n        }\n        else {\n          *(undefined *)(data + 0xf) = 0;\n          return_value = 3;\n        }\n      }\n    }\n    else {\n      return_value = 2;\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_data_08001ccc",
            "entrypoint": "0x08001ccc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001ccc": "process_data_08001ccc",
                "check_and_update_data_08002c2e": "check_and_update_data",
                "check_flag_and_update_08002bb4": "check_and_update_flag",
                "get_data_080015a0": "get_data",
                "iVar1": "data_value1",
                "iVar2": "data_value2",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "puVar4": "byte_ptr",
                "uVar3": "return_value",
                "update_permissions_08002640": "update_permissions"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001f6c": {
            "additional_data": {
                "FUN_08001f6c": {
                    "1": "perform_operation",
                    "21": "process_data"
                },
                "check_data_validity_08002ca8": {
                    "4": "check_validity",
                    "8": "check_data_validity"
                },
                "disableIRQinterrupts": {
                    "1": "disable_irq_interrupts",
                    "3": "disable_irq",
                    "6": "disable_interrupts"
                },
                "enableIRQinterrupts": {
                    "1": "enable_irq_interrupts",
                    "3": "enable_irq",
                    "6": "enable_interrupts"
                },
                "get_data_080015a0": {
                    "1": "get_index",
                    "2": "get_initial_data",
                    "7": "get_data"
                },
                "iVar1": {
                    "1": "data_address",
                    "2": "data_offset",
                    "3": "data_size",
                    "4": "data_length",
                    "6": "data_value"
                },
                "iVar3": {
                    "1": "var2",
                    "13": "result",
                    "2": "temp2"
                },
                "param_1": {
                    "1": "permissions",
                    "2": "input_data",
                    "20": "data",
                    "3": "data_ptr"
                },
                "param_2": {
                    "1": "input1",
                    "12": "param2",
                    "2": "param_2",
                    "3": "value1",
                    "7": "param1"
                },
                "param_3": {
                    "1": "arg2",
                    "12": "param3",
                    "2": "param_3",
                    "3": "value2",
                    "7": "param2"
                },
                "param_4": {
                    "1": "input3",
                    "12": "param4",
                    "2": "param_4",
                    "3": "value3",
                    "7": "param3"
                },
                "param_5": {
                    "1": "flags",
                    "2": "input_data",
                    "3": "param4",
                    "5": "data",
                    "6": "buffer",
                    "7": "param5"
                },
                "param_6": {
                    "1": "input4",
                    "15": "param6",
                    "2": "value4",
                    "3": "param5"
                },
                "param_7": {
                    "1": "flag2",
                    "15": "param7",
                    "2": "param5",
                    "3": "limit"
                },
                "puVar5": {
                    "1": "temp_pointer",
                    "12": "ptr",
                    "2": "data_ptr",
                    "3": "ptr_value"
                },
                "uVar2": {
                    "1": "some_var2",
                    "2": "data_var2",
                    "5": "temp_var",
                    "9": "value"
                },
                "uVar4": {
                    "1": "output",
                    "15": "return_value"
                },
                "update_permissions_080027f4": {
                    "12": "update_permissions"
                }
            },
            "called": [
                "FUN_08002ca8",
                "FUN_080027f4",
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_08004ee8"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080024e6) */\n/* WARNING: Removing unreachable block (ram,0x080024f8) */\n/* WARNING: Removing unreachable block (ram,0x080024fa) */\n/* WARNING: Removing unreachable block (ram,0x080024fc) */\n/* WARNING: Removing unreachable block (ram,0x08002000) */\n/* WARNING: Removing unreachable block (ram,0x08002012) */\n/* WARNING: Removing unreachable block (ram,0x08002014) */\n/* WARNING: Removing unreachable block (ram,0x08002016) */\n/* WARNING: Removing unreachable block (ram,0x080023f4) */\n/* WARNING: Removing unreachable block (ram,0x08002406) */\n/* WARNING: Removing unreachable block (ram,0x08002408) */\n/* WARNING: Removing unreachable block (ram,0x0800240a) */\n/* WARNING: Removing unreachable block (ram,0x080022d6) */\n/* WARNING: Removing unreachable block (ram,0x080022e8) */\n/* WARNING: Removing unreachable block (ram,0x080022ea) */\n/* WARNING: Removing unreachable block (ram,0x080022ec) */\n\nundefined4\nprocess_data_08001f6c(uint **data,undefined2 param2,undefined2 param3,undefined2 param4,uint *param5,\n            undefined2 param6,uint param7)\n\n{\n  int data_value;\n  uint value;\n  int result;\n  undefined4 return_value;\n  uint *ptr;\n  \n  data_value = get_data();\n  if (*(char *)((int)data + 0x3d) == ' ') {\n    do {\n      if ((~(*data)[6] & 2) != 0) {\n        result = 0;\n        goto LAB_08002040;\n      }\n      result = get_data();\n    } while ((uint)(result - data_value) < 0x1a);\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    *(undefined *)(data + 0xf) = 0;\n    result = 3;\nLAB_08002040:\n    if (result == 0) {\n      if (*(char *)(data + 0xf) == '\\x01') {\n        return_value = 2;\n      }\n      else {\n        *(undefined *)(data + 0xf) = 1;\n        if ((**data & 1) != 1) {\n          **data = **data | 1;\n        }\n        **data = **data & 0xfffff7ff;\n        *(undefined *)((int)data + 0x3d) = 0x22;\n        *(undefined *)((int)data + 0x3e) = 0x40;\n        data[0x10] = (uint *)0x0;\n        data[9] = param5;\n        *(undefined2 *)((int)data + 0x2a) = param6;\n        data[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n        result = update_permissions(data,param2,param3,param4,param7,data_value);\n        if (result == 0) {\n          if (*(short *)(data + 10) == 0) {\n            **data = **data | 0x200;\n          }\n          else if (*(short *)(data + 10) == 1) {\n            **data = **data & 0xfffffbff;\n            disable_interrupts();\n            **data = **data | 0x200;\n            enable_interrupts();\n          }\n          else if (*(short *)(data + 10) == 2) {\n            **data = **data | 0x800;\n            disable_interrupts();\n            **data = **data & 0xfffffbff;\n            enable_interrupts();\n          }\n          else {\n            **data = **data | 0x400;\n          }\n          while (*(short *)(data + 10) != 0) {\n            if (*(ushort *)(data + 10) < 4) {\n              if (*(short *)(data + 10) == 1) {\n                result = check_data_validity(data,param7,data_value);\n                if (result != 0) {\n                  if (data[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                value = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)value;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n              else if (*(short *)(data + 10) == 2) {\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    result = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((param7 == 0xffffffff) ||\n                        ((param7 != 0 && (result = get_data(), (uint)(result - data_value) <= param7)\n                         )));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                result = 3;\nLAB_080022fa:\n                if (result != 0) {\n                  return 3;\n                }\n                disable_interrupts();\n                **data = **data | 0x200;\n                value = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)value;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                enable_interrupts();\n                value = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)value;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    result = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((param7 == 0xffffffff) ||\n                        ((param7 != 0 && (result = get_data(), (uint)(result - data_value) <= param7)\n                         )));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                result = 3;\nLAB_08002418:\n                if (result != 0) {\n                  return 3;\n                }\n                **data = **data & 0xfffffbff;\n                disable_interrupts();\n                value = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)value;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    result = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((param7 == 0xffffffff) ||\n                        ((param7 != 0 && (result = get_data(), (uint)(result - data_value) <= param7)\n                         )));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                result = 3;\nLAB_0800250a:\n                if (result != 0) {\n                  return 3;\n                }\n                **data = **data | 0x200;\n                value = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)value;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                enable_interrupts();\n                value = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)value;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n            }\n            else {\n              result = check_data_validity(data,param7,data_value);\n              if (result != 0) {\n                if (data[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              value = (*data)[4];\n              ptr = data[9];\n              data[9] = (uint *)((int)ptr + 1);\n              *(char *)ptr = (char)value;\n              *(short *)(data + 10) = *(short *)(data + 10) + -1;\n              *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              if (((*data)[5] & 4) == 4) {\n                value = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)value;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)data + 0x3d) = 0x20;\n          *(undefined *)((int)data + 0x3e) = 0;\n          *(undefined *)(data + 0xf) = 0;\n          return_value = 0;\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          *(undefined *)(data + 0xf) = 0;\n          return_value = 1;\n        }\n        else {\n          *(undefined *)(data + 0xf) = 0;\n          return_value = 3;\n        }\n      }\n    }\n    else {\n      return_value = 2;\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_data_08001f6c",
            "entrypoint": "0x08001f6c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001f6c": "process_data_08001f6c",
                "check_data_validity_08002ca8": "check_data_validity",
                "disableIRQinterrupts": "disable_interrupts",
                "enableIRQinterrupts": "enable_interrupts",
                "get_data_080015a0": "get_data",
                "iVar1": "data_value",
                "iVar3": "result",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "puVar5": "ptr",
                "uVar2": "value",
                "uVar4": "return_value",
                "update_permissions_080027f4": "update_permissions"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002640": {
            "additional_data": {
                "(**param_1 | 0x100)": {
                    "1": "updated_pointer_value"
                },
                "(**param_1 | 0x200)": {
                    "1": "updated_pointer_value_with_flag"
                },
                "(*param_1)[4]": {
                    "1": "permissions"
                },
                "(*param_1)[5]": {
                    "1": "flags"
                },
                "(*param_1)[6]": {
                    "1": "some_value"
                },
                "(byte)param_3": {
                    "1": "access_byte"
                },
                "(int)param_1 + 0x3d": {
                    "1": "field1"
                },
                "(int)param_1 + 0x3e": {
                    "1": "field2"
                },
                "(param_1 + 0xf)": {
                    "1": "some_address3"
                },
                "(uint *)0x4": {
                    "1": "some_pointer"
                },
                "(ushort)param_3 >> 8": {
                    "1": "upper_part"
                },
                "**param_1": {
                    "1": "pointer_value"
                },
                "0x100": {
                    "1": "permission_value2"
                },
                "0x200": {
                    "1": "flag_value"
                },
                "FUN_08002640": {
                    "1": "update_flags",
                    "11": "update_permissions",
                    "2": "check_and_update_permissions",
                    "3": "update_permissions_and_flags"
                },
                "check_and_update_permissions_08002ad8": {
                    "4": "check_and_update_permissions"
                },
                "check_flag_and_update_08002bb4": {
                    "4": "check_flag_and_update"
                },
                "data[4]": {
                    "1": "data_flag"
                },
                "data[5]": {
                    "1": "data_value"
                },
                "data[6]": {
                    "1": "flag_value"
                },
                "get_data_080015a0": {
                    "4": "get_data"
                },
                "iVar1": {
                    "1": "condition",
                    "17": "result",
                    "2": "error_code",
                    "5": "check_result",
                    "6": "status"
                },
                "inputArray": {
                    "1": "input_array"
                },
                "outputArray": {
                    "1": "output_array"
                },
                "param_1": {
                    "1": "input_array",
                    "16": "data",
                    "2": "flag_and_permissions",
                    "3": "data_ptr"
                },
                "param_1 + 0x3d": {
                    "1": "some_address1"
                },
                "param_1 + 0x3e": {
                    "1": "some_address2"
                },
                "param_1 + 0xf": {
                    "1": "field3"
                },
                "param_1[0x10]": {
                    "1": "some_param2"
                },
                "param_1[0xc]": {
                    "1": "some_param1"
                },
                "param_1[4]": {
                    "1": "permission"
                },
                "param_2": {
                    "1": "byte_param",
                    "15": "flag",
                    "2": "permission_byte",
                    "4": "permission"
                },
                "param_3": {
                    "1": "file_type",
                    "2": "flag_value",
                    "3": "byte_value",
                    "4": "flag",
                    "8": "permission"
                },
                "param_4": {
                    "1": "flag2",
                    "2": "param_flag",
                    "3": "mode",
                    "4": "flag_type",
                    "5": "condition"
                },
                "param_5": {
                    "1": "param_uint",
                    "11": "limit",
                    "3": "size",
                    "4": "max_size",
                    "5": "max_value"
                },
                "param_6": {
                    "1": "param",
                    "3": "offset",
                    "5": "current_size",
                    "6": "current_value"
                },
                "uVar2": {
                    "1": "status",
                    "12": "result",
                    "16": "return_value",
                    "2": "return_val"
                }
            },
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_08001ccc"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080026e8) */\n/* WARNING: Removing unreachable block (ram,0x080026fa) */\n/* WARNING: Removing unreachable block (ram,0x080026fc) */\n/* WARNING: Removing unreachable block (ram,0x080026fe) */\n\nundefined4\nupdate_permissions_08002640(uint **data,byte flag,undefined2 permission,short condition,uint limit,int value)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  **data = **data | 0x100;\n  do {\n    if ((~(*data)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_0800270a;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (result = get_data(), (uint)(result - value) <= limit))));\n  some_param1 = (uint *)0x0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)((int)data + 0x3e) = 0;\n  *(undefined *)(data + 0xf) = 0;\n  result = 3;\nLAB_0800270a:\n  if (result == 0) {\n    (*data)[4] = flag & 0xfe;\n    result = check_and_update_permissions_08002640(data,0x10002,limit,value);\n    if (result == 0) {\n      result = check_flag_and_update(data,limit,value,(*data)[6]);\n      if (result == 0) {\n        if (condition == 1) {\n          (*data)[4] = (uint)access_byte;\n        }\n        else {\n          (*data)[4] = (uint)(byte)((ushort)permission >> 8);\n          result = check_flag_and_update(data,limit,value);\n          if (result != 0) {\n            if (some_param2 == (uint *)0x4) {\n              **data = **data | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*data)[4] = (uint)access_byte;\n        }\n        return_value = 0;\n      }\n      else if (some_param2 == (uint *)0x4) {\n        **data = **data | 0x200;\n        return_value = 1;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n    else if (some_param2 == (uint *)0x4) {\n      return_value = 1;\n    }\n    else {\n      return_value = 3;\n    }\n  }\n  else {\n    return_value = 3;\n  }\n  return return_value;\n}\n\n",
            "current_name": "update_permissions_08002640",
            "entrypoint": "0x08002640",
            "imported": false,
            "improved": true,
            "renaming": {
                "(byte)param_3": "access_byte",
                "FUN_08002640": "update_permissions_08002640",
                "check_and_update_permissions_08002ad8": "check_and_update_permissions",
                "check_flag_and_update_08002bb4": "check_flag_and_update",
                "get_data_080015a0": "get_data",
                "iVar1": "result",
                "param_1": "data",
                "param_1[0x10]": "some_param2",
                "param_1[0xc]": "some_param1",
                "param_2": "flag",
                "param_3": "permission",
                "param_4": "condition",
                "param_5": "limit",
                "param_6": "value",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080027f4": {
            "additional_data": {
                "**param_1": {
                    "1": "input"
                },
                "FUN_080027f4": {
                    "1": "execute_operation",
                    "11": "update_permissions",
                    "2": "update_flags_and_permissions",
                    "5": "update_permissions_and_flags"
                },
                "check_and_update_permissions_08002ad8": {
                    "1": "check_and_update_permissions"
                },
                "check_flag_and_update_08002bb4": {
                    "1": "check_flag_and_update"
                },
                "get_data_080015a0": {
                    "1": "get_data"
                },
                "iVar1": {
                    "1": "error_code",
                    "2": "check",
                    "25": "result"
                },
                "param_1": {
                    "1": "input_param",
                    "10": "data",
                    "2": "param",
                    "3": "permissions"
                },
                "param_2": {
                    "1": "flag_byte",
                    "18": "flag",
                    "2": "byte_param",
                    "3": "byte_value"
                },
                "param_3": {
                    "1": "permission_byte_val",
                    "2": "short_param",
                    "3": "short_value",
                    "4": "flag",
                    "8": "value",
                    "9": "permission"
                },
                "param_4": {
                    "1": "flag_length",
                    "2": "param",
                    "5": "flag",
                    "6": "condition"
                },
                "param_5": {
                    "1": "flag_uint",
                    "15": "limit",
                    "2": "data_limit",
                    "3": "size"
                },
                "param_6": {
                    "1": "current_address",
                    "2": "data_offset",
                    "3": "param_6",
                    "4": "current_value",
                    "5": "offset"
                },
                "uVar2": {
                    "2": "return_val",
                    "21": "return_value",
                    "6": "result"
                }
            },
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_08001f6c"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080028ae) */\n/* WARNING: Removing unreachable block (ram,0x080028c0) */\n/* WARNING: Removing unreachable block (ram,0x080028c2) */\n/* WARNING: Removing unreachable block (ram,0x080028c4) */\n/* WARNING: Removing unreachable block (ram,0x08002a6c) */\n/* WARNING: Removing unreachable block (ram,0x08002a7e) */\n/* WARNING: Removing unreachable block (ram,0x08002a80) */\n/* WARNING: Removing unreachable block (ram,0x08002a82) */\n\nundefined4\nupdate_permissions_080027f4(uint **data,byte flag,undefined2 permission,short condition,uint limit,int offset)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  **data = **data | 0x400;\n  **data = **data | 0x100;\n  do {\n    if ((~(*data)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_080028d2;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (result = get_data(), (uint)(result - offset) <= limit))));\n  data[0xc] = (uint *)0x0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)((int)data + 0x3e) = 0;\n  *(undefined *)(data + 0xf) = 0;\n  result = 3;\nLAB_080028d2:\n  if (result == 0) {\n    (*data)[4] = flag & 0xfe;\n    result = check_and_update_permissions_080027f4(data,0x10002,limit,offset);\n    if (result == 0) {\n      result = check_flag_and_update(data,limit,offset,(*data)[6]);\n      if (result == 0) {\n        if (condition == 1) {\n          (*data)[4] = (uint)(byte)permission;\n        }\n        else {\n          (*data)[4] = (uint)(byte)((ushort)permission >> 8);\n          result = check_flag_and_update(data,limit,offset);\n          if (result != 0) {\n            if (data[0x10] == (uint *)0x4) {\n              **data = **data | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*data)[4] = (uint)(byte)permission;\n        }\n        result = check_flag_and_update(data,limit,offset);\n        if (result == 0) {\n          **data = **data | 0x100;\n          do {\n            if ((~(*data)[5] & 1) == 0) {\n              result = 0;\n              goto LAB_08002a90;\n            }\n          } while ((limit == 0xffffffff) ||\n                  ((limit != 0 && (result = get_data(), (uint)(result - offset) <= limit))));\n          data[0xc] = (uint *)0x0;\n          *(undefined *)((int)data + 0x3d) = 0x20;\n          *(undefined *)((int)data + 0x3e) = 0;\n          *(undefined *)(data + 0xf) = 0;\n          result = 3;\nLAB_08002a90:\n          if (result == 0) {\n            (*data)[4] = (uint)(flag | 1);\n            result = check_and_update_permissions_080027f4(data,0x10002,limit,offset);\n            if (result == 0) {\n              return_value = 0;\n            }\n            else if (data[0x10] == (uint *)0x4) {\n              return_value = 1;\n            }\n            else {\n              return_value = 3;\n            }\n          }\n          else {\n            return_value = 3;\n          }\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          **data = **data | 0x200;\n          return_value = 1;\n        }\n        else {\n          return_value = 3;\n        }\n      }\n      else if (data[0x10] == (uint *)0x4) {\n        **data = **data | 0x200;\n        return_value = 1;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n    else if (data[0x10] == (uint *)0x4) {\n      return_value = 1;\n    }\n    else {\n      return_value = 3;\n    }\n  }\n  else {\n    return_value = 3;\n  }\n  return return_value;\n}\n\n",
            "current_name": "update_permissions_080027f4",
            "entrypoint": "0x080027f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080027f4": "update_permissions_080027f4",
                "check_and_update_permissions_08002ad8": "check_and_update_permissions",
                "check_flag_and_update_08002bb4": "check_flag_and_update",
                "get_data_080015a0": "get_data",
                "iVar1": "result",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "permission",
                "param_4": "condition",
                "param_5": "limit",
                "param_6": "offset",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "additional_data": {
                "(*param_1)[5]": {
                    "1": "data1[5]"
                },
                "(*param_1)[6]": {
                    "1": "array_value_2"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "result_value1"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "result_value2"
                },
                "**param_1": {
                    "1": "data1_value"
                },
                "*param_1": {
                    "1": "data_array"
                },
                "FUN_08002ad8": {
                    "1": "check_param_validity",
                    "2": "check_permissions",
                    "3": "check_and_update_flags",
                    "4": "check_and_update_permissions"
                },
                "bVar4": {
                    "1": "is_value_non_zero_mask",
                    "2": "is_permission_set",
                    "3": "is_modified",
                    "5": "is_updated"
                },
                "cVar2": {
                    "1": "is_flag_set",
                    "2": "permission_char",
                    "5": "flag",
                    "6": "result_char",
                    "8": "result"
                },
                "dataDiff": {
                    "1": "difference"
                },
                "dataPointer": {
                    "1": "data"
                },
                "dataPointer[5]": {
                    "1": "data1"
                },
                "get_data_080015a0": {
                    "1": "get_data_difference_from_threshold",
                    "2": "get_data"
                },
                "iVar1": {
                    "1": "processed_value",
                    "2": "data_result",
                    "3": "data_offset",
                    "4": "result",
                    "5": "data_difference",
                    "6": "data"
                },
                "isNonZero": {
                    "1": "has_value"
                },
                "limit": {
                    "1": "upper_limit"
                },
                "param_1": {
                    "1": "flag_data",
                    "2": "input_data",
                    "3": "param_list",
                    "4": "permissions"
                },
                "param_1[0x10]": {
                    "1": "result_pointer"
                },
                "param_1[0xc]": {
                    "1": "data_pointer[0xc]"
                },
                "param_2": {
                    "1": "flag_value",
                    "2": "flags",
                    "3": "value1",
                    "4": "input_value",
                    "6": "flag",
                    "7": "value"
                },
                "param_3": {
                    "1": "flag2",
                    "15": "limit",
                    "2": "size",
                    "3": "value2"
                },
                "param_4": {
                    "1": "limit",
                    "2": "current_value",
                    "3": "reference_value",
                    "9": "comparison_value"
                },
                "referenceValue": {
                    "1": "reference"
                },
                "resultChar": {
                    "1": "output"
                },
                "tempValue": {
                    "1": "temp"
                },
                "uVar3": {
                    "1": "flag_value",
                    "2": "masked_flag",
                    "4": "updated_value",
                    "8": "masked_value"
                },
                "value": {
                    "1": "new_value"
                }
            },
            "called": [
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "code": "\nundefined4 check_and_update_permissions_08002ad8(uint **permissions,uint value,uint limit,int comparison_value)\n\n{\n  int data;\n  char result;\n  uint masked_value;\n  bool is_updated;\n  \n  do {\n    if ((value >> 0x10 & 0xff) == 1) {\n      masked_value = value & ~(*permissions)[5] & 0xffff;\n      is_updated = masked_value != 0;\n      if (is_updated) {\n        masked_value = 1;\n      }\n      result = (char)masked_value;\n      if (!is_updated) {\n        result = '\\0';\n      }\n    }\n    else {\n      masked_value = value & ~(*permissions)[6] & 0xffff;\n      is_updated = masked_value != 0;\n      if (is_updated) {\n        masked_value = 1;\n      }\n      result = (char)masked_value;\n      if (!is_updated) {\n        result = '\\0';\n      }\n    }\n    if (result == '\\0') {\n      return 0;\n    }\n    if (((*permissions)[5] & 0x400) == 0x400) {\n      **permissions = **permissions | 0x200;\n      (*permissions)[5] = 0xfffffbff;\n      result_pointer = (uint *)0x4;\n      data_pointer[0xc] = (uint *)0x0;\n      *(undefined *)((int)permissions + 0x3d) = 0x20;\n      *(undefined *)(permissions + 0xf) = 0;\n      return 1;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (data = get_data(), (uint)(data - comparison_value) <= limit))));\n  data_pointer[0xc] = (uint *)0x0;\n  *(undefined *)((int)permissions + 0x3d) = 0x20;\n  *(undefined *)(permissions + 0xf) = 0;\n  return 3;\n}\n\n",
            "current_name": "check_and_update_permissions_08002ad8",
            "entrypoint": "0x08002ad8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ad8": "check_and_update_permissions_08002ad8",
                "bVar4": "is_updated",
                "cVar2": "result",
                "get_data_080015a0": "get_data",
                "iVar1": "data",
                "param_1": "permissions",
                "param_1[0x10]": "result_pointer",
                "param_1[0xc]": "data_pointer[0xc]",
                "param_2": "value",
                "param_3": "limit",
                "param_4": "comparison_value",
                "uVar3": "masked_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002bb4": {
            "additional_data": {
                "(int)param_1 + 0x3d": {
                    "1": "flag_location"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "flag_value"
                },
                "*(uint *)(*param_1 + 0x14) & 0x80": {
                    "1": "bitwise_check"
                },
                "*(undefined *)((int)param_1 + 0x3d) = 0x20": {
                    "1": "set_marker"
                },
                "*(undefined *)(param_1 + 0xf) = 0": {
                    "1": "reset_marker"
                },
                "0xffffffff": {
                    "1": "max_uint_value"
                },
                "FUN_08002bb4": {
                    "1": "check_and_update_flags",
                    "2": "check_and_update_data",
                    "3": "check_data_validity",
                    "5": "check_flag_and_update"
                },
                "PTR_xxxxx": {
                    "1": "unchanged_variable"
                },
                "check_flag_08002d3c": {
                    "2": "check_flag_helper",
                    "5": "check_flag"
                },
                "get_data_080015a0": {
                    "1": "get_max_data_length",
                    "2": "get_data_size",
                    "4": "get_data"
                },
                "iVar1": {
                    "1": "check_flag_result",
                    "10": "flag_result",
                    "12": "flag_check_result",
                    "2": "check_result",
                    "6": "result"
                },
                "param_1": {
                    "1": "flags",
                    "2": "input_array",
                    "3": "flag_ptr",
                    "6": "data_array",
                    "8": "data_ptr"
                },
                "param_1 + 0xf": {
                    "1": "counter_location"
                },
                "param_1[0x10]": {
                    "1": "flag_bits"
                },
                "param_1[0x10] = param_1[0x10] | 0x20": {
                    "1": "set_flag"
                },
                "param_1[0xc]": {
                    "1": "counter"
                },
                "param_1[0xc] = 0": {
                    "1": "reset_counter"
                },
                "param_2": {
                    "1": "length",
                    "2": "flag_value",
                    "3": "array_size",
                    "4": "data_length",
                    "5": "size"
                },
                "param_3": {
                    "1": "size",
                    "16": "offset",
                    "9": "data_offset"
                }
            },
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "calling": [
                "FUN_08001ccc",
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "code": "\nundefined4 check_flag_and_update_08002bb4(int *data_ptr,uint size,int offset)\n\n{\n  int flag_check_result;\n  \n  while( true ) {\n    if ((*(uint *)(*data_ptr + 0x14) & 0x80) == 0x80) {\n      return 0;\n    }\n    flag_check_result = check_flag(data_ptr);\n    if (flag_check_result != 0) break;\n    if ((size != 0xffffffff) &&\n       ((size == 0 || (flag_check_result = get_data(), size < (uint)(flag_check_result - offset))))) {\n      flag_bits = flag_bits | 0x20;\n      counter = 0;\n      *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n      *(undefined *)(data_ptr + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_flag_and_update_08002bb4",
            "entrypoint": "0x08002bb4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002bb4": "check_flag_and_update_08002bb4",
                "check_flag_08002d3c": "check_flag",
                "get_data_080015a0": "get_data",
                "iVar1": "flag_check_result",
                "param_1": "data_ptr",
                "param_1[0x10]": "flag_bits",
                "param_1[0xc]": "counter",
                "param_2": "size",
                "param_3": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002c2e": {
            "additional_data": {
                "FUN_08002c2e": {
                    "1": "check_flags",
                    "2": "check_data",
                    "5": "check_data_integrity",
                    "9": "check_and_update_data"
                },
                "PTR_FUN_08002d3c": {
                    "1": "check_flag_08002d3c"
                },
                "check_flag_08002d3c": {
                    "10": "check_flag"
                },
                "data_length": {
                    "1": "actual_data_length"
                },
                "data_ptr": {
                    "1": "data_array"
                },
                "expected_data_length": {
                    "1": "expected_length"
                },
                "get_data_080015a0": {
                    "1": "get_data_length",
                    "9": "get_data"
                },
                "iVar1": {
                    "1": "check_result",
                    "15": "flag_check_result",
                    "2": "flag_check",
                    "3": "result",
                    "8": "flag_result"
                },
                "param_1": {
                    "1": "flag_data",
                    "12": "data_ptr",
                    "6": "data_array",
                    "9": "data"
                },
                "param_1[0x10]": {
                    "1": "data_ptr[16]"
                },
                "param_1[0xc]": {
                    "1": "data_ptr[12]"
                },
                "param_2": {
                    "1": "flag_check",
                    "11": "data_size",
                    "3": "flag_value",
                    "4": "data_length",
                    "5": "size"
                },
                "param_3": {
                    "1": "limit",
                    "13": "offset",
                    "6": "data_offset"
                }
            },
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "calling": [
                "FUN_08001ccc"
            ],
            "code": "\nundefined4 check_and_update_data_08002c2e(int *data_ptr,uint data_size,int offset)\n\n{\n  int flag_check_result;\n  \n  while( true ) {\n    if ((*(uint *)(*data_ptr + 0x14) & 4) == 4) {\n      return 0;\n    }\n    flag_check_result = check_flag(data_ptr);\n    if (flag_check_result != 0) break;\n    if ((data_size != 0xffffffff) &&\n       ((data_size == 0 || (flag_check_result = get_data(), data_size < (uint)(flag_check_result - offset))))) {\n      data_ptr[16] = data_ptr[16] | 0x20;\n      data_ptr[12] = 0;\n      *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n      *(undefined *)(data_ptr + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_and_update_data_08002c2e",
            "entrypoint": "0x08002c2e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002c2e": "check_and_update_data_08002c2e",
                "check_flag_08002d3c": "check_flag",
                "get_data_080015a0": "get_data",
                "iVar1": "flag_check_result",
                "param_1": "data_ptr",
                "param_1[0x10]": "data_ptr[16]",
                "param_1[0xc]": "data_ptr[12]",
                "param_2": "data_size",
                "param_3": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ca8": {
            "additional_data": {
                "(*param_1 + 0x14)": {
                    "1": "data_flag"
                },
                "(int)param_1 + 0x3d": {
                    "1": "flag2"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "state_flag",
                    "3": "data_flag",
                    "5": "data_flags"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "flag2"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "flag2",
                    "2": "flag3"
                },
                "*(undefined4 *)(*param_1 + 0x14)": {
                    "1": "modified_data_flags"
                },
                "*param_1": {
                    "1": "state_ptr"
                },
                "0x10": {
                    "1": "flag2",
                    "2": "flag_2"
                },
                "0x14": {
                    "1": "data_flags"
                },
                "0x3d": {
                    "1": "flag_3"
                },
                "0x40": {
                    "1": "flag1",
                    "2": "flag_1"
                },
                "0xf": {
                    "1": "flag_4"
                },
                "0xffffffef": {
                    "1": "reset_value"
                },
                "DAT_*": {
                    "1": "unchanged"
                },
                "DAT_08002ca8": {
                    "1": "some_constant"
                },
                "FUN_08002ca8": {
                    "1": "check_and_modify_state",
                    "11": "check_data_validity",
                    "2": "check_data",
                    "4": "check_data_integrity"
                },
                "PTR_*": {
                    "1": "unchanged"
                },
                "PTR_FUN_08002ca8": {
                    "1": "flags_pointer"
                },
                "data_length": {
                    "1": "data_length"
                },
                "data_offset": {
                    "1": "data_offset"
                },
                "data_ptr": {
                    "1": "data_ptr"
                },
                "get_data_080015a0": {
                    "1": "get_data_size_diff",
                    "2": "get_data",
                    "6": "get_data_size"
                },
                "get_data_080015a0()": {
                    "1": "get_data_length()"
                },
                "iVar1": {
                    "1": "data_required",
                    "2": "required_data_size",
                    "3": "data_offset",
                    "5": "required_size"
                },
                "param_1": {
                    "1": "state",
                    "11": "data",
                    "6": "data_ptr",
                    "7": "data_pointer"
                },
                "param_1 + 0xf": {
                    "1": "extra"
                },
                "param_1[0x10]": {
                    "1": "bitwise_flag",
                    "2": "flag1"
                },
                "param_1[0xc]": {
                    "1": "state_variable2",
                    "3": "counter"
                },
                "param_2": {
                    "1": "array_size",
                    "18": "data_size",
                    "3": "data_length",
                    "6": "size"
                },
                "param_3": {
                    "1": "current_index",
                    "10": "offset",
                    "2": "index",
                    "3": "start_index",
                    "5": "current_size",
                    "8": "data_offset"
                }
            },
            "called": [
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_08001f6c"
            ],
            "code": "\nundefined4 check_data_validity_08002ca8(int *data,uint data_size,int offset)\n\n{\n  int data_difference;\n  \n  while( true ) {\n    if ((*(uint *)(*data + 0x14) & 0x40) == 0x40) {\n      return 0;\n    }\n    if ((*(uint *)(*data + 0x14) & 0x10) == 0x10) break;\n    if ((data_size == 0) || (data_difference = get_data_length(), data_size < (uint)(data_difference - offset))) {\n      flag1 = flag1 | 0x20;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)(data + 0xf) = 0;\n      return 3;\n    }\n  }\n  *(undefined4 *)(*data + 0x14) = 0xffffffef;\n  flag1 = 0;\n  counter = 0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)(data + 0xf) = 0;\n  return 1;\n}\n\n",
            "current_name": "check_data_validity_08002ca8",
            "entrypoint": "0x08002ca8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ca8": "check_data_validity_08002ca8",
                "get_data_080015a0": "get_data_size",
                "get_data_080015a0()": "get_data_length()",
                "iVar1": "data_difference",
                "param_1": "data",
                "param_1[0x10]": "flag1",
                "param_1[0xc]": "counter",
                "param_2": "data_size",
                "param_3": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002d3c": {
            "additional_data": {
                "(int)param_1 + 0x3d": {
                    "1": "offset_address"
                },
                "(param_1 + 0xf)": {
                    "1": "array_index0xf"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "flag_field",
                    "3": "flag_value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "buffer",
                    "2": "byte_value"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "byte_pointer_value",
                    "2": "status"
                },
                "*(undefined4 *)(*param_1 + 0x14)": {
                    "1": "modified_value"
                },
                "*param_1": {
                    "1": "flag_value"
                },
                "FUN_08002d3c": {
                    "1": "rewrite_function",
                    "2": "update_flag_and_values",
                    "3": "update_data",
                    "5": "check_flag_status",
                    "9": "check_flag"
                },
                "bVar1": {
                    "1": "is_condition_met",
                    "2": "is_bit_set",
                    "22": "is_flag_set"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "flags",
                    "3": "flag_ptr",
                    "4": "data_pointer",
                    "6": "data"
                },
                "param_1[0x10]": {
                    "1": "int_value1",
                    "3": "error_code"
                },
                "param_1[0xc]": {
                    "1": "value2",
                    "2": "counter"
                },
                "uint": {
                    "1": "unsigned_int"
                },
                "undefined": {
                    "1": "unknown_byte"
                },
                "undefined4": {
                    "1": "four_byte"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002c2e",
                "FUN_08002bb4"
            ],
            "code": "\nbool check_flag_08002d3c(int *data)\n\n{\n  bool is_flag_set;\n  \n  is_flag_set = (*(unsigned_int *)(*data + 0x14) & 0x400) == 0x400;\n  if (is_flag_set) {\n    *(four_byte *)(*data + 0x14) = 0xfffffbff;\n    error_code = 4;\n    counter = 0;\n    *(unknown_byte *)((int)data + 0x3d) = 0x20;\n    *(unknown_byte *)(data + 0xf) = 0;\n  }\n  return is_flag_set;\n}\n\n",
            "current_name": "check_flag_08002d3c",
            "entrypoint": "0x08002d3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002d3c": "check_flag_08002d3c",
                "bVar1": "is_flag_set",
                "param_1": "data",
                "param_1[0x10]": "error_code",
                "param_1[0xc]": "counter",
                "uint": "unsigned_int",
                "undefined": "unknown_byte",
                "undefined4": "four_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002d8a": {
            "called": [],
            "calling": [
                "FUN_080014f0"
            ],
            "code": "\nvoid FUNC_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002d8a",
            "entrypoint": "0x08002d8a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002d8a": "FUNC_08002d8a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08002d98": {
            "additional_data": {
                "(_DAT_4002101c & 0x10000000) == 0": {
                    "1": "is_bit_clear"
                },
                "(flags & 4) != 0": {
                    "1": "is_flag_set"
                },
                "(registerStatus & 0x2000000) == 0": {
                    "1": "is_condition_satisfied"
                },
                "(registerStatus & 2) == 0": {
                    "1": "is_register_status_zero"
                },
                "100 < (uint)(currentTime - startTime)": {
                    "1": "check_time_difference4"
                },
                "2 < (uint)(currentTime - startTime)": {
                    "1": "check_time_difference5"
                },
                "2 < (uint)(currentTime - startTime2)": {
                    "1": "check_time_difference3"
                },
                "FUN_08002d98": {
                    "1": "check_and_update_flags",
                    "2": "check_and_modify_settings",
                    "3": "process_flags"
                },
                "_DAT_40007000": {
                    "1": "register_4",
                    "2": "register_3"
                },
                "_DAT_40007000 | 0x100": {
                    "1": "set_bit_in_40007000"
                },
                "_DAT_40021000": {
                    "1": "control_register2",
                    "2": "register_2"
                },
                "_DAT_40021000 & 0x20000": {
                    "1": "is_setting_check_zero"
                },
                "_DAT_40021000 & 0xfffaffff": {
                    "1": "clear_bit2_in_settings"
                },
                "_DAT_40021000 & 2": {
                    "1": "setting_check2"
                },
                "_DAT_40021000 | 0x10000": {
                    "1": "set_bit_in_settings"
                },
                "_DAT_40021000 | 0x50000": {
                    "1": "set_bit2_in_settings"
                },
                "_DAT_40021004": {
                    "1": "reg_1",
                    "2": "register_1"
                },
                "_DAT_40021004 & 0x10000": {
                    "1": "register_flag"
                },
                "_DAT_40021004 & 0xc": {
                    "1": "register_mode"
                },
                "_DAT_40021004 = param_1[2] | registerStatus & 0xfffdffff": {
                    "1": "set_bits_in_register_status2"
                },
                "_DAT_40021004 = param_1[9] | param_1[8] | registerStatus & 0xffc2ffff": {
                    "1": "set_bits_in_register_status3"
                },
                "_DAT_4002101c": {
                    "1": "flag_register",
                    "2": "register_4"
                },
                "_DAT_4002101c | 0x10000000": {
                    "1": "set_bit_in_register_status"
                },
                "_DAT_40021020": {
                    "1": "register5",
                    "3": "register_5"
                },
                "_DAT_40021024": {
                    "1": "register2",
                    "2": "register_6"
                },
                "_DAT_42420000": {
                    "1": "status",
                    "2": "flag_1"
                },
                "_DAT_42420000 = 0": {
                    "1": "clear_register_status2"
                },
                "_DAT_42420000 = 1": {
                    "1": "set_register_status2"
                },
                "_DAT_42420060": {
                    "1": "reg_8",
                    "2": "flag_3"
                },
                "_DAT_42420060 = 0": {
                    "1": "clear_register_status3"
                },
                "_DAT_42420480": {
                    "1": "flag2",
                    "2": "flag_2"
                },
                "bVar4": {
                    "1": "is_flag_enabled",
                    "3": "is_bit_set",
                    "4": "is_condition_met",
                    "5": "flag",
                    "6": "is_flag_set"
                },
                "calculate_iterations_08003568": {
                    "4": "calculate_iterations"
                },
                "calculate_iterations_08003568(1)": {
                    "1": "perform_calculation"
                },
                "config_register_2_bit_1": {
                    "1": "is_bit_1_set"
                },
                "config_register_2_bit_17": {
                    "1": "is_bit_17_set"
                },
                "config_register_2_bit_21": {
                    "1": "is_bit_21_set"
                },
                "config_register_2_bit_23": {
                    "1": "is_bit_23_set"
                },
                "flagCheck == 0": {
                    "1": "is_flag_check_zero"
                },
                "flagCheck == 0x10000": {
                    "1": "is_flag_check1"
                },
                "flagCheck == 0x50000": {
                    "1": "is_flag_check2"
                },
                "get_data_080015a0": {
                    "1": "get_time_stamp",
                    "3": "get_data",
                    "4": "get_current_time"
                },
                "get_data_080015a0()": {
                    "1": "start_time2"
                },
                "iVar1": {
                    "1": "start",
                    "12": "start_time",
                    "2": "first_value",
                    "3": "start_value",
                    "9": "initial_value"
                },
                "iVar2": {
                    "1": "value2",
                    "12": "current_time",
                    "13": "current_value",
                    "2": "second_value"
                },
                "param_1": {
                    "1": "configuration",
                    "12": "flags",
                    "2": "input_data",
                    "3": "settings",
                    "4": "parameters"
                },
                "param_1[1]": {
                    "1": "flag_value"
                },
                "param_1[3]": {
                    "1": "input_data_3"
                },
                "param_1[3] == 0": {
                    "1": "is_flag_set3"
                },
                "param_1[3] == 1": {
                    "1": "is_flag_set2"
                },
                "param_1[3] == 5": {
                    "1": "is_flag_set4"
                },
                "param_1[4]": {
                    "1": "input_data_4"
                },
                "param_1[4] != 1": {
                    "1": "is_flag_check3"
                },
                "param_1[4] == 0": {
                    "1": "is_flag_check4"
                },
                "param_1[5]": {
                    "1": "input_data_5"
                },
                "param_1[5] << 3 | settings & 0xffffff07": {
                    "1": "new_setting"
                },
                "param_1[6]": {
                    "1": "flag_value3"
                },
                "param_1[7]": {
                    "1": "flag_value5"
                },
                "param_1[8]": {
                    "1": "register_value2"
                },
                "param_1[9]": {
                    "1": "input_data_9"
                },
                "registerStatus & 0xc": {
                    "1": "register_mode"
                },
                "settings & 0x20000": {
                    "1": "setting_flag"
                },
                "uVar3": {
                    "26": "result",
                    "5": "return_value"
                }
            },
            "called": [
                "FUN_08003568",
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_080052a0"
            ],
            "code": "\n\n\nundefined4 process_flags_08002d98(uint *flags)\n\n{\n  int start_time;\n  int current_value;\n  undefined4 result;\n  bool is_flag_set;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0x10000)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (flag_check == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (flag_check == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (flag_check == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (flag_check == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (flag_check == 0) {\n        start_time = start_time2;\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          current_value = start_time2;\n          if (100 < (uint)(current_value - start_time)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        start_time = start_time2;\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          current_value = start_time2;\n          if (100 < (uint)(current_value - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (flag_value2 != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = register_value << 3 | _DAT_40021000 & 0xffffff07;\n    }\n    else if (flag_value2 == 0) {\n      _DAT_42420000 = 0;\n      start_time = start_time2;\n      while ((_DAT_40021000 & 2) != 0) {\n        current_value = start_time2;\n        if (2 < (uint)(current_value - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      start_time = start_time2;\n      while ((_DAT_40021000 & 2) == 0) {\n        current_value = start_time2;\n        if (2 < (uint)(current_value - start_time)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = register_value << 3 | _DAT_40021000 & 0xffffff07;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flag_value3 == 0) {\n      _DAT_42420480 = 0;\n      start_time = start_time2;\n      while ((_DAT_40021024 & 2) != 0) {\n        current_value = start_time2;\n        if (2 < (uint)(current_value - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      start_time = start_time2;\n      while ((_DAT_40021024 & 2) == 0) {\n        current_value = start_time2;\n        if (2 < (uint)(current_value - start_time)) {\n          return 3;\n        }\n      }\n      perform_calculation;\n    }\n  }\n  if ((*flags & 4) != 0) {\n    is_flag_set = (_DAT_4002101c & 0x10000000) == 0;\n    if (is_flag_set) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      start_time = start_time2;\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current_value = start_time2;\n        if (100 < (uint)(current_value - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (flag_value4 == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (flag_value4 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (flag_value4 == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (flag_value4 == 0) {\n      start_time = start_time2;\n      while ((_DAT_40021020 & 2) != 0) {\n        current_value = start_time2;\n        if (5000 < (uint)(current_value - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      start_time = start_time2;\n      while ((_DAT_40021020 & 2) == 0) {\n        current_value = start_time2;\n        if (5000 < (uint)(current_value - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (is_flag_set) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (flag_value5 == 0) {\nLAB_0800324a:\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (flag_value5 == 2) {\n    _DAT_42420060 = 0;\n    start_time = start_time2;\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (register_value2 == 0x10000) {\n          _DAT_40021004 = flags[2] | _DAT_40021004 & 0xfffdffff;\n        }\n        _DAT_40021004 = register_value3 | register_value2 | _DAT_40021004 & 0xffc2ffff;\n        _DAT_42420060 = 1;\n        start_time = start_time2;\n        while ((_DAT_40021000 & 0x2000000) == 0) {\n          current_value = start_time2;\n          if (2 < (uint)(current_value - start_time)) {\n            return 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      current_value = start_time2;\n    } while ((uint)(current_value - start_time) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    start_time = start_time2;\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) goto LAB_0800324a;\n      current_value = start_time2;\n    } while ((uint)(current_value - start_time) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "current_name": "process_flags_08002d98",
            "entrypoint": "0x08002d98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002d98": "process_flags_08002d98",
                "bVar4": "is_flag_set",
                "calculate_iterations_08003568": "calculate_iterations",
                "calculate_iterations_08003568(1)": "perform_calculation",
                "get_data_080015a0": "get_current_time",
                "get_data_080015a0()": "start_time2",
                "iVar1": "start_time",
                "iVar2": "current_value",
                "param_1": "flags",
                "param_1[1]": "flag_check",
                "param_1[3]": "flag_value4",
                "param_1[4]": "flag_value2",
                "param_1[5]": "register_value",
                "param_1[6]": "flag_value3",
                "param_1[7]": "flag_value5",
                "param_1[8]": "register_value2",
                "param_1[9]": "register_value3",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003260": {
            "additional_data": {
                "DAT_08009eb0": {
                    "1": "config_bit_lookup_table"
                },
                "DAT_20000018": {
                    "1": "time_info",
                    "2": "execution_time_data"
                },
                "FUN_08003260": {
                    "1": "calculate_execution_time_check",
                    "3": "update_memory_configuration",
                    "5": "calculate_execution_time_and_initialize_memory",
                    "8": "calculate_execution_time"
                },
                "_DAT_40021000": {
                    "1": "data_config"
                },
                "_DAT_40021004": {
                    "1": "data_config"
                },
                "_DAT_40022000": {
                    "1": "buffer_info",
                    "3": "memory_config"
                },
                "calculate_execution_time_08003440": {
                    "6": "calculate_execution_time"
                },
                "get_data_080015a0": {
                    "7": "get_data"
                },
                "iVar1": {
                    "1": "data_1",
                    "11": "initial_data",
                    "2": "start",
                    "8": "start_time"
                },
                "iVar2": {
                    "1": "current_address",
                    "12": "current_data",
                    "2": "current",
                    "3": "current_value",
                    "8": "current_time"
                },
                "initialize_memory_0800151c": {
                    "7": "initialize_memory"
                },
                "param_1": {
                    "1": "configuration",
                    "11": "flags",
                    "2": "input_data",
                    "5": "config"
                },
                "param_1[1]": {
                    "1": "config_bit1"
                },
                "param_1[2]": {
                    "1": "config_bit2"
                },
                "param_1[3]": {
                    "1": "config_value2"
                },
                "param_1[4]": {
                    "1": "config_value3"
                },
                "param_2": {
                    "1": "operation_size",
                    "12": "execution_time",
                    "2": "execution_time_limit",
                    "3": "config_size",
                    "4": "size"
                },
                "uVar3": {
                    "1": "execution_time_flags",
                    "18": "execution_time",
                    "3": "time",
                    "7": "calculated_time"
                },
                "uVar4": {
                    "1": "result_code",
                    "2": "status",
                    "24": "result",
                    "3": "return_value"
                }
            },
            "called": [
                "FUN_0800151c",
                "FUN_080015a0",
                "FUN_08003440"
            ],
            "calling": [
                "FUN_080052a0"
            ],
            "code": "\n\n\nundefined4 calculate_execution_time_08003260(uint *flags,uint execution_time)\n\n{\n  int initial_data;\n  int current_data;\n  uint execution_time;\n  undefined4 result;\n  \n  if (((_DAT_40022000 & 7) < execution_time) &&\n     (_DAT_40022000 = execution_time | _DAT_40022000 & 0xfffffff8, execution_time != (execution_time & 7))) {\n    result = 1;\n  }\n  else {\n    if ((*flags & 2) != 0) {\n      _DAT_40021004 = config_value1 | _DAT_40021004 & 0xffffff0f;\n    }\n    if ((*flags & 1) == 0) {\nLAB_08003394:\n      if ((execution_time < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = execution_time | _DAT_40022000 & 0xfffffff8, execution_time != (execution_time & 7))) {\n        result = 1;\n      }\n      else {\n        if ((*flags & 4) != 0) {\n          _DAT_40021004 = config_value2 | _DAT_40021004 & 0xfffff8ff;\n        }\n        if ((*flags & 8) != 0) {\n          _DAT_40021004 = config_value3 << 3 | _DAT_40021004 & 0xffffc7ff;\n        }\n        execution_time = calculate_execution_time_08003260();\n        DAT_20000018 = execution_time >> (&DAT_08009eb0)[_DAT_40021004 >> 4 & 0xf];\n        initialize_memory(0xf);\n        result = 0;\n      }\n    }\n    else {\n      if (flag == 1) {\n        if ((_DAT_40021000 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((flag != 2) && ((_DAT_40021000 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40021004 = flag | _DAT_40021004 & 0xfffffffc;\n      initial_data = get_data();\n      if (flag == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_08003394;\n          current_data = get_data();\n        } while ((uint)(current_data - initial_data) < 0x1389);\n        result = 3;\n      }\n      else if (flag == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_08003394;\n          current_data = get_data();\n        } while ((uint)(current_data - initial_data) < 0x1389);\n        result = 3;\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_08003394;\n          current_data = get_data();\n        } while ((uint)(current_data - initial_data) < 0x1389);\n        result = 3;\n      }\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_execution_time_08003260",
            "entrypoint": "0x08003260",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003260": "calculate_execution_time_08003260",
                "calculate_execution_time_08003440": "calculate_execution_time",
                "get_data_080015a0": "get_data",
                "iVar1": "initial_data",
                "iVar2": "current_data",
                "initialize_memory_0800151c": "initialize_memory",
                "param_1": "flags",
                "param_1[1]": "flag",
                "param_1[2]": "config_value1",
                "param_1[3]": "config_value2",
                "param_1[4]": "config_value3",
                "param_2": "execution_time",
                "uVar3": "execution_time",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003440": {
            "additional_data": {
                "FUN_08003440": {
                    "1": "calculate_local_value",
                    "10": "calculate_execution_time",
                    "2": "calculate_timeout",
                    "8": "calculate_delay"
                },
                "_DAT_40021004": {
                    "1": "data_value"
                },
                "_FUN_08003440": {
                    "1": "calculate_execution_time"
                },
                "_local_10": {
                    "1": "execution_time"
                },
                "_local_14": {
                    "1": "temporary_variable_3"
                },
                "_local_18": {
                    "1": "temporary_variable_2"
                },
                "_local_1c": {
                    "1": "temporary_variable_1"
                },
                "_local_2c": {
                    "1": "constant_value_1"
                },
                "_local_30": {
                    "1": "counter_variable"
                },
                "_local_c": {
                    "1": "temporary_variable_4"
                },
                "_uStack_20": {
                    "1": "constant_value_4"
                },
                "_uStack_24": {
                    "1": "constant_value_3"
                },
                "_uStack_28": {
                    "1": "constant_value_2"
                },
                "local_10": {
                    "1": "clock_speed",
                    "10": "execution_time",
                    "2": "final_result",
                    "3": "result"
                },
                "local_14": {
                    "1": "variable1",
                    "2": "global_variable",
                    "8": "dat_40021004"
                },
                "local_18": {
                    "1": "variable2",
                    "3": "unused_variable",
                    "5": "temp"
                },
                "local_1c": {
                    "1": "variable1",
                    "3": "multiplier",
                    "8": "result"
                },
                "local_2c": {
                    "1": "constant_val1",
                    "3": "param1",
                    "5": "value1",
                    "9": "constant1"
                },
                "local_30": {
                    "1": "stack_start_address",
                    "2": "delay_multiplier"
                },
                "local_c": {
                    "1": "temporary_value",
                    "2": "calculation",
                    "3": "temp_result",
                    "5": "temp1"
                },
                "uStack_20": {
                    "1": "constant_4",
                    "3": "constant_d",
                    "5": "value4",
                    "9": "constant4"
                },
                "uStack_24": {
                    "1": "value2",
                    "3": "constant_c",
                    "5": "value3",
                    "9": "constant3"
                },
                "uStack_28": {
                    "1": "constant_val2",
                    "3": "constant_b",
                    "5": "value2",
                    "9": "constant2"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003260"
            ],
            "code": "\n\n\nuint calculate_execution_time_08003440(void)\n\n{\n  undefined2 count;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  uint result;\n  undefined4 temp;\n  uint dat_40021004;\n  uint execution_time;\n  uint temp1;\n  \n  constant1 = 0x5040302;\n  constant2 = 0x9080706;\n  constant3 = 0xd0c0b0a;\n  constant4 = 0x10100f0e;\n  count = 0x201;\n  temp = 0;\n  temp1 = 0;\n  result = 0;\n  execution_time = 0;\n  dat_40021004 = _DAT_40021004;\n  if ((_DAT_40021004 & 0xc) == 4) {\n    execution_time = 8000000;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = (uint)*(byte *)((int)&constant1 + (_DAT_40021004 >> 0x12 & 0xf));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      temp1 = result * 4000000;\n    }\n    else {\n      temp1 = (result * 8000000) / (uint)*(byte *)((int)&count + (_DAT_40021004 >> 0x11 & 1))\n      ;\n    }\n    execution_time = temp1;\n  }\n  else {\n    execution_time = 8000000;\n  }\n  return execution_time;\n}\n\n",
            "current_name": "calculate_execution_time_08003440",
            "entrypoint": "0x08003440",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003440": "calculate_execution_time_08003440",
                "local_10": "execution_time",
                "local_14": "dat_40021004",
                "local_18": "temp",
                "local_1c": "result",
                "local_2c": "constant1",
                "local_30": "count",
                "local_c": "temp1",
                "uStack_20": "constant4",
                "uStack_24": "constant3",
                "uStack_28": "constant2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003504": {
            "additional_data": {
                "DAT_20000018": {
                    "1": "retrieved_value",
                    "14": "data",
                    "2": "global_data",
                    "3": "global_variable"
                },
                "FUN_08003504": {
                    "1": "get_data_constant",
                    "14": "get_data",
                    "2": "get_dat_value",
                    "3": "get_global_variable",
                    "7": "get_data_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003518",
                "FUN_080052a0",
                "FUN_08003540"
            ],
            "code": "\nundefined4 get_data_08003504(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "current_name": "get_data_08003504",
            "entrypoint": "0x08003504",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003504": "get_data_08003504"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003518": {
            "additional_data": {
                "&DAT_08009ec0": {
                    "1": "data_address",
                    "2": "data_offset"
                },
                "*((int)&DAT_08009ec0 + (_DAT_40021004 >> 8 & 7))": {
                    "1": "shift_amount"
                },
                "DAT_08009ec0": {
                    "1": "byte_data",
                    "2": "data_offset"
                },
                "FUN_08003518": {
                    "1": "extracted_data_shifted",
                    "2": "shifted_data",
                    "4": "get_shifted_data",
                    "9": "shift_data"
                },
                "_DAT_40021004": {
                    "1": "input_data",
                    "2": "shift_amount",
                    "3": "shift_value"
                },
                "get_data_08003504": {
                    "10": "get_data",
                    "2": "get_extracted_data"
                },
                "int": {
                    "1": "index"
                },
                "sbyte": {
                    "1": "extract_shift",
                    "3": "shift",
                    "5": "shift_amount"
                },
                "sbyte *": {
                    "1": "shift_value"
                },
                "sbyte *((int)&DAT_08009ec0 + (_DAT_40021004 >> 8 & 7))": {
                    "1": "shift_amount"
                },
                "sbyte_808656d": {
                    "1": "shift_value"
                },
                "sbyte_var": {
                    "1": "shift_amount"
                },
                "uVar1": {
                    "1": "data_value",
                    "25": "data",
                    "3": "extracted_data"
                }
            },
            "called": [
                "FUN_08003504"
            ],
            "calling": [
                "FUN_08001ab0",
                "FUN_080046ec"
            ],
            "code": "\n\n\nuindex shift_data_08003518(void)\n\n{\n  uindex data;\n  \n  data = get_data();\n  return data >> *(shift_amount *)((index)&DAT_08009ec0 + (_DAT_40021004 >> 8 & 7));\n}\n\n",
            "current_name": "shift_data_08003518",
            "entrypoint": "0x08003518",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003518": "shift_data_08003518",
                "get_data_08003504": "get_data",
                "int": "index",
                "sbyte": "shift_amount",
                "uVar1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003540": {
            "additional_data": {
                "&DAT_08009ec0": {
                    "1": "data_offset"
                },
                "*((sbyte *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 0xb & 7)))": {
                    "1": "shift_value"
                },
                "7": {
                    "1": "bitmask"
                },
                "DAT_08009ec0": {
                    "1": "base",
                    "3": "data_offset"
                },
                "FUN_08003540": {
                    "1": "get_data_shifted",
                    "2": "retrieve_shifted_data",
                    "3": "shift_data_by_offset",
                    "5": "get_shifted_data",
                    "6": "shift_data"
                },
                "_DAT_40021004": {
                    "1": "input_data",
                    "2": "input_value",
                    "3": "shift_amount",
                    "5": "shift_value"
                },
                "get_data_08003504": {
                    "1": "extract_data",
                    "8": "get_data"
                },
                "sbyte": {
                    "1": "signed_byte_value",
                    "2": "shift_value",
                    "3": "shift",
                    "7": "shift_amount"
                },
                "sbyte_08009ec0": {
                    "1": "shift_value"
                },
                "sbyte_1": {
                    "1": "shift_amount"
                },
                "sbyte_PTR_08009ec0": {
                    "1": "shift_value"
                },
                "sbyte_value": {
                    "1": "bit_shift_value"
                },
                "uVar1": {
                    "2": "extracted_data",
                    "26": "data",
                    "3": "data_value"
                }
            },
            "called": [
                "FUN_08003504"
            ],
            "calling": [
                "FUN_080046ec"
            ],
            "code": "\n\n\nuint shift_data_08003540(void)\n\n{\n  uint data;\n  \n  data = get_data();\n  return data >> *(shift_amount *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 0xb & 7));\n}\n\n",
            "current_name": "shift_data_08003540",
            "entrypoint": "0x08003540",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003540": "shift_data_08003540",
                "get_data_08003504": "get_data",
                "sbyte": "shift_amount",
                "uVar1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003568": {
            "additional_data": {
                "FUN_08003568": {
                    "1": "count_down",
                    "10": "calculate_iterations",
                    "6": "delay_function",
                    "8": "calculate_delay"
                },
                "bVar1": {
                    "1": "is_not_empty",
                    "2": "is_non_zero"
                },
                "local_c": {
                    "1": "calculated_delay",
                    "2": "iteration_count",
                    "3": "num_iterations",
                    "5": "iterations"
                },
                "param_1": {
                    "1": "time_in_seconds",
                    "2": "milliseconds",
                    "21": "input_value",
                    "5": "input"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002d98"
            ],
            "code": "\nvoid calculate_iterations_08003568(int input_value)\n\n{\n  bool is_non_zero;\n  int delay_counter;\n  \n  delay_counter = input_value * (DAT_20000018 / 8000);\n  do {\n    is_non_zero = delay_counter != 0;\n    delay_counter = delay_counter + -1;\n  } while (is_non_zero);\n  return;\n}\n\n",
            "current_name": "calculate_iterations_08003568",
            "entrypoint": "0x08003568",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003568": "calculate_iterations_08003568",
                "bVar1": "is_non_zero",
                "local_c": "delay_counter",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080035a4": {
            "additional_data": {
                "(int)param_1 + 0x3d": {
                    "1": "flag_address"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "flag_value",
                    "2": "flag"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "current_state"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "initialize_value",
                    "2": "memory_value"
                },
                "*param_1": {
                    "1": "memory_value"
                },
                "FUNC_080035fa": {
                    "1": "process_memory",
                    "2": "initialize_memory"
                },
                "FUN_080035a4": {
                    "1": "update_and_return_status",
                    "2": "verify_and_update_data",
                    "5": "update_memory_status",
                    "8": "check_and_update_memory"
                },
                "char": {
                    "1": "byte"
                },
                "param_1": {
                    "1": "memory_pointer",
                    "2": "param",
                    "4": "memory_ptr",
                    "6": "data"
                },
                "uVar1": {
                    "1": "result_code",
                    "16": "result",
                    "6": "status"
                },
                "update_memory_08003c94": {
                    "9": "update_memory"
                },
                "update_memory_08003c94(*param_1,param_1 + 1)": {
                    "1": "update_memory"
                }
            },
            "called": [
                "FUN_080035fa",
                "FUN_08003c94"
            ],
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "code": "\nundefined4 check_and_update_memory_080035a4(undefined4 *data)\n\n{\n  undefined4 result;\n  \n  if (data == (undefined4 *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(byte *)((int)data + 0x3d) == '\\0') {\n      *(undefined *)(data + 0xf) = 0;\n      FUNC_080035fa(data);\n    }\n    *(undefined *)((int)data + 0x3d) = 2;\n    update_memory(*data,data + 1);\n    *(undefined *)((int)data + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "check_and_update_memory_080035a4",
            "entrypoint": "0x080035a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080035a4": "check_and_update_memory_080035a4",
                "char": "byte",
                "param_1": "data",
                "uVar1": "result",
                "update_memory_08003c94": "update_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080035fa": {
            "called": [],
            "calling": [
                "FUN_080035a4"
            ],
            "code": "\nvoid FUNC_080035fa(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080035fa",
            "entrypoint": "0x080035fa",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080035fa": "FUNC_080035fa"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800360c": {
            "additional_data": {
                "(*param_1)[3]": {
                    "1": "third_element_of_array_of_pointers",
                    "2": "array[3]",
                    "4": "flags[3]"
                },
                "**param_1": {
                    "1": "array_value",
                    "3": "flags[0]"
                },
                "**param_1 | 1": {
                    "1": "param_value_with_flag"
                },
                "*param_1": {
                    "1": "pointer"
                },
                "<original_function_name>": {
                    "1": "set_bitwise_or"
                },
                "<param_1>": {
                    "1": "data_list"
                },
                "FUN_0800360c": {
                    "1": "set_bits_to1",
                    "2": "set_flags_and_values",
                    "3": "set_bit_one",
                    "8": "set_flags"
                },
                "array": {
                    "1": "input_array"
                },
                "arrayPtr": {
                    "1": "array"
                },
                "inputArray": {
                    "1": "input_array"
                },
                "param_1": {
                    "1": "ptr_array",
                    "3": "array_of_pointers",
                    "4": "flags"
                },
                "param_1[0]": {
                    "1": "data[0]"
                },
                "param_1[0][0]": {
                    "1": "data_pointer"
                },
                "param_1[3]": {
                    "1": "parameters[3]"
                },
                "param_1[3][0]": {
                    "1": "data_value"
                },
                "return 0": {
                    "1": "return_status"
                },
                "values": {
                    "1": "values"
                },
                "values[0]": {
                    "1": "values[0]"
                },
                "values[3]": {
                    "1": "values[3]"
                },
                "|": {
                    "1": "bitwise_or"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nundefined4 set_flags_0800360c(uint **flags)\n\n{\n  (*flags)[3] = (*flags)[3] | 1;\n  **flags = **flags | 1;\n  return 0;\n}\n\n",
            "current_name": "set_flags_0800360c",
            "entrypoint": "0x0800360c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800360c": "set_flags_0800360c",
                "param_1": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003640": {
            "additional_data": {
                "'\\0'": {
                    "1": "empty_character"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "memory_status_flag",
                    "2": "flag"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "updated_memory_status_flag"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "memory_flag"
                },
                "*param_1": {
                    "1": "first_element"
                },
                "0": {
                    "1": "success"
                },
                "0x0": {
                    "1": "null"
                },
                "0x3d": {
                    "1": "flag_offset"
                },
                "1": {
                    "1": "error_flag_value"
                },
                "2": {
                    "1": "updated_flag_value"
                },
                "FUNC_08003696": {
                    "1": "reverse_data",
                    "2": "process_data"
                },
                "FUN_08003640": {
                    "1": "update_memory_flag",
                    "2": "update_param",
                    "3": "process_data",
                    "5": "initialize_memory",
                    "7": "check_and_update_memory"
                },
                "char_ptr": {
                    "1": "status_flag_ptr"
                },
                "param_1": {
                    "1": "input_ptr",
                    "2": "param",
                    "3": "input_data",
                    "4": "memory_ptr",
                    "5": "data"
                },
                "param_1 + 1": {
                    "1": "next_data"
                },
                "uVar1": {
                    "1": "result_code",
                    "16": "result",
                    "4": "return_value",
                    "8": "status"
                },
                "update_memory_08003c94": {
                    "7": "update_memory"
                },
                "update_memory_08003c94(*param_1, param_1 + 1)": {
                    "1": "update_memory(memory_ptr)"
                }
            },
            "called": [
                "FUN_08003696",
                "FUN_08003c94"
            ],
            "calling": [
                "FUN_080053b0"
            ],
            "code": "\nundefined4 check_and_update_memory_08003640(undefined4 *data)\n\n{\n  undefined4 result;\n  \n  if (data == (undefined4 *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)data + 0x3d) == '\\0') {\n      *(undefined *)(data + 0xf) = 0;\n      FUNC_08003696(data);\n    }\n    *(undefined *)((int)data + 0x3d) = 2;\n    update_memory(*data,data + 1);\n    *(undefined *)((int)data + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "check_and_update_memory_08003640",
            "entrypoint": "0x08003640",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003640": "check_and_update_memory_08003640",
                "param_1": "data",
                "uVar1": "result",
                "update_memory_08003c94": "update_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003696": {
            "called": [],
            "calling": [
                "FUN_08003640"
            ],
            "code": "\nvoid FUNC_08003696(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003696",
            "entrypoint": "0x08003696",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003696": "FUNC_08003696"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080036a8": {
            "additional_data": {
                "(*param_1)[0x11]": {
                    "1": "array[17]"
                },
                "(uint *)0x40012c00": {
                    "1": "target_addr"
                },
                "**param_1": {
                    "1": "value_in_array"
                },
                "*param_1": {
                    "1": "d_ptr",
                    "2": "data"
                },
                "0x11": {
                    "1": "array_index",
                    "2": "index"
                },
                "0x40012c00": {
                    "1": "flag_value",
                    "3": "target_address"
                },
                "1": {
                    "1": "bit_position"
                },
                "DAT_080041ea": {
                    "1": "update_bit",
                    "3": "bit_mask"
                },
                "DAT_40012c00": {
                    "1": "target_data"
                },
                "FUN_080036a8": {
                    "1": "update_and_check_bit",
                    "2": "update_and_set_flag",
                    "3": "update_and_set_bits",
                    "5": "update_and_set_bit",
                    "7": "update_and_set_flags"
                },
                "PTR_080041ec": {
                    "1": "some_constant"
                },
                "PTR_[data_ptr]": {
                    "1": "data"
                },
                "PTR_[data_ptr][0x11]": {
                    "1": "data_element"
                },
                "bits_array": {
                    "1": "bits_array"
                },
                "bits_array[0x11]": {
                    "1": "bits_array[17]"
                },
                "new_variable_name_1": {
                    "1": "updated_value"
                },
                "param_1": {
                    "1": "input_data",
                    "10": "bit_array",
                    "2": "bits_array",
                    "4": "data_ptr",
                    "6": "data"
                },
                "param_1[0]": {
                    "1": "first_element"
                },
                "param_1[0] | 1": {
                    "1": "updated_first_element"
                },
                "param_1[0x11]": {
                    "1": "array[17]"
                },
                "param_1[0x11] | 0x8000": {
                    "1": "updated_status_word"
                },
                "param_2": {
                    "1": "bit_to_update",
                    "12": "bit_value",
                    "2": "flag_value",
                    "3": "flag",
                    "9": "value"
                },
                "param_3": {
                    "1": "bit_index"
                },
                "param_4": {
                    "1": "bit_field"
                },
                "temp_var_1": {
                    "1": "base_address"
                },
                "temp_var_2": {
                    "1": "mask"
                },
                "temp_var_3": {
                    "1": "bit_offset"
                },
                "uint": {
                    "1": "unsigned_integer"
                },
                "undefined4": {
                    "1": "return_type"
                },
                "update_bit_080041ea": {
                    "5": "update_bit"
                }
            },
            "called": [
                "FUN_080041ea"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nreturn_type update_and_set_flags_080036a8(unsigned_integer **bit_array,return_type bit_value)\n\n{\n  update_bit(*bit_array,bit_value,1);\n  if (*bit_array == (unsigned_integer *)0x40012c00) {\n    (*bit_array)[0x11] = (*bit_array)[0x11] | 0x8000;\n  }\n  **bit_array = **bit_array | 1;\n  return 0;\n}\n\n",
            "current_name": "update_and_set_flags_080036a8",
            "entrypoint": "0x080036a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080036a8": "update_and_set_flags_080036a8",
                "param_1": "bit_array",
                "param_2": "bit_value",
                "uint": "unsigned_integer",
                "undefined4": "return_type",
                "update_bit_080041ea": "update_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080036f8": {
            "additional_data": {
                "*(any_type *)(*param_1 + 0x1c)": {
                    "1": "data_flag_2"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "flags_bitmask"
                },
                "*(uint *)(*param_1 + 0x18)": {
                    "1": "data_flag_1"
                },
                "*(uint *)(*param_1 + 0x1c)": {
                    "1": "condition_2"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "flag2"
                },
                "*(undefined *)(param_1 + 7)": {
                    "1": "flag_value",
                    "2": "status"
                },
                "*(undefined4 *)(*param_1 + 0x10)": {
                    "1": "updated_flag1"
                },
                "*param_1": {
                    "1": "data_ptr"
                },
                "FUNC_08003c4a": {
                    "1": "execute_operation1",
                    "2": "perform_operation_a",
                    "3": "process_step1"
                },
                "FUNC_08003c5c": {
                    "1": "process_conditional_3",
                    "2": "perform_operation_c"
                },
                "FUNC_08003c6e": {
                    "1": "process_data_b",
                    "2": "process_step3"
                },
                "FUNC_08003c80": {
                    "1": "execute_function4",
                    "2": "perform_action5"
                },
                "FUNC_08004366": {
                    "1": "function_e",
                    "2": "perform_action6"
                },
                "FUNC_08004378": {
                    "1": "process_func1",
                    "2": "process_data2"
                },
                "FUNC_08004f78": {
                    "1": "process_data_d",
                    "6": "process_data"
                },
                "FUN_080036f8": {
                    "1": "process_input",
                    "13": "process_data",
                    "2": "process_params",
                    "3": "process_param",
                    "5": "process_parameters",
                    "6": "process_flags"
                },
                "param_1": {
                    "1": "flags_array",
                    "2": "input_data",
                    "3": "param",
                    "4": "flags",
                    "5": "parameters",
                    "9": "data"
                },
                "param_1 + 0x10": {
                    "1": "data_flag"
                },
                "param_1 + 0x18": {
                    "1": "condition"
                },
                "param_1 + 0x1c": {
                    "1": "condition2"
                },
                "param_1 + 0xc": {
                    "1": "config_flag"
                },
                "param_1 + 7": {
                    "1": "status"
                },
                "process_data_08004f78": {
                    "1": "process_data_func",
                    "3": "process_data2",
                    "9": "process_data"
                },
                "uint": {
                    "1": "unsigned_int"
                }
            },
            "called": [
                "FUN_08004f78",
                "FUN_08003c6e",
                "FUN_08004378",
                "FUN_08003c4a",
                "FUN_08004366",
                "FUN_08003c80",
                "FUN_08003c5c"
            ],
            "calling": [
                "FUN_08005714"
            ],
            "code": "\nvoid process_data_080036f8(int *data)\n\n{\n  if (((*(unsigned_int *)(*data + 0x10) & 2) == 2) && ((*(unsigned_int *)(*data + 0xc) & 2) == 2)) {\n    *(undefined4 *)(*data + 0x10) = 0xfffffffd;\n    *(undefined *)(data + 7) = 1;\n    if ((*(unsigned_int *)(*data + 0x18) & 3) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  if (((*(unsigned_int *)(*data + 0x10) & 4) == 4) && ((*(unsigned_int *)(*data + 0xc) & 4) == 4)) {\n    *(undefined4 *)(*data + 0x10) = 0xfffffffb;\n    *(undefined *)(data + 7) = 2;\n    if ((*(unsigned_int *)(*data + 0x18) & 0x300) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  if (((*(unsigned_int *)(*data + 0x10) & 8) == 8) && ((*(unsigned_int *)(*data + 0xc) & 8) == 8)) {\n    *(undefined4 *)(*data + 0x10) = 0xfffffff7;\n    *(undefined *)(data + 7) = 4;\n    if ((*(unsigned_int *)(*data + 0x1c) & 3) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  if (((*(unsigned_int *)(*data + 0x10) & 0x10) == 0x10) && ((*(unsigned_int *)(*data + 0xc) & 0x10) == 0x10))\n  {\n    *(undefined4 *)(*data + 0x10) = 0xffffffef;\n    *(undefined *)(data + 7) = 8;\n    if ((*(unsigned_int *)(*data + 0x1c) & 0x300) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  if (((*(unsigned_int *)(*data + 0x10) & 1) == 1) && ((*(unsigned_int *)(*data + 0xc) & 1) == 1)) {\n    *(undefined4 *)(*data + 0x10) = 0xfffffffe;\n    process_data_080036f8(data);\n  }\n  if (((*(unsigned_int *)(*data + 0x10) & 0x80) == 0x80) && ((*(unsigned_int *)(*data + 0xc) & 0x80) == 0x80))\n  {\n    *(undefined4 *)(*data + 0x10) = 0xffffff7f;\n    FUNC_08004378(data);\n  }\n  if (((*(unsigned_int *)(*data + 0x10) & 0x40) == 0x40) && ((*(unsigned_int *)(*data + 0xc) & 0x40) == 0x40))\n  {\n    *(undefined4 *)(*data + 0x10) = 0xffffffbf;\n    FUNC_08003c80(data);\n  }\n  if (((*(unsigned_int *)(*data + 0x10) & 0x20) == 0x20) && ((*(unsigned_int *)(*data + 0xc) & 0x20) == 0x20))\n  {\n    *(undefined4 *)(*data + 0x10) = 0xffffffdf;\n    FUNC_08004366(data);\n  }\n  return;\n}\n\n",
            "current_name": "process_data_080036f8",
            "entrypoint": "0x080036f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080036f8": "process_data_080036f8",
                "param_1": "data",
                "process_data_08004f78": "process_data",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003908": {
            "additional_data": {
                "*(char *)(data_ptr + 0xf)": {
                    "1": "flag_check"
                },
                "*(char *)(param_1 + 0xf)": {
                    "1": "data_flag",
                    "3": "flag"
                },
                "*(int *)(param_2 + 0x10)": {
                    "1": "param_val"
                },
                "*(int *)(param_value + 0x10)": {
                    "1": "shifted_data_property_2"
                },
                "*(uint *)(*param_1 + 0x18)": {
                    "1": "data_val_ptr"
                },
                "*(uint *)(*param_1 + 0x1c)": {
                    "1": "data_val_ptr"
                },
                "*(uint *)(data_ptr + 0x18)": {
                    "1": "data_property_1"
                },
                "*(uint *)(data_ptr + 0x1c)": {
                    "1": "data_property_3"
                },
                "*(uint *)(param_2 + 0x10)": {
                    "1": "value_ptr"
                },
                "*(uint *)(param_value + 0x10)": {
                    "1": "data_property_2"
                },
                "*(undefined *)((int)data_ptr + 0x3d)": {
                    "1": "new_flag"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "flag2"
                },
                "*(undefined *)(data_ptr + 0xf)": {
                    "1": "flag"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "flag_ptr"
                },
                "*param_1": {
                    "1": "data_val"
                },
                "FUN_08003908": {
                    "1": "update_parameters",
                    "2": "update_flags",
                    "3": "update_flag_and_data",
                    "6": "update_data"
                },
                "param_1": {
                    "1": "input_ptr",
                    "15": "data",
                    "2": "data_pointer",
                    "4": "data_ptr"
                },
                "param_2": {
                    "1": "length",
                    "2": "data",
                    "7": "param",
                    "9": "param_value"
                },
                "param_3": {
                    "1": "operation_code",
                    "2": "case_value",
                    "3": "param_type",
                    "4": "update_type",
                    "5": "type"
                },
                "uVar1": {
                    "1": "status_code",
                    "11": "return_value",
                    "19": "result"
                },
                "update_data_08003d60": {
                    "1": "update_data",
                    "2": "update_data_case0"
                },
                "update_data_08003e38": {
                    "1": "update_data",
                    "2": "update_data_case4"
                },
                "update_data_08003ff8": {
                    "1": "update_data",
                    "2": "update_data_case_0xc"
                },
                "update_parameters_08003f18": {
                    "1": "update_option_8_parameters",
                    "2": "update_parameters_case_8"
                }
            },
            "called": [
                "FUN_08003ff8",
                "FUN_08003d60",
                "FUN_08003f18",
                "FUN_08003e38"
            ],
            "calling": [
                "FUN_080053b0"
            ],
            "code": "\nundefined4 update_data_08003908(int *data,int param_value,undefined4 type)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(data + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(data + 0xf) = 1;\n    *(undefined *)((int)data + 0x3d) = 2;\n    switch(type) {\n    case 0:\n      update_data_08003908_case0(*data,param_value);\n      *(uint *)(*data + 0x18) = *(uint *)(*data + 0x18) | 8;\n      *(uint *)(*data + 0x18) = *(uint *)(*data + 0x18) & 0xfffffffb;\n      *(uint *)(*data + 0x18) = *(uint *)(param_value + 0x10) | *(uint *)(*data + 0x18);\n      break;\n    case 4:\n      update_data_08003908_case4(*data,param_value);\n      *(uint *)(*data + 0x18) = *(uint *)(*data + 0x18) | 0x800;\n      *(uint *)(*data + 0x18) = *(uint *)(*data + 0x18) & 0xfffffbff;\n      *(uint *)(*data + 0x18) = *(int *)(param_value + 0x10) << 8 | *(uint *)(*data + 0x18);\n      break;\n    case 8:\n      update_parameters_case_8(*data,param_value);\n      *(uint *)(*data + 0x1c) = *(uint *)(*data + 0x1c) | 8;\n      *(uint *)(*data + 0x1c) = *(uint *)(*data + 0x1c) & 0xfffffffb;\n      *(uint *)(*data + 0x1c) = *(uint *)(param_value + 0x10) | *(uint *)(*data + 0x1c);\n      break;\n    case 0xc:\n      update_data_08003908_case_c(*data,param_value);\n      *(uint *)(*data + 0x1c) = *(uint *)(*data + 0x1c) | 0x800;\n      *(uint *)(*data + 0x1c) = *(uint *)(*data + 0x1c) & 0xfffffbff;\n      *(uint *)(*data + 0x1c) = *(int *)(param_value + 0x10) << 8 | *(uint *)(*data + 0x1c);\n    }\n    *(undefined *)((int)data + 0x3d) = 1;\n    *(undefined *)(data + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "update_data_08003908",
            "entrypoint": "0x08003908",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003908": "update_data_08003908",
                "param_1": "data",
                "param_2": "param_value",
                "param_3": "type",
                "uVar1": "result",
                "update_data_08003d60": "update_data_case0",
                "update_data_08003e38": "update_data_case4",
                "update_data_08003ff8": "update_data_case_c",
                "update_parameters_08003f18": "update_parameters_case_8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003a94": {
            "additional_data": {
                "*(char *)(param_1 + 0xf)": {
                    "1": "parameter_array[15]"
                },
                "*(uint *)(*param_1 + 8)": {
                    "1": "parameter_array[0][8]"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "parameter_array[61]"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "parameter_array[15]"
                },
                "*param_1": {
                    "1": "parameter_array[0]"
                },
                "FUN_08003a94": {
                    "1": "update_flags",
                    "11": "update_parameters",
                    "3": "update_param",
                    "4": "update_parameter"
                },
                "param_1": {
                    "1": "array1",
                    "2": "input_data",
                    "3": "data",
                    "5": "param_array"
                },
                "param_2": {
                    "1": "parameter_2",
                    "2": "input_params",
                    "3": "param_array",
                    "4": "data_array",
                    "5": "param_values"
                },
                "param_2[1]": {
                    "1": "uint_array[1]"
                },
                "param_2[2]": {
                    "1": "uint_array[2]"
                },
                "param_2[3]": {
                    "1": "uint_array[3]"
                },
                "uVar1": {
                    "1": "status",
                    "13": "return_value",
                    "17": "result"
                },
                "uVar2": {
                    "1": "index",
                    "10": "param_value",
                    "2": "input_value",
                    "3": "data_type",
                    "6": "value",
                    "7": "data_value"
                },
                "update_data_080040a0": {
                    "2": "update_data_a",
                    "7": "update_data"
                },
                "update_param_080041a8": {
                    "2": "update_param_a",
                    "7": "update_param"
                },
                "update_parameter_0800416a": {
                    "2": "update_parameter_a",
                    "7": "update_parameter"
                },
                "update_parameters_08004104": {
                    "1": "update_parameters_a",
                    "7": "update_parameters"
                }
            },
            "called": [
                "FUN_08004104",
                "FUN_080040a0",
                "FUN_0800416a",
                "FUN_080041a8"
            ],
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "code": "\nundefined4 update_parameters_08003a94(int *param_array,uint *param_values)\n\n{\n  undefined4 result;\n  uint param_value;\n  \n  if (*(char *)(param_array + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(param_array + 0xf) = 1;\n    *(undefined *)((int)param_array + 0x3d) = 2;\n    *(uint *)(*param_array + 8) = *(uint *)(*param_array + 8) & 0xffff0088;\n    param_value = *param_values;\n    if (param_value == 0x40) {\n      update_data(*param_array,uint_array[1],uint_array[3]);\n      update_parameter(*param_array,0x40);\n    }\n    else if (param_value < 0x41) {\n      if (param_value == 0x10) {\n        update_parameter(*param_array,0x10);\n      }\n      else if (param_value < 0x11) {\n        if (param_value == 0) {\n          update_parameter(*param_array,0);\n        }\n      }\n      else if (param_value == 0x20) {\n        update_parameter(*param_array,0x20);\n      }\n      else if (param_value == 0x30) {\n        update_parameter(*param_array,0x30);\n      }\n    }\n    else if (param_value == 0x70) {\n      update_param(*param_array,uint_array[2],uint_array[1],uint_array[3]);\n      *(uint *)(*param_array + 8) = *(uint *)(*param_array + 8) & 0xffffff88 | 0x77;\n    }\n    else if (param_value < 0x71) {\n      if (param_value == 0x50) {\n        update_data(*param_array,uint_array[1],uint_array[3]);\n        update_parameter(*param_array,0x50);\n      }\n      else if (param_value == 0x60) {\n        update_parameters_08003a94(*param_array,uint_array[1],uint_array[3]);\n        update_parameter(*param_array,0x60);\n      }\n    }\n    else if (param_value == 0x1000) {\n      *(uint *)(*param_array + 8) = *(uint *)(*param_array + 8) & 0xfffffff8;\n    }\n    else if (param_value == 0x2000) {\n      update_param(*param_array,uint_array[2],uint_array[1],uint_array[3]);\n      *(uint *)(*param_array + 8) = *(uint *)(*param_array + 8) | 0x4000;\n    }\n    *(undefined *)((int)param_array + 0x3d) = 1;\n    *(undefined *)(param_array + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "update_parameters_08003a94",
            "entrypoint": "0x08003a94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003a94": "update_parameters_08003a94",
                "param_1": "param_array",
                "param_2": "param_values",
                "param_2[1]": "uint_array[1]",
                "param_2[2]": "uint_array[2]",
                "param_2[3]": "uint_array[3]",
                "uVar1": "result",
                "uVar2": "param_value",
                "update_data_080040a0": "update_data",
                "update_param_080041a8": "update_param",
                "update_parameter_0800416a": "update_parameter",
                "update_parameters_08004104": "update_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003c4a": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003c4a",
            "entrypoint": "0x08003c4a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003c4a": "FUNC_08003c4a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003c5c": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003c5c",
            "entrypoint": "0x08003c5c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003c5c": "FUNC_08003c5c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003c6e": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003c6e",
            "entrypoint": "0x08003c6e",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003c6e": "FUNC_08003c6e"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003c80": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08003c80(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003c80",
            "entrypoint": "0x08003c80",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003c80": "FUNC_08003c80"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003c94": {
            "additional_data": {
                "FUN_08003c94": {
                    "1": "update_register_values",
                    "2": "update_memory_values",
                    "3": "update_parameters",
                    "5": "update_registers",
                    "8": "update_memory"
                },
                "local_10": {
                    "1": "local_variable1"
                },
                "local_14": {
                    "1": "local_variable2"
                },
                "local_c": {
                    "1": "original_value",
                    "2": "updated_value",
                    "3": "value",
                    "5": "current_value",
                    "9": "temp_value"
                },
                "param_1": {
                    "1": "memory_address",
                    "2": "target_memory",
                    "3": "input_params",
                    "5": "register1"
                },
                "param_1[0]": {
                    "1": "memory_block[0]"
                },
                "param_1[0xb]": {
                    "1": "memory[11]"
                },
                "param_1[10]": {
                    "1": "memory_block[10]"
                },
                "param_1[11]": {
                    "1": "memory_block[11]"
                },
                "param_1[5]": {
                    "1": "target_status"
                },
                "param_2": {
                    "1": "new_permissions",
                    "2": "new_values",
                    "3": "new_config",
                    "4": "source",
                    "5": "register2"
                },
                "param_2[0]": {
                    "1": "new_data[0]"
                },
                "param_2[1]": {
                    "1": "new_data[1]"
                },
                "param_2[2]": {
                    "1": "data[2]"
                },
                "param_2[3]": {
                    "1": "new_data[3]"
                },
                "param_2[4]": {
                    "1": "data[4]"
                },
                "param_2[5]": {
                    "1": "new_data[5]"
                },
                "uRam40012c30": {
                    "1": "fourth_value",
                    "4": "special_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003640",
                "FUN_080035a4"
            ],
            "code": "\nvoid update_memory_08003c94(uint *register1,uint *register2)\n\n{\n  uint temp_value;\n  \n  temp_value = *register1;\n  if ((((register1 == (uint *)0x40012c00) || (register1 == (uint *)0x40000000)) ||\n      (register1 == (uint *)0x40000400)) || (register1 == (uint *)0x40000800)) {\n    temp_value = data[1] | temp_value & 0xffffff8f;\n  }\n  if (((register1 == (uint *)0x40012c00) || (register1 == (uint *)0x40000000)) ||\n     ((register1 == (uint *)0x40000400 || (register1 == (uint *)0x40000800)))) {\n    temp_value = data[3] | temp_value & 0xfffffcff;\n  }\n  *register1 = data[5] | temp_value & 0xffffff7f;\n  target[11] = data[2];\n  target[10] = *register2;\n  if (register1 == (uint *)0x40012c00) {\n    special_value = data[4];\n  }\n  target_status = 1;\n  return;\n}\n\n",
            "current_name": "update_memory_08003c94",
            "entrypoint": "0x08003c94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003c94": "update_memory_08003c94",
                "local_c": "temp_value",
                "param_1": "register1",
                "param_1[0xb]": "target[11]",
                "param_1[10]": "target[10]",
                "param_1[5]": "target_status",
                "param_2": "register2",
                "param_2[1]": "data[1]",
                "param_2[2]": "data[2]",
                "param_2[3]": "data[3]",
                "param_2[4]": "data[4]",
                "param_2[5]": "data[5]",
                "uRam40012c30": "special_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003d60": {
            "additional_data": {
                "(param_2[3] | uVar2 & 0xfffffff7) & 0xfffffffb": {
                    "1": "updated_var2_masked2"
                },
                "*(uint *)(param_1 + 0x18)": {
                    "1": "flag2"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "flag_value"
                },
                "*(uint *)(param_1 + 0x20) & 0xfffffffd": {
                    "1": "updated_param1_offset20_masked2"
                },
                "*(uint *)(param_1 + 0x20) & 0xfffffffe": {
                    "1": "updated_param1_offset20_masked"
                },
                "*(uint *)(param_1 + 0x34)": {
                    "1": "data_pointer"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "data_value",
                    "2": "local_value"
                },
                "*param_2": {
                    "1": "data_value1"
                },
                "0x18": {
                    "1": "mask"
                },
                "0x20": {
                    "1": "shift_value"
                },
                "0x34": {
                    "1": "new_value3"
                },
                "0x4": {
                    "1": "offset"
                },
                "0x40012c00": {
                    "1": "magic_address"
                },
                "0xfffffcff": {
                    "1": "clear_mask6"
                },
                "0xffffff8c": {
                    "1": "clear_mask2"
                },
                "0xfffffff7": {
                    "1": "clear_mask4"
                },
                "0xfffffffb": {
                    "1": "clear_mask5"
                },
                "0xfffffffd": {
                    "1": "clear_mask3"
                },
                "0xfffffffe": {
                    "1": "clear_mask1"
                },
                "FUN_08003d60": {
                    "1": "set_flags_and_values",
                    "10": "update_data",
                    "2": "update_params",
                    "3": "update_parameters",
                    "6": "update_flags_and_values"
                },
                "local_10": {
                    "1": "current_value",
                    "2": "local_data",
                    "3": "local_var",
                    "7": "temp_value",
                    "8": "local_value"
                },
                "local_10 & 0xfffffcff": {
                    "1": "local_var_masked"
                },
                "param_1": {
                    "1": "base_addr",
                    "2": "data_pointer",
                    "5": "address",
                    "6": "base_address",
                    "7": "data_address"
                },
                "param_1 + 0x18": {
                    "1": "data_flag2_address"
                },
                "param_1 + 0x20": {
                    "1": "data_flag_address"
                },
                "param_1 + 0x34": {
                    "1": "data_pointer_address"
                },
                "param_1 + 4": {
                    "1": "data_flag"
                },
                "param_2": {
                    "1": "input_data",
                    "2": "input_array",
                    "4": "values",
                    "5": "parameters"
                },
                "param_2[1]": {
                    "1": "new_value"
                },
                "param_2[2]": {
                    "1": "data_value2"
                },
                "param_2[2] | *(uint *)(param_1 + 0x20) & 0xfffffffd": {
                    "1": "modified_value"
                },
                "param_2[3]": {
                    "1": "data_value4"
                },
                "param_2[5]": {
                    "1": "input_value6"
                },
                "param_2[6]": {
                    "1": "value5"
                },
                "param_2[6] | param_2[5] | local_10 & 0xfffffcff": {
                    "1": "updated_local_var_masked"
                },
                "uVar1": {
                    "1": "input_value1",
                    "10": "value1",
                    "3": "new_value",
                    "5": "new_value1"
                },
                "uVar1 | *(uint *)(param_1 + 0x18) & 0xffffff8c": {
                    "1": "updated_value"
                },
                "uVar2": {
                    "1": "second_data",
                    "10": "value2",
                    "3": "updated_value",
                    "5": "new_value2"
                },
                "uVar2 & 0xfffffff7": {
                    "1": "updated_flags2"
                },
                "uVar2 & 0xfffffffd": {
                    "1": "updated_flags"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003908"
            ],
            "code": "\nvoid update_data_08003d60(int data_address,uint *parameters)\n\n{\n  uint value1;\n  uint value2;\n  uint local_value;\n  \n  *(uint *)(data_address + 0x20) = *(uint *)(data_address + 0x20) & 0xfffffffe;\n  local_value = *(uint *)(data_address + 4);\n  value1 = *parameters;\n  value2 = input_value3 | *(uint *)(data_address + 0x20) & 0xfffffffd;\n  if (data_address == 0x40012c00) {\n    value2 = (input_value4 | value2 & 0xfffffff7) & 0xfffffffb;\n    local_value = input_value5 | input_value6 | local_value & 0xfffffcff;\n  }\n  *(uint *)(data_address + 4) = local_value;\n  *(uint *)(data_address + 0x18) = value1 | *(uint *)(data_address + 0x18) & 0xffffff8c;\n  *(uint *)(data_address + 0x34) = input_value7;\n  *(uint *)(data_address + 0x20) = value2;\n  return;\n}\n\n",
            "current_name": "update_data_08003d60",
            "entrypoint": "0x08003d60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003d60": "update_data_08003d60",
                "local_10": "local_value",
                "param_1": "data_address",
                "param_2": "parameters",
                "param_2[1]": "input_value7",
                "param_2[2]": "input_value3",
                "param_2[3]": "input_value4",
                "param_2[5]": "input_value6",
                "param_2[6]": "input_value5",
                "uVar1": "value1",
                "uVar2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003e38": {
            "additional_data": {
                "*(int *)(param_1 + 0x38)": {
                    "1": "function_data_value4"
                },
                "*(uint *)(param_1 + 0x18)": {
                    "1": "var3"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "var1"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "var2"
                },
                "*param_2": {
                    "1": "temp_var2"
                },
                "FUN_08003e38": {
                    "1": "update_control_register",
                    "12": "update_data",
                    "2": "update_params",
                    "3": "update_flags_and_values",
                    "4": "update_configuration"
                },
                "iVar1": {
                    "1": "input_value1",
                    "2": "temp_var",
                    "3": "var1",
                    "4": "value1",
                    "6": "temp_var1"
                },
                "local_10": {
                    "1": "original_value",
                    "2": "value",
                    "3": "var3",
                    "4": "value3",
                    "9": "local_value"
                },
                "param_1": {
                    "1": "control_register_address",
                    "2": "data_pointer",
                    "4": "config_address",
                    "7": "data_address"
                },
                "param_2": {
                    "1": "input_array",
                    "2": "data_values",
                    "3": "config_data",
                    "4": "input_data"
                },
                "param_2[2]": {
                    "1": "input_data[2]"
                },
                "param_2[3]": {
                    "1": "temp_var4"
                },
                "param_2[5]": {
                    "1": "input_data[5]"
                },
                "param_2[6]": {
                    "1": "temp_var5"
                },
                "uVar2": {
                    "1": "updated_flag",
                    "3": "var2",
                    "4": "modified_value",
                    "7": "updated_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003908"
            ],
            "code": "\nvoid update_data_08003e38(int base_address,int *input_data)\n\n{\n  int temp_var1;\n  uint updated_value;\n  uint local_value;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffffef;\n  local_value = *(uint *)(base_address + 4);\n  temp_var1 = *input_data;\n  updated_value = input_data[2] << 4 | *(uint *)(base_address + 0x20) & 0xffffffdf;\n  if (base_address == 0x40012c00) {\n    updated_value = (input_data[3] << 4 | updated_value & 0xffffff7f) & 0xffffffbf;\n    local_value = input_data[6] << 2 | input_data[5] << 2 | local_value & 0xfffff3ff;\n  }\n  *(uint *)(base_address + 4) = local_value;\n  *(uint *)(base_address + 0x18) = temp_var1 << 8 | *(uint *)(base_address + 0x18) & 0xffff8cff;\n  *(int *)(base_address + 0x38) = input_data[1];\n  *(uint *)(base_address + 0x20) = updated_value;\n  return;\n}\n\n",
            "current_name": "update_data_08003e38",
            "entrypoint": "0x08003e38",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003e38": "update_data_08003e38",
                "iVar1": "temp_var1",
                "local_10": "local_value",
                "param_1": "base_address",
                "param_2": "input_data",
                "param_2[2]": "input_data[2]",
                "param_2[3]": "input_data[3]",
                "param_2[5]": "input_data[5]",
                "param_2[6]": "input_data[6]",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003f18": {
            "additional_data": {
                "*(uint *)(param_1 + 0x1c)": {
                    "1": "updated_register_value"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "register_value"
                },
                "*(uint *)(param_1 + 0x3c)": {
                    "1": "register_offset"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "previous_register_value"
                },
                "*param_2": {
                    "1": "param_value"
                },
                "FUN_08003f18": {
                    "1": "update_parameter_value",
                    "2": "update_function_data",
                    "3": "update_configuration",
                    "7": "update_data",
                    "9": "update_parameters"
                },
                "local_10": {
                    "1": "original_value",
                    "11": "local_value",
                    "2": "local_variable",
                    "5": "local_data"
                },
                "param_1": {
                    "1": "param_base_address",
                    "2": "parameter_address",
                    "3": "config_address",
                    "4": "param_address",
                    "5": "data_address",
                    "7": "base_address"
                },
                "param_2": {
                    "1": "input_array",
                    "2": "input_data",
                    "3": "parameters",
                    "6": "data"
                },
                "param_2[2]": {
                    "1": "bitmask"
                },
                "param_2[3]": {
                    "1": "additional_bitmask"
                },
                "param_2[5]": {
                    "1": "param_value5"
                },
                "param_2[6]": {
                    "1": "param_value6"
                },
                "uVar1": {
                    "1": "param2_value1",
                    "14": "value1",
                    "2": "data1",
                    "4": "first_value"
                },
                "uVar2": {
                    "1": "parameter_value2",
                    "14": "value2",
                    "2": "data2",
                    "3": "second_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003908"
            ],
            "code": "\nvoid update_parameters_08003f18(int base_address,uint *data)\n\n{\n  uint value1;\n  uint value2;\n  uint local_value;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xfffffeff;\n  local_value = *(uint *)(base_address + 4);\n  value1 = *data;\n  value2 = bitmask << 8 | *(uint *)(base_address + 0x20) & 0xfffffdff;\n  if (base_address == 0x40012c00) {\n    value2 = (additional_bitmask << 8 | value2 & 0xfffff7ff) & 0xfffffbff;\n    local_value = bit_shift_1 << 4 | bit_shift_2 << 4 | local_value & 0xffffcfff;\n  }\n  *(uint *)(base_address + 4) = local_value;\n  *(uint *)(base_address + 0x1c) = value1 | *(uint *)(base_address + 0x1c) & 0xffffff8c;\n  *(uint *)(base_address + 0x3c) = data[1];\n  *(uint *)(base_address + 0x20) = value2;\n  return;\n}\n\n",
            "current_name": "update_parameters_08003f18",
            "entrypoint": "0x08003f18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003f18": "update_parameters_08003f18",
                "local_10": "local_value",
                "param_1": "base_address",
                "param_2": "data",
                "param_2[2]": "bitmask",
                "param_2[3]": "additional_bitmask",
                "param_2[5]": "bit_shift_2",
                "param_2[6]": "bit_shift_1",
                "uVar1": "value1",
                "uVar2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003ff8": {
            "additional_data": {
                "*(int *)(param_1 + 0x4)": {
                    "1": "updated_local_var1"
                },
                "*(int *)(param_1 + 0x40)": {
                    "1": "value3"
                },
                "*(uint *)(param_1 + 0x1c)": {
                    "1": "update_mask2"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "update_mask3"
                },
                "*(uint *)(param_1 + 0x4)": {
                    "1": "local_var1"
                },
                "*(uint *)(param_1 + 0x40)": {
                    "1": "new_value"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "value3"
                },
                "*param_2": {
                    "1": "param_value1"
                },
                "FUN_08003ff8": {
                    "1": "update_param",
                    "2": "update_flags_and_values",
                    "3": "update_params",
                    "4": "update_param_values",
                    "8": "update_data"
                },
                "iVar1": {
                    "1": "first_param",
                    "15": "value1",
                    "2": "value2"
                },
                "iVar2": {
                    "1": "third_param",
                    "15": "value2",
                    "2": "var2"
                },
                "local_c": {
                    "1": "new_bitmask",
                    "2": "local_var",
                    "3": "value_c",
                    "4": "value"
                },
                "param_1": {
                    "1": "parameter",
                    "13": "base_address",
                    "5": "data_address"
                },
                "param_2": {
                    "1": "parameter_values",
                    "2": "config_data",
                    "3": "data",
                    "5": "param_array",
                    "6": "parameters"
                },
                "param_2[2]": {
                    "1": "value5"
                },
                "param_2[5]": {
                    "1": "value6"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003908"
            ],
            "code": "\nvoid update_data_08003ff8(int base_address,int *parameters)\n\n{\n  int value1;\n  int value2;\n  uint local_value;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffefff;\n  local_value = *(uint *)(base_address + 4);\n  value1 = *parameters;\n  value2 = value5;\n  if (base_address == 0x40012c00) {\n    local_value = value6 << 6 | local_value & 0xffffbfff;\n  }\n  *(uint *)(base_address + 4) = local_value;\n  *(uint *)(base_address + 0x1c) = value1 << 8 | *(uint *)(base_address + 0x1c) & 0xffff8cff;\n  *(int *)(base_address + 0x40) = parameters[1];\n  *(uint *)(base_address + 0x20) = value2 << 0xc | *(uint *)(base_address + 0x20) & 0xffffdfff;\n  return;\n}\n\n",
            "current_name": "update_data_08003ff8",
            "entrypoint": "0x08003ff8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003ff8": "update_data_08003ff8",
                "iVar1": "value1",
                "iVar2": "value2",
                "local_c": "local_value",
                "param_1": "base_address",
                "param_2": "parameters",
                "param_2[2]": "value5",
                "param_2[5]": "value6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080040a0": {
            "additional_data": {
                "*(uint *)(param_1 + 0x18)": {
                    "1": "flag2"
                },
                "*(uint *)(param_1 + 0x18) & 0xffffff0f": {
                    "1": "data_with_mask"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "flag_value"
                },
                "*(uint *)(param_1 + 0x20) & 0xfffffffe": {
                    "1": "flags_with_mask"
                },
                "FUN_080040a0": {
                    "1": "update_flags",
                    "2": "update_param_values",
                    "4": "update_flags_and_values"
                },
                "param_1": {
                    "1": "input_address",
                    "2": "param1",
                    "3": "data_address",
                    "4": "memory_address",
                    "6": "base_address"
                },
                "param_2": {
                    "1": "new_data",
                    "2": "bit_mask",
                    "3": "mask",
                    "5": "value",
                    "7": "new_value"
                },
                "param_2 | uVar1 & 0xfffffff5": {
                    "1": "updated_flags"
                },
                "param_3": {
                    "1": "value1",
                    "2": "shifted_value",
                    "3": "value",
                    "5": "shift_value",
                    "9": "shift_amount"
                },
                "param_3 << 4 | *(uint *)(param_1 + 0x18) & 0xffffff0f": {
                    "1": "updated_data"
                },
                "uVar1": {
                    "1": "saved_value",
                    "2": "previous_value",
                    "6": "current_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003a94"
            ],
            "code": "\nvoid update_data_080040a0(int base_address,uint new_value,int shift_amount)\n\n{\n  uint current_value;\n  \n  current_value = *(uint *)(base_address + 0x20);\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xfffffffe;\n  *(uint *)(base_address + 0x18) = shift_amount << 4 | *(uint *)(base_address + 0x18) & 0xffffff0f;\n  *(uint *)(base_address + 0x20) = new_value | current_value & 0xfffffff5;\n  return;\n}\n\n",
            "current_name": "update_data_080040a0",
            "entrypoint": "0x080040a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080040a0": "update_data_080040a0",
                "param_1": "base_address",
                "param_2": "new_value",
                "param_3": "shift_amount",
                "uVar1": "current_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004104": {
            "additional_data": {
                "*(uint *)(param_1 + 0x18)": {
                    "1": "register2",
                    "2": "data"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "data_value",
                    "4": "flags"
                },
                "*(uint *)(param_1 + 0x20) & 0xffffffef": {
                    "1": "updated_flags"
                },
                "0x18": {
                    "1": "register_offset"
                },
                "0x20": {
                    "2": "flags_offset"
                },
                "0xffff0fff": {
                    "1": "clear_register_mask"
                },
                "0xffffff5f": {
                    "1": "shift_flag_mask"
                },
                "0xffffffef": {
                    "1": "0b11111111111111111111111111101111"
                },
                "FUN_08004104": {
                    "1": "set_flags_and_values",
                    "2": "update_flags",
                    "5": "update_flags_and_values",
                    "6": "update_parameters"
                },
                "dataAddress + 0x18": {
                    "1": "state_value"
                },
                "dataAddress + 0x20": {
                    "1": "flags_value"
                },
                "param_1": {
                    "1": "param_addr",
                    "13": "base_address",
                    "2": "memory_address",
                    "3": "address"
                },
                "param_1 + 0x18": {
                    "1": "address_offset2"
                },
                "param_1 + 0x20": {
                    "1": "data_ptr"
                },
                "param_2": {
                    "1": "value_to_set",
                    "10": "value1",
                    "2": "flag_value",
                    "3": "param_value1",
                    "5": "value2"
                },
                "param_2 << 4 | *(uint *)(param_1 + 0x20) & 0xffffff5f": {
                    "1": "updated_value2"
                },
                "param_3": {
                    "1": "value_2",
                    "10": "value2",
                    "2": "value",
                    "3": "param_value2",
                    "5": "value3"
                },
                "param_3 << 0xc | *(uint *)(param_1 + 0x18) & 0xffff0fff": {
                    "1": "updated_value1"
                },
                "ptr_1": {
                    "1": "address_value"
                },
                "ptr_2": {
                    "1": "updated_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003a94"
            ],
            "code": "\nvoid update_parameters_08004104(int base_address,int value1,int value2)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffffef;\n  *(uint *)(base_address + 0x18) = value2 << 0xc | *(uint *)(base_address + 0x18) & 0xffff0fff;\n  *(uint *)(base_address + 0x20) = value1 << 4 | *(uint *)(base_address + 0x20) & 0xffffff5f;\n  return;\n}\n\n",
            "current_name": "update_parameters_08004104",
            "entrypoint": "0x08004104",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004104": "update_parameters_08004104",
                "param_1": "base_address",
                "param_2": "value1",
                "param_3": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800416a": {
            "additional_data": {
                "(uint)(param_2 | 7)": {
                    "1": "updated_value"
                },
                "*(uint *)(param_1 + 8)": {
                    "1": "flags"
                },
                "*(uint *)(param_1 + 8) & 0xffffff8f | (uint)(param_2 | 7)": {
                    "1": "updated_value"
                },
                "0xffffff8f": {
                    "1": "mask",
                    "3": "bit_mask"
                },
                "7": {
                    "1": "bit_mask"
                },
                "8": {
                    "1": "offset"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "FUN_0800416a": {
                    "1": "set_masked_bits",
                    "2": "update_parameter_value",
                    "3": "update_memory"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "param_1": {
                    "1": "memory_offset",
                    "14": "base_address",
                    "2": "param_address",
                    "3": "data_address",
                    "8": "memory_address"
                },
                "param_1 + 8": {
                    "1": "address_to_modify"
                },
                "param_2": {
                    "1": "new_data",
                    "12": "new_value",
                    "6": "value"
                },
                "param_2 | 7": {
                    "1": "merged_value"
                },
                "param_3": {
                    "1": "shifted_value"
                },
                "param_4": {
                    "1": "shift"
                },
                "param_5": {
                    "1": "updated_param"
                },
                "param_6": {
                    "1": "param_mask"
                },
                "param_8": {
                    "1": "result"
                },
                "param_9": {
                    "1": "new_bits_with_mask"
                },
                "uint": {
                    "1": "unsigned_int",
                    "3": "unsigned_integer"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003a94"
            ],
            "code": "\nvoid update_parameter_0800416a(int base_address,ushort new_value)\n\n{\n  *(unsigned_integer *)(base_address + 8) = *(unsigned_integer *)(base_address + 8) & 0xffffff8f | (unsigned_integer)(new_value | 7);\n  return;\n}\n\n",
            "current_name": "update_parameter_0800416a",
            "entrypoint": "0x0800416a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800416a": "update_parameter_0800416a",
                "param_1": "base_address",
                "param_2": "new_value",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080041a8": {
            "additional_data": {
                "*(uint *)(param_1 + 8)": {
                    "1": "existing_value"
                },
                "*(uint *)(param_1 + 8) & 0xffff00ff": {
                    "1": "mask"
                },
                "0xffff00ff": {
                    "1": "mask"
                },
                "FUN_080041a8": {
                    "1": "update_parameters",
                    "2": "update_values",
                    "4": "update_parameter"
                },
                "param_1": {
                    "1": "input_data",
                    "10": "base_address",
                    "3": "param_address",
                    "4": "data_address"
                },
                "param_1 + 8": {
                    "1": "address_to_update"
                },
                "param_2": {
                    "1": "input1",
                    "17": "value1",
                    "2": "new_param1"
                },
                "param_2 | param_4 << 8 | param_3 | *(uint *)(param_1 + 8) & 0xffff00ff": {
                    "1": "updated_value"
                },
                "param_3": {
                    "1": "additional_or_value",
                    "17": "value2",
                    "2": "value_2"
                },
                "param_4": {
                    "1": "bits3",
                    "17": "value3",
                    "2": "new_param3",
                    "4": "shift_amount"
                },
                "param_5": {
                    "1": "register_value_to_be_updated"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003a94"
            ],
            "code": "\nvoid update_param_080041a8(int base_address,uint value1,uint value2,int value3)\n\n{\n  *(uint *)(base_address + 8) = value1 | value3 << 8 | value2 | *(uint *)(base_address + 8) & 0xffff00ff;\n  return;\n}\n\n",
            "current_name": "update_param_080041a8",
            "entrypoint": "0x080041a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080041a8": "update_param_080041a8",
                "param_1": "base_address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080041ea": {
            "additional_data": {
                "*(uint *)(dataAddress)": {
                    "1": "current_value"
                },
                "*(uint *)(dataAddress) & ~(1 << bitMask)": {
                    "1": "cleared_bit_value"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "variable_value"
                },
                "1 << (param_2 & 0xff)": {
                    "2": "bit_mask"
                },
                "FUN_080041ea": {
                    "1": "update_bit_field",
                    "2": "set_bit_value",
                    "3": "update_bitwise_operation",
                    "5": "update_bit_value"
                },
                "bitPosition & 0xff": {
                    "1": "bit_mask"
                },
                "bitValue << bitMask": {
                    "1": "updated_bit_value"
                },
                "param_1": {
                    "1": "data_address",
                    "2": "object_address",
                    "24": "base_address"
                },
                "param_1 + 0x20": {
                    "1": "address_offset"
                },
                "param_1+0x20": {
                    "1": "data_address"
                },
                "param_2": {
                    "1": "bit_offset",
                    "25": "bit_position",
                    "5": "bit_index"
                },
                "param_2 & 0xff": {
                    "1": "masked_bit_position"
                },
                "param_3": {
                    "1": "value_to_set",
                    "13": "new_value",
                    "14": "bit_value",
                    "3": "value"
                },
                "param_3 << (param_2 & 0xff)": {
                    "1": "shifted_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_080036a8"
            ],
            "code": "\nvoid update_bit_080041ea(int base_address,uint bit_position,int bit_value)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & ~(1 << (bit_position & 0xff));\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) | bit_value << (bit_position & 0xff);\n  return;\n}\n\n",
            "current_name": "update_bit_080041ea",
            "entrypoint": "0x080041ea",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080041ea": "update_bit_080041ea",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "bit_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800422e": {
            "additional_data": {
                "*(char *)(param_1 + 0xf)": {
                    "1": "flag",
                    "2": "config_flag"
                },
                "*(uint *)(*param_1 + 0x44)": {
                    "1": "config_value"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "flag_updated",
                    "2": "config_flag"
                },
                "*param_2": {
                    "1": "data_ptr[0]"
                },
                "FUN_0800422e": {
                    "1": "update_parameters",
                    "2": "update_parameter_value",
                    "3": "update_config"
                },
                "param_1": {
                    "1": "flag_data",
                    "2": "config_ptr",
                    "3": "config"
                },
                "param_2": {
                    "1": "uint_array",
                    "2": "data_pointer",
                    "3": "values",
                    "5": "data_array",
                    "8": "data"
                },
                "param_2[1]": {
                    "1": "data_ptr[1]"
                },
                "param_2[2]": {
                    "1": "data_ptr[2]"
                },
                "param_2[3]": {
                    "1": "data_ptr[3]"
                },
                "param_2[4]": {
                    "1": "data_ptr[4]"
                },
                "param_2[5]": {
                    "1": "data_ptr[5]"
                },
                "param_2[6]": {
                    "1": "data_ptr[6]"
                },
                "uVar1": {
                    "10": "result",
                    "15": "return_value",
                    "2": "status"
                }
            },
            "called": [],
            "calling": [
                "FUN_080053b0"
            ],
            "code": "\nundefined4 update_config_0800422e(int *array,uint *data)\n\n{\n  undefined4 return_value;\n  \n  if (*(char *)(array + 0xf) == '\\x01') {\n    return_value = 2;\n  }\n  else {\n    *(undefined *)(array + 0xf) = 1;\n    *(uint *)(*array + 0x44) =\n         data_ptr[6] |\n         (data_ptr[6] |\n         (data_ptr[5] |\n         (data_ptr[4] |\n         (*data | (data_ptr[1] | (data_ptr[2] | data_ptr[3] & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff\n         ) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n    *(undefined *)(array + 0xf) = 0;\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "current_name": "update_config_0800422e",
            "entrypoint": "0x0800422e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800422e": "update_config_0800422e",
                "param_1": "array",
                "param_2": "data",
                "param_2[1]": "data_ptr[1]",
                "param_2[2]": "data_ptr[2]",
                "param_2[3]": "data_ptr[3]",
                "param_2[4]": "data_ptr[4]",
                "param_2[5]": "data_ptr[5]",
                "param_2[6]": "data_ptr[6]",
                "uVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080042de": {
            "additional_data": {
                "*(char *)(array + 0xf)": {
                    "1": "is_flag_set"
                },
                "*(char *)(param_1 + 0xf)": {
                    "1": "flag"
                },
                "*(uint *)(*array + 4)": {
                    "1": "flag_value1"
                },
                "*(uint *)(*array + 4) & 0xffffff8f": {
                    "1": "reset_bits1"
                },
                "*(uint *)(*array + 8)": {
                    "1": "flag_value2"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "data_1"
                },
                "*(uint *)(*param_1 + 4) & 0xffffff8f": {
                    "1": "updated_value1"
                },
                "*(uint *)(*param_1 + 8)": {
                    "1": "value2"
                },
                "*(uint *)(*param_1 + 8) & 0xffffff7f": {
                    "1": "updated_value2"
                },
                "*(undefined *)((int)array + 0x3d)": {
                    "1": "flag_value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "temp_var"
                },
                "*(undefined *)(array + 0xf)": {
                    "1": "set_flag"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "flag_value"
                },
                "*param_1": {
                    "1": "data_ptr_value"
                },
                "*param_2": {
                    "1": "mask_value"
                },
                "*param_2 | *(uint *)(*array + 4)": {
                    "1": "updated_value1"
                },
                "FUN_080042de": {
                    "1": "check_and_update_flags",
                    "2": "set_flag_if_true",
                    "3": "update_flags",
                    "4": "update_flags_and_return"
                },
                "param_1": {
                    "1": "flag_data",
                    "2": "data",
                    "3": "flag_array",
                    "6": "array"
                },
                "param_2": {
                    "1": "bitmask_pointer",
                    "2": "permissions",
                    "4": "data",
                    "5": "values"
                },
                "param_2[1] | *(uint *)(*array + 8)": {
                    "1": "updated_value2"
                },
                "uVar1": {
                    "13": "result",
                    "16": "return_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "code": "\nundefined4 update_flags_and_return_080042de(int *array,uint *values)\n\n{\n  undefined4 return_value;\n  \n  if (*(char *)(array + 0xf) == '\\x01') {\n    return_value = 2;\n  }\n  else {\n    *(undefined *)(array + 0xf) = 1;\n    *(undefined *)((int)array + 0x3d) = 2;\n    *(uint *)(*array + 4) = *(uint *)(*array + 4) & 0xffffff8f;\n    *(uint *)(*array + 4) = *values | *(uint *)(*array + 4);\n    *(uint *)(*array + 8) = *(uint *)(*array + 8) & 0xffffff7f;\n    *(uint *)(*array + 8) = values[1] | *(uint *)(*array + 8);\n    *(undefined *)((int)array + 0x3d) = 1;\n    *(undefined *)(array + 0xf) = 0;\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "current_name": "update_flags_and_return_080042de",
            "entrypoint": "0x080042de",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080042de": "update_flags_and_return_080042de",
                "param_1": "array",
                "param_2": "values",
                "uVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004366": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08004366(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004366",
            "entrypoint": "0x08004366",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004366": "FUNC_08004366"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08004378": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08004378(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004378",
            "entrypoint": "0x08004378",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004378": "FUNC_08004378"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800438a": {
            "additional_data": {
                "'\\0'": {
                    "1": "flag_check_value"
                },
                "(int)param_1 + 0x39": {
                    "1": "flag_address"
                },
                "(int)param_1 + 0x3a": {
                    "1": "address1"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "device_status",
                    "4": "flag"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "flag2",
                    "2": "value2"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "config_value_3",
                    "2": "value3"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "device_config_1",
                    "2": "value1"
                },
                "*(uint *)(*param_1 + 0xc) | 0x2000": {
                    "1": "updated_value1"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "flag2",
                    "2": "flag"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "1": "flag1"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "value",
                    "2": "status"
                },
                "*param_1": {
                    "1": "data_pointer"
                },
                "0x0": {
                    "1": "null"
                },
                "0x10": {
                    "1": "field_2_offset"
                },
                "0x14": {
                    "1": "field_3_offset"
                },
                "0x20": {
                    "1": "field_update_value"
                },
                "0x2000": {
                    "1": "field_1_updated_value"
                },
                "0x24": {
                    "1": "processed_flag_value"
                },
                "0x39": {
                    "1": "flag_offset"
                },
                "0x3a": {
                    "1": "unused_flag_offset"
                },
                "0xc": {
                    "1": "field_1_offset"
                },
                "0xe": {
                    "1": "field_offset"
                },
                "0xf": {
                    "1": "field_4_offset"
                },
                "0xffffb7ff": {
                    "1": "field_2_update_mask"
                },
                "0xffffdfff": {
                    "1": "field_1_update_mask"
                },
                "0xffffffd5": {
                    "1": "field_3_update_mask"
                },
                "FUNC_08004424": {
                    "1": "initialize_data",
                    "2": "perform_additional_checks",
                    "4": "process_data"
                },
                "FUN_0800438a": {
                    "1": "update_data",
                    "2": "process_data",
                    "3": "initialize_data",
                    "4": "initialize_device",
                    "8": "initialize_data_structure"
                },
                "calculate_checksum_080046ec": {
                    "19": "calculate_checksum"
                },
                "param_1": {
                    "1": "data_struct_ptr",
                    "2": "device_data",
                    "4": "data_ptr",
                    "5": "data",
                    "7": "data_structure"
                },
                "param_1[0xf]": {
                    "1": "status2",
                    "4": "counter"
                },
                "uVar1": {
                    "1": "success_flag",
                    "18": "result",
                    "2": "success",
                    "6": "return_value"
                }
            },
            "called": [
                "FUN_08004424",
                "FUN_080046ec"
            ],
            "calling": [
                "FUN_08005598"
            ],
            "code": "\nundefined4 initialize_data_structure_0800438a(int *data_structure)\n\n{\n  undefined4 result;\n  \n  if (data_structure == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)data_structure + 0x39) == '\\0') {\n      *(undefined *)(data_structure + 0xe) = 0;\n      FUNC_08004424(data_structure);\n    }\n    *(undefined *)((int)data_structure + 0x39) = 0x24;\n    *(uint *)(*data_structure + 0xc) = *(uint *)(*data_structure + 0xc) & 0xffffdfff;\n    calculate_checksum(data_structure);\n    *(uint *)(*data_structure + 0x10) = *(uint *)(*data_structure + 0x10) & 0xffffb7ff;\n    *(uint *)(*data_structure + 0x14) = *(uint *)(*data_structure + 0x14) & 0xffffffd5;\n    *(uint *)(*data_structure + 0xc) = *(uint *)(*data_structure + 0xc) | 0x2000;\n    counter = 0;\n    *(undefined *)((int)data_structure + 0x39) = 0x20;\n    *(undefined *)((int)data_structure + 0x3a) = 0x20;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "initialize_data_structure_0800438a",
            "entrypoint": "0x0800438a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800438a": "initialize_data_structure_0800438a",
                "calculate_checksum_080046ec": "calculate_checksum",
                "param_1": "data_structure",
                "param_1[0xf]": "counter",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004424": {
            "called": [],
            "calling": [
                "FUN_0800438a"
            ],
            "code": "\nvoid FUNC_08004424(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004424",
            "entrypoint": "0x08004424",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004424": "FUNC_08004424"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08004436": {
            "additional_data": {
                "FUN_08004436": {
                    "1": "parse_data",
                    "18": "process_data",
                    "4": "check_and_process_data"
                },
                "get_data_080015a0": {
                    "1": "get_data"
                },
                "iVar1": {
                    "1": "start_value",
                    "2": "temp_var1",
                    "8": "result"
                },
                "iVar2": {
                    "1": "data_offset",
                    "2": "comparison_result",
                    "3": "result"
                },
                "local_58": {
                    "1": "local_var1",
                    "14": "current_input",
                    "2": "current_element",
                    "9": "current_data"
                },
                "param_1": {
                    "1": "input_ptr",
                    "14": "data",
                    "2": "input_data",
                    "3": "data_ptr"
                },
                "param_2": {
                    "1": "payload",
                    "11": "input",
                    "2": "input_data",
                    "3": "data",
                    "4": "input_array"
                },
                "param_3": {
                    "1": "size",
                    "12": "input_length",
                    "2": "length",
                    "5": "data_length"
                },
                "param_4": {
                    "1": "max_offset",
                    "10": "max_iterations",
                    "2": "max_time",
                    "4": "max_size"
                },
                "uVar3": {
                    "18": "result",
                    "2": "error_code",
                    "9": "return_value"
                }
            },
            "called": [
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_08004f3c"
            ],
            "code": "\nundefined4 process_data_08004436(uint **data,ushort *input,short input_length,uint max_iterations)\n\n{\n  int result;\n  int result;\n  undefined4 result;\n  ushort *current_input;\n  \n  if (*(char *)((int)data + 0x39) == ' ') {\n    if ((input == (ushort *)0x0) || (input_length == 0)) {\n      result = 1;\n    }\n    else if (*(char *)(data + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data + 0xe) = 1;\n      data[0xf] = (uint *)0x0;\n      *(undefined *)((int)data + 0x39) = 0x21;\n      result = get_data();\n      *(short *)(data + 9) = input_length;\n      *(short *)((int)data + 0x26) = input_length;\n      current_input = input;\n      while (*(short *)((int)data + 0x26) != 0) {\n        *(short *)((int)data + 0x26) = *(short *)((int)data + 0x26) + -1;\n        if (data[2] == (uint *)0x1000) {\n          do {\n            if ((**data & 0x80) == 0x80) {\n              result = 0;\n              goto LAB_0800454c;\n            }\n          } while ((max_iterations == 0xffffffff) ||\n                  ((max_iterations != 0 && (result = get_data(), (uint)(result - result) <= max_iterations))));\n          (*data)[3] = (*data)[3] & 0xfffffe5f;\n          (*data)[5] = (*data)[5] & 0xfffffffe;\n          *(undefined *)((int)data + 0x39) = 0x20;\n          *(undefined *)((int)data + 0x3a) = 0x20;\n          *(undefined *)(data + 0xe) = 0;\n          result = 3;\nLAB_0800454c:\n          if (result != 0) {\n            return 3;\n          }\n          (*data)[1] = *current_input & 0x1ff;\n          if (data[4] == (uint *)0x0) {\n            current_input = current_input + 1;\n          }\n          else {\n            current_input = (ushort *)((int)current_input + 1);\n          }\n        }\n        else {\n          do {\n            if ((**data & 0x80) == 0x80) {\n              result = 0;\n              goto LAB_08004614;\n            }\n          } while ((max_iterations == 0xffffffff) ||\n                  ((max_iterations != 0 && (result = get_data(), (uint)(result - result) <= max_iterations))));\n          (*data)[3] = (*data)[3] & 0xfffffe5f;\n          (*data)[5] = (*data)[5] & 0xfffffffe;\n          *(undefined *)((int)data + 0x39) = 0x20;\n          *(undefined *)((int)data + 0x3a) = 0x20;\n          *(undefined *)(data + 0xe) = 0;\n          result = 3;\nLAB_08004614:\n          if (result != 0) {\n            return 3;\n          }\n          (*data)[1] = (uint)*(byte *)current_input;\n          current_input = (ushort *)((int)current_input + 1);\n        }\n      }\n      do {\n        if ((**data & 0x40) == 0x40) {\n          result = 0;\n          goto LAB_080046c6;\n        }\n      } while ((max_iterations == 0xffffffff) ||\n              ((max_iterations != 0 && (result = get_data(), (uint)(result - result) <= max_iterations))));\n      (*data)[3] = (*data)[3] & 0xfffffe5f;\n      (*data)[5] = (*data)[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 0x20;\n      *(undefined *)((int)data + 0x3a) = 0x20;\n      *(undefined *)(data + 0xe) = 0;\n      result = 3;\nLAB_080046c6:\n      if (result == 0) {\n        *(undefined *)((int)data + 0x39) = 0x20;\n        *(undefined *)(data + 0xe) = 0;\n        result = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_08004436",
            "entrypoint": "0x08004436",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004436": "process_data_08004436",
                "get_data_080015a0": "get_data",
                "iVar1": "result",
                "iVar2": "result",
                "local_58": "current_input",
                "param_1": "data",
                "param_2": "input",
                "param_3": "input_length",
                "param_4": "max_iterations",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080046ec": {
            "additional_data": {
                "(((uint)(iVar2 * 0x19) / (uint)(iVar5 << 2) + (int)(((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(param_1[1] << 2)) / 100) * -100) * 0x10 + 0x32) / 100 & 0xf": {
                    "1": "updated_value1"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "config_value1"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "config_value3"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "config_value2"
                },
                "*(uint *)(*param_1 + 8)": {
                    "1": "config_value4"
                },
                "*param_1": {
                    "2": "config_pointer"
                },
                "0x10": {
                    "1": "offset_1"
                },
                "0x14": {
                    "1": "offset_3"
                },
                "0x40013800": {
                    "1": "constant_value"
                },
                "0xc": {
                    "1": "offset_2"
                },
                "FUN_080046ec": {
                    "1": "calculate_params",
                    "2": "update_config_values",
                    "3": "update_values",
                    "4": "update_configuration",
                    "7": "calculate_checksum"
                },
                "iVar2": {
                    "1": "calculated_value2",
                    "2": "shifted_data1",
                    "3": "temp1",
                    "8": "temp_var1"
                },
                "iVar2_1": {
                    "1": "shift_result1_1"
                },
                "iVar2_2": {
                    "1": "calculated_value2"
                },
                "iVar3": {
                    "1": "i_var3",
                    "2": "temp3",
                    "7": "temp_var2"
                },
                "iVar3_1": {
                    "1": "shift_result2_1"
                },
                "iVar3_2": {
                    "1": "calculated_value3"
                },
                "iVar5": {
                    "1": "temp_value3",
                    "2": "temp3",
                    "3": "param1_value",
                    "6": "temp_var3"
                },
                "param_1": {
                    "1": "param",
                    "3": "data",
                    "4": "input_data",
                    "5": "parameters",
                    "9": "input_array"
                },
                "param_1[1]": {
                    "1": "config_value1"
                },
                "param_1[1] << 2": {
                    "1": "shift_amount1"
                },
                "param_1[2]": {
                    "1": "value2"
                },
                "param_1[3]": {
                    "1": "config_value3"
                },
                "param_1[4]": {
                    "1": "config_value4"
                },
                "param_1[5]": {
                    "1": "value5"
                },
                "param_1[6]": {
                    "1": "config_value6"
                },
                "shift_data_08003518": {
                    "1": "shift_function2",
                    "5": "shift_data2"
                },
                "shift_data_08003540": {
                    "1": "perform_shift_for_type_a",
                    "2": "shift_data",
                    "3": "shift_data1"
                },
                "uVar1": {
                    "1": "calculation1",
                    "12": "quotient",
                    "2": "result1",
                    "3": "division_result"
                },
                "uVar4": {
                    "1": "temp4",
                    "2": "checksum",
                    "3": "result2",
                    "4": "result"
                },
                "uVar6": {
                    "1": "shifted_data2",
                    "11": "shifted_data",
                    "2": "shifted_result",
                    "3": "shift_result",
                    "7": "shifted_value"
                },
                "uVar6_1": {
                    "1": "shifted_data1"
                }
            },
            "called": [
                "FUN_08003518",
                "FUN_08003540"
            ],
            "calling": [
                "FUN_0800438a"
            ],
            "code": "\nvoid calculate_checksum_080046ec(int *input_array)\n\n{\n  ulonglong quotient;\n  int temp_var1;\n  int temp_var2;\n  uint result;\n  int temp_var3;\n  undefined8 shifted_data;\n  \n  *(uint *)(*input_array + 0x10) = config_value3 | *(uint *)(*input_array + 0x10) & 0xffffcfff;\n  *(uint *)(*input_array + 0xc) =\n       *(uint *)(*input_array + 0xc) & 0xffffe9f3 | config_value5 | config_value2 | config_value4;\n  *(uint *)(*input_array + 0x14) = config_value6 | *(uint *)(*input_array + 0x14) & 0xfffffcff;\n  if (*input_array == 0x40013800) {\n    shifted_data = shift_data1();\n    quotient = (ulonglong)(uint)((int)shifted_data * 0x19) / (ulonglong)(uint)(config_value1 << 2);\n    temp_var1 = shift_data1((int)shifted_data,(int)((ulonglong)shifted_data >> 0x20),(int)(quotient * 0x51eb851f));\n    temp_var2 = config_value1;\n    shifted_data = shift_data1();\n    result = ((uint)(temp_var1 * 0x19) / (uint)(temp_var2 << 2) +\n            (int)(((ulonglong)(uint)((int)shifted_data * 0x19) / (ulonglong)(uint)(config_value1 << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    temp_var1 = shift_data1((int)shifted_data,(int)((ulonglong)shifted_data >> 0x20),result * 0x51eb851f);\n    temp_var3 = config_value1;\n    temp_var2 = shift_data1();\n    *(uint *)(*input_array + 8) =\n         ((((uint)(temp_var1 * 0x19) / (uint)(temp_var3 << 2) +\n           (int)(((ulonglong)(uint)(temp_var2 * 0x19) / (ulonglong)(uint)(config_value1 << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(quotient / 100) * 0x10 + (result / 100 & 0xf0);\n  }\n  else {\n    shifted_data = shift_data2();\n    quotient = (ulonglong)(uint)((int)shifted_data * 0x19) / (ulonglong)(uint)(config_value1 << 2);\n    temp_var1 = shift_data2((int)shifted_data,(int)((ulonglong)shifted_data >> 0x20),(int)(quotient * 0x51eb851f));\n    temp_var2 = config_value1;\n    shifted_data = shift_data2();\n    result = ((uint)(temp_var1 * 0x19) / (uint)(temp_var2 << 2) +\n            (int)(((ulonglong)(uint)((int)shifted_data * 0x19) / (ulonglong)(uint)(config_value1 << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    temp_var1 = shift_data2((int)shifted_data,(int)((ulonglong)shifted_data >> 0x20),result * 0x51eb851f);\n    temp_var3 = config_value1;\n    temp_var2 = shift_data2();\n    *(uint *)(*input_array + 8) =\n         ((((uint)(temp_var1 * 0x19) / (uint)(temp_var3 << 2) +\n           (int)(((ulonglong)(uint)(temp_var2 * 0x19) / (ulonglong)(uint)(config_value1 << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(quotient / 100) * 0x10 + (result / 100 & 0xf0);\n  }\n  return;\n}\n\n",
            "current_name": "calculate_checksum_080046ec",
            "entrypoint": "0x080046ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080046ec": "calculate_checksum_080046ec",
                "iVar2": "temp_var1",
                "iVar3": "temp_var2",
                "iVar5": "temp_var3",
                "param_1": "input_array",
                "param_1[1]": "config_value1",
                "param_1[2]": "config_value2",
                "param_1[3]": "config_value3",
                "param_1[4]": "config_value4",
                "param_1[5]": "config_value5",
                "param_1[6]": "config_value6",
                "shift_data_08003518": "shift_data2",
                "shift_data_08003540": "shift_data1",
                "uVar1": "quotient",
                "uVar4": "result",
                "uVar6": "shifted_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800491c": {
            "additional_data": {
                "FUN_0800491c": {
                    "1": "initialize_param_and_calculate",
                    "12": "initialize_data",
                    "2": "initialize_results",
                    "3": "initialize_params",
                    "9": "initialize_parameters"
                },
                "calculate_results_080049cc": {
                    "12": "calculate_results"
                },
                "local_11": {
                    "1": "count_array",
                    "2": "temp_array",
                    "3": "byte_array",
                    "4": "array",
                    "5": "buffer"
                },
                "local_12": {
                    "1": "variable2",
                    "2": "size_variable",
                    "3": "size",
                    "5": "value"
                },
                "local_13": {
                    "1": "flag_value",
                    "2": "temp_var1",
                    "3": "byte_zero",
                    "5": "flag",
                    "6": "zero"
                },
                "param_1": {
                    "1": "parameter_array",
                    "2": "result_array",
                    "3": "parameters",
                    "5": "data_array",
                    "9": "output_array"
                }
            },
            "called": [
                "FUN_080049cc"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_data_0800491c(undefined4 *output_array)\n\n{\n  undefined zero;\n  undefined value;\n  undefined buffer [5];\n  \n  zero = 0;\n  (*DAT_20000a54)(0xd0,0x6b,&zero,1);\n  value = 0x10;\n  (*DAT_20000a54)(0xd0,0x1c,&value,1);\n  buffer[0] = 8;\n  (*DAT_20000a54)(0xd0,0x1b,buffer,1);\n  *output_array = 0;\n  output_array[1] = 0;\n  output_array[2] = 0;\n  output_array[3] = 0;\n  output_array[4] = 0;\n  output_array[5] = 0;\n  output_array[6] = 0;\n  output_array[7] = 0;\n  output_array[8] = 0;\n  output_array[9] = 0;\n  output_array[10] = 0;\n  calculate_results(output_array);\n  return;\n}\n\n",
            "current_name": "initialize_data_0800491c",
            "entrypoint": "0x0800491c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800491c": "initialize_data_0800491c",
                "calculate_results_080049cc": "calculate_results",
                "local_11": "buffer",
                "local_12": "value",
                "local_13": "zero",
                "param_1": "output_array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080049cc": {
            "additional_data": {
                "*(param_1 + 0x1c)": {
                    "1": "output_param_1"
                },
                "*(param_1 + 0x20)": {
                    "1": "output_param_2"
                },
                "*(param_1 + 0x24)": {
                    "1": "output_param_3"
                },
                "*(param_1 + 0x28)": {
                    "1": "output_param_4"
                },
                "*(undefined4 *)(param_1 + 0x1c)": {
                    "1": "result_with_leading_zeros_1"
                },
                "*(undefined4 *)(param_1 + 0x20)": {
                    "1": "result_with_leading_zeros_2"
                },
                "*(undefined4 *)(param_1 + 0x24)": {
                    "1": "result_24"
                },
                "*(undefined4 *)(param_1 + 0x28)": {
                    "1": "result_with_leading_zeros_4"
                },
                "FUN_080049cc": {
                    "1": "calculate_stats",
                    "10": "calculate_results",
                    "2": "calculate_result",
                    "3": "calculate_and_store_results",
                    "6": "calculate_float_values"
                },
                "calculate_float_08000aa8": {
                    "1": "accumulate_float",
                    "4": "calculate_float"
                },
                "calculate_float_08000e20": {
                    "1": "calculate_float_and_leading_zeros",
                    "2": "calculate_float_with_zeros"
                },
                "calculate_result_08004d78": {
                    "6": "calculate_result"
                },
                "count_leading_zeros_08000c10": {
                    "6": "count_leading_zeros"
                },
                "extract_leading_zeros_08004ae0": {
                    "6": "extract_leading_zeros"
                },
                "local_10": {
                    "1": "sum_operand_2",
                    "2": "float_result3",
                    "3": "sum_3"
                },
                "local_14": {
                    "1": "float_result_1",
                    "2": "sum_14",
                    "3": "sum_2"
                },
                "local_18": {
                    "1": "result_2",
                    "2": "result2",
                    "3": "sum_1"
                },
                "local_1c": {
                    "1": "current_loop",
                    "2": "iteration",
                    "3": "iteration_index",
                    "4": "counter",
                    "6": "iteration_count",
                    "7": "current_iteration"
                },
                "local_20": {
                    "1": "iteration_limit",
                    "10": "iteration_count",
                    "2": "max_iterations",
                    "3": "loop_count",
                    "5": "loop_counter"
                },
                "local_24": {
                    "1": "get_current_time",
                    "2": "result_2",
                    "3": "time_stamp",
                    "4": "timestamp",
                    "9": "current_time"
                },
                "local_28": {
                    "1": "leading_zeros_first_half",
                    "2": "leading_zeros1",
                    "3": "result_2",
                    "4": "result_1"
                },
                "local_2c": {
                    "1": "leading_zeros_count_2",
                    "2": "result_2",
                    "3": "result2"
                },
                "local_8": {
                    "1": "temp_result"
                },
                "local_c": {
                    "1": "sum_operand_1",
                    "2": "sum_c",
                    "3": "sum_4"
                },
                "param_1": {
                    "1": "input_parameter",
                    "17": "input_value",
                    "2": "input_array",
                    "3": "input_param",
                    "6": "input_data"
                },
                "uVar1": {
                    "1": "result1",
                    "11": "leading_zeros_count",
                    "3": "leading_zeros"
                }
            },
            "called": [
                "FUN_08000e20",
                "FUN_08000aa8",
                "FUN_08004ae0",
                "FUN_08004d78",
                "FUN_08000c10"
            ],
            "calling": [
                "FUN_0800491c"
            ],
            "code": "\nvoid calculate_results_080049cc(int input_value)\n\n{\n  undefined4 leading_zeros_count;\n  undefined4 leading_zeros_count;\n  undefined4 result1;\n  undefined4 current_time;\n  int iteration_count;\n  int iteration_counter;\n  undefined4 sum_1;\n  undefined4 sum_2;\n  undefined4 sum_3;\n  undefined4 result_c;\n  \n  iteration_count = 1;\n  result_c = 0;\n  sum_3 = 0;\n  sum_2 = 0;\n  sum_1 = 0;\n  current_time = (*DAT_20000a50)();\n  iteration_counter = 0;\n  while( true ) {\n    if (iteration_count <= iteration_counter) break;\n    result1 = 0;\n    leading_zeros_count = 0;\n    extract_leading_zeros(input_value);\n    calculate_result(input_value,&result1,&leading_zeros_count);\n    sum_2 = calculate_float(sum_2,result1);\n    sum_1 = calculate_float(sum_1,leading_zeros_count);\n    result_c = calculate_float(result_c,*(undefined4 *)(input_value + 0x10));\n    sum_3 = calculate_float(sum_3,*(undefined4 *)(input_value + 0x14));\n    current_time = (*DAT_20000a50)();\n    iteration_counter = iteration_counter + 1;\n  }\n  leading_zeros_count = count_leading_zeros(iteration_count);\n  leading_zeros_count = apply_leading_zeros(result_c,leading_zeros_count);\n  *(undefined4 *)(input_value + 0x1c) = leading_zeros_count;\n  leading_zeros_count = count_leading_zeros(iteration_count);\n  leading_zeros_count = apply_leading_zeros(sum_3,leading_zeros_count);\n  *(undefined4 *)(input_value + 0x20) = leading_zeros_count;\n  leading_zeros_count = count_leading_zeros(iteration_count);\n  leading_zeros_count = apply_leading_zeros(sum_2,leading_zeros_count);\n  *(undefined4 *)(input_value + 0x24) = leading_zeros_count;\n  leading_zeros_count = count_leading_zeros(iteration_count);\n  leading_zeros_count = apply_leading_zeros(sum_1,leading_zeros_count);\n  *(undefined4 *)(input_value + 0x28) = leading_zeros_count;\n  return;\n}\n\n",
            "current_name": "calculate_results_080049cc",
            "entrypoint": "0x080049cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080049cc": "calculate_results_080049cc",
                "calculate_float_08000aa8": "calculate_float",
                "calculate_float_08000e20": "apply_leading_zeros",
                "calculate_result_08004d78": "calculate_result",
                "count_leading_zeros_08000c10": "count_leading_zeros",
                "extract_leading_zeros_08004ae0": "extract_leading_zeros",
                "local_10": "sum_3",
                "local_14": "sum_2",
                "local_18": "sum_1",
                "local_1c": "iteration_counter",
                "local_20": "iteration_count",
                "local_24": "current_time",
                "local_28": "result1",
                "local_2c": "leading_zeros_count",
                "local_c": "result_c",
                "param_1": "input_value",
                "uVar1": "leading_zeros_count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ae0": {
            "additional_data": {
                "FUN_08004ae0": {
                    "1": "convert_leading_zeros_to_integers",
                    "12": "extract_leading_zeros",
                    "2": "convert_shorts_to_leading_zeros",
                    "3": "count_leading_zeros",
                    "4": "extract_and_count_leading_zeros"
                },
                "count_leading_zeros_08000c10": {
                    "1": "count_leading_zeros"
                },
                "local_14": {
                    "1": "input_6",
                    "2": "short_6",
                    "3": "value_6"
                },
                "local_16": {
                    "1": "value_2",
                    "2": "short_5",
                    "3": "value_5"
                },
                "local_18": {
                    "1": "fourth_word",
                    "2": "var_18",
                    "3": "value_4"
                },
                "local_1a": {
                    "1": "third_word",
                    "2": "var_17",
                    "3": "value_3"
                },
                "local_1c": {
                    "1": "concat_temp_2",
                    "2": "short_2",
                    "3": "value_2"
                },
                "local_1e": {
                    "1": "input_data1",
                    "2": "short_1",
                    "3": "var_15"
                },
                "local_1f": {
                    "1": "fourteenth_value",
                    "2": "fourteenth_byte",
                    "3": "var_14",
                    "7": "temp_14"
                },
                "local_20": {
                    "1": "temp13",
                    "2": "temp_var_13",
                    "3": "var_13",
                    "7": "temp_13"
                },
                "local_21": {
                    "1": "temp_var12",
                    "2": "temp_10",
                    "3": "var_12",
                    "7": "temp_12"
                },
                "local_22": {
                    "1": "unused_byte",
                    "2": "temp_var_11",
                    "3": "var_11",
                    "7": "temp_11"
                },
                "local_23": {
                    "1": "variable_10",
                    "2": "temp_var_10",
                    "3": "var_10",
                    "7": "temp_10"
                },
                "local_24": {
                    "1": "temp_8",
                    "2": "value_9",
                    "3": "var_9",
                    "7": "temp_9"
                },
                "local_25": {
                    "1": "temp_var8",
                    "2": "value_8",
                    "3": "var_8",
                    "7": "temp_8"
                },
                "local_26": {
                    "1": "seventh_value",
                    "2": "value_7",
                    "3": "var_7",
                    "7": "temp_7"
                },
                "local_27": {
                    "1": "temp_27",
                    "2": "sixth_byte",
                    "3": "var_6",
                    "7": "temp_6"
                },
                "local_28": {
                    "1": "unused_var_4",
                    "2": "fifth_byte",
                    "3": "var_5",
                    "7": "temp_5"
                },
                "local_29": {
                    "1": "unused_byte",
                    "2": "temp_2",
                    "3": "var_4",
                    "7": "temp_4"
                },
                "local_2a": {
                    "1": "third_variable",
                    "2": "value_3",
                    "3": "var_3",
                    "7": "temp_3"
                },
                "local_2b": {
                    "1": "unused_byte",
                    "2": "value_2",
                    "3": "var_2",
                    "7": "temp_2"
                },
                "local_2c": {
                    "1": "temp_variable_1",
                    "2": "value_1",
                    "3": "var_1",
                    "7": "temp_1"
                },
                "param_1": {
                    "1": "bit_counts",
                    "17": "result_array",
                    "2": "output",
                    "3": "output_values",
                    "8": "output_array"
                },
                "uVar1": {
                    "1": "leading_zeros_count"
                }
            },
            "called": [
                "FUN_08000c10"
            ],
            "calling": [
                "FUN_08004f78",
                "FUN_080049cc"
            ],
            "code": "\nvoid extract_leading_zeros_08004ae0(undefined4 *result_array)\n\n{\n  undefined4 leading_zeros_count;\n  undefined temp_1;\n  undefined temp_2;\n  undefined temp_3;\n  undefined temp_4;\n  undefined temp_5;\n  undefined temp_6;\n  undefined temp_7;\n  undefined temp_8;\n  undefined temp_9;\n  undefined temp_10;\n  undefined temp_11;\n  undefined temp_12;\n  undefined temp_13;\n  undefined temp_14;\n  short var_15;\n  short var_16;\n  short value_3;\n  short value_4;\n  short value_5;\n  short value_6;\n  \n  (*DAT_20000a4c)(0xd0,0x3b,&temp_1,0xe);\n  value_6 = CONCAT11(temp_3,temp_4);\n  value_5 = CONCAT11(temp_5,temp_6);\n  value_4 = CONCAT11(temp_7,temp_8);\n  value_3 = CONCAT11(temp_9,temp_10);\n  var_16 = CONCAT11(temp_11,temp_12);\n  var_15 = CONCAT11(temp_13,temp_14);\n  leading_zeros_count = count_leading_zeros((int)CONCAT11(temp_1,temp_2));\n  *result_array = leading_zeros_count;\n  leading_zeros_count = count_leading_zeros((int)value_6);\n  result_array[1] = leading_zeros_count;\n  leading_zeros_count = count_leading_zeros((int)value_5);\n  result_array[2] = leading_zeros_count;\n  leading_zeros_count = count_leading_zeros((int)value_4);\n  result_array[3] = leading_zeros_count;\n  leading_zeros_count = count_leading_zeros((int)value_3);\n  result_array[4] = leading_zeros_count;\n  leading_zeros_count = count_leading_zeros((int)var_16);\n  result_array[5] = leading_zeros_count;\n  leading_zeros_count = count_leading_zeros((int)var_15);\n  result_array[6] = leading_zeros_count;\n  return;\n}\n\n",
            "current_name": "extract_leading_zeros_08004ae0",
            "entrypoint": "0x08004ae0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004ae0": "extract_leading_zeros_08004ae0",
                "count_leading_zeros_08000c10": "count_leading_zeros",
                "local_14": "value_6",
                "local_16": "value_5",
                "local_18": "value_4",
                "local_1a": "value_3",
                "local_1c": "var_16",
                "local_1e": "var_15",
                "local_1f": "temp_14",
                "local_20": "temp_13",
                "local_21": "temp_12",
                "local_22": "temp_11",
                "local_23": "temp_10",
                "local_24": "temp_9",
                "local_25": "temp_8",
                "local_26": "temp_7",
                "local_27": "temp_6",
                "local_28": "temp_5",
                "local_29": "temp_4",
                "local_2a": "temp_3",
                "local_2b": "temp_2",
                "local_2c": "temp_1",
                "param_1": "result_array",
                "uVar1": "leading_zeros_count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004bd8": {
            "additional_data": {
                "DAT_20000005": {
                    "1": "is_zero"
                },
                "DAT_200009e4": {
                    "1": "data_1"
                },
                "FUN_08004bd8": {
                    "1": "calculate_and_assign_result",
                    "2": "calculate",
                    "20": "calculate_result",
                    "3": "calculate_and_update_result"
                },
                "calculate_0800015c": {
                    "2": "calculate_value"
                },
                "calculate_float_08000aa4": {
                    "2": "calculate_float"
                },
                "calculate_floating_point_0800071c": {
                    "2": "calculate_floating_point_2"
                },
                "calculate_floating_point_080009fc": {
                    "2": "calculate_floating_point"
                },
                "calculate_product_080004c8": {
                    "2": "calculate_product"
                },
                "calculate_result_08000158": {
                    "2": "calculate_result_2"
                },
                "calculate_result_thunk_08005838": {
                    "2": "calculate_result_thunk"
                },
                "param_1": {
                    "1": "input_array",
                    "12": "input",
                    "13": "input_data",
                    "4": "input_param"
                },
                "param_2": {
                    "1": "output_result",
                    "12": "output",
                    "2": "output_value",
                    "3": "result",
                    "4": "output_param",
                    "8": "output_data"
                },
                "reverse_bits_08000418": {
                    "2": "reverse_bits"
                },
                "uVar1": {
                    "1": "float_result",
                    "2": "float_calculation_1",
                    "3": "calculated_float1",
                    "4": "float1",
                    "5": "result_1"
                },
                "uVar2": {
                    "1": "calculated_float_2",
                    "2": "float_calculation_2",
                    "3": "result2",
                    "4": "float2",
                    "5": "result_2"
                },
                "uVar3": {
                    "1": "float_calculation3",
                    "2": "float_calculation_3",
                    "3": "result3",
                    "4": "float3",
                    "5": "float_result_3"
                }
            },
            "called": [
                "FUN_080004c8",
                "FUN_08000158",
                "FUN_080009fc",
                "thunk_FUN_08005838",
                "FUN_08000418",
                "FUN_0800015c",
                "FUN_0800071c",
                "FUN_08000aa4"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nvoid calculate_result_08004bd8(int input_data,undefined4 *output)\n\n{\n  undefined4 float_result_1;\n  undefined8 float_result_2;\n  undefined8 float_result_3;\n  \n  float_result_1 = calculate_float(*(undefined4 *)(input_data + 0x10),*(undefined4 *)(input_data + 0x1c));\n  float_result_2 = reverse_bits(DAT_200009e4);\n  float_result_3 = reverse_bits(float_result_1);\n  float_result_3 = calculate_product((int)float_result_3,(int)((ulonglong)float_result_3 >> 0x20),0x83f5c366,0x3f340215);\n  float_result_2 = calculate_value((int)float_result_2,(int)((ulonglong)float_result_2 >> 0x20),(int)float_result_3,\n                       (int)((ulonglong)float_result_3 >> 0x20));\n  DAT_200009e4 = calculate_floating_point((int)float_result_2,(int)((ulonglong)float_result_2 >> 0x20));\n  float_result_2 = reverse_bits(*(undefined4 *)(input_data + 4));\n  float_result_2 = calculate_floating_point_2((int)float_result_2,(int)((ulonglong)float_result_2 >> 0x20),0,0x40b00000);\n  float_result_3 = reverse_bits(*(undefined4 *)(input_data + 8));\n  float_result_3 = calculate_floating_point_2((int)float_result_3,(int)((ulonglong)float_result_3 >> 0x20),0,0x40b00000);\n  float_result_2 = calculate_result_08004bd8_thunk((int)float_result_2,(int)((ulonglong)float_result_2 >> 0x20),(int)float_result_3,\n                             (int)((ulonglong)float_result_3 >> 0x20));\n  float_result_2 = calculate_product((int)float_result_2,(int)((ulonglong)float_result_2 >> 0x20),0,0x40668000);\n  float_result_2 = calculate_floating_point_2((int)float_result_2,(int)((ulonglong)float_result_2 >> 0x20),0x54442d18,0x400921fb);\n  float_result_3 = reverse_bits(*(undefined4 *)(input_data + 0x24));\n  float_result_2 = calculate_result_08004bd8_2((int)float_result_2,(int)((ulonglong)float_result_2 >> 0x20),(int)float_result_3,\n                       (int)((ulonglong)float_result_3 >> 0x20));\n  float_result_2 = calculate_value((int)float_result_2,(int)((ulonglong)float_result_2 >> 0x20),0,0x40568000);\n  float_result_1 = calculate_floating_point((int)float_result_2,(int)((ulonglong)float_result_2 >> 0x20));\n  if (DAT_20000005 == '\\0') {\n    float_result_2 = reverse_bits(DAT_200009e4);\n    float_result_2 = calculate_product((int)float_result_2,(int)((ulonglong)float_result_2 >> 0x20),0x9999999a,0x3fe99999);\n    float_result_3 = reverse_bits(float_result_1);\n    float_result_3 = calculate_product((int)float_result_3,(int)((ulonglong)float_result_3 >> 0x20),0x9999999a,0x3fc99999);\n    float_result_2 = calculate_value((int)float_result_2,(int)((ulonglong)float_result_2 >> 0x20),(int)float_result_3,\n                         (int)((ulonglong)float_result_3 >> 0x20));\n    DAT_200009e4 = calculate_floating_point((int)float_result_2,(int)((ulonglong)float_result_2 >> 0x20));\n  }\n  else {\n    DAT_20000005 = '\\0';\n    DAT_200009e4 = float_result_1;\n  }\n  *output = DAT_200009e4;\n  return;\n}\n\n",
            "current_name": "calculate_result_08004bd8",
            "entrypoint": "0x08004bd8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004bd8": "calculate_result_08004bd8",
                "calculate_0800015c": "calculate_value",
                "calculate_float_08000aa4": "calculate_float",
                "calculate_floating_point_0800071c": "calculate_floating_point_2",
                "calculate_floating_point_080009fc": "calculate_floating_point",
                "calculate_product_080004c8": "calculate_product",
                "calculate_result_08000158": "calculate_result_2",
                "calculate_result_thunk_08005838": "calculate_result_thunk",
                "param_1": "input_data",
                "param_2": "output",
                "reverse_bits_08000418": "reverse_bits",
                "uVar1": "float_result_1",
                "uVar2": "float_result_2",
                "uVar3": "float_result_3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d78": {
            "additional_data": {
                "FUN_08004d78": {
                    "1": "calculate_result_and_assign",
                    "11": "calculate_result",
                    "2": "calculate_float_product",
                    "5": "calculate_and_assign_results"
                },
                "param_1": {
                    "1": "input_data",
                    "17": "input_values",
                    "9": "input_array"
                },
                "param_2": {
                    "1": "reversed_product",
                    "11": "output_value_1",
                    "2": "output_var1",
                    "3": "output_1",
                    "5": "result_1"
                },
                "param_3": {
                    "1": "output_param_2",
                    "11": "output_value_2",
                    "2": "output_var2",
                    "3": "output_value2",
                    "5": "result_2"
                },
                "uVar1": {
                    "1": "input1_float",
                    "2": "value_1",
                    "5": "calculated_value_1",
                    "8": "result_1"
                },
                "uVar2": {
                    "1": "calculated_float_2",
                    "2": "value_2",
                    "5": "calculated_value_2",
                    "8": "result_2"
                },
                "uVar3": {
                    "1": "input3_float",
                    "2": "value_3",
                    "5": "calculated_value_3",
                    "8": "result_3"
                },
                "uVar4": {
                    "1": "result_temp",
                    "2": "intermediate_result1",
                    "3": "intermediate_result_1",
                    "4": "intermediate_result"
                },
                "uVar5": {
                    "1": "result_2",
                    "2": "reverse_result",
                    "3": "intermediate_result2",
                    "4": "temp_result_2"
                }
            },
            "called": [
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000e20",
                "thunk_FUN_08005838",
                "FUN_08000418",
                "FUN_0800071c"
            ],
            "calling": [
                "FUN_080049cc"
            ],
            "code": "\nvoid calculate_result_08004d78(undefined4 *input_values,undefined4 *output_value_1,undefined4 *output_value_2)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined8 temp_result_1;\n  undefined8 temp_result_2;\n  \n  result1 = calculate_float_08000e20(*input_values,0x45800000);\n  result2 = calculate_float_08000e20(input_values[1],0x45800000);\n  result3 = calculate_float_08000e20(input_values[2],0x45800000);\n  temp_result_1 = reverse_bits_08000418(result2);\n  temp_result_2 = reverse_bits_08000418(result3);\n  temp_result_1 = calculate_result_08004d78_thunk_08005838((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),(int)temp_result_2,\n                             (int)((ulonglong)temp_result_2 >> 0x20));\n  temp_result_1 = calculate_product_080004c8((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0,0x40668000);\n  temp_result_1 = calculate_floating_point_0800071c((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x54442d18,0x400921fb);\n  result2 = calculate_floating_point_080009fc((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20));\n  temp_result_1 = reverse_bits_08000418(result1);\n  temp_result_2 = reverse_bits_08000418(result3);\n  temp_result_1 = calculate_result_08004d78_thunk_08005838((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),(int)temp_result_2,\n                             (int)((ulonglong)temp_result_2 >> 0x20));\n  temp_result_1 = calculate_product_080004c8((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0,0x40668000);\n  temp_result_1 = calculate_floating_point_0800071c((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x54442d18,0x400921fb);\n  result1 = calculate_floating_point_080009fc((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20));\n  *output_value_1 = result2;\n  *output_value_2 = result1;\n  return;\n}\n\n",
            "current_name": "calculate_result_08004d78",
            "entrypoint": "0x08004d78",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d78": "calculate_result_08004d78",
                "param_1": "input_values",
                "param_2": "output_value_1",
                "param_3": "output_value_2",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "temp_result_1",
                "uVar5": "temp_result_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e6c": {
            "additional_data": {
                "0x3f": {
                    "2": "interrupt_code"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "FUN_08004e6c": {
                    "1": "call_software_interrupt",
                    "2": "send_system_interrupt",
                    "3": "execute_system_call",
                    "4": "trigger_software_interrupt"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "PTR_00123456": {
                    "1": "some_pointer"
                },
                "PTR_00789012": {
                    "1": "another_pointer"
                },
                "PTR_08004e6c": {
                    "1": "ptr_invoke_software_interrupt"
                },
                "software_interrupt": {
                    "1": "interrupt_number",
                    "2": "perform_interrupt",
                    "3": "send_interrupt",
                    "4": "trigger_interrupt"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004e74"
            ],
            "code": "\nvoid trigger_software_interrupt_08004e6c(void)\n\n{\n  trigger_interrupt(0x3f);\n  return;\n}\n\n",
            "current_name": "trigger_software_interrupt_08004e6c",
            "entrypoint": "0x08004e6c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004e6c": "trigger_software_interrupt_08004e6c",
                "software_interrupt": "trigger_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e74": {
            "additional_data": {
                "FUN_08004e74": {
                    "1": "check_interrupt_and_trigger",
                    "3": "check_interrupt",
                    "4": "execute_interrupt_handler",
                    "6": "handle_interrupt"
                },
                "param_1": {
                    "1": "interrupt_handler",
                    "2": "input",
                    "3": "param",
                    "4": "input_param",
                    "5": "interrupt_code",
                    "7": "input_value"
                },
                "trigger_software_interrupt_08004e6c": {
                    "1": "trigger_interrupt"
                },
                "uVar1": {
                    "25": "result",
                    "6": "return_value"
                }
            },
            "called": [
                "FUN_08004e6c"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nundefined4 handle_interrupt_08004e74(undefined4 input_value)\n\n{\n  undefined4 result;\n  \n  if (DAT_200009f0 == 0) {\n    result = trigger_interrupt(1,input_value,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "handle_interrupt_08004e74",
            "entrypoint": "0x08004e74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004e74": "handle_interrupt_08004e74",
                "param_1": "input_value",
                "trigger_software_interrupt_08004e6c": "trigger_interrupt",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ea4": {
            "additional_data": {
                "DAT_20000008": {
                    "1": "buffer_size"
                },
                "DAT_20000a88": {
                    "1": "data_buffer"
                },
                "FUN_08004ea4": {
                    "1": "process_data_entry",
                    "2": "process_data_wrapper",
                    "21": "process_data",
                    "7": "process_and_return_data"
                },
                "param_1": {
                    "1": "input1",
                    "2": "input_param",
                    "3": "input_param_1",
                    "9": "data_1"
                },
                "param_2": {
                    "1": "output_buffer",
                    "2": "output_param",
                    "3": "input_param_2",
                    "9": "input_2"
                },
                "param_3": {
                    "1": "size_param",
                    "2": "input_3",
                    "3": "input_param_3",
                    "5": "value_1",
                    "6": "length"
                },
                "param_4": {
                    "1": "value",
                    "2": "info_param",
                    "3": "data_4",
                    "5": "value_2"
                },
                "process_data_08001ccc": {
                    "1": "process_data",
                    "2": "process_data_helper"
                }
            },
            "called": [
                "FUN_08001ccc"
            ],
            "calling": [],
            "code": "\nvoid process_data_08004ea4(undefined data_1,undefined data_2,undefined4 length,undefined2 value_2)\n\n{\n  process_data_08004ea4_helper(&DAT_20000a88,data_1,data_2,1,length,value_2,DAT_20000008);\n  return;\n}\n\n",
            "current_name": "process_data_08004ea4",
            "entrypoint": "0x08004ea4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004ea4": "process_data_08004ea4",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "length",
                "param_4": "value_2",
                "process_data_08001ccc": "process_data_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ee8": {
            "additional_data": {
                "DAT_20000008": {
                    "1": "default_value",
                    "3": "constant_value"
                },
                "DAT_20000a88": {
                    "1": "ptr_data",
                    "2": "data_buffer"
                },
                "FUN_08004ee8": {
                    "1": "process_data_wrapper",
                    "21": "process_data",
                    "9": "process_and_return_data"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "input_data",
                    "8": "input_1",
                    "9": "data_1"
                },
                "param_2": {
                    "1": "metadata",
                    "2": "input_param_2",
                    "8": "input_2",
                    "9": "data_2"
                },
                "param_3": {
                    "1": "parameter",
                    "2": "value",
                    "3": "length",
                    "5": "count",
                    "7": "value_1"
                },
                "param_4": {
                    "1": "identifier",
                    "2": "value",
                    "8": "value_2"
                },
                "process_data_08001f6c": {
                    "1": "process_data_func",
                    "2": "process_data"
                },
                "return": {
                    "1": ""
                }
            },
            "called": [
                "FUN_08001f6c"
            ],
            "calling": [],
            "code": "\nvoid process_data_08004ee8(undefined data_1,undefined data_2,undefined4 value_1,undefined2 value_2)\n\n{\n  process_data_08004ee8(&DAT_20000a88,data_1,data_2,1,value_1,value_2,DAT_20000008);\n  return;\n}\n\n",
            "current_name": "process_data_08004ee8",
            "entrypoint": "0x08004ee8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004ee8": "process_data_08004ee8",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "value_1",
                "param_4": "value_2",
                "process_data_08001f6c": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004f2c": {
            "additional_data": {
                "FUN_08004f2c": {
                    "1": "get_and_return_data",
                    "14": "get_data",
                    "5": "get_data_from_binary",
                    "9": "retrieve_data"
                },
                "get_data_080015a0": {
                    "1": "get_data"
                },
                "uVar1": {
                    "1": "data_from_memory",
                    "24": "data",
                    "3": "result"
                }
            },
            "called": [
                "FUN_080015a0"
            ],
            "calling": [],
            "code": "\nundefined4 get_data_08004f2c(void)\n\n{\n  undefined4 data;\n  \n  data = fetch_data();\n  return data;\n}\n\n",
            "current_name": "get_data_08004f2c",
            "entrypoint": "0x08004f2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004f2c": "get_data_08004f2c",
                "get_data_080015a0": "fetch_data",
                "uVar1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "additional_data": {
                "0x32": {
                    "3": "buffer_size"
                },
                "DAT_20000adc": {
                    "1": "data"
                },
                "FUN_08004f3c": {
                    "1": "process_and_send_data",
                    "17": "process_data",
                    "2": "process_and_return",
                    "5": "process_and_return_data"
                },
                "param_1": {
                    "1": "param",
                    "2": "data_1",
                    "3": "data_param",
                    "6": "input_param",
                    "9": "data_ptr"
                },
                "param_2": {
                    "1": "data_value",
                    "2": "data_2",
                    "3": "value"
                },
                "process_data_08004436": {
                    "2": "process_data_helper",
                    "5": "process_data"
                }
            },
            "called": [
                "FUN_08004436"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nvoid process_data_08004f3c(undefined4 data_ptr,undefined2 length)\n\n{\n  process_data_08004f3c(&DAT_20000adc,data_ptr,length,0x32);\n  return;\n}\n\n",
            "current_name": "process_data_08004f3c",
            "entrypoint": "0x08004f3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004f3c": "process_data_08004f3c",
                "param_1": "data_ptr",
                "param_2": "length",
                "process_data_08004436": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004f60": {
            "additional_data": {
                "&DAT_20000ba8": {
                    "1": "memory_block"
                },
                "0x40": {
                    "1": "size"
                },
                "DAT_20000ba8": {
                    "12": "memory_block",
                    "2": "memory_address",
                    "3": "memory_buffer"
                },
                "FUN_08004f60": {
                    "1": "reset_memory",
                    "24": "initialize_memory",
                    "6": "clear_memory"
                },
                "ba8": {
                    "1": "destination"
                },
                "fill_memory_08005d68": {
                    "1": "clear_memory_region",
                    "26": "fill_memory"
                }
            },
            "called": [
                "FUN_08005d68"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nvoid initialize_memory_08004f60(void)\n\n{\n  fill_memory(&DAT_20000ba8,0,0x40);\n  return;\n}\n\n",
            "current_name": "initialize_memory_08004f60",
            "entrypoint": "0x08004f60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004f60": "initialize_memory_08004f60",
                "fill_memory_08005d68": "fill_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004f78": {
            "additional_data": {
                " calculate_result_08000c08": {
                    "1": "calculate_result"
                },
                "DAT_20000010": {
                    "1": "concatenated_value"
                },
                "DAT_20000014": {
                    "1": "float_value1"
                },
                "DAT_200009f4": {
                    "1": "float_value2"
                },
                "DAT_200009f8": {
                    "1": "float1"
                },
                "DAT_200009fc": {
                    "1": "previous_float"
                },
                "DAT_20000a00": {
                    "1": "floating_point1"
                },
                "DAT_20000a04": {
                    "1": "floating_point2"
                },
                "DAT_20000a08": {
                    "1": "xor_value"
                },
                "DAT_20000a5c": {
                    "1": "data1"
                },
                "DAT_20000b1c": {
                    "1": "memory_address1"
                },
                "DAT_20000b5c": {
                    "1": "float_result"
                },
                "DAT_20000ba0": {
                    "1": "data2"
                },
                "DAT_20000ba8": {
                    "1": "processed_data1"
                },
                "DAT_20000be8": {
                    "1": "float2"
                },
                "FUN_08004f78": {
                    "1": "calculate_shifted_value",
                    "15": "process_data",
                    "4": "initialize_and_process_data"
                },
                "calculate_float_08000aa4": {
                    "1": "calculate_float_value1",
                    "12": "calculate_float",
                    "4": "calculate_float1"
                },
                "calculate_float_08000aa8": {
                    "1": "calculate_float_value2",
                    "8": "calculate_float"
                },
                "calculate_floating_point_08000cb8": {
                    "1": "calculate_floating_point_value",
                    "16": "calculate_floating_point"
                },
                "calculate_result_08000c08": {
                    "11": "calculate_result",
                    "5": "calculate_result2"
                },
                "calculate_result_08004bd8": {
                    "1": "calculate_intermediate_result",
                    "16": "calculate_result"
                },
                "calculate_shifted_value_08001044": {
                    "17": "calculate_shifted_value"
                },
                "clear_memory_08005dfc": {
                    "17": "clear_memory"
                },
                "count_leading_zeros_08000c10": {
                    "1": "leading_zeros_count_function2",
                    "11": "count_leading_zeros",
                    "4": "count_leading_zeros2"
                },
                "count_leading_zeros_08005e40": {
                    "1": "leading_zeros_count_function",
                    "16": "count_leading_zeros"
                },
                "extract_leading_zeros_08004ae0": {
                    "17": "extract_leading_zeros"
                },
                "iVar2": {
                    "1": "is_successful1",
                    "3": "termination_check",
                    "9": "is_successful"
                },
                "initialize_memory_08004f60": {
                    "17": "initialize_memory"
                },
                "is_concatenation_successful_08001030": {
                    "1": "is_successful_concatenation",
                    "16": "is_concatenation_successful"
                },
                "is_null_terminated_08000ff4": {
                    "15": "is_null_terminated",
                    "2": "is_terminated"
                },
                "local_11": {
                    "1": "modified_byte",
                    "16": "shifted_value",
                    "3": "pitch"
                },
                "process_data_08004f3c": {
                    "17": "process_data"
                },
                "reverse_bits_08000418": {
                    "17": "reverse_bits"
                },
                "set_param_value_08001a80": {
                    "17": "set_param_value"
                },
                "uVar1": {
                    "1": "value1",
                    "2": "result",
                    "5": "leading_zeros",
                    "8": "leading_zeros_count"
                },
                "uVar3": {
                    "1": "value2",
                    "2": "leading_zeros_2",
                    "5": "leading_zeros2",
                    "6": "leading_zeros_count2"
                },
                "uVar4": {
                    "1": "modified_value",
                    "2": "masked_value",
                    "3": "xor_value",
                    "4": "flipped_value"
                },
                "uVar5": {
                    "1": "reverse_bits_result",
                    "12": "reversed_bits",
                    "2": "reversed_value",
                    "4": "reverse_bits"
                }
            },
            "called": [
                "FUN_08004bd8",
                "FUN_08005e40",
                "FUN_08000418",
                "FUN_08000ff4",
                "FUN_08001030",
                "FUN_08004ae0",
                "FUN_08000c10",
                "FUN_08000cb8",
                "FUN_08005dfc",
                "FUN_08001044",
                "FUN_08001a80",
                "FUN_08000c08",
                "FUN_08000aa8",
                "FUN_08004f60",
                "FUN_08000aa4",
                "FUN_08004f3c"
            ],
            "calling": [
                "FUN_080017b4",
                "FUN_080036f8"
            ],
            "code": "\nvoid process_data_08004f78(void)\n\n{\n  undefined4 leading_zeros_count;\n  int is_successful;\n  undefined4 leading_zeros_count2;\n  uint flipped_value;\n  undefined8 reversed_bits;\n  byte shifted_value;\n  \n  extract_leading_zeros(&DAT_20000a5c);\n  calculate_result(&DAT_20000a5c,&DAT_20000ba0);\n  initialize_memory();\n  reversed_bits = reverse_bits(DAT_20000ba0);\n  clear_memory(&DAT_20000ba8,\"Pitch: %f\\n\",(int)reversed_bits,(int)((ulonglong)reversed_bits >> 0x20));\n  leading_zeros_count = count_leading_zeros(&DAT_20000ba8);\n  process_data_08004f78(&DAT_20000ba8,leading_zeros_count);\n  DAT_200009f8 = calculate_float(DAT_20000014,DAT_20000ba0);\n  DAT_20000be8 = calculate_floating_point(DAT_20000a00,DAT_200009f8);\n  leading_zeros_count = calculate_floating_point(DAT_20000a04,DAT_200009f8);\n  DAT_20000b5c = calculate_float(leading_zeros_count,DAT_20000b5c);\n  leading_zeros_count = count_leading_zeros(DAT_20000010);\n  is_successful = is_null_terminated(leading_zeros_count,DAT_20000b5c);\n  if (is_successful == 0) {\n    leading_zeros_count = count_leading_zeros(DAT_200009f4);\n    is_successful = is_concatenation_successful(leading_zeros_count,DAT_20000b5c);\n    if (is_successful != 0) {\n      DAT_20000b5c = calculate_result(DAT_200009f4);\n    }\n  }\n  else {\n    DAT_20000b5c = calculate_result(DAT_20000010);\n  }\n  flipped_value = DAT_20000a08 ^ 0x80000000;\n  leading_zeros_count = calculate_float(DAT_200009f8,DAT_200009fc);\n  DAT_20000a58 = calculate_floating_point(flipped_value,leading_zeros_count);\n  leading_zeros_count = calculate_float(DAT_20000be8,DAT_20000b5c);\n  leading_zeros_count = calculate_float(leading_zeros_count,DAT_20000a58);\n  leading_zeros_count2 = count_leading_zeros(DAT_20000010);\n  is_successful = is_concatenation_successful(leading_zeros_count,leading_zeros_count2);\n  if (is_successful == 0) {\n    leading_zeros_count2 = count_leading_zeros(DAT_200009f4);\n    is_successful = is_null_terminated(leading_zeros_count,leading_zeros_count2);\n    if (is_successful == 0) {\n      shifted_value = calculate_shifted_value(leading_zeros_count);\n    }\n    else {\n      shifted_value = DAT_200009f4;\n    }\n  }\n  else {\n    shifted_value = DAT_20000010;\n  }\n  DAT_200009fc = DAT_200009f8;\n  is_successful = is_concatenation_successful(DAT_200009f8,0);\n  set_param_value(0x40010800,2,is_successful != 0);\n  is_successful = is_concatenation_successful(DAT_200009f8,0);\n  set_param_value(0x40010800,4,is_successful == 0);\n  is_successful = is_concatenation_successful(DAT_200009f8,0);\n  set_param_value(0x40010800,8,is_successful != 0);\n  is_successful = is_concatenation_successful(DAT_200009f8,0);\n  set_param_value(0x40010800,0x10,is_successful == 0);\n  *(uint *)(DAT_20000b1c + 0x34) = (uint)shifted_value;\n  *(uint *)(DAT_20000b1c + 0x40) = (uint)shifted_value;\n  return;\n}\n\n",
            "current_name": "process_data_08004f78",
            "entrypoint": "0x08004f78",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004f78": "process_data_08004f78",
                "calculate_float_08000aa4": "calculate_float",
                "calculate_float_08000aa8": "calculate_float",
                "calculate_floating_point_08000cb8": "calculate_floating_point",
                "calculate_result_08000c08": "calculate_result",
                "calculate_result_08004bd8": "calculate_result",
                "calculate_shifted_value_08001044": "calculate_shifted_value",
                "clear_memory_08005dfc": "clear_memory",
                "count_leading_zeros_08000c10": "count_leading_zeros",
                "count_leading_zeros_08005e40": "count_leading_zeros",
                "extract_leading_zeros_08004ae0": "extract_leading_zeros",
                "iVar2": "is_successful",
                "initialize_memory_08004f60": "initialize_memory",
                "is_concatenation_successful_08001030": "is_concatenation_successful",
                "is_null_terminated_08000ff4": "is_null_terminated",
                "local_11": "shifted_value",
                "process_data_08004f3c": "process_data",
                "reverse_bits_08000418": "reverse_bits",
                "set_param_value_08001a80": "set_param_value",
                "uVar1": "leading_zeros_count",
                "uVar3": "leading_zeros_count2",
                "uVar4": "flipped_value",
                "uVar5": "reversed_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005224": {
            "additional_data": {
                "FUN_08005224": {
                    "1": "initialize_system_and_data",
                    "26": "initialize_system"
                },
                "handle_interrupt_08004e74": {
                    "31": "handle_interrupt"
                },
                "initialize_data_0800491c": {
                    "1": "init_data",
                    "30": "initialize_data"
                },
                "initialize_data_structure_08005598": {
                    "1": "init_data_structure",
                    "28": "initialize_data_structure"
                },
                "initialize_flags_and_values_080055f4": {
                    "1": "init_flags",
                    "26": "initialize_flags_and_values"
                },
                "initialize_memory_08005500": {
                    "1": "initialize_step6",
                    "29": "initialize_memory"
                },
                "initialize_parameters_08005348": {
                    "1": "init_parameters",
                    "28": "initialize_parameters"
                },
                "initialize_program_080053b0": {
                    "1": "init_program_params",
                    "29": "initialize_program"
                },
                "initialize_system_080014f0": {
                    "1": "initialize_step1",
                    "2": "initialize_main_system",
                    "3": "initialize_system",
                    "5": "initialize_system_1"
                },
                "initialize_system_080052a0": {
                    "1": "initialize_data_system",
                    "2": "initialize_additional_system",
                    "5": "initialize_system_2"
                },
                "set_flags_0800360c": {
                    "31": "set_flags"
                },
                "update_and_set_flags_080036a8": {
                    "31": "update_and_set_flags"
                }
            },
            "called": [
                "FUN_080053b0",
                "FUN_0800360c",
                "FUN_080014f0",
                "FUN_08005500",
                "FUN_08005598",
                "FUN_080052a0",
                "FUN_0800491c",
                "FUN_080036a8",
                "FUN_08005348",
                "FUN_080055f4",
                "FUN_08004e74"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nvoid initialize_system_08005224(void)\n\n{\n  initialize_system_08005224_1();\n  initialize_system_08005224_2();\n  initialize_flags_and_values();\n  initialize_parameters();\n  initialize_data_structure();\n  initialize_memory();\n  initialize_program();\n  DAT_20000a54 = 0x8004ea5;\n  DAT_20000a4c = 0x8004ee9;\n  DAT_20000a50 = 0x8004f2d;\n  update_and_set_flags(&DAT_20000b1c,0);\n  update_and_set_flags(&DAT_20000b1c,0xc);\n  initialize_data(&DAT_20000a5c);\n  set_flags(&DAT_20000b60);\n  handle_interrupt(0);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "initialize_system_08005224",
            "entrypoint": "0x08005224",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005224": "initialize_system_08005224",
                "handle_interrupt_08004e74": "handle_interrupt",
                "initialize_data_0800491c": "initialize_data",
                "initialize_data_structure_08005598": "initialize_data_structure",
                "initialize_flags_and_values_080055f4": "initialize_flags_and_values",
                "initialize_memory_08005500": "initialize_memory",
                "initialize_parameters_08005348": "initialize_parameters",
                "initialize_program_080053b0": "initialize_program",
                "initialize_system_080014f0": "initialize_system_1",
                "initialize_system_080052a0": "initialize_system_2",
                "set_flags_0800360c": "set_flags",
                "update_and_set_flags_080036a8": "update_and_set_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080052a0": {
            "additional_data": {
                "(int)((ulonglong)uVar2 >> 0x20)": {
                    "1": "data_shifted"
                },
                "(uint)uVar2 * 0x10624dd3": {
                    "1": "data_multiplied"
                },
                "FUN_080052a0": {
                    "1": "initialize_memory_and_settings",
                    "12": "initialize_program",
                    "2": "initialize_memory"
                },
                "calculate_execution_time_08003260": {
                    "7": "calculate_execution_time"
                },
                "get_data_08003504": {
                    "1": "retrieve_data",
                    "2": "fetch_data",
                    "4": "get_data"
                },
                "iVar1": {
                    "2": "result1",
                    "21": "result"
                },
                "infinite_loop_08005674": {
                    "1": "handle_infinite_loop_error",
                    "2": "handle_error"
                },
                "initialize_memory_08001762": {
                    "12": "initialize_memory"
                },
                "local_10": {
                    "1": "flag_7",
                    "2": "memory_size",
                    "3": "constant4",
                    "5": "constant2"
                },
                "local_14": {
                    "1": "temp4",
                    "2": "loop_limit",
                    "3": "constant3"
                },
                "local_20": {
                    "1": "variable2",
                    "2": "execution_time",
                    "3": "flag4"
                },
                "local_28": {
                    "1": "constant2",
                    "2": "value2",
                    "3": "flag3"
                },
                "local_2c": {
                    "1": "memory_limit",
                    "2": "flag_value",
                    "5": "flag2",
                    "7": "constant1"
                },
                "local_30": {
                    "1": "is_valid_flag",
                    "2": "flag_1",
                    "4": "flag",
                    "9": "flag1"
                },
                "local_34": {
                    "1": "parameter5",
                    "2": "temp1"
                },
                "local_38": {
                    "1": "write_flag",
                    "2": "value4"
                },
                "local_3c": {
                    "1": "execution_result",
                    "2": "value",
                    "4": "value3"
                },
                "local_40": {
                    "1": "execution_time_param",
                    "2": "flag2",
                    "4": "value2"
                },
                "local_44": {
                    "1": "parameter1",
                    "2": "execution_flags",
                    "3": "flags",
                    "4": "value1"
                },
                "local_c": {
                    "1": "flag_8",
                    "2": "flag7",
                    "3": "memory_size",
                    "5": "constant3"
                },
                "new_parameter_name": {
                    "1": "data_parameter"
                },
                "new_parameter_name_1": {
                    "1": "flag_value1"
                },
                "new_parameter_name_2": {
                    "1": "flag_value2"
                },
                "new_variable_name_1": {
                    "1": "result1"
                },
                "new_variable_name_2": {
                    "1": "data_value"
                },
                "process_flags_08002d98": {
                    "1": "check_flag_status",
                    "2": "check_flags"
                },
                "set_flag_0800177c": {
                    "1": "set_system_flag",
                    "8": "set_flag"
                },
                "uVar2": {
                    "14": "data",
                    "5": "data_value"
                },
                "uint uVar2 / 1000": {
                    "1": "data_divided"
                },
                "write_byte_to_memory_0800172a": {
                    "1": "write_to_memory",
                    "11": "write_byte_to_memory"
                }
            },
            "called": [
                "FUN_08003504",
                "FUN_0800172a",
                "FUN_08005674",
                "FUN_08002d98",
                "FUN_08003260",
                "FUN_08001762",
                "FUN_0800177c"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_system_080052a0(void)\n\n{\n  int result;\n  undefined8 data;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 count;\n  undefined4 index;\n  undefined4 flag1;\n  undefined4 constant1;\n  undefined4 flag3;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant2;\n  undefined4 constant3;\n  \n  flag1 = 1;\n  constant1 = 0x10000;\n  flag3 = 0;\n  constant2 = 1;\n  constant3 = 2;\n  constant2 = 0x10000;\n  constant3 = 0x1c0000;\n  result = check_flags(&flag1);\n  if (result != 0) {\n    trigger_infinite_loop(\"../src/main.c\",0x151);\n  }\n  value1 = 0xf;\n  value2 = 2;\n  value3 = 0x80;\n  count = 0;\n  index = 0;\n  result = calculate_execution_time(&value1,2);\n  if (result != 0) {\n    trigger_infinite_loop(\"../src/main.c\",0x15e);\n  }\n  data = get_data();\n  initialize_memory((uint)data / 1000,(int)((ulonglong)data >> 0x20),(uint)data * 0x10624dd3);\n  set_flag(4);\n  write_byte_to_memory(0xffffffff,0,0);\n  return;\n}\n\n",
            "current_name": "initialize_system_080052a0",
            "entrypoint": "0x080052a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080052a0": "initialize_system_080052a0",
                "calculate_execution_time_08003260": "calculate_execution_time",
                "get_data_08003504": "get_data",
                "iVar1": "result",
                "infinite_loop_08005674": "trigger_infinite_loop",
                "initialize_memory_08001762": "initialize_memory",
                "local_10": "constant2",
                "local_14": "constant3",
                "local_20": "constant2",
                "local_28": "flag3",
                "local_2c": "constant1",
                "local_30": "flag1",
                "local_34": "index",
                "local_38": "count",
                "local_3c": "value3",
                "local_40": "value2",
                "local_44": "value1",
                "local_c": "constant3",
                "process_flags_08002d98": "check_flags",
                "set_flag_0800177c": "set_flag",
                "uVar2": "data",
                "write_byte_to_memory_0800172a": "write_byte_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005348": {
            "additional_data": {
                "../src/main.c": {
                    "2": "source_file"
                },
                "0x17a": {
                    "1": "line_number"
                },
                "DAT_20000a88": {
                    "1": "base_address"
                },
                "DAT_20000a8c": {
                    "1": "start_offset"
                },
                "DAT_20000a90": {
                    "1": "parameter1"
                },
                "DAT_20000a94": {
                    "1": "parameter2"
                },
                "DAT_20000a98": {
                    "1": "parameter3"
                },
                "DAT_20000a9c": {
                    "1": "parameter4"
                },
                "DAT_20000aa0": {
                    "1": "parameter5"
                },
                "DAT_20000aa4": {
                    "1": "parameter6"
                },
                "DAT_20000aa8": {
                    "1": "parameter7"
                },
                "FUN_08005348": {
                    "1": "initialize_data_fields",
                    "11": "initialize_parameters",
                    "2": "initialize_function",
                    "7": "initialize_variables",
                    "8": "initialize_data"
                },
                "FUn_08005348": {
                    "1": "initialize_function"
                },
                "PTR_20000a88": {
                    "1": "parameter_array"
                },
                "PTR_20000a8c": {
                    "1": "parameter2"
                },
                "PTR_20000a90": {
                    "1": "parameter3"
                },
                "PTR_20000a94": {
                    "1": "parameter4"
                },
                "PTR_20000a98": {
                    "1": "parameter5"
                },
                "PTR_20000a9c": {
                    "1": "parameter6"
                },
                "PTR_20000aa0": {
                    "1": "parameter7"
                },
                "PTR_20000aa4": {
                    "1": "parameter8"
                },
                "PTR_20000aa8": {
                    "1": "parameter9"
                },
                "calculateParameters": {
                    "1": "calculate_parameters"
                },
                "calculate_parameters_08001ab0": {
                    "28": "calculate_parameters"
                },
                "iVar1": {
                    "1": "parameter_result",
                    "18": "result"
                },
                "infinite_loop_08005674": {
                    "1": "trigger_error",
                    "10": "infinite_loop",
                    "4": "handle_error"
                },
                "original_variable_name_1": {
                    "1": "new_variable_name_1"
                },
                "original_variable_name_2": {
                    "1": "new_variable_name_2"
                }
            },
            "called": [
                "FUN_08001ab0",
                "FUN_08005674"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_parameters_08005348(void)\n\n{\n  int result;\n  \n  DAT_20000a88 = 0x40005400;\n  DAT_20000a8c = 400000;\n  DAT_20000a90 = 0;\n  DAT_20000a94 = 0;\n  DAT_20000a98 = 0x4000;\n  DAT_20000a9c = 0;\n  DAT_20000aa0 = 0;\n  DAT_20000aa4 = 0;\n  DAT_20000aa8 = 0;\n  result = calculate_parameters(&DAT_20000a88);\n  if (result != 0) {\n    infinite_loop(\"../src/main.c\",0x17a);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_parameters_08005348",
            "entrypoint": "0x08005348",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005348": "initialize_parameters_08005348",
                "calculate_parameters_08001ab0": "calculate_parameters",
                "iVar1": "result",
                "infinite_loop_08005674": "infinite_loop"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080053b0": {
            "additional_data": {
                "DAT_20000b1c": {
                    "1": "memory_data1",
                    "2": "memory_address"
                },
                "DAT_20000b20": {
                    "1": "memory_offset"
                },
                "DAT_20000b24": {
                    "1": "constant2"
                },
                "DAT_20000b28": {
                    "1": "constant3"
                },
                "DAT_20000b2c": {
                    "1": "memory_data5"
                },
                "DAT_20000b30": {
                    "1": "constant5"
                },
                "DAT_20000b34": {
                    "1": "constant6"
                },
                "FUN_080053b0": {
                    "1": "initialize_simulation",
                    "10": "initialize_program",
                    "2": "initialize_function",
                    "8": "initialize_system"
                },
                "check_and_update_memory_080035a4": {
                    "4": "check_and_update_memory"
                },
                "check_and_update_memory_08003640": {
                    "2": "check_and_update_memory"
                },
                "iVar1": {
                    "1": "return_value",
                    "5": "result"
                },
                "infinite_loop_08005674": {
                    "1": "trigger_infinite_loop",
                    "3": "infinite_loop"
                },
                "local_18": {
                    "1": "memory_check_result",
                    "10": "parameters",
                    "3": "parameters_array",
                    "5": "memory_size"
                },
                "local_1c": {
                    "1": "return_flag",
                    "2": "parameter16",
                    "7": "flag2"
                },
                "local_20": {
                    "1": "flag_value",
                    "2": "flags_value1",
                    "3": "flags",
                    "7": "flag1"
                },
                "local_24": {
                    "1": "user_input12",
                    "2": "data_value6",
                    "3": "data6"
                },
                "local_28": {
                    "1": "parameter_13",
                    "2": "data_value5",
                    "3": "data5"
                },
                "local_2c": {
                    "1": "data_flag4",
                    "2": "data_value4",
                    "3": "data4"
                },
                "local_30": {
                    "1": "variable8",
                    "2": "data_value3",
                    "3": "parameter11"
                },
                "local_34": {
                    "1": "value7",
                    "2": "flag2",
                    "3": "parameter10"
                },
                "local_38": {
                    "1": "value6",
                    "2": "flag1",
                    "3": "data1"
                },
                "local_38, local_34, local_30, local_2c, local_28, local_24": {
                    "1": "data"
                },
                "local_3c": {
                    "1": "data_var1",
                    "11": "data_size",
                    "2": "buffer_size",
                    "3": "parameter8"
                },
                "local_40": {
                    "1": "user_input6",
                    "2": "config_7",
                    "3": "parameter7"
                },
                "local_44": {
                    "1": "config5",
                    "2": "data_value1",
                    "3": "parameter6"
                },
                "local_48": {
                    "1": "error_code5",
                    "2": "config5",
                    "3": "parameter5",
                    "5": "config_value5"
                },
                "local_4c": {
                    "1": "parameter_4",
                    "2": "config4",
                    "3": "parameter4",
                    "5": "config_value4"
                },
                "local_50": {
                    "1": "config_var3",
                    "2": "config_param3",
                    "3": "parameter3",
                    "5": "config_value3"
                },
                "local_54": {
                    "1": "parameter_2",
                    "2": "config2",
                    "3": "parameter2",
                    "5": "config_value2"
                },
                "local_58": {
                    "1": "flags_value1",
                    "2": "config_param1",
                    "3": "parameter1",
                    "4": "config1",
                    "5": "config_value1"
                },
                "update_config_0800422e": {
                    "4": "update_config"
                },
                "update_data_08003908": {
                    "4": "update_data"
                },
                "update_flags_and_return_080042de": {
                    "4": "update_flags_and_return"
                },
                "update_flags_and_values_08005680": {
                    "4": "update_flags_and_values"
                },
                "update_parameters_08003a94": {
                    "4": "update_parameters"
                }
            },
            "called": [
                "FUN_08003a94",
                "FUN_08003908",
                "FUN_0800422e",
                "FUN_08003640",
                "FUN_080035a4",
                "FUN_08005674",
                "FUN_08005680",
                "FUN_080042de"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_program_080053b0(void)\n\n{\n  int result;\n  undefined4 config_value1;\n  undefined4 config_value2;\n  undefined4 config_value3;\n  undefined4 config_value4;\n  undefined4 config_value5;\n  undefined4 parameter6;\n  undefined4 parameter7;\n  undefined4 data_size;\n  undefined4 parameter9;\n  undefined4 parameter10;\n  undefined4 parameter11;\n  undefined4 parameter12;\n  undefined4 parameter13;\n  undefined4 parameter14;\n  undefined4 flag1;\n  undefined4 flag2;\n  undefined4 parameters [4];\n  \n  DAT_20000b1c = 0x40012c00;\n  DAT_20000b20 = 0x708;\n  DAT_20000b24 = 0;\n  DAT_20000b28 = 100;\n  DAT_20000b2c = 0;\n  DAT_20000b30 = 0;\n  DAT_20000b34 = 0;\n  result = check_and_update_memory(&DAT_20000b1c);\n  if (result != 0) {\n    infinite_loop(\"../src/main.c\",399);\n  }\n  parameters[0] = 0x1000;\n  result = update_parameters(&DAT_20000b1c,parameters);\n  if (result != 0) {\n    infinite_loop(\"../src/main.c\",0x194);\n  }\n  result = check_and_update_memory(&DAT_20000b1c);\n  if (result != 0) {\n    infinite_loop(\"../src/main.c\",0x198);\n  }\n  flag1 = 0;\n  flag2 = 0;\n  result = update_flags_and_return(&DAT_20000b1c,&flag1);\n  if (result != 0) {\n    infinite_loop(\"../src/main.c\",0x19f);\n  }\n  data_size = 0x60;\n  parameter9 = 0;\n  parameter10 = 0;\n  parameter11 = 0;\n  parameter12 = 0;\n  parameter13 = 0;\n  parameter14 = 0;\n  result = update_data(&DAT_20000b1c,&data_size,0);\n  if (result != 0) {\n    infinite_loop(\"../src/main.c\",0x1ab);\n  }\n  result = update_data(&DAT_20000b1c,&data_size,0xc);\n  if (result != 0) {\n    infinite_loop(\"../src/main.c\",0x1b0);\n  }\n  config_value1 = 0;\n  config_value2 = 0;\n  config_value3 = 0;\n  config_value4 = 0;\n  config_value5 = 0;\n  parameter6 = 0x2000;\n  parameter7 = 0;\n  result = update_config(&DAT_20000b1c,&config_value1);\n  if (result != 0) {\n    infinite_loop(\"../src/main.c\",0x1bc);\n  }\n  update_flags_and_values(&DAT_20000b1c);\n  return;\n}\n\n",
            "current_name": "initialize_program_080053b0",
            "entrypoint": "0x080053b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080053b0": "initialize_program_080053b0",
                "check_and_update_memory_080035a4": "check_and_update_memory",
                "check_and_update_memory_08003640": "check_and_update_memory",
                "iVar1": "result",
                "infinite_loop_08005674": "infinite_loop",
                "local_18": "parameters",
                "local_1c": "flag2",
                "local_20": "flag1",
                "local_24": "parameter14",
                "local_28": "parameter13",
                "local_2c": "parameter12",
                "local_30": "parameter11",
                "local_34": "parameter10",
                "local_38": "parameter9",
                "local_3c": "data_size",
                "local_40": "parameter7",
                "local_44": "parameter6",
                "local_48": "config_value5",
                "local_4c": "config_value4",
                "local_50": "config_value3",
                "local_54": "config_value2",
                "local_58": "config_value1",
                "update_config_0800422e": "update_config",
                "update_data_08003908": "update_data",
                "update_flags_and_return_080042de": "update_flags_and_return",
                "update_flags_and_values_08005680": "update_flags_and_values",
                "update_parameters_08003a94": "update_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005500": {
            "additional_data": {
                "../src/main.c": {
                    "1": "main_source_file"
                },
                "0x1d0": {
                    "1": "line_number1"
                },
                "0x1d5": {
                    "1": "line_number2"
                },
                "0x1dc": {
                    "1": "line_number3"
                },
                "DAT_20000b60": {
                    "1": "memory_size",
                    "2": "memory_address"
                },
                "DAT_20000b64": {
                    "1": "limit",
                    "2": "memory_size"
                },
                "DAT_20000b68": {
                    "1": "flag1"
                },
                "DAT_20000b6c": {
                    "1": "value2"
                },
                "DAT_20000b70": {
                    "1": "flag3"
                },
                "DAT_20000b78": {
                    "1": "variable4"
                },
                "FUN_08005500": {
                    "1": "initialize_game",
                    "2": "initialize_memory_and_flags",
                    "22": "initialize_memory"
                },
                "check_and_update_memory_080035a4": {
                    "6": "check_and_update_memory"
                },
                "iVar1": {
                    "1": "return_value",
                    "19": "result"
                },
                "infinite_loop_08005674": {
                    "3": "infinite_loop"
                },
                "local_18": {
                    "1": "param_array",
                    "12": "parameters",
                    "2": "memory_settings",
                    "5": "memory_size"
                },
                "local_18[4]": {
                    "1": "parameters",
                    "2": "memory_parameters"
                },
                "local_1c": {
                    "1": "flags",
                    "2": "page_number",
                    "3": "flag_value",
                    "7": "flag2"
                },
                "local_20": {
                    "1": "flags_size",
                    "2": "flag_a",
                    "3": "flags",
                    "6": "flag_value",
                    "7": "flag1"
                },
                "update_flags_and_return_080042de": {
                    "6": "update_flags_and_return"
                },
                "update_parameters_08003a94": {
                    "6": "update_parameters"
                }
            },
            "called": [
                "FUN_08003a94",
                "FUN_080035a4",
                "FUN_08005674",
                "FUN_080042de"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_memory_08005500(void)\n\n{\n  int result;\n  undefined4 flag1;\n  undefined4 flag2;\n  undefined4 parameters [4];\n  \n  DAT_20000b60 = 0x40000000;\n  DAT_20000b64 = 36000;\n  DAT_20000b68 = 0;\n  DAT_20000b6c = 0x14;\n  DAT_20000b70 = 0;\n  DAT_20000b78 = 0;\n  result = check_and_update_memory(&DAT_20000b60);\n  if (result != 0) {\n    infinite_loop(\"../src/main.c\",0x1d0);\n  }\n  parameters[0] = 0x1000;\n  result = update_parameters(&DAT_20000b60,parameters);\n  if (result != 0) {\n    infinite_loop(\"../src/main.c\",0x1d5);\n  }\n  flag1 = 0x20;\n  flag2 = 0;\n  result = update_flags_and_return(&DAT_20000b60,&flag1);\n  if (result != 0) {\n    infinite_loop(\"../src/main.c\",0x1dc);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_memory_08005500",
            "entrypoint": "0x08005500",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005500": "initialize_memory_08005500",
                "check_and_update_memory_080035a4": "check_and_update_memory",
                "iVar1": "result",
                "infinite_loop_08005674": "infinite_loop",
                "local_18": "parameters",
                "local_1c": "flag2",
                "local_20": "flag1",
                "update_flags_and_return_080042de": "update_flags_and_return",
                "update_parameters_08003a94": "update_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005598": {
            "additional_data": {
                "DAT_20000adc": {
                    "1": "data_structure_ptr"
                },
                "DAT_20000ae0": {
                    "1": "value_1"
                },
                "DAT_20000aec": {
                    "1": "value_2"
                },
                "DAT_20000af0": {
                    "1": "value_3"
                },
                "FUN_08005598": {
                    "1": "initialize_and_validate_data",
                    "19": "initialize_data_structure",
                    "9": "initialize_data"
                },
                "iVar1": {
                    "1": "status",
                    "18": "result",
                    "8": "error_code"
                },
                "infinite_loop_08005674": {
                    "1": "handle_infinite_loop",
                    "2": "handle_error"
                },
                "initialize_data_structure_0800438a": {
                    "7": "initialize_data_structure"
                }
            },
            "called": [
                "FUN_0800438a",
                "FUN_08005674"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_data_structure_08005598(void)\n\n{\n  int result;\n  \n  DAT_20000adc = 0x40013800;\n  DAT_20000ae0 = 0x1c200;\n  DAT_20000ae4 = 0;\n  DAT_20000ae8 = 0;\n  DAT_20000aec = 0;\n  DAT_20000af0 = 0xc;\n  DAT_20000af4 = 0;\n  DAT_20000af8 = 0;\n  result = initialize_data_structure_08005598(&DAT_20000adc);\n  if (result != 0) {\n    handle_error(\"../src/main.c\",0x1ed);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_08005598",
            "entrypoint": "0x08005598",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005598": "initialize_data_structure_08005598",
                "iVar1": "result",
                "infinite_loop_08005674": "handle_error",
                "initialize_data_structure_0800438a": "initialize_data_structure"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080055f4": {
            "additional_data": {
                "FUN_080055f4": {
                    "1": "update_flags_and_values",
                    "2": "set_and_update_param_values",
                    "3": "set_and_update_flags",
                    "8": "initialize_flags_and_values"
                },
                "_DAT_40021018": {
                    "1": "data_value",
                    "2": "flags"
                },
                "local_14": {
                    "1": "parameter",
                    "2": "flag1",
                    "3": "param2",
                    "5": "param_flag",
                    "9": "flag_value"
                },
                "local_18": {
                    "1": "parameter_value",
                    "22": "param_value",
                    "3": "param1"
                },
                "local_c": {
                    "1": "param_value3",
                    "2": "constant",
                    "3": "constant_value"
                },
                "set_param_value_08001a80": {
                    "2": "set_parameter_value",
                    "8": "set_param_value"
                },
                "update_flags_and_values_080017c4": {
                    "1": "update_device_flags_and_values",
                    "8": "update_flags_and_values"
                }
            },
            "called": [
                "FUN_08001a80",
                "FUN_080017c4"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\n\n\nvoid initialize_flags_and_values_080055f4(void)\n\n{\n  undefined4 param_value;\n  undefined4 flag_value;\n  undefined4 constant_value;\n  \n  _DAT_40021018 = _DAT_40021018 | 0x2c;\n  set_param_value(0x40010800,0x1e,0,_DAT_40021018 & 8);\n  param_value = 0x1e;\n  flag_value = 1;\n  constant_value = 2;\n  update_flags_and_values(0x40010800,&param_value);\n  return;\n}\n\n",
            "current_name": "initialize_flags_and_values_080055f4",
            "entrypoint": "0x080055f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080055f4": "initialize_flags_and_values_080055f4",
                "local_14": "flag_value",
                "local_18": "param_value",
                "local_c": "constant_value",
                "set_param_value_08001a80": "set_param_value",
                "update_flags_and_values_080017c4": "update_flags_and_values"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005674": {
            "additional_data": {
                "": {
                    "2": ""
                },
                "<original_variable_name>": {
                    "1": "infinite_loop_counter",
                    "2": "<new_variable_name>"
                },
                "<original_variable_name_1>": {
                    "1": "unused_var1"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "DAT_100": {
                    "1": "data100"
                },
                "FUN_08005674": {
                    "2": "endless_loop",
                    "24": "infinite_loop",
                    "3": "run_infinite_loop"
                },
                "PTR_001": {
                    "1": "pointer1"
                },
                "PTR_002": {
                    "1": "pointer2"
                },
                "PTR_LONG_003": {
                    "1": "long_pointer"
                },
                "do": {
                    "1": "while",
                    "3": "do"
                },
                "do {} while(true)": {
                    "1": "endless_loop"
                },
                "original_function_name": {
                    "1": "new_function_name"
                },
                "original_parameter_name_1": {
                    "1": "new_parameter"
                },
                "original_parameter_name_2": {
                    "1": "new_parameter_name_2"
                },
                "original_variable_name_1": {
                    "1": "condition_met"
                },
                "original_variable_name_2": {
                    "1": "new_variable_name_2"
                },
                "true": {
                    "4": "true"
                }
            },
            "called": [],
            "calling": [
                "FUN_080053b0",
                "FUN_08005500",
                "FUN_080052a0",
                "FUN_08005598",
                "FUN_08005348"
            ],
            "code": "\nvoid infinite_loop_08005674(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "infinite_loop_08005674",
            "entrypoint": "0x08005674",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005674": "infinite_loop_08005674"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005680": {
            "additional_data": {
                "FUN_08005680": {
                    "1": "update_values",
                    "3": "update_flags",
                    "4": "update_values_if_condition_met",
                    "5": "update_flags_and_values"
                },
                "local_14": {
                    "1": "count_value",
                    "2": "counter_value",
                    "3": "value2",
                    "4": "counter",
                    "5": "value_2"
                },
                "local_18": {
                    "1": "flag_value1",
                    "2": "new_value",
                    "3": "value1",
                    "5": "flag_value"
                },
                "local_c": {
                    "1": "flag_value",
                    "3": "flag2",
                    "5": "value_3"
                },
                "param_1": {
                    "1": "input_values",
                    "2": "input",
                    "3": "input_ptr"
                },
                "update_flags_and_values_080017c4": {
                    "1": "update_flags_and_values"
                }
            },
            "called": [
                "FUN_080017c4"
            ],
            "calling": [
                "FUN_080053b0"
            ],
            "code": "\nvoid update_flags_and_values_08005680(int *input_data)\n\n{\n  undefined4 flag_value;\n  undefined4 value_2;\n  undefined4 value_3;\n  \n  if (*input_data == 0x40012c00) {\n    flag_value = 0x900;\n    value_2 = 2;\n    value_3 = 2;\n    update_flags_and_values_08005680(0x40010800,&flag_value);\n  }\n  return;\n}\n\n",
            "current_name": "update_flags_and_values_08005680",
            "entrypoint": "0x08005680",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005680": "update_flags_and_values_08005680",
                "local_14": "value_2",
                "local_18": "flag_value",
                "local_c": "value_3",
                "param_1": "input_data",
                "update_flags_and_values_080017c4": "update_flags_and_values"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005704": {
            "additional_data": {
                "FUN_08005704": {
                    "1": "execute_data_processing",
                    "2": "initialize_and_process_data",
                    "22": "update_and_process_data",
                    "3": "process_and_update_data"
                },
                "process_data_080017b4": {
                    "31": "process_data"
                },
                "update_data_0800157c": {
                    "31": "update_data"
                }
            },
            "called": [
                "FUN_080017b4",
                "FUN_0800157c"
            ],
            "calling": [],
            "code": "\nvoid update_and_process_data_08005704(void)\n\n{\n  update_data();\n  process_data();\n  return;\n}\n\n",
            "current_name": "update_and_process_data_08005704",
            "entrypoint": "0x08005704",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005704": "update_and_process_data_08005704",
                "process_data_080017b4": "process_data",
                "update_data_0800157c": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005714": {
            "additional_data": {
                "DAT_20000b60": {
                    "1": "<unchanged>",
                    "10": "data",
                    "2": "data_buffer"
                },
                "FUN_08005714": {
                    "1": "process_data_function",
                    "13": "initialize_data_processing",
                    "16": "process_data"
                },
                "b60": {
                    "1": "data"
                },
                "process_data_080036f8": {
                    "1": "process_data_impl",
                    "16": "process_data",
                    "5": "process_data_helper"
                },
                "return": {
                    "1": "return"
                },
                "void": {
                    "1": "void"
                }
            },
            "called": [
                "FUN_080036f8"
            ],
            "calling": [],
            "code": "\nvoid process_data_08005714(void)\n\n{\n  process_data_08005714(&DAT_20000b60);\n  return;\n}\n\n",
            "current_name": "process_data_08005714",
            "entrypoint": "0x08005714",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005714": "process_data_08005714",
                "process_data_080036f8": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005728": {
            "additional_data": {
                "FUN_08005728": {
                    "1": "store_data_and_update_pointer",
                    "12": "update_data",
                    "14": "allocate_memory"
                },
                "auStack_18": {
                    "1": "stack_data",
                    "15": "stack_buffer",
                    "2": "stack_array",
                    "4": "buffer"
                },
                "local_14": {
                    "1": "temp_length",
                    "18": "remaining_size",
                    "4": "local_size"
                },
                "local_c": {
                    "1": "current_location",
                    "2": "current_pointer",
                    "3": "current_data_ptr",
                    "7": "current_ptr"
                },
                "param_1": {
                    "1": "block_size",
                    "17": "size",
                    "2": "num_bytes",
                    "8": "data_size"
                },
                "puVar1": {
                    "1": "value_ptr",
                    "14": "data_ptr",
                    "3": "data_pointer",
                    "5": "data_value_ptr",
                    "6": "data_value"
                },
                "puVar2": {
                    "1": "pointer",
                    "11": "return_value",
                    "14": "result",
                    "5": "result_ptr"
                }
            },
            "called": [
                "FUN_08005d14"
            ],
            "calling": [
                "FUN_08009744"
            ],
            "code": "\nundefined * allocate_memory_08005728(int size)\n\n{\n  undefined4 *data_ptr;\n  undefined *result;\n  undefined stack_buffer [4];\n  int remaining_size;\n  undefined *current_ptr;\n  \n  if (DAT_20000a10 == (undefined *)0x0) {\n    DAT_20000a10 = &DAT_20000c18;\n  }\n  current_ptr = DAT_20000a10;\n  if (stack_buffer < DAT_20000a10 + size) {\n    remaining_size = size;\n    data_ptr = (undefined4 *)get_data_value_08005d14();\n    *data_ptr = 0xc;\n    result = (undefined *)0xffffffff;\n  }\n  else {\n    result = DAT_20000a10;\n    DAT_20000a10 = DAT_20000a10 + size;\n  }\n  return result;\n}\n\n",
            "current_name": "allocate_memory_08005728",
            "entrypoint": "0x08005728",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005728": "allocate_memory_08005728",
                "auStack_18": "stack_buffer",
                "local_14": "remaining_size",
                "local_c": "current_ptr",
                "param_1": "size",
                "puVar1": "data_ptr",
                "puVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005780": {
            "additional_data": {
                "FUN_08005780": {
                    "1": "configure_memory_controller",
                    "12": "initialize_registers",
                    "2": "initialize_peripheral",
                    "6": "initialize_memory"
                },
                "_DAT_40021000": {
                    "1": "status_register",
                    "2": "control_register1",
                    "9": "register1"
                },
                "_DAT_40021004": {
                    "1": "status_register",
                    "2": "control_register2",
                    "9": "register2"
                },
                "_DAT_40021008": {
                    "1": "memory_address",
                    "2": "register_c",
                    "9": "register3"
                },
                "_DAT_e000ed08": {
                    "1": "exception_vector_table_register",
                    "2": "interrupt_priority_register",
                    "3": "interrupt_control_register",
                    "9": "register4"
                },
                "original_variable_name_1": {
                    "1": "control_register_value"
                },
                "original_variable_name_2": {
                    "1": "data_register_value"
                }
            },
            "called": [],
            "calling": [
                "entry"
            ],
            "code": "\n\n\nvoid initialize_registers_08005780(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "current_name": "initialize_registers_08005780",
            "entrypoint": "0x08005780",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005780": "initialize_registers_08005780"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005838": {
            "additional_data": {
                "FUNC_08005d0c": {
                    "1": "function2"
                },
                "FUN_08005838": {
                    "1": "calculate_floating_point",
                    "21": "calculate_result",
                    "3": "calculate_float",
                    "5": "calculate_float_value"
                },
                "calculate_0800015c": {
                    "1": "calculate_result1",
                    "2": "calculate"
                },
                "calculate_floating_point_0800071c": {
                    "1": "calculate_function3",
                    "3": "calculate_floating_point"
                },
                "calculate_result_08000158": {
                    "1": "calculate_case3",
                    "2": "calculate_result2"
                },
                "calculate_result_080059f0": {
                    "1": "calculate_result",
                    "2": "calculate_result2"
                },
                "iVar1": {
                    "1": "temp_var1",
                    "17": "difference",
                    "2": "temp_var",
                    "3": "temp_1"
                },
                "param_1": {
                    "1": "input_param_1",
                    "13": "input1",
                    "2": "input_param1",
                    "8": "input_1"
                },
                "param_2": {
                    "1": "value2",
                    "13": "input2",
                    "2": "input_value_2",
                    "8": "input_2"
                },
                "param_3": {
                    "1": "num3",
                    "13": "input3",
                    "2": "input_value_3",
                    "8": "input_3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "13": "input4",
                    "2": "input_value_4",
                    "8": "input_4"
                },
                "uVar1": {
                    "1": "temp1"
                },
                "uVar2": {
                    "1": "result_32bit",
                    "2": "result",
                    "3": "result_1",
                    "7": "result_high"
                },
                "uVar3": {
                    "1": "result_2",
                    "2": "var1",
                    "3": "condition",
                    "9": "flag"
                },
                "uVar4": {
                    "1": "temp4",
                    "2": "param4_masked"
                },
                "uVar5": {
                    "1": "abs_x2",
                    "2": "modified_input2"
                },
                "uVar6": {
                    "1": "floating_result",
                    "13": "result",
                    "2": "result_2"
                },
                "uVar7": {
                    "1": "high_bits"
                },
                "uVar8": {
                    "1": "temp_result1"
                },
                "uVar9": {
                    "1": "temp_result2"
                }
            },
            "called": [
                "FUN_08000158",
                "FUN_080059f0",
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_0800071c"
            ],
            "calling": [
                "thunk_FUN_08005838"
            ],
            "code": "\nuint calculate_result_08005838(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int difference;\n  undefined4 result_high;\n  uint flag;\n  uint modified_input4;\n  uint modified_input2;\n  undefined8 result;\n  \n  modified_input4 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (modified_input4 | (-input3 | input3) >> 0x1f)) ||\n     (modified_input2 = input2 & 0x7fffffff, 0x7ff00000 < (modified_input2 | (-input1 | input1) >> 0x1f))) {\n    modified_input4 = calculate(input3,input4,input1,input2);\n    return modified_input4;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    modified_input4 = calculate_result_080058382();\n    return modified_input4;\n  }\n  flag = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((modified_input2 | input1) == 0) {\n    if (flag == 2) {\n      return 0x54442d18;\n    }\n    if (flag != 3) {\n      return input1;\n    }\n  }\n  else if ((modified_input4 | input3) != 0) {\n    if (modified_input4 == 0x7ff00000) {\n      if (modified_input2 == 0x7ff00000) {\n        if (flag == 2) {\n          return 0x7f3321d2;\n        }\n        if (flag == 3) {\n          return 0x7f3321d2;\n        }\n        if (flag == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (flag == 2) {\n        return 0x54442d18;\n      }\n      if (flag != 3) {\n        if (flag != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (modified_input2 != 0x7ff00000) {\n      difference = (int)(modified_input2 - modified_input4) >> 0x14;\n      if (difference < 0x3d) {\n        if (((int)input4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n          result = 0;\n        }\n        else {\n          calculate_floating_point(input1,input2,input3,input4,input4);\n          FUNC_08005d0c();\n          result = calculate_result_080058382();\n        }\n      }\n      else {\n        result = 0x3ff921fb54442d18;\n      }\n      result_high = (undefined4)((ulonglong)result >> 0x20);\n      modified_input4 = (uint)result;\n      if (flag == 1) {\n        return modified_input4;\n      }\n      if (flag == 2) {\n        result = calculate_result_080058382(modified_input4,result_high,0x33145c07,0x3ca1a626);\n        modified_input4 = calculate_result_080058382(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n        return modified_input4;\n      }\n      if (flag != 0) {\n        result = calculate_result_080058382(modified_input4,result_high,0x33145c07,0x3ca1a626);\n        modified_input4 = calculate_result_080058382((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n        return modified_input4;\n      }\n      return modified_input4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "current_name": "calculate_result_08005838",
            "entrypoint": "0x08005838",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005838": "calculate_result_08005838",
                "calculate_0800015c": "calculate",
                "calculate_floating_point_0800071c": "calculate_floating_point",
                "calculate_result_08000158": "calculate_result2",
                "calculate_result_080059f0": "calculate_result2",
                "iVar1": "difference",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar2": "result_high",
                "uVar3": "flag",
                "uVar4": "modified_input4",
                "uVar5": "modified_input2",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080059f0": {
            "additional_data": {
                "CONCAT44": {
                    "1": "concatenate_4x4"
                },
                "FUNC_08005d0c": {
                    "1": "perform_func",
                    "2": "get_value"
                },
                "FUN_080059f0": {
                    "1": "calculate_floating_point",
                    "17": "calculate_result",
                    "2": "calculate_improved_result",
                    "7": "calculate"
                },
                "UNK_08009ec8 + iVar8": {
                    "1": "constant_3"
                },
                "UNK_08009ecc + iVar8": {
                    "1": "constant_4"
                },
                "UNK_08009ee8 + iVar8": {
                    "1": "constant_1"
                },
                "UNK_08009eec + iVar8": {
                    "1": "constant_2"
                },
                "calculate_0800015c": {
                    "1": "calculate_expression_1"
                },
                "calculate_floating_point_0800071c": {
                    "1": "perform_calculation3"
                },
                "calculate_product_080004c8": {
                    "1": "calculate_product"
                },
                "calculate_result_08000158": {
                    "1": "calculate_result"
                },
                "check_if_null_080009e8_080009e8": {
                    "1": "check_null"
                },
                "iVar8": {
                    "1": "selection",
                    "2": "calculation_type",
                    "3": "operation_type"
                },
                "param_1": {
                    "1": "input_a",
                    "10": "input_1",
                    "2": "input_value1",
                    "3": "input_param1",
                    "4": "input_param_1",
                    "7": "input1"
                },
                "param_2": {
                    "1": "arg2",
                    "10": "input_2",
                    "2": "input_value2",
                    "3": "input_param2",
                    "4": "input_param_2",
                    "7": "input2"
                },
                "param_3": {
                    "1": "unused_param_1",
                    "2": "unused_param",
                    "3": "input3",
                    "7": "input_3"
                },
                "param_4": {
                    "1": "unused_2",
                    "2": "unused_param",
                    "3": "input4",
                    "7": "input_4"
                },
                "uVar1": {
                    "1": "result_temp_1",
                    "10": "result_1",
                    "11": "result1",
                    "2": "temp_var1",
                    "3": "temp_1"
                },
                "uVar10": {
                    "1": "partial_result2",
                    "2": "temp4",
                    "3": "result_2",
                    "4": "final_result"
                },
                "uVar2": {
                    "1": "var2",
                    "10": "result_2",
                    "11": "result2",
                    "2": "temp2",
                    "3": "temp_2"
                },
                "uVar3": {
                    "1": "result_c",
                    "10": "result_3",
                    "11": "result3",
                    "2": "temp3",
                    "3": "temp_3"
                },
                "uVar4": {
                    "1": "result_d",
                    "10": "result_4",
                    "11": "result4",
                    "2": "temp4",
                    "3": "temp_4"
                },
                "uVar5": {
                    "1": "result_e",
                    "10": "result_5",
                    "11": "result5",
                    "2": "temp_var5",
                    "3": "temp_5"
                },
                "uVar6": {
                    "1": "result_f",
                    "10": "result_6",
                    "11": "result6",
                    "2": "temp_var6",
                    "3": "temp_6"
                },
                "uVar7": {
                    "1": "abs_input_param2",
                    "2": "temp1",
                    "3": "abs_input_2",
                    "5": "abs_input2"
                },
                "uVar9": {
                    "1": "result_2",
                    "2": "temp3",
                    "3": "result_1",
                    "4": "final_result"
                }
            },
            "called": [
                "FUN_080004c8",
                "FUN_08000158",
                "FUN_080009e8",
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_0800071c"
            ],
            "calling": [
                "FUN_08005838"
            ],
            "code": "\nundefined8 calculate_result_080059f0(int input_1,uint input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  uint abs_input2;\n  int operation_type;\n  undefined8 final_result;\n  undefined8 final_result;\n  \n  final_result = concatenate_4x4(input_2,input_1);\n  abs_input2 = input_2 & 0x7fffffff;\n  if (abs_input2 < 0x44100000) {\n    if (abs_input2 < 0x3fdc0000) {\n      if (abs_input2 < 0x3e200000) {\n        final_result = perform_calculation(input_1,input_2,0x8800759c,0x7e37e43c,input_4);\n        operation_type = check_null_condition((int)final_result,(int)((ulonglong)final_result >> 0x20),0,0x3ff00000);\n        if (operation_type != 0) {\n          return concatenate_4x4(input_2,input_1);\n        }\n      }\n      operation_type = -1;\n    }\n    else {\n      final_result = FUNC_08005d0c();\n      result4 = (undefined4)((ulonglong)final_result >> 0x20);\n      result1 = (undefined4)final_result;\n      if (abs_input2 < 0x3ff30000) {\n        if (abs_input2 < 0x3fe60000) {\n          final_result = perform_calculation(result1,result4,result1,result4);\n          final_result = calculate_final_result((int)final_result,(int)((ulonglong)final_result >> 0x20),0,0x3ff00000);\n          final_result = perform_calculation(result1,result4,0,0x40000000);\n          final_result = calculate_floating_point((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)final_result,\n                                (int)((ulonglong)final_result >> 0x20));\n          operation_type = 0;\n        }\n        else {\n          final_result = calculate_final_result(result1,result4,0,0x3ff00000);\n          final_result = perform_calculation(result1,result4,0,0x3ff00000);\n          final_result = calculate_floating_point((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)final_result,\n                                (int)((ulonglong)final_result >> 0x20));\n          operation_type = 1;\n        }\n      }\n      else if (abs_input2 < 0x40038000) {\n        final_result = calculate_final_result(result1,result4,0,0x3ff80000);\n        final_result = calculate_product(result1,result4,0,0x3ff80000);\n        final_result = perform_calculation((int)final_result,(int)((ulonglong)final_result >> 0x20),0,0x3ff00000);\n        final_result = calculate_floating_point((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)final_result,\n                              (int)((ulonglong)final_result >> 0x20));\n        operation_type = 2;\n      }\n      else {\n        final_result = calculate_floating_point(0,0xbff00000,result1,result4);\n        operation_type = 3;\n      }\n    }\n    result6 = (undefined4)((ulonglong)final_result >> 0x20);\n    result5 = (undefined4)final_result;\n    final_result = calculate_product(result5,result6,result5,result6);\n    result2 = (undefined4)((ulonglong)final_result >> 0x20);\n    result1 = (undefined4)final_result;\n    final_result = calculate_product(result1,result2,result1,result2);\n    result3 = (undefined4)((ulonglong)final_result >> 0x20);\n    result4 = (undefined4)final_result;\n    final_result = calculate_product(result4,result3,0xe322da11,0x3f90ad3a);\n    final_result = perform_calculation((int)final_result,(int)((ulonglong)final_result >> 0x20),0x24760deb,0x3fa97b4b);\n    final_result = calculate_product((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = perform_calculation((int)final_result,(int)((ulonglong)final_result >> 0x20),0xa0d03d51,0x3fb10d66);\n    final_result = calculate_product((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = perform_calculation((int)final_result,(int)((ulonglong)final_result >> 0x20),0xc54c206e,0x3fb745cd);\n    final_result = calculate_product((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = perform_calculation((int)final_result,(int)((ulonglong)final_result >> 0x20),0x920083ff,0x3fc24924);\n    final_result = calculate_product((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = perform_calculation((int)final_result,(int)((ulonglong)final_result >> 0x20),0x5555550d,0x3fd55555);\n    final_result = calculate_product((int)final_result,(int)((ulonglong)final_result >> 0x20),result1,result2);\n    final_result = calculate_product(result4,result3,0x2c6a6c2f,0xbfa2b444);\n    final_result = calculate_final_result((int)final_result,(int)((ulonglong)final_result >> 0x20),0x52defd9a,0x3fadde2d);\n    final_result = calculate_product((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = calculate_final_result((int)final_result,(int)((ulonglong)final_result >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    final_result = calculate_product((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = calculate_final_result((int)final_result,(int)((ulonglong)final_result >> 0x20),0xfe231671,0x3fbc71c6);\n    final_result = calculate_product((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = calculate_final_result((int)final_result,(int)((ulonglong)final_result >> 0x20),0x9998ebc4,0x3fc99999);\n    final_result = calculate_product((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = perform_calculation((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)final_result,\n                          (int)((ulonglong)final_result >> 0x20));\n    final_result = calculate_product((int)final_result,(int)((ulonglong)final_result >> 0x20),result5,result6);\n    result1 = (undefined4)((ulonglong)final_result >> 0x20);\n    if (operation_type == -1) {\n      final_result = calculate_final_result(result5,result6,(int)final_result,result1);\n      return final_result;\n    }\n    operation_type = operation_type * 8;\n    final_result = calculate_final_result((int)final_result,result1,*(undefined4 *)(&UNK_08009ee8 + operation_type),\n                          *(undefined4 *)(&UNK_08009eec + operation_type));\n    final_result = calculate_final_result((int)final_result,(int)((ulonglong)final_result >> 0x20),result5,result6);\n    final_result = calculate_final_result(*(undefined4 *)(&UNK_08009ec8 + operation_type),\n                          *(undefined4 *)(&UNK_08009ecc + operation_type),(int)final_result,\n                          (int)((ulonglong)final_result >> 0x20));\n    if ((int)input_2 < 0) {\n      return concatenate_4x4((int)((ulonglong)final_result >> 0x20) + -0x80000000,(int)final_result);\n    }\n  }\n  else {\n    if ((abs_input2 < 0x7ff00001) && ((abs_input2 != 0x7ff00000 || (input_1 == 0)))) {\n      result1 = 0xbff921fb;\n      if (0 < (int)input_2) {\n        result1 = 0x3ff921fb;\n      }\n      return concatenate_4x4(result1,0x54442d18);\n    }\n    final_result = perform_calculation(input_1,input_2,input_1,input_2,input_4);\n  }\n  return final_result;\n}\n\n",
            "current_name": "calculate_result_080059f0",
            "entrypoint": "0x080059f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate_4x4",
                "FUN_080059f0": "calculate_result_080059f0",
                "calculate_0800015c": "perform_calculation",
                "calculate_floating_point_0800071c": "calculate_floating_point",
                "calculate_product_080004c8": "calculate_product",
                "calculate_result_08000158": "calculate_final_result",
                "check_if_null_080009e8_080009e8": "check_null_condition",
                "iVar8": "operation_type",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result1",
                "uVar10": "final_result",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "abs_input2",
                "uVar9": "final_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005d0c": {
            "called": [],
            "calling": [
                "FUN_080059f0",
                "FUN_08005838"
            ],
            "code": "\nvoid FUNC_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005d0c",
            "entrypoint": "0x08005d0c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005d0c": "FUNC_08005d0c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005d14": {
            "additional_data": {
                "DAT_2000001c": {
                    "1": "data_offset",
                    "3": "global_value",
                    "6": "data_value"
                },
                "FUN_08005d14": {
                    "1": "get_global_data",
                    "13": "get_data_value",
                    "2": "get_constant_value",
                    "3": "get_global_value",
                    "8": "get_data"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005728"
            ],
            "code": "\nundefined4 get_data_value_08005d14(void)\n\n{\n  return DAT_2000001c;\n}\n\n",
            "current_name": "get_data_value_08005d14",
            "entrypoint": "0x08005d14",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005d14": "get_data_value_08005d14"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005d20": {
            "additional_data": {
                "**ppcVar2": {
                    "1": "call_function"
                },
                "DAT_0800a198": {
                    "1": "function_address",
                    "2": "function_set",
                    "5": "function_array"
                },
                "FUNC_08009e68": {
                    "1": "initialize_functions",
                    "3": "initialize_function",
                    "9": "initialize"
                },
                "FUN_08005d20": {
                    "1": "execute_function_batch_with_increment",
                    "2": "execute_multiple_functions",
                    "4": "execute_function_set",
                    "6": "execute_callbacks",
                    "8": "execute_functions"
                },
                "iVar1": {
                    "1": "callback_count",
                    "13": "iteration_count",
                    "2": "callback_index"
                },
                "ppcVar2": {
                    "1": "callback_pointers",
                    "11": "function_pointer",
                    "3": "callback_pointer",
                    "5": "function_pointers",
                    "6": "function_pointer_array"
                }
            },
            "called": [
                "FUN_08000134",
                "FUN_08009e68",
                "FUN_080078a0"
            ],
            "calling": [
                "entry"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005d2c) */\n/* WARNING: Removing unreachable block (ram,0x08005d2e) */\n\nvoid execute_functions_08005d20(void)\n\n{\n  int counter;\n  code **function_pointer;\n  \n  FUNC_08009e68();\n  counter = 0;\n  function_pointer = (code **)&DAT_0800a198;\n  do {\n    counter = counter + 1;\n    (**function_pointer)();\n    function_pointer = function_pointer + 1;\n  } while (counter != 2);\n  return;\n}\n\n",
            "current_name": "execute_functions_08005d20",
            "entrypoint": "0x08005d20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005d20": "execute_functions_08005d20",
                "iVar1": "counter",
                "ppcVar2": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005d68": {
            "additional_data": {
                "FUN_08005d68": {
                    "1": "fill_memory_with_byte",
                    "2": "memset_with_byte",
                    "3": "initialize_memory",
                    "4": "memset",
                    "9": "fill_memory"
                },
                "LAB_08005de4": {
                    "1": "loop_end",
                    "2": "end_loop"
                },
                "bVar5": {
                    "1": "is_done",
                    "2": "is_zero_length",
                    "6": "is_size_zero",
                    "9": "is_zero"
                },
                "param_1": {
                    "1": "memory_pointer",
                    "16": "dest",
                    "2": "buffer",
                    "6": "destination"
                },
                "param_2": {
                    "1": "byte",
                    "2": "pattern",
                    "26": "value"
                },
                "param_3": {
                    "1": "num",
                    "17": "size",
                    "2": "num_bytes",
                    "5": "length"
                },
                "puVar1": {
                    "1": "current_pointer",
                    "19": "dest_ptr",
                    "2": "dst_ptr"
                },
                "puVar2": {
                    "1": "new_dest_ptr",
                    "2": "next",
                    "5": "temp_ptr",
                    "6": "next_dest_ptr"
                },
                "uVar3": {
                    "1": "temp_num",
                    "15": "remaining_size",
                    "2": "remaining_bytes",
                    "4": "remaining",
                    "5": "remaining_length"
                },
                "uVar4": {
                    "1": "value_concatenated",
                    "2": "four_byte_value",
                    "3": "value_concat",
                    "4": "value32"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f60",
                "FUN_08009980"
            ],
            "code": "\nvoid fill_memory_08005d68(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_dest_ptr;\n  uint remaining_size;\n  undefined4 value32;\n  bool is_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    remaining_size = size - 1;\n    dest_ptr = dest;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      size = remaining_size;\n      if (((uint)dest & 3) == 0) break;\n      is_zero = remaining_size == 0;\n      remaining_size = remaining_size - 1;\n      dest_ptr = dest;\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    value32 = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining_size = size;\n    dest_ptr = dest;\n    if (0xf < size) {\n      remaining_size = size - 0x10;\n      dest_ptr = dest + 4;\n      do {\n        dest_ptr[-4] = value32;\n        dest_ptr[-3] = value32;\n        dest_ptr[-2] = value32;\n        dest_ptr[-1] = value32;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (remaining_size & 0xfffffff0) + 0x20));\n      size = size & 0xf;\n      dest = dest + ((remaining_size >> 4) + 1) * 4;\n      remaining_size = size;\n      dest_ptr = dest;\n      if (size < 4) goto end_loop;\n    }\n    do {\n      size = size - 4;\n      *dest = value32;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)dest_ptr + (remaining_size - 4 & 0xfffffffc) + 4);\n    size = remaining_size & 3;\n  }\nend_loop:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      next_dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_dest_ptr;\n    } while ((undefined4 *)(size + (int)dest) != next_dest_ptr);\n  }\n  return;\n}\n\n",
            "current_name": "fill_memory_08005d68",
            "entrypoint": "0x08005d68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005d68": "fill_memory_08005d68",
                "LAB_08005de4": "end_loop",
                "bVar5": "is_zero",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "next_dest_ptr",
                "uVar3": "remaining_size",
                "uVar4": "value32"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005dfc": {
            "additional_data": {
                "FUNC_08005e9c": {
                    "1": "initialize_memory"
                },
                "FUN_08005dfc": {
                    "1": "initialize_variable",
                    "18": "clear_memory",
                    "2": "initialize_memory"
                },
                "local_4": {
                    "1": "stack_variable"
                },
                "local_6c": {
                    "1": "max_val2",
                    "2": "max_size_limit",
                    "3": "max_size",
                    "6": "min_size"
                },
                "local_70": {
                    "1": "buffer_ptr_copy",
                    "2": "current",
                    "3": "current_memory",
                    "4": "current_pointer"
                },
                "local_78": {
                    "1": "limit1",
                    "2": "local_var1",
                    "3": "max_value",
                    "5": "max_value1",
                    "9": "max_size"
                },
                "local_8": {
                    "1": "default_value2"
                },
                "local_80": {
                    "1": "output_buffer",
                    "2": "local_array",
                    "3": "temp_memory"
                },
                "param_1": {
                    "1": "ptr_array",
                    "2": "memory_pointer",
                    "3": "input_pointer",
                    "4": "data",
                    "7": "buffer"
                },
                "param_2": {
                    "1": "size_param",
                    "21": "size",
                    "4": "length"
                },
                "param_3": {
                    "1": "arg2",
                    "2": "param_a",
                    "6": "value",
                    "8": "value1",
                    "9": "param3"
                },
                "param_4": {
                    "1": "size_3",
                    "2": "offset",
                    "3": "flag",
                    "8": "value2",
                    "9": "param4"
                },
                "uStack_4": {
                    "1": "temp_value2",
                    "2": "stack_var2"
                },
                "uStack_74": {
                    "1": "temp_variable2",
                    "2": "default_value",
                    "6": "constant_value"
                },
                "uStack_8": {
                    "1": "max2",
                    "2": "value_ptr"
                }
            },
            "called": [
                "FUN_08005e9c"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nvoid clear_memory_08005dfc(undefined *buffer,undefined4 size,undefined4 param3,undefined4 param4)\n\n{\n  undefined *temp_memory [2];\n  undefined4 max_size;\n  undefined4 constant_value;\n  undefined *current_pointer;\n  undefined4 min_size;\n  undefined4 stack_var1;\n  undefined4 stack_var2;\n  \n  min_size = 0x7fffffff;\n  max_size = 0x7fffffff;\n  constant_value = 0xffff0208;\n  temp_memory[0] = buffer;\n  current_pointer = buffer;\n  stack_var1 = param3;\n  stack_var2 = param4;\n  FUNC_08005e9c(DAT_2000001c,temp_memory,size,&stack_var1);\n  *temp_memory[0] = 0;\n  return;\n}\n\n",
            "current_name": "clear_memory_08005dfc",
            "entrypoint": "0x08005dfc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005dfc": "clear_memory_08005dfc",
                "local_6c": "min_size",
                "local_70": "current_pointer",
                "local_78": "max_size",
                "local_8": "default_value2",
                "local_80": "temp_memory",
                "param_1": "buffer",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "uStack_4": "stack_var2",
                "uStack_74": "constant_value",
                "uStack_8": "stack_var1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005e40": {
            "additional_data": {
                "FUN_08005e40": {
                    "1": "count_leading_zero_bits",
                    "2": "calculate_offset",
                    "4": "calculate_lz_count",
                    "7": "count_leading_zeros"
                },
                "LZCOUND": {
                    "1": "leading_zero_count"
                },
                "LZCOUNT": {
                    "1": "leading_zero_count",
                    "2": "leading_zeros_count",
                    "4": "count_leading_zeros"
                },
                "iVar1": {
                    "1": "padding_count",
                    "2": "shift",
                    "6": "offset",
                    "7": "bit_offset",
                    "9": "leading_zeros"
                },
                "param_1": {
                    "1": "input_data",
                    "18": "input",
                    "2": "input_number",
                    "3": "input_num",
                    "6": "input_value"
                },
                "puVar2": {
                    "1": "word_ptr",
                    "12": "ptr",
                    "2": "input_ptr",
                    "6": "data_ptr"
                },
                "uVar3": {
                    "1": "bit_mask",
                    "14": "value",
                    "2": "temp_value",
                    "3": "word"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_08005e9c"
            ],
            "code": "\nint count_leading_zeros_08005e40(uint input)\n\n{\n  int leading_zeros;\n  uint *ptr;\n  uint value;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leading_zeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leading_zeros + 4U & 0x1f) << 3);\n  }\n  while( true ) {\n    ptr = ptr + 1;\n    value = value + 0xfefefeff & ~value & 0x80808080;\n    if (value != 0) break;\n    value = *ptr;\n    leading_zeros = leading_zeros + 4;\n  }\n  return leading_zeros + (0x1fU - count_leading_zeros_08005e40(value & -value) >> 3);\n}\n\n",
            "current_name": "count_leading_zeros_08005e40",
            "entrypoint": "0x08005e40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005e40": "count_leading_zeros_08005e40",
                "LZCOUNT": "count_leading_zeros",
                "iVar1": "leading_zeros",
                "param_1": "input",
                "puVar2": "ptr",
                "uVar3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005e9c": {
            "called": [
                "FUN_080004c8",
                "FUN_08005e40",
                "FUN_0800119c",
                "FUN_080011ec",
                "FUN_080009c0",
                "FUN_08008ad4",
                "FUN_080003f4",
                "FUN_08000998",
                "FUN_08001170",
                "FUN_08008af8",
                "FUN_08000158",
                "FUN_08009768",
                "FUN_080009e8",
                "FUN_0800901c",
                "FUN_080009ac",
                "FUN_080097cc",
                "FUN_080096e0",
                "FUN_080088ec",
                "FUN_080079e8"
            ],
            "calling": [
                "FUN_08005dfc"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  char *local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  char *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)calculate_adjusted_value_08008ad4();\n  local_114 = *ppiVar2;\n  local_118 = (int *)count_leading_zeros_08005e40(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = allocate_and_initialize_memory_08008af8(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (char *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (char *)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = calculate_adjusted_value_08008ad4(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)count_leading_zeros_08005e40(local_110);\n      local_104 = piVar24;\n      iVar3 = calculate_adjusted_value_08008ad4(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = check_parameters_08001170(uVar10,local_168,0xffffffff,0x7fefffff);\n      if ((iVar3 == 0) && (iVar3 = check_parameters_080009c0(uVar10,local_168,0xffffffff,0x7fefffff), iVar3 == 0)\n         ) {\n        iVar3 = is_string_empty_080009ac(local_128,local_12c,local_124,local_120);\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        piVar23 = (int *)&UNK_08009f10;\n        piVar27 = (int *)&UNK_08009f0c;\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (char *)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      iVar3 = check_parameters_08001170(local_128,local_12c,local_128,local_12c);\n      if (iVar3 != 0) {\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        piVar23 = (int *)&UNK_08009f18;\n        piVar27 = (int *)&UNK_08009f14;\n        goto LAB_08006524;\n      }\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)allocate_and_initialize_memory_08008af8(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        piVar22 = piVar27;\n        local_158 = (char *)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = calculate_normalized_float_080096e0(local_128,uVar19,&local_f0);\n          local_150 = calculate_product_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = is_parameter_valid_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = \"0123456789abcdef\";\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar27;\n          local_100 = piVar25;\n          local_fc = param_3;\n          pcVar18 = local_158;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        if (piVar24 == (int *)0x41) {\n          uVar33 = calculate_normalized_float_080096e0(local_128,uVar19,&local_f0);\n          local_150 = calculate_product_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = is_parameter_valid_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 == 0) {\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = (int *)0x0;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar27 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar27 = (int *)0x1;\n            local_148 = (int *)0x0;\n          }\n          goto LAB_0800724a;\n        }\n        if ((int)local_12c < 0) goto LAB_08007414;\n        local_144 = (int *)0x0;\n        uVar19 = local_12c;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (char *)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)convert_float_to_string_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = is_parameter_valid_08000998(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)convert_float_to_string_080079e8(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)convert_float_to_string_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = is_parameter_valid_08000998(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (char *)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar23 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar23 == (int *)0x0) {\n        if ((int *)0x5 < piVar27) {\n          piVar27 = (int *)0x6;\n        }\n        piVar23 = (int *)&UNK_08009f44;\n        piVar16 = (int *)0x0;\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar22 = (int *)0x0;\n        local_168 = piVar27;\n        local_158 = (char *)piVar27;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (piVar27 == (int *)0xffffffff) {\n          local_158 = (char *)count_leading_zeros_08005e40(piVar23);\n        }\n        else {\n          iVar3 = find_byte_sequence_0800901c(piVar23,0,piVar27);\n          if (iVar3 == 0) {\n            piVar16 = (int *)(uint)local_f5;\n            local_148 = (int *)0x0;\n            local_13c = (int **)0x0;\n            local_134 = (int *)0x0;\n            local_130 = (int *)0x0;\n            piVar22 = (int *)0x0;\n            local_168 = piVar27;\n            local_158 = (char *)piVar27;\n            local_154 = ppiVar14;\n            goto LAB_08006538;\n          }\n          local_158 = (char *)(iVar3 - (int)piVar23);\n        }\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar16 = (int *)(uint)local_f5;\n        piVar22 = (int *)0x0;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        local_154 = ppiVar14;\n      }\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = \"0123456789ABCDEF\";\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      piVar22 = *local_154;\n      local_11c = \"0123456789abcdef\";\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = \"0123456789abcdef\";\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = (char *)ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        calculate_result_080011ec(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          copy_string_08009768(piVar23,local_110,local_104);\n          if (pbVar26[1] == 0) {\n            piVar22 = (int *)0x0;\n          }\n          else {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = calculate_result_080011ec(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = (int **)local_158;\n      local_158 = (char *)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (char *)((uint)piVar25 & 1);\n            if ((int *)local_158 == (int *)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (char *)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (char *)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(char *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = is_parameter_valid_08000998((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar16 = param_3;\n    piVar22 = (int *)((int)piVar22 + -1);\n    uVar33 = calculate_product_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x40300000);\n    iVar3 = calculate_value_0800119c();\n    uVar34 = reverse_bits_080003f4();\n    uVar33 = calculate_result_08000158((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                          (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar16 + 1);\n    *(char *)piVar16 = pcVar18[iVar3];\n    if (piVar22 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar22;\n  local_134 = piVar16;\n  local_150 = uVar33;\n  iVar8 = check_if_null_080009e8_080009e8((int)uVar33,uVar10,0,0x3fe00000);\n  if (iVar8 == 0) {\n    iVar8 = is_parameter_valid_08000998((int *)local_150,local_150._4_4_,0,0x3fe00000);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = local_158[0xf];\n    bVar7 = *(byte *)piVar16;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = local_158[10];\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (char *)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (char *)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (char *)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (char *)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((uint)local_f0 / 10);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (char *)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (char *)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (char *)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (char *)((int)local_158 + (int)local_104 * ((int)local_130 + (int)local_13c));\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = (int *)0x0;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = copy_and_update_memory_080097cc(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = copy_and_update_memory_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = copy_and_update_memory_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (char *)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (char *)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (char *)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = is_parameter_valid_08000998(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      if (iVar3 == 0) {\n        local_158 = (char *)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (char *)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (char *)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)0x8009f60;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = copy_and_update_memory_080097cc(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            local_158 = (char *)local_d0;\n          }\n          *ppiVar17 = (int *)0x8009f60;\n          ppiVar17[1] = piVar22;\n          local_158 = (char *)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = is_parameter_valid_08000998(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)&DAT_08009f4c;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)0x8009f60;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = copy_and_update_memory_080097cc(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = copy_and_update_memory_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (char *)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = copy_and_update_memory_080097cc(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = copy_and_update_memory_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)0x8009f60;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = copy_and_update_memory_080097cc(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)0x8009f60;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = copy_and_update_memory_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = copy_and_update_memory_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)&DAT_08009f4c;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar22 = local_160;\n        puVar29 = local_16c;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = copy_and_update_memory_080097cc(puVar29,piVar22,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = copy_and_update_memory_080097cc(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8), iVar3 == 0))\n  {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      initialize_and_allocate_memory_080088ec(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    initialize_and_allocate_memory_080088ec(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "current_name": "FUNC_08005e9c",
            "entrypoint": "0x08005e9c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080078a0": {
            "called": [
                "FUN_080098c0"
            ],
            "calling": [
                "FUN_08005d20"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080078a4) */\n\nvoid FUNC_080078a0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080078a0",
            "entrypoint": "0x080078a0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080078a0": "FUNC_080078a0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080078c0": {
            "additional_data": {
                "FUN_080078c0": {
                    "1": "calculate_division_and_modify_array",
                    "12": "calculate_division",
                    "2": "calculate_ratio",
                    "9": "calculate_quotient"
                },
                "compare_arrays_080094f8": {
                    "5": "compare_arrays"
                },
                "compare_arrays_080094f8()": {
                    "1": "compare_arrays"
                },
                "iVar13": {
                    "1": "comparison_result"
                },
                "iVar3": {
                    "1": "quotient_high",
                    "26": "carry"
                },
                "iVar4": {
                    "1": "result",
                    "2": "size",
                    "3": "divisor_length",
                    "4": "array2_length",
                    "5": "length"
                },
                "iVar5": {
                    "1": "dividend_end_index",
                    "17": "index",
                    "6": "last_index"
                },
                "param_1": {
                    "1": "dividend_array",
                    "17": "array1",
                    "2": "input_array1",
                    "3": "numerator",
                    "7": "dividend"
                },
                "param_2": {
                    "1": "destination_array",
                    "17": "array2",
                    "2": "input_array2",
                    "3": "denominator",
                    "7": "divisor"
                },
                "puVar11": {
                    "1": "divisor_step_ptr",
                    "2": "ptr2_temp",
                    "6": "ptr5"
                },
                "puVar12": {
                    "1": "ptr1_temp",
                    "2": "next_divisor",
                    "6": "ptr6"
                },
                "puVar2": {
                    "1": "current_element1",
                    "2": "pointer1",
                    "3": "ptr_array1",
                    "4": "dividend_ptr",
                    "9": "ptr1"
                },
                "puVar7": {
                    "1": "array2_ptr",
                    "2": "pointer2",
                    "3": "denominator_ptr",
                    "4": "divisor_ptr",
                    "5": "ptr_array2",
                    "8": "ptr2"
                },
                "puVar8": {
                    "1": "numerator_array",
                    "2": "dividend_array",
                    "4": "ptr_array1",
                    "7": "ptr3"
                },
                "puVar9": {
                    "1": "endptr",
                    "4": "ptr_end",
                    "6": "ptr4"
                },
                "uVar1": {
                    "1": "sum",
                    "13": "quotient",
                    "2": "temp_var1",
                    "4": "result"
                },
                "uVar10": {
                    "1": "temp_value2",
                    "2": "carry_temp",
                    "3": "carry2",
                    "4": "temp2",
                    "8": "temp"
                },
                "uVar6": {
                    "1": "division_result",
                    "10": "result",
                    "13": "quotient",
                    "2": "divisor"
                }
            },
            "called": [
                "FUN_080094f8"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nuint calculate_division_080078c0(int array1,int array2)\n\n{\n  uint quotient;\n  uint *ptr1;\n  int carry;\n  int length;\n  int index;\n  uint quotient;\n  uint *ptr2;\n  uint *ptr3;\n  uint *ptr4;\n  uint temp;\n  uint *ptr5;\n  uint *ptr6;\n  \n  length = *(int *)(array2 + 0x10);\n  if (*(int *)(array1 + 0x10) < length) {\n    return 0;\n  }\n  index = length + -1;\n  ptr2 = (uint *)(array2 + 0x14);\n  ptr3 = (uint *)(array1 + 0x14);\n  quotient = ptr3[index] / (ptr2[index] + 1);\n  ptr4 = ptr2 + index;\n  if (quotient != 0) {\n    quotient = 0;\n    carry = 0;\n    ptr1 = ptr3;\n    ptr5 = ptr2;\n    do {\n      ptr6 = ptr5 + 1;\n      quotient = quotient * (*ptr5 & 0xffff) + quotient;\n      temp = quotient * (*ptr5 >> 0x10) + (quotient >> 0x10);\n      quotient = (carry - (quotient & 0xffff)) + (*ptr1 & 0xffff);\n      carry = ((*ptr1 >> 0x10) - (temp & 0xffff)) + ((int)quotient >> 0x10);\n      *ptr1 = quotient & 0xffff | carry * 0x10000;\n      carry = carry >> 0x10;\n      quotient = temp >> 0x10;\n      ptr1 = ptr1 + 1;\n      ptr5 = ptr6;\n    } while (ptr6 <= ptr4);\n    if (ptr3[index] == 0) {\n      if ((ptr3 < ptr3 + length + -2) && (ptr3[length + -2] == 0)) {\n        ptr1 = ptr3 + length + -3;\n        do {\n          index = index + -1;\n          if (ptr1 <= ptr3) break;\n          quotient = *ptr1;\n          ptr1 = ptr1 + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(array1 + 0x10) = index;\n    }\n  }\n  length = compare_arrays;\n  if (-1 < length) {\n    length = 0;\n    quotient = quotient + 1;\n    ptr1 = ptr3;\n    do {\n      ptr5 = ptr2 + 1;\n      quotient = (length - (*ptr2 & 0xffff)) + (*ptr1 & 0xffff);\n      length = ((*ptr1 >> 0x10) - (*ptr2 >> 0x10)) + ((int)quotient >> 0x10);\n      *ptr1 = quotient & 0xffff | length * 0x10000;\n      length = length >> 0x10;\n      ptr1 = ptr1 + 1;\n      ptr2 = ptr5;\n    } while (ptr5 <= ptr4);\n    if (ptr3[index] == 0) {\n      if ((ptr3 < ptr3 + index + -1) && (ptr3[index + -1] == 0)) {\n        ptr2 = ptr3 + index + -2;\n        do {\n          index = index + -1;\n          if (ptr2 <= ptr3) break;\n          quotient = *ptr2;\n          ptr2 = ptr2 + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(array1 + 0x10) = index;\n    }\n  }\n  return quotient;\n}\n\n",
            "current_name": "calculate_division_080078c0",
            "entrypoint": "0x080078c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080078c0": "calculate_division_080078c0",
                "compare_arrays_080094f8": "compare_arrays",
                "compare_arrays_080094f8()": "compare_arrays",
                "iVar3": "carry",
                "iVar4": "length",
                "iVar5": "index",
                "param_1": "array1",
                "param_2": "array2",
                "puVar11": "ptr5",
                "puVar12": "ptr6",
                "puVar2": "ptr1",
                "puVar7": "ptr2",
                "puVar8": "ptr3",
                "puVar9": "ptr4",
                "uVar1": "quotient",
                "uVar10": "temp",
                "uVar6": "quotient"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080079e8": {
            "additional_data": {
                "DAT_08009f80": {
                    "1": "mantissa_power2_array"
                },
                "DAT_08009fa4": {
                    "1": "exponent_power10"
                },
                "DAT_08009fa8": {
                    "1": "mantissa_power10"
                },
                "FUN_080079e8": {
                    "1": "convert_floating_point_to_text",
                    "2": "parse_floating_point",
                    "4": "parse_floating_point_number",
                    "6": "convert_float_to_string"
                },
                "bVar1": {
                    "1": "has_infinity",
                    "2": "is_less_than_six",
                    "5": "is_infinity",
                    "7": "is_negative"
                },
                "bVar2": {
                    "1": "is_less_than1",
                    "2": "is_normalized",
                    "5": "is_zero"
                },
                "bVar25": {
                    "1": "b_var25",
                    "5": "is_negative"
                },
                "bVar3": {
                    "1": "is_decimal_point",
                    "3": "is_scientific_notation"
                },
                "bVar4": {
                    "1": "is_zero"
                },
                "bVar5": {
                    "1": "leading_zero",
                    "2": "bit",
                    "3": "byte_value"
                },
                "cVar4": {
                    "1": "residue",
                    "11": "digit",
                    "4": "digit_char"
                },
                "iVar14": {
                    "1": "precision_index"
                },
                "iVar15": {
                    "1": "offset"
                },
                "iVar19": {
                    "1": "temp3"
                },
                "iVar24": {
                    "1": "digit",
                    "2": "digit_value"
                },
                "iVar7": {
                    "1": "num_bits",
                    "2": "index",
                    "3": "i"
                },
                "iVar75": {
                    "1": "temp_value"
                },
                "iVar77": {
                    "1": "temp_value"
                },
                "iVar78": {
                    "1": "temp_value"
                },
                "iVar8": {
                    "1": "temp_count",
                    "2": "compare_result"
                },
                "iVar9": {
                    "1": "temp_int1",
                    "2": "temp"
                },
                "iVar94": {
                    "1": "group_index"
                },
                "local_2c": {
                    "1": "status_values",
                    "4": "temp_array"
                },
                "local_2c[0]": {
                    "1": "temp_array[0]"
                },
                "local_30": {
                    "1": "offset"
                },
                "local_34": {
                    "1": "normalized_precision",
                    "2": "exponent_offset"
                },
                "local_38": {
                    "1": "leading_zero_prec"
                },
                "local_48": {
                    "1": "local_value7"
                },
                "local_58": {
                    "1": "trailing_zeros_count"
                },
                "local_5c": {
                    "1": "mantissa_digit_count",
                    "2": "remaining_digits"
                },
                "local_60": {
                    "1": "decimal_point_offset",
                    "2": "decimal_index"
                },
                "local_68": {
                    "1": "significant_digits",
                    "2": "min_width"
                },
                "local_6c": {
                    "1": "exponent"
                },
                "local_70": {
                    "1": "fixed_width"
                },
                "local_74": {
                    "1": "result",
                    "2": "result_length"
                },
                "local_7c": {
                    "1": "exponent_normalized_abs",
                    "2": "exponent_value"
                },
                "local_80": {
                    "1": "result4",
                    "2": "result"
                },
                "param_1": {
                    "1": "input_param",
                    "11": "value",
                    "2": "input_string",
                    "3": "data",
                    "6": "input"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "param_2",
                    "4": "flags",
                    "6": "param1",
                    "7": "param2"
                },
                "param_3": {
                    "1": "input_param",
                    "16": "sign",
                    "2": "sign_bits",
                    "3": "significand"
                },
                "param_4": {
                    "1": "biased_exponent",
                    "19": "exponent",
                    "2": "sign"
                },
                "param_5": {
                    "1": "mantissa1",
                    "2": "flags",
                    "4": "num_digits",
                    "5": "precision"
                },
                "param_6": {
                    "1": "significant_digits",
                    "4": "rounding_mode",
                    "7": "precision"
                },
                "param_7": {
                    "1": "length",
                    "14": "status",
                    "6": "error_code"
                },
                "param_8": {
                    "1": "result",
                    "3": "overflow",
                    "4": "sign_flag",
                    "6": "is_negative"
                },
                "param_9": {
                    "1": "result_string",
                    "2": "str",
                    "3": "string_value",
                    "4": "output",
                    "6": "result"
                },
                "pbVar20": {
                    "1": "result_pointer"
                },
                "pbVar21": {
                    "1": "result_digit_pointer"
                },
                "pcVar10": {
                    "1": "output_str",
                    "2": "output_string",
                    "3": "result_string"
                },
                "pcVar20": {
                    "1": "current_char"
                },
                "pcVar21": {
                    "1": "next_char"
                },
                "precision": {
                    "1": "precision"
                },
                "puVar22": {
                    "1": "temp_ptr3"
                },
                "temp": {
                    "1": "temp"
                },
                "temp4": {
                    "1": "temp4"
                },
                "temp5": {
                    "1": "temp5"
                },
                "uStack_44": {
                    "1": "temp_value7"
                },
                "uVar11": {
                    "1": "status_value"
                },
                "uVar12": {
                    "1": "power_value1",
                    "2": "u_var12"
                },
                "uVar13": {
                    "1": "float_part2",
                    "2": "u_var13"
                },
                "uVar16": {
                    "1": "result_hi",
                    "2": "temp2"
                },
                "uVar17": {
                    "1": "exponent_normalized",
                    "2": "u_var17"
                },
                "uVar18": {
                    "1": "temp_value3",
                    "2": "u_var18"
                },
                "uVar19": {
                    "1": "zero_based_exponent",
                    "2": "u_var19"
                },
                "uVar23": {
                    "1": "temp_var20",
                    "2": "u_var23"
                },
                "uVar26": {
                    "1": "converted_exp",
                    "2": "result",
                    "4": "temp_result"
                },
                "uVar27": {
                    "1": "temp_8",
                    "2": "temp_value2"
                },
                "uVar28": {
                    "1": "temp_value3",
                    "2": "temp_result3"
                },
                "uVar6": {
                    "1": "temp4",
                    "2": "value",
                    "3": "result"
                }
            },
            "called": [
                "FUN_080009d4",
                "FUN_080004c8",
                "FUN_08009244",
                "FUN_08009530",
                "FUN_08009630",
                "FUN_0800119c",
                "FUN_080091a4",
                "FUN_080090c0",
                "FUN_0800015c",
                "FUN_080003f4",
                "FUN_08000998",
                "FUN_080094f8",
                "FUN_08000158",
                "FUN_08009120",
                "FUN_080009e8",
                "FUN_080093a4",
                "FUN_080078c0",
                "FUN_080003d4",
                "FUN_080009ac",
                "FUN_0800910c",
                "FUN_08001084",
                "FUN_08009258",
                "FUN_08009444",
                "FUN_0800071c"
            ],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nchar * convert_float_to_string_080079e8(int value,undefined4 param2,uint sign,uint exponent,uint precision,\n                   uint precision,int *status,uint *is_negative,char **result)\n\n{\n  bool is_negative;\n  bool is_zero;\n  bool is_scientific_notation;\n  char digit;\n  byte is_zero;\n  undefined4 temp_value;\n  int i;\n  int temp_int2;\n  int temp;\n  char *result_string;\n  uint temp_exponent;\n  undefined4 constant1;\n  undefined4 u_var13;\n  int temp_index;\n  int result_length;\n  undefined4 u_var16;\n  uint u_var17;\n  uint u_var18;\n  int max_length;\n  char *temp_ptr1;\n  char *temp_ptr2;\n  undefined4 *temp_ptr3;\n  undefined4 u_var23;\n  int temp_value;\n  bool is_negative;\n  undefined8 temp_result;\n  undefined8 temp_result2;\n  undefined8 temp_result3;\n  uint result;\n  uint exponent_value;\n  uint result_length;\n  int exponent_sign;\n  uint min_width;\n  int decimal_index;\n  int remaining_digits;\n  uint leading_zero_count;\n  uint temp_value2;\n  uint temp_value4;\n  uint max_exponent;\n  uint exponent_offset;\n  int max_shift;\n  int temp_array [2];\n  \n  temp_index = *(int *)(value + 0x40);\n  if (temp_index != 0) {\n    u_var18 = *(uint *)(value + 0x44);\n    *(uint *)(temp_index + 4) = u_var18;\n    *(int *)(temp_index + 8) = 1 << (u_var18 & 0xff);\n    extract_value_and_swap_0800910c(value,temp_index);\n    *(undefined4 *)(value + 0x40) = 0;\n  }\n  is_negative = (int)exponent < 0;\n  u_var18 = exponent;\n  if (is_negative) {\n    u_var18 = exponent & 0x7fffffff;\n  }\n  *is_negative = (uint)is_negative;\n  exponent_value = exponent;\n  if (is_negative) {\n    exponent_value = u_var18;\n  }\n  u_var17 = exponent_value;\n  if ((~u_var18 & 0x7ff00000) == 0) {\n    *status = 9999;\n    if ((sign == 0) && ((u_var18 & 0xfffff) == 0)) {\n      result_string = \"Infinity\";\n      if (result == (char **)0x0) {\n        return result_string;\n      }\n      temp_ptr2 = \"\";\n    }\n    else {\n      result_string = \"NaN\";\n      if (result == (char **)0x0) {\n        return result_string;\n      }\n      temp_ptr2 = \"\";\n    }\n    *result = temp_ptr2;\n    return result_string;\n  }\n  temp_result = is_parameter_valid_08000998(sign,exponent_value,0,0);\n  if ((int)temp_result != 0) {\n    *status = 1;\n    if (result != (char **)0x0) {\n      *result = \"\";\n      return \"0\";\n    }\n    return \"0\";\n  }\n  temp_value = decode_and_count_bits_08009630(value,(int)((ulonglong)temp_result >> 0x20),sign,exponent_value,temp_array,&max_shift)\n  ;\n  temp_index = max_shift;\n  if (u_var18 >> 0x14 == 0) {\n    max_length = temp_array[0] + max_shift;\n    result_length = max_length + 0x432;\n    if (result_length < 0x21) {\n      u_var18 = sign << (0x20U - result_length & 0xff);\n    }\n    else {\n      u_var18 = sign >> (max_length + 0x412U & 0xff) | u_var18 << (0x40U - result_length & 0xff);\n    }\n    temp_result = reverse_bits_080003d4(u_var18);\n    max_length = max_length + -1;\n    is_negative = true;\n    temp_exponent = (int)((ulonglong)temp_result >> 0x20) + 0xfe100000;\n    u_var18 = (uint)temp_result;\n  }\n  else {\n    max_length = (u_var18 >> 0x14) - 0x3ff;\n    temp_exponent = exponent_value & 0xfffff | 0x3ff00000;\n    is_negative = false;\n    u_var18 = sign;\n  }\n  temp_result = calculate_result_08000158(u_var18,temp_exponent,0,0x3ff80000);\n  temp_result = calculate_product_080004c8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x636f4361,0x3fd287a7);\n  temp_result = calculate_0800015c((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x8b60c8b3,0x3fc68a28);\n  temp_result2 = reverse_bits_080003f4(max_length);\n  temp_result2 = calculate_product_080004c8((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0x509f79fb,0x3fd34413);\n  temp_result = calculate_0800015c((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)temp_result2,\n                        (int)((ulonglong)temp_result2 >> 0x20));\n  u_var13 = (undefined4)((ulonglong)temp_result >> 0x20);\n  result_length = calculate_value_0800119c();\n  result_length = is_string_empty_080009ac((int)temp_result,u_var13,0,0);\n  if (result_length != 0) {\n    temp_result2 = reverse_bits_080003f4(result_length);\n    result_length = is_parameter_valid_08000998((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),(int)temp_result,u_var13);\n    if (result_length == 0) {\n      result_length = result_length - 1;\n    }\n  }\n  if (result_length < 0x17) {\n    result_length = check_if_null_080009e8_080009e8(*(undefined4 *)(&DAT_08009fa8 + result_length * 8),\n                          *(undefined4 *)(&DAT_08009fac + result_length * 8),sign,exponent_value);\n    if (result_length == 0) {\n      is_zero = false;\n    }\n    else {\n      result_length = result_length - 1;\n      is_zero = false;\n    }\n  }\n  else {\n    is_zero = true;\n  }\n  result_length = (temp_index - max_length) + -1;\n  if (result_length < 0) {\n    exponent_sign = 1 - (temp_index - max_length);\n    result_length = 0;\n  }\n  else {\n    exponent_sign = 0;\n  }\n  if ((int)result_length < 0) {\n    leading_zero_count = 0;\n    exponent_sign = exponent_sign - result_length;\n    remaining_digits = -result_length;\n  }\n  else {\n    result_length = result_length + result_length;\n    leading_zero_count = result_length;\n    remaining_digits = 0;\n  }\n  if (9 < precision) {\n    max_exponent = 0xffffffff;\n    is_negative = true;\n    min_width = 0xffffffff;\n    is_scientific_notation = true;\n    precision = 0;\n    precision = 0;\n    goto LAB_08007c24;\n  }\n  is_negative = (int)precision < 6;\n  if (!is_negative) {\n    precision = precision - 4;\n  }\n  switch(precision) {\n  case 2:\n    is_scientific_notation = false;\n    break;\n  case 3:\n    is_scientific_notation = false;\n    goto LAB_08008300;\n  case 4:\n    is_scientific_notation = true;\n    break;\n  case 5:\n    is_scientific_notation = true;\nLAB_08008300:\n    max_exponent = result_length + precision;\n    min_width = max_exponent + 1;\n    u_var18 = min_width;\n    if ((int)min_width < 1) {\n      u_var18 = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(value + 0x44) = 0;\n    result_string = (char *)allocate_and_initialize_memory_080090c0(value,0);\n    max_exponent = 0xffffffff;\n    min_width = 0xffffffff;\n    precision = 0;\n    *(char **)(value + 0x40) = result_string;\n    is_scientific_notation = true;\n    goto LAB_08007e36;\n  }\n  if ((int)precision < 1) {\n    max_exponent = 1;\n    precision = 1;\n    min_width = 1;\nLAB_08007c24:\n    *(undefined4 *)(value + 0x44) = 0;\n    temp_exponent = max_exponent;\n  }\n  else {\n    max_exponent = precision;\n    min_width = precision;\n    u_var18 = precision;\nLAB_08008314:\n    *(undefined4 *)(value + 0x44) = 0;\n    temp_exponent = min_width;\n    if (0x17 < (int)u_var18) {\n      max_length = 4;\n      temp_index = 1;\n      do {\n        i = temp_index;\n        max_length = max_length * 2;\n        temp_index = i + 1;\n      } while (max_length + 0x14U <= u_var18);\n      *(int *)(value + 0x44) = i;\n    }\n  }\n  result_string = (char *)allocate_and_initialize_memory_080090c0(value);\n  *(char **)(value + 0x40) = result_string;\n  if ((temp_exponent < 0xf) && (is_negative)) {\n    if ((int)result_length < 1) {\n      if (result_length == 0) {\n        temp_index = 2;\n        result = sign;\n      }\n      else {\n        temp_index = (-result_length & 0xf) * 8;\n        temp_result = calculate_product_080004c8(sign,exponent_value,*(undefined4 *)(&DAT_08009fa8 + temp_index),\n                              *(undefined4 *)(&DAT_08009fac + temp_index));\n        exponent_value = (uint)((ulonglong)temp_result >> 0x20);\n        result = (uint)temp_result;\n        max_length = (int)-result_length >> 4;\n        if (max_length == 0) {\n          temp_index = 2;\n        }\n        else {\n          is_negative = false;\n          temp_index = 2;\n          temp_ptr3 = &DAT_08009f80;\n          do {\n            if (max_length << 0x1f < 0) {\n              temp_result = calculate_product_080004c8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),*temp_ptr3,temp_ptr3[1]\n                                   );\n              is_negative = true;\n              temp_index = temp_index + 1;\n            }\n            max_length = max_length >> 1;\n            temp_ptr3 = temp_ptr3 + 2;\n          } while (max_length != 0);\n          if (is_negative) {\n            result = (uint)temp_result;\n            exponent_value = (uint)((ulonglong)temp_result >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      u_var18 = (int)result_length >> 4;\n      temp_result2 = *(undefined8 *)(&DAT_08009fa8 + (result_length & 0xf) * 8);\n      temp_result = *(undefined8 *)(&DAT_08009fa8 + (result_length & 0xf) * 8);\n      if ((int)(u_var18 << 0x1b) < 0) {\n        temp_result3 = calculate_floating_point_0800071c(sign,exponent_value,0x7f73bf3c,0x75154fdd);\n        temp_value4 = (uint)((ulonglong)temp_result3 >> 0x20);\n        temp_value2 = (uint)temp_result3;\n        temp_index = 3;\n        u_var18 = u_var18 & 0xf;\n      }\n      else {\n        temp_index = 2;\n        temp_value4 = exponent_value;\n        temp_value2 = sign;\n      }\n      if (u_var18 != 0) {\n        temp_ptr3 = &DAT_08009f80;\n        do {\n          if ((int)(u_var18 << 0x1f) < 0) {\n            temp_result = calculate_product_080004c8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),*temp_ptr3,temp_ptr3[1]);\n            temp_index = temp_index + 1;\n          }\n          u_var18 = (int)u_var18 >> 1;\n          temp_ptr3 = temp_ptr3 + 2;\n          temp_result2 = temp_result;\n        } while (u_var18 != 0);\n      }\n      exponent_value = (uint)((ulonglong)temp_result2 >> 0x20);\n      result = (uint)temp_result2;\n      temp_result = calculate_floating_point_0800071c(temp_value2,temp_value4,result,exponent_value);\n      result = (uint)temp_result;\n      exponent_value = (uint)((ulonglong)temp_result >> 0x20);\n    }\n    temp_result = CONCAT44(exponent_value,result);\n    if ((is_zero) && (max_length = is_string_empty_080009ac(result,exponent_value,0,0x3ff00000), max_length != 0)) {\n      if (min_width == 0) {\n        temp_result = reverse_bits_080003f4(temp_index);\n        temp_result = calculate_product_080004c8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result,exponent_value);\n        temp_result = calculate_0800015c((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x401c0000);\n        u_var13 = (undefined4)temp_result;\n        temp_index = (int)((ulonglong)temp_result >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)max_exponent) {\n        temp_result = calculate_product_080004c8(result,exponent_value,0,0x40240000);\n        temp_result2 = reverse_bits_080003f4(temp_index + 1);\n        temp_result2 = calculate_product_080004c8((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),(int)temp_result,\n                              (int)((ulonglong)temp_result >> 0x20));\n        temp_result2 = calculate_0800015c((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0,0x401c0000);\n        u_var13 = (undefined4)temp_result2;\n        temp_value2 = max_exponent;\n        exponent_offset = result_length - 1;\n        temp_index = (int)((ulonglong)temp_result2 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    temp_result2 = reverse_bits_080003f4(temp_index);\n    temp_result2 = calculate_product_080004c8((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),result,exponent_value);\n    temp_result2 = calculate_0800015c((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0,0x401c0000);\n    u_var13 = (undefined4)temp_result2;\n    temp_index = (int)((ulonglong)temp_result2 >> 0x20) + -0x3400000;\n    if (min_width != 0) {\n      exponent_offset = result_length;\n      temp_value2 = min_width;\nLAB_08007cfa:\n      exponent_value = (uint)((ulonglong)temp_result >> 0x20);\n      result = (uint)temp_result;\n      digit = calculate_value_0800119c(result,exponent_value);\n      digit = digit + '0';\n      u_var16 = (&DAT_08009fa0)[temp_value2 * 2];\n      constant1 = (&DAT_08009fa4)[temp_value2 * 2];\n      temp_result = reverse_bits_080003f4();\n      temp_result = calculate_result_08000158(result,exponent_value,(int)temp_result,(int)((ulonglong)temp_result >> 0x20));\n      u_var23 = (undefined4)((ulonglong)temp_result >> 0x20);\n      temp_ptr2 = result_string + 1;\n      if (is_scientific_notation) {\n        temp_result2 = calculate_floating_point_0800071c(0,0x3fe00000,u_var16,constant1);\n        temp_result2 = calculate_result_08000158((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),u_var13,temp_index);\n        u_var13 = (undefined4)((ulonglong)temp_result2 >> 0x20);\n        *result_string = digit;\n        temp_index = check_if_null_080009e8_080009e8((int)temp_result2,u_var13,(int)temp_result,u_var23);\n        if (temp_index != 0) {\nLAB_08008784:\n          result_length = exponent_offset;\n          goto LAB_08008294;\n        }\n        temp_result3 = calculate_result_08000158(0,0x3ff00000,(int)temp_result,u_var23);\n        temp_index = check_if_null_080009e8_080009e8((int)temp_result2,u_var13,(int)temp_result3,(int)((ulonglong)temp_result3 >> 0x20));\n        if (temp_index == 0) {\n          if (temp_value2 != 1) {\n            temp_ptr1 = temp_ptr2;\n            do {\n              temp_result2 = calculate_product_080004c8((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0,0x40240000);\n              u_var13 = (undefined4)((ulonglong)temp_result2 >> 0x20);\n              temp_result = calculate_product_080004c8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x40240000);\n              digit = calculate_value_0800119c();\n              temp_result3 = reverse_bits_080003f4();\n              temp_result = calculate_result_08000158((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)temp_result3,\n                                    (int)((ulonglong)temp_result3 >> 0x20));\n              u_var16 = (undefined4)((ulonglong)temp_result >> 0x20);\n              digit = digit + '0';\n              temp_ptr2 = temp_ptr1 + 1;\n              *temp_ptr1 = digit;\n              temp_index = is_string_empty_080009ac((int)temp_result,u_var16,(int)temp_result2,u_var13);\n              if (temp_index != 0) {\n                result_length = exponent_offset;\n                goto LAB_08008294;\n              }\n              temp_result3 = calculate_result_08000158(0,0x3ff00000,(int)temp_result,u_var16);\n              temp_index = is_string_empty_080009ac((int)temp_result3,(int)((ulonglong)temp_result3 >> 0x20),(int)temp_result2,u_var13)\n              ;\n              if (temp_index != 0) goto LAB_08008798;\n              temp_ptr1 = temp_ptr2;\n            } while (temp_ptr2 != result_string + temp_value2);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        result_length = exponent_offset;\n      }\n      else {\n        temp_result2 = calculate_product_080004c8(u_var13,temp_index,u_var16,constant1);\n        u_var13 = (undefined4)((ulonglong)temp_result2 >> 0x20);\n        *result_string = digit;\n        if (temp_value2 != 1) {\n          temp_ptr1 = temp_ptr2;\n          do {\n            temp_result = calculate_product_080004c8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x40240000);\n            digit = calculate_value_0800119c();\n            temp_result3 = reverse_bits_080003f4();\n            temp_result = calculate_result_08000158((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)temp_result3,\n                                  (int)((ulonglong)temp_result3 >> 0x20));\n            temp_ptr2 = temp_ptr1 + 1;\n            *temp_ptr1 = digit + '0';\n            temp_ptr1 = temp_ptr2;\n          } while (temp_ptr2 != result_string + temp_value2);\n        }\n        u_var16 = (undefined4)((ulonglong)temp_result >> 0x20);\n        temp_result3 = calculate_0800015c((int)temp_result2,u_var13,0,0x3fe00000);\n        temp_index = is_string_empty_080009ac((int)temp_result3,(int)((ulonglong)temp_result3 >> 0x20),(int)temp_result,u_var16);\n        if (temp_index == 0) {\n          temp_result2 = calculate_result_08000158(0,0x3fe00000,(int)temp_result2,u_var13);\n          temp_index = check_if_null_080009e8_080009e8((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),(int)temp_result,u_var16);\n          temp_ptr1 = temp_ptr2;\n          if (temp_index == 0) goto LAB_08007e36;\n          do {\n            temp_ptr2 = temp_ptr1;\n            temp_ptr1 = temp_ptr2 + -1;\n          } while (temp_ptr2[-1] == '0');\n          goto LAB_08008784;\n        }\n        result_length = exponent_offset;\n        digit = temp_ptr2[-1];\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    temp_result = calculate_result_08000158(result,exponent_value,0,0x40140000);\n    u_var16 = (undefined4)((ulonglong)temp_result >> 0x20);\n    max_length = check_if_null_080009e8_080009e8((int)temp_result,u_var16,u_var13,temp_index);\n    if (max_length == 0) {\n      temp_index = is_string_empty_080009ac((int)temp_result,u_var16,u_var13,temp_index + -0x80000000);\n      if (temp_index == 0) goto LAB_08007e36;\n      max_length = 0;\n      temp_index = 0;\n      temp_ptr2 = result_string;\n      goto LAB_080084f0;\n    }\n    result_length = 0;\n    i = 0;\nLAB_08008406:\n    *result_string = '1';\n    result_length = result_length + 1;\n    temp_ptr2 = result_string + 1;\n    max_length = i;\n    temp_index = result_length;\nLAB_08008416:\n    extract_value_and_swap_0800910c(value,temp_index);\n    if (max_length == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    temp_ptr2 = result_string;\n    if ((-1 < temp_array[0]) && ((int)result_length < 0xf)) {\n      u_var13 = *(undefined4 *)(&DAT_08009fa8 + result_length * 8);\n      u_var16 = *(undefined4 *)(&DAT_08009fac + result_length * 8);\n      if ((-1 < (int)precision) || (0 < (int)min_width)) {\n        calculate_floating_point_0800071c(sign,u_var17,u_var13,u_var16);\n        is_zero = calculate_value_0800119c();\n        temp_result = reverse_bits_080003f4();\n        temp_result = calculate_product_080004c8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),u_var13,u_var16);\n        temp_result = calculate_result_08000158(sign,u_var17,(int)temp_result,(int)((ulonglong)temp_result >> 0x20));\n        *result_string = is_zero + 0x30;\n        temp_ptr2 = result_string + 1;\n        if (min_width != 1) {\n          temp_result = calculate_product_080004c8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x40240000);\n          temp_index = is_parameter_valid_08000998((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0);\n          while (temp_index == 0) {\n            u_var23 = (undefined4)((ulonglong)temp_result >> 0x20);\n            calculate_floating_point_0800071c((int)temp_result,u_var23,u_var13,u_var16);\n            is_zero = calculate_value_0800119c();\n            temp_result2 = reverse_bits_080003f4();\n            temp_result2 = calculate_product_080004c8((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),u_var13,u_var16);\n            temp_result = calculate_result_08000158((int)temp_result,u_var23,(int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20));\n            temp_ptr1 = temp_ptr2 + 1;\n            *temp_ptr2 = is_zero + 0x30;\n            temp_ptr2 = temp_ptr1;\n            if (min_width == (int)temp_ptr1 - (int)result_string) goto LAB_08007f3a;\n            temp_result = calculate_product_080004c8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x40240000);\n            temp_index = is_parameter_valid_08000998((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        temp_result = calculate_0800015c((int)temp_result,(int)((ulonglong)temp_result >> 0x20));\n        u_var23 = (undefined4)((ulonglong)temp_result >> 0x20);\n        temp_index = check_if_null_080009e8_080009e8((int)temp_result,u_var23,u_var13,u_var16);\n        if ((temp_index == 0) &&\n           ((temp_index = is_parameter_valid_08000998((int)temp_result,u_var23,u_var13,u_var16), temp_index == 0 ||\n            ((is_zero & 1) == 0)))) goto LAB_08008294;\n        digit = temp_ptr2[-1];\nLAB_08007f7c:\n        while (temp_ptr1 = temp_ptr2 + -1, digit == '9') {\n          if (result_string == temp_ptr1) {\n            *result_string = '0';\n            digit = temp_ptr2[-1];\n            result_length = result_length + 1;\n            temp_ptr1 = result_string;\n            break;\n          }\n          digit = temp_ptr2[-2];\n          temp_ptr2 = temp_ptr1;\n        }\n        *temp_ptr1 = digit + '\\x01';\n        goto LAB_08008294;\n      }\n      if (min_width == 0) {\n        temp_result = calculate_product_080004c8(u_var13,u_var16,0,0x40140000);\n        temp = check_parameters_080009d4((int)temp_result,(int)((ulonglong)temp_result >> 0x20),sign,u_var17);\n        max_length = 0;\n        result_length = 0;\n        i = 0;\n        temp_index = 0;\n        if (temp == 0) goto LAB_08008406;\n      }\n      else {\n        max_length = 0;\n        temp_index = 0;\n      }\nLAB_080084f0:\n      result_length = ~precision;\n      result_string = temp_ptr2;\n      goto LAB_08008416;\n    }\n    temp_index = remaining_digits;\n    if (is_scientific_notation) {\n      if ((int)precision < 2) {\n        if (is_negative) {\n          decimal_index = exponent_sign;\n          exponent_sign = exponent_sign + temp_array[0] + 0x433;\n          result_length = result_length + temp_array[0] + 0x433;\n        }\n        else {\n          decimal_index = exponent_sign;\n          exponent_sign = exponent_sign + (0x36 - max_shift);\n          result_length = result_length + (0x36 - max_shift);\n        }\n      }\n      else {\n        max_length = min_width - 1;\n        if (remaining_digits < max_length) {\n          leading_zero_count = leading_zero_count + (max_length - remaining_digits);\n          temp_index = 0;\n          remaining_digits = max_length;\n        }\n        else {\n          temp_index = remaining_digits - max_length;\n        }\n        if ((int)min_width < 0) {\n          decimal_index = exponent_sign - min_width;\n        }\n        else {\n          result_length = result_length + min_width;\n          decimal_index = exponent_sign;\n          exponent_sign = exponent_sign + min_width;\n        }\n      }\n      max_length = initialize_memory_08009244(value,1);\n    }\n    else {\n      decimal_index = exponent_sign;\n      max_length = 0;\n    }\n    if ((0 < decimal_index) && (0 < result_length)) {\n      i = decimal_index;\n      if (result_length <= decimal_index) {\n        i = result_length;\n      }\n      result_length = result_length - i;\n      exponent_sign = exponent_sign - i;\n      decimal_index = decimal_index - i;\n    }\n    if (remaining_digits != 0) {\n      if (is_scientific_notation) {\n        u_var13 = temp_value;\n        if (temp_index != 0) {\n          max_length = process_data_080093a4(value,max_length,temp_index);\n          u_var13 = initialize_memory_08009258(value,max_length,temp_value);\n          extract_value_and_swap_0800910c(value,temp_value);\n          temp_value = u_var13;\n          if (remaining_digits - temp_index == 0) goto LAB_08008062;\n        }\n        temp_value = process_data_080093a4(value,u_var13,remaining_digits - temp_index);\n      }\n      else {\n        temp_value = process_data_080093a4(value,temp_value,remaining_digits);\n      }\n    }\nLAB_08008062:\n    temp_index = initialize_memory_08009244(value,1);\n    if (leading_zero_count == 0) {\n      if (((int)precision < 2) && (sign == 0)) {\nLAB_0800835a:\n        if ((u_var17 & 0xfffff) == 0) {\n          u_var17 = u_var17 & 0x7ff00000;\n          if (u_var17 != 0) {\n            result_length = result_length + 1;\n            exponent_sign = exponent_sign + 1;\n            u_var17 = 1;\n          }\n        }\n        else {\n          u_var17 = 0;\n        }\n        is_negative = leading_zero_count != 0;\n        u_var18 = sign;\n        leading_zero_count = u_var17;\n        if (is_negative) goto LAB_080082d4;\n      }\n      i = 1;\n    }\n    else {\n      temp_result = process_data_080093a4(value,temp_index);\n      temp_index = (int)temp_result;\n      if (((int)precision < 2) && (sign == 0)) goto LAB_0800835a;\n      leading_zero_count = 0;\n      u_var18 = (uint)((ulonglong)temp_result >> 0x20);\nLAB_080082d4:\n      i = count_leading_zeros_080091a4(*(undefined4 *)(temp_index + *(int *)(temp_index + 0x10) * 4 + 0x10),u_var18);\n      i = 0x20 - i;\n    }\n    u_var18 = i + result_length & 0x1f;\n    if (u_var18 == 0) {\n      i = 0x1c;\nLAB_08008096:\n      result_length = result_length + i;\n      exponent_sign = exponent_sign + i;\n      decimal_index = decimal_index + i;\n    }\n    else {\n      if (4 < (int)(0x20 - u_var18)) {\n        i = 0x1c - u_var18;\n        goto LAB_08008096;\n      }\n      if (0x20 - u_var18 != 4) {\n        i = 0x3c - u_var18;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < exponent_sign) {\n      temp_value = allocate_and_initialize_memory_08009444(value,temp_value,exponent_sign);\n    }\n    if (0 < result_length) {\n      temp_index = allocate_and_initialize_memory_08009444(value,temp_index,result_length);\n    }\n    temp_ptr1 = result_string;\n    if ((is_zero) && (result_length = compare_arrays_080094f8(temp_value,temp_index), result_length < 0)) {\n      result_length = result_length - 1;\n      temp_value = calculate_checksum_08009120(value,temp_value,10,0);\n      if (is_scientific_notation) {\n        max_length = calculate_checksum_08009120(value,max_length,10,0);\n        if ((0 < (int)max_exponent) || ((int)precision < 3)) {\n          min_width = max_exponent;\n          goto LAB_080080de;\n        }\n      }\n      else if ((0 < (int)max_exponent) || ((int)precision < 3)) {\n        min_width = max_exponent;\n        goto LAB_0800820a;\n      }\n      min_width = max_exponent;\nLAB_080084e8:\n      if (min_width == 0) {\n        result_length = calculate_checksum_08009120(value,temp_index,5);\n        temp = compare_arrays_080094f8(temp_value,result_length);\n        i = max_length;\n        temp_index = result_length;\n        if (0 < temp) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)min_width < 1) && (2 < (int)precision)) goto LAB_080084e8;\n    if (is_scientific_notation) {\nLAB_080080de:\n      result = max_length;\n      if (0 < decimal_index) {\n        result = allocate_and_initialize_memory_08009444(value,max_length,decimal_index);\n      }\n      max_length = result;\n      if (leading_zero_count != 0) {\n        max_length = allocate_and_initialize_memory_080090c0(value,*(undefined4 *)(result + 4));\n        copy_memory_08001084(max_length + 0xc,result + 0xc,(*(int *)(result + 0x10) + 2) * 4);\n        max_length = allocate_and_initialize_memory_08009444(value,max_length,1);\n      }\nLAB_08008108:\n      result_length = calculate_division_080078c0(temp_value,temp_index);\n      i = compare_arrays_080094f8(temp_value,result);\n      temp = reverse_and_allocate_memory_08009530(value,temp_index,max_length);\n      temp_value = result_length + 0x30;\n      if (*(int *)(temp + 0xc) == 0) {\n        temp_int2 = compare_arrays_080094f8(temp_value);\n        extract_value_and_swap_0800910c(value,temp);\n        if ((temp_int2 != 0) || (precision != 0)) goto LAB_0800815a;\n        if ((sign & 1) != 0) {\n          temp_int2 = 0;\n          goto LAB_0800815a;\n        }\n        if (temp_value != 0x39) {\n          if (0 < i) goto LAB_0800874c;\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        temp_ptr2 = temp_ptr1 + 1;\n        digit = '9';\n        *temp_ptr1 = '9';\n        goto LAB_08008268;\n      }\n      extract_value_and_swap_0800910c(value,temp);\n      temp_int2 = 1;\nLAB_0800815a:\n      if ((i < 0) || (((i == 0 && (precision == 0)) && ((sign & 1) == 0)))) {\n        if (0 < temp_int2) {\n          temp_value = allocate_and_initialize_memory_08009444(value,temp_value,1);\n          i = compare_arrays_080094f8(temp_value,temp_index);\n          if ((0 < i) || ((i == 0 && (result_length << 0x1f < 0)))) {\n            if (temp_value == 0x39) goto LAB_08008752;\nLAB_0800874c:\n            temp_value = result_length + 0x31;\n          }\n        }\nLAB_080085a4:\n        temp_ptr2 = temp_ptr1 + 1;\n        *temp_ptr1 = (char)temp_value;\n        goto LAB_08008274;\n      }\n      temp_ptr2 = temp_ptr1 + 1;\n      if (0 < temp_int2) {\n        if (temp_value == 0x39) goto LAB_08008752;\n        *temp_ptr1 = (char)result_length + '1';\n        goto LAB_08008274;\n      }\n      *temp_ptr1 = (char)temp_value;\n      if (result_string + (min_width - 1) != temp_ptr1) {\n        temp_value = calculate_checksum_08009120(value,temp_value,10,0);\n        temp_ptr1 = temp_ptr2;\n        if (result == max_length) {\n          result = calculate_checksum_08009120(value,result,10,0);\n          max_length = result;\n        }\n        else {\n          result = calculate_checksum_08009120(value,result,10,0);\n          max_length = calculate_checksum_08009120(value,max_length,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    else {\nLAB_0800820a:\n      while( true ) {\n        temp_value = calculate_division_080078c0(temp_value,temp_index);\n        temp_value = temp_value + 0x30;\n        temp_ptr2 = temp_ptr1 + 1;\n        *temp_ptr1 = (char)temp_value;\n        if ((int)min_width <= (int)temp_ptr2 - (int)result_string) break;\n        temp_value = calculate_checksum_08009120(value,temp_value,10,0);\n        temp_ptr1 = temp_ptr2;\n      }\n      result = 0;\n    }\n    temp_value = allocate_and_initialize_memory_08009444(value,temp_value,1);\n    result_length = compare_arrays_080094f8(temp_value,temp_index);\n    digit = temp_ptr2[-1];\n    if ((0 < result_length) || ((result_length == 0 && (temp_value << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        temp_ptr1 = temp_ptr2 + -1;\n        if (digit != '9') goto code_r0x08008270;\n        if (result_string == temp_ptr1) {\n          *result_string = '1';\n          result_length = result_length + 1;\n          goto LAB_08008274;\n        }\n        digit = temp_ptr2[-2];\n        temp_ptr2 = temp_ptr1;\n      } while( true );\n    }\n    while (digit == '0') {\n      digit = temp_ptr2[-2];\n      temp_ptr2 = temp_ptr2 + -1;\n    }\nLAB_08008274:\n    extract_value_and_swap_0800910c(value,temp_index);\n    if (max_length == 0) goto LAB_08008294;\n    if ((result != 0) && (result != max_length)) {\n      extract_value_and_swap_0800910c(value);\n    }\n  }\n  extract_value_and_swap_0800910c(value,max_length);\nLAB_08008294:\n  extract_value_and_swap_0800910c(value,temp_value);\n  *temp_ptr2 = '\\0';\n  *status = result_length + 1;\n  if (result == (char **)0x0) {\n    return result_string;\n  }\n  *result = temp_ptr2;\n  return result_string;\ncode_r0x08008270:\n  *temp_ptr1 = digit + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "current_name": "convert_float_to_string_080079e8",
            "entrypoint": "0x080079e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080079e8": "convert_float_to_string_080079e8",
                "bVar1": "is_negative",
                "bVar2": "is_zero",
                "bVar25": "is_negative",
                "bVar3": "is_scientific_notation",
                "bVar5": "is_zero",
                "cVar4": "digit",
                "iVar14": "temp_index",
                "iVar15": "result_length",
                "iVar19": "max_length",
                "iVar24": "temp_value",
                "iVar7": "i",
                "iVar8": "temp_int2",
                "iVar9": "temp",
                "local_2c": "temp_array",
                "local_2c[0]": "temp_array[0]",
                "local_30": "max_shift",
                "local_34": "exponent_offset",
                "local_38": "max_exponent",
                "local_48": "temp_value2",
                "local_58": "leading_zero_count",
                "local_5c": "remaining_digits",
                "local_60": "decimal_index",
                "local_68": "min_width",
                "local_70": "exponent_sign",
                "local_74": "result_length",
                "local_7c": "exponent_value",
                "local_80": "result",
                "param_1": "value",
                "param_2": "param2",
                "param_3": "sign",
                "param_4": "exponent",
                "param_5": "precision",
                "param_6": "precision",
                "param_7": "status",
                "param_8": "is_negative",
                "param_9": "result",
                "pcVar10": "result_string",
                "pcVar20": "temp_ptr1",
                "pcVar21": "temp_ptr2",
                "puVar22": "temp_ptr3",
                "uStack_44": "temp_value4",
                "uVar11": "temp_exponent",
                "uVar12": "constant1",
                "uVar13": "u_var13",
                "uVar16": "u_var16",
                "uVar17": "u_var17",
                "uVar18": "u_var18",
                "uVar23": "u_var23",
                "uVar26": "temp_result",
                "uVar27": "temp_result2",
                "uVar28": "temp_result3",
                "uVar6": "temp_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800884c": {
            "additional_data": {
                "0xfef": {
                    "1": "offset_limit"
                },
                "0xfff": {
                    "1": "allocation_limit"
                },
                "DAT_20000454": {
                    "1": "data_1",
                    "2": "global_data_ptr"
                },
                "DAT_20000854": {
                    "1": "offset_constant"
                },
                "DAT_20000a14": {
                    "1": "total_allocated",
                    "2": "memory_offset"
                },
                "FUN_0800884c": {
                    "1": "allocate_memory_and_initialize",
                    "22": "allocate_and_initialize_memory",
                    "5": "initialize_and_allocate_memory"
                },
                "allocate_and_assign_memory_08009744": {
                    "1": "allocate_memory",
                    "8": "allocate_and_assign_memory"
                },
                "iVar1": {
                    "1": "memory_allocation_result",
                    "11": "allocation_result",
                    "2": "allocated_memory_1",
                    "3": "result",
                    "4": "allocated_memory"
                },
                "iVar2": {
                    "1": "allocated_memory_res2",
                    "2": "new_address",
                    "3": "adjusted_offset"
                },
                "initialize_data_080090a8": {
                    "1": "initialize_data_1",
                    "2": "initialize_data_a8",
                    "4": "initialize_global_data"
                },
                "initialize_data_080090b4": {
                    "1": "initialize_data_2",
                    "2": "initialize_data_b4"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "param_1",
                    "3": "data_pointer",
                    "4": "param",
                    "5": "input_param"
                },
                "param_2": {
                    "1": "param_2",
                    "19": "offset",
                    "2": "arg2",
                    "4": "size"
                },
                "uVar3": {
                    "1": "trimmed_value",
                    "2": "memory_size",
                    "3": "data_value",
                    "4": "data_size",
                    "5": "masked_value"
                }
            },
            "called": [
                "FUN_080090a8",
                "FUN_08009744",
                "FUN_080090b4"
            ],
            "calling": [
                "FUN_080088ec"
            ],
            "code": "\nundefined4 allocate_and_initialize_memory_0800884c(undefined4 input_param,int offset)\n\n{\n  int allocation_result;\n  int start_address;\n  uint mask;\n  \n  initialize_global_data();\n  mask = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  start_address = ((0xfef - offset) + mask & 0xfffff000) - 0x1000;\n  if (0xfff < start_address) {\n    allocation_result = allocate_and_assign_memory(input_param,0);\n    if (allocation_result == DAT_20000454 + mask) {\n      allocation_result = allocate_and_assign_memory(input_param,-start_address);\n      if (allocation_result != -1) {\n        DAT_20000a14 = DAT_20000a14 - start_address;\n        *(uint *)(DAT_20000454 + 4) = mask - start_address | 1;\n        initialize_data_b4(input_param);\n        return 1;\n      }\n      start_address = allocate_and_assign_memory(input_param,0);\n      if (0xf < start_address - DAT_20000454) {\n        DAT_20000a14 = start_address - DAT_20000854;\n        *(uint *)(DAT_20000454 + 4) = start_address - DAT_20000454 | 1;\n      }\n    }\n  }\n  initialize_data_b4(input_param);\n  return 0;\n}\n\n",
            "current_name": "allocate_and_initialize_memory_0800884c",
            "entrypoint": "0x0800884c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800884c": "allocate_and_initialize_memory_0800884c",
                "allocate_and_assign_memory_08009744": "allocate_and_assign_memory",
                "iVar1": "allocation_result",
                "iVar2": "start_address",
                "initialize_data_080090a8": "initialize_global_data",
                "initialize_data_080090b4": "initialize_data_b4",
                "param_1": "input_param",
                "param_2": "offset",
                "uVar3": "mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080088ec": {
            "additional_data": {
                "FUN_080088ec": {
                    "1": "initialize_and_process_data",
                    "2": "allocate_and_initialize_memory",
                    "6": "initialize_memory",
                    "9": "initialize_and_allocate_memory"
                },
                "allocate_and_initialize_memory_0800884c": {
                    "1": "allocate_memory"
                },
                "iVar1": {
                    "1": "temp1",
                    "2": "temp_var1",
                    "23": "index",
                    "3": "index1"
                },
                "iVar10": {
                    "1": "shift",
                    "2": "temp_var10",
                    "3": "counter",
                    "4": "count",
                    "5": "block_index"
                },
                "initialize_data_080090a8": {
                    "1": "initialize_data"
                },
                "initialize_data_080090b4": {
                    "1": "initialize_data2"
                },
                "param_1": {
                    "1": "func_param",
                    "2": "context",
                    "3": "input_param",
                    "4": "arg1",
                    "7": "param1",
                    "8": "param_1"
                },
                "param_2": {
                    "1": "ptr",
                    "2": "input_data",
                    "3": "arg2",
                    "4": "data",
                    "6": "param2"
                },
                "param_3": {
                    "1": "function_param3",
                    "11": "param_3",
                    "2": "unused_param",
                    "5": "arg3",
                    "7": "param3"
                },
                "param_4": {
                    "1": "parameter_4",
                    "11": "param_4",
                    "5": "arg4",
                    "7": "param4"
                },
                "puVar2": {
                    "1": "current_pointer",
                    "12": "ptr1",
                    "2": "pointer_1",
                    "3": "pointer1"
                },
                "puVar3": {
                    "1": "ptr3",
                    "12": "ptr2",
                    "2": "pointer_2",
                    "3": "pointer2",
                    "4": "next_ptr",
                    "6": "next_block"
                },
                "puVar4": {
                    "1": "ptr4",
                    "12": "ptr3",
                    "2": "prev_ptr",
                    "3": "pointer3"
                },
                "puVar7": {
                    "1": "temp_pointer2",
                    "12": "ptr4",
                    "2": "prev_ptr",
                    "3": "pointer4"
                },
                "puVar8": {
                    "1": "ptr8",
                    "12": "ptr5",
                    "3": "pointer5"
                },
                "puVar9": {
                    "1": "temp3",
                    "12": "ptr6",
                    "2": "header",
                    "3": "pointer6"
                },
                "uVar11": {
                    "1": "prev_used",
                    "2": "value1",
                    "3": "flag1",
                    "6": "flag"
                },
                "uVar12": {
                    "1": "temp4",
                    "2": "value4",
                    "3": "var4"
                },
                "uVar5": {
                    "1": "variable_1",
                    "11": "size",
                    "2": "value1",
                    "3": "size1",
                    "6": "block_size"
                },
                "uVar6": {
                    "1": "block_size",
                    "2": "next_size",
                    "3": "next_block_size",
                    "5": "offset",
                    "7": "size2"
                }
            },
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_0800884c"
            ],
            "calling": [
                "FUN_08005e9c",
                "FUN_08009adc",
                "FUN_080097cc",
                "FUN_08008af8"
            ],
            "code": "\nvoid initialize_and_allocate_memory_080088ec(undefined4 param_1,int param2,undefined4 param_3,undefined4 param_4)\n\n{\n  int index;\n  uint *ptr1;\n  uint *ptr2;\n  undefined *ptr3;\n  uint size;\n  uint size2;\n  undefined *ptr4;\n  undefined *ptr5;\n  undefined4 *ptr6;\n  int block_index;\n  uint flag;\n  uint flag2;\n  \n  if (param2 == 0) {\n    return;\n  }\n  initialize_data();\n  flag = *(uint *)(param2 + -4);\n  ptr1 = (uint *)(param2 + -8);\n  size = flag & 0xfffffffe;\n  ptr2 = (uint *)((int)ptr1 + size);\n  size2 = ptr2[1] & 0xfffffffc;\n  if (DAT_20000454 == ptr2) {\n    size = size + size2;\n    if ((flag & 1) == 0) {\n      ptr1 = (uint *)((int)ptr1 - *(int *)(param2 + -8));\n      size2 = ptr1[2];\n      flag = ptr1[3];\n      size = size + *(int *)(param2 + -8);\n      *(uint *)(size2 + 0xc) = flag;\n      *(uint *)(flag + 8) = size2;\n    }\n    size2 = DAT_20000858;\n    ptr1[1] = size | 1;\n    DAT_20000454 = ptr1;\n    if (size2 <= size) {\n      allocate_memory(param_1,DAT_20000a44);\n    }\nLAB_080089f0:\n    initialize_data2(param_1);\n    return;\n  }\n  ptr2[1] = size2;\n  if ((flag & 1) == 0) {\n    ptr1 = (uint *)((int)ptr1 - *(int *)(param2 + -8));\n    ptr6 = (undefined4 *)ptr1[2];\n    size = size + *(int *)(param2 + -8);\n    flag = *(uint *)((int)ptr2 + size2 + 4) & 1;\n    if ((uint **)ptr6 == &DAT_20000454) {\n      if (flag == 0) {\n        flag = ptr2[2];\n        flag2 = ptr2[3];\n        size = size + size2;\n        *(uint *)(flag + 0xc) = flag2;\n        *(uint *)(flag2 + 8) = flag;\n        ptr1[1] = size | 1;\n        *(uint *)((int)ptr1 + size) = size;\n      }\n      else {\n        ptr1[1] = size | 1;\n        *ptr2 = size;\n      }\n      goto LAB_080089f0;\n    }\n    flag2 = ptr1[3];\n    ptr6[3] = flag2;\n    *(undefined4 **)(flag2 + 8) = ptr6;\n  }\n  else {\n    flag = *(uint *)((int)ptr2 + size2 + 4) & 1;\n  }\n  if (flag == 0) {\n    ptr6 = (undefined4 *)ptr2[2];\n    size = size + size2;\n    if ((uint **)ptr6 == &DAT_20000454) {\n      DAT_2000045c = ptr1;\n      DAT_20000460 = ptr1;\n      ptr1[2] = (uint)&DAT_20000454;\n      ptr1[3] = (uint)&DAT_20000454;\n      ptr1[1] = size | 1;\n      *(uint *)((int)ptr1 + size) = size;\n      goto LAB_080089f0;\n    }\n    size2 = ptr2[3];\n    ptr6[3] = size2;\n    *(undefined4 **)(size2 + 8) = ptr6;\n    ptr1[1] = size | 1;\n    *(uint *)((int)ptr1 + size) = size;\n  }\n  else {\n    ptr1[1] = size | 1;\n    *(uint *)((int)ptr1 + size) = size;\n  }\n  if (size < 0x200) {\n    block_index = (size >> 3) + 1;\n    size = 1 << ((int)(size >> 3) >> 2 & 0xffU) | (uint)DAT_20000450;\n    size2 = *(uint *)(&DAT_2000044c + block_index * 8);\n    ptr1[2] = size2;\n    ptr1[3] = (uint)(&DAT_20000444 + block_index * 8);\n    DAT_20000450 = (undefined *)size;\n    *(uint **)(&DAT_2000044c + block_index * 8) = ptr1;\n    *(uint **)(size2 + 0xc) = ptr1;\n    initialize_data2(param_1,ptr1,size,param_4);\n    return;\n  }\n  size2 = size >> 9;\n  if (size2 < 5) {\n    block_index = ((size >> 6) + 0x39) * 8;\n    index = (size >> 6) + 0x38;\n  }\n  else if (size2 < 0x15) {\n    block_index = (size2 + 0x5c) * 8;\n    index = size2 + 0x5b;\n  }\n  else if (size2 < 0x55) {\n    block_index = ((size >> 0xc) + 0x6f) * 8;\n    index = (size >> 0xc) + 0x6e;\n  }\n  else if (size2 < 0x155) {\n    block_index = ((size >> 0xf) + 0x78) * 8;\n    index = (size >> 0xf) + 0x77;\n  }\n  else if (size2 < 0x555) {\n    block_index = ((size >> 0x12) + 0x7d) * 8;\n    index = (size >> 0x12) + 0x7c;\n  }\n  else {\n    block_index = 0x3f8;\n    index = 0x7e;\n  }\n  ptr3 = *(undefined **)(&DAT_2000044c + block_index);\n  ptr4 = &DAT_20000444 + block_index;\n  if (ptr4 == ptr3) {\n    ptr3 = (undefined *)(1 << (index >> 2 & 0xffU) | (uint)DAT_20000450);\n    ptr5 = ptr4;\n    DAT_20000450 = ptr3;\n  }\n  else {\n    do {\n      ptr5 = ptr3;\n      if ((*(uint *)(ptr3 + 4) & 0xfffffffc) <= size) break;\n      ptr3 = *(undefined **)(ptr3 + 8);\n      ptr5 = ptr4;\n    } while (ptr4 != ptr3);\n    ptr4 = *(undefined **)(ptr5 + 0xc);\n  }\n  ptr1[2] = (uint)ptr5;\n  ptr1[3] = (uint)ptr4;\n  *(uint **)(ptr4 + 8) = ptr1;\n  *(uint **)(ptr5 + 0xc) = ptr1;\n  initialize_data2(param_1,ptr1,ptr3,param_4);\n  return;\n}\n\n",
            "current_name": "initialize_and_allocate_memory_080088ec",
            "entrypoint": "0x080088ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080088ec": "initialize_and_allocate_memory_080088ec",
                "allocate_and_initialize_memory_0800884c": "allocate_memory",
                "iVar1": "index",
                "iVar10": "block_index",
                "initialize_data_080090a8": "initialize_data",
                "initialize_data_080090b4": "initialize_data2",
                "param_2": "param2",
                "puVar2": "ptr1",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "puVar7": "ptr4",
                "puVar8": "ptr5",
                "puVar9": "ptr6",
                "uVar11": "flag",
                "uVar12": "flag2",
                "uVar5": "size",
                "uVar6": "size2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008ad4": {
            "additional_data": {
                "*(int *)(DAT_2000001c + 0x34)": {
                    "1": "address"
                },
                "0x2000001c": {
                    "1": "base_address"
                },
                "0x2000085c": {
                    "1": "default_address_offset",
                    "4": "default_address",
                    "5": "default_value",
                    "8": "default_offset"
                },
                "0x34": {
                    "1": "constant",
                    "2": "offset"
                },
                "0xf0": {
                    "1": "additional_offset",
                    "2": "adjustment_offset"
                },
                "DAT_2000001c": {
                    "3": "base_address"
                },
                "FUN_08008ad4": {
                    "1": "calculate_updated_value",
                    "2": "get_adjusted_value",
                    "3": "get_memory_address",
                    "4": "calculate_offset",
                    "6": "calculate_adjusted_value"
                },
                "iVar1": {
                    "1": "ptr_value",
                    "4": "current_address",
                    "5": "current_value",
                    "8": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nint calculate_adjusted_value_08008ad4(void)\n\n{\n  int value;\n  \n  value = *(int *)(DAT_2000001c + 0x34);\n  if (value == 0) {\n    value = 0x2000085c;\n  }\n  return value + 0xf0;\n}\n\n",
            "current_name": "calculate_adjusted_value_08008ad4",
            "entrypoint": "0x08008ad4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008ad4": "calculate_adjusted_value_08008ad4",
                "iVar1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008af0": {
            "called": [],
            "calling": [
                "FUN_080090a8",
                "FUN_080098c0"
            ],
            "code": "\nvoid FUNC_08008af0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08008af0",
            "entrypoint": "0x08008af0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08008af0": "FUNC_08008af0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08008af4": {
            "called": [],
            "calling": [
                "FUN_080098c0",
                "FUN_080090b4"
            ],
            "code": "\nvoid FUNC_08008af4(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08008af4",
            "entrypoint": "0x08008af4",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08008af4": "FUNC_08008af4"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08008af8": {
            "additional_data": {
                "FUN_08008af8": {
                    "1": "memory_allocation",
                    "12": "allocate_and_initialize_memory",
                    "8": "allocate_memory"
                },
                "aligned_size": {
                    "1": "aligned_size"
                },
                "alignment": {
                    "1": "alignment"
                },
                "allocated_block": {
                    "1": "allocated_block"
                },
                "allocated_memory": {
                    "1": "allocated_memory"
                },
                "block": {
                    "1": "block"
                },
                "block_diff": {
                    "1": "block_diff"
                },
                "block_diff_rounded": {
                    "1": "block_diff_rounded"
                },
                "block_size": {
                    "1": "block_size"
                },
                "current_block": {
                    "1": "current_block"
                },
                "iVar14": {
                    "1": "offset",
                    "2": "var_8",
                    "3": "temp3",
                    "4": "index2"
                },
                "iVar4": {
                    "1": "temp_int1",
                    "2": "var_3",
                    "3": "index",
                    "4": "var3"
                },
                "initial_block": {
                    "1": "initial_block"
                },
                "new_block": {
                    "1": "new_block"
                },
                "next_offset": {
                    "1": "next_offset"
                },
                "offset": {
                    "1": "offset"
                },
                "param_1": {
                    "1": "ptr_param",
                    "2": "memory",
                    "3": "result",
                    "5": "memory_ptr"
                },
                "param_2": {
                    "1": "block_size",
                    "2": "memory_size",
                    "25": "size"
                },
                "piVar11": {
                    "1": "ptr",
                    "16": "result",
                    "2": "result_pointer",
                    "8": "result_ptr"
                },
                "puVar1": {
                    "1": "initial_block",
                    "10": "ptr1",
                    "2": "pointer_1",
                    "3": "temp_ptr",
                    "4": "pointer1"
                },
                "puVar10": {
                    "1": "temp_ptr_3",
                    "2": "temp_ptr5",
                    "3": "pointer5",
                    "9": "ptr5"
                },
                "puVar15": {
                    "1": "temp_ptr_4",
                    "2": "pointer_6",
                    "3": "pointer6",
                    "5": "ptr6"
                },
                "puVar16": {
                    "1": "temp_ptr",
                    "2": "pointer_7",
                    "3": "pointer7",
                    "5": "ptr7"
                },
                "puVar5": {
                    "1": "start_address",
                    "11": "ptr2",
                    "2": "block_ptr",
                    "4": "pointer2"
                },
                "puVar8": {
                    "1": "temp_ptr_3",
                    "11": "ptr3",
                    "2": "temp_ptr3",
                    "3": "pointer3"
                },
                "puVar9": {
                    "1": "temp_ptr_4",
                    "11": "ptr4",
                    "2": "temp_ptr4",
                    "3": "pointer4"
                },
                "requested_size": {
                    "1": "requested_size"
                },
                "search_block": {
                    "1": "search_block"
                },
                "size_diff": {
                    "1": "size_diff"
                },
                "size_param": {
                    "1": "required_size"
                },
                "uVar12": {
                    "1": "new_size",
                    "2": "var_6",
                    "6": "adjusted_size"
                },
                "uVar13": {
                    "1": "temp_var_13",
                    "2": "temp2",
                    "9": "aligned_size"
                },
                "uVar2": {
                    "1": "temp_var",
                    "2": "var_1",
                    "4": "temp1"
                },
                "uVar3": {
                    "1": "var_3",
                    "2": "temp_var_2",
                    "4": "temp2"
                },
                "uVar6": {
                    "1": "var_6",
                    "2": "temp_var_4",
                    "3": "temp3",
                    "4": "var4"
                },
                "uVar7": {
                    "1": "variable_5",
                    "2": "var_5",
                    "3": "temp4",
                    "4": "var5"
                }
            },
            "called": [
                "FUN_080090a8",
                "FUN_08009744",
                "FUN_080090b4",
                "FUN_080088ec"
            ],
            "calling": [
                "FUN_08005e9c",
                "FUN_08009adc",
                "FUN_080097cc",
                "FUN_08009980"
            ],
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_and_initialize_memory_08008af8(undefined4 *memory_ptr,uint size)\n\n{\n  undefined *ptr1;\n  uint temp1;\n  uint temp2;\n  int var3;\n  undefined *ptr2;\n  uint var4;\n  uint temp2;\n  undefined4 *ptr3;\n  undefined *ptr4;\n  undefined *ptr5;\n  int *result;\n  uint adjusted_size;\n  uint aligned_size;\n  int index2;\n  undefined4 *ptr6;\n  undefined4 *ptr7;\n  \n  adjusted_size = size + 0xb;\n  if (adjusted_size < 0x17) {\n    if (0x10 < size) goto LAB_08008c7a;\n    initialize_data_080090a8();\n    aligned_size = 0x10;\n    var3 = 0x18;\n    adjusted_size = 2;\nLAB_08008b18:\n    ptr5 = *(undefined **)((int)&DAT_20000450 + var3);\n    if ((ptr5 != &DAT_20000444 + var3) ||\n       (ptr5 = *(undefined **)((int)&DAT_20000458 + var3), &DAT_2000044c + var3 != ptr5)) {\n      var3 = *(int *)(ptr5 + 0xc);\n      ptr2 = ptr5 + (*(uint *)(ptr5 + 4) & 0xfffffffc);\n      adjusted_size = *(uint *)(ptr2 + 4);\nLAB_08008b34:\n      index2 = *(int *)(ptr5 + 8);\n      *(int *)(index2 + 0xc) = var3;\n      *(int *)(var3 + 8) = index2;\n      *(uint *)(ptr2 + 4) = adjusted_size | 1;\n      initialize_data_080090b4(memory_ptr);\n      return (int *)(ptr5 + 8);\n    }\n    adjusted_size = adjusted_size + 2;\n  }\n  else {\n    aligned_size = adjusted_size & 0xfffffff8;\n    if (((int)aligned_size < 0) || (aligned_size < size)) {\nLAB_08008c7a:\n      *memory_ptr = 0xc;\n      return (int *)0x0;\n    }\n    initialize_data_080090a8();\n    if (aligned_size < 0x1f8) {\n      adjusted_size = adjusted_size >> 3;\n      var3 = aligned_size + 8;\n      goto LAB_08008b18;\n    }\n    temp1 = adjusted_size >> 9;\n    if (temp1 == 0) {\n      var3 = 0x200;\n      var4 = 0x40;\n      temp1 = 0x3f;\n    }\n    else if (temp1 < 5) {\n      var4 = (adjusted_size >> 6) + 0x39;\n      temp1 = (adjusted_size >> 6) + 0x38;\n      var3 = var4 * 8;\n    }\n    else if (temp1 < 0x15) {\n      var4 = temp1 + 0x5c;\n      temp1 = temp1 + 0x5b;\n      var3 = var4 * 8;\n    }\n    else if (temp1 < 0x55) {\n      var4 = (adjusted_size >> 0xc) + 0x6f;\n      temp1 = (adjusted_size >> 0xc) + 0x6e;\n      var3 = var4 * 8;\n    }\n    else if (temp1 < 0x155) {\n      var4 = (adjusted_size >> 0xf) + 0x78;\n      temp1 = (adjusted_size >> 0xf) + 0x77;\n      var3 = var4 * 8;\n    }\n    else if (temp1 < 0x555) {\n      var4 = (adjusted_size >> 0x12) + 0x7d;\n      temp1 = (adjusted_size >> 0x12) + 0x7c;\n      var3 = var4 * 8;\n    }\n    else {\n      var3 = 0x3f8;\n      var4 = 0x7f;\n      temp1 = 0x7e;\n    }\n    for (ptr5 = *(undefined **)((int)&DAT_20000450 + var3); adjusted_size = var4,\n        &DAT_20000444 + var3 != ptr5; ptr5 = *(undefined **)(ptr5 + 0xc)) {\n      index2 = (*(uint *)(ptr5 + 4) & 0xfffffffc) - aligned_size;\n      adjusted_size = temp1;\n      if (0xf < index2) break;\n      if (-1 < index2) {\n        ptr2 = ptr5 + (*(uint *)(ptr5 + 4) & 0xfffffffc);\n        adjusted_size = *(uint *)(ptr2 + 4);\n        var3 = *(int *)(ptr5 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  ptr6 = DAT_2000045c;\n  if ((undefined **)DAT_2000045c == &DAT_20000454) {\n    var4 = 1 << ((int)adjusted_size >> 2 & 0xffU);\n    temp1 = DAT_20000450;\n    if (var4 <= DAT_20000450) goto LAB_08008c06;\n  }\n  else {\n    var4 = DAT_2000045c[1];\n    temp2 = var4 & 0xfffffffc;\n    temp1 = temp2 - aligned_size;\n    if (0xf < (int)temp1) {\n      ptr7 = (undefined4 *)(aligned_size + (int)DAT_2000045c);\n      DAT_2000045c[1] = aligned_size | 1;\n      DAT_2000045c = ptr7;\n      DAT_20000460 = ptr7;\n      ptr7[2] = &DAT_20000454;\n      ptr7[3] = &DAT_20000454;\n      ptr7[1] = temp1 | 1;\n      *(uint *)((int)ptr6 + temp2) = temp1;\n      initialize_data_080090b4(memory_ptr);\n      return ptr6 + 2;\n    }\n    DAT_2000045c = &DAT_20000454;\n    DAT_20000460 = &DAT_20000454;\n    if (-1 < (int)temp1) {\n      *(uint *)((int)ptr6 + temp2 + 4) = *(uint *)((int)ptr6 + temp2 + 4) | 1;\n      initialize_data_080090b4(memory_ptr);\n      return ptr6 + 2;\n    }\n    if (temp2 < 0x200) {\n      var3 = (var4 >> 3) + 1;\n      index2 = *(int *)(&DAT_2000044c + var3 * 8);\n      temp1 = 1 << ((int)(var4 >> 3) >> 2 & 0xffU) | DAT_20000450;\n      ptr6[2] = index2;\n      ptr6[3] = &DAT_20000444 + var3 * 8;\n      DAT_20000450 = temp1;\n      *(undefined4 **)(&DAT_2000044c + var3 * 8) = ptr6;\n      *(undefined4 **)(index2 + 0xc) = ptr6;\n    }\n    else {\n      temp1 = var4 >> 9;\n      if (temp1 < 5) {\n        var3 = ((var4 >> 6) + 0x39) * 8;\n        index2 = (var4 >> 6) + 0x38;\n      }\n      else if (temp1 < 0x15) {\n        var3 = (temp1 + 0x5c) * 8;\n        index2 = temp1 + 0x5b;\n      }\n      else if (temp1 < 0x55) {\n        var3 = ((var4 >> 0xc) + 0x6f) * 8;\n        index2 = (var4 >> 0xc) + 0x6e;\n      }\n      else if (temp1 < 0x155) {\n        var3 = ((var4 >> 0xf) + 0x78) * 8;\n        index2 = (var4 >> 0xf) + 0x77;\n      }\n      else if (temp1 < 0x555) {\n        var3 = ((var4 >> 0x12) + 0x7d) * 8;\n        index2 = (var4 >> 0x12) + 0x7c;\n      }\n      else {\n        var3 = 0x3f8;\n        index2 = 0x7e;\n      }\n      ptr5 = *(undefined **)(&DAT_2000044c + var3);\n      ptr2 = &DAT_20000444 + var3;\n      if (ptr2 == ptr5) {\n        DAT_20000450 = 1 << (index2 >> 2 & 0xffU) | DAT_20000450;\n      }\n      else {\n        do {\n          if ((*(uint *)(ptr5 + 4) & 0xfffffffc) <= temp2) break;\n          ptr5 = *(undefined **)(ptr5 + 8);\n        } while (ptr2 != ptr5);\n        ptr2 = *(undefined **)(ptr5 + 0xc);\n      }\n      temp1 = DAT_20000450;\n      ptr6[2] = ptr5;\n      ptr6[3] = ptr2;\n      *(undefined4 **)(ptr2 + 8) = ptr6;\n      *(undefined4 **)(ptr5 + 0xc) = ptr6;\n    }\n    var4 = 1 << ((int)adjusted_size >> 2 & 0xffU);\n    if (var4 <= temp1) {\nLAB_08008c06:\n      if ((var4 & temp1) == 0) {\n        adjusted_size = adjusted_size & 0xfffffffc;\n        do {\n          var4 = var4 << 1;\n          adjusted_size = adjusted_size + 4;\n        } while ((var4 & temp1) == 0);\n      }\n      do {\n        ptr7 = (undefined4 *)(&DAT_2000044c + adjusted_size * 8);\n        temp1 = adjusted_size;\n        ptr6 = ptr7;\n        do {\n          for (ptr3 = (undefined4 *)ptr6[3]; ptr6 != ptr3;\n              ptr3 = (undefined4 *)ptr3[3]) {\n            temp2 = ptr3[1] & 0xfffffffc;\n            temp2 = temp2 - aligned_size;\n            if (0xf < (int)temp2) {\n              index2 = ptr3[2];\n              var3 = ptr3[3];\n              ptr6 = (undefined4 *)(aligned_size + (int)ptr3);\n              ptr3[1] = aligned_size | 1;\n              *(int *)(index2 + 0xc) = var3;\n              *(int *)(var3 + 8) = index2;\n              DAT_2000045c = ptr6;\n              DAT_20000460 = ptr6;\n              ptr6[2] = &DAT_20000454;\n              ptr6[3] = &DAT_20000454;\n              ptr6[1] = temp2 | 1;\n              *(uint *)((int)ptr3 + temp2) = temp2;\n              initialize_data_080090b4(memory_ptr);\n              return ptr3 + 2;\n            }\n            if (-1 < (int)temp2) {\n              var3 = ptr3[3];\n              index2 = ptr3[2];\n              *(uint *)((int)ptr3 + temp2 + 4) = *(uint *)((int)ptr3 + temp2 + 4) | 1;\n              *(int *)(index2 + 0xc) = var3;\n              *(int *)(var3 + 8) = index2;\n              initialize_data_080090b4(memory_ptr);\n              return ptr3 + 2;\n            }\n          }\n          temp1 = temp1 + 1;\n          ptr6 = ptr6 + 2;\n        } while ((temp1 & 3) != 0);\n        do {\n          temp2 = adjusted_size & 3;\n          ptr6 = ptr7 + -2;\n          adjusted_size = adjusted_size - 1;\n          if (temp2 == 0) {\n            DAT_20000450 = DAT_20000450 & ~var4;\n            break;\n          }\n          ptr7 = (undefined4 *)*ptr7;\n        } while (ptr7 == ptr6);\n        var4 = var4 * 2;\n        if ((DAT_20000450 <= var4 && var4 - DAT_20000450 != 0) || (adjusted_size = temp1, var4 == 0))\n        break;\n        for (; (var4 & DAT_20000450) == 0; var4 = var4 << 1) {\n          adjusted_size = adjusted_size + 4;\n        }\n      } while( true );\n    }\n  }\n  ptr5 = DAT_20000454;\n  adjusted_size = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  if ((aligned_size <= adjusted_size) && (temp1 = adjusted_size - aligned_size, 0xf < (int)temp1)) goto LAB_08008dac;\n  if (DAT_20000854 == (undefined *)0xffffffff) {\n    temp1 = aligned_size + DAT_20000a44 + 0x10;\n  }\n  else {\n    temp1 = aligned_size + DAT_20000a44 + 0x100f & 0xfffff000;\n  }\n  ptr2 = (undefined *)allocate_and_assign_memory_08009744(memory_ptr,temp1);\n  if (ptr2 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    adjusted_size = *(uint *)(DAT_20000454 + 4);\n  }\n  else {\n    ptr1 = ptr5 + adjusted_size;\n    if (ptr1 < ptr2 || ptr1 == ptr2) {\n      ptr4 = DAT_20000a14 + temp1;\n      if ((ptr1 != ptr2) || (((uint)ptr1 & 0xfff) != 0)) goto LAB_08008d02;\n      DAT_20000a14 = ptr4;\n      *(uint *)(DAT_20000454 + 4) = adjusted_size + temp1 | 1;\n    }\n    else {\n      if (ptr5 != &DAT_2000044c) goto LAB_08008ed8;\nLAB_08008d02:\n      DAT_20000a14 = DAT_20000a14 + temp1;\n      ptr4 = ptr2;\n      if (DAT_20000854 != (undefined *)0xffffffff) {\n        DAT_20000a14 = DAT_20000a14 + ((int)ptr2 - (int)ptr1);\n        ptr4 = DAT_20000854;\n      }\n      DAT_20000854 = ptr4;\n      var4 = (uint)ptr2 & 7;\n      if (var4 == 0) {\n        var3 = 0x1000;\n      }\n      else {\n        ptr2 = ptr2 + (8 - var4);\n        var3 = 0x1008 - var4;\n      }\n      var3 = var3 - ((uint)(ptr2 + temp1) & 0xfff);\n      index2 = allocate_and_assign_memory_08009744(memory_ptr,var3);\n      if (index2 == -1) {\n        temp1 = 1;\n        var3 = 0;\n      }\n      else {\n        temp1 = (index2 - (int)ptr2) + var3 | 1;\n      }\n      ptr4 = DAT_20000a14 + var3;\n      DAT_20000454 = ptr2;\n      DAT_20000a14 = ptr4;\n      *(uint *)(ptr2 + 4) = temp1;\n      if (ptr5 != &DAT_2000044c) {\n        if (adjusted_size < 0x10) {\n          *(undefined4 *)(ptr2 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        adjusted_size = adjusted_size - 0xc & 0xfffffff8;\n        *(uint *)(ptr5 + 4) = *(uint *)(ptr5 + 4) & 1 | adjusted_size;\n        *(undefined4 *)(ptr5 + adjusted_size + 4) = 5;\n        *(undefined4 *)(ptr5 + adjusted_size + 8) = 5;\n        if (0xf < adjusted_size) {\n          initialize_and_allocate_memory_080088ec(memory_ptr,ptr5 + 8);\n          ptr4 = DAT_20000a14;\n        }\n      }\n    }\n    if (DAT_20000a3c < ptr4) {\n      DAT_20000a3c = ptr4;\n    }\n    adjusted_size = *(uint *)(DAT_20000454 + 4);\n    if (DAT_20000a40 < ptr4) {\n      DAT_20000a40 = ptr4;\n    }\n  }\n  temp1 = (adjusted_size & 0xfffffffc) - aligned_size;\n  if ((aligned_size <= (adjusted_size & 0xfffffffc)) && (0xf < (int)temp1)) {\nLAB_08008dac:\n    ptr5 = DAT_20000454 + aligned_size;\n    *(uint *)(DAT_20000454 + 4) = aligned_size | 1;\n    result = (int *)(DAT_20000454 + 8);\n    DAT_20000454 = ptr5;\n    *(uint *)(ptr5 + 4) = temp1 | 1;\n    initialize_data_080090b4(memory_ptr);\n    return result;\n  }\nLAB_08008eee:\n  initialize_data_080090b4(memory_ptr);\n  return (int *)0x0;\n}\n\n",
            "current_name": "allocate_and_initialize_memory_08008af8",
            "entrypoint": "0x08008af8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008af8": "allocate_and_initialize_memory_08008af8",
                "iVar14": "index2",
                "iVar4": "var3",
                "param_1": "memory_ptr",
                "param_2": "size",
                "piVar11": "result",
                "puVar1": "ptr1",
                "puVar10": "ptr5",
                "puVar15": "ptr6",
                "puVar16": "ptr7",
                "puVar5": "ptr2",
                "puVar8": "ptr3",
                "puVar9": "ptr4",
                "uVar12": "adjusted_size",
                "uVar13": "aligned_size",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar6": "var4",
                "uVar7": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800901c": {
            "additional_data": {
                "FUN_0800901c": {
                    "1": "find_matching_byte",
                    "17": "find_byte_sequence",
                    "2": "find_pattern",
                    "6": "find_first_occurrence"
                },
                "LAB_0800904a": {
                    "1": "loop_start"
                },
                "LAB_08009050": {
                    "1": "byte_not_found"
                },
                "LAB_0800906c": {
                    "1": "byte_found"
                },
                "bVar5": {
                    "1": "end_reached",
                    "2": "is_equal",
                    "4": "is_end",
                    "5": "is_empty"
                },
                "byte": {
                    "1": "current_byte"
                },
                "param_1": {
                    "1": "byte_array",
                    "11": "data",
                    "2": "data_ptr",
                    "3": "buffer",
                    "8": "array"
                },
                "param_2": {
                    "1": "key",
                    "3": "byte_sequence",
                    "4": "byte_to_find",
                    "5": "byte",
                    "7": "pattern"
                },
                "param_3": {
                    "1": "buffer_length",
                    "21": "length",
                    "3": "size",
                    "4": "array_length"
                },
                "puVar3": {
                    "1": "current_address",
                    "2": "current_data",
                    "3": "ptr",
                    "5": "current_byte",
                    "6": "current"
                },
                "uVar1": {
                    "1": "current_value",
                    "10": "xor_result",
                    "5": "result",
                    "9": "xored_value"
                },
                "uVar2": {
                    "1": "shifted_sequence",
                    "2": "byte_sequence",
                    "3": "combined_byte_sequence",
                    "4": "combined_byte",
                    "5": "combined_value"
                },
                "uVar4": {
                    "1": "byte_to_find_mask",
                    "2": "target_byte",
                    "4": "masked_byte",
                    "5": "masked_value",
                    "6": "first_byte"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nuint * find_byte_sequence_0800901c(uint *data,uint pattern,uint length)\n\n{\n  uint xor_result;\n  uint combined_value;\n  uint *current;\n  uint first_byte;\n  bool is_empty;\n  \n  first_byte = pattern & 0xff;\n  if (((uint)data & 3) == 0) {\nloop_start:\n    if (3 < length) {\n      combined_value = (pattern & 0xff) << 8 | first_byte;\n      current = data;\n      do {\n        xor_result = *current ^ (combined_value | combined_value << 0x10);\n        data = current + 1;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) goto loop_end;\n        length = length - 4;\n        current = data;\n      } while (3 < length);\n    }\n    current = data;\n    if (length == 0) {\n      data = (uint *)0x0;\n    }\n    else {\nloop_end:\n      data = current;\n      if (*(current_byte *)data != first_byte) {\n        current = (uint *)(length + (int)data);\n        do {\n          data = (uint *)((int)data + 1);\n          if (current == data) goto exit;\n        } while (*(current_byte *)data != first_byte);\n      }\n    }\n  }\n  else {\n    combined_value = length - 1;\n    if (length == 0) {\nexit:\n      data = (uint *)0x0;\n    }\n    else if (*(current_byte *)data != first_byte) {\n      current = (uint *)((int)data + 1);\n      do {\n        data = current;\n        length = combined_value;\n        if (((uint)data & 3) == 0) goto loop_start;\n        is_empty = combined_value == 0;\n        combined_value = combined_value - 1;\n        if (is_empty) goto exit;\n        current = (uint *)((int)data + 1);\n      } while (*(current_byte *)data != first_byte);\n    }\n  }\n  return data;\n}\n\n",
            "current_name": "find_byte_sequence_0800901c",
            "entrypoint": "0x0800901c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800901c": "find_byte_sequence_0800901c",
                "LAB_0800904a": "loop_start",
                "LAB_08009050": "loop_end",
                "LAB_0800906c": "exit",
                "bVar5": "is_empty",
                "byte": "current_byte",
                "param_1": "data",
                "param_2": "pattern",
                "param_3": "length",
                "puVar3": "current",
                "uVar1": "xor_result",
                "uVar2": "combined_value",
                "uVar4": "first_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080090a8": {
            "additional_data": {
                "&DAT_20000bfc": {
                    "1": "data"
                },
                "DAT_20000bfc": {
                    "1": "data_pointer",
                    "2": "data",
                    "3": "data_buffer"
                },
                "FUNC_08008af0": {
                    "1": "perform_initialization",
                    "2": "initialize_buffer",
                    "21": "process_data"
                },
                "FUN_080090a8": {
                    "1": "load_data",
                    "30": "initialize_data"
                },
                "dataBuffer": {
                    "1": "buffer"
                },
                "initialize_data": {
                    "1": "initialize_data"
                },
                "process_data": {
                    "1": "process_data"
                }
            },
            "called": [
                "FUN_08008af0"
            ],
            "calling": [
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "code": "\nvoid initialize_data_080090a8(void)\n\n{\n  FUNC_08008af0(&DAT_20000bfc);\n  return;\n}\n\n",
            "current_name": "initialize_data_080090a8",
            "entrypoint": "0x080090a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080090a8": "initialize_data_080090a8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080090b4": {
            "additional_data": {
                "DATA_20000bfc": {
                    "1": "data_buffer"
                },
                "DAT_20000bfc": {
                    "1": "data_structure",
                    "2": "data_buffer"
                },
                "FUNC_08008af4": {
                    "1": "initialize_memory",
                    "23": "process_data"
                },
                "FUN_080090b4": {
                    "1": "initiate_data_processing",
                    "2": "initialize_data_structure",
                    "28": "initialize_data"
                },
                "data": {
                    "1": "data"
                },
                "initializeData": {
                    "1": "void"
                },
                "loadData": {
                    "1": "void"
                },
                "var1": {
                    "1": "data_pointer"
                }
            },
            "called": [
                "FUN_08008af4"
            ],
            "calling": [
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "code": "\nvoid initialize_data_080090b4(void)\n\n{\n  FUNC_08008af4(&DAT_20000bfc);\n  return;\n}\n\n",
            "current_name": "initialize_data_080090b4",
            "entrypoint": "0x080090b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080090b4": "initialize_data_080090b4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080090c0": {
            "additional_data": {
                "(iVar2 + 5) * 4": {
                    "1": "total_bytes"
                },
                "(iVar2 + param_2 * 4)": {
                    "1": "current_value_address"
                },
                "(param_1 + 0x4c)": {
                    "1": "memory_offset"
                },
                "(param_2 & 0xff)": {
                    "1": "bitwise_param"
                },
                "*puVar1": {
                    "1": "prev_memory_block_value"
                },
                "0x0": {
                    "1": "null"
                },
                "0x21": {
                    "1": "chunk_size"
                },
                "0x4c": {
                    "1": "offset"
                },
                "1 << (param_2 & 0xff)": {
                    "1": "shifted_val"
                },
                "FUN_080090c0": {
                    "1": "allocate_or_retrieve_memory",
                    "12": "allocate_and_initialize_memory",
                    "2": "allocate_and_initialize",
                    "3": "allocate_and_get_memory",
                    "5": "initialize_memory"
                },
                "allocate_and_initialize_memory_08009980": {
                    "1": "allocate_and_init_memory",
                    "2": "allocate_and_initialize_memory"
                },
                "iVar2": {
                    "1": "block_index",
                    "2": "memory_index",
                    "3": "memory_offset",
                    "5": "memory_address"
                },
                "iVar2 + param_2 * 4": {
                    "1": "current_memory_block_address"
                },
                "param_1": {
                    "1": "ptr_array",
                    "2": "param1",
                    "3": "memory_block",
                    "4": "memory_address",
                    "6": "input_param"
                },
                "param_2": {
                    "1": "index_param",
                    "2": "element_index",
                    "24": "index"
                },
                "puVar1": {
                    "1": "result",
                    "4": "ptr",
                    "6": "memory_ptr"
                },
                "puVar1[1]": {
                    "1": "current_memory_block_index"
                },
                "puVar1[2]": {
                    "1": "current_memory_block_bitmask"
                },
                "puVar1[3]": {
                    "1": "current_memory_block_value1"
                },
                "puVar1[4]": {
                    "1": "current_memory_block_value2"
                }
            },
            "called": [
                "FUN_08009980"
            ],
            "calling": [
                "FUN_08009244",
                "FUN_08009530",
                "FUN_08009630",
                "FUN_08009120",
                "FUN_080093a4",
                "FUN_08009258",
                "FUN_08009444",
                "FUN_080079e8"
            ],
            "code": "\nundefined4 * allocate_and_initialize_memory_080090c0(int input_param,uint index)\n\n{\n  undefined4 *memory_ptr;\n  int memory_address;\n  \n  memory_address = *(int *)(input_param + 0x4c);\n  if (memory_address == 0) {\n    memory_address = allocate_and_initialize_memory_080090c0(input_param,4,0x21);\n    *(int *)(input_param + 0x4c) = memory_address;\n    if (memory_address == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  memory_ptr = *(undefined4 **)(memory_address + index * 4);\n  if (memory_ptr == (undefined4 *)0x0) {\n    memory_address = 1 << (index & 0xff);\n    memory_ptr = (undefined4 *)allocate_and_initialize_memory_080090c0(input_param,1,(memory_address + 5) * 4);\n    if (memory_ptr == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    current_memory_block_index = index;\n    current_memory_block_bitmask = memory_address;\n  }\n  else {\n    *(undefined4 *)(memory_address + index * 4) = *memory_ptr;\n  }\n  current_memory_block_value1 = 0;\n  current_memory_block_value2 = 0;\n  return memory_ptr;\n}\n\n",
            "current_name": "allocate_and_initialize_memory_080090c0",
            "entrypoint": "0x080090c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080090c0": "allocate_and_initialize_memory_080090c0",
                "allocate_and_initialize_memory_08009980": "allocate_and_initialize_memory",
                "iVar2": "memory_address",
                "param_1": "input_param",
                "param_2": "index",
                "puVar1": "memory_ptr",
                "puVar1[1]": "current_memory_block_index",
                "puVar1[2]": "current_memory_block_bitmask",
                "puVar1[3]": "current_memory_block_value1",
                "puVar1[4]": "current_memory_block_value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800910c": {
            "additional_data": {
                "(undefined4 *)(iVar1 + param_2[1] * 4)": {
                    "1": "array_element"
                },
                "*(int *)(param_1 + 0x4c)": {
                    "1": "ptr_data_offset"
                },
                "*(undefined4 *)(iVar1 + param_2[1] * 4)": {
                    "1": "ptr_data_value",
                    "2": "extracted_value"
                },
                "*(undefined4 *)(iVar1 + targetPointer[1] * 4)": {
                    "1": "source_value"
                },
                "*(undefined4 **)(iVar1 + param_2[1] * 4)": {
                    "1": "array_element_pointer"
                },
                "*(undefined4 **)(iVar1 + targetPointer[1] * 4)": {
                    "1": "target_pointer_address"
                },
                "*param_2": {
                    "1": "data_value"
                },
                "FUN_0800910c": {
                    "1": "retrieve_and_update_value",
                    "2": "copy_data",
                    "4": "extract_and_store_value",
                    "6": "extract_value_and_swap"
                },
                "iVar1": {
                    "1": "data_block_offset",
                    "2": "array_offset",
                    "3": "data_pointer",
                    "4": "data_offset",
                    "5": "array_base_address"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "data_offset",
                    "3": "input_offset",
                    "6": "base_address"
                },
                "param_2": {
                    "1": "target_data",
                    "2": "target_address",
                    "3": "target_pointer",
                    "8": "output_pointer"
                },
                "param_2[1]": {
                    "1": "index"
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nvoid extract_value_and_swap_0800910c(int base_address,undefined4 *output_pointer)\n\n{\n  int array_base_address;\n  \n  if (output_pointer != (undefined4 *)0x0) {\n    array_base_address = *(int *)(base_address + 0x4c);\n    *output_pointer = *(undefined4 *)(array_base_address + index * 4);\n    *(undefined4 **)(array_base_address + index * 4) = output_pointer;\n  }\n  return;\n}\n\n",
            "current_name": "extract_value_and_swap_0800910c",
            "entrypoint": "0x0800910c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800910c": "extract_value_and_swap_0800910c",
                "iVar1": "array_base_address",
                "param_1": "base_address",
                "param_2": "output_pointer",
                "param_2[1]": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009120": {
            "additional_data": {
                "FUN_08009120": {
                    "1": "reverse_and_update_array",
                    "19": "calculate_checksum",
                    "2": "perform_calculation",
                    "3": "multiply_and_add"
                },
                "allocate_and_initialize_memory_080090c0": {
                    "1": "allocate_and_init_memory"
                },
                "copy_memory_08001084": {
                    "1": "copy_memory"
                },
                "iVar3": {
                    "1": "data_array_length",
                    "10": "array_length",
                    "3": "array_size",
                    "5": "length"
                },
                "iVar5": {
                    "1": "iteration_counter",
                    "14": "counter",
                    "2": "iteration_index",
                    "3": "iteration_count",
                    "6": "index"
                },
                "param_1": {
                    "1": "param",
                    "2": "size",
                    "3": "memory_address",
                    "4": "input_param",
                    "6": "param1"
                },
                "param_2": {
                    "1": "memory_block",
                    "3": "input_data",
                    "5": "data_array",
                    "8": "input_array",
                    "9": "data"
                },
                "param_3": {
                    "31": "multiplier"
                },
                "param_4": {
                    "1": "result",
                    "12": "checksum",
                    "2": "carry",
                    "4": "initial_checksum",
                    "9": "accumulator"
                },
                "puVar1": {
                    "1": "decoded_data",
                    "12": "result",
                    "2": "new_array",
                    "7": "result_array"
                },
                "puVar4": {
                    "1": "current_value",
                    "2": "input_ptr",
                    "3": "ptr",
                    "4": "array_pointer",
                    "7": "current_element"
                },
                "uVar2": {
                    "1": "upper_bits",
                    "2": "temp_checksum",
                    "9": "carry"
                }
            },
            "called": [
                "FUN_08001084",
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "code": "\nundefined4 * calculate_checksum_08009120(int param1,undefined4 *data,int multiplier,uint checksum)\n\n{\n  undefined4 *result;\n  uint temp;\n  int array_length;\n  uint *current_element;\n  int counter;\n  \n  counter = 0;\n  array_length = data[4];\n  current_element = data + 5;\n  do {\n    counter = counter + 1;\n    checksum = multiplier * (*current_element & 0xffff) + checksum;\n    temp = multiplier * (*current_element >> 0x10) + (checksum >> 0x10);\n    *current_element = (checksum & 0xffff) + temp * 0x10000;\n    checksum = temp >> 0x10;\n    current_element = current_element + 1;\n  } while (counter < array_length);\n  result = data;\n  if (checksum != 0) {\n    if ((int)data[2] <= array_length) {\n      result = (undefined4 *)allocate_and_init_memory(param1,data[1] + 1);\n      copy_memory(result + 3,data + 3,(data[4] + 2) * 4);\n      counter = *(int *)(param1 + 0x4c);\n      *data = *(undefined4 *)(counter + data[1] * 4);\n      *(undefined4 **)(counter + data[1] * 4) = data;\n    }\n    result[array_length + 5] = checksum;\n    result[4] = array_length + 1;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_checksum_08009120",
            "entrypoint": "0x08009120",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009120": "calculate_checksum_08009120",
                "allocate_and_initialize_memory_080090c0": "allocate_and_init_memory",
                "copy_memory_08001084": "copy_memory",
                "iVar3": "array_length",
                "iVar5": "counter",
                "param_1": "param1",
                "param_2": "data",
                "param_3": "multiplier",
                "param_4": "checksum",
                "puVar1": "result",
                "puVar4": "current_element",
                "uVar2": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080091a4": {
            "additional_data": {
                "FUN_080091a4": {
                    "1": "get_leading_zeros_count",
                    "2": "count_leading_zeroes",
                    "22": "count_leading_zeros",
                    "3": "find_highest_bit_position"
                },
                "iVar1": {
                    "1": "bit_count",
                    "15": "leading_zeros",
                    "2": "result",
                    "3": "leading_zero_count",
                    "5": "leading_zeros_count"
                },
                "param_1": {
                    "1": "num",
                    "11": "value",
                    "13": "input",
                    "2": "input_number",
                    "3": "number"
                }
            },
            "called": [],
            "calling": [
                "FUN_08009630",
                "FUN_080079e8"
            ],
            "code": "\nint count_leading_zeros_080091a4(uint input)\n\n{\n  int leading_zeros;\n  \n  if ((input & 0xffff0000) == 0) {\n    input = input << 0x10;\n    leading_zeros = 0x10;\n  }\n  else {\n    leading_zeros = 0;\n  }\n  if ((input & 0xff000000) == 0) {\n    input = input << 8;\n    leading_zeros = leading_zeros + 8;\n  }\n  if ((input & 0xf0000000) == 0) {\n    input = input << 4;\n    leading_zeros = leading_zeros + 4;\n  }\n  if ((input & 0xc0000000) == 0) {\n    input = input << 2;\n    leading_zeros = leading_zeros + 2;\n  }\n  if (-1 < (int)input) {\n    if ((int)(input << 1) < 0) {\n      return leading_zeros + 1;\n    }\n    leading_zeros = 0x20;\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "count_leading_zeros_080091a4",
            "entrypoint": "0x080091a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080091a4": "count_leading_zeros_080091a4",
                "iVar1": "leading_zeros",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080091e4": {
            "additional_data": {
                "FUN_080091e4": {
                    "1": "get_leading_zeros",
                    "10": "count_leading_zeros",
                    "2": "find_first_set_bit",
                    "5": "find_highest_bit_position",
                    "7": "count_trailing_zeros"
                },
                "iVar1": {
                    "1": "leading_zeros_count",
                    "3": "bit_index",
                    "5": "count",
                    "6": "bit_position",
                    "8": "leading_zeros"
                },
                "param_1": {
                    "1": "input_value",
                    "10": "input",
                    "2": "num_ptr",
                    "3": "value",
                    "6": "number",
                    "8": "num"
                },
                "uVar2": {
                    "1": "value_to_decode",
                    "16": "value",
                    "2": "number",
                    "5": "temp"
                }
            },
            "called": [],
            "calling": [
                "FUN_08009630"
            ],
            "code": "\nint count_leading_zeros_080091e4(uint *input)\n\n{\n  int leading_zeros;\n  uint value;\n  \n  value = *input;\n  if ((value & 7) == 0) {\n    if ((value & 0xffff) == 0) {\n      value = value >> 0x10;\n      leading_zeros = 0x10;\n    }\n    else {\n      leading_zeros = 0;\n    }\n    if ((value & 0xff) == 0) {\n      value = value >> 8;\n      leading_zeros = leading_zeros + 8;\n    }\n    if ((value & 0xf) == 0) {\n      value = value >> 4;\n      leading_zeros = leading_zeros + 4;\n    }\n    if ((value & 3) == 0) {\n      value = value >> 2;\n      leading_zeros = leading_zeros + 2;\n    }\n    if (-1 < (int)(value << 0x1f)) {\n      value = value >> 1;\n      if (value == 0) {\n        return 0x20;\n      }\n      leading_zeros = leading_zeros + 1;\n    }\n    *input = value;\n    return leading_zeros;\n  }\n  if ((int)(value << 0x1f) < 0) {\n    return 0;\n  }\n  if (-1 < (int)(value << 0x1e)) {\n    *input = value >> 2;\n    return 2;\n  }\n  *input = value >> 1;\n  return 1;\n}\n\n",
            "current_name": "count_leading_zeros_080091e4",
            "entrypoint": "0x080091e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080091e4": "count_leading_zeros_080091e4",
                "iVar1": "leading_zeros",
                "param_1": "input",
                "uVar2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009244": {
            "additional_data": {
                "*(undefined4 *)(iVar1 + 0x10)": {
                    "1": "initialized_value"
                },
                "*(undefined4 *)(iVar1 + 0x14)": {
                    "1": "input_data"
                },
                "FUN_08009244": {
                    "1": "initialize_memory_and_set_value",
                    "2": "initialize_memory_with_param",
                    "25": "initialize_memory"
                },
                "iVar1": {
                    "1": "memory_block",
                    "14": "memory_address",
                    "2": "memory_ptr",
                    "4": "memory_pointer",
                    "5": "allocated_memory"
                },
                "param_1": {
                    "1": "param",
                    "2": "input_parameter",
                    "3": "input1",
                    "4": "input_param",
                    "8": "memory_size"
                },
                "param_2": {
                    "1": "value2",
                    "2": "initial_value",
                    "3": "arg2",
                    "6": "value"
                }
            },
            "called": [
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nvoid initialize_memory_08009244(undefined4 memory_size,undefined4 value)\n\n{\n  int memory_address;\n  \n  memory_address = allocate_and_initialize_memory_08009244_080090c0(memory_size,1);\n  *(undefined4 *)(memory_address + 0x10) = 1;\n  *(undefined4 *)(memory_address + 0x14) = value;\n  return;\n}\n\n",
            "current_name": "initialize_memory_08009244",
            "entrypoint": "0x08009244",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009244": "initialize_memory_08009244",
                "iVar1": "memory_address",
                "param_1": "memory_size",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009258": {
            "additional_data": {
                "FUN_08009258": {
                    "1": "calculate_memory_size",
                    "2": "calculate_hash",
                    "25": "initialize_memory"
                },
                "iVar10": {
                    "1": "size2_temp",
                    "2": "max_value",
                    "3": "min_size",
                    "5": "min_length"
                },
                "iVar12": {
                    "1": "smaller_input",
                    "2": "var1",
                    "5": "size1"
                },
                "iVar13": {
                    "1": "input_ptr",
                    "2": "min_input"
                },
                "iVar3": {
                    "1": "memory_allocation_result",
                    "13": "memory_size",
                    "2": "size",
                    "3": "length",
                    "6": "allocated_memory"
                },
                "iVar9": {
                    "1": "min_input",
                    "2": "var1",
                    "3": "size2",
                    "4": "min_value"
                },
                "param_1": {
                    "1": "unnamed_param_1",
                    "18": "param1",
                    "2": "arg1",
                    "5": "param"
                },
                "param_2": {
                    "1": "arg2",
                    "12": "input1",
                    "3": "array1",
                    "4": "param2"
                },
                "param_3": {
                    "1": "input_2",
                    "12": "input2",
                    "3": "array2",
                    "4": "param3"
                },
                "puVar1": {
                    "1": "temp_pointer",
                    "2": "temp_ptr1",
                    "3": "pointer1",
                    "4": "source_ptr",
                    "7": "ptr1"
                },
                "puVar11": {
                    "1": "temp_ptr5"
                },
                "puVar14": {
                    "1": "source2_pointer",
                    "2": "pu_var14",
                    "5": "ptr5"
                },
                "puVar15": {
                    "1": "pointer3",
                    "2": "temp_ptr4",
                    "5": "ptr6"
                },
                "puVar16": {
                    "1": "input_pointer",
                    "2": "pu_var16",
                    "5": "ptr7"
                },
                "puVar17": {
                    "1": "array2_ptr",
                    "2": "pu_var17",
                    "3": "end_ptr",
                    "4": "memory_end",
                    "5": "ptr8"
                },
                "puVar18": {
                    "1": "pu_var18",
                    "2": "memory_ptr",
                    "4": "memory",
                    "5": "ptr9"
                },
                "puVar2": {
                    "1": "current_input2",
                    "2": "dest_ptr",
                    "7": "ptr2"
                },
                "puVar5": {
                    "1": "memory_ptr",
                    "2": "current",
                    "3": "current_memory",
                    "6": "ptr3"
                },
                "puVar7": {
                    "1": "src",
                    "2": "pu_var7",
                    "6": "ptr4"
                },
                "uVar11": {
                    "1": "temp4",
                    "2": "temp3",
                    "5": "end_offset"
                },
                "uVar4": {
                    "1": "temp_value2",
                    "2": "temp_var",
                    "3": "temp_var1",
                    "6": "temp1",
                    "7": "carry"
                },
                "uVar6": {
                    "1": "current_value",
                    "4": "start"
                },
                "uVar8": {
                    "1": "temp_value2",
                    "2": "temp3",
                    "4": "temp",
                    "6": "temp2"
                }
            },
            "called": [
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "code": "\nvoid initialize_memory_08009258(undefined4 param1,int input1,int input2)\n\n{\n  uint *ptr1;\n  uint *ptr2;\n  int memory_size;\n  uint carry;\n  uint *ptr3;\n  uint start_offset;\n  uint *ptr4;\n  uint temp2;\n  int min_value;\n  int min_length;\n  uint end_offset;\n  int size1;\n  int var2;\n  uint *ptr5;\n  uint *ptr6;\n  uint *ptr7;\n  uint *ptr8;\n  uint *ptr9;\n  \n  size1 = *(int *)(input1 + 0x10);\n  min_value = *(int *)(input2 + 0x10);\n  min_length = min_value;\n  var2 = input1;\n  if (size1 < min_value) {\n    min_length = size1;\n    size1 = min_value;\n    var2 = input2;\n    input2 = input1;\n  }\n  min_value = size1 + min_length;\n  memory_size = *(int *)(var2 + 4);\n  if (*(int *)(var2 + 8) < min_value) {\n    memory_size = memory_size + 1;\n  }\n  memory_size = allocate_and_initialize_memory_08009258_080090c0(param1,memory_size);\n  ptr9 = (uint *)(memory_size + 0x14);\n  ptr8 = ptr9 + min_value;\n  for (ptr3 = ptr9; ptr3 < ptr8; ptr3 = ptr3 + 1) {\n    *ptr3 = 0;\n  }\n  start_offset = input2 + 0x14;\n  end_offset = start_offset + min_length * 4;\n  ptr3 = (uint *)(var2 + 0x14);\n  if (start_offset < end_offset) {\n    ptr4 = (uint *)(start_offset + ((end_offset - input2) - 0x15 & 0xfffffffc));\n    ptr7 = (uint *)(input2 + 0x10);\n    do {\n      while( true ) {\n        ptr7 = ptr7 + 1;\n        start_offset = *ptr7 & 0xffff;\n        if (start_offset != 0) break;\n        start_offset = *ptr7 >> 0x10;\n        if (start_offset == 0) goto LAB_080092d2;\nLAB_0800932c:\n        temp2 = *ptr9;\n        carry = 0;\n        ptr1 = ptr3;\n        ptr5 = ptr9;\n        end_offset = temp2;\n        do {\n          ptr6 = ptr5;\n          carry = carry + start_offset * *(ushort *)ptr1 + (end_offset >> 0x10);\n          *ptr6 = temp2 & 0xffff | carry * 0x10000;\n          ptr2 = ptr1 + 1;\n          end_offset = ptr6[1];\n          temp2 = start_offset * (*ptr1 >> 0x10) + (end_offset & 0xffff) + (carry >> 0x10);\n          carry = temp2 >> 0x10;\n          ptr1 = ptr2;\n          ptr5 = ptr6 + 1;\n        } while (ptr2 < ptr3 + size1);\n        ptr6[1] = temp2;\n        ptr9 = ptr9 + 1;\n        if (ptr4 == ptr7) goto LAB_0800937a;\n      }\n      end_offset = 0;\n      ptr1 = ptr9;\n      ptr5 = ptr3;\n      do {\n        ptr2 = ptr1;\n        ptr6 = ptr5 + 1;\n        temp2 = start_offset * (*ptr5 & 0xffff) + (*ptr2 & 0xffff) + end_offset;\n        carry = start_offset * (*ptr5 >> 0x10) + (*ptr2 >> 0x10) + (temp2 >> 0x10);\n        end_offset = carry >> 0x10;\n        *ptr2 = temp2 & 0xffff | carry * 0x10000;\n        ptr1 = ptr2 + 1;\n        ptr5 = ptr6;\n      } while (ptr6 < ptr3 + size1);\n      ptr2[1] = end_offset;\n      start_offset = *ptr7 >> 0x10;\n      if (start_offset != 0) goto LAB_0800932c;\nLAB_080092d2:\n      ptr9 = ptr9 + 1;\n    } while (ptr4 != ptr7);\n  }\nLAB_0800937a:\n  if (0 < min_value) {\n    start_offset = ptr8[-1];\n    ptr8 = ptr8 + -1;\n    while ((start_offset == 0 && (min_value = min_value + -1, min_value != 0))) {\n      ptr8 = ptr8 + -1;\n      start_offset = *ptr8;\n    }\n  }\n  *(int *)(memory_size + 0x10) = min_value;\n  return;\n}\n\n",
            "current_name": "initialize_memory_08009258",
            "entrypoint": "0x08009258",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009258": "initialize_memory_08009258",
                "iVar10": "min_length",
                "iVar12": "size1",
                "iVar13": "var2",
                "iVar3": "memory_size",
                "iVar9": "min_value",
                "param_1": "param1",
                "param_2": "input1",
                "param_3": "input2",
                "puVar1": "ptr1",
                "puVar14": "ptr5",
                "puVar15": "ptr6",
                "puVar16": "ptr7",
                "puVar17": "ptr8",
                "puVar18": "ptr9",
                "puVar2": "ptr2",
                "puVar5": "ptr3",
                "puVar7": "ptr4",
                "uVar11": "end_offset",
                "uVar4": "carry",
                "uVar6": "start_offset",
                "uVar8": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080093a4": {
            "additional_data": {
                "FUN_080093a4": {
                    "1": "initialize_memory_and_calculate_checksum",
                    "23": "process_data"
                },
                "iVar1": {
                    "1": "offset",
                    "2": "temp_variable_1",
                    "6": "temp_var_1",
                    "8": "temp_var1",
                    "9": "index"
                },
                "iVar2": {
                    "1": "length",
                    "2": "temp2",
                    "6": "temp_var_2",
                    "7": "temp_var2",
                    "8": "num_iterations"
                },
                "param_1": {
                    "1": "data_source",
                    "2": "data_offset",
                    "3": "input_param",
                    "4": "data_size",
                    "5": "input"
                },
                "param_2": {
                    "1": "input_data",
                    "2": "output_buffer",
                    "3": "output_data",
                    "5": "output"
                },
                "param_3": {
                    "1": "flags",
                    "2": "checksum",
                    "3": "length",
                    "5": "size",
                    "6": "data_length",
                    "7": "data_size"
                },
                "puVar3": {
                    "1": "curr_pointer1",
                    "2": "temp_variable_3",
                    "3": "ptr1",
                    "4": "current_ptr",
                    "5": "temp_ptr_1"
                },
                "puVar4": {
                    "1": "curr_pointer2",
                    "2": "temp_ptr",
                    "3": "memory_ptr",
                    "5": "temp_ptr_2"
                }
            },
            "called": [
                "FUN_08009120",
                "FUN_08009258",
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nundefined4 * process_data_080093a4(int input,undefined4 *output,uint data_size)\n\n{\n  int index;\n  int num_iterations;\n  undefined4 *temp_ptr_1;\n  undefined4 *temp_ptr_2;\n  \n  if ((data_size & 3) != 0) {\n    output = (undefined4 *)\n              calculate_checksum_08009120(input,output,*(undefined4 *)(&DAT_0800a070 + ((data_size & 3) - 1) * 4),\n                           0);\n  }\n  num_iterations = (int)data_size >> 2;\n  if (num_iterations != 0) {\n    temp_ptr_2 = *(undefined4 **)(input + 0x48);\n    if (temp_ptr_2 == (undefined4 *)0x0) {\n      temp_ptr_2 = (undefined4 *)allocate_and_initialize_memory_080090c0(input,1);\n      temp_ptr_2[4] = 1;\n      temp_ptr_2[5] = 0x271;\n      *(undefined4 **)(input + 0x48) = temp_ptr_2;\n      *temp_ptr_2 = 0;\n    }\n    temp_ptr_1 = output;\n    if (num_iterations << 0x1f < 0) goto LAB_080093d2;\nLAB_080093c4:\n    num_iterations = num_iterations >> 1;\n    temp_ptr_1 = temp_ptr_2;\n    if (num_iterations != 0) {\n      while( true ) {\n        temp_ptr_2 = (undefined4 *)*temp_ptr_1;\n        if (temp_ptr_2 == (undefined4 *)0x0) {\n          temp_ptr_2 = (undefined4 *)initialize_memory_08009258(input,temp_ptr_1,temp_ptr_1);\n          *temp_ptr_1 = temp_ptr_2;\n          *temp_ptr_2 = 0;\n        }\n        temp_ptr_1 = output;\n        if (-1 < num_iterations << 0x1f) break;\nLAB_080093d2:\n        output = (undefined4 *)initialize_memory_08009258(input,temp_ptr_1,temp_ptr_2);\n        if (temp_ptr_1 == (undefined4 *)0x0) break;\n        index = *(int *)(input + 0x4c);\n        num_iterations = num_iterations >> 1;\n        *temp_ptr_1 = *(undefined4 *)(index + temp_ptr_1[1] * 4);\n        *(undefined4 **)(index + temp_ptr_1[1] * 4) = temp_ptr_1;\n        temp_ptr_1 = temp_ptr_2;\n        if (num_iterations == 0) {\n          return output;\n        }\n      }\n      goto LAB_080093c4;\n    }\n  }\n  return output;\n}\n\n",
            "current_name": "process_data_080093a4",
            "entrypoint": "0x080093a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080093a4": "process_data_080093a4",
                "iVar1": "index",
                "iVar2": "num_iterations",
                "param_1": "input",
                "param_2": "output",
                "param_3": "data_size",
                "puVar3": "temp_ptr_1",
                "puVar4": "temp_ptr_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009444": {
            "additional_data": {
                "FUN_08009444": {
                    "1": "initialize_memory_and_assign_values",
                    "2": "initialize_and_copy_bits",
                    "9": "initialize_memory"
                },
                "allocate_and_initialize_memory_080090c0": {
                    "3": "allocate_and_initialize_memory"
                },
                "iVar1": {
                    "1": "multiplier",
                    "12": "temp_var1",
                    "2": "increment",
                    "7": "temp1"
                },
                "iVar12": {
                    "1": "num_words_shift",
                    "10": "shift_amount",
                    "2": "num_words",
                    "3": "temp_var12"
                },
                "iVar13": {
                    "1": "result",
                    "2": "modified_size",
                    "3": "temp_var13",
                    "4": "new_size"
                },
                "iVar2": {
                    "1": "current_index",
                    "12": "temp_var2",
                    "2": "multiplier",
                    "7": "temp2"
                },
                "iVar3": {
                    "1": "first_arg",
                    "12": "temp_var3",
                    "2": "count",
                    "7": "temp3"
                },
                "iVar5": {
                    "1": "length",
                    "2": "i_var5",
                    "4": "temp5",
                    "6": "offset",
                    "7": "array_size"
                },
                "iVar6": {
                    "1": "end",
                    "2": "temp2",
                    "5": "temp6",
                    "9": "temp_var6"
                },
                "param_1": {
                    "1": "input1",
                    "2": "input_address",
                    "3": "input_value",
                    "4": "input_param"
                },
                "param_2": {
                    "1": "ptr_array",
                    "2": "array_param",
                    "3": "input_array",
                    "4": "param2"
                },
                "param_3": {
                    "1": "length",
                    "2": "input_size",
                    "3": "bit_count",
                    "4": "param3",
                    "5": "num_bits",
                    "6": "size"
                },
                "puVar10": {
                    "1": "src_ptr_end",
                    "2": "temp_ptr",
                    "4": "temp_ptr2",
                    "5": "ptr4"
                },
                "puVar11": {
                    "1": "start_array",
                    "2": "ptr_var11",
                    "3": "end_ptr",
                    "5": "ptr5"
                },
                "puVar7": {
                    "1": "result_array",
                    "2": "dest",
                    "5": "ptr1"
                },
                "puVar8": {
                    "1": "input_pointer",
                    "2": "ptr_var8",
                    "5": "ptr2",
                    "7": "src_ptr"
                },
                "puVar9": {
                    "1": "temp_pointer",
                    "2": "ptr_var9",
                    "4": "temp_ptr1",
                    "5": "ptr3"
                },
                "uVar14": {
                    "1": "shift_amount",
                    "2": "temp9",
                    "3": "temp_var14",
                    "6": "carry"
                },
                "uVar4": {
                    "1": "u_var4",
                    "11": "temp_var4",
                    "2": "temp_var",
                    "3": "temp",
                    "7": "temp4"
                }
            },
            "called": [
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nvoid allocate_and_initialize_memory_08009444(int input_parameter,undefined4 *data,uint size)\n\n{\n  int temp_var1;\n  int temp_var2;\n  int temp_var3;\n  undefined4 temp_var4;\n  int array_size;\n  int temp_var6;\n  uint *ptr1;\n  uint *src_ptr;\n  uint *ptr4;\n  uint *ptr5;\n  int shift_amount;\n  int new_size;\n  uint carry;\n  uint *ptr3;\n  \n  array_size = data[4];\n  shift_amount = (int)size >> 5;\n  new_size = shift_amount + array_size + 1;\n  temp_var3 = data[1];\n  temp_var2 = data[2];\n  if ((int)data[2] < new_size) {\n    do {\n      temp_var6 = temp_var2 * 2;\n      temp_var1 = temp_var2 * -2;\n      temp_var3 = temp_var3 + 1;\n      temp_var2 = temp_var6;\n    } while (new_size != temp_var6 && new_size + temp_var1 < 0 == SBORROW4(new_size,temp_var6));\n  }\n  temp_var2 = allocate_and_initialize_memory_08009444(input_parameter,temp_var3);\n  ptr1 = (uint *)(temp_var2 + 0x14);\n  if (0 < shift_amount) {\n    ptr5 = ptr1 + shift_amount;\n    src_ptr = ptr1;\n    do {\n      ptr3 = src_ptr + 1;\n      *src_ptr = 0;\n      ptr1 = ptr5;\n      src_ptr = ptr3;\n    } while (ptr3 != ptr5);\n  }\n  temp_var3 = data[4];\n  src_ptr = data + 5;\n  size = size & 0x1f;\n  if (size == 0) {\n    ptr1 = ptr1 + -1;\n    ptr5 = src_ptr;\n    do {\n      ptr3 = ptr5 + 1;\n      ptr1 = ptr1 + 1;\n      *ptr1 = *ptr5;\n      ptr5 = ptr3;\n    } while (ptr3 < src_ptr + temp_var3);\n  }\n  else {\n    carry = 0;\n    ptr5 = src_ptr;\n    do {\n      ptr3 = ptr1;\n      *ptr3 = *ptr5 << size | carry;\n      ptr4 = ptr5 + 1;\n      carry = *ptr5 >> (0x20 - size & 0xff);\n      ptr1 = ptr3 + 1;\n      ptr5 = ptr4;\n    } while (ptr4 < src_ptr + temp_var3);\n    ptr3[1] = carry;\n    if (carry != 0) {\n      new_size = shift_amount + array_size + 2;\n    }\n  }\n  array_size = *(int *)(input_parameter + 0x4c);\n  temp_var3 = data[1];\n  temp_var4 = *(undefined4 *)(array_size + temp_var3 * 4);\n  *(int *)(temp_var2 + 0x10) = new_size + -1;\n  *data = temp_var4;\n  *(undefined4 **)(array_size + temp_var3 * 4) = data;\n  return;\n}\n\n",
            "current_name": "allocate_and_initialize_memory_08009444",
            "entrypoint": "0x08009444",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009444": "allocate_and_initialize_memory_08009444",
                "allocate_and_initialize_memory_080090c0": "allocate_and_initialize_memory",
                "iVar1": "temp_var1",
                "iVar12": "shift_amount",
                "iVar13": "new_size",
                "iVar2": "temp_var2",
                "iVar3": "temp_var3",
                "iVar5": "array_size",
                "iVar6": "temp_var6",
                "param_1": "input_parameter",
                "param_2": "data",
                "param_3": "size",
                "puVar10": "ptr4",
                "puVar11": "ptr5",
                "puVar7": "ptr1",
                "puVar8": "src_ptr",
                "puVar9": "ptr3",
                "uVar14": "carry",
                "uVar4": "temp_var4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080094f8": {
            "additional_data": {
                "FUN_080094f8": {
                    "30": "compare_arrays"
                },
                "iVar1": {
                    "1": "length_diff",
                    "18": "difference",
                    "2": "array_difference",
                    "3": "size_difference",
                    "4": "length_difference"
                },
                "iVar3": {
                    "1": "array1_length",
                    "12": "array2_length",
                    "2": "array2_size",
                    "3": "array2_offset",
                    "5": "offset"
                },
                "param_1": {
                    "1": "array1_offset",
                    "26": "array1"
                },
                "param_2": {
                    "1": "array2_ptr",
                    "26": "array2"
                },
                "puVar2": {
                    "1": "element2",
                    "4": "array2_ptr",
                    "7": "ptr2",
                    "9": "ptr_array2"
                },
                "puVar4": {
                    "1": "element1",
                    "4": "array1_ptr",
                    "7": "ptr1",
                    "9": "ptr_array1"
                }
            },
            "called": [],
            "calling": [
                "FUN_080078c0",
                "FUN_080079e8"
            ],
            "code": "\nint compare_arrays_080094f8(int array1,int array2)\n\n{\n  int difference;\n  uint *ptr_array2;\n  int array2_length;\n  uint *ptr_array1;\n  \n  array2_length = *(int *)(array2 + 0x10);\n  difference = *(int *)(array1 + 0x10) - array2_length;\n  if (difference == 0) {\n    ptr_array2 = (uint *)(array2 + 0x14 + array2_length * 4);\n    ptr_array1 = (uint *)(array1 + 0x14) + array2_length;\n    do {\n      ptr_array1 = ptr_array1 + -1;\n      ptr_array2 = ptr_array2 + -1;\n      if (*ptr_array1 != *ptr_array2) {\n        if (*ptr_array2 <= *ptr_array1) {\n          return 1;\n        }\n        return -1;\n      }\n    } while ((uint *)(array1 + 0x14) < ptr_array1);\n  }\n  return difference;\n}\n\n",
            "current_name": "compare_arrays_080094f8",
            "entrypoint": "0x080094f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "iVar1": "difference",
                "iVar3": "array2_length",
                "param_1": "array1",
                "param_2": "array2",
                "puVar2": "ptr_array2",
                "puVar4": "ptr_array1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009530": {
            "additional_data": {
                "FUN_08009530": {
                    "1": "reverse_binary_operations",
                    "2": "reverse_and_compare_arrays",
                    "6": "compare_and_allocate_memory",
                    "8": "reverse_and_allocate_memory"
                },
                "allocate_and_initialize_memory_080090c0": {
                    "1": "allocate_and_init_mem"
                },
                "iVar1": {
                    "1": "memory_addr",
                    "2": "memory",
                    "3": "memory_allocation_result",
                    "7": "result"
                },
                "iVar12": {
                    "1": "carry2",
                    "12": "carry",
                    "2": "temp_var",
                    "3": "sum"
                },
                "param_1": {
                    "1": "original_param",
                    "2": "input_param",
                    "3": "input_flag",
                    "5": "input1"
                },
                "param_2": {
                    "1": "arr_1",
                    "2": "input1",
                    "3": "source_array",
                    "4": "input_array1",
                    "7": "array1"
                },
                "param_3": {
                    "1": "array_b",
                    "2": "second_array",
                    "4": "input_array2",
                    "7": "array2"
                },
                "param_4": {
                    "1": "input4",
                    "2": "arg2",
                    "3": "arg4",
                    "4": "input2",
                    "6": "param4"
                },
                "puVar10": {
                    "1": "original_array2_ptr",
                    "2": "ptr5"
                },
                "puVar11": {
                    "1": "block1_end",
                    "2": "ptr6",
                    "3": "array1_end"
                },
                "puVar13": {
                    "1": "src2_ptr2",
                    "2": "ptr7"
                },
                "puVar14": {
                    "1": "last_non_zero"
                },
                "puVar2": {
                    "1": "block1_ptr",
                    "2": "source_ptr",
                    "4": "array1_ptr",
                    "6": "ptr1"
                },
                "puVar6": {
                    "1": "block2_ptr",
                    "2": "array2_ptr",
                    "4": "ptr2"
                },
                "puVar7": {
                    "1": "array1_index",
                    "2": "array1_iterator",
                    "4": "ptr3"
                },
                "puVar8": {
                    "1": "loop_iterator",
                    "2": "temp_ptr1"
                },
                "puVar9": {
                    "1": "source_data_temp",
                    "2": "array2_ptr"
                },
                "uVar14": {
                    "1": "result",
                    "2": "result_size"
                },
                "uVar3": {
                    "1": "param2_size",
                    "2": "var1",
                    "5": "array1_size"
                },
                "uVar4": {
                    "1": "u_var4",
                    "2": "var2",
                    "4": "carry",
                    "6": "temp_value",
                    "7": "sum"
                },
                "uVar5": {
                    "1": "alloc_flag",
                    "2": "is_match",
                    "3": "comparison_result",
                    "6": "flag",
                    "8": "is_equal"
                }
            },
            "called": [
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nvoid reverse_and_allocate_memory_08009530(undefined4 arg1,uint *array1,uint *array2,undefined4 param4)\n\n{\n  int result;\n  uint *ptr1;\n  uint array1_size;\n  uint sum;\n  undefined4 is_equal;\n  uint *ptr2;\n  uint *ptr3;\n  uint *ptr4;\n  uint *ptr5;\n  uint *array1_end;\n  int carry;\n  uint *ptr7;\n  uint result_size;\n  uint *ptr8;\n  \n  ptr1 = (uint *)array2[4];\n  array1_end = array1 + 5;\n  ptr7 = array2 + 5;\n  ptr3 = array1_end;\n  ptr4 = array1;\n  if ((uint *)array1[4] == ptr1) {\n    ptr2 = array1_end + (int)ptr1;\n    ptr1 = ptr7 + (int)ptr1;\n    while( true ) {\n      ptr2 = ptr2 + -1;\n      ptr1 = ptr1 + -1;\n      if (*ptr2 != *ptr1) break;\n      if (ptr2 <= array1_end) {\n        carry = allocate_and_init_mem(arg1,0,ptr2,ptr1,param4);\n        *(undefined4 *)(carry + 0x10) = 1;\n        *(undefined4 *)(carry + 0x14) = 0;\n        return;\n      }\n    }\n    is_equal = 0;\n    if (*ptr1 <= *ptr2) goto LAB_08009578;\n  }\n  else if (-1 < (int)(uint *)array1[4] - (int)ptr1) {\n    is_equal = 0;\n    ptr2 = array2;\n    goto LAB_08009578;\n  }\n  is_equal = 1;\n  ptr2 = array1_end;\n  ptr1 = array1;\n  ptr3 = ptr7;\n  ptr4 = array2;\n  array2 = array1;\n  ptr7 = array1_end;\nLAB_08009578:\n  result = allocate_and_init_mem(arg1,ptr4[1],ptr2,ptr1,param4);\n  carry = 0;\n  result_size = ptr4[4];\n  array1_size = array2[4];\n  *(undefined4 *)(result + 0xc) = is_equal;\n  array1_end = ptr3 + result_size;\n  ptr1 = (uint *)(result + 0x14);\n  ptr4 = ptr7;\n  do {\n    ptr8 = ptr3 + 1;\n    ptr5 = ptr4 + 1;\n    sum = ((*ptr3 & 0xffff) + carry) - (*ptr4 & 0xffff);\n    carry = ((*ptr3 >> 0x10) - (*ptr4 >> 0x10)) + ((int)sum >> 0x10);\n    sum = sum & 0xffff | carry * 0x10000;\n    ptr2 = ptr1 + 1;\n    *ptr1 = sum;\n    carry = carry >> 0x10;\n    ptr1 = ptr2;\n    ptr3 = ptr8;\n    ptr4 = ptr5;\n  } while (ptr5 < ptr7 + array1_size);\n  ptr1 = ptr8;\n  ptr3 = ptr2;\n  if (ptr8 < array1_end) {\n    do {\n      ptr4 = ptr1 + 1;\n      array1_size = (*ptr1 & 0xffff) + carry;\n      carry = ((int)array1_size >> 0x10) + (*ptr1 >> 0x10);\n      sum = array1_size & 0xffff | carry * 0x10000;\n      *ptr3 = sum;\n      carry = carry >> 0x10;\n      ptr1 = ptr4;\n      ptr3 = ptr3 + 1;\n    } while (ptr4 < array1_end);\n    ptr2 = (uint *)((int)ptr2 + ((int)array1_end + ~(uint)ptr8 & 0xfffffffc) + 4);\n  }\n  ptr2 = ptr2 + -1;\n  while (sum == 0) {\n    ptr2 = ptr2 + -1;\n    result_size = result_size - 1;\n    sum = *ptr2;\n  }\n  *(uint *)(result + 0x10) = result_size;\n  return;\n}\n\n",
            "current_name": "reverse_and_allocate_memory_08009530",
            "entrypoint": "0x08009530",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009530": "reverse_and_allocate_memory_08009530",
                "allocate_and_initialize_memory_080090c0": "allocate_and_init_mem",
                "iVar1": "result",
                "iVar12": "carry",
                "param_1": "arg1",
                "param_2": "array1",
                "param_3": "array2",
                "param_4": "param4",
                "puVar10": "ptr5",
                "puVar11": "array1_end",
                "puVar13": "ptr7",
                "puVar2": "ptr1",
                "puVar6": "ptr2",
                "puVar7": "ptr3",
                "puVar8": "ptr8",
                "puVar9": "ptr4",
                "uVar14": "result_size",
                "uVar3": "array1_size",
                "uVar4": "sum",
                "uVar5": "is_equal"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009630": {
            "additional_data": {
                "FUN_08009630": {
                    "1": "decode_parameters",
                    "2": "extract_bitfields",
                    "3": "extract_bits",
                    "6": "decode_and_count_bits"
                },
                "allocate_and_initialize_memory_080090c0": {
                    "1": "allocate_memory"
                },
                "count_leading_zeros_080091a4": {
                    "1": "count_leading_zeros2"
                },
                "count_leading_zeros_080091e4": {
                    "1": "count_leading_zeros1"
                },
                "iVar1": {
                    "1": "mem_allocated",
                    "2": "memory_address",
                    "3": "memory_ptr",
                    "4": "result",
                    "5": "allocated_memory",
                    "7": "memory"
                },
                "iVar3": {
                    "1": "leading_zeros_count",
                    "2": "temp_var_1",
                    "3": "leading_zeros1",
                    "7": "count"
                },
                "iVar4": {
                    "1": "temp2",
                    "2": "result",
                    "3": "var2"
                },
                "local_1c": {
                    "1": "local_value_2",
                    "2": "temp_2",
                    "3": "temp_value2"
                },
                "local_20": {
                    "1": "source_value_2",
                    "2": "temp1",
                    "3": "temp_value1"
                },
                "param_1": {
                    "1": "param_1",
                    "2": "memory_address",
                    "3": "param1",
                    "4": "input_param_1",
                    "5": "input1"
                },
                "param_2": {
                    "1": "input_2",
                    "2": "value2",
                    "3": "arg2",
                    "4": "input_param_2",
                    "5": "input2"
                },
                "param_3": {
                    "1": "leading_zeros1",
                    "2": "input_value1",
                    "3": "num1",
                    "4": "value1"
                },
                "param_4": {
                    "1": "value_2",
                    "2": "input_2",
                    "3": "input_param_4",
                    "4": "value2"
                },
                "param_5": {
                    "1": "leading_zeros1",
                    "2": "leading_zeros_count",
                    "3": "leading_zeros",
                    "4": "output_param_1",
                    "6": "output1"
                },
                "param_6": {
                    "1": "bit_position_result",
                    "2": "result_2",
                    "3": "output_value2",
                    "4": "output_param_2",
                    "6": "output2"
                },
                "uVar2": {
                    "1": "bit_count",
                    "15": "leading_zeros",
                    "4": "result",
                    "8": "leading_zeros_count"
                },
                "uVar5": {
                    "1": "u_var5",
                    "17": "shifted_value",
                    "2": "shifted_val",
                    "3": "shifted_local_1c",
                    "4": "shifted_bits"
                },
                "uVar6": {
                    "1": "output_bit_count",
                    "2": "flag",
                    "3": "shift",
                    "4": "shift_count",
                    "6": "shift_amount"
                },
                "uVar7": {
                    "1": "leading_zeros_val",
                    "11": "leading_zeros_result",
                    "2": "leading_zeros_count",
                    "3": "leading_zeros"
                }
            },
            "called": [
                "FUN_080091e4",
                "FUN_080091a4",
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nint decode_and_count_bits_08009630(undefined4 input1,undefined4 input2,uint value1,uint value2,int *output1,\n                int *output2)\n\n{\n  int memory;\n  uint leading_zeros;\n  int count;\n  int value;\n  uint shifted_value;\n  uint shift_amount;\n  undefined8 leading_zeros_result;\n  uint temp_value1;\n  uint temp_value2;\n  \n  memory = allocate_memory(input1,1);\n  shift_amount = (value2 << 1) >> 0x15;\n  temp_value2 = value2 & 0xfffff;\n  if (shift_amount != 0) {\n    temp_value2 = temp_value2 | 0x100000;\n  }\n  if (value1 == 0) {\n    count = count_leading_zeros1(&temp_value2);\n    value = 1;\n    leading_zeros = count + 0x20;\n    *(undefined4 *)(memory + 0x10) = 1;\n    *(uint *)(memory + 0x14) = temp_value2;\n  }\n  else {\n    temp_value1 = value1;\n    leading_zeros = count_leading_zeros1(&temp_value1);\n    if (leading_zeros == 0) {\n      *(uint *)(memory + 0x14) = temp_value1;\n    }\n    else {\n      shifted_value = temp_value2 << (0x20 - leading_zeros & 0xff);\n      temp_value2 = temp_value2 >> (leading_zeros & 0xff);\n      *(uint *)(memory + 0x14) = shifted_value | temp_value1;\n    }\n    if (temp_value2 == 0) {\n      value = 1;\n    }\n    else {\n      value = 2;\n    }\n    *(uint *)(memory + 0x18) = temp_value2;\n    *(int *)(memory + 0x10) = value;\n  }\n  if (shift_amount == 0) {\n    *output1 = leading_zeros - 0x432;\n    leading_zeros_result = count_leading_zeros2(*(undefined4 *)(memory + value * 4 + 0x10));\n    *output2 = (int)((ulonglong)leading_zeros_result >> 0x20) * 0x20 - (int)leading_zeros_result;\n    return memory;\n  }\n  *output1 = (shift_amount - 0x433) + leading_zeros;\n  *output2 = 0x35 - leading_zeros;\n  return memory;\n}\n\n",
            "current_name": "decode_and_count_bits_08009630",
            "entrypoint": "0x08009630",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009630": "decode_and_count_bits_08009630",
                "allocate_and_initialize_memory_080090c0": "allocate_memory",
                "count_leading_zeros_080091a4": "count_leading_zeros2",
                "count_leading_zeros_080091e4": "count_leading_zeros1",
                "iVar1": "memory",
                "iVar3": "count",
                "iVar4": "value",
                "local_1c": "temp_value2",
                "local_20": "temp_value1",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "output1",
                "param_6": "output2",
                "uVar2": "leading_zeros",
                "uVar5": "shifted_value",
                "uVar6": "shift_amount",
                "uVar7": "leading_zeros_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080096e0": {
            "additional_data": {
                "*param_3": {
                    "1": "output_value"
                },
                "FUN_080096e0": {
                    "1": "calculate_result",
                    "2": "calculate_float_product",
                    "3": "calculate_float",
                    "5": "calculate_normalized_product",
                    "6": "calculate_normalized_float"
                },
                "calculate_product_080004c8": {
                    "1": "calculate_product_recursive",
                    "5": "calculate_product"
                },
                "iVar1": {
                    "1": "additional_offset",
                    "10": "offset",
                    "2": "iteration_count",
                    "3": "counter"
                },
                "param_1": {
                    "1": "component_1",
                    "2": "integer_part",
                    "3": "input_1",
                    "4": "base",
                    "5": "input1"
                },
                "param_2": {
                    "1": "decimal_part",
                    "2": "input_exponent",
                    "3": "input_2",
                    "5": "input2",
                    "8": "exponent"
                },
                "param_3": {
                    "1": "normalized_exponent",
                    "13": "result",
                    "2": "exponent",
                    "6": "output"
                },
                "param_4": {
                    "1": "config_param",
                    "13": "constant",
                    "2": "param4",
                    "3": "config_value",
                    "5": "param_4"
                },
                "uVar2": {
                    "1": "abs_b",
                    "2": "positive_exponent",
                    "3": "normalized_exponent"
                },
                "uVar3": {
                    "1": "combined",
                    "2": "combined_float",
                    "3": "product",
                    "7": "combined_value"
                }
            },
            "called": [
                "FUN_080004c8"
            ],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nundefined8 calculate_normalized_float_080096e0(uint input1,uint exponent,int *result,undefined4 constant)\n\n{\n  int offset;\n  uint normalized_exponent;\n  undefined8 combined_value;\n  \n  combined_value = CONCAT44(exponent,input1);\n  offset = 0;\n  normalized_exponent = exponent & 0x7fffffff;\n  *result = 0;\n  if ((normalized_exponent < 0x7ff00000) && ((normalized_exponent | input1) != 0)) {\n    if (normalized_exponent < 0x100000) {\n      combined_value = calculate_product(input1,exponent,0,0x43500000,constant);\n      offset = -0x36;\n      normalized_exponent = (uint)((ulonglong)combined_value >> 0x20) & 0x7fffffff;\n    }\n    input1 = (uint)combined_value;\n    exponent = (uint)((ulonglong)combined_value >> 0x20) & 0x800fffff | 0x3fe00000;\n    *result = ((int)normalized_exponent >> 0x14) + -0x3fe + offset;\n  }\n  return CONCAT44(exponent,input1);\n}\n\n",
            "current_name": "calculate_normalized_float_080096e0",
            "entrypoint": "0x080096e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080096e0": "calculate_normalized_float_080096e0",
                "calculate_product_080004c8": "calculate_product",
                "iVar1": "offset",
                "param_1": "input1",
                "param_2": "exponent",
                "param_3": "result",
                "param_4": "constant",
                "uVar2": "normalized_exponent",
                "uVar3": "combined_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009744": {
            "additional_data": {
                "FUN_08009744": {
                    "1": "allocate_memory_and_assign_to_param",
                    "12": "allocate_and_assign_memory",
                    "2": "allocate_and_initialize_memory",
                    "3": "allocate_and_check_memory",
                    "5": "allocate_and_store_memory"
                },
                "iVar1": {
                    "1": "allocated_memory",
                    "24": "allocation_result",
                    "3": "memory_allocation_result"
                },
                "param_1": {
                    "1": "new_param",
                    "2": "output_param",
                    "3": "output_ptr",
                    "4": "output_pointer",
                    "5": "result",
                    "6": "result_pointer",
                    "9": "result_ptr"
                },
                "param_2": {
                    "1": "input_param",
                    "10": "memory_size",
                    "16": "size",
                    "2": "input_value"
                }
            },
            "called": [
                "FUN_08005728"
            ],
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "code": "\nvoid allocate_and_assign_memory_08009744(int *result_ptr,undefined4 size)\n\n{\n  int allocation_result;\n  \n  DAT_20000c10 = 0;\n  allocation_result = allocate_memory_08005728(size);\n  if ((allocation_result == -1) && (DAT_20000c10 != 0)) {\n    *result_ptr = DAT_20000c10;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "allocate_and_assign_memory_08009744",
            "entrypoint": "0x08009744",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009744": "allocate_and_assign_memory_08009744",
                "iVar1": "allocation_result",
                "param_1": "result_ptr",
                "param_2": "size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009768": {
            "additional_data": {
                "FUN_08009768": {
                    "1": "copy_uint_to_char",
                    "13": "copy_string",
                    "2": "copy_and_terminate_string"
                },
                "cVar1": {
                    "1": "c",
                    "17": "current_char",
                    "5": "current_byte"
                },
                "param_1": {
                    "1": "dest_ptr",
                    "14": "dest",
                    "7": "source"
                },
                "param_2": {
                    "1": "dest",
                    "15": "src",
                    "7": "source"
                },
                "param_3": {
                    "1": "num_chars",
                    "10": "length",
                    "19": "size"
                },
                "puVar2": {
                    "1": "src",
                    "19": "src_ptr",
                    "3": "src_pointer",
                    "5": "dest_ptr"
                },
                "puVar3": {
                    "1": "dest_pointer",
                    "13": "dest_ptr",
                    "2": "dst_pointer",
                    "5": "src_ptr",
                    "6": "dst_ptr"
                },
                "uVar4": {
                    "1": "src_value",
                    "2": "temp_var",
                    "3": "current_byte",
                    "5": "current_value",
                    "6": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nvoid copy_string_08009768(uint *dest,uint *src,uint size)\n\n{\n  char current_char;\n  uint *src_ptr;\n  uint *dest_ptr;\n  uint value;\n  \n  if (((((uint)dest | (uint)src) & 3) == 0) &&\n     (dest_ptr = dest, src_ptr = src, 3 < size)) {\n    do {\n      src = src_ptr + 1;\n      value = *src_ptr;\n      dest = dest_ptr;\n      if ((value + 0xfefefeff & ~value & 0x80808080) != 0) goto LAB_0800979c;\n      size = size - 4;\n      dest = dest_ptr + 1;\n      *dest_ptr = value;\n      dest_ptr = dest;\n      src_ptr = src;\n    } while (3 < size);\n  }\n  src_ptr = src;\n  if (size != 0) {\nLAB_0800979c:\n    current_char = *(char *)src_ptr;\n    *(char *)dest = current_char;\n    while( true ) {\n      dest = (uint *)((int)dest + 1);\n      size = size - 1;\n      if (current_char == '\\0') break;\n      if (size == 0) {\n        return;\n      }\n      src_ptr = (uint *)((int)src_ptr + 1);\n      current_char = *(char *)src_ptr;\n      *(char *)dest = current_char;\n    }\n    if (size != 0) {\n      src_ptr = dest;\n      do {\n        dest_ptr = (uint *)((int)src_ptr + 1);\n        *(char *)src_ptr = '\\0';\n        src_ptr = dest_ptr;\n      } while (dest_ptr != (uint *)(size + (int)dest));\n    }\n  }\n  return;\n}\n\n",
            "current_name": "copy_string_08009768",
            "entrypoint": "0x08009768",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009768": "copy_string_08009768",
                "cVar1": "current_char",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar2": "src_ptr",
                "puVar3": "dest_ptr",
                "uVar4": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080097cc": {
            "additional_data": {
                "FUN_080097cc": {
                    "1": "reverse_and_copy_data",
                    "14": "copy_and_update_memory",
                    "3": "copy_data",
                    "5": "copy_and_allocate_memory"
                },
                "LAB_08009896": {
                    "1": "error_label"
                },
                "allocate_and_initialize_memory_08008af8": {
                    "1": "allocate_and_init_mem_case1",
                    "3": "allocate_and_initialize_memory1"
                },
                "allocate_and_initialize_memory_08009adc": {
                    "1": "allocate_and_initialize_memory3",
                    "2": "allocate_and_initialize_memory2"
                },
                "copy_memory_08001084": {
                    "1": "copy_memory1",
                    "3": "copy_memory"
                },
                "copy_memory_08009a18": {
                    "1": "copy_memory",
                    "2": "copy_memory2"
                },
                "iVar1": {
                    "1": "current_value",
                    "2": "dest_offset",
                    "3": "source_index"
                },
                "iVar3": {
                    "1": "memory_allocation_result",
                    "2": "mem_alloc_result",
                    "5": "new_memory",
                    "7": "allocated_memory"
                },
                "iVar4": {
                    "1": "difference",
                    "2": "temp_variable_2",
                    "4": "remaining_length",
                    "5": "remaining_size",
                    "6": "offset"
                },
                "initialize_and_allocate_memory_080088ec": {
                    "1": "init_and_alloc_mem",
                    "2": "initialize_and_allocate_memory"
                },
                "param_1": {
                    "1": "dst_ptr",
                    "2": "dest",
                    "3": "result",
                    "7": "output_buffer"
                },
                "param_2": {
                    "1": "input_data",
                    "10": "source",
                    "2": "src",
                    "3": "source_data",
                    "4": "source_buffer"
                },
                "param_3": {
                    "1": "sizes",
                    "2": "length",
                    "3": "info"
                },
                "puVar7": {
                    "1": "current_memory_region",
                    "2": "temp_pointer"
                },
                "puVar8": {
                    "1": "next_source",
                    "2": "temp_ptr2"
                },
                "uVar2": {
                    "1": "temp_length",
                    "2": "size",
                    "4": "copy_size",
                    "5": "copy_length"
                },
                "uVar5": {
                    "1": "new_memory_length",
                    "2": "new_buffer_size",
                    "4": "allocated_size",
                    "7": "new_size"
                },
                "uVar6": {
                    "1": "length_to_copy",
                    "2": "data_length",
                    "3": "copy_size"
                },
                "uVar9": {
                    "1": "current_value",
                    "2": "value",
                    "3": "copy_value",
                    "4": "data_value",
                    "5": "temp_value"
                }
            },
            "called": [
                "FUN_08009a18",
                "FUN_08001084",
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_08008af8"
            ],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nundefined4 copy_and_update_memory_080097cc(undefined4 *destination,int *source,int *info)\n\n{\n  int source_index;\n  uint copy_length;\n  int allocated_memory;\n  int offset;\n  uint new_size;\n  uint copy_size;\n  undefined4 *temp_pointer;\n  undefined4 *current_entry;\n  undefined4 temp_value;\n  \n  if (info[2] != 0) {\n    source_index = *source;\n    new_size = source[2];\n    current_entry = (undefined4 *)*info;\n    do {\n      do {\n        temp_pointer = current_entry + 2;\n        temp_value = *current_entry;\n        copy_size = current_entry[1];\n        current_entry = temp_pointer;\n      } while (copy_size == 0);\n      copy_length = copy_size;\n      if ((new_size <= copy_size) && (copy_length = new_size, (*(ushort *)(source + 3) & 0x480) != 0)) {\n        offset = source_index - source[4];\n        new_size = (source[5] * 3) / 2;\n        copy_length = copy_size + 1 + offset;\n        if (new_size < copy_length) {\n          new_size = copy_length;\n        }\n        if ((int)((uint)*(ushort *)(source + 3) << 0x15) < 0) {\n          allocated_memory = allocate_and_initialize_memory1(destination,new_size);\n          if (allocated_memory == 0) {\nerror_handling:\n            *destination = 0xc;\n            *(ushort *)(source + 3) = *(ushort *)(source + 3) | 0x40;\n            info[1] = 0;\n            info[2] = 0;\n            return 0xffffffff;\n          }\n          copy_memory(allocated_memory,source[4],offset);\n          *(ushort *)(source + 3) = *(ushort *)(source + 3) & 0xfb7f | 0x80;\n        }\n        else {\n          allocated_memory = allocate_and_initialize_memory2(destination);\n          if (allocated_memory == 0) {\n            initialize_and_allocate_memory(destination,source[4]);\n            goto error_handling;\n          }\n        }\n        source_index = allocated_memory + offset;\n        source[5] = new_size;\n        source[4] = allocated_memory;\n        *source = source_index;\n        source[2] = new_size - offset;\n        copy_length = copy_size;\n      }\n      copy_memory2(source_index,temp_value,copy_length);\n      offset = info[2];\n      new_size = source[2] - copy_length;\n      source_index = *source + copy_length;\n      source[2] = new_size;\n      *source = source_index;\n      info[2] = offset - copy_size;\n    } while (offset - copy_size != 0);\n  }\n  info[1] = 0;\n  return 0;\n}\n\n",
            "current_name": "copy_and_update_memory_080097cc",
            "entrypoint": "0x080097cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080097cc": "copy_and_update_memory_080097cc",
                "LAB_08009896": "error_handling",
                "allocate_and_initialize_memory_08008af8": "allocate_and_initialize_memory1",
                "allocate_and_initialize_memory_08009adc": "allocate_and_initialize_memory2",
                "copy_memory_08001084": "copy_memory",
                "copy_memory_08009a18": "copy_memory2",
                "iVar1": "source_index",
                "iVar3": "allocated_memory",
                "iVar4": "offset",
                "initialize_and_allocate_memory_080088ec": "initialize_and_allocate_memory",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "info",
                "puVar7": "temp_pointer",
                "puVar8": "current_entry",
                "uVar2": "copy_length",
                "uVar5": "new_size",
                "uVar6": "copy_size",
                "uVar9": "temp_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080098c0": {
            "additional_data": {
                "FUN_080098c0": {
                    "1": "update_data_structure",
                    "2": "update_data_entry",
                    "21": "update_data"
                },
                "param_1": {
                    "1": "parameter",
                    "2": "data_flag",
                    "3": "input_type",
                    "4": "mode",
                    "5": "flag",
                    "7": "type"
                },
                "param_2": {
                    "1": "data_value1",
                    "10": "value",
                    "2": "data1",
                    "4": "value1",
                    "5": "new_value",
                    "8": "data"
                },
                "param_3": {
                    "1": "new_data",
                    "2": "param3",
                    "4": "value2",
                    "5": "param1",
                    "6": "value1"
                },
                "param_4": {
                    "1": "new_data2",
                    "2": "additional_data",
                    "4": "value3",
                    "5": "param2",
                    "6": "value2"
                },
                "puVar1": {
                    "1": "ptr_data",
                    "17": "data_ptr",
                    "6": "data_pointer"
                },
                "uVar2": {
                    "23": "return_value",
                    "8": "result"
                },
                "uVar3": {
                    "1": "bit",
                    "2": "mask",
                    "22": "bit_mask"
                },
                "uVar4": {
                    "1": "size",
                    "15": "count",
                    "2": "data_index",
                    "3": "index",
                    "4": "data_count"
                }
            },
            "called": [
                "FUN_08008af4",
                "FUN_08008af0"
            ],
            "calling": [
                "FUN_080078a0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009906) */\n/* WARNING: Removing unreachable block (ram,0x08009912) */\n\nundefined4 update_data_080098c0(int type,undefined4 value,undefined4 value1,undefined4 value2)\n\n{\n  undefined *data_ptr;\n  undefined4 return_value;\n  uint bit_mask;\n  uint count;\n  \n  FUNC_08008af0(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  data_ptr = DAT_20000168;\n  count = *(uint *)(DAT_20000168 + 4);\n  if ((int)count < 0x20) {\n    if (type != 0) {\n      *(undefined4 *)(DAT_20000168 + count * 4 + 0x88) = value1;\n      bit_mask = 1 << (count & 0xff);\n      *(uint *)(data_ptr + 0x188) = *(uint *)(data_ptr + 0x188) | bit_mask;\n      *(undefined4 *)(data_ptr + count * 4 + 0x108) = value2;\n      if (type == 2) {\n        *(uint *)(data_ptr + 0x18c) = bit_mask | *(uint *)(data_ptr + 0x18c);\n      }\n    }\n    *(uint *)(data_ptr + 4) = count + 1;\n    return_value = DAT_20000448;\n    *(undefined4 *)(data_ptr + (count + 2) * 4) = value;\n    FUNC_08008af4(return_value);\n    return_value = 0;\n  }\n  else {\n    FUNC_08008af4(DAT_20000448);\n    return_value = 0xffffffff;\n  }\n  return return_value;\n}\n\n",
            "current_name": "update_data_080098c0",
            "entrypoint": "0x080098c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080098c0": "update_data_080098c0",
                "param_1": "type",
                "param_2": "value",
                "param_3": "value1",
                "param_4": "value2",
                "puVar1": "data_ptr",
                "uVar2": "return_value",
                "uVar3": "bit_mask",
                "uVar4": "count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009980": {
            "additional_data": {
                "FUN_08009980": {
                    "1": "allocate_initialized_memory",
                    "24": "allocate_and_initialize_memory",
                    "3": "initialize_memory"
                },
                "allocate_and_initialize_memory_08008af8": {
                    "1": "allocate_and_init_memory"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "ptr",
                    "3": "param1",
                    "4": "input",
                    "9": "size"
                },
                "param_2": {
                    "1": "num_chunks",
                    "2": "num_columns",
                    "3": "size",
                    "6": "element_size",
                    "8": "num_rows"
                },
                "param_3": {
                    "1": "col_count",
                    "2": "num_cols",
                    "3": "height",
                    "5": "element_size",
                    "6": "num_elements"
                },
                "puVar1": {
                    "1": "ptr_array",
                    "20": "allocated_memory",
                    "4": "memory_ptr"
                },
                "puVar3": {
                    "1": "ptr_data",
                    "2": "data_ptr",
                    "4": "pointer",
                    "7": "initialized_memory"
                },
                "uVar2": {
                    "1": "adjusted_length",
                    "14": "adjusted_size",
                    "2": "size",
                    "5": "memory_size"
                }
            },
            "called": [
                "FUN_08005d68",
                "FUN_08008af8"
            ],
            "calling": [
                "FUN_080090c0"
            ],
            "code": "\nundefined4 * allocate_and_initialize_memory_08009980(undefined4 size,int num_rows,int num_columns)\n\n{\n  undefined4 *allocated_memory;\n  uint adjusted_size;\n  undefined4 *initialized_memory;\n  \n  allocated_memory = (undefined4 *)allocate_and_init_memory(size,num_columns * num_rows);\n  if (allocated_memory == (undefined4 *)0x0) {\n    return (undefined4 *)0x0;\n  }\n  adjusted_size = (allocated_memory[-1] & 0xfffffffc) - 4;\n  if (adjusted_size < 0x25) {\n    initialized_memory = allocated_memory;\n    if (0x13 < adjusted_size) {\n      *allocated_memory = 0;\n      allocated_memory[1] = 0;\n      if (0x1b < adjusted_size) {\n        allocated_memory[2] = 0;\n        allocated_memory[3] = 0;\n        if (adjusted_size == 0x24) {\n          allocated_memory[4] = 0;\n          allocated_memory[5] = 0;\n          initialized_memory = allocated_memory + 6;\n        }\n        else {\n          initialized_memory = allocated_memory + 4;\n        }\n        *initialized_memory = 0;\n        initialized_memory[1] = 0;\n        initialized_memory[2] = 0;\n        return allocated_memory;\n      }\n      initialized_memory = allocated_memory + 2;\n    }\n    *initialized_memory = 0;\n    initialized_memory[1] = 0;\n    initialized_memory[2] = 0;\n    return allocated_memory;\n  }\n  fill_memory_08005d68(allocated_memory,0);\n  return allocated_memory;\n}\n\n",
            "current_name": "allocate_and_initialize_memory_08009980",
            "entrypoint": "0x08009980",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009980": "allocate_and_initialize_memory_08009980",
                "allocate_and_initialize_memory_08008af8": "allocate_and_init_memory",
                "param_1": "size",
                "param_2": "num_rows",
                "param_3": "num_columns",
                "puVar1": "allocated_memory",
                "puVar3": "initialized_memory",
                "uVar2": "adjusted_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009a18": {
            "additional_data": {
                "FUN_08009a18": {
                    "1": "copy_range",
                    "2": "copy_and_shift_memory",
                    "24": "copy_memory"
                },
                "LAB_08009abc": {
                    "1": "loop1"
                },
                "iVar3": {
                    "1": "copy_count",
                    "2": "num_words",
                    "4": "i",
                    "5": "num_iterations",
                    "9": "iteration"
                },
                "param_1": {
                    "1": "dest_ptr",
                    "11": "dest",
                    "2": "src",
                    "5": "source"
                },
                "param_2": {
                    "1": "src_ptr",
                    "11": "source",
                    "12": "src",
                    "2": "dest",
                    "5": "destination"
                },
                "param_3": {
                    "1": "count",
                    "11": "length",
                    "16": "size",
                    "3": "num_bytes"
                },
                "puVar1": {
                    "1": "dst_ptr",
                    "2": "source_ptr",
                    "22": "dest_ptr",
                    "5": "src_ptr"
                },
                "puVar2": {
                    "1": "dst_ptr",
                    "23": "src_ptr",
                    "5": "dest_ptr"
                },
                "puVar4": {
                    "1": "dst_byte",
                    "2": "dest_end_ptr",
                    "3": "dest_byte",
                    "6": "dest_end",
                    "9": "dest_byte_ptr"
                },
                "puVar5": {
                    "1": "src_ptr2",
                    "2": "src_end_ptr",
                    "4": "src_byte",
                    "6": "src_end",
                    "9": "src_byte_ptr"
                },
                "uVar6": {
                    "1": "temp_length",
                    "11": "remaining_size",
                    "3": "temp_size",
                    "4": "remaining_length"
                },
                "uVar7": {
                    "1": "copy_length",
                    "2": "adjusted_length",
                    "3": "remaining_size2",
                    "4": "adjusted_size"
                }
            },
            "called": [],
            "calling": [
                "FUN_08009adc",
                "FUN_080097cc"
            ],
            "code": "\nvoid copy_memory_08009a18(undefined4 *destination,undefined4 *src,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  int iteration;\n  undefined *dest_byte_ptr;\n  undefined4 *src_byte_ptr;\n  uint remaining_size;\n  uint adjusted_size;\n  \n  if ((src < destination) && (src_ptr = (undefined4 *)((int)src + size), destination < src_ptr)) {\n    dest_byte_ptr = (undefined *)((int)destination + size);\n    if (size != 0) {\n      do {\n        src_ptr = (undefined4 *)((int)src_ptr + -1);\n        dest_byte_ptr = dest_byte_ptr + -1;\n        *dest_byte_ptr = *(undefined *)src_ptr;\n      } while (src != src_ptr);\n    }\n  }\n  else {\n    adjusted_size = size;\n    if (0xf < size) {\n      if ((((uint)destination | (uint)src) & 3) != 0) goto loop1;\n      src_ptr = src + 4;\n      dest_ptr = destination + 4;\n      do {\n        src_byte_ptr = src_ptr + 4;\n        dest_ptr[-4] = src_ptr[-4];\n        dest_ptr[-3] = src_ptr[-3];\n        dest_ptr[-2] = src_ptr[-2];\n        dest_ptr[-1] = src_ptr[-1];\n        src_ptr = src_byte_ptr;\n        dest_ptr = dest_ptr + 4;\n      } while (src_byte_ptr != (undefined4 *)((int)src + (size - 0x10 & 0xfffffff0) + 0x20));\n      iteration = (size - 0x10 >> 4) + 1;\n      adjusted_size = size & 0xf;\n      src = src + iteration * 4;\n      destination = destination + iteration * 4;\n      if (3 < adjusted_size) {\n        src_ptr = destination + -1;\n        remaining_size = adjusted_size;\n        dest_ptr = src;\n        do {\n          remaining_size = remaining_size - 4;\n          src_ptr = src_ptr + 1;\n          *src_ptr = *dest_ptr;\n          dest_ptr = dest_ptr + 1;\n        } while (3 < remaining_size);\n        iteration = (adjusted_size - 4 & 0xfffffffc) + 4;\n        destination = (undefined4 *)((int)destination + iteration);\n        src = (undefined4 *)((int)src + iteration);\n        adjusted_size = size & 3;\n      }\n    }\n    size = adjusted_size;\n    if (adjusted_size != 0) {\nloop1:\n      dest_byte_ptr = (undefined *)((int)destination + -1);\n      src_ptr = src;\n      do {\n        dest_ptr = (undefined4 *)((int)src_ptr + 1);\n        dest_byte_ptr = dest_byte_ptr + 1;\n        *dest_byte_ptr = *(undefined *)src_ptr;\n        src_ptr = dest_ptr;\n      } while (dest_ptr != (undefined4 *)(size + (int)src));\n      return;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "copy_memory_08009a18",
            "entrypoint": "0x08009a18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009a18": "copy_memory_08009a18",
                "LAB_08009abc": "loop1",
                "iVar3": "iteration",
                "param_1": "destination",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "puVar4": "dest_byte_ptr",
                "puVar5": "src_byte_ptr",
                "uVar6": "remaining_size",
                "uVar7": "adjusted_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009adc": {
            "additional_data": {
                "DAT_20000454": {
                    "1": "constant_value"
                },
                "FUN_08009adc": {
                    "1": "allocate_or_initialize_memory",
                    "2": "allocate_memory",
                    "25": "allocate_and_initialize_memory"
                },
                "allocate_and_initialize_memory_08008af8": {
                    "1": "allocate_and_initialize_memory_helper"
                },
                "copy_memory_08009a18": {
                    "1": "copy_memory"
                },
                "iVar11": {
                    "1": "temp_variable_8",
                    "2": "temp_var_6",
                    "3": "temp_var5"
                },
                "iVar2": {
                    "1": "variable_2",
                    "2": "var2",
                    "5": "temp_var1",
                    "6": "temp_var"
                },
                "iVar5": {
                    "1": "data_offset",
                    "2": "temp_var2",
                    "3": "temp_variable_3",
                    "4": "temp_var_3",
                    "6": "temp_var3"
                },
                "iVar7": {
                    "1": "temp_header"
                },
                "initialize_and_allocate_memory_080088ec": {
                    "1": "initialize_and_allocate_memory_helper"
                },
                "initialize_data_080090a8": {
                    "1": "initialize_data_1"
                },
                "initialize_data_080090b4": {
                    "1": "initialize_data_2"
                },
                "param_1": {
                    "1": "param_addr",
                    "2": "memory_param",
                    "3": "input_array"
                },
                "param_2": {
                    "1": "param_values",
                    "2": "data_ptr",
                    "3": "existing_data",
                    "9": "existing_memory"
                },
                "param_3": {
                    "1": "size_param",
                    "2": "size",
                    "6": "data_size",
                    "9": "memory_size"
                },
                "piVar1": {
                    "1": "new_pointer_1",
                    "10": "new_memory",
                    "2": "new_data",
                    "3": "temp_ptr"
                },
                "piVar3": {
                    "1": "updated_memory",
                    "2": "ptr3",
                    "3": "new_memory_ptr",
                    "5": "allocated_memory"
                },
                "piVar7": {
                    "1": "temp_ptr_3",
                    "2": "temp_var_5"
                },
                "uVar10": {
                    "1": "variable_10",
                    "2": "var10",
                    "4": "total_size"
                },
                "uVar4": {
                    "1": "uint_var4",
                    "2": "var4",
                    "3": "temp_var_3",
                    "4": "temp_var_2",
                    "6": "temp_var2"
                },
                "uVar6": {
                    "1": "allocated_chunk_size",
                    "2": "temp_var_5",
                    "3": "temp_var_4",
                    "4": "temp_var4"
                },
                "uVar8": {
                    "1": "allocated_chunk_size_aligned",
                    "10": "aligned_size",
                    "2": "new_size"
                },
                "uVar9": {
                    "1": "aligned_old_size",
                    "2": "aligned_existing_size",
                    "3": "aligned_size"
                }
            },
            "called": [
                "FUN_080090a8",
                "FUN_08009a18",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_08008af8"
            ],
            "calling": [
                "FUN_080097cc"
            ],
            "code": "\nint * allocate_and_initialize_memory_08009adc(undefined4 *param_address,int *existing_memory,uint memory_size)\n\n{\n  int *new_memory;\n  int temp_var;\n  int *allocated_memory;\n  uint temp_var2;\n  int temp_var3;\n  uint temp_var4;\n  int *temp_var_6;\n  uint aligned_size;\n  uint aligned_size;\n  uint total_size;\n  int temp_var5;\n  \n  if (existing_memory == (int *)0x0) {\n    allocated_memory = (int *)allocate_and_initialize_memory_08009adc_helper(param_address,memory_size);\n    return allocated_memory;\n  }\n  initialize_data_1();\n  temp_var4 = existing_memory[-1];\n  aligned_size = temp_var4 & 0xfffffffc;\n  allocated_memory = existing_memory + -2;\n  if (memory_size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = memory_size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_08009b8e;\n  }\n  if (aligned_size < memory_size) {\nLAB_08009b8e:\n    *param_address = 0xc;\n    return (int *)0x0;\n  }\n  temp_var5 = (int)allocated_memory + aligned_size;\n  total_size = aligned_size;\n  if ((int)aligned_size < (int)aligned_size) {\n    if (DAT_20000454 == temp_var5) {\n      temp_var5 = (*(uint *)(DAT_20000454 + 4) & 0xfffffffc) + aligned_size;\n      if ((int)(aligned_size + 0x10) <= temp_var5) {\n        DAT_20000454 = (int)allocated_memory + aligned_size;\n        *(uint *)(DAT_20000454 + 4) = temp_var5 - aligned_size | 1;\n        existing_memory[-1] = aligned_size | existing_memory[-1] & 1U;\n        initialize_data_2(param_address);\n        return existing_memory;\n      }\n      if (-1 < (int)(temp_var4 << 0x1f)) {\n        new_memory = (int *)((int)allocated_memory - existing_memory[-2]);\n        temp_var4 = new_memory[1] & 0xfffffffc;\n        if ((int)(aligned_size + 0x10) <= (int)(temp_var5 + temp_var4)) {\n          temp_var3 = new_memory[3];\n          allocated_memory = new_memory + 2;\n          temp_var = *allocated_memory;\n          aligned_size = aligned_size - 4;\n          *(int *)(temp_var + 0xc) = temp_var3;\n          *(int *)(temp_var3 + 8) = temp_var;\n          if (aligned_size < 0x25) {\n            temp_var = *existing_memory;\n            temp_var_6 = allocated_memory;\n            if (0x13 < aligned_size) {\n              new_memory[2] = temp_var;\n              new_memory[3] = existing_memory[1];\n              temp_var = existing_memory[2];\n              if (aligned_size < 0x1c) {\n                existing_memory = existing_memory + 2;\n                temp_var_6 = new_memory + 4;\n              }\n              else {\n                new_memory[4] = temp_var;\n                new_memory[5] = existing_memory[3];\n                temp_var = existing_memory[4];\n                if (aligned_size == 0x24) {\n                  new_memory[6] = temp_var;\n                  new_memory[7] = existing_memory[5];\n                  temp_var = existing_memory[6];\n                  existing_memory = existing_memory + 6;\n                  temp_var_6 = new_memory + 8;\n                }\n                else {\n                  existing_memory = existing_memory + 4;\n                  temp_var_6 = new_memory + 6;\n                }\n              }\n            }\n            *temp_var_6 = temp_var;\n            temp_var_6[1] = existing_memory[1];\n            temp_var_6[2] = existing_memory[2];\n          }\n          else {\n            copy_memory(allocated_memory,existing_memory);\n          }\n          DAT_20000454 = (int)new_memory + aligned_size;\n          *(uint *)(DAT_20000454 + 4) = (temp_var5 + temp_var4) - aligned_size | 1;\n          new_memory[1] = aligned_size | new_memory[1] & 1U;\n          initialize_data_2(param_address);\n          return allocated_memory;\n        }\nLAB_08009bb0:\n        total_size = aligned_size + temp_var4;\n        if ((int)aligned_size <= (int)total_size) {\n          temp_var3 = new_memory[3];\n          temp_var_6 = new_memory + 2;\n          temp_var = *temp_var_6;\n          *(int *)(temp_var + 0xc) = temp_var3;\n          temp_var5 = (int)new_memory + total_size;\n          *(int *)(temp_var3 + 8) = temp_var;\n          allocated_memory = new_memory;\n          if (aligned_size - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          copy_memory(temp_var_6,existing_memory);\n          existing_memory = temp_var_6;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(temp_var5 + 4) & 0xfffffffe) + temp_var5 + 4) << 0x1f) {\n        temp_var2 = *(uint *)(temp_var5 + 4) & 0xfffffffc;\n        total_size = aligned_size + temp_var2;\n        if ((int)total_size < (int)aligned_size) {\n          if ((int)(temp_var4 << 0x1f) < 0) goto LAB_08009b36;\n          new_memory = (int *)((int)allocated_memory - existing_memory[-2]);\n          temp_var4 = new_memory[1] & 0xfffffffc;\n          total_size = temp_var2 + temp_var4 + aligned_size;\n          if ((int)total_size < (int)aligned_size) goto LAB_08009bb0;\n          temp_var = *(int *)(temp_var5 + 8);\n          temp_var5 = *(int *)(temp_var5 + 0xc);\n          *(int *)(temp_var + 0xc) = temp_var5;\n          *(int *)(temp_var5 + 8) = temp_var;\n          temp_var_6 = new_memory + 2;\n          temp_var = *temp_var_6;\n          temp_var3 = new_memory[3];\n          *(int *)(temp_var + 0xc) = temp_var3;\n          temp_var5 = (int)new_memory + total_size;\n          *(int *)(temp_var3 + 8) = temp_var;\n          allocated_memory = new_memory;\n          if (0x24 < aligned_size - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          aligned_size = aligned_size - 4;\n          temp_var = *existing_memory;\n          new_memory = temp_var_6;\n          if (0x13 < aligned_size) {\n            allocated_memory[2] = temp_var;\n            allocated_memory[3] = existing_memory[1];\n            temp_var = existing_memory[2];\n            if (aligned_size < 0x1c) {\n              existing_memory = existing_memory + 2;\n              new_memory = allocated_memory + 4;\n            }\n            else {\n              allocated_memory[4] = temp_var;\n              allocated_memory[5] = existing_memory[3];\n              temp_var = existing_memory[4];\n              if (aligned_size == 0x24) {\n                allocated_memory[6] = temp_var;\n                allocated_memory[7] = existing_memory[5];\n                temp_var = existing_memory[6];\n                existing_memory = existing_memory + 6;\n                new_memory = allocated_memory + 8;\n              }\n              else {\n                existing_memory = existing_memory + 4;\n                new_memory = allocated_memory + 6;\n              }\n            }\n          }\n          *new_memory = temp_var;\n          new_memory[1] = existing_memory[1];\n          new_memory[2] = existing_memory[2];\n          existing_memory = temp_var_6;\n        }\n        else {\n          temp_var = *(int *)(temp_var5 + 8);\n          temp_var3 = *(int *)(temp_var5 + 0xc);\n          *(int *)(temp_var + 0xc) = temp_var3;\n          temp_var5 = (int)allocated_memory + total_size;\n          *(int *)(temp_var3 + 8) = temp_var;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(temp_var4 << 0x1f)) {\n        new_memory = (int *)((int)allocated_memory - existing_memory[-2]);\n        temp_var4 = new_memory[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    new_memory = (int *)allocate_and_initialize_memory_08009adc_helper(param_address,memory_size);\n    if (new_memory != (int *)0x0) {\n      if ((int *)((existing_memory[-1] & 0xfffffffeU) + (int)allocated_memory) == new_memory + -2) {\n        total_size = aligned_size + (new_memory[-1] & 0xfffffffcU);\n        temp_var5 = (int)allocated_memory + total_size;\n        goto LAB_08009c00;\n      }\n      aligned_size = aligned_size - 4;\n      if (aligned_size < 0x25) {\n        temp_var5 = *existing_memory;\n        allocated_memory = existing_memory;\n        temp_var_6 = new_memory;\n        if (0x13 < aligned_size) {\n          *new_memory = temp_var5;\n          new_memory[1] = existing_memory[1];\n          if (aligned_size < 0x1c) {\n            temp_var5 = existing_memory[2];\n            allocated_memory = existing_memory + 2;\n            temp_var_6 = new_memory + 2;\n          }\n          else {\n            new_memory[2] = existing_memory[2];\n            new_memory[3] = existing_memory[3];\n            if (aligned_size == 0x24) {\n              new_memory[4] = existing_memory[4];\n              new_memory[5] = existing_memory[5];\n              temp_var5 = existing_memory[6];\n              allocated_memory = existing_memory + 6;\n              temp_var_6 = new_memory + 6;\n            }\n            else {\n              temp_var5 = existing_memory[4];\n              allocated_memory = existing_memory + 4;\n              temp_var_6 = new_memory + 4;\n            }\n          }\n        }\n        *temp_var_6 = temp_var5;\n        temp_var_6[1] = allocated_memory[1];\n        temp_var_6[2] = allocated_memory[2];\n      }\n      else {\n        copy_memory(new_memory,existing_memory);\n      }\n      initialize_and_allocate_memory_helper(param_address,existing_memory);\n    }\n    initialize_data_2(param_address);\n    existing_memory = new_memory;\n  }\n  else {\nLAB_08009c00:\n    if (total_size - aligned_size < 0x10) {\n      allocated_memory[1] = allocated_memory[1] & 1U | total_size;\n      *(uint *)(temp_var5 + 4) = *(uint *)(temp_var5 + 4) | 1;\n    }\n    else {\n      allocated_memory[1] = allocated_memory[1] & 1U | aligned_size;\n      *(uint *)((int)allocated_memory + aligned_size + 4) = total_size - aligned_size | 1;\n      *(uint *)(temp_var5 + 4) = *(uint *)(temp_var5 + 4) | 1;\n      initialize_and_allocate_memory_helper(param_address,(int)allocated_memory + aligned_size + 8);\n    }\n    initialize_data_2(param_address);\n  }\n  return existing_memory;\n}\n\n",
            "current_name": "allocate_and_initialize_memory_08009adc",
            "entrypoint": "0x08009adc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009adc": "allocate_and_initialize_memory_08009adc",
                "allocate_and_initialize_memory_08008af8": "allocate_and_initialize_memory_helper",
                "copy_memory_08009a18": "copy_memory",
                "iVar11": "temp_var5",
                "iVar2": "temp_var",
                "iVar5": "temp_var3",
                "iVar7": "temp_header",
                "initialize_and_allocate_memory_080088ec": "initialize_and_allocate_memory_helper",
                "initialize_data_080090a8": "initialize_data_1",
                "initialize_data_080090b4": "initialize_data_2",
                "param_1": "param_address",
                "param_2": "existing_memory",
                "param_3": "memory_size",
                "piVar1": "new_memory",
                "piVar3": "allocated_memory",
                "piVar7": "temp_var_6",
                "uVar10": "total_size",
                "uVar4": "temp_var2",
                "uVar6": "temp_var4",
                "uVar8": "aligned_size",
                "uVar9": "aligned_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009e68": {
            "called": [],
            "calling": [
                "FUN_08005d20",
                "FUN_08000134",
                "FUN_08000110"
            ],
            "code": "\nvoid FUNC_08009e68(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08009e68",
            "entrypoint": "0x08009e68",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08009e68": "FUNC_08009e68"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08009e74": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_08009e74(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08009e74",
            "entrypoint": "0x08009e74",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08009e74": "FUNC_08009e74"
            },
            "skipped": true,
            "tags": []
        },
        "entry": {
            "called": [
                "FUN_08005d20",
                "FUN_08005780",
                "FUN_08005224"
            ],
            "calling": [],
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200009c8; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800a1a4);\n  }\n  for (puVar2 = &DAT_200009c8; puVar2 < &DAT_20000c14; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_registers_08005780();\n  execute_functions_08005d20();\n  UNRECOVERED_JUMPTABLE = (code *)0x800581a;\n  initialize_system_08005224();\n                    /* WARNING: Could not recover jumptable at 0x0800581a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x080057e8",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_08005838": {
            "additional_data": {
                "0x400921fb": {
                    "1": "one"
                },
                "0x54442d18": {
                    "1": "positive_infinity"
                },
                "0x7f3321d2": {
                    "1": "na_n"
                },
                "0x7ff00000": {
                    "1": "exponent_limit"
                },
                "FUNC_08005d0c": {
                    "1": "extra_calculation",
                    "2": "do_something",
                    "3": "helper_function"
                },
                "F_08000158": {
                    "1": "calculate_result_2"
                },
                "F_0800015c": {
                    "1": "calculate_1"
                },
                "F_0800071c": {
                    "1": "calculate_floating_point"
                },
                "F_080059f0": {
                    "1": "calculate_2"
                },
                "F_08005d0c": {
                    "1": "func_08005d0c"
                },
                "SCARRY4": {
                    "1": "signed_overflow"
                },
                "calculate_0800015c": {
                    "1": "calculate_result",
                    "2": "perform_calculation"
                },
                "calculate_floating_point_0800071c": {
                    "1": "calculate_float",
                    "6": "calculate_floating_point"
                },
                "calculate_result_08000158": {
                    "1": "calculate_sub_result"
                },
                "calculate_result_080059f0": {
                    "1": "calculate_result_b",
                    "2": "calculate_default_result",
                    "3": "calculate_special_result"
                },
                "iVar1": {
                    "1": "calculation_result",
                    "2": "diff",
                    "22": "difference"
                },
                "param_1": {
                    "1": "first_param",
                    "12": "input1",
                    "2": "input_param1",
                    "3": "value1",
                    "9": "input_1"
                },
                "param_2": {
                    "1": "second_param",
                    "12": "input2",
                    "2": "input_param2",
                    "3": "value2",
                    "9": "input_2"
                },
                "param_3": {
                    "1": "third_param",
                    "12": "input3",
                    "2": "input_param3",
                    "3": "value3",
                    "9": "input_3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "12": "input4",
                    "2": "input_param4",
                    "3": "value4",
                    "9": "input_4"
                },
                "thunk_FUN_08005838": {
                    "1": "handle_floating_point",
                    "19": "calculate_result",
                    "2": "calculate_floating_point",
                    "5": "calculate_float_result"
                },
                "uVar1": {
                    "1": "temp1"
                },
                "uVar2": {
                    "1": "result_var1",
                    "2": "upper_bits",
                    "3": "upper_result",
                    "9": "result_high"
                },
                "uVar3": {
                    "1": "conditional_value",
                    "2": "condition",
                    "7": "flag"
                },
                "uVar4": {
                    "1": "positive_param4",
                    "2": "masked_param_4",
                    "4": "param4_masked"
                },
                "uVar5": {
                    "1": "abs_num_2",
                    "2": "temp5",
                    "4": "param2_masked"
                },
                "uVar6": {
                    "1": "floating_result",
                    "2": "temp_result",
                    "22": "result"
                },
                "uVar7": {
                    "1": "result7"
                }
            },
            "called": [
                "FUN_08005838"
            ],
            "calling": [
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "code": "\nuint calculate_result_thunk_08005838(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int difference;\n  undefined4 result_high;\n  uint flag;\n  uint param4_masked;\n  uint param2_masked;\n  undefined8 result;\n  \n  param4_masked = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (param4_masked | (-input3 | input3) >> 0x1f)) ||\n     (param2_masked = input2 & 0x7fffffff, 0x7ff00000 < (param2_masked | (-input1 | input1) >> 0x1f))) {\n    param4_masked = perform_calculation(input3,input4,input1,input2);\n    return param4_masked;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    param4_masked = calculate_special_result();\n    return param4_masked;\n  }\n  flag = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((param2_masked | input1) == 0) {\n    if (flag == 2) {\n      return 0x54442d18;\n    }\n    if (flag != 3) {\n      return input1;\n    }\n  }\n  else if ((param4_masked | input3) != 0) {\n    if (param4_masked == 0x7ff00000) {\n      if (param2_masked == 0x7ff00000) {\n        if (flag == 2) {\n          return 0x7f3321d2;\n        }\n        if (flag == 3) {\n          return 0x7f3321d2;\n        }\n        if (flag == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (flag == 2) {\n        return 0x54442d18;\n      }\n      if (flag != 3) {\n        if (flag != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (param2_masked != 0x7ff00000) {\n      difference = (int)(param2_masked - param4_masked) >> 0x14;\n      if (difference < 0x3d) {\n        if (((int)input4 < 0) && (difference + 0x3c < 0 != signed_overflow(difference,0x3c))) {\n          result = 0;\n        }\n        else {\n          calculate_floating_point(input1,input2,input3,input4,input4);\n          FUNC_08005d0c();\n          result = calculate_special_result();\n        }\n      }\n      else {\n        result = 0x3ff921fb54442d18;\n      }\n      result_high = (undefined4)((ulonglong)result >> 0x20);\n      param4_masked = (uint)result;\n      if (flag == 1) {\n        return param4_masked;\n      }\n      if (flag == 2) {\n        result = calculate_result_thunk_08005838_helper(param4_masked,result_high,0x33145c07,0x3ca1a626);\n        param4_masked = calculate_result_thunk_08005838_helper(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n        return param4_masked;\n      }\n      if (flag != 0) {\n        result = calculate_result_thunk_08005838_helper(param4_masked,result_high,0x33145c07,0x3ca1a626);\n        param4_masked = calculate_result_thunk_08005838_helper((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n        return param4_masked;\n      }\n      return param4_masked;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "current_name": "calculate_result_thunk_08005838",
            "entrypoint": "0x08005834",
            "imported": false,
            "improved": true,
            "renaming": {
                "SCARRY4": "signed_overflow",
                "calculate_0800015c": "perform_calculation",
                "calculate_floating_point_0800071c": "calculate_floating_point",
                "calculate_result_08000158": "calculate_result_helper",
                "calculate_result_080059f0": "calculate_special_result",
                "iVar1": "difference",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "thunk_FUN_08005838": "calculate_result_thunk_08005838",
                "uVar2": "result_high",
                "uVar3": "flag",
                "uVar4": "param4_masked",
                "uVar5": "param2_masked",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000158",
            "FUN_0800015c",
            "FUN_080003d4",
            "FUN_080003f4",
            "FUN_08000418",
            "FUN_080006a4",
            "FUN_0800088a",
            "FUN_080008fc",
            "FUN_080009fc",
            "FUN_08000aa4",
            "FUN_08000aa8",
            "FUN_08000c08",
            "FUN_08000c10",
            "FUN_08000cb8",
            "FUN_08000e20",
            "FUN_08000f68",
            "FUN_08001044",
            "FUN_08001084",
            "FUN_08001170",
            "FUN_0800119c",
            "FUN_0800121c",
            "FUN_0800157c",
            "FUN_080015a0",
            "FUN_080015b4",
            "FUN_080015fc",
            "FUN_08001618",
            "FUN_0800166c",
            "FUN_0800177c",
            "FUN_080017c4",
            "FUN_08001a80",
            "FUN_08002d3c",
            "FUN_08003440",
            "FUN_08003504",
            "FUN_08003568",
            "FUN_0800360c",
            "FUN_08003c94",
            "FUN_08003d60",
            "FUN_08003e38",
            "FUN_08003f18",
            "FUN_08003ff8",
            "FUN_080040a0",
            "FUN_08004104",
            "FUN_0800416a",
            "FUN_080041a8",
            "FUN_080041ea",
            "FUN_0800422e",
            "FUN_080042de",
            "FUN_08004e6c",
            "FUN_08005674",
            "FUN_08005780",
            "FUN_08005d14",
            "FUN_08005d20",
            "FUN_08005d68",
            "FUN_08005dfc",
            "FUN_08005e40",
            "FUN_08008ad4",
            "FUN_0800901c",
            "FUN_080090a8",
            "FUN_080090b4",
            "FUN_0800910c",
            "FUN_080091a4",
            "FUN_080091e4",
            "FUN_080094f8",
            "FUN_08009768",
            "FUN_080098c0",
            "FUN_08009a18"
        ],
        [
            "FUN_080004c8",
            "FUN_0800071c",
            "FUN_08000988",
            "FUN_08000fd0",
            "FUN_080011ec",
            "FUN_080016d0",
            "FUN_08001714",
            "FUN_0800172a",
            "FUN_08002ad8",
            "FUN_08002bb4",
            "FUN_08002c2e",
            "FUN_08002ca8",
            "FUN_08002d98",
            "FUN_08003518",
            "FUN_08003540",
            "FUN_080035a4",
            "FUN_08003640",
            "FUN_080036a8",
            "FUN_08003908",
            "FUN_08003a94",
            "FUN_08004436",
            "FUN_08004ae0",
            "FUN_08004e74",
            "FUN_08004f2c",
            "FUN_08004f60",
            "FUN_080055f4",
            "FUN_08005680",
            "FUN_08005728",
            "FUN_080078c0"
        ],
        [
            "FUN_08000978",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_080009c0",
            "FUN_08000fc8",
            "FUN_08000ff4",
            "FUN_08001762",
            "FUN_08001ab0",
            "FUN_08002640",
            "FUN_080027f4",
            "FUN_080046ec",
            "FUN_08004f3c",
            "FUN_080053b0",
            "FUN_08005500",
            "FUN_080096e0",
            "FUN_08009744"
        ],
        [
            "FUN_080009d4",
            "FUN_080009e8",
            "FUN_08001030",
            "FUN_0800151c",
            "FUN_08001ccc",
            "FUN_08001f6c",
            "FUN_0800438a",
            "FUN_08005348",
            "FUN_0800884c"
        ],
        [
            "FUN_080014f0",
            "FUN_08003260",
            "FUN_08004ea4",
            "FUN_08004ee8",
            "FUN_08005598",
            "FUN_080059f0",
            "FUN_080088ec"
        ],
        [
            "FUN_080052a0",
            "thunk_FUN_08005838",
            "FUN_08005838",
            "FUN_08008af8"
        ],
        [
            "FUN_08004bd8",
            "FUN_08004d78",
            "FUN_08009980",
            "FUN_08009adc"
        ],
        [
            "FUN_080049cc",
            "FUN_08004f78",
            "FUN_080090c0",
            "FUN_080097cc"
        ],
        [
            "FUN_080017b4",
            "FUN_080036f8",
            "FUN_0800491c",
            "FUN_08009120",
            "FUN_08009244",
            "FUN_08009258",
            "FUN_08009444",
            "FUN_08009530",
            "FUN_08009630"
        ],
        [
            "FUN_08005224",
            "FUN_08005704",
            "FUN_08005714",
            "FUN_080093a4"
        ],
        [
            "FUN_080079e8"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 675159
}