{
    "functions": {
        "FUN_00102020": {
            "additional_data": {
                "0x0": {
                    "1": "function_address"
                },
                "<original_function_name>": {
                    "1": "execute_function_at_address"
                },
                "<original_variable_name_1>": {
                    "1": "jump_target"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "CODE_PTR": {
                    "1": "code_pointer"
                },
                "FUN_00102020": {
                    "1": "invoke_external_function",
                    "14": "execute_indirect_jump",
                    "2": "call_indirect_jump",
                    "3": "execute_function_at_address",
                    "7": "execute_indirect_call"
                },
                "PTR_00": {
                    "1": "target_function"
                },
                "PTR_undefined": {
                    "1": "jump_table"
                },
                "code": {
                    "1": "function_to_execute",
                    "2": "jump_function"
                },
                "undefined": {
                    "1": "memory_address",
                    "2": "target_address"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_indirect_jump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(jump_function *)(target_address *)0x0)();\n  return;\n}\n\n",
            "current_name": "execute_indirect_jump_00102020",
            "entrypoint": "0x00102020",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020",
                "code": "jump_function",
                "undefined": "target_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001025a0": {
            "additional_data": {
                "*piVar1 == 2": {
                    "1": "is_no_such_file_error"
                },
                "0xffffffffffffffff": {
                    "1": "error_return_value"
                },
                "DAT_": {
                    "1": ""
                },
                "FUN_001025a0": {
                    "1": "handle_file_not_found",
                    "2": "handle_file_not_found_error",
                    "4": "check_file_existence",
                    "7": "file_not_found_error"
                },
                "FUN_00107920": {
                    "3": "print_error_message"
                },
                "PTR_": {
                    "1": ""
                },
                "__errno_location": {
                    "1": "get_error_location",
                    "2": "get_error_code",
                    "3": "get_error_number",
                    "4": "get_errno_location"
                },
                "dcgettext": {
                    "1": "translate_error_message",
                    "2": "get_translated_message",
                    "4": "get_error_message"
                },
                "piVar1": {
                    "1": "error_location_ptr",
                    "2": "error_number_ptr",
                    "4": "error_pointer",
                    "8": "errno_ptr"
                },
                "strerror": {
                    "1": "get_error_msg",
                    "14": "get_error_string",
                    "4": "get_error_description"
                },
                "uVar2": {
                    "1": "localized_error_message",
                    "29": "error_message"
                }
            },
            "called": [
                "FUN_00107920",
                "dcgettext",
                "strerror",
                "__errno_location"
            ],
            "calling": [
                "FUN_001052a0"
            ],
            "code": "\nundefined8 file_not_found_error_001025a0(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_message;\n  \n  errno_ptr = __errno_location();\n  if (*errno_ptr == 2) {\n    error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n    FUN_00107920(error_message);\n  }\n  else {\n    strerror(*errno_ptr);\n    error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    FUN_00107920(error_message);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "current_name": "file_not_found_error_001025a0",
            "entrypoint": "0x001025a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001025a0": "file_not_found_error_001025a0",
                "__errno_location": "get_errno_location",
                "dcgettext": "get_localized_error_message",
                "piVar1": "errno_ptr",
                "strerror": "get_error_string",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010266f": {
            "additional_data": {
                "FUN_0010266f": {
                    "1": "print_target_list",
                    "30": "print_supported_targets"
                },
                "__c": {
                    "1": "new_line_char",
                    "2": "character"
                },
                "__format": {
                    "1": "format"
                },
                "__ptr": {
                    "31": "target_list"
                },
                "__stream": {
                    "1": "output_stream"
                },
                "bfd_target_list": {
                    "1": "get_target_list"
                },
                "dcgettext": {
                    "1": "get_translated_message"
                },
                "fprintf": {
                    "1": "write_formatted"
                },
                "fputc": {
                    "1": "write_character"
                },
                "free": {
                    "1": "dealocate_memory"
                },
                "lVar1": {
                    "1": "target_addr",
                    "2": "target_value",
                    "3": "target_id",
                    "9": "current_target"
                },
                "param_1": {
                    "24": "target",
                    "7": "target_name"
                },
                "param_2": {
                    "28": "output_file",
                    "3": "output_stream"
                },
                "pcVar2": {
                    "1": "target_message",
                    "19": "message",
                    "2": "text",
                    "4": "target_string"
                },
                "plVar3": {
                    "1": "target_iterator",
                    "19": "current_target",
                    "2": "target_pointer",
                    "4": "target_ptr"
                }
            },
            "called": [
                "free",
                "fputc",
                "fprintf",
                "dcgettext",
                "bfd_target_list"
            ],
            "calling": [
                "FUN_0010342d",
                "FUN_0010394a"
            ],
            "code": "\nvoid print_supported_targets_0010266f(long target,FILE *output_file)\n\n{\n  long current_target;\n  char *message;\n  long *target_list;\n  long *current_target;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(output_file,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(output_file,message,target);\n  }\n  target_list = (long *)bfd_target_list();\n  current_target = target_list;\n  while( true ) {\n    current_target = *current_target;\n    current_target = current_target + 1;\n    if (current_target == 0) break;\n    fprintf(output_file,\" %s\");\n  }\n  fputc(10,output_file);\n  free(target_list);\n  return;\n}\n\n",
            "current_name": "print_supported_targets_0010266f",
            "entrypoint": "0x0010266f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "__ptr": "target_list",
                "bfd_target_list": "get_target_list",
                "dcgettext": "get_translated_message",
                "fprintf": "write_formatted",
                "fputc": "write_character",
                "free": "dealocate_memory",
                "lVar1": "current_target",
                "param_1": "target",
                "param_2": "output_file",
                "pcVar2": "message",
                "plVar3": "current_target"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102710": {
            "additional_data": {
                "DAT_0010d5f0": {
                    "1": "converted_library",
                    "2": "library_data",
                    "3": "global_variable_1"
                },
                "DAT_0010d5f8": {
                    "1": "flag_variable2",
                    "2": "global_variable_3"
                },
                "DAT_0010d610": {
                    "1": "working_flag",
                    "2": "global_variable_2"
                },
                "DAT_0010d618": {
                    "1": "unaff_var_rbp_2",
                    "2": "result",
                    "3": "global_variable_4"
                },
                "DAT_0010d64c": {
                    "1": "current_format",
                    "3": "global_variable_5"
                },
                "DF_0010d64c": {
                    "1": "global_var_5"
                },
                "FUN_00102710": {
                    "1": "open_and_check_bfd",
                    "2": "process_binary",
                    "3": "extract_library_files",
                    "4": "extract_archived_files"
                },
                "FUN_001027cb": {
                    "1": "handle_conversion_error"
                },
                "FUN_00103bd1": {
                    "1": "perform_cleanup_operation",
                    "3": "cleanup_and_exit"
                },
                "FUN_001053b7": {
                    "1": "process_additional_data"
                },
                "FUN_00107690": {
                    "1": "print_error_message",
                    "2": "display_error_message",
                    "3": "print_conversion_error"
                },
                "FUN_00107920": {
                    "1": "print_operation_message",
                    "3": "display_message"
                },
                "FUN_00107c10": {
                    "1": "cleanup_1",
                    "2": "initialize",
                    "3": "initialize_bfd"
                },
                "FUN_00107c20": {
                    "1": "cleanup_2",
                    "3": "cleanup"
                },
                "LAB_001027cb": {
                    "1": "label_3"
                },
                "LAB_00102812": {
                    "1": "label_1"
                },
                "LAB_00102826": {
                    "1": "label_2"
                },
                "LAB_001053b7": {
                    "1": "error_handling_label_2"
                },
                "PUVar8": {
                    "1": "next_library_ptr"
                },
                "STACK_VARIABLE": {
                    "1": "stack_variable"
                },
                "_DAT_0010d610": {
                    "1": "working_flag",
                    "2": "global_variable_3"
                },
                "bVar3": {
                    "1": "is_convert_existing_library",
                    "2": "thin_library_check",
                    "3": "thin_library_flag",
                    "4": "convert_flag",
                    "9": "is_thin_library"
                },
                "bfd_check_format": {
                    "1": "check_library_format",
                    "2": "check_bfd_format",
                    "4": "check_format"
                },
                "bfd_check_format_matches": {
                    "1": "check_library_format_matches",
                    "3": "check_format_matches"
                },
                "bfd_close": {
                    "1": "close_binary",
                    "2": "close_library",
                    "3": "close_bfd"
                },
                "bfd_get_error": {
                    "1": "get_error_code",
                    "2": "get_bfd_error"
                },
                "bfd_openr": {
                    "1": "open_read_file",
                    "2": "open_read_bfd"
                },
                "bfd_openr_next_archived_file": {
                    "3": "get_next_archived_file",
                    "6": "open_next_archived_file"
                },
                "bfd_openw": {
                    "1": "open_library_for_writing",
                    "2": "open_write_bfd"
                },
                "bfd_set_format": {
                    "1": "set_binary_format",
                    "2": "set_bfd_format"
                },
                "cVar2": {
                    "1": "check_result",
                    "2": "is_format_valid",
                    "3": "is_valid_format",
                    "5": "format_valid",
                    "6": "format_check",
                    "9": "format_check_result"
                },
                "dcgettext": {
                    "1": "get_text_in_specific_language",
                    "2": "get_error_message",
                    "3": "get_text"
                },
                "iVar4": {
                    "1": "bfd_error_code",
                    "24": "error_code",
                    "3": "bfd_error"
                },
                "in_stack_00000008": {
                    "1": "function_name",
                    "11": "stack_variable",
                    "2": "stack_parameter"
                },
                "lVar5": {
                    "1": "bfd_file_descriptor",
                    "10": "file_descriptor",
                    "2": "file_pointer",
                    "3": "file_handle",
                    "6": "bfd_handle"
                },
                "plVar1": {
                    "1": "pointer_list",
                    "2": "current_file_pointer",
                    "3": "archived_file_ptr",
                    "4": "archived_files"
                },
                "puVar8": {
                    "1": "bfd_output_handle",
                    "2": "output_bfd",
                    "9": "output_file"
                },
                "stack0x00000008": {
                    "1": "argument"
                },
                "uVar6": {
                    "1": "conversion_error",
                    "2": "message",
                    "22": "error_message"
                },
                "uVar7": {
                    "1": "description",
                    "17": "library_name",
                    "2": "file_name",
                    "3": "error_message"
                },
                "unaff_RBP": {
                    "1": "filename",
                    "2": "temporary_variable"
                },
                "xexit": {
                    "1": "exit_with_error",
                    "3": "exit",
                    "8": "exit_program"
                }
            },
            "called": [
                "bfd_check_format",
                "bfd_close",
                "bfd_openr"
            ],
            "calling": [
                "FUN_00105300"
            ],
            "code": "\n\n\nundefined8 * extract_archived_files_00102710(void)\n\n{\n  long *archived_files;\n  char format_check_result;\n  byte is_thin_library;\n  int error_code;\n  long file_descriptor;\n  undefined8 error_message;\n  undefined8 library_name;\n  undefined8 *output_file;\n  undefined8 temporary_variable;\n  undefined8 stack_variable;\n  \n  file_descriptor = bfd_openr();\n  if (file_descriptor != 0) {\n    format_check_result = bfd_check_format(file_descriptor,1);\n    if (format_check_result != '\\0') {\n      DAT_0010d5f0 = **(undefined8 **)(file_descriptor + 8);\n    }\n    bfd_close(file_descriptor);\n  }\n  output_file = (undefined8 *)bfd_openw();\n  if (((output_file != (undefined8 *)0x0) && (format_check_result = bfd_set_format(output_file,2), format_check_result != '\\0')) &&\n     (format_check_result = bfd_close(output_file), format_check_result != '\\0')) {\n    if (_DAT_0010d610 == 0) goto error_handling_label_1;\n    goto error_handling_label_2;\n  }\n  FUN_00107c10();\n  do {\n    is_thin_library = *(byte *)((long)output_file + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (is_thin_library != 0) {\n        library_name = *output_file;\n        error_message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        FUN_00107690(error_message,library_name);\n        goto exit_label;\n      }\n    }\n    else if (is_thin_library == 0) {\n      library_name = *output_file;\n      error_message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      FUN_00107690(error_message,library_name);\nlabel_2:\n      FUN_00107c20();\n      error_code = bfd_get_error();\n      if (error_code == 0xd) {\nexit_label:\n        FUN_00103bd1(stack_variable);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      archived_files = output_file + 0x1e;\n      for (file_descriptor = bfd_openr_next_archived_file(output_file,0); file_descriptor != 0;\n          file_descriptor = bfd_openr_next_archived_file(output_file,file_descriptor)) {\n        *archived_files = file_descriptor;\n        archived_files = (long *)(file_descriptor + 0xf0);\n      }\n      *archived_files = 0;\n      error_code = bfd_get_error();\n      if (error_code == 9) {\n        return output_file;\n      }\n      do {\n        FUN_00107c10();\nerror_handling_label_1:\n        library_name = dcgettext(0,\"creating %s\",5);\n        FUN_00107920(library_name);\nerror_handling_label_2:\n        DAT_0010d618 = temporary_variable;\n        output_file = (undefined8 *)bfd_openr();\n      } while (output_file == (undefined8 *)0x0);\n      format_check_result = bfd_check_format_matches(output_file,2,&stack_variable2);\n      if (format_check_result == '\\0') goto label_2;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (file_descriptor = bfd_openr_next_archived_file(output_file,0), file_descriptor == 0));\n  } while( true );\n}\n\n",
            "current_name": "extract_archived_files_00102710",
            "entrypoint": "0x00102710",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102710": "extract_archived_files_00102710",
                "LAB_001027cb": "label_2",
                "LAB_00102812": "exit_label",
                "LAB_00102826": "error_handling_label_1",
                "LAB_001053b7": "error_handling_label_2",
                "bVar3": "is_thin_library",
                "bfd_check_format": "check_format",
                "bfd_check_format_matches": "check_format_matches",
                "bfd_close": "close_bfd",
                "bfd_get_error": "get_library_error",
                "bfd_openr": "open_library_for_reading",
                "bfd_openr_next_archived_file": "open_next_archived_file",
                "bfd_openw": "open_write_bfd",
                "bfd_set_format": "set_library_format",
                "cVar2": "format_check_result",
                "dcgettext": "get_text",
                "iVar4": "error_code",
                "in_stack_00000008": "stack_variable",
                "lVar5": "file_descriptor",
                "plVar1": "archived_files",
                "puVar8": "output_file",
                "stack0x00000008": "stack_variable2",
                "uVar6": "error_message",
                "uVar7": "library_name",
                "unaff_RBP": "temporary_variable",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010284b": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "<original_variable_1>": {
                    "1": "result"
                },
                "FUN_0010284b": {
                    "1": "get_result",
                    "13": "get_one",
                    "2": "get_constant_value",
                    "3": "get_status",
                    "5": "get_return_value"
                },
                "ptr_1": {
                    "1": "status"
                },
                "return": {
                    "1": "status",
                    "2": "result"
                },
                "return value": {
                    "1": "result"
                },
                "return_val": {
                    "1": "result"
                },
                "undefined8": {
                    "1": "unsigned_long",
                    "2": "int",
                    "6": "uint64_t"
                }
            },
            "called": [],
            "calling": [
                "FUN_00107650"
            ],
            "code": "\nuint64_t get_one_0010284b(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "get_one_0010284b",
            "entrypoint": "0x0010284b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010284b": "get_one_0010284b",
                "return": "result",
                "undefined8": "uint64_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010285f": {
            "additional_data": {
                "(*unaff_RBP)()": {
                    "1": "callback_action"
                },
                "DCGETTEXT": {
                    "1": "get_localized_text"
                },
                "FPRINTF": {
                    "1": "print_to_file"
                },
                "FUN_0010285f": {
                    "1": "print_no_entry_in_archive_error",
                    "2": "print_error_message",
                    "3": "print_missing_entries",
                    "5": "print_archive_entry_not_found",
                    "6": "print_archive_entry_not_found_error"
                },
                "FUN_00105830": {
                    "1": "get_file_info"
                },
                "__format": {
                    "1": "error_msg_format",
                    "17": "format_string",
                    "3": "error_msg",
                    "4": "error_message_format"
                },
                "__stream": {
                    "1": "stream"
                },
                "_stderr": {
                    "1": "error_stream"
                },
                "code_r0x0010285f": {
                    "1": "start"
                },
                "dcgettext": {
                    "1": "get_string"
                },
                "filename_cmp": {
                    "1": "compare_file_name"
                },
                "fprintf": {
                    "1": "print_to_file"
                },
                "iStack000000000000000c": {
                    "1": "iteration_count",
                    "2": "num_matches",
                    "3": "entry_count",
                    "6": "counter"
                },
                "iVar1": {
                    "1": "filename_comparison_result"
                },
                "lVar2": {
                    "1": "current_file_name",
                    "15": "current_entry",
                    "2": "entry_address",
                    "5": "entry"
                },
                "plVar3": {
                    "1": "entry_pointer1",
                    "2": "fallback_entry",
                    "3": "archive_entry",
                    "7": "next_entry"
                },
                "plVar5": {
                    "1": "current_archive_entry",
                    "10": "current_entry",
                    "3": "archive_entry",
                    "5": "entry"
                },
                "stack0x00000010": {
                    "1": "local_variable1"
                },
                "uVar4": {
                    "1": "file_name",
                    "2": "current_entry_name",
                    "21": "entry_name",
                    "3": "entry"
                },
                "unaff_R12": {
                    "1": "archive_offset",
                    "11": "archive",
                    "2": "archive_address",
                    "5": "archive_pointer",
                    "6": "archive_ptr"
                },
                "unaff_R13D": {
                    "1": "count",
                    "10": "num_entries",
                    "12": "entry_count",
                    "7": "remaining_entries"
                },
                "unaff_R14": {
                    "1": "file_names",
                    "10": "entry_names",
                    "2": "entries",
                    "4": "entry_list"
                },
                "unaff_RBP": {
                    "1": "callback_fn",
                    "4": "callback_func",
                    "6": "callback_function",
                    "7": "function_pointer",
                    "8": "callback"
                }
            },
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "calling": [
                "FUN_00105480"
            ],
            "code": "\n\n\nvoid print_archive_entry_not_found_error_0010285f(void)\n\n{\n  int comparison_result;\n  char *format_string;\n  long current_entry;\n  long *next_entry;\n  undefined8 entry_name;\n  long *current_entry;\n  code *callback;\n  long archive;\n  int entry_count;\n  undefined8 *entry_names;\n  int counter;\n  \nstart:\n  entry_name = *entry_names;\n  format_string = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(error_stream,format_string,entry_name);\nLAB_0010553e:\n  entry_names = entry_names + 1;\n  entry_count = entry_count + -1;\n  if (entry_count == 0) {\n    return;\n  }\n  current_entry = *(long **)(archive + 0xf0);\n  counter = 0;\n  do {\n    if (current_entry == (long *)0x0) goto start;\n    if (*(int *)((long)current_entry + 0xac) == 0) {\n      current_entry = *current_entry;\n      if (current_entry == 0) {\n        next_entry = (long *)current_entry[0x1d];\n        if ((long *)current_entry[0x1d] == (long *)0x0) {\n          next_entry = current_entry;\n        }\n        (**(code **)(next_entry[1] + 0x1e8))(current_entry,&local_variable1);\n      }\n      else if (((*(byte *)(archive + 0x49) & 0x10) == 0) || (current_entry = FUN_00105830(), current_entry != 0))\n      {\n        entry_name = FUN_00105830(*entry_names);\n        comparison_result = filename_cmp(entry_name,current_entry);\n        if ((comparison_result == 0) &&\n           ((DAT_0010d634 == '\\0' ||\n            (counter = counter + 1,\n            counter == _DAT_0010d630)))) break;\n      }\n    }\n    current_entry = (long *)current_entry[0x1e];\n  } while( true );\n  (*callback)();\n  *(undefined4 *)((long)current_entry + 0xac) = 1;\n  goto LAB_0010553e;\n}\n\n",
            "current_name": "print_archive_entry_not_found_error_0010285f",
            "entrypoint": "0x0010285f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010285f": "print_archive_entry_not_found_error_0010285f",
                "__format": "format_string",
                "_stderr": "error_stream",
                "code_r0x0010285f": "start",
                "dcgettext": "get_string",
                "filename_cmp": "compare_file_name",
                "fprintf": "print_to_file",
                "iStack000000000000000c": "counter",
                "iVar1": "comparison_result",
                "lVar2": "current_entry",
                "plVar3": "next_entry",
                "plVar5": "current_entry",
                "stack0x00000010": "local_variable1",
                "uVar4": "entry_name",
                "unaff_R12": "archive",
                "unaff_R13D": "entry_count",
                "unaff_R14": "entry_names",
                "unaff_RBP": "callback"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001028ed": {
            "additional_data": {
                "FUN_001028ed": {
                    "1": "check_dependents",
                    "2": "process_files"
                },
                "FUN_00102943": {
                    "1": "function_8"
                },
                "FUN_00103172": {
                    "1": "function_5"
                },
                "FUN_00105830": {
                    "1": "function_9"
                },
                "FUN_00105870": {
                    "1": "function_11"
                },
                "FUN_001058b0": {
                    "1": "function_4"
                },
                "FUN_00105af0": {
                    "1": "function_1"
                },
                "FUN_00107690": {
                    "1": "function_7"
                },
                "FUN_00107c10": {
                    "1": "cleanup_function"
                },
                "__errno_location": {
                    "1": "function_14"
                },
                "__s": {
                    "1": "char_ptr_s",
                    "2": "char_var_s",
                    "4": "char_var1",
                    "5": "string1"
                },
                "__s_00": {
                    "1": "basename3",
                    "2": "string_var2",
                    "4": "char_var2",
                    "6": "string2"
                },
                "bVar16": {
                    "1": "temp10",
                    "3": "bool_var1",
                    "4": "byte_var16",
                    "7": "bool_var",
                    "9": "bool_var16"
                },
                "bVar17": {
                    "1": "byte_var_3",
                    "14": "byte_var17",
                    "2": "byte_var",
                    "3": "byte_var2",
                    "4": "byte_var3"
                },
                "bVar2": {
                    "1": "temp_byte",
                    "18": "byte_var2",
                    "6": "byte_var"
                },
                "bfd_openr": {
                    "1": "function_12"
                },
                "bool bVar16": {
                    "1": "bool_var16"
                },
                "byte bVar17": {
                    "1": "byte_var17"
                },
                "byte bVar2": {
                    "1": "byte_var2"
                },
                "char **param_7": {
                    "1": "param7_ptr"
                },
                "char **ppcVar14": {
                    "1": "char_double_ptr14"
                },
                "char **ppcVar15": {
                    "1": "char_double_ptr15"
                },
                "char **ppcVar8": {
                    "1": "char_double_ptr8"
                },
                "char **unaff_R12": {
                    "1": "unaffected_r12"
                },
                "char **unaff_RBP": {
                    "1": "unaffected_rbp"
                },
                "char *__s": {
                    "1": "char_ptr_s"
                },
                "char *__s_00": {
                    "1": "char_ptr_s0"
                },
                "char *pcVar6": {
                    "1": "char_ptr6"
                },
                "char *pcVar7": {
                    "1": "char_ptr7"
                },
                "char *unaff_RBX": {
                    "1": "unaffected_rbx"
                },
                "dcgettext": {
                    "1": "function_13"
                },
                "filename_cmp": {
                    "1": "function_15"
                },
                "iVar3": {
                    "1": "int_value",
                    "13": "int_var3",
                    "2": "int_var",
                    "3": "comparison_result"
                },
                "in_stack_00000078": {
                    "1": "long_in_stack_00000078",
                    "2": "in_stack_var1",
                    "9": "stack_var1"
                },
                "in_stack_00000108": {
                    "1": "temp13",
                    "2": "stack_var_2",
                    "9": "stack_var2"
                },
                "int *piVar5": {
                    "1": "int_pointer"
                },
                "int iVar3": {
                    "1": "int_var3"
                },
                "lVar10": {
                    "1": "current_node",
                    "12": "long_var10",
                    "2": "long_var_1",
                    "7": "long_var1"
                },
                "lVar11": {
                    "1": "next_file_ptr",
                    "12": "long_var11",
                    "2": "long_var_2",
                    "8": "long_var2"
                },
                "lbasename": {
                    "1": "function_6"
                },
                "long in_stack_00000078": {
                    "1": "in_stack78"
                },
                "long in_stack_00000108": {
                    "1": "in_stack108"
                },
                "long lVar10": {
                    "1": "long_var10"
                },
                "long lVar11": {
                    "1": "long_var11"
                },
                "long param_2": {
                    "1": "input_value"
                },
                "long unaff_R14": {
                    "1": "unaffected_r14"
                },
                "param_1": {
                    "1": "argument",
                    "2": "param1",
                    "3": "input",
                    "4": "filename",
                    "6": "arg1",
                    "8": "input_param"
                },
                "param_2": {
                    "1": "size_param",
                    "2": "length",
                    "3": "param",
                    "6": "arg2"
                },
                "param_7": {
                    "1": "pointer_var7",
                    "2": "char_ptr_ptr_var5",
                    "3": "param7"
                },
                "param_9": {
                    "1": "input2",
                    "2": "arg9",
                    "3": "param9",
                    "7": "output_param"
                },
                "pcVar6": {
                    "1": "char_pointer_var6",
                    "2": "pointer_var6",
                    "3": "char_var6"
                },
                "pcVar7": {
                    "1": "char_ptr2",
                    "2": "pointer_var7",
                    "3": "char_var7"
                },
                "piVar5": {
                    "1": "pointer_integer_var",
                    "2": "errno_location",
                    "3": "int_ptr_var5",
                    "6": "pointer_var5"
                },
                "ppcVar14": {
                    "1": "pointer_pointer_var14",
                    "2": "char_ptr_ptr_var1",
                    "3": "char_ptr_ptr_var14"
                },
                "ppcVar15": {
                    "1": "file_p_ptr",
                    "2": "char_pointer_pointer_var15",
                    "3": "char_ptr_ptr_var15"
                },
                "ppcVar8": {
                    "1": "char_double_ptr8",
                    "2": "char_pointer_pointer_var8",
                    "3": "char_ptr_ptr_var8"
                },
                "sVar4": {
                    "1": "str_length",
                    "10": "size_var4",
                    "3": "size_t_var4",
                    "4": "size",
                    "5": "size_var"
                },
                "size_t sVar4": {
                    "1": "size_var4"
                },
                "stat": {
                    "1": "function_2"
                },
                "strlen": {
                    "1": "function_3"
                },
                "uVar1": {
                    "1": "temp1",
                    "2": "undefined_var_1",
                    "21": "undefined_var1"
                },
                "uVar12": {
                    "1": "libdep_filename",
                    "14": "undefined_var12",
                    "2": "undefined_var_3",
                    "7": "undefined_var3"
                },
                "uVar13": {
                    "1": "basename_length",
                    "12": "ulong_var13",
                    "2": "ulong_var1",
                    "7": "ulong_var"
                },
                "uVar9": {
                    "1": "temp5",
                    "14": "undefined_var9",
                    "2": "undefined_var_2",
                    "7": "undefined_var2"
                },
                "uint unaff_R13D": {
                    "1": "unaffected_r13_d"
                },
                "ulong uVar13": {
                    "1": "ulong_var13"
                },
                "unaff_R12": {
                    "1": "register_r12",
                    "2": "char_ptr_ptr_var3",
                    "4": "unaffected_r12"
                },
                "unaff_R13D": {
                    "1": "uint_var1",
                    "2": "unaffected_register_r13_d",
                    "4": "unaffected_r13_d",
                    "5": "uint_var"
                },
                "unaff_R14": {
                    "1": "file_struct_ptr",
                    "2": "unaff_r14",
                    "3": "long_var_r14",
                    "4": "unaffected_r14",
                    "5": "long_var3"
                },
                "unaff_RBP": {
                    "1": "double_pointer_var_rbp",
                    "2": "unaff_rbp",
                    "4": "unaffected_rbp"
                },
                "unaff_RBX": {
                    "1": "char_pointer3",
                    "2": "filename",
                    "4": "unaffected_rbx"
                },
                "undefined uVar1": {
                    "1": "undefined_var1"
                },
                "undefined8 param_1": {
                    "1": "input_param"
                },
                "undefined8 param_9": {
                    "1": "param9"
                },
                "undefined8 uVar12": {
                    "1": "undefined_var12"
                },
                "undefined8 uVar9": {
                    "1": "undefined_var9"
                },
                "xmalloc": {
                    "1": "function_10"
                }
            },
            "called": [
                "FUN_00105af0",
                "FUN_00105ae0",
                "stat",
                "FUN_00107c10",
                "strlen",
                "FUN_001058b0",
                "FUN_00103172",
                "lbasename",
                "FUN_00107690",
                "FUN_001028ed",
                "FUN_00102943",
                "FUN_00105830",
                "xmalloc",
                "FUN_00105870",
                "bfd_openr",
                "dcgettext",
                "__errno_location",
                "filename_cmp"
            ],
            "calling": [
                "FUN_001028ed"
            ],
            "code": "\n\n\nundefined8 process_files_001028ed(undefined8 input_param,long arg2)\n\n{\n  undefined undefined_var1;\n  byte byte_var2;\n  int int_var3;\n  size_t size_var4;\n  int *pointer_var5;\n  char *char_var6;\n  char *char_var7;\n  char **char_ptr_ptr_var8;\n  undefined8 undefined_var9;\n  long long_var10;\n  char *string1;\n  char *string2;\n  long long_var11;\n  undefined8 undefined_var12;\n  ulong ulong_var13;\n  char *unaffected_rbx;\n  char **char_ptr_ptr_var14;\n  char **unaffected_rbp;\n  char **unaffected_r12;\n  uint uint_var;\n  char **char_ptr_ptr_var15;\n  long long_var3;\n  bool bool_var16;\n  byte byte_var17;\n  char **param_7;\n  undefined8 output_param;\n  long stack_var1;\n  long stack_var2;\n  \n  byte_var17 = 0;\ncode_r0x001028ed:\n  FUN_00107c10(unaffected_rbx,arg2);\nLAB_001028f5:\n  undefined_var12 = DAT_0010d638;\n  if (uint_var != 3) {\n    while( true ) {\n      if ((undefined8 *)*unaffected_r12 == (undefined8 *)0x0) goto LAB_0010571f;\n      int_var3 = filename_cmp(*(undefined8 *)*unaffected_r12,undefined_var12);\n      if (int_var3 == 0) break;\n      unaffected_r12 = (char **)(*unaffected_r12 + 0xf0);\n    }\n    if (uint_var != 2) goto LAB_0010571f;\n    unaffected_r12 = (char **)(*unaffected_r12 + 0xf0);\n    goto LAB_0010571f;\n  }\n  long_var10 = *(long *)(long_var3 + 0xf0);\n  if (*(long *)(long_var3 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    long_var11 = long_var10;\n    long_var10 = *(long *)(long_var11 + 0xf0);\n  } while (long_var10 != 0);\n  unaffected_r12 = (char **)(long_var11 + 0xf0);\n  unaffected_rbx = *unaffected_rbp;\n  if (DAT_0010d620 != 0) goto LAB_00105731;\nLAB_00105698:\n  undefined_var1 = DAT_0010d5f8;\n  uint_var = (uint)(DAT_0010d60c != 0);\n  arg2 = bfd_openr(unaffected_rbx,DAT_0010d5f0);\n  if (arg2 != 0) {\n    unaffected_rbp = unaffected_rbp + 1;\n    byte_var2 = FUN_00105af0(unaffected_r12,arg2,uint_var,undefined_var1);\n    output_param._6_1_ = output_param._6_1_ | byte_var2;\n    char_var6 = *unaffected_rbp;\n    do {\n      if (char_var6 == (char *)0x0) {\n        if (output_param._6_1_ == 0) {\n          DAT_0010d618 = 0;\n          return 0;\n        }\n        undefined_var12 = FUN_001058b0();\n        return undefined_var12;\n      }\n      char_ptr_ptr_var14 = *(char ***)(long_var3 + 0xf0);\n      unaffected_r12 = param_7;\n      if (output_param._7_1_ == '\\0') {\n        char_ptr_ptr_var15 = param_7;\n        if (char_ptr_ptr_var14 != (char **)0x0) {\n          do {\n            if (DAT_0010d5f9 == '\\0') {\n              string1 = (char *)lbasename(*char_ptr_ptr_var14);\n              char_var7 = string1;\n              if (DAT_0010d5fa != '\\0') {\n                size_var4 = strlen(string1);\n                ulong_var13 = (ulong)*(byte *)(*(long *)(long_var3 + 8) + 0x1e);\n                if (ulong_var13 < size_var4) {\n                  char_var7 = (char *)xmalloc(ulong_var13 + 1);\n                  long_var10 = *(long *)(long_var3 + 8);\n                  char_var6 = char_var7;\n                  for (ulong_var13 = (ulong)*(byte *)(long_var10 + 0x1e); ulong_var13 != 0; ulong_var13 = ulong_var13 - 1) {\n                    *char_var6 = *string1;\n                    string1 = string1 + (ulong)byte_var17 * -2 + 1;\n                    char_var6 = char_var6 + (ulong)byte_var17 * -2 + 1;\n                  }\n                  char_var7[*(byte *)(long_var10 + 0x1e)] = '\\0';\n                }\n                char_var6 = *unaffected_rbp;\n                string1 = char_var7;\n                if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              char_var6 = *unaffected_rbp;\n              if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n              string2 = (char *)lbasename(char_var6);\n              if (DAT_0010d5fa != '\\0') {\n                size_var4 = strlen(string2);\n                ulong_var13 = (ulong)*(byte *)(*(long *)(long_var3 + 8) + 0x1e);\n                char_var6 = string2;\n                string1 = char_var7;\n                if (ulong_var13 < size_var4) {\n                  char_var6 = (char *)xmalloc(ulong_var13 + 1);\n                  long_var10 = *(long *)(long_var3 + 8);\n                  char_var7 = char_var6;\n                  for (ulong_var13 = (ulong)*(byte *)(long_var10 + 0x1e); ulong_var13 != 0; ulong_var13 = ulong_var13 - 1) {\n                    *char_var7 = *string2;\n                    string2 = string2 + (ulong)byte_var17 * -2 + 1;\n                    char_var7 = char_var7 + (ulong)byte_var17 * -2 + 1;\n                  }\n                  char_var6[*(byte *)(long_var10 + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              int_var3 = filename_cmp(string2,char_var7);\n            }\n            else {\n              char_var6 = *unaffected_rbp;\n              string1 = *char_ptr_ptr_var14;\nLAB_00102980:\n              int_var3 = filename_cmp(char_var6,string1);\n            }\n            if ((int_var3 == 0) && (char_ptr_ptr_var14[0x1c] != (char *)0x0)) {\n              if (_DAT_0010d644 != 0) {\n                int_var3 = stat(*unaffected_rbp,(stat *)&stack0x000000b0);\n                if (int_var3 != 0) {\n                  pointer_var5 = __errno_location();\n                  if (*pointer_var5 != 2) {\n                    FUN_00107c10(*unaffected_rbp);\nLAB_00102b7e:\n                    char_var6 = *char_ptr_ptr_var14;\n                    undefined_var12 = dcgettext(0,\"internal stat error on %s\",5);\n                    FUN_00107690(undefined_var12,char_var6);\n                    free(unaffected_rbp);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                char_ptr_ptr_var8 = (char **)char_ptr_ptr_var14[0x1d];\n                if ((char **)char_ptr_ptr_var14[0x1d] == (char **)0x0) {\n                  char_ptr_ptr_var8 = char_ptr_ptr_var14;\n                }\n                int_var3 = (**(code **)(char_ptr_ptr_var8[1] + 0x1e8))(char_ptr_ptr_var14,&stack0x00000020);\n                if (int_var3 != 0) goto LAB_00102b7e;\n                if (stack_var2 <= stack_var1) goto LAB_0010577e;\n              }\n              undefined_var12 = FUN_00105870(param_7,2,*char_ptr_ptr_var14);\n              if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n                char_var6 = *unaffected_rbp;\n                bool_var16 = DAT_0010d60c != 0;\n                long_var10 = bfd_openr(char_var6,DAT_0010d5f0);\n                if (long_var10 == 0) {\n                  FUN_00107c10(char_var6,0);\n                  goto LAB_00102b3e;\n                }\n                byte_var2 = FUN_00103172(undefined_var12,long_var10,bool_var16);\n              }\n              else {\n                undefined_var9 = FUN_00105830(*unaffected_rbp);\n                int_var3 = filename_cmp(undefined_var9,\"__.LIBDEP\");\n                if (int_var3 != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                byte_var2 = FUN_00103172(undefined_var12,DAT_0010d620,DAT_0010d60c != 0);\n              }\n              if (byte_var2 != 0) {\n                *char_ptr_ptr_var15 = *(char **)(*char_ptr_ptr_var15 + 0xf0);\n                output_param._6_1_ = byte_var2;\n              }\n              goto LAB_0010577e;\n            }\n            char_ptr_ptr_var15 = char_ptr_ptr_var14 + 0x1e;\n            char_ptr_ptr_var14 = (char **)char_ptr_ptr_var14[0x1e];\n          } while (char_ptr_ptr_var14 != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        uint_var = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        uint_var = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n        long_var10 = *(long *)(long_var3 + 0xf0);\n        if (*(long *)(long_var3 + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      unaffected_rbx = *unaffected_rbp;\n      if (DAT_0010d620 == 0) goto LAB_00105698;\nLAB_00105731:\n      undefined_var12 = FUN_00105830(unaffected_rbx);\n      int_var3 = filename_cmp(undefined_var12,\"__.LIBDEP\");\n      if (int_var3 != 0) goto code_r0x0010574f;\n      byte_var2 = FUN_00105ae0(unaffected_r12,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n      output_param._6_1_ = byte_var2 | output_param._6_1_;\nLAB_0010577e:\n      unaffected_rbp = unaffected_rbp + 1;\n      char_var6 = *unaffected_rbp;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  unaffected_rbx = *unaffected_rbp;\n  goto LAB_00105698;\n}\n\n",
            "current_name": "process_files_001028ed",
            "entrypoint": "0x001028ed",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001028ed": "process_files_001028ed",
                "__errno_location": "function_14",
                "__s": "string1",
                "__s_00": "string2",
                "bVar16": "bool_var16",
                "bVar17": "byte_var17",
                "bVar2": "byte_var2",
                "bfd_openr": "function_12",
                "dcgettext": "function_13",
                "filename_cmp": "function_15",
                "iVar3": "int_var3",
                "in_stack_00000078": "stack_var1",
                "in_stack_00000108": "stack_var2",
                "lVar10": "long_var10",
                "lVar11": "long_var11",
                "lbasename": "function_6",
                "param_1": "input_param",
                "param_2": "arg2",
                "param_9": "output_param",
                "pcVar6": "char_var6",
                "pcVar7": "char_var7",
                "piVar5": "pointer_var5",
                "ppcVar14": "char_ptr_ptr_var14",
                "ppcVar15": "char_ptr_ptr_var15",
                "ppcVar8": "char_ptr_ptr_var8",
                "sVar4": "size_var4",
                "stat": "function_2",
                "strlen": "function_3",
                "uVar1": "undefined_var1",
                "uVar12": "undefined_var12",
                "uVar13": "ulong_var13",
                "uVar9": "undefined_var9",
                "unaff_R12": "unaffected_r12",
                "unaff_R13D": "uint_var",
                "unaff_R14": "long_var3",
                "unaff_RBP": "unaffected_rbp",
                "unaff_RBX": "unaffected_rbx",
                "xmalloc": "function_10"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102943": {
            "additional_data": {
                "DAT_0010d618": {
                    "1": "data_initialized",
                    "17": "counter",
                    "2": "data",
                    "3": "data_counter"
                },
                "FUN_00102943": {
                    "1": "initialize_global_variable",
                    "12": "initialize_data",
                    "8": "reset_counter",
                    "9": "initialize_counter"
                }
            },
            "called": [],
            "calling": [
                "FUN_001028ed",
                "FUN_00105570"
            ],
            "code": "\nvoid initialize_data_00102943(void)\n\n{\n  DAT_0010d618 = 0;\n  return;\n}\n\n",
            "current_name": "initialize_data_00102943",
            "entrypoint": "0x00102943",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102943": "initialize_data_00102943"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102ba1": {
            "additional_data": {
                "FUN_00102ba1": {
                    "1": "decompress_and_return_address",
                    "14": "deallocate_memory",
                    "2": "reverse_and_free_memory",
                    "4": "free_memory",
                    "6": "decompiled_function"
                },
                "__ptr": {
                    "1": "memory_pointer"
                },
                "auVar1": {
                    "5": "return_value",
                    "6": "result"
                },
                "unaff_RBP": {
                    "1": "memory_pointer",
                    "10": "memory_block",
                    "2": "buffer",
                    "4": "ptr_to_free",
                    "5": "memory_address"
                },
                "unaff_retaddr": {
                    "1": "saved_return_address",
                    "28": "return_address"
                }
            },
            "called": [
                "free"
            ],
            "calling": [
                "FUN_001057a0"
            ],
            "code": "\nundefined  [16] deallocate_memory_00102ba1(void)\n\n{\n  undefined result [16];\n  void *memory_block;\n  ulong return_address;\n  \n  free(memory_block);\n  result._8_8_ = 0;\n  result._0_8_ = return_address;\n  return result << 0x40;\n}\n\n",
            "current_name": "deallocate_memory_00102ba1",
            "entrypoint": "0x00102ba1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102ba1": "deallocate_memory_00102ba1",
                "auVar1": "result",
                "unaff_RBP": "memory_block",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102bb0": {
            "additional_data": {
                "FUN_00102bb0": {
                    "1": "copy_string_with_limit",
                    "2": "reverse_and_allocate_string",
                    "21": "reverse_string"
                },
                "auVar7": {
                    "1": "return_address",
                    "20": "return_value",
                    "4": "result"
                },
                "bVar6": {
                    "1": "pointer_increment",
                    "2": "byte_counter",
                    "4": "is_negative"
                },
                "in_RAX": {
                    "1": "str",
                    "28": "input_string"
                },
                "lVar1": {
                    "1": "input_string_address2"
                },
                "puVar3": {
                    "1": "allocated_memory",
                    "14": "reversed_string",
                    "2": "new_string",
                    "3": "output_string"
                },
                "puVar5": {
                    "1": "new_string_ptr",
                    "2": "dest_ptr",
                    "3": "destination",
                    "4": "reversed_string_ptr",
                    "6": "reversed_string_pointer"
                },
                "sVar2": {
                    "1": "len",
                    "18": "string_length",
                    "3": "input_string_length",
                    "7": "input_length"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "uVar4": {
                    "1": "requested_length",
                    "16": "max_length",
                    "2": "max_size",
                    "4": "max_string_length"
                },
                "unaff_RBP": {
                    "1": "stack_base",
                    "19": "base_pointer",
                    "2": "stack_base_pointer",
                    "3": "base_ptr"
                },
                "unaff_RBX": {
                    "1": "current_index",
                    "2": "source_ptr",
                    "3": "source",
                    "7": "current_char",
                    "8": "source_pointer"
                },
                "unaff_retaddr": {
                    "17": "return_address"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "xmalloc",
                "strlen"
            ],
            "calling": [
                "FUN_00105830"
            ],
            "code": "\nundefined  [16] reverse_string_00102bb0(void)\n\n{\n  long pointer_to_struct;\n  char *input_string;\n  size_t string_length;\n  undefined *reversed_string;\n  ulong max_length;\n  undefined *source_pointer;\n  long base_pointer;\n  undefined *reversed_string_pointer;\n  byte is_negative;\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  is_negative = 0;\n  string_length = strlen(input_string);\n  max_length = (ulong)*(byte *)(*(long *)(base_pointer + 8) + 0x1e);\n  reversed_string = source_pointer;\n  if (max_length < string_length) {\n    reversed_string = (undefined *)xmalloc(max_length + 1);\n    pointer_to_struct = *(long *)(base_pointer + 8);\n    reversed_string_pointer = reversed_string;\n    for (max_length = (ulong)*(byte *)(pointer_to_struct + 0x1e); max_length != 0; max_length = max_length - 1) {\n      *reversed_string_pointer = *source_pointer;\n      source_pointer = source_pointer + (ulong)is_negative * -2 + 1;\n      reversed_string_pointer = reversed_string_pointer + (ulong)is_negative * -2 + 1;\n    }\n    reversed_string[*(byte *)(pointer_to_struct + 0x1e)] = 0;\n  }\n  return_value._8_8_ = return_address;\n  return_value._0_8_ = reversed_string;\n  return return_value;\n}\n\n",
            "current_name": "reverse_string_00102bb0",
            "entrypoint": "0x00102bb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102bb0": "reverse_string_00102bb0",
                "auVar7": "return_value",
                "bVar6": "is_negative",
                "in_RAX": "input_string",
                "lVar1": "pointer_to_struct",
                "puVar3": "reversed_string",
                "puVar5": "reversed_string_pointer",
                "sVar2": "string_length",
                "strlen": "get_length",
                "uVar4": "max_length",
                "unaff_RBP": "base_pointer",
                "unaff_RBX": "source_pointer",
                "unaff_retaddr": "return_address",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102bf5": {
            "additional_data": {
                "FUN_00102bf5": {
                    "1": "close_file_and_remove",
                    "11": "cleanup_resources",
                    "2": "close_file_and_remove_cache",
                    "3": "cleanup_files",
                    "7": "cleanup"
                },
                "__stream": {
                    "1": "file_ptr",
                    "6": "file_stream",
                    "7": "file"
                },
                "bfd_cache_close": {
                    "1": "close_binary_cache",
                    "2": "close_cache",
                    "20": "close_bfd_cache"
                },
                "fclose": {
                    "17": "close_file"
                },
                "unlink_if_ordinary": {
                    "1": "remove_file_if_regular",
                    "2": "unlink_file_if_ordinary",
                    "5": "delete_file_if_ordinary",
                    "6": "remove_file"
                }
            },
            "called": [
                "unlink_if_ordinary",
                "bfd_cache_close",
                "fclose"
            ],
            "calling": [
                "FUN_00107730"
            ],
            "code": "\nvoid cleanup_resources_00102bf5(void)\n\n{\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "current_name": "cleanup_resources_00102bf5",
            "entrypoint": "0x00102bf5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102bf5": "cleanup_resources_00102bf5",
                "bfd_cache_close": "close_bfd_cache",
                "fclose": "close_file",
                "unlink_if_ordinary": "remove_file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102c25": {
            "additional_data": {
                "BFD_SEEK": {
                    "1": "bfd_seek"
                },
                "CONST_0x0": {
                    "1": "null"
                },
                "CONST_0x2000": {
                    "1": "buffer_size"
                },
                "CONST_0x24": {
                    "1": "num_iterations"
                },
                "DAT_0010d5d8": {
                    "1": "file_handle",
                    "2": "file_pointer"
                },
                "DAT_0010d600": {
                    "1": "debug_flag"
                },
                "DAT_0010d618": {
                    "1": "target_file",
                    "2": "file_name"
                },
                "DAT_0010d638": {
                    "1": "error_message_constant"
                },
                "FAT_0010d638": {
                    "1": "error_string"
                },
                "FUN_00102c25": {
                    "1": "extract_valid_archive_entry",
                    "2": "extract_files_from_binary",
                    "3": "extract_archived_file",
                    "6": "extract_archive"
                },
                "FUN_00105a20": {
                    "1": "create_file"
                },
                "FUN_00107690": {
                    "1": "function2",
                    "3": "handle_error"
                },
                "FUN_00107c80": {
                    "1": "function1"
                },
                "_DAT_0010d600": {
                    "1": "enable_flag"
                },
                "__errno_location": {
                    "1": "get_error_num_ptr"
                },
                "__errnum": {
                    "2": "error_number"
                },
                "__file": {
                    "1": "file_path"
                },
                "__mode": {
                    "1": "mode"
                },
                "__mode_t": {
                    "1": "mode_type"
                },
                "__n": {
                    "1": "elements",
                    "27": "bytes_read"
                },
                "__ptr": {
                    "1": "pointer",
                    "24": "buffer",
                    "5": "buffer_ptr"
                },
                "__size": {
                    "1": "element_size"
                },
                "__stream": {
                    "1": "stream",
                    "4": "file_stream"
                },
                "bfd_bread": {
                    "1": "read_bfd",
                    "2": "read_from_bfd"
                },
                "bfd_seek": {
                    "1": "seek_bfd"
                },
                "chmod": {
                    "1": "change_mode",
                    "3": "change_file_permissions"
                },
                "dcgettext": {
                    "1": "get_text"
                },
                "fclose": {
                    "4": "close_file"
                },
                "fwrite": {
                    "1": "write_file",
                    "3": "write_to_file"
                },
                "iVar1": {
                    "1": "compare_result",
                    "18": "comparison_result",
                    "2": "cmp_result",
                    "8": "filename_comparison_result"
                },
                "iVar2": {
                    "1": "internal_stat_error_code",
                    "10": "result",
                    "2": "function_result",
                    "3": "stat_result",
                    "4": "error_code"
                },
                "iVar3": {
                    "1": "errno_value"
                },
                "lVar7": {
                    "1": "index",
                    "20": "loop_counter",
                    "4": "loop_variable"
                },
                "param_1": {
                    "1": "file_pointer"
                },
                "param_11": {
                    "1": "target_permissions",
                    "2": "file_permission",
                    "3": "permissions",
                    "4": "new_permissions",
                    "6": "mode",
                    "9": "file_permissions"
                },
                "param_12": {
                    "1": "total_bytes_to_read",
                    "22": "archive_size",
                    "7": "file_size"
                },
                "param_2": {
                    "1": "error_msg2"
                },
                "param_3": {
                    "1": "error_msg3"
                },
                "param_4": {
                    "1": "error_msg4"
                },
                "param_7": {
                    "1": "out_file_permissions",
                    "2": "output_permissions",
                    "4": "permissions",
                    "5": "flags",
                    "6": "file_permissions"
                },
                "pcVar4": {
                    "1": "error_description",
                    "16": "error_string",
                    "8": "error_message"
                },
                "piVar3": {
                    "1": "errno_locator",
                    "5": "errno_location",
                    "7": "errno_ptr",
                    "8": "error_number"
                },
                "plVar8": {
                    "1": "ptr_lvar",
                    "2": "file_pointer",
                    "3": "current_entry",
                    "4": "file_ptr",
                    "8": "current_file"
                },
                "pplVar6": {
                    "1": "ptr_array",
                    "2": "archive_data",
                    "3": "file_list",
                    "7": "archive_ptr"
                },
                "puVar9": {
                    "1": "status_array_ptr",
                    "2": "parameter_ptr",
                    "7": "param_ptr"
                },
                "sVar11": {
                    "1": "bytes_remaining",
                    "10": "bytes_to_read",
                    "2": "bytes_read",
                    "3": "bytes_to_write"
                },
                "strerror": {
                    "1": "get_error_string",
                    "3": "get_error_message"
                },
                "uVar10": {
                    "1": "counter",
                    "6": "total_bytes_read",
                    "9": "bytes_written"
                },
                "uVar5": {
                    "1": "gettext_result",
                    "19": "error_message",
                    "2": "error_msg"
                },
                "unaff_RBX": {
                    "1": "ptr_rbx",
                    "3": "archive"
                },
                "xmalloc": {
                    "4": "allocate_memory"
                }
            },
            "called": [
                "free",
                "bfd_seek",
                "chmod",
                "FUN_00107c80",
                "FUN_00107690",
                "bfd_bread",
                "FUN_00105a20",
                "xmalloc",
                "dcgettext",
                "strerror",
                "__errno_location",
                "fclose",
                "fwrite"
            ],
            "calling": [
                "FUN_00107740"
            ],
            "code": "\n\n\nlong * extract_archive_00102c25(void)\n\n{\n  int comparison_result;\n  int result;\n  int *error_number;\n  char *error_string;\n  undefined8 error_message;\n  long **archive_ptr;\n  void *buffer;\n  size_t bytes_read;\n  long loop_counter;\n  long **archive;\n  long *current_file;\n  undefined4 *param_ptr;\n  ulong bytes_written;\n  size_t bytes_to_read;\n  undefined4 *file_permissions;\n  file_permission_mode file_permissions;\n  ulong archive_size;\n  \n  param_ptr = file_permissions;\n  for (loop_counter = 0x24; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *param_ptr = 0;\n    param_ptr = param_ptr + 1;\n  }\n  archive_ptr = (long **)archive[0x1d];\n  if ((long **)archive[0x1d] == (long **)0x0) {\n    archive_ptr = archive;\n  }\n  result = (*(code *)archive_ptr[1][0x3d])();\n  if (result != 0) {\n    current_file = *archive;\n    error_message = dcgettext(0,\"internal stat error on %s\",5);\n    result = FUN_00107690(error_message,current_file);\n    error_message = DAT_0010d638;\n    if (result == 3) {\n      for (; *current_file != 0; current_file = (long *)(*current_file + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*current_file != (undefined8 *)0x0; current_file = (long *)(*current_file + 0xf0)) {\n        comparison_result = filename_cmp(*(undefined8 *)*current_file,error_message);\n        if (comparison_result == 0) {\n          if (result != 2) {\n            return current_file;\n          }\n          return (long *)(*current_file + 0xf0);\n        }\n      }\n    }\n    return current_file;\n  }\n  bfd_seek();\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (archive_size == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)FUN_00105a20(*archive);\n  }\n  else {\n    bytes_written = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytes_to_read = archive_size - bytes_written;\n      if (0x2000 < bytes_to_read) {\n        bytes_to_read = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer,bytes_to_read);\n      if (bytes_to_read != bytes_read) {\nLAB_00102c78:\n        archive = (long **)*archive[0x1d];\n        error_message = dcgettext(0,\"%s is not a valid archive\",5);\n        FUN_00107690(error_message,archive);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)FUN_00105a20(*archive);\n      }\n      bytes_to_read = fwrite(buffer,1,bytes_read,DAT_0010d5d8);\n      if (bytes_to_read != bytes_read) {\n        error_number = __errno_location();\n        error_string = strerror(*error_number);\n        FUN_00107690(\"%s: %s\",DAT_0010d618,error_string);\n        goto LAB_00102c78;\n      }\n      bytes_written = bytes_written + bytes_read;\n    } while (bytes_written < archive_size);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  error_string = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,file_permissions);\n  if (_DAT_0010d600 != 0) {\n    FUN_00107c80(error_string,file_permissions);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "current_name": "extract_archive_00102c25",
            "entrypoint": "0x00102c25",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102c25": "extract_archive_00102c25",
                "__errno_location": "get_error_number",
                "__mode": "mode",
                "__mode_t": "file_permission_mode",
                "__n": "bytes_read",
                "__ptr": "buffer",
                "bfd_bread": "read_from_bfd",
                "bfd_seek": "seek_bfd",
                "chmod": "change_file_permissions",
                "dcgettext": "get_localized_message",
                "fclose": "close_file",
                "fwrite": "write_to_file",
                "iVar1": "comparison_result",
                "iVar2": "result",
                "iVar3": "errno_value",
                "lVar7": "loop_counter",
                "param_1": "file_pointer",
                "param_11": "file_permissions",
                "param_12": "archive_size",
                "param_7": "file_permissions",
                "pcVar4": "error_string",
                "piVar3": "error_number",
                "plVar8": "current_file",
                "pplVar6": "archive_ptr",
                "puVar9": "param_ptr",
                "sVar11": "bytes_to_read",
                "strerror": "get_error_message",
                "uVar10": "bytes_written",
                "uVar5": "error_message",
                "unaff_RBX": "archive",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102cd9": {
            "additional_data": {
                "FUN_00102cd9": {
                    "1": "find_matching_filename",
                    "10": "find_matching_entry",
                    "2": "find_matching_record",
                    "3": "find_matching_pointer",
                    "4": "find_matching_address",
                    "7": "find_matching_file"
                },
                "filename_cmp": {
                    "3": "compare_filenames"
                },
                "iVar1": {
                    "1": "filename_comparison_result",
                    "19": "comparison_result"
                },
                "in_EAX": {
                    "1": "num_matches",
                    "2": "mode",
                    "3": "comparison_value",
                    "6": "input_value"
                },
                "param_7": {
                    "1": "target_param",
                    "14": "target_filename",
                    "2": "target_address"
                },
                "unaff_RBX": {
                    "1": "entries",
                    "2": "file_list",
                    "4": "file_pointer",
                    "6": "entry_pointer"
                }
            },
            "called": [
                "filename_cmp"
            ],
            "calling": [
                "FUN_00105870"
            ],
            "code": "\nlong * find_matching_entry_00102cd9(void)\n\n{\n  int input_value;\n  int comparison_result;\n  long *entry_pointer;\n  undefined8 target_filename;\n  \n  target_filename = DAT_0010d638;\n  if (input_value == 3) {\n    for (; *entry_pointer != 0; entry_pointer = (long *)(*entry_pointer + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*entry_pointer != (undefined8 *)0x0; entry_pointer = (long *)(*entry_pointer + 0xf0)) {\n      comparison_result = filename_cmp(*(undefined8 *)*entry_pointer,target_filename);\n      if (comparison_result == 0) {\n        if (input_value != 2) {\n          return entry_pointer;\n        }\n        return (long *)(*entry_pointer + 0xf0);\n      }\n    }\n  }\n  return entry_pointer;\n}\n\n",
            "current_name": "find_matching_entry_00102cd9",
            "entrypoint": "0x00102cd9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102cd9": "find_matching_entry_00102cd9",
                "filename_cmp": "compare_filenames",
                "iVar1": "comparison_result",
                "in_EAX": "input_value",
                "param_7": "target_filename",
                "unaff_RBX": "entry_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102d2f": {
            "additional_data": {
                "DAT_0010d5e0": {
                    "1": "is_data_zero"
                },
                "DAT_0010d5f8": {
                    "1": "is_flag_set"
                },
                "DAT_0010d618": {
                    "1": "is_data_zero2"
                },
                "FUN_00102d2f": {
                    "1": "print_file_data",
                    "23": "print_file_info",
                    "3": "print_file_information"
                },
                "__format": {
                    "1": "time_data_corrupt",
                    "2": "time_error_msg",
                    "4": "time_error_message"
                },
                "bVar1": {
                    "1": "archive_head",
                    "3": "archive_flag"
                },
                "cStack0000000000000015": {
                    "1": "file_type"
                },
                "cStack0000000000000016": {
                    "1": "permission_owner_read",
                    "2": "user_read",
                    "3": "is_executable"
                },
                "cStack0000000000000017": {
                    "1": "permission_owner_write",
                    "2": "has_write_permission",
                    "4": "is_writable"
                },
                "cStack0000000000000019": {
                    "1": "executable_flag2",
                    "3": "group_read"
                },
                "cStack000000000000001a": {
                    "1": "is_executable",
                    "3": "group_write"
                },
                "cStack000000000000001b": {
                    "1": "permission_group_execute",
                    "2": "is_readable_by_group",
                    "3": "group_execute"
                },
                "cStack000000000000001c": {
                    "1": "others_read",
                    "2": "other_read"
                },
                "cStack000000000000001d": {
                    "1": "other_write_permission",
                    "2": "is_sticky"
                },
                "cStack000000000000001e": {
                    "1": "is_execute_group",
                    "2": "is_other_writable"
                },
                "cStack000000000000001f": {
                    "1": "format_specifier"
                },
                "cVar2": {
                    "1": "char_val",
                    "4": "result"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "dup": {
                    "1": "duplicate_file_descriptor"
                },
                "fclose": {
                    "1": "close_file"
                },
                "fopen": {
                    "1": "open_file"
                },
                "fprintf": {
                    "1": "write_formatted_to_file"
                },
                "fputc": {
                    "1": "write_character_to_file"
                },
                "fputs": {
                    "1": "write_string_to_file"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "fun_00102d2f": {
                    "1": "print_file_info"
                },
                "iVar3": {
                    "1": "close_status",
                    "2": "result",
                    "4": "status"
                },
                "in_stack_00000018": {
                    "1": "is_executable",
                    "2": "user_execute",
                    "3": "is_readable"
                },
                "in_stack_00000070": {
                    "1": "group_id",
                    "2": "file_gid",
                    "7": "file_group_id",
                    "9": "file_size"
                },
                "in_stack_00000080": {
                    "1": "last_modified_time",
                    "14": "file_size",
                    "2": "file_last_modified",
                    "6": "timestamp"
                },
                "sprintf": {
                    "1": "format_error_message"
                },
                "uStack0000000000000015": {
                    "1": "file_type_code",
                    "10": "file_type",
                    "4": "file_type_char"
                },
                "uStack000000000000001f": {
                    "1": "is_executable"
                },
                "uStack0000000000000068": {
                    "1": "flags",
                    "14": "file_permissions",
                    "3": "file_attributes",
                    "9": "file_mode"
                },
                "uStack0000000000000068 & 0x10": {
                    "1": "is_owner_writable"
                },
                "uStack0000000000000068 & 0x100": {
                    "1": "is_set_userid"
                },
                "uStack0000000000000068 & 0x20": {
                    "1": "is_owner_readable"
                },
                "uStack0000000000000068 & 0x40": {
                    "1": "is_sticky"
                },
                "uStack0000000000000068 & 0x80": {
                    "1": "is_set_groupid"
                },
                "uStack0000000000000068 & 0xf000": {
                    "1": "file_perm_bits"
                },
                "uStack0000000000000068 & 1": {
                    "1": "is_group_executable"
                },
                "uStack0000000000000068 & 2": {
                    "1": "is_group_writable"
                },
                "uStack0000000000000068 & 4": {
                    "1": "is_group_readable"
                },
                "uStack0000000000000068 & 8": {
                    "1": "is_owner_executable"
                },
                "uStack000000000000006c": {
                    "1": "links",
                    "2": "file_uid",
                    "3": "file_links",
                    "4": "file_size"
                },
                "uVar4": {
                    "1": "permission_code",
                    "4": "file_permissions",
                    "5": "file_type"
                },
                "unaff_R12": {
                    "1": "has_extra_info",
                    "3": "is_executable",
                    "4": "flags",
                    "5": "flag"
                },
                "unaff_R13": {
                    "1": "data",
                    "2": "file_data",
                    "3": "allocated_memory",
                    "4": "malloc_ptr",
                    "6": "buffer"
                },
                "unaff_R14D": {
                    "1": "duplicated_fd",
                    "20": "file_descriptor",
                    "7": "fd"
                },
                "unaff_RBP": {
                    "1": "file_stream",
                    "16": "output_file",
                    "2": "file_handle",
                    "3": "file",
                    "5": "file_pointer"
                },
                "unaff_RBX": {
                    "1": "file_name_array",
                    "13": "file_info",
                    "3": "file_data",
                    "6": "file_paths"
                },
                "unaff_RBX[0xb]": {
                    "1": "file_offset1"
                },
                "unaff_RBX[0xc]": {
                    "1": "file_offset2"
                }
            },
            "called": [
                "free",
                "xexit",
                "bfd_close",
                "dup",
                "FUN_00105bc0",
                "FUN_00107c10",
                "bfd_set_archive_head",
                "FUN_00102d2f"
            ],
            "calling": [
                "FUN_00102d2f"
            ],
            "code": "\nvoid print_file_info_00102d2f(void)\n\n{\n  byte archive_flag;\n  char result;\n  int status;\n  char *time_error_message;\n  uint file_type;\n  char **file_info;\n  FILE *output_file;\n  long flag;\n  void *buffer;\n  int file_descriptor;\n  undefined file_type;\n  char is_executable;\n  char is_writable;\n  char is_readable;\n  char group_read;\n  char group_write;\n  char group_execute;\n  char other_read;\n  char other_write;\n  char other_execute;\n  undefined terminal_char;\n  uint file_permissions;\n  uint file_size;\n  uint file_size;\n  undefined8 file_size;\n  \n  do {\n    archive_flag = FUN_00107c10();\n    *(uint *)((long)file_info + 0x44) = *(uint *)((long)file_info + 0x44) | 0x100000;\n    if ((DAT_0010d5f8 != '\\0') || ((*(byte *)(flag + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)file_info + 0x49) = archive_flag | 0x10;\n    }\n    result = bfd_set_archive_head();\n  } while (result == '\\0');\n  duplicate_file_descriptor(file_descriptor);\n  result = bfd_close();\n  if (result != '\\0') {\n    DAT_0010d5e0 = 0;\n    DAT_0010d618 = 0;\n    bfd_close();\n    status = FUN_00105bc0();\n    if (status == 0) {\n      free(buffer);\n      free(output_file);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  FUN_00107c10();\n  time_error_message = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,time_error_message);\n  file_type = file_permissions & 0xf000;\n  if (file_type == 0x4000) {\n    file_type = 100;\n  }\n  else if (file_type == 0xa000) {\n    file_type = 0x6c;\n  }\n  else if (file_type == 0x6000) {\n    file_type = 0x62;\n  }\n  else if (file_type == 0x2000) {\n    file_type = 99;\n  }\n  else if (file_type == 0xc000) {\n    file_type = 0x73;\n  }\n  else {\n    file_type = 0x70;\n    if (file_type != 0x1000) {\n      file_type = 0x2d;\n    }\n  }\n  is_executable = (-((file_permissions & 0x100) == 0) & 0xbbU) + 0x72;\n  is_writable = (-((file_permissions & 0x80) == 0) & 0xb6U) + 0x77;\n  is_readable = (-((file_permissions & 0x40) == 0) & 0xb5U) + 0x78;\n  group_read = (-((file_permissions & 0x20) == 0) & 0xbbU) + 0x72;\n  group_write = (-((file_permissions & 0x10) == 0) & 0xb6U) + 0x77;\n  group_execute = (-((file_permissions & 8) == 0) & 0xb5U) + 0x78;\n  other_read = (-((file_permissions & 4) == 0) & 0xbbU) + 0x72;\n  other_write = (-((file_permissions & 2) == 0) & 0xb6U) + 0x77;\n  other_execute = (-((file_permissions & 1) == 0) & 0xb5U) + 0x78;\n  if ((file_permissions & 0x800) != 0) {\n    if (is_readable == 'x') {\n      is_readable = 's';\n    }\n    else {\n      is_readable = 'S';\n    }\n  }\n  if ((file_permissions & 0x400) != 0) {\n    if (group_execute == 'x') {\n      group_execute = 's';\n    }\n    else {\n      group_execute = 'S';\n    }\n  }\n  if ((file_permissions & 0x200) != 0) {\n    if (other_execute == 'x') {\n      other_execute = 't';\n    }\n    else {\n      other_execute = 'T';\n    }\n  }\n  terminal_char = 0;\n  fprintf(output_file,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)file_size,\n          (ulong)file_size,file_size,&stack0x00000020,(ulong)file_permissions)\n  ;\n  fputs(*file_info,output_file);\n  if ((char)flag != '\\0') {\n    if ((*(byte *)((long)file_info + 0x49) & 0x10) == 0) {\n      if (file_offset1 != (char *)0x0) {\n        fprintf(output_file,\" 0x%lx\");\n      }\n    }\n    else if (file_offset2 != (char *)0x0) {\n      fprintf(output_file,\" 0x%lx\");\n    }\n  }\n  fputc(10,output_file);\n  return;\n}\n\n",
            "current_name": "print_file_info_00102d2f",
            "entrypoint": "0x00102d2f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102d2f": "print_file_info_00102d2f",
                "__format": "time_error_message",
                "bVar1": "archive_flag",
                "cStack0000000000000016": "is_executable",
                "cStack0000000000000017": "is_writable",
                "cStack0000000000000019": "group_read",
                "cStack000000000000001a": "group_write",
                "cStack000000000000001b": "group_execute",
                "cStack000000000000001c": "other_read",
                "cStack000000000000001d": "other_write",
                "cStack000000000000001e": "other_execute",
                "cVar2": "result",
                "dcgettext": "get_error_message",
                "dup": "duplicate_file_descriptor",
                "fprintf": "write_formatted_to_file",
                "fputc": "write_character_to_file",
                "fputs": "write_string_to_file",
                "free": "deallocate_memory",
                "iVar3": "status",
                "in_stack_00000018": "is_readable",
                "in_stack_00000070": "file_size",
                "in_stack_00000080": "file_size",
                "sprintf": "format_error_message",
                "uStack0000000000000015": "file_type",
                "uStack000000000000001f": "terminal_char",
                "uStack0000000000000068": "file_permissions",
                "uStack000000000000006c": "file_size",
                "uVar4": "file_type",
                "unaff_R12": "flag",
                "unaff_R13": "buffer",
                "unaff_R14D": "file_descriptor",
                "unaff_RBP": "output_file",
                "unaff_RBX": "file_info",
                "unaff_RBX[0xb]": "file_offset1",
                "unaff_RBX[0xc]": "file_offset2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102d8c": {
            "additional_data": {
                "FUN_00102d8c": {
                    "1": "format_and_print_data",
                    "18": "print_file_info",
                    "2": "print_file_details",
                    "3": "print_file_metadata"
                },
                "__format": {
                    "1": "time_data_corrupt",
                    "2": "corrupt_time_string",
                    "3": "corrupt_time_format",
                    "4": "error_msg",
                    "5": "time_error_message",
                    "8": "error_message"
                },
                "cStack0000000000000015": {
                    "1": "file_type"
                },
                "cStack0000000000000016": {
                    "1": "flag0",
                    "2": "char1",
                    "3": "permission_char1",
                    "4": "flag1"
                },
                "cStack0000000000000017": {
                    "1": "write_flag",
                    "2": "char2",
                    "3": "permission_char2",
                    "4": "flag2"
                },
                "cStack0000000000000019": {
                    "1": "has_permission_read_owner",
                    "2": "permission_char4",
                    "3": "char4",
                    "4": "flag4"
                },
                "cStack000000000000001a": {
                    "1": "flag_e",
                    "2": "permission_char5",
                    "3": "char5",
                    "4": "flag5"
                },
                "cStack000000000000001b": {
                    "1": "flag5",
                    "2": "permission_char6",
                    "3": "char6",
                    "4": "flag6"
                },
                "cStack000000000000001c": {
                    "1": "has_permission_read_group",
                    "2": "permission_char7",
                    "3": "char7",
                    "4": "flag7"
                },
                "cStack000000000000001d": {
                    "1": "flag8_char",
                    "2": "permission_char8",
                    "3": "char8",
                    "4": "flag8"
                },
                "cStack000000000000001e": {
                    "1": "other_write_permission",
                    "2": "permission_char9",
                    "3": "char9",
                    "4": "flag9"
                },
                "cStack000000000000001f": {
                    "1": "others_readable_symbol"
                },
                "dcgetattr": {
                    "1": "get_error_msg"
                },
                "dcgettext": {
                    "1": "get_string"
                },
                "fprintf": {
                    "1": "print_to_file"
                },
                "fputc": {
                    "1": "write_character_to_file",
                    "2": "write_char_to_file"
                },
                "fputs": {
                    "1": "write_to_file",
                    "2": "write_string_to_file"
                },
                "param_19": {
                    "1": "file_metadata",
                    "14": "file_permissions",
                    "2": "permission",
                    "9": "file_mode"
                },
                "param_20": {
                    "1": "unused_param",
                    "10": "file_size",
                    "2": "group_id"
                },
                "param_22": {
                    "1": "param22",
                    "2": "file_address",
                    "3": "file_size",
                    "7": "timestamp"
                },
                "param_9": {
                    "1": "permission_execute",
                    "2": "permission_char3",
                    "4": "flag3"
                },
                "sprintf": {
                    "4": "format_string"
                },
                "stack0x00000020": {
                    "1": "formatted_data"
                },
                "uStack0000000000000015": {
                    "1": "file_permission_user_execute_char",
                    "2": "file_permission",
                    "3": "file_type",
                    "5": "file_type_char"
                },
                "uStack000000000000001f": {
                    "1": "is_executable",
                    "2": "extra_flag"
                },
                "uStack000000000000006c": {
                    "1": "current_year",
                    "2": "inode_number",
                    "7": "file_size"
                },
                "uVar1": {
                    "1": "file_mode",
                    "13": "file_type",
                    "3": "file_permissions"
                },
                "unaff_R12B": {
                    "1": "extra_flag",
                    "2": "has_extra_info",
                    "6": "is_executable"
                },
                "unaff_RBP": {
                    "1": "log_file",
                    "22": "output_file",
                    "3": "file_pointer"
                },
                "unaff_RBX": {
                    "1": "file_info_array",
                    "14": "file_content",
                    "2": "file_permissions",
                    "4": "file_contents",
                    "7": "file_data"
                }
            },
            "called": [
                "fputc",
                "sprintf",
                "fprintf",
                "fputs",
                "dcgettext"
            ],
            "calling": [
                "FUN_001079c0"
            ],
            "code": "\nvoid print_file_info_00102d8c(void)\n\n{\n  char *error_message;\n  uint file_type;\n  char **file_content;\n  FILE *output_file;\n  char is_executable;\n  undefined file_type_char;\n  char flag1;\n  char flag2;\n  char flag3;\n  char flag4;\n  char flag5;\n  char flag6;\n  char flag7;\n  char flag8;\n  char flag9;\n  undefined zero_flag;\n  uint file_permissions;\n  uint file_size;\n  uint file_size;\n  undefined8 timestamp;\n  \n  error_message = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&error_message,error_message);\n  file_type = file_permissions & 0xf000;\n  if (file_type == 0x4000) {\n    file_type_char = 100;\n  }\n  else if (file_type == 0xa000) {\n    file_type_char = 0x6c;\n  }\n  else if (file_type == 0x6000) {\n    file_type_char = 0x62;\n  }\n  else if (file_type == 0x2000) {\n    file_type_char = 99;\n  }\n  else if (file_type == 0xc000) {\n    file_type_char = 0x73;\n  }\n  else {\n    file_type_char = 0x70;\n    if (file_type != 0x1000) {\n      file_type_char = 0x2d;\n    }\n  }\n  flag1 = (-((file_permissions & 0x100) == 0) & 0xbbU) + 0x72;\n  flag2 = (-((file_permissions & 0x80) == 0) & 0xb6U) + 0x77;\n  flag3 = (-((file_permissions & 0x40) == 0) & 0xb5U) + 0x78;\n  flag4 = (-((file_permissions & 0x20) == 0) & 0xbbU) + 0x72;\n  flag5 = (-((file_permissions & 0x10) == 0) & 0xb6U) + 0x77;\n  flag6 = (-((file_permissions & 8) == 0) & 0xb5U) + 0x78;\n  flag7 = (-((file_permissions & 4) == 0) & 0xbbU) + 0x72;\n  flag8 = (-((file_permissions & 2) == 0) & 0xb6U) + 0x77;\n  flag9 = (-((file_permissions & 1) == 0) & 0xb5U) + 0x78;\n  if ((file_permissions & 0x800) != 0) {\n    if (flag3 == 'x') {\n      flag3 = 's';\n    }\n    else {\n      flag3 = 'S';\n    }\n  }\n  if ((file_permissions & 0x400) != 0) {\n    if (flag6 == 'x') {\n      flag6 = 's';\n    }\n    else {\n      flag6 = 'S';\n    }\n  }\n  if ((file_permissions & 0x200) != 0) {\n    if (flag9 == 'x') {\n      flag9 = 't';\n    }\n    else {\n      flag9 = 'T';\n    }\n  }\n  zero_flag = 0;\n  fprintf(output_file,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)file_size,\n          (ulong)file_size,timestamp,&error_message,(ulong)file_permissions);\n  fputs(*file_content,output_file);\n  if (is_executable != '\\0') {\n    if ((*(byte *)((long)file_content + 0x49) & 0x10) == 0) {\n      if (file_content[0xb] != (char *)0x0) {\n        fprintf(output_file,\" 0x%lx\");\n      }\n    }\n    else if (file_content[0xc] != (char *)0x0) {\n      fprintf(output_file,\" 0x%lx\");\n    }\n  }\n  fputc(10,output_file);\n  return;\n}\n\n",
            "current_name": "print_file_info_00102d8c",
            "entrypoint": "0x00102d8c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102d8c": "print_file_info_00102d8c",
                "__format": "error_message",
                "cStack0000000000000016": "flag1",
                "cStack0000000000000017": "flag2",
                "cStack0000000000000019": "flag4",
                "cStack000000000000001a": "flag5",
                "cStack000000000000001b": "flag6",
                "cStack000000000000001c": "flag7",
                "cStack000000000000001d": "flag8",
                "cStack000000000000001e": "flag9",
                "dcgettext": "get_translated_string",
                "fprintf": "write_to_file",
                "fputc": "write_char_to_file",
                "fputs": "write_string_to_file",
                "param_19": "file_permissions",
                "param_20": "file_size",
                "param_22": "timestamp",
                "param_9": "flag3",
                "sprintf": "format_string",
                "stack0x00000020": "error_message",
                "uStack0000000000000015": "file_type_char",
                "uStack000000000000001f": "zero_flag",
                "uStack000000000000006c": "file_size",
                "uVar1": "file_type",
                "unaff_R12B": "is_executable",
                "unaff_RBP": "output_file",
                "unaff_RBX": "file_content"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102e57": {
            "additional_data": {
                "DAT_0010d60c": {
                    "1": "is_concatenated"
                },
                "DAT_0010d618": {
                    "2": "file_name"
                },
                "FUN_00102e57": {
                    "1": "write_output_file",
                    "2": "create_output_file",
                    "23": "write_to_file"
                },
                "concat": {
                    "1": "append_strings",
                    "2": "combine_strings",
                    "4": "join_strings",
                    "9": "concatenate_strings"
                },
                "pFVar1": {
                    "1": "file",
                    "19": "file_pointer",
                    "6": "file_ptr"
                }
            },
            "called": [
                "concat"
            ],
            "calling": [
                "FUN_00105a68"
            ],
            "code": "\nvoid write_to_file_00102e57(void)\n\n{\n  FILE *file_pointer;\n  \n  DAT_0010d618 = (char *)concatenate_strings();\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  file_pointer = fopen(DAT_0010d618,\"w\");\n  if (file_pointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "current_name": "write_to_file_00102e57",
            "entrypoint": "0x00102e57",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102e57": "write_to_file_00102e57",
                "concat": "concatenate_strings",
                "pFVar1": "file_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102e6f": {
            "additional_data": {
                "DAT_00108260": {
                    "1": "default_output_file_path"
                },
                "DAT_0010d5e8": {
                    "1": "default_directory",
                    "2": "base_directory",
                    "3": "base_path"
                },
                "DAT_0010d60c": {
                    "1": "print_output"
                },
                "DAT_0010d618": {
                    "1": "output_pathname",
                    "3": "output_file_path",
                    "4": "output_path"
                },
                "DIC_0010d59c": {
                    "1": "input_path"
                },
                "FUN_00102e6f": {
                    "1": "extract_output_path",
                    "10": "process_file_path",
                    "2": "extract_archive_member",
                    "6": "extract_file_path"
                },
                "FUN_00105a68": {
                    "1": "clean_up_and_exit"
                },
                "FUN_00107920": {
                    "1": "print_error_message"
                },
                "dcgettext": {
                    "1": "get_locale_text"
                },
                "in_RAX": {
                    "1": "file_name",
                    "20": "file_path",
                    "7": "path"
                },
                "lbasename": {
                    "1": "get_base_name"
                },
                "pFVar4": {
                    "1": "file",
                    "22": "file_pointer",
                    "3": "output_file",
                    "5": "file_ptr"
                },
                "pcVar1": {
                    "1": "directory_path",
                    "12": "base_path",
                    "2": "current_directory",
                    "3": "current_path",
                    "5": "base_directory",
                    "6": "base_dir"
                },
                "pcVar5": {
                    "1": "extension"
                },
                "pcVar6": {
                    "1": "current_path_component",
                    "2": "file_name",
                    "4": "current_dir",
                    "7": "current_char",
                    "8": "current_path"
                },
                "pcVar7": {
                    "1": "concatenated_path"
                },
                "sVar5": {
                    "1": "file_name_length",
                    "2": "base_directory_length",
                    "4": "base_dir_length",
                    "5": "base_path_length",
                    "7": "length",
                    "8": "path_length"
                },
                "uVar2": {
                    "1": "updated_path",
                    "2": "new_file_name",
                    "6": "base_name",
                    "7": "basename"
                },
                "uVar3": {
                    "1": "message_format",
                    "24": "error_message"
                }
            },
            "called": [
                "FUN_00102e6f",
                "FUN_00107920",
                "FUN_00105a68",
                "dcgettext",
                "lbasename"
            ],
            "calling": [
                "FUN_00102e6f"
            ],
            "code": "\nvoid process_file_path_00102e6f(void)\n\n{\n  char *base_path;\n  char *file_path;\n  undefined8 basename;\n  undefined8 error_message;\n  FILE *file_pointer;\n  size_t path_length;\n  char *current_path;\n  \n  base_path = DAT_0010d5e8;\n  do {\n    file_path = file_path + 1;\n    while (*file_path != '/') {\n      if (*file_path == '\\0') {\n        if ((DAT_0010d5e8 != (char *)0x0) && (path_length = strlen(DAT_0010d5e8), path_length != 0)) {\n          if (base_path[path_length - 1] == '/') {\n            DAT_0010d618 = (char *)concat(base_path,DAT_0010d618,0);\n          }\n          else {\n            DAT_0010d618 = (char *)concat(base_path,&DAT_00108260,DAT_0010d618,0);\n          }\n        }\n        if (DAT_0010d60c != 0) {\n          printf(\"x - %s\\n\",DAT_0010d618);\n        }\n        file_pointer = fopen(DAT_0010d618,\"w\");\n        if (file_pointer == (FILE *)0x0) {\n          perror(DAT_0010d618);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      current_path = file_path;\n      if ((*file_path == '.') && (current_path = file_path + 1, file_path[1] == '.')) {\n        current_path = file_path + 2;\n        if ((file_path[2] == '/') || (file_path[2] == '\\0')) {\n          basename = lbasename();\n          base_path = DAT_0010d618;\n          error_message = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          FUN_00107920(error_message,base_path,basename);\n          DAT_0010d618 = (char *)basename;\n          FUN_00105a68();\n          return;\n        }\n      }\n      for (; (file_path = current_path, *current_path != '\\0' && (*current_path != '/')); current_path = current_path + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "current_name": "process_file_path_00102e6f",
            "entrypoint": "0x00102e6f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102e6f": "process_file_path_00102e6f",
                "dcgettext": "get_locale_text",
                "in_RAX": "file_path",
                "lbasename": "get_base_name",
                "pFVar4": "file_pointer",
                "pcVar1": "base_path",
                "pcVar6": "current_path",
                "sVar5": "path_length",
                "uVar2": "basename",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102f08": {
            "additional_data": {
                "FUN_00102f08": {
                    "1": "print_and_modify_string",
                    "2": "print_and_swap",
                    "3": "print_and_modify_data",
                    "4": "print_and_update_values",
                    "5": "print_and_assign"
                },
                "printf": {
                    "1": "print_formatted"
                },
                "unaff_R12": {
                    "1": "swap_ptr",
                    "2": "dest_ptr",
                    "6": "data_ptr"
                },
                "unaff_RBX": {
                    "1": "value1_ptr",
                    "2": "string_pointer",
                    "3": "message_ptr",
                    "4": "string_ptr",
                    "6": "data_ptr"
                }
            },
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_00105af0"
            ],
            "code": "\nundefined8 print_and_assign_00102f08(void)\n\n{\n  undefined8 *data_ptr;\n  undefined8 *data_ptr;\n  \n  printf(\"a - %s\\n\",*data_ptr);\n  data_ptr[0x1e] = *data_ptr;\n  *data_ptr = data_ptr;\n  return 1;\n}\n\n",
            "current_name": "print_and_assign_00102f08",
            "entrypoint": "0x00102f08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102f08": "print_and_assign_00102f08",
                "printf": "print_formatted",
                "unaff_R12": "data_ptr",
                "unaff_RBX": "data_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102f1e": {
            "additional_data": {
                "FUN_00102f1e": {
                    "1": "copy_file_and_log_error",
                    "2": "copy_file_and_handle_error",
                    "3": "copy_file_and_remove",
                    "8": "copy_file_and_unlink",
                    "9": "copy_and_unlink_file"
                },
                "__errno_location": {
                    "1": "get_errno_location",
                    "2": "get_error_number_location"
                },
                "auVar3": {
                    "1": "return_values",
                    "4": "result",
                    "8": "return_value"
                },
                "dcgettext": {
                    "1": "get_error_message",
                    "3": "get_localized_error_message"
                },
                "param_1": {
                    "1": "copy_error_message"
                },
                "param_1 (of FUN_00107920)": {
                    "1": "error_message"
                },
                "param_2": {
                    "1": "file_path"
                },
                "param_2 (of FUN_00107920)": {
                    "1": "error_reason"
                },
                "piVar1": {
                    "1": "error_code",
                    "2": "error_number_ptr",
                    "3": "errno_ptr",
                    "4": "errno_location"
                },
                "strerror": {
                    "1": "get_error_description",
                    "3": "get_error_message"
                },
                "uVar2": {
                    "1": "copy_error_text",
                    "11": "error_message",
                    "2": "error_string"
                },
                "unaff_R12": {
                    "12": "file_name",
                    "16": "file_path"
                },
                "unaff_RBP": {
                    "1": "file_descriptor",
                    "2": "error_code",
                    "21": "file_size"
                },
                "unaff_retaddr": {
                    "27": "return_address"
                },
                "unlink": {
                    "1": "remove_file",
                    "2": "delete_file"
                }
            },
            "called": [
                "FUN_00107920",
                "dcgettext",
                "__errno_location",
                "strerror",
                "unlink"
            ],
            "calling": [
                "FUN_00105bc0"
            ],
            "code": "\nundefined  [16] copy_and_unlink_file_00102f1e(void)\n\n{\n  int *errno_location;\n  undefined8 error_message;\n  ulong file_size;\n  char *file_path;\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  errno_location = __errno_location();\n  strerror(*errno_location);\n  error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  FUN_00107920(error_message);\n  delete_file(file_path);\n  return_value._0_8_ = file_size & 0xffffffff;\n  return_value._8_8_ = return_address;\n  return return_value;\n}\n\n",
            "current_name": "copy_and_unlink_file_00102f1e",
            "entrypoint": "0x00102f1e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102f1e": "copy_and_unlink_file_00102f1e",
                "__errno_location": "get_error_number_location",
                "auVar3": "return_value",
                "dcgettext": "get_localized_error_message",
                "piVar1": "errno_location",
                "strerror": "get_error_message",
                "uVar2": "error_message",
                "unaff_R12": "file_path",
                "unaff_RBP": "file_size",
                "unaff_retaddr": "return_address",
                "unlink": "delete_file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102f55": {
            "additional_data": {
                "FUN_00102f55": {
                    "1": "close_file_and_handle_error",
                    "10": "close_and_set_errno",
                    "2": "close_and_return_error",
                    "3": "close_file_and_set_error",
                    "4": "close_file_and_return_error",
                    "5": "close_file_and_set_error_code"
                },
                "__errno_location": {
                    "1": "get_errno_location"
                },
                "iVar1": {
                    "1": "old_errno",
                    "4": "error_code"
                },
                "piVar2": {
                    "1": "error_location_ptr",
                    "2": "error_location",
                    "3": "error_pointer"
                },
                "unaff_R12D": {
                    "31": "file_descriptor"
                }
            },
            "called": [
                "close",
                "__errno_location"
            ],
            "calling": [
                "FUN_00105c00"
            ],
            "code": "\nundefined8 close_and_set_errno_00102f55(void)\n\n{\n  int error_code;\n  int *error_pointer;\n  int file_descriptor;\n  \n  error_pointer = __errno_location();\n  error_code = *error_pointer;\n  close(file_descriptor);\n  *error_pointer = error_code;\n  return 0xffffffff;\n}\n\n",
            "current_name": "close_and_set_errno_00102f55",
            "entrypoint": "0x00102f55",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102f55": "close_and_set_errno_00102f55",
                "__errno_location": "get_errno_location",
                "iVar1": "error_code",
                "piVar2": "error_pointer",
                "unaff_R12D": "file_descriptor"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102f96": {
            "additional_data": {
                "FUN_00102f96": {
                    "21": "print_error_message",
                    "5": "handle_error"
                },
                "FUN_00102f96:unaff_RBX": {
                    "1": "error_flag"
                },
                "FUN_00102f96:unaff_retaddr": {
                    "1": "return_address"
                },
                "__format": {
                    "1": "error_message_format"
                },
                "__stream": {
                    "1": "stream",
                    "2": "output_stream"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "fflush": {
                    "1": "flush_output"
                },
                "fprintf": {
                    "1": "print_error"
                },
                "uVar1": {
                    "1": "error_cause",
                    "13": "error_message"
                },
                "unaff_RBX": {
                    "1": "is_error",
                    "12": "error_flag",
                    "13": "error_code"
                },
                "unaff_retaddr": {
                    "30": "return_address"
                }
            },
            "called": [
                "fflush",
                "fprintf",
                "dcgettext"
            ],
            "calling": [
                "FUN_00107c20"
            ],
            "code": "\n\n\nvoid print_error_message_00102f96(void)\n\n{\n  undefined8 error_message;\n  long error_code;\n  undefined8 return_address;\n  \n  error_message = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (error_code != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,error_message,return_address);\n  return;\n}\n\n",
            "current_name": "print_error_message_00102f96",
            "entrypoint": "0x00102f96",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102f96": "print_error_message_00102f96",
                "dcgettext": "get_error_message",
                "fflush": "flush_output",
                "fprintf": "print_error",
                "uVar1": "error_message",
                "unaff_RBX": "error_code",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102fd7": {
            "additional_data": {
                "*piVar1": {
                    "1": "error"
                },
                "FUN_00102fd7": {
                    "1": "print_set_time_error_message",
                    "11": "set_time_error",
                    "2": "print_error_message"
                },
                "FUN_00107920": {
                    "1": "print_error_message"
                },
                "__errno_location": {
                    "1": "get_err_num_ptr",
                    "2": "get_errno_location",
                    "4": "get_error_number"
                },
                "dcgettext": {
                    "1": "get_localized_message",
                    "2": "get_translated_message",
                    "3": "get_localized_error_message",
                    "4": "get_error_message"
                },
                "param_1": {
                    "1": "undefined_param_1"
                },
                "param_2": {
                    "1": "undefined_param_2"
                },
                "param_3": {
                    "1": "undefined_param_3"
                },
                "param_4": {
                    "1": "undefined_param_4"
                },
                "piVar1": {
                    "1": "err_num_ptr",
                    "2": "error_number_pointer",
                    "3": "error_code",
                    "6": "error_number_ptr"
                },
                "strerror": {
                    "1": "get_error_msg",
                    "10": "get_error_string",
                    "2": "get_error_description",
                    "4": "get_error_message"
                },
                "uVar2": {
                    "1": "localized_error_msg",
                    "19": "error_message",
                    "2": "translated_error_message"
                }
            },
            "called": [
                "FUN_00107920",
                "dcgettext",
                "strerror",
                "__errno_location"
            ],
            "calling": [
                "FUN_00107c80"
            ],
            "code": "\nvoid set_time_error_00102fd7(void)\n\n{\n  int *error_number;\n  undefined8 error_message;\n  \n  error_number = __errno_location();\n  strerror(*error_number);\n  error_message = dcgettext(0,\"%s: cannot set time: %s\",5);\n  FUN_00107920(error_message);\n  return;\n}\n\n",
            "current_name": "set_time_error_00102fd7",
            "entrypoint": "0x00102fd7",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102fd7": "set_time_error_00102fd7",
                "__errno_location": "get_error_number",
                "dcgettext": "get_error_message",
                "piVar1": "error_number",
                "strerror": "get_error_string",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010300e": {
            "additional_data": {
                "DAT_0010a240": {
                    "1": "source_table5"
                },
                "DAT_0010a440": {
                    "1": "source_table3"
                },
                "DAT_0010a640": {
                    "1": "source_table2"
                },
                "DAT_0010a7c0": {
                    "1": "offset_table2"
                },
                "DAT_0010a800": {
                    "1": "source_table4"
                },
                "DAT_0010a980": {
                    "1": "source_table1"
                },
                "DAT_0010ab00": {
                    "1": "offset_table1"
                },
                "DAT_0010d5b0": {
                    "1": "end_pointer"
                },
                "DAT_0010d5b8": {
                    "1": "final_byte_pointer"
                },
                "DAT_0010d5c0": {
                    "1": "final_value"
                },
                "DAT_0010d5c8": {
                    "1": "start_pointer"
                },
                "DAT_0010d5d0": {
                    "1": "initial_value"
                },
                "FUN_0010300e": {
                    "1": "find_matching_indices",
                    "2": "process_data",
                    "3": "find_matching_value",
                    "4": "find_matching_values"
                },
                "bVar1": {
                    "1": "is_marked_byte_found",
                    "2": "found_matching",
                    "5": "has_match",
                    "6": "found_match"
                },
                "bVar4": {
                    "1": "byte_value",
                    "10": "lookup_value",
                    "2": "matching_value",
                    "3": "offset"
                },
                "iVar2": {
                    "1": "index",
                    "24": "current_index",
                    "4": "current_value"
                },
                "in_R10D": {
                    "1": "marked_index",
                    "13": "matching_index",
                    "2": "found_index"
                },
                "in_R9": {
                    "1": "final_pointer",
                    "5": "matching_byte"
                },
                "lVar3": {
                    "1": "current_offset",
                    "2": "computed_index",
                    "3": "lookup_index",
                    "4": "offset",
                    "6": "new_index",
                    "7": "calculated_index"
                },
                "pbVar5": {
                    "1": "ptr_to_byte",
                    "10": "current_byte",
                    "2": "current_value",
                    "3": "current_pointer",
                    "5": "byte_pointer"
                }
            },
            "called": [],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\nvoid find_matching_values_0010300e(void)\n\n{\n  bool found_match;\n  int current_index;\n  long calculated_index;\n  byte lookup_value;\n  byte *current_byte;\n  byte *matching_byte;\n  int matching_index;\n  \n  found_match = false;\n  current_index = DAT_0010d5d0;\n  for (current_byte = DAT_0010d5c8; current_byte < DAT_0010d5b0; current_byte = current_byte + 1) {\n    lookup_value = 1;\n    if (*current_byte != 0) {\n      lookup_value = (&DAT_0010ab00)[*current_byte];\n    }\n    if (*(short *)(&DAT_0010a980 + (long)current_index * 2) != 0) {\n      found_match = true;\n      matching_byte = current_byte;\n      matching_index = current_index;\n    }\n    while( true ) {\n      calculated_index = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)current_index * 2) + (uint)lookup_value);\n      if (*(short *)(&DAT_0010a440 + calculated_index * 2) == current_index) break;\n      current_index = (int)*(short *)(&DAT_0010a800 + (long)current_index * 2);\n      if (0xb0 < current_index) {\n        lookup_value = (&DAT_0010a7c0)[(int)(uint)lookup_value];\n      }\n    }\n    current_index = (int)*(short *)(&DAT_0010a240 + calculated_index * 2);\n  }\n  if (found_match) {\n    DAT_0010d5b8 = matching_byte;\n    DAT_0010d5c0 = matching_index;\n  }\n  return;\n}\n\n",
            "current_name": "find_matching_values_0010300e",
            "entrypoint": "0x0010300e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010300e": "find_matching_values_0010300e",
                "bVar1": "found_match",
                "bVar4": "lookup_value",
                "iVar2": "current_index",
                "in_R10D": "matching_index",
                "in_R9": "matching_byte",
                "lVar3": "calculated_index",
                "pbVar5": "current_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001030ed": {
            "additional_data": {
                "(long)puVar1 + 0x1c": {
                    "1": "offset_value"
                },
                "DAT_0010d588": {
                    "1": "initial_data",
                    "2": "second_value"
                },
                "DAT_0010d590": {
                    "1": "data1",
                    "2": "first_element",
                    "4": "first_value"
                },
                "DAT_0010d598": {
                    "1": "data_value",
                    "10": "extracted_value",
                    "2": "extracted_value1"
                },
                "DAT_0010d5a0": {
                    "1": "array_index",
                    "15": "index",
                    "5": "offset"
                },
                "DAT_0010d5a8": {
                    "1": "data_base",
                    "2": "array_base_address",
                    "3": "data_array",
                    "7": "base_address"
                },
                "DAT_0010d5b0": {
                    "1": "pointer_to_third_element",
                    "2": "extracted_data",
                    "3": "data_ptr"
                },
                "DAT_0010d5c8": {
                    "1": "final_pointer",
                    "2": "current_data",
                    "3": "processed_data"
                },
                "FUN_001030ed": {
                    "1": "extract_data_from_pointer",
                    "10": "extract_data",
                    "11": "extract_data_from_binary",
                    "2": "initialize_data",
                    "3": "extract_function_data"
                },
                "puVar1": {
                    "1": "function_info_ptr",
                    "13": "data_pointer",
                    "2": "function_pointer",
                    "3": "pointer_to_data",
                    "6": "pointer"
                },
                "puVar1[2]": {
                    "1": "third_element_of_data"
                }
            },
            "called": [],
            "calling": [
                "FUN_001031cf",
                "FUN_00103e95"
            ],
            "code": "\nvoid extract_data_from_binary_001030ed(void)\n\n{\n  undefined8 *data_pointer;\n  \n  data_pointer = *(undefined8 **)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n  DAT_0010d598 = *(undefined4 *)((long)data_pointer + 0x1c);\n  DAT_0010d5b0 = (undefined *)third_element_of_data;\n  DAT_0010d5c8 = DAT_0010d5b0;\n  DAT_0010d590 = *data_pointer;\n  DAT_0010d588 = *DAT_0010d5b0;\n  return;\n}\n\n",
            "current_name": "extract_data_from_binary_001030ed",
            "entrypoint": "0x001030ed",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001030ed": "extract_data_from_binary_001030ed",
                "puVar1": "data_pointer",
                "puVar1[2]": "third_element_of_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010312d": {
            "additional_data": {
                "0xf0": {
                    "1": "offset"
                },
                "0xf8": {
                    "1": "new_offset"
                },
                "FUN_0010312d": {
                    "1": "copy_data_to_destination",
                    "23": "copy_data"
                },
                "lVar1": {
                    "1": "temp_addr",
                    "10": "temp_var",
                    "2": "temp_pointer",
                    "8": "temp"
                },
                "param_1": {
                    "1": "source_address",
                    "18": "source",
                    "2": "source_data",
                    "3": "source_pointer",
                    "5": "destination"
                },
                "param_2": {
                    "1": "dest_addr",
                    "18": "destination",
                    "2": "destination_data",
                    "3": "destination_pointer",
                    "5": "source"
                }
            },
            "called": [],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\nvoid copy_data_0010312d(long source,long destination)\n\n{\n  long temp_var;\n  \n  if (destination != 0) {\n    *(undefined8 *)(destination + 0xf0) = *(undefined8 *)(source + 0xf0);\n  }\n  temp_var = DAT_0010d558;\n  *(undefined8 *)(source + 0xf0) = *(undefined8 *)(DAT_0010d558 + 0xf8);\n  *(long *)(temp_var + 0xf8) = source;\n  return;\n}\n\n",
            "current_name": "copy_data_0010312d",
            "entrypoint": "0x0010312d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010312d": "copy_data_0010312d",
                "lVar1": "temp_var",
                "param_1": "source",
                "param_2": "destination"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010315d": {
            "additional_data": {
                "FUN_0010315d": {
                    "1": "validate_exit_condition",
                    "2": "check_exit_status",
                    "9": "check_and_exit_if_zero"
                },
                "_DAT_0010d608": {
                    "1": "exit_status",
                    "2": "exit_condition"
                },
                "xexit": {
                    "1": "perform_exit",
                    "2": "terminate_program",
                    "5": "exit",
                    "7": "exit_program",
                    "8": "exit_with_error"
                }
            },
            "called": [
                "xexit"
            ],
            "calling": [
                "FUN_00103e95",
                "FUN_00103c60",
                "FUN_00105300"
            ],
            "code": "\n\n\nvoid check_and_exit_if_zero_0010315d(void)\n\n{\n  if (_DAT_0010d608 == 0) {\n                    \n    xexit(9);\n  }\n  return;\n}\n\n",
            "current_name": "check_and_exit_if_zero_0010315d",
            "entrypoint": "0x0010315d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010315d": "check_and_exit_if_zero_0010315d",
                "xexit": "exit_with_error"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103172": {
            "additional_data": {
                "*param_2": {
                    "1": "target_value"
                },
                "FUN_00103172": {
                    "1": "reverse_copy_and_print",
                    "2": "copy_and_print_value",
                    "3": "process_data",
                    "4": "update_param_and_return"
                },
                "auVar2": {
                    "1": "temp_var",
                    "2": "updated_data",
                    "3": "modified_data",
                    "7": "result"
                },
                "param_1": {
                    "1": "source_array",
                    "2": "data_ptr",
                    "3": "source_data",
                    "4": "source_ptr",
                    "5": "source"
                },
                "param_2": {
                    "1": "input2",
                    "2": "destination_ptr",
                    "3": "destination_array",
                    "5": "destination"
                },
                "param_3": {
                    "1": "config_flag",
                    "11": "flag",
                    "15": "should_print",
                    "2": "print_flag"
                },
                "param_4": {
                    "1": "additional_value",
                    "2": "extra_data",
                    "3": "data",
                    "5": "value",
                    "9": "additional_data"
                },
                "printf": {
                    "1": "print_formatted_string"
                },
                "uVar1": {
                    "1": "data",
                    "2": "temp_var",
                    "6": "temp_value",
                    "7": "source_value"
                }
            },
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_001028ed"
            ],
            "code": "\nundefined  [16]\ncopy_and_print_string_00103172(undefined8 *source,undefined8 *destination,char should_print,undefined8 additional_data)\n\n{\n  undefined8 source_value;\n  undefined result [16];\n  \n  if (should_print != '\\0') {\n    printf(\"r - %s\\n\",*destination);\n  }\n  source_value = *source;\n  destination[0x1e] = source_value;\n  result._1_7_ = (undefined7)((ulong)source_value >> 8);\n  result[0] = 1;\n  *source = destination;\n  result._8_8_ = additional_data;\n  return result;\n}\n\n",
            "current_name": "copy_and_print_string_00103172",
            "entrypoint": "0x00103172",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103172": "copy_and_print_string_00103172",
                "auVar2": "result",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "should_print",
                "param_4": "additional_data",
                "printf": "print_formatted_string",
                "uVar1": "source_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001031a5": {
            "additional_data": {
                "FUN_001031a5": {
                    "1": "report_syntax_error",
                    "14": "print_syntax_error",
                    "2": "print_archive_script_error",
                    "3": "print_error_message",
                    "6": "print_archive_script_syntax_error"
                },
                "__format": {
                    "1": "error_format_string",
                    "11": "format_string",
                    "4": "error_message",
                    "6": "error_format",
                    "9": "error_message_format"
                },
                "uVar1": {
                    "1": "incremented_line_number",
                    "2": "updated_count",
                    "27": "line_number"
                }
            },
            "called": [
                "dcgettext",
                "printf"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\nvoid print_syntax_error_001031a5(void)\n\n{\n  uint line_number;\n  char *format_string;\n  \n  line_number = DAT_0010d554 + 1;\n  format_string = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(format_string,(ulong)line_number);\n  return;\n}\n\n",
            "current_name": "print_syntax_error_001031a5",
            "entrypoint": "0x001031a5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001031a5": "print_syntax_error_001031a5",
                "__format": "format_string",
                "uVar1": "line_number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001031cf": {
            "additional_data": {
                "&param_1[1]->_flags": {
                    "1": "flags_var2"
                },
                "*(uint *)((long)param_1 + 0x24)": {
                    "1": "is_terminal_value"
                },
                "*(undefined *)&param_1[1]->_flags": {
                    "1": "file_flag2"
                },
                "*(undefined *)((long)&param_1[1]->_flags + 1)": {
                    "1": "flags_var3"
                },
                "*(undefined4 *)((long)param_1 + 0x1c)": {
                    "1": "flag1"
                },
                "*(undefined4 *)((long)param_1 + 0x34)": {
                    "1": "file_initialized2"
                },
                "*(undefined4 *)(param_1 + 5)": {
                    "1": "file_flag4"
                },
                "*(undefined4 *)(param_1 + 7)": {
                    "1": "file_flag6"
                },
                "*(undefined8 *)((long)param_1 + 0x2c)": {
                    "1": "file_flag7"
                },
                "*param_1": {
                    "1": "file_ptr_value"
                },
                "*piVar4": {
                    "1": "error_note"
                },
                "DAT_0010d5a0": {
                    "1": "array_index"
                },
                "DAT_0010d5a8": {
                    "1": "data1",
                    "2": "constant1"
                },
                "FILE ***": {
                    "1": "file_triple_star"
                },
                "FIL_001030ed": {
                    "1": "custom_function"
                },
                "FUN_001030ed": {
                    "1": "execute_function"
                },
                "FUN_001031cf": {
                    "1": "initialize_file_ptr",
                    "2": "initialize_file_pointer",
                    "22": "initialize_file"
                },
                "LAB_00103263": {
                    "1": "label1"
                },
                "_DAT_00000000": {
                    "1": "file_buffer",
                    "3": "flag2"
                },
                "_DAT_00000034": {
                    "1": "pointer_value1",
                    "3": "flag1"
                },
                "__errno_location": {
                    "1": "get_errno_location",
                    "2": "get_error_number"
                },
                "_flags": {
                    "1": "flags"
                },
                "errnoPtr": {
                    "1": "errno_ptr"
                },
                "errnoValue": {
                    "1": "errno_value"
                },
                "fileArray": {
                    "1": "file_array"
                },
                "filePtr": {
                    "1": "file_ptr"
                },
                "fileno": {
                    "3": "get_file_descriptor"
                },
                "fileno(param_2)": {
                    "1": "file_number"
                },
                "iVar1": {
                    "1": "saved_errno",
                    "14": "errno_value",
                    "2": "error",
                    "3": "error_status",
                    "4": "error_code"
                },
                "iVar3": {
                    "1": "is_terminal_result",
                    "18": "file_descriptor",
                    "2": "file_number"
                },
                "initializeFile": {
                    "1": "initialize_file_ptr"
                },
                "isTerminal": {
                    "1": "is_terminal"
                },
                "isatty": {
                    "1": "check_if_terminal",
                    "2": "is_terminal"
                },
                "isatty(iVar3)": {
                    "1": "is_terminal"
                },
                "lVar5": {
                    "1": "base_address",
                    "2": "constant",
                    "3": "data_ptr"
                },
                "param_1": {
                    "1": "config",
                    "13": "file_pointer",
                    "6": "file_ptr",
                    "7": "output_file"
                },
                "param_1[2]": {
                    "1": "file_pointer2"
                },
                "param_2": {
                    "1": "source_file",
                    "18": "input_file",
                    "2": "file",
                    "6": "stream"
                },
                "param_3": {
                    "1": "param_a",
                    "12": "param3",
                    "15": "param_3",
                    "3": "param1"
                },
                "param_4": {
                    "1": "param_b",
                    "12": "param4",
                    "15": "param_4",
                    "3": "param2"
                },
                "param_5": {
                    "1": "param_c",
                    "11": "param5",
                    "12": "param_5",
                    "2": "param3",
                    "4": "return_value"
                },
                "piVar4": {
                    "1": "error_code",
                    "10": "errno_ptr",
                    "2": "error_ptr",
                    "9": "errno_location"
                },
                "srcFile": {
                    "1": "source_file"
                },
                "uVar2": {
                    "1": "file_flag8",
                    "16": "is_terminal",
                    "6": "is_tty"
                },
                "undefined": {
                    "1": "undefined_value"
                },
                "undefined4": {
                    "1": "undefined4_value"
                },
                "undefined8": {
                    "1": "undefined8_value"
                }
            },
            "called": [
                "isatty",
                "FUN_001030ed",
                "fileno",
                "__errno_location"
            ],
            "calling": [
                "FUN_00103e95",
                "FUN_001033d6"
            ],
            "code": "\n\n\nundefined8_value\ninitialize_file_001031cf(FILE **file_pointer,FILE *input_file,undefined8_value param_3,undefined8_value param_4,undefined8_value param_5)\n\n{\n  int errno_value;\n  uint isatty;\n  int file_descriptor;\n  int *errno_ptr;\n  long data_ptr;\n  \n  errno_ptr = __errno_location();\n  data_ptr = DAT_0010d5a8;\n  errno_value = *errno_ptr;\n  if (file_pointer == (FILE **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = input_file;\n    if (DAT_0010d5a8 != 0) {\ncheck_pointer:\n      if (file_pointer == *(FILE ***)(data_ptr + DAT_0010d5a0 * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4_value *)((long)file_pointer + 0x1c) = 0;\n    *(undefined_value *)&file_pointer[1]->flags = 0;\n    *(undefined_value *)((long)&file_pointer[1]->flags + 1) = 0;\n    *(undefined4_value *)(file_pointer + 5) = 1;\n    file_pointer2 = file_pointer[1];\n    *(undefined4_value *)(file_pointer + 7) = 0;\n    if (data_ptr != 0) {\n      if (file_pointer == *(FILE ***)(data_ptr + DAT_0010d5a0 * 8)) {\n        FUN_001030ed();\n      }\n      *file_pointer = input_file;\n      *(undefined4_value *)((long)file_pointer + 0x34) = 1;\n      goto check_pointer;\n    }\n    *file_pointer = input_file;\n    *(undefined4_value *)((long)file_pointer + 0x34) = 1;\n  }\n  *(undefined8_value *)((long)file_pointer + 0x2c) = 1;\nLAB_0010327b:\n  is_terminal = 0;\n  if (input_file != (FILE *)0x0) {\n    file_descriptor = file_number;\n    file_descriptor = is_terminal;\n    is_terminal = (uint)(0 < file_descriptor);\n  }\n  *(uint *)((long)file_pointer + 0x24) = is_terminal;\n  *errno_ptr = errno_value;\n  return param_5;\n}\n\n",
            "current_name": "initialize_file_001031cf",
            "entrypoint": "0x001031cf",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001031cf": "initialize_file_001031cf",
                "LAB_00103263": "check_pointer",
                "__errno_location": "get_error_number",
                "_flags": "flags",
                "fileno": "get_file_descriptor",
                "fileno(param_2)": "file_number",
                "iVar1": "errno_value",
                "iVar3": "file_descriptor",
                "isatty": "is_terminal",
                "isatty(iVar3)": "is_terminal",
                "lVar5": "data_ptr",
                "param_1": "file_pointer",
                "param_1[2]": "file_pointer2",
                "param_2": "input_file",
                "piVar4": "errno_ptr",
                "uVar2": "is_terminal",
                "undefined": "undefined_value",
                "undefined4": "undefined4_value",
                "undefined8": "undefined8_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001032a8": {
            "additional_data": {
                "FUN_001032a8": {
                    "1": "extract_files_from_archive",
                    "15": "process_archive_entries",
                    "2": "process_entries",
                    "4": "process_archive"
                },
                "__format": {
                    "1": "error_msg",
                    "10": "format_string",
                    "2": "message_format",
                    "5": "error_format",
                    "6": "error_message",
                    "7": "error_message_format"
                },
                "bVar3": {
                    "1": "found_matching_entry",
                    "11": "found_entry",
                    "16": "entry_found"
                },
                "iVar5": {
                    "1": "filename_comparison_result",
                    "24": "comparison_result",
                    "4": "cmp_result"
                },
                "lVar1": {
                    "1": "next_file_offset",
                    "28": "next_entry"
                },
                "lVar7": {
                    "1": "current_entry_index",
                    "2": "current_entry_list",
                    "4": "current_entry_address",
                    "6": "current_entry_ptr",
                    "9": "current_entry"
                },
                "param_1": {
                    "1": "entry_list",
                    "11": "archive_entries",
                    "2": "entries",
                    "5": "archive_data",
                    "6": "archive"
                },
                "param_2": {
                    "1": "process_entry_func",
                    "2": "process_entry_callback",
                    "4": "entry_processor",
                    "7": "callback_function"
                },
                "param_3": {
                    "1": "file_names",
                    "21": "entry_names",
                    "5": "entry_list"
                },
                "param_4": {
                    "1": "ret_val",
                    "24": "return_value",
                    "6": "result"
                },
                "plVar4": {
                    "1": "curr_entry",
                    "22": "current_entry",
                    "4": "current_entry_ptr"
                },
                "plVar6": {
                    "1": "next_node",
                    "11": "next_entry",
                    "2": "next_entry_list",
                    "4": "next_entry_in_list",
                    "9": "next_entry_ptr"
                },
                "plVar8": {
                    "1": "prev_entry_ptr",
                    "14": "previous_entry",
                    "2": "previous_node",
                    "8": "previous_entry_ptr"
                },
                "uVar2": {
                    "1": "current_file_name",
                    "18": "entry_name",
                    "2": "current_entry_name",
                    "5": "current_entry"
                }
            },
            "called": [
                "fprintf",
                "dcgettext",
                "filename_cmp"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\n\n\nundefined8 process_archive_entries_001032a8(long *archive_entries,code *callback_function,undefined8 *entry_names,undefined8 return_value)\n\n{\n  long next_entry;\n  undefined8 entry_name;\n  bool entry_found;\n  long *current_entry;\n  int comparison_result;\n  char *format_string;\n  long *next_entry;\n  long current_entry;\n  long *previous_entry;\n  \n  current_entry = archive_entries[0x1e];\n  if (entry_names == (undefined8 *)0x0) {\n    while (current_entry != 0) {\n      next_entry = *(long *)(current_entry + 0xf0);\n      (*callback_function)(current_entry,0);\n      current_entry = next_entry;\n    }\n  }\n  else {\n    do {\n      entry_found = false;\n      current_entry = (long *)archive_entries[0x1e];\n      previous_entry = archive_entries;\n      while (next_entry = current_entry, next_entry != (long *)0x0) {\n        if (*next_entry != 0) {\n          comparison_result = filename_cmp(*entry_names);\n          if (comparison_result == 0) {\n            entry_found = true;\n            (*callback_function)(next_entry,previous_entry);\n          }\n        }\n        previous_entry = next_entry;\n        current_entry = (long *)next_entry[0x1e];\n      }\n      if (!entry_found) {\n        entry_name = *entry_names;\n        format_string = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,format_string,entry_name);\n      }\n      entry_names = (undefined8 *)entry_names[1];\n    } while (entry_names != (undefined8 *)0x0);\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_archive_entries_001032a8",
            "entrypoint": "0x001032a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001032a8": "process_archive_entries_001032a8",
                "__format": "format_string",
                "bVar3": "entry_found",
                "iVar5": "comparison_result",
                "lVar1": "next_entry",
                "lVar7": "current_entry",
                "param_1": "archive_entries",
                "param_2": "callback_function",
                "param_3": "entry_names",
                "param_4": "return_value",
                "plVar4": "current_entry",
                "plVar6": "next_entry",
                "plVar8": "previous_entry",
                "uVar2": "entry_name"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010336b": {
            "additional_data": {
                "FUN_0010336b": {
                    "31": "print_emulation_options"
                },
                "param_1": {
                    "1": "output_stream",
                    "22": "output_file",
                    "3": "file",
                    "5": "file_pointer"
                },
                "pcVar1": {
                    "1": "emulation_header",
                    "2": "emulation_option",
                    "3": "emulation_option_string",
                    "4": "message",
                    "6": "emulation_message"
                }
            },
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "calling": [
                "FUN_0010342d"
            ],
            "code": "\nvoid print_emulation_options_0010336b(FILE *output_file)\n\n{\n  char *emulation_message;\n  \n  emulation_message = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(output_file,emulation_message);\n  emulation_message = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(output_file,emulation_message);\n  return;\n}\n\n",
            "current_name": "print_emulation_options_0010336b",
            "entrypoint": "0x0010336b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "output_file",
                "pcVar1": "emulation_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001033b0": {
            "additional_data": {
                "FUN_001033b0": {
                    "1": "print_error_and_exit",
                    "23": "print_error_message_and_exit",
                    "7": "print_and_exit"
                },
                "__format": {
                    "3": "format_string"
                },
                "__status": {
                    "1": "status_code"
                },
                "__stream": {
                    "3": "output_stream"
                },
                "_stderr": {
                    "1": "error_output_file",
                    "4": "error_stream"
                },
                "param_1": {
                    "24": "error_message",
                    "7": "message"
                }
            },
            "called": [
                "exit",
                "fprintf"
            ],
            "calling": [
                "FUN_00103e95",
                "FUN_001033d6",
                "FUN_00103df9"
            ],
            "code": "\n\n\nvoid print_error_message_and_exit_001033b0(undefined8 error_message)\n\n{\n  fprintf(error_stream,\"%s\\n\",error_message);\n                    \n  exit(2);\n}\n\n",
            "current_name": "print_error_message_and_exit_001033b0",
            "entrypoint": "0x001033b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001033b0": "print_error_message_and_exit_001033b0",
                "_stderr": "error_stream",
                "param_1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001033d6": {
            "additional_data": {
                "FUN_001033d6": {
                    "1": "allocate_buffer",
                    "26": "create_buffer",
                    "3": "create_yy_buffer"
                },
                "auVar3": {
                    "2": "result_buffer",
                    "20": "result",
                    "7": "return_value"
                },
                "param_1": {
                    "1": "buffer_param1",
                    "2": "filename",
                    "5": "param1",
                    "7": "param_1"
                },
                "param_2": {
                    "1": "data",
                    "10": "param_2",
                    "7": "param2"
                },
                "param_3": {
                    "1": "size_param",
                    "11": "param_3",
                    "8": "param3"
                },
                "param_4": {
                    "1": "flags",
                    "10": "param_4",
                    "8": "param4"
                },
                "pvVar1": {
                    "2": "buffer_pointer",
                    "29": "buffer"
                },
                "pvVar2": {
                    "1": "alloc_ptr",
                    "2": "allocated_memory",
                    "3": "buffer2",
                    "8": "data"
                }
            },
            "called": [
                "malloc",
                "FUN_001031cf",
                "FUN_001033b0"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\nundefined  [16]\ncreate_buffer_001033d6(undefined8 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  void *buffer;\n  void *data;\n  undefined result [16];\n  \n  buffer = malloc(0x40);\n  if (buffer != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer = (void *)FUN_001033b0(\"out of dynamic memory in yy_create_buffer_001033d6()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer + 0x18) = 0x4000;\n    data = malloc(0x4002);\n    *(void **)((long)buffer + 8) = data;\n  } while (data == (void *)0x0);\n  *(undefined4 *)((long)buffer + 0x20) = 1;\n  FUN_001031cf(buffer,param_1);\n  result._8_8_ = param_4;\n  result._0_8_ = buffer;\n  return result;\n}\n\n",
            "current_name": "create_buffer_001033d6",
            "entrypoint": "0x001033d6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001033d6": "create_buffer_001033d6",
                "auVar3": "result",
                "pvVar1": "buffer",
                "pvVar2": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010342d": {
            "additional_data": {
                "DAT_0010d660": {
                    "3": "program_name"
                },
                "FILE": {
                    "1": "file"
                },
                "FUN_0010266f": {
                    "2": "print_version"
                },
                "FUN_0010336b": {
                    "1": "print_additional_info"
                },
                "FUN_0010342d": {
                    "1": "display_usage",
                    "18": "print_usage",
                    "2": "print_command_help",
                    "5": "print_archive_usage"
                },
                "__format": {
                    "2": "format_string"
                },
                "__stream": {
                    "1": "output_file",
                    "24": "output_stream",
                    "6": "stream"
                },
                "char": {
                    "1": "character"
                },
                "dcgettext": {
                    "1": "get_localized_text",
                    "2": "get_localized_string",
                    "3": "get_translated_text"
                },
                "fprintf": {
                    "1": "print_formatted_message",
                    "2": "print_formatted"
                },
                "param_1": {
                    "1": "output_flag",
                    "10": "output_to_stdout",
                    "2": "output_option",
                    "4": "is_stdout",
                    "5": "is_verbose",
                    "6": "output_to_file"
                },
                "pcVar2": {
                    "1": "translation",
                    "16": "message",
                    "2": "localized_message",
                    "3": "localized_text",
                    "4": "text"
                },
                "uVar1": {
                    "1": "format_specifier",
                    "2": "archive_file_name",
                    "3": "archive_name",
                    "4": "version_number",
                    "5": "version"
                },
                "xexit": {
                    "3": "exit_program"
                }
            },
            "called": [
                "xexit",
                "FUN_0010336b",
                "FUN_0010266f",
                "fprintf",
                "dcgettext"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid print_usage_0010342d(uint output_to_stdout)\n\n{\n  undefined8 version;\n  character *message;\n  file *output_stream;\n  \n  message = (character *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  output_stream = _stderr;\n  if (output_to_stdout != 0) {\n    output_stream = _stdout;\n  }\n  fprintf(output_stream,message,DAT_0010d660);\n  version = DAT_0010d660;\n  message = (character *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(output_stream,message,version);\n  message = (character *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(output_stream,message);\n  message = (character *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(output_stream,message);\n  FUN_0010336b(output_stream);\n  FUN_0010266f(DAT_0010d660,output_stream);\n  if (output_to_stdout != 0) {\n    message = (character *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_stream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(output_to_stdout ^ 1);\n}\n\n",
            "current_name": "print_usage_0010342d",
            "entrypoint": "0x0010342d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FILE": "file",
                "FUN_0010342d": "print_usage_0010342d",
                "__stream": "output_stream",
                "char": "character",
                "dcgettext": "get_translated_text",
                "fprintf": "print_to_stream",
                "param_1": "output_to_stdout",
                "pcVar2": "message",
                "uVar1": "version",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010394a": {
            "additional_data": {
                "FUN_0010266f": {
                    "1": "print_version_information_and_exit",
                    "2": "print_help"
                },
                "FUN_0010394a": {
                    "1": "print_usage_information",
                    "17": "print_usage",
                    "2": "print_archive_usage",
                    "7": "print_usage_message"
                },
                "__file": {
                    "1": "file"
                },
                "__format": {
                    "1": "format",
                    "5": "format_string"
                },
                "__stream": {
                    "1": "file_pointer",
                    "23": "output_stream",
                    "5": "stream"
                },
                "_stderr": {
                    "1": "standard_error"
                },
                "_stdout": {
                    "1": "standard_output"
                },
                "dcgettext": {
                    "1": "get_translation",
                    "2": "get_message"
                },
                "fprintf": {
                    "1": "print",
                    "2": "print_formatted"
                },
                "param_1": {
                    "1": "output_flag",
                    "2": "print_to_stdout",
                    "3": "option_flag",
                    "4": "options",
                    "5": "flag",
                    "9": "option"
                },
                "param_2": {
                    "1": "file_stream"
                },
                "pcVar2": {
                    "1": "translation",
                    "18": "message",
                    "2": "string"
                },
                "uVar1": {
                    "1": "version_info",
                    "2": "data",
                    "4": "usage_message",
                    "6": "usage_string"
                },
                "xexit": {
                    "1": "exit",
                    "8": "exit_program"
                }
            },
            "called": [
                "xexit",
                "FUN_0010266f",
                "fprintf",
                "dcgettext"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid print_usage_0010394a(uint option)\n\n{\n  undefined8 usage_string;\n  char *message;\n  FILE *output_stream;\n  \n  usage_string = DAT_0010d660;\n  output_stream = standard_error;\n  if (option != 0) {\n    output_stream = standard_output;\n  }\n  message = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(output_stream,message,usage_string);\n  message = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  FUN_0010266f(DAT_0010d660,output_stream);\n  if (option != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_stream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(option ^ 1);\n}\n\n",
            "current_name": "print_usage_0010394a",
            "entrypoint": "0x0010394a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010394a": "print_usage_0010394a",
                "__stream": "output_stream",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "dcgettext": "get_message",
                "fprintf": "print_formatted",
                "param_1": "option",
                "pcVar2": "message",
                "uVar1": "usage_string",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103a78": {
            "additional_data": {
                "DAT_0010d60c": {
                    "1": "print_flag"
                },
                "FUN_00103a78": {
                    "1": "extract_archive",
                    "15": "extract_and_print_archive",
                    "2": "extract_and_print_archives",
                    "3": "process_archive",
                    "4": "extract_and_print_archive_contents"
                },
                "__ptr": {
                    "31": "buffer"
                },
                "auStack_b8": {
                    "1": "stack_array",
                    "18": "stack_buffer",
                    "2": "auxiliary_stack",
                    "3": "temp_stack"
                },
                "iVar1": {
                    "1": "status",
                    "2": "return_value",
                    "23": "result"
                },
                "local_88": {
                    "1": "bytes_remaining",
                    "2": "total_bytes",
                    "3": "file_size",
                    "5": "archive_size",
                    "6": "max_bytes_to_read"
                },
                "param_1": {
                    "1": "file_data",
                    "11": "archive",
                    "2": "archive_file",
                    "4": "archive_info"
                },
                "pcVar7": {
                    "1": "error_message_format",
                    "12": "error_message",
                    "14": "error_string",
                    "2": "error_msg_format"
                },
                "piVar6": {
                    "1": "error_code",
                    "2": "errno_pointer",
                    "7": "errno_ptr",
                    "9": "errno_location"
                },
                "puVar2": {
                    "1": "ptr2",
                    "2": "ptr_or_archive",
                    "3": "archive",
                    "5": "archive_ptr"
                },
                "sVar5": {
                    "2": "write_result",
                    "29": "bytes_written"
                },
                "uVar3": {
                    "1": "read_result",
                    "27": "bytes_read"
                },
                "uVar4": {
                    "1": "local_error_message",
                    "18": "error_message",
                    "2": "error_string",
                    "5": "error_msg"
                },
                "unaff_R13": {
                    "1": "bytes_read",
                    "20": "total_bytes_read",
                    "3": "total_bytes_written"
                },
                "unaff_R14": {
                    "1": "total_bytes_to_read",
                    "2": "total_bytes",
                    "22": "archive_size"
                },
                "unaff_RBP": {
                    "1": "remaining_bytes_to_write",
                    "20": "remaining_bytes",
                    "3": "buffer_size",
                    "4": "bytes_remaining"
                }
            },
            "called": [
                "free",
                "FUN_00107690",
                "bfd_bread",
                "bfd_seek",
                "xmalloc",
                "dcgettext",
                "printf",
                "strerror",
                "__errno_location",
                "fwrite"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid extract_and_print_archive_00103a78(undefined8 *archive)\n\n{\n  int result;\n  void *buffer;\n  undefined8 *archive_ptr;\n  ulong bytes_read;\n  undefined8 error_message;\n  size_t bytes_written;\n  int *errno_location;\n  size_t remaining_bytes;\n  char *error_string;\n  ulong total_bytes_read;\n  ulong archive_size;\n  undefined stack_buffer [48];\n  ulong max_bytes_to_read;\n  \n  buffer = (void *)xmalloc(0x2000);\n  archive_ptr = (undefined8 *)archive[0x1d];\n  if ((undefined8 *)archive[0x1d] == (undefined8 *)0x0) {\n    archive_ptr = archive;\n  }\n  result = (**(code **)(archive_ptr[1] + 0x1e8))(archive,stack_buffer);\n  if (result == 0) {\n    if (DAT_0010d60c != 0) {\n      printf(\"\\n<%s>\\n\\n\",*archive);\n    }\n    total_bytes_read = 0;\n    bfd_seek(archive,0,0);\n    goto LAB_00103afd;\n  }\n  archive = (undefined8 *)*archive;\n  error_string = \"internal stat error on %s\";\n  do {\n    error_message = dcgettext(0,error_string,5);\n    FUN_00107690(error_message,archive);\n    max_bytes_to_read = archive_size;\n    do {\n      bytes_written = fwrite(buffer,1,remaining_bytes,_stdout);\n      if (bytes_written != remaining_bytes) {\n        errno_location = __errno_location();\n        error_string = strerror(*errno_location);\n        FUN_00107690(\"stdout: %s\",error_string);\nLAB_00103b91:\n        free(buffer);\n        return;\n      }\n      total_bytes_read = total_bytes_read + bytes_written;\nLAB_00103afd:\n      if (max_bytes_to_read <= total_bytes_read) goto LAB_00103b91;\n      remaining_bytes = max_bytes_to_read - total_bytes_read;\n      if (0x2000 < remaining_bytes) {\n        remaining_bytes = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer,remaining_bytes,archive);\n    } while (remaining_bytes == bytes_read);\n    error_string = \"%s is not a valid archive\";\n    archive = *(undefined8 **)archive[0x1d];\n    archive_size = max_bytes_to_read;\n  } while( true );\n}\n\n",
            "current_name": "extract_and_print_archive_00103a78",
            "entrypoint": "0x00103a78",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103a78": "extract_and_print_archive_00103a78",
                "__ptr": "buffer",
                "auStack_b8": "stack_buffer",
                "iVar1": "result",
                "local_88": "max_bytes_to_read",
                "param_1": "archive",
                "pcVar7": "error_string",
                "piVar6": "errno_location",
                "puVar2": "archive_ptr",
                "sVar5": "bytes_written",
                "uVar3": "bytes_read",
                "uVar4": "error_message",
                "unaff_R13": "total_bytes_read",
                "unaff_R14": "archive_size",
                "unaff_RBP": "remaining_bytes"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103ba8": {
            "additional_data": {
                "FUN_00103ba8": {
                    "1": "print_if_ar_greater_than_zero",
                    "11": "check_and_print_ar",
                    "2": "check_and_print_prompt",
                    "3": "check_ar",
                    "4": "check_ar_status"
                },
                "_DAT_0010d608": {
                    "1": "is_ar_set",
                    "2": "ar_status"
                },
                "__format": {
                    "1": "message",
                    "2": "format_string",
                    "4": "format"
                },
                "__stream": {
                    "12": "stream",
                    "3": "file_stream",
                    "4": "output_stream"
                },
                "_stdout": {
                    "1": "standard_output",
                    "2": "output_stream"
                },
                "fflush": {
                    "1": "flush_buffer"
                },
                "printf": {
                    "1": "display_message"
                }
            },
            "called": [
                "fflush",
                "printf"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\n\n\nvoid check_and_print_ar_00103ba8(void)\n\n{\n  if (_DAT_0010d608 != 0) {\n    printf(\"AR >\");\n    fflush(output_stream);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "check_and_print_ar_00103ba8",
            "entrypoint": "0x00103ba8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103ba8": "check_and_print_ar_00103ba8",
                "_stdout": "output_stream",
                "fflush": "flush_buffer",
                "printf": "print_formatted"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103bd1": {
            "additional_data": {
                "FUN_00103bd1": {
                    "31": "print_matching_formats"
                },
                "__c": {
                    "1": "char_to_print",
                    "7": "character"
                },
                "__format": {
                    "1": "msg_format",
                    "18": "format_string",
                    "2": "error_format",
                    "4": "format_message"
                },
                "__ptr": {
                    "1": "pointer_to_free",
                    "3": "pointer",
                    "8": "ptr"
                },
                "__stream": {
                    "1": "stderr",
                    "7": "stream"
                },
                "_stderr": {
                    "1": "stderr_buffer",
                    "2": "stderr",
                    "3": "standard_error"
                },
                "_stdout": {
                    "1": "stdout_buffer",
                    "2": "stdout",
                    "4": "standard_output"
                },
                "_stream": {
                    "1": "error_stream"
                },
                "dcgettext": {
                    "1": "get_translated_text",
                    "2": "get_translated_string"
                },
                "fflush": {
                    "1": "flush_stream"
                },
                "fprintf": {
                    "1": "print_to_stream",
                    "2": "print_formatted_string"
                },
                "fputc": {
                    "1": "put_character",
                    "2": "write_character"
                },
                "free": {
                    "1": "free_memory"
                },
                "param_1": {
                    "1": "strings",
                    "14": "format_strings",
                    "2": "matching_formats",
                    "4": "format_list",
                    "8": "formats"
                },
                "plVar2": {
                    "1": "ptr",
                    "2": "current_format_string",
                    "22": "current_format",
                    "3": "format_ptr"
                },
                "uVar1": {
                    "1": "default_value",
                    "2": "data_value",
                    "3": "matching_formats",
                    "4": "matching_format"
                }
            },
            "called": [
                "free",
                "fflush",
                "fputc",
                "fprintf",
                "dcgettext"
            ],
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid print_matching_formats_00103bd1(long *format_strings)\n\n{\n  undefined8 matching_format;\n  char *format_string;\n  long *current_format;\n  \n  fflush(standard_output);\n  matching_format = DAT_0010d660;\n  format_string = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(standard_error,format_string,matching_format);\n  for (current_format = format_strings; *current_format != 0; current_format = current_format + 1) {\n    fprintf(standard_error,\" %s\");\n  }\n  free_memory(format_strings);\n  fputc(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_matching_formats_00103bd1",
            "entrypoint": "0x00103bd1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103bd1": "print_matching_formats_00103bd1",
                "__format": "format_string",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "dcgettext": "get_translated_string",
                "fflush": "flush_stream",
                "fprintf": "print_formatted_string",
                "fputc": "write_character",
                "free": "free_memory",
                "param_1": "format_strings",
                "plVar2": "current_format",
                "uVar1": "matching_format"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103c60": {
            "additional_data": {
                "DAT_0010d560": {
                    "1": "temp_file_pointer"
                },
                "DAT_0010d570": {
                    "1": "input_filepath_duplicate"
                },
                "FUN_0010315d": {
                    "1": "cleanup_resources",
                    "4": "cleanup"
                },
                "FUN_00103c60": {
                    "1": "extract_and_format_archives",
                    "2": "process_files",
                    "3": "extract_archive",
                    "4": "process_archive",
                    "5": "process_archives"
                },
                "FUN_001057a0": {
                    "1": "get_temporary_file"
                },
                "F_001057a0": {
                    "1": "initialize_archive"
                },
                "__errno_location": {
                    "4": "get_errno_location"
                },
                "_stderr": {
                    "1": "error_output_file",
                    "2": "stderr",
                    "6": "standard_error"
                },
                "bfd_check_format": {
                    "1": "check_input_format",
                    "2": "check_format"
                },
                "bfd_fdopenw": {
                    "4": "open_output_archive"
                },
                "bfd_openr": {
                    "2": "open_input_archive"
                },
                "bfd_openr_next_archived_file": {
                    "1": "open_next_archived_file",
                    "3": "get_next_archived_file"
                },
                "bfd_set_format": {
                    "1": "set_format",
                    "3": "set_output_format"
                },
                "cVar1": {
                    "1": "is_archive_format_valid",
                    "2": "format_valid",
                    "3": "is_archive",
                    "7": "format_check_result"
                },
                "dcgettext": {
                    "1": "gettext",
                    "2": "translate_message"
                },
                "fprintf": {
                    "1": "print_formatted_output",
                    "2": "print_error_message",
                    "3": "print_error"
                },
                "lVar4": {
                    "1": "archive_file",
                    "19": "input_archive",
                    "2": "input_bfd",
                    "6": "input_archive_handle"
                },
                "lVar5": {
                    "1": "archived_file_pointer",
                    "21": "archived_file",
                    "7": "archived_file_handle"
                },
                "param_1": {
                    "1": "filename",
                    "3": "input_archive_name",
                    "4": "input_archive_path",
                    "5": "input_file",
                    "6": "input_archive"
                },
                "param_2": {
                    "1": "is_encrypted",
                    "10": "flag",
                    "2": "mode",
                    "3": "is_output_archive",
                    "9": "is_plugin"
                },
                "param_3": {
                    "1": "param_3"
                },
                "param_4": {
                    "1": "param_4"
                },
                "pcVar3": {
                    "1": "error_message_template",
                    "2": "error_msg",
                    "28": "error_message"
                },
                "piVar2": {
                    "1": "errno_location_ptr",
                    "2": "errno_value",
                    "3": "errno_loc",
                    "4": "errno_ptr",
                    "5": "errno_location",
                    "7": "error_number"
                },
                "plVar7": {
                    "1": "archived_files_list",
                    "2": "archived_file_ptr",
                    "3": "next_archived_file",
                    "4": "archived_files",
                    "6": "current_file"
                },
                "stderr": {
                    "2": "standard_error"
                },
                "strerror": {
                    "2": "get_error_message"
                },
                "uVar6": {
                    "1": "error_message_id",
                    "24": "program_name"
                },
                "xFree": {
                    "1": "dynamic_memory_free"
                },
                "xstrdup": {
                    "4": "duplicate_string"
                }
            },
            "called": [
                "FUN_001057a0",
                "bfd_set_format",
                "bfd_check_format",
                "fprintf",
                "bfd_openr_next_archived_file",
                "dcgettext",
                "bfd_openr",
                "FUN_0010315d",
                "bfd_fdopenw",
                "__errno_location",
                "strerror",
                "xstrdup"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\n\n\nvoid process_archives_00103c60(char *input_archive,int flag)\n\n{\n  char format_check_result;\n  int *error_number;\n  char *error_message;\n  long input_archive;\n  long archived_file;\n  undefined8 program_name;\n  long *current_file;\n  \n  DAT_0010d570 = xstrdup();\n  DAT_0010d560 = (char *)FUN_001057a0(DAT_0010d570,&DAT_0010d568);\n  if (DAT_0010d560 == (char *)0x0) {\n    error_number = __errno_location();\n    input_archive = strerror(*error_number);\n    program_name = DAT_0010d660;\n    error_message = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    DAT_0010d558 = bfd_fdopenw(DAT_0010d560,0,DAT_0010d568);\n    if (DAT_0010d558 == 0) {\n      error_message = \"%s: Can\\'t open output archive %s\\n\";\n      input_archive = DAT_0010d560;\n    }\n    else {\n      if (flag != 0) {\nLAB_00103d02:\n        bfd_set_format(DAT_0010d558,2);\n        *(byte *)(DAT_0010d558 + 0x49) = *(byte *)(DAT_0010d558 + 0x49) & 0xe7 | 8;\n        return;\n      }\n      input_archive = bfd_openr(input_archive,\"plugin\");\n      if (input_archive == 0) {\n        error_message = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        format_check_result = bfd_check_format(input_archive,2);\n        if (format_check_result != '\\0') {\n          current_file = (long *)(DAT_0010d558 + 0xf8);\n          for (archived_file = bfd_openr_next_archived_file(input_archive,0); archived_file != 0;\n              archived_file = bfd_openr_next_archived_file(input_archive,archived_file)) {\n            *current_file = archived_file;\n            current_file = (long *)(archived_file + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        error_message = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    program_name = DAT_0010d660;\n    error_message = (char *)dcgettext(0,error_message,5);\n  }\n  fprintf(standard_error,error_message,program_name,input_archive);\n  FUN_0010315d();\n  return;\n}\n\n",
            "current_name": "process_archives_00103c60",
            "entrypoint": "0x00103c60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103c60": "process_archives_00103c60",
                "__errno_location": "get_errno_location",
                "_stderr": "standard_error",
                "bfd_check_format": "check_format",
                "bfd_fdopenw": "open_output_archive",
                "bfd_openr": "open_input_archive",
                "bfd_openr_next_archived_file": "get_next_archived_file",
                "bfd_set_format": "set_output_format",
                "cVar1": "format_check_result",
                "dcgettext": "translate_message",
                "fprintf": "print_error",
                "lVar4": "input_archive",
                "lVar5": "archived_file",
                "param_1": "input_archive",
                "param_2": "flag",
                "pcVar3": "error_message",
                "piVar2": "error_number",
                "plVar7": "current_file",
                "stderr": "standard_error",
                "strerror": "get_error_string",
                "uVar6": "program_name",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103ddc": {
            "additional_data": {
                "FUN_00103ddc": {
                    "1": "print_logs",
                    "12": "process_data",
                    "2": "execute_file_processing",
                    "3": "execute_function"
                },
                "FUN_001079c0": {
                    "1": "process_data",
                    "14": "write_to_file",
                    "2": "execute_sub_function",
                    "3": "process_file"
                },
                "param_1": {
                    "1": "input_data",
                    "10": "file",
                    "2": "output_file",
                    "4": "data",
                    "9": "file_pointer"
                },
                "param_2": {
                    "1": "log_entries",
                    "2": "strings",
                    "3": "arguments",
                    "4": "file_names",
                    "9": "data"
                },
                "param_3": {
                    "1": "is_writable",
                    "2": "flag_1",
                    "3": "is_flag_set",
                    "9": "flag1"
                },
                "param_4": {
                    "1": "counter",
                    "2": "additional_flag",
                    "6": "flag",
                    "9": "flag2"
                }
            },
            "called": [
                "FUN_001079c0"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\nvoid process_data_00103ddc(undefined8 file)\n\n{\n  FUN_001079c0(DAT_0010d578,file,DAT_0010d60c != 0,0);\n  return;\n}\n\n",
            "current_name": "process_data_00103ddc",
            "entrypoint": "0x00103ddc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103ddc": "process_data_00103ddc",
                "param_1": "file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103df9": {
            "additional_data": {
                "FUN_001033b0": {
                    "1": "display_error_message",
                    "2": "print_error",
                    "5": "print_error_message"
                },
                "FUN_00103df9": {
                    "2": "expand_buffer",
                    "29": "ensure_buffer_stack"
                },
                "__dSize": {
                    "1": "data_size"
                },
                "__nmemb": {
                    "1": "member_count"
                },
                "__ptr": {
                    "1": "pointer"
                },
                "__size": {
                    "1": "total_bytes",
                    "18": "buffer_size",
                    "2": "element_size",
                    "3": "size",
                    "4": "total_size"
                },
                "bVar4": {
                    "1": "loop_index",
                    "2": "loop_condition",
                    "3": "byte_var",
                    "4": "counter",
                    "8": "flag"
                },
                "calloc": {
                    "4": "allocate_memory"
                },
                "in_RCX": {
                    "1": "return_val",
                    "17": "return_value",
                    "2": "input",
                    "7": "result"
                },
                "lVar1": {
                    "1": "index",
                    "18": "loop_counter",
                    "3": "loop_index",
                    "5": "counter"
                },
                "lVar2": {
                    "1": "new_capacity",
                    "14": "new_buffer_size",
                    "15": "new_size"
                },
                "param_1": {
                    "1": "error_message"
                },
                "puVar3": {
                    "1": "current_pointer",
                    "11": "buffer_ptr",
                    "6": "buffer_pointer",
                    "7": "ptr"
                },
                "realloc": {
                    "4": "reallocate_memory"
                }
            },
            "called": [
                "realloc",
                "calloc",
                "FUN_001033b0"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\nundefined8 ensure_buffer_stack_00103df9(void)\n\n{\n  size_t buffer_size;\n  undefined8 return_value;\n  long loop_counter;\n  long new_size;\n  undefined4 *buffer_ptr;\n  byte flag;\n  \n  flag = 0;\n  if (DAT_0010d5a8 == (void *)0x0) {\n    DAT_0010d5a8 = calloc(8,1);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      DAT_0010d580 = 1;\n      DAT_0010d5a0 = 0;\n      return return_value;\n    }\n  }\n  else {\n    if (DAT_0010d5a0 < DAT_0010d580 - 1U) {\n      return return_value;\n    }\n    new_size = DAT_0010d580 + 8;\n    buffer_size = new_size * 8;\n    DAT_0010d5a8 = recalloc(DAT_0010d5a8,buffer_size);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      buffer_ptr = (undefined4 *)((long)DAT_0010d5a8 + (buffer_size - 0x40));\n      DAT_0010d580 = new_size;\n      for (loop_counter = 0x10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *buffer_ptr = 0;\n        buffer_ptr = buffer_ptr + (ulong)flag * -2 + 1;\n      }\n      return return_value;\n    }\n  }\n  FUN_001033b0(\"out of dynamic memory in yyensure_buffer_stack_00103df9()\");\n  DAT_0010d5a0 = 0;\n  DAT_0010d580 = 1;\n  return return_value;\n}\n\n",
            "current_name": "ensure_buffer_stack_00103df9",
            "entrypoint": "0x00103df9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103df9": "ensure_buffer_stack_00103df9",
                "__size": "buffer_size",
                "bVar4": "flag",
                "calloc": "allocate_memory",
                "in_RCX": "return_value",
                "lVar1": "loop_counter",
                "lVar2": "new_size",
                "puVar3": "buffer_ptr",
                "realloc": "reallocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103e95": {
            "additional_data": {
                "DAT_0010d538": {
                    "1": "output_file"
                },
                "DAT_0010d554": {
                    "1": "counter"
                },
                "DAT_0010d590": {
                    "1": "input_file"
                },
                "FUN_0010300e": {
                    "1": "find_next_state"
                },
                "FUN_001030ed": {
                    "1": "cleanup"
                },
                "FUN_0010312d": {
                    "1": "print_error"
                },
                "FUN_001031a5": {
                    "1": "initialize_global_variables"
                },
                "FUN_001031cf": {
                    "1": "check_file_status"
                },
                "FUN_001033b0": {
                    "1": "handle_error"
                },
                "FUN_00103ddc": {
                    "1": "close_archive"
                },
                "FUN_00103e95": {
                    "1": "parse_binary_function",
                    "3": "decompiled_function"
                },
                "FUN_00103ee9": {
                    "1": "copy_character_until_limit"
                },
                "FUN_00105bc0": {
                    "1": "create_temp_files"
                },
                "arg": {
                    "1": "undefined8_var"
                },
                "arg2": {
                    "1": "undefined8_var"
                },
                "auVar19": {
                    "1": "undefined_array_var_1"
                },
                "auVar40": {
                    "1": "undefined_variable1",
                    "3": "undefined_variable"
                },
                "auVar41": {
                    "1": "undefined_variable41",
                    "2": "undefined_variable2"
                },
                "bVar28": {
                    "1": "bool_var28",
                    "2": "boolean_variable28",
                    "3": "bool_var",
                    "4": "boolean_variable"
                },
                "bVar30": {
                    "1": "byte_variable30",
                    "2": "byte_var30",
                    "3": "byte_var",
                    "6": "byte_variable"
                },
                "bVar39": {
                    "1": "boolean_variable39",
                    "3": "byte_variable_2"
                },
                "buffer": {
                    "1": "char_ptr"
                },
                "cVar2": {
                    "1": "char_var2",
                    "2": "character_variable2",
                    "3": "char_var",
                    "9": "character_variable"
                },
                "counter": {
                    "1": "count"
                },
                "dataline": {
                    "1": "string_var"
                },
                "fd": {
                    "1": "int_var"
                },
                "file": {
                    "1": "string_var"
                },
                "filename": {
                    "1": "string_var"
                },
                "fp": {
                    "1": "file_ptr"
                },
                "fp1": {
                    "1": "file_ptr"
                },
                "fp2": {
                    "1": "file_ptr"
                },
                "g_fname": {
                    "1": "string_var"
                },
                "iVar25": {
                    "1": "temp_var_3",
                    "2": "integer_variable"
                },
                "iVar37": {
                    "1": "int_variable_2",
                    "2": "integer_variable"
                },
                "iVar8": {
                    "1": "integer_var8",
                    "2": "int_variable",
                    "7": "integer_variable"
                },
                "iVar9": {
                    "1": "int_var_2",
                    "2": "integer_variable"
                },
                "lVar17": {
                    "1": "long_variable1",
                    "2": "long_var17",
                    "6": "long_variable"
                },
                "lVar18": {
                    "1": "long_variable18",
                    "2": "long_variable_2",
                    "3": "long_variable"
                },
                "lVar21": {
                    "1": "long_var_3",
                    "2": "long_variable_3",
                    "3": "long_variable"
                },
                "lVar31": {
                    "1": "long_variable_31",
                    "2": "long_var31",
                    "3": "long_variable"
                },
                "lVar40": {
                    "1": "long_variable_6"
                },
                "lVar41": {
                    "1": "long_variable_7"
                },
                "line": {
                    "1": "string_var"
                },
                "local_678": {
                    "1": "input_string_array"
                },
                "local_740": {
                    "1": "local_char_array740",
                    "2": "local_character_array"
                },
                "local_7d0": {
                    "1": "local_stat_structure",
                    "3": "local_stat_variable"
                },
                "local_7f0": {
                    "1": "local_pointer_to_stat"
                },
                "local_7f8": {
                    "1": "local_byte_pointer1",
                    "2": "local_byte_pointer"
                },
                "local_7fc": {
                    "1": "local_unsigned_integer_variable_7fc"
                },
                "local_800": {
                    "1": "local_integer_var800",
                    "2": "local_int_variable",
                    "3": "local_integer_variable"
                },
                "local_810": {
                    "1": "all_strings",
                    "3": "local_double_pointer_to_character"
                },
                "local_818": {
                    "1": "long_variable5",
                    "2": "local_long_var818",
                    "3": "local_long_variable"
                },
                "local_820": {
                    "1": "local_pointer_to_character_variable820",
                    "2": "local_pointer_to_character"
                },
                "local_828": {
                    "1": "local_pointer_to_char_828",
                    "2": "current_char"
                },
                "n": {
                    "1": "size"
                },
                "num": {
                    "1": "int_var"
                },
                "offset": {
                    "1": "int_var"
                },
                "outfile": {
                    "1": "file_ptr"
                },
                "p": {
                    "1": "char_ptr"
                },
                "pData": {
                    "1": "char_ptr"
                },
                "pFVar4": {
                    "1": "pointer_to_file_variable",
                    "2": "pointer_to_file",
                    "3": "file_variable",
                    "4": "file_pointer"
                },
                "pFile": {
                    "1": "file_ptr"
                },
                "pbVar30": {
                    "1": "pointer_to_byte_variable30"
                },
                "pbVar32": {
                    "1": "pointer_to_byte_variable32",
                    "2": "pointer_to_byte_2"
                },
                "pbVar33": {
                    "1": "pointer_to_byte_33",
                    "2": "byte_pointer_3"
                },
                "pbVar35": {
                    "1": "pointer_byte3",
                    "2": "byte_pointer4"
                },
                "pbVar36": {
                    "1": "byte_pointer5",
                    "2": "pointer_to_byte_5"
                },
                "pbVar39": {
                    "1": "byte_variable"
                },
                "pbVar7": {
                    "1": "pointer_to_byte_7",
                    "2": "byte_pointer_variable",
                    "4": "pointer_to_byte",
                    "6": "byte_pointer"
                },
                "pcVar10": {
                    "1": "string_variable",
                    "2": "pointer_to_character_variable"
                },
                "pcVar15": {
                    "1": "pointer_to_char_2",
                    "2": "char_pointer_variable"
                },
                "pcVar16": {
                    "1": "char_pointer_variable"
                },
                "pcVar27": {
                    "1": "pointer_to_character_variable27"
                },
                "pcVar29": {
                    "1": "pointer_to_character_variable29"
                },
                "piVar34": {
                    "1": "pointer_to_int_variable",
                    "2": "pointer_to_integer",
                    "4": "integer_pointer"
                },
                "plVar12": {
                    "1": "pointer_to_long_var12",
                    "2": "long_ptr"
                },
                "plVar34": {
                    "1": "pointer_to_variable34"
                },
                "plVar5": {
                    "1": "pointer_to_long_variable",
                    "3": "long_pointer",
                    "5": "pointer_to_long"
                },
                "ppFVar3": {
                    "1": "pointer_to_pointer_to_file_var3",
                    "3": "file_pointer"
                },
                "ppFVar4": {
                    "1": "pointer_to_pointer_to_file_variable4"
                },
                "ppcVar27": {
                    "1": "char_pointer_pointer_variable",
                    "4": "double_pointer_to_character"
                },
                "ppcVar29": {
                    "1": "double_pointer_char_2",
                    "2": "char_pointer_pointer2"
                },
                "ppcVar38": {
                    "1": "pointer_to_pointer_to_character_variable38",
                    "2": "char_pointer_pointer3"
                },
                "pplVar1": {
                    "1": "double_pointer_1",
                    "2": "double_pointer"
                },
                "puVar22": {
                    "1": "undefined8_pointer_variable"
                },
                "puVar23": {
                    "1": "pointer_to_unsigned_var23"
                },
                "puVar34": {
                    "1": "pointer_to_unsigned_variable34"
                },
                "pvVar14": {
                    "1": "pointer_to_void14",
                    "2": "pointer_to_void_14",
                    "4": "void_pointer"
                },
                "ret": {
                    "1": "int_var"
                },
                "sVar13": {
                    "1": "size_variable_13",
                    "3": "size_variable"
                },
                "uVar11": {
                    "1": "undefined8_variable_11",
                    "2": "undefined8_variable"
                },
                "uVar19": {
                    "1": "ulong_variable_19",
                    "4": "ulong_variable"
                },
                "uVar20": {
                    "1": "uint_var1",
                    "5": "uint_variable"
                },
                "uVar24": {
                    "1": "uint_var_2",
                    "2": "uint_variable2"
                },
                "uVar26": {
                    "1": "unsigned_variable26",
                    "2": "ulong_variable2"
                },
                "uVar36": {
                    "1": "unsigned_variable_7"
                },
                "uVar39": {
                    "1": "byte_variable"
                },
                "uVar6": {
                    "1": "unsigned_var6",
                    "2": "unsigned_long_variable",
                    "3": "undefined8_variable"
                }
            },
            "called": [
                "free",
                "FUN_00107740",
                "FUN_00103ddc",
                "dup",
                "malloc",
                "FUN_001032a8",
                "FUN_0010300e",
                "fread",
                "FUN_001030ed",
                "FUN_00105bc0",
                "clearerr",
                "FUN_00105300",
                "dcgettext",
                "bfd_openr",
                "ferror",
                "getc",
                "__errno_location",
                "FUN_001033b0",
                "filename_cmp",
                "FUN_00103ba8",
                "bfd_close",
                "FUN_001031cf",
                "FUN_001033d6",
                "FUN_001031a5",
                "stat",
                "FUN_00103c60",
                "FUN_00103df9",
                "FUN_0010315d",
                "bfd_cache_close",
                "unlink",
                "bfd_openw",
                "bfd_set_format",
                "realloc",
                "fprintf",
                "FUN_0010312d",
                "fopen",
                "printf",
                "fwrite",
                "fclose",
                "xstrdup"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid decompile_and_improve_00103e95(void)\n\n{\n  losizeg **double_pointer;\n  char character_variable;\n  FILE **file_pointer;\n  FILE *file_pointer;\n  losizeg *pointer_to_long;\n  usizedefisizeed8 undefined8_variable;\n  byte *byte_pointer;\n  isizet integer_variable;\n  char *pointer_to_character_variable;\n  usizedefisizeed8 undefined8_variable;\n  isizet integer_variable;\n  losizeg *pointer_to_long_12;\n  size_t size_t_variable;\n  void *void_pointer;\n  char *char_pointer_variable;\n  char *pointer_to_character_16;\n  losizeg long_variable;\n  losizeg long_variable;\n  ulosizeg ulong_variable;\n  uisizet uint_variable;\n  losizeg long_variable;\n  usizedefisizeed8 *pointer_to_unsigned_long_variable;\n  usizedefisizeed8 *pointer_to_unsigned_long_variable;\n  uisizet uint_variable2;\n  isizet int_variable;\n  ulosizeg ulong_variable2;\n  char **double_pointer_to_character;\n  bool bool_variable;\n  char **char_pointer_pointer2;\n  byte byte_variable;\n  losizeg long_variable;\n  byte *byte_pointer2;\n  byte *byte_pointer3;\n  isizet *integer_pointer;\n  byte *byte_pointer4;\n  uisizet unsigned_int_variable;\n  isizet integer_variable;\n  char **char_pointer_pointer3;\n  byte byte_variable;\n  usizedefisizeed undefined_variable [16];\n  usizedefisizeed undefined_variable [16];\n  char *local_pointer_to_character_variable;\n  char *local_pointer_to_character;\n  losizeg local_long_variable;\n  char **local_double_pointer_to_character;\n  isizet local_integer_variable;\n  uisizet local_unsigned_integer_variable_7fc;\n  byte *local_pointer_to_byte_7f8;\n  stat local_stat_variable;\n  char local_character_array [200];\n  char *local_character_array_678 [201];\n  \n  byte_variable = 0;\n  long_variable = 0;\n  DAT_0010d550 = -2;\n  char_pointer_pointer2 = local_character_array_678;\n  local_integer_variable = 0;\n  local_pointer_to_character_variable = local_character_array;\n  local_long_variable = 200;\n  local_pointer_to_character = local_pointer_to_character_variable;\n  local_double_pointer_to_character = char_pointer_pointer2;\nLAB_00103ee9:\n  *local_pointer_to_character_variable = (char)long_variable;\n  if (local_pointer_to_character + local_long_variable + -1 <= local_pointer_to_character_variable) {\n    long_variable = (losizeg)local_pointer_to_character_variable - (losizeg)local_pointer_to_character;\n    long_variable = long_variable + 1;\n    if (local_long_variable < 10000) {\n      long_variable = local_long_variable * 2;\n      local_long_variable = 10000;\n      if (long_variable < 0x2711) {\n        local_long_variable = long_variable;\n      }\n      pointer_to_character_variable = (char *)malloc(local_long_variable * 9 + 7);\n      if (pointer_to_character_variable != (char *)0x0) {\n        long_variable = long_variable * 8;\n        char_pointer_variable = local_pointer_to_character;\n        pointer_to_character_16 = pointer_to_character_variable;\n        for (; long_variable != 0; long_variable = long_variable + -1) {\n          *pointer_to_character_16 = *char_pointer_variable;\n          char_pointer_variable = char_pointer_variable + (ulosizeg)byte_variable * -2 + 1;\n          pointer_to_character_16 = pointer_to_character_16 + (ulosizeg)byte_variable * -2 + 1;\n        }\n        char_pointer_pointer3 = (char **)(pointer_to_character_variable + local_long_variable);\n        char_pointer_pointer2 = char_pointer_pointer3;\n        for (; long_variable != 0; long_variable = long_variable + -1) {\n          *(usizedefisizeed *)char_pointer_pointer2 = *(usizedefisizeed *)local_double_pointer_to_character;\n          local_double_pointer_to_character = (char **)((losizeg)local_double_pointer_to_character + (ulosizeg)byte_variable * -2 + 1);\n          char_pointer_pointer2 = (char **)((losizeg)char_pointer_pointer2 + (ulosizeg)byte_variable * -2 + 1);\n        }\n        if (local_pointer_to_character != local_character_array) {\n          free(local_pointer_to_character);\n        }\n        local_pointer_to_character_variable = pointer_to_character_variable + long_variable;\n        char_pointer_pointer2 = char_pointer_pointer3 + long_variable;\n        local_pointer_to_character = pointer_to_character_variable;\n        local_double_pointer_to_character = char_pointer_pointer3;\n        if (pointer_to_character_variable + local_long_variable + -1 <= local_pointer_to_character_variable) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    FUN_001031a5();\nLAB_0010524c:\n    pointer_to_character_variable = local_pointer_to_character;\n    if (local_pointer_to_character == local_character_array) {\n      int_varursize;\n    }\nLAB_00105265:\n    free(pointer_to_character_variable);\n    int_varursize;\n  }\nLAB_00103fd8:\n  integer_variable = (isizet)long_variable;\n  if (integer_variable == 3) goto LAB_0010524c;\n  character_variable = (&DAT_0010a200)[integer_variable];\n  if (character_variable != -0xe) {\n    if (DAT_0010d550 == -2) {\n      if (_DAT_0010d540 == 0) {\n        _DAT_0010d540 = 1;\n        if (DAT_0010d5d0 == 0) {\n          DAT_0010d5d0 = 1;\n        }\n        if (DAT_0010d590 == (FILE *)0x0) {\n          DAT_0010d590 = _stdisize;\n        }\n        if (DAT_0010d538 == (FILE *)0x0) {\n          DAT_0010d538 = _stdout;\n        }\n        if ((DAT_0010d5a8 == 0) || (*(losizeg *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n          FUN_00103df9();\n          pointer_to_unsigned_long_variable = (usizedefisizeed8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          undefined8_variable = FUN_001033d6(DAT_0010d590);\n          *pointer_to_unsigned_long_variable = undefined8_variable;\n        }\n        FUN_001030ed();\n      }\nLAB_001040b1:\n      *DAT_0010d5b0 = DAT_0010d588;\n      byte_pointer2 = DAT_0010d5b0;\n      byte_pointer4 = DAT_0010d5b0;\n      uint_variable = DAT_0010d5d0;\nLAB_001040d4:\n      ulong_variable = (ulosizeg)uint_variable;\n      ulong_variable2 = (ulosizeg)local_unsigned_integer_variable_7fc;\n      bool_variable = false;\n      do {\n        byte_variable = (&DAT_0010ab00)[*byte_pointer4];\n        if (*(short *)(&DAT_0010a980 + (losizeg)(isizet)ulong_variable * 2) != 0) {\n          bool_variable = true;\n          ulong_variable2 = ulong_variable & 0xffffffff;\n          local_pointer_to_byte_7f8 = byte_pointer4;\n        }\n        while( true ) {\n          integer_variable = (isizet)ulong_variable;\n          long_variable = (losizeg)(isizet)((isizet)*(short *)(&DAT_0010a640 + (losizeg)integer_variable * 2) + (uisizet)byte_variable);\n          if (integer_variable == *(short *)(&DAT_0010a440 + long_variable * 2)) break;\n          ulong_variable = (ulosizeg)(uisizet)(isizet)*(short *)(&DAT_0010a800 + (losizeg)integer_variable * 2);\n          if (0xb0 < *(short *)(&DAT_0010a800 + (losizeg)integer_variable * 2)) {\n            byte_variable = (&DAT_0010a7c0)[(isizet)(uisizet)byte_variable];\n          }\n        }\n        byte_pointer4 = byte_pointer4 + 1;\n        ulong_variable = (ulosizeg)*(short *)(&DAT_0010a240 + long_variable * 2);\n      } while (*(short *)(&DAT_0010a640 + ulong_variable * 2) != 0xc2);\n      local_unsigned_integer_variable_7fc = (uisizet)ulong_variable2;\n      byte_pointer3 = byte_pointer2;\n      if (bool_variable) {\n        DAT_0010d5b8 = local_pointer_to_byte_7f8;\n        DAT_0010d5c0 = local_unsigned_integer_variable_7fc;\n      }\nLAB_0010419f:\n      integer_variable = (isizet)*(short *)(&DAT_0010a980 + (losizeg)(isizet)ulong_variable * 2);\n      if (integer_variable == 0) {\n        integer_variable = (isizet)*(short *)(&DAT_0010a980 + (losizeg)(isizet)DAT_0010d5c0 * 2);\n        byte_pointer4 = DAT_0010d5b8;\n      }\n      DAT_0010d530 = (isizet)byte_pointer4 - (isizet)byte_pointer3;\n      DAT_0010d588 = *byte_pointer4;\n      DAT_0010d5b0 = byte_pointer4;\n      DAT_0010d5c8 = byte_pointer3;\n      *byte_pointer4 = 0;\nLAB_001041f0:\n      byte_pointer2 = DAT_0010d5c8;\n      long_variable = DAT_0010d5a0;\n      switch(integer_variable) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        DAT_0010d550 = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        DAT_0010d550 = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        DAT_0010d550 = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        DAT_0010d550 = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        DAT_0010d550 = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        DAT_0010d550 = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        DAT_0010d550 = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        DAT_0010d550 = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        DAT_0010d550 = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        DAT_0010d550 = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        DAT_0010d550 = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        DAT_0010d550 = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        DAT_0010d550 = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        DAT_0010d550 = 0x103;\n        break;\n      case 0x1f:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        DAT_0010d550 = 0x28;\n        break;\n      case 0x21:\n        DAT_0010d550 = 0x29;\n        break;\n      case 0x22:\n        DAT_0010d550 = 0x2c;\n        break;\n      case 0x23:\n        DAT_0010d548 = (char *)xstrduchar_ptr(DAT_0010d5c8);\n        DAT_0010d550 = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        DAT_0010d550 = 0x102;\n        break;\n      case 0x28:\n        fwrite(DAT_0010d5c8,(losizeg)DAT_0010d530,1,DAT_0010d538);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        DAT_0010d550 = 0;\n        break;\n      default:\n        FUN_001033b0(\"fatal flex scasizesizeer isizetersizeal error--sizeo actiosize fousized\");\n      case 0xf:\n      case 0x1e:\n        DAT_0010d550 = 0x112;\n      }\n      long_variable = (losizeg)integer_variable;\n    }\n    if (0 < DAT_0010d550) {\n      if (DAT_0010d550 != 0x100) {\n        integer_variable = 2;\n        if (DAT_0010d550 < 0x114) {\n          integer_variable = (isizet)(char)(&DAT_0010a0e0)[DAT_0010d550];\n        }\n        goto LAB_0010497d;\n      }\n      DAT_0010d550 = 0x101;\n      goto LAB_001051f0;\n    }\n    integer_variable = 0;\n    DAT_0010d550 = 0;\nLAB_0010497d:\n    uint_variable = character_variable + integer_variable;\n    if ((0x22 < uint_variable) || (integer_variable != (char)(&DAT_0010a0a0)[(isizet)uint_variable])) goto LAB_001049db;\n    character_variable = (&DAT_0010a060)[(isizet)uint_variable];\n    long_variable = (losizeg)character_variable;\n    if (character_variable < '\\x01') {\n      integer_variable = -(isizet)character_variable;\n      goto LAB_00104a0a;\n    }\n    DAT_0010d550 = -2;\n    local_integer_variable = local_integer_variable + -1 + (uisizet)(local_integer_variable == 0);\n    char_pointer_pointer2 = char_pointer_pointer2 + 1;\n    *char_pointer_pointer2 = DAT_0010d548;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  integer_variable = (isizet)(char)(&DAT_0010a020)[(isizet)long_variable];\n  if ((&DAT_0010a020)[(isizet)long_variable] == '\\0') {\n    if (local_integer_variable == 0) {\n      _DAT_0010d544 = _DAT_0010d544 + 1;\n      FUN_001031a5();\nLAB_001051f0:\n      do {\n        if (((((char)(&DAT_0010a200)[long_variable] != -0xe) &&\n             (uint_variable = (isizet)(char)(&DAT_0010a200)[long_variable] + 1, uint_variable < 0x23)) &&\n            ((&DAT_0010a0a0)[(isizet)uint_variable] == '\\x01')) &&\n           (long_variable = (losizeg)(char)(&DAT_0010a060)[(isizet)uint_variable],\n           '\\0' < (char)(&DAT_0010a060)[(isizet)uint_variable])) goto LAB_00105227;\n        if (local_pointer_to_character == local_pointer_to_character_variable) goto LAB_0010524c;\n        local_pointer_to_character_variable = local_pointer_to_character_variable + -1;\n        char_pointer_pointer2 = char_pointer_pointer2 + -1;\n        long_variable = (losizeg)*local_pointer_to_character_variable;\n      } while( true );\n    }\n    if (local_integer_variable != 3) goto LAB_001051f0;\n    if (0 < DAT_0010d550) {\n      DAT_0010d550 = -2;\n      goto LAB_001051f0;\n    }\n    if (DAT_0010d550 != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  undefined8_variable = DAT_0010d660;\n  double_pointer_to_character = DAT_0010d558;\n  character_variable = (&DAT_00109fe0)[integer_variable];\n  char_pointer_pointer3 = (char **)char_pointer_pointer2[1 - character_variable];\n  switch(integer_variable) {\n  case 2:\n  case 6:\n    FUN_00103ba8();\n    break;\n  case 0x13:\n    if (DAT_0010d558 == (char **)0x0) {\n      int_varursize;\n    }\n    bfd_cache_close();\n    usizelisizek(*DAT_0010d558);\n    int_varursize;\n  case 0x15:\n    FUN_001031a5();\n    break;\n  case 0x17:\n    pointer_to_unsigned_long_variable = (usizedefisizeed8 *)*char_pointer_pointer2;\n    if (DAT_0010d558 == (char **)0x0) {\n      pointer_to_character_variable = \"%s: sizeo ochar_ptresize archive\\size\";\nLAB_00104b62:\n      pointer_to_character_variable = (char *)dcgettext(0,pointer_to_character_variable,5);\n      file_ptrrisizetf(_stderr,pointer_to_character_variable,undefined8_variable);\n      FUN_0010315d();\n    }\n    else {\n      for (; pointer_to_unsigned_long_variable != (usizedefisizeed8 *)0x0; pointer_to_unsigned_long_variable = (usizedefisizeed8 *)pointer_to_unsigned_long_variable[1]) {\n        for (pointer_to_unsigned_long_variable = (usizedefisizeed8 *)DAT_0010d558[0x1f]; pointer_to_unsigned_long_variable != (usizedefisizeed8 *)0x0;\n            pointer_to_unsigned_long_variable = (usizedefisizeed8 *)pointer_to_unsigned_long_variable[0x1e]) {\n          integer_variable = string_var_cmchar_ptr(*pointer_to_unsigned_long_variable);\n          if (integer_variable == 0) {\n            FUN_00107740();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_ochar_ptresizer(*pointer_to_unsigned_long_variable,0);\n        undefined8_variable = DAT_0010d660;\n        undefined8_variable = *pointer_to_unsigned_long_variable;\n        pointer_to_character_variable = (char *)dcgettext(0,\"%s: casize\\'t fisized module string_var %s\\size\",5);\n        file_ptrrisizetf(_stderr,pointer_to_character_variable,undefined8_variable,undefined8_variable);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    pointer_to_unsigned_long_variable = (usizedefisizeed8 *)*char_pointer_pointer2;\n    if (DAT_0010d558 == (char **)0x0) {\nLAB_00104b4f:\n      pointer_to_character_variable = \"%s: sizeo ochar_ptresize outchar_ptrut archive\\size\";\n      goto LAB_00104b62;\n    }\n    for (; pointer_to_unsigned_long_variable != (usizedefisizeed8 *)0x0; pointer_to_unsigned_long_variable = (usizedefisizeed8 *)pointer_to_unsigned_long_variable[1]) {\n      bool_variable = false;\n      double_pointer_to_character = DAT_0010d558 + 0x1f;\n      for (pointer_to_character_variable = DAT_0010d558[0x1f]; pointer_to_character_variable != (char *)0x0;\n          pointer_to_character_variable = *(char **)(pointer_to_character_variable + 0xf0)) {\n        integer_variable = string_var_cmchar_ptr();\n        if (integer_variable == 0) {\n          char_pointer_variable = (char *)bfd_ochar_ptresizer(*pointer_to_unsigned_long_variable,0);\n          undefined8_variable = DAT_0010d660;\n          if (char_pointer_variable == (char *)0x0) {\n            undefined8_variable = *pointer_to_unsigned_long_variable;\n            char_pointer_variable = (char *)dcgettext(0,\"%s: casize\\'t ochar_ptresize string_var %s\\size\",5);\n            file_ptrrisizetf(_stderr,char_pointer_variable,undefined8_variable,undefined8_variable);\n            FUN_0010315d();\n          }\n          else {\n            *double_pointer_to_character = char_pointer_variable;\n            bool_variable = true;\n            *(usizedefisizeed8 *)(char_pointer_variable + 0xf0) = *(usizedefisizeed8 *)(pointer_to_character_variable + 0xf0);\n          }\n        }\n        else {\n          double_pointer_to_character = (char **)(pointer_to_character_variable + 0xf0);\n        }\n      }\n      if (!bool_variable) {\n        pointer_to_character_variable = (char *)bfd_ochar_ptresizer(*pointer_to_unsigned_long_variable,0);\n        undefined8_variable = DAT_0010d660;\n        undefined8_variable = *pointer_to_unsigned_long_variable;\n        char_pointer_variable = (char *)dcgettext(0,\"%s: casize\\'t fisized module string_var %s\\size\",5);\n        file_ptrrisizetf(_stderr,char_pointer_variable,undefined8_variable,undefined8_variable);\n        undefined8_variable = DAT_0010d660;\n        if (pointer_to_character_variable == (char *)0x0) {\n          undefined8_variable = *pointer_to_unsigned_long_variable;\n          pointer_to_character_variable = (char *)dcgettext(0,\"%s: casize\\'t ochar_ptresize string_var %s\\size\",5);\n          file_ptrrisizetf(_stderr,pointer_to_character_variable,undefined8_variable,undefined8_variable);\n          FUN_0010315d();\n        }\n        else {\n          *double_pointer_to_character = pointer_to_character_variable;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (DAT_0010d558 != (char **)0x0) {\n      DAT_0010d558[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    pointer_to_unsigned_long_variable = (usizedefisizeed8 *)*char_pointer_pointer2;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; pointer_to_unsigned_long_variable != (usizedefisizeed8 *)0x0; pointer_to_unsigned_long_variable = (usizedefisizeed8 *)pointer_to_unsigned_long_variable[1]) {\n      bool_variable = false;\n      double_pointer_to_character = DAT_0010d558 + 0x1f;\n      for (pointer_to_unsigned_long_variable = (usizedefisizeed8 *)DAT_0010d558[0x1f]; undefined8_variable = DAT_0010d660,\n          pointer_to_unsigned_long_variable != (usizedefisizeed8 *)0x0; pointer_to_unsigned_long_variable = (usizedefisizeed8 *)pointer_to_unsigned_long_variable[0x1e]) {\n        integer_variable = string_var_cmchar_ptr(*pointer_to_unsigned_long_variable,*pointer_to_unsigned_long_variable);\n        if (integer_variable == 0) {\n          bool_variable = true;\n          *double_pointer_to_character = (char *)pointer_to_unsigned_long_variable[0x1e];\n        }\n        else {\n          double_pointer_to_character = (char **)(pointer_to_unsigned_long_variable + 0x1e);\n        }\n      }\n      if (!bool_variable) {\n        undefined8_variable = *pointer_to_unsigned_long_variable;\n        pointer_to_character_variable = (char *)dcgettext(0,\"%s: casize\\'t fisized module string_var %s\\size\",5);\n        file_ptrrisizetf(_stderr,pointer_to_character_variable,undefined8_variable,undefined8_variable);\n        FUN_0010315d();\n      }\n    }\n    break;\n  case 0x1b:\n    pointer_to_unsigned_long_variable = (usizedefisizeed8 *)*char_pointer_pointer2;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; pointer_to_unsigned_long_variable != (usizedefisizeed8 *)0x0; pointer_to_unsigned_long_variable = (usizedefisizeed8 *)pointer_to_unsigned_long_variable[1]) {\n      pointer_to_character_variable = (char *)bfd_ochar_ptresizer(*pointer_to_unsigned_long_variable,\"char_ptrlugisize\");\n      undefined8_variable = DAT_0010d660;\n      double_pointer_to_character = DAT_0010d558;\n      if (pointer_to_character_variable == (char *)0x0) {\n        undefined8_variable = *pointer_to_unsigned_long_variable;\n        pointer_to_character_variable = (char *)dcgettext(0,\"%s: casize\\'t ochar_ptresize string_var %s\\size\",5);\n        file_ptrrisizetf(_stderr,pointer_to_character_variable,undefined8_variable,undefined8_variable);\n        FUN_0010315d();\n      }\n      else {\n        *(char **)(pointer_to_character_variable + 0xf0) = DAT_0010d558[0x1f];\n        double_pointer_to_character[0x1f] = pointer_to_character_variable;\n      }\n    }\n    break;\n  case 0x1c:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    pointer_to_character_variable = *DAT_0010d558;\n    DAT_0010d60c = 1;\n    DAT_0010d578 = _stdout;\n    char_pointer_variable = (char *)dcgettext(0,\"Curresizet ochar_ptresize archive is %s\\size\",5);\n    char_ptrrisizetf(char_pointer_variable,pointer_to_character_variable);\n    for (pointer_to_character_variable = DAT_0010d558[0x1f]; pointer_to_character_variable != (char *)0x0; pointer_to_character_variable = *(char **)(pointer_to_character_variable + 0xf0))\n    {\n      FUN_00103ddc(pointer_to_character_variable,0);\n    }\n    break;\n  case 0x1d:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    if (0 < _DAT_0010d2d0) {\n      *(uisizet *)((losizeg)DAT_0010d558 + 0x44) = *(uisizet *)((losizeg)DAT_0010d558 + 0x44) | 0x2000;\n    }\n    DAT_0010d568 = duchar_ptr(DAT_0010d568);\n    bfd_close(double_pointer_to_character);\n    pointer_to_character_variable = DAT_0010d570;\n    integer_variable = stat(DAT_0010d570,&local_stat_variable);\n    if ((integer_variable != 0) && (DAT_0010d558 = (char **)bfd_ochar_ptresizew(pointer_to_character_variable,0), DAT_0010d558 != (char **)0x0)\n       ) {\n      bfd_set_format(DAT_0010d558,2);\n      bfd_close(DAT_0010d558);\n    }\n    FUN_00105bc0(DAT_0010d560,DAT_0010d570,DAT_0010d568);\n    DAT_0010d558 = (char **)0x0;\n    free(DAT_0010d560);\n    free(DAT_0010d570);\n    break;\n  case 0x1e:\n    FUN_00103c60(*char_pointer_pointer2,0);\n    break;\n  case 0x1f:\n    FUN_00103c60(*char_pointer_pointer2,1);\n    break;\n  case 0x20:\n    pointer_to_character_variable = *char_pointer_pointer2;\n    if (DAT_0010d558 == (char **)0x0) {\n      pointer_to_character_variable = \"%s: sizeo outchar_ptrut archive schar_ptrecified yet\\size\";\n      goto LAB_00104b62;\n    }\n    long_variable = FUN_00105300(char_pointer_pointer2[-1],0);\n    if (long_variable != 0) {\n      FUN_001032a8(long_variable,FUN_0010312d,pointer_to_character_variable);\n    }\n    break;\n  case 0x21:\n    pointer_to_character_variable = *char_pointer_pointer2;\n    char_pointer_variable = char_pointer_pointer2[-1];\n    undefined8_variable = FUN_00105300(char_pointer_pointer2[-2],0);\n    if (pointer_to_character_variable == (char *)0x0) {\n      DAT_0010d578 = _stdout;\n    }\n    else {\n      DAT_0010d578 = fochar_ptresize(pointer_to_character_variable,\"w\");\n      if (DAT_0010d578 != (FILE *)0x0) {\n        FUN_001032a8(undefined8_variable,FUN_00103ddc,char_pointer_variable);\n        bfd_close(undefined8_variable);\n        fclose(DAT_0010d578);\n        break;\n      }\n      DAT_0010d578 = _stdout;\n      pointer_to_character_16 = (char *)dcgettext(0,\"Casize\\'t ochar_ptresize string_var %s\\size\",5);\n      file_ptrrisizetf(_stderr,pointer_to_character_16,pointer_to_character_variable);\n    }\n    FUN_001032a8(undefined8_variable,FUN_00103ddc,char_pointer_variable);\n    bfd_close(undefined8_variable);\n    break;\n  case 0x22:\n    char_pointer_pointer3 = (char **)*char_pointer_pointer2;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    char_pointer_pointer3 = (char **)0x0;\n    break;\n  case 0x24:\n    char_pointer_pointer3 = (char **)char_pointer_pointer2[-1];\n    break;\n  case 0x26:\n    char_pointer_pointer3 = (char **)malloc(0x10);\n    pointer_to_character_variable = char_pointer_pointer2[-2];\n    *char_pointer_pointer3 = *char_pointer_pointer2;\n    char_pointer_pointer3[1] = pointer_to_character_variable;\n    break;\n  case 0x2a:\n    DAT_0010d60c = (uisizet)(DAT_0010d60c == 0);\n  }\n  long_variable = (losizeg)character_variable;\n  local_pointer_to_character_variable = local_pointer_to_character_variable + -long_variable;\n  char_pointer_pointer2[1 - long_variable] = (char *)char_pointer_pointer3;\n  char_pointer_pointer2 = char_pointer_pointer2 + (1 - long_variable);\n  uint_variable = (isizet)(char)(&DAT_00109f80)[(char)(&DAT_00109fa0)[integer_variable] + -0x18] + (isizet)*local_pointer_to_character_variable;\n  if ((uint_variable < 0x23) && (*local_pointer_to_character_variable == (&DAT_0010a0a0)[(isizet)uint_variable])) {\n    long_variable = (losizeg)(char)(&DAT_0010a060)[(isizet)uint_variable];\n  }\n  else {\n    long_variable = (losizeg)(char)(&DAT_00109f60)[(char)(&DAT_00109fa0)[integer_variable] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  integer_variable = ((isizet)byte_pointer4 - (isizet)DAT_0010d5c8) + -1;\n  *byte_pointer4 = DAT_0010d588;\n  double_pointer = (losizeg **)(DAT_0010d5a8 + long_variable * 8);\n  file_pointer = (FILE **)*double_pointer;\n  if (*(isizet *)(file_pointer + 7) == 0) {\n    DAT_0010d598 = *(uisizet *)((losizeg)file_pointer + 0x1c);\n    *(usizedefisizeed4 *)(file_pointer + 7) = 1;\n    *file_pointer = DAT_0010d590;\n  }\n  byte_pointer = DAT_0010d5b0;\n  file_pointer = file_pointer[1];\n  undefined_variable._8_8_ = file_pointer;\n  undefined_variable._0_8_ = file_pointer;\n  if ((byte *)((losizeg)&file_pointer->_flags + (losizeg)(isizet)DAT_0010d598) < DAT_0010d5b0) {\n    if ((byte *)((losizeg)&file_pointer->_flags + (losizeg)(isizet)DAT_0010d598 + 1) < DAT_0010d5b0) {\n      undefined_variable = FUN_001033b0();\n    }\n    if (*(isizet *)(undefined_variable._0_8_ + 0x34) != 0) {\n      uint_variable = (isizet)((losizeg)byte_pointer - (losizeg)byte_pointer2) - 1;\n      for (long_variable = 0; (isizet)long_variable < (isizet)uint_variable; long_variable = long_variable + 1) {\n        *(byte *)(undefined_variable._8_8_ + long_variable) = byte_pointer2[long_variable];\n      }\n      pointer_to_long_12 = *double_pointer;\n      if (*(isizet *)(pointer_to_long_12 + 7) == 2) {\n        DAT_0010d598 = 0;\n        *(usizedefisizeed4 *)((losizeg)pointer_to_long_12 + 0x1c) = 0;\nLAB_0010475e:\n        file_pointer = DAT_0010d590;\n        if (uint_variable == 0) {\n          if ((DAT_0010d5a8 == 0) || (*(losizeg *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n            FUN_00103df9();\n            pointer_to_unsigned_long_variable = (usizedefisizeed8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n            undefined8_variable = FUN_001033d6(file_pointer);\n            *pointer_to_unsigned_long_variable = undefined8_variable;\n          }\n          long_variable = DAT_0010d5a8;\n          if (DAT_0010d5a8 != 0) {\n            long_variable = *(losizeg *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          }\n          integer_variable = 1;\n          FUN_001031cf(long_variable);\n          FUN_001030ed();\n        }\n        else {\n          integer_variable = 2;\n          *(usizedefisizeed4 *)(*(losizeg *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          pointer_to_long = *double_pointer;\n          uint_variable2 = ~uint_variable + *(isizet *)(pointer_to_long_12 + 3);\n          if (0 < (isizet)uint_variable2) break;\n          uint_variable2 = (isizet)DAT_0010d5b0 - (isizet)(void *)pointer_to_long[1];\n          if (*(isizet *)(pointer_to_long + 4) == 0) {\n            pointer_to_long[1] = 0;\nLAB_00104626:\n            FUN_001033b0();\n            break;\n          }\n          integer_variable = *(isizet *)(pointer_to_long + 3);\n          int_variable = integer_variable;\n          if (integer_variable < 1) {\n            int_variable = integer_variable / 8;\n          }\n          *(isizet *)(pointer_to_long + 3) = int_variable + integer_variable;\n          void_pointer = realloc((void *)pointer_to_long[1],(losizeg)(int_variable + integer_variable + 2));\n          pointer_to_long[1] = (losizeg)void_pointer;\n          if (void_pointer == (void *)0x0) goto LAB_00104626;\n          DAT_0010d5b0 = (byte *)((losizeg)void_pointer + (losizeg)(isizet)uint_variable2);\n          pointer_to_long_12 = *double_pointer;\n        }\n        if (0x2000 < (isizet)uint_variable2) {\n          uint_variable2 = 0x2000;\n        }\n        ulong_variable2 = (ulosizeg)uint_variable2;\n        if (*(isizet *)((losizeg)pointer_to_long + 0x24) == 0) {\n          integer_pointer = __errsizeo_locatiosize();\n          ulong_variable2 = (ulosizeg)(isizet)uint_variable2;\n          ulong_variable = (ulosizeg)(isizet)uint_variable;\n          *integer_pointer = 0;\n          goto LAB_001046c7;\n        }\n        ulong_variable = 0;\n        integer_pointer = (isizet *)(losizeg)(isizet)uint_variable;\n        do {\n          integer_variable = getc(DAT_0010d590);\n          unsigned_int_variable = (uisizet)ulong_variable;\n          if (integer_variable == -1) {\n            integer_variable = ferror(DAT_0010d590);\n            uint_variable2 = unsigned_int_variable;\n            if (integer_variable != 0) {\n              do {\n                pointer_to_character_variable = \"isizechar_ptrut isize flex scasizesizeer failed\";\n                FUN_001033b0();\n                do {\n                  *integer_pointer = 0;\n                  clearerr((FILE *)pointer_to_character_variable);\nLAB_001046c7:\n                  size_t_variable = fread((void *)(*(losizeg *)(*(losizeg *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)\n                                         + ulong_variable),1,ulong_variable2,DAT_0010d590);\n                  pointer_to_character_variable = (char *)DAT_0010d590;\n                  DAT_0010d598 = (uisizet)size_t_variable;\n                  uint_variable2 = DAT_0010d598;\n                  if ((DAT_0010d598 != 0) ||\n                     (integer_variable = ferror(DAT_0010d590), uint_variable2 = DAT_0010d598, integer_variable == 0))\n                  goto LAB_00104738;\n                } while (*integer_pointer == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (integer_variable == 10) {\n            *(usizedefisizeed *)\n             ((losizeg)(isizet *)(losizeg)(isizet)uint_variable +\n             (losizeg)(isizet)unsigned_int_variable + *(losizeg *)(*(losizeg *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)) = 10;\n            uint_variable2 = unsigned_int_variable + 1;\n            break;\n          }\n          ulong_variable = (ulosizeg)(unsigned_int_variable + 1);\n          *(char *)(*(losizeg *)(*(losizeg *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8) + (losizeg)integer_pointer) =\n               (char)integer_variable;\n          integer_pointer = (isizet *)((losizeg)integer_pointer + 1);\n        } while (uint_variable2 != unsigned_int_variable + 1);\nLAB_00104738:\n        DAT_0010d598 = uint_variable2;\n        uint_variable2 = DAT_0010d598;\n        integer_variable = 0;\n        *(uisizet *)(*(losizeg *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x1c) = DAT_0010d598;\n        if (uint_variable2 == 0) goto LAB_0010475e;\n      }\n      pointer_to_long_12 = (losizeg *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n      long_variable = *pointer_to_long_12;\n      uint_variable = uint_variable + DAT_0010d598;\n      if (*(isizet *)(long_variable + 0x18) < (isizet)uint_variable) {\n        int_variable = ((isizet)DAT_0010d598 >> 1) + uint_variable;\n        void_pointer = realloc(*(void **)(long_variable + 8),(losizeg)int_variable);\n        *(void **)(long_variable + 8) = void_pointer;\n        undefined_variable._8_8_ = pointer_to_long_12;\n        undefined_variable._0_8_ = *pointer_to_long_12;\n        if (*(losizeg *)(*pointer_to_long_12 + 8) == 0) {\n          undefined_variable = FUN_001033b0();\n        }\n        pointer_to_long_12 = undefined_variable._8_8_;\n        *(isizet *)(undefined_variable._0_8_ + 0x18) = int_variable + -2;\n      }\n      DAT_0010d598 = uint_variable;\n      *(usizedefisizeed *)(*(losizeg *)(*pointer_to_long_12 + 8) + (losizeg)(isizet)uint_variable) = 0;\n      *(usizedefisizeed *)(*(losizeg *)(*pointer_to_long_12 + 8) + 1 + (losizeg)(isizet)uint_variable) = 0;\n      byte_pointer2 = *(byte **)(*pointer_to_long_12 + 8);\n      DAT_0010d5c8 = byte_pointer2;\n      if (integer_variable == 1) goto LAB_001048a4;\n      if (integer_variable == 2) goto LAB_001048ca;\n      byte_pointer4 = byte_pointer2 + integer_variable;\n      DAT_0010d5b0 = byte_pointer4;\n      uint_variable = FUN_0010300e();\n      goto LAB_001040d4;\n    }\n    if ((losizeg)byte_pointer - (losizeg)byte_pointer2 == 1) goto LAB_001048a4;\nLAB_001048ca:\n    byte_pointer4 = (byte *)((losizeg)(isizet)DAT_0010d598 +\n                      *(losizeg *)(*(losizeg *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8));\n    DAT_0010d5b0 = byte_pointer4;\n    ulong_variable = FUN_0010300e();\n    byte_pointer3 = DAT_0010d5c8;\n    goto LAB_0010419f;\n  }\n  byte_pointer4 = byte_pointer2 + integer_variable;\n  DAT_0010d5b0 = byte_pointer4;\n  ulong_variable = FUN_0010300e();\n  if (*(short *)(&DAT_0010a980 + (losizeg)(isizet)(uisizet)ulong_variable * 2) != 0) {\n    DAT_0010d5b8 = byte_pointer4;\n    DAT_0010d5c0 = (uisizet)ulong_variable;\n  }\n  ulong_variable2 = ulong_variable & 0xffffffff;\n  while( true ) {\n    integer_variable = (isizet)ulong_variable2;\n    if (integer_variable == *(short *)(&DAT_0010a440 +\n                           (losizeg)(*(short *)(&DAT_0010a640 + (losizeg)integer_variable * 2) + 1) * 2)) break;\n    ulong_variable2 = (ulosizeg)(uisizet)(isizet)*(short *)(&DAT_0010a800 + (losizeg)integer_variable * 2);\n  }\n  uint_variable = (uisizet)*(short *)(&DAT_0010a240 +\n                           (losizeg)(*(short *)(&DAT_0010a640 + (losizeg)integer_variable * 2) + 1) * 2);\n  byte_pointer3 = byte_pointer2;\n  if ((*(short *)(&DAT_0010a240 + (losizeg)(*(short *)(&DAT_0010a640 + (losizeg)integer_variable * 2) + 1) * 2) == 0)\n     || (uint_variable == 0xb0)) goto LAB_0010419f;\n  byte_pointer4 = byte_pointer4 + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  DAT_0010d5b0 = DAT_0010d5c8;\n  integer_variable = (isizet)(DAT_0010d5d0 - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *byte_pointer4 = DAT_0010d588;\n  ulong_variable = (ulosizeg)DAT_0010d5c0;\n  byte_pointer4 = DAT_0010d5b8;\n  goto LAB_0010419f;\nLAB_00105227:\n  char_pointer_pointer2 = char_pointer_pointer2 + 1;\n  local_integer_variable = 3;\n  *char_pointer_pointer2 = DAT_0010d548;\nLAB_001049d1:\n  local_pointer_to_character_variable = local_pointer_to_character_variable + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "current_name": "decompile_and_improve_00103e95",
            "entrypoint": "0x00103e95",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103e95": "decompile_and_improve_00103e95",
                "auVar40": "undefined_variable",
                "auVar41": "undefined_variable",
                "bVar28": "bool_variable",
                "bVar30": "byte_variable",
                "bVar39": "byte_variable",
                "cVar2": "character_variable",
                "file": "string_var",
                "filename": "string_var",
                "fp": "file_ptr",
                "iVar25": "int_variable",
                "iVar37": "integer_variable",
                "iVar8": "integer_variable",
                "iVar9": "integer_variable",
                "lVar17": "long_variable",
                "lVar18": "long_variable",
                "lVar21": "long_variable",
                "lVar31": "long_variable",
                "local_678": "local_character_array_678",
                "local_740": "local_character_array",
                "local_7d0": "local_stat_variable",
                "local_7f8": "local_pointer_to_byte_7f8",
                "local_7fc": "local_unsigned_integer_variable_7fc",
                "local_800": "local_integer_variable",
                "local_810": "local_double_pointer_to_character",
                "local_818": "local_long_variable",
                "local_820": "local_pointer_to_character",
                "local_828": "local_pointer_to_character_variable",
                "n": "size",
                "p": "char_ptr",
                "pFVar4": "file_pointer",
                "pbVar32": "byte_pointer2",
                "pbVar33": "byte_pointer3",
                "pbVar35": "byte_pointer4",
                "pbVar7": "byte_pointer",
                "pcVar10": "pointer_to_character_variable",
                "pcVar15": "char_pointer_variable",
                "pcVar16": "pointer_to_character_16",
                "pcVar27": "pointer_to_character_variable27",
                "pcVar29": "pointer_to_character_variable29",
                "piVar34": "integer_pointer",
                "plVar12": "pointer_to_long_12",
                "plVar5": "pointer_to_long",
                "ppFVar3": "file_pointer",
                "ppcVar27": "double_pointer_to_character",
                "ppcVar29": "char_pointer_pointer2",
                "ppcVar38": "char_pointer_pointer3",
                "pplVar1": "double_pointer",
                "puVar22": "pointer_to_unsigned_long_variable",
                "puVar23": "pointer_to_unsigned_long_variable",
                "pvVar14": "void_pointer",
                "ret": "int_var",
                "sVar13": "size_t_variable",
                "uVar11": "undefined8_variable",
                "uVar19": "ulong_variable",
                "uVar20": "uint_variable",
                "uVar24": "uint_variable2",
                "uVar26": "ulong_variable2",
                "uVar36": "unsigned_int_variable",
                "uVar6": "undefined8_variable"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001052a0": {
            "additional_data": {
                "FUN_001052a0": {
                    "1": "get_file_stat",
                    "2": "check_file",
                    "3": "get_file_size",
                    "7": "get_file_info",
                    "8": "get_file_information"
                },
                "FUN_00107920": {
                    "2": "print_warning"
                },
                "dcgettext": {
                    "1": "get_locale_message"
                },
                "iVar1": {
                    "15": "status",
                    "8": "stat_result"
                },
                "param_1": {
                    "11": "filename",
                    "20": "file_path"
                },
                "pcVar4": {
                    "1": "error_msg",
                    "13": "error_reason",
                    "6": "error_string",
                    "8": "error_message"
                },
                "piVar2": {
                    "1": "err_num_ptr",
                    "12": "errno_ptr",
                    "4": "error_ptr",
                    "9": "errno_location"
                },
                "sStack_a8": {
                    "1": "stats",
                    "16": "file_stat",
                    "3": "file_info",
                    "9": "file_stats"
                },
                "sStack_a8.st_mode": {
                    "1": "file_mode"
                },
                "sStack_a8.st_size": {
                    "1": "file_size"
                },
                "stat": {
                    "1": "get_stats",
                    "2": "get_file_status"
                },
                "uVar3": {
                    "1": "translated_message",
                    "16": "error_message",
                    "4": "warning_message",
                    "6": "message"
                }
            },
            "called": [
                "FUN_00107920",
                "stat",
                "dcgettext",
                "FUN_001025a0"
            ],
            "calling": [
                "FUN_00107650",
                "FUN_00105db0"
            ],
            "code": "\nlong get_file_information_001052a0(char *file_path)\n\n{\n  int status;\n  int *errno_ptr;\n  undefined8 error_message;\n  char *error_reason;\n  get_file_status file_stat;\n  \n  if (file_path != (char *)0x0) {\n    status = get_file_status(file_path,&file_stat);\n    if (status < 0) {\n      errno_ptr = __errno_location();\n      if (*errno_ptr == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        FUN_00107920(error_message,file_path);\n      }\n      else {\n        error_reason = strerror(*errno_ptr);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00107920(error_message,file_path,error_reason);\n      }\n    }\n    else if ((file_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      FUN_00107920(error_message,file_path);\n    }\n    else if ((file_mode & 0xf000) == 0x8000) {\n      if (-1 < file_size) {\n        return file_size;\n      }\n      error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      FUN_00107920(error_message,file_path);\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      FUN_00107920(error_message,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "current_name": "get_file_information_001052a0",
            "entrypoint": "0x001052a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001052a0": "get_file_information_001052a0",
                "dcgettext": "get_locale_message",
                "iVar1": "status",
                "param_1": "file_path",
                "pcVar4": "error_reason",
                "piVar2": "errno_ptr",
                "sStack_a8": "file_stat",
                "sStack_a8.st_mode": "file_mode",
                "sStack_a8.st_size": "file_size",
                "stat": "get_file_status",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105300": {
            "additional_data": {
                "FUN_00105300": {
                    "1": "convert_archive_to_regular",
                    "2": "convert_library",
                    "3": "extract_and_convert_archived_files",
                    "5": "extract_archived_files",
                    "6": "convert_library_format"
                },
                "bVar3": {
                    "1": "bit_flag",
                    "17": "is_thin_library",
                    "3": "is_thin",
                    "5": "is_thin_format"
                },
                "cVar4": {
                    "1": "char_flag",
                    "2": "check_result",
                    "4": "conversion_error",
                    "5": "result",
                    "8": "format_check_result"
                },
                "iVar5": {
                    "1": "stat_check_result",
                    "12": "stat_result",
                    "5": "result",
                    "9": "status"
                },
                "lVar9": {
                    "1": "archive_file",
                    "10": "archived_file",
                    "2": "next_file",
                    "3": "next_archived_file",
                    "5": "file_offset"
                },
                "local_a8": {
                    "1": "file_stat_data",
                    "5": "file_status",
                    "7": "file_info",
                    "8": "file_stat"
                },
                "local_b0": {
                    "1": "conversion_error",
                    "2": "error_buffer"
                },
                "param_1": {
                    "1": "archive_file",
                    "2": "archive_filename",
                    "3": "input_file_name",
                    "4": "file_path",
                    "5": "filename"
                },
                "param_2": {
                    "1": "output_handle",
                    "2": "bfd_handle",
                    "3": "output_files",
                    "4": "output_file",
                    "9": "archived_files"
                },
                "pcVar2": {
                    "1": "data",
                    "2": "error_msg",
                    "5": "program_name",
                    "7": "error_message",
                    "9": "plugin_name"
                },
                "piVar8": {
                    "1": "err_num_ptr",
                    "10": "errno_location",
                    "2": "error_location",
                    "3": "error_code",
                    "6": "errno_ptr"
                },
                "plVar1": {
                    "1": "archive_file",
                    "2": "current_file",
                    "4": "archived_file_list",
                    "6": "archived_file_ptr"
                },
                "puVar10": {
                    "1": "return_ptr",
                    "2": "conversion_result",
                    "5": "result"
                },
                "uVar6": {
                    "1": "gettext_error",
                    "13": "error_message",
                    "2": "message",
                    "5": "error_string"
                },
                "uVar7": {
                    "1": "translation_context",
                    "2": "format_message",
                    "4": "message",
                    "7": "error_message"
                }
            },
            "called": [
                "xexit",
                "bfd_close",
                "FUN_00107920",
                "FUN_00102710",
                "stat",
                "FUN_00107c10",
                "FUN_0010315d",
                "bfd_set_error",
                "FUN_00103bd1",
                "FUN_00107690",
                "bfd_openw",
                "bfd_set_format",
                "bfd_get_error",
                "bfd_check_format_matches",
                "bfd_openr_next_archived_file",
                "fprintf",
                "dcgettext",
                "bfd_openr",
                "perror",
                "FUN_00107c20",
                "__errno_location"
            ],
            "calling": [
                "FUN_00107650",
                "FUN_00103e95",
                "FUN_00105db0"
            ],
            "code": "\n\n\nundefined8 * convert_library_format_00105300(char *filename,undefined8 *archived_files)\n\n{\n  long *archived_file_ptr;\n  char *plugin_name;\n  byte is_thin_library;\n  char format_check_result;\n  int stat_result;\n  undefined8 error_message;\n  undefined8 error_message;\n  int *errno_location;\n  long archived_file;\n  undefined8 *result;\n  undefined8 error_buffer;\n  stat file_stats;\n  \n  bfd_set_error(0);\n  if (DAT_0010d5f0 == (char *)0x0) {\n    DAT_0010d5f0 = \"plugin\";\n  }\n  stat_result = stat(filename,&file_stats);\n  plugin_name = DAT_0010d618;\n  if (stat_result == 0) goto LAB_001053be;\n  errno_location = __errno_location();\n  if (*errno_location == 2) {\n    if (DAT_0010d604 == '\\0') {\n      fprintf(_stderr,\"%s: \",DAT_0010d660);\n      perror(filename);\n      FUN_0010315d();\n      return (undefined8 *)0x0;\n    }\n    if ((DAT_0010d5f0 == (char *)0x0) && (archived_files != (undefined8 *)0x0)) {\n      result = (undefined8 *)FUN_00102710();\n      return result;\n    }\n    archived_files = (undefined8 *)bfd_openw(filename,DAT_0010d5f0);\n    if (((archived_files != (undefined8 *)0x0) && (format_check_result = bfd_set_format(archived_files,2), format_check_result != '\\0')) &&\n       (format_check_result = bfd_close(archived_files), format_check_result != '\\0')) {\n      plugin_name = filename;\n      if (_DAT_0010d610 == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  FUN_00107c10(filename);\n  do {\n    is_thin_library = *(byte *)((long)archived_files + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (is_thin_library != 0) {\n        error_message = *archived_files;\n        error_message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        FUN_00107690(error_message,error_message);\n        goto LAB_00102812;\n      }\n    }\n    else if (is_thin_library == 0) {\n      error_message = *archived_files;\n      error_message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      FUN_00107690(error_message,error_message);\nLAB_001027cb:\n      FUN_00107c20(filename);\n      stat_result = bfd_get_error();\n      if (stat_result == 0xd) {\nLAB_00102812:\n        FUN_00103bd1(error_buffer);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      archived_file_ptr = archived_files + 0x1e;\n      for (archived_file = bfd_openr_next_archived_file(archived_files,0); archived_file != 0;\n          archived_file = bfd_openr_next_archived_file(archived_files,archived_file)) {\n        *archived_file_ptr = archived_file;\n        archived_file_ptr = (long *)(archived_file + 0xf0);\n      }\n      *archived_file_ptr = 0;\n      stat_result = bfd_get_error();\n      if (stat_result == 9) {\n        return archived_files;\n      }\n      do {\n        FUN_00107c10(filename);\nLAB_00102826:\n        error_message = dcgettext(0,\"creating %s\",5);\n        FUN_00107920(error_message,filename);\n        plugin_name = filename;\nLAB_001053be:\n        DAT_0010d618 = plugin_name;\n        archived_files = (undefined8 *)bfd_openr(filename,DAT_0010d5f0);\n      } while (archived_files == (undefined8 *)0x0);\n      format_check_result = bfd_check_format_matches(archived_files,2,&error_buffer);\n      if (format_check_result == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (archived_file = bfd_openr_next_archived_file(archived_files,0), archived_file == 0));\n  } while( true );\n}\n\n",
            "current_name": "convert_library_format_00105300",
            "entrypoint": "0x00105300",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105300": "convert_library_format_00105300",
                "bVar3": "is_thin_library",
                "cVar4": "format_check_result",
                "iVar5": "stat_result",
                "lVar9": "archived_file",
                "local_a8": "file_stats",
                "local_b0": "error_buffer",
                "param_1": "filename",
                "param_2": "archived_files",
                "pcVar2": "plugin_name",
                "piVar8": "errno_location",
                "plVar1": "archived_file_ptr",
                "puVar10": "result",
                "uVar6": "error_message",
                "uVar7": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105480": {
            "additional_data": {
                "DAT_0010d634": {
                    "1": "some_flag"
                },
                "FUN_0010285f": {
                    "1": "process_entry_data"
                },
                "FUN_00105480": {
                    "1": "process_archived_entries",
                    "2": "process_archives",
                    "21": "process_entries",
                    "5": "process_archive_entries"
                },
                "FUN_00105830": {
                    "1": "compare_files",
                    "2": "get_filename"
                },
                "_DAT_0010d630": {
                    "1": "threshold"
                },
                "__format": {
                    "1": "error_format_string",
                    "10": "format_string",
                    "2": "error_msg",
                    "5": "error_message"
                },
                "_dat_0010d630": {
                    "1": "threshold"
                },
                "dat_0010d634": {
                    "1": "condition"
                },
                "filename_cmp": {
                    "1": "filename_comparison",
                    "3": "compare_filenames"
                },
                "iVar1": {
                    "1": "result",
                    "3": "cmp_result",
                    "8": "comparison_result"
                },
                "lVar2": {
                    "1": "param_2",
                    "25": "current_entry",
                    "3": "current_entry_ptr"
                },
                "local_c8": {
                    "1": "temp_buffer",
                    "2": "local_buffer",
                    "24": "buffer",
                    "3": "temporary_buffer"
                },
                "local_cc": {
                    "1": "callback_count",
                    "15": "counter",
                    "2": "entry_counter",
                    "4": "entry_count",
                    "7": "count"
                },
                "param_1": {
                    "1": "entries_base",
                    "2": "archive_pointer",
                    "3": "entry_table",
                    "4": "archive_ptr",
                    "5": "archive",
                    "9": "entry_list"
                },
                "param_2": {
                    "1": "extract_function",
                    "13": "callback",
                    "2": "callback_function",
                    "4": "process_entry"
                },
                "param_3": {
                    "1": "filenames_array",
                    "2": "entry_names",
                    "3": "entry_list",
                    "5": "file_list",
                    "8": "filenames"
                },
                "param_4": {
                    "1": "num_archives",
                    "10": "num_entries",
                    "13": "num_files",
                    "2": "num_filenames",
                    "3": "file_count"
                },
                "plVar3": {
                    "1": "temp_var_ptr",
                    "2": "tmp_entry",
                    "3": "temp_entry",
                    "7": "next_entry",
                    "8": "fallback_entry"
                },
                "plVar5": {
                    "1": "entry_list",
                    "10": "entry_ptr",
                    "2": "file_entry",
                    "3": "entry_pointer",
                    "8": "entry"
                },
                "uVar4": {
                    "1": "temp_var",
                    "15": "result",
                    "2": "comparison_result2",
                    "6": "comparison_result"
                }
            },
            "called": [
                "FUN_0010285f",
                "FUN_00105830",
                "filename_cmp"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid process_entries_00105480(long entry_list,code *callback,undefined8 *filenames,int num_files)\n\n{\n  int comparison_result;\n  char *format_string;\n  long current_entry;\n  long *fallback_entry;\n  undefined8 result;\n  long *entry_ptr;\n  int counter;\n  undefined buffer [152];\n  \n  current_entry = *(long *)(entry_list + 0xf0);\n  if (num_files == 0) {\n    for (; current_entry != 0; current_entry = *(long *)(current_entry + 0xf0)) {\n      (*callback)(current_entry);\n    }\n  }\n  else {\n    for (; current_entry != 0; current_entry = *(long *)(current_entry + 0xf0)) {\n      *(undefined4 *)(current_entry + 0xac) = 0;\n    }\n    do {\n      entry_ptr = *(long **)(entry_list + 0xf0);\n      counter = 0;\n      for (; entry_ptr != (long *)0x0; entry_ptr = (long *)entry_ptr[0x1e]) {\n        if (*(int *)((long)entry_ptr + 0xac) == 0) {\n          current_entry = *entry_ptr;\n          if (current_entry == 0) {\n            fallback_entry = (long *)entry_ptr[0x1d];\n            if ((long *)entry_ptr[0x1d] == (long *)0x0) {\n              fallback_entry = entry_ptr;\n            }\n            (**(code **)(fallback_entry[1] + 0x1e8))(entry_ptr,buffer);\n          }\n          else if (((*(byte *)(entry_list + 0x49) & 0x10) == 0) ||\n                  (current_entry = FUN_00105830(current_entry,entry_list), current_entry != 0)) {\n            result = FUN_00105830(*filenames,entry_list);\n            comparison_result = filename_cmp(result,current_entry);\n            if ((comparison_result == 0) &&\n               ((DAT_0010d634 == '\\0' || (counter = counter + 1, counter == _DAT_0010d630)))) {\n              (*callback)();\n              *(undefined4 *)((long)entry_ptr + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      result = *filenames;\n      format_string = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(_stderr,format_string,result);\nLAB_0010553e:\n      filenames = filenames + 1;\n      num_files = num_files + -1;\n    } while (num_files != 0);\n  }\n  return;\n}\n\n",
            "current_name": "process_entries_00105480",
            "entrypoint": "0x00105480",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105480": "process_entries_00105480",
                "__format": "format_string",
                "filename_cmp": "compare_filenames",
                "iVar1": "comparison_result",
                "lVar2": "current_entry",
                "local_c8": "buffer",
                "local_cc": "counter",
                "param_1": "entry_list",
                "param_2": "callback",
                "param_3": "filenames",
                "param_4": "num_files",
                "plVar3": "fallback_entry",
                "plVar5": "entry_ptr",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105570": {
            "additional_data": {
                "DAT_0010d5f0": {
                    "1": "constant_value4"
                },
                "DAT_0010d5f8": {
                    "1": "constant_value3"
                },
                "DAT_0010d5f9": {
                    "1": "constant_value6"
                },
                "DAT_0010d60c": {
                    "1": "constant_value2"
                },
                "DAT_0010d618": {
                    "1": "some_global_var"
                },
                "DAT_0010d620": {
                    "1": "constant_value1"
                },
                "DAT_0010d638": {
                    "1": "constant_value5"
                },
                "DAT_0010d640": {
                    "1": "constant_value7"
                },
                "DAT_0010d644": {
                    "1": "constant_value8"
                },
                "DCGETTEXT_LIBDEP": {
                    "1": "libdep"
                },
                "DCGETTEXT_MAGIC": {
                    "1": "magic_number"
                },
                "FUN_00105570": {
                    "8": "process_files"
                },
                "__s": {
                    "1": "char_pointer4",
                    "2": "basename_string",
                    "3": "base_name"
                },
                "ambig_state_": {
                    "1": "state"
                },
                "auStack_158": {
                    "1": "temp_buffer",
                    "14": "stack_array",
                    "2": "stack_var",
                    "3": "temp_stack"
                },
                "bVar19": {
                    "1": "do_stat_check",
                    "16": "bool_var",
                    "2": "is_flag_set",
                    "3": "bool_variable"
                },
                "bVar20": {
                    "1": "byte_var",
                    "2": "byte_value_2",
                    "4": "byte_var_2",
                    "9": "byte_var2"
                },
                "bVar3": {
                    "1": "boolean_value",
                    "16": "byte_var",
                    "2": "byte_var_3",
                    "3": "result"
                },
                "iVar4": {
                    "1": "index",
                    "2": "int_var_4",
                    "3": "integer_var",
                    "4": "index_var",
                    "8": "int_var"
                },
                "lStack_100": {
                    "1": "stack_var",
                    "2": "long_stack",
                    "3": "stack_value"
                },
                "lVar11": {
                    "1": "current_path2",
                    "2": "long_var_1",
                    "3": "current_ptr"
                },
                "lVar12": {
                    "1": "temp_path",
                    "2": "long_var_2",
                    "3": "long_var2",
                    "4": "temp_var2"
                },
                "local_15a": {
                    "1": "var_local_15a",
                    "2": "local_var",
                    "5": "local_byte_var"
                },
                "param_1": {
                    "1": "data",
                    "2": "param",
                    "3": "file_manager",
                    "4": "input_param",
                    "6": "arg1"
                },
                "param_2": {
                    "1": "input_value_2",
                    "17": "file_paths",
                    "2": "arg2",
                    "3": "string_array"
                },
                "param_3": {
                    "1": "check_stat",
                    "18": "flag",
                    "2": "arg3"
                },
                "pcVar10": {
                    "1": "char_pointer3",
                    "2": "current_string",
                    "4": "current_file",
                    "5": "current_file_path"
                },
                "pcVar7": {
                    "1": "pointer_char_var_7",
                    "2": "current_path",
                    "3": "current_file",
                    "5": "current_file_path"
                },
                "pcVar8": {
                    "1": "char_ptr2",
                    "2": "base_file"
                },
                "piVar6": {
                    "1": "ptr2",
                    "2": "error_var",
                    "3": "errno_location",
                    "6": "errno_ptr"
                },
                "ppcVar1": {
                    "1": "ptr_ppc_var1",
                    "2": "current_path"
                },
                "ppcVar15": {
                    "1": "ptr2",
                    "2": "current_file",
                    "5": "file_list"
                },
                "ppcVar16": {
                    "1": "temp_array_ptr",
                    "2": "next_file_ptr"
                },
                "ppcVar18": {
                    "1": "file_paths_pointer3",
                    "2": "prev_file_ptr"
                },
                "sStack_c8": {
                    "1": "temp_var16",
                    "2": "stat_data",
                    "4": "stat_var",
                    "5": "stat_structure",
                    "8": "stat_struct"
                },
                "sVar5": {
                    "1": "len",
                    "15": "size_var",
                    "2": "size_var_5"
                },
                "uVar13": {
                    "1": "temp_var",
                    "2": "undefined_var_13",
                    "4": "undefined_var3",
                    "5": "return_value"
                },
                "uVar14": {
                    "1": "temp_var10",
                    "13": "ulong_var",
                    "2": "ulong_var_14",
                    "3": "ulong_variable"
                },
                "uVar17": {
                    "1": "tmp_value",
                    "13": "uint_var",
                    "2": "flag_value",
                    "3": "uint_variable"
                },
                "uVar2": {
                    "1": "undefined_val",
                    "16": "undefined_var",
                    "2": "undefined_var_2",
                    "3": "undefined_value"
                },
                "uVar9": {
                    "1": "temp_var6",
                    "2": "result_var",
                    "4": "undefined_var2"
                }
            },
            "called": [
                "FUN_00102943"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nundefined8 process_files_00105570(long arg1,char **file_paths,char flag)\n\n{\n  char **pointer_ppc_var1;\n  undefined undefined_var;\n  byte byte_var;\n  int int_var;\n  size_t size_var;\n  int *errno_ptr;\n  char *current_file_path;\n  char *base_file;\n  undefined8 undefined_var2;\n  char *current_file_path;\n  char *base_name;\n  long long_var1;\n  long temp_var2;\n  undefined8 return_value;\n  ulong ulong_var;\n  char **file_list;\n  char **pointer_ppc_var16;\n  uint uint_var;\n  char **pointer_ppc_var18;\n  bool bool_var;\n  byte byte_var2;\n  byte local_byte_var;\n  undefined stack_array [88];\n  long last_modified_time;\n  stat stat_struct;\n  \n  byte_var2 = 0;\n  pointer_ppc_var1 = (char **)(arg1 + 0xf0);\n  local_byte_var = 0;\n  if (file_paths == (char **)0x0) {\n    return_value = FUN_00102943();\n    return return_value;\n  }\n  do {\n    current_file_path = *file_paths;\njoined_r0x001055aa:\n    if (current_file_path == (char *)0x0) {\n      if (local_byte_var != 0) {\n        return_value = FUN_001058b0(arg1);\n        return return_value;\n      }\n      DAT_0010d618 = 0;\n      return 0;\n    }\n    file_list = *(char ***)(arg1 + 0xf0);\n    pointer_ppc_var16 = pointer_ppc_var1;\n    if (flag != '\\0') {\nLAB_0010564c:\n      uint_var = DAT_0010d640;\n      if (DAT_0010d640 != 0) goto LAB_001028f5;\n      temp_var2 = *(long *)(arg1 + 0xf0);\n      if (*(long *)(arg1 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        long_var1 = temp_var2;\n        temp_var2 = *(long *)(long_var1 + 0xf0);\n      } while (temp_var2 != 0);\n      pointer_ppc_var16 = (char **)(long_var1 + 0xf0);\n      current_file_path = *file_paths;\n      do {\n        if (DAT_0010d620 != 0) {\n          return_value = FUN_00105830(current_file_path,arg1);\n          int_var = filename_cmp(return_value,\"__.LIBDEP\");\n          if (int_var == 0) {\n            byte_var = FUN_00105ae0(pointer_ppc_var16,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n            local_byte_var = byte_var | local_byte_var;\n            goto LAB_0010577e;\n          }\n          current_file_path = *file_paths;\n        }\n        undefined_var = DAT_0010d5f8;\n        bool_var = DAT_0010d60c != 0;\n        temp_var2 = bfd_openr(current_file_path,DAT_0010d5f0);\n        if (temp_var2 != 0) {\n          file_paths = file_paths + 1;\n          byte_var = FUN_00105af0(pointer_ppc_var16,temp_var2,(uint)bool_var,undefined_var);\n          local_byte_var = local_byte_var | byte_var;\n          current_file_path = *file_paths;\n          goto joined_r0x001055aa;\n        }\n        FUN_00107c10(current_file_path,0);\n        uint_var = (uint)bool_var;\nLAB_001028f5:\n        return_value = DAT_0010d638;\n        if (uint_var == 3) {\n          temp_var2 = *(long *)(arg1 + 0xf0);\n          if (*(long *)(arg1 + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*pointer_ppc_var16 != (undefined8 *)0x0;\n              pointer_ppc_var16 = (char **)(*pointer_ppc_var16 + 0xf0)) {\n            int_var = filename_cmp(*(undefined8 *)*pointer_ppc_var16,return_value);\n            if (int_var == 0) {\n              if (uint_var == 2) {\n                pointer_ppc_var16 = (char **)(*pointer_ppc_var16 + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        current_file_path = *file_paths;\n      } while( true );\n    }\n    pointer_ppc_var18 = pointer_ppc_var1;\n    if (file_list == (char **)0x0) {\n      uint_var = DAT_0010d640;\n      if (DAT_0010d640 == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (DAT_0010d5f9 == '\\0') {\n      current_file_path = (char *)lbasename(*file_list);\n      base_file = current_file_path;\n      if (DAT_0010d5fa != '\\0') {\n        size_var = strlen(current_file_path);\n        ulong_var = (ulong)*(byte *)(*(long *)(arg1 + 8) + 0x1e);\n        if (ulong_var < size_var) {\n          base_file = (char *)xmalloc(ulong_var + 1);\n          temp_var2 = *(long *)(arg1 + 8);\n          current_file_path = base_file;\n          for (ulong_var = (ulong)*(byte *)(temp_var2 + 0x1e); ulong_var != 0; ulong_var = ulong_var - 1) {\n            *current_file_path = *current_file_path;\n            current_file_path = current_file_path + (ulong)byte_var2 * -2 + 1;\n            current_file_path = current_file_path + (ulong)byte_var2 * -2 + 1;\n          }\n          base_file[*(byte *)(temp_var2 + 0x1e)] = '\\0';\n        }\n        current_file_path = *file_paths;\n        current_file_path = base_file;\n        if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      current_file_path = *file_paths;\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n      base_name = (char *)lbasename(current_file_path);\n      if (DAT_0010d5fa != '\\0') {\n        size_var = strlen(base_name);\n        ulong_var = (ulong)*(byte *)(*(long *)(arg1 + 8) + 0x1e);\n        current_file_path = base_name;\n        current_file_path = base_file;\n        if (ulong_var < size_var) {\n          current_file_path = (char *)xmalloc(ulong_var + 1);\n          temp_var2 = *(long *)(arg1 + 8);\n          base_file = current_file_path;\n          for (ulong_var = (ulong)*(byte *)(temp_var2 + 0x1e); ulong_var != 0; ulong_var = ulong_var - 1) {\n            *base_file = *base_name;\n            base_name = base_name + (ulong)byte_var2 * -2 + 1;\n            base_file = base_file + (ulong)byte_var2 * -2 + 1;\n          }\n          current_file_path[*(byte *)(temp_var2 + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      int_var = filename_cmp(base_name,base_file);\n      if (int_var == 0) goto LAB_00102993;\nLAB_00105639:\n      pointer_ppc_var18 = file_list + 0x1e;\n      file_list = (char **)file_list[0x1e];\n      if (file_list == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    current_file_path = *file_paths;\n    current_file_path = *file_list;\nLAB_00102980:\n    int_var = filename_cmp(current_file_path,current_file_path);\n    if (int_var != 0) goto LAB_00105639;\nLAB_00102993:\n    if (file_list[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (_DAT_0010d644 != 0) {\n      int_var = stat(*file_paths,&stat_struct);\n      if (int_var != 0) {\n        errno_ptr = __errno_location();\n        if (*errno_ptr != 2) {\n          FUN_00107c10(*file_paths);\nLAB_00102b7e:\n          current_file_path = *file_list;\n          return_value = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00107690(return_value,current_file_path);\n          free(file_paths);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      pointer_ppc_var16 = (char **)file_list[0x1d];\n      if ((char **)file_list[0x1d] == (char **)0x0) {\n        pointer_ppc_var16 = file_list;\n      }\n      int_var = (**(code **)(pointer_ppc_var16[1] + 0x1e8))(file_list,stack_array);\n      if (int_var != 0) goto LAB_00102b7e;\n      if (stat_struct.st_mtim.tv_sec <= last_modified_time) goto LAB_0010577e;\n    }\n    return_value = FUN_00105870(pointer_ppc_var1,2,*file_list);\n    if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n      current_file_path = *file_paths;\n      bool_var = DAT_0010d60c != 0;\n      temp_var2 = bfd_openr(current_file_path,DAT_0010d5f0);\n      if (temp_var2 == 0) {\n        FUN_00107c10(current_file_path,0);\n        goto LAB_00102b3e;\n      }\n      byte_var = FUN_00103172(return_value,temp_var2,bool_var);\n    }\n    else {\n      undefined_var2 = FUN_00105830(*file_paths,arg1);\n      int_var = filename_cmp(undefined_var2,\"__.LIBDEP\");\n      if (int_var != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      byte_var = FUN_00103172(return_value,DAT_0010d620,DAT_0010d60c != 0);\n    }\n    if (byte_var != 0) {\n      *pointer_ppc_var18 = *(char **)(*pointer_ppc_var18 + 0xf0);\n      local_byte_var = byte_var;\n    }\nLAB_0010577e:\n    file_paths = file_paths + 1;\n  } while( true );\n}\n\n",
            "current_name": "process_files_00105570",
            "entrypoint": "0x00105570",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105570": "process_files_00105570",
                "__s": "base_name",
                "auStack_158": "stack_array",
                "bVar19": "bool_var",
                "bVar20": "byte_var2",
                "bVar3": "byte_var",
                "iVar4": "int_var",
                "lStack_100": "last_modified_time",
                "lVar11": "long_var1",
                "lVar12": "temp_var2",
                "local_15a": "local_byte_var",
                "param_1": "arg1",
                "param_2": "file_paths",
                "param_3": "flag",
                "pcVar10": "current_file_path",
                "pcVar7": "current_file_path",
                "pcVar8": "base_file",
                "piVar6": "errno_ptr",
                "ppcVar1": "pointer_ppc_var1",
                "ppcVar15": "file_list",
                "ppcVar16": "pointer_ppc_var16",
                "ppcVar18": "pointer_ppc_var18",
                "sStack_c8": "stat_struct",
                "sVar5": "size_var",
                "uVar13": "return_value",
                "uVar14": "ulong_var",
                "uVar17": "uint_var",
                "uVar2": "undefined_var",
                "uVar9": "undefined_var2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001057a0": {
            "additional_data": {
                "FUN_001057a0": {
                    "1": "decompose_pathname",
                    "2": "extract_file_path_and_create_temp_file",
                    "3": "extract_file_name",
                    "5": "create_temp_file"
                },
                "auVar8": {
                    "1": "result_data",
                    "12": "return_value",
                    "17": "result"
                },
                "auVar8[16]": {
                    "1": "return_value"
                },
                "bVar7": {
                    "1": "is_slash_present",
                    "2": "loop_counter",
                    "3": "flag"
                },
                "iVar1": {
                    "1": "mkstemp_result",
                    "2": "temp_file_descriptor",
                    "5": "result"
                },
                "lVar3": {
                    "1": "slash_length",
                    "11": "path_length",
                    "2": "prefix_length",
                    "4": "filename_length"
                },
                "lVar4": {
                    "1": "current_char_index",
                    "2": "counter",
                    "5": "i",
                    "7": "loop_counter",
                    "8": "index"
                },
                "lVar5": {
                    "1": "suffix_len",
                    "2": "slash_position",
                    "3": "file_name_length",
                    "4": "last_slash_offset",
                    "7": "last_slash_index"
                },
                "mkstemp": {
                    "1": "create_tempfile",
                    "3": "create_temporary_file",
                    "6": "create_temp_file"
                },
                "param_1": {
                    "1": "pathname",
                    "13": "file_path",
                    "4": "input_path",
                    "8": "path"
                },
                "param_2": {
                    "1": "output_fd",
                    "23": "file_descriptor",
                    "5": "output_file_descriptor"
                },
                "param_3": {
                    "1": "unused_1",
                    "2": "unused_param1",
                    "5": "unused_param",
                    "7": "unused_param_1"
                },
                "param_4": {
                    "1": "unused_param",
                    "2": "data",
                    "8": "unused_param_2"
                },
                "pcVar2": {
                    "1": "last_occurrence",
                    "18": "last_slash",
                    "2": "last_forward_slash",
                    "3": "filename"
                },
                "pcVar6": {
                    "1": "filename_copy",
                    "2": "new_filename",
                    "3": "allocated_path",
                    "4": "temp_file_path",
                    "5": "new_file_path",
                    "8": "new_path"
                },
                "std_::strrchr": {
                    "1": "find_last_slash_in_string"
                },
                "strrchr": {
                    "1": "find_last_slash_in_path",
                    "2": "find_last_forward_slash",
                    "7": "find_last_slash"
                },
                "xmalloc": {
                    "12": "allocate_memory"
                }
            },
            "called": [
                "strrchr",
                "FUN_00102ba1",
                "xmalloc",
                "mkstemp"
            ],
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "code": "\nundefined  [16] create_temp_file_001057a0(char *file_path,int *file_descriptor,undefined8 unused_param_1,undefined8 unused_param_2)\n\n{\n  int result;\n  char *last_slash;\n  long path_length;\n  long index;\n  long last_slash_index;\n  char *new_path;\n  byte increment;\n  undefined result [16];\n  \n  increment = 0;\n  last_slash = strrchr(file_path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    path_length = 0;\n  }\n  else {\n    last_slash_index = (long)last_slash - (long)file_path;\n    last_slash = (char *)xmalloc(last_slash_index + 0xb);\n    path_length = last_slash_index + 1;\n    new_path = last_slash;\n    for (index = last_slash_index; index != 0; index = index + -1) {\n      *new_path = *file_path;\n      file_path = file_path + (ulong)increment * -2 + 1;\n      new_path = new_path + (ulong)increment * -2 + 1;\n    }\n    last_slash[last_slash_index] = '/';\n  }\n  *(undefined8 *)(last_slash + path_length) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + path_length) + 8) = 0;\n  result = create_temp_file_001057a0(last_slash);\n  if (result == -1) {\n    new_path = (char *)0x0;\n    free(last_slash);\n  }\n  else {\n    *file_descriptor = result;\n    new_path = last_slash;\n  }\n  result._8_8_ = unused_param_2;\n  result._0_8_ = new_path;\n  return result;\n}\n\n",
            "current_name": "create_temp_file_001057a0",
            "entrypoint": "0x001057a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001057a0": "create_temp_file_001057a0",
                "auVar8": "result",
                "bVar7": "increment",
                "iVar1": "result",
                "lVar3": "path_length",
                "lVar4": "index",
                "lVar5": "last_slash_index",
                "mkstemp": "create_temp_file",
                "param_1": "file_path",
                "param_2": "file_descriptor",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "pcVar2": "last_slash",
                "pcVar6": "new_path",
                "strrchr": "find_last_slash",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105830": {
            "additional_data": {
                "FUN_00105830": {
                    "1": "extracted_data",
                    "2": "extract_param",
                    "3": "reverse_string",
                    "8": "extract_substring"
                },
                "__s": {
                    "1": "program_name",
                    "17": "base_name",
                    "2": "file_name",
                    "5": "basename_result",
                    "6": "basename"
                },
                "auVar6": {
                    "1": "return_val",
                    "21": "result",
                    "3": "return_value"
                },
                "auVar6._0_8_": {
                    "1": "new_param_1"
                },
                "auVar6._8_8_": {
                    "1": "new_param_4"
                },
                "bVar5": {
                    "1": "counter",
                    "2": "loop_variable",
                    "3": "byte_var",
                    "4": "loop_counter"
                },
                "lVar1": {
                    "1": "input_struct_ptr",
                    "2": "data_ptr_value"
                },
                "param_1": {
                    "1": "str",
                    "10": "input_string",
                    "2": "file_path",
                    "4": "file_name",
                    "6": "filename"
                },
                "param_2": {
                    "1": "extract_info",
                    "2": "data",
                    "3": "struct_pointer",
                    "5": "struct_address"
                },
                "param_3": {
                    "1": "unused_1",
                    "2": "param_3",
                    "6": "param3",
                    "7": "unused_param"
                },
                "param_4": {
                    "1": "unused_arg2",
                    "2": "unused_param2",
                    "6": "param4"
                },
                "pcVar4": {
                    "1": "base_name_ptr",
                    "2": "substring",
                    "3": "destination",
                    "5": "dest_ptr",
                    "6": "output_string"
                },
                "sVar2": {
                    "1": "source_length",
                    "2": "input_length",
                    "3": "file_name_length",
                    "5": "base_name_length"
                },
                "uVar3": {
                    "1": "max_filename_length",
                    "2": "length",
                    "3": "max_length",
                    "4": "byte_value"
                }
            },
            "called": [
                "FUN_00102bb0",
                "lbasename"
            ],
            "calling": [
                "FUN_001028ed",
                "FUN_00105480",
                "FUN_00105db0"
            ],
            "code": "\nundefined  [16] extract_substring_00105830(char *input_string,long struct_address,undefined8 unused_param,undefined8 param4)\n\n{\n  long data_ptr_value;\n  size_t base_name_length;\n  char *base_name;\n  ulong string_length;\n  char *output_string;\n  byte loop_counter;\n  undefined result [16];\n  \n  loop_counter = 0;\n  if (DAT_0010d5f9 == '\\0') {\n    base_name = (char *)lbasename();\n    input_string = base_name;\n    if ((DAT_0010d5fa != '\\0') && (struct_address != 0)) {\n      base_name_length = strlen(base_name);\n      string_length = (ulong)*(byte *)(*(long *)(struct_address + 8) + 0x1e);\n      if (string_length < base_name_length) {\n        input_string = (char *)xmalloc(string_length + 1);\n        data_ptr_value = *(long *)(struct_address + 8);\n        output_string = input_string;\n        for (string_length = (ulong)*(byte *)(data_ptr_value + 0x1e); string_length != 0; string_length = string_length - 1) {\n          *output_string = *base_name;\n          base_name = base_name + (ulong)loop_counter * -2 + 1;\n          output_string = output_string + (ulong)loop_counter * -2 + 1;\n        }\n        input_string[*(byte *)(data_ptr_value + 0x1e)] = '\\0';\n      }\n    }\n  }\n  new_param_4 = param4;\n  new_param_1 = input_string;\n  return result;\n}\n\n",
            "current_name": "extract_substring_00105830",
            "entrypoint": "0x00105830",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105830": "extract_substring_00105830",
                "__s": "base_name",
                "auVar6": "result",
                "auVar6._0_8_": "new_param_1",
                "auVar6._8_8_": "new_param_4",
                "bVar5": "loop_counter",
                "lVar1": "data_ptr_value",
                "param_1": "input_string",
                "param_2": "struct_address",
                "param_3": "unused_param",
                "param_4": "param4",
                "pcVar4": "output_string",
                "sVar2": "base_name_length",
                "uVar3": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105870": {
            "additional_data": {
                "*param_1": {
                    "1": "current_file_address",
                    "2": "current_file"
                },
                "*param_1 + 0xf0": {
                    "1": "next_file"
                },
                "FUN_00105870": {
                    "1": "find_last_matching_address",
                    "2": "find_matching_entry",
                    "3": "find_matching_file"
                },
                "filename_cmp": {
                    "1": "compare_filenames"
                },
                "iVar1": {
                    "1": "filename_comparison_result",
                    "12": "cmp_result",
                    "16": "comparison_result"
                },
                "iVar3": {
                    "1": "default_search_type",
                    "2": "check_mode",
                    "4": "condition",
                    "6": "search_mode",
                    "7": "search_type"
                },
                "param_1": {
                    "1": "ptr_array",
                    "11": "file_list",
                    "2": "entries",
                    "5": "array"
                },
                "param_2": {
                    "1": "file_type",
                    "2": "num_entries",
                    "3": "search_mode",
                    "4": "count",
                    "5": "file_count"
                },
                "param_3": {
                    "1": "search_query",
                    "2": "target_name",
                    "3": "target_filename",
                    "5": "filename",
                    "8": "search_value"
                },
                "uVar2": {
                    "1": "default_target_file",
                    "2": "default_name",
                    "3": "default_filename",
                    "4": "default_value"
                }
            },
            "called": [
                "FUN_00102cd9"
            ],
            "calling": [
                "FUN_001028ed",
                "FUN_00105db0"
            ],
            "code": "\nlong * find_matching_file_00105870(long *file_list,int file_count,undefined8 search_value)\n\n{\n  int comparison_result;\n  undefined8 default_value;\n  int search_type;\n  \n  default_value = DAT_0010d638;\n  search_type = DAT_0010d640;\n  if (DAT_0010d640 == 0) {\n    default_value = search_value;\n    search_type = file_count;\n  }\n  if (search_type == 3) {\n    for (; *file_list != 0; file_list = (long *)(*file_list + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*file_list != (undefined8 *)0x0; file_list = (long *)(*file_list + 0xf0)) {\n      comparison_result = filename_cmp(*(undefined8 *)*file_list,default_value);\n      if (comparison_result == 0) {\n        if (search_type != 2) {\n          return file_list;\n        }\n        return (long *)(*file_list + 0xf0);\n      }\n    }\n  }\n  return file_list;\n}\n\n",
            "current_name": "find_matching_file_00105870",
            "entrypoint": "0x00105870",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105870": "find_matching_file_00105870",
                "filename_cmp": "compare_filenames",
                "iVar1": "comparison_result",
                "iVar3": "search_type",
                "param_1": "file_list",
                "param_2": "file_count",
                "param_3": "search_value",
                "uVar2": "default_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001058b0": {
            "additional_data": {
                "DAT_0010d2d0": {
                    "1": "global_var3"
                },
                "DAT_0010d5e0": {
                    "1": "global_format_strings"
                },
                "DAT_0010d5f8": {
                    "2": "global_var5"
                },
                "DAT_0010d5f9": {
                    "2": "global_var4"
                },
                "DAT_0010d5fa": {
                    "2": "global_var2"
                },
                "DAT_0010d618": {
                    "1": "global_stream"
                },
                "DAT_0010d648": {
                    "1": "global_var1"
                },
                "FUN_001057a0": {
                    "1": "function_2"
                },
                "FUN_001058b0": {
                    "1": "write_archive_file",
                    "2": "write_archive_info_to_file",
                    "5": "write_archive_info"
                },
                "FUN_00107c10": {
                    "1": "function_1"
                },
                "_DAT_0010d2d0": {
                    "1": "global_var3"
                },
                "__format": {
                    "1": "error_format",
                    "15": "error_message",
                    "2": "format_str",
                    "5": "format_string"
                },
                "__ptr": {
                    "1": "temp_path",
                    "2": "file_name",
                    "3": "duplicate_string",
                    "4": "file_path_copy"
                },
                "__stream": {
                    "1": "output_file",
                    "18": "file_stream",
                    "2": "file",
                    "7": "archive_file"
                },
                "_uStack0000000000000020": {
                    "1": "stack_value1"
                },
                "bfd_fdopenw": {
                    "1": "function_5"
                },
                "cStack_31": {
                    "1": "file_permissions_char_2",
                    "2": "is_setgid_char"
                },
                "cStack_32": {
                    "1": "is_executable",
                    "2": "is_setuid",
                    "3": "file_permissions"
                },
                "cVar1": {
                    "1": "function_result",
                    "2": "char_var",
                    "22": "result"
                },
                "close": {
                    "1": "function_4"
                },
                "dcgettext": {
                    "1": "function_3"
                },
                "iVar3": {
                    "1": "dup_file_descriptor",
                    "12": "file_descriptor",
                    "3": "dup_fd",
                    "5": "fd"
                },
                "in_stack_00000028": {
                    "1": "stack_uint_2",
                    "2": "file_uid",
                    "5": "file_size"
                },
                "in_stack_00000038": {
                    "1": "group_id",
                    "12": "file_size",
                    "2": "timestamp"
                },
                "local_3c": {
                    "1": "status_array",
                    "2": "error_array",
                    "3": "error",
                    "4": "error_code"
                },
                "local_3c[0]": {
                    "1": "error"
                },
                "param_1": {
                    "1": "archive_path",
                    "2": "archive_info",
                    "3": "file_info",
                    "4": "parameters",
                    "6": "file_paths"
                },
                "param_2": {
                    "1": "error_code"
                },
                "ppcVar5": {
                    "1": "ppc_variable",
                    "2": "archive_format",
                    "3": "archive"
                },
                "ppcVar5[0xb]": {
                    "1": "format_string1"
                },
                "ppcVar5[0xc]": {
                    "1": "format_string2"
                },
                "stack0xffffffffffffffd8": {
                    "1": "stack_value2"
                },
                "uStack0000000000000020": {
                    "1": "file_mode1",
                    "10": "file_mode",
                    "2": "permission",
                    "6": "file_permissions"
                },
                "uStack_33": {
                    "1": "file_permissions",
                    "14": "file_type",
                    "3": "file_type_char"
                },
                "uVar2": {
                    "1": "permission_flags",
                    "18": "flags",
                    "3": "flag"
                },
                "uVar4": {
                    "1": "archive_head",
                    "2": "param",
                    "5": "time_data"
                },
                "xstrdup": {
                    "1": "function_6"
                }
            },
            "called": [
                "FUN_001057a0",
                "bfd_set_format",
                "FUN_00107c10",
                "dcgettext",
                "close",
                "bfd_fdopenw",
                "xstrdup"
            ],
            "calling": [
                "FUN_001028ed",
                "FUN_00107650",
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid write_archive_info_001058b0(undefined8 *file_paths)\n\n{\n  char result;\n  uint flags;\n  int file_descriptor;\n  undefined8 time_data;\n  char *error_message;\n  void *file_path;\n  FILE *file_stream;\n  char **archive;\n  uint file_mode;\n  uint file_size;\n  undefined8 file_size;\n  int error_code [2];\n  undefined file_type;\n  char file_permissions;\n  char is_setgid;\n  \n  time_data = file_paths[0x1e];\n  error = -1;\n  file_path = (void *)xstrdup(*file_paths);\n  file_stream = (FILE *)FUN_001057a0(file_path,error_code);\n  file_descriptor = error;\n  if (file_stream != (FILE *)0x0) {\n    DAT_0010d618 = file_stream;\n    archive = (char **)bfd_fdopenw(file_stream,*(undefined8 *)file_paths[1],error);\n    if (archive != (char **)0x0) {\n      DAT_0010d5e0 = archive;\n      bfd_set_format(archive,2);\n      flags = (~DAT_0010d648 >> 0x1f) << 3 | *(byte *)((long)archive + 0x49) & 0xfffffff7;\n      *(char *)((long)archive + 0x49) = (char)flags;\n      if (DAT_0010d5fa != '\\0') {\n        *(uint *)((long)archive + 0x44) = *(uint *)((long)archive + 0x44) | 0x400;\n      }\n      if (_DAT_0010d2d0 != 0) {\n        *(uint *)((long)archive + 0x44) = *(uint *)((long)archive + 0x44) | 0x2000;\n      }\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((DAT_0010d5f8 != '\\0') || ((*(byte *)((long)file_paths + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)archive + 0x49) = (byte)flags | 0x10;\n        }\n        result = bfd_set_archive_head(archive,time_data);\n        if (result != '\\0') break;\n        flags = FUN_00107c10(file_path);\nLAB_00102d37:\n        *(uint *)((long)archive + 0x44) = *(uint *)((long)archive + 0x44) | 0x100000;\n      }\n      file_descriptor = dup(file_descriptor);\n      result = bfd_close(archive);\n      if (result == '\\0') {\n        FUN_00107c10(file_path);\n        error_message = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&stack_value2,error_message);\n        flags = file_mode & 0xf000;\n        if (flags == 0x4000) {\n          file_type = 100;\n        }\n        else if (flags == 0xa000) {\n          file_type = 0x6c;\n        }\n        else if (flags == 0x6000) {\n          file_type = 0x62;\n        }\n        else if (flags == 0x2000) {\n          file_type = 99;\n        }\n        else if (flags == 0xc000) {\n          file_type = 0x73;\n        }\n        else {\n          file_type = 0x70;\n          if (flags != 0x1000) {\n            file_type = 0x2d;\n          }\n        }\n        file_permissions = (-((stack_value1 & 0x100) == 0) & 0xbbU) + 0x72;\n        is_setgid = (-((stack_value1 & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(file_stream,\"%s %ld/%ld %6lu %s \",&file_permissions,stack_value1 >> 0x20,\n                (ulong)file_size,file_size,&stack_value2,\n                stack_value1 & 0xffffffff);\n        fputs(*archive,file_stream);\n        if ((char)file_paths != '\\0') {\n          if ((*(byte *)((long)archive + 0x49) & 0x10) == 0) {\n            if (format_string1 != (char *)0x0) {\n              fprintf(file_stream,\" 0x%lx\");\n            }\n          }\n          else if (format_string2 != (char *)0x0) {\n            fprintf(file_stream,\" 0x%lx\");\n          }\n        }\n        fputc(10,file_stream);\n        return;\n      }\n      DAT_0010d5e0 = (char **)0x0;\n      DAT_0010d618 = (FILE *)0x0;\n      bfd_close(file_paths);\n      file_descriptor = FUN_00105bc0(file_stream,file_path,file_descriptor);\n      if (file_descriptor == 0) {\n        free(file_path);\n        free(file_stream);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(file_descriptor);\n    FUN_00107c10(file_path);\n  }\n  time_data = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  FUN_00107c10(time_data);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "current_name": "write_archive_info_001058b0",
            "entrypoint": "0x001058b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001058b0": "write_archive_info_001058b0",
                "__format": "error_message",
                "__ptr": "file_path",
                "__stream": "file_stream",
                "_uStack0000000000000020": "stack_value1",
                "bfd_fdopenw": "function_5",
                "cStack_31": "is_setgid",
                "cStack_32": "file_permissions",
                "cVar1": "result",
                "close": "function_4",
                "dcgettext": "function_3",
                "iVar3": "file_descriptor",
                "in_stack_00000028": "file_size",
                "in_stack_00000038": "file_size",
                "local_3c": "error_code",
                "local_3c[0]": "error",
                "param_1": "file_paths",
                "ppcVar5": "archive",
                "ppcVar5[0xb]": "format_string1",
                "ppcVar5[0xc]": "format_string2",
                "stack0xffffffffffffffd8": "stack_value2",
                "uStack0000000000000020": "file_mode",
                "uStack_33": "file_type",
                "uVar2": "flags",
                "uVar4": "time_data",
                "xstrdup": "function_6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105a20": {
            "additional_data": {
                "DAT_00108260": {
                    "1": "constant_string"
                },
                "DAT_0010d5e8": {
                    "2": "base_path"
                },
                "DAT_0010d60c": {
                    "1": "verbose_flag"
                },
                "DAT_0010d618": {
                    "1": "output_path"
                },
                "FUN_00105a20": {
                    "1": "initialize_output_file",
                    "2": "process_archive_member",
                    "4": "process_output_path",
                    "8": "extract_archive_member"
                },
                "LAB_00102e9a": {
                    "1": "handle_illegal_output_path"
                },
                "pFVar5": {
                    "1": "file_handle",
                    "10": "file_pointer",
                    "6": "output_file"
                },
                "param_1": {
                    "1": "input_pathname",
                    "18": "output_path",
                    "2": "path",
                    "3": "output_file_path",
                    "4": "input_path"
                },
                "pcVar1": {
                    "1": "parent_path",
                    "12": "base_path",
                    "2": "current_directory",
                    "3": "current_path",
                    "4": "base_directory",
                    "5": "base_dir"
                },
                "pcVar2": {
                    "1": "next_path_segment",
                    "13": "current_path",
                    "2": "current_char",
                    "3": "current_position",
                    "4": "current_dir"
                },
                "sVar6": {
                    "1": "path_len",
                    "2": "base_len",
                    "4": "base_directory_length",
                    "5": "path_length",
                    "6": "base_path_length"
                },
                "uVar3": {
                    "1": "result_path",
                    "16": "base_name",
                    "2": "basename",
                    "6": "basename_result"
                },
                "uVar4": {
                    "1": "error_msg_ptr",
                    "2": "error_msg",
                    "26": "error_message"
                }
            },
            "called": [],
            "calling": [
                "FUN_00102c25"
            ],
            "code": "\nvoid extract_archive_member_00105a20(char *output_path)\n\n{\n  char *base_path;\n  char *current_path;\n  undefined8 base_name;\n  undefined8 error_message;\n  FILE *file_pointer;\n  size_t base_path_length;\n  \n  base_path = DAT_0010d5e8;\n  DAT_0010d618 = output_path;\n  if (*output_path == '/') {\nhandle_illegal_output_path:\n    base_name = lbasename();\n    base_path = DAT_0010d618;\n    error_message = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    FUN_00107920(error_message,base_path,base_name);\n    DAT_0010d618 = (char *)base_name;\n    FUN_00105a68();\n    return;\n  }\n  do {\n    if (*output_path == '\\0') {\n      if ((DAT_0010d5e8 != (char *)0x0) && (base_path_length = strlen(DAT_0010d5e8), base_path_length != 0)) {\n        if (base_path[base_path_length - 1] == '/') {\n          DAT_0010d618 = (char *)concat(base_path,DAT_0010d618,0);\n        }\n        else {\n          DAT_0010d618 = (char *)concat(base_path,&DAT_00108260,DAT_0010d618,0);\n        }\n      }\n      if (DAT_0010d60c != 0) {\n        printf(\"x - %s\\n\",DAT_0010d618);\n      }\n      file_pointer = fopen(DAT_0010d618,\"w\");\n      if (file_pointer == (FILE *)0x0) {\n        perror(DAT_0010d618);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    current_path = output_path;\n    if ((*output_path == '.') && (current_path = output_path + 1, output_path[1] == '.')) {\n      current_path = output_path + 2;\n      if ((output_path[2] == '/') || (output_path[2] == '\\0')) goto handle_illegal_output_path;\n    }\n    for (; (*current_path != '\\0' && (*current_path != '/')); current_path = current_path + 1) {\n    }\n    for (; output_path = current_path, *current_path == '/'; current_path = current_path + 1) {\n    }\n  } while( true );\n}\n\n",
            "current_name": "extract_archive_member_00105a20",
            "entrypoint": "0x00105a20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105a20": "extract_archive_member_00105a20",
                "LAB_00102e9a": "handle_illegal_output_path",
                "pFVar5": "file_pointer",
                "param_1": "output_path",
                "pcVar1": "base_path",
                "pcVar2": "current_path",
                "sVar6": "base_path_length",
                "uVar3": "base_name",
                "uVar4": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105a68": {
            "additional_data": {
                "DAT_0010d5e8": {
                    "1": "input_path",
                    "2": "directory"
                },
                "DAT_0010d60c": {
                    "1": "print_output_flag",
                    "2": "print_output"
                },
                "DAT_0010d618": {
                    "1": "full_path"
                },
                "FUN_00102e57": {
                    "1": "cleanup"
                },
                "FUN_00105a68": {
                    "1": "write_output_file",
                    "2": "create_output_file",
                    "5": "generate_output_file",
                    "9": "write_to_file"
                },
                "__s": {
                    "1": "filename"
                },
                "concat": {
                    "1": "concatenate",
                    "7": "concatenate_strings"
                },
                "fopen": {
                    "4": "open_file"
                },
                "pFVar2": {
                    "15": "file_pointer",
                    "3": "file_ptr",
                    "4": "output_file",
                    "9": "file"
                },
                "pcVar1": {
                    "1": "file_directory",
                    "15": "directory_path",
                    "2": "input_directory",
                    "4": "file_path"
                },
                "perror": {
                    "5": "print_error"
                },
                "printf": {
                    "1": "print_formatted",
                    "3": "print_message"
                },
                "sVar3": {
                    "1": "input_path_length",
                    "2": "file_length",
                    "4": "path_length",
                    "5": "directory_length",
                    "7": "directory_path_length"
                },
                "strlen": {
                    "2": "get_string_length"
                },
                "xexit": {
                    "1": "terminate_program",
                    "3": "exit_program"
                }
            },
            "called": [
                "xexit",
                "FUN_00102e57",
                "perror",
                "strlen",
                "fopen",
                "concat",
                "printf"
            ],
            "calling": [
                "FUN_00102e6f"
            ],
            "code": "\nvoid write_to_file_00105a68(void)\n\n{\n  char *directory_path;\n  FILE *file_pointer;\n  size_t directory_path_length;\n  \n  directory_path = DAT_0010d5e8;\n  if (DAT_0010d5e8 != (char *)0x0) {\n    directory_path_length = strlen(DAT_0010d5e8);\n    if (directory_path_length != 0) {\n      if (directory_path[directory_path_length - 1] == '/') {\n        DAT_0010d618 = (char *)concatenate_strings(directory_path,DAT_0010d618,0);\n      }\n      else {\n        DAT_0010d618 = (char *)concatenate_strings(directory_path,&DAT_00108260,DAT_0010d618,0);\n      }\n    }\n  }\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  file_pointer = fopen(DAT_0010d618,\"w\");\n  if (file_pointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "current_name": "write_to_file_00105a68",
            "entrypoint": "0x00105a68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105a68": "write_to_file_00105a68",
                "concat": "concatenate_strings",
                "fopen": "open_file",
                "pFVar2": "file_pointer",
                "pcVar1": "directory_path",
                "perror": "print_error",
                "printf": "print_message",
                "sVar3": "directory_path_length",
                "strlen": "get_string_length",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105ae0": {
            "additional_data": {
                "FUN_00105ae0": {
                    "1": "execute_operation",
                    "2": "process_data",
                    "25": "execute_function"
                },
                "FUN_00105af0": {
                    "1": "process_task",
                    "3": "process_data",
                    "5": "perform_operation"
                },
                "param_1": {
                    "1": "input_array",
                    "12": "arg1",
                    "2": "data1",
                    "4": "function_param1"
                },
                "param_2": {
                    "1": "data_length",
                    "12": "arg2",
                    "2": "input2",
                    "4": "function_param2"
                },
                "param_3": {
                    "1": "char1",
                    "18": "flag1",
                    "2": "char_param1",
                    "3": "character1"
                },
                "param_4": {
                    "1": "char2",
                    "18": "flag2",
                    "2": "char_param2",
                    "3": "character2"
                }
            },
            "called": [
                "FUN_00105af0"
            ],
            "calling": [
                "FUN_001028ed"
            ],
            "code": "\nvoid execute_function_00105ae0(undefined8 arg1,undefined8 arg2,undefined flag1,undefined flag2)\n\n{\n  FUN_00105af0(arg1,arg2,flag1,flag2);\n  return;\n}\n\n",
            "current_name": "execute_function_00105ae0",
            "entrypoint": "0x00105ae0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105ae0": "execute_function_00105ae0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "flag1",
                "param_4": "flag2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105af0": {
            "additional_data": {
                "(*param_1 + 0xf0)": {
                    "1": "file_data"
                },
                "*(long *)(param_2 + 0xf0)": {
                    "1": "archive_file_data"
                },
                "*param_1": {
                    "1": "current_file_ptr"
                },
                "FUN_00102f08": {
                    "1": "helper_function"
                },
                "FUN_00105af0": {
                    "1": "reverse_and_update_files",
                    "2": "extract_archives",
                    "4": "process_files",
                    "5": "process_archived_files",
                    "7": "extract_archived_files"
                },
                "FancyFunction": {
                    "1": "decompiled_function"
                },
                "bfd_check_format": {
                    "1": "validate_format",
                    "3": "check_bfd_format"
                },
                "bfd_openr_next_archived_file": {
                    "1": "open_next_archived_file",
                    "4": "get_next_archived_file"
                },
                "cVar1": {
                    "1": "check_result",
                    "11": "is_valid_format",
                    "2": "is_bfd_format",
                    "3": "format_valid",
                    "8": "format_check_result"
                },
                "lVar3": {
                    "1": "next_archived_file",
                    "2": "next_file",
                    "23": "archived_file"
                },
                "param_1": {
                    "1": "file_pointer",
                    "20": "file_list"
                },
                "param_2": {
                    "1": "file_descriptor",
                    "10": "archive_file",
                    "2": "current_file",
                    "5": "archive"
                },
                "param_3": {
                    "1": "check_format_required",
                    "10": "check_format",
                    "2": "extract_flag",
                    "3": "check_format_flag",
                    "6": "flag1"
                },
                "param_4": {
                    "1": "check_format_flag",
                    "2": "open_files",
                    "3": "recursive_flag",
                    "6": "flag2"
                },
                "uVar2": {
                    "1": "sub_result",
                    "18": "result",
                    "2": "file_result",
                    "3": "recursive_result"
                },
                "uVar4": {
                    "1": "updated_files_count",
                    "2": "num_extracted_files",
                    "3": "extracted_files_count",
                    "4": "return_value",
                    "5": "final_result",
                    "7": "result"
                }
            },
            "called": [
                "bfd_check_format",
                "FUN_00105af0",
                "FUN_00102f08",
                "bfd_openr_next_archived_file"
            ],
            "calling": [
                "FUN_001028ed",
                "FUN_00105af0",
                "FUN_00105ae0"
            ],
            "code": "\nulong extract_archived_files_00105af0(long *file_list,long archive_file,char check_format,char flag2)\n\n{\n  char is_valid_format;\n  uint result;\n  long archived_file;\n  ulong result;\n  \n  if (flag2 == '\\0') {\n    if (check_format != '\\0') {\n      result = FUN_00102f08();\n      return result;\n    }\n  }\n  else {\n    is_valid_format = bfd_check_format(archive_file,2);\n    if (is_valid_format != '\\0') {\n      result = 0;\n      for (archived_file = bfd_openr_next_archived_file(archive_file,0); archived_file != 0;\n          archived_file = bfd_openr_next_archived_file(archive_file,archived_file)) {\n        result = extract_archived_files_00105af0(file_list,archived_file,check_format,1);\n        if ((char)result != '\\0') {\n          result = (ulong)result;\n          file_list = (long *)(*file_list + 0xf0);\n        }\n      }\n      return result;\n    }\n    if (check_format != '\\0') {\n      result = FUN_00102f08();\n      return result;\n    }\n  }\n  *(long *)(archive_file + 0xf0) = *file_list;\n  *file_list = archive_file;\n  return 1;\n}\n\n",
            "current_name": "extract_archived_files_00105af0",
            "entrypoint": "0x00105af0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105af0": "extract_archived_files_00105af0",
                "bfd_check_format": "check_bfd_format",
                "bfd_openr_next_archived_file": "get_next_archived_file",
                "cVar1": "is_valid_format",
                "lVar3": "archived_file",
                "param_1": "file_list",
                "param_2": "archive_file",
                "param_3": "check_format",
                "param_4": "flag2",
                "uVar2": "result",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105bb0": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "1": {
                    "1": "result"
                },
                "<original_variable_name_1>": {
                    "2": "<new_variable_name_1>"
                },
                "<unnamed_param>": {
                    "1": ""
                },
                "DAT_": {
                    "1": "unchanged"
                },
                "FUN_00105bb0": {
                    "1": "is_function_successful",
                    "13": "get_one",
                    "2": "is_one",
                    "3": "initialize",
                    "6": "get_return_value"
                },
                "PTR_": {
                    "1": "unchanged"
                },
                "get_one": {
                    "1": "get_one"
                },
                "return": {
                    "1": "return",
                    "2": "return_value",
                    "7": "result"
                },
                "return_value": {
                    "1": "result"
                },
                "undefined8": {
                    "1": "status",
                    "3": "bool",
                    "4": "int",
                    "5": "uint64_t"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nuint64_t get_one_00105bb0(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "get_one_00105bb0",
            "entrypoint": "0x00105bb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105bb0": "get_one_00105bb0",
                "return": "result",
                "undefined8": "uint64_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105bc0": {
            "additional_data": {
                "FUN_00105bc0": {
                    "1": "copy_file_and_remove_original",
                    "2": "copy_file",
                    "3": "copy_file_and_unlink",
                    "6": "copy_and_remove_file",
                    "9": "copy_and_unlink_file"
                },
                "FUN_00105c00": {
                    "1": "check_file_copy_status"
                },
                "FUN_00107920": {
                    "1": "print_error_message"
                },
                "auVar6": {
                    "1": "result_data",
                    "10": "result",
                    "14": "return_value",
                    "2": "return_data"
                },
                "dcgettext": {
                    "1": "get_localized_text"
                },
                "param_1": {
                    "1": "source",
                    "12": "source_file_path",
                    "7": "source_path",
                    "9": "source_file"
                },
                "param_2": {
                    "1": "new_file_path",
                    "12": "destination_file_path",
                    "7": "destination_path",
                    "9": "destination_file"
                },
                "param_3": {
                    "1": "param1",
                    "10": "flags",
                    "2": "param",
                    "3": "file_permissions",
                    "5": "error_code"
                },
                "param_4": {
                    "1": "result_code",
                    "15": "result",
                    "2": "status",
                    "3": "return_value",
                    "7": "file_size"
                },
                "pcVar3": {
                    "1": "error_msg",
                    "12": "error_message",
                    "2": "error_str"
                },
                "piVar2": {
                    "1": "errno_value",
                    "11": "errno_location",
                    "2": "errno_pointer",
                    "4": "errno_ptr",
                    "6": "error_location"
                },
                "strerror": {
                    "1": "get_error_string"
                },
                "uVar1": {
                    "1": "error_code_converted",
                    "13": "copy_result",
                    "2": "file_size",
                    "6": "error_code"
                },
                "uVar4": {
                    "1": "localized_error_msg",
                    "2": "error_msg",
                    "4": "translated_error_message",
                    "6": "localized_error_message",
                    "7": "error_message"
                },
                "uVar5": {
                    "1": "copy_error_code",
                    "2": "copy_status",
                    "3": "file_size",
                    "4": "unlink_status",
                    "5": "error_code"
                },
                "unlink": {
                    "1": "delete_file"
                }
            },
            "called": [
                "FUN_00105c00",
                "FUN_00102f1e"
            ],
            "calling": [
                "FUN_00103e95",
                "FUN_00102d2f"
            ],
            "code": "\nundefined  [16] copy_and_delete_file_00105bc0(char *source_file_path,char *destination_file_path,undefined4 flags,undefined8 result)\n\n{\n  uint copy_result;\n  int *errno_location;\n  char *error_string;\n  undefined8 error_message;\n  ulong error_code;\n  undefined return_value [16];\n  \n  if (destination_file_path == source_file_path) {\n    error_code = 0;\n  }\n  else {\n    copy_result = FUN_00105c00(flags);\n    error_code = (ulong)copy_result;\n    if (copy_result != 0) {\n      errno_location = __errno_location();\n      error_string = strerror(*errno_location);\n      error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      FUN_00107920(error_message,destination_file_path,error_string);\n    }\n    unlink(source_file_path);\n  }\n  return_value._8_8_ = result;\n  return_value._0_8_ = error_code;\n  return return_value;\n}\n\n",
            "current_name": "copy_and_delete_file_00105bc0",
            "entrypoint": "0x00105bc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105bc0": "copy_and_delete_file_00105bc0",
                "auVar6": "return_value",
                "dcgettext": "get_localized_text",
                "param_1": "source_file_path",
                "param_2": "destination_file_path",
                "param_3": "flags",
                "param_4": "result",
                "pcVar3": "error_string",
                "piVar2": "errno_location",
                "strerror": "get_error_string",
                "uVar1": "copy_result",
                "uVar4": "error_message",
                "uVar5": "error_code",
                "unlink": "delete_file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105c00": {
            "additional_data": {
                "FUN_00105c00": {
                    "1": "extract_binary_data",
                    "2": "extract_data",
                    "8": "copy_file"
                },
                "_Var3": {
                    "1": "source_file_position",
                    "2": "current_position",
                    "5": "offset",
                    "7": "current_offset",
                    "8": "file_offset"
                },
                "__errno_location": {
                    "1": "get_error_code"
                },
                "__fd": {
                    "1": "file_descriptor2",
                    "16": "output_file_descriptor",
                    "3": "output_fd",
                    "6": "destination_file_descriptor"
                },
                "auStack_2038": {
                    "21": "buffer",
                    "4": "data_buffer"
                },
                "iVar1": {
                    "1": "close_error",
                    "2": "original_errno",
                    "3": "error",
                    "6": "errno_value",
                    "7": "error_code"
                },
                "iVar2": {
                    "1": "read_error_code",
                    "2": "read_bytes",
                    "3": "bytes_read",
                    "7": "read_result"
                },
                "param_1": {
                    "1": "file_descriptor1",
                    "14": "file_descriptor",
                    "2": "input_fd",
                    "5": "input_file_descriptor",
                    "7": "source_file_descriptor"
                },
                "param_2": {
                    "1": "output_path",
                    "2": "output_file_name",
                    "3": "output_file_path",
                    "4": "output_file",
                    "5": "file_path"
                },
                "piVar6": {
                    "1": "pointer_to_errno",
                    "2": "errno_pointer",
                    "3": "error_ptr",
                    "5": "errno_location",
                    "8": "errno_ptr"
                },
                "sVar5": {
                    "1": "write_size",
                    "2": "num_bytes_written",
                    "23": "bytes_written"
                },
                "uVar4": {
                    "1": "read_bytes",
                    "22": "bytes_read",
                    "3": "bytes_copied"
                }
            },
            "called": [
                "open",
                "read",
                "FUN_00102f55",
                "lseek",
                "write",
                "close",
                "__errno_location"
            ],
            "calling": [
                "FUN_00105bc0"
            ],
            "code": "\nulong copy_file_00105c00(int file_descriptor,char *file_path)\n\n{\n  int error_code;\n  int output_file_descriptor;\n  int read_result;\n  __off_t file_offset;\n  ulong bytes_read;\n  size_t bytes_written;\n  int *errno_ptr;\n  undefined buffer [8200];\n  \n  if ((-1 < file_descriptor) && (file_offset = lseek(file_descriptor,0,0), file_offset == 0)) {\n    output_file_descriptor = open(file_path,0x201);\n    if (output_file_descriptor < 0) {\n      bytes_read = FUN_00102f55();\n      return bytes_read;\n    }\n    do {\n      bytes_read = read(file_descriptor,buffer,0x2000);\n      read_result = (int)bytes_read;\n      if (read_result < 1) {\n        errno_ptr = __errno_location();\n        error_code = *errno_ptr;\n        close(file_descriptor);\n        close(output_file_descriptor);\n        if (read_result != 0) {\n          *errno_ptr = error_code;\n          return 0xffffffff;\n        }\n        return bytes_read & 0xffffffff;\n      }\n      bytes_written = write(output_file_descriptor,buffer,(long)read_result);\n    } while (bytes_written == (long)read_result);\n    errno_ptr = __errno_location();\n    read_result = *errno_ptr;\n    close(file_descriptor);\n    close(output_file_descriptor);\n    *errno_ptr = read_result;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "copy_file_00105c00",
            "entrypoint": "0x00105c00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105c00": "copy_file_00105c00",
                "_Var3": "file_offset",
                "__errno_location": "get_error_code",
                "__fd": "output_file_descriptor",
                "auStack_2038": "buffer",
                "iVar1": "error_code",
                "iVar2": "read_result",
                "param_1": "file_descriptor",
                "param_2": "file_path",
                "piVar6": "errno_ptr",
                "sVar5": "bytes_written",
                "uVar4": "bytes_read"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105cf0": {
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00105cf0",
            "entrypoint": "0x00105cf0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00105d20": {
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "calling": [
                "_INIT_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00105d20",
            "entrypoint": "0x00105d20",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00105db0": {
            "additional_data": {
                "FILE": {
                    "2": "file"
                },
                "FILE *local_128": {
                    "1": "file_pointer5"
                },
                "FILE *pFVar18": {
                    "1": "file_pointer1"
                },
                "FILE *pFVar22": {
                    "1": "file_pointer2"
                },
                "FILE *pFVar28": {
                    "1": "file_pointer3"
                },
                "FILE *param_2": {
                    "1": "argv"
                },
                "FILE *unaff_R12": {
                    "1": "file_pointer4"
                },
                "FUN_0010342d": {
                    "1": "function_10"
                },
                "FUN_0010394a": {
                    "1": "function_8"
                },
                "FUN_001052a0": {
                    "1": "function_2"
                },
                "FUN_00105570": {
                    "1": "function_1"
                },
                "FUN_001058b0": {
                    "1": "function_3"
                },
                "FUN_00105db0": {
                    "1": "parse_input_files",
                    "7": "process_files"
                },
                "FUN_00107640": {
                    "1": "function_5"
                },
                "FUN_00107650": {
                    "1": "function_4"
                },
                "FUN_00107690": {
                    "1": "function_9"
                },
                "FUN_00107c10": {
                    "1": "function_7"
                },
                "FUN_00107cc0": {
                    "1": "function_11"
                },
                "__ptr": {
                    "1": "buffer",
                    "2": "ptr_byte",
                    "3": "byte_pointer2",
                    "4": "byte_ptr",
                    "5": "byte_pointer"
                },
                "bVar13": {
                    "1": "b_var13",
                    "2": "byte_value",
                    "3": "byte_var13",
                    "5": "byte_var",
                    "6": "byte_var2"
                },
                "bVar3": {
                    "1": "byte_value",
                    "15": "byte_var",
                    "2": "current_char"
                },
                "bVar47": {
                    "1": "bool_3",
                    "2": "bool_var_3"
                },
                "bVar48": {
                    "1": "byte_var",
                    "2": "byte_var_3"
                },
                "bVar8": {
                    "1": "is_inside_single_quote",
                    "2": "bool_variable_1",
                    "3": "bool_var8",
                    "6": "bool_var1"
                },
                "bVar9": {
                    "1": "is_inside_double_quote",
                    "2": "bool_var_2",
                    "3": "bool_var9",
                    "6": "bool_var2"
                },
                "bfd_close": {
                    "1": "close_bfd"
                },
                "bfd_get_error": {
                    "1": "get_bfd_error"
                },
                "bfd_make_readable": {
                    "1": "make_bfd_readable"
                },
                "bfd_plugin_set_plugin": {
                    "1": "set_bfd_plugin"
                },
                "bfd_plugin_set_program_name": {
                    "1": "set_plugin_program_name"
                },
                "bfd_set_error": {
                    "1": "set_bfd_error"
                },
                "bool bVar47": {
                    "1": "boolean_variable3"
                },
                "bool bVar8": {
                    "1": "boolean_variable1"
                },
                "bool bVar9": {
                    "1": "boolean_variable2"
                },
                "byte": {
                    "1": "byte_data"
                },
                "byte *__ptr": {
                    "1": "byte_pointer2"
                },
                "byte *local_118": {
                    "1": "byte_pointer5"
                },
                "byte *pbVar1": {
                    "1": "byte_pointer1"
                },
                "byte *pbVar33": {
                    "1": "byte_pointer3"
                },
                "byte *pbVar38": {
                    "1": "byte_pointer4"
                },
                "byte bVar13": {
                    "1": "byte_variable2"
                },
                "byte bVar3": {
                    "1": "byte_variable1"
                },
                "byte bVar48": {
                    "1": "byte_variable3"
                },
                "bytePtr": {
                    "1": "ptr_byte"
                },
                "bytePtr2": {
                    "1": "ptr_byte"
                },
                "byteVar": {
                    "1": "byte"
                },
                "byteVar2": {
                    "1": "byte2"
                },
                "cVar14": {
                    "1": "c_var14",
                    "14": "char_var",
                    "2": "char_value",
                    "3": "char_variable"
                },
                "char **local_110": {
                    "1": "char_pointer_pointer2"
                },
                "char **ppcVar10": {
                    "1": "char_pointer_pointer1"
                },
                "char *__ptr": {
                    "1": "char_pointer7"
                },
                "char *pcVar23": {
                    "1": "char_pointer1"
                },
                "char *pcVar39": {
                    "1": "char_pointer5"
                },
                "char *pcVar43": {
                    "1": "char_pointer6"
                },
                "char *unaff_RBP": {
                    "1": "char_pointer4"
                },
                "char cVar14": {
                    "1": "char_variable1"
                },
                "charVar": {
                    "1": "char_var"
                },
                "dcgettext": {
                    "1": "gettext_text"
                },
                "extraout_EDX": {
                    "1": "uint_var_2",
                    "2": "extraout_edx_var"
                },
                "fileVar": {
                    "1": "unaff_r12"
                },
                "fileVar2": {
                    "1": "file_var"
                },
                "fileVar3": {
                    "1": "file_var"
                },
                "fileVar4": {
                    "1": "file_var"
                },
                "fileno": {
                    "1": "file_number"
                },
                "flag1": {
                    "1": "bool1"
                },
                "flag2": {
                    "1": "bool2"
                },
                "fprintf": {
                    "1": "print_to_file"
                },
                "fread": {
                    "1": "read_from_file"
                },
                "free": {
                    "1": "free"
                },
                "fun_00103bd1": {
                    "1": "function_12"
                },
                "fun_00103e95": {
                    "1": "function_6"
                },
                "getopt_long": {
                    "1": "get_long_option"
                },
                "iVar15": {
                    "1": "index",
                    "10": "int_var",
                    "2": "int_value",
                    "3": "i_var15"
                },
                "iVar45": {
                    "1": "int_value",
                    "2": "int_var_2",
                    "5": "int_var"
                },
                "index": {
                    "1": "index"
                },
                "int *piVar11": {
                    "1": "int_pointer1"
                },
                "int iVar15": {
                    "1": "integer_variable1"
                },
                "int iVar45": {
                    "1": "integer_variable2"
                },
                "intPtr": {
                    "1": "int_ptr"
                },
                "isatty": {
                    "1": "is_terminal"
                },
                "lVal29": {
                    "1": "long_pointer_pointer"
                },
                "lVar24": {
                    "1": "long_variable_2",
                    "2": "long_var1",
                    "9": "long_var"
                },
                "lVar29": {
                    "1": "long_ptr"
                },
                "lVar34": {
                    "1": "l_var34",
                    "2": "long_var34",
                    "5": "long_var"
                },
                "lVar35": {
                    "1": "long4",
                    "2": "long_var_3",
                    "5": "long_var"
                },
                "lVar36": {
                    "1": "long_5"
                },
                "lVar45": {
                    "1": "index3"
                },
                "lbasename": {
                    "1": "get_base_name"
                },
                "local_100": {
                    "1": "local_long",
                    "2": "long_value",
                    "6": "long_var"
                },
                "local_108": {
                    "1": "current_size2",
                    "2": "size_var3",
                    "3": "size_var"
                },
                "local_110": {
                    "1": "char_double_pointer",
                    "2": "char_ptr_ptr",
                    "3": "char_pointer_pointer"
                },
                "local_118": {
                    "1": "temp_array",
                    "2": "byte_pointer_4",
                    "3": "byte_ptr",
                    "4": "byte_pointer"
                },
                "local_128": {
                    "1": "malloc_size2",
                    "2": "file_ptr",
                    "3": "file_var"
                },
                "local_130": {
                    "1": "file_var1",
                    "3": "undefined8_var"
                },
                "local_b0": {
                    "1": "uint_var1",
                    "4": "uint_var"
                },
                "local_c8": {
                    "1": "local_var_c8"
                },
                "local_int_c8": {
                    "1": "undefined_array"
                },
                "long **pplVar29": {
                    "1": "long_pointer_pointer1"
                },
                "long *plVar21": {
                    "1": "long_pointer2"
                },
                "long *plVar4": {
                    "1": "long_pointer1"
                },
                "long lVar24": {
                    "1": "long_variable1"
                },
                "long lVar34": {
                    "1": "long_variable2"
                },
                "long lVar35": {
                    "1": "long_variable3"
                },
                "long local_100": {
                    "1": "long_variable4"
                },
                "longVal": {
                    "1": "long_val"
                },
                "longVal2": {
                    "1": "long_val"
                },
                "longVal3": {
                    "1": "long_val"
                },
                "longVal4": {
                    "1": "long_val"
                },
                "lplVar29": {
                    "1": "long_pointer_pointer"
                },
                "open": {
                    "1": "open_file"
                },
                "pFVar18": {
                    "1": "file_pointer2",
                    "2": "file_pointer1",
                    "4": "file_pointer",
                    "5": "file_var"
                },
                "pFVar22": {
                    "1": "p_file_var22",
                    "3": "file_var"
                },
                "pFVar28": {
                    "1": "file_pointer3",
                    "3": "file_var"
                },
                "pFVar31": {
                    "1": "file_var4"
                },
                "pFVar32": {
                    "1": "file_ptr6"
                },
                "pFVar43": {
                    "1": "file_ptr7"
                },
                "param_1": {
                    "1": "input_parameter",
                    "12": "argc",
                    "3": "arg1",
                    "6": "input_param"
                },
                "param_2": {
                    "1": "file_stream",
                    "12": "argv",
                    "2": "file_parameter",
                    "3": "file_pointer",
                    "7": "file_param"
                },
                "pbVar1": {
                    "1": "buffer_ptr",
                    "2": "ptr_byte",
                    "3": "byte_pointer_1",
                    "4": "byte_pointer1",
                    "8": "byte_pointer"
                },
                "pbVar13": {
                    "1": "byte_var"
                },
                "pbVar33": {
                    "1": "ptr_byte33",
                    "2": "byte_pointer",
                    "3": "byte_pointer_3",
                    "4": "byte_ptr"
                },
                "pbVar38": {
                    "1": "byte_pointer5",
                    "2": "byte_pointer_3",
                    "3": "byte_pointer3",
                    "4": "byte_pointer"
                },
                "pcVar23": {
                    "1": "another_char_var",
                    "2": "char_pointer_1",
                    "3": "char_var",
                    "4": "char_ptr",
                    "5": "char_pointer"
                },
                "pcVar31": {
                    "1": "char_pointer_1"
                },
                "pcVar39": {
                    "1": "char_variable_4",
                    "2": "char_pointer3",
                    "3": "char_ptr",
                    "4": "char_pointer_3"
                },
                "pcVar43": {
                    "1": "another_char_var",
                    "2": "char_pointer_4"
                },
                "pcVar46": {
                    "1": "pc_var46"
                },
                "piVar11": {
                    "1": "int_pointer_1",
                    "12": "int_pointer",
                    "2": "int_pointer1",
                    "6": "int_ptr"
                },
                "plVar21": {
                    "1": "current_long_array",
                    "3": "long_ptr",
                    "4": "long_pointer2",
                    "5": "long_pointer"
                },
                "plVar26": {
                    "1": "long_pointer"
                },
                "plVar29": {
                    "1": "long_pointer_pointer",
                    "2": "long_ptr_ptr"
                },
                "plVar4": {
                    "1": "error_buffer",
                    "11": "long_pointer",
                    "2": "ptr_long",
                    "3": "long_pointer1",
                    "4": "long_ptr"
                },
                "ppcVar10": {
                    "1": "string_array1",
                    "2": "ptr_ptr_char",
                    "3": "char_pointer_pointer1",
                    "4": "char_ptr_ptr",
                    "5": "char_pointer_pointer",
                    "6": "char_double_pointer"
                },
                "ppcVar23": {
                    "1": "string_var"
                },
                "ppcVar31": {
                    "1": "char_double_pointer",
                    "2": "char_pointer_pointer2",
                    "3": "char_ptr_ptr"
                },
                "ppcVar32": {
                    "1": "ptr_ptr_char",
                    "2": "string_array2",
                    "3": "char_ptr_ptr"
                },
                "ppcVar33": {
                    "1": "byte_double_digit_ptr"
                },
                "pplVar29": {
                    "1": "long_pointer_pointer",
                    "5": "long_double_pointer"
                },
                "pplVar31": {
                    "1": "current_pointer_array"
                },
                "ppuVar36": {
                    "1": "ptr_ptr",
                    "2": "undefined_ptr_ptr",
                    "3": "undefined_pointer_pointer"
                },
                "ptr1": {
                    "1": "ptr"
                },
                "ptr2": {
                    "1": "ptr_file"
                },
                "ptr3": {
                    "1": "ptr_long"
                },
                "ptr4": {
                    "1": "ptr_undef8"
                },
                "ptr5": {
                    "1": "ptr_undef"
                },
                "ptr6": {
                    "1": "ptr"
                },
                "ptr7": {
                    "1": "ptr_long"
                },
                "ptr8": {
                    "1": "ptr_undef8"
                },
                "ptrRB": {
                    "1": "ptr"
                },
                "puVar12": {
                    "1": "undefined_pointer_1",
                    "10": "undefined_pointer",
                    "2": "undefined_pointer1",
                    "5": "undefined_ptr"
                },
                "puVar2": {
                    "1": "ptr2",
                    "11": "uint_pointer",
                    "2": "ptr_uint",
                    "3": "uint_pointer1",
                    "5": "uint_ptr"
                },
                "puVar26": {
                    "1": "ptr_undefined8_2",
                    "3": "undefined8_pointer",
                    "4": "undefined8_ptr"
                },
                "puVar5": {
                    "1": "ptr_uint64",
                    "3": "undefined8_ptr",
                    "9": "undefined8_pointer"
                },
                "sVar19": {
                    "1": "size_t_variable",
                    "2": "s_var19",
                    "4": "size_t_var",
                    "5": "size_var"
                },
                "sVar20": {
                    "1": "size_t_var_2",
                    "2": "bytes_read",
                    "3": "size_var"
                },
                "setlocale": {
                    "1": "set_locale"
                },
                "size_t local_108": {
                    "1": "size_t_variable3"
                },
                "size_t sVar19": {
                    "1": "size_t_variable1"
                },
                "size_t sVar20": {
                    "1": "size_t_variable2"
                },
                "stringArray1": {
                    "1": "string_array"
                },
                "stringArray2": {
                    "1": "string_array"
                },
                "stringVar": {
                    "1": "string"
                },
                "stringVar2": {
                    "1": "string"
                },
                "uCmpVar": {
                    "1": "uint_var_3"
                },
                "uStack_c5": {
                    "1": "byte_stack_c5",
                    "2": "u_stack_c5"
                },
                "uStack_c6": {
                    "1": "byte_stack_c6",
                    "2": "u_stack_c6"
                },
                "uVal1": {
                    "1": "u_val"
                },
                "uVal2": {
                    "1": "u_val"
                },
                "uVal3": {
                    "1": "u_val"
                },
                "uVal4": {
                    "1": "u_val"
                },
                "uVal5": {
                    "1": "u_val"
                },
                "uVal6": {
                    "1": "u_val"
                },
                "uVal7": {
                    "1": "u_val"
                },
                "uVal8": {
                    "1": "u_val"
                },
                "uVar1": {
                    "1": "val_undef4"
                },
                "uVar16": {
                    "1": "uint_var1",
                    "2": "uint_var16",
                    "3": "u_var16",
                    "6": "uint_var"
                },
                "uVar17": {
                    "1": "undefined_var3",
                    "3": "u_var17",
                    "4": "undefined4_var"
                },
                "uVar2": {
                    "1": "valu_undef4"
                },
                "uVar25": {
                    "1": "unsigned_long_value",
                    "2": "ulong_var25",
                    "7": "ulong_var"
                },
                "uVar27": {
                    "1": "uint64_variable",
                    "6": "undefined8_var"
                },
                "uVar30": {
                    "1": "undefined8_var30",
                    "2": "undefined8_variable_2",
                    "3": "undefined8_var"
                },
                "uVar32": {
                    "1": "uint_var"
                },
                "uVar37": {
                    "1": "uint_variable_5",
                    "2": "uint_variable_2",
                    "6": "uint_var"
                },
                "uVar40": {
                    "1": "unsigned_long_value",
                    "2": "ulong_var_2",
                    "5": "ulong_var"
                },
                "uVar41": {
                    "1": "unsigned_long_value",
                    "2": "ulong_var41",
                    "5": "ulong_var"
                },
                "uVar42": {
                    "1": "ulong_variable_4",
                    "2": "u_var42",
                    "5": "ulong_var"
                },
                "uVar44": {
                    "1": "uint_var_2",
                    "2": "uint_var44",
                    "4": "uint_var"
                },
                "uVar6": {
                    "1": "uint_var1",
                    "2": "undefined4_var1",
                    "3": "u_var6",
                    "5": "undefined4_var"
                },
                "uVar7": {
                    "1": "flags2",
                    "2": "undefined4_var2",
                    "3": "u_var7",
                    "5": "undefined4_var"
                },
                "uint": {
                    "1": "unsigned_integer"
                },
                "uint *puVar2": {
                    "1": "uint_pointer1"
                },
                "uint extraout_EDX": {
                    "1": "extra_output_uint_edx"
                },
                "uint local_b0": {
                    "1": "unsigned_int_variable2"
                },
                "uint param_1": {
                    "1": "argc"
                },
                "uint uVar16": {
                    "1": "unsigned_int_variable1"
                },
                "uint uVar37": {
                    "1": "unsigned_variable1"
                },
                "uint uVar44": {
                    "1": "unsigned_variable2"
                },
                "ulong uVar25": {
                    "1": "unsigned_long_variable1"
                },
                "ulong uVar40": {
                    "1": "unsigned_long_variable2"
                },
                "ulong uVar41": {
                    "1": "unsigned_long_variable3"
                },
                "ulong uVar42": {
                    "1": "unsigned_long_variable4"
                },
                "unaff_R12": {
                    "1": "file_param_2",
                    "2": "file_var",
                    "3": "file_pointer"
                },
                "unaff_RBP": {
                    "1": "char_ptr2",
                    "2": "char_pointer2",
                    "3": "char_ptr",
                    "4": "char_pointer_2",
                    "6": "char_pointer"
                },
                "undefined **ppuVar36": {
                    "1": "undefined_pointer_pointer1"
                },
                "undefined *puVar12": {
                    "1": "undefined_pointer1"
                },
                "undefined local_c8 [2]": {
                    "1": "undefined_variable4"
                },
                "undefined uStack_c6": {
                    "1": "undefined_variable5"
                },
                "undefined4 uVar17": {
                    "1": "undefined4_variable3"
                },
                "undefined4 uVar6": {
                    "1": "undefined4_variable1"
                },
                "undefined4 uVar7": {
                    "1": "undefined4_variable2"
                },
                "undefined5 uStack_c5": {
                    "1": "undefined5_variable1"
                },
                "undefined8 *puVar26": {
                    "1": "undefined8_pointer2"
                },
                "undefined8 *puVar5": {
                    "1": "undefined8_pointer1"
                },
                "undefined8 local_130": {
                    "1": "undefined8_variable3"
                },
                "undefined8 uVar27": {
                    "1": "undefined8_variable1"
                },
                "undefined8 uVar30": {
                    "1": "undefined8_variable2"
                },
                "val1": {
                    "1": "val"
                },
                "val2": {
                    "1": "val"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                },
                "xrealloc": {
                    "1": "reallocate_memory"
                }
            },
            "called": [
                "free",
                "FUN_0010342d",
                "setlocale",
                "fileno",
                "FUN_00105570",
                "FUN_001052a0",
                "FUN_001058b0",
                "lbasename",
                "bfd_make_readable",
                "FUN_00107650",
                "open",
                "isatty",
                "FUN_00107640",
                "FUN_00103e95",
                "xrealloc",
                "dcgettext",
                "bfd_close",
                "getopt_long",
                "FUN_00107c10",
                "FUN_0010394a",
                "bfd_plugin_set_program_name",
                "bfd_set_error",
                "FUN_00107690",
                "bfd_set_format",
                "bfd_check_format_matches",
                "strtol",
                "bindtextdomain",
                "FUN_001075e0",
                "fprintf",
                "xmalloc",
                "FUN_00105870",
                "ftell",
                "fopen",
                "printf",
                "FUN_00107730",
                "xstrdup",
                "FUN_00107740",
                "xexit",
                "memcpy",
                "FUN_00105480",
                "strlen",
                "bfd_set_default_target",
                "FUN_00107cc0",
                "malloc",
                "FUN_00103bd1",
                "bfd_get_error",
                "fread",
                "bfd_plugin_set_plugin",
                "FUN_00105300",
                "FUN_00107c20",
                "ferror",
                "xmalloc_set_program_name",
                "filename_cmp",
                "bfd_bwrite",
                "FUN_00107920",
                "bfd_fdopenr",
                "memmove",
                "bfd_find_target",
                "FUN_00107890",
                "stat",
                "strcmp",
                "bfd_errmsg",
                "bfd_make_writable",
                "textdomain",
                "fseek",
                "bfd_set_error_program_name",
                "FUN_00105830",
                "bfd_init",
                "FUN_00103a78",
                "bfd_create",
                "fclose"
            ],
            "calling": [
                "entry"
            ],
            "code": "\n\n\nvoid process_files_00105db0(unsigned_integer argc,file *argv)\n\n{\n  byte_data *byte_pointer;\n  unsigned_integer *uint_pointer;\n  byte_data byte_var;\n  long *long_pointer;\n  undefined8 *undefined8_pointer;\n  undefined4 undefined4_var;\n  undefined4 undefined4_var;\n  bool bool_var1;\n  bool bool_var2;\n  char **char_double_pointer;\n  int *int_pointer;\n  undefined *undefined_pointer;\n  byte_data byte_var2;\n  char char_var;\n  int int_var;\n  unsigned_integer uint_var;\n  undefined4 undefined4_var;\n  file *file_var;\n  size_t size_var;\n  size_t size_var2;\n  byte_data *byte_pointer_2;\n  long *long_pointer_2;\n  file *file_pointer_2;\n  char *char_pointer;\n  long long_var;\n  ulong ulong_var;\n  undefined8 *undefined8_pointer_2;\n  undefined8 undefined8_var;\n  file *file_pointer_3;\n  long **long_double_pointer;\n  undefined8 undefined8_var;\n  char **char_ptr_ptr;\n  unsigned_integer extraout_edx_var;\n  char **char_ptr_ptr;\n  byte_data *byte_ptr;\n  long long_var;\n  long long_var;\n  undefined **undefined_pointer_pointer;\n  unsigned_integer uint_var;\n  char *char_pointer;\n  byte_data *byte_pointer;\n  char *char_pointer_3;\n  ulong ulong_var;\n  ulong ulong_var;\n  ulong ulong_var;\n  file *file_pointer;\n  char *char_pointer;\n  unsigned_integer uint_var;\n  int int_var;\n  char *ptr_char;\n  bool bool_var47;\n  byte_data byte_var48;\n  undefined8 undefined8_var;\n  file *file_pointer;\n  byte_data *byte_pointer;\n  char **char_pointer_pointer;\n  size_t size_var;\n  long long_var;\n  undefined buffer_pointer [2];\n  undefined u_stack_c6;\n  undefined5 u_stack_c5;\n  unsigned_integer uint_var;\n  \n  byte_var48 = 0;\n  ptr_char = (char *)(ulong)argc;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010d660 = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010d660);\n  bfd_plugin_set_program_name(DAT_0010d660);\n  char_pointer = (char *)argv;\n  file_var = argv;\n  if ((int)argc < 2) goto LAB_001062c6;\n  char_pointer_pointer = (char **)0x7d0;\n  file_pointer = (file *)0x1;\n  file_pointer = (file *)0x0;\n  file_pointer_2 = argv;\n  do {\n    uint_var = (unsigned_integer)file_pointer;\n    char_pointer = (char *)(long)(int)uint_var;\n    undefined8_var = (file *)((long)char_pointer * 8);\n    char_pointer = (char *)file_pointer_2;\n    if (**(char **)(&file_pointer_2->_flags + (long)char_pointer * 2) == '@') {\n      uint_var = (int)char_pointer_pointer - 1;\n      char_pointer_pointer = (char **)(ulong)uint_var;\n      if (uint_var == 0) {\n        long_pointer_2 = *(long **)file_pointer_2;\n        ptr_char = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(_stderr,ptr_char,long_pointer_2);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      char_pointer_3 = *(char **)(&file_pointer_2->_flags + (long)char_pointer * 2) + 1;\n      int_var = stat(char_pointer_3,(stat *)buffer_pointer);\n      if (-1 < int_var) {\n        if ((uint_var & 0xf000) == 0x4000) {\n          long_pointer_2 = *(long **)file_pointer_2;\n          ptr_char = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        file_var = fopen_file(char_pointer_3,\"r\");\n        if (file_var != (file *)0x0) {\n          int_var = fseek(file_var,0,2);\n          if (((int_var != -1) && (size_var = ftell(file_var), size_var != 0xffffffffffffffff)) &&\n             (int_var = fseek(file_var,0,0), int_var != -1)) {\n            byte_pointer = (byte_data *)xmalloc(size_var + 1);\n            size_var2 = fread(byte_pointer,1,size_var,file_var);\n            if ((size_var == size_var2) || (int_var = ferror(file_var), int_var == 0)) {\n              byte_pointer[size_var2] = 0;\n              byte_var2 = *byte_pointer;\n              byte_ptr = byte_pointer;\n              while( true ) {\n                if (byte_var2 == 0) goto LAB_00106814;\n                if (((&_sch_istable)[(ulong)byte_var2 * 2] & 0x40) == 0) break;\n                byte_var2 = byte_ptr[1];\n                byte_ptr = byte_ptr + 1;\n              }\n              size_var = strlen((char *)byte_pointer);\n              byte_pointer_2 = (byte_data *)xmalloc(size_var + 1);\n              file_pointer_3 = (file *)0x0;\n              int_var = 0;\n              bool_var2 = false;\n              bool_var47 = false;\n              bool_var1 = false;\n              long_var = 0;\n              byte_ptr = byte_pointer;\n              do {\n                while (((&_sch_istable)[(ulong)*byte_ptr * 2] & 0x40) != 0) {\n                  byte_ptr = byte_ptr + 1;\n                }\n                if ((int_var == 0) || (int_var + -1 <= (int)long_var)) {\n                  if (file_pointer_3 == (file *)0x0) {\n                    int_var = 8;\n                    file_pointer_3 = (file *)xmalloc(0x40);\n                    char_ptr_ptr = (char **)((long)&file_pointer_3->_flags + long_var * 8);\n                    *char_ptr_ptr = (char *)0x0;\n                  }\n                  else {\n                    int_var = int_var * 2;\n                    file_pointer_3 = (file *)xrealloc(file_pointer_3,(long)int_var << 3);\n                    char_ptr_ptr = (char **)((long)&file_pointer_3->_flags + long_var * 8);\n                    *char_ptr_ptr = (char *)0x0;\n                  }\n                }\n                else {\n                  char_ptr_ptr = (char **)((long)&file_pointer_3->_flags + long_var * 8);\n                }\n                byte_var2 = *byte_ptr;\n                byte_pointer = byte_pointer_2;\n                while (byte_var2 != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byte_var2 * 2] & 0x40) != 0) &&\n                       (!(bool)(bool_var2 | bool_var1 | bool_var47))) {\n                      bool_var1 = false;\n                      bool_var2 = false;\n                      bool_var47 = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!bool_var1) break;\n                    byte_ptr = byte_ptr + 1;\n                    *byte_pointer = byte_var2;\n                    byte_pointer = byte_pointer + 1;\n                    bool_var1 = false;\n                    byte_var2 = *byte_ptr;\n                    if (byte_var2 == 0) goto LAB_0010606f;\n                  }\n                  if (byte_var2 == 0x5c) {\n                    bool_var1 = true;\n                  }\n                  else if (bool_var47) {\n                    if (byte_var2 == 0x27) {\n                      bool_var47 = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *byte_pointer = byte_var2;\n                      byte_pointer = byte_pointer + 1;\n                    }\n                  }\n                  else if (bool_var2) {\n                    if (byte_var2 != 0x22) goto LAB_001061f1;\n                    bool_var2 = false;\n                  }\n                  else if (byte_var2 == 0x27) {\n                    bool_var47 = true;\n                  }\n                  else {\n                    if (byte_var2 != 0x22) goto LAB_001061f1;\n                    bool_var2 = true;\n                  }\n                  byte_pointer = byte_ptr + 1;\n                  byte_ptr = byte_ptr + 1;\n                  byte_var2 = *byte_pointer;\n                }\nLAB_0010606f:\n                *byte_pointer = 0;\n                long_pointer_2 = (long *)xstrdup(byte_pointer_2);\n                *char_ptr_ptr = (char *)long_pointer_2;\n                *(undefined8 *)(file_pointer_3->_shortbuf + long_var * 8 + -0x7b) = 0;\n                byte_var2 = *byte_ptr;\n                byte_var = (&_sch_istable)[(ulong)byte_var2 * 2];\n                while ((byte_var & 0x40) != 0) {\n                  byte_var2 = byte_ptr[1];\n                  byte_ptr = byte_ptr + 1;\n                  byte_var = (&_sch_istable)[(ulong)byte_var2 * 2];\n                }\n                long_var = long_var + 1;\n                if (byte_var2 == 0) {\n                  free(byte_pointer_2);\n                  if (file_pointer_2 == argv) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(byte_pointer);\n          }\n          fclose(file_var);\n        }\n      }\n    }\n    if ((int)ptr_char <= (int)(uint_var + 1)) {\nLAB_001062c6:\n      do {\n        if (_DAT_0010d65c < 0) goto LAB_001073cc;\nLAB_001062d3:\n        uint_var = (unsigned_integer)file_pointer;\n        int_var = bfd_init();\n        char_pointer_3 = \"fatal error: libbfd ABI mismatch\";\n        if (int_var != 0x118) goto LAB_00106803;\n        char_pointer_3 = \"x86_64-pc-linux-gnu\";\n        uint_var = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        undefined_pointer = PTR_DAT_0010d2e0;\n        file_pointer = (file *)(ulong)uint_var;\n        if ((char)uint_var != '\\0') {\n          if (__xexit_cleanup == (code *)0x0) {\n            __xexit_cleanup = FUN_00107cc0;\n          }\n          if (*(int *)(PTR_DAT_0010d2e0 + 8) < 0x20) {\nLAB_0010632b:\n            undefined_pointer = PTR_DAT_0010d2e0;\n            int_var = *(int *)(PTR_DAT_0010d2e0 + 8);\n            *(int *)(PTR_DAT_0010d2e0 + 8) = int_var + 1;\n            *(code **)(undefined_pointer + (long)int_var * 8 + 0x10) = FUN_00107730;\n          }\n          else {\n            undefined8_pointer_2 = (undefined8 *)malloc(0x110);\n            if (undefined8_pointer_2 != (undefined8 *)0x0) {\n              *undefined8_pointer_2 = undefined_pointer;\n              *(undefined4 *)(undefined8_pointer_2 + 1) = 0;\n              PTR_DAT_0010d2e0 = (undefined *)undefined8_pointer_2;\n              goto LAB_0010632b;\n            }\n          }\n          long_var = 1;\n          do {\n            long_var = long_var;\n            int_var = (int)ptr_char;\n            if (int_var <= (int)long_var) break;\n            char_var = FUN_00107640(*(undefined8 *)((int *)char_pointer + long_var * 2));\n            long_var = long_var + 1;\n          } while (char_var != '\\0');\n          ptr_char = (char *)((long)char_pointer + long_var * 8 + -8);\n          uint_var = int_var - ((int)long_var + -1);\n          file_var = (file *)(ulong)uint_var;\n          if (_DAT_0010d65c != 0) {\n            char_pointer = \"DhHUvVt\";\n            uint_var = 0;\n            while (int_var = getopt_long(file_var,ptr_char,\"DhHUvVt\",&PTR_DAT_0010d300), int_var != -1)\n            {\n              if (int_var < 0x77) {\n                if (0x43 < int_var) {\n                  switch(int_var) {\n                  case 0x44:\n                    _DAT_0010d2d0 = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    _DAT_0010d658 = 1;\n                    break;\n                  case 0x55:\n                    _DAT_0010d2d0 = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    _DAT_0010d654 = 1;\n                    break;\n                  case 0x74:\n                    uint_var = uint_var;\n                  }\n                }\n              }\n              else if (int_var == 0xc9) {\n                bfd_plugin_set_plugin(_optarg);\n              }\n            }\n            if ((int)uint_var < 2) {\nLAB_00107125:\n              char_pointer_3 = (char *)0x0;\n              FUN_0010394a();\n            }\n            else {\n              if (_DAT_0010d658 != 0) {\nLAB_0010711b:\n                FUN_0010394a();\n                goto LAB_00107125;\n              }\n              if (_DAT_0010d654 != 0) {\n                FUN_001075e0(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\n              file_pointer = (file *)0x0;\n              char_pointer = (char *)(long)_optind;\n              while( true ) {\n                if ((int)uint_var <= (int)char_pointer) goto LAB_00106f8b;\n                char_pointer_3 = *(char **)((int *)ptr_char + (long)char_pointer * 2);\n                if ((char)uint_var != '\\0') break;\n                uint_var = FUN_00107650();\n                char_pointer = (char *)((long)(int *)char_pointer + 1);\n                file_pointer = (file *)(ulong)((unsigned_integer)file_pointer | uint_var);\n              }\n            }\n            while (long_var = FUN_001052a0(char_pointer_3), long_var < 1) {\n              uint_var = 1;\nLAB_001071c4:\n              int_pointer = (int *)char_pointer;\n              char_pointer = (char *)((long)int_pointer + 1);\n              file_pointer = (file *)(ulong)((unsigned_integer)file_pointer | uint_var);\n              if ((int)uint_var <= (int)char_pointer) {\nLAB_00106f8b:\n                    \n                xexit(file_pointer);\n              }\n              char_pointer_3 = *(char **)((char *)((long)ptr_char + 0x83) + (long)int_pointer * 8 + -0x7b);\n            }\n            int_var = open_file(char_pointer_3,2,0);\n            if (int_var < 0) {\n              bfd_set_error(1);\n              FUN_00107c10(char_pointer_3);\nLAB_0010737f:\n              FUN_00107c10(char_pointer_3);\nLAB_00107387:\n              FUN_00107c20(char_pointer_3);\n              int_var = bfd_get_error();\n              if (int_var == 0xd) {\n                FUN_00103bd1(CONCAT53(u_stack_c5,\n                                      CONCAT12(u_stack_c6,CONCAT11(buffer_pointer[1],buffer_pointer[0]))));\n              }\n              goto LAB_0010700f;\n            }\n            char_pointer = (char *)bfd_fdopen_filer(char_pointer_3,0);\n            if ((file *)char_pointer == (file *)0x0) goto LAB_0010737f;\n            char_var = bfd_check_format_matches(char_pointer,2,buffer_pointer);\n            if (char_var == '\\0') goto LAB_00107387;\n            if ((*(byte_data *)((long)((long)char_pointer + 0x48) + 1) & 8) != 0) {\n              if (_DAT_0010d2d0 != 0) {\n                uint_pointer = (unsigned_integer *)((long)((long)char_pointer + 0x40) + 4);\n                *uint_pointer = *uint_pointer | 0x2000;\n              }\n              (**(code **)(*(char **)((long)char_pointer + 8) + 0x1f0))(char_pointer);\n              char_var = bfd_close(char_pointer);\n              if (char_var != '\\0') {\n                uint_var = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            undefined8_var = dcgettext(0,\"%s: no archive map to update\",5);\n            FUN_00107690(undefined8_var,char_pointer_3);\nLAB_001073cc:\n            char_pointer_3 = (char *)lbasename(DAT_0010d660);\n            size_var = strlen(char_pointer_3);\n            if ((size_var < 6) ||\n               (int_var = filename_cmp(char_pointer_3 + (size_var - 6),\"ranlib\"), int_var != 0)) {\n              _DAT_0010d65c = 0;\n            }\n            else {\n              _DAT_0010d65c = 1;\n            }\n            goto LAB_001062d3;\n          }\n          undefined_pointer_pointer = &PTR_DAT_0010d300;\n          char_pointer = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          char_pointer = (char *)&DAT_001096a0;\n          file_pointer_2 = (file *)char_pointer;\n          file_pointer_3 = file_var;\n          if ((int)uint_var < 2) goto switchD_00107462_caseD_1;\n          undefined8_var = (file *)CONCAT71(undefined8_var._1_7_,(char)uint_var);\nLAB_001063a3:\n          file_pointer_2 = (file *)char_pointer;\n          if (**(char **)((long)ptr_char + 8) != '-') {\n            buffer_pointer[0] = 0x2d;\n            u_stack_c6 = 0;\n            size_var = strlen(*(char **)((long)ptr_char + 8));\n            int_var = (int)size_var + (int)file_var;\n            file_pointer = (file *)xmalloc((long)int_var * 8);\n            undefined4_var = *(undefined4 *)((long)ptr_char + 4);\n            file_pointer->_flags = *(int *)ptr_char;\n            *(undefined4 *)&file_pointer->field_0x4 = undefined4_var;\n            char_ptr_ptr = *(char ***)((long)ptr_char + 8);\n            file_pointer = (file *)((long)ptr_char + 0x10);\n            char_pointer_pointer = char_ptr_ptr;\n            if (*(char *)char_ptr_ptr == '\\0') {\n              char_ptr_ptr = &file_pointer->_IO_read_ptr;\n            }\n            else {\n              byte_pointer = buffer_pointer;\n              buffer_pointer[1] = *(char *)char_ptr_ptr;\n              char_pointer_3 = (char *)xstrdup();\n              char_ptr_ptr = &file_pointer->_IO_read_end;\n              file_pointer->_IO_read_ptr = char_pointer_3;\n              if (*(char *)((long)char_ptr_ptr + 1) != '\\0') {\n                buffer_pointer[1] = *(char *)((long)char_ptr_ptr + 1);\n                char_pointer_3 = (char *)xstrdup(byte_pointer);\n                char_ptr_ptr = &file_pointer->_IO_read_base;\n                file_pointer->_IO_read_end = char_pointer_3;\n                if (*(char *)((long)char_ptr_ptr + 2) != '\\0') {\n                  buffer_pointer[1] = *(char *)((long)char_ptr_ptr + 2);\n                  char_pointer_3 = (char *)xstrdup(byte_pointer);\n                  char_ptr_ptr = &file_pointer->_IO_write_base;\n                  file_pointer->_IO_read_base = char_pointer_3;\n                  if (*(char *)((long)char_ptr_ptr + 3) != '\\0') {\n                    char_ptr_ptr = &file_pointer->_IO_write_ptr;\n                    buffer_pointer[1] = *(char *)((long)char_ptr_ptr + 3);\n                    char_pointer_3 = (char *)xstrdup(byte_pointer);\n                    file_pointer->_IO_write_base = char_pointer_3;\n                    char_var = *(char *)((long)char_ptr_ptr + 4);\n                    char_pointer_pointer = char_ptr_ptr;\n                    if (char_var != '\\0') {\n                      char_pointer_3 = (char *)((long)char_ptr_ptr + 4);\n                      char_ptr_ptr = char_ptr_ptr;\n                      do {\n                        char_ptr_ptr = char_ptr_ptr + 1;\n                        buffer_pointer[1] = char_var;\n                        char_pointer = (char *)xstrdup(byte_pointer);\n                        char_pointer_3 = char_pointer_3 + 1;\n                        *char_ptr_ptr = char_pointer;\n                        char_var = *char_pointer_3;\n                        char_ptr_ptr = char_ptr_ptr;\n                        char_pointer_pointer = char_ptr_ptr;\n                      } while (char_var != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            long_var = (long)(int)file_var;\n            int_pointer = (int *)ptr_char + long_var * 2;\n            if (file_pointer < int_pointer) {\n              ulong_var = long_var * 8 - 0x11;\n              if ((ulong_var < 0x18) || (char_ptr_ptr == (char **)((long)ptr_char + 0x18))) {\n                *char_ptr_ptr = *(char **)((long)ptr_char + 0x10);\n                if (((char **)((long)ptr_char + 0x18) < int_pointer) &&\n                   ((((char_ptr_ptr[1] = *(char **)((long)ptr_char + 0x18),\n                      (char **)((long)ptr_char + 0x20) < int_pointer &&\n                      (char_ptr_ptr[2] = *(char **)((long)ptr_char + 0x20),\n                      (char **)((long)ptr_char + 0x28) < int_pointer)) &&\n                     (char_ptr_ptr[3] = *(char **)((long)ptr_char + 0x28),\n                     (char **)((long)ptr_char + 0x30) < int_pointer)) &&\n                    (char_ptr_ptr[4] = *(char **)((long)ptr_char + 0x30),\n                    (char **)((long)ptr_char + 0x38) < int_pointer)))) {\n                  char_ptr_ptr[5] = *(char **)((long)ptr_char + 0x38);\n                  char_double_pointer = char_ptr_ptr + 6;\n                  for (char_ptr_ptr = (char **)((long)ptr_char + 0x40); char_ptr_ptr < int_pointer;\n                      char_ptr_ptr = char_ptr_ptr + (ulong)byte_var48 * -2 + 1) {\n                    *char_double_pointer = *char_ptr_ptr;\n                    char_double_pointer = char_double_pointer + (ulong)byte_var48 * -2 + 1;\n                  }\n                }\n              }\n              else {\n                undefined4_var = *(undefined4 *)((long)((long)ptr_char + 0x10) + 4);\n                undefined4_var = *(undefined4 *)((long)ptr_char + 0x18);\n                undefined4_var = *(undefined4 *)((long)((long)ptr_char + 0x18) + 4);\n                ulong_var = (ulong_var >> 3) + 1;\n                *(undefined4 *)char_ptr_ptr = *(undefined4 *)((long)ptr_char + 0x10);\n                *(undefined4 *)((long)char_ptr_ptr + 4) = undefined4_var;\n                *(undefined4 *)(char_ptr_ptr + 1) = undefined4_var;\n                *(undefined4 *)((long)char_ptr_ptr + 0xc) = undefined4_var;\n                undefined4_var = *(undefined4 *)((long)((long)ptr_char + 0x20) + 4);\n                undefined4_var = *(undefined4 *)((long)ptr_char + 0x28);\n                undefined4_var = *(undefined4 *)((long)((long)ptr_char + 0x28) + 4);\n                ulong_var = ulong_var >> 1;\n                *(undefined4 *)(char_ptr_ptr + 2) = *(undefined4 *)((long)ptr_char + 0x20);\n                *(undefined4 *)((long)char_ptr_ptr + 0x14) = undefined4_var;\n                *(undefined4 *)(char_ptr_ptr + 3) = undefined4_var;\n                *(undefined4 *)((long)char_ptr_ptr + 0x1c) = undefined4_var;\n                if (ulong_var != 2) {\n                  undefined4_var = *(undefined4 *)((long)((long)ptr_char + 0x30) + 4);\n                  undefined4_var = *(undefined4 *)((long)ptr_char + 0x38);\n                  undefined4_var = *(undefined4 *)((long)((long)ptr_char + 0x38) + 4);\n                  *(undefined4 *)(char_ptr_ptr + 4) = *(undefined4 *)((long)ptr_char + 0x30);\n                  *(undefined4 *)((long)char_ptr_ptr + 0x24) = undefined4_var;\n                  *(undefined4 *)(char_ptr_ptr + 5) = undefined4_var;\n                  *(undefined4 *)((long)char_ptr_ptr + 0x2c) = undefined4_var;\n                  if (ulong_var != 3) {\n                    ulong_var = 3;\n                    do {\n                      ulong_var = ulong_var + 1;\n                      char_pointer_3 = (char *)((long)ptr_char + 0x83) + ulong_var * 0x10 + -0x73;\n                      undefined4_var = *(undefined4 *)(char_pointer_3 + 4);\n                      undefined4_var = *(undefined4 *)(char_pointer_3 + 8);\n                      undefined4_var = *(undefined4 *)(char_pointer_3 + 0xc);\n                      char_ptr_ptr = char_ptr_ptr + ulong_var * 2;\n                      *(undefined4 *)char_ptr_ptr = *(undefined4 *)char_pointer_3;\n                      *(undefined4 *)((long)char_ptr_ptr + 4) = undefined4_var;\n                      *(undefined4 *)(char_ptr_ptr + 1) = undefined4_var;\n                      *(undefined4 *)((long)char_ptr_ptr + 0xc) = undefined4_var;\n                      ulong_var = ulong_var;\n                    } while (ulong_var != ulong_var);\n                  }\n                }\n                if ((ulong_var & 1) != 0) {\n                  char_ptr_ptr[ulong_var & 0xfffffffffffffffe] =\n                       *(char **)((long)file_pointer + (ulong_var & 0xfffffffffffffffe) * 8);\n                }\n              }\n              char_ptr_ptr = char_ptr_ptr + long_var + -2;\n            }\n            file_var = (file *)(ulong)(int_var - 1);\n            *char_ptr_ptr = (char *)0x0;\n            ptr_char = (char *)file_pointer;\n          }\nLAB_001065a2:\n          while( true ) {\n            uint_var = (unsigned_integer)file_pointer;\n            uint_var = getopt_long((ulong)file_var & 0xffffffff,ptr_char,file_pointer_2,undefined_pointer_pointer,0);\n            char_pointer = (char *)file_pointer_2;\n            if (uint_var == 0xffffffff) break;\n            if (((uint_var - 100 < 0x15) && ((0x117201UL >> ((ulong)(uint_var - 100) & 0x3f) & 1) != 0))\n               && (DAT_0010d64c != 0)) goto LAB_001067f7;\n            file_pointer_3 = (file *)ptr_char;\n            if (uint_var < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)char_pointer + (long)((int *)char_pointer)[uint_var]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            FUN_0010342d(0);\n            ptr_char = (char *)file_pointer_3;\nswitchD_00107462_caseD_68:\n            _DAT_0010d658 = 1;\n          }\nLAB_00106680:\n          uint_var = DAT_0010d64c;\n          file_pointer_2 = (file *)char_pointer;\n          if (DAT_0010d64c == 0) {\n            if (((DAT_0010d648 == 1) || (_DAT_0010d650 != 0)) ||\n               (((int)file_var <= _optind || (_optind < 1)))) {\n              uint_var = 0;\n              goto LAB_001066aa;\n            }\n            ptr_char = (char *)((long)ptr_char + (long)_optind * 8 + -8);\n            uint_var = (int)file_var - (_optind + -1);\n            file_var = (file *)(ulong)uint_var;\n            _optind = 0;\n            if (1 < (int)uint_var) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          file_pointer = (file *)((ulong)undefined8_var & 0xff);\n          uint_var = (unsigned_integer)file_pointer;\n          undefined_pointer_pointer = (undefined **)((int *)ptr_char + (long)_optind * 2);\n          if (_DAT_0010d658 == 0) {\n            if (_DAT_0010d654 != 0) {\n              FUN_001075e0(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (_DAT_0010d650 == 0) {\n              file_pointer_3 = (file *)ptr_char;\n              if (*undefined_pointer_pointer == (undefined *)0x0) goto switchD_00107462_caseD_1;\n              if (DAT_0010d64c == 7) {\n                if (DAT_0010d648 == 0) {\n                  if (uint_var == 3) goto LAB_00106abc;\n                  if (uint_var != 0) goto LAB_00106700;\nLAB_00106eff:\n                  char_pointer_3 = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                DAT_0010d64c = 2;\n                if (_DAT_0010d644 != 0) goto LAB_0010704f;\n              }\n              else if ((uint_var == 3) || (uint_var == 0)) {\n                if (DAT_0010d648 == 1) {\n                  undefined4_var = FUN_00107650();\n                    \n                  xexit(undefined4_var);\n                }\nLAB_00106abc:\n                if (uint_var == 0) goto LAB_00106eff;\n                if (_DAT_0010d644 != 0) {\nLAB_00106ad1:\n                  char_pointer_3 = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (_DAT_0010d644 != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\nLAB_00106720:\n              char_pointer = (char *)0x0;\n              if (DAT_0010d640 != 0) {\n                DAT_0010d638 = (long)*undefined_pointer_pointer;\n                char_pointer = (char *)0x1;\n                char_pointer_3 = \"missing position arg.\";\n                if (DAT_0010d638 == 0) goto LAB_00106803;\n              }\n              if (DAT_0010d634 != '\\0') {\n                char_pointer_3 = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((DAT_0010d64c & 0xfffffffb) == 1) {\n                  int_var = (int)char_pointer;\n                  if (*(char **)((long)undefined_pointer_pointer + (long)int_var * 2 * 4) == (char *)0x0) {\n                    undefined8_var = dcgettext(0,\"`N\\' missing value.\",5);\n                    FUN_00107690(undefined8_var);\n                    uint_var = extraout_edx_var;\nLAB_00107548:\n                    if (uint_var == 2) {\nLAB_0010704f:\n                      char_pointer_3 = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (_DAT_0010d2d0 < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  char_pointer = (char *)(ulong)(int_var + 1);\n                  long_var = strtol(*(char **)((long)undefined_pointer_pointer + (long)int_var * 2 * 4),(char **)0x0,10)\n                  ;\n                  char_pointer_3 = \"Value for `N\\' must be positive.\";\n                  _DAT_0010d630 = (int)long_var;\n                  if (0 < _DAT_0010d630) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              long_var = (long)(int)char_pointer;\n              file_pointer_2 = (file *)char_pointer;\n              if (*(long *)(int *)((long)undefined_pointer_pointer + long_var * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              file_pointer_2 = (file *)((long)undefined_pointer_pointer + (long_var + 1) * 2 * 4);\n              if (*(file **)file_pointer_2 == (file *)0x0) {\n                char_pointer = (char *)0x0;\n                file_pointer_2 = (file *)0x0;\n              }\n              else if (*(long *)((long)undefined_pointer_pointer + (long_var + 2) * 2 * 4) == 0) {\n                char_pointer = (char *)0x1;\n              }\n              else if (*(long *)((long)undefined_pointer_pointer + (long_var + 3) * 2 * 4) == 0) {\n                char_pointer = (char *)0x2;\n              }\n              else if (*(long *)((long)undefined_pointer_pointer + (long_var + 4) * 2 * 4) == 0) {\n                char_pointer = (char *)0x3;\n              }\n              else if (*(long *)((long)undefined_pointer_pointer + (long_var + 5) * 2 * 4) == 0) {\n                char_pointer = (char *)0x4;\n              }\n              else {\n                file_var = (file *)0x5;\n                do {\n                  char_pointer = (char *)file_var;\n                  file_var = (file *)((long)(int *)char_pointer + 1);\n                } while (*(long *)((int *)((long)undefined_pointer_pointer + long_var * 2 * 4) + (long)file_var * 2) !=\n                         0);\n              }\n              undefined8_pointer_2 = (undefined8 *)FUN_00105300();\n              file_var = file_pointer_2;\n              if (DAT_0010d64c == 5) {\n                char_pointer_3 = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte_data *)((long)undefined8_pointer_2 + 0x49) & 0x10) == 0) {\n                  char_pointer = (char *)file_pointer_2;\n                  if (DAT_0010d628 != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  FUN_00105480(undefined8_pointer_2,FUN_00107740,char_pointer,(ulong)char_pointer & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (DAT_0010d628 != (char *)0x0) {\nLAB_00106d5c:\n                size_var = strlen(DAT_0010d628);\n                ptr_char = \"__.LIBDEP\";\n                char_pointer = (char *)(size_var + 1);\n                DAT_0010d620 = bfd_create(\"__.LIBDEP\",undefined8_pointer_2);\n                if (DAT_0010d620 == 0) {\n                  char_pointer_3 = \"Cannot create libdeps record.\";\n                }\n                else {\n                  long_var = bfd_find_target(\"binary\",DAT_0010d620);\n                  char_pointer_3 = \"Cannot set libdeps record type to binary.\";\n                  if (long_var != 0) {\n                    char_var = bfd_set_format(DAT_0010d620,1,5);\n                    char_pointer_3 = \"Cannot set libdeps object format.\";\n                    if (char_var == '\\0') goto LAB_00106803;\n                    char_var = bfd_make_writable(DAT_0010d620,\"Cannot set libdeps object format.\",5);\n                    char_pointer_3 = \"Cannot make libdeps object writable.\";\n                    if (char_var == '\\0') goto LAB_00106803;\n                    file_pointer_3 = (file *)bfd_bwrite(DAT_0010d628,char_pointer,DAT_0010d620);\n                    char_pointer_3 = \"Cannot write libdeps record.\";\n                    if (file_pointer_3 != (file *)char_pointer) goto LAB_00106803;\n                    char_var = bfd_make_readable(DAT_0010d620,\"Cannot write libdeps record.\",5);\n                    char_pointer_3 = \"Cannot make libdeps object readable.\";\n                    if (char_var == '\\0') goto LAB_00106803;\n                    long_var = bfd_find_target(\"plugin\",DAT_0010d620,5);\n                    char_pointer_3 = \"Cannot reset libdeps record type.\";\n                    if (long_var == 0) goto LAB_00106803;\n                    int_var = (int)char_pointer;\n                    undefined8_var = (file *)((long)(int_var + 2) * 8);\n                    char_pointer = (char *)xmalloc(undefined8_var,\"Cannot reset libdeps record type.\");\n                    if (int_var == 0) {\n                      long_var = 0;\n                    }\n                    else {\n                      undefined4_var = *(undefined4 *)&file_pointer_2->field_0x4;\n                      *(int *)char_pointer = file_pointer_2->_flags;\n                      *(undefined4 *)((long)char_pointer + 4) = undefined4_var;\n                      long_var = 8;\n                      char_ptr_ptr = (char **)((long)char_pointer + 8);\n                      for (char_pointer = undefined8_var[-1]._unused2 + 4; char_pointer != (char *)0x0;\n                          char_pointer = char_pointer + -1) {\n                        *(undefined *)char_ptr_ptr = *(undefined *)&file_pointer_2->_flags;\n                        file_pointer_2 = (file *)((long)file_pointer_2 + (ulong)byte_var48 * -2 + 1);\n                        char_ptr_ptr = (char **)((long)char_ptr_ptr + (ulong)byte_var48 * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)char_pointer + long_var) = \"__.LIBDEP\";\n                    char_pointer = (char *)(ulong)(int_var + 1);\n                    *(undefined8 *)\n                     (((file *)((long)char_pointer + -0xd8))->_unused2 + 0xc + (long)undefined8_var) = 0;\n                    switch(DAT_0010d64c) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      file_pointer_2 = (file *)char_pointer;\n                      if (_DAT_0010d610 == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(DAT_0010d64c) {\n              case 1:\n                char_pointer = (char *)file_pointer_2;\n                if (file_pointer_2 == (file *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                file_var = (file *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                char_pointer = (char *)file_pointer_2;\n                if ((file_pointer_2 != (file *)0x0) || (0 < DAT_0010d648)) {\nswitchD_00106ed8_caseD_2:\n                  FUN_00105570(undefined8_pointer_2,char_pointer,DAT_0010d64c == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                char_pointer = (char *)file_pointer_2;\nswitchD_00106ed8_caseD_3:\n                FUN_00105480(undefined8_pointer_2,FUN_00107890,char_pointer,(ulong)char_pointer & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                char_pointer = (char *)file_pointer_2;\nswitchD_00106ed8_caseD_4:\n                FUN_00105480(undefined8_pointer_2,FUN_00103a78,char_pointer,(ulong)char_pointer & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                char_pointer_3 = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (_DAT_0010d610 != 0) goto switchD_001067e8_caseD_2;\n                if (file_pointer_2 == (file *)0x0) break;\nLAB_00106afb:\n                file_var = (file *)(undefined8_pointer_2 + 0x1e);\n                do {\n                  file_pointer = file_var;\n                  if (*(file **)file_pointer_2 == (file *)0x0) {\nLAB_00106b9f:\n                    FUN_001058b0(undefined8_pointer_2);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    long_pointer_2 = *(long **)file_pointer;\n                    ptr_char = *(char **)file_pointer_2;\n                    if (long_pointer_2 == (long *)0x0) {\n                      undefined8_var = *undefined8_pointer_2;\n                      undefined8_var = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      FUN_00107690(undefined8_var,ptr_char,undefined8_var);\n                      char_pointer = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    long_var = *long_pointer_2;\n                    undefined8_var = FUN_00105830(ptr_char,undefined8_pointer_2);\n                    int_var = filename_cmp(undefined8_var,long_var);\n                    if (int_var == 0) break;\n                    file_pointer = (file *)(*(long **)file_pointer + 0x1e);\n                  }\n                  *(long **)file_pointer = (long *)long_pointer_2[0x1e];\n                  long_double_pointer = (long **)FUN_00105870(file_var,3,0);\n                  bool_var47 = DAT_0010d60c != 0;\n                  long_pointer = *long_double_pointer;\n                  *long_double_pointer = long_pointer_2;\n                  long_pointer_2[0x1e] = (long)long_pointer;\n                  if (bool_var47) {\n                    printf(\"m - %s\\n\",*(file **)file_pointer_2);\n                  }\n                  file_pointer_2 = (file *)&file_pointer_2->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < _DAT_0010d2d0) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            FUN_0010342d(1);\n          }\n          _DAT_0010d2d0 = 1;\nLAB_0010755f:\n          int_var = fileno(_stdin);\n          _DAT_0010d608 = isatty(int_var);\n          FUN_00103e95();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        undefined4_var = bfd_get_error();\n        file_pointer_2 = (file *)bfd_errmsg(undefined4_var);\n        undefined8_var = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        int_var = FUN_00107690(undefined8_var,\"x86_64-pc-linux-gnu\",file_pointer_2);\nLAB_0010751b:\n        if (DAT_0010d64c == 0) {\nLAB_00107447:\n          undefined_pointer_pointer = (undefined **)char_pointer_3;\n          file_pointer_3 = (file *)ptr_char;\n          switch(int_var) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            _DAT_0010d2d0 = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            _DAT_0010d650 = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            DAT_0010d634 = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            _DAT_0010d5fc = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            DAT_0010d5f9 = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            DAT_0010d648 = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            DAT_0010d5f8 = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            _DAT_0010d2d0 = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            _DAT_0010d654 = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            DAT_0010d640 = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            DAT_0010d640 = 1;\n            goto LAB_001065a2;\n          case 99:\n            _DAT_0010d610 = 1;\n            goto LAB_001065a2;\n          case 100:\n            DAT_0010d64c = 1;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            DAT_0010d5fa = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (DAT_0010d628 == (char *)0x0) {\n              DAT_0010d628 = _optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            uint_var = (unsigned_integer)file_pointer;\n            char_pointer_3 = \"libdeps specified more than once\";\n            char_pointer = (char *)file_pointer_2;\n            break;\n          case 0x6d:\n            DAT_0010d64c = 6;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            _DAT_0010d600 = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            DAT_0010d64c = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            DAT_0010d64c = 7;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            DAT_0010d64c = 2;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            DAT_0010d648 = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            DAT_0010d64c = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            _DAT_0010d644 = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            DAT_0010d60c = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            DAT_0010d64c = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(_optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            DAT_0010d5f0 = _optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            DAT_0010d5e8 = _optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        char_pointer_3 = \"two different operation options specified\";\n        char_pointer = (char *)file_pointer_2;\nLAB_00106803:\n        undefined8_var = dcgettext(0,char_pointer_3,5);\n        FUN_00107690(undefined8_var);\nLAB_00106814:\n        int_var = (int)ptr_char;\n        file_pointer_3 = (file *)xmalloc(8);\n        *(long **)file_pointer_3 = (long *)0x0;\n        if ((file *)char_pointer == argv) {\nLAB_00106834:\n          if (*(long **)char_pointer == (long *)0x0) {\n            int_var = 0;\n          }\n          else {\n            long_var = 1;\n            do {\n              int_var = (int)long_var;\n              long_var = long_var * 2;\n              long_var = long_var + 1;\n            } while (*(long *)((int *)char_pointer + long_var) != 0);\n          }\n          file_pointer_2 = (file *)xmalloc((long)(int_var + 1) << 3);\n          long_pointer_2 = *(long **)char_pointer;\n          long_var = 0;\n          while (long_pointer_2 != (long *)0x0) {\n            undefined8_var = xstrdup();\n            *(undefined8 *)((long)&file_pointer_2->_flags + long_var) = undefined8_var;\n            long_pointer_2 = *(long **)((char *)((long)char_pointer + 0x83) + long_var + -0x7b);\n            long_var = long_var + 8;\n          }\n          *(undefined8 *)((long)&file_pointer_2->_flags + long_var) = 0;\nLAB_0010610a:\n          int_var = (int)ptr_char;\n          char_pointer = (char *)file_pointer_2;\n          if (*(long **)file_pointer_3 == (long *)0x0) goto LAB_00106a80;\n          long_var = 0;\n          do {\n            long_var = long_var + 1;\n            long_var = long_var * 8;\n            long_var = long_var;\n          } while (*(long *)(file_pointer_3->_shortbuf + long_var + -0x7b) != 0);\n          size_var = long_var * 8;\n        }\n        else {\nLAB_00106a80:\n          long_var = 0;\n          size_var = 0;\n        }\n        long_var = (long)char_pointer * 2;\n        char_pointer = (char *)((long)(char **)char_pointer + long_var);\n        free(*(void **)((int *)char_pointer + long_var));\n        file_pointer_2 = (file *)xrealloc(char_pointer,(long_var + 1 + (long)int_var) * 8);\n        uint_var = int_var + -1 + (int)long_var;\n        ptr_char = (char *)(ulong)uint_var;\n        memmove(&file_pointer_2->_flags + (long)char_pointer * 2,\n                (void *)((long)&file_pointer_2->_IO_read_ptr + (long)undefined8_var),\n                (long)(int)(int_var - uint_var) << 3);\n        memcpy((void *)((long)&undefined8_var->_flags + (long)&file_pointer_2->_flags),file_pointer_3,size_var);\n        free(file_pointer_3);\n        free(byte_pointer);\n        fclose(file_var);\n        uint_var = (int)file_pointer + 1;\n        file_pointer = undefined8_var;\n        char_pointer = (char *)file_pointer_2;\n        undefined8_var = file_pointer_3;\n        if ((int)uint_var < (int)uint_var) goto LAB_001061ce;\n      } while( true );\n    }\n    uint_var = uint_var + 1;\n    file_pointer = file_pointer;\nLAB_001061ce:\n    file_pointer = (file *)(ulong)uint_var;\n  } while( true );\nswitchD_00107462_caseD_0:\n  int_var = getopt_long((ulong)file_var & 0xffffffff,ptr_char,file_pointer_2,\"x86_64-pc-linux-gnu\");\n  char_pointer = (char *)file_pointer_2;\n  if (int_var == -1) goto LAB_00106680;\n  if ((0x14 < int_var - 100U) || ((0x117201UL >> ((byte_data)(int_var - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (_DAT_0010d2d0 != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  undefined8_var = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  FUN_00107920(undefined8_var);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(file **)char_pointer == (file *)0x0) {\n    if ((char)file_var != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    DAT_0010d618 = 0;\n    goto LAB_0010696c;\n  }\n  int_var = 0;\n  int_var = strcmp((char *)*(file **)char_pointer,\"__.SYMDEF\");\n  undefined8_pointer = undefined8_pointer_2;\n  if (int_var == 0) {\n    *(byte_data *)((long)undefined8_pointer_2 + 0x49) = *(byte_data *)((long)undefined8_pointer_2 + 0x49) & 0xf7;\n    DAT_0010d648 = -1;\n  }\n  else {\n    while( true ) {\n      long_pointer_2 = undefined8_pointer + 0x1e;\n      if ((undefined8 *)*long_pointer_2 == (undefined8 *)0x0) break;\n      undefined8_var = *(undefined8 *)*long_pointer_2;\n      undefined8_var = FUN_00105830(*(file **)char_pointer,undefined8_pointer_2);\n      int_var = filename_cmp(undefined8_var,undefined8_var);\n      if ((int_var == 0) &&\n         ((DAT_0010d634 == '\\0' || (int_var = int_var + 1, int_var == _DAT_0010d630)))) {\n        if (DAT_0010d60c != 0) {\n          printf(\"d - %s\\n\",*(file **)char_pointer);\n        }\n        *long_pointer_2 = *(long *)(*long_pointer_2 + 0xf0);\n        file_var = file_pointer;\n        goto LAB_00106d38;\n      }\n      undefined8_pointer = (undefined8 *)*long_pointer_2;\n    }\n    if (DAT_0010d60c != 0) {\n      file_pointer_2 = *(file **)char_pointer;\n      ptr_char = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(ptr_char,file_pointer_2);\n    }\n  }\nLAB_00106d38:\n  char_pointer = (char *)((long)char_pointer + 8);\n  goto LAB_00106b89;\n}\n\n",
            "current_name": "process_files_00105db0",
            "entrypoint": "0x00105db0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FILE": "file",
                "FUN_00105db0": "process_files_00105db0",
                "__ptr": "byte_pointer_2",
                "bVar13": "byte_var2",
                "bVar3": "byte_var",
                "bVar47": "bool_var47",
                "bVar48": "byte_var48",
                "bVar8": "bool_var1",
                "bVar9": "bool_var2",
                "bfd_close": "close_bfd",
                "bfd_get_error": "get_bfd_error",
                "bfd_make_readable": "make_bfd_readable",
                "bfd_plugin_set_plugin": "set_bfd_plugin",
                "bfd_plugin_set_program_name": "set_plugin_program_name",
                "bfd_set_error": "set_bfd_error",
                "byte": "byte_data",
                "cVar14": "char_var",
                "dcgettext": "gettext_text",
                "extraout_EDX": "extraout_edx_var",
                "fileno": "file_number",
                "fprintf": "print_to_file",
                "fread": "read_from_file",
                "getopt_long": "get_long_option",
                "iVar15": "int_var",
                "iVar45": "int_var",
                "isatty": "is_terminal",
                "lVar24": "long_var",
                "lVar29": "long_val2",
                "lVar34": "long_var",
                "lVar35": "long_var",
                "lbasename": "get_base_name",
                "local_100": "long_var",
                "local_108": "size_var",
                "local_110": "char_pointer_pointer",
                "local_118": "byte_pointer",
                "local_128": "file_pointer",
                "local_130": "undefined8_var",
                "local_b0": "uint_var",
                "local_c8": "buffer_pointer",
                "open": "open_file",
                "pFVar18": "file_var",
                "pFVar22": "file_pointer_2",
                "pFVar28": "file_pointer_3",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "byte_pointer",
                "pbVar33": "byte_ptr",
                "pbVar38": "byte_pointer",
                "pcVar23": "char_pointer",
                "pcVar31": "char_pointer_1",
                "pcVar39": "char_pointer_3",
                "pcVar43": "char_pointer",
                "pcVar46": "ptr_char",
                "piVar11": "int_pointer",
                "plVar21": "long_pointer_2",
                "plVar29": "long_ptr_ptr",
                "plVar4": "long_pointer",
                "ppcVar10": "char_double_pointer",
                "ppcVar31": "char_ptr_ptr",
                "ppcVar32": "char_ptr_ptr",
                "pplVar29": "long_double_pointer",
                "ppuVar36": "undefined_pointer_pointer",
                "puVar12": "undefined_pointer",
                "puVar2": "uint_pointer",
                "puVar26": "undefined8_pointer_2",
                "puVar5": "undefined8_pointer",
                "sVar19": "size_var",
                "sVar20": "size_var2",
                "setlocale": "set_locale",
                "uStack_c5": "u_stack_c5",
                "uStack_c6": "u_stack_c6",
                "uVar1": "val_undef4",
                "uVar16": "uint_var",
                "uVar17": "undefined4_var",
                "uVar2": "valu_undef4",
                "uVar25": "ulong_var",
                "uVar27": "undefined8_var",
                "uVar30": "undefined8_var",
                "uVar37": "uint_var",
                "uVar40": "ulong_var",
                "uVar41": "ulong_var",
                "uVar42": "ulong_var",
                "uVar44": "uint_var",
                "uVar6": "undefined4_var",
                "uVar7": "undefined4_var",
                "uint": "unsigned_integer",
                "unaff_R12": "file_pointer",
                "unaff_RBP": "char_pointer",
                "xmalloc": "allocate_memory",
                "xrealloc": "reallocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001075e0": {
            "additional_data": {
                "FUN_001075e0": {
                    "1": "print_version_information",
                    "2": "print_welcome_message",
                    "20": "print_version_info"
                },
                "__format": {
                    "1": "format"
                },
                "param_1": {
                    "1": "package_name",
                    "15": "version",
                    "2": "version_number",
                    "3": "version_string",
                    "5": "program_name"
                },
                "pcVar1": {
                    "1": "copyright_msg",
                    "12": "copyright_message",
                    "2": "copyright",
                    "7": "copyright_text"
                }
            },
            "called": [
                "exit",
                "dcgettext",
                "printf"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid print_version_info_001075e0(undefined8 version)\n\n{\n  char *copyright_message;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  copyright_message = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyright_message);\n  copyright_message = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyright_message);\n                    \n  exit(0);\n}\n\n",
            "current_name": "print_version_info_001075e0",
            "entrypoint": "0x001075e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001075e0": "print_version_info_001075e0",
                "param_1": "version",
                "pcVar1": "copyright_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107640": {
            "additional_data": {
                "0": {
                    "1": "success"
                },
                "<no parameters>": {
                    "1": ""
                },
                "<no variables>": {
                    "1": ""
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "ARG_8": {
                    "1": "result"
                },
                "DAT_00108036": {
                    "1": "program_name"
                },
                "FUN_00107640": {
                    "1": "get_zero_value",
                    "2": "clear_memory",
                    "3": "initialize_program",
                    "7": "get_default_value",
                    "9": "initialize"
                },
                "PTR_buffer": {
                    "1": "buffer_ptr"
                },
                "PTR_local_data": {
                    "1": "local_data_ptr"
                },
                "RETURN_VALUE": {
                    "1": "result"
                },
                "arg1": {
                    "1": "num_threads"
                },
                "dat_1": {
                    "1": "data"
                },
                "ptr_1": {
                    "1": "data_pointer"
                },
                "ptr_2": {
                    "1": "temp_pointer"
                },
                "return": {
                    "2": "result",
                    "3": "return_value"
                },
                "undefined8": {
                    "1": "uintptr_t",
                    "4": "uint64_t",
                    "9": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid initialize_00107640(void)\n\n{\n  return_value 0;\n}\n\n",
            "current_name": "initialize_00107640",
            "entrypoint": "0x00107640",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107640": "initialize_00107640",
                "return": "return_value",
                "undefined8": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107650": {
            "additional_data": {
                "DAT_0010d648": {
                    "1": "initialized_flag",
                    "2": "flag"
                },
                "FUN_0010284b": {
                    "1": "perform_other_task",
                    "2": "exit_program"
                },
                "FUN_001052a0": {
                    "1": "get_nonzero_value",
                    "2": "get_value",
                    "6": "get_count"
                },
                "FUN_00105300": {
                    "1": "process_input_param",
                    "6": "process_data"
                },
                "FUN_001058b0": {
                    "1": "clean_up_resources",
                    "4": "cleanup_data",
                    "6": "cleanup"
                },
                "FUN_00107650": {
                    "1": "check_validity",
                    "2": "check_function",
                    "3": "check_and_process_input",
                    "4": "check_and_initialize",
                    "7": "check_and_process_data"
                },
                "lVar2": {
                    "1": "value",
                    "10": "result",
                    "4": "function_result",
                    "5": "count"
                },
                "lVar3": {
                    "1": "return_value"
                },
                "param_1": {
                    "1": "binary_data",
                    "12": "input_data",
                    "4": "data",
                    "6": "input",
                    "7": "input_param"
                },
                "uVar1": {
                    "1": "is_success",
                    "19": "result",
                    "2": "status",
                    "8": "return_value"
                },
                "xexit": {
                    "13": "exit_program",
                    "3": "terminate_program"
                }
            },
            "called": [
                "xexit",
                "FUN_0010284b",
                "FUN_001052a0",
                "FUN_00105300",
                "FUN_001058b0"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nundefined8 check_and_process_data_00107650(undefined8 input_data)\n\n{\n  undefined8 result;\n  long result;\n  \n  result = FUN_001052a0();\n  if (result < 1) {\n    result = 1;\n  }\n  else {\n    DAT_0010d648 = 1;\n    result = FUN_00105300(input_data,0);\n    if (result == 0) {\n                    \n      xexit(1);\n    }\n    FUN_001058b0(result);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "check_and_process_data_00107650",
            "entrypoint": "0x00107650",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107650": "check_and_process_data_00107650",
                "lVar2": "result",
                "param_1": "input_data",
                "uVar1": "result",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107690": {
            "additional_data": {
                "FUN_00107690": {
                    "1": "decode_and_exit",
                    "10": "process_data",
                    "2": "extract_data_and_exit",
                    "7": "reverse_and_exit"
                },
                "FUN_001078c0": {
                    "1": "helper_function"
                },
                "in_AL": {
                    "1": "condition_check",
                    "15": "flag",
                    "2": "input_flag"
                },
                "local_18": {
                    "1": "parameter_8_copy",
                    "2": "local_var8",
                    "3": "local_input8",
                    "5": "input_8_copy"
                },
                "local_28": {
                    "1": "local_copy7",
                    "2": "local_param7",
                    "3": "input7_copy",
                    "5": "input_7_copy"
                },
                "local_38": {
                    "1": "local_arg6",
                    "2": "local_var6",
                    "3": "local_input6",
                    "5": "input_6_copy"
                },
                "local_48": {
                    "1": "value5_copy",
                    "2": "local_var5",
                    "3": "input5_copy",
                    "5": "input_5_copy"
                },
                "local_58": {
                    "1": "input4",
                    "2": "local_param4",
                    "3": "input4_copy",
                    "5": "input_4_copy"
                },
                "local_68": {
                    "1": "output3",
                    "2": "local_var3",
                    "3": "input3_copy",
                    "5": "input_3_copy"
                },
                "local_78": {
                    "1": "input2",
                    "2": "input_param_2_copy",
                    "3": "local_input2",
                    "5": "input_2_copy"
                },
                "local_88": {
                    "1": "input1",
                    "2": "local_var1",
                    "3": "input1_copy",
                    "5": "input_1_copy"
                },
                "local_90": {
                    "1": "local_arg6",
                    "2": "pointer_param_6_copy",
                    "3": "param_14",
                    "5": "param_14_copy"
                },
                "local_98": {
                    "1": "data_val_5",
                    "2": "value4",
                    "3": "param_13",
                    "5": "param_13_copy"
                },
                "local_a0": {
                    "1": "local_param_12",
                    "2": "pointer_param_4_copy",
                    "3": "param_12",
                    "5": "param_12_copy"
                },
                "local_a8": {
                    "1": "buffer2",
                    "2": "pointer_param_3_copy",
                    "3": "param_11",
                    "5": "param_11_copy"
                },
                "local_b0": {
                    "1": "param_b_updated",
                    "2": "value1",
                    "3": "param_10",
                    "5": "param_10_copy"
                },
                "local_b8": {
                    "1": "local_array_data",
                    "3": "temp_buffer",
                    "5": "buffer",
                    "7": "local_buffer"
                },
                "local_c8": {
                    "1": "buffer2",
                    "15": "local_buffer",
                    "2": "pointer2",
                    "3": "local_array",
                    "5": "buffer"
                },
                "local_d0": {
                    "1": "data",
                    "2": "local_ptr",
                    "3": "buffer_ptr",
                    "4": "buffer"
                },
                "local_d4": {
                    "1": "loop_count",
                    "2": "constant",
                    "6": "buffer_size"
                },
                "local_d8": {
                    "1": "size_1",
                    "10": "size",
                    "2": "stack_size",
                    "3": "local_size",
                    "7": "buffer_size"
                },
                "param_1": {
                    "1": "buffer1_copy",
                    "3": "input_param_1",
                    "4": "input_param1",
                    "6": "input_1",
                    "9": "input1"
                },
                "param_10": {
                    "1": "param_b",
                    "2": "input_param10",
                    "3": "param_10",
                    "5": "param2"
                },
                "param_11": {
                    "1": "param_c",
                    "2": "variable3",
                    "3": "param_11",
                    "5": "param3"
                },
                "param_12": {
                    "1": "address4",
                    "2": "value_4",
                    "3": "param_12",
                    "5": "param4"
                },
                "param_13": {
                    "1": "param_e",
                    "2": "input_param13",
                    "3": "param_13",
                    "5": "param5"
                },
                "param_14": {
                    "1": "input_param_14",
                    "2": "param14",
                    "3": "param_14",
                    "5": "param6"
                },
                "param_2": {
                    "1": "var_args",
                    "3": "input_param_2",
                    "4": "input_param2",
                    "6": "input_2",
                    "9": "input2"
                },
                "param_3": {
                    "1": "third_param",
                    "10": "input3",
                    "3": "input_param_3",
                    "4": "input_param3",
                    "7": "input_3"
                },
                "param_4": {
                    "1": "arg4",
                    "10": "input4",
                    "3": "input_param_4",
                    "4": "input_param4",
                    "7": "input_4"
                },
                "param_5": {
                    "1": "value5",
                    "10": "input5",
                    "3": "input_param_5",
                    "4": "input_param5",
                    "7": "input_5"
                },
                "param_6": {
                    "1": "option6",
                    "10": "input6",
                    "3": "input_param_6",
                    "4": "input_param6",
                    "7": "input_6"
                },
                "param_7": {
                    "1": "input_data_7",
                    "10": "input7",
                    "3": "input_param_7",
                    "4": "input_param7",
                    "7": "input_7"
                },
                "param_8": {
                    "1": "eighth_param",
                    "10": "input8",
                    "3": "input_param_8",
                    "4": "input_param8",
                    "7": "input_8"
                },
                "param_9": {
                    "1": "input_param_9",
                    "2": "param9",
                    "3": "param_9",
                    "5": "param1"
                },
                "xexit": {
                    "1": "exit_program"
                }
            },
            "called": [
                "xexit",
                "FUN_001078c0"
            ],
            "calling": [
                "FUN_001028ed",
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00103a78",
                "FUN_00102c25"
            ],
            "code": "\nvoid process_data_00107690(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param1,undefined8 param2,undefined8 param3,undefined8 param4,\n                 undefined8 param5,undefined8 param6)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 buffer_size;\n  undefined *buffer_pointer;\n  undefined *local_buffer;\n  undefined local_buffer [8];\n  undefined8 param_10_copy;\n  undefined8 param_11_copy;\n  undefined8 param_12_copy;\n  undefined8 param_13_copy;\n  undefined8 param_14_copy;\n  undefined4 input_1_copy;\n  undefined4 input_2_copy;\n  undefined4 input_3_copy;\n  undefined4 input_4_copy;\n  undefined4 input_5_copy;\n  undefined4 input_6_copy;\n  undefined4 input_7_copy;\n  undefined4 input_8_copy;\n  \n  if (flag != '\\0') {\n    input_1_copy = input1;\n    input_2_copy = input2;\n    input_3_copy = input3;\n    input_4_copy = input4;\n    input_5_copy = input5;\n    input_6_copy = input6;\n    input_7_copy = input7;\n    input_8_copy = input8;\n  }\n  buffer_pointer = &stack0x00000008;\n  size = 8;\n  local_buffer = local_buffer;\n  buffer_size = 0x30;\n  param_10_copy = param2;\n  param_11_copy = param3;\n  param_12_copy = param4;\n  param_13_copy = param5;\n  param_14_copy = param6;\n  FUN_001078c0(param1,&size);\n                    \n  xexit(1);\n}\n\n",
            "current_name": "process_data_00107690",
            "entrypoint": "0x00107690",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107690": "process_data_00107690",
                "in_AL": "flag",
                "local_18": "input_8_copy",
                "local_28": "input_7_copy",
                "local_38": "input_6_copy",
                "local_48": "input_5_copy",
                "local_58": "input_4_copy",
                "local_68": "input_3_copy",
                "local_78": "input_2_copy",
                "local_88": "input_1_copy",
                "local_90": "param_14_copy",
                "local_98": "param_13_copy",
                "local_a0": "param_12_copy",
                "local_a8": "param_11_copy",
                "local_b0": "param_10_copy",
                "local_b8": "local_buffer",
                "local_c8": "local_buffer",
                "local_d0": "buffer_pointer",
                "local_d4": "buffer_size",
                "local_d8": "size",
                "param_1": "input1",
                "param_10": "param2",
                "param_11": "param3",
                "param_12": "param4",
                "param_13": "param5",
                "param_14": "param6",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param1",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107730": {
            "additional_data": {
                "DAT_0010d5d8": {
                    "1": "file_to_close",
                    "4": "file_pointer"
                },
                "DAT_0010d5e0": {
                    "2": "cache_enabled",
                    "4": "is_cache_open"
                },
                "DAT_0010d618": {
                    "1": "file_to_cleanup",
                    "4": "file_path"
                },
                "FILE": {
                    "2": "file"
                },
                "FUN_00102bf5": {
                    "1": "initialize_cache",
                    "2": "deallocate_resources",
                    "6": "close_bfd_cache"
                },
                "FUN_00107730": {
                    "1": "cleanup_and_unlink_file",
                    "2": "cleanup_resources",
                    "3": "cleanup_files",
                    "4": "cleanup",
                    "5": "cleanup_function"
                },
                "PTR_0010d618": {
                    "1": "file_path"
                },
                "bfd_cache_close": {
                    "2": "close_bfd_cache",
                    "5": "close_cache"
                },
                "fclose": {
                    "8": "close_file"
                },
                "unlink_if_ordinary": {
                    "1": "remove_binary_file",
                    "18": "remove_file",
                    "3": "unlink_file"
                },
                "void": {
                    "1": ""
                }
            },
            "called": [
                "FUN_00102bf5"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid cleanup_function_00107730(void)\n\n{\n  if (DAT_0010d618 == 0) {\n    return;\n  }\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (file *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "current_name": "cleanup_function_00107730",
            "entrypoint": "0x00107730",
            "imported": false,
            "improved": true,
            "renaming": {
                "FILE": "file",
                "FUN_00107730": "cleanup_function_00107730",
                "bfd_cache_close": "close_cache",
                "fclose": "close_file",
                "unlink_if_ordinary": "remove_file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107740": {
            "additional_data": {
                "*puVar9": {
                    "1": "local_variable"
                },
                "DAT_0010d5d8": {
                    "1": "file_pointer"
                },
                "DAT_0010d600": {
                    "1": "check_stat_flag"
                },
                "DAT_0010d618": {
                    "1": "filename"
                },
                "DAT_0010d638": {
                    "1": "internal_stat_error_message"
                },
                "FILE": {
                    "1": "file_pointer"
                },
                "FUN_00105a20": {
                    "1": "create_temp_file"
                },
                "FUN_00107690": {
                    "1": "print_error_message"
                },
                "FUN_00107740": {
                    "1": "find_file",
                    "2": "process_files",
                    "3": "extract_and_process_archive",
                    "6": "extract_archive"
                },
                "FUN_00107c80": {
                    "1": "process_valid_archive"
                },
                "F_UNPACK_AND_READ_ARCHIVE": {
                    "1": "unpack_and_read_archive"
                },
                "_Stack_b0": {
                    "1": "new_permissions",
                    "16": "file_permissions",
                    "2": "permissions",
                    "4": "file_permission",
                    "6": "file_mode"
                },
                "__errno_location": {
                    "1": "get_error_number_location"
                },
                "__n": {
                    "1": "read_bytes",
                    "2": "buffer_size",
                    "22": "bytes_read",
                    "6": "read_size"
                },
                "__ptr": {
                    "1": "buffer_ptr",
                    "27": "buffer",
                    "3": "buffer_pointer"
                },
                "bfd_bread": {
                    "1": "read_from_archive"
                },
                "bfd_seek": {
                    "1": "seek_archive"
                },
                "chmod": {
                    "1": "change_file_permissions"
                },
                "dcgettext": {
                    "1": "get_error_message_translation"
                },
                "fclose": {
                    "1": "close_file"
                },
                "filename_cmp": {
                    "1": "compare_filenames"
                },
                "iVar1": {
                    "1": "filename_compare_result",
                    "2": "filename_comparison_result",
                    "23": "comparison_result",
                    "3": "compare_result"
                },
                "iVar2": {
                    "1": "function_result",
                    "11": "status",
                    "3": "stat_result",
                    "5": "error_code",
                    "8": "stat_error"
                },
                "lVar7": {
                    "1": "position",
                    "16": "offset",
                    "7": "loop_counter"
                },
                "local_c8": {
                    "1": "local_values_array",
                    "12": "local_array",
                    "2": "local_array_2",
                    "4": "local_variables"
                },
                "param_1": {
                    "1": "file_pointers",
                    "2": "input_params",
                    "3": "archives",
                    "8": "archive"
                },
                "pcVar4": {
                    "1": "err_msg",
                    "10": "error_message",
                    "13": "error_string",
                    "3": "error_msg"
                },
                "piVar3": {
                    "1": "errno_value",
                    "3": "errno_loc",
                    "4": "errno_pointer",
                    "6": "errno_ptr",
                    "9": "errno_location"
                },
                "plVar8": {
                    "1": "current_offset",
                    "2": "file_pointer",
                    "4": "current_pointer",
                    "7": "current_file"
                },
                "plVar9": {
                    "1": "local_vars"
                },
                "pplVar6": {
                    "1": "archive_files",
                    "2": "current_archive_entry",
                    "5": "archive_ptr"
                },
                "puVar9": {
                    "1": "local_variable",
                    "11": "local_array",
                    "2": "local_values",
                    "5": "local_array_ptr"
                },
                "sVar11": {
                    "1": "read_bytes",
                    "14": "bytes_to_read",
                    "2": "bytes_to_write",
                    "3": "chunk_size",
                    "4": "write_size"
                },
                "strcasecmp": {
                    "1": "compare_strings_case_insensitive"
                },
                "strerror": {
                    "1": "get_error_message"
                },
                "uStack_70": {
                    "1": "tmp2",
                    "2": "stack_var2"
                },
                "uStack_80": {
                    "1": "result1",
                    "2": "stack_var1"
                },
                "uStack_98": {
                    "1": "total_bytes",
                    "12": "archive_size",
                    "15": "file_size",
                    "2": "total_size"
                },
                "uVar10": {
                    "1": "total_bytes",
                    "11": "total_bytes_read",
                    "2": "total_read",
                    "3": "bytes_remaining",
                    "4": "bytes_read"
                },
                "uVar5": {
                    "1": "error",
                    "2": "gettext_message",
                    "3": "gettext_result",
                    "8": "message"
                }
            },
            "called": [
                "FUN_00102c25"
            ],
            "calling": [
                "FUN_00103e95",
                "FUN_00105db0"
            ],
            "code": "\n\n\nlong * extract_archive_00107740(long **archive)\n\n{\n  int comparison_result;\n  int status;\n  int *errno_location;\n  char *error_string;\n  undefined8 message;\n  long **archive_ptr;\n  void *buffer;\n  size_t bytes_read;\n  long offset;\n  long *current_file;\n  undefined4 *local_array;\n  ulong total_bytes_read;\n  size_t bytes_to_read;\n  undefined4 local_array [6];\n  __mode_t file_permissions;\n  ulong file_size;\n  undefined8 stack_var1;\n  undefined8 stack_var2;\n  \n  if (_DAT_0010d600 != 0) {\n    local_array = local_array;\n    for (offset = 0x24; offset != 0; offset = offset + -1) {\n      *local_array = 0;\n      local_array = local_array + 1;\n    }\n  }\n  archive_ptr = (long **)archive[0x1d];\n  if ((long **)archive[0x1d] == (long **)0x0) {\n    archive_ptr = archive;\n  }\n  status = (*(code *)archive_ptr[1][0x3d])(archive,local_array);\n  if (status != 0) {\n    current_file = *archive;\n    message = dcgettext(0,\"internal stat error on %s\",5);\n    status = FUN_00107690(message,current_file);\n    message = DAT_0010d638;\n    if (status == 3) {\n      for (; *current_file != 0; current_file = (long *)(*current_file + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*current_file != (undefined8 *)0x0; current_file = (long *)(*current_file + 0xf0)) {\n        comparison_result = filename_cmp(*(undefined8 *)*current_file,message);\n        if (comparison_result == 0) {\n          if (status != 2) {\n            return current_file;\n          }\n          return (long *)(*current_file + 0xf0);\n        }\n      }\n    }\n    return current_file;\n  }\n  bfd_seek(archive,0,0);\n  DAT_0010d5d8 = (file_pointer *)0x0;\n  if (file_size == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (file_pointer *)FUN_00105a20(*archive);\n  }\n  else {\n    total_bytes_read = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytes_to_read = file_size - total_bytes_read;\n      if (0x2000 < bytes_to_read) {\n        bytes_to_read = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer,bytes_to_read,archive);\n      if (bytes_to_read != bytes_read) {\nLAB_00102c78:\n        archive = (long **)*archive[0x1d];\n        message = dcgettext(0,\"%s is not a valid archive\",5);\n        FUN_00107690(message,archive);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (file_pointer *)0x0) {\n        DAT_0010d5d8 = (file_pointer *)FUN_00105a20(*archive);\n      }\n      bytes_to_read = fwrite(buffer,1,bytes_read,DAT_0010d5d8);\n      if (bytes_to_read != bytes_read) {\n        errno_location = __errno_location();\n        error_string = strerror(*errno_location);\n        FUN_00107690(\"%s: %s\",DAT_0010d618,error_string);\n        goto LAB_00102c78;\n      }\n      total_bytes_read = total_bytes_read + bytes_read;\n    } while (total_bytes_read < file_size);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  error_string = DAT_0010d618;\n  DAT_0010d5d8 = (file_pointer *)0x0;\n  chmod(DAT_0010d618,file_permissions);\n  if (_DAT_0010d600 != 0) {\n    stack_var1 = stack_var2;\n    FUN_00107c80(error_string,local_array);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "current_name": "extract_archive_00107740",
            "entrypoint": "0x00107740",
            "imported": false,
            "improved": true,
            "renaming": {
                "FILE": "file_pointer",
                "FUN_00107740": "extract_archive_00107740",
                "_Stack_b0": "file_permissions",
                "__errno_location": "get_error_number_location",
                "__n": "bytes_read",
                "__ptr": "buffer",
                "bfd_bread": "read_from_archive",
                "bfd_seek": "seek_archive",
                "chmod": "change_file_permissions",
                "dcgettext": "get_error_message_translation",
                "fclose": "close_file",
                "filename_cmp": "compare_filenames",
                "iVar1": "comparison_result",
                "iVar2": "status",
                "lVar7": "offset",
                "local_c8": "local_array",
                "param_1": "archive",
                "pcVar4": "error_string",
                "piVar3": "errno_location",
                "plVar8": "current_file",
                "pplVar6": "archive_ptr",
                "puVar9": "local_array",
                "sVar11": "bytes_to_read",
                "strerror": "get_error_message",
                "uStack_70": "stack_var2",
                "uStack_80": "stack_var1",
                "uStack_98": "file_size",
                "uVar10": "total_bytes_read",
                "uVar5": "message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107890": {
            "additional_data": {
                "FUN_00107890": {
                    "1": "print_formatted_output",
                    "16": "print_output",
                    "2": "print_to_stdout",
                    "3": "print_to_file"
                },
                "FUN_001079c0": {
                    "1": "print_content",
                    "2": "print_with_flags",
                    "3": "format_and_print",
                    "8": "print_to_file"
                },
                "_stdout": {
                    "1": "standard_output"
                },
                "param_1": {
                    "1": "stdout_stream",
                    "2": "param",
                    "4": "output_file",
                    "7": "file",
                    "9": "output_stream"
                },
                "param_2": {
                    "1": "pointers_array",
                    "2": "strings_to_print",
                    "3": "data",
                    "9": "strings"
                },
                "param_3": {
                    "1": "is_option1",
                    "2": "check_condition1",
                    "4": "flag_1",
                    "8": "flag1"
                },
                "param_4": {
                    "1": "check2",
                    "2": "check_condition2",
                    "4": "condition2",
                    "8": "flag2"
                }
            },
            "called": [
                "FUN_001079c0"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid print_output_00107890(undefined8 output_stream)\n\n{\n  FUN_001079c0(output_file,output_stream,DAT_0010d60c != 0,_DAT_0010d5fc != 0);\n  return;\n}\n\n",
            "current_name": "print_output_00107890",
            "entrypoint": "0x00107890",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107890": "print_output_00107890",
                "_stdout": "output_file",
                "param_1": "output_stream"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001078c0": {
            "additional_data": {
                "FILE *__stream": {
                    "1": "stream"
                },
                "FUN_001078c0": {
                    "1": "print_formatted_message",
                    "30": "print_error_message"
                },
                "__arg": {
                    "1": "arg",
                    "3": "arguments"
                },
                "__c": {
                    "8": "character"
                },
                "__format": {
                    "2": "format_string",
                    "6": "format"
                },
                "__gnuc_va_list": {
                    "1": "additional_arguments"
                },
                "__gnuc_va_list param_2": {
                    "1": "va_list"
                },
                "__s": {
                    "1": "stream_ptr",
                    "2": "stream"
                },
                "__stream": {
                    "1": "output_stream",
                    "5": "stream"
                },
                "_stderr": {
                    "2": "stderr",
                    "4": "standard_error"
                },
                "_stdout": {
                    "2": "stdout_stream",
                    "4": "standard_output"
                },
                "fflush": {
                    "1": "flush_buffer",
                    "2": "flush_standard_output",
                    "4": "flush_stream"
                },
                "fprintf": {
                    "1": "format_and_write_to_stream",
                    "2": "write_error_message",
                    "3": "print_formatted"
                },
                "param_1": {
                    "1": "error_format_string",
                    "13": "message",
                    "14": "error_message"
                },
                "param_2": {
                    "1": "argument_list",
                    "11": "arguments",
                    "2": "arg_list",
                    "9": "args"
                },
                "put": {
                    "1": "put_character"
                },
                "putc": {
                    "1": "write_character_to_standard_error",
                    "3": "put_character",
                    "5": "write_character"
                },
                "putchar": {
                    "1": "print_character_to_stderr"
                },
                "vfprintf": {
                    "1": "format_and_write_to_stream_varargs"
                }
            },
            "called": [
                "fflush",
                "putc",
                "fprintf",
                "vfprintf"
            ],
            "calling": [
                "FUN_00107690",
                "FUN_00107920"
            ],
            "code": "\n\n\nvoid print_error_message_001078c0(char *error_message,additional_arguments arguments)\n\n{\n  fflush(standard_output);\n  fprintf(standard_error,\"%s: \",DAT_0010d660);\n  vfprintf(standard_error,error_message,arguments);\n  putc(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_error_message_001078c0",
            "entrypoint": "0x001078c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001078c0": "print_error_message_001078c0",
                "__gnuc_va_list": "additional_arguments",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "fflush": "flush_stream",
                "fprintf": "print_formatted",
                "param_1": "error_message",
                "param_2": "arguments",
                "put": "put_character",
                "putc": "write_character",
                "vfprintf": "print_formatted_error_with_args"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107920": {
            "additional_data": {
                "FUN_001078c0": {
                    "1": "process_values",
                    "2": "copy_data",
                    "5": "process_data"
                },
                "FUN_00107920": {
                    "1": "extract_function",
                    "10": "process_data",
                    "2": "extract_and_process_data",
                    "3": "extract_data"
                },
                "in_AL": {
                    "1": "is_non_zero",
                    "18": "flag",
                    "2": "condition"
                },
                "local_18": {
                    "1": "input_param_8",
                    "3": "input_8_copy",
                    "4": "input8_copy"
                },
                "local_28": {
                    "1": "local_param7",
                    "3": "input_param_7_copy",
                    "4": "input7_copy"
                },
                "local_38": {
                    "1": "param_6_copy",
                    "3": "input_param_6_copy",
                    "4": "input6_copy"
                },
                "local_48": {
                    "1": "var10",
                    "3": "input_5_copy",
                    "4": "input5_copy"
                },
                "local_58": {
                    "1": "input4",
                    "3": "input_4_copy",
                    "4": "input4_copy"
                },
                "local_68": {
                    "1": "new_input3",
                    "3": "input_3_copy",
                    "4": "input3_copy"
                },
                "local_78": {
                    "1": "input2",
                    "3": "input_param_2_copy",
                    "4": "input2_copy"
                },
                "local_88": {
                    "1": "input1",
                    "3": "input_1_copy",
                    "4": "input1_copy"
                },
                "local_90": {
                    "1": "data6_copy",
                    "2": "param_14",
                    "4": "param14",
                    "6": "param_14_copy"
                },
                "local_98": {
                    "1": "temp_param_13",
                    "2": "param_13",
                    "4": "param13",
                    "6": "param_13_copy"
                },
                "local_a0": {
                    "1": "data4_copy",
                    "2": "param_12",
                    "4": "param12",
                    "6": "param_12_copy"
                },
                "local_a8": {
                    "1": "var2",
                    "2": "param_11",
                    "4": "param11",
                    "6": "param_11_copy"
                },
                "local_b0": {
                    "1": "arg10_copy",
                    "2": "param_10",
                    "4": "param10",
                    "6": "param_10_copy"
                },
                "local_b8": {
                    "1": "output_buffer",
                    "2": "buffer",
                    "3": "temp_buffer",
                    "8": "local_buffer"
                },
                "local_c8": {
                    "1": "temp_buffer",
                    "2": "local_array",
                    "6": "buffer",
                    "9": "local_buffer"
                },
                "local_d0": {
                    "1": "source",
                    "2": "stack_pointer",
                    "3": "buffer",
                    "4": "stack_ptr",
                    "6": "buffer_ptr"
                },
                "local_d4": {
                    "1": "local_array_length",
                    "2": "offset",
                    "3": "length",
                    "4": "constant"
                },
                "local_d8": {
                    "1": "size1",
                    "11": "size",
                    "5": "length"
                },
                "param_1": {
                    "1": "input_param1",
                    "2": "param1",
                    "5": "input_1",
                    "8": "input_param_1",
                    "9": "input1"
                },
                "param_10": {
                    "1": "param_list2",
                    "2": "input_param_10",
                    "5": "param_10"
                },
                "param_11": {
                    "1": "data_param_3",
                    "2": "param11",
                    "5": "param_11"
                },
                "param_12": {
                    "1": "param_d",
                    "2": "input_param_12",
                    "5": "param_12"
                },
                "param_13": {
                    "1": "input_param13",
                    "2": "input_param_13",
                    "5": "param_13"
                },
                "param_14": {
                    "1": "main_param_6",
                    "2": "param14",
                    "5": "param_14"
                },
                "param_2": {
                    "1": "input_param2",
                    "2": "param2",
                    "5": "input_2",
                    "8": "input_param_2",
                    "9": "input2"
                },
                "param_3": {
                    "1": "input_param3",
                    "2": "param3",
                    "5": "input_3",
                    "8": "input_param_3",
                    "9": "input3"
                },
                "param_4": {
                    "1": "extracted_data_4",
                    "2": "param4",
                    "5": "input_4",
                    "8": "input_param_4",
                    "9": "input4"
                },
                "param_5": {
                    "1": "arg5",
                    "2": "param5",
                    "5": "input_5",
                    "8": "input_param_5",
                    "9": "input5"
                },
                "param_6": {
                    "1": "input_param6",
                    "2": "param6",
                    "5": "input_6",
                    "8": "input_param_6",
                    "9": "input6"
                },
                "param_7": {
                    "1": "input_param7",
                    "2": "param7",
                    "5": "input_7",
                    "8": "input_param_7",
                    "9": "input7"
                },
                "param_8": {
                    "1": "input_param8",
                    "2": "param8",
                    "5": "input_8",
                    "8": "input_param_8",
                    "9": "input8"
                },
                "param_9": {
                    "1": "data1",
                    "2": "input_param_9",
                    "3": "param_9",
                    "4": "data_ptr"
                }
            },
            "called": [
                "FUN_001078c0"
            ],
            "calling": [
                "FUN_00102e6f",
                "FUN_001052a0",
                "FUN_00105300",
                "FUN_00102fd7",
                "FUN_00105db0",
                "FUN_001025a0",
                "FUN_00102f1e"
            ],
            "code": "\nvoid process_data_00107920(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 data_ptr,undefined8 input10,undefined8 input11,undefined8 input12,\n                 undefined8 input13,undefined8 input14)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 constant;\n  undefined *buffer_ptr;\n  undefined *local_buffer;\n  undefined local_buffer [8];\n  undefined8 param_10_copy;\n  undefined8 param_11_copy;\n  undefined8 param_12_copy;\n  undefined8 param_13_copy;\n  undefined8 param_14_copy;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  undefined4 input5_copy;\n  undefined4 input6_copy;\n  undefined4 input7_copy;\n  undefined4 input8_copy;\n  \n  if (flag != '\\0') {\n    input1_copy = input1;\n    input2_copy = input2;\n    input3_copy = input3;\n    input4_copy = input4;\n    input5_copy = input5;\n    input6_copy = input6;\n    input7_copy = input7;\n    input8_copy = input8;\n  }\n  buffer_ptr = &stack0x00000008;\n  size = 8;\n  local_buffer = local_buffer;\n  constant = 0x30;\n  param_10_copy = input10;\n  param_11_copy = input11;\n  param_12_copy = input12;\n  param_13_copy = input13;\n  param_14_copy = input14;\n  FUN_001078c0(data_ptr,&size);\n  return;\n}\n\n",
            "current_name": "process_data_00107920",
            "entrypoint": "0x00107920",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107920": "process_data_00107920",
                "in_AL": "flag",
                "local_18": "input8_copy",
                "local_28": "input7_copy",
                "local_38": "input6_copy",
                "local_48": "input5_copy",
                "local_58": "input4_copy",
                "local_68": "input3_copy",
                "local_78": "input2_copy",
                "local_88": "input1_copy",
                "local_90": "param_14_copy",
                "local_98": "param_13_copy",
                "local_a0": "param_12_copy",
                "local_a8": "param_11_copy",
                "local_b0": "param_10_copy",
                "local_b8": "local_buffer",
                "local_c8": "local_buffer",
                "local_d0": "buffer_ptr",
                "local_d4": "constant",
                "local_d8": "size",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "data_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001079c0": {
            "additional_data": {
                "*(byte *)(fileData + 0x49) & 0x10": {
                    "1": "executable_bit"
                },
                "*local_b8": {
                    "1": "file_status"
                },
                "*pcVar3": {
                    "1": "time_string"
                },
                "*ppcVar2": {
                    "1": "file_info_pointer"
                },
                "FUN_001079c0": {
                    "1": "write_file_info",
                    "2": "print_file_details",
                    "25": "print_file_info"
                },
                "__format": {
                    "1": "format"
                },
                "__s": {
                    "1": "string_buffer"
                },
                "__timer": {
                    "1": "time_ptr"
                },
                "cStack_ea": {
                    "1": "flag_symbol9",
                    "3": "others_execute",
                    "4": "other_execute_permission",
                    "6": "other_execute"
                },
                "cStack_eb": {
                    "1": "read_permission3",
                    "3": "others_write",
                    "4": "other_write_permission",
                    "6": "other_write"
                },
                "cStack_ec": {
                    "1": "permissions_r_others",
                    "3": "others_read",
                    "4": "other_read_permission",
                    "6": "other_read"
                },
                "cStack_ed": {
                    "1": "is_owner_execute",
                    "5": "group_execute_permission",
                    "9": "group_execute"
                },
                "cStack_ee": {
                    "1": "flag_symbol5",
                    "5": "group_write_permission",
                    "9": "group_write"
                },
                "cStack_ef": {
                    "1": "directory_flag2",
                    "5": "group_read_permission",
                    "9": "group_read"
                },
                "cStack_f0": {
                    "1": "executable_symbol",
                    "3": "owner_execute",
                    "4": "user_execute_permission",
                    "6": "user_execute"
                },
                "cStack_f1": {
                    "1": "file_owner_writable",
                    "3": "owner_write",
                    "4": "user_write_permission",
                    "6": "user_write"
                },
                "cStack_f2": {
                    "1": "owner_read_permission",
                    "3": "owner_read",
                    "4": "user_read_permission",
                    "6": "user_read"
                },
                "cStack_f3": {
                    "1": "file_permission_symbol"
                },
                "currentTimestamp": {
                    "1": "local_100"
                },
                "dcgettext": {
                    "1": "time_corrupt_msg"
                },
                "enableHexadecimal": {
                    "1": "param_4"
                },
                "enablePrinting": {
                    "1": "param_3"
                },
                "fileData": {
                    "1": "param_2"
                },
                "fileDataPointer": {
                    "1": "ppc_var2"
                },
                "fileDataPtr[0x1d]": {
                    "1": "file_ptr_ref"
                },
                "fileDataPtr[1]": {
                    "1": "func_ref"
                },
                "fileInfo": {
                    "1": "param_2"
                },
                "fileModifiedTimestamp": {
                    "1": "local_60"
                },
                "filePermissions": {
                    "1": "u_stack_a0"
                },
                "filePointer": {
                    "1": "param_1"
                },
                "filePtr": {
                    "1": "param_1"
                },
                "fileSize": {
                    "1": "u_stack_88"
                },
                "fileType": {
                    "1": "u_var4"
                },
                "formattedTime": {
                    "1": "local_e8"
                },
                "fputc": {
                    "1": "new_line"
                },
                "fputs": {
                    "1": "write_to_file"
                },
                "groupID": {
                    "1": "u_stack_98"
                },
                "iVar1": {
                    "1": "return_val",
                    "15": "result",
                    "3": "status",
                    "8": "return_value"
                },
                "invalidTimeData": {
                    "1": "local_b8"
                },
                "isFlagSet": {
                    "1": "param_3"
                },
                "local_100": {
                    "1": "curr_time",
                    "2": "current_timestamp",
                    "28": "current_time"
                },
                "local_60": {
                    "1": "unknown_variable3",
                    "2": "file_time",
                    "4": "creation_time",
                    "6": "file_modification_time"
                },
                "local_b8": {
                    "1": "unknown_buffer",
                    "2": "buffer"
                },
                "local_e8": {
                    "1": "time_formatted",
                    "15": "formatted_time",
                    "2": "time_str",
                    "3": "time_string"
                },
                "local_e9": {
                    "1": "temp_symbol"
                },
                "param_1": {
                    "1": "file_pointer",
                    "16": "file",
                    "5": "file_ptr",
                    "8": "output_file"
                },
                "param_2": {
                    "1": "file_metadata",
                    "25": "file_info",
                    "3": "file_data"
                },
                "param_3": {
                    "1": "enable_printing",
                    "2": "include_timestamp",
                    "3": "is_verbose",
                    "5": "print_time"
                },
                "param_4": {
                    "1": "display_hex",
                    "14": "print_address",
                    "2": "print_hex_address",
                    "3": "show_address",
                    "4": "include_address"
                },
                "pcVar3": {
                    "1": "timestamp",
                    "19": "time_string",
                    "2": "time_info",
                    "7": "time_data"
                },
                "ppcVar2": {
                    "1": "file_data_ptr",
                    "11": "file_info_ptr",
                    "2": "file_pointer"
                },
                "printAddress": {
                    "1": "param_4"
                },
                "returnValue": {
                    "1": "i_var1"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "timeString": {
                    "1": "pc_var3"
                },
                "uStack_61": {
                    "1": "index"
                },
                "uStack_88": {
                    "1": "inode",
                    "19": "file_size",
                    "4": "inode_number"
                },
                "uStack_98": {
                    "1": "file_uid",
                    "2": "minor_device",
                    "3": "minor_device_number",
                    "4": "gid",
                    "5": "group_id"
                },
                "uStack_9c": {
                    "1": "size1",
                    "2": "inode",
                    "3": "major_device_number",
                    "4": "uid",
                    "5": "user_id"
                },
                "uStack_a0": {
                    "1": "permission_flags",
                    "2": "file_type",
                    "6": "file_permissions",
                    "9": "file_mode"
                },
                "uStack_a0 & 0x10": {
                    "1": "perm_mask5"
                },
                "uStack_a0 & 0x100": {
                    "1": "perm_mask1"
                },
                "uStack_a0 & 0x20": {
                    "1": "perm_mask4"
                },
                "uStack_a0 & 0x200": {
                    "1": "sticky_set_bit"
                },
                "uStack_a0 & 0x40": {
                    "1": "perm_mask3"
                },
                "uStack_a0 & 0x400": {
                    "1": "setgid_set_bit"
                },
                "uStack_a0 & 0x80": {
                    "1": "perm_mask2"
                },
                "uStack_a0 & 0x800": {
                    "1": "setuid_set_bit"
                },
                "uStack_a0 & 0xf000": {
                    "1": "type_mask"
                },
                "uStack_a0 & 1": {
                    "1": "perm_mask9"
                },
                "uStack_a0 & 2": {
                    "1": "perm_mask8"
                },
                "uStack_a0 & 4": {
                    "1": "perm_mask7"
                },
                "uStack_a0 & 8": {
                    "1": "perm_mask6"
                },
                "uStack_e9": {
                    "1": "unknown"
                },
                "uStack_f3": {
                    "1": "file_type_character",
                    "2": "type_char",
                    "4": "file_permission",
                    "5": "file_type"
                },
                "uVar4": {
                    "1": "file_type_bits",
                    "2": "file_perm",
                    "20": "file_type",
                    "3": "file_permissions",
                    "4": "file_mode"
                },
                "userID": {
                    "1": "u_stack_9c"
                }
            },
            "called": [
                "sprintf",
                "FUN_00102d8c",
                "ctime"
            ],
            "calling": [
                "FUN_00103ddc",
                "FUN_00107890"
            ],
            "code": "\nvoid print_file_info_001079c0(FILE *file,char **file_info,char print_time,char print_address)\n\n{\n  int result;\n  char **file_info_ptr;\n  char *time_string;\n  uint file_type;\n  time_t current_time;\n  undefined file_type;\n  char user_read;\n  char user_write;\n  char user_execute;\n  char group_read;\n  char group_write;\n  char group_execute;\n  char other_read;\n  char other_write;\n  char other_execute;\n  undefined unknown;\n  char formatted_time [48];\n  undefined buffer [24];\n  uint file_size;\n  uint user_id;\n  uint group_id;\n  undefined8 file_size;\n  time_t file_modification_time;\n  \n  if (print_time != '\\0') {\n    file_info_ptr = (char **)file_info[0x1d];\n    if ((char **)file_info[0x1d] == (char **)0x0) {\n      file_info_ptr = file_info;\n    }\n    result = (**(code **)(file_info_ptr[1] + 0x1e8))(file_info,buffer);\n    if (result == 0) {\n      current_time = file_modification_time;\n      time_string = ctime(&current_time);\n      if (time_string == (char *)0x0) {\n        time_string = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(formatted_time,time_string);\n      }\n      else {\n        sprintf(formatted_time,\"%.12s %.4s\",time_string + 4);\n      }\n      file_type = file_size & 0xf000;\n      if (file_type == 0x4000) {\n        file_type = 100;\n      }\n      else if (file_type == 0xa000) {\n        file_type = 0x6c;\n      }\n      else if (file_type == 0x6000) {\n        file_type = 0x62;\n      }\n      else if (file_type == 0x2000) {\n        file_type = 99;\n      }\n      else if (file_type == 0xc000) {\n        file_type = 0x73;\n      }\n      else {\n        file_type = 0x70;\n        if (file_type != 0x1000) {\n          file_type = 0x2d;\n        }\n      }\n      user_read = (-((file_size & 0x100) == 0) & 0xbbU) + 0x72;\n      user_write = (-((file_size & 0x80) == 0) & 0xb6U) + 0x77;\n      user_execute = (-((file_size & 0x40) == 0) & 0xb5U) + 0x78;\n      group_read = (-((file_size & 0x20) == 0) & 0xbbU) + 0x72;\n      group_write = (-((file_size & 0x10) == 0) & 0xb6U) + 0x77;\n      group_execute = (-((file_size & 8) == 0) & 0xb5U) + 0x78;\n      other_read = (-((file_size & 4) == 0) & 0xbbU) + 0x72;\n      other_write = (-((file_size & 2) == 0) & 0xb6U) + 0x77;\n      other_execute = (-((file_size & 1) == 0) & 0xb5U) + 0x78;\n      if ((file_size & 0x800) != 0) {\n        if (user_execute == 'x') {\n          user_execute = 's';\n        }\n        else {\n          user_execute = 'S';\n        }\n      }\n      if ((file_size & 0x400) != 0) {\n        if (group_execute == 'x') {\n          group_execute = 's';\n        }\n        else {\n          group_execute = 'S';\n        }\n      }\n      if ((file_size & 0x200) != 0) {\n        if (other_execute == 'x') {\n          other_execute = 't';\n        }\n        else {\n          other_execute = 'T';\n        }\n      }\n      unknown = 0;\n      fprintf(file,\"%s %ld/%ld %6lu %s \",&user_read,(ulong)user_id,(ulong)group_id,file_size,\n              formatted_time,(ulong)file_size);\n    }\n  }\n  fputs(*file_info,file);\n  if (print_address != '\\0') {\n    if ((*(byte *)((long)file_info + 0x49) & 0x10) == 0) {\n      if (file_info[0xb] != (char *)0x0) {\n        fprintf(file,\" 0x%lx\");\n      }\n    }\n    else if (file_info[0xc] != (char *)0x0) {\n      fprintf(file,\" 0x%lx\");\n    }\n  }\n  fputc(10,file);\n  return;\n}\n\n",
            "current_name": "print_file_info_001079c0",
            "entrypoint": "0x001079c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001079c0": "print_file_info_001079c0",
                "cStack_ea": "other_execute",
                "cStack_eb": "other_write",
                "cStack_ec": "other_read",
                "cStack_ed": "group_execute",
                "cStack_ee": "group_write",
                "cStack_ef": "group_read",
                "cStack_f0": "user_execute",
                "cStack_f1": "user_write",
                "cStack_f2": "user_read",
                "dcgettext": "time_corrupt_msg",
                "fputc": "new_line",
                "fputs": "write_to_file",
                "iVar1": "result",
                "local_100": "current_time",
                "local_60": "file_modification_time",
                "local_b8": "buffer",
                "local_e8": "formatted_time",
                "param_1": "file",
                "param_2": "file_info",
                "param_3": "print_time",
                "param_4": "print_address",
                "pcVar3": "time_string",
                "ppcVar2": "file_info_ptr",
                "sprintf": "format_string",
                "uStack_88": "file_size",
                "uStack_98": "group_id",
                "uStack_9c": "user_id",
                "uStack_a0": "file_size",
                "uStack_e9": "unknown",
                "uStack_f3": "file_type",
                "uVar4": "file_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107c10": {
            "additional_data": {
                "FUN_00107c10": {
                    "1": "do_exit",
                    "2": "initialize_and_exit",
                    "3": "terminate_program",
                    "4": "perform_exit",
                    "7": "execute_and_exit",
                    "8": "exit_with_error"
                },
                "FUN_00107c20": {
                    "1": "log_and_exit",
                    "2": "execute_function",
                    "3": "cleanup_and_exit",
                    "8": "perform_cleanup"
                },
                "param_1": {
                    "1": "cleanup_parameter",
                    "2": "error_code",
                    "3": "cleanup_param"
                },
                "xexit": {
                    "1": "perform_exit",
                    "4": "exit_program"
                }
            },
            "called": [
                "xexit",
                "FUN_00107c20"
            ],
            "calling": [
                "FUN_001028ed",
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_001058b0",
                "FUN_00102d2f"
            ],
            "code": "\nvoid exit_with_error_00107c10(void)\n\n{\n  FUN_00107c20();\n                    \n  xexit(1);\n}\n\n",
            "current_name": "exit_with_error_00107c10",
            "entrypoint": "0x00107c10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107c10": "exit_with_error_00107c10",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107c20": {
            "additional_data": {
                "DAT_0010d660": {
                    "2": "program_name"
                },
                "FUN_00107c20": {
                    "1": "print_bfd_error",
                    "2": "print_bfd_error_message",
                    "24": "print_error_message",
                    "4": "print_error"
                },
                "_stderr": {
                    "1": "stderr"
                },
                "_stdout": {
                    "1": "stdout"
                },
                "bfd_errmsg": {
                    "1": "get_error_msg"
                },
                "bfd_get_error": {
                    "1": "get_bfd_error"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "fflush": {
                    "1": "flush"
                },
                "fprintf": {
                    "1": "print_formatted"
                },
                "iVar1": {
                    "1": "error_check",
                    "12": "error_code",
                    "16": "error"
                },
                "in_R10": {
                    "1": "extra_message",
                    "2": "unused_variable",
                    "3": "unknown",
                    "8": "additional_info"
                },
                "param_1": {
                    "1": "filename",
                    "4": "error_description",
                    "5": "file_name",
                    "8": "error_type"
                },
                "uVar2": {
                    "1": "error_description",
                    "2": "error_message_text",
                    "20": "error_message",
                    "3": "error_string",
                    "5": "error_msg"
                }
            },
            "called": [
                "bfd_get_error",
                "bfd_errmsg",
                "FUN_00102f96"
            ],
            "calling": [
                "FUN_00107c10",
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid print_error_message_00107c20(long error_message)\n\n{\n  int error;\n  undefined8 error_message;\n  undefined8 additional_info;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg(error);\n  }\n  fflush(standard_output);\n  if (error_message != 0) {\n    fprintf(standard_error,\"%s: %s: %s\\n\",DAT_0010d660,error_message,error_message,additional_info);\n    return;\n  }\n  fprintf(standard_error,\"%s: %s\\n\",DAT_0010d660,error_message,additional_info);\n  return;\n}\n\n",
            "current_name": "print_error_message_00107c20",
            "entrypoint": "0x00107c20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107c20": "print_error_message_00107c20",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "bfd_errmsg": "get_error_msg",
                "bfd_get_error": "get_bfd_error",
                "dcgettext": "get_error_message",
                "fflush": "flush",
                "fprintf": "print_formatted",
                "iVar1": "error",
                "in_R10": "additional_info",
                "param_1": "error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107c80": {
            "additional_data": {
                "FUN_00107920": {
                    "1": "log_error_message"
                },
                "FUN_00107c80": {
                    "1": "set_file_times",
                    "26": "set_file_time",
                    "3": "set_file_timestamp"
                },
                "__errno_location": {
                    "1": "get_error_number"
                },
                "dcgettext": {
                    "1": "get_translated_error_message"
                },
                "iVar1": {
                    "31": "result"
                },
                "local_28": {
                    "1": "access_time_nsec",
                    "3": "backup_access_time"
                },
                "local_38": {
                    "1": "timespec_var",
                    "14": "access_time",
                    "2": "modification_time"
                },
                "param_1": {
                    "1": "filepath",
                    "2": "file_name",
                    "27": "file_path"
                },
                "param_2": {
                    "1": "file_metadata",
                    "25": "file_info"
                },
                "pcVar3": {
                    "1": "str_error",
                    "12": "error_string",
                    "2": "err_msg",
                    "6": "error_msg",
                    "9": "error_message"
                },
                "piVar2": {
                    "1": "error",
                    "10": "errno_ptr",
                    "2": "error_location",
                    "3": "error_num",
                    "6": "errno_location"
                },
                "strerror": {
                    "1": "get_error_string"
                },
                "timespec": {
                    "1": "time_spec"
                },
                "uStack_1c": {
                    "1": "utimensat_flags"
                },
                "uStack_20": {
                    "1": "flags"
                },
                "uStack_24": {
                    "1": "nsec",
                    "2": "backup_modification_time"
                },
                "uStack_2c": {
                    "1": "time_buffer4",
                    "2": "birth_time",
                    "3": "creation_time"
                },
                "uStack_30": {
                    "1": "timestamp3",
                    "2": "status_change_time",
                    "4": "creation_time"
                },
                "uStack_34": {
                    "1": "time_spec2",
                    "2": "time2",
                    "5": "mod_time",
                    "8": "modification_time"
                },
                "uVar4": {
                    "1": "translated_err_msg",
                    "2": "localized_error",
                    "3": "translated_message",
                    "5": "translated_error_message",
                    "6": "error_message"
                },
                "utimensat": {
                    "1": "update_file_times"
                }
            },
            "called": [
                "utimensat",
                "FUN_00102fd7"
            ],
            "calling": [
                "FUN_00102c25"
            ],
            "code": "\nvoid set_file_time_00107c80(char *file_path,long file_info)\n\n{\n  int result;\n  int *errno_ptr;\n  char *error_string;\n  undefined8 error_message;\n  undefined4 access_time;\n  undefined4 modification_time;\n  undefined4 change_time;\n  undefined4 creation_time;\n  undefined4 backup_access_time;\n  undefined4 backup_modification_time;\n  undefined4 creation_time_nsec;\n  undefined4 backup_time_nsec;\n  \n  backup_access_time = *(undefined4 *)(file_info + 0x58);\n  backup_modification_time = *(undefined4 *)(file_info + 0x5c);\n  creation_time_nsec = *(undefined4 *)(file_info + 0x60);\n  backup_time_nsec = *(undefined4 *)(file_info + 100);\n  access_time = *(undefined4 *)(file_info + 0x48);\n  modification_time = *(undefined4 *)(file_info + 0x4c);\n  change_time = *(undefined4 *)(file_info + 0x50);\n  creation_time = *(undefined4 *)(file_info + 0x54);\n  result = utimensat(-100,file_path,(time_spec *)&access_time,0);\n  if (result != 0) {\n    errno_ptr = __errno_location();\n    error_string = strerror(*errno_ptr);\n    error_message = dcgettext(0,\"%s: cannot set time: %s\",5);\n    FUN_00107920(error_message,file_path,error_string);\n  }\n  return;\n}\n\n",
            "current_name": "set_file_time_00107c80",
            "entrypoint": "0x00107c80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107c80": "set_file_time_00107c80",
                "__errno_location": "get_error_number",
                "dcgettext": "get_translated_error_message",
                "iVar1": "result",
                "local_28": "backup_access_time",
                "local_38": "access_time",
                "param_1": "file_path",
                "param_2": "file_info",
                "pcVar3": "error_string",
                "piVar2": "errno_ptr",
                "strerror": "get_error_string",
                "timespec": "time_spec",
                "uStack_1c": "backup_time_nsec",
                "uStack_20": "creation_time_nsec",
                "uStack_24": "backup_modification_time",
                "uStack_2c": "creation_time",
                "uStack_30": "change_time",
                "uStack_34": "modification_time",
                "uVar4": "error_message",
                "utimensat": "update_file_times"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107cc0": {
            "additional_data": {
                "FUN_00107cc0": {
                    "1": "execute_tasks",
                    "2": "execute_callbacks",
                    "3": "execute_function_chain",
                    "8": "execute_functions"
                },
                "LAB_00107d96": {
                    "1": "end_loop"
                },
                "PTR_DAT_0010d2e0": {
                    "1": "callback_list_pointer"
                },
                "lVar1": {
                    "1": "function_index",
                    "10": "current_index",
                    "13": "index",
                    "2": "previous_index"
                },
                "lVar2": {
                    "1": "index2",
                    "12": "prev_index",
                    "3": "current_index",
                    "9": "previous_index"
                },
                "lVar3": {
                    "1": "index3",
                    "17": "temp_index",
                    "2": "loop_index"
                },
                "plVar4": {
                    "1": "function_pointer_ptr",
                    "11": "function_list",
                    "2": "function_pointer_array",
                    "3": "function_chain",
                    "5": "function_pointers"
                },
                "uVar5": {
                    "1": "loop_count",
                    "2": "counter",
                    "3": "iteration_count",
                    "4": "loop_counter",
                    "6": "index",
                    "9": "count"
                }
            },
            "called": [],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid execute_functions_00107cc0(void)\n\n{\n  long index;\n  long prev_index;\n  long temp_index;\n  long *function_list;\n  uint count;\n  \n  function_list = (long *)PTR_DAT_0010d2e0;\n  if (PTR_DAT_0010d2e0 != (undefined *)0x0) {\n    do {\n      count = *(int *)(function_list + 1) - 1;\n      if (-1 < (int)count) {\n        index = (long)(int)count;\n        count = count & 7;\n        (*(code *)function_list[index + 2])();\n        prev_index = index + -1;\n        if (-1 < (int)prev_index) {\n          temp_index = prev_index;\n          if (count != 0) {\n            if (count != 1) {\n              if (count != 2) {\n                if (count != 3) {\n                  if (count != 4) {\n                    if (count != 5) {\n                      if (count != 6) {\n                        (*(code *)function_list[index + 1])();\n                        prev_index = index + -2;\n                      }\n                      (*(code *)function_list[prev_index + 2])();\n                      prev_index = prev_index + -1;\n                    }\n                    (*(code *)function_list[prev_index + 2])();\n                    prev_index = prev_index + -1;\n                  }\n                  (*(code *)function_list[prev_index + 2])();\n                  prev_index = prev_index + -1;\n                }\n                (*(code *)function_list[prev_index + 2])();\n                prev_index = prev_index + -1;\n              }\n              (*(code *)function_list[prev_index + 2])();\n              prev_index = prev_index + -1;\n            }\n            (*(code *)function_list[prev_index + 2])();\n            temp_index = prev_index + -1;\n            if ((int)(prev_index + -1) < 0) goto end_loop;\n          }\n          do {\n            (*(code *)function_list[temp_index + 2])();\n            index = temp_index + -1;\n            (*(code *)function_list[temp_index + 1])();\n            (*(code *)function_list[temp_index])();\n            (*(code *)function_list[index])();\n            (*(code *)function_list[temp_index + -2])();\n            (*(code *)function_list[temp_index + -3])();\n            (*(code *)function_list[temp_index + -4])();\n            (*(code *)function_list[temp_index + -5])();\n            temp_index = temp_index + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nend_loop:\n      function_list = (long *)*function_list;\n    } while (function_list != (long *)0x0);\n  }\n  return;\n}\n\n",
            "current_name": "execute_functions_00107cc0",
            "entrypoint": "0x00107cc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107cc0": "execute_functions_00107cc0",
                "LAB_00107d96": "end_loop",
                "lVar1": "index",
                "lVar2": "prev_index",
                "lVar3": "temp_index",
                "plVar4": "function_list",
                "uVar5": "count"
            },
            "skipped": false,
            "tags": []
        },
        "_DT_FINI": {
            "called": [],
            "calling": [],
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "current_name": "_DT_FINI",
            "entrypoint": "0x00107da8",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_DT_INIT": {
            "called": [
                "__gmon_start__"
            ],
            "calling": [],
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "current_name": "_DT_INIT",
            "entrypoint": "0x00102000",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_FINI_0": {
            "called": [
                "__cxa_finalize",
                "FUN_00105cf0"
            ],
            "calling": [],
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010d400 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010d2c8);\n  FUNC_00105cf0();\n  DAT_0010d400 = 1;\n  return;\n}\n\n",
            "current_name": "_FINI_0",
            "entrypoint": "0x00105d60",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_INIT_0": {
            "called": [
                "FUN_00105d20"
            ],
            "calling": [],
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105d20();\n  return;\n}\n\n",
            "current_name": "_INIT_0",
            "entrypoint": "0x00105da0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__cxa_finalize": {
            "called": [
                "__cxa_finalize"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "current_name": "__cxa_finalize",
            "entrypoint": "0x00102590",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__errno_location": {
            "called": [
                "__errno_location"
            ],
            "calling": [
                "FUN_001028ed",
                "FUN_001031cf",
                "FUN_00105c00",
                "FUN_00103e95",
                "FUN_00102f55",
                "FUN_00103c60",
                "FUN_00102fd7",
                "FUN_00105300",
                "FUN_001025a0",
                "FUN_00102f1e",
                "FUN_00103a78",
                "FUN_00102c25"
            ],
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "current_name": "__errno_location",
            "entrypoint": "0x00102060",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_bread": {
            "called": [
                "bfd_bread"
            ],
            "calling": [
                "FUN_00103a78",
                "FUN_00102c25"
            ],
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "current_name": "bfd_bread",
            "entrypoint": "0x00102540",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_bwrite": {
            "called": [
                "bfd_bwrite"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "current_name": "bfd_bwrite",
            "entrypoint": "0x00102370",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_cache_close": {
            "called": [
                "bfd_cache_close"
            ],
            "calling": [
                "FUN_00102bf5",
                "FUN_00103e95"
            ],
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "current_name": "bfd_cache_close",
            "entrypoint": "0x00102050",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_check_format": {
            "called": [
                "bfd_check_format"
            ],
            "calling": [
                "FUN_00102710",
                "FUN_00105af0",
                "FUN_00103c60"
            ],
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "current_name": "bfd_check_format",
            "entrypoint": "0x00102520",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_check_format_matches": {
            "called": [
                "bfd_check_format_matches"
            ],
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "current_name": "bfd_check_format_matches",
            "entrypoint": "0x001024c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_close": {
            "called": [
                "bfd_close"
            ],
            "calling": [
                "FUN_00102710",
                "FUN_00103e95",
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00102d2f"
            ],
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "current_name": "bfd_close",
            "entrypoint": "0x00102490",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_create": {
            "called": [
                "bfd_create"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "current_name": "bfd_create",
            "entrypoint": "0x001022a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_errmsg": {
            "called": [
                "bfd_errmsg"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00107c20"
            ],
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "current_name": "bfd_errmsg",
            "entrypoint": "0x001024d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_fdopenr": {
            "called": [
                "bfd_fdopenr"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "current_name": "bfd_fdopenr",
            "entrypoint": "0x00102300",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_fdopenw": {
            "called": [
                "bfd_fdopenw"
            ],
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "current_name": "bfd_fdopenw",
            "entrypoint": "0x00102570",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_find_target": {
            "called": [
                "bfd_find_target"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "current_name": "bfd_find_target",
            "entrypoint": "0x001024e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_error": {
            "called": [
                "bfd_get_error"
            ],
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00107c20"
            ],
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "current_name": "bfd_get_error",
            "entrypoint": "0x00102220",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_init": {
            "called": [
                "bfd_init"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "current_name": "bfd_init",
            "entrypoint": "0x001022b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_make_readable": {
            "called": [
                "bfd_make_readable"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "current_name": "bfd_make_readable",
            "entrypoint": "0x001020a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_make_writable": {
            "called": [
                "bfd_make_writable"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "current_name": "bfd_make_writable",
            "entrypoint": "0x00102080",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openr": {
            "called": [
                "bfd_openr"
            ],
            "calling": [
                "FUN_001028ed",
                "FUN_00102710",
                "FUN_00103e95",
                "FUN_00103c60",
                "FUN_00105300"
            ],
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "current_name": "bfd_openr",
            "entrypoint": "0x00102130",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openr_next_archived_file": {
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "calling": [
                "FUN_00105af0",
                "FUN_00103c60",
                "FUN_00105300"
            ],
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "current_name": "bfd_openr_next_archived_file",
            "entrypoint": "0x00102530",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openw": {
            "called": [
                "bfd_openw"
            ],
            "calling": [
                "FUN_00103e95",
                "FUN_00105300"
            ],
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "current_name": "bfd_openw",
            "entrypoint": "0x00102420",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_plugin_set_plugin": {
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "current_name": "bfd_plugin_set_plugin",
            "entrypoint": "0x00102090",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_plugin_set_program_name": {
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "current_name": "bfd_plugin_set_program_name",
            "entrypoint": "0x001023a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_seek": {
            "called": [
                "bfd_seek"
            ],
            "calling": [
                "FUN_00103a78",
                "FUN_00102c25"
            ],
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "current_name": "bfd_seek",
            "entrypoint": "0x00102580",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_archive_head": {
            "called": [
                "bfd_set_archive_head"
            ],
            "calling": [
                "FUN_00102d2f"
            ],
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "current_name": "bfd_set_archive_head",
            "entrypoint": "0x001020f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_default_target": {
            "called": [
                "bfd_set_default_target"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "current_name": "bfd_set_default_target",
            "entrypoint": "0x001020d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_error": {
            "called": [
                "bfd_set_error"
            ],
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "current_name": "bfd_set_error",
            "entrypoint": "0x00102240",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_error_program_name": {
            "called": [
                "bfd_set_error_program_name"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "current_name": "bfd_set_error_program_name",
            "entrypoint": "0x00102440",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_format": {
            "called": [
                "bfd_set_format"
            ],
            "calling": [
                "FUN_00103e95",
                "FUN_00103c60",
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_001058b0"
            ],
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "current_name": "bfd_set_format",
            "entrypoint": "0x00102340",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_target_list": {
            "called": [
                "bfd_target_list"
            ],
            "calling": [
                "FUN_0010266f"
            ],
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "current_name": "bfd_target_list",
            "entrypoint": "0x00102210",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bindtextdomain": {
            "called": [
                "bindtextdomain"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "current_name": "bindtextdomain",
            "entrypoint": "0x00102160",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "calloc": {
            "called": [
                "calloc"
            ],
            "calling": [
                "FUN_00103df9"
            ],
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "current_name": "calloc",
            "entrypoint": "0x001022d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "chmod": {
            "called": [
                "chmod"
            ],
            "calling": [
                "FUN_00102c25"
            ],
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "current_name": "chmod",
            "entrypoint": "0x00102430",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "clearerr": {
            "called": [
                "clearerr"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "current_name": "clearerr",
            "entrypoint": "0x00102360",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "close": {
            "called": [
                "close"
            ],
            "calling": [
                "FUN_00105c00",
                "FUN_00102f55",
                "FUN_001058b0"
            ],
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "close",
            "entrypoint": "0x00102260",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "concat": {
            "called": [
                "concat"
            ],
            "calling": [
                "FUN_00102e57",
                "FUN_00105a68"
            ],
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "current_name": "concat",
            "entrypoint": "0x00102200",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ctime": {
            "called": [
                "ctime"
            ],
            "calling": [
                "FUN_001079c0"
            ],
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "current_name": "ctime",
            "entrypoint": "0x00102150",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "dcgettext": {
            "called": [
                "dcgettext"
            ],
            "calling": [
                "FUN_0010342d",
                "FUN_001031a5",
                "FUN_00103c60",
                "FUN_0010266f",
                "FUN_00102d8c",
                "FUN_001052a0",
                "FUN_00102fd7",
                "FUN_0010394a",
                "FUN_00105db0",
                "FUN_001025a0",
                "FUN_00102f96",
                "FUN_001058b0",
                "FUN_00102c25",
                "FUN_00103bd1",
                "FUN_0010285f",
                "FUN_001028ed",
                "FUN_001032a8",
                "FUN_00102e6f",
                "FUN_0010336b",
                "FUN_00103e95",
                "FUN_001075e0",
                "FUN_00105300",
                "FUN_00102f1e",
                "FUN_00103a78"
            ],
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "current_name": "dcgettext",
            "entrypoint": "0x00102170",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "dup": {
            "called": [
                "dup"
            ],
            "calling": [
                "FUN_00103e95",
                "FUN_00102d2f"
            ],
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "dup",
            "entrypoint": "0x001021d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "entry": {
            "called": [
                "__libc_start_main",
                "FUN_00105db0"
            ],
            "calling": [],
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUN_00105db0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x00105cc0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "exit": {
            "called": [
                "exit"
            ],
            "calling": [
                "FUN_001075e0",
                "FUN_001033b0"
            ],
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "current_name": "exit",
            "entrypoint": "0x00102500",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fclose": {
            "called": [
                "fclose"
            ],
            "calling": [
                "FUN_00102bf5",
                "FUN_00103e95",
                "FUN_00105db0",
                "FUN_00102c25"
            ],
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fclose",
            "entrypoint": "0x00102140",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ferror": {
            "called": [
                "ferror"
            ],
            "calling": [
                "FUN_00103e95",
                "FUN_00105db0"
            ],
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "ferror",
            "entrypoint": "0x001020b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fflush": {
            "called": [
                "fflush"
            ],
            "calling": [
                "FUN_00103bd1",
                "FUN_001078c0",
                "FUN_00102f96",
                "FUN_00103ba8"
            ],
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fflush",
            "entrypoint": "0x001023c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "filename_cmp": {
            "called": [
                "filename_cmp"
            ],
            "calling": [
                "FUN_001028ed",
                "FUN_001032a8",
                "FUN_00102cd9",
                "FUN_00103e95",
                "FUN_00105480",
                "FUN_00105db0"
            ],
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "current_name": "filename_cmp",
            "entrypoint": "0x00102100",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fileno": {
            "called": [
                "fileno"
            ],
            "calling": [
                "FUN_001031cf",
                "FUN_00105db0"
            ],
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fileno",
            "entrypoint": "0x00102390",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fopen": {
            "called": [
                "fopen"
            ],
            "calling": [
                "FUN_00103e95",
                "FUN_00105a68",
                "FUN_00105db0"
            ],
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "current_name": "fopen",
            "entrypoint": "0x00102470",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fprintf": {
            "called": [
                "fprintf"
            ],
            "calling": [
                "FUN_001078c0",
                "FUN_0010342d",
                "FUN_00103c60",
                "FUN_0010266f",
                "FUN_00102d8c",
                "FUN_0010394a",
                "FUN_00105db0",
                "FUN_00102f96",
                "FUN_00103bd1",
                "FUN_0010285f",
                "FUN_001032a8",
                "FUN_0010336b",
                "FUN_00103e95",
                "FUN_00105300",
                "FUN_001033b0"
            ],
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "current_name": "fprintf",
            "entrypoint": "0x00102310",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fputc": {
            "called": [
                "fputc"
            ],
            "calling": [
                "FUN_00103bd1",
                "FUN_0010266f",
                "FUN_00102d8c"
            ],
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fputc",
            "entrypoint": "0x00102280",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fputs": {
            "called": [
                "fputs"
            ],
            "calling": [
                "FUN_00102d8c"
            ],
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fputs",
            "entrypoint": "0x001021f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fread": {
            "called": [
                "fread"
            ],
            "calling": [
                "FUN_00103e95",
                "FUN_00105db0"
            ],
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "current_name": "fread",
            "entrypoint": "0x001020e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "free": {
            "called": [
                "free"
            ],
            "calling": [
                "FUN_00103bd1",
                "FUN_00102ba1",
                "FUN_00103e95",
                "FUN_0010266f",
                "FUN_00105db0",
                "FUN_00102d2f",
                "FUN_00103a78",
                "FUN_00102c25"
            ],
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "current_name": "free",
            "entrypoint": "0x00102030",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fseek": {
            "called": [
                "fseek"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "current_name": "fseek",
            "entrypoint": "0x001023f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ftell": {
            "called": [
                "ftell"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "current_name": "ftell",
            "entrypoint": "0x00102320",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fwrite": {
            "called": [
                "fwrite"
            ],
            "calling": [
                "FUN_00103e95",
                "FUN_00103a78",
                "FUN_00102c25"
            ],
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "current_name": "fwrite",
            "entrypoint": "0x00102510",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getc": {
            "called": [
                "getc"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "getc",
            "entrypoint": "0x00102560",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getopt_long": {
            "called": [
                "getopt_long"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "current_name": "getopt_long",
            "entrypoint": "0x00102190",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "isatty": {
            "called": [
                "isatty"
            ],
            "calling": [
                "FUN_001031cf",
                "FUN_00105db0"
            ],
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "isatty",
            "entrypoint": "0x001020c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "lbasename": {
            "called": [
                "lbasename"
            ],
            "calling": [
                "FUN_001028ed",
                "FUN_00102e6f",
                "FUN_00105830",
                "FUN_00105db0"
            ],
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "current_name": "lbasename",
            "entrypoint": "0x001022c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "lseek": {
            "called": [
                "lseek"
            ],
            "calling": [
                "FUN_00105c00"
            ],
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "current_name": "lseek",
            "entrypoint": "0x001021e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "malloc": {
            "called": [
                "malloc"
            ],
            "calling": [
                "FUN_00103e95",
                "FUN_001033d6",
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "current_name": "malloc",
            "entrypoint": "0x001023b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memcpy": {
            "called": [
                "memcpy"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memcpy",
            "entrypoint": "0x00102380",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memmove": {
            "called": [
                "memmove"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memmove",
            "entrypoint": "0x00102450",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "mkstemp": {
            "called": [
                "mkstemp"
            ],
            "calling": [
                "FUN_001057a0"
            ],
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "current_name": "mkstemp",
            "entrypoint": "0x001023e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "open": {
            "called": [
                "open"
            ],
            "calling": [
                "FUN_00105c00",
                "FUN_00105db0"
            ],
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "current_name": "open",
            "entrypoint": "0x00102460",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "perror": {
            "called": [
                "perror"
            ],
            "calling": [
                "FUN_00105a68",
                "FUN_00105300"
            ],
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "current_name": "perror",
            "entrypoint": "0x001024a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "printf": {
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_00103e95",
                "FUN_001075e0",
                "FUN_001031a5",
                "FUN_00102f08",
                "FUN_00105a68",
                "FUN_00105db0",
                "FUN_00103172",
                "FUN_00103a78",
                "FUN_00103ba8"
            ],
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "current_name": "printf",
            "entrypoint": "0x001021a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "putc": {
            "called": [
                "putc"
            ],
            "calling": [
                "FUN_001078c0"
            ],
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "putc",
            "entrypoint": "0x001022f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "read": {
            "called": [
                "read"
            ],
            "calling": [
                "FUN_00105c00"
            ],
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "current_name": "read",
            "entrypoint": "0x00102290",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "realloc": {
            "called": [
                "realloc"
            ],
            "calling": [
                "FUN_00103e95",
                "FUN_00103df9"
            ],
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "current_name": "realloc",
            "entrypoint": "0x00102400",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "setlocale": {
            "called": [
                "setlocale"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "current_name": "setlocale",
            "entrypoint": "0x00102410",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "sprintf": {
            "called": [
                "sprintf"
            ],
            "calling": [
                "FUN_001079c0",
                "FUN_00102d8c"
            ],
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "current_name": "sprintf",
            "entrypoint": "0x001024f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "stat": {
            "called": [
                "stat"
            ],
            "calling": [
                "FUN_001028ed",
                "FUN_00103e95",
                "FUN_001052a0",
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "stat",
            "entrypoint": "0x00102330",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcmp": {
            "called": [
                "strcmp"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "strcmp",
            "entrypoint": "0x001022e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strerror": {
            "called": [
                "strerror"
            ],
            "calling": [
                "FUN_00103c60",
                "FUN_00102fd7",
                "FUN_001025a0",
                "FUN_00102f1e",
                "FUN_00103a78",
                "FUN_00102c25"
            ],
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "current_name": "strerror",
            "entrypoint": "0x00102550",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strlen": {
            "called": [
                "strlen"
            ],
            "calling": [
                "FUN_001028ed",
                "FUN_00105a68",
                "FUN_00105db0",
                "FUN_00102bb0"
            ],
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "current_name": "strlen",
            "entrypoint": "0x00102180",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strrchr": {
            "called": [
                "strrchr"
            ],
            "calling": [
                "FUN_001057a0"
            ],
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "current_name": "strrchr",
            "entrypoint": "0x001021c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strtol": {
            "called": [
                "strtol"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "current_name": "strtol",
            "entrypoint": "0x00102350",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "textdomain": {
            "called": [
                "textdomain"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "current_name": "textdomain",
            "entrypoint": "0x00102120",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "unlink": {
            "called": [
                "unlink"
            ],
            "calling": [
                "FUN_00103e95",
                "FUN_00102f1e"
            ],
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "current_name": "unlink",
            "entrypoint": "0x00102070",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "unlink_if_ordinary": {
            "called": [
                "unlink_if_ordinary"
            ],
            "calling": [
                "FUN_00102bf5"
            ],
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "current_name": "unlink_if_ordinary",
            "entrypoint": "0x001023d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "utimensat": {
            "called": [
                "utimensat"
            ],
            "calling": [
                "FUN_00107c80"
            ],
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "current_name": "utimensat",
            "entrypoint": "0x00102040",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "vfprintf": {
            "called": [
                "vfprintf"
            ],
            "calling": [
                "FUN_001078c0"
            ],
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "current_name": "vfprintf",
            "entrypoint": "0x001024b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "write": {
            "called": [
                "write"
            ],
            "calling": [
                "FUN_00105c00"
            ],
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "current_name": "write",
            "entrypoint": "0x00102110",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xexit": {
            "called": [
                "xexit"
            ],
            "calling": [
                "FUN_00107690",
                "FUN_0010342d",
                "FUN_00107650",
                "FUN_00107c10",
                "FUN_00105a68",
                "FUN_00105300",
                "FUN_0010394a",
                "FUN_00105db0",
                "FUN_0010315d",
                "FUN_00102d2f"
            ],
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "current_name": "xexit",
            "entrypoint": "0x00102480",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc": {
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_001057a0",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00103a78",
                "FUN_00102bb0",
                "FUN_00102c25"
            ],
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "current_name": "xmalloc",
            "entrypoint": "0x00102230",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc_set_program_name": {
            "called": [
                "xmalloc_set_program_name"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "current_name": "xmalloc_set_program_name",
            "entrypoint": "0x00102250",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xrealloc": {
            "called": [
                "xrealloc"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "current_name": "xrealloc",
            "entrypoint": "0x001021b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xstrdup": {
            "called": [
                "xstrdup"
            ],
            "calling": [
                "FUN_00103e95",
                "FUN_00103c60",
                "FUN_00105db0",
                "FUN_001058b0"
            ],
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "current_name": "xstrdup",
            "entrypoint": "0x00102270",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_00102020",
            "FUN_001025a0",
            "FUN_0010266f",
            "FUN_00102710",
            "FUN_0010284b",
            "FUN_0010285f",
            "FUN_001028ed",
            "FUN_00102943",
            "FUN_00102ba1",
            "FUN_00102bb0",
            "FUN_00102bf5",
            "FUN_00102c25",
            "FUN_00102cd9",
            "FUN_00102d2f",
            "FUN_00102d8c",
            "FUN_00102e57",
            "FUN_00102e6f",
            "FUN_00102f08",
            "FUN_00102f1e",
            "FUN_00102f55",
            "FUN_00102f96",
            "FUN_00102fd7",
            "FUN_0010300e",
            "FUN_001030ed",
            "FUN_0010312d",
            "FUN_0010315d",
            "FUN_00103172",
            "FUN_001031a5",
            "FUN_001031cf",
            "FUN_001032a8",
            "FUN_0010336b",
            "FUN_001033b0",
            "FUN_001033d6",
            "FUN_0010342d",
            "FUN_0010394a",
            "FUN_00103a78",
            "FUN_00103ba8",
            "FUN_00103bd1",
            "FUN_00103c60",
            "FUN_00103ddc",
            "FUN_00103df9",
            "FUN_00103e95",
            "FUN_001052a0",
            "FUN_00105300",
            "FUN_00105480",
            "FUN_00105570",
            "FUN_001057a0",
            "FUN_00105830",
            "FUN_00105870",
            "FUN_001058b0",
            "FUN_00105a20",
            "FUN_00105a68",
            "FUN_00105ae0",
            "FUN_00105af0",
            "FUN_00105bb0",
            "FUN_00105bc0",
            "FUN_00105c00",
            "FUN_00105db0",
            "FUN_001075e0",
            "FUN_00107640",
            "FUN_00107650",
            "FUN_00107690",
            "FUN_00107730",
            "FUN_00107740",
            "FUN_00107890",
            "FUN_001078c0",
            "FUN_00107920",
            "FUN_001079c0",
            "FUN_00107c10",
            "FUN_00107c20",
            "FUN_00107c80",
            "FUN_00107cc0"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 380107
}