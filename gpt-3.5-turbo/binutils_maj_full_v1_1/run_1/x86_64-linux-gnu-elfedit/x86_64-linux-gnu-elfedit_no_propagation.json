{
    "functions": {
        "FUN_00102020": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "execute_indirect_jump"
                },
                "DAT_": {
                    "1": ""
                },
                "FUN_00102020": {
                    "1": "execute_external_code",
                    "2": "execute_indirect_function",
                    "21": "execute_indirect_jump",
                    "4": "execute_function"
                },
                "PTR_": {
                    "1": ""
                },
                "PTR_0": {
                    "1": "indirect_target"
                },
                "PTR_00102020": {
                    "1": "indirect_address"
                },
                "_undefined": {
                    "1": "indirect_address"
                },
                "code": {
                    "1": "function_ptr",
                    "5": "function_pointer"
                },
                "undefined": {
                    "1": "target_address",
                    "2": "function_ptr",
                    "4": "function_pointer"
                },
                "undefined *": {
                    "1": "jump_target"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_indirect_jump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(function_pointer *)(function_pointer *)0x0)();\n  return;\n}\n\n",
            "current_name": "execute_indirect_jump_00102020",
            "entrypoint": "0x00102020",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020",
                "code": "function_pointer",
                "undefined": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001022c0": {
            "additional_data": {
                "FUN_001022c0": {
                    "1": "process_x86_feature",
                    "13": "update_x86_features",
                    "2": "update_feature"
                },
                "__s1": {
                    "1": "feature1"
                },
                "__s2": {
                    "1": "feature2"
                },
                "auVar4": {
                    "1": "return_data",
                    "14": "return_value",
                    "5": "result"
                },
                "iVar1": {
                    "1": "str_result",
                    "12": "comparison_result",
                    "2": "strcmp_result",
                    "4": "strcasecmp_result"
                },
                "uVar1": {
                    "1": "strcasecmp_result"
                },
                "uVar2": {
                    "1": "feature_bit",
                    "11": "feature_mask",
                    "2": "feature_flag",
                    "9": "feature_value"
                },
                "uVar3": {
                    "21": "error_message",
                    "8": "error_msg"
                },
                "unaff_EBP": {
                    "1": "update_flag",
                    "14": "is_enabled",
                    "2": "toggle_flag",
                    "3": "is_set",
                    "4": "is_disabled",
                    "5": "flag"
                },
                "unaff_RBX": {
                    "1": "input_feature",
                    "16": "feature_name",
                    "5": "x86_feature",
                    "8": "feature"
                },
                "unaff_retaddr": {
                    "14": "return_address"
                }
            },
            "called": [
                "dcgettext",
                "strcasecmp",
                "error"
            ],
            "calling": [
                "FUN_00104c60"
            ],
            "code": "\nundefined  [16] update_x86_feature_001022c0(void)\n\n{\n  int comparison_result;\n  uint feature_mask;\n  undefined8 error_message;\n  char *feature_name;\n  int is_enabled;\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  comparison_result = strcasecmp(feature_name,\"lam_u48\");\n  if (comparison_result == 0) {\n    feature_mask = 4;\n  }\n  else {\n    comparison_result = strcasecmp(feature_name,\"lam_u57\");\n    feature_mask = 8;\n    if (comparison_result != 0) {\n      error_message = dcgettext(0,\"Unknown x86 feature: %s\\n\",5);\n      error(error_message);\n      error_message = 0xffffffff;\n      goto LAB_00104ca5;\n    }\n  }\n  if (is_enabled == 0) {\n    DAT_00109440 = feature_mask | DAT_00109440;\n    DAT_00109444 = ~feature_mask & DAT_00109444;\n  }\n  else {\n    DAT_00109444 = feature_mask | DAT_00109444;\n    DAT_00109440 = DAT_00109440 & ~feature_mask;\n  }\n  error_message = 0;\nLAB_00104ca5:\n  return_value._8_8_ = return_address;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "current_name": "update_x86_feature_001022c0",
            "entrypoint": "0x001022c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001022c0": "update_x86_feature_001022c0",
                "auVar4": "return_value",
                "iVar1": "comparison_result",
                "uVar2": "feature_mask",
                "uVar3": "error_message",
                "unaff_EBP": "is_enabled",
                "unaff_RBX": "feature_name",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102323": {
            "additional_data": {
                "FUN_00102323": {
                    "1": "get_unknown_osabi_error_message",
                    "2": "detect_unknown_osabi",
                    "3": "print_unknown_osabi_error_message",
                    "4": "print_unknown_osabi",
                    "6": "identify_unknown_osabi",
                    "8": "print_unknown_osabi_error"
                },
                "auVar2": {
                    "1": "modified_ret_addr",
                    "11": "return_value",
                    "2": "result"
                },
                "uVar1": {
                    "1": "error_msg",
                    "13": "error_message",
                    "3": "error_string"
                },
                "unaff_retaddr": {
                    "20": "return_address"
                }
            },
            "called": [
                "dcgettext",
                "error"
            ],
            "calling": [
                "FUN_00104ce0"
            ],
            "code": "\nundefined  [16] print_unknown_osabi_error_00102323(void)\n\n{\n  undefined8 error_message;\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  error_message = dcgettext(0,\"Unknown OSABI: %s\\n\",5);\n  error(error_message);\n  return_value._8_8_ = return_address;\n  return_value._0_8_ = 0xffffffff;\n  return return_value;\n}\n\n",
            "current_name": "print_unknown_osabi_error_00102323",
            "entrypoint": "0x00102323",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102323": "print_unknown_osabi_error_00102323",
                "auVar2": "return_value",
                "uVar1": "error_message",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010234b": {
            "additional_data": {
                "F1": {
                    "1": "check_machine_type"
                },
                "FUN_0010234b": {
                    "1": "find_machine_type",
                    "2": "determine_machine_type",
                    "23": "get_machine_type"
                },
                "__s1": {
                    "1": "str1"
                },
                "__s2": {
                    "1": "str2"
                },
                "iVar1": {
                    "25": "result",
                    "4": "comparison_result"
                },
                "uVar2": {
                    "1": "unknown_type_message",
                    "13": "error_message",
                    "3": "err_msg",
                    "6": "error_msg"
                },
                "unaff_RBX": {
                    "1": "machine",
                    "30": "machine_type"
                }
            },
            "called": [
                "dcgettext",
                "strcasecmp",
                "error"
            ],
            "calling": [
                "FUN_00104d30"
            ],
            "code": "\nint get_machine_type_0010234b(void)\n\n{\n  int result;\n  undefined8 error_message;\n  char *machine_type;\n  \n  result = strcasecmp(machine_type,\"x86_64\");\n  if (result == 0) {\n    result = 0x3e;\n  }\n  else {\n    result = strcasecmp(machine_type,\"x86-64\");\n    if (result == 0) {\n      result = 0x3e;\n    }\n    else {\n      result = strcasecmp(machine_type,\"none\");\n      if (result != 0) {\n        error_message = dcgettext(0,\"Unknown machine type: %s\\n\",5);\n        error(error_message);\n        result = -1;\n      }\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "get_machine_type_0010234b",
            "entrypoint": "0x0010234b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010234b": "get_machine_type_0010234b",
                "iVar1": "result",
                "uVar2": "error_message",
                "unaff_RBX": "machine_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001023ce": {
            "additional_data": {
                "<original_variable_name_1>": {
                    "1": "result"
                },
                "DAT": {
                    "1": "unchanged"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "DAT_001023f0": {
                    "1": "result"
                },
                "FUN_001023ce": {
                    "1": "initialize_program",
                    "2": "get_true_value",
                    "5": "get_return_value",
                    "8": "get_one"
                },
                "PTR": {
                    "1": "unchanged"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "PTR_x": {
                    "1": "x"
                },
                "PTR_y": {
                    "1": "y"
                },
                "PTR_z": {
                    "1": "z"
                },
                "retVar": {
                    "1": "result"
                },
                "return": {
                    "6": "result"
                },
                "return value": {
                    "2": "result"
                },
                "return_value": {
                    "1": "result"
                },
                "undefined8": {
                    "1": "bool",
                    "4": "uint64_t"
                }
            },
            "called": [],
            "calling": [
                "FUN_00104da0"
            ],
            "code": "\nuint64_t get_one_001023ce(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "get_one_001023ce",
            "entrypoint": "0x001023ce",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001023ce": "get_one_001023ce",
                "return": "result",
                "undefined8": "uint64_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102434": {
            "additional_data": {
                "DAT_00109150": {
                    "1": "output_ei_version"
                },
                "DAT_00109154": {
                    "1": "e_abiversion_expected"
                },
                "DAT_00109158": {
                    "1": "output_ei_class"
                },
                "DAT_0010915c": {
                    "1": "e_osabi_expected"
                },
                "DAT_00109160": {
                    "1": "file_descriptor_input"
                },
                "DAT_00109164": {
                    "1": "e_type_expected"
                },
                "DAT_00109168": {
                    "1": "output_class"
                },
                "DAT_0010916c": {
                    "1": "file_descriptor_output"
                },
                "DAT_00109170": {
                    "1": "os_abi"
                },
                "DAT_00109174": {
                    "1": "e_machine"
                },
                "DAT_00109340": {
                    "1": "input_buffer_version"
                },
                "DAT_00109347": {
                    "1": "output_buffer_class"
                },
                "DAT_00109348": {
                    "1": "output_buffer_version"
                },
                "DAT_00109350": {
                    "1": "input_buffer_class"
                },
                "DAT_00109352": {
                    "1": "input_buffer"
                },
                "DAT_00109380": {
                    "1": "output_buffer"
                },
                "DAT_00109387": {
                    "1": "output_ei_class_found"
                },
                "DAT_00109388": {
                    "1": "output_ei_version_found"
                },
                "DAT_00109390": {
                    "1": "seek_msg_input"
                },
                "DAT_00109392": {
                    "1": "seek_msg"
                },
                "DAT_001093b8": {
                    "1": "file_seek"
                },
                "DAT_001093e4": {
                    "1": "input_class"
                },
                "DAT_001093e6": {
                    "1": "is_valid"
                },
                "DAT_001093e7": {
                    "1": "e_osabi_actual"
                },
                "DAT_001093e8": {
                    "1": "e_abiversion_actual"
                },
                "DAT_00109418": {
                    "1": "e_type_actual"
                },
                "DAT_0010941a": {
                    "1": "e_type"
                },
                "FUN_00102434": {
                    "1": "verify_elf_header_match",
                    "11": "validate_elf_header",
                    "2": "check_and_write_elf_header",
                    "3": "process_elf_header",
                    "4": "verify_elf_header"
                },
                "dcgettext": {
                    "1": "get_translated_string"
                },
                "error": {
                    "1": "display_error",
                    "2": "print_error_message"
                },
                "pcVar3": {
                    "1": "error_format_str",
                    "11": "error_message",
                    "7": "format_string",
                    "9": "error_format"
                },
                "sVar2": {
                    "17": "write_result",
                    "3": "write_status",
                    "4": "bytes_written",
                    "7": "result"
                },
                "uVar1": {
                    "1": "error_code",
                    "14": "error_message",
                    "3": "translation",
                    "5": "error_msg"
                },
                "unaff_RBX": {
                    "17": "file",
                    "2": "output_file",
                    "4": "file_pointer",
                    "8": "file_ptr"
                }
            },
            "called": [
                "dcgettext",
                "error"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nundefined8 validate_elf_header_00102434(void)\n\n{\n  undefined8 error_message;\n  size_t write_result;\n  FILE *file;\n  char *error_message;\n  \n  error_message = dcgettext(0,\"%s: Failed to seek to ELF header\\n\",5);\n  print_error_message(error_message);\n  if (DAT_001093e6 == '\\x01') {\n    if (DAT_0010941a == DAT_0010916c) {\n      return 0;\n    }\n    if (DAT_00109170 == 0xffffffff) {\n      if (DAT_0010941a == 6) {\n        DAT_00109170 = 1;\n      }\n      else if (DAT_0010941a < 7) {\n        DAT_00109170 = (DAT_0010941a != 3) + 1 + (uint)(DAT_0010941a != 3);\n      }\n      else {\n        DAT_00109170 = 3 - ((ushort)(DAT_0010941a - 0xb4) < 2);\n      }\n    }\n    if ((DAT_001093e4 == DAT_00109170) || (DAT_00109170 == 3)) {\n      if ((DAT_001093e4 == DAT_00109168) || (DAT_00109168 == 3)) {\n        if ((DAT_0010941a == DAT_00109174) || (DAT_00109174 == 0xffffffff)) {\n          if ((DAT_00109164 == 0xffffffff) || (DAT_00109418 == DAT_00109164)) {\n            if ((DAT_0010915c == 0xffffffff) || (DAT_001093e7 == DAT_0010915c)) {\n              if ((DAT_001093e8 == DAT_00109154) || (DAT_00109154 == 0xffffffff)) {\n                if (DAT_001093e4 == 1) {\n                  if (DAT_0010916c != 0xffffffff) {\n                    (*DAT_001093b8)(&DAT_00109392,(long)(int)DAT_0010916c,2);\n                  }\n                  if (DAT_00109160 != -1) {\n                    (*DAT_001093b8)(&DAT_00109390,(long)DAT_00109160,2);\n                  }\n                  if (DAT_00109158 != -1) {\n                    DAT_00109387 = (undefined)DAT_00109158;\n                  }\n                  if (DAT_00109150 != -1) {\n                    DAT_00109388 = (undefined)DAT_00109150;\n                  }\n                  write_result = fwrite(&DAT_00109380,0x34,1,file);\n                  if (write_result == 1) {\n                    return 0;\n                  }\n                  error_message = FUN_001024ec();\n                  return error_message;\n                }\n                if (DAT_001093e4 != 2) {\n                    \n                  abort();\n                }\n                if (DAT_0010916c != 0xffffffff) {\n                  (*DAT_001093b8)(&DAT_00109352,(long)(int)DAT_0010916c,2);\n                }\n                if (DAT_00109160 != -1) {\n                  (*DAT_001093b8)(&DAT_00109350,(long)DAT_00109160,2);\n                }\n                if (DAT_00109158 != -1) {\n                  DAT_00109347 = (undefined)DAT_00109158;\n                }\n                if (DAT_00109150 != -1) {\n                  DAT_00109348 = (undefined)DAT_00109150;\n                }\n                write_result = fwrite(&DAT_00109340,0x40,1,file);\n                if (write_result == 1) {\n                  return 0;\n                }\n                error_message = FUN_001024ec();\n                return error_message;\n              }\n              error_message = \"%s: Unmatched EI_ABIVERSION: %d is not %d\\n\";\n            }\n            else {\n              error_message = \"%s: Unmatched EI_OSABI: %d is not %d\\n\";\n            }\n          }\n          else {\n            error_message = \"%s: Unmatched e_type: %d is not %d\\n\";\n          }\n        }\n        else {\n          error_message = \"%s: Unmatched e_machine: %d is not %d\\n\";\n        }\n        error_message = dcgettext(0,error_message,5);\n        print_error_message(error_message);\n        return 1;\n      }\n      error_message = \"%s: Unmatched output EI_CLASS: %d is not %d\\n\";\n    }\n    else {\n      error_message = \"%s: Unmatched input EI_CLASS: %d is not %d\\n\";\n    }\n    error_message = dcgettext(0,error_message,5);\n    print_error_message(error_message);\n  }\n  else {\n    error_message = dcgettext(0,\"%s: Unsupported EI_VERSION: %d is not %d\\n\",5);\n    print_error_message(error_message);\n  }\n  return 1;\n}\n\n",
            "current_name": "validate_elf_header_00102434",
            "entrypoint": "0x00102434",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102434": "validate_elf_header_00102434",
                "dcgettext": "get_localized_string",
                "error": "print_error_message",
                "pcVar3": "error_message",
                "sVar2": "write_result",
                "uVar1": "error_message",
                "unaff_RBX": "file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001024ec": {
            "additional_data": {
                "*piVar1": {
                    "1": "errnum"
                },
                "FUN_001024ec": {
                    "1": "update_efl_header",
                    "15": "update_elf_header",
                    "4": "update_elf_header_failed",
                    "5": "update_elf_header_error",
                    "6": "update_elf_header_failure"
                },
                "__errno_location": {
                    "1": "error_number_location",
                    "3": "get_error_number_location",
                    "8": "get_errno_location"
                },
                "__errnum": {
                    "1": "error_number"
                },
                "dcgettext": {
                    "1": "get_locale_string",
                    "2": "get_message",
                    "4": "get_error_message"
                },
                "error": {
                    "1": "display_error_message",
                    "3": "print_error_message",
                    "5": "print_error"
                },
                "param_1": {
                    "1": "message"
                },
                "param_2": {
                    "1": "parameter_2"
                },
                "param_3": {
                    "1": "parameter_3"
                },
                "param_4": {
                    "1": "parameter_4"
                },
                "piVar1": {
                    "1": "error_number_pointer",
                    "2": "errno_ptr",
                    "3": "error_number_ptr",
                    "4": "error_code",
                    "5": "errno_location",
                    "6": "error_number"
                },
                "strerror": {
                    "1": "get_error_message",
                    "10": "get_error_string"
                },
                "uVar2": {
                    "1": "error_msg",
                    "2": "error_string",
                    "21": "error_message"
                }
            },
            "called": [
                "strerror",
                "__errno_location",
                "dcgettext",
                "error"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nundefined8 update_elf_header_001024ec(void)\n\n{\n  int *error_number;\n  undefined8 error_message;\n  \n  error_number = __errno_location();\n  strerror(*error_number);\n  error_message = dcgettext(0,\"%s: Failed to update ELF header: %s\\n\",5);\n  print_error(error_message);\n  return 1;\n}\n\n",
            "current_name": "update_elf_header_001024ec",
            "entrypoint": "0x001024ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001024ec": "update_elf_header_001024ec",
                "__errno_location": "get_errno_location",
                "dcgettext": "get_error_message",
                "error": "print_error",
                "piVar1": "error_number",
                "strerror": "get_error_string",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102558": {
            "additional_data": {
                "FUN_00102558": {
                    "1": "read_elf_header_error",
                    "15": "read_elf_header",
                    "2": "read_elf_header_and_error",
                    "5": "read_elf_header_failure",
                    "8": "read_elf_header_failed"
                },
                "dcgettext": {
                    "1": "retrieve_message",
                    "2": "get_error_message"
                },
                "error": {
                    "1": "display_error"
                },
                "uVar1": {
                    "2": "error_string",
                    "24": "error_message",
                    "3": "error_msg"
                }
            },
            "called": [
                "dcgettext",
                "error"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nundefined8 read_elf_header_00102558(void)\n\n{\n  undefined8 error_message;\n  \n  error_message = dcgettext(0,\"%s: Failed to read ELF header\\n\",5);\n  print_error(error_message);\n  return 1;\n}\n\n",
            "current_name": "read_elf_header_00102558",
            "entrypoint": "0x00102558",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102558": "read_elf_header_00102558",
                "dcgettext": "get_error_message",
                "error": "print_error",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001025ab": {
            "additional_data": {
                "FREED_MEM": {
                    "1": "memory_has_been_freed"
                },
                "FUN_001025ab": {
                    "1": "validate_archive_header",
                    "2": "parse_archive",
                    "3": "process_archive_header",
                    "7": "process_archive",
                    "8": "parse_archive_header"
                },
                "FUN_001027fd": {
                    "1": "search_string"
                },
                "FUN_001028be": {
                    "1": "parse_archive_symbols"
                },
                "Fseek": {
                    "1": "seek_archive"
                },
                "ZEXT816": {
                    "1": "zero_extend"
                },
                "ZEXT816(0)": {
                    "1": "zero_padding"
                },
                "__endptr": {
                    "1": "end_pointer"
                },
                "__n": {
                    "1": "n"
                },
                "__nptr": {
                    "1": "number_string"
                },
                "__off": {
                    "1": "offset"
                },
                "__ptr": {
                    "1": "ptr_array",
                    "17": "ptr"
                },
                "__s": {
                    "1": "string"
                },
                "__size": {
                    "1": "size"
                },
                "__stream": {
                    "1": "stream"
                },
                "__whence": {
                    "1": "whence"
                },
                "cVar2": {
                    "1": "temp_var_2",
                    "2": "check_value",
                    "3": "temp_var2",
                    "6": "char_var"
                },
                "dcgettext": {
                    "1": "localize_error_message",
                    "2": "get_translation"
                },
                "error": {
                    "1": "display_error_message",
                    "2": "print_error",
                    "4": "report_error"
                },
                "fread": {
                    "1": "read_data",
                    "3": "read_from_file"
                },
                "free": {
                    "2": "deallocate_memory",
                    "3": "release_memory"
                },
                "fseek": {
                    "1": "set_position",
                    "2": "move_file_pointer",
                    "3": "seek_file"
                },
                "get": {
                    "1": "getc"
                },
                "getc": {
                    "1": "get_char",
                    "2": "read_char",
                    "3": "read_character"
                },
                "iVar3": {
                    "1": "temp_var_3",
                    "13": "result",
                    "2": "int_var",
                    "3": "seek_result",
                    "5": "status"
                },
                "malloc": {
                    "9": "allocate_memory"
                },
                "param_1": {
                    "1": "header_array",
                    "2": "parameters",
                    "3": "args",
                    "8": "output"
                },
                "param_2": {
                    "1": "file_name",
                    "2": "archive_filename",
                    "4": "archive_path",
                    "5": "input_string",
                    "9": "filename"
                },
                "param_3": {
                    "1": "file_pointer",
                    "14": "file",
                    "3": "file_ptr",
                    "6": "input_file",
                    "7": "archive_file"
                },
                "param_4": {
                    "1": "max_long_table_name_size",
                    "10": "table_size",
                    "2": "name_table_size",
                    "5": "long_name_table_size",
                    "8": "max_size"
                },
                "param_5": {
                    "1": "arg5",
                    "16": "param_5",
                    "5": "param",
                    "7": "param5"
                },
                "pcVar4": {
                    "1": "str_var",
                    "16": "error_message",
                    "3": "error_msg"
                },
                "pcVar6": {
                    "1": "long_symbol_name_size"
                },
                "pcVar7": {
                    "1": "long_name_table_buffer",
                    "2": "error_message2",
                    "3": "string_table"
                },
                "pcVar8": {
                    "1": "table_err_msg"
                },
                "sVar5": {
                    "1": "fread_result",
                    "17": "read_size",
                    "2": "size_var",
                    "5": "read_result"
                },
                "strdup": {
                    "1": "duplicate_string"
                },
                "strtoul": {
                    "1": "parse_number",
                    "3": "convert_to_unsigned_long",
                    "4": "convert_string_to_unsigned_long"
                },
                "uVar1": {
                    "1": "temp_char",
                    "4": "temp_var1",
                    "7": "temp_var"
                },
                "uVar6": {
                    "1": "temp_var6",
                    "2": "error_msg",
                    "3": "temp_var2"
                }
            },
            "called": [
                "free",
                "FUN_001027fd",
                "strdup",
                "dcgettext",
                "FUN_001028be",
                "fseek",
                "strtoul",
                "fread",
                "getc",
                "error",
                "malloc"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_0010358d"
            ],
            "code": "\nundefined4 parse_archive_header_001025ab(char **output,char *filename,FILE *file,long table_size,undefined4 param_5)\n\n{\n  char **ptr;\n  undefined temp;\n  char char_var;\n  int result;\n  char *error_message;\n  size_t read_size;\n  undefined8 error_message;\n  char *string_table;\n  \n  error_message = strdup(filename);\n  output[2] = (char *)0x0;\n  *(undefined4 *)((long)output + 0x54) = 0;\n  *output = error_message;\n  output[1] = (char *)file;\n  output[5] = (char *)0x0;\n  output[6] = (char *)0x0;\n  *(undefined4 *)(output + 10) = param_5;\n  output[9] = (char *)0x8;\n  *(undefined (*) [16])(output + 3) = zero_padding;\n  *(undefined (*) [16])(output + 7) = zero_padding;\n  result = fseek(file,8,0);\n  error_message = \"%s: failed to seek to first archive header\\n\";\n  if (result != 0) goto LAB_00102658;\n  ptr = output + 0xb;\n  read_size = fread(ptr,1,0x3c,file);\n  if (read_size != 0x3c) {\n    if (read_size == 0) {\n      return 0;\n    }\n    error_message = \"%s: failed to read archive header\\n\";\n    goto LAB_00102658;\n  }\n  char_var = FUN_001027fd(ptr,\"/               \");\n  if (char_var == '\\0') {\n    char_var = FUN_001027fd(ptr,\"/SYM64/         \");\n    if (char_var != '\\0') {\n      *(undefined4 *)((long)output + 0x54) = 1;\n      result = FUN_001028be(output,8);\n      goto joined_r0x001026dd;\n    }\n  }\n  else {\n    result = FUN_001028be(output,4);\njoined_r0x001026dd:\n    if (result == 0) {\n      return 1;\n    }\n  }\n  char_var = FUN_001027fd(ptr);\n  if (char_var == '\\0') {\n    return 0;\n  }\n  temp = *(undefined *)((long)output + 0x92);\n  *(undefined *)((long)output + 0x92) = 0;\n  error_message = (char *)strtoul((char *)(output + 0x11),(char **)0x0,10);\n  string_table = \"%s: long name table is too small, (size = %ld)\\n\";\n  output[7] = error_message;\n  *(undefined *)((long)output + 0x92) = temp;\n  if ((char *)0x7 < error_message) {\n    if (((long)error_message <= table_size) && (-1 < (long)error_message)) {\n      output[9] = error_message + 0x3c + (long)output[9];\n      string_table = (char *)malloc((size_t)(error_message + 1));\n      output[6] = string_table;\n      if (string_table == (char *)0x0) {\n        error_message = dcgettext(0,\"Out of memory reading long symbol names in archive\\n\",5);\n        report_error(error_message);\n        return 1;\n      }\n      read_size = fread(string_table,(size_t)error_message,1,file);\n      if (read_size == 1) {\n        if ((*(byte *)(output + 7) & 1) != 0) {\n          getc(file);\n        }\n        output[6][(long)output[7]] = '\\0';\n        return 0;\n      }\n      free(output[6]);\n      error_message = \"%s: failed to read long symbol name string table\\n\";\n      output[6] = (char *)0x0;\nLAB_00102658:\n      error_message = dcgettext(0,error_message,5);\n      report_error(error_message,filename);\n      return 1;\n    }\n    string_table = \"%s: long name table is too big, (size = %#lx)\\n\";\n  }\n  error_message = dcgettext(0,string_table,5);\n  report_error(error_message,filename,error_message);\n  return 1;\n}\n\n",
            "current_name": "parse_archive_header_001025ab",
            "entrypoint": "0x001025ab",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001025ab": "parse_archive_header_001025ab",
                "ZEXT816": "zero_extend",
                "ZEXT816(0)": "zero_padding",
                "__ptr": "ptr",
                "cVar2": "char_var",
                "dcgettext": "get_translation",
                "error": "report_error",
                "fread": "read_file",
                "free": "release_memory",
                "fseek": "seek_file",
                "get": "getc",
                "getc": "read_character",
                "iVar3": "result",
                "malloc": "allocate_memory",
                "param_1": "output",
                "param_2": "filename",
                "param_3": "file",
                "param_4": "table_size",
                "pcVar4": "error_message",
                "pcVar7": "string_table",
                "sVar5": "read_size",
                "strdup": "duplicate_string",
                "strtoul": "convert_string_to_unsigned_long",
                "uVar1": "temp",
                "uVar6": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001027fd": {
            "additional_data": {
                "FUN_001027fd": {
                    "1": "check_string_match",
                    "20": "compare_strings",
                    "8": "string_comparison"
                },
                "__n": {
                    "2": "string_length",
                    "24": "length",
                    "5": "string2_length"
                },
                "auVar2": {
                    "1": "results_array",
                    "2": "return_value",
                    "21": "result",
                    "3": "output",
                    "4": "comparison_result"
                },
                "extraout_var": {
                    "1": "extra_variable",
                    "2": "extra_var",
                    "3": "extra_output"
                },
                "iVar1": {
                    "1": "string_comparison",
                    "2": "comparison",
                    "21": "comparison_result",
                    "3": "result"
                },
                "in_RAX": {
                    "2": "return_value"
                },
                "param_1": {
                    "1": "string_1",
                    "30": "string1"
                },
                "param_2": {
                    "1": "string_2",
                    "30": "string2"
                }
            },
            "called": [
                "strlen",
                "strncmp"
            ],
            "calling": [
                "FUN_001025ab"
            ],
            "code": "\nundefined  [16] compare_strings_001027fd(char *string1,char *string2)\n\n{\n  int comparison_result;\n  undefined8 return_value;\n  size_t length;\n  undefined4 extra_output;\n  undefined result [16];\n  \n  length = strlen(string2);\n  comparison_result = strncmp(string1,string2,length);\n  result._1_7_ = (undefined7)(CONCAT44(extra_output,comparison_result) >> 8);\n  result[0] = comparison_result == 0;\n  result._8_8_ = return_value;\n  return result;\n}\n\n",
            "current_name": "compare_strings_001027fd",
            "entrypoint": "0x001027fd",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001027fd": "compare_strings_001027fd",
                "__n": "length",
                "auVar2": "result",
                "extraout_var": "extra_output",
                "iVar1": "comparison_result",
                "in_RAX": "return_value",
                "param_1": "string1",
                "param_2": "string2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001028be": {
            "additional_data": {
                "FUN_001028be": {
                    "1": "validate_archive_header",
                    "2": "read_archive_header",
                    "3": "validate_and_read_archive_header",
                    "5": "parse_archive_header",
                    "7": "process_archive_header"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "error": {
                    "1": "print_error_message"
                },
                "fread": {
                    "2": "read_data"
                },
                "fseek": {
                    "1": "file_seek"
                },
                "iVar2": {
                    "1": "return_value",
                    "11": "seek_result",
                    "2": "seek_error",
                    "3": "file_seek_result",
                    "8": "result"
                },
                "param_1": {
                    "1": "input_params",
                    "2": "header",
                    "3": "parameters",
                    "4": "header_data",
                    "8": "archive_header"
                },
                "pcVar7": {
                    "1": "error_fmt_string",
                    "19": "error_format",
                    "3": "error_format_string",
                    "5": "error_message"
                },
                "sVar5": {
                    "1": "read_bytes",
                    "15": "bytes_read",
                    "6": "read_result",
                    "8": "read_size"
                },
                "strtoul": {
                    "1": "parse_unsigned_long"
                },
                "uVar1": {
                    "1": "temp_byte",
                    "15": "previous_value",
                    "2": "prev_value",
                    "4": "old_value"
                },
                "uVar3": {
                    "1": "archive_size",
                    "2": "archive_header_size",
                    "28": "header_size"
                },
                "uVar4": {
                    "1": "error_text",
                    "2": "error_string",
                    "23": "error_message",
                    "4": "error_msg"
                },
                "uVar6": {
                    "1": "filename",
                    "2": "file_name",
                    "20": "archive_name",
                    "3": "program_name"
                }
            },
            "called": [
                "dcgettext",
                "fseek",
                "strtoul",
                "fread",
                "error"
            ],
            "calling": [
                "FUN_001025ab"
            ],
            "code": "\nundefined8 process_archive_header_001028be(undefined8 *archive_header)\n\n{\n  undefined previous_value;\n  int seek_result;\n  ulong header_size;\n  undefined8 error_message;\n  size_t bytes_read;\n  undefined8 archive_name;\n  char *error_format;\n  \n  previous_value = *(undefined *)((long)archive_header + 0x92);\n  *(undefined *)((long)archive_header + 0x92) = 0;\n  header_size = strtoul((char *)(archive_header + 0x11),(char **)0x0,10);\n  *(undefined *)((long)archive_header + 0x92) = previous_value;\n  if ((long)header_size < 0) {\n    archive_name = *archive_header;\n    error_message = dcgettext(0,\"%s: invalid archive header size: %ld\\n\",5);\n    print_error(error_message,archive_name,header_size);\n  }\n  else {\n    header_size = header_size + 1 & 0xfffffffffffffffe;\n    archive_header[9] = header_size + 0x3c + archive_header[9];\n    seek_result = fseek((FILE *)archive_header[1],header_size,1);\n    if (seek_result == 0) {\n      bytes_read = fread(archive_header + 0xb,1,0x3c,(FILE *)archive_header[1]);\n      if ((bytes_read == 0x3c) || (bytes_read == 0)) {\n        return 1;\n      }\n      archive_name = *archive_header;\n      error_format = \"%s: failed to read archive header following archive index\\n\";\n    }\n    else {\n      archive_name = *archive_header;\n      error_format = \"%s: failed to skip archive symbol table\\n\";\n    }\n    error_message = dcgettext(0,error_format,5);\n    print_error(error_message,archive_name);\n  }\n  return 0;\n}\n\n",
            "current_name": "process_archive_header_001028be",
            "entrypoint": "0x001028be",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001028be": "process_archive_header_001028be",
                "dcgettext": "get_error_message",
                "error": "print_error",
                "fread": "read_data",
                "fseek": "file_seek",
                "iVar2": "seek_result",
                "param_1": "archive_header",
                "pcVar7": "error_format",
                "sVar5": "bytes_read",
                "strtoul": "convert_to_unsigned_long",
                "uVar1": "previous_value",
                "uVar3": "header_size",
                "uVar4": "error_message",
                "uVar6": "archive_name"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001029a5": {
            "additional_data": {
                "FUN_001029a5": {
                    "1": "extract_archive_member_name",
                    "17": "extract_archive_member",
                    "2": "parse_archive_member",
                    "7": "extract_file_from_archive"
                },
                "__stream": {
                    "1": "file_pointer",
                    "20": "file_stream",
                    "9": "file"
                },
                "iVar6": {
                    "1": "temp_var4",
                    "12": "file_descriptor",
                    "2": "result",
                    "7": "temp_var6"
                },
                "lVar13": {
                    "1": "loop_var13",
                    "2": "length",
                    "3": "counter",
                    "5": "loop_index",
                    "6": "index"
                },
                "local_b8": {
                    "1": "stat_info",
                    "16": "file_stat",
                    "3": "file_info",
                    "7": "file_stats"
                },
                "local_c0": {
                    "1": "temp_path",
                    "2": "temp_buffer",
                    "3": "buffer",
                    "9": "local_buffer"
                },
                "param_1": {
                    "1": "archive_member_data",
                    "2": "parameters",
                    "3": "archive_header",
                    "4": "file_info",
                    "8": "archive_member"
                },
                "param_2": {
                    "1": "archive_table",
                    "2": "filename",
                    "4": "output_file_path",
                    "6": "file_paths",
                    "7": "file_names"
                },
                "pcVar14": {
                    "1": "temp_file_path",
                    "2": "param1",
                    "4": "filename",
                    "7": "file_name"
                },
                "pcVar15": {
                    "1": "error_msg",
                    "2": "error_message2",
                    "21": "error_message",
                    "4": "error_string"
                },
                "pcVar16": {
                    "1": "temp_var16",
                    "2": "format_string",
                    "3": "error_message_format",
                    "5": "error_format",
                    "8": "error_message"
                },
                "pcVar17": {
                    "1": "file_path"
                },
                "pcVar20": {
                    "1": "error_message"
                },
                "puVar12": {
                    "1": "new_archive_member",
                    "12": "result",
                    "3": "result_pointer",
                    "6": "result_ptr"
                },
                "sVar11": {
                    "1": "file_read_size",
                    "11": "read_size",
                    "12": "bytes_read",
                    "2": "num_bytes_read"
                },
                "uVa2": {
                    "1": "temp_var2"
                },
                "uVar1": {
                    "1": "temp_value",
                    "11": "temp_var1",
                    "4": "temp_var",
                    "9": "temp"
                },
                "uVar10": {
                    "1": "u_var10",
                    "2": "translation",
                    "3": "error_string",
                    "4": "error_message",
                    "5": "temp_var10"
                },
                "uVar2": {
                    "1": "u_var_result1",
                    "11": "temp_var2",
                    "12": "result"
                },
                "uVar3": {
                    "1": "temp_variable3",
                    "12": "temp_var3",
                    "2": "temp_var1",
                    "3": "temp1"
                },
                "uVar4": {
                    "1": "ret_val3",
                    "12": "temp_var4",
                    "2": "value2",
                    "3": "var4"
                },
                "uVar5": {
                    "1": "var4",
                    "12": "temp_var5",
                    "2": "temp_var3",
                    "3": "temp3"
                },
                "uVar7": {
                    "1": "name_index_value",
                    "17": "long_name_index",
                    "4": "index",
                    "9": "start_index"
                },
                "uVar8": {
                    "1": "long_name_size",
                    "15": "long_name_table_size",
                    "2": "table_size",
                    "9": "end_index"
                },
                "uVar9": {
                    "1": "name_index",
                    "2": "current_char_index",
                    "3": "name_length",
                    "9": "current_index"
                }
            },
            "called": [
                "free",
                "FUN_001029a5",
                "dcgettext",
                "fseek",
                "fread",
                "fstat",
                "FUN_00102f65",
                "error",
                "fclose",
                "FUN_00102cc4",
                "fileno",
                "FUN_001025ab",
                "FUN_00105370",
                "fopen",
                "strtoul",
                "strcmp",
                "FUN_00103160"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_0010358d"
            ],
            "code": "\nundefined4 * extract_archive_member_001029a5(undefined8 *archive_member,char **file_names)\n\n{\n  undefined temp_var1;\n  undefined4 result;\n  undefined4 temp_var3;\n  undefined4 temp_var4;\n  undefined4 temp_var5;\n  int file_descriptor;\n  ulong long_name_index;\n  ulong long_name_table_size;\n  ulong current_index;\n  undefined8 temp_var10;\n  FILE *file_stream;\n  size_t bytes_read;\n  undefined4 *result;\n  long index;\n  char *file_name;\n  char *error_message;\n  char *error_message;\n  char *local_buffer;\n  stat file_stat;\n  \n  if (*(char *)(archive_member + 0xb) != '/') {\n    index = 0;\n    do {\n      if (*(char *)((long)archive_member + index + 0x58) == '/') {\n        *(undefined *)((long)archive_member + index + 0x58) = 0;\n        result = (undefined4 *)FUN_00103160(archive_member + 0xb);\n        return result;\n      }\n      index = index + 1;\n    } while (index != 0x10);\n    result = (undefined4 *)FUN_00105370(0x11);\n    result = *(undefined4 *)(archive_member + 0xb);\n    temp_var3 = *(undefined4 *)((long)archive_member + 0x5c);\n    temp_var4 = *(undefined4 *)(archive_member + 0xc);\n    temp_var5 = *(undefined4 *)((long)archive_member + 100);\n    *(undefined *)(result + 4) = 0;\n    *result = result;\n    result[1] = temp_var3;\n    result[2] = temp_var4;\n    result[3] = temp_var5;\n    return result;\n  }\n  if ((archive_member[6] == 0) || (archive_member[7] == 0)) {\n    error_message = \"Archive member uses long names, but no longname table found\\n\";\nLAB_00102acd:\n    temp_var10 = dcgettext(0,error_message,5);\n    error(temp_var10);\n    return (undefined4 *)0x0;\n  }\n  temp_var1 = *(undefined *)((long)archive_member + 0x92);\n  archive_member[8] = 0;\n  *(undefined *)((long)archive_member + 0x92) = 0;\n  long_name_index = strtoul((char *)((long)archive_member + 0x59),&local_buffer,10);\n  if (((*(int *)(archive_member + 10) != 0) && (local_buffer != (char *)0x0)) && (*local_buffer == ':')) {\n    long_name_table_size = strtoul(local_buffer + 1,(char **)0x0,10);\n    archive_member[8] = long_name_table_size;\n  }\n  long_name_table_size = archive_member[7];\n  *(undefined *)((long)archive_member + 0x92) = temp_var1;\n  if (long_name_table_size < long_name_index) {\n    temp_var10 = dcgettext(0,\"Found long name index (%ld) beyond end of long name table\\n\",5);\n    error(temp_var10,long_name_index);\n    return (undefined4 *)0x0;\n  }\n  index = archive_member[6];\n  for (current_index = long_name_index;\n      ((long_name_table_size != current_index && (*(char *)(index + current_index) != '\\0')) &&\n      (*(char *)(index + current_index) != '\\n')); current_index = current_index + 1) {\n  }\n  if ((current_index != 0) && (*(char *)(index + -1 + current_index) == '/')) {\n    current_index = current_index - 1;\n  }\n  if (current_index < long_name_table_size) {\n    long_name_table_size = current_index;\n  }\n  *(undefined *)(index + long_name_table_size) = 0;\n  if ((*(int *)(archive_member + 10) == 0) || (archive_member[8] == 0)) goto LAB_00102c2d;\n  if (long_name_table_size <= long_name_index) {\n    error_message = \"Invalid Thin archive member name\\n\";\n    goto LAB_00102acd;\n  }\n  error_message = (char *)FUN_00102cc4(*archive_member,archive_member[6] + long_name_index,long_name_table_size - long_name_index);\n  if (error_message != (char *)0x0) {\n    if ((*file_names == (char *)0x0) || (file_descriptor = strcmp(*file_names,error_message), file_descriptor != 0)) {\n      if ((FILE *)file_names[1] != (FILE *)0x0) {\n        fclose((FILE *)file_names[1]);\n        file_names[1] = (char *)0x0;\n      }\n      FUN_00102f65(file_names);\n      file_stream = fopen(error_message,\"rb\");\n      if (file_stream != (FILE *)0x0) {\n        file_descriptor = fileno(file_stream);\n        file_descriptor = fstat(file_descriptor,&file_stat);\n        if ((-1 < file_descriptor) &&\n           (file_descriptor = FUN_001025ab(file_names,error_message,file_stream,file_stat.st_size,0), file_descriptor == 0))\n        goto LAB_00102b84;\n      }\n    }\n    else {\nLAB_00102b84:\n      file_descriptor = fseek((FILE *)file_names[1],archive_member[8],0);\n      if (file_descriptor == 0) {\n        bytes_read = fread(file_names + 0xb,1,0x3c,(FILE *)file_names[1]);\n        if (bytes_read == 0x3c) {\n          if (*(short *)((long)file_names + 0x92) == 0xa60) {\n            result = (undefined4 *)extract_archive_member_001029a5(file_names,0);\n            if (result != (undefined4 *)0x0) {\n              free(error_message);\n              return result;\n            }\n            goto LAB_00102c25;\n          }\n          file_name = *file_names;\n          error_message = \"%s: did not find a valid archive header\\n\";\n        }\n        else {\n          file_name = *file_names;\n          error_message = \"%s: failed to read archive header\\n\";\n        }\n      }\n      else {\n        file_name = *file_names;\n        error_message = \"%s: failed to seek to next file name\\n\";\n      }\n      temp_var10 = dcgettext(0,error_message,5);\n      error(temp_var10,file_name);\n    }\n  }\nLAB_00102c25:\n  free(error_message);\nLAB_00102c2d:\n  result = (undefined4 *)FUN_00103160(archive_member[6] + long_name_index);\n  return result;\n}\n\n",
            "current_name": "extract_archive_member_001029a5",
            "entrypoint": "0x001029a5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001029a5": "extract_archive_member_001029a5",
                "__stream": "file_stream",
                "iVar6": "file_descriptor",
                "lVar13": "index",
                "local_b8": "file_stat",
                "local_c0": "local_buffer",
                "param_1": "archive_member",
                "param_2": "file_names",
                "pcVar14": "file_name",
                "pcVar15": "error_message",
                "pcVar16": "error_message",
                "puVar12": "result",
                "sVar11": "bytes_read",
                "uVar1": "temp_var1",
                "uVar10": "temp_var10",
                "uVar2": "result",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "uVar5": "temp_var5",
                "uVar7": "long_name_index",
                "uVar8": "long_name_table_size",
                "uVar9": "current_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102c98": {
            "additional_data": {
                "FUN_00102c98": {
                    "1": "handle_unhandled_data",
                    "29": "handle_unhandled_data_length"
                },
                "uVar1": {
                    "17": "error_message",
                    "2": "error_string"
                },
                "unaff_EBX": {
                    "1": "error_flag",
                    "27": "error_code"
                }
            },
            "called": [
                "dcgettext",
                "abort",
                "error"
            ],
            "calling": [
                "FUN_00103ad0"
            ],
            "code": "\nvoid handle_unhandled_data_length_00102c98(void)\n\n{\n  undefined8 error_message;\n  undefined4 error_code;\n  \n  error_message = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n  error(error_message,error_code);\n                    \n  abort();\n}\n\n",
            "current_name": "handle_unhandled_data_length_00102c98",
            "entrypoint": "0x00102c98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102c98": "handle_unhandled_data_length_00102c98",
                "uVar1": "error_message",
                "unaff_EBX": "error_code"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102cbc": {
            "additional_data": {
                "'\\0'": {
                    "1": "null_char"
                },
                "FUN_00102cbc": {
                    "1": "decode_filepath",
                    "11": "extract_file_name",
                    "2": "extract_file_name_from_path",
                    "3": "extract_filename",
                    "5": "parse_file_path"
                },
                "F_UNDETERMINED": {
                    "1": "improve_and_readablize_code"
                },
                "__size": {
                    "1": "name_size",
                    "12": "size",
                    "2": "malloc_size",
                    "5": "total_size"
                },
                "bVar8": {
                    "1": "byte_value",
                    "3": "byte_var",
                    "6": "is_negative"
                },
                "cVar2": {
                    "1": "char",
                    "20": "current_char"
                },
                "char *param_2": {
                    "1": "input_string"
                },
                "char *pcVar3": {
                    "1": "input_string_ptr"
                },
                "char *pcVar4": {
                    "1": "last_slash_ptr"
                },
                "char *unaff_RBX": {
                    "1": "input_string_ptr2"
                },
                "char cVar2": {
                    "1": "current_char"
                },
                "dcgettext": {
                    "1": "get_localized_text"
                },
                "error": {
                    "1": "report_error"
                },
                "extraout_RDX": {
                    "1": "result_count",
                    "2": "total_size",
                    "3": "path_length",
                    "5": "extra_size"
                },
                "lVar1": {
                    "1": "file_name_length",
                    "2": "name_length",
                    "3": "total_length",
                    "4": "total_size",
                    "7": "length"
                },
                "long lVar1": {
                    "1": "diff_length"
                },
                "malloc": {
                    "1": "allocate_memory"
                },
                "param_1": {
                    "1": "file_handle",
                    "15": "param1",
                    "2": "arg1",
                    "5": "param"
                },
                "param_2": {
                    "1": "file_string",
                    "11": "file_path",
                    "4": "input_string",
                    "8": "param2"
                },
                "pcVar3": {
                    "1": "current_path_pos",
                    "2": "current_char_pointer",
                    "4": "ptr1",
                    "5": "current_ptr",
                    "7": "current_char"
                },
                "pcVar4": {
                    "1": "last_slash_pointer",
                    "3": "last_slash_pos",
                    "4": "ptr2",
                    "6": "last_slash_ptr",
                    "7": "last_slash"
                },
                "uVar5": {
                    "1": "error_code",
                    "2": "translation",
                    "3": "err_msg",
                    "4": "error_string",
                    "7": "error_msg",
                    "8": "error_message"
                },
                "uVar6": {
                    "1": "loop_counter1",
                    "15": "remaining_size",
                    "2": "remaining_length",
                    "5": "length"
                },
                "uVar7": {
                    "1": "ptr_difference",
                    "2": "diff",
                    "3": "slash_offset"
                },
                "ulong __size": {
                    "1": "new_string_size"
                },
                "ulong bVar8": {
                    "1": "flag"
                },
                "ulong extraout_RDX": {
                    "1": "remaining_chars2"
                },
                "ulong uVar6": {
                    "1": "remaining_chars"
                },
                "ulong uVar7": {
                    "1": "diff_length2"
                },
                "unaff_RBX": {
                    "1": "filename",
                    "2": "ptr",
                    "3": "file_path_ptr"
                },
                "undefined8 *param_1": {
                    "1": "param_1"
                },
                "undefined8 uVar5": {
                    "1": "translation"
                }
            },
            "called": [
                "FUN_00102fc7"
            ],
            "calling": [
                "FUN_00105370"
            ],
            "code": "\nchar * extract_file_name_00102cbc(undefined8 param1,char *file_path)\n\n{\n  ulong size;\n  long length;\n  char current_char;\n  char *current_char;\n  char *last_slash;\n  undefined8 error_message;\n  ulong remaining_size;\n  ulong extra_size;\n  char *file_path_ptr;\n  ulong slash_offset;\n  byte flag;\n  \n  flag = 0;\n  FUN_00102fc7();\n  current_char = file_path_ptr;\n  last_slash = file_path_ptr;\n  while (current_char = *current_char, current_char != '\\0') {\n    current_char = current_char + 1;\n    if (current_char == '/') {\n      last_slash = current_char;\n    }\n  }\n  if ((*file_path == '/') || (file_path_ptr == last_slash)) {\n    if (extra_size + 1 == 0) {\n      return (char *)0x0;\n    }\n    last_slash = (char *)malloc(extra_size + 1);\n    remaining_size = extra_size;\n    current_char = last_slash;\n    if (last_slash != (char *)0x0) {\n      for (; remaining_size != 0; remaining_size = remaining_size - 1) {\n        *current_char = *file_path;\n        file_path = file_path + (ulong)flag * -2 + 1;\n        current_char = current_char + (ulong)flag * -2 + 1;\n      }\n      last_slash[extra_size] = '\\0';\n      return last_slash;\n    }\n  }\n  else {\n    slash_offset = (long)last_slash - (long)file_path_ptr;\n    length = slash_offset + extra_size;\n    remaining_size = extra_size;\n    if (extra_size <= slash_offset) {\n      remaining_size = slash_offset;\n    }\n    size = length + 1;\n    if (size < remaining_size) {\n      error_message = dcgettext(0,\"Abnormal length of thin archive member name: %lx\\n\",5);\n      handle_error(error_message,extra_size);\n      return (char *)0x0;\n    }\n    last_slash = (char *)malloc(size);\n    current_char = last_slash;\n    if (last_slash != (char *)0x0) {\n      for (; remaining_size = extra_size, slash_offset != 0; slash_offset = slash_offset - 1) {\n        *current_char = *file_path_ptr;\n        file_path_ptr = file_path_ptr + (ulong)flag * -2 + 1;\n        current_char = current_char + (ulong)flag * -2 + 1;\n      }\n      for (; remaining_size != 0; remaining_size = remaining_size - 1) {\n        *current_char = *file_path;\n        file_path = file_path + (ulong)flag * -2 + 1;\n        current_char = current_char + (ulong)flag * -2 + 1;\n      }\n      last_slash[length] = '\\0';\n      return last_slash;\n    }\n  }\n  error_message = dcgettext(0,\"Out of memory\\n\",5);\n  handle_error(error_message);\n  return (char *)0x0;\n}\n\n",
            "current_name": "extract_file_name_00102cbc",
            "entrypoint": "0x00102cbc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102cbc": "extract_file_name_00102cbc",
                "__size": "size",
                "bVar8": "flag",
                "cVar2": "current_char",
                "dcgettext": "translate",
                "error": "handle_error",
                "extraout_RDX": "extra_size",
                "lVar1": "length",
                "malloc": "allocate_memory",
                "param_1": "param1",
                "param_2": "file_path",
                "pcVar3": "current_char",
                "pcVar4": "last_slash",
                "uVar5": "error_message",
                "uVar6": "remaining_size",
                "uVar7": "slash_offset",
                "unaff_RBX": "file_path_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102cc4": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "reverse_and_allocate_memory"
                },
                "<param_1>": {
                    "1": "input_string"
                },
                "<param_2>": {
                    "1": "copy_string"
                },
                "<param_3>": {
                    "1": "string_length"
                },
                "FUN_00102cc4": {
                    "1": "extract_file_path",
                    "2": "extract_archive_member_name",
                    "23": "extract_file_name",
                    "4": "extract_filename"
                },
                "__size": {
                    "1": "malloc_size",
                    "2": "size",
                    "3": "allocation_size",
                    "4": "total_length",
                    "5": "buffer_size",
                    "8": "allocated_size"
                },
                "bVar8": {
                    "1": "is_negative_flag",
                    "14": "is_negative",
                    "2": "is_backward"
                },
                "cVar2": {
                    "1": "character",
                    "2": "current_character",
                    "23": "current_char"
                },
                "dcgettext": {
                    "1": "construct_error_message",
                    "2": "translate_message"
                },
                "error": {
                    "1": "report_error",
                    "2": "print_error"
                },
                "lVar1": {
                    "1": "new_length",
                    "10": "total_length",
                    "2": "end_index",
                    "3": "total_size"
                },
                "malloc": {
                    "8": "allocate_memory"
                },
                "param_1": {
                    "1": "input_string",
                    "20": "file_path",
                    "8": "path"
                },
                "param_2": {
                    "1": "file_content",
                    "2": "member_name",
                    "3": "filename",
                    "5": "source",
                    "9": "file_name"
                },
                "param_3": {
                    "1": "content_size",
                    "12": "length",
                    "2": "member_name_length",
                    "6": "file_name_length"
                },
                "pcVar3": {
                    "1": "new_file_name",
                    "2": "current_char",
                    "3": "destination"
                },
                "pcVar4": {
                    "1": "last_slash_pointer",
                    "13": "last_slash",
                    "2": "last_slash_index",
                    "4": "last_slash_position",
                    "5": "last_slash_ptr"
                },
                "uVar5": {
                    "1": "err_msg",
                    "23": "error_message",
                    "4": "error_msg"
                },
                "uVar6": {
                    "1": "loop_counter1",
                    "16": "remaining_length",
                    "3": "remaining_size",
                    "4": "loop_counter"
                },
                "uVar7": {
                    "1": "source_string_offset",
                    "2": "file_path_length",
                    "3": "file_name_length",
                    "7": "path_length"
                }
            },
            "called": [
                "dcgettext",
                "error",
                "malloc"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_0010358d"
            ],
            "code": "\nchar * extract_file_name_00102cc4(char *file_path,char *file_name,ulong length)\n\n{\n  ulong allocated_size;\n  long total_length;\n  char current_char;\n  char *destination;\n  char *last_slash;\n  undefined8 error_message;\n  ulong remaining_length;\n  ulong path_length;\n  byte is_negative;\n  \n  is_negative = 0;\n  destination = file_path;\n  last_slash = file_path;\n  while (current_char = *destination, current_char != '\\0') {\n    destination = destination + 1;\n    if (current_char == '/') {\n      last_slash = destination;\n    }\n  }\n  if ((*file_name == '/') || (file_path == last_slash)) {\n    if (length + 1 == 0) {\n      return (char *)0x0;\n    }\n    last_slash = (char *)malloc(length + 1);\n    remaining_length = length;\n    destination = last_slash;\n    if (last_slash != (char *)0x0) {\n      for (; remaining_length != 0; remaining_length = remaining_length - 1) {\n        *destination = *file_name;\n        file_name = file_name + (ulong)is_negative * -2 + 1;\n        destination = destination + (ulong)is_negative * -2 + 1;\n      }\n      last_slash[length] = '\\0';\n      return last_slash;\n    }\n  }\n  else {\n    path_length = (long)last_slash - (long)file_path;\n    total_length = path_length + length;\n    remaining_length = length;\n    if (length <= path_length) {\n      remaining_length = path_length;\n    }\n    allocated_size = total_length + 1;\n    if (allocated_size < remaining_length) {\n      error_message = dcgettext(0,\"Abnormal length of thin archive member name: %lx\\n\",5);\n      print_error(error_message,length);\n      return (char *)0x0;\n    }\n    last_slash = (char *)malloc(allocated_size);\n    destination = last_slash;\n    if (last_slash != (char *)0x0) {\n      for (; path_length != 0; path_length = path_length - 1) {\n        *destination = *file_path;\n        file_path = file_path + (ulong)is_negative * -2 + 1;\n        destination = destination + (ulong)is_negative * -2 + 1;\n      }\n      for (; length != 0; length = length - 1) {\n        *destination = *file_name;\n        file_name = file_name + (ulong)is_negative * -2 + 1;\n        destination = destination + (ulong)is_negative * -2 + 1;\n      }\n      last_slash[total_length] = '\\0';\n      return last_slash;\n    }\n  }\n  error_message = dcgettext(0,\"Out of memory\\n\",5);\n  print_error(error_message);\n  return (char *)0x0;\n}\n\n",
            "current_name": "extract_file_name_00102cc4",
            "entrypoint": "0x00102cc4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102cc4": "extract_file_name_00102cc4",
                "__size": "allocated_size",
                "bVar8": "is_negative",
                "cVar2": "current_char",
                "dcgettext": "translate_message",
                "error": "print_error",
                "lVar1": "total_length",
                "malloc": "allocate_memory",
                "param_1": "file_path",
                "param_2": "file_name",
                "param_3": "length",
                "pcVar3": "destination",
                "pcVar4": "last_slash",
                "uVar5": "error_message",
                "uVar6": "remaining_length",
                "uVar7": "path_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102f65": {
            "additional_data": {
                "(*param_1)": {
                    "2": "pointer1"
                },
                "(*param_1)[3]": {
                    "1": "pointer1"
                },
                "(*param_1)[4]": {
                    "1": "pointer2"
                },
                "(*param_1)[6]": {
                    "1": "pointer3"
                },
                "(param_1[3])": {
                    "1": "pointer3"
                },
                "(param_1[4])": {
                    "1": "pointer4"
                },
                "(param_1[6])": {
                    "1": "pointer6"
                },
                "*(undefined (*) [16])(param_1 + 3)": {
                    "1": "pointer3_array"
                },
                "*param_1": {
                    "1": "pointer_to_memory",
                    "2": "memory_ptr"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "FUN_00102f65": {
                    "1": "reset_pointers",
                    "10": "free_memory",
                    "11": "clear_memory",
                    "2": "free_resources"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "ZEXT816(0)": {
                    "1": "zero_pointer"
                },
                "__ptr": {
                    "1": "pointer"
                },
                "param_1": {
                    "1": "data",
                    "2": "resources",
                    "5": "memory_blocks",
                    "8": "memory_pointers"
                },
                "param_1[3]": {
                    "1": "block_1",
                    "3": "block3",
                    "5": "pointer1"
                },
                "param_1[4]": {
                    "1": "memory_block[4]",
                    "3": "block4",
                    "5": "pointer2"
                },
                "param_1[6]": {
                    "1": "pointer_to_memory6",
                    "3": "pointer6",
                    "5": "pointer3"
                }
            },
            "called": [
                "free"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_0010358d"
            ],
            "code": "\nvoid clear_memory_00102f65(void **memory_pointers)\n\n{\n  free(*memory_pointers);\n  freepointer3;\n  freepointer4;\n  freepointer6;\n  *memory_pointers = (void *)0x0;\n  pointer3 = (void *)0x0;\n  *(undefined (*) [16])(memory_pointers + 3) = zero_pointer;\n  return;\n}\n\n",
            "current_name": "clear_memory_00102f65",
            "entrypoint": "0x00102f65",
            "imported": false,
            "improved": true,
            "renaming": {
                "(param_1[3])": "pointer3",
                "(param_1[4])": "pointer4",
                "(param_1[6])": "pointer6",
                "FUN_00102f65": "clear_memory_00102f65",
                "ZEXT816(0)": "zero_pointer",
                "param_1": "memory_pointers",
                "param_1[3]": "pointer1",
                "param_1[4]": "pointer2",
                "param_1[6]": "pointer3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102fa0": {
            "additional_data": {
                "&DAT_00107040": {
                    "1": "byte_validity_table"
                },
                "**param_1": {
                    "1": "byte_value"
                },
                "*param_1": {
                    "1": "current_position"
                },
                "*param_1 + 1": {
                    "1": "next_character"
                },
                "DAT_00107040": {
                    "1": "character_flags",
                    "2": "lookup_table"
                },
                "FUN_00102fa0": {
                    "1": "skip_nonzero_options",
                    "2": "skip_non_alpha_characters",
                    "3": "skip_non_interesting_bytes"
                },
                "param_1": {
                    "1": "buffer",
                    "2": "data",
                    "3": "byte_pointer",
                    "6": "data_pointer"
                }
            },
            "called": [],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nvoid skip_non_relevant_bytes_00102fa0(byte **data_pointer)\n\n{\n  while (((&DAT_00107040)[(ulong)**data_pointer * 2] & 0x40) != 0) {\n    *data_pointer = *data_pointer + 1;\n  }\n  return;\n}\n\n",
            "current_name": "skip_non_relevant_bytes_00102fa0",
            "entrypoint": "0x00102fa0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102fa0": "skip_non_relevant_bytes_00102fa0",
                "param_1": "data_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102fbc": {
            "additional_data": {
                "FUN_00102fbc": {
                    "1": "terminate_process",
                    "15": "exit_program",
                    "2": "exit_with_error",
                    "9": "terminate_program"
                },
                "__status": {
                    "1": "program_exit_status",
                    "12": "exit_status",
                    "2": "error_code",
                    "3": "status",
                    "4": "exit_code"
                }
            },
            "called": [
                "exit"
            ],
            "calling": [
                "FUN_00103bf0",
                "FUN_00102fc7"
            ],
            "code": "\nvoid exit_program_00102fbc(void)\n\n{\n                    \n  exit(1);\n}\n\n",
            "current_name": "exit_program_00102fbc",
            "entrypoint": "0x00102fbc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102fbc": "exit_program_00102fbc"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102fc7": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "allocate_memory_and_fill_with_text"
                },
                "FUN_00102fbc": {
                    "1": "check_extra_data"
                },
                "FUN_00102fc7": {
                    "1": "allocate_and_format_error_message",
                    "2": "create_error_message",
                    "3": "allocate_memory_and_copy_strings",
                    "4": "allocate_memory",
                    "5": "allocate_memory_and_format_string"
                },
                "FUN_00105370": {
                    "1": "allocate_memory"
                },
                "F_AllocateMemory": {
                    "1": "allocate_memory"
                },
                "F_CalculateStringLength": {
                    "1": "calculate_string_length"
                },
                "F_CheckReturnValue": {
                    "1": "check_return_value"
                },
                "F_CopyStrings": {
                    "1": "copy_strings"
                },
                "F_ExtractMemoryAllocationError": {
                    "1": "extract_memory_allocation_error"
                },
                "F_FreeMemory": {
                    "1": "free_memory"
                },
                "__ptr": {
                    "1": "stderr",
                    "2": "stderr_file",
                    "3": "file_pointer",
                    "6": "output_file",
                    "8": "error_stream"
                },
                "__s": {
                    "1": "format_specifier",
                    "2": "message_format",
                    "21": "format_string"
                },
                "_stderr": {
                    "1": "standard_error"
                },
                "apcStack_e0": {
                    "1": "buffer_array",
                    "4": "stack_array",
                    "6": "string_stack",
                    "9": "string_array"
                },
                "apcStack_e0[3]": {
                    "1": "empty_string"
                },
                "bVar9": {
                    "1": "is_negative_direction",
                    "2": "is_reversed",
                    "3": "increment",
                    "4": "byte_value",
                    "5": "is_negative",
                    "6": "byte_var"
                },
                "cVar1": {
                    "1": "is_extra_data_available",
                    "12": "result",
                    "2": "character",
                    "4": "is_valid"
                },
                "extraout_RDX": {
                    "1": "extra_data",
                    "2": "extra_rdx",
                    "3": "extra_output_rdx"
                },
                "extraout_XMM0_Qa": {
                    "1": "extra_return2",
                    "2": "extra_output_xmm0"
                },
                "fprint": {
                    "1": "print"
                },
                "fprintf": {
                    "1": "print_error_message"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "lStack_b8": {
                    "1": "stack_var",
                    "2": "offset",
                    "3": "stack_offset",
                    "4": "memory_offset"
                },
                "lVar7": {
                    "1": "total_text_length",
                    "14": "total_length"
                },
                "param_1": {
                    "1": "bytes",
                    "12": "size",
                    "2": "total_bytes",
                    "3": "bytes_to_allocate"
                },
                "pcVar5": {
                    "1": "allocated_memory",
                    "3": "result",
                    "5": "formatted_string",
                    "9": "result_string"
                },
                "pcVar8": {
                    "1": "output_char",
                    "13": "current_char",
                    "2": "destination"
                },
                "ppcVar10": {
                    "1": "current_string_ptr2",
                    "2": "stack_pointer",
                    "3": "string_array"
                },
                "ppcVar11": {
                    "1": "current_string_ptr3",
                    "2": "next_string",
                    "4": "next_string_array"
                },
                "ppcVar6": {
                    "1": "current_pointer",
                    "2": "string_array_ptr",
                    "3": "current_string_ptr",
                    "8": "current_string"
                },
                "pvVar2": {
                    "1": "heap_end",
                    "2": "current_heap_end",
                    "3": "current_break",
                    "4": "current_heap_pointer",
                    "5": "current_brk"
                },
                "sVar3": {
                    "1": "str_length",
                    "21": "string_length",
                    "3": "length"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "uStack_28": {
                    "1": "param_1_copy_2",
                    "2": "temp_var2",
                    "3": "param1_copy"
                },
                "uStack_b0": {
                    "1": "extra_stack_size",
                    "2": "extra_var"
                },
                "uStack_c0": {
                    "1": "formatted_string_size",
                    "3": "param_1_copy",
                    "4": "param1"
                },
                "uStack_f8": {
                    "1": "stack_var_f8",
                    "2": "counter",
                    "3": "stack_counter",
                    "4": "stack_var",
                    "5": "stack_size"
                },
                "uVar4": {
                    "1": "len",
                    "2": "count",
                    "4": "temp_var"
                }
            },
            "called": [
                "sbrk",
                "FUN_00102fbc",
                "fprintf"
            ],
            "calling": [
                "FUN_00103449",
                "FUN_00102cbc"
            ],
            "code": "\n\n\nchar * allocate_memory_and_format_string_00102fc7(undefined8 size)\n\n{\n  char result;\n  void *current_brk;\n  size_t string_length;\n  ulong temp_value;\n  char *result_string;\n  char **string_array;\n  undefined8 extra_output_rdx;\n  long total_length;\n  char *format_string;\n  FILE *error_stream;\n  char *current_char;\n  byte byte_var;\n  undefined8 extra_output_xmm0;\n  uint stack_size;\n  char **string_array;\n  char **next_string_array;\n  char *string_array [4];\n  undefined8 input_size;\n  long memory_offset;\n  undefined8 extra_value;\n  undefined8 param1_copy;\n  \n  byte_var = 0;\n  current_brk = sbrk(0);\n  memory_offset = (long)current_brk + -0x10a0e0;\n  empty_string = \"\";\n  format_string = \"\\n%s%sout of memory allocating %lu bytes after a total of %lu bytes\\n\";\n  error_stream = standard_error;\n  input_size = size;\n  fprintf(standard_error,\"\\n%s%sout of memory allocating %lu bytes after a total of %lu bytes\\n\");\n  result = FUN_00102fbc();\n  if (result != '\\0') {\n    extra_value = extra_output_xmm0;\n  }\n  total_length = 0;\n  stack_size = 0x10;\n  current_char = format_string;\n  string_array = (char **)register0x00000020;\n  string_array[2] = (char *)extra_output_rdx;\n  param1_copy = size;\n  do {\n    string_length = strlen(current_char);\n    total_length = total_length + string_length;\n    if (stack_size < 0x30) {\n      temp_value = (ulong)stack_size;\n      stack_size = stack_size + 8;\n      string_array = (char **)((long)string_array + temp_value);\n      next_string_array = string_array;\n    }\n    else {\n      next_string_array = string_array + 1;\n      string_array = string_array;\n    }\n    current_char = *string_array;\n    string_array = next_string_array;\n  } while (current_char != (char *)0x0);\n  result_string = (char *)FUN_00105370(total_length + 1);\n  stack_size = 0x10;\n  current_char = result_string;\n  string_array = (char **)register0x00000020;\n  do {\n    string_length = strlen(format_string);\n    for (; string_length != 0; string_length = string_length - 1) {\n      *current_char = *format_string;\n      format_string = format_string + (ulong)byte_var * -2 + 1;\n      current_char = current_char + (ulong)byte_var * -2 + 1;\n    }\n    if (stack_size < 0x30) {\n      temp_value = (ulong)stack_size;\n      stack_size = stack_size + 8;\n      string_array = (char **)((long)string_array + temp_value);\n      next_string_array = string_array;\n    }\n    else {\n      next_string_array = string_array + 1;\n      string_array = string_array;\n    }\n    format_string = *string_array;\n    string_array = next_string_array;\n  } while (format_string != (char *)0x0);\n  *current_char = '\\0';\n  free(error_stream);\n  return result_string;\n}\n\n",
            "current_name": "allocate_memory_and_format_string_00102fc7",
            "entrypoint": "0x00102fc7",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102fc7": "allocate_memory_and_format_string_00102fc7",
                "__ptr": "error_stream",
                "__s": "format_string",
                "_stderr": "standard_error",
                "apcStack_e0": "string_array",
                "apcStack_e0[3]": "empty_string",
                "bVar9": "byte_var",
                "cVar1": "result",
                "extraout_RDX": "extra_output_rdx",
                "extraout_XMM0_Qa": "extra_output_xmm0",
                "fprint": "print",
                "fprintf": "print_error_message",
                "free": "release_memory",
                "lStack_b8": "memory_offset",
                "lVar7": "total_length",
                "param_1": "size",
                "pcVar5": "result_string",
                "pcVar8": "current_char",
                "ppcVar10": "string_array",
                "ppcVar11": "next_string_array",
                "ppcVar6": "string_array",
                "pvVar2": "current_brk",
                "sVar3": "string_length",
                "strlen": "get_length_of_string",
                "uStack_28": "param1_copy",
                "uStack_b0": "extra_value",
                "uStack_c0": "input_size",
                "uStack_f8": "stack_size",
                "uVar4": "temp_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103006": {
            "additional_data": {
                "FUN_00103006": {
                    "1": "reverse_and_cleanup_string",
                    "2": "copy_and_concatenate_strings",
                    "3": "reverse_and_free_string",
                    "6": "reverse_string"
                },
                "FUN_00105370": {
                    "1": "allocate_memory"
                },
                "bVar7": {
                    "1": "skip",
                    "2": "byte_flag",
                    "3": "flag"
                },
                "byte bVar7": {
                    "1": "b_flag"
                },
                "char **local_e8": {
                    "1": "ptr_array"
                },
                "char **ppcVar4": {
                    "1": "ptr_to_string"
                },
                "char *local_d8 [4]": {
                    "1": "string_array"
                },
                "char *param_10": {
                    "1": "string_to_reverse"
                },
                "char *pcVar3": {
                    "1": "reversed_string"
                },
                "char *pcVar6": {
                    "1": "current_char"
                },
                "char in_AL": {
                    "1": "flag"
                },
                "in_AL": {
                    "1": "condition_check",
                    "11": "flag",
                    "2": "input_flag"
                },
                "lVar5": {
                    "1": "total_string_length",
                    "17": "total_length"
                },
                "local_38": {
                    "1": "local38",
                    "2": "var12",
                    "3": "local_input8",
                    "4": "input8_copy"
                },
                "local_48": {
                    "1": "var48",
                    "2": "var11",
                    "3": "local_input7",
                    "4": "input7_copy"
                },
                "local_58": {
                    "1": "local_arg6",
                    "2": "var10",
                    "3": "local_input6",
                    "4": "input6_copy"
                },
                "local_68": {
                    "1": "source5_copy",
                    "2": "var9",
                    "3": "local_input5",
                    "4": "input5_copy"
                },
                "local_72": {
                    "1": "temp_var"
                },
                "local_78": {
                    "1": "source4_copy",
                    "2": "var8",
                    "3": "local_input4",
                    "4": "input4_copy"
                },
                "local_88": {
                    "1": "source3_copy",
                    "2": "var7",
                    "3": "local_input3",
                    "4": "input3_copy"
                },
                "local_98": {
                    "1": "param_2_copy",
                    "2": "var6",
                    "3": "local_input2",
                    "4": "input2_copy"
                },
                "local_a8": {
                    "1": "local_flag1",
                    "2": "var5",
                    "3": "local_input1",
                    "4": "input1_copy"
                },
                "local_b0": {
                    "1": "local_data_2",
                    "2": "value4",
                    "3": "param14_copy"
                },
                "local_b8": {
                    "1": "local_data_1",
                    "2": "var3",
                    "3": "param13_copy"
                },
                "local_d8": {
                    "1": "local_string_array",
                    "2": "local_data",
                    "3": "pointer_array"
                },
                "local_d8[2]": {
                    "1": "pointer_1"
                },
                "local_d8[3]": {
                    "1": "pointer_2"
                },
                "local_e8": {
                    "1": "local_string_array",
                    "3": "string_array"
                },
                "local_f0": {
                    "1": "local_var_f0",
                    "2": "buffer_size",
                    "3": "local_size"
                },
                "long lVar5": {
                    "1": "iterator"
                },
                "param_1": {
                    "1": "size1",
                    "12": "input1",
                    "2": "source1",
                    "3": "flag1",
                    "4": "input_param1"
                },
                "param_10": {
                    "1": "str",
                    "2": "string_to_reverse",
                    "3": "input_string",
                    "5": "source_string",
                    "6": "string_array"
                },
                "param_11": {
                    "1": "extra_param1",
                    "13": "param11",
                    "2": "pointer1",
                    "3": "param_11",
                    "4": "ptr1"
                },
                "param_12": {
                    "1": "src_string2",
                    "13": "param12",
                    "2": "pointer2",
                    "3": "param_12",
                    "4": "ptr2"
                },
                "param_13": {
                    "1": "val3",
                    "13": "param13",
                    "2": "value1",
                    "3": "param_13"
                },
                "param_14": {
                    "1": "val4",
                    "13": "param14",
                    "2": "value2",
                    "3": "var2"
                },
                "param_2": {
                    "1": "input_var2",
                    "12": "input2",
                    "2": "source2",
                    "3": "flag2",
                    "4": "input_param2"
                },
                "param_3": {
                    "1": "param_3",
                    "12": "input3",
                    "2": "arg3",
                    "3": "flag3",
                    "4": "input_param3"
                },
                "param_4": {
                    "1": "offset",
                    "12": "input4",
                    "2": "arg4",
                    "3": "flag4",
                    "4": "input_param4"
                },
                "param_5": {
                    "1": "input_var5",
                    "12": "input5",
                    "2": "arg5",
                    "3": "flag5",
                    "4": "input_param5"
                },
                "param_6": {
                    "1": "param_6",
                    "12": "input6",
                    "2": "input_param_6",
                    "3": "flag6",
                    "4": "input_param6"
                },
                "param_7": {
                    "1": "param7",
                    "12": "input7",
                    "2": "source7",
                    "3": "flag7",
                    "4": "input_param7"
                },
                "param_8": {
                    "1": "input_var8",
                    "12": "input8",
                    "2": "source8",
                    "3": "flag8",
                    "4": "input_param8"
                },
                "param_9": {
                    "1": "source",
                    "2": "allocated_memory",
                    "3": "data",
                    "4": "memory_block",
                    "5": "string_to_free"
                },
                "pcVar3": {
                    "1": "copied_str",
                    "11": "result_string",
                    "2": "reversed_string",
                    "4": "concatenated_string",
                    "8": "result"
                },
                "pcVar4": {
                    "1": "string_pointer"
                },
                "pcVar6": {
                    "1": "current_string_ptr",
                    "2": "dest",
                    "4": "current_char",
                    "7": "current_string"
                },
                "ppcVar4": {
                    "1": "current_string_ptr",
                    "2": "string_pointer",
                    "3": "current_ptr"
                },
                "sVar1": {
                    "1": "str_length",
                    "12": "string_length",
                    "5": "length"
                },
                "size_t sVar1": {
                    "1": "string_length"
                },
                "uVar2": {
                    "1": "counter",
                    "2": "index",
                    "4": "temp"
                },
                "uint local_f0": {
                    "1": "local_var1"
                },
                "ulong uVar2": {
                    "1": "temp"
                },
                "undefined4 local_38": {
                    "1": "local_var11"
                },
                "undefined4 local_48": {
                    "1": "local_var10"
                },
                "undefined4 local_58": {
                    "1": "local_var9"
                },
                "undefined4 local_68": {
                    "1": "local_var8"
                },
                "undefined4 local_78": {
                    "1": "local_var7"
                },
                "undefined4 local_88": {
                    "1": "local_var6"
                },
                "undefined4 local_98": {
                    "1": "local_var5"
                },
                "undefined4 local_a8": {
                    "1": "local_var4"
                },
                "undefined4 param_1": {
                    "1": "input_param1"
                },
                "undefined4 param_2": {
                    "1": "input_param2"
                },
                "undefined4 param_3": {
                    "1": "input_param3"
                },
                "undefined4 param_4": {
                    "1": "input_param4"
                },
                "undefined4 param_5": {
                    "1": "input_param5"
                },
                "undefined4 param_6": {
                    "1": "input_param6"
                },
                "undefined4 param_7": {
                    "1": "input_param7"
                },
                "undefined4 param_8": {
                    "1": "input_param8"
                },
                "undefined8 local_b0": {
                    "1": "local_var3"
                },
                "undefined8 local_b8": {
                    "1": "local_var2"
                },
                "undefined8 param_11": {
                    "1": "param11"
                },
                "undefined8 param_12": {
                    "1": "param12"
                },
                "undefined8 param_13": {
                    "1": "param13"
                },
                "undefined8 param_14": {
                    "1": "param14"
                },
                "void *param_9": {
                    "1": "data_to_free"
                }
            },
            "called": [
                "free",
                "strlen",
                "FUN_00105370"
            ],
            "calling": [
                "FUN_001032de"
            ],
            "code": "\nchar * reverse_string_00103006(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                   undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                   void *string_to_free,char *string_array,undefined8 param11,undefined8 param12,\n                   undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  size_t string_length;\n  ulong temp;\n  char *result_string;\n  char **current_ptr;\n  long total_length;\n  char *current_string;\n  byte byte_var;\n  uint local_size;\n  char **string_array;\n  char *pointer_array [4];\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  undefined4 input5_copy;\n  undefined4 input6_copy;\n  undefined4 input7_copy;\n  undefined4 input8_copy;\n  \n  byte_var = 0;\n  if (flag != '\\0') {\n    input1_copy = input1;\n    input2_copy = input2;\n    input3_copy = input3;\n    input4_copy = input4;\n    input5_copy = input5;\n    input6_copy = input6;\n    input7_copy = input7;\n    input8_copy = input8;\n  }\n  string_array = (char **)&stack0x00000008;\n  total_length = 0;\n  local_size = 0x10;\n  current_string = string_array;\n  pointer_1 = (char *)param11;\n  pointer_2 = (char *)param12;\n  param13_copy = param13;\n  param14_copy = param14;\n  do {\n    string_length = strlen(current_string);\n    total_length = total_length + string_length;\n    if (local_size < 0x30) {\n      temp = (ulong)local_size;\n      local_size = local_size + 8;\n      current_ptr = (char **)((long)pointer_array + temp);\n    }\n    else {\n      current_ptr = string_array;\n      string_array = string_array + 1;\n    }\n    current_string = *current_ptr;\n  } while (current_string != (char *)0x0);\n  result_string = (char *)FUN_00105370(total_length + 1);\n  local_size = 0x10;\n  string_array = (char **)&stack0x00000008;\n  current_string = result_string;\n  do {\n    string_length = strlen(string_array);\n    for (; string_length != 0; string_length = string_length - 1) {\n      *current_string = *string_array;\n      string_array = string_array + (ulong)byte_var * -2 + 1;\n      current_string = current_string + (ulong)byte_var * -2 + 1;\n    }\n    if (local_size < 0x30) {\n      temp = (ulong)local_size;\n      local_size = local_size + 8;\n      current_ptr = (char **)((long)pointer_array + temp);\n    }\n    else {\n      current_ptr = string_array;\n      string_array = string_array + 1;\n    }\n    string_array = *current_ptr;\n  } while (string_array != (char *)0x0);\n  *current_string = '\\0';\n  free(string_to_free);\n  return result_string;\n}\n\n",
            "current_name": "reverse_string_00103006",
            "entrypoint": "0x00103006",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103006": "reverse_string_00103006",
                "bVar7": "byte_var",
                "in_AL": "flag",
                "lVar5": "total_length",
                "local_38": "input8_copy",
                "local_48": "input7_copy",
                "local_58": "input6_copy",
                "local_68": "input5_copy",
                "local_78": "input4_copy",
                "local_88": "input3_copy",
                "local_98": "input2_copy",
                "local_a8": "input1_copy",
                "local_b0": "param14_copy",
                "local_b8": "param13_copy",
                "local_d8": "pointer_array",
                "local_d8[2]": "pointer_1",
                "local_d8[3]": "pointer_2",
                "local_e8": "string_array",
                "local_f0": "local_size",
                "param_1": "input1",
                "param_10": "string_array",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "string_to_free",
                "pcVar3": "result_string",
                "pcVar4": "string_pointer",
                "pcVar6": "current_string",
                "ppcVar4": "current_ptr",
                "sVar1": "string_length",
                "uVar2": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103160": {
            "additional_data": {
                "FUN_00103160": {
                    "1": "copy_string_with_increment",
                    "2": "copy_string_with_offset",
                    "28": "copy_string"
                },
                "FUN_00105370": {
                    "1": "allocate_memory"
                },
                "bVar4": {
                    "1": "byte_index",
                    "3": "byte_var",
                    "4": "counter",
                    "5": "index"
                },
                "lVar3": {
                    "1": "source_length_plus_one",
                    "10": "length_plus_one",
                    "2": "length_with_null",
                    "4": "string_length",
                    "8": "length"
                },
                "param_1": {
                    "1": "source",
                    "12": "source_string",
                    "15": "input_string",
                    "2": "original_string"
                },
                "pcVar2": {
                    "1": "copy_buffer",
                    "16": "copied_string",
                    "2": "new_string",
                    "3": "output_string",
                    "6": "destination_string"
                },
                "sVar1": {
                    "1": "src_length",
                    "19": "string_length",
                    "2": "length",
                    "5": "source_length"
                }
            },
            "called": [
                "strlen",
                "FUN_00105370"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_00103bf0"
            ],
            "code": "\nvoid copy_string_00103160(char *input_string)\n\n{\n  size_t string_length;\n  char *copied_string;\n  long length_plus_one;\n  byte offset;\n  \n  offset = 0;\n  string_length = strlen(input_string);\n  length_plus_one = string_length + 1;\n  copied_string = (char *)FUN_00105370(length_plus_one);\n  for (; length_plus_one != 0; length_plus_one = length_plus_one + -1) {\n    *copied_string = *input_string;\n    input_string = input_string + (ulong)offset * -2 + 1;\n    copied_string = copied_string + (ulong)offset * -2 + 1;\n  }\n  return;\n}\n\n",
            "current_name": "copy_string_00103160",
            "entrypoint": "0x00103160",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103160": "copy_string_00103160",
                "bVar4": "offset",
                "lVar3": "length_plus_one",
                "param_1": "input_string",
                "pcVar2": "copied_string",
                "sVar1": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103186": {
            "additional_data": {
                "FUN_00103186": {
                    "1": "parse_parameters",
                    "2": "extract_strings",
                    "3": "reverse_string_concatenation",
                    "7": "reverse_and_concatenate_strings"
                },
                "bVar8": {
                    "1": "byte_var",
                    "4": "is_negative",
                    "9": "flag"
                },
                "in_AL": {
                    "1": "use_extra_parameters",
                    "11": "flag",
                    "2": "input_flag"
                },
                "lVar5": {
                    "1": "total_string_length",
                    "20": "total_length"
                },
                "local_28": {
                    "1": "parameter_8_copy",
                    "2": "local_var_28",
                    "3": "input8"
                },
                "local_38": {
                    "1": "key7",
                    "2": "param7",
                    "3": "input7"
                },
                "local_48": {
                    "1": "argument6_copy",
                    "2": "param6",
                    "3": "input6"
                },
                "local_58": {
                    "1": "input5_copy",
                    "2": "local_var_58",
                    "3": "local_input5"
                },
                "local_68": {
                    "1": "temp_var6",
                    "2": "param4",
                    "3": "input4"
                },
                "local_78": {
                    "1": "key3",
                    "2": "local_var_78",
                    "3": "local_input3"
                },
                "local_88": {
                    "1": "input_param_2_copy",
                    "2": "param2",
                    "3": "input2"
                },
                "local_98": {
                    "1": "input1_copy",
                    "2": "param1",
                    "3": "input1"
                },
                "local_a0": {
                    "1": "unused_parameter_0",
                    "2": "local_var_a0",
                    "3": "local_input14"
                },
                "local_a8": {
                    "1": "param_var1",
                    "2": "local_var_a8",
                    "3": "local_input13"
                },
                "local_c8": {
                    "1": "input_param_9",
                    "2": "local_string_array",
                    "3": "string_array"
                },
                "local_c8 [4]": {
                    "1": "local_strings"
                },
                "local_c8[4]": {
                    "1": "local_strings"
                },
                "local_d8": {
                    "1": "local_ptr_array",
                    "2": "string_list"
                },
                "local_e0": {
                    "1": "current_offset",
                    "3": "local_var_e0",
                    "4": "local_counter",
                    "7": "counter"
                },
                "param_1": {
                    "1": "first_param",
                    "11": "input1",
                    "2": "param1",
                    "3": "input_1"
                },
                "param_10": {
                    "1": "string10",
                    "2": "arg10",
                    "4": "input10",
                    "6": "param10"
                },
                "param_11": {
                    "1": "param_value2",
                    "2": "arg11",
                    "4": "input11",
                    "6": "param11"
                },
                "param_12": {
                    "1": "parameter_12",
                    "2": "arg12",
                    "4": "input12",
                    "6": "param12"
                },
                "param_13": {
                    "1": "unused_parameter_13",
                    "2": "value5",
                    "4": "input13",
                    "8": "param13"
                },
                "param_14": {
                    "1": "data_6",
                    "2": "input_param_14",
                    "4": "input14",
                    "8": "param14"
                },
                "param_2": {
                    "1": "key2",
                    "11": "input2",
                    "2": "param2",
                    "3": "input_2"
                },
                "param_3": {
                    "1": "third_param",
                    "11": "input3",
                    "2": "param3",
                    "3": "input_3"
                },
                "param_4": {
                    "1": "argument4",
                    "11": "input4",
                    "2": "arg4",
                    "3": "input_4"
                },
                "param_5": {
                    "1": "value5",
                    "11": "input5",
                    "2": "arg5",
                    "3": "input_5"
                },
                "param_6": {
                    "1": "data_6",
                    "11": "input6",
                    "2": "input_param_6",
                    "3": "input_6"
                },
                "param_7": {
                    "1": "argument7",
                    "11": "input7",
                    "2": "param7",
                    "3": "input_7"
                },
                "param_8": {
                    "1": "eighth_param",
                    "11": "input8",
                    "2": "input_param_8",
                    "3": "input_8"
                },
                "param_9": {
                    "1": "unused_1",
                    "2": "param1",
                    "5": "input9",
                    "7": "param9"
                },
                "pcVar3": {
                    "1": "decrypted_string",
                    "11": "result",
                    "16": "result_string",
                    "2": "concatenated_string"
                },
                "pcVar4": {
                    "1": "current_string_ptr"
                },
                "pcVar6": {
                    "1": "curr_string",
                    "16": "current_string",
                    "2": "str",
                    "4": "current_char"
                },
                "pcVar7": {
                    "1": "result_string_copy",
                    "2": "dest_string",
                    "3": "current_char"
                },
                "ppcVar4": {
                    "1": "string_pointer",
                    "2": "current_string_ptr",
                    "3": "string_ptr"
                },
                "sVar1": {
                    "11": "string_length",
                    "3": "length",
                    "6": "str_length"
                },
                "stack0x00000008": {
                    "1": "stack_var"
                },
                "uVar2": {
                    "1": "index",
                    "2": "offset",
                    "3": "temp_var",
                    "8": "temp"
                }
            },
            "called": [
                "strlen",
                "FUN_00105370"
            ],
            "calling": [
                "FUN_001032de"
            ],
            "code": "\nchar * reverse_and_concatenate_strings_00103186(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                   undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                   undefined8 param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                   undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  size_t string_length;\n  ulong temp;\n  char *result_string;\n  char **string_ptr;\n  long total_length;\n  char *current_string;\n  char *result_ptr;\n  byte flag;\n  uint counter;\n  char **string_list;\n  char *param_array [4];\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 input1;\n  undefined4 input2;\n  undefined4 input3;\n  undefined4 input4;\n  undefined4 input5;\n  undefined4 input6;\n  undefined4 input7;\n  undefined4 input8;\n  \n  flag = 0;\n  if (flag != '\\0') {\n    input1 = input1;\n    input2 = input2;\n    input3 = input3;\n    input4 = input4;\n    input5 = input5;\n    input6 = input6;\n    input7 = input7;\n    input8 = input8;\n  }\n  string_list = (char **)&stack_var;\n  total_length = 0;\n  counter = 8;\n  current_string = \"none\";\n  param_array[1] = (char *)param10;\n  param_array[2] = (char *)param11;\n  param_array[3] = (char *)param12;\n  param13_copy = param13;\n  param14_copy = param14;\n  do {\n    string_length = strlen(current_string);\n    total_length = total_length + string_length;\n    if (counter < 0x30) {\n      temp = (ulong)counter;\n      counter = counter + 8;\n      string_ptr = (char **)((long)param_array + temp);\n    }\n    else {\n      string_ptr = string_list;\n      string_list = string_list + 1;\n    }\n    current_string = *string_ptr;\n  } while (current_string != (char *)0x0);\n  current_string = \"none\";\n  result_string = (char *)FUN_00105370(total_length + 1);\n  counter = 8;\n  string_list = (char **)&stack_var;\n  result_ptr = result_string;\n  do {\n    string_length = strlen(current_string);\n    for (; string_length != 0; string_length = string_length - 1) {\n      *result_ptr = *current_string;\n      current_string = current_string + (ulong)flag * -2 + 1;\n      result_ptr = result_ptr + (ulong)flag * -2 + 1;\n    }\n    if (counter < 0x30) {\n      temp = (ulong)counter;\n      counter = counter + 8;\n      string_ptr = (char **)((long)param_array + temp);\n    }\n    else {\n      string_ptr = string_list;\n      string_list = string_list + 1;\n    }\n    current_string = *string_ptr;\n  } while (current_string != (char *)0x0);\n  *result_ptr = '\\0';\n  return result_string;\n}\n\n",
            "current_name": "reverse_and_concatenate_strings_00103186",
            "entrypoint": "0x00103186",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103186": "reverse_and_concatenate_strings_00103186",
                "bVar8": "flag",
                "in_AL": "flag",
                "lVar5": "total_length",
                "local_28": "input8",
                "local_38": "input7",
                "local_48": "input6",
                "local_58": "input5",
                "local_68": "input4",
                "local_78": "input3",
                "local_88": "input2",
                "local_98": "input1",
                "local_a0": "param14_copy",
                "local_a8": "param13_copy",
                "local_c8": "param_array",
                "local_d8": "string_list",
                "local_e0": "counter",
                "param_1": "input1",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param9",
                "pcVar3": "result_string",
                "pcVar4": "current_string_ptr",
                "pcVar6": "current_string",
                "pcVar7": "result_ptr",
                "ppcVar4": "string_ptr",
                "sVar1": "string_length",
                "stack0x00000008": "stack_var",
                "uVar2": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001032de": {
            "additional_data": {
                "FUN_00103006": {
                    "1": "format_message"
                },
                "FUN_00103186": {
                    "1": "perform_action2"
                },
                "FUN_001032de": {
                    "1": "print_elf_header_info",
                    "11": "print_usage_and_exit",
                    "14": "print_elf_edit_usage",
                    "2": "display_usage_and_exit",
                    "3": "update_elf_header"
                },
                "__ptr": {
                    "1": "message_ptr",
                    "2": "msg_ptr",
                    "3": "translation",
                    "6": "buffer"
                },
                "dcgettext": {
                    "1": "get_translation",
                    "2": "translate_text"
                },
                "exit": {
                    "4": "exit_program"
                },
                "fprintf": {
                    "1": "print_to_file"
                },
                "free": {
                    "1": "deallocate_memory",
                    "2": "free_memory"
                },
                "param_1": {
                    "1": "file_ptr",
                    "27": "output_file",
                    "3": "file"
                },
                "param_2": {
                    "12": "exit_status",
                    "14": "exit_code",
                    "2": "error_code",
                    "3": "status"
                },
                "pcVar2": {
                    "1": "str",
                    "12": "message",
                    "2": "localized_text",
                    "3": "translation"
                },
                "puVar1": {
                    "1": "x86_feature",
                    "3": "feature",
                    "4": "ptr"
                },
                "puVar3": {
                    "1": "option_pointer",
                    "2": "data",
                    "3": "option_list"
                }
            },
            "called": [
                "free",
                "exit",
                "FUN_00103006",
                "dcgettext",
                "fprintf",
                "FUN_00103186"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nvoid print_elf_edit_usage_001032de(FILE *output_file,int exit_code)\n\n{\n  undefined8 *ptr;\n  void *message;\n  char *message;\n  undefined4 *option_ptr;\n  \n  option_ptr = &DAT_00108ca0;\n  message = (void *)FUN_00103186(&DAT_00106137,0);\n  do {\n    ptr = (undefined8 *)(option_ptr + 6);\n    option_ptr = option_ptr + 4;\n    message = (void *)FUN_00103006(message,message,&DAT_001061ef,*ptr,0);\n  } while (option_ptr != (undefined4 *)&DAT_00108d90);\n  message = (char *)dcgettext(0,\"Usage: %s <option(s)> elffile(s)\\n\",5);\n  fprintf(output_file,message,\"elfedit\");\n  message = (char *)dcgettext(0,\" Update the ELF header of ELF files\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  --input-mach [none|i386|iamcu|l1om|k1om|x86_64]\\n                              Set input machine type\\n  --output-mach [none|i386|iamcu|l1om|k1om|x86_64]\\n                              Set output machine type\\n  --input-type [none|rel|exec|dyn]\\n                              Set input file type\\n  --output-type [none|rel|exec|dyn]\\n                              Set output file type\\n  --input-osabi [%s]\\n                              Set input OSABI\\n  --output-osabi [%s]\\n                              Set output OSABI\\n  --input-abiversion [0-255]  Set input ABIVERSION\\n  --output-abiversion [0-255] Set output ABIVERSION\\n\"\n                             ,5);\n  fprintf(output_file,message,message,message);\n  message = (char *)dcgettext(0,\n                             \"  --enable-x86-feature [ibt|shstk|lam_u48|lam_u57]\\n                              Enable x86 feature\\n  --disable-x86-feature [ibt|shstk|lam_u48|lam_u57]\\n                              Disable x86 feature\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -h --help                   Display this information\\n  -v --version                Display the version number of %s\\n\"\n                             ,5);\n  fprintf(output_file,message,\"elfedit\");\n  if (exit_code == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n  free_memory(message);\n                    \n  exit_program(exit_code);\n}\n\n",
            "current_name": "print_elf_edit_usage_001032de",
            "entrypoint": "0x001032de",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001032de": "print_elf_edit_usage_001032de",
                "__ptr": "message",
                "dcgettext": "translate_text",
                "exit": "exit_program",
                "fprintf": "write_output",
                "free": "free_memory",
                "param_1": "output_file",
                "param_2": "exit_code",
                "pcVar2": "message",
                "puVar1": "ptr",
                "puVar3": "option_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103449": {
            "additional_data": {
                "FUN_00103449": {
                    "1": "realloc_or_malloc_memory",
                    "10": "allocate_memory",
                    "14": "resize_memory",
                    "5": "resize_memory_block"
                },
                "__size": {
                    "1": "current_size",
                    "11": "size",
                    "2": "final_size",
                    "4": "allocation_size",
                    "6": "new_size"
                },
                "param_1": {
                    "1": "existing_memory",
                    "2": "original_ptr",
                    "3": "ptr",
                    "6": "buffer",
                    "7": "memory_block"
                },
                "param_2": {
                    "1": "input_size",
                    "10": "size",
                    "18": "new_size",
                    "2": "buffer_size"
                },
                "pvVar1": {
                    "1": "new_allocation",
                    "2": "new_block",
                    "3": "new_buffer",
                    "4": "allocated_memory",
                    "5": "new_ptr",
                    "7": "new_memory_block"
                }
            },
            "called": [
                "FUN_00102fc7",
                "realloc",
                "malloc"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nvoid resize_memory_00103449(void *memory_block,size_t new_size)\n\n{\n  size_t size;\n  void *new_memory_block;\n  \n  size = 1;\n  if (new_size != 0) {\n    size = new_size;\n  }\n  if (memory_block == (void *)0x0) {\n    new_memory_block = malloc(size);\n  }\n  else {\n    new_memory_block = realloc(memory_block,size);\n  }\n  if (new_memory_block == (void *)0x0) {\n    FUN_00102fc7(size);\n  }\n  return;\n}\n\n",
            "current_name": "resize_memory_00103449",
            "entrypoint": "0x00103449",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103449": "resize_memory_00103449",
                "__size": "size",
                "param_1": "memory_block",
                "param_2": "new_size",
                "pvVar1": "new_memory_block"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010347f": {
            "additional_data": {
                "FUN_0010347f": {
                    "1": "get_data_value",
                    "15": "extract_data",
                    "3": "decode_data",
                    "6": "convert_data"
                },
                "param_1": {
                    "1": "input_data",
                    "13": "data",
                    "7": "data_ptr",
                    "9": "data_pointer"
                },
                "param_2": {
                    "27": "data_length",
                    "4": "length"
                },
                "uVar1": {
                    "1": "temp_value1",
                    "2": "temp_var",
                    "3": "temp1",
                    "5": "temp_value",
                    "7": "temp",
                    "8": "temp_var1"
                },
                "uVar2": {
                    "1": "decoded_data",
                    "14": "result",
                    "2": "temp_ulong",
                    "3": "temp2",
                    "8": "temp_var2"
                },
                "uVar3": {
                    "2": "error_string",
                    "24": "error_message",
                    "3": "error_msg"
                }
            },
            "called": [
                "dcgettext",
                "abort",
                "error"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nulong extract_data_0010347f(ulong *data,undefined4 data_length)\n\n{\n  uint temp_var1;\n  ulong result;\n  undefined8 error_message;\n  \n  switch(data_length) {\n  case 1:\n    return (ulong)*(byte *)data;\n  case 2:\n    return (ulong)CONCAT11((char)*(undefined2 *)data,(char)((ushort)*(undefined2 *)data >> 8))\n    ;\n  case 3:\n    return (ulong)*(byte *)((long)data + 1) << 8 | (ulong)*(byte *)data << 0x10 |\n           (ulong)*(byte *)((long)data + 2);\n  case 4:\n    temp_var1 = *(uint *)data;\n    return (ulong)(temp_var1 >> 0x18 | (temp_var1 & 0xff0000) >> 8 | (temp_var1 & 0xff00) << 8 | temp_var1 << 0x18);\n  case 5:\n    temp_var1 = *(uint *)((long)data + 1);\n    return (ulong)CONCAT14(*(byte *)data,\n                           temp_var1 >> 0x18 | (temp_var1 & 0xff0000) >> 8 | (temp_var1 & 0xff00) << 8 |\n                           temp_var1 << 0x18);\n  case 6:\n    temp_var1 = *(uint *)((long)data + 2);\n    return (ulong)*(byte *)((long)data + 1) << 0x20 | (ulong)*(byte *)data << 0x28 |\n           (ulong)(temp_var1 >> 0x18 | (temp_var1 & 0xff0000) >> 8 | (temp_var1 & 0xff00) << 8 | temp_var1 << 0x18);\n  case 7:\n    temp_var1 = *(uint *)((long)data + 3);\n    return (ulong)*(byte *)((long)data + 2) << 0x20 | (ulong)*(byte *)((long)data + 1) << 0x28\n           | (ulong)*(byte *)data << 0x30 |\n           (ulong)(temp_var1 >> 0x18 | (temp_var1 & 0xff0000) >> 8 | (temp_var1 & 0xff00) << 8 | temp_var1 << 0x18);\n  case 8:\n    result = *data;\n    return result >> 0x38 | (result & 0xff000000000000) >> 0x28 | (result & 0xff0000000000) >> 0x18 |\n           (result & 0xff00000000) >> 8 | (result & 0xff000000) << 8 | (result & 0xff0000) << 0x18 |\n           (result & 0xff00) << 0x28 | result << 0x38;\n  default:\n    error_message = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n    error(error_message,data_length);\n                    \n    abort();\n  }\n}\n\n",
            "current_name": "extract_data_0010347f",
            "entrypoint": "0x0010347f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010347f": "extract_data_0010347f",
                "param_1": "data",
                "param_2": "data_length",
                "uVar1": "temp_var1",
                "uVar2": "result",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010354e": {
            "additional_data": {
                "FUN_0010354e": {
                    "1": "write_bytes",
                    "2": "fill_data",
                    "3": "copy_data_to_memory",
                    "5": "write_data",
                    "7": "write_data_to_memory"
                },
                "abort": {
                    "1": "stop_execution"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "error": {
                    "1": "print_error_message"
                },
                "iVar2": {
                    "1": "index",
                    "2": "count",
                    "4": "iteration_count",
                    "6": "loop_counter",
                    "7": "counter"
                },
                "param_1": {
                    "1": "target_address",
                    "2": "memory_address",
                    "5": "buffer_address",
                    "6": "dest_address"
                },
                "param_2": {
                    "1": "byte_value",
                    "12": "data",
                    "2": "data_to_write",
                    "4": "value",
                    "8": "data_value"
                },
                "param_3": {
                    "1": "num_bytes_to_fill",
                    "14": "data_length",
                    "16": "length"
                },
                "uVar1": {
                    "1": "err_msg",
                    "2": "error_msg",
                    "23": "error_message"
                },
                "uVar3": {
                    "1": "len",
                    "2": "unsigned_data_length",
                    "3": "temp_data_length",
                    "4": "temp_length",
                    "5": "remaining_length"
                }
            },
            "called": [
                "dcgettext",
                "abort",
                "error"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nvoid write_data_to_memory_0010354e(long dest_address,ulong data,uint length)\n\n{\n  undefined8 error_message;\n  int counter;\n  ulong remaining_length;\n  \n  remaining_length = (ulong)length;\n  if (8 < length) {\n    error_message = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n    print_error_message(error_message,length);\n                    \n    abort();\n  }\n  while (counter = (int)remaining_length, remaining_length = (ulong)(counter - 1), counter != 0) {\n    *(char *)(dest_address + remaining_length) = (char)data;\n    data = data >> 8;\n  }\n  return;\n}\n\n",
            "current_name": "write_data_to_memory_0010354e",
            "entrypoint": "0x0010354e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010354e": "write_data_to_memory_0010354e",
                "abort": "stop_execution",
                "dcgettext": "get_error_message",
                "error": "print_error_message",
                "iVar2": "counter",
                "param_1": "dest_address",
                "param_2": "data",
                "param_3": "length",
                "uVar1": "error_message",
                "uVar3": "remaining_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010358d": {
            "additional_data": {
                "DAT_00109438": {
                    "1": "data_value"
                },
                "FUN_0010358d": {
                    "1": "extract_archives",
                    "12": "process_archive",
                    "2": "process_archived_files",
                    "4": "extract_archive",
                    "5": "extract_and_process_archive"
                },
                "__s": {
                    "1": "corruption",
                    "3": "corrupt_message",
                    "6": "corrupt_str"
                },
                "__s_00": {
                    "1": "filename",
                    "2": "full_path",
                    "7": "full_name"
                },
                "__stream": {
                    "1": "file_stream2",
                    "2": "file_ptr2",
                    "6": "stream",
                    "7": "file_stream"
                },
                "iVar3": {
                    "1": "int_var_3",
                    "2": "return_value",
                    "20": "result",
                    "4": "status"
                },
                "lVar1": {
                    "1": "temp_var",
                    "2": "len",
                    "20": "length",
                    "3": "length_var1"
                },
                "local_148": {
                    "1": "counter1",
                    "2": "zero",
                    "4": "value1"
                },
                "local_160": {
                    "1": "memory2",
                    "2": "unknown1",
                    "4": "buffer",
                    "6": "buffer2"
                },
                "local_178": {
                    "1": "local_undefined_array1",
                    "2": "archive_name",
                    "6": "buffer1"
                },
                "local_208": {
                    "1": "local_stat_struct",
                    "17": "file_stat",
                    "2": "file_info",
                    "6": "file_stats"
                },
                "local_46": {
                    "1": "header_flag",
                    "2": "archive_header_value",
                    "3": "archive_header",
                    "6": "header_value"
                },
                "local_50": {
                    "1": "member_data",
                    "2": "archive_type",
                    "5": "header",
                    "6": "archive_header"
                },
                "local_6": {
                    "1": "is_invalid_archive"
                },
                "local_80": {
                    "1": "file_content",
                    "13": "buffer",
                    "2": "header_buffer",
                    "4": "buffer5"
                },
                "local_88": {
                    "1": "is_corrupt",
                    "2": "flag1",
                    "4": "flag2",
                    "6": "flag"
                },
                "local_90": {
                    "1": "file_pos2",
                    "2": "position",
                    "3": "current_position",
                    "4": "header_offset",
                    "7": "current_offset"
                },
                "local_98": {
                    "1": "file_pos1",
                    "2": "member_offset",
                    "3": "file_offset",
                    "5": "offset"
                },
                "local_a8": {
                    "1": "counter2",
                    "2": "value2",
                    "3": "value4"
                },
                "local_c0": {
                    "1": "other_archive_index_allocator",
                    "2": "buffer",
                    "5": "buffer4"
                },
                "local_d8": {
                    "1": "data1",
                    "2": "archive_header",
                    "5": "buffer3"
                },
                "param_1": {
                    "1": "input_file_name",
                    "2": "file_name",
                    "3": "param1",
                    "4": "param",
                    "7": "filename"
                },
                "param_2": {
                    "1": "archive_file",
                    "13": "file",
                    "2": "file_pointer",
                    "3": "param_file_pointer",
                    "5": "file_ptr"
                },
                "param_3": {
                    "1": "is_decompiling",
                    "12": "flag",
                    "2": "param_flag",
                    "4": "reverse"
                },
                "pcVar12": {
                    "1": "filename",
                    "2": "archive_name"
                },
                "pcVar13": {
                    "1": "ptr2",
                    "2": "file_name",
                    "3": "error_msg",
                    "7": "error_message"
                },
                "pcVar2": {
                    "1": "error_msg",
                    "2": "archive_name",
                    "4": "str_ptr",
                    "5": "pointer",
                    "7": "str"
                },
                "sVar10": {
                    "1": "size1",
                    "2": "str_length"
                },
                "sVar11": {
                    "1": "string_length",
                    "2": "size_var11",
                    "6": "name_length"
                },
                "sVar6": {
                    "1": "read_bytes",
                    "14": "read_size",
                    "2": "size_var6",
                    "6": "size"
                },
                "sVar9": {
                    "1": "name_len",
                    "12": "name_length",
                    "2": "file_name_size",
                    "4": "file_name_length"
                },
                "uVar14": {
                    "1": "unsigned_var14",
                    "2": "flags",
                    "3": "return_value",
                    "5": "return_val"
                },
                "uVar4": {
                    "1": "flags",
                    "2": "error_flag",
                    "4": "value",
                    "5": "result",
                    "6": "status"
                },
                "uVar5": {
                    "1": "localized_string_var",
                    "2": "err_msg",
                    "4": "error_message",
                    "5": "error_msg",
                    "7": "message"
                },
                "uVar7": {
                    "1": "error_message2",
                    "2": "message2",
                    "3": "error_msg"
                },
                "uVar8": {
                    "1": "var8",
                    "2": "archive_size",
                    "5": "file_size",
                    "8": "value"
                }
            },
            "called": [
                "free",
                "FUN_001029a5",
                "dcgettext",
                "strlen",
                "fseek",
                "fread",
                "fstat",
                "error",
                "malloc",
                "FUN_00102f65",
                "fclose",
                "FUN_00102cc4",
                "FUN_001025ab",
                "fileno",
                "snprintf",
                "fopen",
                "FUN_00104de0",
                "strtoul"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nuint process_archive_0010358d(undefined8 filename,FILE *file,char flag)\n\n{\n  long length;\n  char *str;\n  int result;\n  uint status;\n  undefined8 message;\n  size_t read_size;\n  undefined8 error_msg;\n  ulong value;\n  size_t name_length;\n  char *corrupt_str;\n  size_t source_length;\n  size_t name_length;\n  char *full_name;\n  char *archive_file_name;\n  FILE *file_stream;\n  char *error_message;\n  uint return_val;\n  stat file_stat;\n  undefined buffer1 [24];\n  undefined buffer2 [16];\n  undefined8 value1;\n  undefined buffer3 [16];\n  undefined buffer4 [16];\n  undefined8 value4;\n  long offset;\n  long current_offset;\n  int flag;\n  undefined buffer [48];\n  char archive_header [10];\n  short header_value;\n  \n  value1 = 0;\n  buffer3 = ZEXT816(0);\n  buffer4 = ZEXT816(0);\n  buffer1._0_16_ = ZEXT816(0);\n  buffer2 = ZEXT816(0);\n  value4 = 0;\n  result = fileno(file);\n  result = fstat(result,&file_stat);\n  if ((result < 0) ||\n     (result = FUN_001025ab(buffer3,filename,file,file_stat.st_size,flag), result != 0)) {\nLAB_001036cc:\n    return_val = 1;\nLAB_00103a46:\n    if ((FILE *)buffer1._8_8_ != (FILE *)0x0) {\n      fclose((FILE *)buffer1._8_8_);\n    }\n    FUN_00102f65(buffer1);\n    FUN_00102f65(buffer3);\n  }\n  else {\n    return_val = 0;\n    while (result = fseek(file,current_offset,0), result == 0) {\n      read_size = fread(buffer,1,0x3c,file);\n      if (read_size != 0x3c) {\n        if (read_size == 0) goto LAB_00103a46;\n        error_message = \"%s: failed to read archive header\\n\";\nLAB_001036b8:\n        message = dcgettext(0,error_message,5);\n        error(message,filename);\n        goto LAB_001036cc;\n      }\n      if (header_value != 0xa60) {\n        message = buffer3._0_8_;\n        error_msg = dcgettext(0,\"%s: did not find a valid archive header\\n\",5);\n        error(error_msg,message);\n        goto LAB_001036cc;\n      }\n      current_offset = current_offset + 0x3c;\n      value = strtoul(archive_header,(char **)0x0,10);\n      DAT_00109438 = (value + 1) - (ulong)((value & 1) == 0);\n      error_message = (char *)FUN_001029a5(buffer3,buffer1);\n      if (error_message == (char *)0x0) {\n        error_message = \"%s: bad archive file name\\n\";\n        goto LAB_001036b8;\n      }\n      name_length = strlen(error_message);\n      corrupt_str = (char *)dcgettext(0,\"<corrupt>\",5);\n      archive_file_name = (char *)buffer3._0_8_;\n      source_length = strlen((char *)buffer3._0_8_);\n      name_length = strlen(error_message);\n      read_size = source_length + name_length + 3;\n      if (flag == 0) {\n        full_name = (char *)malloc(read_size);\n        if (full_name == (char *)0x0) goto LAB_001037d3;\n        snprintf(full_name,read_size,\"%s(%s)\",archive_file_name,error_message);\n      }\n      else if (offset == 0) {\n        full_name = (char *)malloc(read_size);\n        if (full_name == (char *)0x0) {\nLAB_001037d3:\n          message = dcgettext(0,\"Out of memory\\n\",5);\n          error(message);\n          message = dcgettext(0,\"%s: bad archive file name\\n\",5);\n          error(message,filename);\n          free(error_message);\n          goto LAB_001036cc;\n        }\n        snprintf(full_name,read_size,\"%s[%s]\",archive_file_name,error_message);\n      }\n      else {\n        str = (char *)buffer1._0_8_;\n        length = source_length + name_length + 5;\n        if ((char *)buffer1._0_8_ == (char *)0x0) {\n          read_size = strlen(corrupt_str);\n          read_size = length + read_size;\n          full_name = (char *)malloc(read_size);\n          str = corrupt_str;\n        }\n        else {\n          read_size = strlen((char *)buffer1._0_8_);\n          read_size = length + read_size;\n          full_name = (char *)malloc(read_size);\n        }\n        if (full_name == (char *)0x0) goto LAB_001037d3;\n        snprintf(full_name,read_size,\"%s[%s(%s)]\",archive_file_name,str,error_message);\n      }\n      if (flag == '\\0') {\n        free(error_message);\n        current_offset = current_offset + DAT_00109438;\n        status = FUN_00104de0(full_name,file);\n        return_val = return_val | status;\n      }\n      else {\n        if (offset == 0) {\n          archive_file_name = (char *)FUN_00102cc4(filename,error_message,name_length);\n          free(error_message);\n          if (archive_file_name != (char *)0x0) {\n            file_stream = fopen(archive_file_name,\"r+b\");\n            if (file_stream != (FILE *)0x0) {\n              status = FUN_00104de0(full_name,file_stream);\n              return_val = return_val | status;\n              fclose(file_stream);\n              free(archive_file_name);\n              goto LAB_00103a39;\n            }\n            message = dcgettext(0,\"Input file \\'%s\\' is not readable\\n\",5);\n            error(message,archive_file_name);\n            free(archive_file_name);\n          }\n          free(full_name);\n          goto LAB_001036cc;\n        }\n        free(error_message);\n        result = fseek((FILE *)buffer1._8_8_,offset + 0x3c,0);\n        if (result != 0) {\n          message = buffer1._0_8_;\n          error_msg = dcgettext(0,\"%s: failed to seek to archive member\\n\",5);\n          error(error_msg,message);\n          free(full_name);\n          goto LAB_001036cc;\n        }\n        status = FUN_00104de0(full_name,buffer1._8_8_);\n        return_val = return_val | status;\n      }\nLAB_00103a39:\n      free(full_name);\n    }\n    message = dcgettext(0,\"%s: failed to seek to next archive header\\n\",5);\n    return_val = 1;\n    error(message,filename);\n  }\n  return return_val;\n}\n\n",
            "current_name": "process_archive_0010358d",
            "entrypoint": "0x0010358d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010358d": "process_archive_0010358d",
                "__s": "corrupt_str",
                "__s_00": "full_name",
                "__stream": "file_stream",
                "iVar3": "result",
                "lVar1": "length",
                "local_148": "value1",
                "local_160": "buffer2",
                "local_178": "buffer1",
                "local_208": "file_stat",
                "local_46": "header_value",
                "local_50": "archive_header",
                "local_80": "buffer",
                "local_88": "flag",
                "local_90": "current_offset",
                "local_98": "offset",
                "local_a8": "value4",
                "local_c0": "buffer4",
                "local_d8": "buffer3",
                "param_1": "filename",
                "param_2": "file",
                "param_3": "flag",
                "pcVar12": "archive_file_name",
                "pcVar13": "error_message",
                "pcVar2": "str",
                "sVar10": "source_length",
                "sVar11": "name_length",
                "sVar6": "read_size",
                "sVar9": "name_length",
                "uVar14": "return_val",
                "uVar4": "status",
                "uVar5": "message",
                "uVar7": "error_msg",
                "uVar8": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103a90": {
            "additional_data": {
                "(ulong)*(byte *)((long)param_1 + 1) << 8 | (ulong)*(byte *)((long)param_1 + 2) << 0x10": {
                    "1": "combine_bytes"
                },
                "(ulong)*(byte *)((long)param_1 + 4) << 0x20": {
                    "1": "shift_byte"
                },
                "(ulong)*(byte *)((long)param_1 + 4) << 0x20 | (ulong)*(byte *)((long)param_1 + 5) << 0x28": {
                    "1": "combine_bytes_with_shift"
                },
                "(ulong)*(byte *)((long)param_1 + 4) << 0x20 | (ulong)*(byte *)((long)param_1 + 5) << 0x28 | (ulong)*(uint *)param_1": {
                    "1": "combine_bytes_with_shift_and_int"
                },
                "(ulong)*(byte *)param_1": {
                    "1": "read_byte"
                },
                "(ulong)*(uint *)param_1": {
                    "1": "read_int"
                },
                "(ulong)*(ushort *)param_1": {
                    "1": "read_short"
                },
                "FUNC_00103ab3": {
                    "1": "decode_bytes",
                    "5": "process_data"
                },
                "FUN_00103a90": {
                    "1": "get_data",
                    "2": "process_data",
                    "5": "extract_data",
                    "7": "get_data_value"
                },
                "abort": {
                    "1": "stop_execution",
                    "3": "terminate_program"
                },
                "byte": {
                    "1": "byte_data",
                    "2": "byte_value"
                },
                "dcgettext": {
                    "1": "gettext",
                    "2": "get_message",
                    "3": "get_error_message"
                },
                "error": {
                    "1": "display_error",
                    "3": "print_error"
                },
                "param_1": {
                    "1": "array",
                    "19": "data_pointer",
                    "4": "data",
                    "6": "data_ptr"
                },
                "param_2": {
                    "1": "length",
                    "29": "data_length"
                },
                "uVar1": {
                    "1": "decoded_value",
                    "2": "extracted_data",
                    "25": "result"
                },
                "uVar2": {
                    "1": "err_msg",
                    "25": "error_message",
                    "4": "error_msg"
                },
                "uint": {
                    "1": "int_value"
                },
                "ushort": {
                    "1": "short_value"
                }
            },
            "called": [
                "caseD_3",
                "caseD_0",
                "FUN_00103ab3"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nulong get_data_value_00103a90(ulong *data_pointer,ulong data_length)\n\n{\n  ulong result;\n  undefined8 error_message;\n  \n  switch(data_length & 0xffffffff) {\n  default:\n    error_message = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n    print_error(error_message,data_length & 0xffffffff);\n                    \n    abort();\n  case 1:\n    return (ulong)*(byte_value *)data_pointer;\n  case 2:\n    return (ulong)*(ushort_value *)data_pointer;\n  case 3:\n    result = FUNC_00103ab3(data_pointer,data_length,\n                         (ulong)*(byte_value *)((long)data_pointer + 1) << 8 |\n                         (ulong)*(byte_value *)((long)data_pointer + 2) << 0x10);\n    return result;\n  case 4:\n    return (ulong)*(uint_value *)data_pointer;\n  case 5:\n    result = FUNC_00103ab3(data_pointer,data_length,(ulong)*(byte_value *)((long)data_pointer + 4) << 0x20);\n    return result;\n  case 6:\n    result = FUNC_00103ab3(data_pointer,data_length,\n                         (ulong)*(byte_value *)((long)data_pointer + 4) << 0x20 |\n                         (ulong)*(byte_value *)((long)data_pointer + 5) << 0x28);\n    return result;\n  case 7:\n    result = FUNC_00103ab3(data_pointer,data_length,\n                         (ulong)*(byte_value *)((long)data_pointer + 4) << 0x20 |\n                         (ulong)*(byte_value *)((long)data_pointer + 5) << 0x28 | (ulong)*(uint_value *)data_pointer);\n    return result;\n  case 8:\n    return *data_pointer;\n  }\n}\n\n",
            "current_name": "get_data_value_00103a90",
            "entrypoint": "0x00103a90",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103a90": "get_data_value_00103a90",
                "abort": "terminate_program",
                "byte": "byte_value",
                "dcgettext": "get_error_message",
                "error": "print_error",
                "param_1": "data_pointer",
                "param_2": "data_length",
                "uVar1": "result",
                "uVar2": "error_message",
                "uint": "uint_value",
                "ushort": "ushort_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103ab3": {
            "called": [],
            "calling": [
                "caseD_3",
                "FUN_00103a90"
            ],
            "code": "\nvoid FUNC_00103ab3(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103ab3",
            "entrypoint": "0x00103ab3",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103ab3": "FUNC_00103ab3"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103ad0": {
            "additional_data": {
                "FUN_00103ad0": {
                    "1": "fill_memory_pattern",
                    "2": "fill_memory_with_pattern",
                    "4": "write_data",
                    "6": "copy_data",
                    "9": "write_data_to_memory"
                },
                "param_1": {
                    "1": "data_address",
                    "2": "dest_buffer",
                    "3": "dest_address",
                    "4": "destination",
                    "5": "memory_address"
                },
                "param_2": {
                    "1": "byte_to_fill",
                    "12": "data",
                    "2": "source",
                    "3": "pattern",
                    "8": "data_value"
                },
                "param_3": {
                    "1": "buffer_size",
                    "14": "length",
                    "16": "data_length"
                },
                "uVar1": {
                    "1": "error_msg",
                    "2": "message",
                    "25": "error_message",
                    "3": "error_string"
                },
                "uVar2": {
                    "1": "iteration",
                    "11": "index",
                    "2": "iterator",
                    "4": "iteration_count",
                    "7": "counter"
                }
            },
            "called": [
                "FUN_00102c98"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nvoid write_data_to_memory_00103ad0(long memory_address,ulong data,uint data_length)\n\n{\n  undefined8 error_message;\n  ulong index;\n  \n  if (data_length < 9) {\n    for (index = 0; data_length != index; index = index + 1) {\n      *(char *)(memory_address + index) = (char)data;\n      data = data >> 8;\n    }\n    return;\n  }\n  error_message = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n  error(error_message,data_length);\n                    \n  abort();\n}\n\n",
            "current_name": "write_data_to_memory_00103ad0",
            "entrypoint": "0x00103ad0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103ad0": "write_data_to_memory_00103ad0",
                "param_1": "memory_address",
                "param_2": "data",
                "param_3": "data_length",
                "uVar1": "error_message",
                "uVar2": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103b30": {
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00103b43) */\n/* WARNING: Removing unreachable block (ram,0x00103b4f) */\n\nvoid FUNC_00103b30(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103b30",
            "entrypoint": "0x00103b30",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103b30": "FUNC_00103b30"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103b60": {
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "calling": [
                "_INIT_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00103b84) */\n/* WARNING: Removing unreachable block (ram,0x00103b90) */\n\nvoid FUNC_00103b60(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103b60",
            "entrypoint": "0x00103b60",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103b60": "FUNC_00103b60"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103bf0": {
            "additional_data": {
                "DAT_0010604c": {
                    "1": "other_data"
                },
                "DAT_00107040": {
                    "1": "char_lookup_table"
                },
                "DAT_00109140": {
                    "1": "arch_name"
                },
                "DAT_00109148": {
                    "1": "elf_name"
                },
                "DAT_00109150": {
                    "1": "other_data8"
                },
                "DAT_00109154": {
                    "1": "global_data9"
                },
                "DAT_00109158": {
                    "1": "global_data8"
                },
                "DAT_0010915c": {
                    "1": "data_val7"
                },
                "DAT_00109160": {
                    "1": "other_data6"
                },
                "DAT_00109164": {
                    "1": "other_data5"
                },
                "DAT_00109168": {
                    "1": "param7"
                },
                "DAT_0010916c": {
                    "1": "global_data14"
                },
                "DAT_00109170": {
                    "1": "other_data3"
                },
                "DAT_00109174": {
                    "1": "abiversion"
                },
                "DAT_001093b8": {
                    "1": "struct_func2"
                },
                "DAT_001093c0": {
                    "1": "struct_func"
                },
                "DAT_001093e4": {
                    "1": "struct_size"
                },
                "DAT_001093f8": {
                    "1": "struct_addr"
                },
                "DAT_00109408": {
                    "1": "struct_name"
                },
                "DAT_00109410": {
                    "1": "struct_ptr"
                },
                "DAT_00109414": {
                    "1": "struct_ptr2"
                },
                "DAT_00109418": {
                    "1": "arch_type"
                },
                "DAT_0010941a": {
                    "1": "other_data16"
                },
                "DAT_00109420": {
                    "1": "struct_type"
                },
                "DAT_00109424": {
                    "1": "other_data17"
                },
                "DAT_00109438": {
                    "1": "elf_arch"
                },
                "DAT_00109440": {
                    "1": "other_data12"
                },
                "DAT_00109444": {
                    "1": "other_data11"
                },
                "FUN_00102fa0": {
                    "1": "extract_byte"
                },
                "FUN_00102fbc": {
                    "1": "function4"
                },
                "FUN_00103160": {
                    "1": "convert_char_to_integer"
                },
                "FUN_001032de": {
                    "1": "format_output"
                },
                "FUN_00103449": {
                    "1": "resize_allocated_memory"
                },
                "FUN_0010358d": {
                    "1": "reverse_bytes"
                },
                "FUN_00103bf0": {
                    "1": "process_files"
                },
                "FUN_00104c60": {
                    "1": "convert_string"
                },
                "FUN_00104d30": {
                    "1": "parse_abiversion"
                },
                "FUN_00104da0": {
                    "1": "convert_char_to_int"
                },
                "FUN_00104de0": {
                    "1": "get_section_info"
                },
                "FUN_00105370": {
                    "1": "allocate_and_copy_string"
                },
                "FilenamesEnum": {
                    "1": "get_and_process_input_files"
                },
                "Fun_00102fbc": {
                    "1": "print_error"
                },
                "PTR_DAT_001093b8": {
                    "1": "write_func_ptr"
                },
                "PTR_DAT_001093c0": {
                    "1": "copy_func_ptr"
                },
                "PTR_s_input_mach_00109180": {
                    "1": "other_pointer_string"
                },
                "__addr": {
                    "1": "memory_address",
                    "2": "mapped_address",
                    "3": "mmap_address",
                    "5": "addr"
                },
                "__buf": {
                    "1": "stat_struct"
                },
                "__endptr": {
                    "1": "string_end"
                },
                "__errno_location": {
                    "1": "get_error_code",
                    "4": "get_errno_location"
                },
                "__optarg": {
                    "1": "option_arg_ptr",
                    "2": "option_argument"
                },
                "__optind": {
                    "1": "option_index_var"
                },
                "__ptr": {
                    "1": "ptr_var",
                    "2": "address_var2",
                    "6": "ptr",
                    "7": "pointer"
                },
                "__ptr2": {
                    "1": "address_var3"
                },
                "__s": {
                    "1": "byte_ptr",
                    "2": "string",
                    "4": "buffer"
                },
                "_optarg": {
                    "1": "opt_argument"
                },
                "_optind": {
                    "1": "opt_index"
                },
                "arguments": {
                    "1": "args"
                },
                "assertion_failure": {
                    "1": "assertion_failed"
                },
                "bVar2": {
                    "1": "byte_temp",
                    "2": "temp_byte",
                    "3": "byte_value",
                    "4": "byte_var2",
                    "6": "current_byte",
                    "7": "byte_var"
                },
                "bVar4": {
                    "1": "bool_value",
                    "2": "temp_bool_1",
                    "3": "bool1",
                    "9": "bool_var1"
                },
                "bVar5": {
                    "1": "boolean_var_2",
                    "2": "bool_val2",
                    "3": "bool2",
                    "9": "bool_var2"
                },
                "bVar6": {
                    "1": "bool_var_3",
                    "2": "bool_val3",
                    "3": "bool3",
                    "9": "bool_var3"
                },
                "bVar7": {
                    "1": "bool_temp4",
                    "2": "temp_bool_4",
                    "3": "bool4",
                    "9": "bool_var4"
                },
                "bindtextdomain": {
                    "1": "bind_text_domain",
                    "2": "bind_translation_domain"
                },
                "bindtextdomainArg1": {
                    "1": "package_name"
                },
                "bindtextdomainArg2": {
                    "1": "locale_dir"
                },
                "cVar1": {
                    "1": "first_character",
                    "2": "temp_char",
                    "4": "char_var1",
                    "5": "char_var",
                    "8": "current_char"
                },
                "closeFile": {
                    "1": "__close_file"
                },
                "copy_buffer": {
                    "1": "copied_data"
                },
                "currentChar2": {
                    "1": "current_char2"
                },
                "currentInputFile": {
                    "1": "current_input_file"
                },
                "dcgettext": {
                    "1": "get_translated_string"
                },
                "decode_buffer": {
                    "1": "decoded_data"
                },
                "elfABIString": {
                    "1": "elf_abi_string"
                },
                "elfABIVersion": {
                    "1": "elf_abi_version"
                },
                "elfArchitectureOpt": {
                    "1": "elf_architecture_option"
                },
                "elfBinaryTypeOpt": {
                    "1": "elf_binary_type_option"
                },
                "elfFileType": {
                    "1": "elf_file_type"
                },
                "elfMachineTypeOpt": {
                    "1": "elf_machine_type_option"
                },
                "elfTimestampOpt": {
                    "1": "elf_timestamp_option"
                },
                "error": {
                    "1": "print_error_message",
                    "2": "print_error"
                },
                "exit": {
                    "1": "force_exit",
                    "3": "exit_program"
                },
                "fclose": {
                    "1": "file_close",
                    "5": "close_file"
                },
                "ferror": {
                    "1": "check_error",
                    "2": "check_file_error"
                },
                "fileno": {
                    "1": "get_file_num",
                    "2": "get_file_descriptor"
                },
                "fopen": {
                    "1": "file_open",
                    "5": "open_file"
                },
                "fprintf": {
                    "1": "formatted_print"
                },
                "fread": {
                    "1": "file_read",
                    "2": "read_from_file",
                    "3": "read_file"
                },
                "free": {
                    "1": "free_mem",
                    "2": "free_memory"
                },
                "freeVar": {
                    "1": "unused_pointer_variable"
                },
                "freeVar2": {
                    "1": "unused_pointer_variable2"
                },
                "fseek": {
                    "2": "file_seek",
                    "3": "set_file_position"
                },
                "fstat": {
                    "1": "get_file_status2"
                },
                "ftell": {
                    "2": "get_file_position"
                },
                "fun_00104ce0": {
                    "1": "parse_command_line_option"
                },
                "getErrnoLocation": {
                    "1": "__errno_location"
                },
                "getErrorString": {
                    "1": "__get_error_string"
                },
                "getFileInfo": {
                    "1": "__get_file_info"
                },
                "getFileNo": {
                    "1": "__file_no"
                },
                "getopt_long": {
                    "1": "parse_command_line_arguments",
                    "2": "parse_options"
                },
                "handleLicenseOpt": {
                    "1": "handle_license_option"
                },
                "helpOption": {
                    "1": "help_option"
                },
                "iVar10": {
                    "1": "temp_var_1",
                    "2": "file_stat_result",
                    "3": "temp_var1",
                    "4": "temp_var"
                },
                "iVar31": {
                    "1": "iterator_var",
                    "2": "loop_limit",
                    "3": "temp_var2"
                },
                "iVar8": {
                    "1": "loop_index",
                    "13": "index",
                    "2": "index_var",
                    "3": "counter"
                },
                "inputFileCount": {
                    "1": "num_input_files"
                },
                "inputFilePath": {
                    "1": "input_file_path"
                },
                "inputFileSize": {
                    "1": "input_file_size"
                },
                "inputFileStatus": {
                    "1": "input_file_status"
                },
                "lVar20": {
                    "1": "temp_long_1",
                    "2": "loop_index",
                    "3": "index",
                    "5": "long_var1"
                },
                "lVar23": {
                    "1": "var2",
                    "2": "temp_long2",
                    "7": "long_var2"
                },
                "lVar29": {
                    "1": "loop_var",
                    "2": "temp_long3",
                    "7": "long_var3"
                },
                "lVar37": {
                    "1": "long_var4"
                },
                "lVar38": {
                    "1": "result_ptr"
                },
                "lVar40": {
                    "1": "long_var4"
                },
                "licenseHandler": {
                    "1": "handle_license"
                },
                "licenseVersion": {
                    "1": "license_version"
                },
                "local_10": {
                    "1": "local_ulong_24"
                },
                "local_120": {
                    "1": "local_size",
                    "2": "local_var1"
                },
                "local_138": {
                    "1": "string_list",
                    "2": "local_var1"
                },
                "local_18": {
                    "1": "local_ulong_23"
                },
                "local_20": {
                    "1": "local_ulong_22"
                },
                "local_28": {
                    "1": "local_ulong_21"
                },
                "local_30": {
                    "1": "local_ulong_20"
                },
                "local_38": {
                    "1": "local_ulong_19"
                },
                "local_40": {
                    "1": "local_ulong_18"
                },
                "local_48": {
                    "1": "local_ulong_17"
                },
                "local_4c": {
                    "1": "local_size_t"
                },
                "local_50": {
                    "1": "local_ulong_16"
                },
                "local_58": {
                    "1": "local_ulong_15"
                },
                "local_60": {
                    "1": "local_ulong_14"
                },
                "local_68": {
                    "1": "local_ulong_13"
                },
                "local_70": {
                    "1": "local_ulong_12"
                },
                "local_78": {
                    "1": "local_ulong_11"
                },
                "local_80": {
                    "1": "local_ulong_10"
                },
                "local_88": {
                    "1": "local_ulong_9"
                },
                "local_90": {
                    "1": "local_ulong_8"
                },
                "local_98": {
                    "1": "local_ulong_7"
                },
                "local_a0": {
                    "1": "local_ulong_6"
                },
                "local_a8": {
                    "1": "local_ulong_5"
                },
                "local_b0": {
                    "1": "local_ulong_4"
                },
                "local_b8": {
                    "1": "local_ulong_3"
                },
                "local_c0": {
                    "1": "local_ulong_2"
                },
                "local_c4": {
                    "1": "local_var7"
                },
                "local_c8": {
                    "1": "file_data",
                    "2": "local_stat_var",
                    "3": "temp_stat_struct",
                    "5": "local_stat"
                },
                "local_d0": {
                    "1": "local_ptr_0",
                    "2": "local_byte"
                },
                "local_d8": {
                    "1": "char_pointer3",
                    "3": "local_string"
                },
                "local_e0": {
                    "1": "local_var6"
                },
                "local_e8": {
                    "1": "local_var5"
                },
                "local_f0": {
                    "1": "local_var4"
                },
                "local_f8": {
                    "1": "local_var3"
                },
                "loopVarPointer3": {
                    "1": "loop_var_pointer3"
                },
                "memcpy": {
                    "1": "mem_copy",
                    "5": "copy_memory"
                },
                "memmove": {
                    "1": "mem_move",
                    "5": "move_memory"
                },
                "mmap": {
                    "1": "map_file_to_memory"
                },
                "munmap": {
                    "1": "unmap_file_memory",
                    "3": "unmap_memory"
                },
                "numArguments": {
                    "1": "num_of_args"
                },
                "openFile": {
                    "1": "__open_file"
                },
                "opt": {
                    "1": "option"
                },
                "optArg4": {
                    "1": "option_argument"
                },
                "optArg8": {
                    "1": "option_argument_8"
                },
                "optArg9": {
                    "1": "option_argument_9"
                },
                "optind": {
                    "1": "param_index"
                },
                "optionValue": {
                    "1": "option_value"
                },
                "outputLicenseText": {
                    "1": "output_license_text"
                },
                "outputStream": {
                    "1": "output_stream"
                },
                "outputStreamError": {
                    "1": "output_stream_error"
                },
                "outputString": {
                    "1": "output_string"
                },
                "pFVar16": {
                    "1": "input_file_pointer",
                    "10": "file_ptr",
                    "11": "file_pointer",
                    "2": "file"
                },
                "param_1": {
                    "1": "argc",
                    "10": "num_files",
                    "2": "number_of_params",
                    "3": "num_iterations",
                    "5": "num_params"
                },
                "param_2": {
                    "1": "file_names",
                    "11": "file_paths",
                    "2": "file_list",
                    "6": "param_array"
                },
                "pbVar22": {
                    "1": "byte_ptr22",
                    "2": "output_buffer",
                    "3": "byte_pointer",
                    "6": "byte_ptr"
                },
                "pbVar27": {
                    "1": "temp_byte_ptr3",
                    "3": "byte_pointer2",
                    "4": "byte_ptr2"
                },
                "pcVar34": {
                    "1": "temp_char_ptr1",
                    "2": "str"
                },
                "pcVar36": {
                    "1": "error_string_temp",
                    "2": "char_ptr2"
                },
                "pcVar37": {
                    "1": "char_ptr3"
                },
                "piVar19": {
                    "1": "ptr_to_integer_var",
                    "2": "int_pointer",
                    "4": "error_number",
                    "6": "errno_ptr"
                },
                "plVar11": {
                    "1": "pointer_list",
                    "2": "pointer_var1"
                },
                "plVar19": {
                    "1": "tmp_errno"
                },
                "plVar21": {
                    "1": "temp_long_ptr2",
                    "2": "long_pointer2",
                    "3": "new_file_paths"
                },
                "plVar24": {
                    "1": "param_list2",
                    "2": "param_array_ptr2"
                },
                "plVar37": {
                    "1": "temp_long_var_ptr"
                },
                "ppInputFiles": {
                    "1": "input_files"
                },
                "ppuVar32": {
                    "1": "undefined_pointer_pointer",
                    "2": "pointer_to_pointer"
                },
                "printf": {
                    "1": "print_text",
                    "2": "print"
                },
                "private_message": {
                    "1": "error_message"
                },
                "puVar37": {
                    "1": "temp_u_int64_ptr1"
                },
                "public_message": {
                    "1": "info_message"
                },
                "realloc": {
                    "1": "realloc_memory"
                },
                "reportVersionOption": {
                    "1": "report_version_option"
                },
                "reverseEngineerBinary": {
                    "1": "<more_descriptive_function_name>"
                },
                "reverse_engineer_binary": {
                    "1": "better_function_name"
                },
                "rewind": {
                    "1": "reset_file_position"
                },
                "sVar17": {
                    "1": "tmp_count",
                    "3": "temp_size",
                    "6": "size_var1",
                    "7": "size"
                },
                "sVar18": {
                    "1": "size1",
                    "2": "bytes_read",
                    "3": "read_size",
                    "6": "size_var2"
                },
                "setlocale": {
                    "1": "set_program_locale",
                    "3": "set_locale"
                },
                "setlocaleArg0": {
                    "1": "locale_not_set"
                },
                "setlocaleArg1": {
                    "1": "category"
                },
                "setlocaleArg2": {
                    "1": "locale"
                },
                "stat": {
                    "1": "get_file_attr",
                    "2": "get_file_status"
                },
                "strcmp": {
                    "3": "compare_strings"
                },
                "strerror": {
                    "1": "get_error_str",
                    "3": "get_error_string"
                },
                "stringVar2": {
                    "1": "string_var2"
                },
                "stringVar3": {
                    "1": "string_var3"
                },
                "stringVar4": {
                    "1": "string_var4"
                },
                "stringVar5": {
                    "1": "string_var5"
                },
                "stringVar6": {
                    "1": "string_var6"
                },
                "stringVar7": {
                    "1": "string_var7"
                },
                "strlen": {
                    "1": "get_str_len",
                    "5": "get_string_length"
                },
                "strstr": {
                    "1": "find_sub_string"
                },
                "strtoul": {
                    "1": "convert_to_unsigned_long"
                },
                "tempBool1": {
                    "1": "temp_bool1"
                },
                "tempBool2": {
                    "1": "temp_bool2"
                },
                "tempBool3": {
                    "1": "temp_bool3"
                },
                "tempBool4": {
                    "1": "temp_bool4"
                },
                "tempByte": {
                    "1": "temp_byte"
                },
                "tempBytePtr1": {
                    "1": "temp_byte_ptr1"
                },
                "tempBytePtr2": {
                    "1": "temp_byte_ptr2"
                },
                "tempBytePtr3": {
                    "1": "temp_byte_ptr3"
                },
                "tempBytePtr4": {
                    "1": "temp_byte_ptr4"
                },
                "tempChar": {
                    "1": "temp_char"
                },
                "tempCharPtr1": {
                    "1": "temp_char_ptr1"
                },
                "tempCharPtr2": {
                    "1": "temp_char_ptr2"
                },
                "tempCharPtr3": {
                    "1": "temp_char_ptr3"
                },
                "tempFilePtr1": {
                    "1": "temp_file_ptr1"
                },
                "tempInt1": {
                    "1": "temp_int1"
                },
                "tempInt2": {
                    "1": "temp_int2"
                },
                "tempInt3": {
                    "1": "temp_int3"
                },
                "tempIntPtr1": {
                    "1": "temp_int_ptr1"
                },
                "tempLong1": {
                    "1": "temp_long1"
                },
                "tempLong2": {
                    "1": "temp_long2"
                },
                "tempLong3": {
                    "1": "temp_long3"
                },
                "tempLongPtr1": {
                    "1": "temp_long_ptr1"
                },
                "tempLongPtr2": {
                    "1": "temp_long_ptr2"
                },
                "tempLongPtr3": {
                    "1": "temp_long_ptr3"
                },
                "tempPointer1": {
                    "1": "temp_pointer1"
                },
                "tempPointer2": {
                    "1": "temp_pointer2"
                },
                "tempPointerPtr1": {
                    "1": "temp_pointer_ptr1"
                },
                "tempSize": {
                    "1": "temp_size"
                },
                "tempSize1": {
                    "1": "temp_size1"
                },
                "tempStats": {
                    "1": "temp_stats"
                },
                "tempUInt1": {
                    "1": "temp_u_int1"
                },
                "tempUInt2": {
                    "1": "temp_u_int2"
                },
                "tempUInt3": {
                    "1": "temp_u_int3"
                },
                "tempUInt4": {
                    "1": "temp_u_int4"
                },
                "tempUInt64": {
                    "1": "temp_u_int64"
                },
                "tempUInt64Ptr1": {
                    "1": "temp_u_int64_ptr1"
                },
                "tempUInt64Ptr2": {
                    "1": "temp_u_int64_ptr2"
                },
                "tempULong": {
                    "1": "temp_u_long"
                },
                "tempULong1": {
                    "1": "temp_u_long1"
                },
                "tempULong2": {
                    "1": "temp_u_long2"
                },
                "tempULong3": {
                    "1": "temp_u_long3"
                },
                "tempULong4": {
                    "1": "temp_u_long4"
                },
                "tempULong5": {
                    "1": "temp_u_long5"
                },
                "tempULong6": {
                    "1": "temp_u_long6"
                },
                "tempULong7": {
                    "1": "temp_u_long7"
                },
                "textdomain": {
                    "1": "set_textdomain",
                    "2": "set_translation_domain"
                },
                "uVar12": {
                    "1": "ulong_var_2",
                    "2": "ulong_var12"
                },
                "uVar13": {
                    "1": "temp_ulong3",
                    "2": "ulong_val2"
                },
                "uVar14": {
                    "1": "temp_ulong3",
                    "2": "ulong_var14"
                },
                "uVar15": {
                    "1": "unsigned_var15",
                    "2": "ulong_var5"
                },
                "uVar25": {
                    "1": "unsigned_var25",
                    "2": "ulong_var5"
                },
                "uVar26": {
                    "1": "ulong_temp5",
                    "2": "temp_ulong_6"
                },
                "uVar28": {
                    "1": "temp_var6",
                    "2": "uint_var1"
                },
                "uVar3": {
                    "1": "ulong_temp",
                    "2": "temp_ulong",
                    "4": "current_ulong",
                    "6": "ulong_var"
                },
                "uVar30": {
                    "1": "flags",
                    "3": "result_var",
                    "5": "return_value"
                },
                "uVar33": {
                    "1": "uint_var3",
                    "2": "uint_var2"
                },
                "uVar35": {
                    "1": "ulong_var10",
                    "2": "temp_ulong_9"
                },
                "uVar38": {
                    "1": "temp_ulong_10"
                },
                "uVar9": {
                    "1": "loop_variable_2",
                    "14": "result",
                    "2": "temp_uint",
                    "4": "return_value"
                },
                "undefined8": {
                    "1": "undefined_long"
                },
                "unmapMemory": {
                    "1": "__unmap_memory"
                },
                "write_buffer": {
                    "1": "written_data"
                }
            },
            "called": [
                "FUN_00104ce0",
                "exit",
                "dcgettext",
                "printf",
                "FUN_00104da0",
                "ferror",
                "fclose",
                "stat",
                "munmap",
                "strerror",
                "FUN_00104c60",
                "__errno_location",
                "getopt_long",
                "fileno",
                "fopen",
                "memmove",
                "free",
                "FUN_001032de",
                "FUN_00102fa0",
                "strlen",
                "mmap",
                "fseek",
                "FUN_00102fbc",
                "fread",
                "memcpy",
                "FUN_00104d30",
                "fstat",
                "error",
                "setlocale",
                "textdomain",
                "FUN_0010358d",
                "FUN_00103449",
                "rewind",
                "FUN_00105370",
                "fprintf",
                "bindtextdomain",
                "FUN_00104de0",
                "strtoul",
                "strcmp",
                "FUN_00103160",
                "ftell"
            ],
            "calling": [
                "entry"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nuint analyze_binary_00103bf0(int num_files,long *file_paths)\n\n{\n  char current_char;\n  byte byte_var;\n  ulong ulong_var;\n  bool bool_var1;\n  bool bool_var2;\n  bool bool_var3;\n  bool bool_var4;\n  int index;\n  uint result;\n  int status;\n  void *addr;\n  void *pointer;\n  long *temp_long_pointer;\n  ulong ulong_var2;\n  ulong ulong_var3;\n  ulong ulong_var4;\n  ulong ulong_var5;\n  FILE *file_pointer;\n  size_t size;\n  byte *buffer;\n  size_t size_var2;\n  int *errno_ptr;\n  long long_var1;\n  long *new_file_paths;\n  byte *byte_ptr;\n  long long_var2;\n  long *long_pointer3;\n  undefined_long return_value;\n  ulong mask_value;\n  byte *byte_ptr2;\n  uint uint_var1;\n  long long_var3;\n  uint return_value;\n  int temp_var2;\n  undefined **pointer_pointer;\n  uint uint_var2;\n  char *error_message;\n  ulong ulong_val6;\n  char *temp_string2;\n  undefined_long *temp_long_pointer2;\n  ulong temp_ulong8;\n  undefined_long *output_files;\n  ulong local_var2;\n  char *local_string;\n  byte *local_byte;\n  get_file_status local_stat;\n  \n  index = 0;\n  temp_var2 = 2000;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  new_file_paths = file_paths;\nLAB_00103c54:\n  long_var3 = (long)(index + 1);\n  do {\n    index = (int)long_var3;\n    if (num_files <= index) {\n      pointer_pointer = &PTR_s_input_mach_00109180;\n      break;\n    }\n    if (*(char *)new_file_paths[long_var3] == '@') {\n      temp_var2 = temp_var2 + -1;\n      if (temp_var2 == 0) {\n        long_var3 = *new_file_paths;\n        temp_string2 = \"%s: print_error: too many @-files encountered\\n\";\n        goto LAB_00104739;\n      }\n      temp_string2 = (char *)new_file_paths[long_var3] + 1;\n      status = get_file_status(temp_string2,&local_stat);\n      if (-1 < status) {\n        if ((local_stat.st_mode & 0xf000) == 0x4000) {\n          do {\n            long_var3 = *new_file_paths;\n            temp_string2 = \"%s: print_error: @-file refers to a directory\\n\";\nLAB_00104739:\n            fprintf(_stderr,temp_string2,long_var3);\n            FUN_00102fbc();\n          } while( true );\n        }\n        file_pointer = fopen(temp_string2,\"r\");\n        if (file_pointer != (FILE *)0x0) goto code_r0x00104650;\n      }\n    }\n    long_var3 = long_var3 + 1;\n  } while( true );\nLAB_00103c87:\n  index = getopt_long(num_files,new_file_paths,&DAT_0010604c,pointer_pointer,0);\n  if (index == -1) {\n    if ((opt_index == num_files) ||\n       (((DAT_00109444 | DAT_00109440) == 0 &&\n        (pointer_pointer = (undefined **)0x0,\n        (DAT_0010916c & DAT_00109160 & DAT_00109158 & DAT_00109150) == 0xffffffff))))\n    goto switchD_00103cba_caseD_69;\n    return_value = 0;\n    goto LAB_00103d1c;\n  }\n  switch(index) {\n  case 0x68:\n    FUN_001032de(_stdout,0);\n  default:\nswitchD_00103cba_caseD_69:\n    FUN_001032de(_stderr,1);\n    goto switchD_00103cba_caseD_9a;\n  case 0x76:\n    printf(\"GNU %s %s\\n\",\"elfedit\",\"(GNU Binutils for Debian) 2.40\");\n    temp_string2 = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n    printf(temp_string2);\n    temp_string2 = (char *)dcgettext(0,\n                                \"This program is free_memory software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your optionion) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                ,5);\n    printf(temp_string2);\n                    \n    exit_program(0);\n  case 0x96:\n    DAT_00109174 = FUN_00104d30(opt_argument);\n    if (DAT_00109174 < 0) {\n      return 1;\n    }\n    if (DAT_00109174 == 6) {\n      DAT_00109170 = 1;\n    }\n    else if (DAT_00109174 < 7) {\n      DAT_00109170 = (DAT_00109174 != 3) + 1 + (uint)(DAT_00109174 != 3);\n    }\n    else {\n      DAT_00109170 = 3 - (uint)(DAT_00109174 - 0xb4U < 2);\n    }\n    goto LAB_00103c87;\n  case 0x97:\n    DAT_0010916c = FUN_00104d30(opt_argument);\n    if ((int)DAT_0010916c < 0) {\n      return 1;\n    }\n    if ((int)DAT_0010916c < 0xb6) {\n      DAT_00109168 = 2;\n      if (((int)DAT_0010916c < 0xb4) && (DAT_00109168 = 1, DAT_0010916c != 3)) {\n        DAT_00109168 = (DAT_0010916c != 6) + 1 + (uint)(DAT_0010916c != 6);\n      }\n    }\n    else {\n      DAT_00109168 = 3;\n    }\n    goto LAB_00103c87;\n  case 0x98:\n    DAT_00109164 = FUN_00104da0(opt_argument);\n    return_value = DAT_00109164;\n    break;\n  case 0x99:\n    DAT_00109160 = FUN_00104da0(opt_argument);\n    return_value = DAT_00109160;\n    break;\n  case 0x9a:\n    goto switchD_00103cba_caseD_9a;\n  case 0x9b:\n    DAT_00109158 = FUN_00104ce0(opt_argument);\n    return_value = DAT_00109158;\n    break;\n  case 0x9c:\n    ulong_var5 = strtoul(opt_argument,&local_string,0);\n    return_value = (uint)ulong_var5;\n    current_char = *local_string;\n    DAT_00109154 = return_value;\n    temp_string2 = opt_argument;\n    goto joined_r0x00104334;\n  case 0x9d:\n    ulong_var5 = strtoul(opt_argument,&local_string,0);\n    return_value = (uint)ulong_var5;\n    current_char = *local_string;\n    DAT_00109150 = return_value;\n    temp_string2 = opt_argument;\njoined_r0x00104334:\n    opt_argument = temp_string2;\n    if ((current_char != '\\0') || (0xff < return_value)) {\n      return_value = dcgettext(0,\"Invalid ABIVERSION: %s\\n\",5);\n      print_error(return_value,temp_string2);\n      return 1;\n    }\n    goto LAB_00103c87;\n  case 0x9e:\n    return_value = 1;\n    goto LAB_00103e9d;\n  case 0x9f:\n    return_value = 0;\nLAB_00103e9d:\n    return_value = FUN_00104c60(opt_argument,return_value);\n  }\njoined_r0x00103eae:\n  if ((int)return_value < 0) {\n    return 1;\n  }\n  goto LAB_00103c87;\nLAB_00103d1c:\n  long_var3 = (long)opt_index;\n  if (num_files <= opt_index) {\n    return return_value;\n  }\n  opt_index = opt_index + 1;\n  temp_string2 = (char *)new_file_paths[long_var3];\n  index = get_file_status(temp_string2,&local_stat);\n  if (index < 0) {\n    errno_ptr = __errno_location();\n    error_message = \"\\'%s\\': No such file\\n\";\n    if (*errno_ptr == 2) goto LAB_00104497;\n    error_message = strerror(*errno_ptr);\n    return_value = dcgettext(0,\"Could not locate \\'%s\\'.  System print_error message: %s\\n\",5);\n    print_error(return_value,temp_string2,error_message);\nLAB_001044ab:\n    result = 1;\n  }\n  else {\n    if ((local_stat.st_mode & 0xf000) != 0x8000) {\n      error_message = \"\\'%s\\' is not an ordinary file\\n\";\nLAB_00104497:\n      return_value = dcgettext(0,error_message,5);\n      print_error(return_value,temp_string2);\n      goto LAB_001044ab;\n    }\n    file_pointer = fopen(temp_string2,\"r+b\");\n    if (file_pointer == (FILE *)0x0) {\n      error_message = \"Input file \\'%s\\' is not readable\\n\";\n      goto LAB_00104497;\n    }\n    size = fread(&local_byte,8,1,file_pointer);\n    if (size != 1) {\n      return_value = dcgettext(0,\"%s: Failed to read file\\'s magic number\\n\",5);\n      print_error(return_value,temp_string2);\n      fclose(file_pointer);\n      goto LAB_001044ab;\n    }\n    if (local_byte == (byte *)0xa3e686372613c21) {\n      result = FUN_0010358d(temp_string2,file_pointer,0);\n    }\n    else if (local_byte == (byte *)0xa3e6e6968743c21) {\n      result = FUN_0010358d(temp_string2,file_pointer,1);\n    }\n    else {\n      rewind(file_pointer);\n      DAT_00109438 = 0;\n      result = FUN_00104de0(temp_string2,file_pointer);\n      if (((result == 0) && ((ushort)(DAT_00109418 - 2U) < 2)) &&\n         ((DAT_00109444 | DAT_00109440) != 0)) {\n        if ((DAT_0010941a == 3) ||\n           (error_message = \"%s: Not an i386 nor x86-64 ELF file\\n\", DAT_0010941a == 0x3e)) {\n          index = fileno(file_pointer);\n          index = fstat(index,&local_stat);\n          if (index < 0) {\n            return_value = dcgettext(0,\"%s: get_file_status () failed\\n\",5);\n            print_error(return_value,temp_string2);\n            result = 1;\n          }\n          else {\n            index = fileno(file_pointer);\n            addr = mmap((void *)0x0,local_stat.st_size,3,1,index,0);\n            if (addr == (void *)0xffffffffffffffff) {\n              error_message = \"%s: mmap () failed\\n\";\n              goto LAB_0010438d;\n            }\n            pointer = (void *)FUN_00105370((ulong)DAT_00109424 << 6);\n            long_var3 = DAT_001093f8;\n            if (DAT_001093e4 == '\\x01') {\n              for (ulong_var5 = 0; (uint)ulong_var5 < DAT_00109424; ulong_var5 = (ulong)((uint)ulong_var5 + 1)) {\n                long_var1 = ulong_var5 * 0x20 + long_var3 + (long)addr;\n                temp_long_pointer2 = (undefined_long *)((long)pointer + ulong_var5 * 0x40);\n                return_value = (*DAT_001093c0)(long_var1,4);\n                *temp_long_pointer2 = return_value;\n                return_value = (*DAT_001093c0)(long_var1 + 4,4);\n                temp_long_pointer2[2] = return_value;\n                return_value = (*DAT_001093c0)(long_var1 + 8,4);\n                temp_long_pointer2[3] = return_value;\n                return_value = (*DAT_001093c0)(long_var1 + 0xc,4);\n                temp_long_pointer2[4] = return_value;\n                return_value = (*DAT_001093c0)(long_var1 + 0x10,4);\n                temp_long_pointer2[5] = return_value;\n                return_value = (*DAT_001093c0)(long_var1 + 0x14,4);\n                temp_long_pointer2[6] = return_value;\n                return_value = (*DAT_001093c0)(long_var1 + 0x18,4);\n                temp_long_pointer2[1] = return_value;\n                return_value = (*DAT_001093c0)(long_var1 + 0x1c,4);\n                temp_long_pointer2[7] = return_value;\n              }\n            }\n            else {\n              for (uint_var1 = 0; uint_var1 < DAT_00109424; uint_var1 = uint_var1 + 1) {\n                long_var1 = (ulong)uint_var1 * 0x38 + long_var3 + (long)addr;\n                temp_long_pointer2 = (undefined_long *)((ulong)uint_var1 * 0x40 + (long)pointer);\n                return_value = (*DAT_001093c0)(long_var1,4);\n                *temp_long_pointer2 = return_value;\n                return_value = (*DAT_001093c0)(long_var1 + 8,8);\n                temp_long_pointer2[2] = return_value;\n                return_value = (*DAT_001093c0)(long_var1 + 0x10,8);\n                temp_long_pointer2[3] = return_value;\n                return_value = (*DAT_001093c0)(long_var1 + 0x18,8);\n                temp_long_pointer2[4] = return_value;\n                return_value = (*DAT_001093c0)(long_var1 + 0x20,8);\n                temp_long_pointer2[5] = return_value;\n                return_value = (*DAT_001093c0)(long_var1 + 0x28,8);\n                temp_long_pointer2[6] = return_value;\n                return_value = (*DAT_001093c0)(long_var1 + 4,4);\n                temp_long_pointer2[1] = return_value;\n                return_value = (*DAT_001093c0)(long_var1 + 0x30,8);\n                temp_long_pointer2[7] = return_value;\n              }\n            }\n            for (ulong_var5 = 0; (uint)ulong_var5 < DAT_00109424; ulong_var5 = (ulong)((uint)ulong_var5 + 1)) {\n              temp_long_pointer = (long *)(ulong_var5 * 0x40 + (long)pointer);\n              if (*temp_long_pointer == 4) {\n                long_var3 = temp_long_pointer[5];\n                ulong_var = temp_long_pointer[7];\n                ulong_val6 = (long)addr + temp_long_pointer[2];\n                for (local_var2 = ulong_val6; local_var2 < ulong_val6 + long_var3;\n                    local_var2 = local_var2 + ((ulong_var - 1) + ulong_var4 + ulong_var3 & mask_value)) {\n                  if ((ulong_val6 - local_var2) + long_var3 < 0xc) {\nLAB_001044cb:\n                    return_value = dcgettext(0,\"%s: Invalid PT_NOTE segment\\n\",5);\n                    print_error(return_value,temp_string2);\n                    result = 1;\n                    goto LAB_001042bf;\n                  }\n                  long_var1 = (*DAT_001093c0)(local_var2 + 8,4);\n                  ulong_var2 = (*DAT_001093c0)(local_var2,4);\n                  if ((ulong_val6 - (long)(char *)(local_var2 + 0xc)) + long_var3 < ulong_var2)\n                  goto LAB_001044cb;\n                  ulong_var3 = (*DAT_001093c0)(local_var2 + 4,4);\n                  mask_value = -ulong_var;\n                  ulong_var4 = ulong_var + 0xb + ulong_var2 & mask_value;\n                  temp_ulong8 = local_var2 + ulong_var4;\n                  if ((ulong_var3 != 0) &&\n                     ((ulong_val6 + long_var3 <= temp_ulong8 || ((ulong_val6 - temp_ulong8) + long_var3 < ulong_var3))))\n                  goto LAB_001044cb;\n                  if ((ulong_var2 == 4) &&\n                     ((index = strcmp((char *)(local_var2 + 0xc),\"GNU\"), index == 0 && (long_var1 == 5))\n                     )) {\n                    if ((ulong_var3 < 8) || (ulong_var3 % ulong_var != 0)) goto LAB_001044cb;\n                    ulong_var2 = temp_ulong8 + ulong_var3;\n                    do {\n                      index = (*DAT_001093c0)(temp_ulong8,4);\n                      uint_var1 = (*DAT_001093c0)(temp_ulong8 + 4,4);\n                      long_var1 = temp_ulong8 + 8;\n                      if (ulong_var2 < long_var1 + (ulong)uint_var1) goto LAB_001044cb;\n                      if (index == -0x3ffffffe) {\n                        if (uint_var1 != 4) goto LAB_001044cb;\n                        uint_var1 = (*DAT_001093c0)(long_var1,4);\n                        if (DAT_00109444 == 0) {\n                          uint_var2 = uint_var1;\n                          if (DAT_00109440 == 0) goto LAB_001042bf;\nLAB_001042ac:\n                          uint_var2 = uint_var2 & ~DAT_00109440;\n                        }\n                        else {\n                          uint_var2 = DAT_00109444 | uint_var1;\n                          if (DAT_00109440 != 0) goto LAB_001042ac;\n                        }\n                        if (uint_var1 != uint_var2) {\n                          (*DAT_001093b8)(long_var1,uint_var2,4);\n                        }\n                        goto LAB_001042bf;\n                      }\n                      temp_ulong8 = long_var1 + ((ulong)uint_var1 + (ulong_var - 1) & mask_value);\n                    } while (7 < (long)(ulong_var2 - temp_ulong8));\n                  }\n                }\n              }\n            }\nLAB_001042bf:\n            free_memory(pointer);\n            munmap(addr,local_stat.st_size);\n          }\n        }\n        else {\nLAB_0010438d:\n          return_value = dcgettext(0,error_message,5);\n          print_error(return_value,temp_string2);\n        }\n      }\n    }\n    fclose(file_pointer);\n  }\n  return_value = return_value | result;\n  goto LAB_00103d1c;\nswitchD_00103cba_caseD_9a:\n  DAT_0010915c = FUN_00104ce0(opt_argument);\n  return_value = DAT_0010915c;\n  goto joined_r0x00103eae;\ncode_r0x00104650:\n  status = fseek(file_pointer,0,2);\n  if (((status != -1) && (size = ftell(file_pointer), size != 0xffffffffffffffff)) &&\n     (status = fseek(file_pointer,0,0), status != -1)) {\n    buffer = (byte *)FUN_00105370(size + 1);\n    size_var2 = fread(buffer,1,size,file_pointer);\n    if ((size == size_var2) || (status = ferror(file_pointer), status == 0)) {\n      buffer[size_var2] = 0;\n      byte_ptr2 = buffer;\nLAB_001046fc:\n      if (*byte_ptr2 == 0) {\n        output_files = (undefined_long *)FUN_00105370(8);\n        *output_files = 0;\n      }\n      else {\n        if (((&DAT_00107040)[(ulong)*byte_ptr2 * 2] & 0x40) != 0) goto code_r0x00104718;\n        local_byte = buffer;\n        strlen((char *)buffer);\n        byte_ptr2 = (byte *)FUN_00105370();\n        output_files = (undefined_long *)0x0;\n        status = 0;\n        bool_var3 = false;\n        bool_var2 = false;\n        bool_var4 = false;\n        long_var1 = 0;\n        do {\n          FUN_00102fa0(&local_byte);\n          byte_ptr = byte_ptr2;\n          if ((status == 0) || (status + -1 <= (int)long_var1)) {\n            if (output_files == (undefined_long *)0x0) {\n              status = 8;\n              output_files = (undefined_long *)FUN_00105370(0x40);\n            }\n            else {\n              status = status * 2;\n              output_files = (undefined_long *)FUN_00103449(output_files,(long)status << 3);\n            }\n            output_files[long_var1] = 0;\n          }\n          for (; byte_var = *local_byte, byte_var != 0; local_byte = local_byte + 1) {\n            if ((((&DAT_00107040)[(ulong)byte_var * 2] & 0x40) != 0) &&\n               (bool_var1 = (bool)(bool_var2 | bool_var4 | bool_var3), !bool_var1)) {\n              bool_var3 = false;\n              bool_var4 = false;\n              bool_var2 = bool_var1;\n              break;\n            }\n            if (bool_var3) {\n              *byte_ptr = byte_var;\n              bool_var3 = false;\n              byte_ptr = byte_ptr + 1;\n            }\n            else if (byte_var == 0x5c) {\n              bool_var3 = true;\n            }\n            else if (bool_var2) {\n              if (byte_var == 0x27) {\n                bool_var2 = false;\n              }\n              else {\nLAB_00104c08:\n                *byte_ptr = byte_var;\n                byte_ptr = byte_ptr + 1;\n              }\n            }\n            else if (bool_var4) {\n              if (byte_var != 0x22) goto LAB_00104c08;\n              bool_var4 = false;\n            }\n            else if (byte_var == 0x27) {\n              bool_var2 = true;\n            }\n            else {\n              if (byte_var != 0x22) goto LAB_00104c08;\n              bool_var4 = true;\n            }\n          }\n          *byte_ptr = 0;\n          return_value = FUN_00103160();\n          output_files[long_var1] = return_value;\n          output_files[long_var1 + 1] = 0;\n          FUN_00102fa0(&local_byte);\n          long_var1 = long_var1 + 1;\n        } while (*local_byte != 0);\n        free_memory(byte_ptr2);\n      }\n      if (new_file_paths == file_paths) {\n        long_var1 = 1;\n        do {\n          long_var2 = long_var1;\n          long_var1 = long_var2 + 1;\n        } while (new_file_paths[long_var2 + -1] != 0);\n        long_pointer3 = (long *)FUN_00105370((long)(int)long_var2 << 3);\n        temp_long_pointer = long_pointer3;\n        while (long_var1 = *new_file_paths, new_file_paths = new_file_paths + 1, long_var1 != 0) {\n          long_var1 = FUN_00103160();\n          *temp_long_pointer = long_var1;\n          temp_long_pointer = temp_long_pointer + 1;\n        }\n        *temp_long_pointer = 0;\n        long_var1 = 0;\n      }\n      else {\n        long_var1 = 0;\n        long_pointer3 = new_file_paths;\n      }\n      for (; output_files[long_var1] != 0; long_var1 = long_var1 + 1) {\n      }\n      free_memory((void *)long_pointer3[long_var3]);\n      new_file_paths = (long *)FUN_00103449(long_pointer3,(long_var1 + 1 + (long)num_files) * 8);\n      memmove(new_file_paths + long_var3 + long_var1,new_file_paths + long_var3 + 1,(long)(num_files - index) << 3);\n      num_files = num_files + -1 + (int)long_var1;\n      memcpy(new_file_paths + long_var3,output_files,long_var1 * 8);\n      free_memory(output_files);\n      free_memory(buffer);\n      index = index + -1;\n    }\n    else {\n      free_memory(buffer);\n    }\n  }\n  fclose(file_pointer);\n  goto LAB_00103c54;\ncode_r0x00104718:\n  byte_ptr2 = byte_ptr2 + 1;\n  goto LAB_001046fc;\n}\n\n",
            "current_name": "analyze_binary_00103bf0",
            "entrypoint": "0x00103bf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103bf0": "analyze_binary_00103bf0",
                "__addr": "addr",
                "__errno_location": "get_errno_location",
                "__ptr": "pointer",
                "__s": "buffer",
                "_optarg": "opt_argument",
                "_optind": "opt_index",
                "bVar2": "byte_var",
                "bVar4": "bool_var1",
                "bVar5": "bool_var2",
                "bVar6": "bool_var3",
                "bVar7": "bool_var4",
                "bindtextdomain": "bind_translation_domain",
                "cVar1": "current_char",
                "dcgettext": "get_translation",
                "error": "print_error",
                "exit": "exit_program",
                "fclose": "close_file",
                "ferror": "check_file_error",
                "fileno": "get_file_number",
                "fopen": "open_file",
                "fprintf": "print_formatted_error",
                "fread": "read_file",
                "free": "free_memory",
                "fseek": "set_file_position",
                "fstat": "get_file_status2",
                "ftell": "get_file_position",
                "getopt_long": "parse_options",
                "iVar10": "status",
                "iVar31": "temp_var2",
                "iVar8": "index",
                "lVar20": "long_var1",
                "lVar23": "long_var2",
                "lVar29": "long_var3",
                "local_120": "local_var2",
                "local_138": "output_files",
                "local_c8": "local_stat",
                "local_d0": "local_byte",
                "local_d8": "local_string",
                "memcpy": "copy_memory",
                "memmove": "move_memory",
                "mmap": "map_memory",
                "munmap": "unmap_memory",
                "opt": "option",
                "optind": "param_index",
                "pFVar16": "file_pointer",
                "param_1": "num_files",
                "param_2": "file_paths",
                "pbVar22": "byte_ptr",
                "pbVar27": "byte_ptr2",
                "pcVar34": "error_message",
                "pcVar36": "temp_string2",
                "piVar19": "errno_ptr",
                "plVar11": "temp_long_pointer",
                "plVar21": "new_file_paths",
                "plVar24": "long_pointer3",
                "ppuVar32": "pointer_pointer",
                "printf": "print_string",
                "puVar37": "temp_long_pointer2",
                "rewind": "reset_file_position",
                "sVar17": "size",
                "sVar18": "size_var2",
                "setlocale": "set_locale",
                "stat": "get_file_status",
                "strcmp": "compare_strings",
                "strerror": "get_error_string",
                "strlen": "get_string_length",
                "strtoul": "convert_string_to_unsigned_long",
                "textdomain": "set_translation_domain",
                "uVar12": "ulong_var2",
                "uVar13": "ulong_var3",
                "uVar14": "ulong_var4",
                "uVar15": "ulong_var5",
                "uVar25": "return_value",
                "uVar26": "mask_value",
                "uVar28": "uint_var1",
                "uVar3": "ulong_var",
                "uVar30": "return_value",
                "uVar33": "uint_var2",
                "uVar35": "ulong_val6",
                "uVar38": "temp_ulong8",
                "uVar9": "result",
                "undefined8": "undefined_long"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104c60": {
            "additional_data": {
                "DAT_00109440": {
                    "1": "activated_feature_bitmask"
                },
                "DAT_00109444": {
                    "1": "deactivated_feature_bitmask"
                },
                "FUN_001022c0": {
                    "1": "initialize_x86_features"
                },
                "FUN_00104c60": {
                    "1": "detect_x86_feature",
                    "2": "process_x86_feature",
                    "3": "parse_x86_feature",
                    "4": "update_x86_feature",
                    "8": "identify_x86_feature"
                },
                "auVar4": {
                    "1": "output_buffer",
                    "10": "result",
                    "15": "return_value",
                    "2": "output"
                },
                "iVar1": {
                    "1": "strcmp_result",
                    "16": "strcasecmp_result",
                    "3": "cmp_result",
                    "5": "result",
                    "6": "comparison_result"
                },
                "param_1": {
                    "1": "x86_feature_name",
                    "23": "feature_name",
                    "3": "x86_feature",
                    "4": "feature"
                },
                "param_2": {
                    "1": "update_flag",
                    "2": "set_flag",
                    "3": "enable_feature",
                    "4": "is_set",
                    "7": "enable",
                    "8": "is_enabled"
                },
                "param_3": {
                    "1": "unknown_param1",
                    "2": "unused_param",
                    "3": "error_msg",
                    "7": "error_message"
                },
                "param_4": {
                    "1": "unknown_2",
                    "2": "param_4",
                    "7": "return_value",
                    "9": "result"
                },
                "strcasecmp": {
                    "2": "compare_strings"
                },
                "uVar2": {
                    "1": "bit_mask",
                    "13": "feature_value",
                    "3": "feature_bit",
                    "5": "feature_flag"
                },
                "uVar3": {
                    "1": "gettext_result",
                    "16": "error_message",
                    "2": "result",
                    "3": "error_msg"
                }
            },
            "called": [
                "FUN_001022c0",
                "strcasecmp"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nundefined  [16] identify_x86_feature_00104c60(char *feature_name,int is_enabled,undefined8 error_message,undefined8 result)\n\n{\n  int strcasecmp_result;\n  uint feature_value;\n  undefined8 error_message;\n  undefined return_value [16];\n  \n  strcasecmp_result = compare_strings(feature_name,\"ibt\");\n  feature_value = 1;\n  if (strcasecmp_result != 0) {\n    strcasecmp_result = compare_strings(feature_name,\"shstk\");\n    feature_value = 2;\n    if (strcasecmp_result != 0) {\n      strcasecmp_result = compare_strings(feature_name,\"lam_u48\");\n      if (strcasecmp_result == 0) {\n        feature_value = 4;\n      }\n      else {\n        strcasecmp_result = compare_strings(feature_name,\"lam_u57\");\n        feature_value = 8;\n        if (strcasecmp_result != 0) {\n          error_message = dcgettext(0,\"Unknown x86 feature: %s\\n\",5);\n          error(error_message,feature_name);\n          error_message = 0xffffffff;\n          goto LAB_00104ca5;\n        }\n      }\n    }\n  }\n  if (is_enabled == 0) {\n    DAT_00109440 = feature_value | DAT_00109440;\n    DAT_00109444 = ~feature_value & DAT_00109444;\n  }\n  else {\n    DAT_00109444 = feature_value | DAT_00109444;\n    DAT_00109440 = DAT_00109440 & ~feature_value;\n  }\n  error_message = 0;\nLAB_00104ca5:\n  return_value._8_8_ = result;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "current_name": "identify_x86_feature_00104c60",
            "entrypoint": "0x00104c60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104c60": "identify_x86_feature_00104c60",
                "auVar4": "return_value",
                "iVar1": "strcasecmp_result",
                "param_1": "feature_name",
                "param_2": "is_enabled",
                "param_3": "error_message",
                "param_4": "result",
                "strcasecmp": "compare_strings",
                "uVar2": "feature_value",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104ce0": {
            "additional_data": {
                "FUN_00104ce0": {
                    "1": "find_osabi_from_param",
                    "19": "find_osabi",
                    "3": "find_osabi_index"
                },
                "auVar6": {
                    "1": "output",
                    "18": "result",
                    "8": "return_value"
                },
                "iVar1": {
                    "1": "string_comparison_result",
                    "2": "result",
                    "28": "comparison_result"
                },
                "param_1": {
                    "1": "input_string",
                    "11": "osabi_name",
                    "2": "os_name",
                    "3": "target_osabi",
                    "7": "osabi"
                },
                "param_2": {
                    "1": "unknown1",
                    "17": "param_2",
                    "5": "param2"
                },
                "param_3": {
                    "1": "unknown_2",
                    "17": "param_3",
                    "5": "param3"
                },
                "param_4": {
                    "1": "error_msg",
                    "10": "param_4",
                    "2": "output_param",
                    "3": "error_message",
                    "4": "arg4"
                },
                "puVar5": {
                    "1": "array_ptr",
                    "3": "osabi_list",
                    "6": "osabi_array",
                    "8": "data_ptr"
                },
                "uVar2": {
                    "1": "translated_error_msg",
                    "2": "translation",
                    "21": "error_message",
                    "3": "message"
                },
                "uVar3": {
                    "1": "index_of_osabi",
                    "2": "osabi_index",
                    "28": "index"
                },
                "uVar4": {
                    "1": "counter",
                    "18": "next_index",
                    "2": "temp_index",
                    "3": "index_plus_one",
                    "4": "u_var4"
                }
            },
            "called": [
                "FUN_00102323",
                "strcasecmp"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nundefined  [16] find_osabi_00104ce0(char *osabi_name,undefined8 param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  int comparison_result;\n  undefined8 error_message;\n  ulong index;\n  uint next_index;\n  undefined4 *data_ptr;\n  undefined result [16];\n  \n  data_ptr = &DAT_00108ca0;\n  index = 0;\n  do {\n    comparison_result = strcasecmp(osabi_name,*(char **)(data_ptr + 2));\n    if (comparison_result == 0) {\n      index = (ulong)(uint)(&DAT_00108ca0)[index * 4];\n      goto LAB_00104d20;\n    }\n    next_index = (int)index + 1;\n    index = (ulong)next_index;\n    data_ptr = data_ptr + 4;\n  } while (next_index != 0x10);\n  error_message = dcgettext(0,\"Unknown OSABI: %s\\n\",5);\n  error(error_message,osabi_name);\n  index = 0xffffffff;\nLAB_00104d20:\n  result._8_8_ = param_4;\n  result._0_8_ = index;\n  return result;\n}\n\n",
            "current_name": "find_osabi_00104ce0",
            "entrypoint": "0x00104ce0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104ce0": "find_osabi_00104ce0",
                "auVar6": "result",
                "iVar1": "comparison_result",
                "param_1": "osabi_name",
                "puVar5": "data_ptr",
                "uVar2": "error_message",
                "uVar3": "index",
                "uVar4": "next_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104d30": {
            "additional_data": {
                "FUN_00104d30": {
                    "31": "get_machine_type"
                },
                "iVar1": {
                    "1": "result_code",
                    "30": "result"
                },
                "iVar2": {
                    "1": "strcmp_result",
                    "17": "comparison_result",
                    "2": "compare_result",
                    "3": "comp_result",
                    "5": "cmp_result"
                },
                "param_1": {
                    "1": "machine",
                    "29": "machine_type"
                },
                "uVar3": {
                    "2": "error_text",
                    "20": "error_message",
                    "5": "error_msg"
                }
            },
            "called": [
                "FUN_0010234b",
                "strcasecmp"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nint get_machine_type_00104d30(char *machine_type)\n\n{\n  int result;\n  int comparison_result;\n  undefined8 error_message;\n  \n  result = strcasecmp(machine_type,\"i386\");\n  if (result == 0) {\n    result = 3;\n  }\n  else {\n    result = strcasecmp(machine_type,\"iamcu\");\n    if (result == 0) {\n      return 6;\n    }\n    comparison_result = strcasecmp(machine_type,\"l1om\");\n    result = 0xb4;\n    if (comparison_result != 0) {\n      result = strcasecmp(machine_type,\"k1om\");\n      if (result == 0) {\n        return 0xb5;\n      }\n      result = strcasecmp(machine_type,\"x86_64\");\n      if (result == 0) {\n        result = 0x3e;\n      }\n      else {\n        result = strcasecmp(machine_type,\"x86-64\");\n        if (result == 0) {\n          result = 0x3e;\n        }\n        else {\n          result = strcasecmp(machine_type,\"none\");\n          if (result != 0) {\n            error_message = dcgettext(0,\"Unknown machine type: %s\\n\",5);\n            error(error_message,machine_type);\n            result = -1;\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "get_machine_type_00104d30",
            "entrypoint": "0x00104d30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104d30": "get_machine_type_00104d30",
                "iVar1": "result",
                "iVar2": "comparison_result",
                "param_1": "machine_type",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104da0": {
            "additional_data": {
                "FUN_00104da0": {
                    "1": "get_element_type",
                    "15": "get_file_type",
                    "3": "get_type_from_param",
                    "8": "get_type"
                },
                "dcgettext": {
                    "1": "get_message"
                },
                "iVar1": {
                    "1": "comparison_result",
                    "2": "type_code",
                    "23": "result",
                    "4": "type"
                },
                "iVar2": {
                    "1": "strcmp_result",
                    "15": "comparison_result",
                    "3": "cmp_result",
                    "5": "compare_result"
                },
                "param_1": {
                    "1": "type_str",
                    "14": "file_type",
                    "2": "param",
                    "4": "type_string",
                    "6": "type"
                },
                "strcasecmp": {
                    "1": "compare_ignore_case"
                },
                "uVar3": {
                    "1": "unknown_type_message",
                    "2": "error_msg",
                    "24": "error_message"
                }
            },
            "called": [
                "dcgettext",
                "strcasecmp",
                "FUN_001023ce",
                "error"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nint get_file_type_00104da0(char *file_type)\n\n{\n  int result;\n  int comparison_result;\n  undefined8 error_message;\n  \n  result = strcasecmp(file_type,\"rel\");\n  if (result == 0) {\n    result = 1;\n  }\n  else {\n    comparison_result = strcasecmp(file_type,\"exec\");\n    result = 2;\n    if (comparison_result != 0) {\n      result = strcasecmp(file_type,\"dyn\");\n      if (result == 0) {\n        result = 3;\n      }\n      else {\n        result = strcasecmp(file_type,\"none\");\n        if (result != 0) {\n          error_message = dcgettext(0,\"Unknown type: %s\\n\",5);\n          error(error_message,file_type);\n          result = -1;\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "get_file_type_00104da0",
            "entrypoint": "0x00104da0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104da0": "get_file_type_00104da0",
                "dcgettext": "get_message",
                "iVar1": "result",
                "iVar2": "comparison_result",
                "param_1": "file_type",
                "strcasecmp": "compare_ignore_case",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104de0": {
            "additional_data": {
                "&DAT_00109350": {
                    "1": "buffer23"
                },
                "&DAT_00109352": {
                    "1": "buffer24"
                },
                "&DAT_00109354": {
                    "1": "buffer25"
                },
                "&DAT_00109358": {
                    "1": "buffer26"
                },
                "&DAT_00109360": {
                    "1": "buffer27"
                },
                "&DAT_00109368": {
                    "1": "buffer28"
                },
                "&DAT_00109370": {
                    "1": "buffer29"
                },
                "&DAT_00109374": {
                    "1": "buffer30"
                },
                "&DAT_00109376": {
                    "1": "buffer31"
                },
                "&DAT_00109378": {
                    "1": "buffer32"
                },
                "&DAT_0010937a": {
                    "1": "buffer33"
                },
                "&DAT_0010937c": {
                    "1": "buffer34"
                },
                "&DAT_0010937e": {
                    "1": "buffer35"
                },
                "&DAT_00109390": {
                    "1": "buffer2"
                },
                "&DAT_00109392": {
                    "1": "buffer3"
                },
                "&DAT_00109394": {
                    "1": "buffer4"
                },
                "&DAT_00109398": {
                    "1": "buffer5"
                },
                "&DAT_0010939c": {
                    "1": "buffer6"
                },
                "&DAT_001093a0": {
                    "1": "buffer7"
                },
                "&DAT_001093a4": {
                    "1": "buffer8"
                },
                "&DAT_001093a8": {
                    "1": "buffer9"
                },
                "&DAT_001093aa": {
                    "1": "buffer10"
                },
                "&DAT_001093ac": {
                    "1": "buffer11"
                },
                "&DAT_001093ae": {
                    "1": "buffer12"
                },
                "&DAT_001093b0": {
                    "1": "buffer13"
                },
                "&DAT_001093b2": {
                    "1": "buffer14"
                },
                "&DAT_001093e0": {
                    "1": "buffer1"
                },
                "(char)_DAT_001093e4": {
                    "1": "flag2"
                },
                "DAT_00109350": {
                    "1": "data1"
                },
                "DAT_00109352": {
                    "1": "data2"
                },
                "DAT_00109354": {
                    "1": "data3"
                },
                "DAT_00109358": {
                    "1": "data4"
                },
                "DAT_00109360": {
                    "1": "data5"
                },
                "DAT_00109368": {
                    "1": "data6"
                },
                "DAT_00109370": {
                    "1": "data7"
                },
                "DAT_00109374": {
                    "1": "data8"
                },
                "DAT_00109376": {
                    "1": "data9"
                },
                "DAT_00109378": {
                    "1": "data10"
                },
                "DAT_0010937a": {
                    "1": "data11"
                },
                "DAT_0010937c": {
                    "1": "data12"
                },
                "DAT_0010937e": {
                    "1": "data13"
                },
                "DAT_00109380": {
                    "1": "elf_header_ptr"
                },
                "DAT_00109388": {
                    "1": "elf_version"
                },
                "DAT_00109390": {
                    "1": "elf32_phdr"
                },
                "DAT_00109392": {
                    "1": "buffer2"
                },
                "DAT_00109394": {
                    "1": "flags"
                },
                "DAT_00109398": {
                    "1": "data4"
                },
                "DAT_0010939c": {
                    "1": "buffer_5"
                },
                "DAT_001093a0": {
                    "1": "data6"
                },
                "DAT_001093a4": {
                    "1": "data7"
                },
                "DAT_001093a8": {
                    "1": "data8"
                },
                "DAT_001093aa": {
                    "1": "elf32_sym_table_offset"
                },
                "DAT_001093ac": {
                    "1": "buffer10"
                },
                "DAT_001093ae": {
                    "1": "section_header_string_table_offset"
                },
                "DAT_001093b0": {
                    "1": "string_table_section_index"
                },
                "DAT_001093b2": {
                    "1": "buffer13"
                },
                "DAT_001093b8": {
                    "1": "handle32_bit_header",
                    "2": "function_ptr1"
                },
                "DAT_001093c0": {
                    "1": "handle64_bit_header",
                    "2": "function_ptr2"
                },
                "DAT_001093c4": {
                    "1": "handle32_bit_header"
                },
                "DAT_001093e0": {
                    "1": "header",
                    "2": "elf_header"
                },
                "DAT_001093e4": {
                    "1": "elf_type"
                },
                "DAT_001093e5": {
                    "1": "magic_value_1",
                    "2": "elf_class"
                },
                "DAT_001093e8": {
                    "1": "ident_size"
                },
                "DAT_001093f0": {
                    "1": "elf64_start_address"
                },
                "DAT_001093f8": {
                    "1": "elf64_section_header_offset"
                },
                "DAT_00109400": {
                    "1": "elf64_section_header_size"
                },
                "DAT_00109408": {
                    "1": "elf64_section_count"
                },
                "DAT_00109410": {
                    "1": "elf64_string_table_offset"
                },
                "DAT_00109418": {
                    "1": "e_type"
                },
                "DAT_0010941a": {
                    "1": "elf64_sym_table_offset"
                },
                "DAT_00109424": {
                    "1": "elf64_sym_table_size"
                },
                "DAT_00109428": {
                    "1": "elf64_rel_table_offset"
                },
                "DAT_0010942c": {
                    "1": "elf64_rel_table_size"
                },
                "D_00109380": {
                    "1": "buffer19"
                },
                "D_00109418": {
                    "1": "buffer17"
                },
                "D_0010941a": {
                    "1": "buffer18"
                },
                "FILE": {
                    "1": "file"
                },
                "FUC_00102434": {
                    "1": "handle_unknown_error"
                },
                "FUC_0010347f": {
                    "1": "reverse_func_2"
                },
                "FUN_001024ec": {
                    "1": "get_error_message"
                },
                "FUN_00102558": {
                    "1": "handle_error",
                    "2": "handle_read_error"
                },
                "FUN_0010347f": {
                    "1": "process_data"
                },
                "FUN_0010354e": {
                    "1": "reverse_func_1",
                    "2": "function1"
                },
                "FUN_00103a90": {
                    "1": "function4"
                },
                "FUN_00103ad0": {
                    "1": "reverse_func_3"
                },
                "FUN_00104de0": {
                    "1": "extract_elf_header",
                    "2": "check_elf_header",
                    "3": "process_elf_header",
                    "7": "read_elf_header",
                    "9": "parse_elf_header"
                },
                "_DAT_00109340": {
                    "1": "buffer36"
                },
                "_DAT_00109348": {
                    "1": "original_elf_ident_size_2"
                },
                "_DAT_00109380": {
                    "1": "original_file_magic"
                },
                "_DAT_00109388": {
                    "1": "magic2"
                },
                "_DAT_001093e0": {
                    "1": "elf_magic",
                    "2": "magic_number"
                },
                "_DAT_001093e4": {
                    "1": "class_type"
                },
                "_DAT_001093e8": {
                    "1": "magic3"
                },
                "_DAT_001093f0": {
                    "1": "e_ident+24"
                },
                "_DAT_00109400": {
                    "1": "elf_version_number"
                },
                "_DAT_00109408": {
                    "1": "buffer16"
                },
                "_DAT_00109410": {
                    "1": "program_header_offset_in_section"
                },
                "_DAT_0010941c": {
                    "1": "e_phentsize"
                },
                "_DAT_00109420": {
                    "1": "e_phnum"
                },
                "_DAT_00109428": {
                    "1": "e_ident+54"
                },
                "_DAT_0010942c": {
                    "1": "e_shnum"
                },
                "_DAT_00109430": {
                    "1": "e_shstrndx"
                },
                "__n": {
                    "1": "count"
                },
                "__off": {
                    "1": "last_position",
                    "11": "offset",
                    "2": "current_position",
                    "5": "current_offset"
                },
                "__ptr": {
                    "1": "ptr"
                },
                "__s": {
                    "1": "stream"
                },
                "__size": {
                    "1": "size"
                },
                "__stream": {
                    "1": "stream"
                },
                "__whence": {
                    "1": "position"
                },
                "abort": {
                    "1": "abort",
                    "2": "abort_execution"
                },
                "dcgettext": {
                    "1": "get_error_text"
                },
                "fread": {
                    "2": "read_from_file"
                },
                "fseek": {
                    "1": "seek_in_file"
                },
                "ftell": {
                    "1": "get_current_file_offset"
                },
                "fwrite": {
                    "3": "write_to_file"
                },
                "iVar1": {
                    "1": "seek_error",
                    "3": "file_seek_result",
                    "6": "result",
                    "8": "status"
                },
                "param_1": {
                    "1": "param_file",
                    "2": "param1",
                    "5": "param_1",
                    "9": "param"
                },
                "param_2": {
                    "1": "file_pointer",
                    "15": "file",
                    "2": "param_file",
                    "3": "param_2"
                },
                "pcVar4": {
                    "1": "error_format",
                    "21": "error_message",
                    "3": "error_string"
                },
                "sVar2": {
                    "1": "read_count",
                    "12": "read_result",
                    "2": "result",
                    "3": "bytes_read",
                    "7": "read_size"
                },
                "size_t": {
                    "1": "size"
                },
                "uRam0000000000109344": {
                    "1": "magic4"
                },
                "uRam000000000010934c": {
                    "1": "buffer39"
                },
                "uRam0000000000109384": {
                    "1": "original_magic_value_2"
                },
                "uRam000000000010938c": {
                    "1": "original_magic_value_4"
                },
                "uRam00000000001093ec": {
                    "1": "header_byte3"
                },
                "uVar3": {
                    "1": "error",
                    "21": "return_value",
                    "4": "result"
                },
                "uVar5": {
                    "1": "var_5",
                    "2": "value1",
                    "3": "temp_var1",
                    "4": "var1"
                },
                "uVar6": {
                    "1": "output_machine",
                    "2": "u_var6",
                    "4": "var2"
                }
            },
            "called": [
                "fwrite",
                "dcgettext",
                "FUN_001024ec",
                "FUN_0010354e",
                "FUN_0010347f",
                "fseek",
                "FUN_00103ad0",
                "fread",
                "FUN_00102434",
                "FUN_00103a90",
                "error",
                "FUN_00102558",
                "abort",
                "ftell"
            ],
            "calling": [
                "FUN_00103bf0",
                "FUN_0010358d"
            ],
            "code": "\n\n\nundefined8 parse_elf_header_00104de0(undefined8 param,file *file)\n\n{\n  int status;\n  long offset;\n  size read_result;\n  undefined8 return_value;\n  char *error_message;\n  uint var5;\n  uint var6;\n  \n  offset = ftell(file);\n  read_result = fread(&DAT_001093e0,0x10,1,file);\n  if ((read_result == 1) && (_DAT_001093e0 == 0x464c457f)) {\n    DAT_001093b8 = FUN_0010354e;\n    if (DAT_001093e5 != '\\x02') {\n      DAT_001093b8 = FUN_00103ad0;\n    }\n    DAT_001093c0 = FUN_0010347f;\n    if (DAT_001093e5 != '\\x02') {\n      DAT_001093c0 = FUN_00103a90;\n    }\n    if ((char)_DAT_001093e4 == '\\x01') {\n      read_result = fread(&DAT_00109390,0x24,1,file);\n      if (read_result != 1) goto code_r0x00102558;\n      DAT_00109418 = (*DAT_001093c0)(&DAT_00109390,2);\n      DAT_0010941a = (*DAT_001093c0)(&DAT_00109392,2);\n      _DAT_00109408 = (*DAT_001093c0)(&DAT_00109394,4);\n      _DAT_001093f0 = (*DAT_001093c0)(&DAT_00109398,4);\n      DAT_001093f8 = (*DAT_001093c0)(&DAT_0010939c,4);\n      _DAT_00109400 = (*DAT_001093c0)(&DAT_001093a0,4);\n      _DAT_00109410 = (*DAT_001093c0)(&DAT_001093a4,4);\n      _DAT_0010941c = (*DAT_001093c0)(&DAT_001093a8,2);\n      _DAT_00109420 = (*DAT_001093c0)(&DAT_001093aa,2);\n      DAT_00109424 = (*DAT_001093c0)(&DAT_001093ac,2);\n      _DAT_00109428 = (*DAT_001093c0)(&DAT_001093ae,2);\n      _DAT_0010942c = (*DAT_001093c0)(&DAT_001093b0,2);\n      _DAT_00109430 = (*DAT_001093c0)(&DAT_001093b2,2);\n      _DAT_00109380 = _DAT_001093e0;\n      original_elf_version = _DAT_001093e4;\n      _DAT_00109388 = _DAT_001093e8;\n      original_endian_type = header_byte3;\n    }\n    else {\n      if ((char)_DAT_001093e4 != '\\x02') {\n        return_value = FUN_00102558();\n        return return_value;\n      }\n      read_result = fread(&DAT_00109350,0x30,1,file);\n      if (read_result != 1) goto code_r0x00102558;\n      DAT_00109418 = (*DAT_001093c0)(&DAT_00109350,2);\n      DAT_0010941a = (*DAT_001093c0)(&DAT_00109352,2);\n      _DAT_00109408 = (*DAT_001093c0)(&DAT_00109354,4);\n      _DAT_001093f0 = (*DAT_001093c0)(&DAT_00109358,8);\n      DAT_001093f8 = (*DAT_001093c0)(&DAT_00109360,8);\n      _DAT_00109400 = (*DAT_001093c0)(&DAT_00109368,8);\n      _DAT_00109410 = (*DAT_001093c0)(&DAT_00109370,4);\n      _DAT_0010941c = (*DAT_001093c0)(&DAT_00109374,2);\n      _DAT_00109420 = (*DAT_001093c0)(&DAT_00109376,2);\n      DAT_00109424 = (*DAT_001093c0)(&DAT_00109378,2);\n      _DAT_00109428 = (*DAT_001093c0)(&DAT_0010937a,2);\n      _DAT_0010942c = (*DAT_001093c0)(&DAT_0010937c,2);\n      _DAT_00109430 = (*DAT_001093c0)(&DAT_0010937e,2);\n      _DAT_00109340 = _DAT_001093e0;\n      original_elf_version_2 = _DAT_001093e4;\n      _DAT_00109348 = _DAT_001093e8;\n      buffer39 = header_byte3;\n    }\n    status = fseek(file,offset,0);\n    if (status != 0) {\n      return_value = dcgettext(0,\"%s: Failed to seek to ELF header\\n\",5);\n      error(return_value,param);\n    }\n    var5 = _DAT_001093e4 >> 0x10 & 0xff;\n    if ((char)var5 == '\\x01') {\n      var5 = (uint)DAT_0010941a;\n      if (var5 == DAT_0010916c) {\n        return 0;\n      }\n      var6 = _DAT_001093e4 & 0xff;\n      if (DAT_00109170 == 0xffffffff) {\n        if (DAT_0010941a == 6) {\n          DAT_00109170 = 1;\n        }\n        else if (DAT_0010941a < 7) {\n          DAT_00109170 = (DAT_0010941a != 3) + 1 + (uint)(DAT_0010941a != 3);\n        }\n        else {\n          DAT_00109170 = 3 - ((ushort)(DAT_0010941a - 0xb4) < 2);\n        }\n      }\n      if ((var6 == DAT_00109170) || (DAT_00109170 == 3)) {\n        if ((var6 == DAT_00109168) || (DAT_00109168 == 3)) {\n          if ((var5 == DAT_00109174) || (DAT_00109174 == 0xffffffff)) {\n            var5 = (uint)DAT_00109418;\n            if ((DAT_00109164 == 0xffffffff) || (var5 == DAT_00109164)) {\n              var5 = _DAT_001093e4 >> 0x18;\n              if ((DAT_0010915c == 0xffffffff) || (var5 == DAT_0010915c)) {\n                var5 = _DAT_001093e8 & 0xff;\n                if ((var5 == DAT_00109154) || (DAT_00109154 == 0xffffffff)) {\n                  if ((char)var6 == '\\x01') {\n                    if (DAT_0010916c != 0xffffffff) {\n                      (*DAT_001093b8)(&DAT_00109392,(long)(int)DAT_0010916c,2);\n                    }\n                    if (DAT_00109160 != -1) {\n                      (*DAT_001093b8)(&DAT_00109390,(long)DAT_00109160,2);\n                    }\n                    if (DAT_00109158 != -1) {\n                      original_elf_version =\n                           CONCAT13((char)DAT_00109158,(undefined3)original_elf_version);\n                    }\n                    if (DAT_00109150 != -1) {\n                      _DAT_00109388 = CONCAT31(DAT_00109388_1,(char)DAT_00109150);\n                    }\n                    read_result = fwrite(&DAT_00109380,0x34,1,file);\n                    if (read_result == 1) {\n                      return 0;\n                    }\n                    return_value = FUN_001024ec();\n                    return return_value;\n                  }\n                  if ((char)var6 != '\\x02') {\n                    \n                    abort_execution();\n                  }\n                  if (DAT_0010916c != 0xffffffff) {\n                    (*DAT_001093b8)(&DAT_00109352,(long)(int)DAT_0010916c,2);\n                  }\n                  if (DAT_00109160 != -1) {\n                    (*DAT_001093b8)(&DAT_00109350,(long)DAT_00109160,2);\n                  }\n                  if (DAT_00109158 != -1) {\n                    original_elf_version_2 =\n                         CONCAT13((char)DAT_00109158,(undefined3)original_elf_version_2);\n                  }\n                  if (DAT_00109150 != -1) {\n                    _DAT_00109348 = CONCAT31(DAT_00109348_1,(char)DAT_00109150);\n                  }\n                  read_result = fwrite(&DAT_00109340,0x40,1,file);\n                  if (read_result == 1) {\n                    return 0;\n                  }\n                  return_value = FUN_001024ec();\n                  return return_value;\n                }\n                error_message = \"%s: Unmatched EI_ABIVERSION: %d is not %d\\n\";\n                var6 = DAT_00109154;\n              }\n              else {\n                error_message = \"%s: Unmatched EI_OSABI: %d is not %d\\n\";\n                var6 = DAT_0010915c;\n              }\n            }\n            else {\n              error_message = \"%s: Unmatched e_type: %d is not %d\\n\";\n              var6 = DAT_00109164;\n            }\n          }\n          else {\n            error_message = \"%s: Unmatched e_machine: %d is not %d\\n\";\n            var6 = DAT_00109174;\n          }\n          return_value = dcgettext(0,error_message,5);\n          error(return_value,param,var5,var6);\n          return 1;\n        }\n        error_message = \"%s: Unmatched output EI_CLASS: %d is not %d\\n\";\n        var5 = DAT_00109168;\n      }\n      else {\n        error_message = \"%s: Unmatched input EI_CLASS: %d is not %d\\n\";\n        var5 = DAT_00109170;\n      }\n      return_value = dcgettext(0,error_message,5);\n      error(return_value,param,var6,var5);\n    }\n    else {\n      return_value = dcgettext(0,\"%s: Unsupported EI_VERSION: %d is not %d\\n\",5);\n      error(return_value,param,var5,1);\n    }\n  }\n  else {\ncode_r0x00102558:\n    return_value = dcgettext(0,\"%s: Failed to read ELF header\\n\",5);\n    error(return_value,param);\n  }\n  return 1;\n}\n\n",
            "current_name": "parse_elf_header_00104de0",
            "entrypoint": "0x00104de0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FILE": "file",
                "FUN_00104de0": "parse_elf_header_00104de0",
                "__off": "offset",
                "abort": "abort_execution",
                "dcgettext": "get_locale_text",
                "fread": "read_from_file",
                "fseek": "seek_in_file",
                "ftell": "get_current_file_offset",
                "fwrite": "write_to_file",
                "iVar1": "status",
                "param_1": "param",
                "param_2": "file",
                "pcVar4": "error_message",
                "sVar2": "read_result",
                "size_t": "size",
                "uRam0000000000109344": "original_elf_version_2",
                "uRam000000000010934c": "buffer39",
                "uRam0000000000109384": "original_elf_version",
                "uRam000000000010938c": "original_endian_type",
                "uRam00000000001093ec": "header_byte3",
                "uVar3": "return_value",
                "uVar5": "var5",
                "uVar6": "var6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105370": {
            "additional_data": {
                "FUN_00105370": {
                    "1": "parse_and_copy_file_path",
                    "10": "extract_file_name",
                    "2": "extract_file_path"
                },
                "__size": {
                    "1": "filename_size",
                    "2": "malloc_size",
                    "3": "buffer_size",
                    "4": "size",
                    "5": "allocated_size"
                },
                "bVar9": {
                    "1": "is_byte",
                    "2": "found_slash",
                    "3": "increment",
                    "4": "flag",
                    "7": "is_negative"
                },
                "cVar2": {
                    "20": "current_char"
                },
                "dcgettext": {
                    "1": "error_message"
                },
                "error": {
                    "1": "print_error_message"
                },
                "extraout_RDX": {
                    "1": "filename_length",
                    "3": "file_name_size",
                    "6": "file_name_length"
                },
                "lVar1": {
                    "1": "diff_length",
                    "2": "final_size",
                    "8": "total_size"
                },
                "malloc": {
                    "1": "allocate_memory"
                },
                "param_1": {
                    "1": "original_path",
                    "2": "original_file_path",
                    "3": "path",
                    "4": "input_path",
                    "7": "input_string",
                    "9": "file_path"
                },
                "param_2": {
                    "1": "output_file_name",
                    "3": "delimiter",
                    "5": "filename",
                    "9": "file_name"
                },
                "pcVar4": {
                    "1": "temp_buffer",
                    "14": "last_slash",
                    "2": "last_forward_slash"
                },
                "pcVar5": {
                    "1": "input_length",
                    "2": "default_path",
                    "3": "file_name_length"
                },
                "pcVar6": {
                    "1": "new_file_name_pointer",
                    "2": "allocated_file_name",
                    "3": "current_char",
                    "4": "new_path"
                },
                "uVar3": {
                    "1": "translation",
                    "13": "error_message",
                    "2": "error_msg",
                    "8": "error_string"
                },
                "uVar7": {
                    "1": "temp",
                    "2": "file_name_length",
                    "3": "length",
                    "4": "remaining_length",
                    "5": "remaining_size"
                },
                "uVar8": {
                    "1": "input_length",
                    "2": "file_name_length"
                }
            },
            "called": [
                "FUN_00102cbc",
                "malloc"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_00103006",
                "FUN_00103160",
                "FUN_00103186"
            ],
            "code": "\nchar * extract_file_name_00105370(char *file_path,char *file_name)\n\n{\n  ulong allocated_size;\n  long total_size;\n  char current_char;\n  undefined8 error_message;\n  char *last_slash;\n  char *file_name_length;\n  char *new_path;\n  ulong remaining_size;\n  ulong file_name_length;\n  ulong file_name_length;\n  byte is_negative;\n  \n  is_negative = 0;\n  file_name_length = (char *)0x1;\n  if (file_path != (char *)0x0) {\n    file_name_length = file_path;\n  }\n  new_path = (char *)malloc((size_t)file_name_length);\n  if (new_path != (char *)0x0) {\n    return new_path;\n  }\n  FUN_00102fc7();\n  new_path = file_name_length;\n  last_slash = file_name_length;\n  while (current_char = *new_path, current_char != '\\0') {\n    new_path = new_path + 1;\n    if (current_char == '/') {\n      last_slash = new_path;\n    }\n  }\n  if ((*file_name == '/') || (file_name_length == last_slash)) {\n    if (file_name_length + 1 == 0) {\n      return (char *)0x0;\n    }\n    new_path = (char *)malloc(file_name_length + 1);\n    remaining_size = file_name_length;\n    file_name_length = new_path;\n    if (new_path != (char *)0x0) {\n      for (; remaining_size != 0; remaining_size = remaining_size - 1) {\n        *file_name_length = *file_name;\n        file_name = file_name + (ulong)is_negative * -2 + 1;\n        file_name_length = file_name_length + (ulong)is_negative * -2 + 1;\n      }\n      new_path[file_name_length] = '\\0';\n      return new_path;\n    }\n  }\n  else {\n    file_name_length = (long)last_slash - (long)file_name_length;\n    total_size = file_name_length + file_name_length;\n    remaining_size = file_name_length;\n    if (file_name_length <= file_name_length) {\n      remaining_size = file_name_length;\n    }\n    allocated_size = total_size + 1;\n    if (allocated_size < remaining_size) {\n      error_message = dcgettext(0,\"Abnormal length of thin archive member name: %lx\\n\",5);\n      display_error(error_message,file_name_length);\n      return (char *)0x0;\n    }\n    last_slash = (char *)malloc(allocated_size);\n    new_path = last_slash;\n    if (last_slash != (char *)0x0) {\n      for (; remaining_size = file_name_length, file_name_length != 0; file_name_length = file_name_length - 1) {\n        *new_path = *file_name_length;\n        file_name_length = file_name_length + (ulong)is_negative * -2 + 1;\n        new_path = new_path + (ulong)is_negative * -2 + 1;\n      }\n      for (; remaining_size != 0; remaining_size = remaining_size - 1) {\n        *new_path = *file_name;\n        file_name = file_name + (ulong)is_negative * -2 + 1;\n        new_path = new_path + (ulong)is_negative * -2 + 1;\n      }\n      last_slash[total_size] = '\\0';\n      return last_slash;\n    }\n  }\n  error_message = dcgettext(0,\"Out of memory\\n\",5);\n  display_error(error_message);\n  return (char *)0x0;\n}\n\n",
            "current_name": "extract_file_name_00105370",
            "entrypoint": "0x00105370",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105370": "extract_file_name_00105370",
                "__size": "allocated_size",
                "bVar9": "is_negative",
                "cVar2": "current_char",
                "dcgettext": "get_translation",
                "error": "display_error",
                "extraout_RDX": "file_name_length",
                "lVar1": "total_size",
                "malloc": "allocate_memory",
                "param_1": "file_path",
                "param_2": "file_name",
                "pcVar4": "last_slash",
                "pcVar5": "file_name_length",
                "pcVar6": "new_path",
                "uVar3": "error_message",
                "uVar7": "remaining_size",
                "uVar8": "file_name_length"
            },
            "skipped": false,
            "tags": []
        },
        "_DT_FINI": {
            "called": [],
            "calling": [],
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "current_name": "_DT_FINI",
            "entrypoint": "0x00105394",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_DT_INIT": {
            "called": [
                "__gmon_start__"
            ],
            "calling": [],
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "current_name": "_DT_INIT",
            "entrypoint": "0x00102000",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_FINI_0": {
            "called": [
                "__cxa_finalize",
                "FUN_00103b30"
            ],
            "calling": [],
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_00109320 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00109148);\n  FUNC_00103b30();\n  DAT_00109320 = 1;\n  return;\n}\n\n",
            "current_name": "_FINI_0",
            "entrypoint": "0x00103ba0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_INIT_0": {
            "called": [
                "FUN_00103b60"
            ],
            "calling": [],
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00103b60();\n  return;\n}\n\n",
            "current_name": "_INIT_0",
            "entrypoint": "0x00103be0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__cxa_finalize": {
            "called": [
                "__cxa_finalize"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "current_name": "__cxa_finalize",
            "entrypoint": "0x001022b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__errno_location": {
            "called": [
                "__errno_location"
            ],
            "calling": [
                "FUN_00103bf0",
                "FUN_001024ec"
            ],
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "current_name": "__errno_location",
            "entrypoint": "0x00102060",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "abort": {
            "called": [
                "abort"
            ],
            "calling": [
                "caseD_0",
                "FUN_00102c98",
                "FUN_0010354e",
                "FUN_0010347f",
                "FUN_00104de0"
            ],
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "current_name": "abort",
            "entrypoint": "0x00102050",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bindtextdomain": {
            "called": [
                "bindtextdomain"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "current_name": "bindtextdomain",
            "entrypoint": "0x001020c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "caseD_0": {
            "called": [
                "dcgettext",
                "abort",
                "error"
            ],
            "calling": [
                "FUN_00103a90"
            ],
            "code": "\nvoid switchD_00103aac::caseD_0(void)\n\n{\n  undefined8 uVar1;\n  undefined4 unaff_EBX;\n  \n  uVar1 = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n  error(uVar1,unaff_EBX);\n                    \n  abort();\n}\n\n",
            "current_name": "caseD_0",
            "entrypoint": "0x0010289a",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "caseD_3": {
            "called": [
                "FUN_00103ab3"
            ],
            "calling": [
                "FUN_00103a90"
            ],
            "code": "\nvoid switchD_00103aac::caseD_3(long param_1,undefined8 param_2)\n\n{\n  FUNC_00103ab3(param_1,param_2,\n               (ulong)*(byte *)(param_1 + 1) << 8 | (ulong)*(byte *)(param_1 + 2) << 0x10);\n  return;\n}\n\n",
            "current_name": "caseD_3",
            "entrypoint": "0x00102825",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "dcgettext": {
            "called": [
                "dcgettext"
            ],
            "calling": [
                "FUN_001032de",
                "FUN_001022c0",
                "FUN_001029a5",
                "FUN_00103bf0",
                "caseD_0",
                "warn",
                "FUN_001024ec",
                "FUN_0010354e",
                "FUN_0010347f",
                "FUN_00104da0",
                "FUN_00102434",
                "error",
                "FUN_0010234b",
                "FUN_00102323",
                "FUN_00102558",
                "FUN_0010358d",
                "FUN_001028be",
                "FUN_00102cc4",
                "FUN_00102c98",
                "FUN_001025ab",
                "FUN_00104de0"
            ],
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "current_name": "dcgettext",
            "entrypoint": "0x001020d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "entry": {
            "called": [
                "__libc_start_main",
                "FUN_00103bf0"
            ],
            "calling": [],
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUN_00103bf0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x00103b00",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "error": {
            "called": [
                "fflush",
                "dcgettext",
                "vfprintf",
                "fprintf"
            ],
            "calling": [
                "FUN_001022c0",
                "FUN_001029a5",
                "FUN_00103bf0",
                "caseD_0",
                "FUN_001024ec",
                "FUN_0010354e",
                "FUN_0010347f",
                "FUN_00104da0",
                "FUN_00102434",
                "FUN_0010234b",
                "FUN_00102323",
                "FUN_00102558",
                "FUN_0010358d",
                "FUN_001028be",
                "FUN_00102cc4",
                "FUN_00102c98",
                "FUN_001025ab",
                "FUN_00104de0"
            ],
            "code": "\n\n\nvoid error(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n          undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,char *param_9,\n          undefined8 param_10,undefined8 param_11,undefined8 param_12,undefined8 param_13,\n          undefined8 param_14)\n\n{\n  char in_AL;\n  char *__format;\n  undefined4 local_e0;\n  undefined4 local_dc;\n  undefined *local_d8;\n  undefined *local_d0;\n  undefined local_c8 [8];\n  undefined8 local_c0;\n  undefined8 local_b8;\n  undefined8 local_b0;\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined4 local_98;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  \n  if (in_AL != '\\0') {\n    local_98 = param_1;\n    local_88 = param_2;\n    local_78 = param_3;\n    local_68 = param_4;\n    local_58 = param_5;\n    local_48 = param_6;\n    local_38 = param_7;\n    local_28 = param_8;\n  }\n  local_c0 = param_10;\n  local_b8 = param_11;\n  local_b0 = param_12;\n  local_a8 = param_13;\n  local_a0 = param_14;\n  fflush(_stdout);\n  local_d8 = &stack0x00000008;\n  local_d0 = local_c8;\n  local_e0 = 8;\n  local_dc = 0x30;\n  __format = (char *)dcgettext(0,\"%s: Error: \",5);\n  fprintf(_stderr,__format,\"elfedit\");\n  vfprintf(_stderr,param_9,&local_e0);\n  return;\n}\n\n",
            "current_name": "error",
            "entrypoint": "0x00102e85",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "exit": {
            "called": [
                "exit"
            ],
            "calling": [
                "FUN_001032de",
                "FUN_00103bf0",
                "FUN_00102fbc"
            ],
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "current_name": "exit",
            "entrypoint": "0x00102250",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fclose": {
            "called": [
                "fclose"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_0010358d"
            ],
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fclose",
            "entrypoint": "0x001020b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ferror": {
            "called": [
                "ferror"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "ferror",
            "entrypoint": "0x00102080",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fflush": {
            "called": [
                "fflush"
            ],
            "calling": [
                "warn",
                "error"
            ],
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fflush",
            "entrypoint": "0x001021c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fileno": {
            "called": [
                "fileno"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_0010358d"
            ],
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fileno",
            "entrypoint": "0x001021a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fopen": {
            "called": [
                "fopen"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_0010358d"
            ],
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "current_name": "fopen",
            "entrypoint": "0x00102220",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fprintf": {
            "called": [
                "fprintf"
            ],
            "calling": [
                "FUN_001032de",
                "FUN_00103bf0",
                "warn",
                "FUN_00102fc7",
                "error"
            ],
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "current_name": "fprintf",
            "entrypoint": "0x00102160",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fread": {
            "called": [
                "fread"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_0010358d",
                "FUN_001028be",
                "FUN_001025ab",
                "FUN_00104de0"
            ],
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "current_name": "fread",
            "entrypoint": "0x00102090",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "free": {
            "called": [
                "free"
            ],
            "calling": [
                "FUN_001032de",
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_00103006",
                "FUN_0010358d",
                "FUN_001025ab",
                "FUN_00102f65"
            ],
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "current_name": "free",
            "entrypoint": "0x00102030",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fseek": {
            "called": [
                "fseek"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_0010358d",
                "FUN_001028be",
                "FUN_001025ab",
                "FUN_00104de0"
            ],
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "current_name": "fseek",
            "entrypoint": "0x001021d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fstat": {
            "called": [
                "fstat"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_0010358d"
            ],
            "code": "\n\n\nint fstat(int __fd,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = fstat(__fd,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "fstat",
            "entrypoint": "0x00102290",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ftell": {
            "called": [
                "ftell"
            ],
            "calling": [
                "FUN_00103bf0",
                "FUN_00104de0"
            ],
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "current_name": "ftell",
            "entrypoint": "0x00102170",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fwrite": {
            "called": [
                "fwrite"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "current_name": "fwrite",
            "entrypoint": "0x00102260",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getc": {
            "called": [
                "getc"
            ],
            "calling": [
                "FUN_001025ab"
            ],
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "getc",
            "entrypoint": "0x001022a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getopt_long": {
            "called": [
                "getopt_long"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "current_name": "getopt_long",
            "entrypoint": "0x00102100",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "malloc": {
            "called": [
                "malloc"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_00102cc4",
                "FUN_00103449",
                "FUN_001025ab",
                "FUN_00105370"
            ],
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "current_name": "malloc",
            "entrypoint": "0x001021b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memcpy": {
            "called": [
                "memcpy"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memcpy",
            "entrypoint": "0x00102190",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memmove": {
            "called": [
                "memmove"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memmove",
            "entrypoint": "0x00102210",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "mmap": {
            "called": [
                "mmap"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nvoid * mmap(void *__addr,size_t __len,int __prot,int __flags,int __fd,__off_t __offset)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = mmap(__addr,__len,__prot,__flags,__fd,__offset);\n  return pvVar1;\n}\n\n",
            "current_name": "mmap",
            "entrypoint": "0x001020f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "munmap": {
            "called": [
                "munmap"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint munmap(void *__addr,size_t __len)\n\n{\n  int iVar1;\n  \n  iVar1 = munmap(__addr,__len);\n  return iVar1;\n}\n\n",
            "current_name": "munmap",
            "entrypoint": "0x001021f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "printf": {
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "current_name": "printf",
            "entrypoint": "0x00102110",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "realloc": {
            "called": [
                "realloc"
            ],
            "calling": [
                "FUN_00103449"
            ],
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "current_name": "realloc",
            "entrypoint": "0x001021e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "rewind": {
            "called": [
                "rewind"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nvoid rewind(FILE *__stream)\n\n{\n  rewind(__stream);\n  return;\n}\n\n",
            "current_name": "rewind",
            "entrypoint": "0x00102120",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "sbrk": {
            "called": [
                "sbrk"
            ],
            "calling": [
                "FUN_00102fc7"
            ],
            "code": "\n\n\nvoid * sbrk(intptr_t __delta)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = sbrk(__delta);\n  return pvVar1;\n}\n\n",
            "current_name": "sbrk",
            "entrypoint": "0x00102140",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "setlocale": {
            "called": [
                "setlocale"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "current_name": "setlocale",
            "entrypoint": "0x00102200",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "snprintf": {
            "called": [
                "snprintf"
            ],
            "calling": [
                "FUN_0010358d"
            ],
            "code": "\n\n\nint snprintf(char *__s,size_t __maxlen,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = snprintf(__s,__maxlen,__format);\n  return iVar1;\n}\n\n",
            "current_name": "snprintf",
            "entrypoint": "0x00102130",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "stat": {
            "called": [
                "stat"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "stat",
            "entrypoint": "0x00102180",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcasecmp": {
            "called": [
                "strcasecmp"
            ],
            "calling": [
                "FUN_0010234b",
                "FUN_00104ce0",
                "FUN_001022c0",
                "FUN_00104c60",
                "FUN_00104da0",
                "FUN_00104d30"
            ],
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "strcasecmp",
            "entrypoint": "0x00102040",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcmp": {
            "called": [
                "strcmp"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "strcmp",
            "entrypoint": "0x00102150",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strdup": {
            "called": [
                "strdup"
            ],
            "calling": [
                "FUN_001025ab"
            ],
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "current_name": "strdup",
            "entrypoint": "0x00102270",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strerror": {
            "called": [
                "strerror"
            ],
            "calling": [
                "FUN_00103bf0",
                "FUN_001024ec"
            ],
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "current_name": "strerror",
            "entrypoint": "0x00102280",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strlen": {
            "called": [
                "strlen"
            ],
            "calling": [
                "FUN_00103bf0",
                "FUN_001027fd",
                "FUN_00103006",
                "FUN_0010358d",
                "FUN_00103160",
                "FUN_00103186"
            ],
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "current_name": "strlen",
            "entrypoint": "0x001020e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strncmp": {
            "called": [
                "strncmp"
            ],
            "calling": [
                "FUN_001027fd"
            ],
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "current_name": "strncmp",
            "entrypoint": "0x00102070",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strtoul": {
            "called": [
                "strtoul"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_0010358d",
                "FUN_001028be",
                "FUN_001025ab"
            ],
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "current_name": "strtoul",
            "entrypoint": "0x00102240",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "textdomain": {
            "called": [
                "textdomain"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "current_name": "textdomain",
            "entrypoint": "0x001020a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "vfprintf": {
            "called": [
                "vfprintf"
            ],
            "calling": [
                "warn",
                "error"
            ],
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "current_name": "vfprintf",
            "entrypoint": "0x00102230",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "warn": {
            "called": [
                "fflush",
                "dcgettext",
                "vfprintf",
                "fprintf"
            ],
            "calling": [],
            "code": "\n\n\nvoid warn(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n         undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,char *param_9,\n         undefined8 param_10,undefined8 param_11,undefined8 param_12,undefined8 param_13,\n         undefined8 param_14)\n\n{\n  char in_AL;\n  char *__format;\n  undefined4 local_e0;\n  undefined4 local_dc;\n  undefined *local_d8;\n  undefined *local_d0;\n  undefined local_c8 [8];\n  undefined8 local_c0;\n  undefined8 local_b8;\n  undefined8 local_b0;\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined4 local_98;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  \n  if (in_AL != '\\0') {\n    local_98 = param_1;\n    local_88 = param_2;\n    local_78 = param_3;\n    local_68 = param_4;\n    local_58 = param_5;\n    local_48 = param_6;\n    local_38 = param_7;\n    local_28 = param_8;\n  }\n  local_c0 = param_10;\n  local_b8 = param_11;\n  local_b0 = param_12;\n  local_a8 = param_13;\n  local_a0 = param_14;\n  fflush(_stdout);\n  local_d8 = &stack0x00000008;\n  local_d0 = local_c8;\n  local_e0 = 8;\n  local_dc = 0x30;\n  __format = (char *)dcgettext(0,\"%s: Warning: \",5);\n  fprintf(_stderr,__format,\"elfedit\");\n  vfprintf(_stderr,param_9,&local_e0);\n  return;\n}\n\n",
            "current_name": "warn",
            "entrypoint": "0x00102da5",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_00102020",
            "FUN_001022c0",
            "FUN_00102323",
            "FUN_0010234b",
            "FUN_001023ce",
            "FUN_00102434",
            "FUN_001024ec",
            "FUN_00102558",
            "FUN_001025ab",
            "FUN_001027fd",
            "FUN_001028be",
            "FUN_001029a5",
            "FUN_00102c98",
            "FUN_00102cbc",
            "FUN_00102cc4",
            "FUN_00102f65",
            "FUN_00102fa0",
            "FUN_00102fbc",
            "FUN_00102fc7",
            "FUN_00103006",
            "FUN_00103160",
            "FUN_00103186",
            "FUN_001032de",
            "FUN_00103449",
            "FUN_0010347f",
            "FUN_0010354e",
            "FUN_0010358d",
            "FUN_00103a90",
            "FUN_00103ad0",
            "FUN_00103bf0",
            "FUN_00104c60",
            "FUN_00104ce0",
            "FUN_00104d30",
            "FUN_00104da0",
            "FUN_00104de0",
            "FUN_00105370"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 204102
}