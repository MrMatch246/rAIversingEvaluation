{
    "functions": {
        "FUN_00102000": {
            "additional_data": {
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                },
                "<original_parameter_name_2>": {
                    "1": "<new_parameter_name_2>"
                },
                "<original_parameter_name_n>": {
                    "1": "<new_parameter_name_n>"
                },
                "<original_variable_name_1>": {
                    "2": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "2": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "2": "<new_variable_name_n>"
                },
                "DAT_00106000": {
                    "1": "global_monitor_start"
                },
                "FUN_00102000": {
                    "1": "initialize_gmon",
                    "18": "initialize_program",
                    "3": "initialize_monitoring",
                    "5": "initialize"
                },
                "__gmon_start__": {
                    "1": "start_profiler",
                    "2": "initialize_global_monitoring",
                    "3": "initialize_profiling",
                    "8": "start_monitoring"
                }
            },
            "called": [
                "FUN_0010a0d0"
            ],
            "calling": [],
            "code": "\nvoid initialize_program_00102000(void)\n\n{\n  start_monitoring();\n  return;\n}\n\n",
            "current_name": "initialize_program_00102000",
            "entrypoint": "0x00102000",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102000": "initialize_program_00102000",
                "__gmon_start__": "start_monitoring"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102020": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "<more_descriptive_function_name>"
                },
                "FUN_00102020": {
                    "1": "execute_indirect_function",
                    "17": "execute_indirect_jump",
                    "4": "execute_indirect_call",
                    "5": "execute_function"
                },
                "FUN_00102020_parameter1": {
                    "1": "indirect_jump_address"
                },
                "PTR_0": {
                    "1": "function_pointer"
                },
                "code": {
                    "1": "indirect_function",
                    "5": "function_pointer"
                },
                "undefined": {
                    "1": "indirect_function_pointer",
                    "2": "function_address",
                    "3": "target_address"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_indirect_jump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(function_pointer *)(target_address *)0x0)();\n  return;\n}\n\n",
            "current_name": "execute_indirect_jump_00102020",
            "entrypoint": "0x00102020",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020",
                "code": "function_pointer",
                "undefined": "target_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102030": {
            "called": [
                "FUN_0010a000"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_001032de",
                "FUN_00102f65",
                "FUN_00103006",
                "FUN_001025ab"
            ],
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "current_name": "FUN_00102030",
            "entrypoint": "0x00102030",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102040": {
            "called": [
                "FUN_0010a008"
            ],
            "calling": [
                "FUN_00104c60",
                "FUN_0010234b",
                "FUN_00104ce0",
                "FUN_00104da0",
                "FUN_001022c0",
                "FUN_00104d30"
            ],
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102040",
            "entrypoint": "0x00102040",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102050": {
            "called": [
                "FUN_0010a018"
            ],
            "calling": [
                "FUN_0010354e",
                "FUN_00104de0",
                "FUN_0010289a",
                "FUN_0010347f",
                "FUN_00102c98"
            ],
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "current_name": "FUN_00102050",
            "entrypoint": "0x00102050",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102060": {
            "called": [
                "FUN_0010a020"
            ],
            "calling": [
                "FUN_001024ec",
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "current_name": "FUN_00102060",
            "entrypoint": "0x00102060",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102070": {
            "called": [
                "FUN_0010a028"
            ],
            "calling": [
                "FUN_001027fd"
            ],
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102070",
            "entrypoint": "0x00102070",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102080": {
            "called": [
                "FUN_0010a040"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102080",
            "entrypoint": "0x00102080",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102090": {
            "called": [
                "FUN_0010a048"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_00104de0",
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_001028be",
                "FUN_001025ab"
            ],
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_00102090",
            "entrypoint": "0x00102090",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001020a0": {
            "called": [
                "FUN_0010a050"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "current_name": "FUN_001020a0",
            "entrypoint": "0x001020a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001020b0": {
            "called": [
                "FUN_0010a058"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5",
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001020b0",
            "entrypoint": "0x001020b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001020c0": {
            "called": [
                "FUN_0010a068"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "current_name": "FUN_001020c0",
            "entrypoint": "0x001020c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001020d0": {
            "called": [
                "FUN_0010a070"
            ],
            "calling": [
                "FUN_001024ec",
                "FUN_0010234b",
                "FUN_00102da5",
                "FUN_001028be",
                "FUN_00102c98",
                "FUN_00104da0",
                "FUN_001022c0",
                "FUN_00102434",
                "FUN_00102cc4",
                "FUN_00102e85",
                "FUN_0010354e",
                "FUN_00104de0",
                "FUN_0010358d",
                "FUN_001029a5",
                "FUN_0010289a",
                "FUN_00103bf0",
                "FUN_00102558",
                "FUN_001032de",
                "FUN_00102323",
                "FUN_0010347f",
                "FUN_001025ab"
            ],
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "current_name": "FUN_001020d0",
            "entrypoint": "0x001020d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001020e0": {
            "called": [
                "FUN_0010a078"
            ],
            "calling": [
                "FUN_00103160",
                "FUN_0010358d",
                "FUN_00103bf0",
                "FUN_001027fd",
                "FUN_00103186",
                "FUN_00103006"
            ],
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_001020e0",
            "entrypoint": "0x001020e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001020f0": {
            "called": [
                "FUN_0010a080"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nvoid * mmap(void *__addr,size_t __len,int __prot,int __flags,int __fd,__off_t __offset)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = mmap(__addr,__len,__prot,__flags,__fd,__offset);\n  return pvVar1;\n}\n\n",
            "current_name": "FUN_001020f0",
            "entrypoint": "0x001020f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102100": {
            "called": [
                "FUN_0010a088"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "current_name": "FUN_00102100",
            "entrypoint": "0x00102100",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102110": {
            "called": [
                "FUN_0010a090"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102110",
            "entrypoint": "0x00102110",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102120": {
            "called": [
                "FUN_0010a098"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nvoid rewind(FILE *__stream)\n\n{\n  rewind(__stream);\n  return;\n}\n\n",
            "current_name": "FUN_00102120",
            "entrypoint": "0x00102120",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102130": {
            "called": [
                "FUN_0010a0a0"
            ],
            "calling": [
                "FUN_0010358d"
            ],
            "code": "\n\n\nint snprintf(char *__s,size_t __maxlen,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = snprintf(__s,__maxlen,__format);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102130",
            "entrypoint": "0x00102130",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102140": {
            "called": [
                "FUN_0010a0a8"
            ],
            "calling": [
                "FUN_00102fc7"
            ],
            "code": "\n\n\nvoid * sbrk(intptr_t __delta)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = sbrk(__delta);\n  return pvVar1;\n}\n\n",
            "current_name": "FUN_00102140",
            "entrypoint": "0x00102140",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102150": {
            "called": [
                "FUN_0010a0b0"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102150",
            "entrypoint": "0x00102150",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102160": {
            "called": [
                "FUN_0010a0c0"
            ],
            "calling": [
                "FUN_00102e85",
                "FUN_00102da5",
                "FUN_00103bf0",
                "FUN_001032de",
                "FUN_00102fc7"
            ],
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102160",
            "entrypoint": "0x00102160",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102170": {
            "called": [
                "FUN_0010a0c8"
            ],
            "calling": [
                "FUN_00104de0",
                "FUN_00103bf0"
            ],
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "current_name": "FUN_00102170",
            "entrypoint": "0x00102170",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102180": {
            "called": [
                "FUN_0010a0d8"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102180",
            "entrypoint": "0x00102180",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102190": {
            "called": [
                "FUN_0010a0e8"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "FUN_00102190",
            "entrypoint": "0x00102190",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001021a0": {
            "called": [
                "FUN_0010a0f0"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5",
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001021a0",
            "entrypoint": "0x001021a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001021b0": {
            "called": [
                "FUN_0010a0f8"
            ],
            "calling": [
                "FUN_00103449",
                "FUN_0010358d",
                "FUN_00105370",
                "FUN_001025ab",
                "FUN_00102cc4"
            ],
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "current_name": "FUN_001021b0",
            "entrypoint": "0x001021b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001021c0": {
            "called": [
                "FUN_0010a100"
            ],
            "calling": [
                "FUN_00102e85",
                "FUN_00102da5"
            ],
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001021c0",
            "entrypoint": "0x001021c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001021d0": {
            "called": [
                "FUN_0010a108"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_00104de0",
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_001028be",
                "FUN_001025ab"
            ],
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001021d0",
            "entrypoint": "0x001021d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001021e0": {
            "called": [
                "FUN_0010a110"
            ],
            "calling": [
                "FUN_00103449"
            ],
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "current_name": "FUN_001021e0",
            "entrypoint": "0x001021e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001021f0": {
            "called": [
                "FUN_0010a118"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint munmap(void *__addr,size_t __len)\n\n{\n  int iVar1;\n  \n  iVar1 = munmap(__addr,__len);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001021f0",
            "entrypoint": "0x001021f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102200": {
            "called": [
                "FUN_0010a120"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00102200",
            "entrypoint": "0x00102200",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102210": {
            "called": [
                "FUN_0010a128"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "FUN_00102210",
            "entrypoint": "0x00102210",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102220": {
            "called": [
                "FUN_0010a130"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5",
                "FUN_00103bf0"
            ],
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "current_name": "FUN_00102220",
            "entrypoint": "0x00102220",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102230": {
            "called": [
                "FUN_0010a138"
            ],
            "calling": [
                "FUN_00102e85",
                "FUN_00102da5"
            ],
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102230",
            "entrypoint": "0x00102230",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102240": {
            "called": [
                "FUN_0010a140"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_001028be",
                "FUN_001025ab"
            ],
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "current_name": "FUN_00102240",
            "entrypoint": "0x00102240",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102250": {
            "called": [
                "FUN_0010a150"
            ],
            "calling": [
                "FUN_00102fbc",
                "FUN_00103bf0",
                "FUN_001032de"
            ],
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "current_name": "FUN_00102250",
            "entrypoint": "0x00102250",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102260": {
            "called": [
                "FUN_0010a158"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_00102260",
            "entrypoint": "0x00102260",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102270": {
            "called": [
                "FUN_0010a168"
            ],
            "calling": [
                "FUN_001025ab"
            ],
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00102270",
            "entrypoint": "0x00102270",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102280": {
            "called": [
                "FUN_0010a170"
            ],
            "calling": [
                "FUN_001024ec",
                "FUN_00103bf0"
            ],
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00102280",
            "entrypoint": "0x00102280",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102290": {
            "called": [
                "FUN_0010a178"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5",
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint fstat(int __fd,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = fstat(__fd,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102290",
            "entrypoint": "0x00102290",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001022a0": {
            "called": [
                "FUN_0010a180"
            ],
            "calling": [
                "FUN_001025ab"
            ],
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001022a0",
            "entrypoint": "0x001022a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001022b0": {
            "called": [
                "FUN_0010a190"
            ],
            "calling": [
                "FUN_00103ba0"
            ],
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "current_name": "FUN_001022b0",
            "entrypoint": "0x001022b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001022c0": {
            "additional_data": {
                "DAT_00109440": {
                    "1": "enabled_features"
                },
                "DAT_00109444": {
                    "1": "disabled_features"
                },
                "FUN_001022c0": {
                    "1": "update_feature_status",
                    "14": "update_x86_feature",
                    "7": "update_feature_flags",
                    "9": "update_x86_features"
                },
                "auVar4": {
                    "2": "return_values",
                    "6": "result",
                    "8": "return_value"
                },
                "iVar1": {
                    "1": "result",
                    "2": "strcmp_result",
                    "7": "comparison_result",
                    "8": "strcasecmp_result"
                },
                "uVar2": {
                    "1": "feature_bit",
                    "15": "feature_value",
                    "2": "feature_flag",
                    "3": "flag",
                    "6": "feature_mask"
                },
                "uVar3": {
                    "1": "error_msg",
                    "2": "error_string",
                    "27": "error_message"
                },
                "uVar4": {
                    "1": "return_value"
                },
                "unaff_EBP": {
                    "1": "is_reset",
                    "11": "is_enabled",
                    "3": "is_zero",
                    "4": "is_set"
                },
                "unaff_RBX": {
                    "1": "input_feature",
                    "10": "x86_feature",
                    "13": "feature_name",
                    "6": "feature"
                },
                "unaff_retaddr": {
                    "16": "return_address"
                },
                "undefined": {
                    "1": "result"
                }
            },
            "called": [
                "FUN_00102e85",
                "FUN_00102040",
                "FUN_001020d0"
            ],
            "calling": [
                "FUN_00104c60"
            ],
            "code": "\nresult  [16] update_x86_feature_001022c0(void)\n\n{\n  int strcasecmp_result;\n  uint feature_value;\n  result8 error_message;\n  char *feature_name;\n  int is_enabled;\n  result return_value [16];\n  result8 return_address;\n  \n  strcasecmp_result = strcasecmp(feature_name,\"lam_u48\");\n  if (strcasecmp_result == 0) {\n    feature_value = 4;\n  }\n  else {\n    strcasecmp_result = strcasecmp(feature_name,\"lam_u57\");\n    feature_value = 8;\n    if (strcasecmp_result != 0) {\n      error_message = dcgettext(0,\"Unknown x86 feature: %s\\n\",5);\n      error(error_message);\n      error_message = 0xffffffff;\n      goto LAB_00104ca5;\n    }\n  }\n  if (is_enabled == 0) {\n    DAT_00109440 = feature_value | DAT_00109440;\n    DAT_00109444 = ~feature_value & DAT_00109444;\n  }\n  else {\n    DAT_00109444 = feature_value | DAT_00109444;\n    DAT_00109440 = DAT_00109440 & ~feature_value;\n  }\n  error_message = 0;\nLAB_00104ca5:\n  return_value._8_8_ = return_address;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "current_name": "update_x86_feature_001022c0",
            "entrypoint": "0x001022c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001022c0": "update_x86_feature_001022c0",
                "auVar4": "return_value",
                "iVar1": "strcasecmp_result",
                "uVar2": "feature_value",
                "uVar3": "error_message",
                "uVar4": "return_value",
                "unaff_EBP": "is_enabled",
                "unaff_RBX": "feature_name",
                "unaff_retaddr": "return_address",
                "undefined": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102323": {
            "additional_data": {
                "FUN_00102323": {
                    "1": "display_unknown_osabi_error",
                    "13": "print_unknown_osabi_error",
                    "2": "get_unknown_osabi_error_message",
                    "3": "identify_unknown_osabi",
                    "4": "print_unknown_osabi_error_message"
                },
                "auVar2": {
                    "1": "return_data",
                    "16": "return_value",
                    "4": "return_address"
                },
                "param_1": {
                    "1": "error_code",
                    "2": "unused_param1",
                    "3": "arg1"
                },
                "param_2": {
                    "1": "param2",
                    "2": "unused_param2",
                    "3": "arg2"
                },
                "param_3": {
                    "1": "param3",
                    "2": "unused_param3",
                    "3": "arg3"
                },
                "param_4": {
                    "1": "param4",
                    "2": "unused_param4",
                    "3": "arg4"
                },
                "uVar1": {
                    "1": "error_string",
                    "20": "error_message"
                },
                "unaff_retaddr": {
                    "1": "unaffected_return_address",
                    "15": "return_address"
                }
            },
            "called": [
                "FUN_00102e85",
                "FUN_001020d0"
            ],
            "calling": [
                "FUN_00104ce0"
            ],
            "code": "\nundefined  [16] print_unknown_osabi_error_00102323(void)\n\n{\n  undefined8 error_message;\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  error_message = dcgettext(0,\"Unknown OSABI: %s\\n\",5);\n  error(error_message);\n  return_value._8_8_ = return_address;\n  return_value._0_8_ = 0xffffffff;\n  return return_value;\n}\n\n",
            "current_name": "print_unknown_osabi_error_00102323",
            "entrypoint": "0x00102323",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102323": "print_unknown_osabi_error_00102323",
                "auVar2": "return_value",
                "uVar1": "error_message",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010234b": {
            "additional_data": {
                "FUN_0010234b": {
                    "1": "identify_machine_type",
                    "25": "get_machine_type",
                    "5": "check_machine_type"
                },
                "iVar1": {
                    "22": "result",
                    "6": "comparison_result"
                },
                "uVar2": {
                    "1": "err_msg",
                    "19": "error_message",
                    "3": "error_msg",
                    "4": "error_string"
                },
                "unaff_RBX": {
                    "31": "machine_type"
                }
            },
            "called": [
                "FUN_00102e85",
                "FUN_00102040",
                "FUN_001020d0"
            ],
            "calling": [
                "FUN_00104d30"
            ],
            "code": "\nint get_machine_type_0010234b(void)\n\n{\n  int result;\n  undefined8 error_message;\n  char *machine_type;\n  \n  result = strcasecmp(machine_type,\"x86_64\");\n  if (result == 0) {\n    result = 0x3e;\n  }\n  else {\n    result = strcasecmp(machine_type,\"x86-64\");\n    if (result == 0) {\n      result = 0x3e;\n    }\n    else {\n      result = strcasecmp(machine_type,\"none\");\n      if (result != 0) {\n        error_message = dcgettext(0,\"Unknown machine type: %s\\n\",5);\n        error(error_message);\n        result = -1;\n      }\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "get_machine_type_0010234b",
            "entrypoint": "0x0010234b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010234b": "get_machine_type_0010234b",
                "iVar1": "result",
                "uVar2": "error_message",
                "unaff_RBX": "machine_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001023ce": {
            "additional_data": {
                "<original_variable_name_1>": {
                    "2": "<new_variable_name_1>"
                },
                "DAT_": {
                    "3": "dat_"
                },
                "FUN_001023ce": {
                    "1": "get_description",
                    "10": "get_one",
                    "2": "get_status",
                    "3": "initialize",
                    "6": "get_return_value"
                },
                "PTR_": {
                    "3": "ptr_"
                },
                "PTR_param_1": {
                    "1": "param_1"
                },
                "PTR_param_2": {
                    "1": "param_2"
                },
                "return": {
                    "1": "status",
                    "8": "result"
                },
                "undefined8": {
                    "1": "unsigned_long",
                    "2": "int",
                    "4": "bool",
                    "6": "uint64_t"
                }
            },
            "called": [],
            "calling": [
                "FUN_00104da0"
            ],
            "code": "\nuint64_t get_one_001023ce(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "get_one_001023ce",
            "entrypoint": "0x001023ce",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001023ce": "get_one_001023ce",
                "return": "result",
                "undefined8": "uint64_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102434": {
            "additional_data": {
                "DAT_00109150": {
                    "1": "value_14"
                },
                "DAT_00109154": {
                    "1": "value_10"
                },
                "DAT_00109158": {
                    "1": "value_13"
                },
                "DAT_0010915c": {
                    "1": "value_7"
                },
                "DAT_00109160": {
                    "1": "value_12"
                },
                "DAT_00109164": {
                    "1": "value_5"
                },
                "DAT_00109168": {
                    "1": "value_3"
                },
                "DAT_0010916c": {
                    "1": "value_11"
                },
                "DAT_00109170": {
                    "1": "value_2"
                },
                "DAT_00109174": {
                    "1": "value_4"
                },
                "DAT_00109340": {
                    "1": "data_5"
                },
                "DAT_00109347": {
                    "1": "value_17"
                },
                "DAT_00109348": {
                    "1": "value_18"
                },
                "DAT_00109350": {
                    "1": "data_4"
                },
                "DAT_00109352": {
                    "1": "data_3"
                },
                "DAT_00109380": {
                    "1": "data"
                },
                "DAT_00109387": {
                    "1": "value_15"
                },
                "DAT_00109388": {
                    "1": "value_16"
                },
                "DAT_00109390": {
                    "1": "data_2"
                },
                "DAT_00109392": {
                    "1": "data_1"
                },
                "DAT_001093b8": {
                    "1": "write_data"
                },
                "DAT_001093e4": {
                    "1": "flag_3"
                },
                "DAT_001093e6": {
                    "1": "flag_1"
                },
                "DAT_001093e7": {
                    "1": "value_8"
                },
                "DAT_001093e8": {
                    "1": "value_9"
                },
                "DAT_00109418": {
                    "1": "value_6"
                },
                "DAT_0010941a": {
                    "1": "flag_2"
                },
                "FUN_00102434": {
                    "1": "improve_elf_header",
                    "2": "verify_and_update_elf_header",
                    "3": "update_elf_file_header",
                    "4": "validate_elf_header",
                    "5": "update_elf_file",
                    "7": "update_elf_header"
                },
                "abort": {
                    "1": "handle_abort"
                },
                "dcgettext": {
                    "5": "get_error_message"
                },
                "error": {
                    "1": "print_error",
                    "6": "print_error_message"
                },
                "error_code": {
                    "1": "error_code"
                },
                "param2": {
                    "1": "parameter2"
                },
                "param3": {
                    "1": "parameter3"
                },
                "param4": {
                    "1": "parameter4"
                },
                "pcVar3": {
                    "1": "error_msg_format",
                    "14": "error_message",
                    "2": "format_string",
                    "3": "error_message_format",
                    "9": "error_format"
                },
                "print_error_message_00102e85": {
                    "4": "print_error_message"
                },
                "sVar2": {
                    "1": "num_bytes_written",
                    "12": "write_result",
                    "3": "write_status",
                    "7": "result",
                    "8": "bytes_written"
                },
                "uVar1": {
                    "1": "translation",
                    "15": "error_message",
                    "2": "error_code"
                },
                "unaff_RBX": {
                    "1": "output_file",
                    "20": "file",
                    "8": "file_ptr"
                },
                "update_elf_header_001024ec": {
                    "3": "update_elf_header"
                }
            },
            "called": [
                "FUN_00102e85",
                "FUN_001020d0"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nundefined8 update_elf_header_00102434(void)\n\n{\n  undefined8 error_message;\n  size_t write_result;\n  FILE *file;\n  char *error_message;\n  \n  error_message = get_error_message(0,\"%s: Failed to seek to ELF header\\n\",5);\n  print_error_message(error_message);\n  if (DAT_001093e6 == '\\x01') {\n    if (DAT_0010941a == DAT_0010916c) {\n      return 0;\n    }\n    if (DAT_00109170 == 0xffffffff) {\n      if (DAT_0010941a == 6) {\n        DAT_00109170 = 1;\n      }\n      else if (DAT_0010941a < 7) {\n        DAT_00109170 = (DAT_0010941a != 3) + 1 + (uint)(DAT_0010941a != 3);\n      }\n      else {\n        DAT_00109170 = 3 - ((ushort)(DAT_0010941a - 0xb4) < 2);\n      }\n    }\n    if ((DAT_001093e4 == DAT_00109170) || (DAT_00109170 == 3)) {\n      if ((DAT_001093e4 == DAT_00109168) || (DAT_00109168 == 3)) {\n        if ((DAT_0010941a == DAT_00109174) || (DAT_00109174 == 0xffffffff)) {\n          if ((DAT_00109164 == 0xffffffff) || (DAT_00109418 == DAT_00109164)) {\n            if ((DAT_0010915c == 0xffffffff) || (DAT_001093e7 == DAT_0010915c)) {\n              if ((DAT_001093e8 == DAT_00109154) || (DAT_00109154 == 0xffffffff)) {\n                if (DAT_001093e4 == 1) {\n                  if (DAT_0010916c != 0xffffffff) {\n                    (*DAT_001093b8)(&DAT_00109392,(long)(int)DAT_0010916c,2);\n                  }\n                  if (DAT_00109160 != -1) {\n                    (*DAT_001093b8)(&DAT_00109390,(long)DAT_00109160,2);\n                  }\n                  if (DAT_00109158 != -1) {\n                    DAT_00109387 = (undefined)DAT_00109158;\n                  }\n                  if (DAT_00109150 != -1) {\n                    DAT_00109388 = (undefined)DAT_00109150;\n                  }\n                  write_result = fwrite(&DAT_00109380,0x34,1,file);\n                  if (write_result == 1) {\n                    return 0;\n                  }\n                  error_message = update_elf_header_00102434();\n                  return error_message;\n                }\n                if (DAT_001093e4 != 2) {\n                    \n                  handle_abort();\n                }\n                if (DAT_0010916c != 0xffffffff) {\n                  (*DAT_001093b8)(&DAT_00109352,(long)(int)DAT_0010916c,2);\n                }\n                if (DAT_00109160 != -1) {\n                  (*DAT_001093b8)(&DAT_00109350,(long)DAT_00109160,2);\n                }\n                if (DAT_00109158 != -1) {\n                  DAT_00109347 = (undefined)DAT_00109158;\n                }\n                if (DAT_00109150 != -1) {\n                  DAT_00109348 = (undefined)DAT_00109150;\n                }\n                write_result = fwrite(&DAT_00109340,0x40,1,file);\n                if (write_result == 1) {\n                  return 0;\n                }\n                error_message = update_elf_header_00102434();\n                return error_message;\n              }\n              error_message = \"%s: Unmatched EI_ABIVERSION: %d is not %d\\n\";\n            }\n            else {\n              error_message = \"%s: Unmatched EI_OSABI: %d is not %d\\n\";\n            }\n          }\n          else {\n            error_message = \"%s: Unmatched e_type: %d is not %d\\n\";\n          }\n        }\n        else {\n          error_message = \"%s: Unmatched e_machine: %d is not %d\\n\";\n        }\n        error_message = get_error_message(0,error_message,5);\n        print_error_message(error_message);\n        return 1;\n      }\n      error_message = \"%s: Unmatched output EI_CLASS: %d is not %d\\n\";\n    }\n    else {\n      error_message = \"%s: Unmatched input EI_CLASS: %d is not %d\\n\";\n    }\n    error_message = get_error_message(0,error_message,5);\n    print_error_message(error_message);\n  }\n  else {\n    error_message = get_error_message(0,\"%s: Unsupported EI_VERSION: %d is not %d\\n\",5);\n    print_error_message(error_message);\n  }\n  return 1;\n}\n\n",
            "current_name": "update_elf_header_00102434",
            "entrypoint": "0x00102434",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102434": "update_elf_header_00102434",
                "abort": "handle_abort",
                "dcgettext": "get_error_message",
                "error": "print_error_message",
                "pcVar3": "error_message",
                "sVar2": "write_result",
                "uVar1": "error_message",
                "unaff_RBX": "file",
                "update_elf_header_001024ec": "update_elf_header"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001024ec": {
            "additional_data": {
                "FUN_001024ec": {
                    "19": "update_elf_header",
                    "4": "update_elf_header_error"
                },
                "__errno_location": {
                    "1": "get_error_number_location"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "error": {
                    "1": "print_error_message",
                    "2": "display_error"
                },
                "param_1": {
                    "2": "param1"
                },
                "param_2": {
                    "2": "param2"
                },
                "param_3": {
                    "2": "param3"
                },
                "param_4": {
                    "2": "param4"
                },
                "piVar1": {
                    "1": "error_location_ptr",
                    "2": "error_location",
                    "3": "error_number_ptr",
                    "5": "errno_ptr",
                    "8": "error_number"
                },
                "strerror": {
                    "1": "get_error_msg",
                    "3": "get_error_string"
                },
                "uVar2": {
                    "10": "error_string",
                    "18": "error_message",
                    "3": "error_msg"
                }
            },
            "called": [
                "FUN_00102e85",
                "FUN_00102060",
                "FUN_00102280",
                "FUN_001020d0"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nundefined8 update_elf_header_001024ec(void)\n\n{\n  int *error_number;\n  undefined8 error_message;\n  \n  error_number = get_error_number();\n  get_error_string(*error_number);\n  error_message = get_translated_error_message(0,\"%s: Failed to update ELF header: %s\\n\",5);\n  display_error(error_message);\n  return 1;\n}\n\n",
            "current_name": "update_elf_header_001024ec",
            "entrypoint": "0x001024ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001024ec": "update_elf_header_001024ec",
                "__errno_location": "get_error_number",
                "dcgettext": "get_translated_error_message",
                "error": "display_error",
                "piVar1": "error_number",
                "strerror": "get_error_string",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102558": {
            "additional_data": {
                "FUN_00102558": {
                    "1": "read_elf_header_and_error",
                    "2": "read_elf_header_failure",
                    "22": "read_elf_header",
                    "5": "read_elf_header_failed"
                },
                "param_1": {
                    "1": "unknown_param1",
                    "2": "arg1"
                },
                "param_2": {
                    "1": "unknown_param2",
                    "2": "arg2"
                },
                "param_3": {
                    "1": "unknown_param3",
                    "2": "arg3"
                },
                "param_4": {
                    "1": "unknown_param4",
                    "2": "arg4"
                },
                "uVar1": {
                    "2": "error_msg",
                    "23": "error_message",
                    "5": "error_string"
                }
            },
            "called": [
                "FUN_00102e85",
                "FUN_001020d0"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nundefined8 read_elf_header_00102558(void)\n\n{\n  undefined8 error_message;\n  \n  error_message = dcgettext(0,\"%s: Failed to read ELF header\\n\",5);\n  error(error_message);\n  return 1;\n}\n\n",
            "current_name": "read_elf_header_00102558",
            "entrypoint": "0x00102558",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102558": "read_elf_header_00102558",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001025ab": {
            "additional_data": {
                "F(_001027fd": {
                    "1": "starts_with"
                },
                "F(_001028be": {
                    "1": "strtoul"
                },
                "F(_00102e85": {
                    "1": "process_archive_index_and_symbols"
                },
                "FUN_001025ab": {
                    "1": "process_archive_data",
                    "17": "process_archive",
                    "2": "extract_archive",
                    "3": "parse_archive_header"
                },
                "FUN_001027fd": {
                    "1": "extract_symbols",
                    "2": "starts_with"
                },
                "FUN_001028be": {
                    "1": "error"
                },
                "FUN_00102e85": {
                    "1": "process_archive_index_and_symbols"
                },
                "ZEXT816": {
                    "1": "initialize_zero"
                },
                "ZEXT816(0)": {
                    "1": "zero16"
                },
                "__ptr": {
                    "1": "temp_array",
                    "14": "ptr",
                    "2": "current_header",
                    "3": "header_buffer",
                    "6": "header"
                },
                "byte": {
                    "1": "byte"
                },
                "cVar2": {
                    "1": "starts_with_result",
                    "2": "var2",
                    "3": "result",
                    "6": "starts_with_slash",
                    "8": "startswith_result"
                },
                "dcgettext": {
                    "1": "get_translated_string",
                    "2": "translate",
                    "3": "get_text"
                },
                "error": {
                    "1": "raise_error",
                    "2": "print_error",
                    "3": "display_error"
                },
                "fread": {
                    "1": "read_file",
                    "3": "read_from_file"
                },
                "free": {
                    "1": "free_memory",
                    "5": "deallocate_memory"
                },
                "fseek": {
                    "1": "move_file_pointer",
                    "3": "set_file_position"
                },
                "getc": {
                    "1": "get_char_from_stream",
                    "4": "get_character"
                },
                "iVar3": {
                    "1": "result_code",
                    "18": "result",
                    "2": "temp_var3",
                    "7": "status"
                },
                "malloc": {
                    "7": "allocate_memory"
                },
                "param_1": {
                    "1": "header",
                    "2": "file_data",
                    "3": "argv",
                    "9": "output"
                },
                "param_2": {
                    "1": "input_file_name",
                    "12": "filename",
                    "2": "file_name",
                    "3": "archive_file_name",
                    "6": "input"
                },
                "param_3": {
                    "1": "archive_file",
                    "2": "file_pointer",
                    "22": "file",
                    "3": "file_ptr"
                },
                "param_4": {
                    "1": "archive_size",
                    "10": "max_size",
                    "12": "table_size"
                },
                "param_5": {
                    "1": "option",
                    "14": "param_5",
                    "2": "constant",
                    "4": "flag",
                    "5": "flags"
                },
                "pcVar4": {
                    "1": "new_entry_size",
                    "2": "str",
                    "6": "error_msg",
                    "9": "error_message"
                },
                "pcVar6": {
                    "1": "translated_error_message"
                },
                "pcVar7": {
                    "1": "name_table",
                    "2": "symbol_name",
                    "3": "str"
                },
                "pcVar8": {
                    "1": "long_name_table_error"
                },
                "printf": {
                    "1": "print_message"
                },
                "process_archive_index_and_symbols_constprop_0": {
                    "1": "process_archive_index_and_symbols",
                    "3": "process_index_and_symbols"
                },
                "sVar5": {
                    "1": "read_bytes",
                    "10": "bytes_read",
                    "15": "read_size",
                    "2": "read_result"
                },
                "sizeof": {
                    "1": "size_of"
                },
                "sizeoflongsymbolnmtble": {
                    "1": "long_symbol_table_size"
                },
                "start_with": {
                    "1": "startswith"
                },
                "startsWith": {
                    "1": "is_startswith"
                },
                "startswith": {
                    "1": "compare_strings"
                },
                "startwith": {
                    "1": "check_prefix"
                },
                "startwiths": {
                    "1": "startswith"
                },
                "strdup": {
                    "5": "duplicate_string"
                },
                "stropswith": {
                    "1": "starts_with"
                },
                "strtoul": {
                    "1": "convert_str_to_u_long",
                    "2": "string_to_unsigned_long"
                },
                "uVar1": {
                    "1": "previous",
                    "12": "temp",
                    "2": "temp_var1",
                    "4": "temp_var"
                },
                "uVar6": {
                    "1": "returned_value",
                    "2": "temp_var6",
                    "3": "error_message",
                    "5": "error_msg",
                    "6": "translation"
                }
            },
            "called": [
                "FUN_00102090",
                "FUN_001021d0",
                "FUN_00102e85",
                "FUN_001027fd",
                "FUN_001028be",
                "FUN_001022a0",
                "FUN_001020d0",
                "FUN_00102270",
                "FUN_00102240",
                "FUN_00102030",
                "FUN_001021b0"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5"
            ],
            "code": "\nundefined4 process_archive_001025ab(char **output,char *filename,FILE *file,long table_size,undefined4 param_5)\n\n{\n  char **ptr;\n  undefined temp;\n  char startswith_result;\n  int result;\n  char *error_message;\n  size_t read_size;\n  undefined8 translation;\n  char *long_name_table;\n  \n  error_message = duplicate_string(filename);\n  output[2] = (char *)0x0;\n  *(undefined4 *)((long)output + 0x54) = 0;\n  *output = error_message;\n  output[1] = (char *)file;\n  output[5] = (char *)0x0;\n  output[6] = (char *)0x0;\n  *(undefined4 *)(output + 10) = param_5;\n  output[9] = (char *)0x8;\n  *(undefined (*) [16])(output + 3) = zero16;\n  *(undefined (*) [16])(output + 7) = zero16;\n  result = set_file_position(file,8,0);\n  error_message = \"%s: failed to seek to first archive header\\n\";\n  if (result != 0) goto LAB_00102658;\n  ptr = output + 0xb;\n  read_size = read_from_file(ptr,1,0x3c,file);\n  if (read_size != 0x3c) {\n    if (read_size == 0) {\n      return 0;\n    }\n    error_message = \"%s: failed to read archive header\\n\";\n    goto LAB_00102658;\n  }\n  startswith_result = compare_strings(ptr,\"/               \");\n  if (startswith_result == '\\0') {\n    startswith_result = compare_strings(ptr,\"/SYM64/         \");\n    if (startswith_result != '\\0') {\n      *(undefined4 *)((long)output + 0x54) = 1;\n      result = process_index_and_symbols(output,8);\n      goto joined_r0x001026dd;\n    }\n  }\n  else {\n    result = process_index_and_symbols(output,4);\njoined_r0x001026dd:\n    if (result == 0) {\n      return 1;\n    }\n  }\n  startswith_result = compare_strings(ptr);\n  if (startswith_result == '\\0') {\n    return 0;\n  }\n  temp = *(undefined *)((long)output + 0x92);\n  *(undefined *)((long)output + 0x92) = 0;\n  error_message = (char *)string_to_unsigned_long((char *)(output + 0x11),(char **)0x0,10);\n  long_name_table = \"%s: long name table is too small, (size = %ld)\\n\";\n  output[7] = error_message;\n  *(undefined *)((long)output + 0x92) = temp;\n  if ((char *)0x7 < error_message) {\n    if (((long)error_message <= table_size) && (-1 < (long)error_message)) {\n      output[9] = error_message + 0x3c + (long)output[9];\n      long_name_table = (char *)allocate_memory((size_t)(error_message + 1));\n      output[6] = long_name_table;\n      if (long_name_table == (char *)0x0) {\n        translation = get_text(0,\"Out of memory reading long symbol names in archive\\n\",5);\n        display_error(translation);\n        return 1;\n      }\n      read_size = read_from_file(long_name_table,(size_t)error_message,1,file);\n      if (read_size == 1) {\n        if ((*(byte *)(output + 7) & 1) != 0) {\n          get_character(file);\n        }\n        output[6][(long)output[7]] = '\\0';\n        return 0;\n      }\n      deallocate_memory(output[6]);\n      error_message = \"%s: failed to read long symbol name string table\\n\";\n      output[6] = (char *)0x0;\nLAB_00102658:\n      translation = get_text(0,error_message,5);\n      display_error(translation,filename);\n      return 1;\n    }\n    long_name_table = \"%s: long name table is too big, (size = %#lx)\\n\";\n  }\n  translation = get_text(0,long_name_table,5);\n  display_error(translation,filename,error_message);\n  return 1;\n}\n\n",
            "current_name": "process_archive_001025ab",
            "entrypoint": "0x001025ab",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001025ab": "process_archive_001025ab",
                "ZEXT816": "initialize_zero",
                "ZEXT816(0)": "zero16",
                "__ptr": "ptr",
                "cVar2": "startswith_result",
                "dcgettext": "get_text",
                "error": "display_error",
                "fread": "read_from_file",
                "free": "deallocate_memory",
                "fseek": "set_file_position",
                "getc": "get_character",
                "iVar3": "result",
                "malloc": "allocate_memory",
                "param_1": "output",
                "param_2": "filename",
                "param_3": "file",
                "param_4": "table_size",
                "pcVar4": "error_message",
                "pcVar7": "long_name_table",
                "process_archive_index_and_symbols_constprop_0": "process_index_and_symbols",
                "sVar5": "read_size",
                "startswith": "compare_strings",
                "strdup": "duplicate_string",
                "strtoul": "string_to_unsigned_long",
                "uVar1": "temp",
                "uVar6": "translation"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001027fd": {
            "additional_data": {
                "FUN_001027fd": {
                    "1": "reverse_compare_strings",
                    "20": "compare_strings",
                    "9": "string_comparison"
                },
                "__n": {
                    "1": "length_string_2",
                    "2": "string_length",
                    "24": "length"
                },
                "auVar2": {
                    "1": "output_values",
                    "2": "comparison_result",
                    "21": "result",
                    "3": "output"
                },
                "extraout_var": {
                    "1": "extra_output_var",
                    "2": "extra_variable",
                    "4": "result"
                },
                "iVar1": {
                    "1": "comparison",
                    "24": "comparison_result"
                },
                "in_RAX": {
                    "1": "return_address",
                    "5": "return_value"
                },
                "param_1": {
                    "1": "string_1",
                    "2": "input_string1",
                    "24": "string1",
                    "3": "str1"
                },
                "param_2": {
                    "1": "string_2",
                    "2": "input_string2",
                    "24": "string2",
                    "3": "str2"
                }
            },
            "called": [
                "FUN_001020e0",
                "FUN_00102070"
            ],
            "calling": [
                "FUN_001025ab"
            ],
            "code": "\nundefined  [16] compare_strings_001027fd(char *string1,char *string2)\n\n{\n  int comparison_result;\n  undefined8 return_value;\n  size_t length;\n  undefined4 result;\n  undefined result [16];\n  \n  length = strlen(string2);\n  comparison_result = strncmp(string1,string2,length);\n  result._1_7_ = (undefined7)(CONCAT44(result,comparison_result) >> 8);\n  result[0] = comparison_result == 0;\n  result._8_8_ = return_value;\n  return result;\n}\n\n",
            "current_name": "compare_strings_001027fd",
            "entrypoint": "0x001027fd",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001027fd": "compare_strings_001027fd",
                "__n": "length",
                "auVar2": "result",
                "extraout_var": "result",
                "iVar1": "comparison_result",
                "in_RAX": "return_value",
                "param_1": "string1",
                "param_2": "string2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102825": {
            "additional_data": {
                "(ulong)*(byte *)(param_1 + 1) << 8 | (ulong)*(byte *)(param_1 + 2) << 0x10": {
                    "1": "combined_value"
                },
                "* (byte *) (param_1 + 1)": {
                    "1": "byte1"
                },
                "* (byte *) (param_1 + 2)": {
                    "1": "byte2"
                },
                "*(byte *)(param_1 + 1)": {
                    "1": "byte_at_data_address_plus1",
                    "2": "second_byte",
                    "8": "byte1"
                },
                "*(byte *)(param_1 + 2)": {
                    "1": "byte_value2",
                    "2": "third_byte",
                    "8": "byte2"
                },
                "FUNC_00103ab3": {
                    "1": "execute_function",
                    "2": "process_data"
                },
                "FUN_00102825": {
                    "1": "parse_and_process"
                },
                "FUN_00103ab3": {
                    "3": "process_data"
                },
                "byte": {
                    "1": "character",
                    "3": "byte_value"
                },
                "byte_(param_1 + 1)": {
                    "1": "second_byte"
                },
                "byte_(param_1 + 2)": {
                    "1": "third_byte"
                },
                "dataBuffer": {
                    "1": "buffer"
                },
                "dataSize": {
                    "1": "size"
                },
                "param_1": {
                    "1": "byte_sequence",
                    "3": "data_address",
                    "7": "data"
                },
                "param_2": {
                    "1": "input_value",
                    "2": "value",
                    "3": "param2",
                    "4": "param"
                },
                "switchD_00103aac::FUN_00102825": {
                    "1": "convert_param_to_value",
                    "2": "decode_and_call_function",
                    "3": "process_data"
                }
            },
            "called": [
                "FUN_00103ab3"
            ],
            "calling": [
                "FUN_00103a90"
            ],
            "code": "\nvoid switchD_00103aac::process_data_00102825(long data,undefined8 param)\n\n{\n  FUNC_00103ab3(data,param,\n               (ulong)*(byte_value *)(data + 1) << 8 | (ulong)*(byte_value *)(data + 2) << 0x10);\n  return;\n}\n\n",
            "current_name": "process_data_00102825",
            "entrypoint": "0x00102825",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102825": "process_data_00102825",
                "byte": "byte_value",
                "param_1": "data",
                "param_2": "param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010289a": {
            "additional_data": {
                "FUN_0010289a": {
                    "1": "handle_error_and_abort",
                    "12": "handle_unhandled_data_length"
                },
                "param_1": {
                    "1": "length",
                    "3": "error_code"
                },
                "param_2": {
                    "1": "data_length",
                    "2": "unknown_param1"
                },
                "param_3": {
                    "1": "additional_info2",
                    "2": "unknown_param2"
                },
                "param_4": {
                    "1": "error_param2",
                    "2": "unknown_param3"
                },
                "switchD_00103aac": {
                    "1": "handle_unhandled_data_length"
                },
                "switchD_00103aac::FUN_0010289a": {
                    "1": "handle_data_length_error",
                    "15": "handle_unhandled_data_length",
                    "2": "handle_unhandled_data"
                },
                "uVar1": {
                    "1": "error_msg",
                    "18": "error_message"
                },
                "unaff_EBX": {
                    "1": "unaff_ebx",
                    "20": "error_code",
                    "3": "error_flag"
                }
            },
            "called": [
                "FUN_00102e85",
                "FUN_00102050",
                "FUN_001020d0"
            ],
            "calling": [
                "FUN_00103a90"
            ],
            "code": "\nvoid handle_unhandled_data_length_0010289a::handle_unhandled_data_length_0010289a(void)\n\n{\n  undefined8 error_message;\n  undefined4 error_code;\n  \n  error_message = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n  error(error_message,error_code);\n                    \n  abort();\n}\n\n",
            "current_name": "handle_unhandled_data_length_0010289a",
            "entrypoint": "0x0010289a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010289a": "handle_unhandled_data_length_0010289a",
                "switchD_00103aac": "handle_unhandled_data_length",
                "uVar1": "error_message",
                "unaff_EBX": "error_code"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001028be": {
            "additional_data": {
                "FUN_001028be": {
                    "1": "validate_archive_header",
                    "2": "validate_and_read_archive_header",
                    "3": "read_archive_header",
                    "4": "extract_archive_header",
                    "6": "process_archive_header",
                    "8": "parse_archive_header"
                },
                "iVar2": {
                    "1": "seek_status",
                    "16": "seek_result",
                    "2": "file_operation_result",
                    "4": "result",
                    "5": "file_seek_result"
                },
                "param_1": {
                    "1": "header_ptr",
                    "2": "input",
                    "3": "header",
                    "4": "archive_data",
                    "7": "archive_header"
                },
                "pcVar7": {
                    "1": "error_message_format",
                    "2": "error_format_string",
                    "23": "error_format"
                },
                "sVar5": {
                    "11": "bytes_read",
                    "2": "header_read_size",
                    "7": "read_result"
                },
                "uVar1": {
                    "1": "temp_byte",
                    "2": "temp",
                    "3": "old_value",
                    "4": "prev_value",
                    "5": "original_value",
                    "8": "previous_value"
                },
                "uVar3": {
                    "1": "archive_header_size",
                    "30": "header_size"
                },
                "uVar4": {
                    "1": "error_str",
                    "2": "error_string",
                    "25": "error_message",
                    "3": "error_msg"
                },
                "uVar6": {
                    "1": "archive_file_name",
                    "13": "archive_name",
                    "2": "archive_path",
                    "3": "filename",
                    "7": "file_name"
                }
            },
            "called": [
                "FUN_00102090",
                "FUN_00102e85",
                "FUN_001021d0",
                "FUN_001020d0",
                "FUN_00102240"
            ],
            "calling": [
                "FUN_001025ab"
            ],
            "code": "\nundefined8 parse_archive_header_001028be(undefined8 *archive_header)\n\n{\n  undefined previous_value;\n  int seek_result;\n  ulong header_size;\n  undefined8 error_message;\n  size_t bytes_read;\n  undefined8 archive_name;\n  char *error_format;\n  \n  previous_value = *(undefined *)((long)archive_header + 0x92);\n  *(undefined *)((long)archive_header + 0x92) = 0;\n  header_size = strtoul((char *)(archive_header + 0x11),(char **)0x0,10);\n  *(undefined *)((long)archive_header + 0x92) = previous_value;\n  if ((long)header_size < 0) {\n    archive_name = *archive_header;\n    error_message = dcgettext(0,\"%s: invalid archive header size: %ld\\n\",5);\n    error(error_message,archive_name,header_size);\n  }\n  else {\n    header_size = header_size + 1 & 0xfffffffffffffffe;\n    archive_header[9] = header_size + 0x3c + archive_header[9];\n    seek_result = fseek((FILE *)archive_header[1],header_size,1);\n    if (seek_result == 0) {\n      bytes_read = fread(archive_header + 0xb,1,0x3c,(FILE *)archive_header[1]);\n      if ((bytes_read == 0x3c) || (bytes_read == 0)) {\n        return 1;\n      }\n      archive_name = *archive_header;\n      error_format = \"%s: failed to read archive header following archive index\\n\";\n    }\n    else {\n      archive_name = *archive_header;\n      error_format = \"%s: failed to skip archive symbol table\\n\";\n    }\n    error_message = dcgettext(0,error_format,5);\n    error(error_message,archive_name);\n  }\n  return 0;\n}\n\n",
            "current_name": "parse_archive_header_001028be",
            "entrypoint": "0x001028be",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001028be": "parse_archive_header_001028be",
                "iVar2": "seek_result",
                "param_1": "archive_header",
                "pcVar7": "error_format",
                "sVar5": "bytes_read",
                "uVar1": "previous_value",
                "uVar3": "header_size",
                "uVar4": "error_message",
                "uVar6": "archive_name"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001029a5": {
            "additional_data": {
                "!=": {
                    "1": "is_not_equal"
                },
                "*(char *)((long)param_1 + 0x92)": {
                    "1": "temp_char"
                },
                "*(char *)((long)param_1 + lVar13 + 0x58)": {
                    "1": "char_in_path"
                },
                "*(char *)(lVar13 + uVar9)": {
                    "1": "current_char"
                },
                "*(char *)(param_1 + 0xb)": {
                    "1": "first_char_of_file_path"
                },
                "*(int *)(param_1 + 10)": {
                    "1": "is_thin_archive_value"
                },
                "==": {
                    "1": "is_equal"
                },
                "FUN_001029a5": {
                    "1": "extract_archive_member_name",
                    "2": "extract_and_process_archive",
                    "4": "extract_archive_member_path",
                    "6": "extract_file_from_archive"
                },
                "LAB_00102acd": {
                    "1": "error_label"
                },
                "__stream": {
                    "1": "file_descriptor",
                    "26": "file_stream",
                    "3": "file"
                },
                "adjust_relative_path": {
                    "1": "adjust_path"
                },
                "dcgettext": {
                    "1": "get_message"
                },
                "error": {
                    "1": "print_error_message"
                },
                "fclose": {
                    "1": "close_file"
                },
                "fileno": {
                    "1": "get_file_number"
                },
                "fopen": {
                    "1": "open_file"
                },
                "fread": {
                    "1": "read_from_file"
                },
                "free": {
                    "1": "free_memory"
                },
                "fseek": {
                    "1": "set_file_position"
                },
                "fstat": {
                    "1": "get_file_status"
                },
                "iVar6": {
                    "1": "temp_variable_6",
                    "2": "temp6",
                    "4": "result",
                    "5": "status",
                    "6": "temp_var6",
                    "7": "file_descriptor"
                },
                "lVar13": {
                    "1": "len",
                    "2": "loop_index",
                    "3": "loop_counter",
                    "4": "length",
                    "5": "loop_var",
                    "7": "index"
                },
                "local_b8": {
                    "1": "file_information",
                    "14": "file_stat",
                    "2": "stat_struct",
                    "3": "stat_info",
                    "4": "file_stats",
                    "5": "file_info"
                },
                "local_c0": {
                    "1": "temporary_name",
                    "3": "local_path",
                    "4": "buffer"
                },
                "param_1": {
                    "1": "file_params",
                    "2": "file_path",
                    "3": "archive_info",
                    "5": "input_params",
                    "6": "file_info"
                },
                "param_1 + 0xb": {
                    "1": "file_name_start_ptr"
                },
                "param_1 + 0xc": {
                    "1": "file_name_start_ptr_offset"
                },
                "param_1 + 10": {
                    "1": "is_thin_archive"
                },
                "param_1 + 6": {
                    "1": "base_addr"
                },
                "param_1[6]": {
                    "1": "base_addr_value"
                },
                "param_1[7]": {
                    "1": "long_name_table_size"
                },
                "param_1[8]": {
                    "1": "file_offset"
                },
                "param_2": {
                    "1": "archive_output",
                    "13": "output",
                    "2": "output_parameters",
                    "4": "output_path"
                },
                "param_2[1]": {
                    "1": "file_ptr"
                },
                "pcVar14": {
                    "1": "current_file_name",
                    "10": "file_name",
                    "2": "file_var1",
                    "5": "file_path"
                },
                "pcVar15": {
                    "1": "char_var2",
                    "13": "error_message",
                    "2": "error_msg",
                    "3": "error_string"
                },
                "pcVar16": {
                    "1": "temp9",
                    "2": "file_var3",
                    "3": "error_format",
                    "5": "error_message2",
                    "6": "error_message"
                },
                "pcVar17": {
                    "1": "temporary_path",
                    "3": "file_path"
                },
                "pcVar18": {
                    "1": "file_path_variable_2"
                },
                "puVar12": {
                    "1": "dynamic_array",
                    "2": "file_name",
                    "8": "result"
                },
                "release_archive": {
                    "1": "release_archive"
                },
                "sVar11": {
                    "1": "file_read_size",
                    "12": "bytes_read",
                    "2": "file_size",
                    "3": "size_var",
                    "7": "read_size"
                },
                "setup_archive_constprop_0": {
                    "1": "setup_archive"
                },
                "strcmp": {
                    "1": "compare_strings"
                },
                "strtoul": {
                    "1": "convert_to_unsigned_long"
                },
                "uVar1": {
                    "1": "temp_variable_1",
                    "3": "temp_var",
                    "4": "temp",
                    "6": "temp1",
                    "9": "temp_var1"
                },
                "uVar10": {
                    "1": "tmp_var10",
                    "2": "temp_var10",
                    "3": "translation",
                    "4": "error_msg",
                    "8": "error_message"
                },
                "uVar2": {
                    "1": "name_part1",
                    "3": "result",
                    "6": "temp2",
                    "9": "temp_var2"
                },
                "uVar3": {
                    "1": "temp_variable3",
                    "2": "result",
                    "3": "var2",
                    "6": "temp3",
                    "9": "temp_var3"
                },
                "uVar4": {
                    "1": "temp_value4",
                    "2": "result",
                    "3": "var3",
                    "6": "temp4",
                    "9": "temp_var4"
                },
                "uVar5": {
                    "1": "name_part4",
                    "2": "result",
                    "3": "var4",
                    "6": "temp5",
                    "9": "temp_var5"
                },
                "uVar7": {
                    "1": "filename_start_index",
                    "2": "name_index",
                    "3": "file_index",
                    "4": "index",
                    "8": "long_name_index"
                },
                "uVar8": {
                    "1": "end_long_name_table",
                    "11": "table_size",
                    "2": "temp_var8",
                    "4": "long_name_table_size"
                },
                "uVar9": {
                    "1": "var4",
                    "2": "file_name_length",
                    "3": "index",
                    "7": "current_index"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                },
                "xstrdup": {
                    "1": "duplicate_string"
                }
            },
            "called": [
                "FUN_00102150",
                "FUN_001021d0",
                "FUN_00102220",
                "FUN_00102f65",
                "FUN_001020d0",
                "FUN_00102240",
                "FUN_00102290",
                "FUN_00102cc4",
                "FUN_00102090",
                "FUN_00102e85",
                "FUN_001020b0",
                "FUN_00103160",
                "FUN_001029a5",
                "FUN_001021a0",
                "FUN_00105370",
                "FUN_00102030",
                "FUN_001025ab"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5"
            ],
            "code": "\nundefined4 * extract_file_path_001029a5(undefined8 *file_info,char **output)\n\n{\n  undefined temp_var1;\n  undefined4 temp_var2;\n  undefined4 temp_var3;\n  undefined4 temp_var4;\n  undefined4 temp_var5;\n  int file_descriptor;\n  ulong long_name_index;\n  ulong table_size;\n  ulong current_index;\n  undefined8 error_message;\n  FILE *file_stream;\n  size_t bytes_read;\n  undefined4 *result;\n  long index;\n  char *file_name;\n  char *error_message;\n  char *error_message;\n  char *buffer;\n  stat file_stat;\n  \n  if (*(char *)(file_info + 0xb) is_not_equal '/') {\n    index = 0;\n    do {\n      if (*(char *)((long)file_info + index + 0x58) is_equal '/') {\n        *(undefined *)((long)file_info + index + 0x58) = 0;\n        result = (undefined4 *)duplicate_string(file_info + 0xb);\n        return result;\n      }\n      index = index + 1;\n    } while (index is_not_equal 0x10);\n    result = (undefined4 *)allocate_memory(0x11);\n    temp_var2 = *(undefined4 *)(file_info + 0xb);\n    temp_var3 = *(undefined4 *)((long)file_info + 0x5c);\n    temp_var4 = *(undefined4 *)(file_info + 0xc);\n    temp_var5 = *(undefined4 *)((long)file_info + 100);\n    *(undefined *)(result + 4) = 0;\n    *result = temp_var2;\n    result[1] = temp_var3;\n    result[2] = temp_var4;\n    result[3] = temp_var5;\n    return result;\n  }\n  if ((base_addr_value is_equal 0) || (long_name_table_size is_equal 0)) {\n    error_message = \"Archive member uses long names, but no longname table found\\n\";\nerror_label:\n    error_message = get_message(0,error_message,5);\n    print_error_message(error_message);\n    return (undefined4 *)0x0;\n  }\n  temp_var1 = *(undefined *)((long)file_info + 0x92);\n  file_offset = 0;\n  *(undefined *)((long)file_info + 0x92) = 0;\n  long_name_index = convert_to_unsigned_long((char *)((long)file_info + 0x59),&buffer,10);\n  if (((*(int *)(file_info + 10) is_not_equal 0) && (buffer is_not_equal (char *)0x0)) && (*buffer is_equal ':')) {\n    table_size = convert_to_unsigned_long(buffer + 1,(char **)0x0,10);\n    file_offset = table_size;\n  }\n  table_size = long_name_table_size;\n  *(undefined *)((long)file_info + 0x92) = temp_var1;\n  if (table_size < long_name_index) {\n    error_message = get_message(0,\"Found long name index (%ld) beyond end of long name table\\n\",5);\n    print_error_message(error_message,long_name_index);\n    return (undefined4 *)0x0;\n  }\n  index = base_addr_value;\n  for (current_index = long_name_index;\n      ((table_size is_not_equal current_index && (*(char *)(index + current_index) is_not_equal '\\0')) &&\n      (*(char *)(index + current_index) is_not_equal '\\n')); current_index = current_index + 1) {\n  }\n  if ((current_index is_not_equal 0) && (*(char *)(index + -1 + current_index) is_equal '/')) {\n    current_index = current_index - 1;\n  }\n  if (current_index < table_size) {\n    table_size = current_index;\n  }\n  *(undefined *)(index + table_size) = 0;\n  if ((*(int *)(file_info + 10) is_equal 0) || (file_offset is_equal 0)) goto LAB_00102c2d;\n  if (table_size <= long_name_index) {\n    error_message = \"Invalid Thin archive member name\\n\";\n    goto error_label;\n  }\n  error_message = (char *)adjust_path(*file_info,base_addr_value + long_name_index,table_size - long_name_index);\n  if (error_message is_not_equal (char *)0x0) {\n    if ((*output is_equal (char *)0x0) || (file_descriptor = compare_strings(*output,error_message), file_descriptor is_not_equal 0)) {\n      if ((FILE *)file_ptr is_not_equal (FILE *)0x0) {\n        close_file((FILE *)file_ptr);\n        file_ptr = (char *)0x0;\n      }\n      release_archive(output);\n      file_stream = open_file(error_message,\"rb\");\n      if (file_stream is_not_equal (FILE *)0x0) {\n        file_descriptor = get_file_number(file_stream);\n        file_descriptor = get_file_status(file_descriptor,&file_stat);\n        if ((-1 < file_descriptor) &&\n           (file_descriptor = setup_archive(output,error_message,file_stream,file_stat.st_size,0),\n           file_descriptor is_equal 0)) goto LAB_00102b84;\n      }\n    }\n    else {\nLAB_00102b84:\n      file_descriptor = set_file_position((FILE *)file_ptr,file_offset,0);\n      if (file_descriptor is_equal 0) {\n        bytes_read = read_from_file(output + 0xb,1,0x3c,(FILE *)file_ptr);\n        if (bytes_read is_equal 0x3c) {\n          if (*(short *)((long)output + 0x92) is_equal 0xa60) {\n            result = (undefined4 *)extract_file_path_001029a5(output,0);\n            if (result is_not_equal (undefined4 *)0x0) {\n              free_memory(error_message);\n              return result;\n            }\n            goto LAB_00102c25;\n          }\n          file_name = *output;\n          error_message = \"%s: did not find a valid archive header\\n\";\n        }\n        else {\n          file_name = *output;\n          error_message = \"%s: failed to read archive header\\n\";\n        }\n      }\n      else {\n        file_name = *output;\n        error_message = \"%s: failed to seek to next file name\\n\";\n      }\n      error_message = get_message(0,error_message,5);\n      print_error_message(error_message,file_name);\n    }\n  }\nLAB_00102c25:\n  free_memory(error_message);\nLAB_00102c2d:\n  result = (undefined4 *)duplicate_string(base_addr_value + long_name_index);\n  return result;\n}\n\n",
            "current_name": "extract_file_path_001029a5",
            "entrypoint": "0x001029a5",
            "imported": false,
            "improved": true,
            "renaming": {
                "!=": "is_not_equal",
                "==": "is_equal",
                "FUN_001029a5": "extract_file_path_001029a5",
                "LAB_00102acd": "error_label",
                "__stream": "file_stream",
                "adjust_relative_path": "adjust_path",
                "dcgettext": "get_message",
                "error": "print_error_message",
                "fclose": "close_file",
                "fileno": "get_file_number",
                "fopen": "open_file",
                "fread": "read_from_file",
                "free": "free_memory",
                "fseek": "set_file_position",
                "fstat": "get_file_status",
                "iVar6": "file_descriptor",
                "lVar13": "index",
                "local_b8": "file_stat",
                "local_c0": "buffer",
                "param_1": "file_info",
                "param_1[6]": "base_addr_value",
                "param_1[7]": "long_name_table_size",
                "param_1[8]": "file_offset",
                "param_2": "output",
                "param_2[1]": "file_ptr",
                "pcVar14": "file_name",
                "pcVar15": "error_message",
                "pcVar16": "error_message",
                "puVar12": "result",
                "sVar11": "bytes_read",
                "setup_archive_constprop_0": "setup_archive",
                "strcmp": "compare_strings",
                "strtoul": "convert_to_unsigned_long",
                "uVar1": "temp_var1",
                "uVar10": "error_message",
                "uVar2": "temp_var2",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "uVar5": "temp_var5",
                "uVar7": "long_name_index",
                "uVar8": "table_size",
                "uVar9": "current_index",
                "xmalloc": "allocate_memory",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102c98": {
            "additional_data": {
                "FUN_00102c98": {
                    "1": "handle_data_error",
                    "2": "handle_data_length_error",
                    "26": "handle_unhandled_data_length"
                },
                "param_1": {
                    "1": "param1",
                    "2": "error_code"
                },
                "param_2": {
                    "1": "ebx_value",
                    "2": "param2"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "param4"
                },
                "uVar1": {
                    "1": "error_msg",
                    "20": "error_message",
                    "4": "error_string"
                },
                "unaff_EBX": {
                    "1": "ebx_value",
                    "2": "error_type",
                    "26": "error_code"
                }
            },
            "called": [
                "FUN_00102e85",
                "FUN_00102050",
                "FUN_001020d0"
            ],
            "calling": [
                "FUN_00103ad0"
            ],
            "code": "\nvoid handle_unhandled_data_length_00102c98(void)\n\n{\n  undefined8 error_message;\n  undefined4 error_code;\n  \n  error_message = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n  error(error_message,error_code);\n                    \n  abort();\n}\n\n",
            "current_name": "handle_unhandled_data_length_00102c98",
            "entrypoint": "0x00102c98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102c98": "handle_unhandled_data_length_00102c98",
                "uVar1": "error_message",
                "unaff_EBX": "error_code"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102cbc": {
            "additional_data": {
                "FUN_00102cbc": {
                    "1": "parse_filename",
                    "15": "extract_file_name",
                    "2": "parse_file_path",
                    "3": "parse_path",
                    "4": "extract_archive_member_name"
                },
                "__size": {
                    "1": "length",
                    "15": "size",
                    "2": "allocated_size",
                    "3": "buffer_size",
                    "4": "total_size"
                },
                "bVar8": {
                    "1": "is_slash_present",
                    "2": "found_slash",
                    "4": "flag",
                    "7": "is_negative"
                },
                "cVar2": {
                    "1": "character",
                    "21": "current_char",
                    "3": "current_character"
                },
                "dcgettext": {
                    "1": "get_string"
                },
                "error": {
                    "1": "print_error"
                },
                "extraout_RDX": {
                    "1": "original_length",
                    "2": "string_length",
                    "3": "length"
                },
                "lVar1": {
                    "1": "temp_var",
                    "2": "name_length",
                    "4": "total_size",
                    "8": "length"
                },
                "newVariableName1": {
                    "1": "new_value1"
                },
                "newVariableName2": {
                    "1": "new_value2"
                },
                "param_1": {
                    "1": "unused_param",
                    "12": "param",
                    "2": "param1",
                    "3": "arg1",
                    "4": "param_1"
                },
                "param_2": {
                    "1": "archive_member_path",
                    "2": "filename",
                    "7": "file_path",
                    "8": "input_string"
                },
                "pcVar3": {
                    "1": "current_path_character",
                    "2": "pointer1",
                    "3": "current_char_ptr",
                    "4": "current_char"
                },
                "pcVar4": {
                    "1": "ptr2",
                    "2": "pointer2",
                    "3": "last_slash_position",
                    "5": "last_slash_ptr",
                    "8": "last_slash"
                },
                "uVar5": {
                    "1": "message",
                    "2": "err_msg",
                    "26": "error_message"
                },
                "uVar6": {
                    "1": "path_length",
                    "2": "string_length",
                    "3": "length",
                    "8": "remaining_size",
                    "9": "remaining_length"
                },
                "uVar7": {
                    "1": "prefix_size",
                    "2": "prefix_length",
                    "3": "name_length",
                    "4": "path_length",
                    "6": "slash_offset"
                },
                "unaff_RBX": {
                    "1": "buffer",
                    "2": "last_slash"
                }
            },
            "called": [
                "FUN_00102fc7"
            ],
            "calling": [
                "FUN_00105370"
            ],
            "code": "\nchar * extract_file_name_00102cbc(undefined8 param,char *input_string)\n\n{\n  ulong size;\n  long length;\n  char current_char;\n  char *current_ptr;\n  char *last_slash;\n  undefined8 error_message;\n  ulong remaining_length;\n  ulong remaining_length;\n  char *file_ptr;\n  ulong slash_offset;\n  byte is_negative;\n  \n  is_negative = 0;\n  xmalloc_failed();\n  current_ptr = file_ptr;\n  last_slash = file_ptr;\n  while (current_char = *current_ptr, current_char != '\\0') {\n    current_ptr = current_ptr + 1;\n    if (current_char == '/') {\n      last_slash = current_ptr;\n    }\n  }\n  if ((*input_string == '/') || (file_ptr == last_slash)) {\n    if (remaining_length + 1 == 0) {\n      return (char *)0x0;\n    }\n    last_slash = (char *)malloc(remaining_length + 1);\n    remaining_length = remaining_length;\n    current_ptr = last_slash;\n    if (last_slash != (char *)0x0) {\n      for (; remaining_length != 0; remaining_length = remaining_length - 1) {\n        *current_ptr = *input_string;\n        input_string = input_string + (ulong)is_negative * -2 + 1;\n        current_ptr = current_ptr + (ulong)is_negative * -2 + 1;\n      }\n      last_slash[remaining_length] = '\\0';\n      return last_slash;\n    }\n  }\n  else {\n    slash_offset = (long)last_slash - (long)file_ptr;\n    length = slash_offset + remaining_length;\n    remaining_length = remaining_length;\n    if (remaining_length <= slash_offset) {\n      remaining_length = slash_offset;\n    }\n    size = length + 1;\n    if (size < remaining_length) {\n      error_message = get_string(0,\"Abnormal length of thin archive member name: %lx\\n\",5);\n      print_error(error_message,remaining_length);\n      return (char *)0x0;\n    }\n    last_slash = (char *)malloc(size);\n    current_ptr = last_slash;\n    if (last_slash != (char *)0x0) {\n      for (; remaining_length = remaining_length, slash_offset != 0; slash_offset = slash_offset - 1) {\n        *current_ptr = *file_ptr;\n        file_ptr = file_ptr + (ulong)is_negative * -2 + 1;\n        current_ptr = current_ptr + (ulong)is_negative * -2 + 1;\n      }\n      for (; remaining_length != 0; remaining_length = remaining_length - 1) {\n        *current_ptr = *input_string;\n        input_string = input_string + (ulong)is_negative * -2 + 1;\n        current_ptr = current_ptr + (ulong)is_negative * -2 + 1;\n      }\n      last_slash[length] = '\\0';\n      return last_slash;\n    }\n  }\n  error_message = get_string(0,\"Out of memory\\n\",5);\n  print_error(error_message);\n  return (char *)0x0;\n}\n\n",
            "current_name": "extract_file_name_00102cbc",
            "entrypoint": "0x00102cbc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102cbc": "extract_file_name_00102cbc",
                "__size": "size",
                "bVar8": "is_negative",
                "cVar2": "current_char",
                "dcgettext": "get_string",
                "error": "print_error",
                "extraout_RDX": "remaining_length",
                "lVar1": "length",
                "param_1": "param",
                "param_2": "input_string",
                "pcVar3": "current_ptr",
                "pcVar4": "last_slash",
                "uVar5": "error_message",
                "uVar6": "remaining_length",
                "uVar7": "slash_offset",
                "unaff_RBX": "file_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102cc4": {
            "additional_data": {
                "FUN_00102cc4": {
                    "1": "decompressed_file_path",
                    "2": "extract_filename",
                    "21": "extract_file_name"
                },
                "LVar1": {
                    "1": "new_size"
                },
                "__size": {
                    "1": "malloc_size",
                    "2": "total_length",
                    "3": "allocation_size",
                    "4": "allocated_size",
                    "7": "buffer_size"
                },
                "bVar8": {
                    "1": "negate_flag",
                    "10": "is_negative",
                    "2": "is_slash",
                    "3": "is_forward_slash",
                    "5": "flag"
                },
                "cVar2": {
                    "1": "character",
                    "23": "current_char"
                },
                "dcgettext": {
                    "1": "get_localized_error_message",
                    "2": "get_error_message"
                },
                "error": {
                    "1": "print_error_message",
                    "2": "print_error"
                },
                "lVar1": {
                    "1": "temp_var",
                    "11": "total_length",
                    "2": "new_length",
                    "5": "total_size"
                },
                "param_1": {
                    "1": "full_path",
                    "10": "path",
                    "14": "file_path",
                    "2": "filepath"
                },
                "param_2": {
                    "1": "file_data",
                    "2": "file_content",
                    "4": "source",
                    "9": "file_name"
                },
                "param_3": {
                    "1": "input_length",
                    "12": "length",
                    "2": "string_length",
                    "4": "file_size",
                    "6": "file_name_length"
                },
                "pcVar3": {
                    "1": "new_file_name",
                    "2": "current_char_ptr",
                    "4": "current_char"
                },
                "pcVar4": {
                    "1": "slash_pos",
                    "14": "last_slash",
                    "2": "last_slash_position",
                    "5": "last_slash_ptr"
                },
                "uVar5": {
                    "1": "err_msg",
                    "21": "error_message",
                    "3": "error_msg",
                    "6": "error_string"
                },
                "uVar6": {
                    "1": "copy_length",
                    "18": "remaining_length",
                    "3": "remaining_size",
                    "5": "loop_counter"
                },
                "uVar7": {
                    "1": "path_prefix",
                    "2": "file_path_length",
                    "4": "filename_length",
                    "6": "file_name_length",
                    "9": "path_length"
                }
            },
            "called": [
                "FUN_00102e85",
                "FUN_001020d0",
                "FUN_001021b0"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5"
            ],
            "code": "\nchar * extract_file_name_00102cc4(char *file_path,char *file_name,ulong length)\n\n{\n  ulong buffer_size;\n  long total_length;\n  char current_char;\n  char *current_char;\n  char *last_slash;\n  undefined8 error_message;\n  ulong remaining_length;\n  ulong path_length;\n  byte is_negative;\n  \n  is_negative = 0;\n  current_char = file_path;\n  last_slash = file_path;\n  while (current_char = *current_char, current_char != '\\0') {\n    current_char = current_char + 1;\n    if (current_char == '/') {\n      last_slash = current_char;\n    }\n  }\n  if ((*file_name == '/') || (file_path == last_slash)) {\n    if (length + 1 == 0) {\n      return (char *)0x0;\n    }\n    last_slash = (char *)malloc(length + 1);\n    remaining_length = length;\n    current_char = last_slash;\n    if (last_slash != (char *)0x0) {\n      for (; remaining_length != 0; remaining_length = remaining_length - 1) {\n        *current_char = *file_name;\n        file_name = file_name + (ulong)is_negative * -2 + 1;\n        current_char = current_char + (ulong)is_negative * -2 + 1;\n      }\n      last_slash[length] = '\\0';\n      return last_slash;\n    }\n  }\n  else {\n    path_length = (long)last_slash - (long)file_path;\n    total_length = path_length + length;\n    remaining_length = length;\n    if (length <= path_length) {\n      remaining_length = path_length;\n    }\n    buffer_size = total_length + 1;\n    if (buffer_size < remaining_length) {\n      error_message = get_error_message(0,\"Abnormal length of thin archive member name: %lx\\n\",5);\n      print_error(error_message,length);\n      return (char *)0x0;\n    }\n    last_slash = (char *)malloc(buffer_size);\n    current_char = last_slash;\n    if (last_slash != (char *)0x0) {\n      for (; path_length != 0; path_length = path_length - 1) {\n        *current_char = *file_path;\n        file_path = file_path + (ulong)is_negative * -2 + 1;\n        current_char = current_char + (ulong)is_negative * -2 + 1;\n      }\n      for (; length != 0; length = length - 1) {\n        *current_char = *file_name;\n        file_name = file_name + (ulong)is_negative * -2 + 1;\n        current_char = current_char + (ulong)is_negative * -2 + 1;\n      }\n      last_slash[total_length] = '\\0';\n      return last_slash;\n    }\n  }\n  error_message = get_error_message(0,\"Out of memory\\n\",5);\n  print_error(error_message);\n  return (char *)0x0;\n}\n\n",
            "current_name": "extract_file_name_00102cc4",
            "entrypoint": "0x00102cc4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102cc4": "extract_file_name_00102cc4",
                "__size": "buffer_size",
                "bVar8": "is_negative",
                "cVar2": "current_char",
                "dcgettext": "get_error_message",
                "error": "print_error",
                "lVar1": "total_length",
                "param_1": "file_path",
                "param_2": "file_name",
                "param_3": "length",
                "pcVar3": "current_char",
                "pcVar4": "last_slash",
                "uVar5": "error_message",
                "uVar6": "remaining_length",
                "uVar7": "path_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102da5": {
            "additional_data": {
                "FUN_00102da5": {
                    "11": "print_warning_message",
                    "20": "print_warning"
                },
                "__format": {
                    "1": "format_string",
                    "17": "warning_format",
                    "2": "warning_message_format"
                },
                "_stderr": {
                    "1": "standard_error"
                },
                "_stdout": {
                    "1": "standard_output"
                },
                "in_AL": {
                    "1": "is_warning",
                    "18": "flag",
                    "2": "input_flag",
                    "7": "condition"
                },
                "local_28": {
                    "1": "local8",
                    "4": "local_var13",
                    "5": "local_arg8",
                    "6": "local_param8"
                },
                "local_38": {
                    "1": "input7_copy",
                    "4": "local_var12",
                    "5": "local_arg7",
                    "6": "local_param7"
                },
                "local_48": {
                    "1": "arg6_copy",
                    "4": "local_var11",
                    "5": "local_arg6",
                    "6": "local_param6"
                },
                "local_58": {
                    "1": "input5_copy",
                    "4": "local_var10",
                    "5": "local_arg5",
                    "6": "local_param5"
                },
                "local_68": {
                    "1": "input4_copy",
                    "4": "local_var9",
                    "5": "local_arg4",
                    "6": "local_param4"
                },
                "local_78": {
                    "1": "local_message_3",
                    "4": "local_var8",
                    "5": "local_arg3",
                    "6": "local_param3"
                },
                "local_88": {
                    "1": "local_7",
                    "4": "local_var7",
                    "5": "local_arg2",
                    "6": "local_param2"
                },
                "local_98": {
                    "1": "local_48",
                    "4": "local_var6",
                    "5": "local_arg1",
                    "6": "local_param1"
                },
                "local_a0": {
                    "1": "local_param_14",
                    "12": "local_param14",
                    "2": "local14",
                    "3": "var5",
                    "4": "local_var5"
                },
                "local_a8": {
                    "1": "local_28",
                    "12": "local_param13",
                    "2": "param13_copy",
                    "3": "var4",
                    "4": "local_var4"
                },
                "local_b0": {
                    "1": "variable3",
                    "12": "local_param12",
                    "2": "local12",
                    "3": "var3",
                    "4": "local_var3"
                },
                "local_b8": {
                    "1": "local_2",
                    "12": "local_param11",
                    "2": "param11_copy",
                    "3": "var2",
                    "4": "local_var2"
                },
                "local_c0": {
                    "1": "param_10",
                    "12": "local_param10",
                    "2": "local10",
                    "3": "var1",
                    "4": "local_var1"
                },
                "local_c8": {
                    "1": "temp_buffer",
                    "11": "buffer",
                    "3": "local_variable",
                    "4": "local_array",
                    "5": "local_buffer"
                },
                "local_c8[8]": {
                    "1": "local_variables"
                },
                "local_d0": {
                    "1": "dest_ptr",
                    "2": "ptr2",
                    "5": "pointer2",
                    "7": "buffer"
                },
                "local_d8": {
                    "1": "arg_ptr",
                    "2": "source",
                    "5": "stack_pointer",
                    "7": "pointer1"
                },
                "local_dc": {
                    "1": "padding_value",
                    "2": "constant",
                    "3": "char_value"
                },
                "local_e0": {
                    "1": "buffer_length",
                    "2": "array_size",
                    "3": "count",
                    "7": "length",
                    "8": "buffer_size"
                },
                "param_1": {
                    "1": "file_descriptor",
                    "11": "arg1",
                    "2": "input1",
                    "3": "warning_code"
                },
                "param_10": {
                    "1": "var10",
                    "24": "param10",
                    "4": "param_10"
                },
                "param_11": {
                    "1": "var11",
                    "24": "param11",
                    "4": "param_11"
                },
                "param_12": {
                    "1": "param3",
                    "24": "param12",
                    "4": "param_12"
                },
                "param_13": {
                    "1": "var13",
                    "24": "param13",
                    "4": "param_13"
                },
                "param_14": {
                    "1": "param_5",
                    "24": "param14",
                    "4": "param_14"
                },
                "param_2": {
                    "1": "message_2",
                    "11": "arg2",
                    "2": "input2",
                    "9": "param2"
                },
                "param_3": {
                    "1": "input_param3",
                    "11": "arg3",
                    "2": "input3",
                    "9": "param3"
                },
                "param_4": {
                    "1": "destination_port",
                    "11": "arg4",
                    "2": "input4",
                    "9": "param4"
                },
                "param_5": {
                    "1": "message_5",
                    "11": "arg5",
                    "2": "input5",
                    "9": "param5"
                },
                "param_6": {
                    "1": "msg6",
                    "11": "arg6",
                    "2": "input6",
                    "9": "param6"
                },
                "param_7": {
                    "1": "msg7",
                    "11": "arg7",
                    "2": "param_7",
                    "9": "param7"
                },
                "param_8": {
                    "1": "input_param8",
                    "11": "arg8",
                    "2": "param_8",
                    "9": "param8"
                },
                "param_9": {
                    "1": "warning_string",
                    "13": "message",
                    "4": "format_string",
                    "6": "error_message",
                    "7": "warning_message"
                }
            },
            "called": [
                "FUN_001021c0",
                "FUN_00102230",
                "FUN_00102160",
                "FUN_001020d0"
            ],
            "calling": [],
            "code": "\n\n\nvoid print_warning_00102da5(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4,\n                 undefined4 arg5,undefined4 arg6,undefined4 arg7,undefined4 arg8,\n                 char *message,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  char *warning_format;\n  undefined4 buffer_size;\n  undefined4 char_value;\n  undefined *pointer1;\n  undefined *buffer;\n  undefined buffer [8];\n  undefined8 local_param10;\n  undefined8 local_param11;\n  undefined8 local_param12;\n  undefined8 local_param13;\n  undefined8 local_param14;\n  undefined4 local_param1;\n  undefined4 local_param2;\n  undefined4 local_param3;\n  undefined4 local_param4;\n  undefined4 local_param5;\n  undefined4 local_param6;\n  undefined4 local_param7;\n  undefined4 local_param8;\n  \n  if (flag != '\\0') {\n    local_param1 = arg1;\n    local_param2 = arg2;\n    local_param3 = arg3;\n    local_param4 = arg4;\n    local_param5 = arg5;\n    local_param6 = arg6;\n    local_param7 = arg7;\n    local_param8 = arg8;\n  }\n  local_param10 = param10;\n  local_param11 = param11;\n  local_param12 = param12;\n  local_param13 = param13;\n  local_param14 = param14;\n  fflush(standard_output);\n  pointer1 = &stack0x00000008;\n  buffer = buffer;\n  buffer_size = 8;\n  char_value = 0x30;\n  warning_format = (char *)dcgettext(0,\"%s: Warning: \",5);\n  fprintf(standard_error,warning_format,\"elfedit\");\n  vfprintf(standard_error,message,&buffer_size);\n  return;\n}\n\n",
            "current_name": "print_warning_00102da5",
            "entrypoint": "0x00102da5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102da5": "print_warning_00102da5",
                "__format": "warning_format",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "in_AL": "flag",
                "local_28": "local_param8",
                "local_38": "local_param7",
                "local_48": "local_param6",
                "local_58": "local_param5",
                "local_68": "local_param4",
                "local_78": "local_param3",
                "local_88": "local_param2",
                "local_98": "local_param1",
                "local_a0": "local_param14",
                "local_a8": "local_param13",
                "local_b0": "local_param12",
                "local_b8": "local_param11",
                "local_c0": "local_param10",
                "local_c8": "buffer",
                "local_d0": "buffer",
                "local_d8": "pointer1",
                "local_dc": "char_value",
                "local_e0": "buffer_size",
                "param_1": "arg1",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "param_6": "arg6",
                "param_7": "arg7",
                "param_8": "arg8",
                "param_9": "message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102e85": {
            "additional_data": {
                "FUN_00102e85": {
                    "1": "output_error_message",
                    "24": "print_error_message",
                    "6": "print_error"
                },
                "__format": {
                    "1": "msg_format",
                    "13": "format_string",
                    "3": "error_message_format",
                    "7": "error_format"
                },
                "_stderr": {
                    "1": "error_stream",
                    "2": "stderr",
                    "4": "standard_error"
                },
                "_stdout": {
                    "1": "output_stream",
                    "2": "stdout",
                    "4": "standard_output"
                },
                "dcgettext": {
                    "1": "get_translation",
                    "2": "get_translated_string"
                },
                "fflush": {
                    "1": "flush_stdout",
                    "2": "flush_buffer"
                },
                "fprintf": {
                    "1": "print_to_stream"
                },
                "in_AL": {
                    "1": "toggle",
                    "13": "flag",
                    "2": "is_error",
                    "4": "input_flag",
                    "5": "condition"
                },
                "local_28": {
                    "1": "error_code_local8",
                    "2": "local_error_code8",
                    "3": "error_code8_copy",
                    "4": "local_var13"
                },
                "local_38": {
                    "1": "param7_local",
                    "2": "local_error_code7",
                    "3": "local_param7",
                    "4": "local_var12"
                },
                "local_48": {
                    "1": "param_6_copy",
                    "2": "local_param11",
                    "3": "error_code6_copy",
                    "4": "local_var11"
                },
                "local_58": {
                    "1": "param5_copy",
                    "2": "local_param10",
                    "3": "local_param5",
                    "4": "local_var10"
                },
                "local_68": {
                    "1": "var13",
                    "2": "local_param9",
                    "3": "error_code4",
                    "4": "local_var9"
                },
                "local_78": {
                    "1": "error_code_local3",
                    "2": "local_error_code3",
                    "3": "local_param3",
                    "4": "local_var8"
                },
                "local_88": {
                    "1": "param_2_copy",
                    "2": "local_param7",
                    "3": "error_code2_copy",
                    "4": "local_var7"
                },
                "local_98": {
                    "1": "var10",
                    "2": "local_error_code1",
                    "3": "local_param1",
                    "4": "local_var6"
                },
                "local_a0": {
                    "1": "param_var5",
                    "2": "param14",
                    "3": "local_param14",
                    "4": "param14_copy",
                    "7": "local_var5"
                },
                "local_a8": {
                    "1": "local_var3",
                    "2": "param_d",
                    "3": "local_param13",
                    "4": "param13_copy",
                    "7": "local_var4"
                },
                "local_b0": {
                    "1": "local_value3",
                    "2": "param_c",
                    "3": "local_param12",
                    "4": "param12_copy",
                    "7": "local_var3"
                },
                "local_b8": {
                    "1": "param11_new",
                    "2": "param_b",
                    "3": "local_param11",
                    "4": "param11_copy",
                    "7": "local_var2"
                },
                "local_c0": {
                    "1": "param_var1",
                    "2": "param10",
                    "3": "local_param10",
                    "4": "param10_copy",
                    "7": "local_var1"
                },
                "local_c8": {
                    "1": "local_char_array",
                    "2": "temp_buffer",
                    "6": "local_buffer",
                    "7": "local_array",
                    "8": "buffer"
                },
                "local_d0": {
                    "1": "local_var4",
                    "2": "buffer",
                    "4": "pointer2",
                    "8": "local_buffer"
                },
                "local_d8": {
                    "1": "address_ptr",
                    "2": "stack_ptr",
                    "5": "pointer1",
                    "7": "stack_pointer"
                },
                "local_dc": {
                    "1": "alignment",
                    "2": "constant",
                    "3": "value"
                },
                "local_e0": {
                    "1": "buffer_length",
                    "10": "buffer_size",
                    "2": "count",
                    "4": "length"
                },
                "param_1": {
                    "1": "input1",
                    "11": "error_code",
                    "3": "error1",
                    "7": "error_code1"
                },
                "param_10": {
                    "1": "param_10",
                    "2": "param_1",
                    "24": "param10",
                    "3": "param1"
                },
                "param_11": {
                    "1": "param_11",
                    "2": "param_2",
                    "24": "param11",
                    "3": "param2"
                },
                "param_12": {
                    "1": "param_12",
                    "2": "param_3",
                    "24": "param12",
                    "3": "param3"
                },
                "param_13": {
                    "1": "param_13",
                    "2": "param_4",
                    "24": "param13",
                    "3": "param4"
                },
                "param_14": {
                    "1": "param_14",
                    "2": "param_5",
                    "24": "param14",
                    "3": "param5"
                },
                "param_2": {
                    "1": "input2",
                    "12": "param2",
                    "3": "error2",
                    "7": "error_code2"
                },
                "param_3": {
                    "1": "input3",
                    "12": "param3",
                    "3": "error3",
                    "7": "error_code3"
                },
                "param_4": {
                    "1": "input4",
                    "12": "param4",
                    "3": "error4",
                    "7": "error_code4"
                },
                "param_5": {
                    "1": "header_ptr",
                    "12": "param5",
                    "3": "error5",
                    "7": "error_code5"
                },
                "param_6": {
                    "1": "program_ptr",
                    "12": "param6",
                    "3": "error6",
                    "7": "error_code6"
                },
                "param_7": {
                    "1": "segment_ptr",
                    "12": "param7",
                    "3": "error7",
                    "7": "error_code7"
                },
                "param_8": {
                    "1": "param_8",
                    "12": "param8",
                    "3": "error8",
                    "7": "error_code8"
                },
                "param_9": {
                    "1": "format_string",
                    "30": "error_message"
                },
                "stack0x00000008": {
                    "1": "stack_string"
                },
                "vfprintf": {
                    "1": "v_print_to_stream"
                }
            },
            "called": [
                "FUN_00102230",
                "FUN_001021c0",
                "FUN_00102160",
                "FUN_001020d0"
            ],
            "calling": [
                "FUN_001024ec",
                "FUN_0010234b",
                "FUN_001028be",
                "FUN_00102c98",
                "FUN_00104da0",
                "FUN_001022c0",
                "FUN_00102434",
                "FUN_00102cc4",
                "FUN_0010354e",
                "FUN_00104de0",
                "FUN_0010358d",
                "FUN_001029a5",
                "FUN_0010289a",
                "FUN_00103bf0",
                "FUN_00102558",
                "FUN_00102323",
                "FUN_0010347f",
                "FUN_001025ab"
            ],
            "code": "\n\n\nvoid print_error_message_00102e85(undefined4 error_code,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 char *error_message,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  char *format_string;\n  undefined4 buffer_size;\n  undefined4 value;\n  undefined *stack_pointer;\n  undefined *local_buffer;\n  undefined buffer [8];\n  undefined8 local_var1;\n  undefined8 local_var2;\n  undefined8 local_var3;\n  undefined8 local_var4;\n  undefined8 local_var5;\n  undefined4 local_var6;\n  undefined4 local_var7;\n  undefined4 local_var8;\n  undefined4 local_var9;\n  undefined4 local_var10;\n  undefined4 local_var11;\n  undefined4 local_var12;\n  undefined4 local_var13;\n  \n  if (flag != '\\0') {\n    local_var6 = error_code;\n    local_var7 = param2;\n    local_var8 = param3;\n    local_var9 = param4;\n    local_var10 = param5;\n    local_var11 = param6;\n    local_var12 = param7;\n    local_var13 = param8;\n  }\n  local_var1 = param10;\n  local_var2 = param11;\n  local_var3 = param12;\n  local_var4 = param13;\n  local_var5 = param14;\n  flush_buffer(standard_output);\n  stack_pointer = &stack_string;\n  local_buffer = buffer;\n  buffer_size = 8;\n  value = 0x30;\n  format_string = (char *)get_translated_string(0,\"%s: Error: \",5);\n  print_to_stderr(standard_error,format_string,\"elfedit\");\n  print_var_args_to_stderr(standard_error,error_message,&buffer_size);\n  return;\n}\n\n",
            "current_name": "print_error_message_00102e85",
            "entrypoint": "0x00102e85",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102e85": "print_error_message_00102e85",
                "__format": "format_string",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "dcgettext": "get_translated_string",
                "fflush": "flush_buffer",
                "fprintf": "print_to_stderr",
                "in_AL": "flag",
                "local_28": "local_var13",
                "local_38": "local_var12",
                "local_48": "local_var11",
                "local_58": "local_var10",
                "local_68": "local_var9",
                "local_78": "local_var8",
                "local_88": "local_var7",
                "local_98": "local_var6",
                "local_a0": "local_var5",
                "local_a8": "local_var4",
                "local_b0": "local_var3",
                "local_b8": "local_var2",
                "local_c0": "local_var1",
                "local_c8": "buffer",
                "local_d0": "local_buffer",
                "local_d8": "stack_pointer",
                "local_dc": "value",
                "local_e0": "buffer_size",
                "param_1": "error_code",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "error_message",
                "stack0x00000008": "stack_string",
                "vfprintf": "print_var_args_to_stderr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102f65": {
            "additional_data": {
                "(*param_1)[3]": {
                    "1": "memory_block1"
                },
                "(*param_1)[4]": {
                    "1": "memory_block2"
                },
                "(*param_1)[6]": {
                    "1": "memory_block3"
                },
                "(undefined (*) [16])(param_1 + 3)": {
                    "1": "array_3"
                },
                "(void *)0x0": {
                    "1": "null"
                },
                "*(undefined (*) [16])(param_1 + 3)": {
                    "1": "array"
                },
                "*param_1": {
                    "1": "first_memory_block",
                    "3": "memory[0]"
                },
                "FUN_00102f65": {
                    "1": "free_memory_contents",
                    "13": "free_memory",
                    "2": "free_pointers_and_reset",
                    "3": "free_memory_and_reset",
                    "6": "clear_memory"
                },
                "ZEXT816": {
                    "1": "zero_extended"
                },
                "ZEXT816(0)": {
                    "1": "zero"
                },
                "memory": {
                    "1": "memory"
                },
                "param_1": {
                    "1": "memory_pointer",
                    "2": "pointers_array",
                    "4": "memory_pointers",
                    "5": "pointers",
                    "7": "memory"
                },
                "param_1[3]": {
                    "1": "pointer2",
                    "3": "data1",
                    "4": "block3",
                    "5": "pointer3"
                },
                "param_1[4]": {
                    "1": "fourth_pointer",
                    "3": "memory[4]",
                    "4": "block4",
                    "5": "pointer4"
                },
                "param_1[6]": {
                    "1": "pointer6_content",
                    "3": "memory[6]",
                    "4": "block6",
                    "5": "pointer6"
                }
            },
            "called": [
                "FUN_00102030"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5"
            ],
            "code": "\nvoid free_memory_00102f65(void **memory)\n\n{\n  free(*memory);\n  free(pointer3);\n  free(pointer4);\n  free(pointer6);\n  *memory = (void *)0x0;\n  pointer6 = (void *)0x0;\n  *(undefined (*) [16])(memory + 3) = zero;\n  return;\n}\n\n",
            "current_name": "free_memory_00102f65",
            "entrypoint": "0x00102f65",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102f65": "free_memory_00102f65",
                "ZEXT816": "zero_extended",
                "ZEXT816(0)": "zero",
                "param_1": "memory",
                "param_1[3]": "pointer3",
                "param_1[4]": "pointer4",
                "param_1[6]": "pointer6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102fa0": {
            "additional_data": {
                "&DAT_00107040": {
                    "1": "character_flags_ptr"
                },
                "**param_1": {
                    "1": "current_char"
                },
                "*param_1": {
                    "1": "data",
                    "2": "data_pointer"
                },
                "*param_1 + 1": {
                    "1": "next_char"
                },
                "DAT_00107040": {
                    "2": "character_flags"
                },
                "FUN_00102fa0": {
                    "1": "skip_characters",
                    "2": "skip_non_ascii_characters",
                    "3": "skip_whitespace",
                    "5": "skip_non_printable_chars"
                },
                "PARAM_1": {
                    "1": "input"
                },
                "input": {
                    "1": "input"
                },
                "param_1": {
                    "1": "data",
                    "2": "buffer",
                    "3": "input",
                    "4": "data_ptr",
                    "6": "data_pointer"
                }
            },
            "called": [],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nvoid skip_non_printable_chars_00102fa0(byte **data_pointer)\n\n{\n  while (((&DAT_00107040)[(ulong)**data_pointer * 2] & 0x40) != 0) {\n    *data_pointer = *data_pointer + 1;\n  }\n  return;\n}\n\n",
            "current_name": "skip_non_printable_chars_00102fa0",
            "entrypoint": "0x00102fa0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102fa0": "skip_non_printable_chars_00102fa0",
                "param_1": "data_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102fbc": {
            "additional_data": {
                "DAT_": {
                    "1": "dat_"
                },
                "DAT_00102fbc": {
                    "1": ""
                },
                "DAT_1": {
                    "1": "data_1"
                },
                "FUN_00102fbc": {
                    "1": "exit_bad_path",
                    "24": "exit_program",
                    "5": "exit_with_error"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "PTR_00102fbc": {
                    "1": ""
                },
                "PTR_1": {
                    "1": "pointer_1"
                },
                "[No parameters]": {
                    "1": ""
                },
                "[No variables]": {
                    "1": ""
                },
                "exit": {
                    "1": "exit_function"
                }
            },
            "called": [
                "FUN_00102250"
            ],
            "calling": [
                "FUN_00103bf0",
                "FUN_00102fc7"
            ],
            "code": "\nvoid exit_program_00102fbc(void)\n\n{\n                    \n  exit_status(1);\n}\n\n",
            "current_name": "exit_program_00102fbc",
            "entrypoint": "0x00102fbc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102fbc": "exit_program_00102fbc",
                "exit": "exit_status"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102fc7": {
            "additional_data": {
                "FUN_00102fc7": {
                    "1": "allocate_and_format_error_message",
                    "10": "allocate_memory",
                    "2": "allocate_memory_and_copy",
                    "3": "format_error_message",
                    "8": "allocate_memory_and_copy_strings"
                },
                "__ptr": {
                    "1": "standard_error_ptr",
                    "2": "stderr",
                    "3": "error_output",
                    "4": "error_file",
                    "5": "file_pointer"
                },
                "__s": {
                    "1": "string",
                    "2": "format_str",
                    "21": "format_string"
                },
                "apcStack_e0": {
                    "1": "temp_array",
                    "2": "stack_array",
                    "7": "string_stack",
                    "8": "string_array"
                },
                "apcStack_e0[2]": {
                    "1": "current_arg_copy"
                },
                "apcStack_e0[3]": {
                    "1": "empty_string"
                },
                "bVar9": {
                    "1": "is_odd",
                    "3": "loop_flag",
                    "4": "byte_value",
                    "5": "flag"
                },
                "cVar1": {
                    "1": "exit_status",
                    "16": "exit_flag",
                    "2": "return_value",
                    "3": "char_value",
                    "4": "result"
                },
                "extraout_RDX": {
                    "1": "additional_data_rdx",
                    "2": "extra_output1",
                    "3": "extra_rdx"
                },
                "extraout_XMM0_Qa": {
                    "1": "extra_value2",
                    "3": "extra_xmm0_qa"
                },
                "lStack_b8": {
                    "1": "current_heap_copy",
                    "2": "l_stack_b8",
                    "3": "base_address"
                },
                "lVar7": {
                    "1": "counter",
                    "9": "total_length"
                },
                "param_1": {
                    "1": "param",
                    "13": "size",
                    "2": "total_bytes",
                    "3": "input_size"
                },
                "pcVar1": {
                    "1": "exit_flag"
                },
                "pcVar10": {
                    "1": "pointer_array"
                },
                "pcVar5": {
                    "1": "constructed_string",
                    "10": "allocated_memory",
                    "2": "result_string",
                    "7": "result"
                },
                "pcVar6": {
                    "1": "current_string"
                },
                "pcVar8": {
                    "1": "new_string_ptr",
                    "10": "current_char",
                    "2": "new_string",
                    "3": "result_ptr"
                },
                "ppcVar10": {
                    "1": "pointer_to_current_pointer",
                    "2": "string_array"
                },
                "ppcVar11": {
                    "1": "previous_string_array_ptr",
                    "2": "next_string_array",
                    "3": "temp_pointer2"
                },
                "ppcVar6": {
                    "1": "arr_pointer",
                    "4": "string_array",
                    "7": "current_string"
                },
                "pvVar2": {
                    "1": "current_end",
                    "2": "pointer_value",
                    "3": "heap_end",
                    "4": "current_break",
                    "8": "current_brk"
                },
                "sVar3": {
                    "1": "size",
                    "17": "string_length",
                    "2": "length",
                    "3": "str_len",
                    "5": "str_length"
                },
                "uStack_28": {
                    "1": "extra_return_value_ptr",
                    "2": "u_stack_28"
                },
                "uStack_b0": {
                    "1": "extraout_param",
                    "2": "extra_output",
                    "3": "extra_param"
                },
                "uStack_c0": {
                    "1": "size_copy",
                    "2": "u_stack_c0",
                    "3": "param_1_copy",
                    "4": "param1"
                },
                "uStack_f8": {
                    "1": "stack_var_f8",
                    "2": "offset",
                    "3": "u_stack_f8",
                    "8": "stack_size"
                },
                "uVar4": {
                    "1": "loop_counter",
                    "2": "temp",
                    "5": "temp_var"
                }
            },
            "called": [
                "FUN_00102fbc",
                "FUN_00102140",
                "FUN_00102160"
            ],
            "calling": [
                "FUN_00103449",
                "FUN_00102cbc"
            ],
            "code": "\n\n\nchar * allocate_memory_00102fc7(undefined8 size)\n\n{\n  char exit_flag;\n  void *current_brk;\n  size_t string_length;\n  ulong temp_var;\n  char *allocated_memory;\n  char **current_string;\n  undefined8 extra_rdx;\n  long total_length;\n  char *format_string;\n  FILE *error_stream;\n  char *current_char;\n  byte flag;\n  undefined8 extra_xmm0_qa;\n  uint stack_size;\n  char **stack_pointer;\n  char **temp_pointer2;\n  char *string_array [4];\n  undefined8 param1;\n  long base_address;\n  undefined8 extra_param;\n  undefined8 param3;\n  \n  flag = 0;\n  current_brk = sbrk(0);\n  base_address = (long)current_brk + -0x10a0e0;\n  empty_string = \"\";\n  format_string = \"\\n%s%sout of memory allocating %lu bytes after a total of %lu bytes\\n\";\n  error_stream = _stderr;\n  param1 = size;\n  fprintf(_stderr,\"\\n%s%sout of memory allocating %lu bytes after a total of %lu bytes\\n\");\n  exit_flag = xexit_constprop_0();\n  if (exit_flag != '\\0') {\n    extra_param = extra_xmm0_qa;\n  }\n  total_length = 0;\n  stack_size = 0x10;\n  current_char = format_string;\n  stack_pointer = (char **)register0x00000020;\n  extra = (char *)extra_rdx;\n  param3 = size;\n  do {\n    string_length = strlen(current_char);\n    total_length = total_length + string_length;\n    if (stack_size < 0x30) {\n      temp_var = (ulong)stack_size;\n      stack_size = stack_size + 8;\n      current_string = (char **)((long)string_array + temp_var);\n      temp_pointer2 = stack_pointer;\n    }\n    else {\n      temp_pointer2 = stack_pointer + 1;\n      current_string = stack_pointer;\n    }\n    current_char = *current_string;\n    stack_pointer = temp_pointer2;\n  } while (current_char != (char *)0x0);\n  allocated_memory = (char *)xmalloc(total_length + 1);\n  stack_size = 0x10;\n  current_char = allocated_memory;\n  stack_pointer = (char **)register0x00000020;\n  do {\n    string_length = strlen(format_string);\n    for (; string_length != 0; string_length = string_length - 1) {\n      *current_char = *format_string;\n      format_string = format_string + (ulong)flag * -2 + 1;\n      current_char = current_char + (ulong)flag * -2 + 1;\n    }\n    if (stack_size < 0x30) {\n      temp_var = (ulong)stack_size;\n      stack_size = stack_size + 8;\n      current_string = (char **)((long)string_array + temp_var);\n      temp_pointer2 = stack_pointer;\n    }\n    else {\n      temp_pointer2 = stack_pointer + 1;\n      current_string = stack_pointer;\n    }\n    format_string = *current_string;\n    stack_pointer = temp_pointer2;\n  } while (format_string != (char *)0x0);\n  *current_char = '\\0';\n  free(error_stream);\n  return allocated_memory;\n}\n\n",
            "current_name": "allocate_memory_00102fc7",
            "entrypoint": "0x00102fc7",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102fc7": "allocate_memory_00102fc7",
                "__ptr": "error_stream",
                "__s": "format_string",
                "apcStack_e0": "string_array",
                "apcStack_e0[2]": "extra",
                "apcStack_e0[3]": "empty_string",
                "bVar9": "flag",
                "cVar1": "exit_flag",
                "extraout_RDX": "extra_rdx",
                "extraout_XMM0_Qa": "extra_xmm0_qa",
                "lStack_b8": "base_address",
                "lVar7": "total_length",
                "param_1": "size",
                "pcVar1": "exit_flag",
                "pcVar10": "pointer_array",
                "pcVar5": "allocated_memory",
                "pcVar6": "temp_pointer1",
                "pcVar8": "current_char",
                "ppcVar10": "stack_pointer",
                "ppcVar11": "temp_pointer2",
                "ppcVar6": "current_string",
                "pvVar2": "current_brk",
                "sVar3": "string_length",
                "uStack_28": "param3",
                "uStack_b0": "extra_param",
                "uStack_c0": "param1",
                "uStack_f8": "stack_size",
                "uVar4": "temp_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103006": {
            "additional_data": {
                "FUN_00103006": {
                    "1": "allocate_concatenated_string",
                    "2": "copy_and_concatenate_strings",
                    "3": "reverse_string_concatenation",
                    "5": "concatenate_strings"
                },
                "bVar7": {
                    "1": "byte_value",
                    "2": "byte_flag",
                    "3": "flag2",
                    "7": "byte_var"
                },
                "in_AL": {
                    "1": "null_terminator",
                    "15": "flag",
                    "3": "input_flag"
                },
                "lVar5": {
                    "1": "loop_var",
                    "25": "total_length"
                },
                "local_38": {
                    "1": "input_param_8",
                    "2": "local_flag8",
                    "3": "local_param8"
                },
                "local_48": {
                    "1": "local_48",
                    "2": "local_var_48",
                    "3": "local_param7"
                },
                "local_58": {
                    "1": "param_6_copy",
                    "2": "local_var_58",
                    "3": "local_param6"
                },
                "local_68": {
                    "1": "flag5",
                    "2": "input5_copy",
                    "3": "local_param5"
                },
                "local_78": {
                    "1": "local_78",
                    "2": "input4_copy",
                    "3": "local_param4"
                },
                "local_88": {
                    "1": "local_data5",
                    "2": "input3_copy",
                    "3": "local_param3"
                },
                "local_98": {
                    "1": "val6",
                    "2": "input2_copy",
                    "3": "local_param2"
                },
                "local_a8": {
                    "1": "param1_ptr",
                    "2": "local_flag1",
                    "3": "local_param1"
                },
                "local_b0": {
                    "1": "local_number2",
                    "2": "param14"
                },
                "local_b8": {
                    "1": "long_var3",
                    "2": "local_var_b8"
                },
                "local_d8": {
                    "1": "local_string_array",
                    "2": "local_var_d8",
                    "3": "local_array"
                },
                "local_d8[2]": {
                    "1": "param11_ptr"
                },
                "local_d8[3]": {
                    "1": "param12_ptr"
                },
                "local_e8": {
                    "1": "str_ptr_array",
                    "2": "local_string_array"
                },
                "local_f0": {
                    "1": "local_counter",
                    "2": "local_var_f0",
                    "4": "counter",
                    "8": "stack_size"
                },
                "param_1": {
                    "1": "size1",
                    "2": "input_1",
                    "3": "param1",
                    "4": "flag1",
                    "7": "input1"
                },
                "param_10": {
                    "1": "dest_string",
                    "2": "string1",
                    "3": "str",
                    "4": "input_string",
                    "7": "string_array"
                },
                "param_11": {
                    "1": "data1",
                    "2": "param1",
                    "8": "param11"
                },
                "param_12": {
                    "1": "ptr2",
                    "2": "input_long2",
                    "8": "param12"
                },
                "param_13": {
                    "1": "input_param13",
                    "2": "param_13",
                    "8": "param13"
                },
                "param_14": {
                    "1": "input_param14",
                    "2": "arg14",
                    "8": "param14"
                },
                "param_2": {
                    "1": "b",
                    "2": "str2",
                    "3": "param2",
                    "4": "flag2",
                    "7": "input2"
                },
                "param_3": {
                    "1": "input_param3",
                    "2": "input_3",
                    "3": "param3",
                    "4": "flag3",
                    "7": "input3"
                },
                "param_4": {
                    "1": "var4",
                    "2": "str4",
                    "3": "param4",
                    "4": "arg4",
                    "7": "input4"
                },
                "param_5": {
                    "1": "fifth_arg",
                    "2": "input_5",
                    "3": "param5",
                    "4": "arg5",
                    "7": "input5"
                },
                "param_6": {
                    "1": "input_param6",
                    "2": "str6",
                    "3": "param6",
                    "4": "flag6",
                    "7": "input6"
                },
                "param_7": {
                    "1": "seventh_arg",
                    "2": "input_7",
                    "3": "param7",
                    "4": "flag7",
                    "7": "input7"
                },
                "param_8": {
                    "1": "input_param8",
                    "2": "input_8",
                    "3": "param8",
                    "4": "flag8",
                    "7": "input8"
                },
                "param_9": {
                    "1": "input_param_9",
                    "2": "data",
                    "3": "allocated_memory",
                    "4": "buffer",
                    "5": "memory_block"
                },
                "pcVar3": {
                    "1": "reversed_string",
                    "14": "result",
                    "2": "combined_string",
                    "3": "concatenated_string",
                    "9": "result_string"
                },
                "pcVar4": {
                    "1": "string_ptr"
                },
                "pcVar6": {
                    "1": "temp_char_output",
                    "11": "current_char",
                    "2": "curr_char",
                    "6": "current_string"
                },
                "ppcVar4": {
                    "1": "str_array_ptr",
                    "2": "pointer_to_pointer",
                    "3": "current_string_ptr",
                    "4": "current_string"
                },
                "sVar1": {
                    "1": "len",
                    "14": "string_length",
                    "3": "str_length",
                    "6": "length"
                },
                "uVar2": {
                    "1": "counter",
                    "2": "tmp",
                    "4": "temp",
                    "8": "temp_var"
                }
            },
            "called": [
                "FUN_001020e0",
                "FUN_00105370",
                "FUN_00102030"
            ],
            "calling": [
                "FUN_001032de"
            ],
            "code": "\nchar * concatenate_strings_00103006(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                   undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                   void *memory_block,char *string_array,undefined8 param11,undefined8 param12,\n                   undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  size_t string_length;\n  ulong temp_var;\n  char *result;\n  char **current_string;\n  long total_length;\n  char *current_char;\n  byte byte_var;\n  uint stack_size;\n  char **ptr_array;\n  char *local_array [4];\n  undefined8 param13;\n  undefined8 param14;\n  undefined4 local_param1;\n  undefined4 local_param2;\n  undefined4 local_param3;\n  undefined4 local_param4;\n  undefined4 local_param5;\n  undefined4 local_param6;\n  undefined4 local_param7;\n  undefined4 local_param8;\n  \n  byte_var = 0;\n  if (flag != '\\0') {\n    local_param1 = input1;\n    local_param2 = input2;\n    local_param3 = input3;\n    local_param4 = input4;\n    local_param5 = input5;\n    local_param6 = input6;\n    local_param7 = input7;\n    local_param8 = input8;\n  }\n  ptr_array = (char **)&stack0x00000008;\n  total_length = 0;\n  stack_size = 0x10;\n  current_char = string_array;\n  param11_ptr = (char *)param11;\n  param12_ptr = (char *)param12;\n  param13 = param13;\n  param14 = param14;\n  do {\n    string_length = strlen(current_char);\n    total_length = total_length + string_length;\n    if (stack_size < 0x30) {\n      temp_var = (ulong)stack_size;\n      stack_size = stack_size + 8;\n      current_string = (char **)((long)local_array + temp_var);\n    }\n    else {\n      current_string = ptr_array;\n      ptr_array = ptr_array + 1;\n    }\n    current_char = *current_string;\n  } while (current_char != (char *)0x0);\n  result = (char *)xmalloc(total_length + 1);\n  stack_size = 0x10;\n  ptr_array = (char **)&stack0x00000008;\n  current_char = result;\n  do {\n    string_length = strlen(string_array);\n    for (; string_length != 0; string_length = string_length - 1) {\n      *current_char = *string_array;\n      string_array = string_array + (ulong)byte_var * -2 + 1;\n      current_char = current_char + (ulong)byte_var * -2 + 1;\n    }\n    if (stack_size < 0x30) {\n      temp_var = (ulong)stack_size;\n      stack_size = stack_size + 8;\n      current_string = (char **)((long)local_array + temp_var);\n    }\n    else {\n      current_string = ptr_array;\n      ptr_array = ptr_array + 1;\n    }\n    string_array = *current_string;\n  } while (string_array != (char *)0x0);\n  *current_char = '\\0';\n  free(memory_block);\n  return result;\n}\n\n",
            "current_name": "concatenate_strings_00103006",
            "entrypoint": "0x00103006",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103006": "concatenate_strings_00103006",
                "bVar7": "byte_var",
                "in_AL": "flag",
                "lVar5": "total_length",
                "local_38": "local_param8",
                "local_48": "local_param7",
                "local_58": "local_param6",
                "local_68": "local_param5",
                "local_78": "local_param4",
                "local_88": "local_param3",
                "local_98": "local_param2",
                "local_a8": "local_param1",
                "local_b0": "param14",
                "local_b8": "param13",
                "local_d8": "local_array",
                "local_d8[2]": "param11_ptr",
                "local_d8[3]": "param12_ptr",
                "local_e8": "ptr_array",
                "local_f0": "stack_size",
                "param_1": "input1",
                "param_10": "string_array",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "memory_block",
                "pcVar3": "result",
                "pcVar4": "string_ptr",
                "pcVar6": "current_char",
                "ppcVar4": "current_string",
                "sVar1": "string_length",
                "uVar2": "temp_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103160": {
            "additional_data": {
                "FUN_00103160": {
                    "1": "copy_and_increment_string",
                    "29": "copy_string"
                },
                "bVar4": {
                    "1": "increment_index",
                    "2": "byte_counter",
                    "3": "index",
                    "6": "byte_var",
                    "7": "counter",
                    "8": "offset"
                },
                "lVar3": {
                    "1": "new_length",
                    "2": "string_length",
                    "3": "copied_length",
                    "5": "copy_length",
                    "9": "length_plus_one"
                },
                "param_1": {
                    "1": "src_string",
                    "11": "input_string",
                    "17": "source_string",
                    "2": "source"
                },
                "pcVar2": {
                    "1": "new_string",
                    "22": "copied_string",
                    "6": "destination_string"
                },
                "sVar1": {
                    "1": "source_string_length",
                    "12": "source_length",
                    "15": "string_length",
                    "2": "length"
                }
            },
            "called": [
                "FUN_001020e0",
                "FUN_00105370"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_00103bf0"
            ],
            "code": "\nvoid copy_string_00103160(char *source_string)\n\n{\n  size_t string_length;\n  char *copied_string;\n  long length_plus_one;\n  byte offset;\n  \n  offset = 0;\n  string_length = strlen(source_string);\n  length_plus_one = string_length + 1;\n  copied_string = (char *)xmalloc(length_plus_one);\n  for (; length_plus_one != 0; length_plus_one = length_plus_one + -1) {\n    *copied_string = *source_string;\n    source_string = source_string + (ulong)offset * -2 + 1;\n    copied_string = copied_string + (ulong)offset * -2 + 1;\n  }\n  return;\n}\n\n",
            "current_name": "copy_string_00103160",
            "entrypoint": "0x00103160",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103160": "copy_string_00103160",
                "bVar4": "offset",
                "lVar3": "length_plus_one",
                "param_1": "source_string",
                "pcVar2": "copied_string",
                "sVar1": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103186": {
            "additional_data": {
                "FUNK1_FUN_00103186": {
                    "1": "reverse_string"
                },
                "FUN_00103186": {
                    "1": "create_dynamic_string",
                    "2": "create_concatenated_string",
                    "3": "generate_concatenated_string",
                    "4": "reverse_string_concatenation",
                    "5": "reverse_and_concatenate_strings"
                },
                "bVar8": {
                    "1": "use_temp_index",
                    "2": "flag_value",
                    "3": "loop_flag",
                    "6": "flag"
                },
                "in_AL": {
                    "1": "boolean_value",
                    "12": "flag",
                    "2": "condition_flag",
                    "3": "is_not_null"
                },
                "lVar5": {
                    "1": "len",
                    "15": "total_length",
                    "2": "total_len"
                },
                "local_28": {
                    "1": "local_12",
                    "2": "input_param8_copy",
                    "3": "local_var_28"
                },
                "local_38": {
                    "1": "local_param7",
                    "2": "input_param7_copy",
                    "3": "input7_copy"
                },
                "local_48": {
                    "1": "argument6_copy",
                    "2": "input_param6_copy",
                    "3": "local_var_48"
                },
                "local_58": {
                    "1": "param5_copy",
                    "2": "input_param5_copy",
                    "3": "input5_copy"
                },
                "local_68": {
                    "1": "local_8",
                    "2": "input_param4_copy",
                    "3": "input4_copy"
                },
                "local_78": {
                    "1": "local_7",
                    "2": "input_param3_copy",
                    "3": "input3_copy"
                },
                "local_88": {
                    "1": "second_param_copy",
                    "2": "input_param2_copy",
                    "3": "input2_copy"
                },
                "local_98": {
                    "1": "local1",
                    "2": "input_param1_copy",
                    "3": "input1_copy"
                },
                "local_a0": {
                    "1": "address_ptr2",
                    "2": "input_param14_copy",
                    "3": "local_var_a0"
                },
                "local_a8": {
                    "1": "param13_temp",
                    "2": "input_param13_copy",
                    "3": "local_var_a8"
                },
                "local_c8": {
                    "1": "local_string_array",
                    "2": "local_var_c8",
                    "3": "address_array",
                    "5": "string_array",
                    "8": "param_array"
                },
                "local_d8": {
                    "1": "temp_string_pointer_array",
                    "2": "stack_ptr",
                    "3": "local_var_d8",
                    "4": "string_array"
                },
                "local_e0": {
                    "1": "loop_var",
                    "2": "local_size",
                    "3": "local_var_e0",
                    "4": "local_counter",
                    "6": "counter"
                },
                "param_1": {
                    "1": "default_value1",
                    "13": "input1",
                    "2": "input_param1",
                    "4": "input_1"
                },
                "param_10": {
                    "1": "input9",
                    "2": "input_10",
                    "3": "string1",
                    "7": "param10"
                },
                "param_11": {
                    "1": "arg11",
                    "2": "eleventh_param",
                    "3": "string2",
                    "7": "param11"
                },
                "param_12": {
                    "1": "address_4",
                    "2": "address4",
                    "3": "string3",
                    "7": "param12"
                },
                "param_13": {
                    "1": "long_input5",
                    "2": "input_param13",
                    "7": "param13"
                },
                "param_14": {
                    "1": "unused6",
                    "2": "input_param14",
                    "7": "param14"
                },
                "param_2": {
                    "1": "buffer2",
                    "13": "input2",
                    "2": "input_param2",
                    "4": "input_2"
                },
                "param_3": {
                    "1": "default_value3",
                    "13": "input3",
                    "2": "input_param3",
                    "4": "input_3"
                },
                "param_4": {
                    "1": "argument4",
                    "13": "input4",
                    "2": "input_param4",
                    "4": "input_4"
                },
                "param_5": {
                    "1": "var_5",
                    "13": "input5",
                    "2": "arg5",
                    "4": "input_5"
                },
                "param_6": {
                    "1": "argument6",
                    "13": "input6",
                    "2": "input_param6",
                    "4": "input_6"
                },
                "param_7": {
                    "1": "argument7",
                    "13": "input7",
                    "2": "param7",
                    "4": "input_7"
                },
                "param_8": {
                    "1": "buffer8",
                    "13": "input8",
                    "2": "input_param8",
                    "4": "input_8"
                },
                "param_9": {
                    "1": "input_value1",
                    "2": "address1",
                    "5": "param9"
                },
                "pcVar3": {
                    "1": "allocated_memory",
                    "13": "result_string",
                    "2": "concatenated_string",
                    "7": "result"
                },
                "pcVar4": {
                    "1": "current_str",
                    "2": "string_ptr"
                },
                "pcVar6": {
                    "1": "current_string_ptr",
                    "2": "str",
                    "20": "current_string"
                },
                "pcVar7": {
                    "1": "new_string",
                    "2": "output_ptr",
                    "3": "output_string",
                    "4": "result_ptr",
                    "5": "current_char"
                },
                "ppcVar4": {
                    "1": "ptr_array",
                    "2": "string_pointer"
                },
                "sVar1": {
                    "1": "current_string_length",
                    "14": "string_length",
                    "2": "length",
                    "4": "str_len"
                },
                "stack0x00000008": {
                    "1": "stack_size"
                },
                "uVar2": {
                    "1": "converted",
                    "2": "index"
                }
            },
            "called": [
                "FUN_001020e0",
                "FUN_00105370"
            ],
            "calling": [
                "FUN_001032de"
            ],
            "code": "\nchar * reverse_and_concatenate_strings_00103186(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                   undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                   undefined8 param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                   undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  size_t string_length;\n  ulong offset;\n  char *result_string;\n  char **string_pointer;\n  long total_length;\n  char *current_string;\n  char *current_char;\n  byte flag;\n  uint counter;\n  char **string_array;\n  char *param_array [4];\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  undefined4 input5_copy;\n  undefined4 input6_copy;\n  undefined4 input7_copy;\n  undefined4 input8_copy;\n  \n  flag = 0;\n  if (flag != '\\0') {\n    input1_copy = input1;\n    input2_copy = input2;\n    input3_copy = input3;\n    input4_copy = input4;\n    input5_copy = input5;\n    input6_copy = input6;\n    input7_copy = input7;\n    input8_copy = input8;\n  }\n  string_array = (char **)&stack_size;\n  total_length = 0;\n  counter = 8;\n  current_string = \"none\";\n  param_array[1] = (char *)param10;\n  param_array[2] = (char *)param11;\n  param_array[3] = (char *)param12;\n  param13_copy = param13;\n  param14_copy = param14;\n  do {\n    string_length = strlen(current_string);\n    total_length = total_length + string_length;\n    if (counter < 0x30) {\n      offset = (ulong)counter;\n      counter = counter + 8;\n      string_pointer = (char **)((long)param_array + offset);\n    }\n    else {\n      string_pointer = string_array;\n      string_array = string_array + 1;\n    }\n    current_string = *string_pointer;\n  } while (current_string != (char *)0x0);\n  current_string = \"none\";\n  result_string = (char *)xmalloc(total_length + 1);\n  counter = 8;\n  string_array = (char **)&stack_size;\n  current_char = result_string;\n  do {\n    string_length = strlen(current_string);\n    for (; string_length != 0; string_length = string_length - 1) {\n      *current_char = *current_string;\n      current_string = current_string + (ulong)flag * -2 + 1;\n      current_char = current_char + (ulong)flag * -2 + 1;\n    }\n    if (counter < 0x30) {\n      offset = (ulong)counter;\n      counter = counter + 8;\n      string_pointer = (char **)((long)param_array + offset);\n    }\n    else {\n      string_pointer = string_array;\n      string_array = string_array + 1;\n    }\n    current_string = *string_pointer;\n  } while (current_string != (char *)0x0);\n  *current_char = '\\0';\n  return result_string;\n}\n\n",
            "current_name": "reverse_and_concatenate_strings_00103186",
            "entrypoint": "0x00103186",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103186": "reverse_and_concatenate_strings_00103186",
                "bVar8": "flag",
                "in_AL": "flag",
                "lVar5": "total_length",
                "local_28": "input8_copy",
                "local_38": "input7_copy",
                "local_48": "input6_copy",
                "local_58": "input5_copy",
                "local_68": "input4_copy",
                "local_78": "input3_copy",
                "local_88": "input2_copy",
                "local_98": "input1_copy",
                "local_a0": "param14_copy",
                "local_a8": "param13_copy",
                "local_c8": "param_array",
                "local_d8": "string_array",
                "local_e0": "counter",
                "param_1": "input1",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param9",
                "pcVar3": "result_string",
                "pcVar4": "string_ptr",
                "pcVar6": "current_string",
                "pcVar7": "current_char",
                "ppcVar4": "string_pointer",
                "sVar1": "string_length",
                "stack0x00000008": "stack_size",
                "uVar2": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001032de": {
            "additional_data": {
                "FUN_001032de": {
                    "1": "print_elfedit_usage",
                    "19": "print_usage_and_exit",
                    "2": "print_usage",
                    "4": "print_elf_edit_usage"
                },
                "__ptr": {
                    "1": "message_ptr",
                    "19": "concatenated_string",
                    "2": "buffer"
                },
                "param_1": {
                    "1": "file_stream",
                    "18": "output_file",
                    "2": "file_ptr",
                    "3": "file_pointer",
                    "7": "file"
                },
                "param_2": {
                    "1": "status_code",
                    "2": "error_code",
                    "28": "exit_code"
                },
                "pcVar2": {
                    "1": "localized_text",
                    "2": "translation",
                    "4": "translated_string",
                    "6": "message",
                    "9": "localized_string"
                },
                "puVar1": {
                    "1": "machine_type_pointer",
                    "2": "pointer1",
                    "4": "pointer",
                    "8": "ptr"
                },
                "puVar3": {
                    "1": "pointer_to_data",
                    "2": "option_pointer",
                    "3": "data_ptr",
                    "6": "data_pointer"
                }
            },
            "called": [
                "FUN_00102250",
                "FUN_00102160",
                "FUN_00103186",
                "FUN_00103006",
                "FUN_001020d0",
                "FUN_00102030"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nvoid print_usage_and_exit_001032de(FILE *output_file,int exit_code)\n\n{\n  undefined8 *ptr;\n  void *concatenated_string;\n  char *localized_string;\n  undefined4 *data_pointer;\n  \n  data_pointer = &DAT_00108ca0;\n  concatenated_string = (void *)concat_constprop_0(&DAT_00106137,0);\n  do {\n    ptr = (undefined8 *)(data_pointer + 6);\n    data_pointer = data_pointer + 4;\n    concatenated_string = (void *)reconcat(concatenated_string,concatenated_string,&DAT_001061ef,*ptr,0);\n  } while (data_pointer != (undefined4 *)&DAT_00108d90);\n  localized_string = (char *)dcgettext(0,\"Usage: %s <option(s)> elffile(s)\\n\",5);\n  fprintf(output_file,localized_string,\"elfedit\");\n  localized_string = (char *)dcgettext(0,\" Update the ELF header of ELF files\\n\",5);\n  fprintf(output_file,localized_string);\n  localized_string = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(output_file,localized_string);\n  localized_string = (char *)dcgettext(0,\n                             \"  --input-mach [none|i386|iamcu|l1om|k1om|x86_64]\\n                              Set input machine type\\n  --output-mach [none|i386|iamcu|l1om|k1om|x86_64]\\n                              Set output machine type\\n  --input-type [none|rel|exec|dyn]\\n                              Set input file type\\n  --output-type [none|rel|exec|dyn]\\n                              Set output file type\\n  --input-osabi [%s]\\n                              Set input OSABI\\n  --output-osabi [%s]\\n                              Set output OSABI\\n  --input-abiversion [0-255]  Set input ABIVERSION\\n  --output-abiversion [0-255] Set output ABIVERSION\\n\"\n                             ,5);\n  fprintf(output_file,localized_string,concatenated_string,concatenated_string);\n  localized_string = (char *)dcgettext(0,\n                             \"  --enable-x86-feature [ibt|shstk|lam_u48|lam_u57]\\n                              Enable x86 feature\\n  --disable-x86-feature [ibt|shstk|lam_u48|lam_u57]\\n                              Disable x86 feature\\n\"\n                             ,5);\n  fprintf(output_file,localized_string);\n  localized_string = (char *)dcgettext(0,\n                             \"  -h --help                   Display this information\\n  -v --version                Display the version number of %s\\n\"\n                             ,5);\n  fprintf(output_file,localized_string,\"elfedit\");\n  if (exit_code == 0) {\n    localized_string = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_file,localized_string,\"<https://sourceware.org/bugzilla/>\");\n  }\n  free(concatenated_string);\n                    \n  exit(exit_code);\n}\n\n",
            "current_name": "print_usage_and_exit_001032de",
            "entrypoint": "0x001032de",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001032de": "print_usage_and_exit_001032de",
                "__ptr": "concatenated_string",
                "param_1": "output_file",
                "param_2": "exit_code",
                "pcVar2": "localized_string",
                "puVar1": "ptr",
                "puVar3": "data_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103449": {
            "additional_data": {
                "FUM_00103449": {
                    "1": "allocate_memory"
                },
                "FUN_00103449": {
                    "16": "allocate_memory",
                    "2": "realloc_or_malloc",
                    "3": "allocate_or_resize_memory",
                    "6": "resize_memory"
                },
                "__size": {
                    "1": "calculated_size",
                    "5": "allocated_size",
                    "7": "allocation_size"
                },
                "param_1": {
                    "1": "existing_ptr",
                    "10": "buffer",
                    "2": "existing_memory",
                    "3": "ptr",
                    "6": "memory_block"
                },
                "param_2": {
                    "18": "size",
                    "2": "requested_size",
                    "9": "new_size"
                },
                "pvVar1": {
                    "1": "new_block",
                    "2": "new_pointer",
                    "3": "new_buffer",
                    "4": "allocated_memory",
                    "5": "allocated_buffer",
                    "6": "new_memory_block"
                }
            },
            "called": [
                "FUN_001021e0",
                "FUN_001021b0",
                "FUN_00102fc7"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nvoid allocate_memory_00103449(void *buffer,size_t size)\n\n{\n  size_t size;\n  void *new_memory_block;\n  \n  size = 1;\n  if (size != 0) {\n    size = size;\n  }\n  if (buffer == (void *)0x0) {\n    new_memory_block = malloc(size);\n  }\n  else {\n    new_memory_block = realloc(buffer,size);\n  }\n  if (new_memory_block == (void *)0x0) {\n    xmalloc_failed(size);\n  }\n  return;\n}\n\n",
            "current_name": "allocate_memory_00103449",
            "entrypoint": "0x00103449",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103449": "allocate_memory_00103449",
                "__size": "size",
                "param_1": "buffer",
                "param_2": "size",
                "pvVar1": "new_memory_block"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010347f": {
            "additional_data": {
                "FUN_0010347f": {
                    "1": "byte_array_to_unsigned_long",
                    "2": "parse_data",
                    "6": "convert_data",
                    "7": "decode_data",
                    "9": "extract_data"
                },
                "abort": {
                    "1": "stop_execution"
                },
                "dcgettext": {
                    "1": "translate_message"
                },
                "error": {
                    "1": "display_error"
                },
                "param_1": {
                    "2": "input_data",
                    "20": "data",
                    "3": "data_ptr",
                    "6": "data_pointer"
                },
                "param_2": {
                    "26": "data_length",
                    "5": "length"
                },
                "uVar1": {
                    "1": "data",
                    "11": "temp",
                    "2": "temp_value",
                    "5": "temp1",
                    "8": "temp_var1"
                },
                "uVar2": {
                    "1": "temp_u_long",
                    "15": "result",
                    "5": "temp2",
                    "8": "temp_var2"
                },
                "uVar3": {
                    "1": "error_msg",
                    "2": "message",
                    "25": "error_message"
                },
                "uVar4": {
                    "1": "concatenated_data"
                }
            },
            "called": [
                "FUN_00102e85",
                "FUN_00102050",
                "FUN_001020d0"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nulong extract_data_0010347f(ulong *data,undefined4 data_length)\n\n{\n  uint temp;\n  ulong result;\n  undefined8 error_message;\n  \n  switch(data_length) {\n  case 1:\n    return (ulong)*(byte *)data;\n  case 2:\n    return (ulong)CONCAT11((char)*(undefined2 *)data,(char)((ushort)*(undefined2 *)data >> 8))\n    ;\n  case 3:\n    return (ulong)*(byte *)((long)data + 1) << 8 | (ulong)*(byte *)data << 0x10 |\n           (ulong)*(byte *)((long)data + 2);\n  case 4:\n    temp = *(uint *)data;\n    return (ulong)(temp >> 0x18 | (temp & 0xff0000) >> 8 | (temp & 0xff00) << 8 | temp << 0x18);\n  case 5:\n    temp = *(uint *)((long)data + 1);\n    return (ulong)CONCAT14(*(byte *)data,\n                           temp >> 0x18 | (temp & 0xff0000) >> 8 | (temp & 0xff00) << 8 |\n                           temp << 0x18);\n  case 6:\n    temp = *(uint *)((long)data + 2);\n    return (ulong)*(byte *)((long)data + 1) << 0x20 | (ulong)*(byte *)data << 0x28 |\n           (ulong)(temp >> 0x18 | (temp & 0xff0000) >> 8 | (temp & 0xff00) << 8 | temp << 0x18);\n  case 7:\n    temp = *(uint *)((long)data + 3);\n    return (ulong)*(byte *)((long)data + 2) << 0x20 | (ulong)*(byte *)((long)data + 1) << 0x28\n           | (ulong)*(byte *)data << 0x30 |\n           (ulong)(temp >> 0x18 | (temp & 0xff0000) >> 8 | (temp & 0xff00) << 8 | temp << 0x18);\n  case 8:\n    result = *data;\n    return result >> 0x38 | (result & 0xff000000000000) >> 0x28 | (result & 0xff0000000000) >> 0x18 |\n           (result & 0xff00000000) >> 8 | (result & 0xff000000) << 8 | (result & 0xff0000) << 0x18 |\n           (result & 0xff00) << 0x28 | result << 0x38;\n  default:\n    error_message = translate_message(0,\"Unhandled data length: %d\\n\",5);\n    display_error(error_message,data_length);\n                    \n    stop_execution();\n  }\n}\n\n",
            "current_name": "extract_data_0010347f",
            "entrypoint": "0x0010347f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010347f": "extract_data_0010347f",
                "abort": "stop_execution",
                "dcgettext": "translate_message",
                "error": "display_error",
                "param_1": "data",
                "param_2": "data_length",
                "uVar1": "temp",
                "uVar2": "result",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010354e": {
            "additional_data": {
                "FUN_0010354e": {
                    "1": "fill_memory",
                    "4": "fill_memory_with_byte",
                    "6": "copy_data",
                    "7": "write_data_to_memory",
                    "9": "write_data"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "error": {
                    "1": "print_error_message"
                },
                "iVar2": {
                    "1": "index",
                    "2": "loop_index",
                    "3": "iteration_count",
                    "6": "counter",
                    "9": "loop_counter"
                },
                "param_1": {
                    "1": "dest_addr",
                    "2": "destination",
                    "3": "buffer_address",
                    "4": "memory_address",
                    "5": "dest",
                    "8": "dest_address"
                },
                "param_2": {
                    "1": "byte_value",
                    "13": "data",
                    "2": "byte_to_fill",
                    "3": "data_to_write",
                    "5": "value"
                },
                "param_3": {
                    "1": "pattern_length",
                    "13": "data_length",
                    "17": "length"
                },
                "uVar1": {
                    "1": "message",
                    "2": "error_msg",
                    "25": "error_message"
                },
                "uVar3": {
                    "1": "new_length",
                    "2": "converted_length",
                    "3": "remaining_length",
                    "5": "temp_data_length"
                }
            },
            "called": [
                "FUN_00102e85",
                "FUN_00102050",
                "FUN_001020d0"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nvoid write_data_0010354e(long dest_address,ulong data,uint length)\n\n{\n  undefined8 error_message;\n  int loop_counter;\n  ulong temp_length;\n  \n  temp_length = (ulong)length;\n  if (8 < length) {\n    error_message = get_error_message(0,\"Unhandled data length: %d\\n\",5);\n    print_error_message(error_message,length);\n                    \n    abort();\n  }\n  while (loop_counter = (int)temp_length, temp_length = (ulong)(loop_counter - 1), loop_counter != 0) {\n    *(char *)(dest_address + temp_length) = (char)data;\n    data = data >> 8;\n  }\n  return;\n}\n\n",
            "current_name": "write_data_0010354e",
            "entrypoint": "0x0010354e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010354e": "write_data_0010354e",
                "dcgettext": "get_error_message",
                "error": "print_error_message",
                "iVar2": "loop_counter",
                "param_1": "dest_address",
                "param_2": "data",
                "param_3": "length",
                "uVar1": "error_message",
                "uVar3": "temp_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010358d": {
            "additional_data": {
                "DAT_00109438": {
                    "1": "dat_00109438"
                },
                "FUN_001025ab": {
                    "1": "adjust_relative_path"
                },
                "FUN_001029a5": {
                    "1": "dcgettext"
                },
                "FUN_00102cc4": {
                    "1": "get_archive_member_name"
                },
                "FUN_00102e85": {
                    "1": "error"
                },
                "FUN_00102f65": {
                    "1": "release_archive"
                },
                "FUN_0010358d": {
                    "1": "extract_and_process_archive",
                    "28": "process_archive"
                },
                "FUN_00104de0": {
                    "1": "process_object"
                },
                "__s": {
                    "1": "default_name",
                    "2": "corrupt_message",
                    "3": "corrupt_text",
                    "4": "corrupt_string",
                    "5": "corrupt"
                },
                "__s_00": {
                    "1": "full_path",
                    "10": "full_name",
                    "2": "string2",
                    "3": "new_name"
                },
                "__stream": {
                    "1": "file",
                    "4": "file_stream",
                    "6": "input_file",
                    "8": "stream"
                },
                "iVar3": {
                    "1": "index_var",
                    "2": "status",
                    "23": "result"
                },
                "lVar1": {
                    "1": "len",
                    "19": "length",
                    "2": "length1",
                    "3": "length_var1"
                },
                "local_148": {
                    "1": "unknown",
                    "2": "value1",
                    "3": "zero2"
                },
                "local_160": {
                    "1": "zero_array1",
                    "2": "archive_2",
                    "3": "zero1",
                    "4": "archive2"
                },
                "local_178": {
                    "1": "archive_var",
                    "11": "archive1",
                    "2": "archive_1",
                    "3": "archive"
                },
                "local_208": {
                    "1": "stat_var",
                    "12": "file_stat",
                    "3": "stat_info",
                    "4": "file_info"
                },
                "local_46": {
                    "1": "result2",
                    "2": "local_short",
                    "3": "header_type",
                    "6": "header_value"
                },
                "local_50": {
                    "1": "entry_name",
                    "10": "header",
                    "2": "file_type"
                },
                "local_80": {
                    "1": "header_data",
                    "17": "buffer",
                    "2": "array",
                    "3": "header",
                    "4": "header_buffer"
                },
                "local_88": {
                    "1": "arch_type",
                    "2": "is_relative",
                    "3": "flag"
                },
                "local_90": {
                    "1": "val6",
                    "2": "header_offset",
                    "3": "offset2",
                    "6": "current_offset"
                },
                "local_98": {
                    "1": "unknown_5",
                    "3": "offset1",
                    "4": "offset",
                    "6": "member_offset"
                },
                "local_a8": {
                    "1": "null_archive",
                    "2": "value4",
                    "3": "zero4"
                },
                "local_c0": {
                    "1": "archive_info5",
                    "2": "value3",
                    "3": "zero3"
                },
                "local_d8": {
                    "1": "unused2",
                    "2": "current_archive",
                    "7": "archive2"
                },
                "param_1": {
                    "1": "file_name",
                    "11": "filename",
                    "5": "param"
                },
                "param_2": {
                    "1": "file_pointer",
                    "2": "archive_file",
                    "22": "file",
                    "4": "file_ptr"
                },
                "param_3": {
                    "1": "read_mode",
                    "20": "flag",
                    "3": "is_relative"
                },
                "pcVar12": {
                    "1": "arch_name",
                    "2": "str2",
                    "5": "archive_name"
                },
                "pcVar13": {
                    "1": "var13",
                    "4": "err_msg",
                    "6": "error_msg",
                    "7": "error_message"
                },
                "pcVar2": {
                    "1": "modified_name",
                    "12": "str",
                    "2": "ptr"
                },
                "sVar10": {
                    "1": "archive_length",
                    "2": "size3"
                },
                "sVar11": {
                    "1": "length",
                    "2": "name_size",
                    "5": "name_length"
                },
                "sVar6": {
                    "1": "read_count",
                    "11": "size",
                    "2": "size1",
                    "9": "read_size"
                },
                "sVar6_00": {
                    "1": "string_length"
                },
                "sVar6_01": {
                    "1": "string_length"
                },
                "sVar9": {
                    "1": "len",
                    "11": "name_length",
                    "2": "name_len",
                    "4": "name_size"
                },
                "uVar14": {
                    "1": "u_var14",
                    "2": "flag2",
                    "5": "result",
                    "6": "status"
                },
                "uVar4": {
                    "1": "var4",
                    "12": "status",
                    "2": "retval",
                    "5": "result"
                },
                "uVar5": {
                    "1": "translation",
                    "2": "text",
                    "3": "error_message",
                    "4": "msg",
                    "7": "message"
                },
                "uVar7": {
                    "1": "localized_str2",
                    "2": "error_msg",
                    "4": "msg",
                    "6": "message"
                },
                "uVar8": {
                    "1": "var8",
                    "16": "value",
                    "2": "file_size"
                }
            },
            "called": [
                "FUN_001021d0",
                "FUN_00102130",
                "FUN_00102220",
                "FUN_00102f65",
                "FUN_001020d0",
                "FUN_00102240",
                "FUN_001021b0",
                "FUN_00102290",
                "FUN_00102cc4",
                "FUN_00102090",
                "FUN_00102e85",
                "FUN_001020b0",
                "FUN_00104de0",
                "FUN_001020e0",
                "FUN_001029a5",
                "FUN_001021a0",
                "FUN_00102030",
                "FUN_001025ab"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nuint process_archive_0010358d(undefined8 filename,FILE *file,char flag)\n\n{\n  long length;\n  char *str;\n  int result;\n  uint status;\n  undefined8 message;\n  size_t size;\n  undefined8 message;\n  ulong value;\n  size_t name_length;\n  char *corrupt_str;\n  size_t size3;\n  size_t name_length;\n  char *full_name;\n  char *archive_name;\n  FILE *stream;\n  char *error_message;\n  uint return_value;\n  stat file_stat;\n  undefined archive1 [24];\n  undefined archive2 [16];\n  undefined8 zero2;\n  undefined archive2 [16];\n  undefined zero3 [16];\n  undefined8 zero4;\n  long member_offset;\n  long current_offset;\n  int flag;\n  undefined buffer [48];\n  char header [10];\n  short header_value;\n  \n  zero2 = 0;\n  archive2 = ZEXT816(0);\n  zero3 = ZEXT816(0);\n  archive1._0_16_ = ZEXT816(0);\n  archive2 = ZEXT816(0);\n  zero4 = 0;\n  result = fileno(file);\n  result = fstat(result,&file_stat);\n  if ((result < 0) ||\n     (result = setup_archive_constprop_0(archive2,filename,file,file_stat.st_size,flag),\n     result != 0)) {\nLAB_001036cc:\n    return_value = 1;\nLAB_00103a46:\n    if ((FILE *)archive1._8_8_ != (FILE *)0x0) {\n      fclose((FILE *)archive1._8_8_);\n    }\n    release_archive(archive1);\n    release_archive(archive2);\n  }\n  else {\n    return_value = 0;\n    while (result = fseek(file,current_offset,0), result == 0) {\n      size = fread(buffer,1,0x3c,file);\n      if (size != 0x3c) {\n        if (size == 0) goto LAB_00103a46;\n        error_message = \"%s: failed to read archive header\\n\";\nLAB_001036b8:\n        message = dcgettext(0,error_message,5);\n        error(message,filename);\n        goto LAB_001036cc;\n      }\n      if (header_value != 0xa60) {\n        message = archive2._0_8_;\n        message = dcgettext(0,\"%s: did not find a valid archive header\\n\",5);\n        error(message,message);\n        goto LAB_001036cc;\n      }\n      current_offset = current_offset + 0x3c;\n      value = strtoul(header,(char **)0x0,10);\n      DAT_00109438 = (value + 1) - (ulong)((value & 1) == 0);\n      error_message = (char *)get_archive_member_name(archive2,archive1);\n      if (error_message == (char *)0x0) {\n        error_message = \"%s: bad archive file name\\n\";\n        goto LAB_001036b8;\n      }\n      name_length = strlen(error_message);\n      corrupt_str = (char *)dcgettext(0,\"<corrupt>\",5);\n      archive_name = (char *)archive2._0_8_;\n      size3 = strlen((char *)archive2._0_8_);\n      name_length = strlen(error_message);\n      size = size3 + name_length + 3;\n      if (flag == 0) {\n        full_name = (char *)malloc(size);\n        if (full_name == (char *)0x0) goto LAB_001037d3;\n        snprintf(full_name,size,\"%s(%s)\",archive_name,error_message);\n      }\n      else if (member_offset == 0) {\n        full_name = (char *)malloc(size);\n        if (full_name == (char *)0x0) {\nLAB_001037d3:\n          message = dcgettext(0,\"Out of memory\\n\",5);\n          error(message);\n          message = dcgettext(0,\"%s: bad archive file name\\n\",5);\n          error(message,filename);\n          free(error_message);\n          goto LAB_001036cc;\n        }\n        snprintf(full_name,size,\"%s[%s]\",archive_name,error_message);\n      }\n      else {\n        str = (char *)archive1._0_8_;\n        length = size3 + name_length + 5;\n        if ((char *)archive1._0_8_ == (char *)0x0) {\n          size = strlen(corrupt_str);\n          size = length + size;\n          full_name = (char *)malloc(size);\n          str = corrupt_str;\n        }\n        else {\n          size = strlen((char *)archive1._0_8_);\n          size = length + size;\n          full_name = (char *)malloc(size);\n        }\n        if (full_name == (char *)0x0) goto LAB_001037d3;\n        snprintf(full_name,size,\"%s[%s(%s)]\",archive_name,str,error_message);\n      }\n      if (flag == '\\0') {\n        free(error_message);\n        current_offset = current_offset + DAT_00109438;\n        status = process_object(full_name,file);\n        return_value = return_value | status;\n      }\n      else {\n        if (member_offset == 0) {\n          archive_name = (char *)adjust_relative_path(filename,error_message,name_length);\n          free(error_message);\n          if (archive_name != (char *)0x0) {\n            stream = fopen(archive_name,\"r+b\");\n            if (stream != (FILE *)0x0) {\n              status = process_object(full_name,stream);\n              return_value = return_value | status;\n              fclose(stream);\n              free(archive_name);\n              goto LAB_00103a39;\n            }\n            message = dcgettext(0,\"Input file \\'%s\\' is not readable\\n\",5);\n            error(message,archive_name);\n            free(archive_name);\n          }\n          free(full_name);\n          goto LAB_001036cc;\n        }\n        free(error_message);\n        result = fseek((FILE *)archive1._8_8_,member_offset + 0x3c,0);\n        if (result != 0) {\n          message = archive1._0_8_;\n          message = dcgettext(0,\"%s: failed to seek to archive member\\n\",5);\n          error(message,message);\n          free(full_name);\n          goto LAB_001036cc;\n        }\n        status = process_object(full_name,archive1._8_8_);\n        return_value = return_value | status;\n      }\nLAB_00103a39:\n      free(full_name);\n    }\n    message = dcgettext(0,\"%s: failed to seek to next archive header\\n\",5);\n    return_value = 1;\n    error(message,filename);\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_archive_0010358d",
            "entrypoint": "0x0010358d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010358d": "process_archive_0010358d",
                "__s": "corrupt_str",
                "__s_00": "full_name",
                "__stream": "stream",
                "iVar3": "result",
                "lVar1": "length",
                "local_148": "zero2",
                "local_160": "archive2",
                "local_178": "archive1",
                "local_208": "file_stat",
                "local_46": "header_value",
                "local_50": "header",
                "local_80": "buffer",
                "local_88": "flag",
                "local_90": "current_offset",
                "local_98": "member_offset",
                "local_a8": "zero4",
                "local_c0": "zero3",
                "local_d8": "archive2",
                "param_1": "filename",
                "param_2": "file",
                "param_3": "flag",
                "pcVar12": "archive_name",
                "pcVar13": "error_message",
                "pcVar2": "str",
                "sVar10": "size3",
                "sVar11": "name_length",
                "sVar6": "size",
                "sVar9": "name_length",
                "uVar14": "return_value",
                "uVar4": "status",
                "uVar5": "message",
                "uVar7": "message",
                "uVar8": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103a90": {
            "additional_data": {
                "FUNC_00103ab3": {
                    "2": "reverse_data",
                    "3": "process_data"
                },
                "FUN_00103a90": {
                    "1": "get_data",
                    "2": "convert_data_length_to_value",
                    "3": "get_data_value",
                    "5": "extract_data"
                },
                "abort": {
                    "1": "abort_program"
                },
                "byte": {
                    "1": "byte_data"
                },
                "dcgettext": {
                    "2": "get_error_message"
                },
                "error": {
                    "1": "print_error_message"
                },
                "param_1": {
                    "12": "data_pointer",
                    "13": "data",
                    "6": "data_ptr"
                },
                "param_2": {
                    "24": "data_length",
                    "7": "length"
                },
                "switchD_00103aac::FUN_00102825": {
                    "1": "shift_data"
                },
                "switchD_00103aac::FUN_0010289a": {
                    "1": "print_error_message"
                },
                "uVar1": {
                    "1": "decoded_value",
                    "2": "extracted_data",
                    "25": "result"
                },
                "uVar2": {
                    "28": "error_message",
                    "3": "error_msg"
                },
                "uint": {
                    "1": "uint_data"
                },
                "ushort": {
                    "1": "ushort_data"
                }
            },
            "called": [
                "FUN_0010289a",
                "FUN_00103ab3",
                "FUN_00102825"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nulong extract_data_00103a90(ulong *data,ulong data_length)\n\n{\n  ulong result;\n  undefined8 error_message;\n  \n  switch(data_length & 0xffffffff) {\n  default:\n    error_message = get_error_message(0,\"Unhandled data length: %d\\n\",5);\n    print_error_message(error_message,data_length & 0xffffffff);\n                    \n    abort_execution();\n  case 1:\n    return (ulong)*(byte_data *)data;\n  case 2:\n    return (ulong)*(ushort_data *)data;\n  case 3:\n    result = FUNC_00103ab3(data,data_length,\n                         (ulong)*(byte_data *)((long)data + 1) << 8 |\n                         (ulong)*(byte_data *)((long)data + 2) << 0x10);\n    return result;\n  case 4:\n    return (ulong)*(uint_data *)data;\n  case 5:\n    result = FUNC_00103ab3(data,data_length,(ulong)*(byte_data *)((long)data + 4) << 0x20);\n    return result;\n  case 6:\n    result = FUNC_00103ab3(data,data_length,\n                         (ulong)*(byte_data *)((long)data + 4) << 0x20 |\n                         (ulong)*(byte_data *)((long)data + 5) << 0x28);\n    return result;\n  case 7:\n    result = FUNC_00103ab3(data,data_length,\n                         (ulong)*(byte_data *)((long)data + 4) << 0x20 |\n                         (ulong)*(byte_data *)((long)data + 5) << 0x28 | (ulong)*(uint_data *)data);\n    return result;\n  case 8:\n    return *data;\n  }\n}\n\n",
            "current_name": "extract_data_00103a90",
            "entrypoint": "0x00103a90",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103a90": "extract_data_00103a90",
                "abort": "abort_execution",
                "byte": "byte_data",
                "dcgettext": "get_error_message",
                "error": "print_error_message",
                "param_1": "data",
                "param_2": "data_length",
                "uVar1": "result",
                "uVar2": "error_message",
                "uint": "uint_data",
                "ushort": "ushort_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103ab3": {
            "called": [],
            "calling": [
                "FUN_00102825",
                "FUN_00103a90"
            ],
            "code": "\nvoid FUNC_00103ab3(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103ab3",
            "entrypoint": "0x00103ab3",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103ab3": "FUNC_00103ab3"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103ad0": {
            "additional_data": {
                "FUN_00103ad0": {
                    "1": "copy_and_shift_data",
                    "2": "write_data_to_memory",
                    "3": "copy_data",
                    "7": "write_data",
                    "8": "copy_data_to_memory"
                },
                "param_1": {
                    "1": "dest_addr",
                    "2": "data_ptr",
                    "3": "buffer_address",
                    "4": "destination_address",
                    "7": "buffer",
                    "8": "destination"
                },
                "param_2": {
                    "1": "new_value",
                    "2": "data_to_copy",
                    "20": "data",
                    "7": "data_value"
                },
                "param_3": {
                    "1": "length_limit",
                    "13": "length",
                    "17": "data_length"
                },
                "uVar1": {
                    "1": "err_msg",
                    "22": "error_message",
                    "4": "error_msg"
                },
                "uVar2": {
                    "1": "iteration_counter",
                    "10": "index",
                    "7": "counter",
                    "9": "i"
                }
            },
            "called": [
                "FUN_00102c98"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nvoid copy_data_to_memory_00103ad0(long destination,ulong data,uint data_length)\n\n{\n  undefined8 error_message;\n  ulong index;\n  \n  if (data_length < 9) {\n    for (index = 0; data_length != index; index = index + 1) {\n      *(char *)(destination + index) = (char)data;\n      data = data >> 8;\n    }\n    return;\n  }\n  error_message = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n  error(error_message,data_length);\n                    \n  abort();\n}\n\n",
            "current_name": "copy_data_to_memory_00103ad0",
            "entrypoint": "0x00103ad0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103ad0": "copy_data_to_memory_00103ad0",
                "param_1": "destination",
                "param_2": "data",
                "param_3": "data_length",
                "uVar1": "error_message",
                "uVar2": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103b00": {
            "additional_data": {
                "FUN_00103b00": {
                    "1": "start_entry",
                    "2": "initialize_program"
                },
                "FUN_00103bf0": {
                    "1": "process_entry_wrapper",
                    "4": "process_data"
                },
                "__libc_start_main": {
                    "1": "libc_start_main"
                },
                "auStack_8": {
                    "1": "array_stack",
                    "2": "stack_array",
                    "3": "stack8",
                    "5": "stack_buffer"
                },
                "int param_1": {
                    "1": "data_value"
                },
                "long *param_2": {
                    "1": "data_array"
                },
                "main": {
                    "1": "entry_point"
                },
                "param_1": {
                    "1": "unused_param",
                    "2": "param_1",
                    "3": "param1",
                    "4": "argc",
                    "9": "arg1"
                },
                "param_2": {
                    "1": "array_ptr",
                    "2": "param_2",
                    "3": "argument2",
                    "5": "argv",
                    "9": "arg2"
                },
                "processEntry": {
                    "1": "initialize_program",
                    "13": "start_main_loop",
                    "2": "start_main"
                },
                "undefined8 param_1": {
                    "1": "arg1"
                },
                "undefined8 param_2": {
                    "1": "arg2"
                }
            },
            "called": [
                "FUN_00103bf0",
                "FUN_0010a010"
            ],
            "calling": [],
            "code": "\nvoid start_main_loop start_main_process_00103b00(undefined8 arg1,undefined8 arg2)\n\n{\n  undefined stack_buffer [8];\n  \n  libc_start_main(entry_point,arg2,&stack0x00000008,0,0,arg1,stack_buffer);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "start_main_process_00103b00",
            "entrypoint": "0x00103b00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103b00": "start_main_process_00103b00",
                "__libc_start_main": "libc_start_main",
                "auStack_8": "stack_buffer",
                "main": "entry_point",
                "param_1": "arg1",
                "param_2": "arg2",
                "processEntry": "start_main_loop"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103b30": {
            "called": [
                "FUN_0010a030"
            ],
            "calling": [
                "FUN_00103ba0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00103b43) */\n/* WARNING: Removing unreachable block (ram,0x00103b4f) */\n\nvoid FUNC_00103b30(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103b30",
            "entrypoint": "0x00103b30",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103b30": "FUNC_00103b30"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103b60": {
            "called": [
                "FUN_0010a160"
            ],
            "calling": [
                "FUN_00103be0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00103b84) */\n/* WARNING: Removing unreachable block (ram,0x00103b90) */\n\nvoid FUNC_00103b60(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103b60",
            "entrypoint": "0x00103b60",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103b60": "FUNC_00103b60"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103ba0": {
            "additional_data": {
                "DAT_00109320": {
                    "1": "is_initialized"
                },
                "FUNC_00103b30": {
                    "1": "delete_temp_memory",
                    "15": "cleanup",
                    "2": "cleanup_function",
                    "3": "deregister_tm_clones",
                    "5": "perform_cleanup"
                },
                "FUN_00103ba0": {
                    "1": "execute_shutdown_procedure",
                    "13": "initialize",
                    "8": "initialize_program"
                },
                "PTR_LOOP_00109148": {
                    "1": "loop_pointer"
                }
            },
            "called": [
                "FUN_001022b0",
                "FUN_00103b30"
            ],
            "calling": [],
            "code": "\nvoid initialize_00103ba0(void)\n\n{\n  if (DAT_00109320 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00109148);\n  deregister_tm_clones();\n  DAT_00109320 = 1;\n  return;\n}\n\n",
            "current_name": "initialize_00103ba0",
            "entrypoint": "0x00103ba0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103ba0": "initialize_00103ba0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103be0": {
            "called": [
                "FUN_00103b60"
            ],
            "calling": [],
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "current_name": "FUN_00103be0",
            "entrypoint": "0x00103be0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00103bf0": {
            "additional_data": {
                "DAT_0010604c": {
                    "1": "global_data1"
                },
                "DAT_00109150": {
                    "1": "global_data14"
                },
                "DAT_00109154": {
                    "1": "abi_version"
                },
                "DAT_00109158": {
                    "1": "elf_osabi"
                },
                "DAT_0010915c": {
                    "1": "elf_osabi2"
                },
                "DAT_00109160": {
                    "1": "elf_type2"
                },
                "DAT_00109164": {
                    "1": "global_data12"
                },
                "DAT_00109168": {
                    "1": "global_data19"
                },
                "DAT_0010916c": {
                    "1": "elf_machine5"
                },
                "DAT_00109170": {
                    "1": "global_data20"
                },
                "DAT_00109174": {
                    "1": "global_data21"
                },
                "DAT_001093b8": {
                    "1": "write_elf_data"
                },
                "DAT_001093c0": {
                    "1": "read_elf_data"
                },
                "DAT_001093e4": {
                    "1": "elf_class2"
                },
                "DAT_001093f8": {
                    "1": "global_data25"
                },
                "DAT_00109418": {
                    "1": "global_data64"
                },
                "DAT_0010941a": {
                    "1": "elf_endian"
                },
                "DAT_00109420": {
                    "1": "global_data24"
                },
                "DAT_00109424": {
                    "1": "elf_program_headers"
                },
                "DAT_00109438": {
                    "1": "global_data16"
                },
                "DAT_0010943c": {
                    "1": "global_data58"
                },
                "DAT_00109440": {
                    "1": "global_data63"
                },
                "DAT_00109444": {
                    "1": "flags1"
                },
                "DAT_0011000": {
                    "1": "dat_00109400"
                },
                "DAT_0011004": {
                    "1": "dat_00109404"
                },
                "DAT_0011008": {
                    "1": "dat_00109408"
                },
                "DAT_0011010": {
                    "1": "dat_00109150"
                },
                "DAT_0011014": {
                    "1": "dat_00109414"
                },
                "DAT_0011016": {
                    "1": "dat_00109416"
                },
                "DAT_0011018": {
                    "1": "dat_00109418"
                },
                "DAT_001101a": {
                    "1": "dat_0010941a"
                },
                "DAT_0011020": {
                    "1": "dat_00109420"
                },
                "DAT_0011024": {
                    "1": "dat_00109424"
                },
                "DAT_0011028": {
                    "1": "dat_00109428"
                },
                "DAT_001102c": {
                    "1": "dat_0010942c"
                },
                "DAT_0011030": {
                    "1": "dat_00109430"
                },
                "DAT_0011034": {
                    "1": "dat_00109434"
                },
                "DAT_0011038": {
                    "1": "dat_00109438"
                },
                "DAT_001103c": {
                    "1": "dat_0010943c"
                },
                "DAT_0011040": {
                    "1": "dat_00109440"
                },
                "DAT_0011044": {
                    "1": "dat_00109444"
                },
                "DAT_00110b0": {
                    "1": "dat_00109154"
                },
                "DAT_00110b4": {
                    "1": "dat_00109158"
                },
                "DAT_00110b8": {
                    "1": "dat_0010915c"
                },
                "DAT_00110bc": {
                    "1": "dat_00109160"
                },
                "DAT_00110c0": {
                    "1": "dat_00109164"
                },
                "DAT_00110c4": {
                    "1": "dat_00109168"
                },
                "DAT_00110c8": {
                    "1": "dat_0010916c"
                },
                "DAT_00110cc": {
                    "1": "dat_00109170"
                },
                "DAT_00110d0": {
                    "1": "dat_00109174"
                },
                "DAT_00110d4": {
                    "1": "dat_00109178"
                },
                "DAT_00110d8": {
                    "1": "dat_0010917c"
                },
                "DAT_00110dc": {
                    "1": "dat_00109180"
                },
                "DAT_00110e0": {
                    "1": "dat_00109184"
                },
                "DAT_00110e4": {
                    "1": "dat_00109188"
                },
                "DAT_00110e8": {
                    "1": "dat_0010918c"
                },
                "DAT_00110ec": {
                    "1": "dat_00109190"
                },
                "DAT_00110f0": {
                    "1": "dat_00109194"
                },
                "DAT_00110f4": {
                    "1": "dat_00109198"
                },
                "DAT_00110f8": {
                    "1": "dat_0010919c"
                },
                "DAT_00110fc": {
                    "1": "dat_001091a0"
                },
                "DAT_0011100": {
                    "1": "dat_001091a4"
                },
                "DAT_0011104": {
                    "1": "dat_001091a8"
                },
                "DAT_0011108": {
                    "1": "dat_001091ac"
                },
                "DAT_001110c": {
                    "1": "dat_001091b0"
                },
                "DAT_0011110": {
                    "1": "dat_001091b4"
                },
                "DAT_0011114": {
                    "1": "dat_001091b8"
                },
                "DAT_0011118": {
                    "1": "dat_001091bc"
                },
                "DAT_001111c": {
                    "1": "dat_001091c0"
                },
                "DAT_0011120": {
                    "1": "dat_001091c4"
                },
                "DAT_0011124": {
                    "1": "dat_001091c8"
                },
                "DAT_0011128": {
                    "1": "dat_001091cc"
                },
                "DAT_001112c": {
                    "1": "dat_001091d0"
                },
                "DAT_0011130": {
                    "1": "dat_001091d4"
                },
                "DAT_0011134": {
                    "1": "dat_001091d8"
                },
                "DAT_0011138": {
                    "1": "dat_001091dc"
                },
                "DAT_001113c": {
                    "1": "dat_001091e0"
                },
                "DAT_0011140": {
                    "1": "dat_001091e4"
                },
                "DAT_0011144": {
                    "1": "dat_001091e8"
                },
                "DAT_0011148": {
                    "1": "dat_001091ec"
                },
                "DAT_001114c": {
                    "1": "dat_001091f0"
                },
                "DAT_0011150": {
                    "1": "dat_001091f4"
                },
                "DAT_0011154": {
                    "1": "dat_001091f8"
                },
                "DAT_0011158": {
                    "1": "dat_001091fc"
                },
                "DAT_001115c": {
                    "1": "dat_00109200"
                },
                "DAT_0011160": {
                    "1": "dat_00109204"
                },
                "DAT_0011164": {
                    "1": "dat_00109208"
                },
                "DAT_0011168": {
                    "1": "dat_0010920c"
                },
                "DAT_001116c": {
                    "1": "dat_00109210"
                },
                "DAT_0011170": {
                    "1": "dat_00109214"
                },
                "DAT_0011174": {
                    "1": "dat_00109218"
                },
                "DAT_0011178": {
                    "1": "dat_0010921c"
                },
                "DAT_001117c": {
                    "1": "dat_00109220"
                },
                "DAT_0011180": {
                    "1": "dat_00109224"
                },
                "DAT_0011184": {
                    "1": "dat_00109228"
                },
                "DAT_0011188": {
                    "1": "dat_0010922c"
                },
                "DAT_001118c": {
                    "1": "dat_00109230"
                },
                "DAT_0011190": {
                    "1": "dat_00109234"
                },
                "DAT_0011194": {
                    "1": "dat_00109238"
                },
                "DAT_0011198": {
                    "1": "dat_0010923c"
                },
                "DAT_001119c": {
                    "1": "dat_00109240"
                },
                "DAT_00111a0": {
                    "1": "dat_00109244"
                },
                "DAT_00111a4": {
                    "1": "dat_00109248"
                },
                "DAT_00111a8": {
                    "1": "dat_0010924c"
                },
                "DAT_00111ac": {
                    "1": "dat_00109250"
                },
                "DAT_00111b0": {
                    "1": "dat_00109254"
                },
                "DAT_00111b4": {
                    "1": "dat_00109258"
                },
                "DAT_00111b8": {
                    "1": "dat_0010925c"
                },
                "DAT_00111bc": {
                    "1": "dat_00109260"
                },
                "DAT_00111c0": {
                    "1": "dat_00109264"
                },
                "DAT_00111c4": {
                    "1": "dat_00109268"
                },
                "DAT_00111c8": {
                    "1": "dat_0010926c"
                },
                "DAT_00111cc": {
                    "1": "dat_00109270"
                },
                "DAT_00111d0": {
                    "1": "dat_00109274"
                },
                "DAT_00111d4": {
                    "1": "dat_00109278"
                },
                "DAT_00111d8": {
                    "1": "dat_0010927c"
                },
                "DAT_00111dc": {
                    "1": "dat_00109280"
                },
                "DAT_00111e0": {
                    "1": "dat_00109284"
                },
                "DAT_00111e4": {
                    "1": "dat_00109288"
                },
                "DAT_00111e8": {
                    "1": "dat_0010928c"
                },
                "DAT_00111ec": {
                    "1": "dat_00109290"
                },
                "DAT_00111f0": {
                    "1": "dat_00109294"
                },
                "DAT_00111f4": {
                    "1": "dat_00109298"
                },
                "DAT_00111f8": {
                    "1": "dat_0010929c"
                },
                "DAT_00111fc": {
                    "1": "dat_001092a0"
                },
                "DAT_0011200": {
                    "1": "dat_001092a4"
                },
                "DAT_0011204": {
                    "1": "dat_001092a8"
                },
                "DAT_0011208": {
                    "1": "dat_001092ac"
                },
                "DAT_001120c": {
                    "1": "dat_001092b0"
                },
                "DAT_0011210": {
                    "1": "dat_001092b4"
                },
                "DAT_0011214": {
                    "1": "dat_001092b8"
                },
                "DAT_0011218": {
                    "1": "dat_001092bc"
                },
                "DAT_001121c": {
                    "1": "dat_001092c0"
                },
                "DAT_0011220": {
                    "1": "dat_001092c4"
                },
                "DAT_0011224": {
                    "1": "dat_001092c8"
                },
                "DAT_0011228": {
                    "1": "dat_001092cc"
                },
                "DAT_001122c": {
                    "1": "dat_001092d0"
                },
                "DAT_0011230": {
                    "1": "dat_001092d4"
                },
                "DAT_0011234": {
                    "1": "dat_001092d8"
                },
                "DAT_0011238": {
                    "1": "dat_001092dc"
                },
                "DAT_001123c": {
                    "1": "dat_001092e0"
                },
                "DAT_0011240": {
                    "1": "dat_001092e4"
                },
                "DAT_0011244": {
                    "1": "dat_001092e8"
                },
                "DAT_0011248": {
                    "1": "dat_001092ec"
                },
                "DAT_001124c": {
                    "1": "dat_001092f0"
                },
                "DAT_0011250": {
                    "1": "dat_001092f4"
                },
                "DAT_0011254": {
                    "1": "dat_001092f8"
                },
                "DAT_0011258": {
                    "1": "dat_001092fc"
                },
                "DAT_001125c": {
                    "1": "dat_00109300"
                },
                "DAT_0011260": {
                    "1": "dat_00109304"
                },
                "DAT_0011264": {
                    "1": "dat_00109308"
                },
                "DAT_0011268": {
                    "1": "dat_0010930c"
                },
                "DAT_001126c": {
                    "1": "dat_00109310"
                },
                "DAT_0011270": {
                    "1": "dat_00109314"
                },
                "DAT_0011274": {
                    "1": "dat_00109318"
                },
                "DAT_0011278": {
                    "1": "dat_0010931c"
                },
                "DAT_001127c": {
                    "1": "dat_00109320"
                },
                "DAT_0011280": {
                    "1": "dat_00109324"
                },
                "DAT_0011284": {
                    "1": "dat_00109328"
                },
                "DAT_0011288": {
                    "1": "dat_0010932c"
                },
                "DAT_001128c": {
                    "1": "dat_00109330"
                },
                "DAT_0011294": {
                    "1": "dat_00109334"
                },
                "DAT_0011298": {
                    "1": "dat_00109338"
                },
                "DAT_001129c": {
                    "1": "dat_0010933c"
                },
                "DAT_00112a0": {
                    "1": "dat_00109340"
                },
                "DAT_00112a4": {
                    "1": "dat_00109344"
                },
                "DAT_00112a8": {
                    "1": "dat_00109348"
                },
                "DAT_00112ac": {
                    "1": "dat_0010934c"
                },
                "DAT_00112b0": {
                    "1": "dat_00109350"
                },
                "DAT_00112b4": {
                    "1": "dat_00109354"
                },
                "DAT_00112b8": {
                    "1": "dat_00109358"
                },
                "DAT_00112bc": {
                    "1": "dat_0010935c"
                },
                "DAT_00112c0": {
                    "1": "dat_00109360"
                },
                "DAT_00112c4": {
                    "1": "dat_00109364"
                },
                "DAT_00112c8": {
                    "1": "dat_00109368"
                },
                "DAT_00112cc": {
                    "1": "dat_0010936c"
                },
                "DAT_00112d0": {
                    "1": "dat_00109370"
                },
                "DAT_00112d4": {
                    "1": "dat_00109374"
                },
                "DAT_00112d8": {
                    "1": "dat_00109378"
                },
                "DAT_00112dc": {
                    "1": "dat_0010937c"
                },
                "DAT_00112e0": {
                    "1": "dat_00109380"
                },
                "DAT_00112e4": {
                    "1": "dat_00109384"
                },
                "DAT_00112e8": {
                    "1": "dat_00109388"
                },
                "DAT_00112ec": {
                    "1": "dat_0010938c"
                },
                "DAT_00112f0": {
                    "1": "dat_00109390"
                },
                "DAT_00112f4": {
                    "1": "dat_00109394"
                },
                "DAT_00112f8": {
                    "1": "dat_00109398"
                },
                "DAT_00112fc": {
                    "1": "dat_0010939c"
                },
                "DAT_0011300": {
                    "1": "dat_001093a0"
                },
                "DAT_0011304": {
                    "1": "dat_001093a4"
                },
                "DAT_0011308": {
                    "1": "dat_001093a8"
                },
                "DAT_0011318": {
                    "1": "dat_001093d4"
                },
                "DAT_0011324": {
                    "1": "dat_0010941c"
                },
                "DAT_00113bc": {
                    "1": "dat_001093dc"
                },
                "DAT_00113c0": {
                    "1": "dat_001093dc"
                },
                "DAT_00113c4": {
                    "1": "dat_001093e0"
                },
                "DAT_00113c8": {
                    "1": "dat_001093e4"
                },
                "DAT_00113e0": {
                    "1": "dat_001093f8"
                },
                "FUN_00103bf0": {
                    "1": "process_inputs",
                    "2": "main_function",
                    "5": "process_files"
                },
                "PFVar16": {
                    "1": "global_function1"
                },
                "PTR_s_input_mach_00109180": {
                    "1": "global_data2"
                },
                "__addr": {
                    "1": "memory_address",
                    "10": "address",
                    "2": "address1",
                    "3": "mmap_addr",
                    "4": "addr"
                },
                "__optarg": {
                    "1": "opt_arg"
                },
                "__optind": {
                    "1": "opt_index"
                },
                "__ptr": {
                    "1": "ptr_ptr",
                    "2": "allocated_memory",
                    "3": "malloc_ptr",
                    "7": "ptr",
                    "9": "pointer"
                },
                "__s": {
                    "1": "str",
                    "3": "string",
                    "6": "buffer"
                },
                "bVar2": {
                    "1": "byte",
                    "3": "current_byte",
                    "4": "byte_value",
                    "5": "byte_var2",
                    "6": "byte_val",
                    "7": "byte_var"
                },
                "bVar4": {
                    "1": "boolean_variable4",
                    "2": "boolean_value",
                    "3": "bool_val",
                    "5": "bool_var4",
                    "7": "bool_var1"
                },
                "bVar5": {
                    "1": "bool_val_2",
                    "2": "bool_var_2",
                    "3": "bool_val2",
                    "5": "bool_var5",
                    "8": "bool_var2"
                },
                "bVar6": {
                    "1": "bool_val_3",
                    "2": "bool_var_3",
                    "3": "bool_val3",
                    "5": "bool_var6",
                    "8": "bool_var3"
                },
                "bVar7": {
                    "1": "bool_val_4",
                    "2": "flag4",
                    "3": "bool4",
                    "5": "bool_var7",
                    "8": "bool_var4"
                },
                "cVar1": {
                    "1": "byte_char",
                    "2": "char1",
                    "4": "current_char",
                    "5": "char_var1",
                    "6": "ch"
                },
                "cVar1, bVar2, uVar3, bVar4, bVar5, bVar6, bVar7": {
                    "1": "<descriptive_variable_name>"
                },
                "consume_whitespace": {
                    "1": "global_function30"
                },
                "dat_00109150": {
                    "1": "elf_special_var"
                },
                "dat_00109158": {
                    "1": "elf_osabi_var"
                },
                "dat_00109160": {
                    "1": "elf_type_var"
                },
                "dat_0010916c": {
                    "1": "elf_machine_var"
                },
                "dcgettext": {
                    "1": "global_function8"
                },
                "dgettext": {
                    "1": "global_function29"
                },
                "elf_machine": {
                    "1": "global_function34"
                },
                "elf_osabi": {
                    "1": "global_function35"
                },
                "elf_type": {
                    "1": "lookup_elf_type"
                },
                "elf_x86_feature": {
                    "1": "lookup_elf_x86_feature"
                },
                "error": {
                    "1": "global_function6",
                    "2": "print_error"
                },
                "exit": {
                    "1": "program_exit"
                },
                "fclose": {
                    "1": "global_function12"
                },
                "ferror": {
                    "1": "global_function11"
                },
                "fileno": {
                    "1": "global_function18"
                },
                "fopen": {
                    "1": "global_function9"
                },
                "fprintf": {
                    "1": "print_formatted"
                },
                "fread": {
                    "1": "global_function10"
                },
                "fseek": {
                    "1": "seek_file"
                },
                "fstat": {
                    "1": "get_file_metadata"
                },
                "ftell": {
                    "1": "global_function15"
                },
                "fun_00102e85": {
                    "1": "print_statments"
                },
                "fun_00102fa0": {
                    "1": "free_byte"
                },
                "fun_00102fbc": {
                    "1": "initialize_data"
                },
                "fun_00103160": {
                    "1": "print_char"
                },
                "fun_001032de": {
                    "1": "print_num"
                },
                "fun_00103449": {
                    "1": "consume_whitespace"
                },
                "fun_0010358d": {
                    "1": "read_file_data"
                },
                "fun_00105370": {
                    "1": "find_string"
                },
                "getopt_long": {
                    "1": "global_function27"
                },
                "iVar10": {
                    "1": "temp_variable",
                    "10": "status",
                    "2": "j",
                    "4": "temp_var"
                },
                "iVar31": {
                    "1": "loop_counter",
                    "2": "loop_counter2",
                    "5": "count"
                },
                "iVar8": {
                    "1": "iteration_index",
                    "16": "index",
                    "2": "counter",
                    "3": "i"
                },
                "idVar8, uVar9, iVar10, __addr, __ptr, plVar11, uVar12, uVar13, uVar14, uVar15, pFVar16, sVar17, __s, sVar18, piVar19, lVar20, plVar21, pbVar22, lVar23, plVar24, uVar25, uVar26, pbVar27, uVar28, lVar29, uVar30, iVar31, ppuVar32, uVar33, pcVar34, uVar35, pcVar36": {
                    "1": "<descriptive_variable_name>"
                },
                "lVar100": {
                    "1": "long_variable64"
                },
                "lVar101": {
                    "1": "long_variable65"
                },
                "lVar102": {
                    "1": "long_variable66"
                },
                "lVar103": {
                    "1": "long_variable67"
                },
                "lVar20": {
                    "1": "counter",
                    "2": "index",
                    "3": "loop_var1",
                    "5": "loop_index",
                    "6": "loop_var"
                },
                "lVar23": {
                    "1": "index_2",
                    "2": "temp_var",
                    "3": "long_var2",
                    "8": "loop_var2"
                },
                "lVar29": {
                    "1": "long_var_3",
                    "2": "loop_var4",
                    "3": "long_var3",
                    "4": "loop_var3"
                },
                "lVar39": {
                    "1": "long_variable4"
                },
                "lVar40": {
                    "1": "long_variable5"
                },
                "lVar41": {
                    "1": "long_variable6"
                },
                "lVar43": {
                    "1": "long_variable7"
                },
                "lVar44": {
                    "1": "long_variable8"
                },
                "lVar45": {
                    "1": "long_variable9"
                },
                "lVar46": {
                    "1": "long_variable10"
                },
                "lVar47": {
                    "1": "long_variable11"
                },
                "lVar48": {
                    "1": "long_variable12"
                },
                "lVar49": {
                    "1": "long_variable13"
                },
                "lVar50": {
                    "1": "long_variable14"
                },
                "lVar51": {
                    "1": "long_variable15"
                },
                "lVar52": {
                    "1": "long_variable16"
                },
                "lVar53": {
                    "1": "long_variable17"
                },
                "lVar54": {
                    "1": "long_variable18"
                },
                "lVar55": {
                    "1": "long_variable19"
                },
                "lVar56": {
                    "1": "long_variable20"
                },
                "lVar57": {
                    "1": "long_variable21"
                },
                "lVar58": {
                    "1": "long_variable22"
                },
                "lVar59": {
                    "1": "long_variable23"
                },
                "lVar60": {
                    "1": "long_variable24"
                },
                "lVar61": {
                    "1": "long_variable25"
                },
                "lVar62": {
                    "1": "long_variable26"
                },
                "lVar63": {
                    "1": "long_variable27"
                },
                "lVar64": {
                    "1": "long_variable28"
                },
                "lVar65": {
                    "1": "long_variable29"
                },
                "lVar66": {
                    "1": "long_variable30"
                },
                "lVar67": {
                    "1": "long_variable31"
                },
                "lVar68": {
                    "1": "long_variable32"
                },
                "lVar69": {
                    "1": "long_variable33"
                },
                "lVar70": {
                    "1": "long_variable34"
                },
                "lVar71": {
                    "1": "long_variable35"
                },
                "lVar72": {
                    "1": "long_variable36"
                },
                "lVar73": {
                    "1": "long_variable37"
                },
                "lVar74": {
                    "1": "long_variable38"
                },
                "lVar75": {
                    "1": "long_variable39"
                },
                "lVar76": {
                    "1": "long_variable40"
                },
                "lVar77": {
                    "1": "long_variable41"
                },
                "lVar78": {
                    "1": "long_variable42"
                },
                "lVar79": {
                    "1": "long_variable43"
                },
                "lVar80": {
                    "1": "long_variable44"
                },
                "lVar81": {
                    "1": "long_variable45"
                },
                "lVar82": {
                    "1": "long_variable46"
                },
                "lVar83": {
                    "1": "long_variable47"
                },
                "lVar84": {
                    "1": "long_variable48"
                },
                "lVar85": {
                    "1": "long_variable49"
                },
                "lVar86": {
                    "1": "long_variable50"
                },
                "lVar87": {
                    "1": "long_variable51"
                },
                "lVar88": {
                    "1": "long_variable52"
                },
                "lVar89": {
                    "1": "long_variable53"
                },
                "lVar90": {
                    "1": "long_variable54"
                },
                "lVar91": {
                    "1": "long_variable55"
                },
                "lVar92": {
                    "1": "long_variable56"
                },
                "lVar93": {
                    "1": "long_variable57"
                },
                "lVar94": {
                    "1": "long_variable58"
                },
                "lVar95": {
                    "1": "long_variable59"
                },
                "lVar96": {
                    "1": "long_variable60"
                },
                "lVar97": {
                    "1": "long_variable61"
                },
                "lVar98": {
                    "1": "long_variable62"
                },
                "lVar99": {
                    "1": "long_variable63"
                },
                "local_120": {
                    "1": "local_var1",
                    "2": "local_var",
                    "3": "local_ulong",
                    "4": "local_size"
                },
                "local_138": {
                    "1": "local_pointer2",
                    "2": "local_var1",
                    "3": "local_ptr"
                },
                "local_138, local_120, local_d8, local_d0, local_c8": {
                    "1": "<descriptive_variable_name>"
                },
                "local_b9": {
                    "1": "ch2"
                },
                "local_c8": {
                    "1": "local_struct_var1",
                    "2": "stat_var",
                    "3": "file_stat",
                    "8": "local_stat"
                },
                "local_c8.st_mode": {
                    "1": "local_stat.st_mode"
                },
                "local_c8.st_size": {
                    "1": "local_stat.st_size"
                },
                "local_d0": {
                    "1": "local_buff2",
                    "2": "new_byte",
                    "3": "byte_array"
                },
                "local_d8": {
                    "1": "local_string_var1",
                    "2": "char_array",
                    "3": "local_str1",
                    "5": "local_str"
                },
                "memcmp": {
                    "1": "global_function3"
                },
                "memcpy": {
                    "1": "global_function21"
                },
                "memmove": {
                    "1": "global_function22"
                },
                "mmap": {
                    "1": "global_function19"
                },
                "munmap": {
                    "1": "unmap_file"
                },
                "open": {
                    "1": "global_function2"
                },
                "pFVar16": {
                    "1": "file_var",
                    "11": "file_ptr",
                    "12": "file_pointer"
                },
                "param_1": {
                    "1": "arg1",
                    "10": "argc",
                    "2": "file_count",
                    "3": "input_count",
                    "6": "num_params"
                },
                "param_2": {
                    "1": "file_names",
                    "10": "argv",
                    "4": "input_files",
                    "7": "file_paths"
                },
                "param_3": {
                    "1": "envp"
                },
                "pbVar22": {
                    "1": "new_buffer",
                    "2": "byte_ptr1",
                    "3": "byte_pointer",
                    "7": "byte_ptr"
                },
                "pbVar27": {
                    "1": "byte_pointer_variable2",
                    "2": "current_char",
                    "3": "byte_ptr",
                    "8": "byte_ptr2"
                },
                "pcVar34": {
                    "1": "char_var_ptr",
                    "2": "str",
                    "5": "char_ptr"
                },
                "pcVar36": {
                    "1": "ptr_char2",
                    "2": "str",
                    "5": "char_ptr2"
                },
                "piVar19": {
                    "1": "errno_var",
                    "11": "errno_ptr",
                    "2": "error_code",
                    "3": "errno_pointer"
                },
                "plVar11": {
                    "1": "loop_ptr",
                    "2": "long_pointer",
                    "4": "long_ptr"
                },
                "plVar21": {
                    "1": "pointer_list_variable21",
                    "2": "file_paths_pointer"
                },
                "plVar24": {
                    "1": "new_array_ptr",
                    "2": "param_array3"
                },
                "plVar42": {
                    "1": "ptr_variable4"
                },
                "ppuVar32": {
                    "1": "undefined_pointer_pointer",
                    "2": "text_domain_ptr",
                    "9": "ptr_ptr"
                },
                "process_archive": {
                    "1": "global_function31"
                },
                "process_archive, process_object, usage, elf_machine, elf_type, elf_osabi, elf_x86_feature, setlocale, bindtextdomain, textdomain, fopen, fprintf, xexit_constprop_0, fputs, degettext, printf, memcmp, error, strncmp, xstrdup, mmap, xfopen, fclose, fwrite, ftell, fseek, malloc, free, xmalloc, xrealloc, memmove, strdup, xexit, fprintf_unlocked, fflush, strerror, putc_unlocked, puts, exit": {
                    "1": "<descriptive_function_name>"
                },
                "process_object": {
                    "1": "global_function32"
                },
                "puVar37": {
                    "1": "ulong_ptr1",
                    "2": "ptr_ptr2"
                },
                "rewind": {
                    "1": "global_function16"
                },
                "sVar17": {
                    "1": "read_count",
                    "2": "size_value",
                    "3": "size_var",
                    "5": "size_var1",
                    "7": "size"
                },
                "sVar18": {
                    "1": "size1",
                    "2": "buffer_size",
                    "4": "read_size",
                    "7": "size_var2"
                },
                "stat": {
                    "1": "global_function17"
                },
                "strcmp": {
                    "1": "global_function4"
                },
                "strerror": {
                    "1": "global_function7"
                },
                "strlen": {
                    "1": "global_function25"
                },
                "strtoul": {
                    "1": "global_function26"
                },
                "uVar12": {
                    "1": "unsigned_variable1",
                    "2": "val1",
                    "3": "ulong_var1",
                    "5": "ulong_var12"
                },
                "uVar13": {
                    "1": "unsigned_variable13",
                    "2": "ulong_val3",
                    "3": "ulong_var2",
                    "5": "ulong_var13"
                },
                "uVar14": {
                    "1": "unsigned_variable3",
                    "2": "val3",
                    "3": "ulong_var4",
                    "5": "ulong_var14"
                },
                "uVar15": {
                    "1": "ulong_value5",
                    "2": "ulong_val5",
                    "3": "ulong_var4",
                    "5": "ulong_var15"
                },
                "uVar25": {
                    "1": "result2",
                    "2": "temp_var2"
                },
                "uVar26": {
                    "1": "unsigned_variable26",
                    "2": "ulong_var5",
                    "4": "ulong_var6",
                    "5": "ulong_var26"
                },
                "uVar28": {
                    "1": "uint_var1",
                    "2": "unsigned_var7",
                    "3": "uint_val",
                    "4": "uint_var"
                },
                "uVar3": {
                    "1": "unsigned_long_value",
                    "3": "ulong_value",
                    "5": "ulong_val",
                    "6": "ulong_var3",
                    "7": "ulong_var"
                },
                "uVar30": {
                    "1": "new_result",
                    "2": "return_value",
                    "3": "flags"
                },
                "uVar33": {
                    "1": "ulong_var10",
                    "2": "uint_val2",
                    "3": "ulong_var33",
                    "4": "uint_var2"
                },
                "uVar35": {
                    "1": "temp_ulong_10",
                    "2": "ulong_var6",
                    "5": "ulong_var35"
                },
                "uVar38": {
                    "1": "val6",
                    "4": "ulong_var38"
                },
                "uVar9": {
                    "1": "result_code",
                    "17": "result",
                    "2": "u",
                    "3": "return_val",
                    "5": "return_value"
                },
                "uint": {
                    "1": "unsigned_int"
                },
                "undefined8": {
                    "1": "ulong_var10"
                },
                "usage": {
                    "1": "global_function28",
                    "2": "print_usage"
                },
                "xexit_constprop_0": {
                    "1": "exit_program"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                },
                "xrealloc": {
                    "1": "reallocate_memory"
                },
                "xstrdup": {
                    "1": "global_function24"
                }
            },
            "called": [
                "FUN_00102150",
                "FUN_001021d0",
                "FUN_00102220",
                "FUN_00102160",
                "FUN_001020d0",
                "FUN_00104da0",
                "FUN_00102100",
                "FUN_00102170",
                "FUN_00104d30",
                "FUN_00102190",
                "FUN_00104c60",
                "FUN_00103449",
                "FUN_00102e85",
                "FUN_0010358d",
                "FUN_001020e0",
                "FUN_00102fbc",
                "FUN_00102250",
                "FUN_001020f0",
                "FUN_00102120",
                "FUN_00102180",
                "FUN_001021a0",
                "FUN_00102200",
                "FUN_00104ce0",
                "FUN_001020a0",
                "FUN_00102110",
                "FUN_00102280",
                "FUN_001020c0",
                "FUN_00102240",
                "FUN_00102290",
                "FUN_00102090",
                "FUN_001020b0",
                "FUN_00102fa0",
                "FUN_00104de0",
                "FUN_00103160",
                "FUN_001021f0",
                "FUN_00102060",
                "FUN_001032de",
                "FUN_00102210",
                "FUN_00102080",
                "FUN_00105370",
                "FUN_00102030"
            ],
            "calling": [
                "FUN_00103b00"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nunsigned_int process_files_00103bf0(int argc,long *argv)\n\n{\n  char ch;\n  byte byte_var;\n  ulong ulong_var;\n  bool bool_var1;\n  bool bool_var2;\n  bool bool_var3;\n  bool bool_var4;\n  int index;\n  unsigned_int result;\n  int status;\n  void *address;\n  void *pointer;\n  long *long_ptr;\n  ulong ulong_var12;\n  ulong ulong_var13;\n  ulong ulong_var14;\n  ulong ulong_var15;\n  FILE *file_pointer;\n  size_t size;\n  byte *buffer;\n  size_t size_var2;\n  int *errno_ptr;\n  long loop_var;\n  long *param_array2;\n  byte *byte_ptr;\n  long loop_var2;\n  long *param_array3;\n  ulong_var10 temp_var;\n  ulong ulong_var26;\n  byte *byte_ptr2;\n  unsigned_int uint_var;\n  long loop_var3;\n  unsigned_int flags;\n  int count;\n  undefined **ptr_ptr;\n  unsigned_int uint_var2;\n  char *char_ptr;\n  ulong ulong_var35;\n  char *char_ptr2;\n  ulong_var10 *ulong_ptr;\n  ulong ulong_var38;\n  ulong_var10 *local_ptr;\n  ulong local_size;\n  char *local_str;\n  byte *local_byte_ptr;\n  global_function17 local_stat;\n  \n  index = 0;\n  count = 2000;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  param_array2 = argv;\nLAB_00103c54:\n  loop_var3 = (long)(index + 1);\n  do {\n    index = (int)loop_var3;\n    if (argc <= index) {\n      ptr_ptr = &PTR_s_input_mach_00109180;\n      break;\n    }\n    if (*(char *)param_array2[loop_var3] == '@') {\n      count = count + -1;\n      if (count == 0) {\n        loop_var3 = *param_array2;\n        char_ptr2 = \"%s: print_error: too many @-files encountered\\n\";\n        goto LAB_00104739;\n      }\n      char_ptr2 = (char *)param_array2[loop_var3] + 1;\n      status = global_function17(char_ptr2,&local_stat);\n      if (-1 < status) {\n        if ((local_stat.st_mode & 0xf000) == 0x4000) {\n          do {\n            loop_var3 = *param_array2;\n            char_ptr2 = \"%s: print_error: @-file refers to a directory\\n\";\nLAB_00104739:\n            global_function5(_stderr,char_ptr2,loop_var3);\n            global_function33();\n          } while( true );\n        }\n        file_pointer = global_function9(char_ptr2,\"r\");\n        if (file_pointer != (FILE *)0x0) goto code_r0x00104650;\n      }\n    }\n    loop_var3 = loop_var3 + 1;\n  } while( true );\nLAB_00103c87:\n  index = global_function27(argc,param_array2,&DAT_0010604c,ptr_ptr,0);\n  if (index == -1) {\n    if ((_optind == argc) ||\n       (((DAT_00109444 | DAT_00109440) == 0 &&\n        (ptr_ptr = (undefined **)0x0,\n        (DAT_0010916c & DAT_00109160 & DAT_00109158 & DAT_00109150) == 0xffffffff))))\n    goto switchD_00103cba_caseD_69;\n    flags = 0;\n    goto LAB_00103d1c;\n  }\n  switch(index) {\n  case 0x68:\n    print_usage(_stdout,0);\n  default:\nswitchD_00103cba_caseD_69:\n    print_usage(_stderr,1);\n    goto switchD_00103cba_caseD_9a;\n  case 0x76:\n    printf(\"GNU %s %s\\n\",\"elfedit\",\"(GNU Binutils for Debian) 2.40\");\n    char_ptr2 = (char *)get_translation(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n    printf(char_ptr2);\n    char_ptr2 = (char *)get_translation(0,\n                                \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                ,5);\n    printf(char_ptr2);\n                    \n    program_exit(0);\n  case 0x96:\n    DAT_00109174 = lookup_elf_machine(_optarg);\n    if (DAT_00109174 < 0) {\n      return 1;\n    }\n    if (DAT_00109174 == 6) {\n      DAT_00109170 = 1;\n    }\n    else if (DAT_00109174 < 7) {\n      DAT_00109170 = (DAT_00109174 != 3) + 1 + (unsigned_int)(DAT_00109174 != 3);\n    }\n    else {\n      DAT_00109170 = 3 - (unsigned_int)(DAT_00109174 - 0xb4U < 2);\n    }\n    goto LAB_00103c87;\n  case 0x97:\n    DAT_0010916c = lookup_elf_machine(_optarg);\n    if ((int)DAT_0010916c < 0) {\n      return 1;\n    }\n    if ((int)DAT_0010916c < 0xb6) {\n      DAT_00109168 = 2;\n      if (((int)DAT_0010916c < 0xb4) && (DAT_00109168 = 1, DAT_0010916c != 3)) {\n        DAT_00109168 = (DAT_0010916c != 6) + 1 + (unsigned_int)(DAT_0010916c != 6);\n      }\n    }\n    else {\n      DAT_00109168 = 3;\n    }\n    goto LAB_00103c87;\n  case 0x98:\n    DAT_00109164 = lookup_elf_type(_optarg);\n    flags = DAT_00109164;\n    break;\n  case 0x99:\n    DAT_00109160 = lookup_elf_type(_optarg);\n    flags = DAT_00109160;\n    break;\n  case 0x9a:\n    goto switchD_00103cba_caseD_9a;\n  case 0x9b:\n    DAT_00109158 = lookup_elf_osabi(_optarg);\n    flags = DAT_00109158;\n    break;\n  case 0x9c:\n    ulong_var15 = global_function26(_optarg,&local_str,0);\n    flags = (unsigned_int)ulong_var15;\n    ch = *local_str;\n    DAT_00109154 = flags;\n    char_ptr2 = _optarg;\n    goto joined_r0x00104334;\n  case 0x9d:\n    ulong_var15 = global_function26(_optarg,&local_str,0);\n    flags = (unsigned_int)ulong_var15;\n    ch = *local_str;\n    DAT_00109150 = flags;\n    char_ptr2 = _optarg;\njoined_r0x00104334:\n    _optarg = char_ptr2;\n    if ((ch != '\\0') || (0xff < flags)) {\n      temp_var = get_translation(0,\"Invalid ABIVERSION: %s\\n\",5);\n      print_error(temp_var,char_ptr2);\n      return 1;\n    }\n    goto LAB_00103c87;\n  case 0x9e:\n    temp_var = 1;\n    goto LAB_00103e9d;\n  case 0x9f:\n    temp_var = 0;\nLAB_00103e9d:\n    flags = lookup_elf_x86_feature(_optarg,temp_var);\n  }\njoined_r0x00103eae:\n  if ((int)flags < 0) {\n    return 1;\n  }\n  goto LAB_00103c87;\nLAB_00103d1c:\n  loop_var3 = (long)_optind;\n  if (argc <= _optind) {\n    return flags;\n  }\n  _optind = _optind + 1;\n  char_ptr2 = (char *)param_array2[loop_var3];\n  index = global_function17(char_ptr2,&local_stat);\n  if (index < 0) {\n    errno_ptr = __errno_location();\n    char_ptr = \"\\'%s\\': No such file\\n\";\n    if (*errno_ptr == 2) goto LAB_00104497;\n    char_ptr = global_function7(*errno_ptr);\n    temp_var = get_translation(0,\"Could not locate \\'%s\\'.  System print_error message: %s\\n\",5);\n    print_error(temp_var,char_ptr2,char_ptr);\nLAB_001044ab:\n    result = 1;\n  }\n  else {\n    if ((local_stat.st_mode & 0xf000) != 0x8000) {\n      char_ptr = \"\\'%s\\' is not an ordinary file\\n\";\nLAB_00104497:\n      temp_var = get_translation(0,char_ptr,5);\n      print_error(temp_var,char_ptr2);\n      goto LAB_001044ab;\n    }\n    file_pointer = global_function9(char_ptr2,\"r+b\");\n    if (file_pointer == (FILE *)0x0) {\n      char_ptr = \"Input file \\'%s\\' is not readable\\n\";\n      goto LAB_00104497;\n    }\n    size = global_function10(&local_byte_ptr,8,1,file_pointer);\n    if (size != 1) {\n      temp_var = get_translation(0,\"%s: Failed to read file\\'s magic number\\n\",5);\n      print_error(temp_var,char_ptr2);\n      global_function12(file_pointer);\n      goto LAB_001044ab;\n    }\n    if (local_byte_ptr == (byte *)0xa3e686372613c21) {\n      result = global_function31(char_ptr2,file_pointer,0);\n    }\n    else if (local_byte_ptr == (byte *)0xa3e6e6968743c21) {\n      result = global_function31(char_ptr2,file_pointer,1);\n    }\n    else {\n      global_function16(file_pointer);\n      DAT_00109438 = 0;\n      result = global_function32(char_ptr2,file_pointer);\n      if (((result == 0) && ((ushort)(DAT_00109418 - 2U) < 2)) &&\n         ((DAT_00109444 | DAT_00109440) != 0)) {\n        if ((DAT_0010941a == 3) ||\n           (char_ptr = \"%s: Not an i386 nor x86-64 ELF file\\n\", DAT_0010941a == 0x3e)) {\n          index = global_function18(file_pointer);\n          index = get_file_metadata(index,&local_stat);\n          if (index < 0) {\n            temp_var = get_translation(0,\"%s: global_function17 () failed\\n\",5);\n            print_error(temp_var,char_ptr2);\n            result = 1;\n          }\n          else {\n            index = global_function18(file_pointer);\n            address = global_function19((void *)0x0,local_stat.st_size,3,1,index,0);\n            if (address == (void *)0xffffffffffffffff) {\n              char_ptr = \"%s: global_function19 () failed\\n\";\n              goto LAB_0010438d;\n            }\n            pointer = (void *)global_function13((ulong)DAT_00109424 << 6);\n            loop_var3 = DAT_001093f8;\n            if (DAT_001093e4 == '\\x01') {\n              for (ulong_var15 = 0; (unsigned_int)ulong_var15 < DAT_00109424; ulong_var15 = (ulong)((unsigned_int)ulong_var15 + 1)) {\n                loop_var = ulong_var15 * 0x20 + loop_var3 + (long)address;\n                ulong_ptr = (ulong_var10 *)((long)pointer + ulong_var15 * 0x40);\n                temp_var = (*DAT_001093c0)(loop_var,4);\n                *ulong_ptr = temp_var;\n                temp_var = (*DAT_001093c0)(loop_var + 4,4);\n                ulong_ptr[2] = temp_var;\n                temp_var = (*DAT_001093c0)(loop_var + 8,4);\n                ulong_ptr[3] = temp_var;\n                temp_var = (*DAT_001093c0)(loop_var + 0xc,4);\n                ulong_ptr[4] = temp_var;\n                temp_var = (*DAT_001093c0)(loop_var + 0x10,4);\n                ulong_ptr[5] = temp_var;\n                temp_var = (*DAT_001093c0)(loop_var + 0x14,4);\n                ulong_ptr[6] = temp_var;\n                temp_var = (*DAT_001093c0)(loop_var + 0x18,4);\n                ulong_ptr[1] = temp_var;\n                temp_var = (*DAT_001093c0)(loop_var + 0x1c,4);\n                ulong_ptr[7] = temp_var;\n              }\n            }\n            else {\n              for (uint_var = 0; uint_var < DAT_00109424; uint_var = uint_var + 1) {\n                loop_var = (ulong)uint_var * 0x38 + loop_var3 + (long)address;\n                ulong_ptr = (ulong_var10 *)((ulong)uint_var * 0x40 + (long)pointer);\n                temp_var = (*DAT_001093c0)(loop_var,4);\n                *ulong_ptr = temp_var;\n                temp_var = (*DAT_001093c0)(loop_var + 8,8);\n                ulong_ptr[2] = temp_var;\n                temp_var = (*DAT_001093c0)(loop_var + 0x10,8);\n                ulong_ptr[3] = temp_var;\n                temp_var = (*DAT_001093c0)(loop_var + 0x18,8);\n                ulong_ptr[4] = temp_var;\n                temp_var = (*DAT_001093c0)(loop_var + 0x20,8);\n                ulong_ptr[5] = temp_var;\n                temp_var = (*DAT_001093c0)(loop_var + 0x28,8);\n                ulong_ptr[6] = temp_var;\n                temp_var = (*DAT_001093c0)(loop_var + 4,4);\n                ulong_ptr[1] = temp_var;\n                temp_var = (*DAT_001093c0)(loop_var + 0x30,8);\n                ulong_ptr[7] = temp_var;\n              }\n            }\n            for (ulong_var15 = 0; (unsigned_int)ulong_var15 < DAT_00109424; ulong_var15 = (ulong)((unsigned_int)ulong_var15 + 1)) {\n              long_ptr = (long *)(ulong_var15 * 0x40 + (long)pointer);\n              if (*long_ptr == 4) {\n                loop_var3 = long_ptr[5];\n                ulong_var = long_ptr[7];\n                ulong_var35 = (long)address + long_ptr[2];\n                for (local_size = ulong_var35; local_size < ulong_var35 + loop_var3;\n                    local_size = local_size + ((ulong_var - 1) + ulong_var14 + ulong_var13 & ulong_var26)) {\n                  if ((ulong_var35 - local_size) + loop_var3 < 0xc) {\nLAB_001044cb:\n                    temp_var = get_translation(0,\"%s: Invalid PT_NOTE segment\\n\",5);\n                    print_error(temp_var,char_ptr2);\n                    result = 1;\n                    goto LAB_001042bf;\n                  }\n                  loop_var = (*DAT_001093c0)(local_size + 8,4);\n                  ulong_var12 = (*DAT_001093c0)(local_size,4);\n                  if ((ulong_var35 - (long)(char *)(local_size + 0xc)) + loop_var3 < ulong_var12)\n                  goto LAB_001044cb;\n                  ulong_var13 = (*DAT_001093c0)(local_size + 4,4);\n                  ulong_var26 = -ulong_var;\n                  ulong_var14 = ulong_var + 0xb + ulong_var12 & ulong_var26;\n                  ulong_var38 = local_size + ulong_var14;\n                  if ((ulong_var13 != 0) &&\n                     ((ulong_var35 + loop_var3 <= ulong_var38 || ((ulong_var35 - ulong_var38) + loop_var3 < ulong_var13))))\n                  goto LAB_001044cb;\n                  if ((ulong_var12 == 4) &&\n                     ((index = global_function4((char *)(local_size + 0xc),\"GNU\"), index == 0 && (loop_var == 5))\n                     )) {\n                    if ((ulong_var13 < 8) || (ulong_var13 % ulong_var != 0)) goto LAB_001044cb;\n                    ulong_var12 = ulong_var38 + ulong_var13;\n                    do {\n                      index = (*DAT_001093c0)(ulong_var38,4);\n                      uint_var = (*DAT_001093c0)(ulong_var38 + 4,4);\n                      loop_var = ulong_var38 + 8;\n                      if (ulong_var12 < loop_var + (ulong)uint_var) goto LAB_001044cb;\n                      if (index == -0x3ffffffe) {\n                        if (uint_var != 4) goto LAB_001044cb;\n                        uint_var = (*DAT_001093c0)(loop_var,4);\n                        if (DAT_00109444 == 0) {\n                          uint_var2 = uint_var;\n                          if (DAT_00109440 == 0) goto LAB_001042bf;\nLAB_001042ac:\n                          uint_var2 = uint_var2 & ~DAT_00109440;\n                        }\n                        else {\n                          uint_var2 = DAT_00109444 | uint_var;\n                          if (DAT_00109440 != 0) goto LAB_001042ac;\n                        }\n                        if (uint_var != uint_var2) {\n                          (*DAT_001093b8)(loop_var,uint_var2,4);\n                        }\n                        goto LAB_001042bf;\n                      }\n                      ulong_var38 = loop_var + ((ulong)uint_var + (ulong_var - 1) & ulong_var26);\n                    } while (7 < (long)(ulong_var12 - ulong_var38));\n                  }\n                }\n              }\n            }\nLAB_001042bf:\n            free(pointer);\n            global_function20(address,local_stat.st_size);\n          }\n        }\n        else {\nLAB_0010438d:\n          temp_var = get_translation(0,char_ptr,5);\n          print_error(temp_var,char_ptr2);\n        }\n      }\n    }\n    global_function12(file_pointer);\n  }\n  flags = flags | result;\n  goto LAB_00103d1c;\nswitchD_00103cba_caseD_9a:\n  DAT_0010915c = lookup_elf_osabi(_optarg);\n  flags = DAT_0010915c;\n  goto joined_r0x00103eae;\ncode_r0x00104650:\n  status = global_function14(file_pointer,0,2);\n  if (((status != -1) && (size = global_function15(file_pointer), size != 0xffffffffffffffff)) &&\n     (status = global_function14(file_pointer,0,0), status != -1)) {\n    buffer = (byte *)global_function13(size + 1);\n    size_var2 = global_function10(buffer,1,size,file_pointer);\n    if ((size == size_var2) || (status = global_function11(file_pointer), status == 0)) {\n      buffer[size_var2] = 0;\n      byte_ptr2 = buffer;\nLAB_001046fc:\n      if (*byte_ptr2 == 0) {\n        local_ptr = (ulong_var10 *)global_function13(8);\n        *local_ptr = 0;\n      }\n      else {\n        if (((&DAT_00107040)[(ulong)*byte_ptr2 * 2] & 0x40) != 0) goto code_r0x00104718;\n        local_byte_ptr = buffer;\n        global_function25((char *)buffer);\n        byte_ptr2 = (byte *)global_function13();\n        local_ptr = (ulong_var10 *)0x0;\n        status = 0;\n        bool_var3 = false;\n        bool_var2 = false;\n        bool_var4 = false;\n        loop_var = 0;\n        do {\n          global_function30(&local_byte_ptr);\n          byte_ptr = byte_ptr2;\n          if ((status == 0) || (status + -1 <= (int)loop_var)) {\n            if (local_ptr == (ulong_var10 *)0x0) {\n              status = 8;\n              local_ptr = (ulong_var10 *)global_function13(0x40);\n            }\n            else {\n              status = status * 2;\n              local_ptr = (ulong_var10 *)global_function23(local_ptr,(long)status << 3);\n            }\n            local_ptr[loop_var] = 0;\n          }\n          for (; byte_var = *local_byte_ptr, byte_var != 0; local_byte_ptr = local_byte_ptr + 1) {\n            if ((((&DAT_00107040)[(ulong)byte_var * 2] & 0x40) != 0) &&\n               (bool_var1 = (bool)(bool_var2 | bool_var4 | bool_var3), !bool_var1)) {\n              bool_var3 = false;\n              bool_var4 = false;\n              bool_var2 = bool_var1;\n              break;\n            }\n            if (bool_var3) {\n              *byte_ptr = byte_var;\n              bool_var3 = false;\n              byte_ptr = byte_ptr + 1;\n            }\n            else if (byte_var == 0x5c) {\n              bool_var3 = true;\n            }\n            else if (bool_var2) {\n              if (byte_var == 0x27) {\n                bool_var2 = false;\n              }\n              else {\nLAB_00104c08:\n                *byte_ptr = byte_var;\n                byte_ptr = byte_ptr + 1;\n              }\n            }\n            else if (bool_var4) {\n              if (byte_var != 0x22) goto LAB_00104c08;\n              bool_var4 = false;\n            }\n            else if (byte_var == 0x27) {\n              bool_var2 = true;\n            }\n            else {\n              if (byte_var != 0x22) goto LAB_00104c08;\n              bool_var4 = true;\n            }\n          }\n          *byte_ptr = 0;\n          temp_var = global_function24();\n          local_ptr[loop_var] = temp_var;\n          local_ptr[loop_var + 1] = 0;\n          global_function30(&local_byte_ptr);\n          loop_var = loop_var + 1;\n        } while (*local_byte_ptr != 0);\n        free(byte_ptr2);\n      }\n      if (param_array2 == argv) {\n        loop_var = 1;\n        do {\n          loop_var2 = loop_var;\n          loop_var = loop_var2 + 1;\n        } while (param_array2[loop_var2 + -1] != 0);\n        param_array3 = (long *)global_function13((long)(int)loop_var2 << 3);\n        long_ptr = param_array3;\n        while (loop_var = *param_array2, param_array2 = param_array2 + 1, loop_var != 0) {\n          loop_var = global_function24();\n          *long_ptr = loop_var;\n          long_ptr = long_ptr + 1;\n        }\n        *long_ptr = 0;\n        loop_var = 0;\n      }\n      else {\n        loop_var = 0;\n        param_array3 = param_array2;\n      }\n      for (; local_ptr[loop_var] != 0; loop_var = loop_var + 1) {\n      }\n      free((void *)param_array3[loop_var3]);\n      param_array2 = (long *)global_function23(param_array3,(loop_var + 1 + (long)argc) * 8);\n      global_function22(param_array2 + loop_var3 + loop_var,param_array2 + loop_var3 + 1,(long)(argc - index) << 3);\n      argc = argc + -1 + (int)loop_var;\n      global_function21(param_array2 + loop_var3,local_ptr,loop_var * 8);\n      free(local_ptr);\n      free(buffer);\n      index = index + -1;\n    }\n    else {\n      free(buffer);\n    }\n  }\n  global_function12(file_pointer);\n  goto LAB_00103c54;\ncode_r0x00104718:\n  byte_ptr2 = byte_ptr2 + 1;\n  goto LAB_001046fc;\n}\n\n",
            "current_name": "process_files_00103bf0",
            "entrypoint": "0x00103bf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103bf0": "process_files_00103bf0",
                "__addr": "address",
                "__ptr": "pointer",
                "__s": "buffer",
                "bVar2": "byte_var",
                "bVar4": "bool_var1",
                "bVar5": "bool_var2",
                "bVar6": "bool_var3",
                "bVar7": "bool_var4",
                "cVar1": "ch",
                "consume_whitespace": "global_function30",
                "dcgettext": "get_translation",
                "elf_machine": "lookup_elf_machine",
                "elf_osabi": "lookup_elf_osabi",
                "elf_type": "lookup_elf_type",
                "elf_x86_feature": "lookup_elf_x86_feature",
                "error": "print_error",
                "exit": "program_exit",
                "fclose": "global_function12",
                "ferror": "global_function11",
                "fileno": "global_function18",
                "fopen": "global_function9",
                "fprintf": "global_function5",
                "fread": "global_function10",
                "fseek": "global_function14",
                "fstat": "get_file_metadata",
                "ftell": "global_function15",
                "getopt_long": "global_function27",
                "iVar10": "status",
                "iVar31": "count",
                "iVar8": "index",
                "lVar20": "loop_var",
                "lVar23": "loop_var2",
                "lVar29": "loop_var3",
                "local_120": "local_size",
                "local_138": "local_ptr",
                "local_c8": "local_stat",
                "local_c8.st_mode": "local_stat.st_mode",
                "local_c8.st_size": "local_stat.st_size",
                "local_d0": "local_byte_ptr",
                "local_d8": "local_str",
                "memcpy": "global_function21",
                "memmove": "global_function22",
                "mmap": "global_function19",
                "munmap": "global_function20",
                "open": "global_function2",
                "pFVar16": "file_pointer",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar22": "byte_ptr",
                "pbVar27": "byte_ptr2",
                "pcVar34": "char_ptr",
                "pcVar36": "char_ptr2",
                "piVar19": "errno_ptr",
                "plVar11": "long_ptr",
                "plVar21": "param_array2",
                "plVar24": "param_array3",
                "ppuVar32": "ptr_ptr",
                "process_archive": "global_function31",
                "process_object": "global_function32",
                "puVar37": "ulong_ptr",
                "rewind": "global_function16",
                "sVar17": "size",
                "sVar18": "size_var2",
                "stat": "global_function17",
                "strcmp": "global_function4",
                "strerror": "global_function7",
                "strlen": "global_function25",
                "strtoul": "global_function26",
                "uVar12": "ulong_var12",
                "uVar13": "ulong_var13",
                "uVar14": "ulong_var14",
                "uVar15": "ulong_var15",
                "uVar25": "temp_var",
                "uVar26": "ulong_var26",
                "uVar28": "uint_var",
                "uVar3": "ulong_var",
                "uVar30": "flags",
                "uVar33": "uint_var2",
                "uVar35": "ulong_var35",
                "uVar38": "ulong_var38",
                "uVar9": "result",
                "uint": "unsigned_int",
                "undefined8": "ulong_var10",
                "usage": "print_usage",
                "xexit_constprop_0": "global_function33",
                "xmalloc": "global_function13",
                "xrealloc": "global_function23",
                "xstrdup": "global_function24"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104c60": {
            "additional_data": {
                "DAT_00109440": {
                    "1": "enabled_features"
                },
                "DAT_00109444": {
                    "1": "disabled_features"
                },
                "FUN_00104c60": {
                    "1": "update_feature",
                    "2": "process_x86_feature",
                    "7": "identify_x86_feature",
                    "9": "update_x86_feature"
                },
                "auVar4": {
                    "1": "return_au_var",
                    "10": "return_value",
                    "11": "result",
                    "3": "return_array"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "error": {
                    "1": "print_error"
                },
                "iVar1": {
                    "1": "strcmp_result",
                    "12": "comparison_result",
                    "16": "strcasecmp_result",
                    "2": "result"
                },
                "param_1": {
                    "1": "x86_feature_name",
                    "19": "feature_name",
                    "5": "x86_feature",
                    "6": "feature"
                },
                "param_2": {
                    "1": "toggle_bit",
                    "10": "is_enabled",
                    "2": "enable_feature",
                    "4": "is_set",
                    "7": "enable"
                },
                "param_3": {
                    "1": "undef_param_3",
                    "2": "msg_id",
                    "3": "error_msg",
                    "6": "error_message"
                },
                "param_4": {
                    "1": "unknown_arg_2",
                    "10": "return_value",
                    "5": "result"
                },
                "uVar2": {
                    "1": "feature_bit",
                    "2": "flag_value",
                    "6": "feature_flag",
                    "8": "feature_mask"
                },
                "uVar3": {
                    "1": "gettext_result",
                    "10": "error_message",
                    "2": "error_msg_ptr",
                    "4": "error_msg",
                    "6": "return_value"
                }
            },
            "called": [
                "FUN_00102040",
                "FUN_001022c0"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nundefined  [16] update_x86_feature_00104c60(char *feature_name,int is_enabled,undefined8 error_message,undefined8 return_value)\n\n{\n  int strcasecmp_result;\n  uint feature_mask;\n  undefined8 error_message;\n  undefined result [16];\n  \n  strcasecmp_result = strcasecmp(feature_name,\"ibt\");\n  feature_mask = 1;\n  if (strcasecmp_result != 0) {\n    strcasecmp_result = strcasecmp(feature_name,\"shstk\");\n    feature_mask = 2;\n    if (strcasecmp_result != 0) {\n      strcasecmp_result = strcasecmp(feature_name,\"lam_u48\");\n      if (strcasecmp_result == 0) {\n        feature_mask = 4;\n      }\n      else {\n        strcasecmp_result = strcasecmp(feature_name,\"lam_u57\");\n        feature_mask = 8;\n        if (strcasecmp_result != 0) {\n          error_message = get_error_message(0,\"Unknown x86 feature: %s\\n\",5);\n          print_error(error_message,feature_name);\n          error_message = 0xffffffff;\n          goto LAB_00104ca5;\n        }\n      }\n    }\n  }\n  if (is_enabled == 0) {\n    DAT_00109440 = feature_mask | DAT_00109440;\n    DAT_00109444 = ~feature_mask & DAT_00109444;\n  }\n  else {\n    DAT_00109444 = feature_mask | DAT_00109444;\n    DAT_00109440 = DAT_00109440 & ~feature_mask;\n  }\n  error_message = 0;\nLAB_00104ca5:\n  result._8_8_ = return_value;\n  result._0_8_ = error_message;\n  return result;\n}\n\n",
            "current_name": "update_x86_feature_00104c60",
            "entrypoint": "0x00104c60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104c60": "update_x86_feature_00104c60",
                "auVar4": "result",
                "dcgettext": "get_error_message",
                "error": "print_error",
                "iVar1": "strcasecmp_result",
                "param_1": "feature_name",
                "param_2": "is_enabled",
                "param_3": "error_message",
                "param_4": "return_value",
                "uVar2": "feature_mask",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104ce0": {
            "additional_data": {
                "FUNK_00104ce0": {
                    "1": "find_osabi_by_name"
                },
                "FUN_00104ce0": {
                    "1": "check_osabi",
                    "23": "find_osabi"
                },
                "auVar6": {
                    "1": "output",
                    "22": "result",
                    "8": "return_value"
                },
                "iVar1": {
                    "28": "comparison_result",
                    "3": "result"
                },
                "param_1": {
                    "1": "osabi_to_find",
                    "2": "os_name",
                    "4": "target_osabi",
                    "9": "osabi_name"
                },
                "param_2": {
                    "1": "unknown_arg_1",
                    "12": "param_2",
                    "2": "unused_param_1",
                    "4": "arg2",
                    "5": "param2"
                },
                "param_3": {
                    "1": "unused_param_3",
                    "12": "param_3",
                    "2": "unused_param_2",
                    "4": "arg3",
                    "5": "param3"
                },
                "param_4": {
                    "1": "parameter_4",
                    "2": "arg3",
                    "3": "arg4",
                    "4": "param4",
                    "7": "param_4"
                },
                "puVar5": {
                    "1": "osabi_array_pointer",
                    "2": "array_ptr",
                    "3": "data_pointer",
                    "4": "data_ptr",
                    "5": "osabi_array"
                },
                "uVar2": {
                    "1": "localized_error",
                    "13": "error_message",
                    "3": "translation"
                },
                "uVar3": {
                    "1": "osabi_index",
                    "28": "index"
                },
                "uVar4": {
                    "1": "incremented_value",
                    "18": "next_index",
                    "2": "index_plus_one"
                }
            },
            "called": [
                "FUN_00102040",
                "FUN_00102323"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nundefined  [16] find_osabi_00104ce0(char *osabi_name,undefined8 param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  int comparison_result;\n  undefined8 error_message;\n  ulong index;\n  uint next_index;\n  undefined4 *string_array;\n  undefined result [16];\n  \n  string_array = &DAT_00108ca0;\n  index = 0;\n  do {\n    comparison_result = strcasecmp(osabi_name,*(char **)(string_array + 2));\n    if (comparison_result == 0) {\n      index = (ulong)(uint)(&DAT_00108ca0)[index * 4];\n      goto LAB_00104d20;\n    }\n    next_index = (int)index + 1;\n    index = (ulong)next_index;\n    string_array = string_array + 4;\n  } while (next_index != 0x10);\n  error_message = dcgettext(0,\"Unknown OSABI: %s\\n\",5);\n  error(error_message,osabi_name);\n  index = 0xffffffff;\nLAB_00104d20:\n  result._8_8_ = param_4;\n  result._0_8_ = index;\n  return result;\n}\n\n",
            "current_name": "find_osabi_00104ce0",
            "entrypoint": "0x00104ce0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104ce0": "find_osabi_00104ce0",
                "auVar6": "result",
                "iVar1": "comparison_result",
                "param_1": "osabi_name",
                "puVar5": "string_array",
                "uVar2": "error_message",
                "uVar3": "index",
                "uVar4": "next_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104d30": {
            "additional_data": {
                "FUN_00104d30": {
                    "1": "machine_type_to_code",
                    "30": "get_machine_type"
                },
                "iVar1": {
                    "1": "result_code",
                    "25": "result",
                    "3": "comparison_result"
                },
                "iVar2": {
                    "1": "strcasecmp_result2",
                    "11": "comparison_result",
                    "3": "compare_result",
                    "4": "cmp_result",
                    "6": "temp_result"
                },
                "param_1": {
                    "1": "machine_string",
                    "30": "machine_type"
                },
                "uVar3": {
                    "1": "error_text",
                    "18": "error_message",
                    "5": "error_msg",
                    "7": "error_string"
                }
            },
            "called": [
                "FUN_00102040",
                "FUN_0010234b"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nint get_machine_type_00104d30(char *machine_type)\n\n{\n  int result;\n  int comparison_result;\n  undefined8 error_message;\n  \n  result = strcasecmp(machine_type,\"i386\");\n  if (result == 0) {\n    result = 3;\n  }\n  else {\n    result = strcasecmp(machine_type,\"iamcu\");\n    if (result == 0) {\n      return 6;\n    }\n    comparison_result = strcasecmp(machine_type,\"l1om\");\n    result = 0xb4;\n    if (comparison_result != 0) {\n      result = strcasecmp(machine_type,\"k1om\");\n      if (result == 0) {\n        return 0xb5;\n      }\n      result = strcasecmp(machine_type,\"x86_64\");\n      if (result == 0) {\n        result = 0x3e;\n      }\n      else {\n        result = strcasecmp(machine_type,\"x86-64\");\n        if (result == 0) {\n          result = 0x3e;\n        }\n        else {\n          result = strcasecmp(machine_type,\"none\");\n          if (result != 0) {\n            error_message = dcgettext(0,\"Unknown machine type: %s\\n\",5);\n            error(error_message,machine_type);\n            result = -1;\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "get_machine_type_00104d30",
            "entrypoint": "0x00104d30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104d30": "get_machine_type_00104d30",
                "iVar1": "result",
                "iVar2": "comparison_result",
                "param_1": "machine_type",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104da0": {
            "additional_data": {
                "F UN_00104da0": {
                    "1": "get_type"
                },
                "FUN_00102e85": {
                    "1": "get_dcgettext"
                },
                "FUN_00104da0": {
                    "1": "get_symbol_type",
                    "15": "get_type",
                    "2": "get_type_from_param",
                    "9": "get_file_type"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "error": {
                    "2": "print_error"
                },
                "iVar1": {
                    "1": "section_type",
                    "29": "result"
                },
                "iVar2": {
                    "1": "strcasecmp_result",
                    "16": "comparison_result",
                    "2": "cmp_result",
                    "3": "comp_result",
                    "6": "compare_result"
                },
                "param_1": {
                    "1": "section_name",
                    "8": "type",
                    "9": "file_type"
                },
                "uVar3": {
                    "1": "message",
                    "18": "error_message",
                    "2": "err_msg",
                    "4": "error_msg",
                    "5": "error_string"
                }
            },
            "called": [
                "FUN_00102e85",
                "FUN_00102040",
                "FUN_001023ce",
                "FUN_001020d0"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nint get_type_00104da0(char *type_string)\n\n{\n  int result;\n  int comparison_result;\n  undefined8 error_message;\n  \n  result = strcasecmp(type_string,\"rel\");\n  if (result == 0) {\n    result = 1;\n  }\n  else {\n    comparison_result = strcasecmp(type_string,\"exec\");\n    result = 2;\n    if (comparison_result != 0) {\n      result = strcasecmp(type_string,\"dyn\");\n      if (result == 0) {\n        result = 3;\n      }\n      else {\n        result = strcasecmp(type_string,\"none\");\n        if (result != 0) {\n          error_message = get_translation(0,\"Unknown type: %s\\n\",5);\n          print_error(error_message,type_string);\n          result = -1;\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "get_type_00104da0",
            "entrypoint": "0x00104da0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104da0": "get_type_00104da0",
                "dcgettext": "get_translation",
                "error": "print_error",
                "iVar1": "result",
                "iVar2": "comparison_result",
                "param_1": "type_string",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104de0": {
            "additional_data": {
                "DAT_00109350": {
                    "1": "header_data_14"
                },
                "DAT_00109352": {
                    "1": "header_data_15"
                },
                "DAT_00109354": {
                    "1": "header_data_16"
                },
                "DAT_00109358": {
                    "1": "header_data_17"
                },
                "DAT_00109360": {
                    "1": "header_data_18"
                },
                "DAT_00109368": {
                    "1": "header_data_19"
                },
                "DAT_00109370": {
                    "1": "header_data_20"
                },
                "DAT_00109374": {
                    "1": "header_data_21"
                },
                "DAT_00109376": {
                    "1": "header_data_22"
                },
                "DAT_00109378": {
                    "1": "header_data_23"
                },
                "DAT_0010937a": {
                    "1": "header_data_24"
                },
                "DAT_0010937c": {
                    "1": "header_data_25"
                },
                "DAT_0010937e": {
                    "1": "header_data_26"
                },
                "DAT_00109380": {
                    "1": "data_to_write"
                },
                "DAT_00109390": {
                    "1": "e_version"
                },
                "DAT_00109392": {
                    "1": "section_header_type"
                },
                "DAT_00109394": {
                    "1": "section_header_flags"
                },
                "DAT_00109398": {
                    "1": "e_shoff"
                },
                "DAT_0010939c": {
                    "1": "header_data_5"
                },
                "DAT_001093a0": {
                    "1": "e_ehsize"
                },
                "DAT_001093a4": {
                    "1": "program_header_entry_size"
                },
                "DAT_001093a8": {
                    "1": "e_phnum"
                },
                "DAT_001093aa": {
                    "1": "header_data_9"
                },
                "DAT_001093ac": {
                    "1": "header_data_10"
                },
                "DAT_001093ae": {
                    "1": "header_data_11"
                },
                "DAT_001093b0": {
                    "1": "string_table_offset"
                },
                "DAT_001093b2": {
                    "1": "header_data_13"
                },
                "DAT_001093b8": {
                    "1": "byte_put_func"
                },
                "DAT_001093c0": {
                    "1": "convert_byte_function_2"
                },
                "DAT_001093e0": {
                    "1": "header"
                },
                "DAT_001093e5": {
                    "1": "second_byte"
                },
                "DAT_001093f0": {
                    "1": "header_offset"
                },
                "DAT_001093f8": {
                    "1": "header_size"
                },
                "DAT_00109400": {
                    "1": "header_entry_size"
                },
                "DAT_00109408": {
                    "1": "header_flags"
                },
                "DAT_00109410": {
                    "1": "header_entry_count"
                },
                "DAT_0010941a": {
                    "1": "header_type"
                },
                "DAT_0010941c": {
                    "1": "e_type_copy"
                },
                "DAT_00109420": {
                    "1": "e_shentsize_copy"
                },
                "DAT_00109424": {
                    "1": "section_count"
                },
                "DAT_00109428": {
                    "1": "section_offset"
                },
                "DAT_0010942c": {
                    "1": "section_size"
                },
                "DAT_00109430": {
                    "1": "string_table_index"
                },
                "FUN_00104de0": {
                    "1": "process_elf_file",
                    "11": "parse_elf_header",
                    "2": "validate_elf_header",
                    "3": "process_elf_header",
                    "9": "read_elf_header"
                },
                "_DAT_00109150": {
                    "1": "data_2"
                },
                "_DAT_00109154": {
                    "1": "abi_match_copy"
                },
                "_DAT_00109158": {
                    "1": "abi_version"
                },
                "_DAT_0010915c": {
                    "1": "os_match_copy"
                },
                "_DAT_00109160": {
                    "1": "data_1"
                },
                "_DAT_00109164": {
                    "1": "type_match_copy"
                },
                "_DAT_00109168": {
                    "1": "class_match"
                },
                "_DAT_0010916c": {
                    "1": "endian_identifier_copy"
                },
                "_DAT_00109170": {
                    "1": "endianness_match"
                },
                "_DAT_00109174": {
                    "1": "machine_match_copy"
                },
                "_DAT_0010934": {
                    "1": "magic_number_copy2"
                },
                "_DAT_00109340": {
                    "1": "header_value4"
                },
                "_DAT_00109348": {
                    "1": "header_value6"
                },
                "_DAT_00109348_1": {
                    "1": "abi_match_copy"
                },
                "_DAT_00109350": {
                    "1": "header"
                },
                "_DAT_00109380": {
                    "1": "temp_1"
                },
                "_DAT_00109384": {
                    "1": "magic_number_copy"
                },
                "_DAT_00109388": {
                    "1": "file_type_copy"
                },
                "_DAT_00109388_1": {
                    "1": "abi_version_copy"
                },
                "_DAT_0010938c": {
                    "1": "class_flag_copy"
                },
                "_DAT_00109390": {
                    "1": "header_array_1"
                },
                "_DAT_00109392": {
                    "1": "header_array_2"
                },
                "_DAT_00109394": {
                    "1": "header_array_3"
                },
                "_DAT_00109398": {
                    "1": "header_array_4"
                },
                "_DAT_0010939c": {
                    "1": "header_array_5"
                },
                "_DAT_001093a0": {
                    "1": "header_array_6"
                },
                "_DAT_001093a4": {
                    "1": "header_array_7"
                },
                "_DAT_001093a8": {
                    "1": "header_array_8"
                },
                "_DAT_001093aa": {
                    "1": "header_array_9"
                },
                "_DAT_001093ac": {
                    "1": "header_array_10"
                },
                "_DAT_001093ae": {
                    "1": "header_array_11"
                },
                "_DAT_001093b0": {
                    "1": "header_array_12"
                },
                "_DAT_001093b8": {
                    "1": "byte_put_function"
                },
                "_DAT_001093c0": {
                    "1": "byte_get_function"
                },
                "_DAT_001093e0": {
                    "1": "first_word",
                    "3": "magic_number"
                },
                "_DAT_001093e4": {
                    "1": "ei_version"
                },
                "_DAT_001093e5": {
                    "1": "endianness_flag"
                },
                "_DAT_001093e8": {
                    "1": "header_value5"
                },
                "_DAT_001093f0": {
                    "1": "value_4"
                },
                "_DAT_001093f8": {
                    "1": "value_5"
                },
                "_DAT_00109400": {
                    "1": "value_6"
                },
                "_DAT_00109408": {
                    "1": "program_header_offset"
                },
                "_DAT_00109410": {
                    "1": "flags"
                },
                "_DAT_00109418": {
                    "1": "e_type"
                },
                "_DAT_0010941a": {
                    "1": "e_machine"
                },
                "_DAT_0010941c": {
                    "1": "value_8"
                },
                "_DAT_00109420": {
                    "1": "abi_version_copy"
                },
                "_DAT_00109424": {
                    "1": "value_10"
                },
                "_DAT_00109428": {
                    "1": "value_11"
                },
                "_DAT_0010942c": {
                    "1": "value_12"
                },
                "_DAT_00109430": {
                    "1": "e_phnum_copy"
                },
                "__off": {
                    "1": "current_offset",
                    "11": "file_position",
                    "2": "position",
                    "4": "file_offset",
                    "6": "offset",
                    "7": "current_position"
                },
                "byte_get_big_endian": {
                    "1": "read_byte_big_endian"
                },
                "byte_get_little_endian": {
                    "1": "get_little_endian"
                },
                "byte_put_big_endian": {
                    "1": "put_big_endian"
                },
                "byte_put_little_endian": {
                    "1": "put_little_endian"
                },
                "iVar1": {
                    "1": "original_status",
                    "12": "seek_result",
                    "2": "error_code",
                    "4": "result",
                    "8": "status"
                },
                "offset": {
                    "1": "original_offset"
                },
                "param_1": {
                    "1": "param_elf_binary",
                    "2": "param_1",
                    "3": "file_name",
                    "4": "file_path",
                    "8": "param"
                },
                "param_2": {
                    "1": "param_file_pointer",
                    "17": "file",
                    "3": "file_pointer",
                    "4": "file_ptr",
                    "6": "param_file"
                },
                "pcVar4": {
                    "1": "format_string",
                    "2": "error_format",
                    "24": "error_message"
                },
                "sVar2": {
                    "1": "read_count",
                    "21": "read_result",
                    "5": "bytes_read"
                },
                "uRam0000000000109344": {
                    "1": "file_class_endian_version_copy2"
                },
                "uRam000000000010934c": {
                    "1": "file_abi_version_copy"
                },
                "uRam0000000000109384": {
                    "1": "temp_4"
                },
                "uRam000000000010938c": {
                    "1": "global_value3"
                },
                "uRam00000000001093ec": {
                    "1": "global_value2"
                },
                "uVar3": {
                    "1": "original_result",
                    "13": "result",
                    "15": "return_value"
                },
                "uVar5": {
                    "1": "var_5",
                    "2": "input_class",
                    "3": "temp_var1",
                    "4": "var1",
                    "6": "value_1"
                },
                "uVar6": {
                    "1": "tmp2",
                    "2": "type_value",
                    "3": "value2",
                    "4": "var2",
                    "6": "value_2"
                }
            },
            "called": [
                "FUN_001021d0",
                "FUN_001024ec",
                "FUN_00102260",
                "FUN_00102050",
                "FUN_00103a90",
                "FUN_001020d0",
                "FUN_00103ad0",
                "FUN_00102170",
                "FUN_00102434",
                "FUN_00102090",
                "FUN_0010354e",
                "FUN_00102e85",
                "FUN_00102558",
                "FUN_0010347f"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_00103bf0"
            ],
            "code": "\n\n\nundefined8 parse_elf_header_00104de0(undefined8 param,FILE *file)\n\n{\n  int seek_result;\n  long file_position;\n  size_t read_result;\n  undefined8 return_value;\n  char *error_message;\n  uint value_1;\n  uint value_2;\n  \n  file_position = ftell(file);\n  read_result = fread(&DAT_001093e0,0x10,1,file);\n  if ((read_result == 1) && (_DAT_001093e0 == 0x464c457f)) {\n    DAT_001093b8 = put_big_endian;\n    if (DAT_001093e5 != '\\x02') {\n      DAT_001093b8 = put_little_endian;\n    }\n    DAT_001093c0 = get_big_endian;\n    if (DAT_001093e5 != '\\x02') {\n      DAT_001093c0 = get_little_endian;\n    }\n    if ((char)_DAT_001093e4 == '\\x01') {\n      read_result = fread(&DAT_00109390,0x24,1,file);\n      if (read_result != 1) goto code_r0x00102558;\n      DAT_00109418 = (*DAT_001093c0)(&DAT_00109390,2);\n      DAT_0010941a = (*DAT_001093c0)(&DAT_00109392,2);\n      _DAT_00109408 = (*DAT_001093c0)(&DAT_00109394,4);\n      _DAT_001093f0 = (*DAT_001093c0)(&DAT_00109398,4);\n      DAT_001093f8 = (*DAT_001093c0)(&DAT_0010939c,4);\n      _DAT_00109400 = (*DAT_001093c0)(&DAT_001093a0,4);\n      _DAT_00109410 = (*DAT_001093c0)(&DAT_001093a4,4);\n      _DAT_0010941c = (*DAT_001093c0)(&DAT_001093a8,2);\n      _DAT_00109420 = (*DAT_001093c0)(&DAT_001093aa,2);\n      DAT_00109424 = (*DAT_001093c0)(&DAT_001093ac,2);\n      _DAT_00109428 = (*DAT_001093c0)(&DAT_001093ae,2);\n      _DAT_0010942c = (*DAT_001093c0)(&DAT_001093b0,2);\n      _DAT_00109430 = (*DAT_001093c0)(&DAT_001093b2,2);\n      _DAT_00109380 = _DAT_001093e0;\n      file_class_endian_version_copy = _DAT_001093e4;\n      _DAT_00109388 = _DAT_001093e8;\n      ei_abiversion = temp_5;\n    }\n    else {\n      if ((char)_DAT_001093e4 != '\\x02') {\n        return_value = read_elf_header_00102558();\n        return return_value;\n      }\n      read_result = fread(&DAT_00109350,0x30,1,file);\n      if (read_result != 1) goto code_r0x00102558;\n      DAT_00109418 = (*DAT_001093c0)(&DAT_00109350,2);\n      DAT_0010941a = (*DAT_001093c0)(&DAT_00109352,2);\n      _DAT_00109408 = (*DAT_001093c0)(&DAT_00109354,4);\n      _DAT_001093f0 = (*DAT_001093c0)(&DAT_00109358,8);\n      DAT_001093f8 = (*DAT_001093c0)(&DAT_00109360,8);\n      _DAT_00109400 = (*DAT_001093c0)(&DAT_00109368,8);\n      _DAT_00109410 = (*DAT_001093c0)(&DAT_00109370,4);\n      _DAT_0010941c = (*DAT_001093c0)(&DAT_00109374,2);\n      _DAT_00109420 = (*DAT_001093c0)(&DAT_00109376,2);\n      DAT_00109424 = (*DAT_001093c0)(&DAT_00109378,2);\n      _DAT_00109428 = (*DAT_001093c0)(&DAT_0010937a,2);\n      _DAT_0010942c = (*DAT_001093c0)(&DAT_0010937c,2);\n      _DAT_00109430 = (*DAT_001093c0)(&DAT_0010937e,2);\n      _DAT_00109340 = _DAT_001093e0;\n      file_class_endian_version_copy2 = _DAT_001093e4;\n      _DAT_00109348 = _DAT_001093e8;\n      file_abi_version_copy = temp_5;\n    }\n    seek_result = fseek(file,file_position,0);\n    if (seek_result != 0) {\n      return_value = dcgettext(0,\"%s: Failed to seek to ELF header\\n\",5);\n      error(return_value,param);\n    }\n    value_1 = _DAT_001093e4 >> 0x10 & 0xff;\n    if ((char)value_1 == '\\x01') {\n      value_1 = (uint)DAT_0010941a;\n      if (value_1 == DAT_0010916c) {\n        return 0;\n      }\n      value_2 = _DAT_001093e4 & 0xff;\n      if (DAT_00109170 == 0xffffffff) {\n        if (DAT_0010941a == 6) {\n          DAT_00109170 = 1;\n        }\n        else if (DAT_0010941a < 7) {\n          DAT_00109170 = (DAT_0010941a != 3) + 1 + (uint)(DAT_0010941a != 3);\n        }\n        else {\n          DAT_00109170 = 3 - ((ushort)(DAT_0010941a - 0xb4) < 2);\n        }\n      }\n      if ((value_2 == DAT_00109170) || (DAT_00109170 == 3)) {\n        if ((value_2 == DAT_00109168) || (DAT_00109168 == 3)) {\n          if ((value_1 == DAT_00109174) || (DAT_00109174 == 0xffffffff)) {\n            value_1 = (uint)DAT_00109418;\n            if ((DAT_00109164 == 0xffffffff) || (value_1 == DAT_00109164)) {\n              value_1 = _DAT_001093e4 >> 0x18;\n              if ((DAT_0010915c == 0xffffffff) || (value_1 == DAT_0010915c)) {\n                value_1 = _DAT_001093e8 & 0xff;\n                if ((value_1 == DAT_00109154) || (DAT_00109154 == 0xffffffff)) {\n                  if ((char)value_2 == '\\x01') {\n                    if (DAT_0010916c != 0xffffffff) {\n                      (*DAT_001093b8)(&DAT_00109392,(long)(int)DAT_0010916c,2);\n                    }\n                    if (DAT_00109160 != -1) {\n                      (*DAT_001093b8)(&DAT_00109390,(long)DAT_00109160,2);\n                    }\n                    if (DAT_00109158 != -1) {\n                      file_class_endian_version_copy =\n                           CONCAT13((char)DAT_00109158,(undefined3)file_class_endian_version_copy);\n                    }\n                    if (DAT_00109150 != -1) {\n                      _DAT_00109388 = CONCAT31(DAT_00109388_1,(char)DAT_00109150);\n                    }\n                    read_result = fwrite(&DAT_00109380,0x34,1,file);\n                    if (read_result == 1) {\n                      return 0;\n                    }\n                    return_value = update_elf_header_001024ec();\n                    return return_value;\n                  }\n                  if ((char)value_2 != '\\x02') {\n                    \n                    abort();\n                  }\n                  if (DAT_0010916c != 0xffffffff) {\n                    (*DAT_001093b8)(&DAT_00109352,(long)(int)DAT_0010916c,2);\n                  }\n                  if (DAT_00109160 != -1) {\n                    (*DAT_001093b8)(&DAT_00109350,(long)DAT_00109160,2);\n                  }\n                  if (DAT_00109158 != -1) {\n                    file_class_endian_version_copy2 =\n                         CONCAT13((char)DAT_00109158,(undefined3)file_class_endian_version_copy2);\n                  }\n                  if (DAT_00109150 != -1) {\n                    _DAT_00109348 = CONCAT31(DAT_00109348_1,(char)DAT_00109150);\n                  }\n                  read_result = fwrite(&DAT_00109340,0x40,1,file);\n                  if (read_result == 1) {\n                    return 0;\n                  }\n                  return_value = update_elf_header_001024ec();\n                  return return_value;\n                }\n                error_message = \"%s: Unmatched EI_ABIVERSION: %d is not %d\\n\";\n                value_2 = DAT_00109154;\n              }\n              else {\n                error_message = \"%s: Unmatched EI_OSABI: %d is not %d\\n\";\n                value_2 = DAT_0010915c;\n              }\n            }\n            else {\n              error_message = \"%s: Unmatched e_type: %d is not %d\\n\";\n              value_2 = DAT_00109164;\n            }\n          }\n          else {\n            error_message = \"%s: Unmatched e_machine: %d is not %d\\n\";\n            value_2 = DAT_00109174;\n          }\n          return_value = dcgettext(0,error_message,5);\n          error(return_value,param,value_1,value_2);\n          return 1;\n        }\n        error_message = \"%s: Unmatched output EI_CLASS: %d is not %d\\n\";\n        value_1 = DAT_00109168;\n      }\n      else {\n        error_message = \"%s: Unmatched input EI_CLASS: %d is not %d\\n\";\n        value_1 = DAT_00109170;\n      }\n      return_value = dcgettext(0,error_message,5);\n      error(return_value,param,value_2,value_1);\n    }\n    else {\n      return_value = dcgettext(0,\"%s: Unsupported EI_VERSION: %d is not %d\\n\",5);\n      error(return_value,param,value_1,1);\n    }\n  }\n  else {\ncode_r0x00102558:\n    return_value = dcgettext(0,\"%s: Failed to read ELF header\\n\",5);\n    error(return_value,param);\n  }\n  return 1;\n}\n\n",
            "current_name": "parse_elf_header_00104de0",
            "entrypoint": "0x00104de0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104de0": "parse_elf_header_00104de0",
                "__off": "file_position",
                "byte_get_big_endian": "get_big_endian",
                "byte_get_little_endian": "get_little_endian",
                "byte_put_big_endian": "put_big_endian",
                "byte_put_little_endian": "put_little_endian",
                "iVar1": "seek_result",
                "param_1": "param",
                "param_2": "file",
                "pcVar4": "error_message",
                "sVar2": "read_result",
                "uRam0000000000109344": "file_class_endian_version_copy2",
                "uRam000000000010934c": "file_abi_version_copy",
                "uRam0000000000109384": "file_class_endian_version_copy",
                "uRam000000000010938c": "ei_abiversion",
                "uRam00000000001093ec": "temp_5",
                "uVar3": "return_value",
                "uVar5": "value_1",
                "uVar6": "value_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105370": {
            "additional_data": {
                "FUN_00105370": {
                    "1": "extract_archive_member_name",
                    "2": "extract_filename_from_path",
                    "3": "extract_file_path",
                    "9": "extract_file_name"
                },
                "__size": {
                    "1": "output_path_size",
                    "2": "allocation_size",
                    "3": "size",
                    "7": "allocated_size"
                },
                "bVar9": {
                    "1": "byte_var",
                    "11": "flag",
                    "4": "is_negative"
                },
                "cVar2": {
                    "1": "current_char_value",
                    "19": "current_char",
                    "3": "current_character"
                },
                "dcgettext": {
                    "1": "get_message"
                },
                "error": {
                    "1": "print_error_message"
                },
                "extraout_RDX": {
                    "1": "num_chars",
                    "4": "file_name_length"
                },
                "lVar1": {
                    "1": "diff_length",
                    "2": "combined_size",
                    "7": "total_size",
                    "8": "total_length"
                },
                "param_1": {
                    "1": "old_archive_name",
                    "2": "original_string",
                    "3": "input_string",
                    "8": "input_path",
                    "9": "file_path"
                },
                "param_2": {
                    "1": "file_content",
                    "2": "delimiter",
                    "3": "source_string",
                    "4": "output_path",
                    "7": "file_name"
                },
                "pcVar4": {
                    "1": "last_occurrence",
                    "10": "last_slash",
                    "2": "slash_pos",
                    "3": "file_name_start"
                },
                "pcVar5": {
                    "1": "input_length",
                    "2": "file_name_end",
                    "4": "path_length"
                },
                "pcVar6": {
                    "1": "filename_buffer",
                    "2": "new_file_name"
                },
                "uVar3": {
                    "1": "error_msg",
                    "16": "error_message",
                    "2": "err_msg",
                    "3": "error_string"
                },
                "uVar7": {
                    "1": "input_length",
                    "2": "remaining_chars",
                    "4": "remaining_length"
                },
                "uVar8": {
                    "1": "relative_path_size",
                    "2": "file_name_size"
                },
                "xmalloc_failed": {
                    "1": "handle_allocation_error"
                }
            },
            "called": [
                "FUN_001021b0",
                "FUN_00102cbc"
            ],
            "calling": [
                "FUN_00103160",
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_00103186",
                "FUN_00103006"
            ],
            "code": "\nchar * extract_file_name_00105370(char *file_path,char *file_name)\n\n{\n  ulong allocated_size;\n  long total_length;\n  char current_char;\n  undefined8 error_message;\n  char *last_slash;\n  char *path_length;\n  char *allocated_string;\n  ulong remaining_size;\n  ulong file_name_length;\n  ulong file_name_size;\n  byte flag;\n  \n  flag = 0;\n  path_length = (char *)0x1;\n  if (file_path != (char *)0x0) {\n    path_length = file_path;\n  }\n  allocated_string = (char *)malloc((size_t)path_length);\n  if (allocated_string != (char *)0x0) {\n    return allocated_string;\n  }\n  handle_allocation_error();\n  allocated_string = path_length;\n  last_slash = path_length;\n  while (current_char = *allocated_string, current_char != '\\0') {\n    allocated_string = allocated_string + 1;\n    if (current_char == '/') {\n      last_slash = allocated_string;\n    }\n  }\n  if ((*file_name == '/') || (path_length == last_slash)) {\n    if (file_name_length + 1 == 0) {\n      return (char *)0x0;\n    }\n    allocated_string = (char *)malloc(file_name_length + 1);\n    remaining_size = file_name_length;\n    path_length = allocated_string;\n    if (allocated_string != (char *)0x0) {\n      for (; remaining_size != 0; remaining_size = remaining_size - 1) {\n        *path_length = *file_name;\n        file_name = file_name + (ulong)flag * -2 + 1;\n        path_length = path_length + (ulong)flag * -2 + 1;\n      }\n      allocated_string[file_name_length] = '\\0';\n      return allocated_string;\n    }\n  }\n  else {\n    file_name_size = (long)last_slash - (long)path_length;\n    total_length = file_name_size + file_name_length;\n    remaining_size = file_name_length;\n    if (file_name_length <= file_name_size) {\n      remaining_size = file_name_size;\n    }\n    allocated_size = total_length + 1;\n    if (allocated_size < remaining_size) {\n      error_message = get_message(0,\"Abnormal length of thin archive member name: %lx\\n\",5);\n      print_error(error_message,file_name_length);\n      return (char *)0x0;\n    }\n    last_slash = (char *)malloc(allocated_size);\n    allocated_string = last_slash;\n    if (last_slash != (char *)0x0) {\n      for (; remaining_size = file_name_length, file_name_size != 0; file_name_size = file_name_size - 1) {\n        *allocated_string = *path_length;\n        path_length = path_length + (ulong)flag * -2 + 1;\n        allocated_string = allocated_string + (ulong)flag * -2 + 1;\n      }\n      for (; remaining_size != 0; remaining_size = remaining_size - 1) {\n        *allocated_string = *file_name;\n        file_name = file_name + (ulong)flag * -2 + 1;\n        allocated_string = allocated_string + (ulong)flag * -2 + 1;\n      }\n      last_slash[total_length] = '\\0';\n      return last_slash;\n    }\n  }\n  error_message = get_message(0,\"Out of memory\\n\",5);\n  print_error(error_message);\n  return (char *)0x0;\n}\n\n",
            "current_name": "extract_file_name_00105370",
            "entrypoint": "0x00105370",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105370": "extract_file_name_00105370",
                "__size": "allocated_size",
                "bVar9": "flag",
                "cVar2": "current_char",
                "dcgettext": "get_message",
                "error": "print_error",
                "extraout_RDX": "file_name_length",
                "lVar1": "total_length",
                "param_1": "file_path",
                "param_2": "file_name",
                "pcVar4": "last_slash",
                "pcVar5": "path_length",
                "pcVar6": "allocated_string",
                "uVar3": "error_message",
                "uVar7": "remaining_size",
                "uVar8": "file_name_size",
                "xmalloc_failed": "handle_allocation_error"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105394": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_00105394(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00105394",
            "entrypoint": "0x00105394",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00105394": "FUNC_00105394"
            },
            "skipped": true,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_00102000",
            "FUN_00102020",
            "FUN_001022c0",
            "FUN_00102323",
            "FUN_0010234b",
            "FUN_001023ce",
            "FUN_001024ec",
            "FUN_00102558",
            "FUN_001025ab",
            "FUN_001027fd",
            "FUN_00102825",
            "FUN_0010289a",
            "FUN_001028be",
            "FUN_00102c98",
            "FUN_00102cbc",
            "FUN_00102cc4",
            "FUN_00102da5",
            "FUN_00102e85",
            "FUN_00102f65",
            "FUN_00102fa0",
            "FUN_00102fbc",
            "FUN_00102fc7",
            "FUN_00103006",
            "FUN_00103160",
            "FUN_00103186",
            "FUN_001032de",
            "FUN_00103449",
            "FUN_0010347f",
            "FUN_0010354e",
            "FUN_0010358d",
            "FUN_00103a90",
            "FUN_00103ad0",
            "FUN_00103b00",
            "FUN_00103ba0",
            "FUN_00103bf0",
            "FUN_00104c60",
            "FUN_00104ce0",
            "FUN_00104d30",
            "FUN_00104da0",
            "FUN_00105370"
        ],
        [
            "FUN_00102434",
            "FUN_00104de0"
        ],
        [
            "FUN_001029a5"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 233213
}