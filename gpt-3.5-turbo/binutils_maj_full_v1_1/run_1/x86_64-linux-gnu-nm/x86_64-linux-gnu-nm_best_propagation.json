{
    "functions": {
        "FUN_00102000": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "FUN_00102000": {
                    "1": "start_execution",
                    "16": "initialize_program",
                    "2": "initialize",
                    "3": "initialize_monitor",
                    "6": "initialize_monitoring"
                },
                "__gmon_start": {
                    "1": "initialize_monitoring"
                },
                "__gmon_start__": {
                    "1": "start_monitor",
                    "2": "monitor_start",
                    "3": "initialize_profiler",
                    "4": "initialize_profiling",
                    "9": "start_monitoring"
                },
                "original_variable_name_1": {
                    "1": "new_variable_name_1"
                },
                "original_variable_name_2": {
                    "1": "new_variable_name_2"
                },
                "original_variable_name_n": {
                    "1": "new_variable_name_n"
                },
                "return": {
                    "2": ""
                },
                "void": {
                    "2": ""
                }
            },
            "called": [
                "FUN_0010c158"
            ],
            "calling": [],
            "code": "\nvoid initialize_program_00102000(void)\n\n{\n  start_monitoring();\n  return;\n}\n\n",
            "current_name": "initialize_program_00102000",
            "entrypoint": "0x00102000",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102000": "initialize_program_00102000",
                "__gmon_start": "initialize_monitoring",
                "__gmon_start__": "start_monitoring"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102020": {
            "additional_data": {
                "(undefined *)0x0": {
                    "1": "memory_address"
                },
                "*(code *)(undefined *)0x0": {
                    "1": "indirect_jump_target"
                },
                "FUN_00102020": {
                    "1": "call_indirect_jump",
                    "19": "execute_indirect_jump",
                    "6": "execute_indirect_call"
                },
                "PTR_0": {
                    "2": "jump_target"
                },
                "PTR_00102020": {
                    "1": "function_pointer"
                },
                "code": {
                    "1": "indirect_jump_function",
                    "2": "function_pointer"
                },
                "undefined": {
                    "1": "code_pointer",
                    "2": "function_ptr",
                    "4": "target_address"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_indirect_jump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(function_pointer *)(target_address *)0x0)();\n  return;\n}\n\n",
            "current_name": "execute_indirect_jump_00102020",
            "entrypoint": "0x00102020",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020",
                "code": "function_pointer",
                "undefined": "target_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102030": {
            "called": [
                "FUN_0010c000"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n",
            "current_name": "FUN_00102030",
            "entrypoint": "0x00102030",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102040": {
            "called": [
                "FUN_0010c008"
            ],
            "calling": [
                "FUN_00103729",
                "FUN_00105110",
                "FUN_00103ca0",
                "FUN_00104670",
                "FUN_00103b5d",
                "FUN_001047d0",
                "FUN_00104d5b",
                "FUN_00103238",
                "FUN_001055f0",
                "FUN_0010268b"
            ],
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "current_name": "FUN_00102040",
            "entrypoint": "0x00102040",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102050": {
            "called": [
                "FUN_0010c010"
            ],
            "calling": [
                "FUN_001064b0",
                "FUN_001035a2"
            ],
            "code": "\n\n\nint putchar(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = putchar(__c);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102050",
            "entrypoint": "0x00102050",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102060": {
            "called": [
                "FUN_0010c018"
            ],
            "calling": [
                "FUN_001047d0"
            ],
            "code": "\nvoid reconcat(void)\n\n{\n  reconcat();\n  return;\n}\n\n",
            "current_name": "FUN_00102060",
            "entrypoint": "0x00102060",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102070": {
            "called": [
                "FUN_0010c028"
            ],
            "calling": [
                "FUN_00102fd2"
            ],
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "current_name": "FUN_00102070",
            "entrypoint": "0x00102070",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102080": {
            "called": [
                "FUN_0010c030"
            ],
            "calling": [
                "FUN_00103729",
                "FUN_001043d0"
            ],
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "current_name": "FUN_00102080",
            "entrypoint": "0x00102080",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102090": {
            "called": [
                "FUN_0010c048"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "current_name": "FUN_00102090",
            "entrypoint": "0x00102090",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001020a0": {
            "called": [
                "FUN_0010c050"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001020a0",
            "entrypoint": "0x001020a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001020b0": {
            "called": [
                "FUN_0010c058"
            ],
            "calling": [
                "FUN_00104d5b"
            ],
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "current_name": "FUN_001020b0",
            "entrypoint": "0x001020b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001020c0": {
            "called": [
                "FUN_0010c060"
            ],
            "calling": [
                "FUN_0010268b"
            ],
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001020c0",
            "entrypoint": "0x001020c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001020d0": {
            "called": [
                "FUN_0010c068"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "current_name": "FUN_001020d0",
            "entrypoint": "0x001020d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001020e0": {
            "called": [
                "FUN_0010c070"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_001020e0",
            "entrypoint": "0x001020e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001020f0": {
            "called": [
                "FUN_0010c078"
            ],
            "calling": [
                "FUN_00103729",
                "FUN_001064b0",
                "FUN_001053c0"
            ],
            "code": "\nvoid bfd_is_undefined_symclass(void)\n\n{\n  bfd_is_undefined_symclass();\n  return;\n}\n\n",
            "current_name": "FUN_001020f0",
            "entrypoint": "0x001020f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102100": {
            "called": [
                "FUN_0010c080"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n",
            "current_name": "FUN_00102100",
            "entrypoint": "0x00102100",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102110": {
            "called": [
                "FUN_0010c088"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "current_name": "FUN_00102110",
            "entrypoint": "0x00102110",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102120": {
            "called": [
                "FUN_0010c090"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "current_name": "FUN_00102120",
            "entrypoint": "0x00102120",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102130": {
            "called": [
                "FUN_0010c098"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102130",
            "entrypoint": "0x00102130",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102140": {
            "called": [
                "FUN_0010c0a8"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "current_name": "FUN_00102140",
            "entrypoint": "0x00102140",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102150": {
            "called": [
                "FUN_0010c0b0"
            ],
            "calling": [
                "FUN_001048e0",
                "FUN_00103729",
                "FUN_00104370",
                "FUN_00103ca0",
                "FUN_0010249f",
                "FUN_001043d0",
                "FUN_00103a78",
                "FUN_00104d5b",
                "FUN_00102450",
                "FUN_001053c0",
                "FUN_00102f19",
                "FUN_0010370a",
                "FUN_00103b5d",
                "FUN_00103abf",
                "FUN_001055f0"
            ],
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "current_name": "FUN_00102150",
            "entrypoint": "0x00102150",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102160": {
            "called": [
                "FUN_0010c0b8"
            ],
            "calling": [
                "FUN_00103ca0",
                "FUN_00102fd2",
                "FUN_001055f0",
                "FUN_0010268b"
            ],
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_00102160",
            "entrypoint": "0x00102160",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102170": {
            "called": [
                "FUN_0010c0c0"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "current_name": "FUN_00102170",
            "entrypoint": "0x00102170",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102180": {
            "called": [
                "FUN_0010c0c8"
            ],
            "calling": [
                "FUN_00102739"
            ],
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00102180",
            "entrypoint": "0x00102180",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102190": {
            "called": [
                "FUN_0010c0d0"
            ],
            "calling": [
                "FUN_00103463",
                "FUN_00103729",
                "FUN_00102670",
                "FUN_001043d0",
                "FUN_001047d0",
                "FUN_001036a7",
                "FUN_0010351b",
                "FUN_001053c0",
                "FUN_001036e0",
                "FUN_00102f19",
                "FUN_00103573",
                "FUN_001064b0",
                "FUN_00105110",
                "FUN_001035a2",
                "FUN_00103b2b",
                "FUN_001054d0",
                "FUN_00103abf",
                "FUN_001055f0",
                "FUN_001062d0",
                "FUN_00102739",
                "FUN_00102f7b"
            ],
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102190",
            "entrypoint": "0x00102190",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001021a0": {
            "called": [
                "FUN_0010c0d8"
            ],
            "calling": [
                "FUN_00104d5b",
                "FUN_001055f0"
            ],
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "current_name": "FUN_001021a0",
            "entrypoint": "0x001021a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001021b0": {
            "called": [
                "FUN_0010c0e0"
            ],
            "calling": [
                "FUN_00104670",
                "FUN_001025f5"
            ],
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "current_name": "FUN_001021b0",
            "entrypoint": "0x001021b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001021c0": {
            "called": [
                "FUN_0010c0f0"
            ],
            "calling": [
                "FUN_00103ca0"
            ],
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "current_name": "FUN_001021c0",
            "entrypoint": "0x001021c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001021d0": {
            "called": [
                "FUN_0010c0f8"
            ],
            "calling": [
                "FUN_001048e0",
                "FUN_001043d0",
                "FUN_00106540",
                "FUN_001055f0"
            ],
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "current_name": "FUN_001021d0",
            "entrypoint": "0x001021d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001021e0": {
            "called": [
                "FUN_0010c100"
            ],
            "calling": [
                "FUN_00105110",
                "FUN_00103c00",
                "FUN_00104d5b",
                "FUN_00103238",
                "FUN_001055f0",
                "FUN_0010268b"
            ],
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "current_name": "FUN_001021e0",
            "entrypoint": "0x001021e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001021f0": {
            "called": [
                "FUN_0010c108"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "current_name": "FUN_001021f0",
            "entrypoint": "0x001021f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102200": {
            "called": [
                "FUN_0010c110"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "current_name": "FUN_00102200",
            "entrypoint": "0x00102200",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102210": {
            "called": [
                "FUN_0010c118"
            ],
            "calling": [
                "FUN_00103ca0",
                "FUN_00103b5d"
            ],
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102210",
            "entrypoint": "0x00102210",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102220": {
            "called": [
                "FUN_0010c120"
            ],
            "calling": [
                "FUN_00104670"
            ],
            "code": "\nvoid bfd_get_arch_size(void)\n\n{\n  bfd_get_arch_size();\n  return;\n}\n\n",
            "current_name": "FUN_00102220",
            "entrypoint": "0x00102220",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102230": {
            "called": [
                "FUN_0010c128"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "current_name": "FUN_00102230",
            "entrypoint": "0x00102230",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102240": {
            "called": [
                "FUN_0010c130"
            ],
            "calling": [
                "FUN_00103463",
                "FUN_00104670",
                "FUN_00104d5b",
                "FUN_001055f0"
            ],
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102240",
            "entrypoint": "0x00102240",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102250": {
            "called": [
                "FUN_0010c138"
            ],
            "calling": [
                "FUN_001063a0",
                "FUN_00103463"
            ],
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102250",
            "entrypoint": "0x00102250",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102260": {
            "called": [
                "FUN_0010c148"
            ],
            "calling": [
                "FUN_001063a0",
                "FUN_00103ca0",
                "FUN_00103b5d",
                "FUN_001055f0",
                "FUN_00106540",
                "FUN_00102450"
            ],
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102260",
            "entrypoint": "0x00102260",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102270": {
            "called": [
                "FUN_0010c150"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "current_name": "FUN_00102270",
            "entrypoint": "0x00102270",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102280": {
            "called": [
                "FUN_0010c160"
            ],
            "calling": [
                "FUN_001043d0",
                "FUN_001055f0"
            ],
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102280",
            "entrypoint": "0x00102280",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102290": {
            "called": [
                "FUN_0010c168"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "FUN_00102290",
            "entrypoint": "0x00102290",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001022a0": {
            "called": [
                "FUN_0010c170"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "current_name": "FUN_001022a0",
            "entrypoint": "0x001022a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001022b0": {
            "called": [
                "FUN_0010c178"
            ],
            "calling": [
                "FUN_001063a0",
                "FUN_00103b5d",
                "FUN_00106540"
            ],
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001022b0",
            "entrypoint": "0x001022b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001022c0": {
            "called": [
                "FUN_0010c188"
            ],
            "calling": [
                "FUN_00104fa0"
            ],
            "code": "\n\n\nint strcoll(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcoll(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001022c0",
            "entrypoint": "0x001022c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001022d0": {
            "called": [
                "FUN_0010c198"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001022d0",
            "entrypoint": "0x001022d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001022e0": {
            "called": [
                "FUN_0010c1a0"
            ],
            "calling": [
                "FUN_00103729"
            ],
            "code": "\n\n\nint asprintf(char **__ptr,char *__fmt,...)\n\n{\n  int iVar1;\n  \n  iVar1 = asprintf(__ptr,__fmt);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001022e0",
            "entrypoint": "0x001022e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001022f0": {
            "called": [
                "FUN_0010c1a8"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_001022f0",
            "entrypoint": "0x001022f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102300": {
            "called": [
                "FUN_0010c1b0"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "current_name": "FUN_00102300",
            "entrypoint": "0x00102300",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102310": {
            "called": [
                "FUN_0010c1b8"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "FUN_00102310",
            "entrypoint": "0x00102310",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102320": {
            "called": [
                "FUN_0010c1c0"
            ],
            "calling": [
                "FUN_00102739"
            ],
            "code": "\nvoid bfd_demangle(void)\n\n{\n  bfd_demangle();\n  return;\n}\n\n",
            "current_name": "FUN_00102320",
            "entrypoint": "0x00102320",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102330": {
            "called": [
                "FUN_0010c1c8"
            ],
            "calling": [
                "FUN_00103729"
            ],
            "code": "\nvoid xstrerror(void)\n\n{\n  xstrerror();\n  return;\n}\n\n",
            "current_name": "FUN_00102330",
            "entrypoint": "0x00102330",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102340": {
            "called": [
                "FUN_0010c1d0"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "current_name": "FUN_00102340",
            "entrypoint": "0x00102340",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102350": {
            "called": [
                "FUN_0010c1d8"
            ],
            "calling": [
                "FUN_00106300",
                "FUN_00106530",
                "FUN_001055f0"
            ],
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "current_name": "FUN_00102350",
            "entrypoint": "0x00102350",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102360": {
            "called": [
                "FUN_0010c1e0"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "current_name": "FUN_00102360",
            "entrypoint": "0x00102360",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102370": {
            "called": [
                "FUN_0010c1e8"
            ],
            "calling": [
                "FUN_001063a0"
            ],
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102370",
            "entrypoint": "0x00102370",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102380": {
            "called": [
                "FUN_0010c1f0"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "current_name": "FUN_00102380",
            "entrypoint": "0x00102380",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102390": {
            "called": [
                "FUN_0010c1f8"
            ],
            "calling": [
                "FUN_00106540",
                "FUN_001055f0"
            ],
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "current_name": "FUN_00102390",
            "entrypoint": "0x00102390",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001023a0": {
            "called": [
                "FUN_0010c200"
            ],
            "calling": [
                "FUN_00103c00"
            ],
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "current_name": "FUN_001023a0",
            "entrypoint": "0x001023a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001023b0": {
            "called": [
                "FUN_0010c208"
            ],
            "calling": [
                "FUN_0010268b"
            ],
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001023b0",
            "entrypoint": "0x001023b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001023c0": {
            "called": [
                "FUN_0010c210"
            ],
            "calling": [
                "FUN_00103ca0",
                "FUN_001055f0"
            ],
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "current_name": "FUN_001023c0",
            "entrypoint": "0x001023c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001023d0": {
            "called": [
                "FUN_0010c218"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "current_name": "FUN_001023d0",
            "entrypoint": "0x001023d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001023e0": {
            "called": [
                "FUN_0010c220"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "current_name": "FUN_001023e0",
            "entrypoint": "0x001023e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001023f0": {
            "called": [
                "FUN_0010c230"
            ],
            "calling": [
                "FUN_00103c00"
            ],
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "current_name": "FUN_001023f0",
            "entrypoint": "0x001023f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102400": {
            "called": [
                "FUN_0010c238"
            ],
            "calling": [
                "FUN_00103238"
            ],
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "current_name": "FUN_00102400",
            "entrypoint": "0x00102400",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102410": {
            "called": [
                "FUN_0010c240"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00102410",
            "entrypoint": "0x00102410",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102420": {
            "called": [
                "FUN_0010c248"
            ],
            "calling": [
                "FUN_00104670",
                "FUN_00102fd2"
            ],
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00102420",
            "entrypoint": "0x00102420",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102430": {
            "called": [
                "FUN_0010c250"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\nvoid bfd_get_next_mapent(void)\n\n{\n  bfd_get_next_mapent();\n  return;\n}\n\n",
            "current_name": "FUN_00102430",
            "entrypoint": "0x00102430",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102440": {
            "called": [
                "FUN_0010c260"
            ],
            "calling": [
                "FUN_001055a0"
            ],
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "current_name": "FUN_00102440",
            "entrypoint": "0x00102440",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102450": {
            "additional_data": {
                "*unaff_RBX": {
                    "1": "output_file"
                },
                "FUN_00102450": {
                    "1": "print_target_list",
                    "29": "print_supported_targets"
                },
                "__ptr": {
                    "1": "target_list_ptr",
                    "30": "target_list"
                },
                "dcgettext": {
                    "2": "get_translated_text"
                },
                "exit": {
                    "1": "exit_program"
                },
                "fprintf": {
                    "1": "print_to_output_file"
                },
                "fputc": {
                    "1": "write_character"
                },
                "free": {
                    "1": "free_memory"
                },
                "in_stack_00000008": {
                    "1": "error_code",
                    "2": "exit_status",
                    "22": "exit_code",
                    "3": "bug_report_flag"
                },
                "lVar1": {
                    "1": "current_target_val",
                    "11": "current_target_value",
                    "2": "current_target",
                    "5": "target"
                },
                "pcVar2": {
                    "1": "gettext_string",
                    "2": "supported_targets_msg",
                    "6": "message"
                },
                "plVar3": {
                    "1": "target_pointer",
                    "2": "target_ptr",
                    "20": "current_target",
                    "4": "target"
                },
                "unaff_RBX": {
                    "1": "file_ptr",
                    "2": "file",
                    "27": "output_file"
                }
            },
            "called": [
                "FUN_00102260",
                "FUN_00102150"
            ],
            "calling": [
                "FUN_00103ca0"
            ],
            "code": "\nvoid print_supported_targets_00102450(void)\n\n{\n  long current_target_value;\n  char *message;\n  long *target_list;\n  FILE *output_file;\n  long *current_target;\n  int exit_code;\n  \n  message = (char *)get_translated_text(0,\"Supported targets:\",5);\n  print_to_output_file(output_file,message);\n  target_list = (long *)bfd_target_list();\n  current_target = target_list;\n  while( true ) {\n    current_target_value = *current_target;\n    current_target = current_target + 1;\n    if (current_target_value == 0) break;\n    print_to_output_file(output_file,\" %s\");\n  }\n  write_newline_char(10,output_file);\n  free_memory(target_list);\n  if (exit_code == 0) {\n    message = (char *)get_translated_text(0,\"Report bugs to %s.\\n\",5);\n    print_to_output_file(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit_program(exit_code);\n}\n\n",
            "current_name": "print_supported_targets_00102450",
            "entrypoint": "0x00102450",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102450": "print_supported_targets_00102450",
                "__ptr": "target_list",
                "dcgettext": "get_translated_text",
                "exit": "exit_program",
                "fprintf": "print_to_output_file",
                "fputc": "write_newline_char",
                "free": "free_memory",
                "in_stack_00000008": "exit_code",
                "lVar1": "current_target_value",
                "pcVar2": "message",
                "plVar3": "current_target",
                "unaff_RBX": "output_file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102475": {
            "additional_data": {
                "FUN_00102475": {
                    "1": "print_object_filename"
                },
                "object_index": {
                    "16": "index"
                },
                "param1": {
                    "1": "filename_buffer"
                },
                "param2": {
                    "1": "file_size"
                },
                "param_1": {
                    "1": "config_data",
                    "2": "file_name",
                    "3": "filename_param",
                    "6": "filename"
                },
                "param_2": {
                    "1": "print_flag",
                    "2": "object_index",
                    "3": "filename",
                    "4": "param2"
                },
                "set_print_object_filename_00104397": {
                    "1": "set_print_file_name",
                    "15": "set_print_object_filename"
                },
                "switchD_00104393": {
                    "1": "initialize_print_object_filename",
                    "2": "print_object_filename",
                    "3": "set_object_filename",
                    "4": "set_print_object_filename"
                },
                "switchD_00104393::FUN_00102475": {
                    "1": "update_print_object_filename",
                    "3": "print_object_filename",
                    "7": "set_print_object_filename"
                }
            },
            "called": [
                "FUN_00104397"
            ],
            "calling": [
                "FUN_00104370"
            ],
            "code": "\nvoid set_print_object_filename_00102475::print_object_filename_00102475(undefined8 filename,undefined8 param2)\n\n{\n  set_print_object_filename_00102475(filename,param2,3);\n  return;\n}\n\n",
            "current_name": "print_object_filename_00102475",
            "entrypoint": "0x00102475",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102475": "print_object_filename_00102475",
                "param_1": "filename",
                "param_2": "param2",
                "set_print_object_filename_00104397": "set_print_object_filename",
                "switchD_00104393": "set_print_object_filename"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010249f": {
            "additional_data": {
                "FUN_0010249f": {
                    "1": "display_file_not_ordinary_warning",
                    "2": "print_file_not_ordinary_warning",
                    "3": "print_warning_message",
                    "4": "display_warning",
                    "5": "display_warning_message"
                },
                "dcgettext": {
                    "1": "get_translated_warning_message",
                    "4": "get_localized_message"
                },
                "non_fatal": {
                    "1": "report_error",
                    "5": "handle_non_fatal_error"
                },
                "uVar1": {
                    "1": "error_message",
                    "2": "warning_msg",
                    "28": "warning_message"
                }
            },
            "called": [
                "FUN_00106400",
                "FUN_00102150"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\nundefined8 display_warning_message_0010249f(void)\n\n{\n  undefined8 warning_message;\n  \n  warning_message = get_localized_message(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n  handle_non_fatal_error(warning_message);\n  return 0;\n}\n\n",
            "current_name": "display_warning_message_0010249f",
            "entrypoint": "0x0010249f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010249f": "display_warning_message_0010249f",
                "dcgettext": "get_localized_message",
                "non_fatal": "handle_non_fatal_error",
                "uVar1": "warning_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001025f5": {
            "called": [
                "FUN_001021b0"
            ],
            "calling": [
                "FUN_00104670"
            ],
            "code": "\nvoid FUNC_001025f5(undefined8 param_1,undefined8 param_2)\n\n{\n  DAT_0010b7a0 = concat(&DAT_001071d7,param_2,&DAT_001071ca,0);\n  return;\n}\n\n",
            "current_name": "FUNC_001025f5",
            "entrypoint": "0x001025f5",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_001025f5": "FUNC_001025f5"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00102670": {
            "additional_data": {
                "FUN_00102670": {
                    "1": "print_message_if_enabled",
                    "2": "print_if_flag_set",
                    "3": "print_if_data_available",
                    "4": "print_if_initialized"
                },
                "_DAT_0010b7c4": {
                    "1": "is_message_printing_enabled",
                    "2": "flag",
                    "3": "is_initialized"
                },
                "param_1": {
                    "2": "debug_message",
                    "29": "message"
                },
                "printf": {
                    "1": "print_formatted"
                }
            },
            "called": [
                "FUN_00102190"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\n\n\nvoid print_if_initialized_00102670(undefined8 message)\n\n{\n  if (_DAT_0010b7c4 != 0) {\n    print_formatted(\"\\n%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "print_if_initialized_00102670",
            "entrypoint": "0x00102670",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102670": "print_if_initialized_00102670",
                "param_1": "message",
                "printf": "print_formatted"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010268b": {
            "additional_data": {
                "BVar15": {
                    "1": "temp_byte"
                },
                "BVar2": {
                    "1": "byte_value"
                },
                "BVar3": {
                    "1": "next_byte_value"
                },
                "DAT_0010b790": {
                    "1": "dynamic_memory"
                },
                "DAT_0010b7e0": {
                    "1": "string_length"
                },
                "FUN_0010268b": {
                    "1": "reverse_and_print_string",
                    "2": "print_decoded_string",
                    "3": "print_decompiled_code",
                    "9": "print_encoded_string"
                },
                "IVar4": {
                    "1": "return_value"
                },
                "In_stack_00000038": {
                    "1": "literal_value"
                },
                "LVar13": {
                    "1": "temp_long"
                },
                "PCVar7": {
                    "1": "temp_string_ptr"
                },
                "PUVar1": {
                    "1": "current_byte"
                },
                "PUVar10": {
                    "1": "concatenated_string_ptr"
                },
                "PUVar11": {
                    "1": "current_string_ptr"
                },
                "PUVar12": {
                    "1": "output_string_ptr"
                },
                "PUVar6": {
                    "1": "string_ptr"
                },
                "SVar16": {
                    "1": "characters_written"
                },
                "SVar5": {
                    "1": "string_length"
                },
                "UNAff_R12": {
                    "1": "some_pointer"
                },
                "UNAff_R13": {
                    "1": "input_string_ptr"
                },
                "UNAff_R14": {
                    "1": "format_string"
                },
                "UNAff_R15": {
                    "1": "temp_pointer"
                },
                "UNAff_RBP": {
                    "1": "base_pointer"
                },
                "UVar14": {
                    "1": "temp_u_int"
                },
                "UVar8": {
                    "1": "length"
                },
                "UVar9": {
                    "1": "temp_char"
                },
                "_DAT_0010b798": {
                    "1": "allocated_size"
                },
                "__s": {
                    "1": "char_ptr2",
                    "2": "str_ptr2",
                    "4": "temp_str",
                    "7": "temp_string"
                },
                "_sch_istable": {
                    "1": "character_table"
                },
                "bVar15": {
                    "1": "byte_3",
                    "2": "loop_flag",
                    "4": "byte_var",
                    "5": "byte3"
                },
                "bVar2": {
                    "1": "byte_val",
                    "15": "byte1",
                    "2": "byte_value",
                    "8": "current_byte"
                },
                "bVar3": {
                    "1": "second_byte_value",
                    "15": "byte2",
                    "2": "next_char",
                    "7": "next_byte"
                },
                "iVar4": {
                    "1": "terminal_status",
                    "2": "result",
                    "4": "int_var",
                    "5": "is_tty",
                    "9": "is_terminal"
                },
                "in_stack_00000038": {
                    "1": "format_value",
                    "2": "temp_value",
                    "8": "stack_var"
                },
                "lVar13": {
                    "1": "length2",
                    "2": "loop_var",
                    "4": "long_var",
                    "6": "loop_counter"
                },
                "pcVar7": {
                    "1": "str",
                    "2": "hex_string",
                    "3": "formatted_string",
                    "4": "str_ptr"
                },
                "puVar1": {
                    "1": "ptr_to_value",
                    "13": "ptr",
                    "6": "pointer1"
                },
                "puVar10": {
                    "1": "recon_ptr",
                    "3": "ptr3",
                    "5": "pointer3"
                },
                "puVar11": {
                    "1": "current_pointer",
                    "2": "source_ptr",
                    "3": "ptr4",
                    "5": "pointer4"
                },
                "puVar12": {
                    "1": "decoded_string_ptr",
                    "2": "result_ptr",
                    "3": "ptr5",
                    "4": "pointer5"
                },
                "puVar6": {
                    "1": "pointer_2",
                    "5": "output_ptr",
                    "6": "pointer2",
                    "7": "ptr2"
                },
                "sVar5": {
                    "1": "input_string_size",
                    "2": "str_length",
                    "4": "input_length",
                    "7": "string_length"
                },
                "uVar14": {
                    "1": "unsigned_var2",
                    "2": "switch_case_value",
                    "3": "loop_size",
                    "4": "uint_var"
                },
                "uVar8": {
                    "1": "counter",
                    "2": "count",
                    "5": "loop_counter",
                    "6": "ulong_var"
                },
                "uVar9": {
                    "1": "special_char",
                    "2": "brace_char"
                },
                "unaff_R12": {
                    "1": "undefined_var2",
                    "2": "register_r12",
                    "4": "unaff_r12"
                },
                "unaff_R13": {
                    "1": "reg13",
                    "2": "register_r13",
                    "7": "input_string"
                },
                "unaff_R14": {
                    "1": "unaff_r14",
                    "13": "format_string",
                    "2": "format_str",
                    "5": "format"
                },
                "unaff_R15": {
                    "1": "unaff_register15",
                    "2": "register_r15",
                    "3": "unaff_r15"
                },
                "unaff_RBP": {
                    "1": "unaff_rbp",
                    "2": "frame_pointer",
                    "3": "base_ptr"
                }
            },
            "called": [
                "FUN_00102040",
                "FUN_001020c0",
                "FUN_001047d0",
                "FUN_001021e0",
                "FUN_001023b0",
                "FUN_00102160"
            ],
            "calling": [
                "FUN_00102739"
            ],
            "code": "\n\n\nvoid print_encoded_string_0010268b(void)\n\n{\n  undefined8 *ptr;\n  byte byte1;\n  byte byte2;\n  int is_terminal;\n  size_t string_length;\n  undefined8 *ptr2;\n  char *str_ptr;\n  ulong ulong_var;\n  undefined8 ulong_var2;\n  undefined *pointer3;\n  undefined8 *input_ptr;\n  long base_ptr;\n  undefined8 *pointer5;\n  undefined *unaff_r12;\n  undefined8 *input_string;\n  long loop_counter;\n  uint uint_var;\n  char *format_string;\n  long unaff_r15;\n  byte byte3;\n  char *temp_string;\n  undefined8 stack_var;\n  \n  byte3 = 0;\n  pointer5 = input_string;\n  if (DAT_0010b7e0 != 0) {\n    do {\n      byte1 = *(byte *)pointer5;\n      if (byte1 == 0) goto LAB_0010485e;\n    } while ((((&character_table)[(ulong)byte1 * 2] & 2) == 0) &&\n            (pointer5 = (undefined8 *)((long)pointer5 + 1), byte1 < 0xc0));\n    string_length = strlen((char *)input_string);\n    pointer5 = DAT_0010b790;\n    input_ptr = input_string;\n    if (_DAT_0010b798 < string_length * 9) {\n      free(DAT_0010b790);\n      string_length = strlen((char *)input_string);\n      _DAT_0010b798 = string_length * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      pointer5 = DAT_0010b790;\n    }\n    while( true ) {\n      input_string = DAT_0010b790;\n      byte1 = *(byte *)input_ptr;\n      ptr = (undefined8 *)((long)input_ptr + 1);\n      if (byte1 == 0) break;\n      if (((&character_table)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)pointer5 = byte1;\n          pointer5 = (undefined8 *)((long)pointer5 + 1);\n          input_ptr = ptr;\n        }\n        else {\n          byte2 = *(byte *)((long)input_ptr + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            ptr2 = pointer5;\n            if ((byte1 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                uint_var = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                loop_counter = 2;\n                goto LAB_00102917;\n              case 4:\n                is_terminal = isatty(1);\n                if (is_terminal == 0) {\n                  byte2 = *(byte *)((long)input_ptr + 1);\n                }\n                else {\n                  *(undefined *)(pointer5 + 1) = 0;\n                  *pointer5 = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)input_ptr + 1);\n                  ptr2 = pointer5 + 1;\n                }\n              case 2:\n                uint_var = 2;\n                sprintf((char *)ptr2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)input_ptr >> 2 & 7),\n                        (ulong)((*(byte *)input_ptr & 3) << 6 | byte2 & 0x3f));\n                ptr2 = (undefined8 *)((long)ptr2 + 6);\n                goto LAB_00102a27;\n              default:\n                uint_var = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)input_ptr + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uint_var = 3;\nLAB_00102a62:\n                  for (ulong_var = (ulong)uint_var; ulong_var != 0; ulong_var = ulong_var - 1) {\n                    *(undefined *)ptr2 = *(undefined *)input_ptr;\n                    input_ptr = (undefined8 *)((long)input_ptr + (ulong)byte3 * -2 + 1);\n                    ptr2 = (undefined8 *)((long)ptr2 + (ulong)byte3 * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  loop_counter = 3;\nLAB_00102917:\n                  ulong_var2 = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    ulong_var2 = 0x3c;\n                  }\n                  sprintf((char *)pointer5,\"%c\",ulong_var2);\n                  *(undefined *)((long)pointer5 + 3) = 0;\n                  ptr2 = (undefined8 *)(loop_counter + (long)input_ptr);\n                  *(undefined2 *)((long)pointer5 + 1) = 0x7830;\n                  str_ptr = (char *)((long)pointer5 + 3);\n                  do {\n                    temp_string = str_ptr;\n                    byte1 = *(byte *)input_ptr;\n                    input_ptr = (undefined8 *)((long)input_ptr + 1);\n                    sprintf(temp_string,\"%02x\",(ulong)byte1);\n                    str_ptr = temp_string + 2;\n                  } while (input_ptr != ptr2);\n                  ulong_var2 = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    ulong_var2 = 0x3e;\n                  }\n                  uint_var = (uint)loop_counter;\n                  sprintf(temp_string + 2,\"%c\",ulong_var2);\n                  ptr2 = (undefined8 *)(temp_string + 3);\n                  break;\n                case 4:\n                  is_terminal = isatty(1);\n                  if (is_terminal == 0) {\n                    byte2 = *(byte *)((long)input_ptr + 2);\n                  }\n                  else {\n                    *(undefined *)(pointer5 + 1) = 0;\n                    *pointer5 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)input_ptr + 2);\n                    ptr2 = pointer5 + 1;\n                  }\n                case 2:\n                  uint_var = 3;\n                  sprintf((char *)ptr2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)input_ptr & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)input_ptr + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)input_ptr + 1) & 3) << 6 | byte2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (is_terminal = isatty(1), is_terminal != 0)) {\n                    *(undefined4 *)ptr2 = 0x6d305b1b;\n                    ptr2 = (undefined8 *)((long)ptr2 + 4);\n                    *(undefined *)ptr2 = 0;\n                  }\n                  break;\n                default:\n                  uint_var = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)input_ptr + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uint_var = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  loop_counter = 4;\n                  goto LAB_00102917;\n                case 4:\n                  is_terminal = isatty(1);\n                  if (is_terminal != 0) {\n                    *(undefined *)(pointer5 + 1) = 0;\n                    *pointer5 = 0x6d37343b31335b1b;\n                    ptr2 = pointer5 + 1;\n                  }\n                case 2:\n                  uint_var = 4;\n                  is_terminal = sprintf((char *)ptr2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)input_ptr & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)input_ptr + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)input_ptr + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)input_ptr + 2) >> 2 & 0xfU));\n                  ptr2 = (undefined8 *)((long)ptr2 + (long)is_terminal);\n                  goto LAB_00102a27;\n                default:\n                  uint_var = 4;\n                }\n              }\n            }\n            ulong_var = (ulong)(uint)((int)ptr2 - (int)pointer5);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)pointer5 = byte1;\n            uint_var = 1;\n            ulong_var = 1;\n          }\n          pointer5 = (undefined8 *)((long)pointer5 + ulong_var);\n          input_ptr = (undefined8 *)((long)ptr + (ulong)(uint_var - 1));\n        }\n      }\n      else {\n        *(undefined *)pointer5 = 0x5e;\n        *(byte *)((long)pointer5 + 1) = byte1 + 0x40;\n        pointer5 = (undefined8 *)((long)pointer5 + 2);\n        input_ptr = ptr;\n      }\n    }\n    *(undefined *)pointer5 = 0;\n  }\nLAB_0010485e:\n  pointer5 = (undefined8 *)0x0;\n  if ((((base_ptr != 0) && (*(long *)(base_ptr + 0x10) != 0)) && (DAT_0010b234 != 0)) &&\n     ((str_ptr = (char *)(**(code **)(*(long *)(unaff_r15 + 8) + 0x220))\n                                  (unaff_r15,*(long *)(base_ptr + 0x10),0,\n                                   (long)&stack0x00000038 + 7), str_ptr != (char *)0x0 &&\n      (*str_ptr != '\\0')))) {\n    pointer3 = &DAT_001071e0;\n    if ((stack_var._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(base_ptr + 0x10) + 0x20) != 0x10c2a8)) {\n      pointer3 = &DAT_001071df;\n    }\n    pointer5 = (undefined8 *)reconcat(0,input_string,pointer3,str_ptr,0);\n    input_string = pointer5;\n  }\n  printf(format_string,input_string);\n  if (unaff_r12 != (undefined *)0x0) {\n    *unaff_r12 = 0x40;\n  }\n  free(pointer5);\n  return;\n}\n\n",
            "current_name": "print_encoded_string_0010268b",
            "entrypoint": "0x0010268b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010268b": "print_encoded_string_0010268b",
                "__s": "temp_string",
                "_sch_istable": "character_table",
                "bVar15": "byte3",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "is_terminal",
                "in_stack_00000038": "stack_var",
                "lVar13": "loop_counter",
                "pcVar7": "str_ptr",
                "puVar1": "ptr",
                "puVar10": "pointer3",
                "puVar11": "input_ptr",
                "puVar12": "pointer5",
                "puVar6": "ptr2",
                "sVar5": "string_length",
                "uVar14": "uint_var",
                "uVar8": "ulong_var",
                "uVar9": "ulong_var2",
                "unaff_R12": "unaff_r12",
                "unaff_R13": "input_string",
                "unaff_R14": "format_string",
                "unaff_R15": "unaff_r15",
                "unaff_RBP": "base_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102739": {
            "additional_data": {
                "(DAT_0010b234 != 0) && (pcVar8 != (char *)0x0) && (*pcVar8 != '\\0')": {
                    "1": "is_condition_true"
                },
                "(in_stack_00000038._7_1_ == '\\0')": {
                    "1": "is_condition_true"
                },
                "*(char *)unaff_R13 == '\\0'": {
                    "1": "is_end_of_string"
                },
                "*(int *)(unaff_R15 + 8) + 8": {
                    "1": "context_struct_field"
                },
                "*(long *)(unaff_R15 + 8) == 0x10": {
                    "1": "context_struct_field_is_other_valid"
                },
                "*(long *)(unaff_R15 + 8) == 0x18": {
                    "1": "context_struct_field_is_valid"
                },
                "DAT_0010b790": {
                    "1": "string_buffer"
                },
                "DAT_0010b7b8": {
                    "1": "table"
                },
                "DAT_0010b7e0": {
                    "1": "flag_value",
                    "2": "flag2"
                },
                "DAT_0010b814": {
                    "1": "is_flag_set",
                    "2": "flag1"
                },
                "FUN_00102739": {
                    "1": "reverse_and_print_string",
                    "11": "decode_and_print_string",
                    "4": "print_encoded_string"
                },
                "_DAT_0010b798": {
                    "1": "buffer_size"
                },
                "__ptr": {
                    "1": "ptr_var",
                    "4": "result",
                    "9": "decoded_string"
                },
                "__s": {
                    "1": "buffer",
                    "2": "str",
                    "3": "temp_string"
                },
                "_sch_istable": {
                    "1": "char_type_table"
                },
                "bVar15": {
                    "1": "temp_byte",
                    "10": "byte3",
                    "2": "byte_value",
                    "5": "flag"
                },
                "bVar2": {
                    "1": "current_char",
                    "14": "byte1",
                    "2": "byte_value",
                    "5": "current_byte"
                },
                "bVar3": {
                    "1": "byte_var_3",
                    "14": "byte2",
                    "2": "byte_2",
                    "3": "next_byte"
                },
                "iVar4": {
                    "1": "int_value",
                    "3": "int_var",
                    "4": "is_terminal",
                    "5": "int1"
                },
                "if ((in_stack_00000038._7_1_ == '\\0') && (*(long *)(*(long *)(unaff_RBP + 0x10) + 0x20) != 0x10c2a8))": {
                    "1": "is_special_case"
                },
                "in_stack_00000038": {
                    "1": "param",
                    "2": "stack_var"
                },
                "lVar13": {
                    "1": "encoding_length",
                    "2": "long_var_13",
                    "3": "long1"
                },
                "pcVar6": {
                    "1": "pointer_variable6",
                    "2": "ptr2",
                    "3": "pointer2"
                },
                "pcVar8": {
                    "1": "str2",
                    "2": "char_ptr2",
                    "3": "ptr4"
                },
                "puVar1": {
                    "1": "current_char_pointer",
                    "2": "pointer_1",
                    "3": "ptr",
                    "5": "pointer1",
                    "7": "ptr1"
                },
                "puVar11": {
                    "1": "suffix",
                    "2": "ptr4",
                    "3": "ptr3"
                },
                "puVar12": {
                    "1": "pointer_variable12",
                    "2": "pointer6",
                    "3": "ptr4"
                },
                "puVar7": {
                    "1": "output_ptr",
                    "2": "pointer2",
                    "3": "ptr3",
                    "6": "ptr2"
                },
                "sVar5": {
                    "1": "size1",
                    "11": "size",
                    "7": "string_length"
                },
                "uVar10": {
                    "1": "ulong_var10",
                    "2": "special_char",
                    "3": "ulong_var2",
                    "5": "ulong2"
                },
                "uVar14": {
                    "1": "uint_var1",
                    "2": "uint_var",
                    "3": "byte_count",
                    "5": "uint1"
                },
                "uVar9": {
                    "1": "string_length",
                    "3": "ulong_var",
                    "5": "ulong1"
                },
                "unaff_R11": {
                    "1": "unaff_arg4"
                },
                "unaff_R12": {
                    "1": "var8"
                },
                "unaff_R13": {
                    "1": "unaff-_register13",
                    "2": "input_string"
                },
                "unaff_R13 + 1": {
                    "1": "next_encoded_char"
                },
                "unaff_R13 == (undefined8 *)0x0": {
                    "1": "encoded_string_is_null"
                },
                "unaff_R14": {
                    "1": "suffix",
                    "2": "char_ptr3",
                    "9": "format_string"
                },
                "unaff_R15": {
                    "1": "unaff_var4",
                    "2": "long3"
                },
                "unaff_R15 + 8": {
                    "1": "reg_value"
                },
                "unaff_R15 == (long)0x0": {
                    "1": "additional_info_is_null"
                },
                "unaff_R9": {
                    "1": "is_tty"
                },
                "unaff_RB11": {
                    "1": "var6"
                },
                "unaff_RBP": {
                    "1": "unaff_rbp",
                    "2": "context_ptr",
                    "5": "base_pointer"
                },
                "unaff_RBP + 0x10": {
                    "1": "encoded_string_ptr"
                },
                "unaff_RBP + 0x10 + 0x20": {
                    "1": "var2"
                },
                "unaff_RPB + 0x10 + 8": {
                    "1": "var3"
                }
            },
            "called": [
                "FUN_00102320",
                "FUN_00102180",
                "FUN_001047d0",
                "FUN_00102190",
                "FUN_0010268b"
            ],
            "calling": [
                "FUN_00104740"
            ],
            "code": "\n\n\nvoid decode_and_print_string_00102739(void)\n\n{\n  undefined8 *ptr1;\n  byte byte1;\n  byte byte2;\n  int int1;\n  size_t size;\n  char *pointer2;\n  undefined8 *ptr2;\n  char *pointer4;\n  undefined8 *decoded_string;\n  ulong ulong1;\n  undefined8 ulong2;\n  undefined *ptr3;\n  long base_pointer;\n  undefined8 *ptr4;\n  undefined8 *ptr5;\n  long long1;\n  uint uint1;\n  char *format_string;\n  long long3;\n  byte byte3;\n  char *temp_string;\n  undefined8 arg1;\n  \n  byte3 = 0;\n  ptr4 = ptr5;\n  if (*(int *)(*(long *)(long3 + 8) + 8) != 5) {\n    if (DAT_0010b814 != 0) {\n      pointer2 = (char *)0x0;\n      goto LAB_0010482b;\n    }\n    pointer2 = (char *)0x0;\n    if (DAT_0010b7e0 == 0) {\nLAB_00104794:\n      decoded_string = (undefined8 *)0x0;\n    }\n    else {\n      decoded_string = (undefined8 *)0x0;\n      if (ptr5 != (undefined8 *)0x0) goto LAB_0010269d;\n      decoded_string = (undefined8 *)0x0;\n      ptr5 = (undefined8 *)0x1073a6;\n    }\n    goto joined_r0x00104799;\n  }\n  pointer2 = strchr((char *)ptr5,0x40);\n  if (pointer2 == (char *)0x0) {\n    if (DAT_0010b814 != 0) goto LAB_0010482b;\n    if (DAT_0010b7e0 == 0) {\n      if (base_pointer == 0) {\n        decoded_string = (undefined8 *)0x0;\n        printf(format_string);\n      }\n      else {\n        if (*(long *)(base_pointer + 0x10) != 0) {\n          print_and_free_001047d0();\n          return;\n        }\n        decoded_string = (undefined8 *)0x0;\n        printf(format_string);\n      }\n      goto LAB_001047ba;\n    }\nLAB_00102698:\n    ptr4 = ptr5;\n    decoded_string = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byte1 = *(byte *)ptr4;\n      if (byte1 == 0) goto joined_r0x00104799;\n    } while ((((&char_type_table)[(ulong)byte1 * 2] & 2) == 0) &&\n            (ptr4 = (undefined8 *)((long)ptr4 + 1), byte1 < 0xc0));\n    size = strlen((char *)ptr5);\n    ptr4 = DAT_0010b790;\n    if (_DAT_0010b798 < size * 9) {\n      free(DAT_0010b790);\n      size = strlen((char *)ptr5);\n      _DAT_0010b798 = size * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      ptr4 = DAT_0010b790;\n    }\n    while( true ) {\n      ptr2 = DAT_0010b790;\n      byte1 = *(byte *)ptr5;\n      ptr1 = (undefined8 *)((long)ptr5 + 1);\n      if (byte1 == 0) break;\n      if (((&char_type_table)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)ptr4 = byte1;\n          ptr4 = (undefined8 *)((long)ptr4 + 1);\n          ptr5 = ptr1;\n        }\n        else {\n          byte2 = *(byte *)((long)ptr5 + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            ptr2 = ptr4;\n            if ((byte1 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                uint1 = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                long1 = 2;\n                goto LAB_00102917;\n              case 4:\n                int1 = isatty(1);\n                if (int1 == 0) {\n                  byte2 = *(byte *)((long)ptr5 + 1);\n                }\n                else {\n                  *(undefined *)(ptr4 + 1) = 0;\n                  *ptr4 = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)ptr5 + 1);\n                  ptr2 = ptr4 + 1;\n                }\n              case 2:\n                uint1 = 2;\n                sprintf((char *)ptr2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)ptr5 >> 2 & 7)\n                        ,(ulong)((*(byte *)ptr5 & 3) << 6 | byte2 & 0x3f));\n                ptr2 = (undefined8 *)((long)ptr2 + 6);\n                goto LAB_00102a27;\n              default:\n                uint1 = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)ptr5 + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uint1 = 3;\nLAB_00102a62:\n                  for (ulong1 = (ulong)uint1; ulong1 != 0; ulong1 = ulong1 - 1) {\n                    *(undefined *)ptr2 = *(undefined *)ptr5;\n                    ptr5 = (undefined8 *)((long)ptr5 + (ulong)byte3 * -2 + 1);\n                    ptr2 = (undefined8 *)((long)ptr2 + (ulong)byte3 * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  long1 = 3;\nLAB_00102917:\n                  ulong2 = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    ulong2 = 0x3c;\n                  }\n                  sprintf((char *)ptr4,\"%c\",ulong2);\n                  *(undefined *)((long)ptr4 + 3) = 0;\n                  ptr2 = (undefined8 *)(long1 + (long)ptr5);\n                  *(undefined2 *)((long)ptr4 + 1) = 0x7830;\n                  pointer4 = (char *)((long)ptr4 + 3);\n                  do {\n                    temp_string = pointer4;\n                    byte1 = *(byte *)ptr5;\n                    ptr5 = (undefined8 *)((long)ptr5 + 1);\n                    sprintf(temp_string,\"%02x\",(ulong)byte1);\n                    pointer4 = temp_string + 2;\n                  } while (ptr5 != ptr2);\n                  ulong2 = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    ulong2 = 0x3e;\n                  }\n                  uint1 = (uint)long1;\n                  sprintf(temp_string + 2,\"%c\",ulong2);\n                  ptr2 = (undefined8 *)(temp_string + 3);\n                  break;\n                case 4:\n                  int1 = isatty(1);\n                  if (int1 == 0) {\n                    byte2 = *(byte *)((long)ptr5 + 2);\n                  }\n                  else {\n                    *(undefined *)(ptr4 + 1) = 0;\n                    *ptr4 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)ptr5 + 2);\n                    ptr2 = ptr4 + 1;\n                  }\n                case 2:\n                  uint1 = 3;\n                  sprintf((char *)ptr2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)ptr5 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)ptr5 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)ptr5 + 1) & 3) << 6 | byte2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (int1 = isatty(1), int1 != 0)) {\n                    *(undefined4 *)ptr2 = 0x6d305b1b;\n                    ptr2 = (undefined8 *)((long)ptr2 + 4);\n                    *(undefined *)ptr2 = 0;\n                  }\n                  break;\n                default:\n                  uint1 = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)ptr5 + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uint1 = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  long1 = 4;\n                  goto LAB_00102917;\n                case 4:\n                  int1 = isatty(1);\n                  if (int1 != 0) {\n                    *(undefined *)(ptr4 + 1) = 0;\n                    *ptr4 = 0x6d37343b31335b1b;\n                    ptr2 = ptr4 + 1;\n                  }\n                case 2:\n                  uint1 = 4;\n                  int1 = sprintf((char *)ptr2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)ptr5 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr5 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)ptr5 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr5 + 2) >> 2 & 0xfU));\n                  ptr2 = (undefined8 *)((long)ptr2 + (long)int1);\n                  goto LAB_00102a27;\n                default:\n                  uint1 = 4;\n                }\n              }\n            }\n            ulong1 = (ulong)(uint)((int)ptr2 - (int)ptr4);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)ptr4 = byte1;\n            uint1 = 1;\n            ulong1 = 1;\n          }\n          ptr4 = (undefined8 *)((long)ptr4 + ulong1);\n          ptr5 = (undefined8 *)((long)ptr1 + (ulong)(uint1 - 1));\n        }\n      }\n      else {\n        *(undefined *)ptr4 = 0x5e;\n        *(byte *)((long)ptr4 + 1) = byte1 + 0x40;\n        ptr4 = (undefined8 *)((long)ptr4 + 2);\n        ptr5 = ptr1;\n      }\n    }\n    *(undefined *)ptr4 = 0;\n    ptr5 = ptr2;\n  }\n  else {\n    *pointer2 = '\\0';\n    if (DAT_0010b814 == 0) {\n      if (DAT_0010b7e0 == 0) goto LAB_00104794;\n      decoded_string = (undefined8 *)0x0;\n      goto LAB_0010269d;\n    }\nLAB_0010482b:\n    if ((*(char *)ptr5 == '\\0') ||\n       (ptr4 = (undefined8 *)bfd_demangle(), ptr4 == (undefined8 *)0x0)) {\n      if (DAT_0010b7e0 != 0) goto LAB_00102698;\n      decoded_string = (undefined8 *)0x0;\n    }\n    else {\n      ptr5 = ptr4;\n      decoded_string = ptr4;\n      if (DAT_0010b7e0 != 0) goto LAB_0010269d;\n    }\n  }\njoined_r0x00104799:\n  if ((((base_pointer != 0) && (*(long *)(base_pointer + 0x10) != 0)) && (DAT_0010b234 != 0)) &&\n     ((pointer4 = (char *)(**(code **)(*(long *)(long3 + 8) + 0x220))\n                                  (long3,*(long *)(base_pointer + 0x10),0,\n                                   (long)&stack0x00000038 + 7), pointer4 != (char *)0x0 &&\n      (*pointer4 != '\\0')))) {\n    ptr3 = &DAT_001071e0;\n    if ((arg1._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(base_pointer + 0x10) + 0x20) != 0x10c2a8)) {\n      ptr3 = &DAT_001071df;\n    }\n    decoded_string = (undefined8 *)reconcat(decoded_string,ptr5,ptr3,pointer4,0);\n    ptr5 = decoded_string;\n  }\n  printf(format_string,ptr5);\n  if (pointer2 != (char *)0x0) {\n    *pointer2 = '@';\n  }\nLAB_001047ba:\n  free(decoded_string);\n  return;\n}\n\n",
            "current_name": "decode_and_print_string_00102739",
            "entrypoint": "0x00102739",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102739": "decode_and_print_string_00102739",
                "__ptr": "decoded_string",
                "__s": "temp_string",
                "_sch_istable": "char_type_table",
                "bVar15": "byte3",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "int1",
                "in_stack_00000038": "arg1",
                "lVar13": "long1",
                "pcVar6": "pointer2",
                "pcVar8": "pointer4",
                "puVar1": "ptr1",
                "puVar11": "ptr3",
                "puVar12": "ptr4",
                "puVar7": "ptr2",
                "sVar5": "size",
                "uVar10": "ulong2",
                "uVar14": "uint1",
                "uVar9": "ulong1",
                "unaff_R13": "ptr5",
                "unaff_R14": "format_string",
                "unaff_R15": "long3",
                "unaff_RBP": "base_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102c19": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "<more_descriptive_function_name>"
                },
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                },
                "<original_parameter_name_2>": {
                    "1": "<new_parameter_name_2>"
                },
                "<original_parameter_name_n>": {
                    "1": "<new_parameter_name_n>"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "DAT_0010b210": {
                    "1": "constant_value1"
                },
                "DAT_0010b230": {
                    "1": "constant_value2"
                },
                "DAT_0010b760": {
                    "1": "global_value1"
                },
                "DAT_0010b764": {
                    "1": "global_value2"
                },
                "DAT_0010b768": {
                    "1": "global_value3"
                },
                "DAT_0010b770": {
                    "1": "global_value4"
                },
                "DAT_0010b778": {
                    "1": "global_value5"
                },
                "DAT_0010b780": {
                    "1": "global_value6"
                },
                "DAT_0010b7d8": {
                    "1": "global_value7"
                },
                "DAT_0010b7e4": {
                    "1": "global_value9"
                },
                "DAT_0010b7e8": {
                    "1": "global_value8"
                },
                "DAT_0010b7ec": {
                    "1": "global_value10"
                },
                "DAT_0010b7f4": {
                    "1": "global_value15"
                },
                "DAT_0010b7f8": {
                    "1": "global_value17"
                },
                "DAT_0010b7fc": {
                    "1": "global_value16"
                },
                "DAT_0010b800": {
                    "1": "global_value11"
                },
                "DAT_0010b808": {
                    "1": "global_value12"
                },
                "DAT_0010b80c": {
                    "1": "global_value13"
                },
                "DAT_0010b81c": {
                    "1": "global_value14"
                },
                "FUN_00102c19": {
                    "1": "decompiled_function",
                    "3": "process_symbols",
                    "5": "process_lto_object"
                },
                "_DAT_0010b230": {
                    "1": "data_variable_11"
                },
                "_DAT_0010b760": {
                    "1": "data_variable_1"
                },
                "_DAT_0010b7d8": {
                    "1": "data_variable_9"
                },
                "_DAT_0010b7e8": {
                    "1": "data_variable_2"
                },
                "_DAT_0010b7f4": {
                    "1": "data_variable_6"
                },
                "_DAT_0010b7f8": {
                    "1": "data_variable_5"
                },
                "_DAT_0010b7fc": {
                    "1": "data_variable_7"
                },
                "_DAT_0010b800": {
                    "1": "data_variable_3"
                },
                "_DAT_0010b808": {
                    "1": "data_variable_8"
                },
                "_DAT_0010b80c": {
                    "1": "data_variable_4"
                },
                "_DAT_0010b81c": {
                    "1": "data_variable_10"
                },
                "__ptr": {
                    "1": "dynamic_symbol_table_entry",
                    "2": "pointer_var3"
                },
                "bVar16": {
                    "1": "boolean_variable",
                    "2": "boolean_var",
                    "3": "bool_var"
                },
                "bVar17": {
                    "1": "is_empty",
                    "2": "loop_counter",
                    "5": "byte_var"
                },
                "cVar3": {
                    "1": "plugin_needed",
                    "2": "is_plugin_needed",
                    "3": "flag",
                    "5": "character"
                },
                "iVar4": {
                    "1": "integer_variable",
                    "10": "comparison_result",
                    "3": "int_var",
                    "4": "integer"
                },
                "in_R8": {
                    "1": "tmp4"
                },
                "in_R9": {
                    "1": "input_pointer_2"
                },
                "in_stack_00000008": {
                    "1": "dynamic_memory_1",
                    "2": "stack_var1",
                    "3": "stack_variable_1",
                    "4": "stack_variable1"
                },
                "in_stack_00000010": {
                    "1": "sorted_tmp",
                    "2": "stack_var2",
                    "3": "stack_variable_2",
                    "4": "stack_variable2"
                },
                "in_stack_00000018": {
                    "1": "arg18",
                    "2": "symbol_table_start",
                    "3": "stack_variable_3",
                    "4": "stack_variable3"
                },
                "in_stack_00000038": {
                    "1": "multiplier",
                    "2": "stack_var4",
                    "3": "stack_variable_4",
                    "4": "stack_variable4"
                },
                "in_stack_00000040": {
                    "1": "temp_buffer",
                    "2": "stack_var5",
                    "3": "stack_variable_5",
                    "4": "stack_variable5"
                },
                "in_stack_00000048": {
                    "1": "symbol_table_start",
                    "2": "stack_var6",
                    "3": "stack_variable_6",
                    "4": "stack_variable6"
                },
                "lVar11": {
                    "1": "long_var3"
                },
                "lVar7": {
                    "1": "symbol_table",
                    "2": "symbol_index",
                    "4": "symbol_address",
                    "5": "long_var"
                },
                "lVar9": {
                    "1": "temp_var_22",
                    "2": "symbol_size",
                    "5": "long_var2"
                },
                "pcVar1": {
                    "1": "character_pointer",
                    "10": "symbol_name",
                    "2": "char_pointer",
                    "3": "pointer1"
                },
                "pcVar2": {
                    "1": "symbol_print_function",
                    "2": "function_ptr",
                    "3": "pointer2",
                    "4": "function_pointer",
                    "6": "print_symbol"
                },
                "puVar10": {
                    "1": "symbol2",
                    "2": "ptr_var10",
                    "3": "pointer4"
                },
                "puVar11": {
                    "1": "symbols",
                    "2": "pointer_var4"
                },
                "puVar12": {
                    "1": "pointer1",
                    "2": "tmp2"
                },
                "puVar13": {
                    "1": "input_data",
                    "2": "pointer_var6"
                },
                "puVar14": {
                    "1": "temp_var6",
                    "2": "pointer_var7"
                },
                "puVar15": {
                    "1": "temp_var6",
                    "2": "sorted_symbols",
                    "3": "sorted_symbol_table"
                },
                "puVar8": {
                    "1": "pointer_variable1",
                    "2": "ptr_var8",
                    "3": "pointer_var1"
                },
                "uVar18": {
                    "1": "unsigned_long3",
                    "2": "ulong_var3"
                },
                "uVar5": {
                    "1": "is_lto_object",
                    "2": "unsigned_var",
                    "3": "unsigned_integer",
                    "4": "is_slim_lto"
                },
                "uVar6": {
                    "1": "localized_error",
                    "2": "translation",
                    "3": "ulong_var",
                    "5": "error_message"
                },
                "unaff_R12": {
                    "1": "pointer_r12",
                    "2": "register_r12",
                    "3": "element_size",
                    "4": "num_symbols"
                },
                "unaff_R13": {
                    "1": "pointer13",
                    "2": "register_r13",
                    "3": "symbol_offset"
                },
                "unaff_R14": {
                    "1": "loop_counter_3",
                    "2": "element_size",
                    "3": "symbol_size"
                },
                "unaff_R15": {
                    "1": "output_array",
                    "2": "register_r15"
                },
                "unaff_RBP": {
                    "1": "symbol_table_start",
                    "2": "register_bp",
                    "4": "base_pointer"
                },
                "unaff_RBX": {
                    "1": "ptr_rbx",
                    "2": "register_bx",
                    "5": "destination"
                },
                "unaff_retaddr": {
                    "1": "ret_address",
                    "16": "return_address",
                    "2": "ulong_var2"
                }
            },
            "called": [],
            "calling": [
                "FUN_00104d5b"
            ],
            "code": "\n\n\nvoid process_lto_object_00102c19(void)\n\n{\n  char *symbol_name;\n  code *print_symbol;\n  char character;\n  int comparison_result;\n  uint is_slim_lto;\n  undefined8 error_message;\n  long long_var;\n  undefined8 *symbol_info;\n  long long_var2;\n  undefined8 *pointer4;\n  undefined8 *destination;\n  undefined8 *pointer_var3;\n  undefined8 *base_pointer;\n  undefined8 *pointer_var4;\n  undefined8 *tmp2;\n  undefined8 *flags;\n  undefined8 *pointer_var6;\n  undefined8 *symbol_name;\n  undefined8 *pointer_var7;\n  undefined8 *num_symbols;\n  undefined8 *sorted_symbol_table;\n  undefined8 *symbol_offset;\n  undefined8 *symbol_size;\n  undefined8 *register_r15;\n  bool bool_var;\n  byte byte_var;\n  ulong return_address;\n  ulong ulong_var3;\n  undefined8 stack_variable1;\n  undefined8 *stack_variable2;\n  undefined8 *stack_variable3;\n  undefined8 stack_variable4;\n  void *stack_variable5;\n  undefined8 *stack_variable6;\n  \n  byte_var = 0;\n  if (_DAT_0010b760 == 0) goto LAB_001049c3;\nLAB_00104a7b:\n  do {\n    if (destination != symbol_offset) {\n      if (symbol_size == (undefined8 *)0x8) {\n        *destination = *symbol_offset;\n        process_symbols_001049c0();\n        return;\n      }\n      for (; symbol_size != (undefined8 *)0x0; symbol_size = (undefined8 *)((long)symbol_size + -1)) {\n        *(undefined *)destination = *(undefined *)symbol_offset;\n        symbol_offset = (undefined8 *)((long)symbol_offset + (ulong)byte_var * -2 + 1);\n        destination = (undefined8 *)((long)destination + (ulong)byte_var * -2 + 1);\n      }\n      process_symbols_001049c0();\n      return;\n    }\n    destination = (undefined8 *)((long)destination + (long)symbol_size);\nLAB_001049c3:\n    do {\n      do {\n        symbol_offset = (undefined8 *)((long)symbol_offset + (long)symbol_size);\n        sorted_symbol_table = num_symbols;\n        tmp2 = base_pointer;\n        if (num_symbols <= symbol_offset) goto LAB_00104b15;\nLAB_001049cf:\n        symbol_info = (undefined8 *)\n                 (**(code **)(base_pointer[1] + 0x270))\n                           (base_pointer,return_address & 0xffffffff,symbol_offset,register_r15);\n        pointer_var4 = base_pointer;\n        tmp2 = symbol_offset;\n        sorted_symbol_table = register_r15;\n        if (symbol_info == (undefined8 *)0x0) goto LAB_00102eb0;\n        symbol_name = (char *)symbol_info[1];\n        if (((symbol_name == (char *)0x0) || (*symbol_name != '_')) || (symbol_name[1] != '_')) {\nLAB_00104a03:\n          if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          is_slim_lto = (uint)(symbol_info[4] == 0x10c2a8);\nLAB_00104af9:\n          if (is_slim_lto != 0) goto LAB_00104a2d;\n          symbol_offset = (undefined8 *)((long)symbol_offset + (long)symbol_size);\n          sorted_symbol_table = num_symbols;\n          tmp2 = base_pointer;\n          if (num_symbols <= symbol_offset) {\nLAB_00104b15:\n            destination = (undefined8 *)((long)destination - (long)stack_variable3);\n            if (symbol_size == (undefined8 *)0x8) {\n              long_var2 = tmp2[1];\n              pointer_var4 = (undefined8 *)((long)destination + 7);\n              if (-1 < (long)destination) {\n                pointer_var4 = destination;\n              }\n              flags = (undefined8 *)(ulong)DAT_0010b800;\n              print_symbol = *(code **)(long_var2 + 0x208);\n              pointer_var4 = (undefined8 *)((long)pointer_var4 >> 3);\n            }\n            else {\n              pointer_var4 = (undefined8 *)((long)destination / (long)symbol_size);\n              long_var2 = tmp2[1];\n              print_symbol = *(code **)(long_var2 + 0x208);\n            }\n            base_pointer = tmp2;\n            if (DAT_0010b800 == 0) {\n              DAT_0010b778 = DAT_0010b80c != 0;\n              DAT_0010b780 = tmp2;\n              DAT_0010b770 = (undefined8 *)(*print_symbol)(tmp2);\n              DAT_0010b768 = (undefined8 *)(**(code **)(tmp2[1] + 0x208))(tmp2);\n              destination = stack_variable6;\n              if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n                bfd_fatal(*tmp2);\n                pointer_var3 = register_r15;\n                goto LAB_00102d8e;\n              }\n              num_symbols = (undefined8 *)(ulong)stack_variable4._4_4_;\n              if (DAT_0010b7f8 != 0) {\n                ulong_var3 = (ulong)(DAT_0010b80c != 0);\n                qsort(stack_variable6,(size_t)pointer_var4,(size_t)num_symbols,size_forward1);\n                sorted_symbol_table = (undefined8 *)xmalloc((long)pointer_var4 << 4);\n                pointer_var6 = DAT_0010b770;\n                base_pointer = DAT_0010b768;\n                symbol_size = (undefined8 *)((long)pointer_var4 * (long)num_symbols + (long)destination);\n                symbol_info = DAT_0010b770;\n                symbol_name = DAT_0010b768;\n                if (symbol_size <= destination) goto LAB_00102ec2;\n                pointer_var4 = (undefined8 *)\n                          (**(code **)(tmp2[1] + 0x270))(tmp2,ulong_var3 & 0xffffffff,destination);\n                pointer_var3 = destination;\n                flags = num_symbols;\n                stack_variable2 = sorted_symbol_table;\n                if (pointer_var4 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(stack_variable6,(size_t)pointer_var4,(size_t)num_symbols,\n                    (__compar_fn_t)\n                    (&PTR_non_numeric_forward_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2]\n                   );\n              long_var2 = tmp2[1];\n            }\n            pointer_var3 = (undefined8 *)0x0;\n            do {\n              tmp2 = stack_variable6;\n              symbol_info = (undefined8 *)(ulong)DAT_0010b7f8;\n              symbol_size = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n              if (DAT_0010b7f8 != 0) {\n                sorted_symbol_table = (undefined8 *)(**(code **)(long_var2 + 0x208))(base_pointer);\n                if (sorted_symbol_table == (undefined8 *)0x0) goto LAB_00102ed2;\n                destination = pointer_var3 + (long)pointer_var4 * 2;\n                pointer_var4 = pointer_var3;\n                do {\n                  if (destination <= pointer_var4) {\nLAB_00104c75:\n                    if (stack_variable5 == (void *)0x0) {\n                      free(stack_variable6);\n                      free(pointer_var3);\n                      return;\n                    }\n                    free(stack_variable5);\n                    free(stack_variable6);\n                    free(pointer_var3);\n                    return;\n                  }\n                  symbol_info = sorted_symbol_table;\n                  long_var2 = (**(code **)(base_pointer[1] + 0x270))(base_pointer,symbol_size,*pointer_var4);\n                  if (long_var2 == 0) {\n                    bfd_fatal(*base_pointer,0);\nLAB_00102ed2:\n                    tmp2 = (undefined8 *)*base_pointer;\n                    bfd_fatal();\n                    pointer_var6 = flags;\n                    pointer_var7 = symbol_name;\n                    goto LAB_00102edb;\n                  }\n                  tmp2 = pointer_var4 + 1;\n                  pointer_var4 = pointer_var4 + 2;\n                  print_symbol(base_pointer,long_var2,*tmp2,stack_variable1);\n                } while( true );\n              }\n              num_symbols = (undefined8 *)(ulong)stack_variable4._4_4_;\n              register_r15 = (undefined8 *)(**(code **)(long_var2 + 0x208))(base_pointer);\n              if (register_r15 == (undefined8 *)0x0) {\n                bfd_fatal(*base_pointer);\n                tmp2 = num_symbols;\n                if (DAT_0010b80c == 0) {\n                  long_var2 = (**(code **)(base_pointer[1] + 0x350))(base_pointer);\n                  pointer_var4 = stack_variable6;\n                  sorted_symbol_table = num_symbols;\n                  if (long_var2 < 1) {\n                    symbol_info = (undefined8 *)0x0;\n                    destination = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    destination = (undefined8 *)xmalloc();\n                    symbol_info = (undefined8 *)(**(code **)(base_pointer[1] + 0x358))(base_pointer,destination);\n                    tmp2 = sorted_symbol_table;\n                    if ((long)symbol_info < 0) {\n                      tmp2 = (undefined8 *)*base_pointer;\n                      pointer_var4 = (undefined8 *)bfd_fatal(tmp2,sorted_symbol_table);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  symbol_info = num_symbols;\n                  destination = stack_variable6;\n                  pointer_var4 = (undefined8 *)0x0;\n                  sorted_symbol_table = (undefined8 *)0x0;\n                }\n                symbol_name = &stack0x00000040;\n                flags = destination;\n                long_var2 = (**(code **)(base_pointer[1] + 0x360))(base_pointer,sorted_symbol_table,pointer_var4,symbol_info);\n                num_symbols = tmp2;\n                if (0 < long_var2) {\n                  num_symbols = (undefined8 *)((long)tmp2 + long_var2);\n                  stack_variable6 = (undefined8 *)xrealloc(stack_variable6);\n                  long_var = 0;\n                  do {\n                    stack_variable6[(long)((long)tmp2 + long_var)] =\n                         (void *)(long_var * 0x30 + (long)stack_variable5);\n                    long_var = long_var + 1;\n                  } while (long_var2 != long_var);\n                  stack_variable6[(long)((long)tmp2 + long_var2)] = 0;\n                }\n                if ((DAT_0010b80c == 0) && (destination != (undefined8 *)0x0)) {\n                  free(destination);\n                }\n                if ((*(byte *)((long)base_pointer + 0x4a) & 0x10) != 0) {\n                  destination = (undefined8 *)*base_pointer;\n                  DAT_0010b230 = '\\0';\n                  error_message = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  non_fatal(error_message);\n                }\n                symbol_size = (undefined8 *)(ulong)stack_variable4._4_4_;\n                bool_var = DAT_0010b80c != 0;\n                pointer_var4 = (undefined8 *)(ulong)bool_var;\n                symbol_info = stack_variable6;\n                stack_variable3 = stack_variable6;\n                register_r15 = (undefined8 *)(**(code **)(base_pointer[1] + 0x208))(base_pointer);\n                if (register_r15 != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                pointer_var4 = (undefined8 *)((long)pointer_var4 * (long)num_symbols + (long)tmp2);\n                destination = tmp2;\n                while( true ) {\n                  if (pointer_var4 <= destination) goto LAB_00104c75;\n                  symbol_info = register_r15;\n                  long_var2 = (**(code **)(base_pointer[1] + 0x270))(base_pointer,symbol_size,destination);\n                  if (long_var2 == 0) break;\n                  destination = (undefined8 *)((long)destination + (long)num_symbols);\n                  print_symbol(base_pointer,long_var2,0,stack_variable1);\n                }\n                bfd_fatal(*base_pointer,0);\n              }\n              bfd_fatal(*base_pointer);\n              tmp2 = base_pointer;\n              sorted_symbol_table = register_r15;\nLAB_00102eb0:\n              bfd_fatal(*pointer_var4);\nLAB_00102eb9:\n              bfd_fatal(*tmp2);\nLAB_00102ec2:\n              pointer_var4 = (undefined8 *)0x0;\n              pointer_var3 = destination;\n              flags = num_symbols;\n              pointer_var6 = symbol_info;\n              base_pointer = symbol_name;\n              stack_variable2 = sorted_symbol_table;\nLAB_00104e35:\n              while (symbol_name = pointer_var6, pointer_var3 < symbol_size) {\n                destination = (undefined8 *)((long)pointer_var3 + (long)flags);\n                if (destination < symbol_size) {\n                  symbol_info = base_pointer;\n                  pointer_var6 = flags;\n                  pointer_var7 = symbol_name;\n                  pointer4 = (undefined8 *)(**(code **)(tmp2[1] + 0x270))();\n                  if (pointer4 == (undefined8 *)0x0) {\nLAB_00102edb:\n                    symbol_name = pointer_var7;\n                    flags = pointer_var6;\n                    tmp2 = (undefined8 *)*tmp2;\n                    pointer4 = (undefined8 *)bfd_fatal();\n                  }\n                  else {\n                    symbol_info = (undefined8 *)pointer_var4[4];\n                    if ((*(uint *)(pointer_var4 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  long_var2 = pointer_var4[2];\nLAB_00102ee7:\n                  if (symbol_info == (undefined8 *)pointer4[4]) {\n                    long_var2 = pointer4[2] - long_var2;\n                    pointer_var6 = base_pointer;\n                    pointer_var7 = pointer_var3;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  long_var2 = symbol_info[8] - long_var2;\n                  pointer_var6 = base_pointer;\n                  pointer_var7 = pointer_var3;\n                }\n                else {\n                  symbol_info = (undefined8 *)pointer_var4[4];\n                  if ((*(uint *)(pointer_var4 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    long_var2 = pointer_var4[2];\n                    pointer4 = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  pointer4 = (undefined8 *)0x0;\nLAB_00104e95:\n                  pointer_var6 = base_pointer;\n                  pointer_var7 = pointer_var3;\n                  if (*(int *)(tmp2[1] + 8) == 5) {\n                    long_var2 = pointer_var4[7];\n                  }\n                  else {\n                    long_var2 = pointer_var4[2];\n                    if ((*(byte *)((long)symbol_info + 0x25) & 0x10) == 0) {\n                      if (destination < symbol_size) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                pointer_var4 = pointer4;\n                pointer_var3 = destination;\n                base_pointer = symbol_name;\n                if (long_var2 != 0) {\n                  *sorted_symbol_table = pointer_var7;\n                  sorted_symbol_table[1] = long_var2;\n                  sorted_symbol_table = sorted_symbol_table + 2;\n                }\n              }\n              pointer_var4 = (undefined8 *)((long)sorted_symbol_table - (long)stack_variable2 >> 4);\n              qsort(stack_variable2,(size_t)pointer_var4,0x10,size_forward2);\n              long_var2 = tmp2[1];\n              destination = pointer_var3;\n              base_pointer = tmp2;\n              pointer_var3 = stack_variable2;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        comparison_result = strcmp(symbol_name + (symbol_name[2] == '_'),\"__gnu_lto_slim\");\n        stack_variable2 = symbol_info;\n        if (comparison_result == 0) {\n          if (DAT_0010b230 != '\\0') {\n            stack_variable2 = (undefined8 *)*base_pointer;\n            DAT_0010b230 = '\\0';\n            error_message = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            non_fatal(error_message,stack_variable2);\n          }\n          goto LAB_00104a03;\n        }\n        if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (DAT_0010b808 == 0) {\n          if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n          is_slim_lto = (*(uint *)(symbol_info + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(symbol_info + 3) & 0x800082) == 0) && (symbol_info[4] != 0x10c2a8)) &&\n           ((*(byte *)(symbol_info[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (DAT_0010b81c != 0) {\n          if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nprocess_lto_object_00104d5b:\n          if ((symbol_info[4] != 0x10c2a8) && (symbol_info[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(symbol_info + 3) & 4) != 0);\n      if (DAT_0010b7f8 != 0) goto process_lto_object_00104d5b;\nLAB_00104a53:\n      symbol_name = (undefined8 *)(ulong)DAT_0010b7e4;\n      if (DAT_0010b7e4 == 0) {\n        character = (**(code **)(base_pointer[1] + 0x230))(base_pointer);\n        if (character != '\\0') {\n          process_lto_object_00102c19();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (symbol_info[4] == 0x10c2a8);\nLAB_00104cba:\n    character = (**(code **)(base_pointer[1] + 0x230))(base_pointer);\n    if (character != '\\0') {\n      process_lto_object_00102c19();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  sorted_symbol_table = (undefined8 *)((long)num_symbols * (long)symbol_size);\n  num_symbols = (undefined8 *)((long)stack_variable3 + (long)sorted_symbol_table);\n  destination = stack_variable3;\n  tmp2 = base_pointer;\n  if (stack_variable3 < num_symbols) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  return_address = (ulong)bool_var;\n  symbol_offset = stack_variable3;\n  goto LAB_001049cf;\n}\n\n",
            "current_name": "process_lto_object_00102c19",
            "entrypoint": "0x00102c19",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102c19": "process_lto_object_00102c19",
                "__ptr": "pointer_var3",
                "bVar16": "bool_var",
                "bVar17": "byte_var",
                "cVar3": "character",
                "iVar4": "comparison_result",
                "in_R8": "flags",
                "in_R9": "symbol_name",
                "in_stack_00000008": "stack_variable1",
                "in_stack_00000010": "stack_variable2",
                "in_stack_00000018": "stack_variable3",
                "in_stack_00000038": "stack_variable4",
                "in_stack_00000040": "stack_variable5",
                "in_stack_00000048": "stack_variable6",
                "lVar7": "long_var",
                "lVar9": "long_var2",
                "pcVar1": "symbol_name",
                "pcVar2": "print_symbol",
                "puVar10": "pointer4",
                "puVar11": "pointer_var4",
                "puVar12": "tmp2",
                "puVar13": "pointer_var6",
                "puVar14": "pointer_var7",
                "puVar15": "sorted_symbol_table",
                "puVar8": "symbol_info",
                "uVar18": "ulong_var3",
                "uVar5": "is_slim_lto",
                "uVar6": "error_message",
                "unaff_R12": "num_symbols",
                "unaff_R13": "symbol_offset",
                "unaff_R14": "symbol_size",
                "unaff_R15": "register_r15",
                "unaff_RBP": "base_pointer",
                "unaff_RBX": "destination",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102f19": {
            "additional_data": {
                "DAT_0010b7a8": {
                    "1": "size_variable"
                },
                "DAT_0010b7e8": {
                    "1": "undefined_symbols"
                },
                "FUN_00102f19": {
                    "1": "print_symbol_list",
                    "10": "print_symbol_info",
                    "2": "display_symbols",
                    "8": "print_symbols"
                },
                "dcgettext": {
                    "1": "get_translated_text",
                    "4": "get_translated_string"
                },
                "param_1": {
                    "1": "source_file",
                    "11": "filename",
                    "4": "file_path",
                    "9": "file_name"
                },
                "pcVar1": {
                    "1": "header_message",
                    "18": "format_string",
                    "2": "symbol_format",
                    "3": "message"
                },
                "pcVar2": {
                    "1": "format_string2"
                }
            },
            "called": [
                "FUN_00102150",
                "FUN_00102190"
            ],
            "calling": [],
            "code": "\nvoid print_symbol_info_00102f19(undefined8 filename)\n\n{\n  char *format_string;\n  \n  format_string = \"\\n\\nUndefined symbols from %s:\\n\\n\";\n  if (DAT_0010b7e8 == 0) {\n    format_string = \"\\n\\nSymbols from %s:\\n\\n\";\n  }\n  format_string = (char *)get_translated_string(0,format_string,5);\n  printf(format_string,filename);\n  format_string = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (DAT_0010b7a8 != 0x20) {\n    format_string = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  format_string = (char *)get_translated_string(0,format_string,5);\n  printf(format_string);\n  return;\n}\n\n",
            "current_name": "print_symbol_info_00102f19",
            "entrypoint": "0x00102f19",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102f19": "print_symbol_info_00102f19",
                "dcgettext": "get_translated_string",
                "param_1": "filename",
                "pcVar1": "format_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102f7b": {
            "additional_data": {
                "DAT_0010b818": {
                    "1": "is_condition2_false",
                    "2": "condition_not_met"
                },
                "FUN_00102f7b": {
                    "1": "display_message",
                    "2": "print_if_debug_mode",
                    "3": "print_message",
                    "8": "print_if_condition_met"
                },
                "_DAT_0010b7c4": {
                    "1": "is_condition1_true",
                    "2": "is_initialized",
                    "3": "flag"
                },
                "param_1": {
                    "1": "text",
                    "30": "message"
                },
                "param_n": {
                    "1": "new_parameter_name_n"
                },
                "param_n-1": {
                    "1": "new_parameter_name_n-1"
                },
                "param_n-2": {
                    "1": "new_parameter_name_n-2"
                },
                "param_n-3": {
                    "1": "new_parameter_name_n-3"
                },
                "param_n-4": {
                    "1": "new_parameter_name_n-4"
                },
                "param_n-5": {
                    "1": "new_parameter_name_n-5"
                },
                "param_n-6": {
                    "1": "new_parameter_name_n-6"
                },
                "printf": {
                    "1": "print"
                }
            },
            "called": [
                "FUN_00102190"
            ],
            "calling": [],
            "code": "\n\n\nvoid print_if_condition_met_00102f7b(undefined8 message)\n\n{\n  if ((_DAT_0010b7c4 != 0) && (DAT_0010b818 == 0)) {\n    print(\"%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "print_if_condition_met_00102f7b",
            "entrypoint": "0x00102f7b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102f7b": "print_if_condition_met_00102f7b",
                "param_1": "message",
                "printf": "print"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102f9f": {
            "additional_data": {
                "FUN_00102f9f": {
                    "1": "validate_and_return_address",
                    "2": "bfd_fatal_error",
                    "3": "decompiled_function"
                },
                "auVar1": {
                    "1": "new_return_value",
                    "2": "error_message",
                    "7": "result",
                    "8": "return_value"
                },
                "unaff_retaddr": {
                    "29": "return_address"
                }
            },
            "called": [
                "FUN_00106530"
            ],
            "calling": [
                "FUN_00104fa0"
            ],
            "code": "\nundefined  [16] reverse_bfd_fatal_00102f9f(void)\n\n{\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  bfd_fatal(*DAT_0010b780);\n  return_value._8_8_ = return_address;\n  return_value._0_8_ = 0xffffffff;\n  return return_value;\n}\n\n",
            "current_name": "reverse_bfd_fatal_00102f9f",
            "entrypoint": "0x00102f9f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102f9f": "reverse_bfd_fatal_00102f9f",
                "auVar1": "return_value",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102fc3": {
            "additional_data": {
                "FUN_00102fc3": {
                    "1": "check_binary_file",
                    "2": "check_binary_version",
                    "3": "check_binary_compatibility",
                    "6": "check_compiled_files"
                },
                "__s": {
                    "1": "file_contents_1",
                    "10": "string1",
                    "2": "file1_content",
                    "3": "str1",
                    "6": "string_1"
                },
                "__s_00": {
                    "1": "source_file2",
                    "10": "string2",
                    "2": "file2_content",
                    "3": "str2",
                    "6": "string_2"
                },
                "bVar14": {
                    "1": "comparison_flag",
                    "2": "is_match",
                    "3": "is_less"
                },
                "cVar1": {
                    "14": "last_char",
                    "2": "last_char1",
                    "5": "last_character"
                },
                "lVar4": {
                    "1": "file_info_1",
                    "2": "file1_info",
                    "3": "file1",
                    "6": "result1"
                },
                "lVar5": {
                    "1": "file_2_length",
                    "2": "file2_info",
                    "3": "file2",
                    "6": "result2"
                },
                "param_1": {
                    "1": "source1",
                    "2": "input1",
                    "3": "param1",
                    "4": "file1"
                },
                "param_2": {
                    "1": "param_path",
                    "2": "input2",
                    "3": "param2",
                    "4": "file2"
                },
                "pcVar8": {
                    "1": "sub_string_1",
                    "2": "substring_1",
                    "4": "substring1"
                },
                "pcVar9": {
                    "1": "ptr2",
                    "2": "substring_2",
                    "4": "substring2"
                },
                "sVar6": {
                    "1": "input_filename_len",
                    "2": "size1",
                    "3": "string_length_1",
                    "7": "length1"
                },
                "sVar7": {
                    "1": "output_filename_len",
                    "2": "file2_len",
                    "3": "length_2",
                    "7": "length2"
                },
                "uVar10": {
                    "1": "result1",
                    "2": "forward_result1",
                    "9": "result"
                },
                "uVar11": {
                    "1": "output_file_num",
                    "2": "forward_result2",
                    "3": "file2_address"
                },
                "uVar12": {
                    "1": "sum1",
                    "3": "file1_address"
                },
                "uVar13": {
                    "1": "data1",
                    "3": "ptr"
                },
                "uVar2": {
                    "1": "result1",
                    "2": "file2_size"
                },
                "uVar3": {
                    "1": "is_executable",
                    "19": "flag",
                    "2": "flags"
                },
                "unaff_R13": {
                    "1": "ptr2",
                    "2": "temp_var"
                }
            },
            "called": [
                "FUN_00106530"
            ],
            "calling": [
                "FUN_00105050"
            ],
            "code": "\nulong check_compiled_files_00102fc3(undefined8 file1,undefined8 file2)\n\n{\n  char last_char;\n  ulong file2_size;\n  char *string1;\n  char *string2;\n  uint flag;\n  long result1;\n  long result2;\n  size_t length1;\n  size_t length2;\n  char *substring1;\n  char *substring2;\n  ulong result;\n  ulong file2_address;\n  ulong file1_address;\n  undefined8 pointer;\n  long temp_var;\n  bool is_less;\n  \n  pointer = *DAT_0010b780;\n  bfd_fatal();\n  result1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,pointer,DAT_0010b770);\n  result2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,file2,DAT_0010b768);\n  if ((result1 == 0) || (temp_var = result2, result2 == 0)) {\n    result2 = bfd_fatal(*DAT_0010b780);\n  }\n  if ((*(long *)(result1 + 0x20) == 0x10c2a8) || (*(long *)(result2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  result = *(ulong *)(*(long *)(result1 + 0x20) + 0x30);\n  file2_size = *(ulong *)(*(long *)(result2 + 0x20) + 0x30);\n  file1_address = *(long *)(result1 + 0x10) + result;\n  file2_address = *(long *)(temp_var + 0x10) + file2_size;\n  is_less = file1_address < file2_address;\n  if ((file1_address != file2_address) || (is_less = result < file2_size, result != file2_size)) {\n    return (ulong)(-(uint)is_less | 1);\n  }\n  string1 = *(char **)(result1 + 8);\n  string2 = *(char **)(temp_var + 8);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  substring1 = strstr(string1,\"gnu_compiled\");\n  if (substring1 == (char *)0x0) {\n    substring2 = strstr(string1,\"gcc2_compiled\");\n    substring1 = strstr(string2,\"gnu_compiled\");\n    if ((substring1 == (char *)0x0) && (substring1 = strstr(string2,\"gcc2_compiled\"), substring1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (substring2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    substring1 = strstr(string2,\"gnu_compiled\");\n    if (substring1 == (char *)0x0) {\n      substring2 = strstr(string2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (substring2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  flag = *(uint *)(temp_var + 0x18) & 0x4000;\n  if ((*(byte *)(result1 + 0x19) & 0x40) == 0) {\n    if ((length1 < 3) || (string1[length1 - 2] != '.')) {\n      if (flag != 0) {\n        return 1;\n      }\n      if ((length2 < 3) || (string2[length2 - 2] != '.')) goto LAB_00103202;\n      is_less = false;\n      goto LAB_001031e7;\n    }\n    last_char = string1[length1 - 1];\n    is_less = last_char == 'o' || last_char == 'a';\n    if (flag == 0) {\n      if ((length2 < 3) || (string2[length2 - 2] != '.')) {\n        if (last_char == 'o' || last_char == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (flag != 0) goto LAB_00103202;\n    if (length2 < 3) {\n      return 0xffffffff;\n    }\n    if (string2[length2 - 2] != '.') {\n      return 0xffffffff;\n    }\n    is_less = true;\nLAB_001031e7:\n    if ((string2[length2 - 1] != 'o') && (string2[length2 - 1] != 'a')) {\n      if (is_less) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!is_less) {\n    return 1;\n  }\nLAB_00103202:\n  result = non_numeric_forward(pointer,file2);\n  return result;\n}\n\n",
            "current_name": "check_compiled_files_00102fc3",
            "entrypoint": "0x00102fc3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102fc3": "check_compiled_files_00102fc3",
                "__s": "string1",
                "__s_00": "string2",
                "bVar14": "is_less",
                "cVar1": "last_char",
                "lVar4": "result1",
                "lVar5": "result2",
                "param_1": "file1",
                "param_2": "file2",
                "pcVar8": "substring1",
                "pcVar9": "substring2",
                "sVar6": "length1",
                "sVar7": "length2",
                "uVar10": "result",
                "uVar11": "file2_address",
                "uVar12": "file1_address",
                "uVar13": "pointer",
                "uVar2": "file2_size",
                "uVar3": "flag",
                "unaff_R13": "temp_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102fd2": {
            "additional_data": {
                "FUN_00102fd2": {
                    "1": "check_binary_compiled_correctly",
                    "2": "check_compiled_files",
                    "4": "check_compiled_code",
                    "6": "check_file_compatibility"
                },
                "__s": {
                    "1": "file1_content",
                    "2": "file1_contents",
                    "4": "string_1",
                    "8": "string1"
                },
                "__s_00": {
                    "1": "symbol_name_string",
                    "2": "str2",
                    "4": "string_2",
                    "8": "string2"
                },
                "bVar13": {
                    "1": "is_smaller",
                    "2": "condition",
                    "3": "comparison_result",
                    "5": "is_equal"
                },
                "cVar1": {
                    "1": "last_char_file1",
                    "13": "last_char",
                    "6": "last_character"
                },
                "lVar4": {
                    "1": "bfd_file_1",
                    "2": "result1",
                    "3": "file1"
                },
                "lVar5": {
                    "1": "symbol_info",
                    "2": "result2",
                    "3": "file2"
                },
                "param_1": {
                    "1": "file_path1",
                    "2": "binary_path_1",
                    "3": "binary_path1",
                    "4": "input_file1",
                    "7": "file1",
                    "9": "file_path_1"
                },
                "param_2": {
                    "1": "file_path2",
                    "2": "binary_path_2",
                    "3": "binary_path2",
                    "4": "input_file2",
                    "7": "file2",
                    "9": "file_path_2"
                },
                "pcVar8": {
                    "1": "compiled_string_1",
                    "2": "strstr_result_1",
                    "3": "search_result1"
                },
                "pcVar9": {
                    "1": "str2",
                    "2": "substring2",
                    "4": "search_result2"
                },
                "sVar6": {
                    "1": "size1",
                    "2": "string_1_length",
                    "3": "string1_length",
                    "4": "file1_length"
                },
                "sVar7": {
                    "1": "length_2",
                    "2": "string_length_2",
                    "3": "file2_length",
                    "4": "length2"
                },
                "uVar10": {
                    "1": "offset1",
                    "25": "result"
                },
                "uVar11": {
                    "1": "result2",
                    "2": "offset2",
                    "3": "file2_offset"
                },
                "uVar12": {
                    "1": "file2_end",
                    "2": "file_offset_1",
                    "3": "file1_offset"
                },
                "uVar2": {
                    "1": "length_2",
                    "2": "offset2"
                },
                "uVar3": {
                    "1": "is_executable",
                    "18": "flag",
                    "4": "flags"
                },
                "unaff_R13": {
                    "1": "offset_file1",
                    "2": "file2_info"
                }
            },
            "called": [
                "FUN_00104fa0",
                "FUN_00106530",
                "FUN_00102070",
                "FUN_00102160",
                "FUN_00102420"
            ],
            "calling": [
                "FUN_00104d5b"
            ],
            "code": "\nulong check_file_compatibility_00102fd2(undefined8 file_path_1,undefined8 file_path_2)\n\n{\n  char last_char;\n  ulong file_size_2;\n  char *string1;\n  char *string2;\n  uint flag;\n  long file1;\n  long file2;\n  size_t length1;\n  size_t length2;\n  char *search_result1;\n  char *search_result2;\n  ulong result;\n  ulong file2_offset;\n  ulong file1_offset;\n  long file2_info;\n  bool is_match;\n  \n  file1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,file_path_1,DAT_0010b770);\n  file2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,file_path_2,DAT_0010b768);\n  if ((file1 == 0) || (file2_info = file2, file2 == 0)) {\n    file2 = bfd_fatal(*DAT_0010b780);\n  }\n  if ((*(long *)(file1 + 0x20) == 0x10c2a8) || (*(long *)(file2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  result = *(ulong *)(*(long *)(file1 + 0x20) + 0x30);\n  file_size_2 = *(ulong *)(*(long *)(file2 + 0x20) + 0x30);\n  file1_offset = *(long *)(file1 + 0x10) + result;\n  file2_offset = *(long *)(file2_info + 0x10) + file_size_2;\n  is_match = file1_offset < file2_offset;\n  if ((file1_offset != file2_offset) || (is_match = result < file_size_2, result != file_size_2)) {\n    return (ulong)(-(uint)is_match | 1);\n  }\n  string1 = *(char **)(file1 + 8);\n  string2 = *(char **)(file2_info + 8);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  search_result1 = strstr(string1,\"gnu_compiled\");\n  if (search_result1 == (char *)0x0) {\n    search_result2 = strstr(string1,\"gcc2_compiled\");\n    search_result1 = strstr(string2,\"gnu_compiled\");\n    if ((search_result1 == (char *)0x0) && (search_result1 = strstr(string2,\"gcc2_compiled\"), search_result1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (search_result2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    search_result1 = strstr(string2,\"gnu_compiled\");\n    if (search_result1 == (char *)0x0) {\n      search_result2 = strstr(string2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (search_result2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  flag = *(uint *)(file2_info + 0x18) & 0x4000;\n  if ((*(byte *)(file1 + 0x19) & 0x40) == 0) {\n    if ((length1 < 3) || (string1[length1 - 2] != '.')) {\n      if (flag != 0) {\n        return 1;\n      }\n      if ((length2 < 3) || (string2[length2 - 2] != '.')) goto LAB_00103202;\n      is_match = false;\n      goto LAB_001031e7;\n    }\n    last_char = string1[length1 - 1];\n    is_match = last_char == 'o' || last_char == 'a';\n    if (flag == 0) {\n      if ((length2 < 3) || (string2[length2 - 2] != '.')) {\n        if (last_char == 'o' || last_char == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (flag != 0) goto LAB_00103202;\n    if (length2 < 3) {\n      return 0xffffffff;\n    }\n    if (string2[length2 - 2] != '.') {\n      return 0xffffffff;\n    }\n    is_match = true;\nLAB_001031e7:\n    if ((string2[length2 - 1] != 'o') && (string2[length2 - 1] != 'a')) {\n      if (is_match) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!is_match) {\n    return 1;\n  }\nLAB_00103202:\n  result = non_numeric_forward(file_path_1,file_path_2);\n  return result;\n}\n\n",
            "current_name": "check_file_compatibility_00102fd2",
            "entrypoint": "0x00102fd2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102fd2": "check_file_compatibility_00102fd2",
                "__s": "string1",
                "__s_00": "string2",
                "bVar13": "is_match",
                "cVar1": "last_char",
                "lVar4": "file1",
                "lVar5": "file2",
                "param_1": "file_path_1",
                "param_2": "file_path_2",
                "pcVar8": "search_result1",
                "pcVar9": "search_result2",
                "sVar6": "length1",
                "sVar7": "length2",
                "uVar10": "result",
                "uVar11": "file2_offset",
                "uVar12": "file1_offset",
                "uVar2": "file_size_2",
                "uVar3": "flag",
                "unaff_R13": "file2_info"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103238": {
            "additional_data": {
                "FUN_00103238": {
                    "1": "process_sections_and_print_result",
                    "4": "find_matching_sections",
                    "6": "process_data",
                    "7": "find_matching_strings"
                },
                "__ptr": {
                    "1": "current_segment",
                    "13": "ptr",
                    "3": "section_ptr",
                    "7": "section_pointer"
                },
                "__s1": {
                    "1": "input_string",
                    "2": "current_section",
                    "3": "string1",
                    "5": "string",
                    "7": "section_name"
                },
                "_stdout": {
                    "1": "stdout"
                },
                "cVar3": {
                    "1": "temp_char",
                    "13": "result",
                    "2": "section_check"
                },
                "cVar4": {
                    "1": "char_result"
                },
                "dVar2": {
                    "1": "section_index"
                },
                "iVar3": {
                    "1": "comparison_result"
                },
                "iVar4": {
                    "1": "var4",
                    "13": "comparison_result",
                    "2": "int_var4",
                    "4": "strcmp_result"
                },
                "lVar2": {
                    "1": "symbol_address",
                    "2": "long_var2",
                    "3": "var2",
                    "4": "value"
                },
                "lVar7": {
                    "1": "loop_var",
                    "2": "loop_counter"
                },
                "param_1": {
                    "1": "param1",
                    "2": "param_array"
                },
                "param_10": {
                    "1": "param_value2",
                    "2": "section_index",
                    "3": "section_size",
                    "4": "param_10",
                    "5": "param1"
                },
                "param_12": {
                    "1": "header_ptr",
                    "2": "param12",
                    "4": "section_name",
                    "5": "param2"
                },
                "param_2": {
                    "1": "param_length",
                    "2": "param2"
                },
                "param_3": {
                    "1": "param_array_16x"
                },
                "param_4": {
                    "1": "param_value",
                    "2": "param4"
                },
                "plVar1": {
                    "1": "compare_list",
                    "2": "section_entry"
                },
                "pvVar5": {
                    "1": "malloc_result",
                    "2": "section_array"
                },
                "uVar5": {
                    "1": "counter"
                },
                "uVar6": {
                    "1": "current_index",
                    "3": "counter",
                    "6": "section_index",
                    "8": "index"
                },
                "unaff_R13": {
                    "1": "unaff_reg2",
                    "2": "section_address",
                    "3": "r13"
                },
                "unaff_RBX": {
                    "1": "ptr_rbx",
                    "2": "rbx_value",
                    "3": "section_table"
                }
            },
            "called": [
                "FUN_00102040",
                "FUN_001021e0",
                "FUN_00103c00",
                "FUN_00102400"
            ],
            "calling": [
                "FUN_00105110"
            ],
            "code": "\n\n\nvoid find_matching_strings_00103238(void)\n\n{\n  long *current_section;\n  void *ptr;\n  char *section_name;\n  long value;\n  char result;\n  int comparison_result;\n  long section_table;\n  void *section_array;\n  uint index;\n  long r13;\n  long loop_counter;\n  ulong param1;\n  void *param2;\n  \n  section_array = DAT_0010b750;\n  if (_DAT_0010b7b0 == r13) {\n    if (DAT_0010b750 != (void *)0x0) goto LAB_00103296;\n  }\n  else {\n    index = 0;\n    if (DAT_0010b750 != (void *)0x0) {\n      for (; index < DAT_0010b748; index = index + 1) {\n        ptr = *(void **)((long)section_array + (ulong)index * 8);\n        if (ptr != (void *)0x0) {\n          free(ptr);\n        }\n      }\n      free(DAT_0010b740);\n      free(section_array);\n      free(DAT_0010b738);\n      DAT_0010b740 = (void *)0x0;\n      DAT_0010b750 = (void *)0x0;\n      DAT_0010b738 = (void *)0x0;\n    }\n  }\n  DAT_0010b748 = *(uint *)(r13 + 0xa0);\n  DAT_0010b740 = (void *)xmalloc((ulong)DAT_0010b748 * 8);\n  DAT_0010b750 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n  DAT_0010b738 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n  param2 = DAT_0010b740;\n  bfd_map_over_sections();\n  _DAT_0010b7b0 = r13;\nLAB_00103296:\n  section_name = *(char **)(section_table + 8);\n  index = 0;\n  do {\n    if (DAT_0010b748 <= index) {\n      putc(10,stdout);\n      return;\n    }\n    section_array = DAT_0010b738;\n    for (loop_counter = 0; current_section = (long *)((long)section_array + (ulong)index * 8),\n        *current_section != loop_counter && loop_counter <= *current_section; loop_counter = loop_counter + 1) {\n      current_section = **(long ***)(*(long *)((long)DAT_0010b750 + (ulong)index * 8) + loop_counter * 8);\n      if ((((current_section != (long *)0x0) &&\n           (value = *current_section, *(long *)(value + 0x20) == *(long *)(section_table + 0x20))) &&\n          (*(long *)(value + 0x10) == *(long *)(section_table + 0x10))) &&\n         (((comparison_result = strcmp(section_name,*(char **)(value + 8)), comparison_result == 0 &&\n           (result = (**(code **)(*(long *)(r13 + 8) + 0x240))(), section_array = DAT_0010b738,\n           result != '\\0')) && (param2 != (void *)0x0)))) {\n        printf(\"\\t%s:%u\",param2,param1 >> 0x20);\n        index = DAT_0010b748;\n        break;\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "current_name": "find_matching_strings_00103238",
            "entrypoint": "0x00103238",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103238": "find_matching_strings_00103238",
                "__ptr": "ptr",
                "__s1": "section_name",
                "_stdout": "stdout",
                "cVar3": "result",
                "iVar4": "comparison_result",
                "lVar2": "value",
                "lVar7": "loop_counter",
                "param_1": "param_array",
                "param_10": "param1",
                "param_12": "param2",
                "plVar1": "current_section",
                "pvVar5": "section_array",
                "uVar6": "index",
                "unaff_R13": "r13",
                "unaff_RBX": "section_table"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103463": {
            "additional_data": {
                "*unaff_R12": {
                    "1": "filename"
                },
                "*unaff_R13": {
                    "1": "output_stream"
                },
                "DAT_0010b748": {
                    "1": "max_entries"
                },
                "F: 00103463": {
                    "1": "process_entries"
                },
                "FUN_00103463": {
                    "1": "process_data",
                    "2": "reverse_and_print_results",
                    "3": "reverse_and_print"
                },
                "FUN_00106530": {
                    "1": "helper_function"
                },
                "cVar3": {
                    "1": "temp_char",
                    "10": "result",
                    "2": "flag",
                    "8": "comparison_result"
                },
                "iVar4": {
                    "1": "temp_int",
                    "13": "comparison_result",
                    "2": "result",
                    "4": "string_comparison_result",
                    "6": "strcmp_result"
                },
                "in_stack_00000050": {
                    "1": "stack_parameter",
                    "15": "line_number",
                    "2": "line",
                    "3": "file_name",
                    "4": "filename"
                },
                "lVar2": {
                    "1": "var2",
                    "3": "value",
                    "4": "current_value"
                },
                "lVar5": {
                    "1": "ptr2",
                    "2": "base_addr1",
                    "4": "data_start",
                    "6": "base_address"
                },
                "lVar6": {
                    "1": "temp_long3",
                    "2": "iteration",
                    "5": "index"
                },
                "param_10": {
                    "1": "string_length",
                    "2": "param_value",
                    "3": "parameter",
                    "7": "value"
                },
                "param_8": {
                    "1": "param",
                    "2": "entry_index",
                    "5": "count",
                    "8": "index",
                    "9": "counter"
                },
                "plVar1": {
                    "1": "sub_func_result",
                    "2": "current_ptr",
                    "3": "current_entry"
                },
                "unaff_R12": {
                    "1": "search_key",
                    "3": "file_name",
                    "5": "filename",
                    "9": "input_string"
                },
                "unaff_R13": {
                    "1": "bfd_ptr",
                    "2": "file_pointer",
                    "3": "bfd_handle",
                    "4": "file_ptr",
                    "6": "output_file"
                },
                "unaff_R15": {
                    "1": "selected_data",
                    "3": "struct_ptr",
                    "7": "base_address"
                }
            },
            "called": [
                "FUN_00102240",
                "FUN_00106530",
                "FUN_00102250",
                "FUN_00102190"
            ],
            "calling": [
                "FUN_00105110"
            ],
            "code": "\n\n\nvoid reverse_and_print_00103463(void)\n\n{\n  long *current_entry;\n  long current_value;\n  char result;\n  int comparison_result;\n  long base_address;\n  char *input_string;\n  undefined8 *output_file;\n  long loop_index;\n  long base_address;\n  undefined8 counter;\n  ulong value;\n  long line_number;\n  \n  bfd_fatal(*output_file);\n  do {\n    counter._4_4_ = counter._4_4_ + 1;\n    if (DAT_0010b748 <= counter._4_4_) {\n      putc(10,_stdout);\n      return;\n    }\n    base_address = DAT_0010b738;\n    for (loop_index = 0; current_entry = (long *)(base_address + (ulong)counter._4_4_ * 8),\n        *current_entry != loop_index && loop_index <= *current_entry; loop_index = loop_index + 1) {\n      current_entry = **(long ***)(*(long *)(DAT_0010b750 + (ulong)counter._4_4_ * 8) + loop_index * 8);\n      if ((((current_entry != (long *)0x0) &&\n           (current_value = *current_entry, *(long *)(current_value + 0x20) == *(long *)(base_address + 0x20))) &&\n          (*(long *)(current_value + 0x10) == *(long *)(base_address + 0x10))) &&\n         (((comparison_result = strcmp(input_string,*(char **)(current_value + 8)), comparison_result == 0 &&\n           (result = (**(code **)(output_file[1] + 0x240))(), base_address = DAT_0010b738, result != '\\0')) &&\n          (line_number != 0)))) {\n        printf(\"\\t%s:%u\",line_number,value >> 0x20);\n        counter._4_4_ = DAT_0010b748;\n        break;\n      }\n    }\n  } while( true );\n}\n\n",
            "current_name": "reverse_and_print_00103463",
            "entrypoint": "0x00103463",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103463": "reverse_and_print_00103463",
                "cVar3": "result",
                "iVar4": "comparison_result",
                "in_stack_00000050": "line_number",
                "lVar2": "current_value",
                "lVar5": "base_address",
                "lVar6": "loop_index",
                "param_10": "value",
                "param_8": "counter",
                "plVar1": "current_entry",
                "unaff_R12": "input_string",
                "unaff_R13": "output_file",
                "unaff_R15": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010351b": {
            "additional_data": {
                "": {
                    "5": ""
                },
                "DAT_0010b818": {
                    "1": "is_initialized"
                },
                "FUN_0010351b": {
                    "1": "print_message_if_flag_set",
                    "14": "print_function_name",
                    "2": "print_or_return"
                },
                "PTR_0010b818": {
                    "1": "pointer_data"
                },
                "msgFormat": {
                    "1": "info_message_format"
                },
                "printf": {
                    "1": "display_message",
                    "3": "printf",
                    "4": "print_formatted_string",
                    "6": "print"
                },
                "return": {
                    "1": "exit"
                },
                "szFormatString": {
                    "1": "message"
                }
            },
            "called": [
                "FUN_00102190"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\nvoid print_function_name_0010351b(void)\n\n{\n  if (DAT_0010b818 == 0) {\n    print(\"\\n%s:\\n\");\n    exit;\n  }\n  exit;\n}\n\n",
            "current_name": "print_function_name_0010351b",
            "entrypoint": "0x0010351b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010351b": "print_function_name_0010351b",
                "printf": "print",
                "return": "exit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103533": {
            "additional_data": {
                "FUN_00103533": {
                    "1": "compare_parameters",
                    "12": "compare_and_execute",
                    "3": "compare_and_call",
                    "4": "compare_params",
                    "5": "compare_and_execute_function"
                },
                "param_1": {
                    "1": "input_param1",
                    "3": "array_1",
                    "4": "first_param",
                    "5": "array1",
                    "6": "input1",
                    "7": "value1"
                },
                "param_2": {
                    "1": "second_operand",
                    "3": "array_2",
                    "4": "second_param",
                    "5": "array2",
                    "6": "input2",
                    "7": "value2"
                },
                "uVar1": {
                    "23": "result",
                    "5": "return_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_00104d5b"
            ],
            "code": "\nulong compare_and_execute_00103533(undefined8 *value1,undefined8 *value2)\n\n{\n  ulong result;\n  \n  if ((ulong)value1[1] < (ulong)value2[1]) {\n    return (ulong)(-(uint)(DAT_0010b7f4 == 0) | 1);\n  }\n  if ((ulong)value2[1] < (ulong)value1[1]) {\n    return (ulong)((-(uint)(DAT_0010b7f4 == 0) & 2) - 1);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00103571. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  result = (*(code *)(&PTR_non_numeric_forward_0010acc0)[DAT_0010b7f4])(*value1,*value2);\n  return result;\n}\n\n",
            "current_name": "compare_and_execute_00103533",
            "entrypoint": "0x00103533",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103533": "compare_and_execute_00103533",
                "param_1": "value1",
                "param_2": "value2",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103573": {
            "additional_data": {
                "*param_1": {
                    "1": "input_string",
                    "2": "string1_value"
                },
                "*param_2": {
                    "1": "label",
                    "2": "string2_value"
                },
                "*param_2, param_4": {
                    "1": "formatted_string"
                },
                "*param_4": {
                    "1": "unimportant"
                },
                "FUN_00103573": {
                    "1": "print_string",
                    "19": "print_strings",
                    "2": "print_param_values"
                },
                "param_1": {
                    "1": "message1",
                    "10": "string1",
                    "2": "header",
                    "4": "label",
                    "5": "string_1"
                },
                "param_2": {
                    "1": "message2",
                    "10": "string2",
                    "2": "data",
                    "3": "message",
                    "5": "string_2"
                },
                "param_3": {
                    "1": "string_2",
                    "10": "unused_param",
                    "2": "unused_parameter",
                    "3": "param_3",
                    "6": "param3"
                },
                "param_4": {
                    "1": "str4",
                    "2": "delimiter",
                    "3": "param_4",
                    "4": "string_3",
                    "6": "param4"
                },
                "printf": {
                    "1": "print_function",
                    "2": "print"
                },
                "printf(\"%s:\",*param_1)": {
                    "1": "print_string1"
                },
                "printf(\"%s:\",*param_2,param_4)": {
                    "1": "print_string2_param4"
                }
            },
            "called": [
                "FUN_00102190"
            ],
            "calling": [
                "FUN_001053b0"
            ],
            "code": "\nvoid print_strings_00103573(undefined8 *string1,undefined8 *string2,undefined8 unused_param,undefined8 param4)\n\n{\n  if (string1 != (undefined8 *)0x0) {\n    print(\"%s:\",*string1);\n  }\n  print(\"%s:\",*string2,param4);\n  return;\n}\n\n",
            "current_name": "print_strings_00103573",
            "entrypoint": "0x00103573",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103573": "print_strings_00103573",
                "param_1": "string1",
                "param_2": "string2",
                "param_3": "unused_param",
                "param_4": "param4",
                "printf": "print"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001035a2": {
            "additional_data": {
                "&DAT_0010712c": {
                    "1": "symbol_name1",
                    "2": "symbol_name"
                },
                "&DAT_0010b238": {
                    "1": "format_string1",
                    "2": "format_1"
                },
                "&DAT_0010b23d": {
                    "1": "format_short",
                    "2": "format_2"
                },
                "(ulong)(uint)(int)*(char *)(*unaff_RBX + 8)": {
                    "1": "character"
                },
                "*(char *)(*unaff_RBX + 0x19)": {
                    "1": "char_value_2"
                },
                "*(char *)(*unaff_RBX + 8)": {
                    "1": "char_value_1"
                },
                "*(long *)(unaff_RBX[2] + 0x38)": {
                    "1": "symbol_value"
                },
                "*(short *)(*unaff_RBX + 0x1a)": {
                    "1": "short_value"
                },
                "*(undefined8 *)(*unaff_RBX + 0x20)": {
                    "1": "args[0][0x20]",
                    "2": "string_value"
                },
                "*unaff_RBX": {
                    "1": "pointer",
                    "2": "array_ptr_value"
                },
                "*unaff_RBX + 0x19": {
                    "1": "char_value_2"
                },
                "*unaff_RBX + 0x1a": {
                    "1": "short_value"
                },
                "*unaff_RBX + 0x20": {
                    "1": "string_value"
                },
                "*unaff_RBX + 8": {
                    "1": "char_value_1"
                },
                "DAT_0010712c": {
                    "1": "symbol_name",
                    "6": "symbol_name_1"
                },
                "DAT_0010b238": {
                    "1": "dash_format",
                    "3": "format_string_1",
                    "6": "format_1"
                },
                "DAT_0010b23d": {
                    "1": "short_format",
                    "3": "format_string_2",
                    "6": "format_2"
                },
                "FUN_001035a2": {
                    "1": "process_data",
                    "2": "print_formatted_output",
                    "3": "print_symbol_information",
                    "6": "print_symbol_info"
                },
                "FUN_00104740": {
                    "1": "print_value"
                },
                "FUN_001054d0": {
                    "1": "reverse_something"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "PTR_param_1": {
                    "1": "ptr_value_1"
                },
                "PTR_param_2": {
                    "1": "ptr_value_2"
                },
                "PTR_param_3": {
                    "1": "ptr_value_3"
                },
                "PTR_print_symname": {
                    "1": "print_symbol_name"
                },
                "PUTCHAR": {
                    "1": "print"
                },
                "char": {
                    "1": "character"
                },
                "char *param_1": {
                    "1": "string"
                },
                "int": {
                    "1": "integer"
                },
                "lVar1": {
                    "1": "value_to_print",
                    "17": "value",
                    "3": "symbol_address",
                    "4": "address"
                },
                "long *param_2": {
                    "1": "array_pointer"
                },
                "long param_4": {
                    "1": "value"
                },
                "param_1": {
                    "1": "data",
                    "2": "symbol_name"
                },
                "param_2": {
                    "1": "array_pointer",
                    "2": "long_array"
                },
                "param_3": {
                    "1": "ptr_array"
                },
                "param_4": {
                    "1": "value_4",
                    "2": "symbol_offset"
                },
                "print_symname": {
                    "1": "print_symbol",
                    "15": "print_symbol_name"
                },
                "print_value_constprop_0": {
                    "1": "print_symbol_value",
                    "17": "print_value"
                },
                "printf": {
                    "1": "print_formatted_output",
                    "12": "print_formatted",
                    "3": "print_formatted_string"
                },
                "putchar": {
                    "1": "put_character",
                    "14": "print_character",
                    "2": "print_char"
                },
                "short": {
                    "1": "short_integer"
                },
                "uint": {
                    "1": "unsigned_integer"
                },
                "ulong": {
                    "1": "unsigned_long"
                },
                "unaff_RBX": {
                    "1": "symbol_information",
                    "3": "array_ptr",
                    "4": "rbx",
                    "6": "symbol_info"
                },
                "undefined8": {
                    "1": "value_5"
                },
                "undefined8 *param_3": {
                    "1": "pointer"
                },
                "undefined8_1": {
                    "1": "value_6"
                },
                "undefined8_2": {
                    "1": "value_7"
                },
                "undefined8_3": {
                    "1": "value_8"
                },
                "undefined8_4": {
                    "1": "value_9"
                }
            },
            "called": [
                "FUN_00102050",
                "FUN_00104740",
                "FUN_001054d0",
                "FUN_00102190"
            ],
            "calling": [
                "FUN_001053c0"
            ],
            "code": "\nvoid print_symbol_info_001035a2(void)\n\n{\n  long *symbol_info;\n  long value;\n  \n  if (symbol_info[2] == 0) {\n    value = symbol_info[1];\n  }\n  else {\n    value = *(long *)(symbol_info[2] + 0x38);\n  }\n  if (value != 0) {\n    print_character(0x20);\n    if (symbol_info[2] == 0) {\n      value = symbol_info[1];\n    }\n    else {\n      value = *(long *)(symbol_info[2] + 0x38);\n    }\n    print_value(value);\n  }\n  print_formatted(\" %c\",(unsigned_long)(unsigned_integer)(integer)*(character *)(*symbol_info + 8));\n  if (*(character *)(*symbol_info + 8) != '-') {\n    print_symbol_name(&DAT_0010712c);\n    return;\n  }\n  print_character(0x20);\n  print_formatted(&DAT_0010b238,(unsigned_long)(unsigned_integer)(integer)*(character *)(*symbol_info + 0x19));\n  print_character(0x20);\n  print_formatted(&DAT_0010b23d,(unsigned_long)(unsigned_integer)(integer)*(short_integer *)(*symbol_info + 0x1a));\n  print_formatted(\" %5s\",*(value_5 *)(*symbol_info + 0x20));\n  print_symbol_name(&DAT_0010712c);\n  return;\n}\n\n",
            "current_name": "print_symbol_info_001035a2",
            "entrypoint": "0x001035a2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001035a2": "print_symbol_info_001035a2",
                "char": "character",
                "int": "integer",
                "lVar1": "value",
                "print_symname": "print_symbol_name",
                "print_value_constprop_0": "print_value",
                "printf": "print_formatted",
                "putchar": "print_character",
                "short": "short_integer",
                "uint": "unsigned_integer",
                "ulong": "unsigned_long",
                "unaff_RBX": "symbol_info",
                "undefined8": "value_5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001036a7": {
            "additional_data": {
                "*param_1": {
                    "1": "ptr_string1",
                    "2": "message1_ptr"
                },
                "*param_2": {
                    "1": "value2",
                    "2": "message2_ptr"
                },
                "DAT_0010b818": {
                    "1": "condition_check"
                },
                "FUN_001036a7": {
                    "1": "print_information",
                    "10": "print_data",
                    "2": "print_param",
                    "3": "print_message",
                    "6": "print_strings"
                },
                "param_1": {
                    "1": "message_header",
                    "2": "data1",
                    "6": "string1",
                    "7": "message1"
                },
                "param_2": {
                    "1": "data",
                    "2": "data2",
                    "6": "string2",
                    "7": "message2"
                },
                "param_3": {
                    "1": "name_3",
                    "13": "unused_param",
                    "2": "unused_param_1",
                    "5": "param_3",
                    "6": "param3"
                },
                "param_4": {
                    "1": "unused_param_alt",
                    "2": "string3",
                    "3": "unused_param_2",
                    "5": "param_4",
                    "9": "param4"
                },
                "printf": {
                    "1": "print",
                    "3": "print_formatted"
                }
            },
            "called": [
                "FUN_00102190"
            ],
            "calling": [],
            "code": "\nvoid print_data_001036a7(undefined8 *message1,undefined8 *message2,undefined8 unused_param,undefined8 param4)\n\n{\n  if (DAT_0010b818 != 0) {\n    if (message1 != (undefined8 *)0x0) {\n      print_formatted(\"%s:\",*message1);\n    }\n    print_formatted(\"%s:\",*message2,param4);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "print_data_001036a7",
            "entrypoint": "0x001036a7",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001036a7": "print_data_001036a7",
                "param_1": "message1",
                "param_2": "message2",
                "param_3": "unused_param",
                "param_4": "param4",
                "printf": "print_formatted"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001036e0": {
            "additional_data": {
                "*param_1": {
                    "1": "formatted_prefix"
                },
                "*param_2": {
                    "1": "message_value"
                },
                "FUN_001036e0": {
                    "1": "print_prompt",
                    "2": "print_log_message",
                    "22": "print_message",
                    "3": "print_formatted_message"
                },
                "param_1": {
                    "1": "message_header",
                    "2": "message1",
                    "4": "prefix",
                    "6": "header"
                },
                "param_2": {
                    "1": "message_ptr",
                    "14": "message",
                    "2": "default_name"
                }
            },
            "called": [
                "FUN_00102190"
            ],
            "calling": [
                "FUN_001064a0"
            ],
            "code": "\nvoid print_message_001036e0(undefined8 *header,undefined8 *message)\n\n{\n  if (header != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*header);\n    return;\n  }\n  printf(\"%s: \",*message);\n  return;\n}\n\n",
            "current_name": "print_message_001036e0",
            "entrypoint": "0x001036e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001036e0": "print_message_001036e0",
                "param_1": "header",
                "param_2": "message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010370a": {
            "additional_data": {
                "*plVar4": {
                    "1": "error_message"
                },
                "COMMON": {
                    "1": "0x5"
                },
                "DAT_0010b7a8": {
                    "1": "print_width"
                },
                "FILE": {
                    "1": "0x4"
                },
                "FUNC": {
                    "1": "0x2"
                },
                "FUN_0010370a": {
                    "1": "print_sym_information",
                    "2": "print_symbol",
                    "3": "print_syminfo",
                    "5": "print_sym_info",
                    "7": "print_symbol_info"
                },
                "NOTYPE": {
                    "1": "0x0"
                },
                "OBJECT": {
                    "1": "0x1"
                },
                "SECTION": {
                    "1": "0x3"
                },
                "TLS": {
                    "1": "0x6"
                },
                "UNDEFINED_SYMBOL_CLASS": {
                    "1": "0x20"
                },
                "__errno_location": {
                    "1": "get_errno_location"
                },
                "asprintf": {
                    "1": "allocate_string"
                },
                "bVar8": {
                    "1": "type_byte",
                    "2": "sym_type",
                    "3": "type",
                    "5": "byte_value"
                },
                "bfd_is_undefined_symclass": {
                    "1": "is_symbol_class_undefined",
                    "2": "is_undefined_symclass"
                },
                "cVar1": {
                    "1": "is_undefined_symclass_result",
                    "10": "is_undefined_symclass",
                    "15": "is_undefined",
                    "2": "is_undefined_symbol_class"
                },
                "cVar10": {
                    "1": "symbol_class"
                },
                "dcgettext": {
                    "1": "get_print_width_error_message"
                },
                "fatal": {
                    "1": "handle_fatal_error",
                    "2": "print_fatal_error"
                },
                "free": {
                    "1": "deallocate_memory",
                    "2": "free_memory"
                },
                "iVar3": {
                    "1": "format_return_value",
                    "19": "asprintf_result",
                    "2": "status"
                },
                "lVar7": {
                    "1": "line_block",
                    "2": "symbol_info"
                },
                "param_1": {
                    "1": "format_string",
                    "2": "param1"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "param2"
                },
                "param_3": {
                    "1": "param_3",
                    "2": "param3"
                },
                "param_4": {
                    "1": "param_4",
                    "2": "param4"
                },
                "pcVar10": {
                    "1": "sym_class_description",
                    "11": "symbol_type",
                    "2": "sym_class_name",
                    "3": "symbol_class"
                },
                "piVar5": {
                    "1": "error_num",
                    "14": "errno_location",
                    "3": "errno_ptr"
                },
                "plVar4": {
                    "1": "print_width_error",
                    "14": "print_width",
                    "5": "error_message"
                },
                "print_symname": {
                    "1": "print_symname"
                },
                "print_value_constprop_0": {
                    "1": "print_constprop_value",
                    "2": "print_const_value"
                },
                "printf": {
                    "1": "print_output",
                    "2": "print_formatted"
                },
                "switch": {
                    "1": "type_switch"
                },
                "uVar2": {
                    "1": "flags",
                    "2": "sym_class",
                    "3": "symclass"
                },
                "uVar6": {
                    "1": "strerror_result",
                    "2": "error_msg",
                    "4": "error_string",
                    "5": "xstrerror_result"
                },
                "uVar9": {
                    "1": "trimmed_rbx",
                    "2": "rbx_value",
                    "8": "masked_rbx"
                },
                "unaff_RBX": {
                    "1": "flags",
                    "2": "rbx",
                    "6": "rbx_value"
                },
                "void FUN_00106300": {
                    "1": "print_value_constprop_0"
                },
                "xstrerror": {
                    "2": "get_error_string"
                }
            },
            "called": [
                "FUN_00106300",
                "FUN_00102150"
            ],
            "calling": [
                "FUN_001054d0"
            ],
            "code": "\nvoid print_symbol_info_0010370a(void)\n\n{\n  char is_undefined;\n  ushort symclass;\n  int asprintf_result;\n  long *print_width;\n  int *errno_location;\n  undefined8 xstrerror_result;\n  long value;\n  ulong rbx_value;\n  byte byte_value;\n  ulong masked_rbx;\n  char *symbol_type;\n  \n  print_width = (long *)get_locale_text(0,\"Print width has not been initialized (%d)\",5);\n  masked_rbx = rbx_value & 0xffffffff;\n  print_fatal_error(print_width,masked_rbx);\n  print_symname(\"%-20s|\",print_width,0,masked_rbx);\n  is_undefined = is_undefined_symclass((int)*(char *)(*print_width + 8));\n  if (is_undefined == '\\0') {\n    print_const_value(*(undefined8 *)*print_width);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    print_formatted(\"        \");\n  }\n  else {\n    print_formatted(\"                \");\n  }\n  print_formatted(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*print_width + 8));\n  if (*(char *)(*print_width + 8) == '-') {\n    print_formatted(\"%18s|  \",*(undefined8 *)(*print_width + 0x20));\n    print_formatted(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*print_width + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (print_width[2] == 0) {\n    if (print_width[3] != 0) {\n      value = *(long *)(print_width[3] + 0x30);\n      is_undefined = *(char *)(value + 0x28);\n      if (is_undefined == 'g') goto LAB_00103983;\n      if (is_undefined == 'h') {\n        symbol_type = \"Line\";\n      }\n      else if (is_undefined == 'd') {\n        symbol_type = \"Block\";\n      }\n      else if (*(ushort *)(value + 0x26) == 0) {\n        symbol_type = \"None\";\n      }\n      else {\n        symclass = *(ushort *)(value + 0x26) >> 4 & 3;\n        if (symclass == 2) {\n          symbol_type = \"Function\";\n        }\n        else if (symclass == 3) {\n          symbol_type = \"Array\";\n        }\n        else {\n          if (symclass != 1) {\n            free_memory(DAT_0010b730);\n            symclass = *(ushort *)(value + 0x26);\n            byte_value = *(byte *)(value + 0x28);\n            symbol_type = (char *)get_locale_text(0,\"<unknown>: %d/%d\",5);\n            asprintf_result = allocate_string(&DAT_0010b730,symbol_type,(ulong)byte_value,(ulong)symclass);\n            symbol_type = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          symbol_type = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    print_formatted(\"                  |\");\n  }\n  else {\n    byte_value = *(byte *)(print_width[2] + 0x48) & 0xf;\n    type_switch(byte_value) {\n    case 0:\n      symbol_type = \"NOTYPE\";\n      break;\n    case 1:\n      symbol_type = \"OBJECT\";\n      break;\n    case 2:\n      symbol_type = \"FUNC\";\n      break;\n    case 3:\n      symbol_type = \"SECTION\";\n      break;\n    case 4:\n      symbol_type = \"FILE\";\n      break;\n    case 5:\n      symbol_type = \"COMMON\";\n      break;\n    case 6:\n      symbol_type = \"TLS\";\n      break;\n    default:\n      free_memory(DAT_0010b728);\n      symbol_type = \"<processor specific>: %d\";\n      if ((2 < byte_value - 0xd) && (symbol_type = \"<OS specific>: %d\", 2 < byte_value - 10)) {\n        symbol_type = \"<unknown>: %d\";\n      }\n      symbol_type = (char *)get_locale_text(0,symbol_type,5);\n      asprintf_result = allocate_string(&DAT_0010b728,symbol_type,(ulong)byte_value);\n      symbol_type = DAT_0010b728;\njoined_r0x00103964:\n      if (asprintf_result < 0) {\n        errno_location = get_errno_location();\n        xstrerror_result = get_error_string(*errno_location);\n        print_fatal_error(&DAT_0010712d,xstrerror_result);\nLAB_00103983:\n        symbol_type = \"File\";\n      }\n    }\nLAB_001039c0:\n    print_formatted(\"%18s|\",symbol_type);\n  }\n  if (print_width[2] == 0) {\n    if (print_width[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      print_formatted(\"        \");\n    }\n    else {\n      print_formatted(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(print_width[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    print_const_value();\n  }\n  value = print_width[2];\n  if ((value != 0) || (value = print_width[3], value != 0)) {\n    print_formatted(\"|     |%s\",**(undefined8 **)(value + 0x20));\n    return;\n  }\nLAB_00103a54:\n  print_formatted(\"|     |\");\n  return;\n}\n\n",
            "current_name": "print_symbol_info_0010370a",
            "entrypoint": "0x0010370a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010370a": "print_symbol_info_0010370a",
                "__errno_location": "get_errno_location",
                "asprintf": "allocate_string",
                "bVar8": "byte_value",
                "bfd_is_undefined_symclass": "is_undefined_symclass",
                "cVar1": "is_undefined",
                "cVar10": "symbol_class",
                "dcgettext": "get_locale_text",
                "fatal": "print_fatal_error",
                "free": "free_memory",
                "iVar3": "asprintf_result",
                "lVar7": "value",
                "pcVar10": "symbol_type",
                "piVar5": "errno_location",
                "plVar4": "print_width",
                "print_value_constprop_0": "print_const_value",
                "printf": "print_formatted",
                "switch": "type_switch",
                "uVar2": "symclass",
                "uVar6": "xstrerror_result",
                "uVar9": "masked_rbx",
                "unaff_RBX": "rbx_value",
                "xstrerror": "get_error_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103729": {
            "additional_data": {
                "*(byte *)(lVar6 + 0x28)": {
                    "1": "symbol_binding"
                },
                "*(byte *)(param_1[2] + 0x48) & 0xf": {
                    "1": "symbol_section_index"
                },
                "*(long *)(param_1[1] + 0x20)": {
                    "1": "value_ptr_section_2"
                },
                "*(long *)(param_1[2] + 0x38)": {
                    "1": "value_ptr_section_1"
                },
                "*(ushort *)(lVar6 + 0x26)": {
                    "1": "type_data_short"
                },
                "*(ushort *)(lVar6 + 0x26) == 0": {
                    "1": "is_none_symbol"
                },
                "*(ushort *)(lVar6 + 0x26) >> 4 & 3": {
                    "1": "symbol_subtype"
                },
                "*param_1": {
                    "1": "symbol_info"
                },
                "*pcVar8": {
                    "1": "type_string"
                },
                "*piVar4": {
                    "1": "errno_location"
                },
                "DAT_0010712d": {
                    "2": "error_message"
                },
                "DAT_0010b23d": {
                    "1": "const_string",
                    "3": "format_string"
                },
                "DAT_0010b728": {
                    "1": "sprintf_string_2"
                },
                "DAT_0010b730": {
                    "1": "sprintf_string"
                },
                "DAT_0010b7a8": {
                    "1": "symbol_class_constant"
                },
                "FUN_00103729": {
                    "11": "print_symbol_information",
                    "18": "print_symbol_info",
                    "2": "print_sym_info"
                },
                "LAB_00103983": {
                    "1": "handle_file_symbol"
                },
                "LAB_00103a54": {
                    "1": "end_of_function"
                },
                "__errno_location": {
                    "1": "get_errno_location"
                },
                "__errno_location()": {
                    "1": "errno_ptr"
                },
                "asprintf": {
                    "1": "allocate_sprintf"
                },
                "asprintf(&DAT_0010b728,pcVar8,(ulong)bVar7);": {
                    "1": "generate_error_message"
                },
                "asprintf(&DAT_0010b730,pcVar8,(ulong)bVar7,(ulong)uVar2);": {
                    "1": "generate_error_message"
                },
                "bVar7": {
                    "1": "type_code",
                    "2": "section_type",
                    "3": "type",
                    "4": "byte_value"
                },
                "bfd_is_undefined_symclass": {
                    "1": "is_undefined_symbol_class",
                    "2": "is_undefined_symclass"
                },
                "cVar1": {
                    "1": "is_defined",
                    "2": "is_undefined_class",
                    "22": "is_undefined",
                    "6": "is_undefined_symclass"
                },
                "dcgettext": {
                    "1": "get_text"
                },
                "fatal": {
                    "1": "fatal_error"
                },
                "free": {
                    "1": "free_memory"
                },
                "free(DAT_0010b728)": {
                    "1": "free_unknown_string_2"
                },
                "free(DAT_0010b730)": {
                    "1": "free(type_str_ptr)"
                },
                "goto LAB_00103a54": {
                    "1": "jump_to_end"
                },
                "goto joined_r0x00103964": {
                    "1": "jump_to_joined"
                },
                "iVar3": {
                    "1": "index",
                    "15": "asprintf_result",
                    "2": "length",
                    "6": "result"
                },
                "if (*(char *)(*param_1 + 8) == '-')": {
                    "1": "if_symbol_undefined()"
                },
                "if (*(char *)(lVar6 + 0x28) == 'g')": {
                    "1": "if_data_value_is_global()"
                },
                "if (*(char *)(lVar6 + 0x28) == 'h')": {
                    "1": "if_data_value_is_hidden()"
                },
                "if (*(ushort *)(lVar6 + 0x26) == 0)": {
                    "1": "if_short_type_data_is_zero()"
                },
                "if (DAT_0010b7a8 == 0x20)": {
                    "1": "if_constant_32_is_0x20()"
                },
                "if (param_1[1] != 0)": {
                    "1": "if_param_1_val_is_not_null()"
                },
                "if (param_1[2] == 0)": {
                    "1": "if_type_ptr_is_null()"
                },
                "if (param_1[3] != 0)": {
                    "1": "if_type_data_ptr_is_not_null()"
                },
                "if (uVar2 == 2)": {
                    "1": "if_data_type_is_function()"
                },
                "if (uVar2 == 3)": {
                    "1": "if_data_type_is_array()"
                },
                "joined_r0x00103964": {
                    "1": "joined_result"
                },
                "lVar6": {
                    "1": "temp_addr",
                    "2": "info_value",
                    "3": "symbol_info"
                },
                "lVar6 + 0x28": {
                    "1": "type_data_value"
                },
                "param_1": {
                    "1": "symbol_pointer",
                    "11": "symbol_info",
                    "2": "symbols",
                    "3": "symbol_ptr",
                    "7": "symbol"
                },
                "param_1[2]": {
                    "1": "type_ptr"
                },
                "param_1[2] == 0": {
                    "1": "is_external_symbol"
                },
                "param_1[3]": {
                    "1": "param_1_3"
                },
                "param_1[3] != 0": {
                    "1": "has_debug_info"
                },
                "param_1[3] + 0x30": {
                    "1": "type_data"
                },
                "param_2": {
                    "1": "arg",
                    "13": "param",
                    "2": "value",
                    "4": "param_value"
                },
                "param_3": {
                    "1": "symbol_name"
                },
                "param_4": {
                    "1": "size"
                },
                "pcVar8": {
                    "1": "symclass_string",
                    "2": "symbol_class",
                    "3": "type_str",
                    "7": "type_string"
                },
                "pcVar8 = (char *)dcgettext(0,: <unknown>: %d/%d: ,5)": {
                    "1": "get_dcgettext_result"
                },
                "pcVar8 = (char *)dcgettext(0,: <unknown>: %d/%d: ,5);": {
                    "1": "unknown_symbol_info"
                },
                "pcVar8 = (char *)dcgettext(0,pcVar8,5)": {
                    "1": "get_dcgettext_result_2"
                },
                "pcVar8 = : <OS specific>: %d: ;": {
                    "1": "symbol_info_os_specific"
                },
                "pcVar8 = : <processor specific>: %d: ;": {
                    "1": "symbol_info_processor_specific"
                },
                "pcVar8 = : <unknown>: %d: ;": {
                    "1": "symbol_info_unknown"
                },
                "pcVar8 = : Array: ;": {
                    "1": "symbol_info_array"
                },
                "pcVar8 = : Block: ;": {
                    "1": "symbol_info_block"
                },
                "pcVar8 = : COMMON: ;": {
                    "1": "symbol_info_common"
                },
                "pcVar8 = : FILE: ;": {
                    "1": "symbol_info_file"
                },
                "pcVar8 = : FUNC: ;": {
                    "1": "symbol_info_function"
                },
                "pcVar8 = : Function: ;": {
                    "1": "symbol_info_function"
                },
                "pcVar8 = : Line: ;": {
                    "1": "symbol_info_line"
                },
                "pcVar8 = : NOTYPE: ;": {
                    "1": "symbol_info_notype"
                },
                "pcVar8 = : OBJECT: ;": {
                    "1": "symbol_info_object"
                },
                "pcVar8 = : Pointer: ;": {
                    "1": "symbol_info_pointer"
                },
                "pcVar8 = : SECTION: ;": {
                    "1": "symbol_info_section"
                },
                "pcVar8 = : TLS: ;": {
                    "1": "symbol_info_tls"
                },
                "piVar4": {
                    "1": "errno",
                    "12": "errno_location",
                    "2": "errno_loc",
                    "3": "error",
                    "4": "errno_ptr"
                },
                "print(\"                \")": {
                    "1": "print_long_spaces()"
                },
                "print(\"        \")": {
                    "1": "print_spaces()"
                },
                "print(\"%c  |\")": {
                    "1": "print_class_char()"
                },
                "print_symname": {
                    "7": "print_symbol_name"
                },
                "print_value_constprop_0": {
                    "1": "print_constant_value",
                    "2": "print_value"
                },
                "print_value_constprop_0();": {
                    "1": "print_value();"
                },
                "print_value_constprop_0_2": {
                    "1": "print_constant_property_value"
                },
                "print_value_constprop_0_3": {
                    "1": "print_constant_property_value"
                },
                "printf": {
                    "1": "print_formatted_text",
                    "3": "print"
                },
                "printf(\"                  \")": {
                    "1": "print_extra_spaces()"
                },
                "printf(\"                \")": {
                    "1": "print_long_spaces()"
                },
                "printf(\"                \");": {
                    "1": "print_long_spaces();"
                },
                "printf(\"        \")": {
                    "1": "print_spaces()"
                },
                "printf(\"        \");": {
                    "1": "print_spaces();"
                },
                "printf(\"%-20s|\")": {
                    "1": "print_formatted_symbol_name()"
                },
                "printf(\"%18s|  \",*(undefined8 *)(*param_1 + 0x20))": {
                    "1": "print_symbol_value()"
                },
                "printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*param_1 + 0x1a))": {
                    "1": "print_class_name()"
                },
                "printf_2": {
                    "1": "print_formatted_output"
                },
                "printf_3": {
                    "1": "print_3"
                },
                "printf_4": {
                    "1": "print_formatted_output"
                },
                "uVar2": {
                    "1": "class_val",
                    "2": "symclass_value",
                    "3": "symbol_type",
                    "4": "class_value",
                    "5": "symclass"
                },
                "uVar2 == 2": {
                    "1": "is_function_symbol"
                },
                "uVar2 == 3": {
                    "1": "is_array_symbol"
                },
                "uVar5": {
                    "1": "errno_str",
                    "2": "error_msg",
                    "3": "xstrerror_result",
                    "6": "strerror_result",
                    "8": "error_string",
                    "9": "error_message"
                },
                "xstrerror": {
                    "1": "get_strerror"
                }
            },
            "called": [
                "FUN_00102040",
                "FUN_00102330",
                "FUN_00106300",
                "FUN_001022e0",
                "FUN_00102080",
                "FUN_00104740",
                "FUN_001020f0",
                "FUN_001054d0",
                "FUN_00102150",
                "FUN_00102190"
            ],
            "calling": [],
            "code": "\nvoid print_symbol_info_00103729(long *symbol_info,undefined8 param)\n\n{\n  char is_undefined;\n  ushort symclass;\n  int asprintf_result;\n  int *errno_location;\n  undefined8 error_message;\n  long symbol_info;\n  byte byte_value;\n  char *type_string;\n  \n  print_symbol_name(\"%-20s|\",symbol_info,0,param);\n  is_undefined = is_undefined_symclass((int)*(char *)(*symbol_info + 8));\n  if (is_undefined == '\\0') {\n    print_value(*(undefined8 *)*symbol_info);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    print(\"        \");\n  }\n  else {\n    print(\"                \");\n  }\n  print(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbol_info + 8));\n  if (*(char *)(*symbol_info + 8) == '-') {\n    print(\"%18s|  \",*(undefined8 *)(*symbol_info + 0x20));\n    print(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbol_info + 0x1a));\n    goto end_of_function;\n  }\n  if (type_ptr == 0) {\n    if (type_data_ptr != 0) {\n      symbol_info = *(long *)(type_data_ptr + 0x30);\n      is_undefined = *(char *)(symbol_info + 0x28);\n      if (is_undefined == 'g') goto handle_file_symbol;\n      if (is_undefined == 'h') {\n        type_string = \"Line\";\n      }\n      else if (is_undefined == 'd') {\n        type_string = \"Block\";\n      }\n      else if (*(ushort *)(symbol_info + 0x26) == 0) {\n        type_string = \"None\";\n      }\n      else {\n        symclass = *(ushort *)(symbol_info + 0x26) >> 4 & 3;\n        if (symclass == 2) {\n          type_string = \"Function\";\n        }\n        else if (symclass == 3) {\n          type_string = \"Array\";\n        }\n        else {\n          if (symclass != 1) {\n            free_memory(DAT_0010b730);\n            symclass = *(ushort *)(symbol_info + 0x26);\n            byte_value = *(byte *)(symbol_info + 0x28);\n            type_string = (char *)get_text(0,\"<unknown>: %d/%d\",5);\n            asprintf_result = allocate_sprintf(&DAT_0010b730,type_string,(ulong)byte_value,(ulong)symclass);\n            type_string = DAT_0010b730;\n            goto joined_result;\n          }\n          type_string = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    print(\"                  |\");\n  }\n  else {\n    byte_value = *(byte *)(type_ptr + 0x48) & 0xf;\n    switch(byte_value) {\n    case 0:\n      type_string = \"NOTYPE\";\n      break;\n    case 1:\n      type_string = \"OBJECT\";\n      break;\n    case 2:\n      type_string = \"FUNC\";\n      break;\n    case 3:\n      type_string = \"SECTION\";\n      break;\n    case 4:\n      type_string = \"FILE\";\n      break;\n    case 5:\n      type_string = \"COMMON\";\n      break;\n    case 6:\n      type_string = \"TLS\";\n      break;\n    default:\n      free_memory(DAT_0010b728);\n      type_string = \"<processor specific>: %d\";\n      if ((2 < byte_value - 0xd) && (type_string = \"<OS specific>: %d\", 2 < byte_value - 10)) {\n        type_string = \"<unknown>: %d\";\n      }\n      type_string = (char *)get_text(0,type_string,5);\n      asprintf_result = allocate_sprintf(&DAT_0010b728,type_string,(ulong)byte_value);\n      type_string = DAT_0010b728;\njoined_result:\n      if (asprintf_result < 0) {\n        errno_location = errno_ptr;\n        error_message = get_strerror(*errno_location);\n        fatal_error(&DAT_0010712d,error_message);\nhandle_file_symbol:\n        type_string = \"File\";\n      }\n    }\nLAB_001039c0:\n    print(\"%18s|\",type_string);\n  }\n  if (type_ptr == 0) {\n    if (symbol_info[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      print(\"        \");\n    }\n    else {\n      print(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(type_ptr + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    print_value();\n  }\n  symbol_info = type_ptr;\n  if ((symbol_info != 0) || (symbol_info = type_data_ptr, symbol_info != 0)) {\n    print(\"|     |%s\",**(undefined8 **)(symbol_info + 0x20));\n    return;\n  }\nend_of_function:\n  print(\"|     |\");\n  return;\n}\n\n",
            "current_name": "print_symbol_info_00103729",
            "entrypoint": "0x00103729",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103729": "print_symbol_info_00103729",
                "LAB_00103983": "handle_file_symbol",
                "LAB_00103a54": "end_of_function",
                "__errno_location": "get_errno_location",
                "__errno_location()": "errno_ptr",
                "asprintf": "allocate_sprintf",
                "bVar7": "byte_value",
                "bfd_is_undefined_symclass": "is_undefined_symclass",
                "cVar1": "is_undefined",
                "dcgettext": "get_text",
                "fatal": "fatal_error",
                "free": "free_memory",
                "iVar3": "asprintf_result",
                "joined_r0x00103964": "joined_result",
                "lVar6": "symbol_info",
                "param_1": "symbol_info",
                "param_1[2]": "type_ptr",
                "param_1[3]": "type_data_ptr",
                "param_2": "param",
                "pcVar8": "type_string",
                "piVar4": "errno_location",
                "print_symname": "print_symbol_name",
                "print_value_constprop_0": "print_value",
                "print_value_constprop_0();": "print_value();",
                "printf": "print",
                "uVar2": "symclass",
                "uVar5": "error_message",
                "xstrerror": "get_strerror"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103a66": {
            "additional_data": {
                "FUN_00103a66": {
                    "1": "check_if_value_printed",
                    "2": "check_if_value_exists",
                    "20": "check_and_print_value",
                    "3": "check_value_and_print"
                },
                "print_value_0010651a": {
                    "7": "print_value"
                },
                "unaff_RBX": {
                    "1": "input_ptr",
                    "15": "base_address",
                    "2": "value_ptr",
                    "3": "pointer",
                    "6": "rbx"
                }
            },
            "called": [
                "FUN_0010651a"
            ],
            "calling": [
                "FUN_001064b0"
            ],
            "code": "\nvoid check_and_print_value_00103a66(void)\n\n{\n  long base_address;\n  \n  if (*(long *)(base_address + 8) != 0) {\n    print_value();\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "check_and_print_value_00103a66",
            "entrypoint": "0x00103a66",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103a66": "check_and_print_value_00103a66",
                "print_value_0010651a": "print_value",
                "unaff_RBX": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103a78": {
            "additional_data": {
                "FUN_00103a78": {
                    "1": "display_error_message",
                    "24": "print_error_message",
                    "3": "print_error_info"
                },
                "uVar1": {
                    "1": "error_details",
                    "22": "error_message"
                },
                "unaff_RBX": {
                    "1": "error_cause",
                    "19": "error_code",
                    "2": "error_type",
                    "3": "error_status",
                    "4": "error_flag"
                },
                "unaff_retaddr": {
                    "1": "address",
                    "30": "return_address"
                }
            },
            "called": [
                "FUN_00102150"
            ],
            "calling": [
                "FUN_00106540"
            ],
            "code": "\n\n\nvoid print_error_message_00103a78(void)\n\n{\n  undefined8 error_message;\n  long error_code;\n  undefined8 return_address;\n  \n  error_message = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (error_code != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010b820);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010b820,error_message,return_address);\n  return;\n}\n\n",
            "current_name": "print_error_message_00103a78",
            "entrypoint": "0x00103a78",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103a78": "print_error_message_00103a78",
                "uVar1": "error_message",
                "unaff_RBX": "error_code",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103ab9": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_00103ab9(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103ab9",
            "entrypoint": "0x00103ab9",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103ab9": "FUNC_00103ab9"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103aba": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_00103aba(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103aba",
            "entrypoint": "0x00103aba",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103aba": "FUNC_00103aba"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103abb": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_00103abb(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103abb",
            "entrypoint": "0x00103abb",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103abb": "FUNC_00103abb"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103abc": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_00103abc(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103abc",
            "entrypoint": "0x00103abc",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103abc": "FUNC_00103abc"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103abd": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_00103abd(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103abd",
            "entrypoint": "0x00103abd",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103abd": "FUNC_00103abd"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103abe": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_00103abe(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103abe",
            "entrypoint": "0x00103abe",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103abe": "FUNC_00103abe"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103abf": {
            "additional_data": {
                "FUN_00103abf": {
                    "1": "print_symbol_report",
                    "3": "print_symbols",
                    "5": "print_symbol_information",
                    "6": "print_symbol_table",
                    "7": "print_undefined_symbols",
                    "9": "print_symbol_info"
                },
                "dcgettext": {
                    "1": "translate_message",
                    "2": "get_translated_string"
                },
                "param_1": {
                    "1": "filename",
                    "2": "library_name",
                    "3": "binary_name",
                    "5": "program_name",
                    "9": "file_name"
                },
                "param_2": {
                    "1": "library_version",
                    "2": "module_name",
                    "3": "function_name",
                    "4": "library_name",
                    "6": "file_name",
                    "8": "symbol_name"
                },
                "pcVar1": {
                    "1": "error_format",
                    "17": "format_string",
                    "3": "symbol_format"
                },
                "pcVar2": {
                    "1": "symbol_format",
                    "3": "format_string2"
                },
                "pcVar3": {
                    "1": "table_header"
                },
                "printf": {
                    "1": "print",
                    "4": "print_formatted_output"
                },
                "printf_2": {
                    "1": "print_formatted_2"
                }
            },
            "called": [
                "FUN_00102150",
                "FUN_00102190"
            ],
            "calling": [],
            "code": "\nvoid print_symbol_info_00103abf(undefined8 file_name,undefined8 symbol_name)\n\n{\n  char *format_string;\n  \n  format_string = \"\\n\\nUndefined symbols from %s[%s]:\\n\\n\";\n  if (DAT_0010b7e8 == 0) {\n    format_string = \"\\n\\nSymbols from %s[%s]:\\n\\n\";\n  }\n  format_string = (char *)get_translated_message(0,format_string,5);\n  print_formatted_output(format_string,file_name,symbol_name);\n  format_string = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (DAT_0010b7a8 != 0x20) {\n    format_string = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  format_string = (char *)get_translated_message(0,format_string,5);\n  print_formatted_output(format_string);\n  return;\n}\n\n",
            "current_name": "print_symbol_info_00103abf",
            "entrypoint": "0x00103abf",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103abf": "print_symbol_info_00103abf",
                "dcgettext": "get_translated_message",
                "param_1": "file_name",
                "param_2": "symbol_name",
                "pcVar1": "format_string",
                "printf": "print_formatted_output"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103b2b": {
            "additional_data": {
                "FUN_00103b2b": {
                    "1": "print_if_not_debug",
                    "3": "print_if_not_initialized",
                    "4": "print_log_message",
                    "7": "print_message"
                },
                "param_1": {
                    "1": "message_header",
                    "10": "message",
                    "2": "source",
                    "4": "function_name"
                },
                "param_2": {
                    "1": "function_name",
                    "2": "data",
                    "3": "log_message",
                    "4": "tag",
                    "7": "message"
                }
            },
            "called": [
                "FUN_00102190"
            ],
            "calling": [],
            "code": "\nvoid print_message_00103b2b(undefined8 message,undefined8 message)\n\n{\n  if (DAT_0010b818 == 0) {\n    printf(\"%s[%s]:\\n\",message,message);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "print_message_00103b2b",
            "entrypoint": "0x00103b2b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103b2b": "print_message_00103b2b",
                "param_1": "message",
                "param_2": "message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103b49": {
            "additional_data": {
                "DAT_0010712d": {
                    "1": "symbol_name",
                    "2": "symbol_data"
                },
                "FUN_00103b49": {
                    "1": "print_function_name",
                    "24": "print_symbol_name",
                    "5": "print_symname_wrapper"
                },
                "FUN_00104740": {
                    "1": "parse_symbol_name",
                    "2": "process_data",
                    "3": "parse_symbol"
                },
                "param_1": {
                    "1": "param_address",
                    "2": "str",
                    "4": "symbol_name",
                    "5": "input_string"
                },
                "param_2": {
                    "1": "input_flag",
                    "2": "symbol_address",
                    "7": "param_2"
                },
                "param_3": {
                    "1": "undefined8_arr",
                    "2": "output_ptr",
                    "6": "param_3"
                },
                "param_4": {
                    "1": "data_length",
                    "2": "symbol_length",
                    "3": "input_length",
                    "4": "param_4"
                },
                "print_symname": {
                    "1": "print_function_name_with_symbol",
                    "17": "print_symbol_name"
                }
            },
            "called": [
                "FUN_00104740"
            ],
            "calling": [],
            "code": "\nvoid print_symbol_name_00103b49(undefined8 input_string,undefined8 param_2)\n\n{\n  print_symbol_name_00103b49(&DAT_0010712d,input_string,0,param_2);\n  return;\n}\n\n",
            "current_name": "print_symbol_name_00103b49",
            "entrypoint": "0x00103b49",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103b49": "print_symbol_name_00103b49",
                "param_1": "input_string",
                "print_symname": "print_symbol_name"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103b5d": {
            "additional_data": {
                "*param_1": {
                    "1": "format_strings"
                },
                "FUN_00103b5d": {
                    "30": "print_matching_formats"
                },
                "F_00103b5d": {
                    "1": "print_matching_formats"
                },
                "__format": {
                    "1": "error_message_format",
                    "15": "format_string",
                    "7": "format_message"
                },
                "_stderr": {
                    "2": "stderr"
                },
                "_stdout": {
                    "2": "standard_output",
                    "3": "stdout"
                },
                "param_1": {
                    "15": "format_strings",
                    "2": "formats_array",
                    "5": "format_list",
                    "8": "formats"
                },
                "plVar2": {
                    "17": "current_format",
                    "4": "current_string",
                    "7": "current_format_string"
                },
                "uVar1": {
                    "1": "data_value",
                    "2": "matching_formats",
                    "3": "default_value",
                    "6": "default_format"
                }
            },
            "called": [
                "FUN_00102040",
                "FUN_001022b0",
                "FUN_00102260",
                "FUN_00102210",
                "FUN_00102150"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\n\n\nvoid print_matching_formats_00103b5d(long *format_strings)\n\n{\n  undefined8 default_format;\n  char *format_string;\n  long *current_format;\n  \n  fflush(stdout);\n  default_format = DAT_0010b820;\n  format_string = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(standard_error,format_string,default_format);\n  for (current_format = format_strings; *current_format != 0; current_format = current_format + 1) {\n    fprintf(standard_error,\" %s\");\n  }\n  free(format_strings);\n  fputc(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_matching_formats_00103b5d",
            "entrypoint": "0x00103b5d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103b5d": "print_matching_formats_00103b5d",
                "__format": "format_string",
                "_stderr": "standard_error",
                "_stdout": "stdout",
                "param_1": "format_strings",
                "plVar2": "current_format",
                "uVar1": "default_format"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103bec": {
            "additional_data": {
                "FUN_00103bec": {
                    "1": "calculate_reverse",
                    "18": "calculate_result",
                    "2": "calculate_negation",
                    "3": "calculate_negative_result"
                },
                "auVar2": {
                    "1": "modified_result",
                    "12": "result",
                    "2": "new_result",
                    "3": "result_array"
                },
                "iVar1": {
                    "1": "numeric_forward_result",
                    "10": "numeric_result",
                    "2": "numeric_value",
                    "4": "forward_value",
                    "9": "forward_result"
                },
                "in_RAX": {
                    "1": "original_value",
                    "2": "result",
                    "21": "input_value"
                },
                "numeric_forward": {
                    "1": "get_numeric_input",
                    "2": "get_forward_value",
                    "4": "get_numeric_value"
                }
            },
            "called": [
                "FUN_00105050"
            ],
            "calling": [],
            "code": "\nundefined  [16] calculate_result_00103bec(void)\n\n{\n  int numeric_result;\n  undefined8 input_value;\n  undefined result [16];\n  \n  numeric_result = get_numeric_value();\n  result._0_4_ = -numeric_result;\n  result._4_4_ = 0;\n  result._8_8_ = input_value;\n  return result;\n}\n\n",
            "current_name": "calculate_result_00103bec",
            "entrypoint": "0x00103bec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103bec": "calculate_result_00103bec",
                "auVar2": "result",
                "iVar1": "numeric_result",
                "in_RAX": "input_value",
                "numeric_forward": "get_numeric_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103bf6": {
            "additional_data": {
                "FUN_00103bf6": {
                    "1": "reverse_numeric_value",
                    "20": "calculate_result"
                },
                "FUN_00104fa0": {
                    "1": "perform_operation"
                },
                "auVar2": {
                    "1": "modified_result",
                    "3": "output",
                    "9": "result"
                },
                "iVar1": {
                    "1": "negative_result",
                    "10": "forward_result",
                    "3": "numeric_result",
                    "4": "forward_value",
                    "8": "result"
                },
                "in_RAX": {
                    "1": "result",
                    "12": "input_value"
                },
                "non_numeric_forward": {
                    "1": "get_input_value"
                },
                "param_1": {
                    "1": "input_value",
                    "2": "input1"
                },
                "param_2": {
                    "1": "input_data_2",
                    "2": "input2"
                }
            },
            "called": [
                "FUN_00104fa0"
            ],
            "calling": [],
            "code": "\nundefined  [16] calculate_result_00103bf6(void)\n\n{\n  int forward_result;\n  undefined8 input_value;\n  undefined result [16];\n  \n  forward_result = get_input_value();\n  result._0_4_ = -forward_result;\n  result._4_4_ = 0;\n  result._8_8_ = input_value;\n  return result;\n}\n\n",
            "current_name": "calculate_result_00103bf6",
            "entrypoint": "0x00103bf6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103bf6": "calculate_result_00103bf6",
                "auVar2": "result",
                "iVar1": "forward_result",
                "in_RAX": "input_value",
                "non_numeric_forward": "get_input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103c00": {
            "additional_data": {
                "*(byte *)(param_2 + 0x24)": {
                    "1": "relocation_flags"
                },
                "**(long **)*param_3": {
                    "1": "value_at_output_params"
                },
                "**(long **)param_3[1]": {
                    "1": "value_at_output_params_ptr"
                },
                "*param_1": {
                    "1": "function_pointer"
                },
                "*param_3": {
                    "1": "output_params"
                },
                "*param_3 + 8": {
                    "1": "output_params_stored_value"
                },
                "*param_3[1]": {
                    "1": "output_params_ptr"
                },
                "BIN_00103c7c": {
                    "1": "relocation_fail"
                },
                "FUN_00103c00": {
                    "1": "relocate_and_canonicalize",
                    "14": "process_relocation",
                    "2": "process_reloc"
                },
                "LAB_00103c7c": {
                    "1": "relocation_success"
                },
                "PTR_reloc_data": {
                    "1": "ptr_reloc_data"
                },
                "PTR_reloc_data_1": {
                    "1": "ptr_canonical_reloc"
                },
                "auVar2": {
                    "1": "aux_var",
                    "2": "new_reloc_entry",
                    "3": "reloc_data",
                    "4": "auxiliary_var"
                },
                "bfd_canonicalize_reloc": {
                    "5": "canonicalize_reloc"
                },
                "bfd_fatal": {
                    "1": "bfd_fatal",
                    "2": "handle_fatal_error"
                },
                "bfd_get_reloc_upper_bound": {
                    "1": "get_upper_bound",
                    "3": "get_reloc_upper_bound"
                },
                "bfd_get_reloc_upper_bound()": {
                    "1": "get_relocation_upper_bound()"
                },
                "lVar3": {
                    "1": "temp_var_3",
                    "2": "size",
                    "5": "length",
                    "7": "reloc_upper_bound",
                    "8": "upper_bound"
                },
                "param_1": {
                    "1": "buffer",
                    "2": "param_ptr",
                    "3": "param",
                    "5": "input_param"
                },
                "param_2": {
                    "1": "reloc_size",
                    "2": "base_address"
                },
                "param_3": {
                    "1": "buffer_ptr",
                    "2": "output_data",
                    "3": "reloc_data",
                    "4": "output_param",
                    "5": "reloc_info"
                },
                "param_4": {
                    "1": "input_value_1",
                    "2": "data_1",
                    "3": "var1",
                    "5": "param_4",
                    "6": "unused_param",
                    "8": "param4"
                },
                "param_5": {
                    "1": "var_5",
                    "2": "data_2",
                    "3": "var2",
                    "5": "param_5",
                    "6": "return_value",
                    "8": "param5"
                },
                "puVar1": {
                    "1": "reloc_value1",
                    "2": "temp_ptr",
                    "3": "reloc_data_ptr",
                    "9": "ptr1"
                },
                "uVar4": {
                    "1": "alloc_ptr",
                    "2": "xmalloc_result",
                    "4": "temp_var1"
                },
                "uVar5": {
                    "1": "canonicalize_result",
                    "13": "canonicalized_reloc",
                    "2": "canonicalized_reloc_data",
                    "4": "temp_var2"
                },
                "xmalloc": {
                    "3": "allocate_memory"
                },
                "xmalloc(lVar3)": {
                    "1": "allocate_buffer(l_var3)"
                }
            },
            "called": [
                "FUN_00106530",
                "FUN_001021e0",
                "FUN_001023f0",
                "FUN_001023a0"
            ],
            "calling": [
                "FUN_00103238"
            ],
            "code": "\nundefined8\nprocess_relocation_00103c00(undefined8 *input_param,long data_size,undefined (*reloc_info) [16],undefined8 param4,\n            undefined8 param5)\n\n{\n  undefined8 *ptr1;\n  undefined auxiliary_var [16];\n  long upper_bound;\n  undefined8 temp_var1;\n  undefined8 canonicalized_reloc;\n  \n  **(long **)*reloc_info = data_size;\n  if ((*(byte *)(data_size + 0x24) & 4) == 0) {\n    **(undefined8 **)(*reloc_info + 8) = 0;\n    **(undefined8 **)reloc_info[1] = 0;\n  }\n  else {\n    upper_bound = get_relocation_upper_bound();\n    if (-1 < upper_bound) {\n      ptr1 = *(undefined8 **)(*reloc_info + 8);\n      temp_var1 = allocate_buffer(l_var3);\n      canonicalized_reloc = *(undefined8 *)(reloc_info[1] + 8);\n      *ptr1 = temp_var1;\n      ptr1 = *(undefined8 **)reloc_info[1];\n      canonicalized_reloc = canonicalize_reloc(input_param,data_size,**(undefined8 **)(*reloc_info + 8),canonicalized_reloc);\n      *ptr1 = canonicalized_reloc;\n      if (-1 < **(long **)reloc_info[1]) goto relocation_success;\n    }\n    handle_fatal_error(*input_param);\n  }\nrelocation_success:\n  upper_bound = *(long *)(*reloc_info + 8) + 8;\n  *(long *)reloc_info[1] = *(long *)reloc_info[1] + 8;\n  auxiliary_var._8_4_ = (int)upper_bound;\n  auxiliary_var._0_8_ = *(long *)*reloc_info + 8;\n  auxiliary_var._12_4_ = (int)((ulong)upper_bound >> 0x20);\n  *reloc_info = auxiliary_var;\n  return param5;\n}\n\n",
            "current_name": "process_relocation_00103c00",
            "entrypoint": "0x00103c00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103c00": "process_relocation_00103c00",
                "LAB_00103c7c": "relocation_success",
                "auVar2": "auxiliary_var",
                "bfd_canonicalize_reloc": "canonicalize_reloc",
                "bfd_fatal": "handle_fatal_error",
                "bfd_get_reloc_upper_bound": "get_reloc_upper_bound",
                "bfd_get_reloc_upper_bound()": "get_relocation_upper_bound()",
                "lVar3": "upper_bound",
                "param_1": "input_param",
                "param_2": "data_size",
                "param_3": "reloc_info",
                "param_4": "param4",
                "param_5": "param5",
                "puVar1": "ptr1",
                "uVar4": "temp_var1",
                "uVar5": "canonicalized_reloc",
                "xmalloc": "allocate_memory",
                "xmalloc(lVar3)": "allocate_buffer(l_var3)"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103ca0": {
            "additional_data": {
                "*param_1": {
                    "1": "file"
                },
                "FUN_00103ca0": {
                    "1": "display_usage_message",
                    "11": "print_usage",
                    "2": "display_usage",
                    "3": "print_symbol_list",
                    "4": "print_symbols_usage"
                },
                "__ptr": {
                    "1": "bfd_target_list",
                    "29": "target_list"
                },
                "bfd_target_list": {
                    "1": "get_supported_targets"
                },
                "dcgettext": {
                    "1": "get_translated_message"
                },
                "exit": {
                    "1": "terminate"
                },
                "fprintf": {
                    "1": "print"
                },
                "fputc": {
                    "1": "put_character"
                },
                "free": {
                    "1": "deallocate"
                },
                "iVar2": {
                    "1": "symbol_length",
                    "2": "total_chars_printed",
                    "3": "total_characters",
                    "4": "total_bytes_written",
                    "7": "total_chars"
                },
                "iVar3": {
                    "1": "current_symbol_length",
                    "2": "fprintf_result2",
                    "3": "current_length",
                    "5": "chars_printed"
                },
                "lVar1": {
                    "1": "supported_targets",
                    "2": "target_object",
                    "8": "target",
                    "9": "target_name"
                },
                "lVar5": {
                    "1": "counter",
                    "12": "index",
                    "2": "length",
                    "4": "current_index"
                },
                "local_3c": {
                    "1": "padding_length",
                    "2": "space_length",
                    "3": "spaces_count",
                    "5": "space_count",
                    "6": "spaces"
                },
                "param_1": {
                    "1": "file_pointer",
                    "10": "file",
                    "17": "output_file"
                },
                "param_2": {
                    "27": "exit_code",
                    "4": "error_code"
                },
                "pcVar4": {
                    "1": "help_text",
                    "18": "message",
                    "2": "localized_string",
                    "5": "text"
                },
                "pcVar9": {
                    "1": "demangler_separator",
                    "19": "separator",
                    "2": "joiner",
                    "8": "delimiter"
                },
                "plVar7": {
                    "1": "target_pointer",
                    "2": "target_list_ptr",
                    "4": "target_ptr",
                    "7": "ptr",
                    "9": "current_target"
                },
                "ppcVar8": {
                    "1": "demanglers_entry",
                    "12": "demangler",
                    "2": "current_demangler",
                    "6": "demangler_ptr"
                },
                "sVar6": {
                    "1": "symbol_len",
                    "11": "string_length",
                    "3": "symbol_length",
                    "7": "length"
                },
                "strlen": {
                    "1": "get_string_length"
                }
            },
            "called": [
                "FUN_00102040",
                "FUN_001021c0",
                "FUN_001023c0",
                "FUN_0010c198",
                "FUN_00102260",
                "FUN_00102160",
                "FUN_00102210",
                "FUN_00102150",
                "FUN_00102450"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nvoid print_usage_00103ca0(FILE *output_file,int exit_code)\n\n{\n  long target_name;\n  int total_chars;\n  int chars_printed;\n  char *message;\n  long index;\n  size_t string_length;\n  long *target_list;\n  long *current_target;\n  char **demangler;\n  char *separator;\n  uint spaces;\n  \n  target_name = DAT_0010b820;\n  message = (char *)get_translated_message(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  print(output_file,message,target_name);\n  message = (char *)get_translated_message(0,\" List symbols in [file(s)] (a.out by default).\\n\",5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\" The options are:\\n\",5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"  -a, --debug-syms       Display debugger-only symbols\\n\",5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\n                             \"  -A, --print-file-name  Print name of the input file before every symbol\\n\"\n                             ,5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"  -B                     Same as --format=bsd\\n\",5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"  -C, --demangle[=STYLE] Decode mangled/processed symbol names\\n\",5)\n  ;\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"                           STYLE can be \",5);\n  if (*message == ' ') {\n    target_name = 1;\n    do {\n      index = target_name;\n      target_name = index + 1;\n    } while (message[index] == ' ');\n    spaces = (uint)index;\n  }\n  else {\n    spaces = 0;\n  }\n  total_chars = print(output_file,\"%s\",message);\n  separator = \"\";\n  for (demangler = (char **)&libiberty_demanglers; *demangler != (char *)0x0; demangler = demangler + 3) {\n    string_length = string_length(*demangler);\n    if (0x4a < (long)total_chars + string_length) {\n      print(output_file,\"%.1s\\n\",separator);\n      separator = \"\";\n      total_chars = print(output_file,\"%.*s\",(ulong)spaces,message);\n    }\n    chars_printed = print(output_file,\"%s\\\"%s\\\"\",separator,*demangler);\n    total_chars = total_chars + chars_printed;\n    separator = \", \";\n  }\n  put_char(10,output_file);\n  message = (char *)get_translated_message(0,\"      --no-demangle      Do not demangle low-level symbol names\\n\",5\n                            );\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\n                             \"      --recurse-limit    Enable a demangling recursion limit.  (default)\\n\"\n                             ,5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"      --no-recurse-limit Disable a demangling recursion limit.\\n\",5)\n  ;\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\n                             \"  -D, --dynamic          Display dynamic symbols instead of normal symbols\\n\"\n                             ,5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"  -e                     (ignored)\\n\",5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\n                             \"  -f, --format=FORMAT    Use the output format FORMAT.  FORMAT can be `bsd\\',\\n                           `sysv\\', `posix\\' or \\'just-symbols\\'.\\n                           The default is `bsd\\'\\n\"\n                             ,5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"  -g, --extern-only      Display only external symbols\\n\",5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\n                             \"    --ifunc-chars=CHARS  Characters to use when displaying ifunc symbols\\n\"\n                             ,5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"  -j, --just-symbols     Same as --format=just-symbols\\n\",5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\n                             \"  -l, --line-numbers     Use debugging information to find a filename and\\n                           line number for each symbol\\n\"\n                             ,5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"  -n, --numeric-sort     Sort symbols numerically by address\\n\",5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"  -o                     Same as -A\\n\",5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"  -p, --no-sort          Do not sort the symbols\\n\",5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"  -P, --portability      Same as --format=posix\\n\",5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"  -r, --reverse-sort     Reverse the sense of the sort\\n\",5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"      --plugin NAME      Load the specified plugin\\n\",5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"  -S, --print-size       Print size of defined symbols\\n\",5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\n                             \"  -s, --print-armap      Include index for symbols from archive members\\n\"\n                             ,5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"      --quiet            Suppress \\\"no symbols\\\" diagnostic\\n\",5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"      --size-sort        Sort symbols by size\\n\",5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"      --special-syms     Include special symbols in the output\\n\",5)\n  ;\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"      --synthetic        Display synthetic symbols as well\\n\",5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"  -t, --radix=RADIX      Use RADIX for printing symbol values\\n\",5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\n                             \"      --target=BFDNAME   Specify the target object format as BFDNAME\\n\"\n                             ,5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"  -u, --undefined-only   Display only undefined symbols\\n\",5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"  -U, --defined-only     Display only defined symbols\\n\",5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\n                             \"      --unicode={default|show|invalid|hex|escape|highlight}\\n                         Specify how to treat UTF-8 encoded unicode characters\\n\"\n                             ,5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"  -W, --no-weak          Ignore weak symbols\\n\",5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\n                             \"      --with-symbol-versions  Display version strings after symbol names\\n\"\n                             ,5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"  -X 32_64               (ignored)\\n\",5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"  @FILE                  Read options from FILE\\n\",5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"  -h, --help             Display this information\\n\",5);\n  print(output_file,message);\n  message = (char *)get_translated_message(0,\"  -V, --version          Display this program\\'s version number\\n\",5\n                            );\n  print(output_file,message);\n  target_name = DAT_0010b820;\n  if (DAT_0010b820 == 0) {\n    message = (char *)get_translated_message(0,\"Supported targets:\",5);\n    print(output_file,message);\n  }\n  else {\n    message = (char *)get_translated_message(0,\"%s: supported targets:\",5);\n    print(output_file,message,target_name);\n  }\n  target_list = (long *)get_supported_targets();\n  current_target = target_list;\n  while( true ) {\n    target_name = *current_target;\n    current_target = current_target + 1;\n    if (target_name == 0) break;\n    print(output_file,\" %s\");\n  }\n  put_char(10,output_file);\n  deallocate(target_list);\n  if (exit_code == 0) {\n    message = (char *)get_translated_message(0,\"Report bugs to %s.\\n\",5);\n    print(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  terminate(exit_code);\n}\n\n",
            "current_name": "print_usage_00103ca0",
            "entrypoint": "0x00103ca0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103ca0": "print_usage_00103ca0",
                "__ptr": "target_list",
                "bfd_target_list": "get_supported_targets",
                "dcgettext": "get_translated_message",
                "exit": "terminate",
                "fprintf": "print",
                "fputc": "put_char",
                "free": "deallocate",
                "iVar2": "total_chars",
                "iVar3": "chars_printed",
                "lVar1": "target_name",
                "lVar5": "index",
                "local_3c": "spaces",
                "param_1": "output_file",
                "param_2": "exit_code",
                "pcVar4": "message",
                "pcVar9": "separator",
                "plVar7": "current_target",
                "ppcVar8": "demangler",
                "sVar6": "string_length",
                "strlen": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104370": {
            "additional_data": {
                "*param_1": {
                    "1": "format_code"
                },
                "DAT_0010b7c0": {
                    "1": "counter",
                    "2": "error_code"
                },
                "FUN_00104370": {
                    "1": "find_print_object_filename",
                    "2": "select_print_object_filename",
                    "6": "set_print_object_filename",
                    "9": "get_print_object_filename"
                },
                "PTR_PTR_print_object_filename_bsd_0010b260": {
                    "1": "print_obj_filename",
                    "2": "bsd_print_object_filename"
                },
                "PTR_print_object_filename_bsd_0010ace0": {
                    "1": "default_print_object_filename"
                },
                "case 0x42": {
                    "1": "case_b1"
                },
                "case 0x4a": {
                    "1": "case_j1"
                },
                "case 0x50": {
                    "1": "case_p1"
                },
                "case 0x53": {
                    "1": "case_s1"
                },
                "case 0x62": {
                    "1": "case_b2"
                },
                "case 0x6a": {
                    "1": "case_j2"
                },
                "case 0x70": {
                    "1": "case_p2"
                },
                "case 0x73": {
                    "1": "case_s2"
                },
                "dcgettext": {
                    "1": "get_message"
                },
                "fatal": {
                    "1": "print_error_message_and_exit",
                    "2": "print_fatal_error"
                },
                "non_fatal": {
                    "1": "print_warning_message",
                    "2": "print_non_fatal_error"
                },
                "object_index": {
                    "1": "index"
                },
                "param_1": {
                    "1": "format_specifier",
                    "11": "output_format",
                    "13": "format",
                    "2": "format_code"
                },
                "param_2": {
                    "1": "obj_index",
                    "10": "object_index",
                    "2": "param_value",
                    "4": "arg",
                    "6": "filename"
                },
                "ppuVar2": {
                    "1": "print_obj_filenames",
                    "17": "result",
                    "7": "print_object_filename"
                },
                "printObjectName": {
                    "1": "default_print_object_name"
                },
                "print_error_message_00106300": {
                    "11": "print_error_message"
                },
                "set_print_object_filename_00104397": {
                    "1": "set_print_object_filename_helper",
                    "12": "set_print_object_filename"
                },
                "switchD_00104393": {
                    "1": "switch_object_index"
                },
                "switchD_00104393::FUN_00102475": {
                    "1": "perform_switch",
                    "2": "switch_function",
                    "5": "switch_d_function"
                },
                "uVar1": {
                    "1": "translated_error_message",
                    "24": "error_message",
                    "3": "error_msg"
                }
            },
            "called": [
                "FUN_00106300",
                "FUN_00104397",
                "FUN_00102475",
                "FUN_00102150"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nundefined ** get_print_object_filename_00104370(undefined *format,undefined8 object_index)\n\n{\n  undefined8 error_message;\n  undefined **result;\n  \n  switch(*format) {\n  case 0x42:\n  case 0x62:\n    DAT_0010b7c0 = 0;\n    PTR_PTR_print_object_filename_bsd_0010b260 =\n         (undefined *)&PTR_print_object_filename_bsd_0010ace0;\n    return &PTR_print_object_filename_bsd_0010ace0;\n  default:\n    error_message = get_message(0,\"%s: invalid output format\",5);\n    print_fatal_error(error_message,format);\n    error_message = get_message(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n    print_non_fatal_error(error_message);\n    return (undefined **)0x0;\n  case 0x4a:\n  case 0x6a:\n    result = (undefined **)set_print_object_filename(format,object_index,3);\n    return result;\n  case 0x50:\n  case 0x70:\n    result = (undefined **)set_print_object_filename(format,object_index,2);\n    return result;\n  case 0x53:\n  case 0x73:\n    result = (undefined **)set_print_object_filename(format,object_index,1);\n    return result;\n  }\n}\n\n",
            "current_name": "get_print_object_filename_00104370",
            "entrypoint": "0x00104370",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104370": "get_print_object_filename_00104370",
                "dcgettext": "get_message",
                "fatal": "print_fatal_error",
                "non_fatal": "print_non_fatal_error",
                "param_1": "format",
                "param_2": "object_index",
                "ppuVar2": "result",
                "set_print_object_filename_00104397": "set_print_object_filename",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104397": {
            "additional_data": {
                "&PTR_print_object_filename_bsd_0010ace0": {
                    "1": "print_object_filename_pointer"
                },
                "FUN_00104397": {
                    "1": "initialize_object_filename",
                    "11": "set_print_object_filename",
                    "2": "initialize_print_object_filename",
                    "3": "set_print_object_filename_bsd",
                    "6": "set_object_filename"
                },
                "PTR_PTR_print_object_filename_bsd_0010b260": {
                    "1": "print_object_filename_pointer",
                    "3": "print_object_filename_ptr"
                },
                "PTR_print_object_filename_bsd_0010ace0": {
                    "1": "base_print_object_filename_ptr"
                },
                "param_1": {
                    "1": "config_param",
                    "11": "param1",
                    "6": "param_1",
                    "7": "arg1"
                },
                "param_2": {
                    "1": "filename_length",
                    "11": "param2",
                    "6": "param_2",
                    "7": "arg2"
                },
                "param_3": {
                    "1": "param",
                    "2": "file_index",
                    "3": "param3",
                    "6": "index",
                    "7": "object_index"
                },
                "param_3 * 5": {
                    "1": "offset"
                }
            },
            "called": [],
            "calling": [
                "FUN_00104370",
                "FUN_00102475"
            ],
            "code": "\nvoid set_print_object_filename_00104397(undefined8 param1,undefined8 param2,int object_index)\n\n{\n  DAT_0010b7c0 = object_index;\n  PTR_PTR_print_object_filename_bsd_0010b260 =\n       (undefined *)(&PTR_print_object_filename_bsd_0010ace0 + (long)object_index * 5);\n  return;\n}\n\n",
            "current_name": "set_print_object_filename_00104397",
            "entrypoint": "0x00104397",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104397": "set_print_object_filename_00104397",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "object_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001043d0": {
            "additional_data": {
                "DAT_0010b7d0": {
                    "1": "bfd_plugin_flag",
                    "2": "is_plugin"
                },
                "DAT_0010b804": {
                    "1": "bfd_check_format_flag",
                    "2": "print_width_flag"
                },
                "FUN_001043d0": {
                    "1": "check_file_and_display_info",
                    "21": "check_file",
                    "3": "validate_file"
                },
                "PTR_PTR_print_object_filename_bsd_0010b260": {
                    "1": "print_object_filename_function"
                },
                "UVar3": {
                    "1": "result"
                },
                "_DAT_0010b7b0": {
                    "1": "close_error"
                },
                "_DAT_0010b7b8": {
                    "1": "b8_value"
                },
                "_DAT_0010b7d0": {
                    "1": "flag"
                },
                "_DAT_0010b7f0": {
                    "1": "archive_flag"
                },
                "_DAT_0010b804": {
                    "1": "print_flag"
                },
                "bfd_check_format": {
                    "1": "check_format"
                },
                "bfd_check_format_matches": {
                    "1": "check_format_matches"
                },
                "bfd_close": {
                    "1": "close_file"
                },
                "bfd_fatal": {
                    "1": "handle_fatal_error"
                },
                "bfd_get_elt_at_index": {
                    "1": "get_element_at_index"
                },
                "bfd_get_error": {
                    "1": "get_error"
                },
                "bfd_get_next_mapent": {
                    "1": "get_next_map_entry"
                },
                "bfd_nonfatal": {
                    "1": "handle_nonfatal_error"
                },
                "bfd_openr": {
                    "1": "open_file"
                },
                "cVar1": {
                    "1": "format_valid",
                    "14": "format_check",
                    "2": "result",
                    "4": "check_result",
                    "8": "format_check_result"
                },
                "dcgettext": {
                    "1": "get_text"
                },
                "display_rel_file": {
                    "1": "display_file"
                },
                "iVar2": {
                    "1": "return_value",
                    "10": "stat_result",
                    "12": "status",
                    "8": "result"
                },
                "lVar7": {
                    "1": "map_ent",
                    "16": "map_entry",
                    "2": "map_entry_index"
                },
                "local_c8": {
                    "1": "file_status",
                    "12": "file_info",
                    "13": "file_stat",
                    "3": "file_stats"
                },
                "non_fatal": {
                    "1": "handle_warning"
                },
                "param_1": {
                    "1": "filepath",
                    "2": "file_name",
                    "21": "file_path",
                    "7": "filename"
                },
                "pcVar8": {
                    "1": "error_message_str",
                    "12": "error_message",
                    "2": "error_str",
                    "3": "error_description",
                    "5": "error_string",
                    "6": "error_reason"
                },
                "piVar4": {
                    "1": "errno_location_ref",
                    "2": "error_ptr",
                    "3": "error",
                    "6": "errno_ptr",
                    "8": "error_code"
                },
                "print_symname": {
                    "1": "print_symbol_name"
                },
                "printf": {
                    "1": "print_string"
                },
                "puVar10": {
                    "1": "previous_archived_file_descriptor",
                    "2": "previous_file",
                    "4": "previous_archived_file_handle",
                    "7": "prev_archived_file"
                },
                "puVar6": {
                    "1": "bfd_handler",
                    "2": "bfd_ptr",
                    "4": "bfd_file",
                    "5": "file_handle",
                    "6": "bfd_handle",
                    "7": "file_descriptor"
                },
                "puVar9": {
                    "1": "archive_file",
                    "12": "archived_file",
                    "2": "archived_file_pointer",
                    "3": "archived_file_ptr",
                    "7": "archived_file_handle"
                },
                "set_print_width": {
                    "1": "set_width"
                },
                "strerror": {
                    "1": "get_error_message"
                },
                "uVar3": {
                    "10": "result",
                    "17": "return_value",
                    "3": "success"
                },
                "uVar5": {
                    "1": "translated_message",
                    "14": "error_message",
                    "2": "error_msg",
                    "5": "warning_message"
                }
            },
            "called": [
                "FUN_00102360",
                "FUN_001048e0",
                "FUN_00102120",
                "FUN_00102670",
                "FUN_0010249f",
                "FUN_00102380",
                "FUN_00102080",
                "FUN_00102280",
                "FUN_00106400",
                "FUN_00104740",
                "FUN_00102150",
                "FUN_0010351b",
                "FUN_00102190",
                "FUN_001023d0",
                "FUN_00102430",
                "FUN_00104670",
                "FUN_00106530",
                "FUN_00103b5d",
                "FUN_001023e0",
                "FUN_00102410",
                "FUN_00106540",
                "FUN_001062d0",
                "FUN_001021d0"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\n\n\nundefined4 check_file_001043d0(char *file_path)\n\n{\n  char format_check;\n  int status;\n  undefined4 return_value;\n  int *error_code;\n  undefined8 error_message;\n  undefined8 *file_descriptor;\n  long map_entry;\n  char *error_message;\n  undefined8 *archived_file;\n  undefined8 *prev_archived_file;\n  stat file_stat;\n  \n  if (file_path != (char *)0x0) {\n    status = stat(file_path,&file_stat);\n    if (status < 0) {\nLAB_00102522:\n      error_code = __errno_location();\n      if (*error_code == 2) {\n        error_message = get_text(0,\"\\'%s\\': No such file\",5);\n        handle_warning(error_message,file_path);\n      }\n      else {\n        error_message = get_error_message(*error_code);\n        error_message = get_text(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        handle_warning(error_message,file_path,error_message);\n      }\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x4000) {\n      error_message = get_text(0,\"Warning: \\'%s\\' is a directory\",5);\n      handle_warning(error_message,file_path);\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x8000) {\n      if (file_stat.st_size < 0) {\n        error_message = get_text(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n        handle_warning(error_message,file_path);\n      }\n      else if (file_stat.st_size != 0) {\n        if (DAT_0010b7d0 == 0) {\n          file_descriptor = (undefined8 *)open_file(file_path,\"plugin\");\n        }\n        else {\n          file_descriptor = (undefined8 *)open_file(file_path);\n        }\n        if (file_descriptor != (undefined8 *)0x0) {\n          if (DAT_0010b804 != 0) {\n            *(uint *)((long)file_descriptor + 0x44) = *(uint *)((long)file_descriptor + 0x44) | 0x8000;\n          }\n          format_check = check_format(file_descriptor,2);\n          if (format_check == '\\0') {\n            return_value = check_format_matches(file_descriptor,1,&file_stat);\n            if ((char)return_value == '\\0') goto LAB_001025ac;\n            set_width(file_descriptor);\n            (**(code **)PTR_PTR_print_object_filename_bsd_0010b260)(file_path);\n            display_file(file_descriptor,0);\n          }\n          else {\n            (**(code **)(PTR_PTR_print_object_filename_bsd_0010b260 + 8))(*file_descriptor);\n            if ((_DAT_0010b7f0 != 0) &&\n               (map_entry = get_next_map_entry(file_descriptor,0xffffffffffffffff,&file_stat), map_entry != -1)) {\n              error_message = (char *)get_text(0,\"\\nArchive index:\\n\",5);\n              print_string(error_message);\n              do {\n                archived_file = (undefined8 *)(**(code **)(file_descriptor[1] + 0x1e0))(file_descriptor,map_entry);\n                if (archived_file == (undefined8 *)0x0) goto LAB_00102516;\n                if (*(long *)file_stat.st_dev != 0) {\n                  print_symbol_name(&DAT_0010712d,0,*(long *)file_stat.st_dev,file_descriptor);\n                  print_string(\" in %s\\n\",*archived_file);\n                }\n                map_entry = get_next_map_entry(file_descriptor,map_entry,&file_stat);\n              } while (map_entry != -1);\n            }\n            archived_file = (undefined8 *)0x0;\n            do {\n              do {\n                prev_archived_file = archived_file;\n                archived_file = (undefined8 *)open_file_next_archived_file(file_descriptor,prev_archived_file);\n                if (archived_file == (undefined8 *)0x0) {\n                  status = get_error();\n                  if (status != 9) {\n                    handle_fatal_error(*file_descriptor);\nLAB_00102516:\n                    handle_fatal_error(\"get_element_at_index\");\n                    goto LAB_00102522;\n                  }\n                  if (prev_archived_file != (undefined8 *)0x0) {\n                    close_file(prev_archived_file);\n                    _DAT_0010b7b8 = 0;\n                    _DAT_0010b7b0 = 0;\n                  }\n                  goto LAB_001044b4;\n                }\n                format_check = check_format_matches(archived_file,1,&file_stat);\n                if (format_check == '\\0') {\n                  handle_nonfatal_error(*archived_file);\n                  status = get_error();\n                  if (status == 0xd) {\n                    list_matching_formats(file_stat.st_dev);\n                  }\n                }\n                else {\n                  set_width(archived_file);\n                  (**(code **)(PTR_PTR_print_object_filename_bsd_0010b260 + 0x10))(*file_descriptor,*archived_file);\n                  display_file(archived_file,file_descriptor);\n                }\n              } while (prev_archived_file == (undefined8 *)0x0);\n              close_file(prev_archived_file);\n              _DAT_0010b7b8 = 0;\n              _DAT_0010b7b0 = 0;\n            } while (prev_archived_file != archived_file);\n          }\nLAB_001044b4:\n          return_value = 1;\n          while (format_check = close_file(file_descriptor), format_check == '\\0') {\n            handle_fatal_error(file_path);\nLAB_001025ac:\n            handle_nonfatal_error(file_path);\n            status = get_error();\n            if (status == 0xd) {\n              list_matching_formats(file_stat.st_dev);\n            }\n          }\n          _DAT_0010b7b0 = 0;\n          _DAT_0010b7b8 = 0;\n          return return_value;\n        }\n        handle_nonfatal_error(file_path);\n      }\n    }\n    else {\n      error_message = get_text(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      handle_warning(error_message,file_path);\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "check_file_001043d0",
            "entrypoint": "0x001043d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001043d0": "check_file_001043d0",
                "bfd_check_format": "check_format",
                "bfd_check_format_matches": "check_format_matches",
                "bfd_close": "close_file",
                "bfd_fatal": "handle_fatal_error",
                "bfd_get_elt_at_index": "get_element_at_index",
                "bfd_get_error": "get_error",
                "bfd_get_next_mapent": "get_next_map_entry",
                "bfd_nonfatal": "handle_nonfatal_error",
                "bfd_openr": "open_file",
                "cVar1": "format_check",
                "dcgettext": "get_text",
                "display_rel_file": "display_file",
                "iVar2": "status",
                "lVar7": "map_entry",
                "local_c8": "file_stat",
                "non_fatal": "handle_warning",
                "param_1": "file_path",
                "pcVar8": "error_message",
                "piVar4": "error_code",
                "print_symname": "print_symbol_name",
                "printf": "print_string",
                "puVar10": "prev_archived_file",
                "puVar6": "file_descriptor",
                "puVar9": "archived_file",
                "set_print_width": "set_width",
                "strerror": "get_error_message",
                "uVar3": "return_value",
                "uVar5": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104670": {
            "additional_data": {
                "DAT_001071ca": {
                    "1": "info_string2",
                    "2": "concat_string2"
                },
                "DAT_001071cd": {
                    "1": "architecture10_bit",
                    "2": "concat_string3"
                },
                "DAT_001071d0": {
                    "1": "info_string1",
                    "2": "concat_string1"
                },
                "DAT_001071d7": {
                    "1": "default_architecture_prefix",
                    "2": "concat_string4"
                },
                "DAT_0010b244": {
                    "1": "another_constant"
                },
                "DAT_0010b7a0": {
                    "1": "arch_size_memory",
                    "2": "architecture_data"
                },
                "DAT_0010b7a4": {
                    "1": "error_code"
                },
                "DAT_0010b7a8": {
                    "1": "current_architecture_size",
                    "2": "architecture_size_result",
                    "3": "architecture_size"
                },
                "DAT_0010b7a8 == -1": {
                    "1": "is_architecture_size_invalid"
                },
                "DAT_0010b7a8 == 0x20": {
                    "1": "is_architecture_size32_bit"
                },
                "DAT_0010b7c0": {
                    "1": "config_size",
                    "2": "some_constant",
                    "3": "constant_value"
                },
                "DAT_0010b7c0 - 2U": {
                    "1": "max_size_minus2"
                },
                "FUN_00104670": {
                    "1": "identify_arch_size",
                    "2": "extract_architecture_info",
                    "3": "determine_architecture"
                },
                "concat": {
                    "3": "concatenate_strings"
                },
                "getArchSize": {
                    "1": "new_arch_size"
                },
                "iVar1": {
                    "1": "architecture_type",
                    "14": "arch_size",
                    "2": "size",
                    "3": "result",
                    "7": "architecture_size"
                },
                "param_1": {
                    "1": "binary",
                    "2": "binary_info",
                    "3": "input_data",
                    "9": "input_param"
                },
                "param_1 + 8": {
                    "1": "parameter_value_pointer"
                },
                "pcVar2": {
                    "1": "found_str",
                    "2": "architecture_type",
                    "3": "search_result",
                    "4": "arch_substring",
                    "5": "arch_string"
                },
                "pcVar4": {
                    "1": "substring_result",
                    "2": "substring",
                    "3": "input_string",
                    "4": "search_string"
                },
                "puVar3": {
                    "1": "concatenation_result",
                    "2": "suffix",
                    "3": "concatenated_string",
                    "4": "concat_param"
                },
                "strcmp": {
                    "1": "compare_strings"
                },
                "strstr": {
                    "1": "find_arch_string"
                }
            },
            "called": [
                "FUN_00102240",
                "FUN_00102040",
                "FUN_001021b0",
                "FUN_001025f5",
                "FUN_00102420",
                "FUN_00102220"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\nvoid initialize_architecture_00104670(long input_param)\n\n{\n  int arch_size;\n  char *arch_string;\n  undefined *string_ptr;\n  char *search_string;\n  \n  DAT_0010b7a8 = bfd_get_arch_size();\n  if (DAT_0010b7a8 == -1) {\n    search_string = **(char ***)(input_param + 8);\n    arch_string = find_arch_string(search_string,\"64\");\n    arch_size = 0x40;\n    if (arch_string == (char *)0x0) {\n      arch_size = compare_strings(search_string,\"mmo\");\n      arch_size = (-(uint)(arch_size == 0) & 0x20) + 0x20;\n    }\n    DAT_0010b7a8 = arch_size;\n    free(DAT_0010b7a0);\n  }\n  else {\n    free(DAT_0010b7a0);\n  }\n  if (DAT_0010b7c0 - 2U < 2) {\n    search_string = \"\";\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    search_string = \"08\";\n  }\n  else {\n    search_string = \"016\";\n  }\n  string_ptr = &DAT_001071d0;\n  if (DAT_0010b244 != 0x10) {\n    if (DAT_0010b244 < 0x11) {\n      if (DAT_0010b244 == 8) {\n        string_ptr = &DAT_001071ca;\n      }\n      else {\n        if (DAT_0010b244 != 10) {\n          DAT_0010b7a0 = (void *)concatenate_strings(&DAT_001071d7,search_string,0,0);\n          return;\n        }\n        string_ptr = &DAT_001071cd;\n      }\n    }\n    else {\n      string_ptr = (undefined *)0x0;\n    }\n  }\n  DAT_0010b7a0 = (void *)concatenate_strings(&DAT_001071d7,search_string,string_ptr,0);\n  return;\n}\n\n",
            "current_name": "initialize_architecture_00104670",
            "entrypoint": "0x00104670",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104670": "initialize_architecture_00104670",
                "concat": "concatenate_strings",
                "iVar1": "arch_size",
                "param_1": "input_param",
                "pcVar2": "arch_string",
                "pcVar4": "search_string",
                "puVar3": "string_ptr",
                "strcmp": "compare_strings",
                "strstr": "find_arch_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104740": {
            "additional_data": {
                "FUN_00104740": {
                    "1": "improved_print_string",
                    "12": "print_formatted_string",
                    "2": "decode_and_print_string",
                    "8": "print_decoded_string"
                },
                "__ptr": {
                    "1": "final_string",
                    "3": "new_string",
                    "5": "result_string",
                    "6": "decoded_string"
                },
                "__s": {
                    "1": "str",
                    "3": "char_ptr3"
                },
                "__s_00": {
                    "1": "char_ptr2",
                    "2": "char_ptr4"
                },
                "acStack_39": {
                    "1": "char_buffer",
                    "12": "stack_array",
                    "2": "temp_array",
                    "7": "char_array"
                },
                "bVar15": {
                    "1": "byte_value3",
                    "2": "byte_3",
                    "3": "byte_var15",
                    "7": "byte_var"
                },
                "bVar2": {
                    "1": "current_char",
                    "15": "byte1",
                    "3": "byte_var1",
                    "4": "byte_1"
                },
                "bVar3": {
                    "1": "temp_byte2",
                    "15": "byte2",
                    "3": "byte_var2",
                    "4": "byte_2"
                },
                "iVar4": {
                    "1": "integer",
                    "13": "int_var",
                    "2": "int1",
                    "5": "int_value"
                },
                "lVar13": {
                    "1": "long_val",
                    "12": "long_var",
                    "2": "loop_var"
                },
                "param_1": {
                    "1": "param_string",
                    "26": "format_string",
                    "3": "string_format"
                },
                "param_2": {
                    "1": "string_struct",
                    "2": "pointer_array",
                    "3": "pointer_list",
                    "4": "param_array"
                },
                "param_3": {
                    "1": "input_string",
                    "2": "string",
                    "3": "string_data",
                    "4": "string_ptr",
                    "6": "string_pointer"
                },
                "param_4": {
                    "1": "arg_ptr",
                    "2": "input_value",
                    "4": "context",
                    "5": "length",
                    "6": "param_4"
                },
                "pcVar6": {
                    "1": "pointer_to_char_1",
                    "2": "ptr_to_char",
                    "3": "char_pointer1",
                    "8": "char_ptr"
                },
                "pcVar8": {
                    "1": "ptr2",
                    "2": "pc_var",
                    "7": "char_ptr2"
                },
                "puVar1": {
                    "1": "ptr_temp",
                    "2": "pointer_var1",
                    "3": "ptr_var1",
                    "4": "pointer1",
                    "8": "ptr1"
                },
                "puVar11": {
                    "1": "pointer_data",
                    "2": "pointer_var3",
                    "6": "ptr3"
                },
                "puVar12": {
                    "1": "ptr2",
                    "2": "current_ptr",
                    "6": "ptr4"
                },
                "puVar7": {
                    "1": "dest_ptr",
                    "2": "ptr_var2",
                    "3": "pointer2",
                    "7": "ptr2"
                },
                "sVar5": {
                    "1": "length_2",
                    "2": "str_len",
                    "3": "size_var",
                    "8": "string_length"
                },
                "uVar10": {
                    "1": "ulong_var_2",
                    "10": "ulong_var2",
                    "2": "undefined8_var"
                },
                "uVar14": {
                    "1": "uint_var1",
                    "12": "uint_var",
                    "2": "loop_count",
                    "4": "uint_value"
                },
                "uVar9": {
                    "1": "ulong_var9",
                    "11": "ulong_var",
                    "2": "count",
                    "4": "ulong_var1"
                }
            },
            "called": [
                "FUN_00102739"
            ],
            "calling": [
                "FUN_00103729",
                "FUN_001064b0",
                "FUN_001043d0",
                "FUN_001035a2",
                "FUN_00103b49"
            ],
            "code": "\n\n\nvoid print_formatted_string_00104740(char *format_string,long *param_array,undefined8 *string_pointer,long param_4)\n\n{\n  undefined8 *ptr1;\n  byte byte1;\n  byte byte2;\n  int int_var;\n  size_t size;\n  char *char_ptr;\n  undefined8 *ptr2;\n  char *char_ptr2;\n  undefined8 *decoded_string;\n  ulong ulong_var;\n  undefined8 ulong_var2;\n  undefined *ptr3;\n  undefined8 *ptr4;\n  char *char_ptr3;\n  undefined8 *char_ptr4;\n  long long_var;\n  uint uint_var;\n  byte byte3;\n  char stack_array [9];\n  \n  byte3 = 0;\n  if (string_pointer == (undefined8 *)0x0) {\n    string_pointer = *(undefined8 **)(*param_array + 0x10);\n    if (DAT_0010b234 == 0) {\n      decode_and_print_string_00102739();\n      return;\n    }\nLAB_00104775:\n    ptr4 = string_pointer;\n    if (DAT_0010b814 == 0) {\n      char_ptr = (char *)0x0;\n      if (DAT_0010b7e0 == 0) {\nLAB_00104794:\n        ptr4 = string_pointer;\n        decoded_string = (undefined8 *)0x0;\n      }\n      else {\n        decoded_string = (undefined8 *)0x0;\n        if (string_pointer != (undefined8 *)0x0) goto LAB_0010269d;\n        ptr4 = (undefined8 *)0x1073a6;\n      }\n    }\n    else {\n      char_ptr = (char *)0x0;\nLAB_0010482b:\n      if ((*(char *)ptr4 == '\\0') ||\n         (string_pointer = (undefined8 *)bfd_demangle(param_4,ptr4,DAT_0010b248),\n         string_pointer == (undefined8 *)0x0)) {\n        string_pointer = ptr4;\n        if (DAT_0010b7e0 != 0) goto LAB_00102698;\n        decoded_string = (undefined8 *)0x0;\n      }\n      else {\n        ptr4 = string_pointer;\n        decoded_string = string_pointer;\n        if (DAT_0010b7e0 != 0) goto LAB_0010269d;\n      }\n    }\n  }\n  else {\n    ptr4 = string_pointer;\n    if (DAT_0010b234 == 0) {\n      if (*(int *)(*(long *)(param_4 + 8) + 8) != 5) goto LAB_00104775;\n      char_ptr = strchr((char *)string_pointer,0x40);\n      if (char_ptr == (char *)0x0) {\n        if (DAT_0010b814 == 0) {\n          if (DAT_0010b7e0 == 0) {\n            if (param_array == (long *)0x0) {\n              decoded_string = (undefined8 *)0x0;\n              printf(format_string,string_pointer);\n            }\n            else {\n              if (param_array[2] != 0) {\n                print_and_free_001047d0();\n                return;\n              }\n              decoded_string = (undefined8 *)0x0;\n              printf(format_string,string_pointer);\n            }\n            goto LAB_001047ba;\n          }\n          goto LAB_00102698;\n        }\n      }\n      else {\n        *char_ptr = '\\0';\n        if (DAT_0010b814 == 0) {\n          if (DAT_0010b7e0 == 0) goto LAB_00104794;\n          decoded_string = (undefined8 *)0x0;\n          goto LAB_0010269d;\n        }\n      }\n      goto LAB_0010482b;\n    }\n    char_ptr = (char *)0x0;\n    if (DAT_0010b814 != 0) goto LAB_0010482b;\n    if (DAT_0010b7e0 == 0) goto LAB_00104794;\nLAB_00102698:\n    ptr4 = string_pointer;\n    decoded_string = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byte1 = *(byte *)string_pointer;\n      string_pointer = (undefined8 *)((long)string_pointer + 1);\n      if (byte1 == 0) goto joined_r0x00104864;\n    } while ((((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) && (byte1 < 0xc0));\n    size = strlen((char *)ptr4);\n    char_ptr4 = DAT_0010b790;\n    if (_DAT_0010b798 < size * 9) {\n      free(DAT_0010b790);\n      size = strlen((char *)ptr4);\n      _DAT_0010b798 = size * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      char_ptr4 = DAT_0010b790;\n    }\n    while( true ) {\n      ptr2 = DAT_0010b790;\n      byte1 = *(byte *)ptr4;\n      ptr1 = (undefined8 *)((long)ptr4 + 1);\n      if (byte1 == 0) break;\n      if (((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)char_ptr4 = byte1;\n          char_ptr4 = (undefined8 *)((long)char_ptr4 + 1);\n          ptr4 = ptr1;\n        }\n        else {\n          byte2 = *(byte *)((long)ptr4 + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            ptr2 = char_ptr4;\n            if ((byte1 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                uint_var = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                long_var = 2;\n                goto LAB_00102917;\n              case 4:\n                int_var = isatty(1);\n                if (int_var == 0) {\n                  byte2 = *(byte *)((long)ptr4 + 1);\n                }\n                else {\n                  *(undefined *)(char_ptr4 + 1) = 0;\n                  *char_ptr4 = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)ptr4 + 1);\n                  ptr2 = char_ptr4 + 1;\n                }\n              case 2:\n                uint_var = 2;\n                sprintf((char *)ptr2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)ptr4 >> 2 & 7),\n                        (ulong)((*(byte *)ptr4 & 3) << 6 | byte2 & 0x3f));\n                ptr2 = (undefined8 *)((long)ptr2 + 6);\n                goto LAB_00102a27;\n              default:\n                uint_var = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)ptr4 + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uint_var = 3;\nLAB_00102a62:\n                  for (ulong_var = (ulong)uint_var; ulong_var != 0; ulong_var = ulong_var - 1) {\n                    *(undefined *)ptr2 = *(undefined *)ptr4;\n                    ptr4 = (undefined8 *)((long)ptr4 + (ulong)byte3 * -2 + 1);\n                    ptr2 = (undefined8 *)((long)ptr2 + (ulong)byte3 * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  long_var = 3;\nLAB_00102917:\n                  ulong_var2 = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    ulong_var2 = 0x3c;\n                  }\n                  sprintf((char *)char_ptr4,\"%c\",ulong_var2);\n                  *(undefined *)((long)char_ptr4 + 3) = 0;\n                  ptr2 = (undefined8 *)(long_var + (long)ptr4);\n                  *(undefined2 *)((long)char_ptr4 + 1) = 0x7830;\n                  char_ptr2 = (char *)((long)char_ptr4 + 3);\n                  do {\n                    char_ptr3 = char_ptr2;\n                    byte1 = *(byte *)ptr4;\n                    ptr4 = (undefined8 *)((long)ptr4 + 1);\n                    sprintf(char_ptr3,\"%02x\",(ulong)byte1);\n                    char_ptr2 = char_ptr3 + 2;\n                  } while (ptr4 != ptr2);\n                  ulong_var2 = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    ulong_var2 = 0x3e;\n                  }\n                  uint_var = (uint)long_var;\n                  sprintf(char_ptr3 + 2,\"%c\",ulong_var2);\n                  ptr2 = (undefined8 *)(char_ptr3 + 3);\n                  break;\n                case 4:\n                  int_var = isatty(1);\n                  if (int_var == 0) {\n                    byte2 = *(byte *)((long)ptr4 + 2);\n                  }\n                  else {\n                    *(undefined *)(char_ptr4 + 1) = 0;\n                    *char_ptr4 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)ptr4 + 2);\n                    ptr2 = char_ptr4 + 1;\n                  }\n                case 2:\n                  uint_var = 3;\n                  sprintf((char *)ptr2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)ptr4 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)ptr4 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)ptr4 + 1) & 3) << 6 | byte2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (int_var = isatty(1), int_var != 0)) {\n                    *(undefined4 *)ptr2 = 0x6d305b1b;\n                    ptr2 = (undefined8 *)((long)ptr2 + 4);\n                    *(undefined *)ptr2 = 0;\n                  }\n                  break;\n                default:\n                  uint_var = 3;\n                }\n              }\n              else {\n                byte2 = *(byte *)((long)ptr4 + 3);\n                if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uint_var = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  long_var = 4;\n                  goto LAB_00102917;\n                case 4:\n                  int_var = isatty(1);\n                  if (int_var == 0) {\n                    byte2 = *(byte *)((long)ptr4 + 3);\n                  }\n                  else {\n                    *(undefined *)(char_ptr4 + 1) = 0;\n                    *char_ptr4 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)ptr4 + 3);\n                    ptr2 = char_ptr4 + 1;\n                  }\n                case 2:\n                  uint_var = 4;\n                  int_var = sprintf((char *)ptr2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)ptr4 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr4 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)ptr4 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr4 + 2) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)ptr4 + 2) & 3) << 6 | byte2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + (long)int_var);\n                  goto LAB_00102a27;\n                default:\n                  uint_var = 4;\n                }\n              }\n            }\n            ulong_var = (ulong)(uint)((int)ptr2 - (int)char_ptr4);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)char_ptr4 = byte1;\n            uint_var = 1;\n            ulong_var = 1;\n          }\n          char_ptr4 = (undefined8 *)((long)char_ptr4 + ulong_var);\n          ptr4 = (undefined8 *)((long)ptr1 + (ulong)(uint_var - 1));\n        }\n      }\n      else {\n        *(undefined *)char_ptr4 = 0x5e;\n        *(byte *)((long)char_ptr4 + 1) = byte1 + 0x40;\n        char_ptr4 = (undefined8 *)((long)char_ptr4 + 2);\n        ptr4 = ptr1;\n      }\n    }\n    *(undefined *)char_ptr4 = 0;\n    ptr4 = ptr2;\n  }\njoined_r0x00104864:\n  if ((((param_array != (long *)0x0) && (param_array[2] != 0)) && (DAT_0010b234 != 0)) &&\n     ((char_ptr2 = (char *)(**(code **)(*(long *)(param_4 + 8) + 0x220))\n                                  (param_4,param_array[2],0,stack_array), char_ptr2 != (char *)0x0 &&\n      (*char_ptr2 != '\\0')))) {\n    ptr3 = &DAT_001071e0;\n    if ((stack_array[0] == '\\0') && (*(long *)(param_array[2] + 0x20) != 0x10c2a8)) {\n      ptr3 = &DAT_001071df;\n    }\n    decoded_string = (undefined8 *)reconcat(decoded_string,ptr4,ptr3,char_ptr2,0);\n    ptr4 = decoded_string;\n  }\n  printf(format_string,ptr4);\n  if (char_ptr != (char *)0x0) {\n    *char_ptr = '@';\n  }\nLAB_001047ba:\n  free(decoded_string);\n  return;\n}\n\n",
            "current_name": "print_formatted_string_00104740",
            "entrypoint": "0x00104740",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104740": "print_formatted_string_00104740",
                "__ptr": "decoded_string",
                "__s": "char_ptr3",
                "__s_00": "char_ptr4",
                "acStack_39": "stack_array",
                "bVar15": "byte3",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "int_var",
                "lVar13": "long_var",
                "param_1": "format_string",
                "param_2": "param_array",
                "param_3": "string_pointer",
                "pcVar6": "char_ptr",
                "pcVar8": "char_ptr2",
                "puVar1": "ptr1",
                "puVar11": "ptr3",
                "puVar12": "ptr4",
                "puVar7": "ptr2",
                "sVar5": "size",
                "uVar10": "ulong_var2",
                "uVar14": "uint_var",
                "uVar9": "ulong_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001047d0": {
            "additional_data": {
                "FUN_001047d0": {
                    "1": "print_formatted_output",
                    "12": "print_and_free",
                    "2": "print_formatted_text",
                    "3": "print_and_free_memory",
                    "7": "print_formatted_string"
                },
                "pcVar1": {
                    "1": "function_result",
                    "2": "result_value",
                    "5": "result"
                },
                "reconcat": {
                    "1": "reconcatenate"
                },
                "unaff_R12": {
                    "1": "counter_ptr",
                    "2": "error_code",
                    "4": "output_flag"
                },
                "unaff_R13": {
                    "1": "message_ptr",
                    "2": "result_string",
                    "3": "formatted_string",
                    "5": "concatenated_string"
                },
                "unaff_R14": {
                    "1": "format_specifier",
                    "27": "format_string",
                    "3": "format_str"
                },
                "unaff_R15": {
                    "1": "some_pointer",
                    "2": "context",
                    "3": "function_context",
                    "5": "function_pointer"
                },
                "unaff_RBX": {
                    "1": "buffer_ptr",
                    "11": "concatenated_string",
                    "2": "result_string",
                    "3": "buffer",
                    "4": "result"
                }
            },
            "called": [
                "FUN_00102040",
                "FUN_00102060",
                "FUN_00102190"
            ],
            "calling": [
                "FUN_0010268b",
                "FUN_00102739"
            ],
            "code": "\nvoid print_and_free_001047d0(void)\n\n{\n  char *result;\n  void *concatenated_string;\n  undefined *flag_ptr;\n  void *concatenated_string;\n  char *format_string;\n  long function_pointer;\n  \n  if (((DAT_0010b234 != 0) &&\n      (result = (char *)(**(code **)(*(long *)(function_pointer + 8) + 0x220))(), result != (char *)0x0))\n     && (*result != '\\0')) {\n    concatenated_string = (void *)reconcatenate();\n    concatenated_string = concatenated_string;\n  }\n  printf(format_string,concatenated_string);\n  if (flag_ptr != (undefined *)0x0) {\n    *flag_ptr = 0x40;\n  }\n  free(concatenated_string);\n  return;\n}\n\n",
            "current_name": "print_and_free_001047d0",
            "entrypoint": "0x001047d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001047d0": "print_and_free_001047d0",
                "pcVar1": "result",
                "reconcat": "reconcatenate",
                "unaff_R12": "flag_ptr",
                "unaff_R13": "concatenated_string",
                "unaff_R14": "format_string",
                "unaff_R15": "function_pointer",
                "unaff_RBX": "concatenated_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001048e0": {
            "additional_data": {
                "(buffer[b] | buffer[b + 1] << 8)": {
                    "1": "buffer_val"
                },
                "(long)ppuVar8[8]": {
                    "1": "long_var_3"
                },
                "(long)puVar11[8]": {
                    "1": "long_var_2"
                },
                "*(int *)(ppuVar13[1] + 1)": {
                    "1": "int_var_2"
                },
                "DAT_0010b230": {
                    "1": "constant4"
                },
                "DAT_0010b768": {
                    "1": "constant12"
                },
                "DAT_0010b770": {
                    "1": "constant18"
                },
                "DAT_0010b778": {
                    "1": "constant16"
                },
                "DAT_0010b780": {
                    "1": "constant17"
                },
                "DAT_0010b788": {
                    "1": "constant2"
                },
                "DAT_0010b7d8": {
                    "1": "constant11"
                },
                "DAT_0010b7e4": {
                    "1": "constant7"
                },
                "DAT_0010b7e8": {
                    "1": "constant5"
                },
                "DAT_0010b7f4": {
                    "1": "constant13"
                },
                "DAT_0010b7f8": {
                    "1": "constant19"
                },
                "DAT_0010b7fc": {
                    "1": "constant14"
                },
                "DAT_0010b800": {
                    "1": "constant15"
                },
                "DAT_0010b808": {
                    "1": "constant10"
                },
                "DAT_0010b80c": {
                    "1": "constant20"
                },
                "DAT_0010b810": {
                    "1": "constant3"
                },
                "DAT_0010b81c": {
                    "1": "constant21"
                },
                "FUN_001048e0": {
                    "1": "process_binary"
                },
                "bVar1": {
                    "1": "temp_byte",
                    "10": "byte_var",
                    "2": "byte_value",
                    "3": "flag1",
                    "4": "flag",
                    "5": "byte_var1"
                },
                "bVar19": {
                    "1": "bool_value",
                    "12": "bool_var",
                    "2": "temp_bool",
                    "3": "flag2",
                    "5": "bool_var19"
                },
                "bVar20": {
                    "1": "temp_byte2",
                    "2": "byte_flag",
                    "3": "byte_var",
                    "5": "byte_var20",
                    "6": "byte_var2"
                },
                "bfd_fatal": {
                    "1": "bfd_error_func"
                },
                "bfd_get_error": {
                    "1": "bfd_error_func"
                },
                "buffer[i]": {
                    "1": "buffer_index"
                },
                "cVar3": {
                    "1": "temp_char_var",
                    "15": "char_var",
                    "2": "temp_char",
                    "3": "char_value",
                    "4": "char_var3"
                },
                "dcgettext": {
                    "1": "localized_string_func"
                },
                "display_rel_file_cold": {
                    "1": "display_file_func"
                },
                "free": {
                    "1": "free_memory_func"
                },
                "iVar4": {
                    "1": "int_value",
                    "15": "int_var",
                    "2": "temp_int",
                    "4": "int_var4"
                },
                "input_data[1][0x41]": {
                    "1": "function_2"
                },
                "input_data[1][0x44]": {
                    "1": "byte_1"
                },
                "input_data[1][0x46]": {
                    "1": "function_3"
                },
                "input_data[1][0x4d]": {
                    "1": "function_1"
                },
                "lVar10": {
                    "1": "temp_long_var2",
                    "2": "long_value_2",
                    "5": "long_var10",
                    "6": "long_var2"
                },
                "lVar7": {
                    "1": "temp_local_var3",
                    "15": "long_var",
                    "2": "temp_long",
                    "3": "long_value",
                    "4": "long_var7"
                },
                "local_40": {
                    "1": "local_array_value",
                    "2": "local_data",
                    "7": "local_array"
                },
                "local_40 [2]": {
                    "1": "local_list_var"
                },
                "local_48": {
                    "1": "local_48",
                    "3": "local_var48",
                    "9": "local_var2"
                },
                "local_4c": {
                    "1": "local_var",
                    "2": "temp_uint2",
                    "3": "local_var4c",
                    "8": "local_var1"
                },
                "malloc": {
                    "1": "allocate_memory_func"
                },
                "memcpy": {
                    "1": "memory_copy_func"
                },
                "non_fatal": {
                    "1": "error_func"
                },
                "pVar10": {
                    "1": "pu_var11"
                },
                "param_1": {
                    "1": "object_ptr",
                    "13": "input_data",
                    "2": "input_params",
                    "3": "binary_data"
                },
                "param_2": {
                    "1": "input2",
                    "2": "parameter_2",
                    "3": "input1",
                    "6": "param2",
                    "7": "param_2"
                },
                "param_3": {
                    "1": "param_b",
                    "2": "parameter_3",
                    "3": "input2",
                    "6": "param3",
                    "7": "param_3"
                },
                "param_4": {
                    "1": "argument4",
                    "2": "parameter_4",
                    "3": "input3",
                    "6": "param4",
                    "7": "param_4"
                },
                "param_5": {
                    "1": "ppu_data1",
                    "2": "param_5",
                    "5": "output_data1",
                    "6": "output_data"
                },
                "param_6": {
                    "1": "output_data_2",
                    "2": "param_6",
                    "5": "output_data2"
                },
                "pcVar2": {
                    "1": "pointer_var2",
                    "10": "function_ptr",
                    "2": "code_var2",
                    "7": "function_pointer"
                },
                "ppuStack_78": {
                    "1": "temp_stack_ptr"
                },
                "ppuVar12": {
                    "1": "pointer_to_pointer_value_3",
                    "2": "pointer_to_pointer3"
                },
                "ppuVar13": {
                    "1": "double_ulong_pointer_var13",
                    "2": "pointer_pointer_var4"
                },
                "ppuVar14": {
                    "1": "ppu_var14",
                    "2": "pointer_pointer_var5"
                },
                "ppuVar14[2]": {
                    "1": "ppu_var14_index_2"
                },
                "ppuVar14[7]": {
                    "1": "ppu_var14_index"
                },
                "ppuVar15": {
                    "1": "double_ulong_pointer_var15",
                    "2": "pointer_to_pointer6"
                },
                "ppuVar16": {
                    "1": "temp_array",
                    "2": "pointer_to_pointer7"
                },
                "ppuVar17": {
                    "1": "double_ulong_pointer_var17",
                    "2": "pointer_pointer_var8"
                },
                "ppuVar18": {
                    "1": "processed_array2",
                    "2": "pointer_to_pointer9"
                },
                "ppuVar8": {
                    "1": "temp_ulong_double_pointer_1",
                    "2": "pointer_pointer_var1",
                    "3": "pointer_to_pointer1"
                },
                "ppuVar9": {
                    "1": "pointer_to_pointer_value_2",
                    "2": "pointer_to_pointer_var9",
                    "3": "pointer_to_pointer2"
                },
                "ppuVar9[1][0x4e]": {
                    "1": "function_4"
                },
                "print_error_message_00106530": {
                    "1": "print_error_message"
                },
                "puVar11": {
                    "1": "pointer_var1",
                    "2": "pointer_value",
                    "4": "pointer_var"
                },
                "qsort": {
                    "1": "qsort_func"
                },
                "realloc": {
                    "1": "reallocate_memory_func"
                },
                "report_data_00106400": {
                    "1": "report_data"
                },
                "strcmp": {
                    "1": "string_compare_func"
                },
                "uVar5": {
                    "1": "uint1",
                    "14": "uint_var",
                    "2": "uint_variable",
                    "4": "uint_var5"
                },
                "uVar6": {
                    "1": "undefined8_var6",
                    "2": "output_var",
                    "7": "ulong_var"
                },
                "unaff_R14": {
                    "1": "register_14",
                    "2": "unaff_var3"
                },
                "unaff_R15": {
                    "1": "pointer_array_m",
                    "2": "unaffected_r15"
                },
                "unaff_RBP": {
                    "1": "ppu_unaff_rbp",
                    "2": "unaffected_rbp"
                },
                "unaff_RBX": {
                    "1": "pointer_var2",
                    "2": "unaffected_rbx"
                },
                "which": {
                    "1": "which_var"
                },
                "xmalloc": {
                    "1": "allocate_memory_func"
                }
            },
            "called": [
                "FUN_00106400",
                "FUN_00106530",
                "FUN_00102150",
                "FUN_001021d0"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\n\n\nvoid process_binary_001048e0(ulong **input_data,undefined8 param_2,undefined8 param_3,undefined8 param_4,\n                 ulong **output_data,ulong **output_data2)\n\n{\n  byte byte_var;\n  code *function_ptr;\n  char char_var;\n  int int_var;\n  uint uint_var;\n  undefined8 ulong_var;\n  long long_var;\n  ulong **pointer_to_pointer1;\n  ulong **pointer_to_pointer2;\n  long long_var2;\n  ulong *pointer_var;\n  ulong **unaffected_rbx;\n  ulong **pointer_to_pointer3;\n  ulong **pointer_to_pointer4;\n  ulong **unaffected_rbp;\n  ulong **pointer_to_pointer5;\n  ulong **pointer_to_pointer6;\n  ulong **pointer_to_pointer7;\n  ulong **pointer_to_pointer8;\n  ulong **pointer_to_pointer9;\n  ulong **unaffected_r14;\n  ulong **unaffected_r15;\n  bool bool_var;\n  byte byte_var2;\n  ulong **pointer_to_pointer_to_ulong_variable_9;\n  uint local_var1;\n  ulong *local_var2;\n  ulong **local_array [2];\n  \n  byte_var2 = 0;\n  local_var2 = (ulong *)0x0;\n  if ((DAT_0010b80c != 0) || ((*(byte *)((long)input_data + 0x44) & 0x10) != 0)) {\n    pointer_to_pointer2 = (ulong **)&local_var1;\n    pointer_to_pointer1 = (ulong **)(*(code *)input_data[1][0x4d])(input_data,DAT_0010b80c != 0,local_array);\n    if ((long)pointer_to_pointer1 < 0) {\n      if ((DAT_0010b80c != 0) && (int_var = bfd_error_func(), int_var == 7)) {\n        if (_DAT_0010b810 != 0) {\n          return;\n        }\n        pointer_var = *input_data;\n        ulong_var = localized_string_func(0,\"%s: no symbols\",5);\n        error_func(ulong_var,pointer_var);\n        return;\n      }\n      bfd_error_func(*input_data);\n      goto LAB_00102e9e;\n    }\n    if (pointer_to_pointer1 != (ulong **)0x0) {\n      if (DAT_0010b788 != 0) {\n        if (local_var1 == 8) goto LAB_00102d06;\n        goto LAB_00102cc2;\n      }\n      byte_var = *(byte *)((long)input_data + 0x4a);\n      pointer_to_pointer4 = input_data;\n      do {\n        if ((byte_var & 0x10) != 0) {\n          unaffected_rbx = (ulong **)*pointer_to_pointer4;\n          DAT_0010b230 = '\\0';\n          ulong_var = localized_string_func(0,\"%s: plugin needed to handle lto object\",5);\n          error_func(ulong_var);\n        }\n        pointer_to_pointer5 = local_array[0];\n        unaffected_r14 = (ulong **)(ulong)local_var1;\n        bool_var = DAT_0010b80c != 0;\n        pointer_to_pointer2 = local_array[0];\n        unaffected_r15 = (ulong **)(*(code *)pointer_to_pointer4[1][0x41])(pointer_to_pointer4);\n        pointer_to_pointer3 = unaffected_rbx;\n        unaffected_rbp = (ulong **)(ulong)bool_var;\n        input_data = pointer_to_pointer4;\n        if (unaffected_r15 == (ulong **)0x0) goto LAB_00102ea7;\n        pointer_to_pointer8 = (ulong **)((long)pointer_to_pointer1 * (long)unaffected_r14);\n        pointer_to_pointer1 = (ulong **)((long)pointer_to_pointer5 + (long)pointer_to_pointer8);\n        input_data = pointer_to_pointer5;\n        pointer_to_pointer3 = pointer_to_pointer5;\njoined_r0x001049a4:\n        if (input_data < pointer_to_pointer1) {\n          do {\n            pointer_to_pointer2 = (ulong **)(*(code *)pointer_to_pointer4[1][0x4e])(pointer_to_pointer4,bool_var,input_data,unaffected_r15);\n            pointer_to_pointer8 = unaffected_r15;\n            if (pointer_to_pointer2 == (ulong **)0x0) goto LAB_00102eb0;\n            pointer_var = pointer_to_pointer2[1];\n            pointer_to_pointer8 = pointer_to_pointer1;\n            if (((pointer_var == (ulong *)0x0) || (*(char *)pointer_var != '_')) ||\n               (*(char *)((long)pointer_var + 1) != '_')) {\nLAB_00104a03:\n              if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n              uint_var = (uint)(pointer_to_pointer2[4] == (ulong *)0x10c2a8);\nLAB_00104af9:\n              if (uint_var == 0) goto code_r0x00104b01;\nLAB_00104a2d:\n              if (DAT_0010b81c == 0) {\n                if ((*(byte *)(pointer_to_pointer2 + 3) & 4) == 0) {\n                  if (DAT_0010b7f8 != 0) goto process_lto_object_00104d5b;\nLAB_00104a53:\n                  output_data2 = (ulong **)(ulong)DAT_0010b7e4;\n                  if (DAT_0010b7e4 == 0) {\n                    char_var = (*(code *)pointer_to_pointer4[1][0x46])(pointer_to_pointer4,pointer_to_pointer2);\n                    if (char_var != '\\0') {\n                      display_file_func();\n                      return;\n                    }\n                    goto LAB_00104a7b;\n                  }\n                  if (pointer_to_pointer2[4] != (ulong *)0x10c2a8) goto LAB_00104cba;\n                }\n              }\n              else {\n                if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nprocess_lto_object_00104d5b:\n                if ((pointer_to_pointer2[4] == (ulong *)0x10c2a8) || (pointer_to_pointer2[4] == (ulong *)0x10c3c0))\n                goto LAB_001049c3;\nLAB_00104cba:\n                char_var = (*(code *)pointer_to_pointer4[1][0x46])(pointer_to_pointer4,pointer_to_pointer2);\n                if (char_var != '\\0') {\n                  display_file_func();\n                  return;\n                }\nLAB_00104a7b:\n                if (pointer_to_pointer3 != input_data) {\n                  if (unaffected_r14 == (ulong **)0x8) {\n                    *pointer_to_pointer3 = *input_data;\n                    process_symbols_001049c0();\n                    return;\n                  }\n                  for (; unaffected_r14 != (ulong **)0x0; unaffected_r14 = (ulong **)((long)unaffected_r14 + -1)) {\n                    *(undefined *)pointer_to_pointer3 = *(undefined *)input_data;\n                    input_data = (ulong **)((long)input_data + (ulong)byte_var2 * -2 + 1);\n                    pointer_to_pointer3 = (ulong **)((long)pointer_to_pointer3 + (ulong)byte_var2 * -2 + 1);\n                  }\n                  process_symbols_001049c0();\n                  return;\n                }\n                pointer_to_pointer3 = (ulong **)((long)pointer_to_pointer3 + (long)unaffected_r14);\n              }\n            }\n            else {\n              int_var = string_compare_func((char *)((long)pointer_var + (ulong)(*(char *)((long)pointer_var + 2) == '_')),\n                             \"__gnu_lto_slim\");\n              pointer_to_pointer_to_ulong_variable_9 = pointer_to_pointer2;\n              if (int_var == 0) {\n                if (DAT_0010b230 != '\\0') {\n                  pointer_to_pointer_to_ulong_variable_9 = (ulong **)*pointer_to_pointer4;\n                  DAT_0010b230 = '\\0';\n                  ulong_var = localized_string_func(0,\"%s: plugin needed to handle lto object\",5);\n                  error_func(ulong_var,pointer_to_pointer_to_ulong_variable_9);\n                }\n                goto LAB_00104a03;\n              }\n              if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n              if (DAT_0010b808 == 0) {\n                if (DAT_0010b7d8 != 0) {\n                  uint_var = (*(uint *)(pointer_to_pointer2 + 3) >> 7 ^ 1) & 1;\n                  goto LAB_00104af9;\n                }\n                goto LAB_00104a2d;\n              }\n              if ((((*(uint *)(pointer_to_pointer2 + 3) & 0x800082) != 0) || (pointer_to_pointer2[4] == (ulong *)0x10c2a8))\n                 || ((*(byte *)((long)pointer_to_pointer2[4] + 0x25) & 0x10) != 0)) goto LAB_00104a2d;\n            }\nLAB_001049c3:\n            input_data = (ulong **)((long)input_data + (long)unaffected_r14);\n            if (pointer_to_pointer1 <= input_data) break;\n          } while( true );\n        }\n        pointer_to_pointer3 = (ulong **)((long)pointer_to_pointer3 - (long)pointer_to_pointer5);\n        if (unaffected_r14 == (ulong **)0x8) {\n          pointer_var = pointer_to_pointer4[1];\n          pointer_to_pointer5 = (ulong **)((long)pointer_to_pointer3 + 7);\n          if (-1 < (long)pointer_to_pointer3) {\n            pointer_to_pointer5 = pointer_to_pointer3;\n          }\n          output_data = (ulong **)(ulong)DAT_0010b800;\n          function_ptr = (code *)pointer_var[0x41];\n          pointer_to_pointer5 = (ulong **)((long)pointer_to_pointer5 >> 3);\n        }\n        else {\n          pointer_to_pointer5 = (ulong **)((long)pointer_to_pointer3 / (long)unaffected_r14);\n          pointer_var = pointer_to_pointer4[1];\n          function_ptr = (code *)pointer_var[0x41];\n        }\n        if (DAT_0010b800 != 0) goto LAB_00104be2;\n        DAT_0010b778 = DAT_0010b80c != 0;\n        DAT_0010b780 = pointer_to_pointer4;\n        DAT_0010b770 = (ulong **)(*function_ptr)(pointer_to_pointer4);\n        DAT_0010b768 = (ulong **)(*(code *)pointer_to_pointer4[1][0x41])(pointer_to_pointer4);\n        pointer_to_pointer3 = local_array[0];\n        if ((DAT_0010b770 != (ulong **)0x0) && (DAT_0010b768 != (ulong **)0x0)) {\n          pointer_to_pointer1 = (ulong **)(ulong)local_var1;\n          if (DAT_0010b7f8 != 0) {\n            bool_var = DAT_0010b80c != 0;\n            qsort_func(local_array[0],(size_t)pointer_to_pointer5,(size_t)pointer_to_pointer1,size_forward1);\n            pointer_to_pointer8 = (ulong **)allocate_memory_func((long)pointer_to_pointer5 << 4);\n            pointer_to_pointer9 = DAT_0010b770;\n            input_data = DAT_0010b768;\n            unaffected_r14 = (ulong **)((long)pointer_to_pointer5 * (long)pointer_to_pointer1 + (long)pointer_to_pointer3);\n            pointer_to_pointer2 = DAT_0010b770;\n            if (unaffected_r14 <= pointer_to_pointer3) goto LAB_00102ec2;\n            output_data2 = DAT_0010b768;\n            pointer_to_pointer5 = (ulong **)(*(code *)pointer_to_pointer4[1][0x4e])(pointer_to_pointer4,bool_var,pointer_to_pointer3);\n            output_data = pointer_to_pointer1;\n            pointer_to_pointer_to_ulong_variable_9 = pointer_to_pointer8;\n            if (pointer_to_pointer5 == (ulong **)0x0) goto LAB_00102eb9;\n            goto LAB_00104e35;\n          }\n          qsort_func(local_array[0],(size_t)pointer_to_pointer5,(size_t)pointer_to_pointer1,\n                (__compar_fn_t)\n                (&PTR_non_numeric_forward_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2]);\n          pointer_var = pointer_to_pointer4[1];\nLAB_00104be2:\n          input_data = pointer_to_pointer4;\n          pointer_to_pointer9 = (ulong **)0x0;\n          goto LAB_00104be5;\n        }\n        bfd_error_func(*pointer_to_pointer4);\n        input_data = pointer_to_pointer4;\n        pointer_to_pointer3 = unaffected_r15;\n        while( true ) {\n          unaffected_rbx = (ulong **)allocate_memory_func();\n          pointer_to_pointer1 = (ulong **)(*(code *)input_data[1][0x6b])(input_data,unaffected_rbx);\n          pointer_to_pointer2 = pointer_to_pointer8;\n          if (-1 < (long)pointer_to_pointer1) break;\n          pointer_to_pointer4 = (ulong **)*input_data;\n          pointer_to_pointer5 = (ulong **)bfd_error_func(pointer_to_pointer4,pointer_to_pointer8);\nLAB_00102dbe:\n          pointer_var = ppu_var14_index_2;\n          pointer_to_pointer2 = (ulong **)0x0;\nLAB_00102dc4:\n          pointer_var = (ulong *)(long_var_3 - (long)pointer_var);\n          pointer_to_pointer9 = input_data;\n          pointer_to_pointer6 = pointer_to_pointer3;\nLAB_00104ea7:\n          pointer_to_pointer5 = pointer_to_pointer2;\n          pointer_to_pointer3 = unaffected_rbx;\n          input_data = output_data2;\n          if (pointer_var != (ulong *)0x0) {\n            *pointer_to_pointer8 = (ulong *)pointer_to_pointer6;\n            pointer_to_pointer8[1] = pointer_var;\n            pointer_to_pointer8 = pointer_to_pointer8 + 2;\n          }\nLAB_00104e35:\n          output_data2 = pointer_to_pointer9;\n          if (pointer_to_pointer3 < unaffected_r14) goto code_r0x00104e3e;\n          pointer_to_pointer5 = (ulong **)((long)pointer_to_pointer8 - (long)pointer_to_pointer_to_ulong_variable_9 >> 4);\n          qsort_func(pointer_to_pointer_to_ulong_variable_9,(size_t)pointer_to_pointer5,0x10,size_forward2);\n          pointer_var = pointer_to_pointer4[1];\n          input_data = pointer_to_pointer4;\n          pointer_to_pointer9 = pointer_to_pointer_to_ulong_variable_9;\nLAB_00104be5:\n          unaffected_rbx = local_array[0];\n          pointer_to_pointer1 = (ulong **)(ulong)DAT_0010b7f8;\n          unaffected_r14 = (ulong **)(ulong)(DAT_0010b80c != 0);\n          if (DAT_0010b7f8 != 0) {\n            pointer_to_pointer8 = (ulong **)(*(code *)pointer_var[0x41])(input_data);\n            if (pointer_to_pointer8 == (ulong **)0x0) goto LAB_00102ed2;\n            pointer_to_pointer3 = pointer_to_pointer9 + (long)pointer_to_pointer5 * 2;\n            pointer_to_pointer5 = pointer_to_pointer9;\n            goto LAB_00104ee9;\n          }\n          pointer_to_pointer1 = (ulong **)(ulong)local_var1;\n          unaffected_r15 = (ulong **)(*(code *)pointer_var[0x41])(input_data);\n          if (unaffected_r15 != (ulong **)0x0) {\n            unaffected_rbp = (ulong **)((long)pointer_to_pointer5 * (long)pointer_to_pointer1 + (long)unaffected_rbx);\n            if (unaffected_rbx < unaffected_rbp) goto LAB_00104c38;\n            goto LAB_00104c75;\n          }\n          bfd_error_func(*input_data);\n          unaffected_r15 = pointer_to_pointer9;\nLAB_00102d06:\n          pointer_to_pointer2 = pointer_to_pointer1;\n          if (DAT_0010b80c != 0) {\n            unaffected_rbx = local_array[0];\n            pointer_to_pointer5 = (ulong **)0x0;\n            pointer_to_pointer8 = (ulong **)0x0;\n            break;\n          }\n          long_var2 = (*(code *)input_data[1][0x6a])(input_data);\n          pointer_to_pointer5 = local_array[0];\n          pointer_to_pointer8 = pointer_to_pointer1;\n          pointer_to_pointer3 = unaffected_r15;\n          if (long_var2 < 1) {\n            pointer_to_pointer1 = (ulong **)0x0;\n            unaffected_rbx = (ulong **)0x0;\n            break;\n          }\n        }\n        output_data2 = &local_var2;\n        output_data = unaffected_rbx;\n        long_var2 = (*(code *)input_data[1][0x6c])(input_data,pointer_to_pointer8,pointer_to_pointer5,pointer_to_pointer1);\n        pointer_to_pointer1 = pointer_to_pointer2;\n        if (0 < long_var2) {\n          pointer_to_pointer1 = (ulong **)((long)pointer_to_pointer2 + long_var2);\n          local_array[0] = (ulong **)xreallocate_memory_func(local_array[0]);\n          long_var = 0;\n          do {\n            local_array[0][(long)pointer_to_pointer2 + long_var] = local_var2 + long_var * 6;\n            long_var = long_var + 1;\n          } while (long_var2 != long_var);\n          local_array[0][(long)pointer_to_pointer2 + long_var2] = (ulong *)0x0;\n        }\n        if ((DAT_0010b80c == 0) && (unaffected_rbx != (ulong **)0x0)) {\n          free_memory_func(unaffected_rbx);\n        }\nLAB_00102cc2:\n        byte_var = *(byte *)((long)input_data + 0x4a);\n        pointer_to_pointer4 = input_data;\n      } while( true );\n    }\n  }\n  if (_DAT_0010b810 == 0) {\n    pointer_var = *input_data;\n    ulong_var = localized_string_func(0,\"%s: no symbols\",5);\n    error_func(ulong_var,pointer_var);\n  }\n  return;\ncode_r0x00104b01:\n  input_data = (ulong **)((long)input_data + (long)unaffected_r14);\n  goto joined_r0x001049a4;\ncode_r0x00104e3e:\n  unaffected_rbx = (ulong **)((long)pointer_to_pointer3 + (long)output_data);\n  if (unaffected_r14 <= unaffected_rbx) {\n    pointer_to_pointer1 = (ulong **)pointer_to_pointer5[4];\n    if ((*(uint *)(pointer_to_pointer5 + 3) & 0x200100) != 0) goto LAB_00102dbe;\n    pointer_to_pointer2 = (ulong **)0x0;\nLAB_00104e95:\n    pointer_to_pointer9 = input_data;\n    pointer_to_pointer6 = pointer_to_pointer3;\n    if (*(int *)(pointer_to_pointer4[1] + 1) == 5) {\n      pointer_var = ppu_var14_index;\n      goto LAB_00104ea7;\n    }\n    pointer_var = ppu_var14_index_2;\n    if ((*(byte *)((long)pointer_to_pointer1 + 0x25) & 0x10) != 0) goto LAB_00104ea7;\n    if (unaffected_r14 <= unaffected_rbx) goto LAB_00102dc4;\n    goto LAB_00102ee7;\n  }\n  pointer_to_pointer1 = input_data;\n  pointer_to_pointer6 = output_data;\n  pointer_to_pointer7 = output_data2;\n  pointer_to_pointer2 = (ulong **)(*(code *)pointer_to_pointer4[1][0x4e])();\n  pointer_to_pointer9 = pointer_to_pointer3;\n  if (pointer_to_pointer2 == (ulong **)0x0) goto LAB_00102edb;\n  pointer_to_pointer1 = (ulong **)pointer_to_pointer5[4];\n  if ((*(uint *)(pointer_to_pointer5 + 3) & 0x200100) == 0) goto LAB_00104e95;\n  goto LAB_00102ee3;\nLAB_00104ee9:\n  if (pointer_to_pointer3 <= pointer_to_pointer5) {\nLAB_00104c75:\n    if (local_var2 == (ulong *)0x0) {\n      free_memory_func(local_array[0]);\n      free_memory_func(pointer_to_pointer9);\n      return;\n    }\n    free_memory_func(local_var2);\n    free_memory_func(local_array[0]);\n    free_memory_func(pointer_to_pointer9);\n    return;\n  }\n  pointer_to_pointer1 = pointer_to_pointer8;\n  long_var2 = (*(code *)input_data[1][0x4e])(input_data,unaffected_r14,*pointer_to_pointer5);\n  if (long_var2 == 0) goto LAB_00102ec9;\n  pointer_to_pointer1 = pointer_to_pointer5 + 1;\n  pointer_to_pointer5 = pointer_to_pointer5 + 2;\n  print_symbol(input_data,long_var2,*pointer_to_pointer1,param_2);\n  goto LAB_00104ee9;\nLAB_00102ec9:\n  bfd_error_func(*input_data,0);\nLAB_00102ed2:\n  pointer_to_pointer4 = (ulong **)*input_data;\n  bfd_error_func();\n  unaffected_rbx = pointer_to_pointer3;\n  pointer_to_pointer6 = output_data;\n  pointer_to_pointer7 = output_data2;\nLAB_00102edb:\n  output_data2 = pointer_to_pointer7;\n  output_data = pointer_to_pointer6;\n  pointer_to_pointer4 = (ulong **)*pointer_to_pointer4;\n  pointer_to_pointer2 = (ulong **)bfd_error_func();\n  pointer_to_pointer3 = pointer_to_pointer9;\nLAB_00102ee3:\n  pointer_var = ppu_var14_index_2;\nLAB_00102ee7:\n  if (pointer_to_pointer1 != (ulong **)pointer_to_pointer2[4]) goto LAB_00102dc4;\n  pointer_var = (ulong *)((long)pointer_to_pointer2[2] - (long)pointer_var);\n  pointer_to_pointer9 = input_data;\n  pointer_to_pointer6 = pointer_to_pointer3;\n  goto LAB_00104ea7;\nLAB_00104c38:\n  while (pointer_to_pointer2 = unaffected_r15, long_var2 = (*(code *)input_data[1][0x4e])(input_data,unaffected_r14,unaffected_rbx),\n        long_var2 != 0) {\n    unaffected_rbx = (ulong **)((long)unaffected_rbx + (long)pointer_to_pointer1);\n    print_symbol(input_data,long_var2,0,param_2);\n    if (unaffected_rbp <= unaffected_rbx) goto LAB_00104c75;\n  }\nLAB_00102e9e:\n  bfd_error_func(*input_data);\n  pointer_to_pointer3 = unaffected_rbx;\nLAB_00102ea7:\n  pointer_to_pointer4 = unaffected_rbp;\n  bfd_error_func(*input_data);\n  pointer_to_pointer8 = unaffected_r15;\nLAB_00102eb0:\n  bfd_error_func(*pointer_to_pointer4);\n  pointer_to_pointer4 = input_data;\nLAB_00102eb9:\n  bfd_error_func(*pointer_to_pointer4);\n  input_data = output_data2;\nLAB_00102ec2:\n  pointer_to_pointer5 = (ulong **)0x0;\n  output_data = pointer_to_pointer1;\n  pointer_to_pointer9 = pointer_to_pointer2;\n  pointer_to_pointer_to_ulong_variable_9 = pointer_to_pointer8;\n  goto LAB_00104e35;\n}\n\n",
            "current_name": "process_binary_001048e0",
            "entrypoint": "0x001048e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "(long)ppuVar8[8]": "long_var_3",
                "FUN_001048e0": "process_binary_001048e0",
                "bVar1": "byte_var",
                "bVar19": "bool_var",
                "bVar20": "byte_var2",
                "bfd_fatal": "bfd_error_func",
                "bfd_get_error": "bfd_error_func",
                "cVar3": "char_var",
                "dcgettext": "localized_string_func",
                "display_rel_file_cold": "display_file_func",
                "free": "free_memory_func",
                "iVar4": "int_var",
                "lVar10": "long_var2",
                "lVar7": "long_var",
                "local_40": "local_array",
                "local_48": "local_var2",
                "local_4c": "local_var1",
                "malloc": "allocate_memory_func",
                "non_fatal": "error_func",
                "param_1": "input_data",
                "param_5": "output_data",
                "param_6": "output_data2",
                "pcVar2": "function_ptr",
                "ppuStack_78": "pointer_to_pointer_to_ulong_variable_9",
                "ppuVar12": "pointer_to_pointer3",
                "ppuVar13": "pointer_to_pointer4",
                "ppuVar14": "pointer_to_pointer5",
                "ppuVar14[2]": "ppu_var14_index_2",
                "ppuVar14[7]": "ppu_var14_index",
                "ppuVar15": "pointer_to_pointer6",
                "ppuVar16": "pointer_to_pointer7",
                "ppuVar17": "pointer_to_pointer8",
                "ppuVar18": "pointer_to_pointer9",
                "ppuVar8": "pointer_to_pointer1",
                "ppuVar9": "pointer_to_pointer2",
                "puVar11": "pointer_var",
                "qsort": "qsort_func",
                "realloc": "reallocate_memory_func",
                "strcmp": "string_compare_func",
                "uVar5": "uint_var",
                "uVar6": "ulong_var",
                "unaff_R14": "unaffected_r14",
                "unaff_R15": "unaffected_r15",
                "unaff_RBP": "unaffected_rbp",
                "unaff_RBX": "unaffected_rbx",
                "xmalloc": "allocate_memory_func"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001049c0": {
            "additional_data": {
                "DAT_0010b768": {
                    "1": "new_symbol_array"
                },
                "DAT_0010b770": {
                    "1": "symbol_data_array"
                },
                "DAT_0010b778": {
                    "1": "is_bfd_fatal_error"
                },
                "DAT_0010b780": {
                    "1": "function_data"
                },
                "FUN_001049c0": {
                    "1": "process_symbol",
                    "9": "process_symbols"
                },
                "__compar_fn_t": {
                    "1": "__compar_fn_t"
                },
                "__ptr": {
                    "1": "pointer_8",
                    "2": "pointer_variable3"
                },
                "bVar16": {
                    "1": "comparison_flag",
                    "2": "is_lto_object",
                    "4": "bool_var"
                },
                "bVar17": {
                    "1": "byte_value",
                    "2": "byte_variable",
                    "3": "increment",
                    "8": "byte_var"
                },
                "cVar3": {
                    "1": "plugin_needed",
                    "2": "is_plugin_needed",
                    "4": "char_var",
                    "7": "result"
                },
                "iVar4": {
                    "1": "strcmp_result",
                    "4": "int_var",
                    "9": "comparison_result"
                },
                "in_R8": {
                    "1": "size1",
                    "2": "register_r8"
                },
                "in_R9": {
                    "1": "ptr_r9"
                },
                "in_stack_00000008": {
                    "1": "stack_value_8",
                    "2": "input1",
                    "3": "print_options"
                },
                "in_stack_00000010": {
                    "1": "temp_buffer",
                    "2": "stack_var2",
                    "3": "stack_variable2"
                },
                "in_stack_00000018": {
                    "1": "stack_value_18",
                    "2": "stack_variable_3",
                    "3": "stack_variable3"
                },
                "in_stack_00000038": {
                    "1": "sort_flags",
                    "2": "stack_var4",
                    "3": "stack_variable4"
                },
                "in_stack_00000038._4_4_": {
                    "1": "symbol_table_entry_size"
                },
                "in_stack_00000040": {
                    "1": "in_stack40",
                    "2": "stack_value_40",
                    "3": "stack_variable5"
                },
                "in_stack_00000048": {
                    "1": "stack_value_48",
                    "2": "stack_variable_6",
                    "3": "stack_variable6"
                },
                "lVar10": {
                    "1": "index"
                },
                "lVar14": {
                    "1": "count"
                },
                "lVar7": {
                    "1": "symbol_size_index",
                    "2": "symbol_address",
                    "3": "size",
                    "5": "long_var"
                },
                "lVar9": {
                    "1": "index",
                    "2": "long_variable2"
                },
                "pcVar1": {
                    "1": "new_variable2",
                    "15": "symbol_name"
                },
                "pcVar2": {
                    "1": "ptr2",
                    "2": "print_symbol_fn",
                    "3": "print_symbol_func",
                    "4": "print_symbol"
                },
                "puVar10": {
                    "1": "pointer_var2",
                    "2": "pointer_variable2"
                },
                "puVar11": {
                    "1": "ptr2",
                    "2": "current_symbol"
                },
                "puVar12": {
                    "1": "symbols",
                    "2": "current_symbol"
                },
                "puVar13": {
                    "1": "buffer",
                    "2": "pointer_5"
                },
                "puVar14": {
                    "1": "symbol2",
                    "2": "pointer_6"
                },
                "puVar15": {
                    "1": "sorted_symbol_list",
                    "2": "sorted_symbols"
                },
                "puVar8": {
                    "1": "symbol_pointer",
                    "2": "pointer_variable",
                    "3": "symbol_data",
                    "6": "symbol"
                },
                "puVar9": {
                    "1": "source"
                },
                "size_forward1": {
                    "1": "size_forward1"
                },
                "size_forward2": {
                    "1": "size_forward2"
                },
                "uVar18": {
                    "1": "is_plugin_needed",
                    "2": "unsigned_variable3"
                },
                "uVar5": {
                    "1": "is_symbol_header",
                    "2": "unsigned_variable",
                    "3": "is_match",
                    "4": "uint_var"
                },
                "uVar6": {
                    "1": "new_variable6",
                    "2": "translation",
                    "3": "ulong_var",
                    "5": "error_message"
                },
                "unaff_R12": {
                    "1": "num_symbols_ptr",
                    "2": "register_r12",
                    "5": "num_symbols"
                },
                "unaff_R13": {
                    "1": "register_5",
                    "2": "symbol_address"
                },
                "unaff_R14": {
                    "1": "new_pointer2",
                    "2": "ptr_r14",
                    "8": "symbol_size"
                },
                "unaff_R15": {
                    "1": "input_symbols",
                    "2": "register_r15"
                },
                "unaff_RBP": {
                    "1": "file_data_ptr",
                    "2": "register_variable2"
                },
                "unaff_RBX": {
                    "1": "ptr_rbx",
                    "2": "register_variable1",
                    "3": "current_symbol"
                },
                "unaff_retaddr": {
                    "1": "return_value_address",
                    "12": "return_address",
                    "2": "ulong_var2"
                }
            },
            "called": [],
            "calling": [
                "FUN_00104d5b"
            ],
            "code": "\nvoid process_symbols_001049c0(void)\n\n{\n  char *symbol_name;\n  code *print_symbol;\n  char result;\n  int comparison_result;\n  uint uint_var;\n  undefined8 error_message;\n  long long_var;\n  undefined8 *symbol;\n  long function_offset;\n  undefined8 *current_symbol_info;\n  undefined8 *current_symbol;\n  undefined8 *pointer_variable3;\n  undefined8 *register_bp;\n  undefined8 *pointer_3;\n  undefined8 *current_symbol;\n  undefined8 *register_r8;\n  undefined8 *pointer_5;\n  undefined8 *ptr_r9;\n  undefined8 *pointer_6;\n  undefined8 *pointer_7;\n  undefined8 *num_symbols;\n  undefined8 *symbol_address;\n  undefined8 *symbol_size;\n  undefined8 *symbol_table;\n  bool bool_var;\n  byte byte_var;\n  ulong return_address;\n  ulong ulong_var3;\n  undefined8 stack_variable1;\n  undefined8 *stack_variable2;\n  undefined8 *stack_variable3;\n  undefined8 stack_variable4;\n  void *stack_variable5;\n  undefined8 *stack_variable6;\n  \n  byte_var = 0;\n  do {\n    current_symbol = (undefined8 *)((long)current_symbol + (long)symbol_size);\nLAB_001049c3:\n    do {\n      do {\n        symbol_address = (undefined8 *)((long)symbol_address + (long)symbol_size);\n        pointer_7 = num_symbols;\n        current_symbol = register_bp;\n        if (num_symbols <= symbol_address) goto LAB_00104b15;\nLAB_001049cf:\n        symbol = (undefined8 *)\n                 (**(code **)(register_bp[1] + 0x270))\n                           (register_bp,return_address & 0xffffffff,symbol_address,symbol_table);\n        pointer_3 = register_bp;\n        current_symbol = symbol_address;\n        pointer_7 = symbol_table;\n        if (symbol == (undefined8 *)0x0) goto LAB_00102eb0;\n        symbol_name = (char *)symbol[1];\n        if (((symbol_name == (char *)0x0) || (*symbol_name != '_')) || (symbol_name[1] != '_')) {\nLAB_00104a03:\n          if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          uint_var = (uint)(symbol[4] == 0x10c2a8);\nLAB_00104af9:\n          if (uint_var != 0) goto LAB_00104a2d;\n          symbol_address = (undefined8 *)((long)symbol_address + (long)symbol_size);\n          pointer_7 = num_symbols;\n          current_symbol = register_bp;\n          if (num_symbols <= symbol_address) {\nLAB_00104b15:\n            current_symbol = (undefined8 *)((long)current_symbol - (long)stack_variable3);\n            if (symbol_size == (undefined8 *)0x8) {\n              function_offset = current_symbol[1];\n              pointer_3 = (undefined8 *)((long)current_symbol + 7);\n              if (-1 < (long)current_symbol) {\n                pointer_3 = current_symbol;\n              }\n              register_r8 = (undefined8 *)(ulong)DAT_0010b800;\n              print_symbol = *(code **)(function_offset + 0x208);\n              pointer_3 = (undefined8 *)((long)pointer_3 >> 3);\n            }\n            else {\n              pointer_3 = (undefined8 *)((long)current_symbol / (long)symbol_size);\n              function_offset = current_symbol[1];\n              print_symbol = *(code **)(function_offset + 0x208);\n            }\n            register_bp = current_symbol;\n            if (DAT_0010b800 == 0) {\n              DAT_0010b778 = DAT_0010b80c != 0;\n              DAT_0010b780 = current_symbol;\n              DAT_0010b770 = (undefined8 *)(*print_symbol)(current_symbol);\n              DAT_0010b768 = (undefined8 *)(**(code **)(current_symbol[1] + 0x208))(current_symbol);\n              current_symbol = stack_variable6;\n              if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n                bfd_fatal(*current_symbol);\n                pointer_variable3 = symbol_table;\n                goto LAB_00102d8e;\n              }\n              num_symbols = (undefined8 *)(ulong)symbol_table_entry_size;\n              if (DAT_0010b7f8 != 0) {\n                ulong_var3 = (ulong)(DAT_0010b80c != 0);\n                qsort(stack_variable6,(size_t)pointer_3,(size_t)num_symbols,size_forward1);\n                pointer_7 = (undefined8 *)xmalloc((long)pointer_3 << 4);\n                pointer_5 = DAT_0010b770;\n                register_bp = DAT_0010b768;\n                symbol_size = (undefined8 *)((long)pointer_3 * (long)num_symbols + (long)current_symbol);\n                symbol = DAT_0010b770;\n                ptr_r9 = DAT_0010b768;\n                if (symbol_size <= current_symbol) goto LAB_00102ec2;\n                pointer_3 = (undefined8 *)\n                          (**(code **)(current_symbol[1] + 0x270))(current_symbol,ulong_var3 & 0xffffffff,current_symbol);\n                pointer_variable3 = current_symbol;\n                register_r8 = num_symbols;\n                stack_variable2 = pointer_7;\n                if (pointer_3 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(stack_variable6,(size_t)pointer_3,(size_t)num_symbols,\n                    (__compar_fn_t)\n                    (&PTR_non_numeric_forward_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2]\n                   );\n              function_offset = current_symbol[1];\n            }\n            pointer_variable3 = (undefined8 *)0x0;\n            do {\n              current_symbol = stack_variable6;\n              symbol = (undefined8 *)(ulong)DAT_0010b7f8;\n              symbol_size = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n              if (DAT_0010b7f8 != 0) {\n                pointer_7 = (undefined8 *)(**(code **)(function_offset + 0x208))(register_bp);\n                if (pointer_7 == (undefined8 *)0x0) goto LAB_00102ed2;\n                current_symbol = pointer_variable3 + (long)pointer_3 * 2;\n                pointer_3 = pointer_variable3;\n                do {\n                  if (current_symbol <= pointer_3) {\nLAB_00104c75:\n                    if (stack_variable5 == (void *)0x0) {\n                      free(stack_variable6);\n                      free(pointer_variable3);\n                      return;\n                    }\n                    free(stack_variable5);\n                    free(stack_variable6);\n                    free(pointer_variable3);\n                    return;\n                  }\n                  symbol = pointer_7;\n                  function_offset = (**(code **)(register_bp[1] + 0x270))(register_bp,symbol_size,*pointer_3);\n                  if (function_offset == 0) {\n                    bfd_fatal(*register_bp,0);\nLAB_00102ed2:\n                    current_symbol = (undefined8 *)*register_bp;\n                    bfd_fatal();\n                    pointer_5 = register_r8;\n                    pointer_6 = ptr_r9;\n                    goto LAB_00102edb;\n                  }\n                  current_symbol = pointer_3 + 1;\n                  pointer_3 = pointer_3 + 2;\n                  print_symbol(register_bp,function_offset,*current_symbol,stack_variable1);\n                } while( true );\n              }\n              num_symbols = (undefined8 *)(ulong)symbol_table_entry_size;\n              symbol_table = (undefined8 *)(**(code **)(function_offset + 0x208))(register_bp);\n              if (symbol_table == (undefined8 *)0x0) {\n                bfd_fatal(*register_bp);\n                current_symbol = num_symbols;\n                if (DAT_0010b80c == 0) {\n                  function_offset = (**(code **)(register_bp[1] + 0x350))(register_bp);\n                  pointer_3 = stack_variable6;\n                  pointer_7 = num_symbols;\n                  if (function_offset < 1) {\n                    symbol = (undefined8 *)0x0;\n                    current_symbol = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    current_symbol = (undefined8 *)xmalloc();\n                    symbol = (undefined8 *)(**(code **)(register_bp[1] + 0x358))(register_bp,current_symbol);\n                    current_symbol = pointer_7;\n                    if ((long)symbol < 0) {\n                      current_symbol = (undefined8 *)*register_bp;\n                      pointer_3 = (undefined8 *)bfd_fatal(current_symbol,pointer_7);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  symbol = num_symbols;\n                  current_symbol = stack_variable6;\n                  pointer_3 = (undefined8 *)0x0;\n                  pointer_7 = (undefined8 *)0x0;\n                }\n                ptr_r9 = &stack0x00000040;\n                register_r8 = current_symbol;\n                function_offset = (**(code **)(register_bp[1] + 0x360))(register_bp,pointer_7,pointer_3,symbol);\n                num_symbols = current_symbol;\n                if (0 < function_offset) {\n                  num_symbols = (undefined8 *)((long)current_symbol + function_offset);\n                  stack_variable6 = (undefined8 *)xrealloc(stack_variable6);\n                  long_var = 0;\n                  do {\n                    stack_variable6[(long)((long)current_symbol + long_var)] =\n                         (void *)(long_var * 0x30 + (long)stack_variable5);\n                    long_var = long_var + 1;\n                  } while (function_offset != long_var);\n                  stack_variable6[(long)((long)current_symbol + function_offset)] = 0;\n                }\n                if ((DAT_0010b80c == 0) && (current_symbol != (undefined8 *)0x0)) {\n                  free(current_symbol);\n                }\n                if ((*(byte *)((long)register_bp + 0x4a) & 0x10) != 0) {\n                  current_symbol = (undefined8 *)*register_bp;\n                  DAT_0010b230 = '\\0';\n                  error_message = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  non_fatal(error_message);\n                }\n                symbol_size = (undefined8 *)(ulong)symbol_table_entry_size;\n                bool_var = DAT_0010b80c != 0;\n                pointer_3 = (undefined8 *)(ulong)bool_var;\n                symbol = stack_variable6;\n                stack_variable3 = stack_variable6;\n                symbol_table = (undefined8 *)(**(code **)(register_bp[1] + 0x208))(register_bp);\n                if (symbol_table != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                pointer_3 = (undefined8 *)((long)pointer_3 * (long)num_symbols + (long)current_symbol);\n                current_symbol = current_symbol;\n                while( true ) {\n                  if (pointer_3 <= current_symbol) goto LAB_00104c75;\n                  symbol = symbol_table;\n                  function_offset = (**(code **)(register_bp[1] + 0x270))(register_bp,symbol_size,current_symbol);\n                  if (function_offset == 0) break;\n                  current_symbol = (undefined8 *)((long)current_symbol + (long)num_symbols);\n                  print_symbol(register_bp,function_offset,0,stack_variable1);\n                }\n                bfd_fatal(*register_bp,0);\n              }\n              bfd_fatal(*register_bp);\n              current_symbol = register_bp;\n              pointer_7 = symbol_table;\nLAB_00102eb0:\n              bfd_fatal(*pointer_3);\nLAB_00102eb9:\n              bfd_fatal(*current_symbol);\nLAB_00102ec2:\n              pointer_3 = (undefined8 *)0x0;\n              pointer_variable3 = current_symbol;\n              register_r8 = num_symbols;\n              pointer_5 = symbol;\n              register_bp = ptr_r9;\n              stack_variable2 = pointer_7;\nLAB_00104e35:\n              while (ptr_r9 = pointer_5, pointer_variable3 < symbol_size) {\n                current_symbol = (undefined8 *)((long)pointer_variable3 + (long)register_r8);\n                if (current_symbol < symbol_size) {\n                  symbol = register_bp;\n                  pointer_5 = register_r8;\n                  pointer_6 = ptr_r9;\n                  current_symbol_info = (undefined8 *)(**(code **)(current_symbol[1] + 0x270))();\n                  if (current_symbol_info == (undefined8 *)0x0) {\nLAB_00102edb:\n                    ptr_r9 = pointer_6;\n                    register_r8 = pointer_5;\n                    current_symbol = (undefined8 *)*current_symbol;\n                    current_symbol_info = (undefined8 *)bfd_fatal();\n                  }\n                  else {\n                    symbol = (undefined8 *)pointer_3[4];\n                    if ((*(uint *)(pointer_3 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  function_offset = pointer_3[2];\nLAB_00102ee7:\n                  if (symbol == (undefined8 *)current_symbol_info[4]) {\n                    function_offset = current_symbol_info[2] - function_offset;\n                    pointer_5 = register_bp;\n                    pointer_6 = pointer_variable3;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  function_offset = symbol[8] - function_offset;\n                  pointer_5 = register_bp;\n                  pointer_6 = pointer_variable3;\n                }\n                else {\n                  symbol = (undefined8 *)pointer_3[4];\n                  if ((*(uint *)(pointer_3 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    function_offset = pointer_3[2];\n                    current_symbol_info = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  current_symbol_info = (undefined8 *)0x0;\nLAB_00104e95:\n                  pointer_5 = register_bp;\n                  pointer_6 = pointer_variable3;\n                  if (*(int *)(current_symbol[1] + 8) == 5) {\n                    function_offset = pointer_3[7];\n                  }\n                  else {\n                    function_offset = pointer_3[2];\n                    if ((*(byte *)((long)symbol + 0x25) & 0x10) == 0) {\n                      if (current_symbol < symbol_size) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                pointer_3 = current_symbol_info;\n                pointer_variable3 = current_symbol;\n                register_bp = ptr_r9;\n                if (function_offset != 0) {\n                  *pointer_7 = pointer_6;\n                  pointer_7[1] = function_offset;\n                  pointer_7 = pointer_7 + 2;\n                }\n              }\n              pointer_3 = (undefined8 *)((long)pointer_7 - (long)stack_variable2 >> 4);\n              qsort(stack_variable2,(size_t)pointer_3,0x10,size_forward2);\n              function_offset = current_symbol[1];\n              current_symbol = pointer_variable3;\n              register_bp = current_symbol;\n              pointer_variable3 = stack_variable2;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        comparison_result = strcmp(symbol_name + (symbol_name[2] == '_'),\"__gnu_lto_slim\");\n        stack_variable2 = symbol;\n        if (comparison_result == 0) {\n          if (DAT_0010b230 != '\\0') {\n            stack_variable2 = (undefined8 *)*register_bp;\n            DAT_0010b230 = '\\0';\n            error_message = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            non_fatal(error_message,stack_variable2);\n          }\n          goto LAB_00104a03;\n        }\n        if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (DAT_0010b808 == 0) {\n          if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n          uint_var = (*(uint *)(symbol + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(symbol + 3) & 0x800082) == 0) && (symbol[4] != 0x10c2a8)) &&\n           ((*(byte *)(symbol[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (DAT_0010b81c != 0) {\n          if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nprocess_lto_object_00104d5b:\n          if ((symbol[4] != 0x10c2a8) && (symbol[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(symbol + 3) & 4) != 0);\n      if (DAT_0010b7f8 != 0) goto process_lto_object_00104d5b;\nLAB_00104a53:\n      ptr_r9 = (undefined8 *)(ulong)DAT_0010b7e4;\n      if (DAT_0010b7e4 == 0) {\n        result = (**(code **)(register_bp[1] + 0x230))(register_bp);\n        if (result != '\\0') {\n          display_rel_file_cold();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (symbol[4] == 0x10c2a8);\nLAB_00104cba:\n    result = (**(code **)(register_bp[1] + 0x230))(register_bp);\n    if (result != '\\0') {\n      display_rel_file_cold();\n      return;\n    }\nLAB_00104a7b:\n    if (current_symbol != symbol_address) {\n      if (symbol_size == (undefined8 *)0x8) {\n        *current_symbol = *symbol_address;\n        process_symbols_001049c0();\n        return;\n      }\n      for (; symbol_size != (undefined8 *)0x0; symbol_size = (undefined8 *)((long)symbol_size + -1)) {\n        *(undefined *)current_symbol = *(undefined *)symbol_address;\n        symbol_address = (undefined8 *)((long)symbol_address + (ulong)byte_var * -2 + 1);\n        current_symbol = (undefined8 *)((long)current_symbol + (ulong)byte_var * -2 + 1);\n      }\n      process_symbols_001049c0();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  pointer_7 = (undefined8 *)((long)num_symbols * (long)symbol_size);\n  num_symbols = (undefined8 *)((long)stack_variable3 + (long)pointer_7);\n  current_symbol = stack_variable3;\n  current_symbol = register_bp;\n  if (stack_variable3 < num_symbols) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  return_address = (ulong)bool_var;\n  symbol_address = stack_variable3;\n  goto LAB_001049cf;\n}\n\n",
            "current_name": "process_symbols_001049c0",
            "entrypoint": "0x001049c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001049c0": "process_symbols_001049c0",
                "__ptr": "pointer_variable3",
                "bVar16": "bool_var",
                "bVar17": "byte_var",
                "cVar3": "result",
                "iVar4": "comparison_result",
                "in_R8": "register_r8",
                "in_R9": "ptr_r9",
                "in_stack_00000008": "stack_variable1",
                "in_stack_00000010": "stack_variable2",
                "in_stack_00000018": "stack_variable3",
                "in_stack_00000038": "stack_variable4",
                "in_stack_00000038._4_4_": "symbol_table_entry_size",
                "in_stack_00000040": "stack_variable5",
                "in_stack_00000048": "stack_variable6",
                "lVar7": "long_var",
                "lVar9": "function_offset",
                "pcVar1": "symbol_name",
                "pcVar2": "print_symbol",
                "puVar10": "current_symbol_info",
                "puVar11": "pointer_3",
                "puVar12": "current_symbol",
                "puVar13": "pointer_5",
                "puVar14": "pointer_6",
                "puVar15": "pointer_7",
                "puVar8": "symbol",
                "uVar18": "ulong_var3",
                "uVar5": "uint_var",
                "uVar6": "error_message",
                "unaff_R12": "num_symbols",
                "unaff_R13": "symbol_address",
                "unaff_R14": "symbol_size",
                "unaff_R15": "symbol_table",
                "unaff_RBP": "register_bp",
                "unaff_RBX": "current_symbol",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104d5b": {
            "additional_data": {
                "FUN_00104d5b": {
                    "1": "process_lto_plugin_objects",
                    "2": "process_lto_file",
                    "4": "process_lto_symbols",
                    "5": "process_lto_objects",
                    "8": "process_lto_object"
                },
                "FUN_00105110": {
                    "1": "function_report",
                    "2": "process_lto_object"
                },
                "PTR_non_numeric_forward_0010acc0": {
                    "1": "non_numeric_forward_ptr"
                },
                "__ptr": {
                    "1": "temp_ptr3"
                },
                "bVar16": {
                    "1": "temp_variable_13",
                    "2": "is_lto_object"
                },
                "bVar17": {
                    "1": "symbol_size_byte"
                },
                "cVar3": {
                    "1": "temp_char",
                    "2": "result"
                },
                "check_file_compatibility_00102fd2": {
                    "6": "check_file_compatibility"
                },
                "compare_and_execute_00103533": {
                    "6": "compare_and_execute"
                },
                "display_rel_file_cold": {
                    "1": "display_rel_file_cold"
                },
                "file_path_1": {
                    "1": "file_path_1"
                },
                "file_path_2": {
                    "1": "file_path_2"
                },
                "iVar4": {
                    "1": "strcmp_result",
                    "2": "compare_result",
                    "4": "comparison_result"
                },
                "in_R8": {
                    "1": "symbol_table",
                    "3": "symbol_size"
                },
                "in_R9": {
                    "1": "symbol_alignment"
                },
                "in_RBP": {
                    "1": "current_lto_object"
                },
                "in_RBPD": {
                    "1": "rel_data"
                },
                "in_RBX": {
                    "1": "temp_rbx"
                },
                "in_RCX": {
                    "1": "lto_object_list",
                    "2": "symbol_entry",
                    "3": "symbol_table"
                },
                "in_stack_00000038": {
                    "1": "size_param"
                },
                "input1": {
                    "1": "new_parameter_name_1"
                },
                "input2": {
                    "1": "new_parameter_name_2"
                },
                "input3": {
                    "1": "new_parameter_name_3"
                },
                "input4": {
                    "1": "new_parameter_name_4"
                },
                "input_param_7": {
                    "1": "input_parameter_7"
                },
                "input_param_8": {
                    "1": "input_parameter_8"
                },
                "input_param_9": {
                    "1": "input_parameter_9"
                },
                "lVar10": {
                    "1": "symbol_count"
                },
                "lVar17": {
                    "1": "buf_size"
                },
                "lVar19": {
                    "1": "long_var"
                },
                "lVar8": {
                    "1": "temp_long_1",
                    "2": "index"
                },
                "lVar9": {
                    "1": "index",
                    "2": "file_descriptor"
                },
                "param_1": {
                    "1": "symbols"
                },
                "param_10": {
                    "1": "symbol_table_index"
                },
                "param_11": {
                    "1": "symbol_table_alignment"
                },
                "param_12": {
                    "1": "symbol_table_size"
                },
                "param_13": {
                    "1": "name_table",
                    "2": "param_13"
                },
                "param_14": {
                    "1": "memory_2",
                    "2": "symbol_ptr_arr",
                    "4": "symbol_table"
                },
                "param_2": {
                    "1": "input2"
                },
                "param_3": {
                    "1": "input3"
                },
                "param_4": {
                    "1": "input4"
                },
                "param_7": {
                    "1": "error_msg",
                    "2": "param7",
                    "7": "param_7"
                },
                "param_8": {
                    "1": "param_path_2",
                    "2": "symbol_array",
                    "3": "symbol_table"
                },
                "param_9": {
                    "1": "relocation_table",
                    "2": "symbol_array_end"
                },
                "param_B": {
                    "1": "symbol_table"
                },
                "param_F": {
                    "1": "bfd_handler"
                },
                "param_in_stack": {
                    "1": "parameter_in_stack"
                },
                "pcVar1": {
                    "1": "data_ptr",
                    "8": "symbol_name"
                },
                "pcVar2": {
                    "1": "symbol_func",
                    "2": "print_symbol_func"
                },
                "pointer_out_1": {
                    "1": "pointer_output_1"
                },
                "pointer_out_2": {
                    "1": "pointer_output_2"
                },
                "print_error_message_00106530": {
                    "6": "print_error_message"
                },
                "process_lto_object_00102c19": {
                    "4": "process_lto_object"
                },
                "process_symbols_001049c0": {
                    "5": "process_symbols"
                },
                "ptr1": {
                    "1": "pointer_1"
                },
                "ptr2": {
                    "1": "pointer_2"
                },
                "ptr_10": {
                    "1": "pointer_10"
                },
                "ptr_11": {
                    "1": "pointer_11"
                },
                "ptr_12": {
                    "1": "pointer_12"
                },
                "ptr_13": {
                    "1": "pointer_13"
                },
                "ptr_14": {
                    "1": "pointer_14"
                },
                "ptr_15": {
                    "1": "pointer_15"
                },
                "ptr_3": {
                    "1": "pointer_3"
                },
                "ptr_4": {
                    "1": "pointer_4"
                },
                "ptr_5": {
                    "1": "pointer_5"
                },
                "ptr_6": {
                    "1": "pointer_6"
                },
                "ptr_7": {
                    "1": "pointer_7"
                },
                "ptr_8": {
                    "1": "pointer_8"
                },
                "ptr_9": {
                    "1": "pointer_9"
                },
                "puVar10": {
                    "1": "temp_variable_6",
                    "2": "result_ptr"
                },
                "puVar11": {
                    "1": "temp_ptr_2",
                    "2": "symbol_info",
                    "3": "symbol"
                },
                "puVar12": {
                    "1": "compare_function",
                    "2": "file_info"
                },
                "puVar13": {
                    "1": "undefined8_ptr"
                },
                "puVar14": {
                    "1": "symbol_record_end"
                },
                "puVar15": {
                    "1": "symbol_table",
                    "2": "sorted_symbol_table"
                },
                "puVar16": {
                    "1": "symbol_ptr"
                },
                "puVar6": {
                    "1": "symbol_table_entry_count"
                },
                "puVar7": {
                    "1": "undefined8_ptr",
                    "3": "status"
                },
                "puVar8": {
                    "1": "symbol_table_count"
                },
                "puVar9": {
                    "1": "symbol_table_size_object"
                },
                "report_data_00106400": {
                    "6": "report_data"
                },
                "ret_addr": {
                    "1": "return_address"
                },
                "size_forward1": {
                    "1": "size_forward1"
                },
                "size_forward2": {
                    "1": "size_forward2"
                },
                "uVar18": {
                    "1": "unknown"
                },
                "uVar5": {
                    "1": "is_section_lto",
                    "2": "is_lto_object"
                },
                "uVar6": {
                    "1": "errormsg",
                    "4": "error_message"
                },
                "unaff_R12": {
                    "1": "symbol_record_size",
                    "2": "symbol_count",
                    "3": "symbol_table_end"
                },
                "unaff_R13": {
                    "1": "symbol_table_start",
                    "2": "symbol_source",
                    "3": "symbol_index",
                    "5": "current_symbol"
                },
                "unaff_R13_temp": {
                    "1": "temp_variable_10"
                },
                "unaff_R14": {
                    "1": "param3",
                    "2": "symbol_increment",
                    "5": "symbol_size"
                },
                "unaff_R15": {
                    "1": "symbol_entry_buffer"
                },
                "unaff_R15_temp": {
                    "1": "temp_variable_11"
                },
                "unaff_RBP": {
                    "1": "compare_function",
                    "2": "file_data",
                    "3": "bfd_handle"
                },
                "unaff_RBX": {
                    "1": "symbol_table_start",
                    "5": "symbol"
                },
                "unaff_RCN": {
                    "1": "file_path"
                },
                "unaff_retaddr": {
                    "1": "temp_var",
                    "2": "ret_address",
                    "5": "return_address"
                },
                "value1": {
                    "1": "value1"
                },
                "value2": {
                    "1": "value2"
                }
            },
            "called": [
                "FUN_00102040",
                "FUN_00106400",
                "FUN_00103533",
                "FUN_00104d5b",
                "FUN_001020b0",
                "FUN_00102fd2",
                "FUN_00102150",
                "FUN_00102240",
                "FUN_00105110",
                "FUN_00106530",
                "FUN_001021a0",
                "FUN_001021e0",
                "FUN_00102c19",
                "FUN_001049c0"
            ],
            "calling": [
                "FUN_00104d5b"
            ],
            "code": "\nvoid process_lto_object_00104d5b(void)\n\n{\n  char *symbol_name;\n  code *print_symbol_func;\n  char result;\n  int comparison_result;\n  uint is_lto_object;\n  undefined8 error_message;\n  undefined8 *status;\n  long i;\n  long file_descriptor;\n  undefined8 *result_ptr;\n  undefined8 *symbol_table;\n  undefined8 *symbol;\n  undefined8 *symbol_offset_diff;\n  undefined8 *symbol_data;\n  undefined8 *bfd_handle;\n  undefined8 *file_info;\n  undefined8 *symbol_size;\n  undefined8 *str_ptr;\n  undefined8 *symbol_copy_start;\n  undefined8 *str_ptr2;\n  undefined8 *sorted_symbol_table;\n  undefined8 *symbol_table_end;\n  undefined8 *current_symbol;\n  undefined8 *symbol_size;\n  undefined8 *symbol_copy_end;\n  bool is_lto_object;\n  byte symbol_copy_direction;\n  ulong return_address;\n  ulong symbol_comparison_result;\n  undefined8 param_7;\n  undefined8 *sorted_symbol_table;\n  undefined8 *symbol_array_end;\n  undefined8 parameter_8;\n  void *symbols3;\n  undefined8 *symbol_table;\n  \n  symbol_copy_direction = 0;\n  do {\n    if ((symbol_table[4] != 0x10c2a8) && (symbol_table[4] != 0x10c3c0)) goto LAB_00104cba;\nLAB_001049c3:\n    do {\n      current_symbol = (undefined8 *)((long)current_symbol + (long)symbol_size);\n      sorted_symbol_table = symbol_table_end;\n      file_info = bfd_handle;\n      if (symbol_table_end <= current_symbol) goto LAB_00104b15;\nLAB_001049cf:\n      symbol_table = (undefined8 *)\n               (**(code **)(bfd_handle[1] + 0x270))\n                         (bfd_handle,return_address & 0xffffffff,current_symbol,symbol_copy_end);\n      symbol_data = bfd_handle;\n      file_info = current_symbol;\n      sorted_symbol_table = symbol_copy_end;\n      if (symbol_table == (undefined8 *)0x0) goto LAB_00102eb0;\n      symbol_name = (char *)symbol_table[1];\n      if (((symbol_name == (char *)0x0) || (*symbol_name != '_')) || (symbol_name[1] != '_')) {\nLAB_00104a03:\n        if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n        is_lto_object = (uint)(symbol_table[4] == 0x10c2a8);\nLAB_00104af9:\n        if (is_lto_object != 0) goto LAB_00104a2d;\n        current_symbol = (undefined8 *)((long)current_symbol + (long)symbol_size);\n        sorted_symbol_table = symbol_table_end;\n        file_info = bfd_handle;\n        if (symbol_table_end <= current_symbol) {\nLAB_00104b15:\n          symbol = (undefined8 *)((long)symbol - (long)symbol_array_end);\n          if (symbol_size == (undefined8 *)0x8) {\n            file_descriptor = file_info[1];\n            symbol_data = (undefined8 *)((long)symbol + 7);\n            if (-1 < (long)symbol) {\n              symbol_data = symbol;\n            }\n            symbol_size = (undefined8 *)(ulong)DAT_0010b800;\n            print_symbol_func = *(code **)(file_descriptor + 0x208);\n            symbol_data = (undefined8 *)((long)symbol_data >> 3);\n          }\n          else {\n            symbol_data = (undefined8 *)((long)symbol / (long)symbol_size);\n            file_descriptor = file_info[1];\n            print_symbol_func = *(code **)(file_descriptor + 0x208);\n          }\n          bfd_handle = file_info;\n          if (DAT_0010b800 == 0) {\n            DAT_0010b778 = DAT_0010b80c != 0;\n            DAT_0010b780 = file_info;\n            DAT_0010b770 = (undefined8 *)(*print_symbol_func)(file_info);\n            DAT_0010b768 = (undefined8 *)(**(code **)(file_info[1] + 0x208))(file_info);\n            symbol = symbol_table;\n            if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n              bfd_fatal(*file_info);\n              symbol_offset_diff = symbol_copy_end;\n              goto LAB_00102d8e;\n            }\n            symbol_table_end = (undefined8 *)(ulong)parameter_8._4_4_;\n            if (DAT_0010b7f8 != 0) {\n              symbol_comparison_result = (ulong)(DAT_0010b80c != 0);\n              qsort(symbol_table,(size_t)symbol_data,(size_t)symbol_table_end,size_forward1);\n              sorted_symbol_table = (undefined8 *)xmalloc((long)symbol_data << 4);\n              str_ptr = DAT_0010b770;\n              bfd_handle = DAT_0010b768;\n              symbol_size = (undefined8 *)((long)symbol_data * (long)symbol_table_end + (long)symbol);\n              symbol_table = DAT_0010b770;\n              symbol_copy_start = DAT_0010b768;\n              if (symbol_size <= symbol) goto LAB_00102ec2;\n              symbol_data = (undefined8 *)\n                        (**(code **)(file_info[1] + 0x270))(file_info,symbol_comparison_result & 0xffffffff,symbol);\n              symbol_offset_diff = symbol;\n              symbol_size = symbol_table_end;\n              sorted_symbol_table = sorted_symbol_table;\n              if (symbol_data == (undefined8 *)0x0) goto LAB_00102eb9;\n              goto LAB_00104e35;\n            }\n            qsort(symbol_table,(size_t)symbol_data,(size_t)symbol_table_end,\n                  (__compar_fn_t)\n                  (&PTR_non_numeric_forward_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2]);\n            file_descriptor = file_info[1];\n          }\n          symbol_offset_diff = (undefined8 *)0x0;\n          do {\n            file_info = symbol_table;\n            status = (undefined8 *)(ulong)DAT_0010b7f8;\n            symbol_size = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n            if (DAT_0010b7f8 != 0) {\n              sorted_symbol_table = (undefined8 *)(**(code **)(file_descriptor + 0x208))(bfd_handle);\n              if (sorted_symbol_table == (undefined8 *)0x0) goto LAB_00102ed2;\n              symbol = symbol_offset_diff + (long)symbol_data * 2;\n              symbol_data = symbol_offset_diff;\n              do {\n                if (symbol <= symbol_data) {\nLAB_00104c75:\n                  if (symbols3 != (void *)0x0) {\n                    free(symbols3);\n                    free(symbol_table);\n                    free(symbol_offset_diff);\n                    return;\n                  }\n                  free(symbol_table);\n                  free(symbol_offset_diff);\n                  return;\n                }\n                status = sorted_symbol_table;\n                file_descriptor = (**(code **)(bfd_handle[1] + 0x270))(bfd_handle,symbol_size,*symbol_data);\n                if (file_descriptor == 0) {\n                  bfd_fatal(*bfd_handle,0);\nLAB_00102ed2:\n                  file_info = (undefined8 *)*bfd_handle;\n                  bfd_fatal();\n                  str_ptr = symbol_size;\n                  str_ptr2 = symbol_copy_start;\n                  goto LAB_00102edb;\n                }\n                file_info = symbol_data + 1;\n                symbol_data = symbol_data + 2;\n                print_symbol(bfd_handle,file_descriptor,*file_info,param_7);\n              } while( true );\n            }\n            symbol_table_end = (undefined8 *)(ulong)parameter_8._4_4_;\n            symbol_copy_end = (undefined8 *)(**(code **)(file_descriptor + 0x208))(bfd_handle);\n            if (symbol_copy_end == (undefined8 *)0x0) {\n              bfd_fatal(*bfd_handle);\n              file_info = symbol_table_end;\n              if (DAT_0010b80c == 0) {\n                file_descriptor = (**(code **)(bfd_handle[1] + 0x350))(bfd_handle);\n                symbol_data = symbol_table;\n                sorted_symbol_table = symbol_table_end;\n                if (file_descriptor < 1) {\n                  status = (undefined8 *)0x0;\n                  symbol = (undefined8 *)0x0;\n                }\n                else {\nLAB_00102d8e:\n                  symbol = (undefined8 *)xmalloc();\n                  status = (undefined8 *)(**(code **)(bfd_handle[1] + 0x358))(bfd_handle,symbol);\n                  file_info = sorted_symbol_table;\n                  if ((long)status < 0) {\n                    file_info = (undefined8 *)*bfd_handle;\n                    symbol_data = (undefined8 *)bfd_fatal(file_info,sorted_symbol_table);\n                    goto LAB_00102dbe;\n                  }\n                }\n              }\n              else {\n                status = symbol_table_end;\n                symbol = symbol_table;\n                symbol_data = (undefined8 *)0x0;\n                sorted_symbol_table = (undefined8 *)0x0;\n              }\n              symbol_copy_start = &stack0x00000040;\n              symbol_size = symbol;\n              file_descriptor = (**(code **)(bfd_handle[1] + 0x360))(bfd_handle,sorted_symbol_table,symbol_data,status);\n              symbol_table_end = file_info;\n              if (0 < file_descriptor) {\n                symbol_table_end = (undefined8 *)((long)file_info + file_descriptor);\n                symbol_table = (undefined8 *)xrealloc(symbol_table);\n                i = 0;\n                do {\n                  symbol_table[(long)file_info + i] = (void *)(i * 0x30 + (long)symbols3);\n                  i = i + 1;\n                } while (file_descriptor != i);\n                symbol_table[(long)file_info + file_descriptor] = 0;\n              }\n              if ((DAT_0010b80c == 0) && (symbol != (undefined8 *)0x0)) {\n                free(symbol);\n              }\n              if ((*(byte *)((long)bfd_handle + 0x4a) & 0x10) != 0) {\n                symbol = (undefined8 *)*bfd_handle;\n                DAT_0010b230 = '\\0';\n                error_message = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                non_fatal(error_message);\n              }\n              symbol_size = (undefined8 *)(ulong)parameter_8._4_4_;\n              is_lto_object = DAT_0010b80c != 0;\n              symbol_data = (undefined8 *)(ulong)is_lto_object;\n              symbol_table = symbol_table;\n              symbol_array_end = symbol_table;\n              symbol_copy_end = (undefined8 *)(**(code **)(bfd_handle[1] + 0x208))(bfd_handle);\n              if (symbol_copy_end != (undefined8 *)0x0) goto code_r0x00104992;\n            }\n            else {\n              symbol_data = (undefined8 *)((long)symbol_data * (long)symbol_table_end + (long)file_info);\n              symbol = file_info;\n              while( true ) {\n                if (symbol_data <= symbol) goto LAB_00104c75;\n                symbol_table = symbol_copy_end;\n                file_descriptor = (**(code **)(bfd_handle[1] + 0x270))(bfd_handle,symbol_size,symbol);\n                if (file_descriptor == 0) break;\n                symbol = (undefined8 *)((long)symbol + (long)symbol_table_end);\n                print_symbol(bfd_handle,file_descriptor,0,param_7);\n              }\n              bfd_fatal(*bfd_handle,0);\n            }\n            bfd_fatal(*bfd_handle);\n            file_info = bfd_handle;\n            sorted_symbol_table = symbol_copy_end;\nLAB_00102eb0:\n            bfd_fatal(*symbol_data);\nLAB_00102eb9:\n            bfd_fatal(*file_info);\nLAB_00102ec2:\n            symbol_data = (undefined8 *)0x0;\n            symbol_offset_diff = symbol;\n            symbol_size = symbol_table_end;\n            str_ptr = symbol_table;\n            bfd_handle = symbol_copy_start;\n            sorted_symbol_table = sorted_symbol_table;\nLAB_00104e35:\n            while (symbol_copy_start = str_ptr, symbol_offset_diff < symbol_size) {\n              symbol = (undefined8 *)((long)symbol_offset_diff + (long)symbol_size);\n              if (symbol < symbol_size) {\n                status = bfd_handle;\n                str_ptr = symbol_size;\n                str_ptr2 = symbol_copy_start;\n                result_ptr = (undefined8 *)(**(code **)(file_info[1] + 0x270))();\n                if (result_ptr == (undefined8 *)0x0) {\nLAB_00102edb:\n                  symbol_copy_start = str_ptr2;\n                  symbol_size = str_ptr;\n                  file_info = (undefined8 *)*file_info;\n                  result_ptr = (undefined8 *)bfd_fatal();\n                }\n                else {\n                  status = (undefined8 *)symbol_data[4];\n                  if ((*(uint *)(symbol_data + 3) & 0x200100) == 0) goto LAB_00104e95;\n                }\n                file_descriptor = symbol_data[2];\nLAB_00102ee7:\n                if (status == (undefined8 *)result_ptr[4]) {\n                  file_descriptor = result_ptr[2] - file_descriptor;\n                  str_ptr = bfd_handle;\n                  str_ptr2 = symbol_offset_diff;\n                  goto LAB_00104ea7;\n                }\nLAB_00102dc4:\n                file_descriptor = status[8] - file_descriptor;\n                str_ptr = bfd_handle;\n                str_ptr2 = symbol_offset_diff;\n              }\n              else {\n                status = (undefined8 *)symbol_data[4];\n                if ((*(uint *)(symbol_data + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                  file_descriptor = symbol_data[2];\n                  result_ptr = (undefined8 *)0x0;\n                  goto LAB_00102dc4;\n                }\n                result_ptr = (undefined8 *)0x0;\nLAB_00104e95:\n                str_ptr = bfd_handle;\n                str_ptr2 = symbol_offset_diff;\n                if (*(int *)(file_info[1] + 8) == 5) {\n                  file_descriptor = symbol_data[7];\n                }\n                else {\n                  file_descriptor = symbol_data[2];\n                  if ((*(byte *)((long)status + 0x25) & 0x10) == 0) {\n                    if (symbol < symbol_size) goto LAB_00102ee7;\n                    goto LAB_00102dc4;\n                  }\n                }\n              }\nLAB_00104ea7:\n              symbol_data = result_ptr;\n              symbol_offset_diff = symbol;\n              bfd_handle = symbol_copy_start;\n              if (file_descriptor != 0) {\n                *sorted_symbol_table = str_ptr2;\n                sorted_symbol_table[1] = file_descriptor;\n                sorted_symbol_table = sorted_symbol_table + 2;\n              }\n            }\n            symbol_data = (undefined8 *)((long)sorted_symbol_table - (long)sorted_symbol_table >> 4);\n            qsort(sorted_symbol_table,(size_t)symbol_data,0x10,size_forward2);\n            file_descriptor = file_info[1];\n            symbol = symbol_offset_diff;\n            bfd_handle = file_info;\n            symbol_offset_diff = sorted_symbol_table;\n          } while( true );\n        }\n        goto LAB_001049cf;\n      }\n      comparison_result = strcmp(symbol_name + (symbol_name[2] == '_'),\"__gnu_lto_slim\");\n      sorted_symbol_table = symbol_table;\n      if (comparison_result == 0) {\n        if (DAT_0010b230 != '\\0') {\n          sorted_symbol_table = (undefined8 *)*bfd_handle;\n          DAT_0010b230 = '\\0';\n          error_message = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          non_fatal(error_message,sorted_symbol_table);\n        }\n        goto LAB_00104a03;\n      }\n      if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n      if (DAT_0010b808 == 0) {\n        if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n        is_lto_object = (*(uint *)(symbol_table + 3) >> 7 ^ 1) & 1;\n        goto LAB_00104af9;\n      }\n      if ((((*(uint *)(symbol_table + 3) & 0x800082) == 0) && (symbol_table[4] != 0x10c2a8)) &&\n         ((*(byte *)(symbol_table[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n    } while ((DAT_0010b81c == 0) && ((*(byte *)(symbol_table + 3) & 4) != 0));\n  } while (DAT_0010b7f8 != 0);\n  symbol_copy_start = (undefined8 *)(ulong)DAT_0010b7e4;\n  if (DAT_0010b7e4 == 0) {\n    result = (**(code **)(bfd_handle[1] + 0x230))(bfd_handle);\n    if (result != '\\0') {\n      display_rel_file_cold();\n      return;\n    }\n  }\n  else {\n    if (symbol_table[4] == 0x10c2a8) goto LAB_001049c3;\nLAB_00104cba:\n    result = (**(code **)(bfd_handle[1] + 0x230))(bfd_handle);\n    if (result != '\\0') {\n      display_rel_file_cold();\n      return;\n    }\n  }\n  if (symbol != current_symbol) {\n    if (symbol_size != (undefined8 *)0x8) {\n      for (; symbol_size != (undefined8 *)0x0; symbol_size = (undefined8 *)((long)symbol_size + -1)) {\n        *(undefined *)symbol = *(undefined *)current_symbol;\n        current_symbol = (undefined8 *)((long)current_symbol + (ulong)symbol_copy_direction * -2 + 1);\n        symbol = (undefined8 *)((long)symbol + (ulong)symbol_copy_direction * -2 + 1);\n      }\n      process_symbols();\n      return;\n    }\n    *symbol = *current_symbol;\n    process_symbols();\n    return;\n  }\n  symbol = (undefined8 *)((long)symbol + (long)symbol_size);\n  goto LAB_001049c3;\ncode_r0x00104992:\n  sorted_symbol_table = (undefined8 *)((long)symbol_table_end * (long)symbol_size);\n  symbol_table_end = (undefined8 *)((long)symbol_array_end + (long)sorted_symbol_table);\n  symbol = symbol_array_end;\n  file_info = bfd_handle;\n  if (symbol_array_end < symbol_table_end) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  return_address = (ulong)is_lto_object;\n  current_symbol = symbol_array_end;\n  goto LAB_001049cf;\n}\n\n",
            "current_name": "process_lto_object_00104d5b",
            "entrypoint": "0x00104d5b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104d5b": "process_lto_object_00104d5b",
                "__ptr": "symbol_offset_diff",
                "bVar16": "is_lto_object",
                "bVar17": "symbol_copy_direction",
                "cVar3": "result",
                "iVar4": "comparison_result",
                "in_R8": "symbol_size",
                "in_R9": "symbol_copy_start",
                "in_RCX": "symbol_table",
                "in_stack_00000038": "parameter_8",
                "lVar8": "i",
                "lVar9": "file_descriptor",
                "param_1": "symbols",
                "param_14": "symbol_table",
                "param_8": "sorted_symbol_table",
                "param_9": "symbol_array_end",
                "pcVar1": "symbol_name",
                "pcVar2": "print_symbol_func",
                "process_symbols_001049c0": "process_symbols",
                "puVar10": "result_ptr",
                "puVar11": "symbol_data",
                "puVar12": "file_info",
                "puVar13": "str_ptr",
                "puVar14": "str_ptr2",
                "puVar15": "sorted_symbol_table",
                "puVar7": "status",
                "uVar18": "symbol_comparison_result",
                "uVar5": "is_lto_object",
                "uVar6": "error_message",
                "unaff_R12": "symbol_table_end",
                "unaff_R13": "current_symbol",
                "unaff_R14": "symbol_size",
                "unaff_R15": "symbol_copy_end",
                "unaff_RBP": "bfd_handle",
                "unaff_RBX": "symbol",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104fa0": {
            "additional_data": {
                "FUN_00104fa0": {
                    "1": "string_comparison",
                    "29": "compare_strings"
                },
                "FUN_001104fa0": {
                    "1": "compare_strings"
                },
                "__s1": {
                    "1": "ptr_str1",
                    "11": "string1_ptr",
                    "2": "string_1_ptr",
                    "4": "s1",
                    "7": "str1"
                },
                "__s2": {
                    "1": "ptr_s2",
                    "11": "string2_ptr",
                    "2": "string_2_ptr",
                    "4": "s2",
                    "7": "str2"
                },
                "lVar2": {
                    "1": "string_1_length",
                    "13": "string1_length",
                    "2": "string1_ptr",
                    "3": "result_1",
                    "4": "result1"
                },
                "lVar3": {
                    "1": "result_string2",
                    "13": "string2_length",
                    "2": "string2_ptr",
                    "3": "result_2",
                    "4": "result2"
                },
                "param_1": {
                    "24": "string1",
                    "7": "string_1"
                },
                "param_2": {
                    "24": "string2",
                    "7": "string_2"
                },
                "uVar1": {
                    "1": "str_compare_result",
                    "21": "comparison_result",
                    "3": "result",
                    "6": "string_comparison_result"
                }
            },
            "called": [
                "FUN_00102f9f",
                "FUN_001022c0"
            ],
            "calling": [
                "FUN_00103bf6",
                "FUN_00105050",
                "FUN_00102fd2"
            ],
            "code": "\nuint compare_strings_00104fa0(undefined8 string1,undefined8 string2)\n\n{\n  char *string2_ptr;\n  char *string1_ptr;\n  uint comparison_result;\n  long string1_length;\n  long string2_length;\n  \n  string1_length = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,string1,DAT_0010b770);\n  string2_length = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,string2,DAT_0010b768);\n  if ((string1_length == 0) || (string2_length == 0)) {\n    bfd_fatal(*DAT_0010b780);\n  }\n  else {\n    string2_ptr = *(char **)(string2_length + 8);\n    string1_ptr = *(char **)(string1_length + 8);\n    if (string2_ptr == (char *)0x0) {\n      return (uint)(string1_ptr != (char *)0x0);\n    }\n    if (string1_ptr != (char *)0x0) {\n      if (*string2_ptr == '\\0') {\n        return (uint)(*string1_ptr != '\\0');\n      }\n      if (*string1_ptr == '\\0') {\n        return 0xffffffff;\n      }\n      comparison_result = strcoll(string1_ptr,string2_ptr);\n      return comparison_result;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "compare_strings_00104fa0",
            "entrypoint": "0x00104fa0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104fa0": "compare_strings_00104fa0",
                "__s1": "string1_ptr",
                "__s2": "string2_ptr",
                "lVar2": "string1_length",
                "lVar3": "string2_length",
                "param_1": "string1",
                "param_2": "string2",
                "uVar1": "comparison_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105050": {
            "called": [
                "FUN_00104fa0",
                "FUN_00102fc3"
            ],
            "calling": [
                "FUN_00103bec"
            ],
            "code": "\nulong FUNC_00105050(undefined8 param_1,undefined8 param_2)\n\n{\n  char cVar1;\n  ulong uVar2;\n  char *__s;\n  char *__s_00;\n  long lVar3;\n  uint uVar4;\n  size_t sVar5;\n  size_t sVar6;\n  char *pcVar7;\n  char *pcVar8;\n  long lVar9;\n  long lVar10;\n  ulong uVar11;\n  ulong uVar12;\n  ulong uVar13;\n  ulong uVar14;\n  undefined8 uVar15;\n  long unaff_R13;\n  bool bVar16;\n  \n  lVar9 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,param_1,DAT_0010b770);\n  uVar11 = (ulong)DAT_0010b778;\n  lVar10 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,uVar11,param_2,DAT_0010b768);\n  if ((lVar9 != 0) && (lVar10 != 0)) {\n    lVar3 = *(long *)(lVar10 + 0x20);\n    if (*(long *)(lVar9 + 0x20) == 0x10c2a8) {\n      uVar11 = 0xffffffff;\n      if (lVar3 == 0x10c2a8) {\nLAB_001050fa:\n        uVar11 = non_numeric_forward(param_1,param_2);\n        return uVar11;\n      }\n    }\n    else if (lVar3 == 0x10c2a8) {\n      uVar11 = 1;\n    }\n    else {\n      uVar13 = *(long *)(lVar9 + 0x10) + *(long *)(*(long *)(lVar9 + 0x20) + 0x30);\n      uVar11 = *(long *)(lVar10 + 0x10) + *(long *)(lVar3 + 0x30);\n      if (uVar13 == uVar11) goto LAB_001050fa;\n      uVar11 = (ulong)(-(uint)(uVar13 < uVar11) | 1);\n    }\n    return uVar11;\n  }\n  uVar15 = *DAT_0010b780;\n  bfd_fatal();\n  lVar9 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,uVar15,DAT_0010b770);\n  lVar10 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,uVar11,DAT_0010b768);\n  if ((lVar9 == 0) || (unaff_R13 = lVar10, lVar10 == 0)) {\n    lVar10 = bfd_fatal(*DAT_0010b780);\n  }\n  if ((*(long *)(lVar9 + 0x20) == 0x10c2a8) || (*(long *)(lVar10 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  uVar13 = *(ulong *)(*(long *)(lVar9 + 0x20) + 0x30);\n  uVar2 = *(ulong *)(*(long *)(lVar10 + 0x20) + 0x30);\n  uVar14 = *(long *)(lVar9 + 0x10) + uVar13;\n  uVar12 = *(long *)(unaff_R13 + 0x10) + uVar2;\n  bVar16 = uVar14 < uVar12;\n  if ((uVar14 != uVar12) || (bVar16 = uVar13 < uVar2, uVar13 != uVar2)) {\n    return (ulong)(-(uint)bVar16 | 1);\n  }\n  __s = *(char **)(lVar9 + 8);\n  __s_00 = *(char **)(unaff_R13 + 8);\n  sVar5 = strlen(__s);\n  sVar6 = strlen(__s_00);\n  pcVar7 = strstr(__s,\"gnu_compiled\");\n  if (pcVar7 == (char *)0x0) {\n    pcVar8 = strstr(__s,\"gcc2_compiled\");\n    pcVar7 = strstr(__s_00,\"gnu_compiled\");\n    if ((pcVar7 == (char *)0x0) && (pcVar7 = strstr(__s_00,\"gcc2_compiled\"), pcVar7 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (pcVar8 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    pcVar7 = strstr(__s_00,\"gnu_compiled\");\n    if (pcVar7 == (char *)0x0) {\n      pcVar8 = strstr(__s_00,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (pcVar8 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  uVar4 = *(uint *)(unaff_R13 + 0x18) & 0x4000;\n  if ((*(byte *)(lVar9 + 0x19) & 0x40) == 0) {\n    if ((sVar5 < 3) || (__s[sVar5 - 2] != '.')) {\n      if (uVar4 != 0) {\n        return 1;\n      }\n      if ((sVar6 < 3) || (__s_00[sVar6 - 2] != '.')) goto LAB_00103202;\n      bVar16 = false;\n      goto LAB_001031e7;\n    }\n    cVar1 = __s[sVar5 - 1];\n    bVar16 = cVar1 == 'o' || cVar1 == 'a';\n    if (uVar4 == 0) {\n      if ((sVar6 < 3) || (__s_00[sVar6 - 2] != '.')) {\n        if (cVar1 == 'o' || cVar1 == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (uVar4 != 0) goto LAB_00103202;\n    if (sVar6 < 3) {\n      return 0xffffffff;\n    }\n    if (__s_00[sVar6 - 2] != '.') {\n      return 0xffffffff;\n    }\n    bVar16 = true;\nLAB_001031e7:\n    if ((__s_00[sVar6 - 1] != 'o') && (__s_00[sVar6 - 1] != 'a')) {\n      if (bVar16) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!bVar16) {\n    return 1;\n  }\nLAB_00103202:\n  uVar11 = non_numeric_forward(uVar15,uVar11);\n  return uVar11;\n}\n\n",
            "current_name": "FUNC_00105050",
            "entrypoint": "0x00105050",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00105050": "FUNC_00105050"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00105110": {
            "additional_data": {
                "DAT_0010b738": {
                    "1": "global_ptr5"
                },
                "DAT_0010b740": {
                    "1": "matching_symbol_entries"
                },
                "DAT_0010b748": {
                    "1": "num_matching_symbols"
                },
                "DAT_0010b750": {
                    "1": "global_ptr4"
                },
                "DAT_0010b758": {
                    "1": "section_info_array"
                },
                "DAT_0010b7b0": {
                    "1": "file_ptr3"
                },
                "DAT_0010b7c8": {
                    "1": "global_var2"
                },
                "DAT_0010b804": {
                    "1": "global_var3"
                },
                "DAT_0010b818": {
                    "1": "global_var1"
                },
                "FUN_00105110": {
                    "1": "print_object_file_symbol_info",
                    "18": "print_object_filename",
                    "2": "print_object_file_info",
                    "6": "print_object_info"
                },
                "_DAT_0010b758": {
                    "1": "buffer"
                },
                "_DAT_0010b7b0": {
                    "1": "global_ptr2"
                },
                "_DAT_0010b7b8": {
                    "1": "file_ptr"
                },
                "______________alloca_av_0______________": {
                    "1": "local_var2"
                },
                "__ptr": {
                    "1": "reloc_type_ptr",
                    "26": "ptr"
                },
                "__s1": {
                    "1": "message1",
                    "12": "symbol_name",
                    "2": "str",
                    "3": "string1",
                    "4": "section_name",
                    "5": "s1"
                },
                "_stdout": {
                    "1": "stdout",
                    "2": "stdout_buffer"
                },
                "cVar5": {
                    "1": "char_val",
                    "3": "character",
                    "4": "symbol_type",
                    "5": "temp_char",
                    "8": "char_var"
                },
                "iVar6": {
                    "1": "index",
                    "2": "int_value",
                    "3": "var6",
                    "5": "section_type",
                    "8": "int_var"
                },
                "lVar10": {
                    "1": "var_10",
                    "2": "index",
                    "3": "loop_var",
                    "4": "var10",
                    "5": "long_var2"
                },
                "lVar3": {
                    "1": "section_start",
                    "2": "symbol_address",
                    "3": "symbol_info_offset"
                },
                "lVar8": {
                    "1": "file_data",
                    "2": "value",
                    "4": "var8",
                    "5": "temp_long",
                    "7": "long_var"
                },
                "local_60": {
                    "1": "local_char_value",
                    "2": "flag",
                    "4": "local_var_60",
                    "9": "local_char"
                },
                "local_68": {
                    "1": "temp_undefined2",
                    "2": "local_var68",
                    "3": "local_var_68"
                },
                "local_88": {
                    "1": "reloc_info_array",
                    "2": "local_ptr4",
                    "3": "local_ptr_var"
                },
                "local_90": {
                    "1": "matching_reloc_info",
                    "2": "local_ptr2",
                    "3": "local_var_90"
                },
                "local_98": {
                    "1": "relocatable_symbol_info",
                    "2": "matching_symbols",
                    "3": "local_var_98"
                },
                "local_a0": {
                    "1": "local_uint2",
                    "2": "local_param",
                    "5": "local_long",
                    "6": "local_var_a0"
                },
                "local_a8": {
                    "1": "temp_buffer",
                    "2": "local_ptr1",
                    "4": "local_var_a8",
                    "9": "local_ptr"
                },
                "local_b0": {
                    "1": "temp_buffer",
                    "2": "local_undefined",
                    "4": "buffer",
                    "5": "local_var_b0"
                },
                "local_b4": {
                    "1": "local_value1",
                    "2": "temp_uint2",
                    "3": "local_uint1",
                    "5": "line_number",
                    "6": "local_var_b4"
                },
                "param_1": {
                    "1": "file_names",
                    "2": "object_info_ptr",
                    "3": "filename",
                    "4": "object_file",
                    "5": "object_filename"
                },
                "param_2": {
                    "1": "param_data_pointers",
                    "2": "section_info",
                    "20": "symbol_info",
                    "3": "symbol_info_ptr"
                },
                "param_3": {
                    "1": "flags",
                    "14": "param_3",
                    "4": "unused_param"
                },
                "param_4": {
                    "1": "unused_param2",
                    "2": "file_name",
                    "3": "message",
                    "4": "filename"
                },
                "plVar2": {
                    "1": "symbols",
                    "2": "pl_var2",
                    "3": "p_symbol_info",
                    "4": "symbol"
                },
                "pplVar1": {
                    "1": "symbols",
                    "2": "pp_symbol_info",
                    "3": "symbol_info"
                },
                "puVar4": {
                    "1": "var_ptr",
                    "2": "var4",
                    "3": "temp_var",
                    "6": "ptr_var"
                },
                "pvStack_70": {
                    "1": "stack_var70",
                    "2": "stack_ptr_3",
                    "4": "stack_ptr3"
                },
                "pvStack_78": {
                    "1": "stack_var78",
                    "2": "stack_ptr_2",
                    "4": "stack_ptr2"
                },
                "pvStack_80": {
                    "1": "stack_var80",
                    "2": "reloc_data_buffer",
                    "4": "stack_ptr1"
                },
                "pvVar7": {
                    "1": "ptr2",
                    "2": "reloc_section",
                    "3": "ptr_var2",
                    "4": "var7"
                },
                "uVar9": {
                    "1": "symbol_info_flag",
                    "2": "loop_counter",
                    "4": "flags",
                    "5": "temp_uint",
                    "9": "uint_var"
                }
            },
            "called": [
                "FUN_00103463",
                "FUN_00102040",
                "FUN_00106530",
                "FUN_001021e0",
                "FUN_001053b0",
                "FUN_00103238",
                "FUN_00102190",
                "FUN_001053c0"
            ],
            "calling": [
                "FUN_00104d5b"
            ],
            "code": "\n\n\nvoid print_object_filename_00105110(undefined8 *object_filename,long *symbol_info,undefined8 param_3,undefined8 *filename)\n\n{\n  void *ptr;\n  char *symbol_name;\n  long **reloc_entry;\n  long *symbol;\n  long symbol_info_offset;\n  undefined8 *ptr_var;\n  char char_var;\n  int int_var;\n  void *var7;\n  long long_var;\n  uint uint_var;\n  long long_var2;\n  uint local_var_b4;\n  undefined local_var_b0 [8];\n  undefined *local_ptr;\n  undefined8 local_var_a0;\n  long *local_var_98;\n  long *local_var_90;\n  void *local_ptr_var;\n  void *stack_ptr1;\n  void *stack_ptr2;\n  void *stack_ptr3;\n  undefined local_var_68 [8];\n  char local_char;\n  \n  if (*(code **)(PTR_PTR_print_object_filename_00105110_bsd_0010b260 + 0x18) == print_symbol_filename_bsd) {\n    if (DAT_0010b818 != 0) {\n      if (filename != (undefined8 *)0x0) {\n        printf(\"%s:\",*filename);\n      }\n      printf(\"%s:\",*object_filename);\n    }\n  }\n  else {\n    (**(code **)(PTR_PTR_print_object_filename_00105110_bsd_0010b260 + 0x18))(filename,object_filename);\n  }\n  local_ptr = local_var_68;\n  (**(code **)(object_filename[1] + 0x218))(object_filename,symbol_info,local_ptr);\n  uint_var = *(uint *)(symbol_info + 3);\n  char_var = local_char;\n  if (((((local_char == 'i') && ((uint_var & 0x400000) != 0)) && (DAT_0010b7c8 != (char *)0x0)) &&\n      ((*DAT_0010b7c8 != '\\0' && (char_var = *DAT_0010b7c8, (uint_var & 2) == 0)))) &&\n     (char_var = local_char, DAT_0010b7c8[1] != '\\0')) {\n    char_var = DAT_0010b7c8[1];\n  }\n  local_char = char_var;\n  local_var_a0 = param_3;\n  if ((uint_var & 0x200100) != 0) goto LAB_00103330;\n  long_var = *symbol_info;\n  int_var = *(int *)(*(long *)(long_var + 8) + 8);\n  if (((uint_var & 0x200000) == 0) && (int_var == 5)) {\n    local_var_98 = symbol_info;\n    if (*(long *)(long_var + 0x110) == 0) {\n      local_var_98 = (long *)0x0;\n    }\n  }\n  else {\n    local_var_98 = (long *)0x0;\n    if (((int_var - 2U & 0xfffffffd) == 0) && (local_var_90 = symbol_info, *(long *)(long_var + 0x110) != 0))\n    goto LAB_001051bf;\n  }\n  local_var_90 = (long *)0x0;\nLAB_001051bf:\n  (**(code **)(PTR_PTR_print_object_filename_00105110_bsd_0010b260 + 0x20))(&local_ptr,object_filename);\n  do {\n    if (DAT_0010b804 == 0) {\nLAB_001051e6:\n      putc(10,stdout_buffer);\n      return;\n    }\n    if (_DAT_0010b7b8 == object_filename) {\n      ptr_var = _DAT_0010b7b8;\n      if (DAT_0010b758 == (void *)0x0) goto LAB_00105359;\nLAB_00105288:\n      _DAT_0010b7b8 = ptr_var;\n      var7 = DAT_0010b750;\n      if (symbol_info[4] == 0x10c2a8) {\n        if (_DAT_0010b7b0 == object_filename) {\n          if (DAT_0010b750 == (void *)0x0) goto LAB_001033d1;\n        }\n        else {\n          uint_var = 0;\n          if (DAT_0010b750 != (void *)0x0) {\n            for (; uint_var < DAT_0010b748; uint_var = uint_var + 1) {\n              ptr = *(void **)((long)var7 + (ulong)uint_var * 8);\n              if (ptr != (void *)0x0) {\n                free(ptr);\n              }\n            }\n            free(DAT_0010b740);\n            free(var7);\n            free(DAT_0010b738);\n            DAT_0010b740 = (void *)0x0;\n            DAT_0010b750 = (void *)0x0;\n            DAT_0010b738 = (void *)0x0;\n          }\nLAB_001033d1:\n          DAT_0010b748 = *(uint *)(object_filename + 0x14);\n          DAT_0010b740 = (void *)xmalloc((ulong)DAT_0010b748 * 8);\n          DAT_0010b750 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n          DAT_0010b738 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n          stack_ptr3 = DAT_0010b758;\n          local_ptr_var = DAT_0010b740;\n          stack_ptr1 = DAT_0010b750;\n          stack_ptr2 = DAT_0010b738;\n          bfd_map_over_sections(object_filename,get_relocs,&local_ptr_var);\n          _DAT_0010b7b0 = object_filename;\n        }\n        symbol_name = (char *)symbol_info[1];\n        for (uint_var = 0; uint_var < DAT_0010b748; uint_var = uint_var + 1) {\n          long_var = (ulong)uint_var * 8;\n          var7 = DAT_0010b738;\n          for (long_var2 = 0;\n              *(long *)((long)var7 + long_var) != long_var2 && long_var2 <= *(long *)((long)var7 + long_var)\n              ; long_var2 = long_var2 + 1) {\n            reloc_entry = *(long ***)(*(long *)((long)DAT_0010b750 + long_var) + long_var2 * 8);\n            symbol = *reloc_entry;\n            if ((((symbol != (long *)0x0) &&\n                 (symbol_info_offset = *symbol, *(long *)(symbol_info_offset + 0x20) == symbol_info[4])) &&\n                (*(long *)(symbol_info_offset + 0x10) == symbol_info[2])) &&\n               (((int_var = strcmp(symbol_name,*(char **)(symbol_info_offset + 8)), int_var == 0 &&\n                 (char_var = (**(code **)(object_filename[1] + 0x240))\n                                    (object_filename,DAT_0010b758,\n                                     *(undefined8 *)((long)DAT_0010b740 + long_var),reloc_entry[1],\n                                     &local_ptr_var,local_var_b0,&local_var_b4,0), var7 = DAT_0010b738,\n                 char_var != '\\0')) && (local_ptr_var != (void *)0x0)))) {\n              printf(\"\\t%s:%u\",local_ptr_var,(ulong)local_var_b4);\n              uint_var = DAT_0010b748;\n              break;\n            }\n          }\n        }\n      }\n      else if (*(undefined8 **)(symbol_info[4] + 0xe0) == object_filename) {\n        char_var = (**(code **)(object_filename[1] + 0x250))(object_filename,DAT_0010b758,symbol_info,&local_ptr_var,&local_var_b4);\n        if (((char_var != '\\0') ||\n            (char_var = (**(code **)(object_filename[1] + 0x240))\n                               (object_filename,DAT_0010b758,symbol_info[4],symbol_info[2],&local_ptr_var,local_var_b0,\n                                &local_var_b4,0), char_var != '\\0')) &&\n           ((local_ptr_var != (void *)0x0 && (local_var_b4 != 0)))) {\n          printf(\"\\t%s:%u\");\n        }\n      }\n      goto LAB_001051e6;\n    }\n    if (DAT_0010b758 != (void *)0x0) {\n      free(DAT_0010b758);\n      DAT_0010b758 = (void *)0x0;\n    }\nLAB_00105359:\n    long_var = (**(code **)(object_filename[1] + 0x1f8))(object_filename);\n    if (long_var < 0) {\n      reverse_and_print_00103463(long_var);\n      return;\n    }\n    DAT_0010b758 = (void *)xmalloc();\n    long_var = (**(code **)(object_filename[1] + 0x200))(object_filename,DAT_0010b758);\n    ptr_var = object_filename;\n    if (-1 < long_var) goto LAB_00105288;\n    bfd_fatal(*object_filename);\nLAB_00103330:\n    local_var_98 = (long *)0x0;\n    local_var_90 = (long *)0x0;\n    (**(code **)(PTR_PTR_print_object_filename_00105110_bsd_0010b260 + 0x20))(&local_ptr,object_filename);\n  } while( true );\n}\n\n",
            "current_name": "print_object_filename_00105110",
            "entrypoint": "0x00105110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105110": "print_object_filename_00105110",
                "__ptr": "ptr",
                "__s1": "symbol_name",
                "_stdout": "stdout_buffer",
                "cVar5": "char_var",
                "iVar6": "int_var",
                "lVar10": "long_var2",
                "lVar3": "symbol_info_offset",
                "lVar8": "long_var",
                "local_60": "local_char",
                "local_68": "local_var_68",
                "local_88": "local_ptr_var",
                "local_90": "local_var_90",
                "local_98": "local_var_98",
                "local_a0": "local_var_a0",
                "local_a8": "local_ptr",
                "local_b0": "local_var_b0",
                "local_b4": "local_var_b4",
                "param_1": "object_filename",
                "param_2": "symbol_info",
                "param_4": "filename",
                "plVar2": "symbol",
                "pplVar1": "reloc_entry",
                "puVar4": "ptr_var",
                "pvStack_70": "stack_ptr3",
                "pvStack_78": "stack_ptr2",
                "pvStack_80": "stack_ptr1",
                "pvVar7": "var7",
                "uVar9": "uint_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001053b0": {
            "additional_data": {
                "*param_1": {
                    "1": "param1_value"
                },
                "*param_2": {
                    "1": "message2_pointer"
                },
                "FUN_001053b0": {
                    "1": "print_information",
                    "2": "print_parameters",
                    "3": "print_values",
                    "6": "print_data"
                },
                "param_1": {
                    "1": "input1",
                    "2": "label",
                    "3": "string_1",
                    "4": "string1",
                    "5": "message1"
                },
                "param_2": {
                    "1": "data",
                    "3": "message_2",
                    "4": "message",
                    "5": "message2"
                },
                "param_3": {
                    "1": "param",
                    "2": "unused_param1",
                    "3": "param3",
                    "7": "unused_param"
                },
                "param_4": {
                    "1": "suffix",
                    "2": "unused_param2",
                    "3": "param4"
                },
                "printf": {
                    "2": "print"
                },
                "printf(: %s:: ,*param_1)": {
                    "1": "print_data1"
                },
                "printf(: %s:: ,*param_2,param_4)": {
                    "1": "print_data2"
                }
            },
            "called": [
                "FUN_00103573"
            ],
            "calling": [
                "FUN_00105110"
            ],
            "code": "\nvoid print_data_001053b0(undefined8 *message1,undefined8 *message2,undefined8 unused_param,undefined8 unused_param_2)\n\n{\n  if (DAT_0010b818 == 0) {\n    return;\n  }\n  if (message1 != (undefined8 *)0x0) {\n    print(\"%s:\",*message1);\n  }\n  print(\"%s:\",*message2,unused_param_2);\n  return;\n}\n\n",
            "current_name": "print_data_001053b0",
            "entrypoint": "0x001053b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001053b0": "print_data_001053b0",
                "param_1": "message1",
                "param_2": "message2",
                "param_3": "unused_param",
                "param_4": "unused_param_2",
                "printf": "print"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001053c0": {
            "additional_data": {
                "*(char *)(symbolData + 0x19)": {
                    "1": "symbol_char2"
                },
                "*(char *)(symbolData + 8)": {
                    "1": "symbol_char"
                },
                "*(char *)(symbolData)": {
                    "1": "symbol_class"
                },
                "*(long *)(valuePointer + 0x38)": {
                    "1": "symbol_value"
                },
                "*(short *)(symbolData + 0x1a)": {
                    "1": "symbol_short"
                },
                "*(undefined8 *)(symbolData + 0x20)": {
                    "1": "symbol_string"
                },
                "DAT_0010b7a0": {
                    "1": "unknown_print_format"
                },
                "DAT_0010b7ec": {
                    "1": "symbol_info_flag"
                },
                "DAT_0010b7f8": {
                    "1": "initialize_flag"
                },
                "FUN_001035a2": {
                    "1": "initialize_print_width"
                },
                "FUN_001053c0": {
                    "1": "print_sym_info",
                    "20": "print_symbol_info",
                    "3": "print_symbol_information",
                    "7": "print_symbol"
                },
                "FUN_001054d0": {
                    "2": "print_symbol_info_bsd_cold"
                },
                "LABEL_00103603": {
                    "1": "error_label"
                },
                "LAB_00103623": {
                    "1": "print_label"
                },
                "PARAM_0010b7a0": {
                    "1": "print_format"
                },
                "PUTS_0010712c": {
                    "1": "symbol_name_data"
                },
                "cVar2": {
                    "18": "is_undefined",
                    "2": "is_undefined_symbol",
                    "9": "is_undefined_symclass"
                },
                "dcgettext": {
                    "1": "translate_error_message",
                    "3": "get_error_message"
                },
                "fatal": {
                    "1": "print_error_message"
                },
                "iVar1": {
                    "1": "counter",
                    "12": "print_width",
                    "2": "symbol_class"
                },
                "if (*(char *)(symbolData) != '-')": {
                    "1": "check_symbol_char"
                },
                "lVar4": {
                    "1": "print_val2",
                    "2": "symbol_address",
                    "3": "print_value",
                    "7": "symbol_value",
                    "8": "value"
                },
                "param_1": {
                    "1": "data",
                    "2": "symbol_pointer",
                    "5": "symbol",
                    "6": "symbol_ptr",
                    "7": "symbol_info"
                },
                "param_1 + 8": {
                    "1": "symbol_data"
                },
                "param_1[2]": {
                    "1": "value_pointer"
                },
                "param_2": {
                    "1": "format_specifier",
                    "12": "param",
                    "3": "param_2",
                    "6": "param2"
                },
                "print_symbol_info_bsd_cold": {
                    "1": "print_bsd_cold_symbol_info",
                    "2": "print_symbol_info_cold",
                    "3": "print_symbol_info"
                },
                "print_symname": {
                    "5": "print_symbol_name"
                },
                "print_value_constprop_0": {
                    "1": "print_value_constprop",
                    "3": "print_value"
                },
                "printf": {
                    "1": "print_output",
                    "3": "print_formatted"
                },
                "printf(\"        \")": {
                    "1": "print_tabs"
                },
                "putchar": {
                    "2": "print_character",
                    "3": "print_char"
                },
                "uVar3": {
                    "1": "print_val",
                    "16": "value",
                    "2": "message",
                    "3": "symbol_value",
                    "6": "print_value"
                }
            },
            "called": [
                "FUN_00106300",
                "FUN_001035a2",
                "FUN_001020f0",
                "FUN_001054d0",
                "FUN_00102150",
                "FUN_00102190"
            ],
            "calling": [
                "FUN_00105110"
            ],
            "code": "\nvoid print_symbol_info_001053c0(long *symbol_info,undefined8 param)\n\n{\n  int print_width;\n  char is_undefined;\n  undefined8 value;\n  long value;\n  \n  is_undefined = bfd_is_undefined_symclass((int)*(char *)(*symbol_info + 8));\n  print_width = DAT_0010b7a8;\n  if (is_undefined == '\\0') {\n    if (DAT_0010b7f8 == 0) {\n      if ((DAT_0010b7a8 - 0x20U & 0xffffffdf) != 0) {\nLAB_00103603:\n        value = get_error_message(0,\"Print width has not been initialized (%d)\",5);\n        print_fatal_error(value,print_width);\n        goto print_label;\n      }\n      value = *(undefined8 *)*symbol_info;\n    }\n    else {\n      if (DAT_0010b7ec == 0) {\n        if (value_pointer == 0) {\n          value = symbol_info[1];\n        }\n        else {\n          value = *(long *)(value_pointer + 0x38);\n        }\n        print_value(value);\n        if (DAT_0010b7ec != 0) {\n          print_symbol_info_001053c0();\n          return;\n        }\n        goto LAB_00105423;\n      }\n      value = *(undefined8 *)*symbol_info;\n      if ((DAT_0010b7a8 - 0x20U & 0xffffffdf) != 0) goto LAB_00103603;\n    }\n    print_formatted(DAT_0010b7a0,value);\n    if (DAT_0010b7ec != 0) {\n      print_symbol_info_001053c0();\n      return;\n    }\n  }\n  else if (DAT_0010b7a8 == 0x40) {\n    print_formatted(\"        \");\n    print_formatted(\"        \");\n  }\n  else {\n    print_formatted(\"        \");\n  }\nLAB_00105423:\n  print_formatted(\" %c\",(ulong)(uint)(int)*(char *)(*symbol_info + 8));\n  if (*(char *)(*symbol_info + 8) != '-') {\n    print_symbol_name(&DAT_0010712c,symbol_info,0,param);\n    return;\n  }\nprint_label:\n  print_char(0x20);\n  print_formatted(&DAT_0010b238,(ulong)(uint)(int)*(char *)(*symbol_info + 0x19));\n  print_char(0x20);\n  print_formatted(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbol_info + 0x1a));\n  print_formatted(\" %5s\",*(undefined8 *)(*symbol_info + 0x20));\n  print_symbol_name(&DAT_0010712c,symbol_info,0,param);\n  return;\n}\n\n",
            "current_name": "print_symbol_info_001053c0",
            "entrypoint": "0x001053c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001053c0": "print_symbol_info_001053c0",
                "LAB_00103623": "print_label",
                "cVar2": "is_undefined",
                "dcgettext": "get_error_message",
                "fatal": "print_fatal_error",
                "iVar1": "print_width",
                "lVar4": "value",
                "param_1": "symbol_info",
                "param_1[2]": "value_pointer",
                "param_2": "param",
                "print_symbol_info_bsd_cold": "print_symbol_info",
                "print_symname": "print_symbol_name",
                "print_value_constprop_0": "print_value",
                "printf": "print_formatted",
                "putchar": "print_char",
                "uVar3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001054d0": {
            "additional_data": {
                "FUN_001054d0": {
                    "1": "print_sym_info",
                    "2": "print_symbol_details",
                    "25": "print_symbol_info"
                },
                "bVar9": {
                    "1": "section_type",
                    "2": "byte_value",
                    "3": "symbol_class",
                    "5": "type_code"
                },
                "cVar1": {
                    "1": "is_undefined_symbol_class",
                    "20": "is_undefined",
                    "3": "is_undefined_class",
                    "5": "is_undefined_symclass"
                },
                "iVar3": {
                    "1": "format_size",
                    "16": "asprintf_result",
                    "2": "asprintf_return"
                },
                "in_R8": {
                    "1": "r8",
                    "6": "arg1"
                },
                "in_R9": {
                    "1": "register_9",
                    "6": "arg2"
                },
                "lVar7": {
                    "1": "sym_data",
                    "2": "symbol_info",
                    "3": "sym_class",
                    "5": "info_ptr"
                },
                "param_1": {
                    "1": "data",
                    "15": "symbol",
                    "3": "param",
                    "4": "input_param"
                },
                "pcVar11": {
                    "1": "section_name",
                    "2": "symbol_type",
                    "4": "type_str",
                    "6": "type_string",
                    "7": "type_name"
                },
                "pcVar12": {
                    "1": "format_string1"
                },
                "pcVar13": {
                    "1": "format_string2"
                },
                "piVar5": {
                    "1": "error",
                    "18": "errno_location",
                    "2": "errno_ptr",
                    "3": "error_num"
                },
                "plVar4": {
                    "1": "info_ptr",
                    "12": "symbol_info",
                    "2": "pointer_var",
                    "4": "sym_info"
                },
                "uVar10": {
                    "1": "backup_print_width",
                    "2": "initial_print_width",
                    "3": "temp_value",
                    "5": "original_print_width"
                },
                "uVar2": {
                    "1": "class_val",
                    "2": "symbol_type",
                    "3": "symclass_value",
                    "4": "symbol_class",
                    "5": "sym_class",
                    "6": "sym_type"
                },
                "uVar6": {
                    "1": "xstrerror_value",
                    "10": "error_string",
                    "2": "error_msg",
                    "5": "error_message"
                },
                "uVar8": {
                    "1": "backup_print_width",
                    "18": "print_width"
                }
            },
            "called": [
                "FUN_0010370a",
                "FUN_00102190"
            ],
            "calling": [
                "FUN_00103729",
                "FUN_001064b0",
                "FUN_001035a2",
                "FUN_0010651a",
                "FUN_001053c0"
            ],
            "code": "\nvoid print_symbol_info_001054d0(undefined8 symbol)\n\n{\n  char is_undefined;\n  ushort sym_type;\n  int asprintf_result;\n  long *symbol_info;\n  int *errno_location;\n  undefined8 error_string;\n  long info_ptr;\n  ulong print_width;\n  byte type_code;\n  ulong original_print_width;\n  char *type_name;\n  undefined8 arg1;\n  undefined8 arg2;\n  \n  print_width = (ulong)DAT_0010b7a8;\n  if ((DAT_0010b7a8 - 0x20 & 0xffffffdf) == 0) {\n    printf(DAT_0010b7a0,symbol);\n    return;\n  }\n  symbol_info = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  original_print_width = print_width;\n  fatal(symbol_info,print_width);\n  print_symname(\"%-20s|\",symbol_info,0,original_print_width,arg1,arg2,print_width);\n  is_undefined = bfd_is_undefined_symclass((int)*(char *)(*symbol_info + 8));\n  if (is_undefined == '\\0') {\n    print_symbol_info_001054d0(*(undefined8 *)*symbol_info);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbol_info + 8));\n  if (*(char *)(*symbol_info + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symbol_info + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbol_info + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symbol_info[2] == 0) {\n    if (symbol_info[3] != 0) {\n      info_ptr = *(long *)(symbol_info[3] + 0x30);\n      is_undefined = *(char *)(info_ptr + 0x28);\n      if (is_undefined == 'g') goto LAB_00103983;\n      if (is_undefined == 'h') {\n        type_name = \"Line\";\n      }\n      else if (is_undefined == 'd') {\n        type_name = \"Block\";\n      }\n      else if (*(ushort *)(info_ptr + 0x26) == 0) {\n        type_name = \"None\";\n      }\n      else {\n        sym_type = *(ushort *)(info_ptr + 0x26) >> 4 & 3;\n        if (sym_type == 2) {\n          type_name = \"Function\";\n        }\n        else if (sym_type == 3) {\n          type_name = \"Array\";\n        }\n        else {\n          if (sym_type != 1) {\n            free(DAT_0010b730);\n            sym_type = *(ushort *)(info_ptr + 0x26);\n            type_code = *(byte *)(info_ptr + 0x28);\n            type_name = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintf_result = asprintf(&DAT_0010b730,type_name,(ulong)type_code,(ulong)sym_type);\n            type_name = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          type_name = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    type_code = *(byte *)(symbol_info[2] + 0x48) & 0xf;\n    switch(type_code) {\n    case 0:\n      type_name = \"NOTYPE\";\n      break;\n    case 1:\n      type_name = \"OBJECT\";\n      break;\n    case 2:\n      type_name = \"FUNC\";\n      break;\n    case 3:\n      type_name = \"SECTION\";\n      break;\n    case 4:\n      type_name = \"FILE\";\n      break;\n    case 5:\n      type_name = \"COMMON\";\n      break;\n    case 6:\n      type_name = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      type_name = \"<processor specific>: %d\";\n      if ((2 < type_code - 0xd) && (type_name = \"<OS specific>: %d\", 2 < type_code - 10)) {\n        type_name = \"<unknown>: %d\";\n      }\n      type_name = (char *)dcgettext(0,type_name,5);\n      asprintf_result = asprintf(&DAT_0010b728,type_name,(ulong)type_code);\n      type_name = DAT_0010b728;\njoined_r0x00103964:\n      if (asprintf_result < 0) {\n        errno_location = __errno_location();\n        error_string = xstrerror(*errno_location);\n        fatal(&DAT_0010712d,error_string);\nLAB_00103983:\n        type_name = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",type_name);\n  }\n  if (symbol_info[2] == 0) {\n    if (symbol_info[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symbol_info[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    print_symbol_info_001054d0();\n  }\n  info_ptr = symbol_info[2];\n  if ((info_ptr != 0) || (info_ptr = symbol_info[3], info_ptr != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(info_ptr + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "current_name": "print_symbol_info_001054d0",
            "entrypoint": "0x001054d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001054d0": "print_symbol_info_001054d0",
                "bVar9": "type_code",
                "cVar1": "is_undefined",
                "iVar3": "asprintf_result",
                "in_R8": "arg1",
                "in_R9": "arg2",
                "lVar7": "info_ptr",
                "param_1": "symbol",
                "pcVar11": "type_name",
                "piVar5": "errno_location",
                "plVar4": "symbol_info",
                "uVar10": "original_print_width",
                "uVar2": "sym_type",
                "uVar6": "error_string",
                "uVar8": "print_width"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105500": {
            "additional_data": {
                "FUN_00105500": {
                    "1": "process_entry",
                    "6": "start_main_process"
                },
                "FUN_001055f0": {
                    "1": "get_memory_info"
                },
                "auStack_8": {
                    "1": "param3",
                    "3": "stack_array",
                    "4": "stack"
                },
                "param_1": {
                    "1": "main_entry_point",
                    "4": "argc",
                    "6": "param1",
                    "7": "param_1",
                    "8": "arg1"
                },
                "param_2": {
                    "1": "param_b",
                    "4": "argv",
                    "6": "param2",
                    "7": "param_2",
                    "8": "arg2"
                },
                "processEntry": {
                    "1": "run_main_loop",
                    "2": "initialize_program",
                    "9": "start_main_loop"
                }
            },
            "called": [
                "FUN_0010c020",
                "FUN_001055f0"
            ],
            "calling": [],
            "code": "\nvoid start_main_loop start_main_process_00105500(undefined8 arg1,undefined8 arg2)\n\n{\n  undefined stack_buffer [8];\n  \n  __libc_start_main(main,arg2,&stack0x00000008,0,0,arg1,stack_buffer);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "start_main_process_00105500",
            "entrypoint": "0x00105500",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105500": "start_main_process_00105500",
                "auStack_8": "stack_buffer",
                "param_1": "arg1",
                "param_2": "arg2",
                "processEntry": "start_main_loop"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105530": {
            "called": [
                "FUN_0010c038"
            ],
            "calling": [
                "FUN_001055a0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105543) */\n/* WARNING: Removing unreachable block (ram,0x0010554f) */\n\nvoid FUNC_00105530(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00105530",
            "entrypoint": "0x00105530",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00105530": "FUNC_00105530"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00105560": {
            "called": [
                "FUN_0010c228"
            ],
            "calling": [
                "FUN_001055e0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105584) */\n/* WARNING: Removing unreachable block (ram,0x00105590) */\n\nvoid FUNC_00105560(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00105560",
            "entrypoint": "0x00105560",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00105560": "FUNC_00105560"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_001055a0": {
            "additional_data": {
                "FUNC_00105530": {
                    "1": "perform_cloning_operations",
                    "2": "deregister_tm_clones",
                    "3": "register_tm_clones",
                    "4": "cleanup",
                    "6": "perform_cleanup",
                    "7": "cleanup_resources"
                },
                "FUN_001055a0": {
                    "1": "finalize_and_deregister",
                    "18": "initialize_program",
                    "2": "initialize_if_needed",
                    "4": "initialize"
                }
            },
            "called": [
                "FUN_00105530",
                "FUN_00102440"
            ],
            "calling": [],
            "code": "\nvoid initialize_program_001055a0(void)\n\n{\n  if (DAT_0010b720 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010b228);\n  deregister_tm_clones();\n  DAT_0010b720 = 1;\n  return;\n}\n\n",
            "current_name": "initialize_program_001055a0",
            "entrypoint": "0x001055a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001055a0": "initialize_program_001055a0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001055e0": {
            "called": [
                "FUN_00105560"
            ],
            "calling": [],
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "current_name": "FUN_001055e0",
            "entrypoint": "0x001055e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001055f0": {
            "called": [
                "FUN_00102030",
                "FUN_00102300",
                "FUN_001020d0",
                "FUN_00106300",
                "FUN_00102040",
                "FUN_00104370",
                "FUN_00102350",
                "FUN_00102280",
                "FUN_00106400",
                "FUN_00102200",
                "FUN_00102130",
                "FUN_00102230",
                "FUN_001022f0",
                "FUN_00102340",
                "FUN_001022d0",
                "FUN_00102270",
                "FUN_00102240",
                "FUN_001020a0",
                "FUN_001021e0",
                "FUN_00102170",
                "FUN_001022a0",
                "FUN_00102090",
                "FUN_00102140",
                "FUN_00102110",
                "FUN_001043d0",
                "FUN_00103ca0",
                "FUN_001023c0",
                "FUN_001021f0",
                "FUN_001020e0",
                "FUN_00102260",
                "FUN_00102150",
                "FUN_00102190",
                "FUN_00102100",
                "FUN_00102390",
                "FUN_001021a0",
                "FUN_00102310",
                "FUN_00102160",
                "FUN_001021d0",
                "FUN_00102290"
            ],
            "calling": [
                "FUN_00105500"
            ],
            "code": "\n\n\nundefined ** FUNC_001055f0(int param_1,long *param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  bool bVar3;\n  bool bVar4;\n  bool bVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  char cVar9;\n  int iVar10;\n  uint uVar11;\n  int iVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  FILE *__stream;\n  byte *__s;\n  int *piVar15;\n  size_t sVar16;\n  byte *__ptr;\n  long *__src;\n  long lVar17;\n  long *plVar18;\n  long *plVar19;\n  undefined8 uVar20;\n  undefined8 uVar21;\n  char *pcVar22;\n  byte *pbVar23;\n  undefined **unaff_RBP;\n  long lVar24;\n  byte *pbVar25;\n  char *pcVar26;\n  int *unaff_R12;\n  int *piVar27;\n  int local_110;\n  int local_10c;\n  size_t local_108;\n  stat local_c8;\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  pcVar22 = \"binutils\";\n  setlocale(3,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010b820 = *param_2;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010b820);\n  bfd_plugin_set_program_name(DAT_0010b820);\n  plVar18 = param_2;\n  if (1 < param_1) {\n    local_10c = 2000;\n    unaff_R12 = (int *)0x1;\n    local_110 = 0;\n    do {\n      iVar12 = (int)unaff_R12;\n      unaff_RBP = (undefined **)(long)iVar12;\n      piVar27 = (int *)((long)unaff_RBP * 8);\n      if (*(char *)plVar18[(long)unaff_RBP] != '@') goto LAB_00105a70;\n      local_10c = local_10c + -1;\n      if (local_10c == 0) {\n        lVar24 = *plVar18;\n        pcVar26 = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_00105f1d;\n      }\n      pcVar22 = (char *)plVar18[(long)unaff_RBP] + 1;\n      iVar10 = stat(pcVar22,&local_c8);\n      if (iVar10 < 0) {\nLAB_00105a70:\n        if (param_1 <= iVar12 + 1) break;\nLAB_00105a7a:\n        uVar11 = iVar12 + 1;\n        local_110 = iVar12;\n      }\n      else {\n        if ((local_c8.st_mode & 0xf000) == 0x4000) goto LAB_00105f13;\n        __stream = fopen(pcVar22,\"r\");\n        if (__stream == (FILE *)0x0) goto LAB_00105a70;\n        iVar10 = fseek(__stream,0,2);\n        if (((iVar10 == -1) ||\n            (pcVar22 = (char *)ftell(__stream), (int *)pcVar22 == (int *)0xffffffffffffffff)) ||\n           (iVar10 = fseek(__stream,0,0), iVar10 == -1)) {\nLAB_00105ad0:\n          fclose(__stream);\n          if (iVar12 + 1 < param_1) goto LAB_00105a7a;\n          break;\n        }\n        __s = (byte *)xmalloc((char *)((long)pcVar22 + 1));\n        piVar15 = (int *)fread(__s,1,(size_t)pcVar22,__stream);\n        if (((int *)pcVar22 != piVar15) && (iVar10 = ferror(__stream), iVar10 != 0)) {\n          free(__s);\n          goto LAB_00105ad0;\n        }\n        __s[(long)piVar15] = 0;\n        bVar7 = *__s;\n        pbVar23 = __s;\n        if (bVar7 != 0) {\nLAB_001057d0:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_001057c0;\n          sVar16 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar16 + 1);\n          iVar10 = 0;\n          bVar5 = false;\n          bVar3 = false;\n          lVar24 = 0;\n          __src = (long *)0x0;\n          bVar4 = false;\n          pbVar23 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar23 * 2] & 0x40) != 0) {\n              pbVar23 = pbVar23 + 1;\n            }\n            if ((iVar10 == 0) || (plVar19 = __src + lVar24, iVar10 + -1 <= (int)lVar24)) {\n              if (__src == (long *)0x0) {\n                iVar10 = 8;\n                __src = (long *)xmalloc(0x40);\n                plVar19 = __src + lVar24;\n                *plVar19 = 0;\n              }\n              else {\n                iVar10 = iVar10 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar10 << 3);\n                plVar19 = __src + lVar24;\n                *plVar19 = 0;\n              }\n            }\n            bVar7 = *pbVar23;\n            pbVar25 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar3))) {\n                  bVar4 = false;\n                  bVar5 = false;\n                  bVar3 = false;\n                  goto LAB_001058e0;\n                }\n                if (!bVar4) break;\n                pbVar23 = pbVar23 + 1;\n                *pbVar25 = bVar7;\n                pbVar25 = pbVar25 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar23;\n                if (bVar7 == 0) goto LAB_001058e0;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar3) {\n                if (bVar7 == 0x27) {\n                  bVar3 = false;\n                }\n                else {\nLAB_00105a55:\n                  *pbVar25 = bVar7;\n                  pbVar25 = pbVar25 + 1;\n                }\n              }\n              else if (bVar5) {\n                if (bVar7 != 0x22) goto LAB_00105a55;\n                bVar5 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar3 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00105a55;\n                bVar5 = true;\n              }\n              pbVar1 = pbVar23 + 1;\n              pbVar23 = pbVar23 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_001058e0:\n            *pbVar25 = 0;\n            lVar17 = xstrdup(__ptr);\n            *plVar19 = lVar17;\n            __src[lVar24 + 1] = 0;\n            bVar7 = *pbVar23;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar23[1];\n              pbVar23 = pbVar23 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            lVar24 = lVar24 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          plVar19 = plVar18;\n          if (param_2 == plVar18) goto LAB_00105c79;\n          goto LAB_0010597d;\n        }\nLAB_00105c5c:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == plVar18) {\nLAB_00105c79:\n          if (*plVar18 == 0) {\n            iVar10 = 0;\n          }\n          else {\n            lVar24 = 1;\n            do {\n              iVar10 = (int)lVar24;\n              plVar19 = plVar18 + lVar24;\n              lVar24 = lVar24 + 1;\n            } while (*plVar19 != 0);\n          }\n          lVar17 = 0;\n          plVar19 = (long *)xmalloc((long)(iVar10 + 1) << 3);\n          lVar24 = *plVar18;\n          while (lVar24 != 0) {\n            uVar20 = xstrdup();\n            *(undefined8 *)((long)plVar19 + lVar17) = uVar20;\n            lVar17 = lVar17 + 8;\n            lVar24 = *(long *)((long)plVar18 + lVar17);\n          }\n          *(undefined8 *)((long)plVar19 + lVar17) = 0;\nLAB_0010597d:\n          plVar18 = plVar19;\n          if (*__src == 0) goto LAB_00105d50;\n          pcVar22 = (char *)0x0;\n          do {\n            pcVar22 = (char *)((long)pcVar22 + 1);\n          } while (__src[(long)pcVar22] != 0);\n          local_108 = (long)pcVar22 * 8;\n        }\n        else {\nLAB_00105d50:\n          pcVar22 = (char *)0x0;\n          local_108 = 0;\n        }\n        free((void *)plVar18[(long)unaff_RBP]);\n        plVar18 = (long *)xrealloc(plVar18,(long)((long)pcVar22 + (long)param_1 + 1) * 8);\n        iVar10 = param_1 + -1 + (int)pcVar22;\n        memmove(plVar18 + (long)(undefined **)((long)unaff_RBP + (long)pcVar22),\n                plVar18 + 1 + (long)unaff_RBP,(long)(param_1 - iVar12) << 3);\n        memcpy(plVar18 + (long)unaff_RBP,__src,local_108);\n        free(__src);\n        free(__s);\n        fclose(__stream);\n        uVar11 = local_110 + 1;\n        unaff_RBP = (undefined **)((long)unaff_RBP + (long)pcVar22);\n        unaff_R12 = piVar27;\n        param_1 = iVar10;\n        if (iVar10 <= (int)uVar11) break;\n      }\n      unaff_R12 = (int *)(ulong)uVar11;\n    } while( true );\n  }\n  iVar12 = bfd_init();\n  pcVar26 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar12 != 0x118) goto LAB_00106085;\n  unaff_RBP = &PTR_s_debug_syms_0010b280;\n  cVar8 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar22 = \"aABCDef:gHhjJlnopPrSst:uU:vVvWX:\";\n  unaff_R12 = (int *)\"x86_64-pc-linux-gnu\";\n  cVar9 = DAT_0010b23b;\n  cVar6 = DAT_0010b240;\n  uVar14 = DAT_0010b244;\n  if (cVar8 != '\\0') {\nswitchD_00105c5a_caseD_0:\n    DAT_0010b244 = uVar14;\n    DAT_0010b240 = cVar6;\n    DAT_0010b23b = cVar9;\n    uVar13 = getopt_long(param_1,plVar18,pcVar22);\n    piVar27 = _optarg;\n    piVar15 = (int *)pcVar22;\n    cVar9 = DAT_0010b23b;\n    cVar6 = DAT_0010b240;\n    uVar14 = DAT_0010b244;\n    switch(uVar13) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 0xb:\n    case 0xc:\n    case 0xd:\n    case 0xe:\n    case 0xf:\n    case 0x10:\n    case 0x11:\n    case 0x12:\n    case 0x13:\n    case 0x14:\n    case 0x15:\n    case 0x16:\n    case 0x17:\n    case 0x18:\n    case 0x19:\n    case 0x1a:\n    case 0x1b:\n    case 0x1c:\n    case 0x1d:\n    case 0x1e:\n    case 0x1f:\n    case 0x20:\n    case 0x21:\n    case 0x22:\n    case 0x23:\n    case 0x24:\n    case 0x25:\n    case 0x26:\n    case 0x27:\n    case 0x28:\n    case 0x29:\n    case 0x2a:\n    case 0x2b:\n    case 0x2c:\n    case 0x2d:\n    case 0x2e:\n    case 0x2f:\n    case 0x30:\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x49:\n    case 0x4a:\n    case 0x4b:\n    case 0x4c:\n    case 0x4d:\n    case 0x4e:\n    case 0x4f:\n    case 0x51:\n    case 0x52:\n    case 0x54:\n    case 0x59:\n    case 0x5a:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x5e:\n    case 0x5f:\n    case 0x60:\n    case 0x62:\n    case 99:\n    case 100:\n    case 0x69:\n    case 0x6b:\n    case 0x6d:\n    case 0x71:\n    case 0x77:\n    case 0x78:\n    case 0x79:\n    case 0x7a:\n    case 0x7b:\n    case 0x7c:\n    case 0x7d:\n    case 0x7e:\n    case 0x7f:\n    case 0x80:\n    case 0x81:\n    case 0x82:\n    case 0x83:\n    case 0x84:\n    case 0x85:\n    case 0x86:\n    case 0x87:\n    case 0x88:\n    case 0x89:\n    case 0x8a:\n    case 0x8b:\n    case 0x8c:\n    case 0x8d:\n    case 0x8e:\n    case 0x8f:\n    case 0x90:\n    case 0x91:\n    case 0x92:\n    case 0x93:\n    case 0x94:\n    case 0x95:\n    case 0x96:\n    case 0x97:\n    case 0x98:\n    case 0x99:\n    case 0x9a:\n    case 0x9b:\n    case 0x9c:\n    case 0x9d:\n    case 0x9e:\n    case 0x9f:\n    case 0xa0:\n    case 0xa1:\n    case 0xa2:\n    case 0xa3:\n    case 0xa4:\n    case 0xa5:\n    case 0xa6:\n    case 0xa7:\n    case 0xa8:\n    case 0xa9:\n    case 0xaa:\n    case 0xab:\n    case 0xac:\n    case 0xad:\n    case 0xae:\n    case 0xaf:\n    case 0xb0:\n    case 0xb1:\n    case 0xb2:\n    case 0xb3:\n    case 0xb4:\n    case 0xb5:\n    case 0xb6:\n    case 0xb7:\n    case 0xb8:\n    case 0xb9:\n    case 0xba:\n    case 0xbb:\n    case 0xbc:\n    case 0xbd:\n    case 0xbe:\n    case 0xbf:\n    case 0xc0:\n    case 0xc1:\n    case 0xc2:\n    case 0xc3:\n    case 0xc4:\n    case 0xc5:\n    case 0xc6:\n    case 199:\n      usage(_stderr,1);\n      piVar27 = unaff_R12;\nLAB_001061d5:\n      iVar12 = strcmp((char *)piVar27,\"l\");\n      if (iVar12 == 0) goto LAB_001061a3;\n      iVar12 = strcmp((char *)piVar27,\"escape\");\n      unaff_R12 = piVar27;\n      if ((iVar12 == 0) || (iVar12 = strcmp((char *)piVar27,\"e\"), iVar12 == 0)) {\n        DAT_0010b7e0 = 2;\n        cVar9 = DAT_0010b23b;\n        cVar6 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      iVar12 = strcmp((char *)piVar27,\"invalid\");\n      if ((iVar12 == 0) || (iVar12 = strcmp((char *)piVar27,\"i\"), iVar12 == 0)) {\n        DAT_0010b7e0 = 5;\n        cVar9 = DAT_0010b23b;\n        cVar6 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      iVar12 = strcmp((char *)piVar27,\"hex\");\n      if ((iVar12 == 0) || (iVar12 = strcmp((char *)piVar27,\"x\"), iVar12 == 0)) {\n        DAT_0010b7e0 = 3;\n        cVar9 = DAT_0010b23b;\n        cVar6 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      iVar12 = strcmp((char *)piVar27,\"highlight\");\n      if ((iVar12 == 0) || (iVar12 = strcmp((char *)piVar27,\"h\"), iVar12 == 0)) {\n        DAT_0010b7e0 = 4;\n        cVar9 = DAT_0010b23b;\n        cVar6 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      pcVar26 = \"invalid argument to -U/--unicode: %s\";\n      break;\n    case 0x41:\n    case 0x6f:\n      DAT_0010b818 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x42:\n      set_output_format(&DAT_00107033);\n      cVar9 = DAT_0010b23b;\n      cVar6 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x43:\n      goto switchD_00105c5a_caseD_43;\n    case 0x44:\n      DAT_0010b80c = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x48:\n    case 0x68:\n      usage(_stdout,0);\nswitchD_00105c5a_caseD_43:\n      unaff_R12 = (int *)&optarg;\n      DAT_0010b814 = 1;\n      cVar9 = DAT_0010b23b;\n      cVar6 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      if (_optarg != (int *)0x0) {\n        iVar12 = cplus_demangle_name_to_style();\n        piVar15 = _optarg;\n        if (iVar12 == 0) {\n          uVar20 = dcgettext(0,\"unknown demangling style `%s\\'\",5);\n          fatal(uVar20,piVar15);\nswitchD_00105c5a_caseD_cc:\n          DAT_0010b248 = DAT_0010b248 | 0x40000;\n          pcVar22 = (char *)piVar15;\n          cVar9 = DAT_0010b23b;\n          cVar6 = DAT_0010b240;\n          uVar14 = DAT_0010b244;\n        }\n        else {\n          cplus_demangle_set_style();\n          cVar9 = DAT_0010b23b;\n          cVar6 = DAT_0010b240;\n          uVar14 = DAT_0010b244;\n        }\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x50:\n      set_output_format(\"posix\");\n      cVar9 = DAT_0010b23b;\n      cVar6 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x53:\n      DAT_0010b7ec = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x55:\n      DAT_0010b7e4 = 1;\n      DAT_0010b7e8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x56:\n      goto switchD_00105c5a_caseD_56;\n    case 0x57:\n      DAT_0010b7d8 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x58:\n      iVar12 = strcmp((char *)_optarg,\"32_64\");\n      cVar9 = DAT_0010b23b;\n      cVar6 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      if (iVar12 != 0) {\n        pcVar26 = \"Only -X 32_64 is supported\";\nLAB_00106085:\n        uVar20 = dcgettext(0,pcVar26,5);\n        fatal(uVar20);\nswitchD_00105c5a_caseD_56:\n        DAT_0010b7dc = 1;\n        cVar9 = DAT_0010b23b;\n        cVar6 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x61:\n      DAT_0010b81c = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x66:\n      set_output_format(_optarg);\n      cVar9 = DAT_0010b23b;\n      cVar6 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x67:\n      DAT_0010b808 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6a:\n      set_output_format(\"just-symbols\");\n      cVar9 = DAT_0010b23b;\n      cVar6 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6c:\n      DAT_0010b804 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6e:\n    case 0x76:\n      DAT_0010b7fc = 1;\n      DAT_0010b800 = 0;\n      DAT_0010b7f8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x70:\n      DAT_0010b800 = 1;\n      DAT_0010b7fc = 0;\n      DAT_0010b7f8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x72:\n      DAT_0010b7f4 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x73:\n      _DAT_0010b7f0 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x74:\n      cVar9 = *(char *)_optarg;\n      unaff_R12 = piVar27;\n      cVar6 = cVar9;\n      uVar14 = 10;\n      if (cVar9 == 'd') goto switchD_00105c5a_caseD_0;\n      if ('c' < cVar9) {\n        if (cVar9 == 'o') {\n          uVar14 = 8;\n          goto switchD_00105c5a_caseD_0;\n        }\n        if (cVar9 == 'x') {\n          uVar14 = 0x10;\n          goto switchD_00105c5a_caseD_0;\n        }\n      }\n      pcVar26 = \"%s: invalid radix\";\n      break;\n    case 0x75:\n      DAT_0010b7e8 = 1;\n      DAT_0010b7e4 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 200:\n      DAT_0010b7d0 = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xc9:\n      bfd_plugin_set_plugin(_optarg);\n      cVar9 = DAT_0010b23b;\n      cVar6 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0xca:\n      DAT_0010b7f8 = 1;\n      DAT_0010b800 = 0;\n      DAT_0010b7fc = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcb:\n      DAT_0010b248 = DAT_0010b248 & 0xfffbffff;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcc:\n      goto switchD_00105c5a_caseD_cc;\n    case 0xcd:\n      DAT_0010b7c8 = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xce:\n      iVar12 = strcmp((char *)_optarg,\"default\");\n      if ((iVar12 == 0) || (iVar12 = strcmp((char *)piVar27,\"d\"), iVar12 == 0)) {\n        DAT_0010b7e0 = 0;\n        unaff_R12 = piVar27;\n        cVar9 = DAT_0010b23b;\n        cVar6 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n      }\n      else {\n        iVar12 = strcmp((char *)piVar27,\"locale\");\n        if (iVar12 != 0) goto LAB_001061d5;\nLAB_001061a3:\n        DAT_0010b7e0 = 1;\n        unaff_R12 = piVar27;\n        cVar9 = DAT_0010b23b;\n        cVar6 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0xcf:\n      goto switchD_00105c5a_caseD_cf;\n    default:\n      goto code_r0x00105b40;\n    }\n    uVar20 = dcgettext(0,pcVar26,5);\n    fatal(uVar20,piVar27);\nLAB_00105f13:\n    lVar24 = *plVar18;\n    pcVar26 = \"%s: error: @-file refers to a directory\\n\";\nLAB_00105f1d:\n    fprintf(_stderr,pcVar26,lVar24);\n    xexit(1);\n    goto LAB_00105f38;\n  }\n  uVar14 = bfd_get_error();\n  uVar20 = bfd_errmsg(uVar14);\n  uVar21 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n  fatal(uVar21,\"x86_64-pc-linux-gnu\",uVar20);\n  goto LAB_0010613c;\nLAB_001057c0:\n  bVar7 = pbVar23[1];\n  pbVar23 = pbVar23 + 1;\n  if (bVar7 == 0) goto LAB_00105c5c;\n  goto LAB_001057d0;\nswitchD_00105c5a_caseD_cf:\n  _DAT_0010b810 = 1;\n  goto switchD_00105c5a_caseD_0;\ncode_r0x00105b40:\n  unaff_RBP = (undefined **)(ulong)DAT_0010b7dc;\n  if (DAT_0010b7dc != 0) {\n    printf(\"GNU %s %s\\n\",&DAT_001070c6,\"(GNU Binutils for Debian) 2.40\");\n    pcVar22 = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n    printf(pcVar22);\n    pcVar22 = (char *)dcgettext(0,\n                                \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                ,5);\n    printf(pcVar22);\n                    \n    exit(0);\n  }\n  if ((DAT_0010b7f8 != 0) && (DAT_0010b7e8 != 0)) {\n    uVar20 = dcgettext(0,\"Using the --size-sort and --undefined-only options together\",5);\n    non_fatal(uVar20);\n    uVar20 = dcgettext(0,\"will produce no output, since undefined symbols have no size.\",5);\n    non_fatal(uVar20);\n    return unaff_RBP;\n  }\n  pcVar22 = &optind;\n  if (_optind != param_1) {\n    if (1 < param_1 - _optind) {\nLAB_00105f38:\n      _DAT_0010b7c4 = 1;\n    }\n    while( true ) {\n      iVar12 = *(int *)pcVar22;\n      if (param_1 <= iVar12) break;\n      lVar24 = plVar18[iVar12];\n      *(int *)pcVar22 = iVar12 + 1;\n      cVar9 = display_file(lVar24);\n      if (cVar9 != '\\0') {\n        iVar12 = *(int *)pcVar22;\n        if (param_1 <= iVar12) break;\n        lVar24 = plVar18[iVar12];\n        *(int *)pcVar22 = iVar12 + 1;\n        cVar9 = display_file(lVar24);\n        if (cVar9 != '\\0') {\n          iVar12 = *(int *)pcVar22;\n          while( true ) {\n            if (param_1 <= iVar12) goto LAB_00105bdd;\n            lVar24 = plVar18[iVar12];\n            *(int *)pcVar22 = iVar12 + 1;\n            cVar9 = display_file(lVar24);\n            if (cVar9 == '\\0') break;\n            iVar12 = *(int *)pcVar22;\n          }\n        }\n      }\n      unaff_RBP = (undefined **)(ulong)((int)unaff_RBP + 1);\n    }\nLAB_00105bdd:\n                    \n    exit((int)unaff_RBP);\n  }\nLAB_0010613c:\n  uVar11 = display_file(\"a.out\");\n  return (undefined **)(ulong)((uVar11 ^ 1) & 0xff);\n}\n\n",
            "current_name": "FUNC_001055f0",
            "entrypoint": "0x001055f0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_001055f0": "FUNC_001055f0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_001062d0": {
            "additional_data": {
                "DAT_0010b818": {
                    "1": "is_busy",
                    "2": "flag2"
                },
                "FUN_001062d0": {
                    "1": "print_if_not_busy",
                    "2": "print_if_conditions_met",
                    "3": "print_if_enabled",
                    "4": "print_message",
                    "5": "print_if_flag_set",
                    "7": "print_if_condition_met"
                },
                "_DAT_0010b7c4": {
                    "1": "debug_mode_flag",
                    "2": "condition_1"
                },
                "param_1": {
                    "1": "input_string",
                    "30": "message"
                },
                "param_10": {
                    "1": "param_10"
                },
                "param_2": {
                    "1": "param_2"
                },
                "param_3": {
                    "1": "param_3"
                },
                "param_4": {
                    "1": "param_4"
                },
                "param_5": {
                    "1": "param_5"
                },
                "param_6": {
                    "1": "param_6"
                },
                "param_7": {
                    "1": "param_7"
                },
                "param_8": {
                    "1": "param_8"
                },
                "param_9": {
                    "1": "param_9"
                },
                "printf": {
                    "1": "print"
                }
            },
            "called": [
                "FUN_00102190"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\n\n\nvoid print_if_condition_met_001062d0(undefined8 message)\n\n{\n  if ((_DAT_0010b7c4 != 0) && (DAT_0010b818 == 0)) {\n    print(\"\\n%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "print_if_condition_met_001062d0",
            "entrypoint": "0x001062d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001062d0": "print_if_condition_met_001062d0",
                "param_1": "message",
                "printf": "print"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00106300": {
            "additional_data": {
                "&local_d8": {
                    "1": "args_ptr"
                },
                "FUN_00106300": {
                    "1": "print_and_exit",
                    "14": "print_error_message",
                    "2": "report_and_print_error",
                    "4": "report_and_exit",
                    "7": "report_error"
                },
                "FUN_001063a0": {
                    "1": "print_error"
                },
                "__arg": {
                    "1": "argument",
                    "2": "arg_array",
                    "3": "local_args",
                    "4": "arg",
                    "9": "arg_ptr"
                },
                "__format": {
                    "1": "format_pointer",
                    "8": "format_str",
                    "9": "format_string"
                },
                "__gnuc_va_list": {
                    "1": "va_list"
                },
                "_stderr": {
                    "1": "error_output"
                },
                "_stdout": {
                    "1": "standard_output"
                },
                "fprintf": {
                    "1": "print_error"
                },
                "in_AL": {
                    "1": "is_debug_mode",
                    "3": "is_error",
                    "4": "input_flag",
                    "5": "condition",
                    "9": "flag"
                },
                "local_18": {
                    "1": "local_8",
                    "3": "param_8",
                    "5": "param8_copy"
                },
                "local_28": {
                    "1": "value7",
                    "3": "param_7",
                    "5": "param7_copy"
                },
                "local_38": {
                    "1": "arg6_value",
                    "3": "param_6",
                    "5": "param6_copy"
                },
                "local_48": {
                    "1": "input5_copy",
                    "3": "param_5",
                    "5": "param5_copy"
                },
                "local_58": {
                    "1": "input4_copy",
                    "3": "arg4_copy",
                    "5": "param4_copy"
                },
                "local_68": {
                    "1": "local_error_code_3",
                    "3": "param_3",
                    "5": "param3_copy"
                },
                "local_78": {
                    "1": "local_2",
                    "3": "param_2",
                    "4": "param2_copy"
                },
                "local_88": {
                    "1": "arg1_value",
                    "2": "param_1",
                    "7": "error_code_copy"
                },
                "local_90": {
                    "1": "array_element5",
                    "2": "param14",
                    "3": "param_14",
                    "7": "param14_copy"
                },
                "local_98": {
                    "1": "param_98",
                    "2": "param_13_copy",
                    "3": "param_13",
                    "7": "param13_copy"
                },
                "local_a0": {
                    "1": "var_a0",
                    "2": "param12",
                    "3": "param_12",
                    "7": "param12_copy"
                },
                "local_a8": {
                    "1": "unused_param11",
                    "2": "param11",
                    "3": "param_11",
                    "7": "param11_copy"
                },
                "local_b0": {
                    "1": "arg10_copy",
                    "2": "local_var_5",
                    "3": "param_10",
                    "7": "param10_copy"
                },
                "local_b8": {
                    "1": "local_buf",
                    "12": "local_buffer",
                    "3": "temp_buffer",
                    "7": "local_array"
                },
                "local_c8": {
                    "1": "local_var4",
                    "2": "local_buf",
                    "5": "local_buffer",
                    "7": "buffer"
                },
                "local_d0": {
                    "1": "ptr_local_d0",
                    "2": "local_var_3",
                    "4": "buffer"
                },
                "local_d4": {
                    "1": "char_constant",
                    "2": "constant",
                    "3": "local_var_2",
                    "4": "local_var2"
                },
                "local_d8": {
                    "1": "local_variable1",
                    "2": "array_length",
                    "3": "local_var_1",
                    "4": "size"
                },
                "param_1": {
                    "1": "input1",
                    "19": "error_code",
                    "4": "arg1"
                },
                "param_10": {
                    "1": "message_param_1",
                    "10": "param10",
                    "2": "format_string",
                    "3": "arg10",
                    "6": "param_10"
                },
                "param_11": {
                    "1": "unused_param3",
                    "10": "param11",
                    "3": "arg11",
                    "7": "param_11"
                },
                "param_12": {
                    "1": "output_param_3",
                    "10": "param12",
                    "3": "arg12",
                    "7": "param_12"
                },
                "param_13": {
                    "1": "unused_param5",
                    "10": "param13",
                    "3": "arg13",
                    "7": "param_13"
                },
                "param_14": {
                    "1": "message_param_5",
                    "10": "param14",
                    "3": "arg14",
                    "7": "param_14"
                },
                "param_2": {
                    "1": "flags",
                    "2": "error_flag",
                    "4": "param_2",
                    "7": "param2",
                    "8": "arg2"
                },
                "param_3": {
                    "1": "error_code_3",
                    "2": "line_number",
                    "5": "param_3",
                    "8": "arg3",
                    "9": "param3"
                },
                "param_4": {
                    "1": "arg_4",
                    "5": "param_4",
                    "8": "arg4",
                    "9": "param4"
                },
                "param_5": {
                    "1": "first_arg",
                    "5": "param_5",
                    "8": "arg5",
                    "9": "param5"
                },
                "param_6": {
                    "1": "error_code_6",
                    "5": "param_6",
                    "8": "arg6",
                    "9": "param6"
                },
                "param_7": {
                    "1": "third_arg",
                    "6": "param_7",
                    "8": "param7"
                },
                "param_8": {
                    "1": "arg_8",
                    "6": "param_8",
                    "8": "arg8",
                    "9": "param8"
                },
                "param_9": {
                    "1": "unused_param1",
                    "10": "param_9",
                    "4": "arg9",
                    "9": "param9"
                },
                "putc": {
                    "1": "write_character"
                },
                "report": {
                    "1": "report_function"
                },
                "xexit": {
                    "1": "exit_function"
                }
            },
            "called": [
                "FUN_001063a0",
                "FUN_00102350"
            ],
            "calling": [
                "FUN_00103729",
                "FUN_00104370",
                "FUN_0010370a",
                "FUN_001055f0",
                "FUN_001053c0"
            ],
            "code": "\n\n\nvoid print_error_message_00106300(undefined4 error_code,undefined4 arg2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 param_9,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 *arg_ptr;\n  char *format_string;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined *buffer;\n  undefined *buffer;\n  undefined local_buffer [8];\n  undefined8 param10_copy;\n  undefined8 param11_copy;\n  undefined8 param12_copy;\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 error_code_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 param5_copy;\n  undefined4 param6_copy;\n  undefined4 param7_copy;\n  undefined4 param8_copy;\n  \n  arg_ptr = args_ptr;\n  if (flag != '\\0') {\n    error_code_copy = error_code;\n    param2_copy = arg2;\n    param3_copy = param3;\n    param4_copy = param4;\n    param5_copy = param5;\n    param6_copy = param6;\n    param7_copy = param7;\n    param8_copy = param8;\n  }\n  buffer = &stack0x00000008;\n  local_var1 = 8;\n  buffer = local_buffer;\n  local_var2 = 0x30;\n  param10_copy = param10;\n  param11_copy = param11;\n  param12_copy = param12;\n  param13_copy = param13;\n  param14_copy = param14;\n  report_function();\n  format_string = (char *)0x1;\n  exit_function();\n  fflush(standard_output);\n  print_error(error_output,\"%s: \",DAT_0010b820);\n  vprint_error(error_output,format_string,arg_ptr);\n  write_character(10,error_output);\n  return;\n}\n\n",
            "current_name": "print_error_message_00106300",
            "entrypoint": "0x00106300",
            "imported": false,
            "improved": true,
            "renaming": {
                "&local_d8": "args_ptr",
                "FUN_00106300": "print_error_message_00106300",
                "__arg": "arg_ptr",
                "__format": "format_string",
                "_stderr": "error_output",
                "_stdout": "standard_output",
                "fprintf": "print_error",
                "in_AL": "flag",
                "local_18": "param8_copy",
                "local_28": "param7_copy",
                "local_38": "param6_copy",
                "local_48": "param5_copy",
                "local_58": "param4_copy",
                "local_68": "param3_copy",
                "local_78": "param2_copy",
                "local_88": "error_code_copy",
                "local_90": "param14_copy",
                "local_98": "param13_copy",
                "local_a0": "param12_copy",
                "local_a8": "param11_copy",
                "local_b0": "param10_copy",
                "local_b8": "local_buffer",
                "local_c8": "buffer",
                "local_d0": "buffer",
                "local_d4": "local_var2",
                "local_d8": "local_var1",
                "param_1": "error_code",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "arg2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "putc": "write_character",
                "report": "report_function",
                "xexit": "exit_function"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001063a0": {
            "additional_data": {
                "FUN_001063a0": {
                    "2": "print_formatted_message",
                    "29": "print_error_message"
                },
                "__gnuc_va_list": {
                    "1": "args",
                    "3": "arguments"
                },
                "__gnuc_va_list param_2": {
                    "1": "variadic_arguments"
                },
                "_stderr": {
                    "11": "standard_error",
                    "2": "stderr"
                },
                "_stdout": {
                    "11": "standard_output",
                    "2": "stdout"
                },
                "fflush": {
                    "1": "flush_output"
                },
                "fprintf": {
                    "1": "print_formatted"
                },
                "param_1": {
                    "1": "error_msg",
                    "16": "message",
                    "6": "format_string",
                    "7": "error_message"
                },
                "param_2": {
                    "1": "arguments_list",
                    "10": "args",
                    "2": "argument_list",
                    "8": "arguments"
                },
                "putc": {
                    "1": "print_new_line",
                    "2": "put_character"
                },
                "stderr": {
                    "2": "standard_error"
                },
                "stdout": {
                    "2": "standard_output"
                },
                "vfprintf": {
                    "1": "variable_format_print"
                }
            },
            "called": [
                "FUN_001022b0",
                "FUN_00102260",
                "FUN_00102250",
                "FUN_00102370"
            ],
            "calling": [
                "FUN_00106300",
                "FUN_00106400"
            ],
            "code": "\n\n\nvoid print_error_message_001063a0(char *message,arguments args)\n\n{\n  flush_output(standard_output);\n  format_print(standard_error,\"%s: \",DAT_0010b820);\n  variable_format_print(standard_error,message,args);\n  write_character(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_error_message_001063a0",
            "entrypoint": "0x001063a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001063a0": "print_error_message_001063a0",
                "__gnuc_va_list": "arguments",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "fflush": "flush_output",
                "fprintf": "format_print",
                "param_1": "message",
                "param_2": "args",
                "putc": "write_character",
                "stderr": "standard_error",
                "stdout": "standard_output",
                "vfprintf": "variable_format_print"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00106400": {
            "additional_data": {
                "FUN_001063a0": {
                    "1": "format_and_report"
                },
                "FUN_00106400": {
                    "1": "handle_report",
                    "18": "report_data",
                    "2": "report_and_process_data",
                    "7": "report_function"
                },
                "in_AL": {
                    "1": "is_enabled",
                    "12": "flag",
                    "2": "condition_flag",
                    "4": "input_flag",
                    "7": "condition"
                },
                "local_18": {
                    "1": "data8_copy",
                    "2": "local_data8",
                    "4": "input8_copy"
                },
                "local_28": {
                    "1": "local_param7",
                    "2": "data7",
                    "4": "input7_copy"
                },
                "local_38": {
                    "1": "data6_copy",
                    "2": "data6",
                    "4": "input6_copy"
                },
                "local_48": {
                    "1": "source5_copy",
                    "2": "local_data5",
                    "4": "input5_copy"
                },
                "local_58": {
                    "1": "data4_copy",
                    "2": "local_arg4",
                    "4": "input4_copy"
                },
                "local_68": {
                    "1": "source3_copy",
                    "2": "local_data3",
                    "4": "input3_copy"
                },
                "local_78": {
                    "1": "input2",
                    "2": "local_input2",
                    "4": "input2_copy"
                },
                "local_88": {
                    "1": "input1",
                    "2": "local1",
                    "4": "input1_copy"
                },
                "local_90": {
                    "1": "data6",
                    "2": "param_14",
                    "5": "param14_copy",
                    "6": "param14"
                },
                "local_98": {
                    "1": "buffer13",
                    "2": "local_param5",
                    "5": "param13_copy",
                    "6": "param13"
                },
                "local_a0": {
                    "1": "data4",
                    "2": "param4_copy",
                    "5": "param12_copy",
                    "6": "param12"
                },
                "local_a8": {
                    "1": "local_var4",
                    "2": "param_11",
                    "5": "param11_copy",
                    "6": "param11"
                },
                "local_b0": {
                    "1": "buffer10",
                    "2": "param_10",
                    "5": "param10_copy",
                    "6": "param10"
                },
                "local_b8": {
                    "1": "temp_array",
                    "6": "temp_buffer"
                },
                "local_b8 [8]": {
                    "1": "local_array"
                },
                "local_c8": {
                    "1": "pointer2",
                    "17": "local_buffer",
                    "2": "local_array2",
                    "4": "buffer"
                },
                "local_d0": {
                    "1": "data",
                    "2": "local_array1",
                    "5": "buffer_ptr",
                    "6": "stack_pointer",
                    "8": "buffer"
                },
                "local_d4": {
                    "1": "threshold",
                    "2": "count",
                    "3": "buffer_size",
                    "4": "size",
                    "6": "length"
                },
                "local_d8": {
                    "1": "length",
                    "12": "size",
                    "3": "count",
                    "4": "stack_size",
                    "7": "buffer_size"
                },
                "param_1": {
                    "1": "source1",
                    "12": "input1",
                    "3": "arg1",
                    "6": "data1"
                },
                "param_10": {
                    "1": "param_b",
                    "2": "param1",
                    "3": "param2",
                    "4": "output2",
                    "6": "param10"
                },
                "param_11": {
                    "1": "param_b",
                    "2": "report_param3",
                    "3": "param3",
                    "4": "output3",
                    "6": "param11"
                },
                "param_12": {
                    "1": "param_c",
                    "2": "data4",
                    "3": "param4",
                    "4": "output4",
                    "6": "param12"
                },
                "param_13": {
                    "1": "param_d",
                    "2": "report_param5",
                    "3": "param5",
                    "4": "output5",
                    "6": "param13"
                },
                "param_14": {
                    "1": "param_e",
                    "2": "data6",
                    "3": "param6",
                    "4": "output6",
                    "6": "param14"
                },
                "param_2": {
                    "1": "report_data2",
                    "12": "input2",
                    "2": "param2",
                    "3": "arg2",
                    "6": "data2"
                },
                "param_3": {
                    "1": "input_param3",
                    "12": "input3",
                    "2": "param3",
                    "3": "arg3",
                    "6": "data3"
                },
                "param_4": {
                    "1": "report_param4",
                    "12": "input4",
                    "2": "param4",
                    "3": "arg4",
                    "6": "data4"
                },
                "param_5": {
                    "1": "report_value5",
                    "12": "input5",
                    "2": "param5",
                    "3": "arg5",
                    "6": "data5"
                },
                "param_6": {
                    "1": "parameter6",
                    "12": "input6",
                    "2": "param6",
                    "3": "arg6",
                    "6": "data6"
                },
                "param_7": {
                    "1": "report_data7",
                    "12": "input7",
                    "2": "param7",
                    "3": "arg7",
                    "6": "data7"
                },
                "param_8": {
                    "1": "input_param8",
                    "12": "input8",
                    "2": "param8",
                    "3": "arg8",
                    "6": "data8"
                },
                "param_9": {
                    "1": "report_id",
                    "2": "data1",
                    "3": "param1",
                    "5": "output1"
                },
                "report": {
                    "1": "print_function"
                }
            },
            "called": [
                "FUN_001063a0"
            ],
            "calling": [
                "FUN_001048e0",
                "FUN_0010249f",
                "FUN_001043d0",
                "FUN_00104d5b",
                "FUN_001055f0"
            ],
            "code": "\nvoid report_data_00106400(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 output1,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 length;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_buffer [8];\n  undefined8 param10;\n  undefined8 param11;\n  undefined8 param12;\n  undefined8 param13;\n  undefined8 param14;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  undefined4 input5_copy;\n  undefined4 input6_copy;\n  undefined4 input7_copy;\n  undefined4 input8_copy;\n  \n  if (flag != '\\0') {\n    input1_copy = input1;\n    input2_copy = input2;\n    input3_copy = input3;\n    input4_copy = input4;\n    input5_copy = input5;\n    input6_copy = input6;\n    input7_copy = input7;\n    input8_copy = input8;\n  }\n  buffer = &stack0x00000008;\n  size = 8;\n  local_buffer = local_buffer;\n  length = 0x30;\n  param10 = param10;\n  param11 = param11;\n  param12 = param12;\n  param13 = param13;\n  param14 = param14;\n  print_function(output1,&size);\n  return;\n}\n\n",
            "current_name": "report_data_00106400",
            "entrypoint": "0x00106400",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00106400": "report_data_00106400",
                "in_AL": "flag",
                "local_18": "input8_copy",
                "local_28": "input7_copy",
                "local_38": "input6_copy",
                "local_48": "input5_copy",
                "local_58": "input4_copy",
                "local_68": "input3_copy",
                "local_78": "input2_copy",
                "local_88": "input1_copy",
                "local_90": "param14",
                "local_98": "param13",
                "local_a0": "param12",
                "local_a8": "param11",
                "local_b0": "param10",
                "local_b8": "local_buffer",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "length",
                "local_d8": "size",
                "param_1": "input1",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "output1",
                "report": "print_function"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001064a0": {
            "additional_data": {
                "*param_1": {
                    "1": "message_type_string"
                },
                "*param_2": {
                    "1": "message_string"
                },
                "DAT_0010b818": {
                    "1": "is_enabled"
                },
                "FUN_001064a0": {
                    "1": "print_formatted_message",
                    "28": "print_message"
                },
                "param_1": {
                    "1": "message_ptr",
                    "2": "message_header",
                    "3": "message",
                    "5": "message1"
                },
                "param_2": {
                    "1": "header",
                    "15": "message",
                    "2": "log_message",
                    "5": "message2"
                },
                "printf": {
                    "3": "print_formatted"
                }
            },
            "called": [
                "FUN_001036e0"
            ],
            "calling": [],
            "code": "\nvoid print_message_001064a0(undefined8 *message_type,undefined8 *message)\n\n{\n  if (DAT_0010b818 == 0) {\n    return;\n  }\n  if (message_type != (undefined8 *)0x0) {\n    print_formatted(\"%s[%s]: \",*message_type);\n    return;\n  }\n  print_formatted(\"%s: \",*message);\n  return;\n}\n\n",
            "current_name": "print_message_001064a0",
            "entrypoint": "0x001064a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001064a0": "print_message_001064a0",
                "param_1": "message_type",
                "param_2": "message",
                "printf": "print_formatted"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001064b0": {
            "additional_data": {
                "*(char *)(*param_1 + 8)": {
                    "1": "symbol_class"
                },
                "*(long *)(param_1[2] + 0x38)": {
                    "1": "some_value"
                },
                "*(undefined8 *)*param_1": {
                    "1": "value"
                },
                "*param_1": {
                    "1": "symbol_ptr"
                },
                "DAT_00107363": {
                    "1": "symbol_name_data",
                    "2": "symbol_name"
                },
                "FUN_00103a66": {
                    "1": "execute_something"
                },
                "FUN_00104740": {
                    "1": "print_value",
                    "2": "process_value"
                },
                "FUN_001054d0": {
                    "1": "print_value",
                    "2": "perform_operation",
                    "3": "process_value"
                },
                "FUN_001064b0": {
                    "1": "print_symbol_and_value",
                    "11": "print_symbol_info",
                    "16": "print_symbol_information"
                },
                "PRINT_OFFSET": {
                    "1": "0x20"
                },
                "bfd_is_undefined_symclass": {
                    "1": "check_if_undefined_symbol",
                    "2": "check_undefined_symbol_class",
                    "5": "is_undefined_symbol_class",
                    "6": "is_undefined_symclass"
                },
                "c": {
                    "1": "symbol_character"
                },
                "cVar1": {
                    "1": "is_undefined_symbol_class",
                    "10": "is_undefined_symclass",
                    "14": "is_undefined",
                    "6": "is_undefined_symbol"
                },
                "char *param_1": {
                    "1": "symbol_name"
                },
                "fun_00103a66": {
                    "1": "perform_additional_operations"
                },
                "fun_001054d0": {
                    "1": "print_value"
                },
                "intptr_t": {
                    "1": "symbol_address"
                },
                "param_1": {
                    "1": "param_1_process",
                    "2": "input_array",
                    "4": "symbol",
                    "5": "symbol_address",
                    "7": "symbol_info"
                },
                "param_1 + 8": {
                    "1": "symbol_value"
                },
                "param_1[1]": {
                    "1": "previous_value",
                    "2": "param_1_1"
                },
                "param_1[2]": {
                    "1": "value_check",
                    "2": "related_data",
                    "3": "param_1_2"
                },
                "param_1[2] + 0x38": {
                    "1": "param_1_2_offset_0x38"
                },
                "param_2": {
                    "1": "param_2_process",
                    "2": "symbol_ptr",
                    "3": "symbol_info",
                    "6": "param"
                },
                "param_3": {
                    "1": "yet_another_param",
                    "2": "address",
                    "3": "param_3"
                },
                "param_4": {
                    "1": "some_param",
                    "2": "value",
                    "4": "param_4"
                },
                "print_symname": {
                    "26": "print_symbol_name"
                },
                "print_value_00104740": {
                    "1": "print_value_and_address"
                },
                "print_value_0010651a": {
                    "1": "print_special_value",
                    "2": "print_value_if_not_zero",
                    "3": "print_value_if_nonzero",
                    "4": "print_value_if_not_null"
                },
                "print_value_0010651a()": {
                    "1": "print_value_if_nonzero_with_param"
                },
                "print_value_constprop_0": {
                    "1": "print_constant",
                    "13": "print_constant_value",
                    "2": "print_constant_property_value",
                    "3": "print_value"
                },
                "print_value_constprop_0()": {
                    "1": "print_constant_value_0_with_param"
                },
                "printf": {
                    "1": "print",
                    "3": "print_formatted",
                    "4": "print_formatted_output"
                },
                "putchar": {
                    "1": "print_single_character",
                    "2": "print_char",
                    "21": "print_character"
                },
                "undefined8 *param_3": {
                    "1": "data_ptr"
                }
            },
            "called": [
                "FUN_00102050",
                "FUN_0010651a",
                "FUN_00104740",
                "FUN_001020f0",
                "FUN_001054d0",
                "FUN_00103a66",
                "FUN_00102190"
            ],
            "calling": [],
            "code": "\nvoid print_symbol_information_001064b0(long *symbol_info,undefined8 param)\n\n{\n  char is_undefined;\n  \n  print_symbol_name(&DAT_00107363,symbol_info,0,param);\n  print_formatted_output(\"%c \",(ulong)(uint)(int)*(char *)(*symbol_info + 8));\n  is_undefined = is_undefined_symclass((int)*(char *)(*symbol_info + 8));\n  if (is_undefined != '\\0') {\n    print_formatted_output(\"        \");\n    return;\n  }\n  print_constant_value(*(undefined8 *)*symbol_info);\n  print_character(0x20);\n  if (param_1_2 == 0) {\n    if (param_1_1 != 0) {\n      print_value_if_nonzero_with_param;\n      return;\n    }\n  }\n  else if (*(long *)(param_1_2 + 0x38) != 0) {\n    print_constant_value();\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "print_symbol_information_001064b0",
            "entrypoint": "0x001064b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001064b0": "print_symbol_information_001064b0",
                "bfd_is_undefined_symclass": "is_undefined_symclass",
                "cVar1": "is_undefined",
                "param_1": "symbol_info",
                "param_1[1]": "param_1_1",
                "param_1[2]": "param_1_2",
                "param_2": "param",
                "print_symname": "print_symbol_name",
                "print_value_0010651a": "print_value_if_not_null",
                "print_value_0010651a()": "print_value_if_nonzero_with_param",
                "print_value_constprop_0": "print_constant_value",
                "print_value_constprop_0()": "print_constant_value()",
                "printf": "print_formatted_output",
                "putchar": "print_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010651a": {
            "additional_data": {
                "FUN_001054d0": {
                    "1": "print_single_value",
                    "13": "print_value",
                    "2": "print_value_constprop",
                    "3": "print_value_helper",
                    "6": "print_value_constprop_0"
                },
                "FUN_0010651a": {
                    "1": "print_value_constprop_0_wrapper",
                    "11": "print_constant_value",
                    "12": "print_value",
                    "3": "print_constprop_0"
                },
                "param_1": {
                    "1": "param",
                    "2": "arg"
                },
                "undefined8 param_1": {
                    "1": "value"
                }
            },
            "called": [
                "FUN_001054d0"
            ],
            "calling": [
                "FUN_001064b0",
                "FUN_00103a66"
            ],
            "code": "\nvoid print_value_0010651a(void)\n\n{\n  print_value_0010651a_constprop_0();\n  return;\n}\n\n",
            "current_name": "print_value_0010651a",
            "entrypoint": "0x0010651a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010651a": "print_value_0010651a"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00106530": {
            "additional_data": {
                "DAT_0010b820": {
                    "1": "program_name"
                },
                "FUN_00106530": {
                    "1": "handle_error",
                    "2": "handle_bfd_error",
                    "24": "print_error_message",
                    "3": "print_error"
                },
                "_stderr": {
                    "1": "std_err"
                },
                "_stdout": {
                    "1": "std_out"
                },
                "iVar1": {
                    "1": "error_type",
                    "10": "error_code",
                    "2": "error_status",
                    "7": "error"
                },
                "in_R10": {
                    "1": "unknown",
                    "15": "additional_info"
                },
                "lVar3": {
                    "1": "is_error_code_zero",
                    "2": "is_fatal",
                    "4": "exit_status",
                    "5": "is_error",
                    "7": "error_flag"
                },
                "param_1": {
                    "1": "error_status",
                    "6": "error_code"
                },
                "uVar2": {
                    "1": "error_string",
                    "29": "error_message"
                }
            },
            "called": [
                "FUN_00102350",
                "FUN_00106540"
            ],
            "calling": [
                "FUN_001048e0",
                "FUN_00103463",
                "FUN_00105110",
                "FUN_001043d0",
                "FUN_00102fc3",
                "FUN_00102f9f",
                "FUN_00103c00",
                "FUN_00104d5b",
                "FUN_00102fd2"
            ],
            "code": "\n\n\nvoid print_error_message_00106530(void)\n\n{\n  int error_code;\n  undefined8 error_message;\n  long error_flag;\n  undefined8 additional_info;\n  \n  bfd_nonfatal();\n  error_flag = 1;\n  xexit();\n  error_code = bfd_get_error();\n  if (error_code == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg(error_code);\n  }\n  fflush(std_out);\n  if (error_flag != 0) {\n    fprintf(std_err,\"%s: %s: %s\\n\",DAT_0010b820,error_flag,error_message,additional_info);\n    return;\n  }\n  fprintf(std_err,\"%s: %s\\n\",DAT_0010b820,error_message,additional_info);\n  return;\n}\n\n",
            "current_name": "print_error_message_00106530",
            "entrypoint": "0x00106530",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00106530": "print_error_message_00106530",
                "_stderr": "std_err",
                "_stdout": "std_out",
                "iVar1": "error_code",
                "in_R10": "additional_info",
                "lVar3": "error_flag",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00106540": {
            "additional_data": {
                "FUN_00103a78": {
                    "1": "initialize",
                    "2": "initialize_bfd"
                },
                "FUN_00106540": {
                    "2": "print_bfd_error_message",
                    "23": "print_error_message",
                    "6": "print_error"
                },
                "_stderr": {
                    "1": "standard_error"
                },
                "_stdout": {
                    "1": "standard_output"
                },
                "iVar1": {
                    "1": "error_message_code",
                    "14": "error",
                    "3": "bfd_error",
                    "9": "error_code"
                },
                "in_R10": {
                    "1": "unknown",
                    "3": "unused_variable",
                    "7": "additional_info"
                },
                "param_1": {
                    "1": "error_code",
                    "11": "error_message",
                    "2": "file_name",
                    "6": "error_description",
                    "8": "error_type"
                },
                "uVar2": {
                    "1": "error_message_translation",
                    "18": "error_message",
                    "2": "error_message_text",
                    "3": "error_description",
                    "4": "error_string"
                }
            },
            "called": [
                "FUN_00102390",
                "FUN_00103a78",
                "FUN_001022b0",
                "FUN_00102260",
                "FUN_001021d0"
            ],
            "calling": [
                "FUN_001043d0",
                "FUN_00106530"
            ],
            "code": "\n\n\nvoid print_error_message_00106540(long error_message)\n\n{\n  int error;\n  undefined8 error_message;\n  undefined8 additional_info;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg(error);\n  }\n  fflush(standard_output);\n  if (error_message != 0) {\n    fprintf(standard_error,\"%s: %s: %s\\n\",DAT_0010b820,error_message,error_message,additional_info);\n    return;\n  }\n  fprintf(standard_error,\"%s: %s\\n\",DAT_0010b820,error_message,additional_info);\n  return;\n}\n\n",
            "current_name": "print_error_message_00106540",
            "entrypoint": "0x00106540",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00106540": "print_error_message_00106540",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "iVar1": "error",
                "in_R10": "additional_info",
                "param_1": "error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001065a0": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_001065a0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_001065a0",
            "entrypoint": "0x001065a0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_001065a0": "FUNC_001065a0"
            },
            "skipped": true,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_00102000",
            "FUN_00102020",
            "FUN_00102450",
            "FUN_0010249f",
            "FUN_001025f5",
            "FUN_00102670",
            "FUN_0010268b",
            "FUN_00102c19",
            "FUN_00102f19",
            "FUN_00102f7b",
            "FUN_00102f9f",
            "FUN_00102fc3",
            "FUN_00102fd2",
            "FUN_00103238",
            "FUN_00103463",
            "FUN_0010351b",
            "FUN_00103533",
            "FUN_00103573",
            "FUN_001035a2",
            "FUN_001036a7",
            "FUN_001036e0",
            "FUN_0010370a",
            "FUN_00103729",
            "FUN_00103a78",
            "FUN_00103abf",
            "FUN_00103b2b",
            "FUN_00103b49",
            "FUN_00103b5d",
            "FUN_00103bec",
            "FUN_00103bf6",
            "FUN_00103c00",
            "FUN_00103ca0",
            "FUN_00104397",
            "FUN_001043d0",
            "FUN_00104670",
            "FUN_001047d0",
            "FUN_001049c0",
            "FUN_00104fa0",
            "FUN_00105050",
            "FUN_001053b0",
            "FUN_001053c0",
            "FUN_00105500",
            "FUN_001055a0",
            "FUN_001055f0",
            "FUN_001062d0",
            "FUN_00106300",
            "FUN_001063a0",
            "FUN_00106400",
            "FUN_001064a0",
            "FUN_0010651a",
            "FUN_00106530",
            "FUN_00106540"
        ],
        [
            "FUN_00102475",
            "FUN_00102739",
            "FUN_00103a66",
            "FUN_00104370",
            "FUN_00104d5b",
            "FUN_00105110",
            "FUN_001064b0"
        ],
        [
            "FUN_00104740",
            "FUN_001048e0"
        ],
        [
            "FUN_001054d0"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 318713
}