{
    "functions": {
        "FUN_00102020": {
            "additional_data": {
                "(*(code *)(undefined *)0x0)()": {
                    "1": "call_function"
                },
                "FUN_00102020": {
                    "1": "call_indirect_jump",
                    "2": "execute_function",
                    "21": "execute_indirect_jump"
                },
                "PTR_00102020": {
                    "1": "jump_function_pointer"
                },
                "code": {
                    "3": "function_pointer"
                },
                "indirectJumpAddress": {
                    "1": "jump_location"
                },
                "undefined": {
                    "1": "ptr_to_function",
                    "2": "jump_address",
                    "3": "function_address"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_indirect_jump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(function_pointer *)(function_address *)0x0)();\n  return;\n}\n\n",
            "current_name": "execute_indirect_jump_00102020",
            "entrypoint": "0x00102020",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020",
                "code": "function_pointer",
                "undefined": "function_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102330": {
            "additional_data": {
                "FUN_00102330": {
                    "15": "process_input",
                    "2": "process_and_print_data",
                    "5": "process_and_print_input",
                    "9": "process_data"
                },
                "LAB_00102381": {
                    "1": "print_output"
                },
                "LAB_001023bb": {
                    "1": "handle_double_char"
                },
                "LAB_001023f5": {
                    "1": "handle_single_char"
                },
                "LAB_00102438": {
                    "2": "print_tab"
                },
                "LAB_001033b3": {
                    "1": "read_and_process_byte"
                },
                "LAB_00103400": {
                    "1": "print_output"
                },
                "LAB_0010348e": {
                    "2": "update_data"
                },
                "LAB_001034be": {
                    "1": "exit_function"
                },
                "LAB_001034d5": {
                    "1": "process_output_and_update_data"
                },
                "_sch_istable": {
                    "3": "character_table"
                },
                "_stdout": {
                    "2": "output_stream"
                },
                "bVar4": {
                    "1": "is_counter_valid",
                    "3": "is_counter_less",
                    "5": "is_counter_less_than_limit",
                    "6": "is_less"
                },
                "code_r0x00102330": {
                    "1": "process_and_print_input_loop"
                },
                "fputc": {
                    "1": "put_character"
                },
                "fputs": {
                    "1": "put_string"
                },
                "fread": {
                    "1": "read_bytes"
                },
                "free": {
                    "1": "free_memory"
                },
                "in_AX": {
                    "1": "input_char",
                    "2": "input_flag",
                    "23": "flags",
                    "3": "input_flags"
                },
                "in_R8D": {
                    "1": "byte_index",
                    "15": "counter",
                    "3": "length",
                    "4": "count",
                    "5": "index"
                },
                "in_stack_00000010": {
                    "1": "output_message",
                    "10": "prompt",
                    "3": "input_string",
                    "9": "message"
                },
                "in_stack_00000038": {
                    "1": "suffix",
                    "13": "formatted_output",
                    "4": "output_format",
                    "6": "formatted_value"
                },
                "labs": {
                    "1": "absolute_value"
                },
                "param_1": {
                    "1": "input_size",
                    "12": "input",
                    "2": "input_data",
                    "7": "data",
                    "9": "input_value"
                },
                "print_formatted_output_001034fa": {
                    "1": "print_formatted_output"
                },
                "print_formatted_output_00103510": {
                    "1": "print_formatted_output"
                },
                "print_formatted_value_0010286f": {
                    "1": "print_formatted_value"
                },
                "printf": {
                    "1": "print_formatted"
                },
                "process_input_001034d5": {
                    "1": "process_input"
                },
                "putc": {
                    "1": "put_character"
                },
                "read_bytes_00103520": {
                    "1": "read_bytes"
                },
                "uVar1": {
                    "1": "counter",
                    "2": "count",
                    "5": "temp_var1",
                    "6": "temp1"
                },
                "uVar2": {
                    "1": "temp_var_2",
                    "12": "index1",
                    "2": "index_1",
                    "3": "current_index",
                    "8": "index"
                },
                "uVar3": {
                    "1": "temp_var_3",
                    "10": "next_index",
                    "12": "index2",
                    "2": "index_2"
                },
                "unaff_R14": {
                    "1": "output_string",
                    "22": "buffer",
                    "3": "output",
                    "5": "output_buffer"
                },
                "unaff_R15": {
                    "1": "formatted_string",
                    "16": "formatted_value",
                    "3": "format_string",
                    "5": "format"
                },
                "update_data_00103810": {
                    "1": "update_data"
                }
            },
            "called": [
                "FUN_001034d5"
            ],
            "calling": [
                "FUN_0010259a"
            ],
            "code": "\n\n\nvoid process_input_00102330(ulong input)\n\n{\n  uint temp1;\n  ushort flags;\n  ulong index1;\n  ulong index2;\n  uint counter;\n  char *buffer;\n  undefined8 formatted_value;\n  bool is_less;\n  undefined8 prompt;\n  undefined8 formatted_output;\n  \nloop_until_end:\n  if ((DAT_00108360 != 'S') || ((long)input < 0x80)) {\n    if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n    if ((flags & 0x40) == 0) {\n      process_input_00102330();\n      return;\n    }\n  }\nprint_newline:\n  index1 = (ulong)counter;\n  counter = counter + 1;\n  index2 = (ulong)counter;\n  is_less = counter < DAT_00108374;\n  buffer[index1] = (char)input;\n  if (is_less) goto read_next_byte;\n  do {\n    if (DAT_00108371 != '\\0') {\n      printf(\"%s: \",prompt);\n    }\n    if (DAT_00108372 == '\\0') {\n      buffer[index2] = '\\0';\n      fputs(buffer,stdout);\n    }\n    else {\n      printf_value(formatted_value);\n      buffer[index2] = '\\0';\n      fputs(buffer,stdout);\n    }\n    while (index2 = read_bytes(), index2 != 0xffffffffffffffff) {\n      if (0xff < index2) {\nupdate_data:\n        update_data();\n        break;\n      }\n      if (index2 == 9) {\nprint_tab:\n        putc((int)index2,stdout);\n      }\n      else {\n        if ((*(ushort *)(&character_table + index2 * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)index2 < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index2 * 2) & 0x40) == 0))))\n          goto update_data;\n          goto print_tab;\n        }\n        putc((int)index2,stdout);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,stdout);\n    }\n    else {\n      fputs(DAT_00108358,stdout);\n    }\n    while (index2 = (ulong)DAT_00108374, formatted_value = formatted_output, DAT_00108374 != 0) {\n      index2 = read_bytes();\n      temp1 = DAT_00108374;\n      if (index2 == 0xffffffffffffffff) goto free_memory;\n      if (index2 < 0x100) {\n        if (index2 == 9) {\nhandle_single_char:\n          *buffer = (char)index2;\n          if (temp1 < 2) {\n            printf_output();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&character_table + index2 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index2 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index2 * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto handle_single_char;\n          }\n          *buffer = (char)index2;\n          if (temp1 < 2) {\n            index2 = 1;\n            break;\n          }\n        }\n        index2 = read_bytes();\n        temp1 = DAT_00108374;\n        if (index2 == 0xffffffffffffffff) goto free_memory;\n        if (0xff < index2) goto code_r0x001034d5;\n        if (index2 == 9) {\nhandle_double_char:\n          buffer[1] = (char)index2;\n          if (temp1 < 3) {\n            printf_output();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&character_table + index2 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index2 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index2 * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto handle_double_char;\n          }\n          buffer[1] = (char)index2;\n          if (temp1 < 3) {\n            index2 = 2;\n            break;\n          }\n        }\n        index2 = read_bytes();\n        temp1 = DAT_00108374;\n        if (index2 == 0xffffffffffffffff) goto free_memory;\n        if (0xff < index2) goto code_r0x001034d5;\n        if (index2 == 9) {\nhandle_triple_char:\n          buffer[2] = (char)index2;\n        }\n        else {\n          if ((*(ushort *)(&character_table + index2 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index2 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index2 * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto handle_triple_char;\n          }\n          buffer[2] = (char)index2;\n        }\n        if (temp1 < 4) {\n          index2 = 3;\n          break;\n        }\n        counter = 3;\nread_next_byte:\n        input = read_bytes();\n        if (input == 0xffffffffffffffff) {\nfree_memory:\n          free_memory(buffer);\n          return;\n        }\n        if (input < 0x100) {\n          if ((input == 9) ||\n             (flags = *(ushort *)(&character_table + input * 2), (flags & 0x10) != 0))\n          goto print_newline;\n          goto loop_until_end;\n        }\n      }\ncode_r0x001034d5:\n      update_data();\n    }\n  } while( true );\n}\n\n",
            "current_name": "process_input_00102330",
            "entrypoint": "0x00102330",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102330": "process_input_00102330",
                "LAB_00102381": "handle_triple_char",
                "LAB_001023bb": "handle_double_char",
                "LAB_001023f5": "handle_single_char",
                "LAB_00102438": "print_tab",
                "LAB_001033b3": "read_next_byte",
                "LAB_00103400": "print_newline",
                "LAB_0010348e": "update_data",
                "LAB_001034be": "free_memory",
                "_sch_istable": "character_table",
                "_stdout": "stdout",
                "bVar4": "is_less",
                "code_r0x00102330": "loop_until_end",
                "fputs": "put_string",
                "free": "free_memory",
                "in_AX": "flags",
                "in_R8D": "counter",
                "in_stack_00000010": "prompt",
                "in_stack_00000038": "formatted_output",
                "param_1": "input",
                "print_formatted_output_001034fa": "print_formatted_output",
                "print_formatted_output_00103510": "print_formatted_output",
                "print_formatted_value_0010286f": "print_formatted_value",
                "printf": "print_formatted",
                "process_input_001034d5": "process_input",
                "putc": "put_character",
                "read_bytes_00103520": "read_bytes",
                "uVar1": "temp1",
                "uVar2": "index1",
                "uVar3": "index2",
                "unaff_R14": "buffer",
                "unaff_R15": "formatted_value",
                "update_data_00103810": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010259a": {
            "additional_data": {
                "(*(ushort *)(&_sch_istable + uVar2 * 2) & 0x10) == 0": {
                    "1": "is_not_hex_digit"
                },
                "(*(ushort *)(&_sch_istable + uVar2 * 2) & 0x40) == 0": {
                    "1": "is_not_octal_digit"
                },
                "*_sch_istable": {
                    "1": "character_table"
                },
                "0xff < uVar2": {
                    "1": "u_var2_greater_than_ff"
                },
                "3 < uVar1": {
                    "1": "u_var1_greater_than_3"
                },
                "DAT_00108358": {
                    "1": "new_line_string",
                    "2": "line_ending"
                },
                "DAT_00108360": {
                    "1": "option",
                    "2": "data_type"
                },
                "DAT_00108371": {
                    "1": "is_continuous_output"
                },
                "DAT_00108372": {
                    "1": "use_formatted_value",
                    "3": "is_formatted_output"
                },
                "DAT_00108373": {
                    "1": "is_separated"
                },
                "DAT_00108374": {
                    "1": "buffer_size",
                    "2": "output_size"
                },
                "DAT_00108374 != 0": {
                    "1": "use_formatted_output"
                },
                "FUN_0010259a": {
                    "1": "print_formatted_strings",
                    "19": "print_formatted_output",
                    "2": "print_formatted_values",
                    "3": "print_formatted_value"
                },
                "LAB_00102381": {
                    "1": "tab_character"
                },
                "LAB_001023bb": {
                    "1": "tab_character"
                },
                "LAB_001023f5": {
                    "1": "tab_character"
                },
                "LAB_00102438": {
                    "1": "tab_character"
                },
                "LAB_0010348e": {
                    "1": "process_character"
                },
                "LAB_001034be": {
                    "1": "return_statement"
                },
                "_sch_istable": {
                    "1": "char_is_table",
                    "5": "character_table"
                },
                "_stdout": {
                    "1": "output_stream",
                    "4": "stdout",
                    "6": "standard_output"
                },
                "bVar3": {
                    "1": "is_delimiter",
                    "2": "is_special_char",
                    "4": "is_end",
                    "5": "flag"
                },
                "code_r0x001034d5": {
                    "2": "update_data"
                },
                "fputs": {
                    "1": "output_string",
                    "2": "put_string"
                },
                "free": {
                    "3": "free_memory"
                },
                "in_R8": {
                    "1": "current_position",
                    "2": "input_value2",
                    "3": "current_index",
                    "6": "index"
                },
                "param_11": {
                    "1": "additional_format_string",
                    "2": "format_specifier",
                    "3": "next_format_string"
                },
                "param_7": {
                    "1": "input_value1",
                    "2": "output_index",
                    "3": "input_value",
                    "5": "input_length"
                },
                "param_8": {
                    "1": "format_specifier",
                    "2": "label",
                    "3": "prompt",
                    "4": "message",
                    "5": "input_string",
                    "9": "format_string"
                },
                "print_formatted_output_001034fa": {
                    "1": "print_formatted_output_with_one_char",
                    "6": "print_formatted_output"
                },
                "print_formatted_output_00103510": {
                    "1": "print_formatted_output_with_two_chars",
                    "6": "print_formatted_output"
                },
                "print_formatted_value_0010286f": {
                    "1": "print_formatted_text",
                    "7": "print_formatted_value"
                },
                "process_input_001034d5": {
                    "8": "process_input"
                },
                "put": {
                    "1": "put_character"
                },
                "putc": {
                    "1": "write_char_to_stdout",
                    "3": "put_character"
                },
                "read_bytes_00103520": {
                    "4": "read_byte"
                },
                "uVar1": {
                    "1": "temp_value1",
                    "2": "read_value",
                    "3": "byte_value",
                    "4": "temp1"
                },
                "uVar1 < 2": {
                    "1": "u_var1_less_than_2"
                },
                "uVar1 < 3": {
                    "1": "u_var1_less_than_3"
                },
                "uVar2": {
                    "1": "byte_read",
                    "2": "byte_value",
                    "4": "temp2"
                },
                "uVar2 < 0x100": {
                    "1": "u_var2_less_than_100"
                },
                "uVar2 < 0x80": {
                    "1": "u_var2_less_than_80"
                },
                "uVar2 == 9": {
                    "1": "u_var2_is_tab"
                },
                "unaff_R14": {
                    "1": "output_string_buffer",
                    "13": "output_string",
                    "2": "output_str",
                    "4": "buffer",
                    "8": "output_buffer"
                },
                "unaff_R15": {
                    "1": "temp_var",
                    "2": "format",
                    "3": "output_format",
                    "4": "format_specifier",
                    "5": "format_string",
                    "6": "formatted_value"
                },
                "update_data_00103810": {
                    "8": "update_data"
                }
            },
            "called": [
                "fputs",
                "free",
                "FUN_00103520",
                "FUN_00103510",
                "printf",
                "FUN_001034d5",
                "FUN_0010259a",
                "FUN_001034fa",
                "putc",
                "FUN_0010286f",
                "FUN_00103810",
                "FUN_00102330"
            ],
            "calling": [
                "FUN_0010259a"
            ],
            "code": "\n\n\nvoid print_formatted_output_0010259a(void)\n\n{\n  uint temp1;\n  ulong temp2;\n  ulong index;\n  char *outfputs;\n  undefined8 formatted_value;\n  bool flag;\n  uint input_length;\n  undefined8 format_string;\n  undefined8 next_format_string;\n  \n  do {\n    input_length = (uint)index;\n    printf(\"%s: \",format_string);\n    index = (ulong)input_length;\n    do {\n      if (DAT_00108372 == '\\0') {\n        outfputs[index] = '\\0';\n        fputs(outfputs,standard_output);\n      }\n      else {\n        input_length = (uint)index;\n        print_formatted_value(formatted_value);\n        outfputs[input_length] = '\\0';\n        fputs(outfputs,standard_output);\n      }\n      while (temp2 = read_bytes(), temp2 != 0xffffffffffffffff) {\n        if (0xff < temp2) {\nprocess_character:\n          update_data();\n          break;\n        }\n        if (temp2 == 9) {\ntab_character:\n          putc((int)temp2,standard_output);\n        }\n        else {\n          if ((*(ushort *)(&character_table + temp2 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)temp2 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + temp2 * 2) & 0x40) == 0))))\n            goto process_character;\n            goto tab_character;\n          }\n          put_character((int)temp2,standard_output);\n        }\n      }\n      if (DAT_00108358 == (char *)0x0) {\n        put_character(10,standard_output);\n      }\n      else {\n        fputs(DAT_00108358,standard_output);\n      }\n      while (index = (ulong)DAT_00108374, DAT_00108374 != 0) {\n        temp2 = read_bytes();\n        temp1 = DAT_00108374;\n        if (temp2 == 0xffffffffffffffff) goto return_statement;\n        if (temp2 < 0x100) {\n          if (temp2 == 9) {\ntab_character:\n            *outfputs = (char)temp2;\n            if (temp1 < 2) {\n              print_formatted_output_0010259a();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&character_table + temp2 * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)temp2 < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + temp2 * 2) & 0x40) == 0))))\n              goto update_data;\n              goto tab_character;\n            }\n            *outfputs = (char)temp2;\n            if (temp1 < 2) {\n              index = 1;\n              break;\n            }\n          }\n          temp2 = read_bytes();\n          temp1 = DAT_00108374;\n          if (temp2 == 0xffffffffffffffff) goto return_statement;\n          if (0xff < temp2) goto update_data;\n          if (temp2 == 9) {\ntab_character:\n            outfputs[1] = (char)temp2;\n            if (temp1 < 3) {\n              print_formatted_output_0010259a();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&character_table + temp2 * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)temp2 < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + temp2 * 2) & 0x40) == 0))))\n              goto update_data;\n              goto tab_character;\n            }\n            outfputs[1] = (char)temp2;\n            if (temp1 < 3) {\n              index = 2;\n              break;\n            }\n          }\n          temp2 = read_bytes();\n          temp1 = DAT_00108374;\n          if (temp2 == 0xffffffffffffffff) {\nreturn_statement:\n            free_memory(outfputs);\n            return;\n          }\n          if (0xff < temp2) goto update_data;\n          if (temp2 == 9) {\ntab_character:\n            outfputs[2] = (char)temp2;\n          }\n          else {\n            if ((*(ushort *)(&character_table + temp2 * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)temp2 < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + temp2 * 2) & 0x40) == 0))))\n              goto update_data;\n              goto tab_character;\n            }\n            outfputs[2] = (char)temp2;\n          }\n          if (3 < temp1) {\n            index = 3;\n            do {\n              input_length = (uint)index;\n              temp2 = read_bytes();\n              if (temp2 == 0xffffffffffffffff) goto return_statement;\n              if (0xff < temp2) goto update_data;\n              if (((temp2 != 9) && ((*(ushort *)(&character_table + temp2 * 2) & 0x10) == 0)) &&\n                 ((DAT_00108360 != 'S' || ((long)temp2 < 0x80)))) {\n                if (DAT_00108373 == '\\0') goto update_data;\n                if ((*(ushort *)(&character_table + temp2 * 2) & 0x40) == 0) {\n                  process_input();\n                  return;\n                }\n              }\n              index = (ulong)(input_length + 1);\n              flag = DAT_00108374 <= input_length + 1;\n              outfputs[input_length] = (char)temp2;\n              if (flag) goto joined_r0x0010341b;\n            } while( true );\n          }\n          index = 3;\n          break;\n        }\nupdate_data:\n        update_data();\n      }\njoined_r0x0010341b:\n      formatted_value = next_format_string;\n    } while (DAT_00108371 == '\\0');\n  } while( true );\n}\n\n",
            "current_name": "print_formatted_output_0010259a",
            "entrypoint": "0x0010259a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010259a": "print_formatted_output_0010259a",
                "LAB_00102381": "tab_character",
                "LAB_001023bb": "tab_character",
                "LAB_001023f5": "tab_character",
                "LAB_00102438": "tab_character",
                "LAB_0010348e": "process_character",
                "LAB_001034be": "return_statement",
                "_sch_istable": "character_table",
                "_stdout": "standard_output",
                "bVar3": "flag",
                "code_r0x001034d5": "update_data",
                "fputs": "put_string",
                "free": "free_memory",
                "in_R8": "index",
                "param_11": "next_format_string",
                "param_7": "input_length",
                "param_8": "format_string",
                "print_formatted_output_001034fa": "print_formatted_output",
                "print_formatted_output_00103510": "print_formatted_output",
                "print_formatted_value_0010286f": "print_formatted_value",
                "process_input_001034d5": "process_input",
                "put": "put_character",
                "putc": "put_character",
                "read_bytes_00103520": "read_bytes",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "unaff_R14": "output_string",
                "unaff_R15": "formatted_value",
                "update_data_00103810": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102771": {
            "additional_data": {
                "&": {
                    "1": "bitwise_and"
                },
                "(uint)(unaff_RBX << 8) & 0xff0000": {
                    "1": "shifted_bits"
                },
                "(uint)(unaff_RBX >> 8) & 0xff00": {
                    "1": "masked_shifted_right"
                },
                "(unaff_RBX << 8) & 0xff0000": {
                    "1": "byte2"
                },
                "(unaff_RBX >> 8) & 0xff00": {
                    "1": "byte1"
                },
                "0x1000000": {
                    "1": "left_shift_amount"
                },
                "0x18": {
                    "1": "shift_amount"
                },
                "0xff": {
                    "1": "mask"
                },
                "0xff00": {
                    "1": "right_mask"
                },
                "0xff0000": {
                    "1": "mid_mask"
                },
                "<<": {
                    "1": "left_shift"
                },
                ">>": {
                    "1": "right_shift"
                },
                "DAT_": {
                    "1": ""
                },
                "FUN_00102771": {
                    "1": "extract_lower_byte",
                    "12": "reverse_bits",
                    "3": "extract_bits",
                    "4": "reverse_byte_order"
                },
                "PTR_": {
                    "1": ""
                },
                "ul": {
                    "1": "output"
                },
                "ulong": {
                    "1": "uint64_t"
                },
                "unaff_RAX": {
                    "1": "result"
                },
                "unaff_RBX": {
                    "1": "original_value",
                    "15": "input",
                    "2": "output",
                    "4": "value",
                    "7": "input_value"
                },
                "unaff_RBX & 0xff": {
                    "1": "extracted_low_bits"
                },
                "unaff_RBX << 8": {
                    "1": "shifted_left_input",
                    "2": "shifted_left"
                },
                "unaff_RBX >> 0x18 & 0xff": {
                    "1": "bit7tobit0"
                },
                "unaff_RBX >> 0x18 & 0xff | (unaff_RBX & 0xff) << 0x18": {
                    "1": "reversed_bits",
                    "2": "result"
                },
                "unaff_RBX >> 0x18 & 0xff | (unaff_RBX & 0xff) << 0x18 | (ulong)((uint)(unaff_RBX << 8) & 0xff0000) | (ulong)((uint)(unaff_RBX >> 8) & 0xff00)": {
                    "1": "reversed_value"
                },
                "unaff_RBX >> 8": {
                    "1": "bit15tobit8"
                }
            },
            "called": [],
            "calling": [
                "FUN_00103520"
            ],
            "code": "\nuint64_t reverse_bits_00102771(void)\n\n{\n  uint64_t input;\n  \n  return input >> 0x18 bitwise_and 0xff |\n         (input bitwise_and 0xff) << 0x18 | (uint64_t)((uint)(input << 8) bitwise_and 0xff0000) |\n         (uint64_t)((uint)(input >> 8) bitwise_and 0xff00);\n}\n\n",
            "current_name": "reverse_bits_00102771",
            "entrypoint": "0x00102771",
            "imported": false,
            "improved": true,
            "renaming": {
                "&": "bitwise_and",
                "FUN_00102771": "reverse_bits_00102771",
                "ul": "output",
                "ulong": "uint64_t",
                "unaff_RBX": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001027e2": {
            "additional_data": {
                "*in_RAX": {
                    "1": ""
                },
                "*in_RAX = param_1 + param_2": {
                    "1": ""
                },
                "*param_4": {
                    "1": "updated_output"
                },
                "FUN_001027e2": {
                    "1": "add_params_and_update",
                    "12": "calculate_sum_and_increment",
                    "2": "update_parameters",
                    "3": "calculate_sum_and_update",
                    "5": "calculate_sum"
                },
                "in_RAX": {
                    "1": "counter",
                    "2": "temp_variable",
                    "4": "ptr",
                    "7": "temp_ptr"
                },
                "param_1": {
                    "1": "addend_1",
                    "2": "num_1",
                    "3": "input1",
                    "5": "input_1"
                },
                "param_2": {
                    "1": "addend_2",
                    "2": "num_2",
                    "3": "input2",
                    "5": "input_2"
                },
                "param_3": {
                    "1": "operand",
                    "2": "condition",
                    "3": "flag",
                    "5": "subtract_value",
                    "7": "modifier"
                },
                "param_4": {
                    "1": "array_to_update",
                    "2": "sum_result",
                    "24": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_00103810"
            ],
            "code": "\nvoid calculate_sum_and_increment_001027e2(int input_1,int input_2,long modifier,long *result)\n\n{\n  int *temp_ptr;\n  \n  *result = *result + (1 - modifier);\n  *temp_ptr = input_1 + input_2;\n  return;\n}\n\n",
            "current_name": "calculate_sum_and_increment_001027e2",
            "entrypoint": "0x001027e2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001027e2": "calculate_sum_and_increment_001027e2",
                "in_RAX": "temp_ptr",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "modifier",
                "param_4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010282b": {
            "additional_data": {
                "*in_RAX": {
                    "1": "data_value"
                },
                "*in_RCX": {
                    "1": "data"
                },
                "DAT_00108348": {
                    "1": "value_byte_1",
                    "2": "byte1",
                    "3": "extracted_byte1"
                },
                "DAT_00108349": {
                    "1": "value_byte_2",
                    "2": "byte2",
                    "3": "extracted_byte2"
                },
                "DAT_0010834a": {
                    "1": "value_byte_3",
                    "2": "byte3",
                    "3": "extracted_byte3"
                },
                "FUN_0010282b": {
                    "1": "extract_binary_data",
                    "15": "initialize_data",
                    "2": "set_pointers"
                },
                "PTR_00108348": {
                    "1": "high_byte"
                },
                "PTR_00108349": {
                    "1": "second_highest_byte"
                },
                "PTR_0010834a": {
                    "1": "highest_byte"
                },
                "in_RAX": {
                    "1": "target_address",
                    "2": "pointer_to_value",
                    "5": "result_pointer",
                    "6": "data_pointer",
                    "7": "output_pointer"
                },
                "in_RCX": {
                    "1": "memory_address_pointer",
                    "2": "output_ptr",
                    "3": "output_pointer",
                    "9": "data_pointer"
                },
                "unaff_RBX": {
                    "1": "data",
                    "2": "original_value",
                    "3": "register_value",
                    "4": "input_data",
                    "8": "input_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_00103810"
            ],
            "code": "\nvoid initialize_data_0010282b(void)\n\n{\n  undefined4 *output_pointer;\n  undefined8 *data_pointer;\n  undefined8 input_value;\n  \n  DAT_00108348 = (undefined)((ulong)input_value >> 8);\n  DAT_0010834a = (undefined)((ulong)input_value >> 0x18);\n  DAT_00108349 = (undefined)((ulong)input_value >> 0x10);\n  *output_pointer = 3;\n  *data_pointer = &DAT_00108348;\n  return;\n}\n\n",
            "current_name": "initialize_data_0010282b",
            "entrypoint": "0x0010282b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010282b": "initialize_data_0010282b",
                "in_RAX": "output_pointer",
                "in_RCX": "data_pointer",
                "unaff_RBX": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102853": {
            "additional_data": {
                "DAT_00108372": {
                    "1": "flag"
                },
                "FUN_00102853": {
                    "1": "print_prompt",
                    "12": "print_message",
                    "2": "print_formatted_value",
                    "3": "print_status_message"
                },
                "param_1": {
                    "1": "identifier",
                    "25": "message"
                },
                "param_2": {
                    "1": "new_parameter_name_2"
                },
                "param_n": {
                    "1": "new_parameter_name_n"
                },
                "print_formatted_value_0010286f": {
                    "17": "print_formatted_value",
                    "3": "print_value"
                },
                "printf": {
                    "1": "print_statement"
                },
                "var_1": {
                    "1": "formatted_value"
                },
                "var_2": {
                    "1": "new_variable_name_2"
                },
                "var_n": {
                    "1": "new_variable_name_n"
                }
            },
            "called": [
                "printf",
                "FUN_0010286f"
            ],
            "calling": [
                "FUN_00103890"
            ],
            "code": "\nvoid print_message_00102853(undefined8 message)\n\n{\n  printf(\"%s: \",message);\n  if (DAT_00108372 == '\\0') {\n    return;\n  }\n  print_formatted_value();\n  return;\n}\n\n",
            "current_name": "print_message_00102853",
            "entrypoint": "0x00102853",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102853": "print_message_00102853",
                "param_1": "message",
                "print_formatted_value_0010286f": "print_formatted_value",
                "printf": "print_statement"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010286f": {
            "additional_data": {
                "%7ld": {
                    "2": "decimal_format"
                },
                "%7ld ": {
                    "2": "decimal_format"
                },
                "%7lo": {
                    "2": "octal_format"
                },
                "%7lo ": {
                    "1": "octal_format"
                },
                "%7lx": {
                    "2": "hexadecimal_format"
                },
                "%7lx ": {
                    "1": "hexadecimal_format"
                },
                "0x10": {
                    "1": "hex_format"
                },
                "10": {
                    "1": "decimal_format"
                },
                "16": {
                    "1": "hex_format"
                },
                "8": {
                    "2": "octal_format"
                },
                "9": {
                    "1": "decimal_format"
                },
                "DAT_00108354": {
                    "1": "format_flag",
                    "2": "format_specifier",
                    "4": "format_type"
                },
                "FUN_0010286f": {
                    "1": "print_with_format",
                    "2": "print_number",
                    "23": "print_formatted_value",
                    "4": "print_formatted_number"
                },
                "ld": {
                    "1": "decimal"
                },
                "lo": {
                    "1": "octal"
                },
                "lx": {
                    "1": "hexadecimal"
                },
                "param_1": {
                    "1": "number_to_print",
                    "25": "value",
                    "5": "number"
                },
                "printf": {
                    "1": "printf",
                    "11": "print",
                    "2": "print_output",
                    "3": "print_formatted",
                    "4": "formatted_print",
                    "6": "print_formatted_output"
                },
                "printf(\"%7ld \",value)": {
                    "1": "print_decimal_value(value)"
                },
                "printf(\"%7lo \",value)": {
                    "1": "print_octal_value(value)"
                },
                "printf(\"%7lx \",value)": {
                    "1": "print_hexadecimal_value(value)"
                },
                "printf_1": {
                    "1": "print_decimal"
                },
                "printf_2": {
                    "1": "print_hexadecimal"
                },
                "printf_3": {
                    "1": "print_octal"
                },
                "printf_argument_1": {
                    "1": "output"
                },
                "printf_format_1": {
                    "1": "decimal_format"
                },
                "printf_format_2": {
                    "1": "octal_format"
                },
                "printf_format_3": {
                    "1": "hexadecimal_format"
                },
                "printf_format_dec": {
                    "1": "print_decimal"
                },
                "printf_format_hex": {
                    "1": "print_hexadecimal"
                },
                "printf_format_oct": {
                    "1": "print_octal"
                }
            },
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_00102853",
                "FUN_0010259a"
            ],
            "code": "\nvoid print_formatted_value_0010286f(undefined8 value)\n\n{\n  if (DAT_00108354 == 10) {\n    printf(\"decimal_format \",value);\n    return;\n  }\n  if (DAT_00108354 != 0x10) {\n    if (DAT_00108354 == 8) {\n      printf(\"octal_format \",value);\n      return;\n    }\n    return;\n  }\n  printf(\"hexadecimal_format \",value);\n  return;\n}\n\n",
            "current_name": "print_formatted_value_0010286f",
            "entrypoint": "0x0010286f",
            "imported": false,
            "improved": true,
            "renaming": {
                "%7ld": "decimal_format",
                "%7lo": "octal_format",
                "%7lx": "hexadecimal_format",
                "FUN_0010286f": "print_formatted_value_0010286f",
                "ld": "decimal",
                "lo": "octal",
                "lx": "hexadecimal",
                "param_1": "value",
                "printf": "print"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001028b2": {
            "additional_data": {
                "FUN_001028b2": {
                    "1": "get_byte_pattern_offset",
                    "3": "decode_length",
                    "6": "check_byte_sequence",
                    "7": "decode_byte_sequence"
                },
                "bVar1": {
                    "24": "first_byte",
                    "5": "current_byte"
                },
                "lVar2": {
                    "1": "return_val",
                    "18": "result",
                    "2": "decoded_length"
                },
                "param_1": {
                    "1": "header",
                    "18": "byte_sequence",
                    "2": "data"
                },
                "param_2": {
                    "1": "input_length",
                    "16": "sequence_length",
                    "2": "data_length",
                    "3": "length"
                }
            },
            "called": [],
            "calling": [
                "FUN_00103240"
            ],
            "code": "\nlong decode_byte_sequence_001028b2(byte *byte_sequence,long sequence_length)\n\n{\n  byte first_byte;\n  long result;\n  \n  first_byte = *byte_sequence;\n  if ((0xbf < first_byte) && (sequence_length != 1)) {\n    result = 0;\n    if ((byte_sequence[1] & 0xc0) == 0x80) {\n      if ((first_byte & 0x20) == 0) {\n        return 2;\n      }\n      if ((sequence_length != 2) && ((byte_sequence[2] & 0xc0) == 0x80)) {\n        if ((first_byte & 0x10) == 0) {\n          result = 3;\n        }\n        else {\n          result = 0;\n          if (sequence_length != 3) {\n            return (ulong)((byte_sequence[3] & 0xc0) == 0x80) << 2;\n          }\n        }\n      }\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "decode_byte_sequence_001028b2",
            "entrypoint": "0x001028b2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001028b2": "decode_byte_sequence_001028b2",
                "bVar1": "first_byte",
                "lVar2": "result",
                "param_1": "byte_sequence",
                "param_2": "sequence_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010290e": {
            "additional_data": {
                "FUN_0010290e": {
                    "1": "extract_byte_from_stream",
                    "14": "read_byte_from_file",
                    "2": "read_byte",
                    "3": "read_next_byte",
                    "4": "read_byte_from_stream"
                },
                "_IO_FILE": {
                    "1": "file_ptr",
                    "5": "file"
                },
                "__uflow": {
                    "1": "underflow"
                },
                "param_1": {
                    "1": "input_file",
                    "15": "file",
                    "2": "file_pointer",
                    "3": "file_ptr",
                    "5": "file_stream"
                },
                "param_2": {
                    "1": "current_position",
                    "2": "file_position",
                    "23": "position"
                },
                "param_3": {
                    "1": "remaining_count",
                    "2": "byte_count",
                    "27": "remaining_bytes"
                },
                "param_4": {
                    "1": "num_bytes_read",
                    "2": "counter",
                    "4": "read_count",
                    "9": "bytes_read"
                },
                "pbVar1": {
                    "1": "buffer_ptr",
                    "11": "byte_pointer",
                    "2": "buffer",
                    "3": "read_pointer",
                    "7": "byte_ptr"
                },
                "uVar2": {
                    "1": "temp_value",
                    "23": "result",
                    "3": "byte_value"
                }
            },
            "called": [
                "__uflow"
            ],
            "calling": [
                "FUN_00102b11"
            ],
            "code": "\nuint read_byte_from_file_0010290e(file *file,long position,uint *remaining_bytes,int *bytes_read)\n\n{\n  byte *byte_pointer;\n  uint result;\n  \n  if (*remaining_bytes != 0) {\n    result = *remaining_bytes - 1;\n    *remaining_bytes = result;\n    return (uint)*(byte *)(position + (ulong)result);\n  }\n  *bytes_read = *bytes_read + 1;\n  byte_pointer = (byte *)file->_IO_read_ptr;\n  if (file->_IO_read_end <= byte_pointer) {\n    result = __uflow(file);\n    return result;\n  }\n  file->_IO_read_ptr = (char *)(byte_pointer + 1);\n  return (uint)*byte_pointer;\n}\n\n",
            "current_name": "read_byte_from_file_0010290e",
            "entrypoint": "0x0010290e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010290e": "read_byte_from_file_0010290e",
                "_IO_FILE": "file",
                "__uflow": "underflow",
                "param_1": "file",
                "param_2": "position",
                "param_3": "remaining_bytes",
                "param_4": "bytes_read",
                "pbVar1": "byte_pointer",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010293a": {
            "additional_data": {
                "*param_1": {
                    "1": "input_string"
                },
                "DAT_00108350": {
                    "1": "unicode_display_type",
                    "2": "display_type"
                },
                "FUN_0010293a": {
                    "1": "decode_and_display_unicode",
                    "19": "display_unicode",
                    "2": "display_unicode_value",
                    "3": "print_unicode_character"
                },
                "_": {
                    "1": "temp_var"
                },
                "_stderr": {
                    "2": "stderr",
                    "6": "standard_error"
                },
                "_stdout": {
                    "2": "stdout",
                    "6": "standard_output"
                },
                "bVar1": {
                    "1": "byte_value",
                    "2": "byte_flag",
                    "6": "first_nibble",
                    "8": "first_two_bits"
                },
                "iVar3": {
                    "1": "terminal_check",
                    "22": "is_terminal",
                    "7": "is_tty"
                },
                "param_1": {
                    "1": "data",
                    "13": "input",
                    "2": "input_string",
                    "6": "input_data"
                },
                "pbVar6": {
                    "1": "end",
                    "3": "end_of_input",
                    "5": "end_pointer",
                    "8": "end_ptr"
                },
                "uVar2": {
                    "1": "val2",
                    "23": "second_byte"
                },
                "uVar4": {
                    "1": "unicode_length",
                    "2": "display_length",
                    "3": "unicode_size",
                    "4": "output_size",
                    "5": "offset"
                },
                "uVar5": {
                    "1": "unicode_value2",
                    "16": "first_byte",
                    "6": "third_byte"
                }
            },
            "called": [
                "isatty",
                "fwrite",
                "printf",
                "putc"
            ],
            "calling": [
                "FUN_00103240",
                "FUN_00102b11"
            ],
            "code": "\n\n\nuint display_unicode_0010293a(byte *input)\n\n{\n  byte first_two_bits;\n  uint second_byte;\n  int is_terminal;\n  uint output_length;\n  uint first_byte;\n  byte *end_ptr;\n  \n  output_length = 2;\n  first_two_bits = *input & 0x30;\n  if ((first_two_bits != 0x10) && (output_length = 3, first_two_bits != 0x20)) {\n    output_length = (-(uint)(first_two_bits == 0) & 0xfffffffe) + 4;\n  }\n  if (DATtemp_var00108350 == 3) {\n    end_ptr = input + output_length;\n    putc(0x3c,standard_output);\n    printf(\"0x\");\n    do {\n      first_two_bits = *input;\n      input = input + 1;\n      printf(\"%02x\",(ulong)first_two_bits);\n    } while (end_ptr != input);\n    putc(0x3e,standard_output);\n    return output_length;\n  }\n  if (DATtemp_var00108350 < 4) {\n    if (DATtemp_var00108350 == 1) {\n      printf(\"%.1s\",input);\n      return output_length;\n    }\n    if (DATtemp_var00108350 == 2) {\nLABtemp_var001029cd:\n      second_byte = (uint)input[1];\n      first_byte = (uint)*input;\n      if (output_length == 3) {\n        printf(\"\\u%02x%02x\",(ulong)((first_byte & 0xf) << 4 | (int)second_byte >> 2 & 0xfU),\n               (ulong)((second_byte & 3) << 6 | input[2] & 0x3f));\n      }\n      else if (output_length == 4) {\n        printf(\"\\u%02x%02x%02x\",(ulong)((first_byte & 7) << 6 | (int)second_byte >> 2 & 0xfU),\n               (ulong)((second_byte & 3) << 6 | (int)(uint)input[2] >> 2 & 0xfU),\n               (ulong)((input[2] & 3) << 6 | input[3] & 0x3f));\n      }\n      else {\n        printf(\"\\u%02x%02x\",(ulong)((int)(uint)*input >> 2 & 7),\n               (ulong)((first_byte & 3) << 6 | input[1] & 0x3f));\n      }\n      if (DATtemp_var00108350 != 4) {\n        return output_length;\n      }\n      is_terminal = isatty(1);\n      if (is_terminal == 0) {\n        return output_length;\n      }\n      printf(\"\\x1b[0m\");\n      return output_length;\n    }\n  }\n  else if (DATtemp_var00108350 == 4) {\n    is_terminal = isatty(1);\n    if (is_terminal != 0) {\n      printf(\"\\x1b[31;47m\");\n    }\n    goto LABtemp_var001029cd;\n  }\n  fwrite(\"ICE: unexpected unicode display type\\n\",1,0x25,standard_error);\n  return output_length;\n}\n\n",
            "current_name": "display_unicode_0010293a",
            "entrypoint": "0x0010293a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010293a": "display_unicode_0010293a",
                "_": "temp_var",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "bVar1": "first_two_bits",
                "iVar3": "is_terminal",
                "param_1": "input",
                "pbVar6": "end_ptr",
                "uVar2": "second_byte",
                "uVar4": "output_length",
                "uVar5": "first_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102b11": {
            "additional_data": {
                "FUN_00102b11": {
                    "1": "decode_and_print_data",
                    "17": "process_data",
                    "2": "decode_and_print",
                    "5": "process_file"
                },
                "iVar4": {
                    "1": "counter",
                    "2": "index",
                    "3": "read_result",
                    "4": "return_value"
                },
                "local_39": {
                    "1": "read_byte4",
                    "2": "byte_f",
                    "6": "byte4"
                },
                "local_3a": {
                    "1": "multi_byte3",
                    "2": "byte_e",
                    "6": "byte3"
                },
                "local_3b": {
                    "1": "local_byte2",
                    "2": "byte_b",
                    "6": "byte2"
                },
                "local_3c": {
                    "1": "read_byte1",
                    "2": "byte8",
                    "3": "first_byte",
                    "6": "byte1"
                },
                "local_40": {
                    "1": "uint_var1",
                    "2": "file_position",
                    "3": "read_buffer_size"
                },
                "local_4c": {
                    "1": "status_array",
                    "2": "file_position",
                    "3": "buffer",
                    "5": "read_buffer"
                },
                "local_80": {
                    "1": "start_index",
                    "2": "last_non_unicode_index",
                    "3": "last_offset",
                    "4": "last_index"
                },
                "param_1": {
                    "1": "file_data",
                    "2": "input_stream",
                    "3": "input_buffer",
                    "4": "file",
                    "6": "param1"
                },
                "param_2": {
                    "1": "start_position",
                    "11": "offset",
                    "2": "arg2",
                    "3": "input_offset",
                    "6": "param2",
                    "7": "file_offset"
                },
                "param_3": {
                    "1": "input_buffer",
                    "2": "file_pointer",
                    "3": "input_file",
                    "4": "file_name",
                    "5": "param3"
                },
                "param_4": {
                    "1": "position",
                    "2": "arg4",
                    "3": "file_size",
                    "4": "file_offset",
                    "5": "buffer"
                },
                "param_5": {
                    "1": "flags",
                    "12": "buffer_size",
                    "2": "arg5",
                    "3": "flag",
                    "5": "param5"
                },
                "param_6": {
                    "1": "output_ptr",
                    "18": "output_buffer",
                    "2": "output",
                    "5": "param6"
                },
                "uVar1": {
                    "1": "byte1_temp",
                    "11": "byte1",
                    "9": "byte_value"
                },
                "uVar10": {
                    "1": "temp_byte",
                    "2": "byte_value",
                    "3": "byte7",
                    "4": "current_byte",
                    "5": "value"
                },
                "uVar2": {
                    "1": "byte",
                    "11": "byte2",
                    "2": "read_result",
                    "3": "byte_value",
                    "5": "byte_read"
                },
                "uVar3": {
                    "1": "second_byte_value",
                    "11": "byte3",
                    "2": "temp3",
                    "3": "second_byte"
                },
                "uVar5": {
                    "1": "pos",
                    "2": "temp5",
                    "4": "byte4",
                    "5": "index"
                },
                "uVar6": {
                    "1": "new_pos",
                    "2": "output_offset",
                    "3": "index",
                    "6": "output_index"
                },
                "uVar7": {
                    "1": "byte_val2",
                    "2": "byte_value2",
                    "3": "byte4",
                    "4": "byte5"
                },
                "uVar8": {
                    "1": "byte3_temp",
                    "2": "byte8",
                    "3": "byte5",
                    "4": "byte6"
                },
                "uVar9": {
                    "1": "index",
                    "16": "counter",
                    "7": "count"
                }
            },
            "called": [
                "fputs",
                "FUN_00103890",
                "FUN_0010293a",
                "FUN_00102b11",
                "FUN_0010290e",
                "putc"
            ],
            "calling": [
                "FUN_00103240",
                "FUN_00102b11"
            ],
            "code": "\n\n\nvoid process_data_00102b11(undefined8 param1,long offset,undefined8 param3,long buffer,uint buffer_size,\n                 long output_buffer)\n\n{\n  undefined byte1;\n  uint byte2;\n  uint byte3;\n  int return_value;\n  uint index;\n  ulong output_index;\n  undefined byte5;\n  undefined byte6;\n  uint counter;\n  undefined value;\n  ulong last_index;\n  uint read_buffer [3];\n  uint read_buffer_size;\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  byte byte4;\n  \n  counter = 0;\n  read_buffer_size = 0;\n  last_index = 0;\n  output_index = 0;\n  read_buffer[0] = buffer_size;\n  byte2 = 0;\n  while (index = (uint)output_index, counter < DAT_00108374) {\n    byte2 = read_byte_from_file_0010290e(param3,buffer,read_buffer,&read_buffer_size);\n    if (byte2 == 0xffffffff) break;\n    if (byte2 < 0x100) {\n      value = (undefined)byte2;\n      if (byte2 == 9) {\n        if (counter == 0) {\n          last_index = (ulong)(read_buffer_size - 1);\n        }\nLAB_00102c09:\n        counter = counter + 1;\n        *(undefined *)(output_buffer + output_index) = value;\n        output_index = (ulong)(index + 1);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + (long)(int)byte2 * 2) & 0x10) == 0) {\n          if ((DAT_00108360 != 'S') || ((int)byte2 < 0x80)) {\n            if ((DAT_00108373 == '\\0') ||\n               ((*(ushort *)(&_sch_istable + (long)(int)byte2 * 2) & 0x40) == 0)) goto LAB_00102b96;\n            goto LAB_00102bf3;\n          }\n          if (counter == 0) {\n            last_index = (ulong)(read_buffer_size - 1);\n          }\n        }\n        else {\nLAB_00102bf3:\n          if (counter == 0) {\n            last_index = (ulong)(read_buffer_size - 1);\n          }\n          if ((int)byte2 < 0x7f) goto LAB_00102c09;\n        }\n        if ((int)byte2 < 0xc0) goto LAB_00102b96;\n        byte3 = read_byte_from_file_0010290e(param3,buffer,read_buffer,&read_buffer_size);\n        if (byte3 == 0xffffffff) {\nLAB_00102dee:\n          byte2 = 0xffffffff;\n          break;\n        }\n        byte5 = (undefined)byte3;\n        if ((byte3 & 0xc0) == 0x80) {\n          if ((byte2 & 0x20) == 0) {\n            if (DAT_00108350 == 5) goto LAB_00102c67;\n            counter = counter + 1;\n            *(undefined *)(output_buffer + output_index) = value;\n            *(undefined *)(output_buffer + (ulong)(index + 1)) = byte5;\n            output_index = (ulong)(index + 2);\n            byte2 = byte3;\n          }\n          else {\n            byte3 = read_byte_from_file_0010290e(param3,buffer,read_buffer,&read_buffer_size);\n            if (byte3 == 0xffffffff) goto LAB_00102dee;\n            byte6 = (undefined)byte3;\n            if ((byte3 & 0xc0) == 0x80) {\n              if ((byte2 & 0x10) == 0) {\n                if (DAT_00108350 == 5) goto LAB_00102ce5;\n                counter = counter + 1;\n                *(undefined *)(output_buffer + output_index) = value;\n                output_index = (ulong)(index + 3);\n                *(undefined *)(output_buffer + (ulong)(index + 1)) = byte5;\n                *(undefined *)(output_buffer + (ulong)(index + 2)) = byte6;\n                byte2 = byte3;\n              }\n              else {\n                byte2 = read_byte_from_file_0010290e(param3,buffer,read_buffer,&read_buffer_size);\n                if (byte2 == 0xffffffff) goto LAB_00102dee;\n                byte1 = (undefined)byte2;\n                if ((byte2 & 0xc0) == 0x80) {\n                  if (DAT_00108350 == 5) {\n                    *(undefined *)(buffer + (ulong)read_buffer[0]) = byte1;\n                    *(undefined *)(buffer + (ulong)(read_buffer[0] + 1)) = byte5;\n                    *(undefined *)(buffer + (ulong)(read_buffer[0] + 2)) = byte6;\n                    goto LAB_00102db9;\n                  }\n                  counter = counter + 1;\n                  *(undefined *)(output_buffer + output_index) = value;\n                  *(undefined *)(output_buffer + (ulong)(index + 1)) = byte5;\n                  output_index = (ulong)(index + 4);\n                  *(undefined *)(output_buffer + (ulong)(index + 2)) = byte6;\n                  *(undefined *)(output_buffer + (ulong)(index + 3)) = byte1;\n                }\n                else {\n                  *(undefined *)(buffer + (ulong)read_buffer[0]) = byte1;\n                  *(undefined *)(buffer + (ulong)(read_buffer[0] + 1)) = byte6;\n                  *(undefined *)(buffer + (ulong)(read_buffer[0] + 2)) = byte5;\nLAB_00102db9:\n                  read_buffer[0] = read_buffer[0] + 3;\n                  output_index = 0;\n                  counter = 0;\n                }\n              }\n            }\n            else {\nLAB_00102ce5:\n              output_index = 0;\n              counter = 0;\n              *(undefined *)(buffer + (ulong)read_buffer[0]) = byte6;\n              *(undefined *)(buffer + (ulong)(read_buffer[0] + 1)) = byte5;\n              read_buffer[0] = read_buffer[0] + 2;\n              byte2 = byte3;\n            }\n          }\n        }\n        else {\nLAB_00102c67:\n          counter = 0;\n          *(undefined *)(buffer + (ulong)read_buffer[0]) = byte5;\n          output_index = 0;\n          read_buffer[0] = read_buffer[0] + 1;\n          byte2 = byte3;\n        }\n      }\n    }\n    else {\nLAB_00102b96:\n      counter = 0;\n      output_index = 0;\n    }\n  }\n  if (counter < DAT_00108374) {\n    if (byte2 != 0xffffffff) {\nLAB_0010308d:\n      process_data_00102b11(param1,(ulong)read_buffer_size + offset,param3,buffer,read_buffer[0],output_buffer);\n    }\n  }\n  else {\n    byte2 = 0;\n    print_if_enabled_00103890(param1,last_index + offset);\n    while (byte2 < index) {\n      output_index = (ulong)byte2;\n      if (*(byte *)(output_index + output_buffer) < 0x7f) {\n        byte2 = byte2 + 1;\n        putc((uint)*(byte *)(output_index + output_buffer),_stdout);\n      }\n      else {\n        return_value = display_unicode_0010293a();\n        byte2 = byte2 + return_value;\n      }\n    }\n    while( true ) {\n      byte2 = read_byte_from_file_0010290e(param3,buffer,read_buffer,&read_buffer_size);\n      if (byte2 == 0xffffffff) break;\n      if (0xff < byte2) {\nLAB_00103049:\n        if (DAT_00108358 == (char *)0x0) {\n          putc(10,_stdout);\n        }\n        else {\n          fputs(DAT_00108358,_stdout);\n        }\n        goto LAB_0010308d;\n      }\n      if (byte2 == 9) {\nLAB_00102ed4:\n        putc(byte2,_stdout);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + (long)(int)byte2 * 2) & 0x10) == 0) {\n          if ((DAT_00108360 != 'S') || ((int)byte2 < 0x80)) {\n            if ((DAT_00108373 == '\\0') ||\n               ((*(ushort *)(&_sch_istable + (long)(int)byte2 * 2) & 0x40) == 0)) goto LAB_00103049;\n            goto LAB_00102ecf;\n          }\n        }\n        else {\nLAB_00102ecf:\n          if ((int)byte2 < 0x7f) goto LAB_00102ed4;\n        }\n        if ((int)byte2 < 0xc0) goto LAB_00103049;\n        byte1 = (byte)byte2;\n        return_value = read_byte_from_file_0010290e(param3,buffer,read_buffer,&read_buffer_size);\n        if (return_value == -1) break;\n        byte2 = (byte)return_value;\n        if ((byte2 & 0xc0) != 0x80) {\nLAB_00102f32:\n          output_index = (ulong)read_buffer[0];\n          read_buffer[0] = read_buffer[0] + 1;\n          *(byte *)(buffer + output_index) = byte2;\njoined_r0x00102f51:\n          if (DAT_00108358 == (char *)0x0) {\n            putc(10,_stdout);\n          }\n          else {\n            fputs(DAT_00108358,_stdout);\n          }\n          goto LAB_0010308d;\n        }\n        if ((byte1 & 0x20) == 0) {\n          if (DAT_00108350 != 5) goto LAB_0010300e;\n          goto LAB_00102f32;\n        }\n        return_value = read_byte_from_file_0010290e(param3,buffer,read_buffer,&read_buffer_size);\n        if (return_value == -1) break;\n        byte3 = (byte)return_value;\n        if ((byte3 & 0xc0) != 0x80) {\nLAB_00102f94:\n          *(byte *)(buffer + (ulong)read_buffer[0]) = byte3;\n          byte2 = read_buffer[0] + 1;\n          read_buffer[0] = read_buffer[0] + 2;\nLAB_00102ff2:\n          *(byte *)(buffer + (ulong)byte2) = byte2;\n          goto joined_r0x00102f51;\n        }\n        if ((byte1 & 0x10) != 0) {\n          return_value = read_byte_from_file_0010290e(param3,buffer,read_buffer,&read_buffer_size);\n          if (return_value != -1) {\n            byte4 = (byte)return_value;\n            if (((byte4 & 0xc0) == 0x80) && (DAT_00108350 != 5)) goto LAB_0010300e;\n            *(byte *)(buffer + (ulong)read_buffer[0]) = byte4;\n            *(byte *)(buffer + (ulong)(read_buffer[0] + 1)) = byte3;\n            byte2 = read_buffer[0] + 2;\n            read_buffer[0] = read_buffer[0] + 3;\n            goto LAB_00102ff2;\n          }\n          break;\n        }\n        if (DAT_00108350 == 5) goto LAB_00102f94;\nLAB_0010300e:\n        display_unicode_0010293a(&byte1);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,_stdout);\n    }\n    else {\n      fputs(DAT_00108358,_stdout);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_data_00102b11",
            "entrypoint": "0x00102b11",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102b11": "process_data_00102b11",
                "iVar4": "return_value",
                "local_39": "byte4",
                "local_3a": "byte3",
                "local_3b": "byte2",
                "local_3c": "byte1",
                "local_40": "read_buffer_size",
                "local_4c": "read_buffer",
                "local_80": "last_index",
                "param_1": "param1",
                "param_2": "offset",
                "param_3": "param3",
                "param_4": "buffer",
                "param_5": "buffer_size",
                "param_6": "output_buffer",
                "uVar1": "byte1",
                "uVar10": "value",
                "uVar2": "byte2",
                "uVar3": "byte3",
                "uVar5": "index",
                "uVar6": "output_index",
                "uVar7": "byte5",
                "uVar8": "byte6",
                "uVar9": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001030c0": {
            "additional_data": {
                "FUN_001030c0": {
                    "1": "print_strings_options",
                    "16": "print_strings_usage",
                    "2": "print_usage_info",
                    "3": "print_usage",
                    "6": "print_strings"
                },
                "__ptr": {
                    "1": "bfd_target_list",
                    "30": "target_list"
                },
                "bfd_target_list": {
                    "1": "get_supported_targets",
                    "2": "get_target_list"
                },
                "dcgettext": {
                    "1": "get_translated_string",
                    "2": "get_localized_text",
                    "3": "get_translated_text"
                },
                "exit": {
                    "2": "terminate_program",
                    "3": "terminate_execution",
                    "4": "exit_program"
                },
                "fprintf": {
                    "1": "write_message",
                    "2": "print_formatted_text",
                    "5": "print_formatted"
                },
                "fputc": {
                    "1": "print_newline",
                    "3": "write_character",
                    "4": "put_character"
                },
                "free": {
                    "2": "free_memory",
                    "6": "release_memory"
                },
                "fwrite": {
                    "1": "write_data"
                },
                "lVar1": {
                    "1": "translation_message",
                    "2": "supported_target",
                    "3": "target",
                    "4": "language_id",
                    "5": "supported_targets"
                },
                "param_1": {
                    "1": "file_pointer",
                    "20": "output_file",
                    "3": "output_stream",
                    "7": "file"
                },
                "param_2": {
                    "1": "error_code",
                    "30": "exit_code"
                },
                "pcVar2": {
                    "1": "translation",
                    "18": "message",
                    "3": "localized_text",
                    "7": "localized_string"
                },
                "plVar3": {
                    "1": "list_ptr",
                    "3": "target_pointer",
                    "4": "target_ptr",
                    "5": "target",
                    "7": "current_target",
                    "9": "ptr"
                }
            },
            "called": [
                "free",
                "fprintf",
                "bfd_target_list",
                "fputc",
                "exit",
                "dcgettext"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid print_strings_usage_001030c0(FILE *output_file,int exit_code)\n\n{\n  long supported_targets;\n  char *message;\n  long *target_list;\n  long *ptr;\n  \n  supported_targets = DAT_00108378;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  fprintf(output_file,message,supported_targets);\n  message = (char *)dcgettext(0,\" Display printable strings in [file(s)] (stdin by default)\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -a - --all                Scan the entire file, not just the data section [default]\\n  -d --data                 Only scan the data sections in the file\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -f --print-file-name      Print the name of the file before each string\\n  -n <number>               Locate & print any sequence of at least <number>\\n    --bytes=<number>         displayable characters.  (The default is 4).\\n  -t --radix={o,d,x}        Print the location of the string in base 8, 10 or 16\\n  -w --include-all-whitespace Include all whitespace as valid string characters\\n  -o                        An alias for --radix=o\\n  -T --target=<BFDNAME>     Specify the binary file format\\n  -e --encoding={s,S,b,l,B,L} Select character size and endianness:\\n                            s = 7-bit, S = 8-bit, {b,l} = 16-bit, {B,L} = 32-bit\\n  --unicode={default|show|invalid|hex|escape|highlight}\\n  -U {d|s|i|x|e|h}          Specify how to treat UTF-8 encoded unicode characters\\n  -s --output-separator=<string> String used to separate strings in output.\\n  @<file>                   Read options from <file>\\n  -h --help                 Display this information\\n  -v -V --version           Print the program\\'s version number\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  supported_targets = DAT_00108378;\n  if (DAT_00108378 == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(output_file,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(output_file,message,supported_targets);\n  }\n  target_list = (long *)bfd_target_list();\n  ptr = target_list;\n  while( true ) {\n    supported_targets = *ptr;\n    ptr = ptr + 1;\n    if (supported_targets == 0) break;\n    fprintf(output_file,\" %s\");\n  }\n  fputc(10,output_file);\n  free(target_list);\n  if (exit_code == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit_program(exit_code);\n}\n\n",
            "current_name": "print_strings_usage_001030c0",
            "entrypoint": "0x001030c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001030c0": "print_strings_usage_001030c0",
                "__ptr": "target_list",
                "bfd_target_list": "get_target_list",
                "dcgettext": "get_translated_text",
                "exit": "exit_program",
                "fprintf": "print_formatted",
                "fputc": "put_character",
                "free": "release_memory",
                "lVar1": "supported_targets",
                "param_1": "output_file",
                "param_2": "exit_code",
                "pcVar2": "message",
                "plVar3": "ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103240": {
            "additional_data": {
                "FUN_00103240": {
                    "1": "print_buffer",
                    "19": "print_formatted_output",
                    "3": "print_formatted_value",
                    "4": "print_unicode_buffer"
                },
                "__ptr": {
                    "1": "memory_pointer",
                    "2": "ptr",
                    "3": "dynamic_memory"
                },
                "__s": {
                    "1": "buffer_copy",
                    "2": "str",
                    "3": "output_buffer",
                    "5": "output_string",
                    "6": "formatted_output"
                },
                "bVar12": {
                    "1": "less_than_size",
                    "2": "loop_condition",
                    "3": "bool_var",
                    "4": "is_valid"
                },
                "bVar2": {
                    "1": "byte_val",
                    "16": "current_char",
                    "2": "byte_value",
                    "3": "byte_var",
                    "5": "current_character"
                },
                "cVar3": {
                    "1": "is_stream_enabled",
                    "2": "print_flag",
                    "3": "char_var"
                },
                "iVar6": {
                    "1": "print_unicode",
                    "2": "display_option",
                    "3": "int_var",
                    "4": "data_type"
                },
                "lVar10": {
                    "1": "byte_index"
                },
                "lVar4": {
                    "1": "data_length",
                    "2": "current_position",
                    "5": "buffer_length"
                },
                "local_3d": {
                    "1": "decode_temporary_data",
                    "2": "local_data",
                    "3": "unused_data"
                },
                "local_50": {
                    "1": "buffer_size_array",
                    "2": "current_buffer"
                },
                "local_54": {
                    "1": "byte_array_length_temp",
                    "2": "current_buffer_size"
                },
                "local_60": {
                    "1": "current_position",
                    "2": "input_buffer_pointer",
                    "3": "input_buffer",
                    "9": "current_buffer"
                },
                "local_80": {
                    "1": "output_index",
                    "2": "base_address",
                    "3": "buffer_start"
                },
                "param_1": {
                    "1": "str",
                    "3": "label",
                    "4": "buffer",
                    "5": "param1",
                    "8": "message"
                },
                "param_2": {
                    "1": "data",
                    "17": "stream",
                    "2": "buffer",
                    "5": "param2"
                },
                "param_3": {
                    "1": "unicode_buffer",
                    "13": "buffer_size",
                    "2": "buffer_length",
                    "5": "buffer"
                },
                "param_4": {
                    "1": "buffer_length",
                    "2": "length",
                    "3": "buffer_size",
                    "4": "flag",
                    "5": "param4"
                },
                "param_5": {
                    "1": "ptr_to_byte_array",
                    "11": "buffer",
                    "2": "data",
                    "3": "input_buffer",
                    "4": "param5",
                    "5": "unicode_buffer"
                },
                "pbVar1": {
                    "1": "byte_ptr1",
                    "2": "ptr",
                    "23": "current_byte"
                },
                "uVar10": {
                    "1": "byte_sequence_index",
                    "2": "next_position",
                    "3": "ulong_var3",
                    "4": "index",
                    "9": "current_index"
                },
                "uVar11": {
                    "1": "unicode_length",
                    "10": "sequence_count",
                    "2": "counter",
                    "3": "char_count"
                },
                "uVar5": {
                    "1": "decoded_bytes",
                    "2": "sequence_length",
                    "3": "uint_var",
                    "4": "byte_count",
                    "6": "byte_sequence_length"
                },
                "uVar7": {
                    "1": "byte_value",
                    "2": "current_position",
                    "3": "ulong_var1",
                    "5": "read_result",
                    "6": "byte_index"
                },
                "uVar8": {
                    "1": "output_index",
                    "2": "buffer_end",
                    "3": "buffer_size",
                    "6": "buffer_length"
                },
                "uVar9": {
                    "1": "buffer_length",
                    "2": "uint_var1",
                    "3": "string_length"
                }
            },
            "called": [
                "xmalloc",
                "fputs",
                "FUN_001028b2",
                "free",
                "fwrite",
                "FUN_00103890",
                "FUN_0010293a",
                "FUN_00102b11",
                "putc"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nvoid print_formatted_output_00103240(long message,long stream,long buffer_size,int param4,byte *buffer)\n\n{\n  byte *current_byte;\n  byte current_char;\n  char char_var;\n  long buffer_length;\n  uint byte_sequence_length;\n  int data_type;\n  void *dynamic_memory;\n  char *formatted_output;\n  ulong byte_index;\n  ulong buffer_length;\n  uint buffer_size;\n  ulong current_index;\n  uint sequence_count;\n  bool is_valid;\n  long buffer_start;\n  byte *current_buffer;\n  int current_buffer_size;\n  long current_buffer [2];\n  undefined unused_data [13];\n  \n  current_buffer = buffer;\n  current_buffer_size = param4;\n  current_buffer[0] = buffer_size;\n  if (DAT_00108350 == 0) {\n    formatted_output = (char *)xmalloc(DAT_00108374 + 1);\n    do {\n      while (buffer_length = current_buffer[0], buffer_length = (ulong)DAT_00108374, DAT_00108374 == 0) {\njoined_r0x001034ef:\n        if (DAT_00108371 != '\\0') {\n          printf(\"%s: \",message);\n        }\n        if (DAT_00108372 == '\\0') {\n          formatted_output[buffer_length] = '\\0';\n          fputs(formatted_output,_stdout);\n        }\n        else {\n          print_formatted_value_0010286f(buffer_length);\n          formatted_output[buffer_length] = '\\0';\n          fputs(formatted_output,_stdout);\n        }\n        while (buffer_length = read_bytes_00103520(stream,current_buffer,&current_buffer_size,&current_buffer),\n              buffer_length != 0xffffffffffffffff) {\n          if (0xff < buffer_length) {\nLAB_0010348e:\n            update_data_00103810(buffer_length,current_buffer,&current_buffer_size,&current_buffer);\n            break;\n          }\n          if (buffer_length == 9) {\nLAB_00102438:\n            putc((int)buffer_length,_stdout);\n          }\n          else {\n            if ((*(ushort *)(&_sch_istable + buffer_length * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)buffer_length < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + buffer_length * 2) & 0x40) == 0))))\n              goto LAB_0010348e;\n              goto LAB_00102438;\n            }\n            putc((int)buffer_length,_stdout);\n          }\n        }\n        if (DAT_00108358 == (char *)0x0) {\n          putc(10,_stdout);\n        }\n        else {\n          fputs(DAT_00108358,_stdout);\n        }\n      }\n      byte_index = read_bytes_00103520(stream,current_buffer,&current_buffer_size,&current_buffer);\n      buffer_size = DAT_00108374;\n      if (byte_index == 0xffffffffffffffff) goto LAB_001034be;\n      if (byte_index < 0x100) {\n        if (byte_index == 9) {\nLAB_001023f5:\n          *formatted_output = (char)byte_index;\n          if (buffer_size < 2) {\n            print_formatted_output_00103240_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + byte_index * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)byte_index < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + byte_index * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_001023f5;\n          }\n          *formatted_output = (char)byte_index;\n          if (buffer_size < 2) {\n            buffer_length = 1;\n            goto joined_r0x001034ef;\n          }\n        }\n        byte_index = read_bytes_00103520(stream,current_buffer,&current_buffer_size,&current_buffer);\n        buffer_size = DAT_00108374;\n        if (byte_index == 0xffffffffffffffff) goto LAB_001034be;\n        if (byte_index < 0x100) {\n          if (byte_index == 9) {\nLAB_001023bb:\n            formatted_output[1] = (char)byte_index;\n            if (buffer_size < 3) {\n              print_formatted_output_00103240_00103510();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&_sch_istable + byte_index * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)byte_index < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + byte_index * 2) & 0x40) == 0))))\n              goto code_r0x001034d5;\n              goto LAB_001023bb;\n            }\n            formatted_output[1] = (char)byte_index;\n            if (buffer_size < 3) {\n              buffer_length = 2;\n              goto joined_r0x001034ef;\n            }\n          }\n          byte_index = read_bytes_00103520(stream,current_buffer,&current_buffer_size,&current_buffer);\n          buffer_size = DAT_00108374;\n          if (byte_index == 0xffffffffffffffff) {\nLAB_001034be:\n            free(formatted_output);\n            return;\n          }\n          if (byte_index < 0x100) {\n            if (byte_index == 9) {\nLAB_00102381:\n              formatted_output[2] = (char)byte_index;\n            }\n            else {\n              if ((*(ushort *)(&_sch_istable + byte_index * 2) & 0x10) == 0) {\n                if (((DAT_00108360 != 'S') || ((long)byte_index < 0x80)) &&\n                   ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + byte_index * 2) & 0x40) == 0))\n                   )) goto code_r0x001034d5;\n                goto LAB_00102381;\n              }\n              formatted_output[2] = (char)byte_index;\n            }\n            if (buffer_size < 4) {\n              buffer_length = 3;\n            }\n            else {\n              current_index = 3;\n              do {\n                byte_index = read_bytes_00103520(stream,current_buffer,&current_buffer_size,&current_buffer);\n                if (byte_index == 0xffffffffffffffff) goto LAB_001034be;\n                if (0xff < byte_index) goto code_r0x001034d5;\n                if (((byte_index != 9) && ((*(ushort *)(&_sch_istable + byte_index * 2) & 0x10) == 0)) &&\n                   ((DAT_00108360 != 'S' || ((long)byte_index < 0x80)))) {\n                  if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n                  if ((*(ushort *)(&_sch_istable + byte_index * 2) & 0x40) == 0) {\n                    process_input_001034d5();\n                    return;\n                  }\n                }\n                buffer_size = (int)current_index + 1;\n                buffer_length = (ulong)buffer_size;\n                is_valid = buffer_size < DAT_00108374;\n                formatted_output[current_index] = (char)byte_index;\n                current_index = buffer_length;\n              } while (is_valid);\n            }\n            goto joined_r0x001034ef;\n          }\n        }\n      }\ncode_r0x001034d5:\n      update_data_00103810(byte_index,current_buffer,&current_buffer_size,&current_buffer);\n    } while( true );\n  }\n  if (buffer != (byte *)0x0) {\n    buffer_length = (ulong)param4;\n    buffer_start = buffer_size;\n    if (message != 0) {\nLAB_0010249c:\n      buffer_size = DAT_00108374;\n      char_var = DAT_00108373;\n      data_type = DAT_00108350;\n      if (((DAT_00108350 != 0) && (DAT_00108360 == 'S')) && (DAT_0010834c == 1)) {\n        if (buffer_length != 0) {\n          byte_index = 0;\n          sequence_count = 0;\n          current_index = 0;\n          do {\n            while( true ) {\n              current_char = buffer[current_index];\n              if (current_char != 9) break;\nLAB_0010252e:\n              byte_sequence_length = 1;\nLAB_00102533:\n              if (sequence_count == 0) {\n                byte_index = current_index;\n              }\n              sequence_count = sequence_count + 1;\n              if (buffer_size <= sequence_count) goto LAB_001026a9;\n              current_index = current_index + byte_sequence_length;\n              if (buffer_length <= current_index) goto LAB_00102551;\n            }\n            if ((*(ushort *)(&_sch_istable + (long)(int)(uint)current_char * 2) & 0x10) != 0) {\n              if (0x7e < current_char) goto LAB_0010264e;\n              goto LAB_0010252e;\n            }\n            if (0x7f < current_char) {\nLAB_0010264e:\n              if ((current_char < 0xc0) ||\n                 (byte_sequence_length = decode_byte_sequence_001028b2(buffer + current_index,buffer_length - current_index), byte_sequence_length == 0))\n              goto LAB_0010269a;\n              if (data_type == 5) goto LAB_00102688;\n              goto LAB_00102533;\n            }\n            if (((char_var != '\\0') &&\n                ((*(ushort *)(&_sch_istable + (long)(int)(uint)current_char * 2) & 0x40) != 0)) &&\n               (current_char != 0x7f)) goto LAB_0010252e;\nLAB_0010269a:\n            byte_sequence_length = 1;\nLAB_00102688:\n            current_index = current_index + byte_sequence_length;\n            if (buffer_length <= current_index) goto LAB_001026a1;\n            sequence_count = 0;\n          } while( true );\n        }\n        goto LAB_00102551;\n      }\n    }\n    fwrite(\"ICE: bad arguments to print_unicode_buffer\\n\",1,0x2b,_stderr);\n  }\n  if (stream != 0) {\n    if (message != 0) {\nLAB_0010255f:\n      buffer_length = current_buffer[0];\n      if (((DAT_00108350 != 0) && (DAT_00108360 == 'S')) && (DAT_0010834c == 1)) {\n        dynamic_memory = (void *)xmalloc(DAT_00108374 * 4 + 1);\n        process_data_00102b11(message,buffer_length,stream,unused_data,0,dynamic_memory);\n        free(dynamic_memory);\n        return;\n      }\n    }\n    fwrite(\"ICE: bad arguments to print_unicode_stream\\n\",1,0x2b,_stderr);\n  }\n  return;\nLAB_001026a1:\n  if (buffer_size != 0) {\nLAB_00102551:\n    if (stream == 0) {\n      return;\n    }\n    goto LAB_0010255f;\n  }\nLAB_001026a9:\n  print_if_enabled_00103890(message,buffer_start + byte_index);\n  for (; current_byte = buffer + byte_index, byte_index < buffer_length; byte_index = byte_index + buffer_size) {\n    current_char = *current_byte;\n    if (current_char == 9) {\nLAB_00102708:\n      putc((uint)current_char,_stdout);\n      buffer_size = 1;\n    }\n    else {\n      if ((*(ushort *)(&_sch_istable + (long)(int)(uint)current_char * 2) & 0x10) == 0) {\n        if ((DAT_00108360 != 'S') || (current_char < 0x80)) {\n          if ((DAT_00108373 != '\\0') &&\n             ((*(ushort *)(&_sch_istable + (long)(int)(uint)current_char * 2) & 0x40) != 0))\n          goto LAB_00102703;\n          break;\n        }\n      }\n      else {\nLAB_00102703:\n        if (current_char < 0x7f) goto LAB_00102708;\n      }\n      data_type = decode_byte_sequence_001028b2(current_byte,buffer_length - byte_index);\n      if ((data_type == 0) || (DAT_00108350 == 5)) break;\n      buffer_size = display_unicode_0010293a(current_byte);\n    }\n  }\n  if (DAT_00108358 == (char *)0x0) {\n    putc(10,_stdout);\n  }\n  else {\n    fputs(DAT_00108358,_stdout);\n  }\n  buffer_start = buffer_start + byte_index;\n  buffer_length = buffer_length - byte_index;\n  buffer = current_byte;\n  goto LAB_0010249c;\n}\n\n",
            "current_name": "print_formatted_output_00103240",
            "entrypoint": "0x00103240",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103240": "print_formatted_output_00103240",
                "__ptr": "dynamic_memory",
                "__s": "formatted_output",
                "bVar12": "is_valid",
                "bVar2": "current_char",
                "cVar3": "char_var",
                "iVar6": "data_type",
                "lVar4": "buffer_length",
                "local_3d": "unused_data",
                "local_50": "current_buffer",
                "local_54": "current_buffer_size",
                "local_60": "current_buffer",
                "local_80": "buffer_start",
                "param_1": "message",
                "param_2": "stream",
                "param_3": "buffer_size",
                "param_4": "param4",
                "param_5": "buffer",
                "pbVar1": "current_byte",
                "uVar10": "current_index",
                "uVar11": "sequence_count",
                "uVar5": "byte_sequence_length",
                "uVar7": "byte_index",
                "uVar8": "buffer_length",
                "uVar9": "buffer_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001034d5": {
            "additional_data": {
                "DAT_00108358": {
                    "1": "end_string"
                },
                "DAT_00108360": {
                    "1": "output_type"
                },
                "DAT_00108371": {
                    "1": "should_print_file_name"
                },
                "DAT_00108372": {
                    "1": "print_value"
                },
                "DAT_00108373": {
                    "1": "is_special_char"
                },
                "DAT_00108374": {
                    "1": "max_byte_count"
                },
                "FUN_001034d5": {
                    "1": "process_data_and_update",
                    "10": "process_data",
                    "15": "process_input",
                    "3": "process_input_data"
                },
                "_sch_istable": {
                    "1": "bit_table",
                    "2": "char_table",
                    "5": "character_table"
                },
                "_stdout": {
                    "1": "stdout",
                    "4": "output_stream"
                },
                "bVar5": {
                    "1": "should_continue",
                    "2": "is_valid",
                    "5": "continue_loop",
                    "6": "is_less"
                },
                "code_r0x001034d5": {
                    "1": "process_loop",
                    "2": "start_processing"
                },
                "fputc": {
                    "1": "write_character_to_output"
                },
                "fputs": {
                    "1": "print_string",
                    "2": "put_string"
                },
                "free": {
                    "1": "free_memory",
                    "2": "release_memory"
                },
                "in_stack_00000010": {
                    "1": "formatted_string",
                    "2": "function_name",
                    "3": "file_name",
                    "5": "message",
                    "6": "format_string"
                },
                "in_stack_00000038": {
                    "1": "value_param",
                    "19": "formatted_value",
                    "8": "value"
                },
                "joined_r0x001034ef": {
                    "1": "continue_processing"
                },
                "print_formatted_output_001034fa": {
                    "1": "print_output_formatted",
                    "2": "print_output",
                    "5": "print_formatted_output"
                },
                "print_formatted_output_00103510": {
                    "1": "print_output_format",
                    "2": "print_output",
                    "3": "print_formatted_output"
                },
                "print_formatted_value_0010286f": {
                    "9": "print_formatted_value"
                },
                "printf": {
                    "1": "formatted_print"
                },
                "putc": {
                    "1": "write_char",
                    "3": "put_character"
                },
                "putchar": {
                    "1": "write_character_to_output"
                },
                "read_bytes_00103520": {
                    "2": "read_byte",
                    "7": "read_bytes"
                },
                "uVar1": {
                    "1": "read_result",
                    "2": "current_byte",
                    "4": "byte_count",
                    "7": "byte_read",
                    "9": "byte_value"
                },
                "uVar2": {
                    "1": "data",
                    "10": "next_byte",
                    "2": "byte",
                    "4": "byte_value"
                },
                "uVar3": {
                    "1": "index",
                    "2": "input_length",
                    "3": "data_length",
                    "7": "buffer_size"
                },
                "uVar4": {
                    "1": "loop_index",
                    "22": "index",
                    "3": "counter"
                },
                "unaff_R14": {
                    "1": "processed_data",
                    "14": "output_buffer",
                    "2": "buffer",
                    "3": "result",
                    "4": "output",
                    "5": "output_string"
                },
                "update_data_00103810": {
                    "1": "update_data3",
                    "8": "update_data"
                }
            },
            "called": [
                "FUN_00103810"
            ],
            "calling": [
                "FUN_0010259a",
                "FUN_00102330"
            ],
            "code": "\n\n\nvoid process_input_001034d5(void)\n\n{\n  ulong byte_value;\n  ulong next_byte;\n  uint buffer_size;\n  ulong index;\n  char *output_buffer;\n  bool is_less;\n  undefined8 format_string;\n  undefined8 formatted_value;\n  \nstart_processing:\n  update_data();\n  do {\n    byte_value = (ulong)DAT_00108374;\n    if (DAT_00108374 != 0) {\n      byte_value = read_bytes();\n      buffer_size = DAT_00108374;\n      if (byte_value == 0xffffffffffffffff) goto LAB_001034be;\n      if (0xff < byte_value) goto start_processing;\n      if (byte_value == 9) {\nLAB_001023f5:\n        *output_buffer = (char)byte_value;\n        if (buffer_size < 2) {\n          print_formatted_output();\n          return;\n        }\n      }\n      else {\n        if ((*(ushort *)(&character_table + byte_value * 2) & 0x10) == 0) {\n          if (((DAT_00108360 == 'S') && (0x7f < (long)byte_value)) ||\n             ((DAT_00108373 != '\\0' && ((*(ushort *)(&character_table + byte_value * 2) & 0x40) != 0))))\n          goto LAB_001023f5;\n          goto start_processing;\n        }\n        *output_buffer = (char)byte_value;\n        if (buffer_size < 2) {\n          byte_value = 1;\n          goto continue_processing;\n        }\n      }\n      byte_value = read_bytes();\n      buffer_size = DAT_00108374;\n      if (byte_value == 0xffffffffffffffff) goto LAB_001034be;\n      if (0xff < byte_value) goto start_processing;\n      if (byte_value == 9) {\nLAB_001023bb:\n        output_buffer[1] = (char)byte_value;\n        if (buffer_size < 3) {\n          print_formatted_output();\n          return;\n        }\n      }\n      else {\n        if ((*(ushort *)(&character_table + byte_value * 2) & 0x10) == 0) {\n          if (((DAT_00108360 == 'S') && (0x7f < (long)byte_value)) ||\n             ((DAT_00108373 != '\\0' && ((*(ushort *)(&character_table + byte_value * 2) & 0x40) != 0))))\n          goto LAB_001023bb;\n          goto start_processing;\n        }\n        output_buffer[1] = (char)byte_value;\n        if (buffer_size < 3) {\n          byte_value = 2;\n          goto continue_processing;\n        }\n      }\n      byte_value = read_bytes();\n      buffer_size = DAT_00108374;\n      if (byte_value == 0xffffffffffffffff) {\nLAB_001034be:\n        free(output_buffer);\n        return;\n      }\n      if (0xff < byte_value) goto start_processing;\n      if (byte_value == 9) {\nLAB_00102381:\n        output_buffer[2] = (char)byte_value;\n      }\n      else {\n        if ((*(ushort *)(&character_table + byte_value * 2) & 0x10) == 0) {\n          if (((DAT_00108360 == 'S') && (0x7f < (long)byte_value)) ||\n             ((DAT_00108373 != '\\0' && ((*(ushort *)(&character_table + byte_value * 2) & 0x40) != 0))))\n          goto LAB_00102381;\n          goto start_processing;\n        }\n        output_buffer[2] = (char)byte_value;\n      }\n      if (buffer_size < 4) {\n        byte_value = 3;\n      }\n      else {\n        index = 3;\n        do {\n          next_byte = read_bytes();\n          if (next_byte == 0xffffffffffffffff) goto LAB_001034be;\n          if (0xff < next_byte) goto start_processing;\n          if (((next_byte != 9) && ((*(ushort *)(&character_table + next_byte * 2) & 0x10) == 0)) &&\n             ((DAT_00108360 != 'S' || ((long)next_byte < 0x80)))) {\n            if (DAT_00108373 == '\\0') goto start_processing;\n            if ((*(ushort *)(&character_table + next_byte * 2) & 0x40) == 0) {\n              process_input_001034d5();\n              return;\n            }\n          }\n          buffer_size = (int)index + 1;\n          byte_value = (ulong)buffer_size;\n          is_less = buffer_size < DAT_00108374;\n          output_buffer[index] = (char)next_byte;\n          index = byte_value;\n        } while (is_less);\n      }\n    }\ncontinue_processing:\n    if (DAT_00108371 != '\\0') {\n      printf(\"%s: \",format_string);\n    }\n    if (DAT_00108372 == '\\0') {\n      output_buffer[byte_value] = '\\0';\n      fputs(output_buffer,output_stream);\n    }\n    else {\n      print_formatted_value(formatted_value);\n      output_buffer[byte_value] = '\\0';\n      fputs(output_buffer,output_stream);\n    }\n    while (byte_value = read_bytes(), byte_value != 0xffffffffffffffff) {\n      if (0xff < byte_value) {\nLAB_0010348e:\n        update_data();\n        break;\n      }\n      if (byte_value == 9) {\nLAB_00102438:\n        putc((int)byte_value,output_stream);\n      }\n      else {\n        if ((*(ushort *)(&character_table + byte_value * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)byte_value < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + byte_value * 2) & 0x40) == 0))))\n          goto LAB_0010348e;\n          goto LAB_00102438;\n        }\n        putc((int)byte_value,output_stream);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,output_stream);\n    }\n    else {\n      fputs(DAT_00108358,output_stream);\n    }\n  } while( true );\n}\n\n",
            "current_name": "process_input_001034d5",
            "entrypoint": "0x001034d5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001034d5": "process_input_001034d5",
                "_sch_istable": "character_table",
                "_stdout": "output_stream",
                "bVar5": "is_less",
                "code_r0x001034d5": "start_processing",
                "fputs": "put_string",
                "free": "release_memory",
                "in_stack_00000010": "format_string",
                "in_stack_00000038": "formatted_value",
                "joined_r0x001034ef": "continue_processing",
                "print_formatted_output_001034fa": "print_formatted_output",
                "print_formatted_output_00103510": "print_formatted_output",
                "print_formatted_value_0010286f": "print_formatted_value",
                "printf": "print_formatted_string",
                "putc": "put_character",
                "read_bytes_00103520": "read_bytes",
                "uVar1": "byte_value",
                "uVar2": "next_byte",
                "uVar3": "buffer_size",
                "uVar4": "index",
                "unaff_R14": "output_buffer",
                "update_data_00103810": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001034fa": {
            "additional_data": {
                "DAT_00108358": {
                    "1": "end_of_input_string",
                    "2": "newline_string"
                },
                "DAT_00108360": {
                    "1": "is_ascii_flag"
                },
                "DAT_00108371": {
                    "1": "prompt_flag"
                },
                "DAT_00108372": {
                    "1": "use_custom_prompt"
                },
                "DAT_00108373": {
                    "1": "is_special_char"
                },
                "DAT_00108374": {
                    "1": "input_string"
                },
                "FUN_0010286f": {
                    "1": "format_function"
                },
                "FUN_001034fa": {
                    "1": "reverse_and_print_string",
                    "12": "print_formatted_output",
                    "2": "print_formatted_input",
                    "4": "print_formatted_text",
                    "8": "print_formatted_string"
                },
                "FUN_00103510": {
                    "1": "print_second_output_string"
                },
                "FUN_00103520": {
                    "1": "read_character"
                },
                "FUN_00103810": {
                    "1": "unknown_function"
                },
                "LAB_00102381": {
                    "1": "process_character3"
                },
                "LAB_001023bb": {
                    "1": "process_character2"
                },
                "LAB_001023f5": {
                    "1": "process_character1"
                },
                "LAB_00102438": {
                    "1": "print_tab"
                },
                "LAB_0010348e": {
                    "1": "handle_invalid_character"
                },
                "LAB_001034be": {
                    "1": "end_function_execution2"
                },
                "LAB_001034d5": {
                    "1": "invalid_character"
                },
                "_sch_istable": {
                    "1": "table",
                    "6": "character_table"
                },
                "_stdout": {
                    "2": "output_stream",
                    "4": "standard_output"
                },
                "bVar5": {
                    "1": "is_invalid_character",
                    "2": "is_end_of_file",
                    "3": "is_end",
                    "4": "is_valid"
                },
                "bufferIndex": {
                    "1": "buffer_index"
                },
                "character": {
                    "1": "character"
                },
                "characterTable": {
                    "1": "character_table"
                },
                "code_r0x001034fa": {
                    "1": "format_text"
                },
                "continueFormatting": {
                    "1": "continue_formatting"
                },
                "fclose": {
                    "1": "close_file"
                },
                "fopen": {
                    "1": "open_file"
                },
                "formatSpecifier": {
                    "1": "format_specifier"
                },
                "fputc": {
                    "1": "put_character"
                },
                "fputs": {
                    "1": "output_string",
                    "2": "print_string"
                },
                "free": {
                    "2": "free_memory"
                },
                "getResourceString": {
                    "1": "get_localized_string"
                },
                "getc": {
                    "1": "read_character"
                },
                "in_stack_00000010": {
                    "1": "title",
                    "2": "label",
                    "3": "prompt_string",
                    "5": "message",
                    "6": "prompt"
                },
                "in_stack_00000038": {
                    "1": "format_specifier",
                    "2": "suffix",
                    "4": "delimiter"
                },
                "index": {
                    "1": "index"
                },
                "inputBuffer": {
                    "1": "input_buffer"
                },
                "inputLength": {
                    "1": "input_length"
                },
                "invalidInput": {
                    "1": "invalid_input"
                },
                "joined_r0x0010341b": {
                    "1": "continue_formatting"
                },
                "outputBuffer": {
                    "1": "output_buffer"
                },
                "printf": {
                    "1": "print_string",
                    "2": "print"
                },
                "prompt": {
                    "1": "text_to_print"
                },
                "putc": {
                    "1": "write_char"
                },
                "putchar": {
                    "1": "write_char"
                },
                "puts": {
                    "1": "print_string"
                },
                "releaseMemory": {
                    "1": "release_memory"
                },
                "standardOutput": {
                    "1": "standard_output"
                },
                "uVar1": {
                    "1": "counter1",
                    "10": "character",
                    "2": "current_char",
                    "7": "char_code"
                },
                "uVar2": {
                    "1": "input_length",
                    "2": "counter",
                    "3": "index",
                    "5": "loop_counter"
                },
                "uVar3": {
                    "1": "start_index",
                    "13": "index",
                    "2": "counter",
                    "3": "output_index"
                },
                "uVar4": {
                    "1": "counter",
                    "2": "count",
                    "3": "position",
                    "4": "current_index"
                },
                "unaff_R14": {
                    "1": "text_buffer",
                    "15": "output_string",
                    "2": "buffer",
                    "9": "output_buffer"
                },
                "unaff_R15": {
                    "1": "formatting_specifier",
                    "16": "format_string",
                    "2": "message",
                    "4": "format_specifier"
                }
            },
            "called": [],
            "calling": [
                "FUN_0010259a"
            ],
            "code": "\n\n\nvoid print_formatted_output_001034fa(void)\n\n{\n  ulong character;\n  uint loop_counter;\n  ulong index;\n  ulong current_index;\n  char *output_string;\n  undefined8 format_string;\n  bool is_valid;\n  undefined8 prompt;\n  undefined8 delimiter;\n  \nformat_text:\n  current_index = 1;\ncontinue_formatting:\n  do {\n    if (DAT_00108371 != '\\0') {\n      printf(\"%s: \",prompt);\n    }\n    if (DAT_00108372 == '\\0') {\n      output_string[current_index] = '\\0';\n      fputs(output_string,standard_output);\n    }\n    else {\n      FUN_0010286f(format_string);\n      output_string[current_index] = '\\0';\n      fputs(output_string,standard_output);\n    }\n    while (current_index = read_bytes_00103520(), current_index != 0xffffffffffffffff) {\n      if (0xff < current_index) {\nend_function_execution:\n        update_data_00103810();\n        break;\n      }\n      if (current_index == 9) {\nprintf_tab:\n        putc((int)current_index,standard_output);\n      }\n      else {\n        if ((*(ushort *)(&character_table + current_index * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)current_index < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + current_index * 2) & 0x40) == 0))))\n          goto end_function_execution;\n          goto printf_tab;\n        }\n        putc((int)current_index,standard_output);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,standard_output);\n    }\n    else {\n      fputs(DAT_00108358,standard_output);\n    }\n    while (current_index = (ulong)DAT_00108374, format_string = delimiter, DAT_00108374 != 0) {\n      current_index = read_bytes_00103520();\n      loop_counter = DAT_00108374;\n      if (current_index == 0xffffffffffffffff) goto end_function_execution2;\n      if (current_index < 0x100) {\n        if (current_index == 9) {\nprocess_character1:\n          *output_string = (char)current_index;\n          if (loop_counter < 2) {\n            print_formatted_output_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&character_table + current_index * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)current_index < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + current_index * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto process_character1;\n          }\n          *output_string = (char)current_index;\n          if (loop_counter < 2) goto format_text;\n        }\n        current_index = read_bytes_00103520();\n        loop_counter = DAT_00108374;\n        if (current_index == 0xffffffffffffffff) goto end_function_execution2;\n        if (0xff < current_index) goto code_r0x001034d5;\n        if (current_index == 9) {\nprocess_character2:\n          output_string[1] = (char)current_index;\n          if (loop_counter < 3) {\n            FUN_00103510();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&character_table + current_index * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)current_index < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + current_index * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto process_character2;\n          }\n          output_string[1] = (char)current_index;\n          if (loop_counter < 3) {\n            current_index = 2;\n            break;\n          }\n        }\n        current_index = read_bytes_00103520();\n        loop_counter = DAT_00108374;\n        if (current_index == 0xffffffffffffffff) {\nend_function_execution2:\n          free(output_string);\n          return;\n        }\n        if (0xff < current_index) goto code_r0x001034d5;\n        if (current_index == 9) {\nprocess_character3:\n          output_string[2] = (char)current_index;\n        }\n        else {\n          if ((*(ushort *)(&character_table + current_index * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)current_index < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + current_index * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto process_character3;\n          }\n          output_string[2] = (char)current_index;\n        }\n        if (3 < loop_counter) {\n          index = 3;\n          do {\n            character = read_bytes_00103520();\n            if (character == 0xffffffffffffffff) goto end_function_execution2;\n            if (0xff < character) goto code_r0x001034d5;\n            if (((character != 9) && ((*(ushort *)(&character_table + character * 2) & 0x10) == 0)) &&\n               ((DAT_00108360 != 'S' || ((long)character < 0x80)))) {\n              if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n              if ((*(ushort *)(&character_table + character * 2) & 0x40) == 0) {\n                process_input_001034d5();\n                return;\n              }\n            }\n            loop_counter = (int)index + 1;\n            current_index = (ulong)loop_counter;\n            is_valid = DAT_00108374 <= loop_counter;\n            output_string[index] = (char)character;\n            index = current_index;\n            if (is_valid) goto continue_formatting;\n          } while( true );\n        }\n        current_index = 3;\n        break;\n      }\ncode_r0x001034d5:\n      update_data_00103810();\n    }\n  } while( true );\n}\n\n",
            "current_name": "print_formatted_output_001034fa",
            "entrypoint": "0x001034fa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001034fa": "print_formatted_output_001034fa",
                "LAB_00102381": "process_character3",
                "LAB_001023bb": "process_character2",
                "LAB_001023f5": "process_character1",
                "LAB_00102438": "print_tab",
                "LAB_0010348e": "end_function_execution",
                "LAB_001034be": "end_function_execution2",
                "_sch_istable": "character_table",
                "_stdout": "standard_output",
                "bVar5": "is_valid",
                "code_r0x001034fa": "format_text",
                "fputs": "write_string",
                "free": "release_memory",
                "in_stack_00000010": "prompt",
                "in_stack_00000038": "delimiter",
                "joined_r0x0010341b": "continue_formatting",
                "printf": "print",
                "putc": "output_character",
                "puts": "print_string",
                "uVar1": "character",
                "uVar2": "loop_counter",
                "uVar3": "index",
                "uVar4": "current_index",
                "unaff_R14": "output_string",
                "unaff_R15": "format_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103510": {
            "additional_data": {
                "DAT_00108358": {
                    "1": "end_string"
                },
                "DAT_00108360": {
                    "1": "character_type"
                },
                "DAT_00108371": {
                    "1": "print_label"
                },
                "DAT_00108372": {
                    "1": "enable_special_character"
                },
                "DAT_00108373": {
                    "1": "is_character_table"
                },
                "DAT_00108374": {
                    "1": "input_size"
                },
                "FUN_001034fa": {
                    "1": "print_output"
                },
                "FUN_00103510": {
                    "1": "print_processed_text",
                    "12": "print_formatted_output",
                    "4": "print_formatted_string"
                },
                "FUN_00103520": {
                    "1": "get_char"
                },
                "FUN_00103810": {
                    "1": "exit_function"
                },
                "LAB_00102381": {
                    "1": "print_char"
                },
                "LAB_001023bb": {
                    "1": "label5"
                },
                "LAB_001023f5": {
                    "1": "label4"
                },
                "LAB_00102438": {
                    "1": "label2"
                },
                "LAB_0010348e": {
                    "1": "skip_output"
                },
                "LAB_001034be": {
                    "1": "exit_label"
                },
                "LAB_001034d5": {
                    "1": "label3"
                },
                "_sch_istable": {
                    "1": "istable",
                    "2": "sch_istable",
                    "5": "character_table"
                },
                "_stdout": {
                    "1": "standard_output",
                    "3": "stdout",
                    "4": "output_stream"
                },
                "bVar5": {
                    "1": "is_invalid",
                    "2": "is_end_of_string",
                    "3": "flag"
                },
                "code_r0x001034d5": {
                    "1": "skip_output_loop"
                },
                "fputs": {
                    "1": "write_string_to_stream"
                },
                "free": {
                    "1": "free_memory",
                    "2": "release_memory"
                },
                "in_stack_00000010": {
                    "1": "function_name",
                    "2": "prefix",
                    "3": "input_string",
                    "4": "label",
                    "5": "prompt_string",
                    "7": "prompt"
                },
                "in_stack_00000038": {
                    "1": "other_string",
                    "2": "output_buffer",
                    "3": "format_string"
                },
                "joined_r0x0010341b": {
                    "1": "loop"
                },
                "printf": {
                    "1": "print"
                },
                "putc": {
                    "1": "write_character_to_stream"
                },
                "puts": {
                    "1": "output_string"
                },
                "uVar1": {
                    "1": "current_character",
                    "2": "ch",
                    "4": "char_value",
                    "7": "character"
                },
                "uVar2": {
                    "1": "format_string_length",
                    "2": "input_length",
                    "3": "length",
                    "4": "index"
                },
                "uVar3": {
                    "1": "text_index",
                    "12": "index",
                    "2": "output_index",
                    "3": "counter"
                },
                "uVar4": {
                    "1": "loop_index",
                    "2": "j",
                    "4": "counter",
                    "8": "index"
                },
                "unaff_R14": {
                    "1": "buffer",
                    "13": "output_string",
                    "2": "formatted_string",
                    "6": "output_buffer"
                },
                "unaff_R15": {
                    "1": "output_option",
                    "17": "format_string",
                    "2": "format_specifier"
                }
            },
            "called": [],
            "calling": [
                "FUN_0010259a"
            ],
            "code": "\n\n\nvoid print_formatted_output_00103510(void)\n\n{\n  ulong character;\n  uint index;\n  ulong index;\n  ulong index;\n  char *output_string;\n  undefined8 format_string;\n  bool is_end;\n  undefined8 prompt;\n  undefined8 delimiter;\n  \ncode_r0x00103510:\n  index = 2;\noutput_loop:\n  do {\n    if (DAT_00108371 != '\\0') {\n      print_formatted_output_00103510(\"%s: \",prompt);\n    }\n    if (DAT_00108372 == '\\0') {\n      output_string[index] = '\\0';\n      fputs(output_string,output_stream);\n    }\n    else {\n      FUN_0010286f(format_string);\n      output_string[index] = '\\0';\n      fputs(output_string,output_stream);\n    }\n    while (index = read_bytes_00103520(), index != 0xffffffffffffffff) {\n      if (0xff < index) {\nskip_output:\n        update_data_00103810();\n        break;\n      }\n      if (index == 9) {\nprint_delimiter:\n        putc((int)index,output_stream);\n      }\n      else {\n        if ((*(ushort *)(&character_table + index * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index * 2) & 0x40) == 0))))\n          goto skip_output;\n          goto print_delimiter;\n        }\n        putc((int)index,output_stream);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,output_stream);\n    }\n    else {\n      fputs(DAT_00108358,output_stream);\n    }\n    while (index = (ulong)DAT_00108374, format_string = delimiter, DAT_00108374 != 0) {\n      index = read_bytes_00103520();\n      index = DAT_00108374;\n      if (index == 0xffffffffffffffff) goto exit_label;\n      if (index < 0x100) {\n        if (index == 9) {\nprint_tab:\n          *output_string = (char)index;\n          if (index < 2) {\n            print_formatted_output_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&character_table + index * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index * 2) & 0x40) == 0))))\n            goto skip_output_loop;\n            goto print_tab;\n          }\n          *output_string = (char)index;\n          if (index < 2) {\n            index = 1;\n            break;\n          }\n        }\n        index = read_bytes_00103520();\n        index = DAT_00108374;\n        if (index == 0xffffffffffffffff) goto exit_label;\n        if (0xff < index) goto skip_output_loop;\n        if (index == 9) {\nprint_char2:\n          output_string[1] = (char)index;\n          if (index < 3) {\n            print_formatted_output_00103510();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&character_table + index * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index * 2) & 0x40) == 0))))\n            goto skip_output_loop;\n            goto print_char2;\n          }\n          output_string[1] = (char)index;\n          if (index < 3) goto code_r0x00103510;\n        }\n        index = read_bytes_00103520();\n        index = DAT_00108374;\n        if (index == 0xffffffffffffffff) {\nexit_label:\n          free(output_string);\n          return;\n        }\n        if (0xff < index) goto skip_output_loop;\n        if (index == 9) {\nprint_char:\n          output_string[2] = (char)index;\n        }\n        else {\n          if ((*(ushort *)(&character_table + index * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index * 2) & 0x40) == 0))))\n            goto skip_output_loop;\n            goto print_char;\n          }\n          output_string[2] = (char)index;\n        }\n        if (3 < index) {\n          index = 3;\n          do {\n            character = read_bytes_00103520();\n            if (character == 0xffffffffffffffff) goto exit_label;\n            if (0xff < character) goto skip_output_loop;\n            if (((character != 9) && ((*(ushort *)(&character_table + character * 2) & 0x10) == 0)) &&\n               ((DAT_00108360 != 'S' || ((long)character < 0x80)))) {\n              if (DAT_00108373 == '\\0') goto skip_output_loop;\n              if ((*(ushort *)(&character_table + character * 2) & 0x40) == 0) {\n                process_input_001034d5();\n                return;\n              }\n            }\n            index = (int)index + 1;\n            index = (ulong)index;\n            is_end = DAT_00108374 <= index;\n            output_string[index] = (char)character;\n            index = index;\n            if (is_end) goto output_loop;\n          } while( true );\n        }\n        index = 3;\n        break;\n      }\nskip_output_loop:\n      update_data_00103810();\n    }\n  } while( true );\n}\n\n",
            "current_name": "print_formatted_output_00103510",
            "entrypoint": "0x00103510",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103510": "print_formatted_output_00103510",
                "LAB_00102381": "print_char",
                "LAB_001023bb": "print_char2",
                "LAB_001023f5": "print_tab",
                "LAB_00102438": "print_delimiter",
                "LAB_0010348e": "skip_output",
                "LAB_001034be": "exit_label",
                "_sch_istable": "character_table",
                "_stdout": "output_stream",
                "bVar5": "is_end",
                "code_r0x001034d5": "skip_output_loop",
                "fputs": "output_string_with_no_newline",
                "free": "release_memory",
                "in_stack_00000010": "prompt",
                "in_stack_00000038": "delimiter",
                "joined_r0x0010341b": "output_loop",
                "printf": "print_formatted_output",
                "putc": "output_character",
                "puts": "output_string",
                "uVar1": "character",
                "uVar2": "index",
                "uVar3": "index",
                "uVar4": "index",
                "unaff_R14": "output_string",
                "unaff_R15": "format_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103520": {
            "additional_data": {
                "FUN_00103520": {
                    "1": "read_uint64_from_stream",
                    "2": "read_and_convert_data",
                    "3": "parse_data",
                    "4": "read_data",
                    "6": "read_bytes"
                },
                "_IO_FILE": {
                    "4": "file"
                },
                "__uflow": {
                    "1": "underflow"
                },
                "bVar1": {
                    "1": "curr_byte",
                    "18": "byte_value",
                    "3": "current_byte",
                    "5": "byte_val"
                },
                "iVar6": {
                    "1": "temp_var1",
                    "2": "iteration_count",
                    "3": "index",
                    "4": "count",
                    "5": "counter",
                    "7": "loop_counter"
                },
                "iVar7": {
                    "1": "target_count",
                    "2": "expected_bytes",
                    "3": "total_iterations",
                    "4": "expected_count",
                    "6": "total_bytes"
                },
                "param_1": {
                    "1": "file_pointer",
                    "23": "file",
                    "3": "stream"
                },
                "param_2": {
                    "1": "read_count",
                    "2": "position",
                    "3": "num_bytes_read",
                    "7": "count"
                },
                "param_3": {
                    "1": "length",
                    "13": "remaining",
                    "2": "num_bytes_remaining",
                    "3": "remaining_count",
                    "5": "remaining_bytes"
                },
                "param_4": {
                    "1": "byte_stream",
                    "14": "buffer",
                    "2": "byte_pointer",
                    "4": "byte_array",
                    "7": "data"
                },
                "pbVar2": {
                    "1": "current_pos",
                    "14": "byte_ptr",
                    "3": "ptr",
                    "5": "byte_pointer",
                    "6": "current_byte"
                },
                "reverse_bits_00102771": {
                    "1": "reverse_bytes",
                    "5": "reverse_bits"
                },
                "uVar3": {
                    "1": "byte_result",
                    "11": "result",
                    "2": "uflow_result",
                    "5": "read_result",
                    "8": "flow_result"
                },
                "uVar4": {
                    "1": "byte_var",
                    "2": "read_byte",
                    "3": "temp_var",
                    "6": "temp_value",
                    "7": "byte_result"
                },
                "uVar5": {
                    "1": "unsigned_long_value",
                    "2": "data",
                    "3": "converted_value",
                    "4": "value",
                    "9": "result"
                }
            },
            "called": [
                "__uflow",
                "FUN_00102771"
            ],
            "calling": [
                "FUN_0010259a"
            ],
            "code": "\nulong read_bytes_00103520(file *file,long *count,int *remaining,byte **buffer)\n\n{\n  byte byte_value;\n  byte *byte_ptr;\n  uint result;\n  ulong byte_result;\n  ulong result;\n  int loop_counter;\n  int total_bytes;\n  \n  total_bytes = DAT_0010834c;\n  if (DAT_0010834c < 1) {\n    result = 0;\n    if (DAT_00108360 == 'L') {\n      result = reverse_bits();\n      return result;\n    }\n    goto LAB_0010361f;\n  }\n  if (file == (file *)0x0) {\n    result = 0;\n    loop_counter = 0;\n    do {\n      if (*remaining == 0) {\n        return 0xffffffffffffffff;\n      }\n      loop_counter = loop_counter + 1;\n      *remaining = *remaining + -1;\n      byte_ptr = *buffer;\n      *buffer = byte_ptr + 1;\n      byte_value = *byte_ptr;\n      *count = *count + 1;\n      result = result << 8 | (ulong)byte_value;\n    } while (loop_counter != total_bytes);\n  }\n  else if (*remaining == 0) {\n    byte_ptr = (byte *)file->_IO_read_ptr;\n    if (file->_IO_read_end <= byte_ptr) {\n      result = __uflow(file);\n      result = (ulong)(result & 0xff);\n      if (result == 0xffffffff) {\n        return 0xffffffffffffffff;\n      }\n      goto LAB_001036aa;\n    }\n    file->_IO_read_ptr = (char *)(byte_ptr + 1);\n    result = (ulong)*byte_ptr;\n    *count = *count + 1;\n    loop_counter = 0;\n    if (total_bytes == 1) goto LAB_00103610;\nLAB_00103574:\n    byte_ptr = (byte *)file->_IO_read_ptr;\n    if (byte_ptr < file->_IO_read_end) {\n      file->_IO_read_ptr = (char *)(byte_ptr + 1);\n      byte_value = *byte_ptr;\n      *count = *count + 1;\n      result = result << 8 | (ulong)byte_value;\n      if (DAT_0010834c < 3) goto LAB_00103610;\nLAB_001035a1:\n      byte_ptr = (byte *)file->_IO_read_ptr;\n      if (byte_ptr < file->_IO_read_end) {\n        file->_IO_read_ptr = (char *)(byte_ptr + 1);\n        byte_value = *byte_ptr;\n        *count = *count + 1;\n        result = result << 8 | (ulong)byte_value;\n        if (DAT_0010834c < 4) goto LAB_00103610;\n      }\n      else {\n        result = __uflow(file);\n        if (result == 0xffffffff) {\n          return 0xffffffffffffffff;\n        }\n        byte_result = (ulong)(result & 0xff);\nLAB_00103717:\n        *count = *count + 1;\n        result = result << 8 | byte_result;\n        if (DAT_0010834c < 4) goto LAB_00103610;\n        loop_counter = *remaining;\n      }\n      total_bytes = 3;\n      while( true ) {\n        if (loop_counter == 0) {\n          while (byte_ptr = (byte *)file->_IO_read_ptr, byte_ptr < file->_IO_read_end) {\n            total_bytes = total_bytes + 1;\n            file->_IO_read_ptr = (char *)(byte_ptr + 1);\n            byte_value = *byte_ptr;\n            *count = *count + 1;\n            result = result << 8 | (ulong)byte_value;\n            if (DAT_0010834c <= total_bytes) goto LAB_00103610;\n          }\n          result = __uflow(file);\n          if (result == 0xffffffff) {\n            return 0xffffffffffffffff;\n          }\n          byte_result = (ulong)(result & 0xff);\n        }\n        else {\n          byte_ptr = *buffer;\n          *remaining = loop_counter + -1;\n          *buffer = byte_ptr + 1;\n          byte_result = (ulong)*byte_ptr;\n        }\n        *count = *count + 1;\n        total_bytes = total_bytes + 1;\n        result = result << 8 | byte_result;\n        if (DAT_0010834c <= total_bytes) break;\n        loop_counter = *remaining;\n      }\n    }\n    else {\n      result = __uflow(file);\n      if (result == 0xffffffff) {\n        return 0xffffffffffffffff;\n      }\n      byte_result = (ulong)(result & 0xff);\nLAB_001036dd:\n      *count = *count + 1;\n      result = result << 8 | byte_result;\n      if (2 < DAT_0010834c) {\n        loop_counter = *remaining;\n        if (loop_counter == 0) goto LAB_001035a1;\n        byte_ptr = *buffer;\n        *remaining = loop_counter + -1;\n        *buffer = byte_ptr + 1;\n        byte_result = (ulong)*byte_ptr;\n        goto LAB_00103717;\n      }\n    }\n  }\n  else {\n    byte_ptr = *buffer;\n    *remaining = *remaining + -1;\n    *buffer = byte_ptr + 1;\n    result = (ulong)*byte_ptr;\nLAB_001036aa:\n    *count = *count + 1;\n    if (1 < DAT_0010834c) {\n      loop_counter = *remaining;\n      if (loop_counter == 0) goto LAB_00103574;\n      byte_ptr = *buffer;\n      *remaining = loop_counter + -1;\n      *buffer = byte_ptr + 1;\n      byte_result = (ulong)*byte_ptr;\n      goto LAB_001036dd;\n    }\n  }\nLAB_00103610:\n  if (DAT_00108360 == 'L') {\n    result = reverse_bits();\n    return result;\n  }\nLAB_0010361f:\n  if (DAT_00108360 == 'l') {\n    result = result >> 8 & 0xff | (result & 0xff) << 8;\n  }\n  return result;\n}\n\n",
            "current_name": "read_bytes_00103520",
            "entrypoint": "0x00103520",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103520": "read_bytes_00103520",
                "_IO_FILE": "file",
                "__uflow": "uflow",
                "bVar1": "byte_value",
                "iVar6": "loop_counter",
                "iVar7": "total_bytes",
                "param_1": "file",
                "param_2": "count",
                "param_3": "remaining",
                "param_4": "buffer",
                "pbVar2": "byte_ptr",
                "reverse_bits_00102771": "reverse_bits",
                "uVar3": "result",
                "uVar4": "byte_result",
                "uVar5": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103810": {
            "additional_data": {
                "DAT_00108348": {
                    "1": "data"
                },
                "DAT_0010834c": {
                    "1": "data_size"
                },
                "DAT_00108360": {
                    "1": "data_type"
                },
                "FUN_00103810": {
                    "1": "calculate_shifted_value",
                    "12": "update_data",
                    "2": "calculate_offsets",
                    "3": "update_parameters"
                },
                "_DAT_00108349": {
                    "1": "data2"
                },
                "iVar1": {
                    "1": "counter",
                    "2": "temp_var_1",
                    "3": "flag_value",
                    "8": "counter_value"
                },
                "iVar3": {
                    "1": "previous_count",
                    "2": "updated_flag_value",
                    "3": "updated_counter_value",
                    "5": "updated_counter"
                },
                "initialize_data_0010282b": {
                    "12": "initialize_data"
                },
                "lVar2": {
                    "1": "data_len",
                    "2": "initial_value",
                    "3": "data_length",
                    "5": "data_size"
                },
                "param_1": {
                    "1": "data",
                    "11": "value",
                    "2": "data_value",
                    "4": "new_value",
                    "6": "input_value"
                },
                "param_2": {
                    "1": "original_value",
                    "2": "data",
                    "3": "result_ptr",
                    "5": "data_pointer",
                    "6": "data_ptr"
                },
                "param_3": {
                    "1": "ptr2",
                    "2": "result_2",
                    "3": "flag",
                    "7": "counter_ptr"
                },
                "param_4": {
                    "1": "address_ptr",
                    "2": "output_ptr",
                    "3": "result_pointer",
                    "4": "result",
                    "5": "result_ptr"
                }
            },
            "called": [
                "FUN_0010282b",
                "FUN_001027e2"
            ],
            "calling": [
                "FUN_001034d5",
                "FUN_0010259a"
            ],
            "code": "\n\n\nvoid update_data_00103810(undefined8 value,long *data_ptr,int *counter_ptr,long *result_ptr)\n\n{\n  int counter_value;\n  long data_size;\n  int updated_counter;\n  \n  data_size = (long)DAT_0010834c;\n  if (DAT_0010834c < 2) {\n    return;\n  }\n  updated_counter = DAT_0010834c + -1;\n  *data_ptr = *data_ptr - (long)updated_counter;\n  counter_value = *counter_ptr;\n  if (counter_value == 0) {\n    if (DAT_00108360 != 'l') {\n      if (DAT_00108360 < 'm') {\n        if (DAT_00108360 == 'b') {\n          DAT_00108348 = (undefined)value;\n          *counter_ptr = 1;\n        }\n        else if (DAT_00108360 < 'c') {\n          if (DAT_00108360 == 'B') {\n            _DAT_00108349 = (ushort)value << 8 | (ushort)value >> 8;\n            DAT_00108348 = (undefined)((ulong)value >> 0x10);\n            *counter_ptr = 3;\n          }\n          else if (DAT_00108360 == 'L') {\n            initialize_data();\n            return;\n          }\n        }\n      }\n      *result_ptr = (long)&DAT_00108348;\n      return;\n    }\n    DAT_00108348 = (undefined)((ulong)value >> 8);\n    *counter_ptr = 1;\n    *result_ptr = (long)&DAT_00108348;\n  }\n  else {\n    *result_ptr = *result_ptr + (1 - data_size);\n    *counter_ptr = updated_counter + counter_value;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_00103810",
            "entrypoint": "0x00103810",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103810": "update_data_00103810",
                "iVar1": "counter_value",
                "iVar3": "updated_counter",
                "initialize_data_0010282b": "initialize_data",
                "lVar2": "data_size",
                "param_1": "value",
                "param_2": "data_ptr",
                "param_3": "counter_ptr",
                "param_4": "result_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103890": {
            "additional_data": {
                "DAT_00108371": {
                    "1": "should_print_text"
                },
                "DAT_00108372": {
                    "1": "is_value_print_enabled"
                },
                "FUN_00103890": {
                    "1": "print_if_data_true",
                    "2": "print_if_condition_true",
                    "3": "print_if_condition_met",
                    "4": "print_if_enabled"
                },
                "param_1": {
                    "1": "string_param",
                    "2": "text",
                    "24": "message",
                    "3": "label"
                },
                "param_2": {
                    "1": "value_param",
                    "2": "value_to_print",
                    "28": "value"
                },
                "param_3": {
                    "1": "condition"
                },
                "param_4": {
                    "1": "format"
                },
                "print_formatted_value_0010286f": {
                    "1": "print_value_in_format",
                    "4": "print_value",
                    "6": "print_formatted_value"
                },
                "printf": {
                    "1": "print_debug",
                    "2": "print_message"
                }
            },
            "called": [
                "FUN_00102853"
            ],
            "calling": [
                "FUN_00103240",
                "FUN_00102b11"
            ],
            "code": "\nvoid print_if_enabled_00103890(undefined8 message,undefined8 value)\n\n{\n  if (DAT_00108371 != '\\0') {\n    printf(\"%s: \",message);\n  }\n  if (DAT_00108372 == '\\0') {\n    return;\n  }\n  print_formatted_value(value);\n  return;\n}\n\n",
            "current_name": "print_if_enabled_00103890",
            "entrypoint": "0x00103890",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103890": "print_if_enabled_00103890",
                "param_1": "message",
                "param_2": "value",
                "print_formatted_value_0010286f": "print_formatted_value",
                "printf": "print_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001038b0": {
            "called": [
                "fflush",
                "fprintf",
                "vfprintf",
                "putc"
            ],
            "calling": [
                "FUN_00104a60",
                "FUN_00103910"
            ],
            "code": "\n\n\nvoid FUNC_001038b0(char *param_1,__gnuc_va_list param_2)\n\n{\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",DAT_00108378);\n  vfprintf(_stderr,param_1,param_2);\n  putc(10,_stderr);\n  return;\n}\n\n",
            "current_name": "FUNC_001038b0",
            "entrypoint": "0x001038b0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_001038b0": "FUNC_001038b0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103910": {
            "additional_data": {
                "FUN_00103910": {
                    "1": "decode_and_process_data",
                    "16": "process_data",
                    "2": "reverse_and_process_data"
                },
                "in_AL": {
                    "1": "condition_check",
                    "20": "flag",
                    "3": "condition"
                },
                "local_18": {
                    "1": "flag8_copy",
                    "2": "local_var13"
                },
                "local_28": {
                    "1": "local_param7",
                    "2": "input7_copy"
                },
                "local_38": {
                    "1": "local_arg6",
                    "2": "local_input6"
                },
                "local_48": {
                    "1": "extracted_data5",
                    "2": "input5_copy"
                },
                "local_58": {
                    "1": "input_4_copy",
                    "2": "input4_copy"
                },
                "local_68": {
                    "1": "extracted_data3",
                    "2": "temp3"
                },
                "local_78": {
                    "1": "input2",
                    "2": "local_input2"
                },
                "local_88": {
                    "1": "input1",
                    "2": "input1_copy"
                },
                "local_90": {
                    "1": "parameter6",
                    "2": "local_var5",
                    "4": "param14"
                },
                "local_98": {
                    "1": "param5_copy",
                    "2": "input5_copy",
                    "4": "param13"
                },
                "local_a0": {
                    "1": "data_param3",
                    "2": "input4_copy",
                    "4": "param12"
                },
                "local_a8": {
                    "1": "result2",
                    "2": "var2",
                    "4": "param11"
                },
                "local_b0": {
                    "1": "result1",
                    "2": "local_var1",
                    "4": "param10"
                },
                "local_b8": {
                    "1": "source_buffer",
                    "2": "data",
                    "3": "buffer",
                    "5": "local_buffer"
                },
                "local_c8": {
                    "1": "target_ptr",
                    "10": "local_buffer",
                    "2": "pointer2",
                    "6": "buffer"
                },
                "local_d0": {
                    "1": "source_ptr",
                    "3": "stack_ptr",
                    "4": "buffer_ptr",
                    "9": "buffer"
                },
                "local_d4": {
                    "1": "constant30",
                    "2": "offset",
                    "5": "constant"
                },
                "local_d8": {
                    "1": "local_size",
                    "11": "size",
                    "5": "length",
                    "7": "buffer_size"
                },
                "param_1": {
                    "1": "action1",
                    "14": "input1",
                    "2": "data1",
                    "3": "input_1"
                },
                "param_10": {
                    "1": "data_param1",
                    "3": "input2",
                    "4": "data2",
                    "8": "param2"
                },
                "param_11": {
                    "1": "buffer_2",
                    "3": "input3",
                    "4": "data3",
                    "8": "param3"
                },
                "param_12": {
                    "1": "buffer_3",
                    "3": "param12",
                    "4": "data4",
                    "8": "param4"
                },
                "param_13": {
                    "1": "input_param13",
                    "3": "param13",
                    "4": "data5",
                    "8": "param5"
                },
                "param_14": {
                    "1": "buffer_5",
                    "3": "param14",
                    "4": "data6",
                    "8": "param6"
                },
                "param_2": {
                    "1": "length1",
                    "14": "input2",
                    "2": "input_param2",
                    "3": "input_2"
                },
                "param_3": {
                    "1": "action3",
                    "14": "input3",
                    "2": "input_param3",
                    "3": "input_3"
                },
                "param_4": {
                    "1": "source_param4",
                    "14": "input4",
                    "2": "data4",
                    "3": "input_4"
                },
                "param_5": {
                    "1": "source_param5",
                    "14": "input5",
                    "2": "input_param5",
                    "3": "input_5"
                },
                "param_6": {
                    "1": "source_param6",
                    "14": "input6",
                    "2": "data6",
                    "3": "param6"
                },
                "param_7": {
                    "1": "value7",
                    "14": "input7",
                    "2": "data7",
                    "3": "input_7"
                },
                "param_8": {
                    "1": "flag8",
                    "14": "input8",
                    "2": "data8",
                    "3": "input_8"
                },
                "param_9": {
                    "1": "data",
                    "2": "param9",
                    "3": "input1",
                    "4": "data1",
                    "8": "param1"
                }
            },
            "called": [
                "FUN_001038b0"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid process_data_00103910(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param1,undefined8 param2,undefined8 param3,undefined8 param4,\n                 undefined8 param5,undefined8 param6)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 constant;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_buffer [8];\n  undefined8 param10;\n  undefined8 param11;\n  undefined8 param12;\n  undefined8 param13;\n  undefined8 param14;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  undefined4 input5_copy;\n  undefined4 input6_copy;\n  undefined4 input7_copy;\n  undefined4 input8_copy;\n  \n  if (flag != '\\0') {\n    input1_copy = input1;\n    input2_copy = input2;\n    input3_copy = input3;\n    input4_copy = input4;\n    input5_copy = input5;\n    input6_copy = input6;\n    input7_copy = input7;\n    input8_copy = input8;\n  }\n  buffer = &stack0x00000008;\n  size = 8;\n  local_buffer = local_buffer;\n  constant = 0x30;\n  param10 = param2;\n  param11 = param3;\n  param12 = param4;\n  param13 = param5;\n  param14 = param6;\n  FUNC_001038b0(param1,&size);\n  return;\n}\n\n",
            "current_name": "process_data_00103910",
            "entrypoint": "0x00103910",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103910": "process_data_00103910",
                "in_AL": "flag",
                "local_18": "input8_copy",
                "local_28": "input7_copy",
                "local_38": "input6_copy",
                "local_48": "input5_copy",
                "local_58": "input4_copy",
                "local_68": "input3_copy",
                "local_78": "input2_copy",
                "local_88": "input1_copy",
                "local_90": "param14",
                "local_98": "param13",
                "local_a0": "param12",
                "local_a8": "param11",
                "local_b0": "param10",
                "local_b8": "local_buffer",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "constant",
                "local_d8": "size",
                "param_1": "input1",
                "param_10": "param2",
                "param_11": "param3",
                "param_12": "param4",
                "param_13": "param5",
                "param_14": "param6",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001039e0": {
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001039f3) */\n/* WARNING: Removing unreachable block (ram,0x001039ff) */\n\nvoid FUNC_001039e0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_001039e0",
            "entrypoint": "0x001039e0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_001039e0": "FUNC_001039e0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103a10": {
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "calling": [
                "_INIT_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00103a34) */\n/* WARNING: Removing unreachable block (ram,0x00103a40) */\n\nvoid FUNC_00103a10(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103a10",
            "entrypoint": "0x00103a10",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103a10": "FUNC_00103a10"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103aa0": {
            "additional_data": {
                "CONCAT44": {
                    "1": "concatenate44"
                },
                "CONCAT71": {
                    "1": "concatenate71"
                },
                "DAT_00108306": {
                    "1": "bool_var8"
                },
                "DAT_0010834c": {
                    "1": "int_var2"
                },
                "DAT_00108350": {
                    "1": "int_var3"
                },
                "DAT_00108358": {
                    "1": "ptr6"
                },
                "DAT_00108360": {
                    "1": "char_var2"
                },
                "DAT_00108368": {
                    "1": "ptr5"
                },
                "DAT_00108370": {
                    "1": "bool_var7"
                },
                "DAT_00108371": {
                    "1": "bool_var6"
                },
                "DAT_00108372": {
                    "1": "bool_var5"
                },
                "DAT_00108373": {
                    "1": "bool_var4"
                },
                "DAT_00108374": {
                    "1": "int_var1"
                },
                "DAT_00108378": {
                    "1": "program_name"
                },
                "DAT_00108379": {
                    "1": "bool_var9"
                },
                "FUN_00103aa0": {
                    "1": "read_and_process_file",
                    "2": "parse_strings_input",
                    "4": "extract_strings_from_file"
                },
                "PTR_DAT_001081a0": {
                    "1": "ptr7"
                },
                "__ptr": {
                    "1": "temp_buffer",
                    "2": "byte_ptr_2",
                    "3": "ptr2",
                    "5": "buffer"
                },
                "__src": {
                    "1": "source_array",
                    "2": "long_ptr2",
                    "5": "source_ptr"
                },
                "__stream": {
                    "1": "file_ptr1",
                    "17": "file_stream",
                    "2": "file_stream_1",
                    "3": "file_ptr"
                },
                "__stream_00": {
                    "1": "stream1",
                    "2": "file_ptr2",
                    "3": "file_stream_00",
                    "6": "file_stream_2",
                    "9": "file_stream2"
                },
                "_errno_location": {
                    "1": "errno_location"
                },
                "_optarg": {
                    "1": "option_argument"
                },
                "_optind": {
                    "1": "option_index"
                },
                "_stderr": {
                    "1": "error_stream"
                },
                "_stdin": {
                    "1": "standard_input"
                },
                "_stdout": {
                    "1": "standard_output"
                },
                "bVar2": {
                    "1": "current_char",
                    "15": "byte_var2",
                    "3": "var2",
                    "4": "byte_var_2"
                },
                "bVar25": {
                    "1": "escape_char",
                    "3": "bool_var25",
                    "8": "bool_var1"
                },
                "bVar27": {
                    "1": "var_27",
                    "2": "bool_var_2",
                    "3": "bool_var27",
                    "8": "bool_var2"
                },
                "bVar28": {
                    "1": "bool_var_28",
                    "2": "bool_var_3",
                    "3": "bool_var28",
                    "8": "bool_var3"
                },
                "bVar3": {
                    "1": "byte3",
                    "15": "byte_var3",
                    "2": "next_char",
                    "3": "var3",
                    "4": "byte_var_3"
                },
                "bfd_check_format": {
                    "1": "check_bfd_format"
                },
                "bfd_close": {
                    "1": "close_bfd"
                },
                "bfd_errmsg": {
                    "1": "get_error_message"
                },
                "bfd_get_error": {
                    "1": "get_bfd_error"
                },
                "bfd_init": {
                    "1": "initialize_bfd"
                },
                "bfd_malloc_and_get_section": {
                    "1": "malloc_and_get_bfd_section"
                },
                "bfd_openr": {
                    "1": "open_bfd_read"
                },
                "bfd_set_default_target": {
                    "1": "set_default_target"
                },
                "bfd_set_error_program_name": {
                    "3": "set_error_program_name"
                },
                "bindtextdomain": {
                    "3": "bind_text_domain"
                },
                "cVar4": {
                    "1": "char1",
                    "10": "char_var4",
                    "3": "var4",
                    "9": "char_var"
                },
                "dcgettext": {
                    "1": "get_locale_text"
                },
                "fclose": {
                    "1": "close_file"
                },
                "ferror": {
                    "2": "file_error"
                },
                "fopen": {
                    "1": "open_file"
                },
                "fprintf": {
                    "1": "formatted_print"
                },
                "fputs": {
                    "1": "put_string"
                },
                "fread": {
                    "2": "file_read"
                },
                "free": {
                    "2": "free_memory"
                },
                "fseek": {
                    "2": "file_seek"
                },
                "ftell": {
                    "2": "file_tell"
                },
                "getopt_long": {
                    "1": "get_long_option"
                },
                "halt_baddata": {
                    "1": "halt_bad_data"
                },
                "iVar5": {
                    "1": "counter",
                    "2": "index_var5",
                    "4": "int_var",
                    "5": "index_var",
                    "8": "index"
                },
                "iVar7": {
                    "1": "i_var7",
                    "2": "index_var7",
                    "4": "index",
                    "5": "loop_var"
                },
                "lVar11": {
                    "1": "file_name",
                    "2": "var11",
                    "3": "long_var_1",
                    "4": "long_var11"
                },
                "lVar22": {
                    "1": "string_index",
                    "2": "long_var22",
                    "3": "long_var_2",
                    "5": "long_var2"
                },
                "local_00": {
                    "1": "reserved_var"
                },
                "local_100": {
                    "1": "optind"
                },
                "local_110": {
                    "1": "var110",
                    "2": "local_var5"
                },
                "local_118": {
                    "1": "size_3",
                    "2": "size_var11",
                    "3": "size_var3"
                },
                "local_120": {
                    "1": "ulong_var_2",
                    "2": "max_files"
                },
                "local_128": {
                    "1": "byte_ptr4",
                    "2": "temp_buffer",
                    "3": "local_ptr2"
                },
                "local_138": {
                    "1": "target_encoding",
                    "2": "local_long1",
                    "3": "local_var1"
                },
                "local_140": {
                    "1": "local_index_ptr",
                    "2": "local_ptr1",
                    "3": "local_array"
                },
                "local_148": {
                    "1": "max_string_length"
                },
                "local_158": {
                    "1": "current_file_index"
                },
                "local_160": {
                    "1": "max_files"
                },
                "local_68": {
                    "1": "is_reading_stdin"
                },
                "local_70": {
                    "1": "missing_files"
                },
                "local_80": {
                    "1": "help_option"
                },
                "local_88": {
                    "1": "unsupported_options"
                },
                "local_90": {
                    "1": "undeclared_options"
                },
                "local_94": {
                    "1": "include_directories"
                },
                "local_98": {
                    "1": "decimal_option"
                },
                "local_a0": {
                    "1": "octal_option"
                },
                "local_a8": {
                    "1": "hex_option"
                },
                "local_ac": {
                    "1": "highlight_option"
                },
                "local_b4": {
                    "1": "invalid_chars"
                },
                "local_bc": {
                    "1": "verbose_mode"
                },
                "local_c8": {
                    "1": "local_stat_c8",
                    "3": "file_stat",
                    "5": "stat_struct"
                },
                "local_d0": {
                    "1": "local_d0",
                    "2": "local_ptr3",
                    "3": "void_ptr1"
                },
                "local_d8": {
                    "1": "str2",
                    "2": "local_str1"
                },
                "local_e0": {
                    "1": "escape_option"
                },
                "local_e8": {
                    "1": "locale_option"
                },
                "local_f0": {
                    "1": "target_option"
                },
                "local_f8": {
                    "1": "option_char"
                },
                "malloc": {
                    "2": "allocate_memory"
                },
                "memcmp": {
                    "1": "memory_compare"
                },
                "memcpy": {
                    "1": "copy_memory"
                },
                "memmove": {
                    "1": "memory_move"
                },
                "optarg": {
                    "1": "opt_argument"
                },
                "opterr": {
                    "1": "opt_error"
                },
                "optind": {
                    "1": "opt_index"
                },
                "optopt": {
                    "1": "opt_option"
                },
                "param_1": {
                    "1": "num_args",
                    "2": "num_params",
                    "25": "argc"
                },
                "param_2": {
                    "1": "file_pointers",
                    "25": "argv"
                },
                "pbVar1": {
                    "1": "current_byte",
                    "2": "ptr_byte1",
                    "4": "byte_ptr_1",
                    "6": "byte_ptr1",
                    "8": "ptr1"
                },
                "pbVar19": {
                    "1": "byte_ptr_19",
                    "2": "byte_ptr_3",
                    "3": "byte_ptr",
                    "4": "byte_ptr3"
                },
                "pbVar23": {
                    "1": "ptr2",
                    "2": "byte_ptr4"
                },
                "pcVar20": {
                    "1": "char_pointer_1",
                    "2": "ptr_char1"
                },
                "pcVar24": {
                    "1": "char_ptr2",
                    "2": "ptr_char2",
                    "3": "str_var2"
                },
                "perror": {
                    "2": "print_error"
                },
                "piVar15": {
                    "1": "error_var15",
                    "2": "ptr_int1",
                    "4": "int_ptr1",
                    "5": "int_ptr"
                },
                "plVar12": {
                    "1": "ptr2",
                    "2": "string_list",
                    "3": "param_ptr",
                    "4": "long_ptr1"
                },
                "plVar16": {
                    "1": "long_ptr_2",
                    "2": "long_ptr2"
                },
                "plVar18": {
                    "1": "long_ptr2",
                    "2": "param_ptr3"
                },
                "ppuVar21": {
                    "1": "option_string_ptr",
                    "2": "ptr_ptr",
                    "4": "undefined_ptr_ptr"
                },
                "puVar26": {
                    "1": "current_bdf",
                    "4": "undefined8_ptr"
                },
                "sVar10": {
                    "1": "length2",
                    "2": "read_size",
                    "3": "size2",
                    "5": "size_var10",
                    "8": "size_var2"
                },
                "sVar9": {
                    "1": "size_1",
                    "2": "size_var_1",
                    "3": "size1",
                    "5": "size_var9",
                    "8": "file_size"
                },
                "setlocale": {
                    "3": "set_locale"
                },
                "stat": {
                    "1": "get_stat"
                },
                "stderr": {
                    "1": "standard_error"
                },
                "stdout": {
                    "1": "standard_output"
                },
                "strcmp": {
                    "1": "string_compare"
                },
                "strcpy": {
                    "1": "string_copy"
                },
                "strlen": {
                    "2": "string_length"
                },
                "strtol": {
                    "1": "string_to_long"
                },
                "strtoul": {
                    "1": "string_to_unsigned_long"
                },
                "textdomain": {
                    "3": "text_domain"
                },
                "uVar13": {
                    "1": "var_13",
                    "11": "ulong_var",
                    "2": "var13",
                    "4": "ulong_var13"
                },
                "uVar14": {
                    "1": "undefined_2",
                    "2": "ulong_var14",
                    "3": "undefined8_var"
                },
                "uVar17": {
                    "1": "u_var17",
                    "2": "string_var2"
                },
                "uVar6": {
                    "1": "counter_2",
                    "2": "uint_var6",
                    "3": "counter",
                    "4": "count",
                    "7": "uint_var"
                },
                "uVar8": {
                    "1": "undefined_1",
                    "2": "uint_var_2",
                    "4": "undefined4_var"
                },
                "unaff_R12": {
                    "1": "current_file",
                    "2": "unaffected_r12"
                },
                "xexit": {
                    "1": "exit_program"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                },
                "xmalloc_set_program_name": {
                    "3": "set_program_name"
                },
                "xrealloc": {
                    "2": "reallocate_memory"
                },
                "xstrdup": {
                    "2": "duplicate_string"
                }
            },
            "called": [
                "fflush",
                "bfd_check_format",
                "FUN_00103240",
                "dcgettext",
                "bfd_openr",
                "textdomain",
                "bfd_close",
                "ferror",
                "xrealloc",
                "setlocale",
                "stat",
                "ftell",
                "printf",
                "strerror",
                "bindtextdomain",
                "fopen",
                "bfd_set_error_program_name",
                "memmove",
                "bfd_errmsg",
                "fprintf",
                "free",
                "FUN_001030c0",
                "strtoul",
                "memcpy",
                "exit",
                "strlen",
                "bfd_malloc_and_get_section",
                "bfd_set_default_target",
                "getopt_long",
                "xmalloc_set_program_name",
                "FUN_00103910",
                "xmalloc",
                "bfd_get_error",
                "perror",
                "strcmp",
                "xstrdup",
                "xexit",
                "FUN_00104a60",
                "__errno_location",
                "bfd_init",
                "fseek",
                "fread",
                "fclose"
            ],
            "calling": [
                "entry"
            ],
            "code": "\n\n\n\nFILE * extract_strings_from_file_00103aa0(int argc,long *argv)\n\n{\n  byte *ptr1;\n  byte byte_var2;\n  byte byte_var3;\n  char char_var4;\n  int index;\n  uint uint_var;\n  int loop_var;\n  undefined4 undefined4_var;\n  FILE *file_stream;\n  size_t size_var1;\n  size_t size_var2;\n  byte *byte_ptr2;\n  long long_var11;\n  long *long_ptr1;\n  ulong ulong_var;\n  long *src_ptr;\n  undefined8 undefined8_var;\n  FILE *file_stream2;\n  int *int_ptr;\n  long *param_ptr2;\n  undefined8 string_var2;\n  long *param_ptr3;\n  byte *byte_ptr3;\n  char *ptr_char1;\n  undefined **undefined_ptr_ptr;\n  long long_var2;\n  byte *byte_ptr4;\n  char *str_var2;\n  bool bool_var1;\n  long *unaffected_r12;\n  undefined8 *undefined8_ptr;\n  bool bool_var2;\n  bool bool_var3;\n  long *local_array;\n  undefined8 local_var1;\n  undefined8 local_ptr2;\n  ulong local_var120;\n  size_t local_size;\n  long local_long2;\n  char *local_str1;\n  void *local_void_ptr;\n  get_stat local_stat;\n  \n  setlocale(6,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_00108378 = *argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_00108378);\n  param_ptr2 = argv;\n  if (argc < 2) goto LAB_00103fa6;\n  local_var120 = 2000;\n  unaffected_r12 = (long *)0x1;\n  local_var1 = (long *)0x0;\n  long_ptr1 = argv;\n  do {\n    loop_var = (int)unaffected_r12;\n    undefined_ptr_ptr = (undefined **)(long)loop_var;\n    local_array = (long *)((long)undefined_ptr_ptr * 8);\n    param_ptr2 = long_ptr1;\n    if (*(char *)long_ptr1[(long)undefined_ptr_ptr] == '@') {\n      uint_var = (int)local_var120 - 1;\n      local_var120 = (ulong)uint_var;\n      if (uint_var == 0) {\n        long_var11 = *long_ptr1;\n        ptr_char1 = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_001044b1;\n      }\n      ptr_char1 = (char *)long_ptr1[(long)undefined_ptr_ptr] + 1;\n      index = get_stat(ptr_char1,&local_stat);\n      if (-1 < index) {\n        if ((local_stat.st_mode & 0xf000) == 0x4000) {\n          do {\n            long_var11 = *long_ptr1;\n            ptr_char1 = \"%s: error: @-file refers to a directory\\n\";\nLAB_001044b1:\n            fprintf(error_stream,ptr_char1,long_var11);\n            xexit(1);\n          } while( true );\n        }\n        file_stream = fopen(ptr_char1,\"r\");\n        if (file_stream != (FILE *)0x0) {\n          index = fseek(file_stream,0,2);\n          if (((index != -1) && (size_var1 = ftell(file_stream), size_var1 != 0xffffffffffffffff)) &&\n             (index = fseek(file_stream,0,0), index != -1)) {\n            local_ptr2 = (byte *)xmalloc(size_var1 + 1);\n            size_var2 = fread(local_ptr2,1,size_var1,file_stream);\n            if ((size_var1 == size_var2) || (index = ferror(file_stream), index == 0)) {\n              local_ptr2[size_var2] = 0;\n              byte_var3 = *local_ptr2;\n              byte_ptr3 = local_ptr2;\n              while( true ) {\n                if (byte_var3 == 0) goto LAB_001040fd;\n                if (((&_sch_istable)[(ulong)byte_var3 * 2] & 0x40) == 0) break;\n                byte_var3 = byte_ptr3[1];\n                byte_ptr3 = byte_ptr3 + 1;\n              }\n              size_var1 = strlen((char *)local_ptr2);\n              byte_ptr2 = (byte *)allocate_memory(size_var1 + 1);\n              src_ptr = (long *)0x0;\n              index = 0;\n              local_long2 = 0;\n              bool_var1 = false;\n              bool_var3 = false;\n              bool_var2 = false;\n              byte_ptr3 = local_ptr2;\n              do {\n                while (((&_sch_istable)[(ulong)*byte_ptr3 * 2] & 0x40) != 0) {\n                  byte_ptr3 = byte_ptr3 + 1;\n                }\n                if ((index == 0) || (index + -1 <= (int)local_long2)) {\n                  if (src_ptr == (long *)0x0) {\n                    index = 8;\n                    src_ptr = (long *)allocate_memory(0x40);\n                    param_ptr3 = src_ptr + local_long2;\n                    *param_ptr3 = 0;\n                  }\n                  else {\n                    index = index * 2;\n                    src_ptr = (long *)xrealloc(src_ptr,(long)index << 3);\n                    param_ptr3 = src_ptr + local_long2;\n                    *param_ptr3 = 0;\n                  }\n                }\n                else {\n                  param_ptr3 = src_ptr + local_long2;\n                }\n                byte_var3 = *byte_ptr3;\n                byte_ptr4 = byte_ptr2;\n                while (byte_var3 != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byte_var3 * 2] & 0x40) != 0) &&\n                       (!(bool)(bool_var3 | bool_var2 | bool_var1))) {\n                      bool_var2 = false;\n                      bool_var1 = false;\n                      bool_var3 = false;\n                      goto LAB_00103d4f;\n                    }\n                    if (!bool_var2) break;\n                    byte_ptr3 = byte_ptr3 + 1;\n                    *byte_ptr4 = byte_var3;\n                    byte_ptr4 = byte_ptr4 + 1;\n                    bool_var2 = false;\n                    byte_var3 = *byte_ptr3;\n                    if (byte_var3 == 0) goto LAB_00103d4f;\n                  }\n                  if (byte_var3 == 0x5c) {\n                    bool_var2 = true;\n                  }\n                  else if (bool_var3) {\n                    if (byte_var3 == 0x27) {\n                      bool_var3 = false;\n                    }\n                    else {\nLAB_00103ec8:\n                      *byte_ptr4 = byte_var3;\n                      byte_ptr4 = byte_ptr4 + 1;\n                    }\n                  }\n                  else if (bool_var1) {\n                    if (byte_var3 != 0x22) goto LAB_00103ec8;\n                    bool_var1 = false;\n                  }\n                  else if (byte_var3 == 0x27) {\n                    bool_var3 = true;\n                  }\n                  else {\n                    if (byte_var3 != 0x22) goto LAB_00103ec8;\n                    bool_var1 = true;\n                  }\n                  ptr1 = byte_ptr3 + 1;\n                  byte_ptr3 = byte_ptr3 + 1;\n                  byte_var3 = *ptr1;\n                }\nLAB_00103d4f:\n                *byte_ptr4 = 0;\n                long_var11 = xstrdup(byte_ptr2);\n                *param_ptr3 = long_var11;\n                src_ptr[local_long2 + 1] = 0;\n                byte_var3 = *byte_ptr3;\n                byte_var2 = (&_sch_istable)[(ulong)byte_var3 * 2];\n                while ((byte_var2 & 0x40) != 0) {\n                  byte_var3 = byte_ptr3[1];\n                  byte_ptr3 = byte_ptr3 + 1;\n                  byte_var2 = (&_sch_istable)[(ulong)byte_var3 * 2];\n                }\n                local_long2 = local_long2 + 1;\n                if (byte_var3 == 0) {\n                  free_memory(byte_ptr2);\n                  if (long_ptr1 == argv) goto LAB_0010411e;\n                  goto LAB_00103dea;\n                }\n              } while( true );\n            }\n            free_memory(local_ptr2);\n          }\n          fclose(file_stream);\n        }\n      }\n    }\n    if (argc <= loop_var + 1) {\nLAB_00103fa6:\n      DAT_00108373 = 0;\n      file_stream = (FILE *)0x0;\n      DAT_00108372 = 0;\n      undefined_ptr_ptr = &PTR_DAT_001081a0;\n      DAT_00108374 = 4;\n      DAT_00108371 = 0;\n      DAT_00108370 = '\\0';\n      DAT_00108368 = (long *)0x0;\n      DAT_00108360 = 's';\n      DAT_00108358 = (long *)0x0;\n      ptr_char1 = \"adfhHn:wot:e:T:s:U:Vv0123456789\";\nLAB_00103ff6:\n      while( true ) {\n        loop_var = (int)unaffected_r12;\n        index = getopt_long(argc,param_ptr2,ptr_char1);\n        if (index == -1) break;\n        long_ptr1 = (long *)ptr_char1;\n        switch(index) {\n        case 0x3f:\n          goto switchD_00104029_caseD_3f;\n        case 0x48:\n        case 0x68:\nswitchD_00104029_caseD_48:\n          print_strings_usage_001030c0(standard_output,0);\n          goto LAB_001044f5;\n        case 0x54:\nswitchD_00104201_caseD_54:\n          unaffected_r12 = (long *)&opt_argument;\n          DAT_00108368 = option_argument;\n          break;\n        case 0x55:\nswitchD_00104201_caseD_55:\n          unaffected_r12 = option_argument;\n          loop_var = strcmp((char *)option_argument,\"default\");\n          if ((loop_var == 0) || (loop_var = strcmp((char *)unaffected_r12,\"d\"), loop_var == 0)) {\n            DAT_00108350 = 0;\n          }\n          else {\n            loop_var = strcmp((char *)unaffected_r12,\"locale\");\n            if ((loop_var == 0) || (loop_var = strcmp((char *)unaffected_r12,\"l\"), loop_var == 0)) {\n              DAT_00108350 = 1;\n            }\n            else {\n              loop_var = strcmp((char *)unaffected_r12,\"escape\");\n              if ((loop_var == 0) || (loop_var = strcmp((char *)unaffected_r12,\"e\"), loop_var == 0)) {\n                DAT_00108350 = 2;\n              }\n              else {\n                loop_var = strcmp((char *)unaffected_r12,\"invalid\");\n                if ((loop_var == 0) || (loop_var = strcmp((char *)unaffected_r12,\"i\"), loop_var == 0)) {\n                  DAT_00108350 = 5;\n                }\n                else {\n                  loop_var = strcmp((char *)unaffected_r12,\"hex\");\n                  if ((loop_var == 0) || (loop_var = strcmp((char *)unaffected_r12,\"x\"), loop_var == 0)) {\n                    DAT_00108350 = 3;\n                  }\n                  else {\n                    loop_var = strcmp((char *)unaffected_r12,\"highlight\");\n                    if ((loop_var != 0) && (loop_var = strcmp((char *)unaffected_r12,\"h\"), loop_var != 0)) {\n                      undefined8_var = dcgettext(0,\"invalid argument to -U/--unicode: %s\",5);\n                      process_data_00104a60(undefined8_var);\n                      FUNC_001038b0();\n                      xexit(1);\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                      halt_bad_data();\n                    }\n                    DAT_00108350 = 4;\n                  }\n                }\n              }\n            }\n          }\n          break;\n        case 0x56:\n        case 0x76:\nswitchD_00104029_caseD_56:\n          printf(\"GNU %s %s\\n\",\"strings\",\"(GNU Binutils for Debian) 2.40\");\n          ptr_char1 = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n          printf(ptr_char1);\n          ptr_char1 = (char *)dcgettext(0,\n                                      \"This program is free_memory software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                      ,5);\n          printf(ptr_char1);\n                    \n          exit(0);\n        case 0x61:\n          goto switchD_00104029_caseD_61;\n        case 100:\nswitchD_00104029_caseD_64:\n          DAT_00108370 = '\\x01';\n          break;\n        case 0x65:\n          unaffected_r12 = (long *)&opt_argument;\n          loop_var = 0x109108;\n          if (*(char *)((long)option_argument + 1) != '\\0') goto switchD_00104029_caseD_3f;\n          DAT_00108360 = *(char *)option_argument;\n          index = getopt_long(argc,param_ptr2,ptr_char1);\n          if (index == -1) goto LAB_0010407f;\n          switch(index) {\n          case 0x3f:\n            goto switchD_00104029_caseD_3f;\n          case 0x48:\n          case 0x68:\n            goto switchD_00104029_caseD_48;\n          case 0x54:\n            goto switchD_00104201_caseD_54;\n          case 0x55:\n            goto switchD_00104201_caseD_55;\n          case 0x56:\n          case 0x76:\n            goto switchD_00104029_caseD_56;\n          case 0x61:\n            goto switchD_00104029_caseD_61;\n          case 100:\n            goto switchD_00104029_caseD_64;\n          case 0x65:\nswitchD_00104201_caseD_65:\n            if (*(char *)((long)option_argument + 1) != '\\0') goto switchD_00104029_caseD_3f;\n            DAT_00108360 = *(char *)option_argument;\n            index = getopt_long(argc,param_ptr2,ptr_char1);\n            if (index == -1) goto LAB_0010407f;\n            switch(index) {\n            case 0x3f:\n              goto switchD_00104029_caseD_3f;\n            default:\n              break;\n            case 0x48:\n            case 0x68:\n              goto switchD_00104029_caseD_48;\n            case 0x54:\n              goto switchD_00104201_caseD_54;\n            case 0x55:\n              goto switchD_00104201_caseD_55;\n            case 0x56:\n            case 0x76:\n              goto switchD_00104029_caseD_56;\n            case 0x61:\n              goto switchD_00104029_caseD_61;\n            case 100:\n              goto switchD_00104029_caseD_64;\n            case 0x65:\n              goto switchD_00104201_caseD_65;\n            case 0x66:\n              goto switchD_00104029_caseD_66;\n            case 0x6e:\n              goto switchD_00104201_caseD_6e;\n            case 0x6f:\n              goto switchD_00104029_caseD_6f;\n            case 0x73:\n              goto switchD_00104201_caseD_73;\n            case 0x74:\n              goto switchD_00104201_caseD_74;\n            case 0x77:\n              goto switchD_00104029_caseD_77;\n            }\n          case 0x66:\n            goto switchD_00104029_caseD_66;\n          case 0x6e:\n            goto switchD_00104201_caseD_6e;\n          case 0x6f:\n            goto switchD_00104029_caseD_6f;\n          case 0x73:\n            goto switchD_00104201_caseD_73;\n          case 0x74:\n            goto switchD_00104201_caseD_74;\n          case 0x77:\n            goto switchD_00104029_caseD_77;\n          }\n        default:\n          file_stream = (FILE *)(ulong)option_index;\n          break;\n        case 0x66:\nswitchD_00104029_caseD_66:\n          DAT_00108371 = 1;\n          break;\n        case 0x6e:\nswitchD_00104201_caseD_6e:\n          unaffected_r12 = (long *)&opt_argument;\n          ulong_var = strtoul((char *)option_argument,&local_str1,0);\n          DAT_00108374 = (int)ulong_var;\n          if ((local_str1 != (char *)0x0) && (long_ptr1 = option_argument, *local_str1 != '\\0')) {\nLAB_001042e6:\n            undefined8_var = dcgettext(0,\"invalid integer argument %s\",5);\n            process_data_00104a60(undefined8_var,long_ptr1);\n            goto switchD_00104201_caseD_73;\n          }\n          break;\n        case 0x6f:\nswitchD_00104029_caseD_6f:\n          DAT_00108372 = 1;\n          DAT_00108354 = 8;\n          break;\n        case 0x73:\nswitchD_00104201_caseD_73:\n          unaffected_r12 = (long *)&opt_argument;\n          DAT_00108358 = option_argument;\n          ptr_char1 = (char *)long_ptr1;\n          break;\n        case 0x74:\nswitchD_00104201_caseD_74:\n          unaffected_r12 = (long *)&opt_argument;\n          loop_var = 0x109108;\n          DAT_00108372 = 1;\n          if (*(char *)((long)option_argument + 1) != '\\0') goto switchD_00104029_caseD_3f;\n          char_var4 = *(char *)option_argument;\n          if (char_var4 == 'o') {\n            DAT_00108354 = 8;\n          }\n          else if (char_var4 == 'x') {\n            DAT_00108354 = 0x10;\n          }\n          else {\n            if (char_var4 != 'd') goto switchD_00104029_caseD_3f;\n            DAT_00108354 = 10;\n          }\n          break;\n        case 0x77:\n          goto switchD_00104029_caseD_77;\n        }\n      }\nLAB_0010407f:\n      if (DAT_00108350 != 0) {\n        DAT_00108360 = 'S';\n      }\n      if ((int)file_stream != 0) {\nLAB_001044f5:\n        ptr_char1 = (char *)(param_ptr2 + (long)(int)file_stream + -1);\n        ulong_var = strtoul((char *)(*(long *)ptr_char1 + 1),&local_str1,0);\n        DAT_00108374 = (int)ulong_var;\n        if ((local_str1 != (char *)0x0) && (*local_str1 != '\\0')) {\n          long_ptr1 = (long *)(*(long *)ptr_char1 + 1);\n          goto LAB_001042e6;\n        }\n      }\n      loop_var = (int)unaffected_r12;\n      if (DAT_00108374 == 0) {\n        undefined8_var = dcgettext(0,\"invalid minimum string length %d\",5);\n        process_data_00104a60(undefined8_var,0);\nswitchD_00104029_caseD_61:\n        DAT_00108370 = '\\0';\n        goto LAB_00103ff6;\n      }\n      if (0x31 < (byte)(DAT_00108360 + 0xbeU)) goto switchD_00104029_caseD_3f;\n      ulong_var = 1L << (DAT_00108360 + 0xbeU & 0x3f);\n      if ((ulong_var & 0x2000000020000) == 0) {\n        if ((ulong_var & 0x401) == 0) {\n          if ((ulong_var & 0x40100000000) == 0) goto switchD_00104029_caseD_3f;\n          DAT_0010834c = 2;\n        }\n        else {\n          DAT_0010834c = 4;\n        }\n      }\n      else {\n        DAT_0010834c = 1;\n      }\n      loop_var = bfd_init();\n      if (loop_var == 0x118) {\n        ptr_char1 = \"x86_64-pc-linux-gnu\";\n        uint_var = bfd_set_default_target(\"x86_64-pc-linux-gnu\");\n        if ((char)uint_var != '\\0') {\n          undefined_ptr_ptr = (undefined **)&opt_index;\n          if (argc <= (int)option_index) {\n            DAT_00108370 = 0;\n            fprintf_output_00103240(\"{standard input}\",standard_input,0,0,0);\n            return (FILE *)0x0;\n          }\n          ulong_var = 0;\n          file_stream = (FILE *)0x0;\n          long_ptr1 = (long *)(ulong)uint_var;\n          uint_var = option_index;\n          local_array = param_ptr2;\n          goto LAB_001043b8;\n        }\n        undefined4_var = bfd_get_error();\n        undefined_ptr_ptr = (undefined **)bfd_errmsg(undefined4_var);\n        undefined8_var = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        process_data_00104a60(undefined8_var,\"x86_64-pc-linux-gnu\",undefined_ptr_ptr);\n      }\n      undefined8_var = dcgettext(0,\"fatal error: libbfd ABI mismatch\",5);\n      process_data_00104a60(undefined8_var);\n      long_ptr1 = param_ptr2;\nLAB_0010462b:\n      str_var2 = \"Warning: \\'%s\\' is a directory\";\nLAB_00104637:\n      undefined8_var = dcgettext(0,str_var2,5);\n      process_data_00103910(undefined8_var,ptr_char1);\n      uint_var = 0;\n      do {\n        while( true ) {\n          ulong_var = (ulong)long_ptr1 & 0xffffffff;\n          file_stream = (FILE *)(ulong)((uint)file_stream | (uint_var ^ 1) & 0xff);\n          while( true ) {\n            loop_var = (int)ulong_var;\n            uint_var = *(uint *)undefined_ptr_ptr + 1;\n            *(uint *)undefined_ptr_ptr = uint_var;\n            if (argc <= (int)uint_var) {\n              param_ptr2 = long_ptr1;\n              if ((char)ulong_var != '\\0') {\n                return file_stream;\n              }\n              goto switchD_00104029_caseD_3f;\n            }\nLAB_001043b8:\n            ptr_char1 = (char *)local_array[(int)uint_var];\n            loop_var = strcmp(ptr_char1,\"-\");\n            if (loop_var != 0) break;\n            DAT_00108370 = '\\0';\n          }\n          loop_var = get_stat(ptr_char1,&local_stat);\n          if (loop_var < 0) break;\n          if ((local_stat.st_mode & 0xf000) == 0x4000) goto LAB_0010462b;\n          if ((DAT_00108370 == '\\0') ||\n             (param_ptr2 = (long *)bfd_openr(ptr_char1,DAT_00108368), param_ptr2 == (long *)0x0)) {\nLAB_00104416:\n            file_stream2 = fopen(ptr_char1,\"r\");\n            if (file_stream2 != (FILE *)0x0) {\n              fprintf_output_00103240(ptr_char1,file_stream2,0,0,0);\n              loop_var = fclose(file_stream2);\n              if (loop_var != -1) goto LAB_00104454;\n            }\n            fprintf(error_stream,\"%s: \",DAT_00108378);\n            perror(ptr_char1);\n            uint_var = 0;\n          }\n          else {\n            char_var4 = bfd_check_format(param_ptr2,1);\n            if (char_var4 == '\\0') {\n              bfd_close();\n              local_var1 = param_ptr2;\n              goto LAB_00104416;\n            }\n            undefined8_ptr = (undefined8 *)param_ptr2[0x12];\n            local_var1 = (long *)((ulong)param_ptr2 & 0xffffffffffffff00);\n            local_ptr2 = (byte *)concatenate44(local_ptr2._4_4_,argc);\n            for (; undefined8_ptr != (undefined8 *)0x0; undefined8_ptr = (undefined8 *)undefined8_ptr[1]) {\n              char_var4 = (char)local_var1;\n              if (((*(uint *)((long)undefined8_ptr + 0x24) & 0x103) == 0x103) &&\n                 (local_var120 = undefined8_ptr[8], local_var120 != 0)) {\n                char_var4 = bfd_malloc_and_get_section(param_ptr2,undefined8_ptr,&local_void_ptr);\n                if (char_var4 == '\\0') {\n                  undefined4_var = bfd_get_error();\n                  local_var120 = bfd_errmsg(undefined4_var);\n                  undefined8_var = *undefined8_ptr;\n                  string_var2 = dcgettext(0,\"%s: Reading section %s failed: %s\",5);\n                  process_data_00103910(string_var2,ptr_char1,undefined8_var);\n                  char_var4 = (char)local_var1;\n                }\n                else {\n                  fprintf_output_00103240(ptr_char1,0,undefined8_ptr[0x10],local_var120,local_void_ptr);\n                  free_memory(local_void_ptr);\n                }\n              }\n              local_var1 = (long *)concatenate71(local_var1._1_7_,char_var4);\n            }\n            long_ptr1 = (long *)((ulong)long_ptr1 & 0xff);\n            char_var4 = bfd_close(param_ptr2);\n            if (char_var4 == '\\0') {\n              loop_var = bfd_get_error();\n              if (loop_var == 0) {\n                undefined8_var = dcgettext(0,\"cause of error unknown\",5);\n                fflush(standard_output);\n              }\n              else {\n                undefined8_var = bfd_errmsg();\n                fflush(standard_output);\n              }\n              fprintf(error_stream,\"%s: %s: %s\\n\",DAT_00108378,ptr_char1,undefined8_var);\n              goto LAB_00104416;\n            }\n            bool_var3 = (char)local_var1 == '\\0';\n            if (bool_var3) goto LAB_00104416;\nLAB_00104454:\n            uint_var = (uint)long_ptr1;\n          }\n        }\n        int_ptr = _errno_location();\n        str_var2 = \"\\'%s\\': No such file\";\n        if (*int_ptr == 2) goto LAB_00104637;\n        str_var2 = strerror(*int_ptr);\n        undefined8_var = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        process_data_00103910(undefined8_var,ptr_char1,str_var2);\n        uint_var = 0;\n      } while( true );\n    }\n    uint_var = loop_var + 1;\n    local_var1 = unaffected_r12;\nLAB_00103eac:\n    unaffected_r12 = (long *)(ulong)uint_var;\n  } while( true );\nswitchD_00104029_caseD_77:\n  DAT_00108373 = 1;\n  goto LAB_00103ff6;\nswitchD_00104029_caseD_3f:\n  print_strings_usage_001030c0(error_stream);\nLAB_001040fd:\n  src_ptr = (long *)allocate_memory(8);\n  *src_ptr = 0;\n  if (param_ptr2 == argv) {\nLAB_0010411e:\n    if (*param_ptr2 == 0) {\n      index = 0;\n    }\n    else {\n      long_var11 = 1;\n      do {\n        index = (int)long_var11;\n        long_ptr1 = param_ptr2 + long_var11;\n        long_var11 = long_var11 + 1;\n      } while (*long_ptr1 != 0);\n    }\n    long_var2 = 0;\n    long_ptr1 = (long *)allocate_memory((long)(index + 1) << 3);\n    long_var11 = *param_ptr2;\n    while (long_var11 != 0) {\n      undefined8_var = xstrdup();\n      *(undefined8 *)((long)long_ptr1 + long_var2) = undefined8_var;\n      long_var2 = long_var2 + 8;\n      long_var11 = *(long *)((long)param_ptr2 + long_var2);\n    }\n    *(undefined8 *)((long)long_ptr1 + long_var2) = 0;\nLAB_00103dea:\n    param_ptr2 = long_ptr1;\n    if (*src_ptr != 0) {\n      long_var11 = 0;\n      do {\n        long_var11 = long_var11 + 1;\n      } while (src_ptr[long_var11] != 0);\n      local_size = long_var11 * 8;\n      index = argc;\n      goto LAB_00103e18;\n    }\n  }\n  long_var11 = 0;\n  local_size = 0;\n  index = argc;\nLAB_00103e18:\n  free_memory((void *)param_ptr2[(long)undefined_ptr_ptr]);\n  long_ptr1 = (long *)xrealloc(param_ptr2,(long_var11 + 1 + (long)index) * 8);\n  argc = index + -1 + (int)long_var11;\n  memmove(long_ptr1 + (long)((long)undefined_ptr_ptr + long_var11),(void *)((long)(long_ptr1 + 1) + (long)local_array),\n          (long)(index - loop_var) << 3);\n  memcpy((void *)((long)long_ptr1 + (long)local_array),src_ptr,local_size);\n  free_memory(src_ptr);\n  free_memory(local_ptr2);\n  fclose(file_stream);\n  uint_var = (int)local_var1 + 1;\n  unaffected_r12 = local_array;\n  param_ptr2 = long_ptr1;\n  local_array = src_ptr;\n  if ((int)uint_var < argc) goto LAB_00103eac;\n  goto LAB_00103fa6;\n}\n\n",
            "current_name": "extract_strings_from_file_00103aa0",
            "entrypoint": "0x00103aa0",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate44",
                "CONCAT71": "concatenate71",
                "FUN_00103aa0": "extract_strings_from_file_00103aa0",
                "__ptr": "byte_ptr2",
                "__src": "src_ptr",
                "__stream": "file_stream",
                "__stream_00": "file_stream2",
                "_errno_location": "errno_location",
                "_optarg": "option_argument",
                "_optind": "option_index",
                "_stderr": "error_stream",
                "_stdin": "standard_input",
                "_stdout": "standard_output",
                "bVar2": "byte_var2",
                "bVar25": "bool_var1",
                "bVar27": "bool_var2",
                "bVar28": "bool_var3",
                "bVar3": "byte_var3",
                "bfd_check_format": "check_bfd_format",
                "bfd_close": "close_bfd",
                "bfd_errmsg": "get_error_message",
                "bfd_get_error": "get_bfd_error",
                "bfd_init": "initialize_bfd",
                "bfd_malloc_and_get_section": "malloc_and_get_bfd_section",
                "bfd_openr": "open_bfd_read",
                "bfd_set_default_target": "set_default_target",
                "bfd_set_error_program_name": "set_error_program_name",
                "bindtextdomain": "bind_text_domain",
                "cVar4": "char_var4",
                "dcgettext": "get_locale_text",
                "fclose": "close_file",
                "ferror": "file_error",
                "fopen": "open_file",
                "fprintf": "print_formatted",
                "fread": "file_read",
                "free": "free_memory",
                "fseek": "file_seek",
                "ftell": "file_tell",
                "getopt_long": "get_long_option",
                "halt_baddata": "halt_bad_data",
                "iVar5": "index",
                "iVar7": "loop_var",
                "lVar11": "long_var11",
                "lVar22": "long_var2",
                "local_110": "local_long2",
                "local_118": "local_size",
                "local_120": "local_var120",
                "local_128": "local_ptr2",
                "local_138": "local_var1",
                "local_140": "local_array",
                "local_c8": "local_stat",
                "local_d0": "local_void_ptr",
                "local_d8": "local_str1",
                "malloc": "allocate_memory",
                "memcpy": "copy_memory",
                "memmove": "move_memory",
                "optarg": "opt_argument",
                "optind": "opt_index",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "ptr1",
                "pbVar19": "byte_ptr3",
                "pbVar23": "byte_ptr4",
                "pcVar20": "ptr_char1",
                "pcVar24": "str_var2",
                "perror": "print_error",
                "piVar15": "int_ptr",
                "plVar12": "long_ptr1",
                "plVar16": "param_ptr2",
                "plVar18": "param_ptr3",
                "ppuVar21": "undefined_ptr_ptr",
                "puVar26": "undefined8_ptr",
                "sVar10": "size_var2",
                "sVar9": "size_var1",
                "setlocale": "set_locale",
                "stat": "get_stat",
                "stderr": "standard_error",
                "stdout": "standard_output",
                "strcmp": "compare_string",
                "strlen": "string_length",
                "strtoul": "string_to_unsigned_long",
                "textdomain": "text_domain",
                "uVar13": "ulong_var",
                "uVar14": "undefined8_var",
                "uVar17": "string_var2",
                "uVar6": "uint_var",
                "uVar8": "undefined4_var",
                "unaff_R12": "unaffected_r12",
                "xexit": "exit_program",
                "xmalloc": "allocate_memory",
                "xmalloc_set_program_name": "set_program_name",
                "xrealloc": "reallocate_memory",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104a60": {
            "additional_data": {
                "FUNC_001038b0": {
                    "1": "reverse_bytes"
                },
                "FUN_00104a60": {
                    "1": "reverse_and_halt",
                    "17": "process_data",
                    "2": "extract_and_exit"
                },
                "halt_baddata": {
                    "1": "handle_bad_data"
                },
                "in_AL": {
                    "1": "condition_check",
                    "14": "flag",
                    "2": "input_flag",
                    "3": "is_true",
                    "5": "condition"
                },
                "local_18": {
                    "1": "input_var8",
                    "2": "input8",
                    "3": "input_8_copy",
                    "6": "input8_copy"
                },
                "local_28": {
                    "1": "copy_input_7",
                    "2": "input7",
                    "3": "input_7_copy",
                    "6": "input7_copy"
                },
                "local_38": {
                    "1": "copy_input_6",
                    "2": "input6",
                    "3": "input_6_copy",
                    "6": "input6_copy"
                },
                "local_48": {
                    "1": "input_var5",
                    "2": "input5",
                    "3": "temp5",
                    "6": "input5_copy"
                },
                "local_58": {
                    "1": "decoded_value_58",
                    "2": "input4",
                    "3": "input_4_copy",
                    "6": "input4_copy"
                },
                "local_68": {
                    "1": "non_zero_input3",
                    "2": "input3",
                    "3": "input_3_copy",
                    "6": "input3_copy"
                },
                "local_78": {
                    "1": "decoded_value_78",
                    "2": "input2",
                    "3": "input_2_copy",
                    "6": "input2_copy"
                },
                "local_88": {
                    "1": "decoded_value_88",
                    "2": "input1",
                    "3": "temp1",
                    "6": "input1_copy"
                },
                "local_90": {
                    "1": "local_data5",
                    "2": "param14",
                    "3": "data6"
                },
                "local_98": {
                    "1": "param5_copy",
                    "2": "value_5_copy",
                    "3": "data5"
                },
                "local_a0": {
                    "1": "local_var_3",
                    "2": "value_4_copy",
                    "3": "data4"
                },
                "local_a8": {
                    "1": "local_param11",
                    "2": "var2",
                    "3": "data3"
                },
                "local_b0": {
                    "1": "ptr2",
                    "2": "var1",
                    "3": "data2"
                },
                "local_b8": {
                    "1": "temp_array",
                    "2": "temp_buffer",
                    "3": "local_data",
                    "4": "buffer",
                    "8": "local_buffer"
                },
                "local_c8": {
                    "1": "local_buflen",
                    "12": "local_buffer",
                    "2": "local_array",
                    "6": "buffer"
                },
                "local_d0": {
                    "1": "stack_pointer",
                    "12": "buffer",
                    "2": "local_buffer",
                    "3": "buffer_ptr"
                },
                "local_d4": {
                    "1": "constant_0x30",
                    "2": "threshold",
                    "3": "buffer_size",
                    "4": "length",
                    "5": "constant"
                },
                "local_d8": {
                    "12": "size",
                    "2": "local_size",
                    "3": "count",
                    "4": "length",
                    "9": "buffer_size"
                },
                "param_1": {
                    "1": "init_param1",
                    "17": "input1",
                    "2": "arg1",
                    "6": "input_1"
                },
                "param_10": {
                    "1": "param_b",
                    "2": "data_2",
                    "4": "param10",
                    "5": "param2",
                    "7": "data2"
                },
                "param_11": {
                    "1": "param_c",
                    "2": "value_3",
                    "4": "param11",
                    "5": "param3",
                    "7": "data3"
                },
                "param_12": {
                    "1": "decoded_value_12",
                    "2": "value_4",
                    "4": "param12",
                    "5": "param4",
                    "7": "data4"
                },
                "param_13": {
                    "1": "value5",
                    "2": "value_5",
                    "4": "param13",
                    "5": "param5",
                    "7": "data5"
                },
                "param_14": {
                    "1": "task6",
                    "2": "data_6",
                    "4": "param14",
                    "5": "param6",
                    "7": "data6"
                },
                "param_2": {
                    "1": "decoded_value_2",
                    "17": "input2",
                    "2": "flag2",
                    "6": "input_2"
                },
                "param_3": {
                    "1": "input_param3",
                    "17": "input3",
                    "2": "flag3",
                    "6": "input_3"
                },
                "param_4": {
                    "1": "decoded_value_4",
                    "17": "input4",
                    "2": "arg4",
                    "6": "input_4"
                },
                "param_5": {
                    "1": "decoded_value_5",
                    "17": "input5",
                    "2": "arg5",
                    "6": "input_5"
                },
                "param_6": {
                    "1": "input_param6",
                    "17": "input6",
                    "2": "flag6",
                    "6": "input_6"
                },
                "param_7": {
                    "1": "init_param7",
                    "17": "input7",
                    "2": "flag7",
                    "6": "input_7"
                },
                "param_8": {
                    "1": "input_param8",
                    "17": "input8",
                    "2": "flag8",
                    "6": "input_8"
                },
                "param_9": {
                    "1": "task1",
                    "2": "data_1",
                    "4": "param9",
                    "5": "param1",
                    "7": "data1"
                },
                "xexit": {
                    "1": "terminate_program"
                }
            },
            "called": [
                "FUN_001038b0",
                "xexit"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nvoid process_data_00104a60(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 data1,undefined8 data2,undefined8 data3,undefined8 data4,\n                 undefined8 data5,undefined8 data6)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 constant;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_buffer [8];\n  undefined8 data2;\n  undefined8 data3;\n  undefined8 data4;\n  undefined8 data5;\n  undefined8 data6;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  undefined4 input5_copy;\n  undefined4 input6_copy;\n  undefined4 input7_copy;\n  undefined4 input8_copy;\n  \n  if (flag != '\\0') {\n    input1_copy = input1;\n    input2_copy = input2;\n    input3_copy = input3;\n    input4_copy = input4;\n    input5_copy = input5;\n    input6_copy = input6;\n    input7_copy = input7;\n    input8_copy = input8;\n  }\n  buffer = &stack0x00000008;\n  size = 8;\n  local_buffer = local_buffer;\n  constant = 0x30;\n  data2 = data2;\n  data3 = data3;\n  data4 = data4;\n  data5 = data5;\n  data6 = data6;\n  FUNC_001038b0(data1,&size);\n  xexit(1);\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  handle_bad_data();\n}\n\n",
            "current_name": "process_data_00104a60",
            "entrypoint": "0x00104a60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104a60": "process_data_00104a60",
                "halt_baddata": "handle_bad_data",
                "in_AL": "flag",
                "local_18": "input8_copy",
                "local_28": "input7_copy",
                "local_38": "input6_copy",
                "local_48": "input5_copy",
                "local_58": "input4_copy",
                "local_68": "input3_copy",
                "local_78": "input2_copy",
                "local_88": "input1_copy",
                "local_90": "data6",
                "local_98": "data5",
                "local_a0": "data4",
                "local_a8": "data3",
                "local_b0": "data2",
                "local_b8": "local_buffer",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "constant",
                "local_d8": "size",
                "param_1": "input1",
                "param_10": "data2",
                "param_11": "data3",
                "param_12": "data4",
                "param_13": "data5",
                "param_14": "data6",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "data1",
                "xexit": "terminate_program"
            },
            "skipped": false,
            "tags": []
        },
        "_DT_FINI": {
            "called": [],
            "calling": [],
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "current_name": "_DT_FINI",
            "entrypoint": "0x00104af4",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_DT_INIT": {
            "called": [
                "__gmon_start__"
            ],
            "calling": [],
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "current_name": "_DT_INIT",
            "entrypoint": "0x00102000",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_FINI_0": {
            "called": [
                "FUN_001039e0",
                "__cxa_finalize"
            ],
            "calling": [],
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_00108340 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00108188);\n  FUNC_001039e0();\n  DAT_00108340 = 1;\n  return;\n}\n\n",
            "current_name": "_FINI_0",
            "entrypoint": "0x00103a50",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_INIT_0": {
            "called": [
                "FUN_00103a10"
            ],
            "calling": [],
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00103a10();\n  return;\n}\n\n",
            "current_name": "_INIT_0",
            "entrypoint": "0x00103a90",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__cxa_finalize": {
            "called": [
                "__cxa_finalize"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "current_name": "__cxa_finalize",
            "entrypoint": "0x00102320",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__errno_location": {
            "called": [
                "__errno_location"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "current_name": "__errno_location",
            "entrypoint": "0x00102050",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__uflow": {
            "called": [
                "__uflow"
            ],
            "calling": [
                "FUN_00103520",
                "FUN_0010290e"
            ],
            "code": "\n\n\nint __uflow(_IO_FILE *param_1)\n\n{\n  int iVar1;\n  \n  iVar1 = __uflow(param_1);\n  return iVar1;\n}\n\n",
            "current_name": "__uflow",
            "entrypoint": "0x00102030",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_check_format": {
            "called": [
                "bfd_check_format"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "current_name": "bfd_check_format",
            "entrypoint": "0x00102300",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_close": {
            "called": [
                "bfd_close"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "current_name": "bfd_close",
            "entrypoint": "0x00102290",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_errmsg": {
            "called": [
                "bfd_errmsg"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "current_name": "bfd_errmsg",
            "entrypoint": "0x001022d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_error": {
            "called": [
                "bfd_get_error"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "current_name": "bfd_get_error",
            "entrypoint": "0x00102160",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_init": {
            "called": [
                "bfd_init"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "current_name": "bfd_init",
            "entrypoint": "0x001021b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_malloc_and_get_section": {
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "current_name": "bfd_malloc_and_get_section",
            "entrypoint": "0x001020b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openr": {
            "called": [
                "bfd_openr"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "current_name": "bfd_openr",
            "entrypoint": "0x001020c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_default_target": {
            "called": [
                "bfd_set_default_target"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "current_name": "bfd_set_default_target",
            "entrypoint": "0x00102080",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_error_program_name": {
            "called": [
                "bfd_set_error_program_name"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "current_name": "bfd_set_error_program_name",
            "entrypoint": "0x00102250",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_target_list": {
            "called": [
                "bfd_target_list"
            ],
            "calling": [
                "FUN_001030c0"
            ],
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "current_name": "bfd_target_list",
            "entrypoint": "0x00102150",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bindtextdomain": {
            "called": [
                "bindtextdomain"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "current_name": "bindtextdomain",
            "entrypoint": "0x001020e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "dcgettext": {
            "called": [
                "dcgettext"
            ],
            "calling": [
                "FUN_001030c0",
                "FUN_00103aa0"
            ],
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "current_name": "dcgettext",
            "entrypoint": "0x001020f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "entry": {
            "called": [
                "__libc_start_main",
                "FUN_00103aa0"
            ],
            "calling": [],
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(extract_strings_from_file_00103aa0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x001039b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "exit": {
            "called": [
                "exit"
            ],
            "calling": [
                "FUN_001030c0",
                "FUN_00103aa0"
            ],
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "current_name": "exit",
            "entrypoint": "0x001022e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fclose": {
            "called": [
                "fclose"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fclose",
            "entrypoint": "0x001020d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ferror": {
            "called": [
                "ferror"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "ferror",
            "entrypoint": "0x00102060",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fflush": {
            "called": [
                "fflush"
            ],
            "calling": [
                "FUN_001038b0",
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fflush",
            "entrypoint": "0x00102220",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fopen": {
            "called": [
                "fopen"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "current_name": "fopen",
            "entrypoint": "0x00102270",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fprintf": {
            "called": [
                "fprintf"
            ],
            "calling": [
                "FUN_001038b0",
                "FUN_001030c0",
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "current_name": "fprintf",
            "entrypoint": "0x001021e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fputc": {
            "called": [
                "fputc"
            ],
            "calling": [
                "FUN_001030c0"
            ],
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fputc",
            "entrypoint": "0x001021a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fputs": {
            "called": [
                "fputs"
            ],
            "calling": [
                "FUN_00103240",
                "FUN_00102b11",
                "FUN_0010259a"
            ],
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fputs",
            "entrypoint": "0x00102140",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fread": {
            "called": [
                "fread"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "current_name": "fread",
            "entrypoint": "0x00102090",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "free": {
            "called": [
                "free"
            ],
            "calling": [
                "FUN_001030c0",
                "FUN_00103240",
                "FUN_0010259a",
                "FUN_00103aa0"
            ],
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "current_name": "free",
            "entrypoint": "0x00102040",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fseek": {
            "called": [
                "fseek"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "current_name": "fseek",
            "entrypoint": "0x00102230",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ftell": {
            "called": [
                "ftell"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "current_name": "ftell",
            "entrypoint": "0x001021f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fwrite": {
            "called": [
                "fwrite"
            ],
            "calling": [
                "FUN_00103240",
                "FUN_0010293a"
            ],
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "current_name": "fwrite",
            "entrypoint": "0x001022f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getopt_long": {
            "called": [
                "getopt_long"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "current_name": "getopt_long",
            "entrypoint": "0x00102110",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "isatty": {
            "called": [
                "isatty"
            ],
            "calling": [
                "FUN_0010293a"
            ],
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "isatty",
            "entrypoint": "0x00102070",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memcpy": {
            "called": [
                "memcpy"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memcpy",
            "entrypoint": "0x00102210",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memmove": {
            "called": [
                "memmove"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memmove",
            "entrypoint": "0x00102260",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "perror": {
            "called": [
                "perror"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "current_name": "perror",
            "entrypoint": "0x001022a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "printf": {
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_00102853",
                "FUN_0010293a",
                "FUN_0010259a",
                "FUN_00103aa0",
                "FUN_0010286f"
            ],
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "current_name": "printf",
            "entrypoint": "0x00102120",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "putc": {
            "called": [
                "putc"
            ],
            "calling": [
                "FUN_001038b0",
                "FUN_00103240",
                "FUN_0010293a",
                "FUN_00102b11",
                "FUN_0010259a"
            ],
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "putc",
            "entrypoint": "0x001021d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "setlocale": {
            "called": [
                "setlocale"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "current_name": "setlocale",
            "entrypoint": "0x00102240",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "stat": {
            "called": [
                "stat"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "stat",
            "entrypoint": "0x00102200",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcmp": {
            "called": [
                "strcmp"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "strcmp",
            "entrypoint": "0x001021c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strerror": {
            "called": [
                "strerror"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "current_name": "strerror",
            "entrypoint": "0x00102310",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strlen": {
            "called": [
                "strlen"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "current_name": "strlen",
            "entrypoint": "0x00102100",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strtoul": {
            "called": [
                "strtoul"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "current_name": "strtoul",
            "entrypoint": "0x001022c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "textdomain": {
            "called": [
                "textdomain"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "current_name": "textdomain",
            "entrypoint": "0x001020a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "vfprintf": {
            "called": [
                "vfprintf"
            ],
            "calling": [
                "FUN_001038b0"
            ],
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "current_name": "vfprintf",
            "entrypoint": "0x001022b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xexit": {
            "called": [
                "xexit"
            ],
            "calling": [
                "FUN_00104a60",
                "FUN_00103aa0"
            ],
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "current_name": "xexit",
            "entrypoint": "0x00102280",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc": {
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_00103240",
                "FUN_00103aa0"
            ],
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "current_name": "xmalloc",
            "entrypoint": "0x00102170",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc_set_program_name": {
            "called": [
                "xmalloc_set_program_name"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "current_name": "xmalloc_set_program_name",
            "entrypoint": "0x00102180",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xrealloc": {
            "called": [
                "xrealloc"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "current_name": "xrealloc",
            "entrypoint": "0x00102130",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xstrdup": {
            "called": [
                "xstrdup"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "current_name": "xstrdup",
            "entrypoint": "0x00102190",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_00102020",
            "FUN_00102771",
            "FUN_001027e2",
            "FUN_0010282b",
            "FUN_0010286f",
            "FUN_001028b2",
            "FUN_0010290e",
            "FUN_0010293a",
            "FUN_001030c0",
            "FUN_001034fa",
            "FUN_00103510",
            "FUN_001038b0"
        ],
        [
            "FUN_00102853",
            "FUN_00103520",
            "FUN_00103810",
            "FUN_00103890",
            "FUN_00103910",
            "FUN_00104a60"
        ],
        [
            "FUN_00102b11",
            "FUN_001034d5"
        ],
        [
            "FUN_00102330",
            "FUN_0010259a",
            "FUN_00103240"
        ],
        [
            "FUN_00103aa0"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 150992
}