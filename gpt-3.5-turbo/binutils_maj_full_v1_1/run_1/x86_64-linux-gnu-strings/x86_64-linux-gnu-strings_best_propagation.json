{
    "functions": {
        "FUN_00102000": {
            "additional_data": {
                "": {
                    "2": ""
                },
                "FUN_00102000": {
                    "1": "initialize_global_monitor",
                    "10": "initialize_program",
                    "6": "initialize_monitoring"
                },
                "__gmon_start__": {
                    "1": "start_gmon",
                    "13": "start_monitoring",
                    "2": "initialize_gmon",
                    "3": "initialize_profiler"
                },
                "original_parameter_name_1": {
                    "1": "new_parameter_name_1"
                },
                "original_parameter_name_2": {
                    "1": "new_parameter_name_2"
                },
                "original_variable_name_1": {
                    "1": "new_variable_name_1"
                },
                "original_variable_name_2": {
                    "1": "new_variable_name_2"
                },
                "return": {
                    "1": ""
                },
                "void": {
                    "1": ""
                }
            },
            "called": [
                "FUN_00109120"
            ],
            "calling": [],
            "code": "\nvoid initialize_00102000(void)\n\n{\n  start_monitoring();\n  return;\n}\n\n",
            "current_name": "initialize_00102000",
            "entrypoint": "0x00102000",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102000": "initialize_00102000",
                "__gmon_start__": "start_monitoring"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102020": {
            "additional_data": {
                "*(code *)(undefined *)0x0": {
                    "1": "indirect_jump_function"
                },
                "0x0": {
                    "1": "jump_target"
                },
                "<original_function_name>": {
                    "1": "execute_indirect_call"
                },
                "FUN_00102020": {
                    "1": "execute_function_from_address",
                    "14": "execute_indirect_jump",
                    "2": "execute_function",
                    "4": "execute_indirect_function"
                },
                "PTR_0": {
                    "1": "function_pointer"
                },
                "PTR_00102020": {
                    "2": "function_pointer"
                },
                "PTR_undefined_0": {
                    "1": "indirect_pointer"
                },
                "code": {
                    "1": "indirect_function",
                    "3": "function_pointer"
                },
                "undefined": {
                    "1": "indirect_function_address",
                    "3": "target_address"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_indirect_jump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(function_pointer *)(target_address *)0x0)();\n  return;\n}\n\n",
            "current_name": "execute_indirect_jump_00102020",
            "entrypoint": "0x00102020",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020",
                "code": "function_pointer",
                "undefined": "target_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102030": {
            "called": [
                "FUN_00109000"
            ],
            "calling": [
                "FUN_0010290e",
                "FUN_00103520"
            ],
            "code": "\n\n\nint __uflow(_IO_FILE *param_1)\n\n{\n  int iVar1;\n  \n  iVar1 = __uflow(param_1);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102030",
            "entrypoint": "0x00102030",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102040": {
            "called": [
                "FUN_00109008"
            ],
            "calling": [
                "FUN_0010259a",
                "FUN_00103240",
                "FUN_00103aa0",
                "FUN_001030c0"
            ],
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "current_name": "FUN_00102040",
            "entrypoint": "0x00102040",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102050": {
            "called": [
                "FUN_00109018"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "current_name": "FUN_00102050",
            "entrypoint": "0x00102050",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102060": {
            "called": [
                "FUN_00109030"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102060",
            "entrypoint": "0x00102060",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102070": {
            "called": [
                "FUN_00109038"
            ],
            "calling": [
                "FUN_0010293a"
            ],
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102070",
            "entrypoint": "0x00102070",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102080": {
            "called": [
                "FUN_00109040"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "current_name": "FUN_00102080",
            "entrypoint": "0x00102080",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102090": {
            "called": [
                "FUN_00109048"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_00102090",
            "entrypoint": "0x00102090",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001020a0": {
            "called": [
                "FUN_00109058"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "current_name": "FUN_001020a0",
            "entrypoint": "0x001020a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001020b0": {
            "called": [
                "FUN_00109060"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "current_name": "FUN_001020b0",
            "entrypoint": "0x001020b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001020c0": {
            "called": [
                "FUN_00109068"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "current_name": "FUN_001020c0",
            "entrypoint": "0x001020c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001020d0": {
            "called": [
                "FUN_00109070"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001020d0",
            "entrypoint": "0x001020d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001020e0": {
            "called": [
                "FUN_00109080"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "current_name": "FUN_001020e0",
            "entrypoint": "0x001020e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001020f0": {
            "called": [
                "FUN_00109088"
            ],
            "calling": [
                "FUN_00103aa0",
                "FUN_001030c0"
            ],
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "current_name": "FUN_001020f0",
            "entrypoint": "0x001020f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102100": {
            "called": [
                "FUN_00109090"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_00102100",
            "entrypoint": "0x00102100",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102110": {
            "called": [
                "FUN_00109098"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "current_name": "FUN_00102110",
            "entrypoint": "0x00102110",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102120": {
            "called": [
                "FUN_001090a0"
            ],
            "calling": [
                "FUN_0010293a",
                "FUN_0010259a",
                "FUN_00102853",
                "FUN_00103aa0",
                "FUN_0010286f"
            ],
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102120",
            "entrypoint": "0x00102120",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102130": {
            "called": [
                "FUN_001090a8"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "current_name": "FUN_00102130",
            "entrypoint": "0x00102130",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102140": {
            "called": [
                "FUN_001090b0"
            ],
            "calling": [
                "FUN_0010259a",
                "FUN_00102b11",
                "FUN_00103240"
            ],
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102140",
            "entrypoint": "0x00102140",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102150": {
            "called": [
                "FUN_001090c0"
            ],
            "calling": [
                "FUN_001030c0"
            ],
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "current_name": "FUN_00102150",
            "entrypoint": "0x00102150",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102160": {
            "called": [
                "FUN_001090c8"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "current_name": "FUN_00102160",
            "entrypoint": "0x00102160",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102170": {
            "called": [
                "FUN_001090d0"
            ],
            "calling": [
                "FUN_00103240",
                "FUN_00103aa0"
            ],
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "current_name": "FUN_00102170",
            "entrypoint": "0x00102170",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102180": {
            "called": [
                "FUN_001090d8"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "current_name": "FUN_00102180",
            "entrypoint": "0x00102180",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102190": {
            "called": [
                "FUN_001090e0"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "current_name": "FUN_00102190",
            "entrypoint": "0x00102190",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001021a0": {
            "called": [
                "FUN_001090e8"
            ],
            "calling": [
                "FUN_001030c0"
            ],
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001021a0",
            "entrypoint": "0x001021a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001021b0": {
            "called": [
                "FUN_001090f0"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "current_name": "FUN_001021b0",
            "entrypoint": "0x001021b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001021c0": {
            "called": [
                "FUN_001090f8"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001021c0",
            "entrypoint": "0x001021c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001021d0": {
            "called": [
                "FUN_00109100"
            ],
            "calling": [
                "FUN_001038b0",
                "FUN_0010293a",
                "FUN_0010259a",
                "FUN_00102b11",
                "FUN_00103240"
            ],
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001021d0",
            "entrypoint": "0x001021d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001021e0": {
            "called": [
                "FUN_00109110"
            ],
            "calling": [
                "FUN_001038b0",
                "FUN_00103aa0",
                "FUN_001030c0"
            ],
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001021e0",
            "entrypoint": "0x001021e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001021f0": {
            "called": [
                "FUN_00109118"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "current_name": "FUN_001021f0",
            "entrypoint": "0x001021f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102200": {
            "called": [
                "FUN_00109128"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102200",
            "entrypoint": "0x00102200",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102210": {
            "called": [
                "FUN_00109130"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "FUN_00102210",
            "entrypoint": "0x00102210",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102220": {
            "called": [
                "FUN_00109138"
            ],
            "calling": [
                "FUN_001038b0",
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102220",
            "entrypoint": "0x00102220",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102230": {
            "called": [
                "FUN_00109140"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00102230",
            "entrypoint": "0x00102230",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102240": {
            "called": [
                "FUN_00109148"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00102240",
            "entrypoint": "0x00102240",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102250": {
            "called": [
                "FUN_00109150"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "current_name": "FUN_00102250",
            "entrypoint": "0x00102250",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102260": {
            "called": [
                "FUN_00109158"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "FUN_00102260",
            "entrypoint": "0x00102260",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102270": {
            "called": [
                "FUN_00109160"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "current_name": "FUN_00102270",
            "entrypoint": "0x00102270",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102280": {
            "called": [
                "FUN_00109168"
            ],
            "calling": [
                "FUN_00103aa0",
                "FUN_00104a60"
            ],
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "current_name": "FUN_00102280",
            "entrypoint": "0x00102280",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102290": {
            "called": [
                "FUN_00109170"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "current_name": "FUN_00102290",
            "entrypoint": "0x00102290",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001022a0": {
            "called": [
                "FUN_00109178"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "current_name": "FUN_001022a0",
            "entrypoint": "0x001022a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001022b0": {
            "called": [
                "FUN_00109180"
            ],
            "calling": [
                "FUN_001038b0"
            ],
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001022b0",
            "entrypoint": "0x001022b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001022c0": {
            "called": [
                "FUN_00109188"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "current_name": "FUN_001022c0",
            "entrypoint": "0x001022c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001022d0": {
            "called": [
                "FUN_00109190"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "current_name": "FUN_001022d0",
            "entrypoint": "0x001022d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001022e0": {
            "called": [
                "FUN_00109198"
            ],
            "calling": [
                "FUN_00103aa0",
                "FUN_001030c0"
            ],
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "current_name": "FUN_001022e0",
            "entrypoint": "0x001022e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001022f0": {
            "called": [
                "FUN_001091a0"
            ],
            "calling": [
                "FUN_0010293a",
                "FUN_00103240"
            ],
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_001022f0",
            "entrypoint": "0x001022f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102300": {
            "called": [
                "FUN_001091a8"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "current_name": "FUN_00102300",
            "entrypoint": "0x00102300",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102310": {
            "called": [
                "FUN_001091b8"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00102310",
            "entrypoint": "0x00102310",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102320": {
            "called": [
                "FUN_001091c8"
            ],
            "calling": [
                "FUN_00103a50"
            ],
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "current_name": "FUN_00102320",
            "entrypoint": "0x00102320",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00102330": {
            "additional_data": {
                "DAT_00108358": {
                    "1": "output_string2"
                },
                "DAT_00108360": {
                    "1": "flag1"
                },
                "DAT_00108371": {
                    "1": "flag3"
                },
                "DAT_00108372": {
                    "1": "flag_4"
                },
                "DAT_00108373": {
                    "1": "flag_2"
                },
                "DAT_00108374": {
                    "1": "max_size"
                },
                "FUN_00102330": {
                    "1": "print_output",
                    "2": "process_input",
                    "25": "print_formatted_output"
                },
                "LAB_00102381": {
                    "1": "print_char_4"
                },
                "LAB_001023bb": {
                    "1": "print_tabbed_character"
                },
                "LAB_001023f5": {
                    "1": "print_char_2"
                },
                "LAB_00102438": {
                    "1": "print_char"
                },
                "LAB_001033b3": {
                    "1": "get_character_and_increment_counter"
                },
                "LAB_00103400": {
                    "1": "print_output"
                },
                "LAB_0010348e": {
                    "1": "unget_part_character"
                },
                "LAB_001034be": {
                    "2": "end_function"
                },
                "_sch_istable": {
                    "1": "char_istable_ptr"
                },
                "_stdout": {
                    "1": "stdout_ptr",
                    "2": "standard_output"
                },
                "bVar4": {
                    "1": "is_counter_valid",
                    "2": "is_counter_less_than_threshold",
                    "3": "is_less",
                    "6": "is_less_than"
                },
                "code_r0x00102330": {
                    "1": "process_and_print_input"
                },
                "code_r0x001034d5": {
                    "2": "process_input"
                },
                "fputs": {
                    "1": "print_string"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "get_char": {
                    "1": "get_next_char"
                },
                "getchar": {
                    "1": "read_character"
                },
                "in_AX": {
                    "1": "input_char",
                    "2": "input_flag",
                    "5": "input_flags",
                    "9": "flags"
                },
                "in_R8D": {
                    "1": "index3",
                    "2": "loop_index",
                    "3": "index",
                    "7": "count",
                    "8": "counter"
                },
                "in_stack_00000010": {
                    "1": "input_string",
                    "2": "stack_param1",
                    "6": "format_string",
                    "9": "message"
                },
                "in_stack_00000038": {
                    "1": "input_stack2",
                    "14": "address",
                    "2": "stack_param2",
                    "3": "formatted_output"
                },
                "param_1": {
                    "1": "data",
                    "10": "input",
                    "2": "input_data",
                    "3": "input_value",
                    "4": "input_param",
                    "5": "input_char"
                },
                "print_formatted_output_001034fa": {
                    "1": "print_formatted_output"
                },
                "print_formatted_output_00103510": {
                    "1": "print_formatted_output"
                },
                "printf": {
                    "1": "print_formatted_output"
                },
                "process_input_001034d5": {
                    "10": "process_input"
                },
                "putc": {
                    "1": "print_formatted_output"
                },
                "putchar": {
                    "1": "print_character"
                },
                "uVar1": {
                    "1": "char1",
                    "12": "temp_var1",
                    "2": "temp1",
                    "4": "index"
                },
                "uVar2": {
                    "1": "temp_variable2",
                    "2": "current_index",
                    "5": "index",
                    "6": "temp_var2",
                    "8": "index1"
                },
                "uVar3": {
                    "1": "output_index",
                    "2": "index",
                    "5": "next_index",
                    "6": "temp_var3",
                    "8": "index2"
                },
                "unaff_R14": {
                    "1": "char_ptr",
                    "12": "output_buffer",
                    "4": "output",
                    "6": "buffer",
                    "7": "output_string"
                },
                "unaff_R15": {
                    "1": "address_ptr",
                    "13": "filename",
                    "6": "filename_address"
                },
                "unget_part_char": {
                    "1": "unget_partial_char"
                },
                "ungetc": {
                    "1": "unread_character"
                }
            },
            "called": [
                "FUN_001034d5"
            ],
            "calling": [
                "FUN_0010259a"
            ],
            "code": "\n\n\nvoid print_formatted_output_00102330(ulong input)\n\n{\n  uint temp_var1;\n  ushort flags;\n  ulong index1;\n  ulong index2;\n  uint counter;\n  char *output_buffer;\n  undefined8 filename;\n  bool is_less_than;\n  undefined8 message;\n  undefined8 address;\n  \nprint_formatted_output_00102330:\n  if ((DAT_00108360 != 'S') || ((long)input < 0x80)) {\n    if (DAT_00108373 == '\\0') goto process_input;\n    if ((flags & 0x40) == 0) {\n      process_input();\n      return;\n    }\n  }\nprint_output:\n  index1 = (ulong)counter;\n  counter = counter + 1;\n  index2 = (ulong)counter;\n  is_less_than = counter < DAT_00108374;\n  output_buffer[index1] = (char)input;\n  if (is_less_than) goto continue_loop;\n  do {\n    if (DAT_00108371 != '\\0') {\n      print_formatted_output_00102330(\"%s: \",message);\n    }\n    if (DAT_00108372 == '\\0') {\n      output_buffer[index2] = '\\0';\n      print_formatted_output_00102330(output_buffer,standard_output);\n    }\n    else {\n      print_filename_and_address_part_0(filename);\n      output_buffer[index2] = '\\0';\n      print_formatted_output_00102330(output_buffer,standard_output);\n    }\n    while (index2 = get_next_char(), index2 != 0xffffffffffffffff) {\n      if (0xff < index2) {\nunget_char:\n        unget_partial_char();\n        break;\n      }\n      if (index2 == 9) {\nprint_char:\n        print_formatted_output_00102330((int)index2,standard_output);\n      }\n      else {\n        if ((*(ushort *)(&char_table + index2 * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)index2 < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&char_table + index2 * 2) & 0x40) == 0))))\n          goto unget_char;\n          goto print_char;\n        }\n        print_formatted_output_00102330((int)index2,standard_output);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      print_formatted_output_00102330(10,standard_output);\n    }\n    else {\n      print_formatted_output_00102330(DAT_00108358,standard_output);\n    }\n    while (index2 = (ulong)DAT_00108374, filename = address, DAT_00108374 != 0) {\n      index2 = get_next_char();\n      temp_var1 = DAT_00108374;\n      if (index2 == 0xffffffffffffffff) goto end_function;\n      if (index2 < 0x100) {\n        if (index2 == 9) {\nprint_char_2:\n          *output_buffer = (char)index2;\n          if (temp_var1 < 2) {\n            print_formatted_output_00102330();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&char_table + index2 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index2 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&char_table + index2 * 2) & 0x40) == 0))))\n            goto process_input;\n            goto print_char_2;\n          }\n          *output_buffer = (char)index2;\n          if (temp_var1 < 2) {\n            index2 = 1;\n            break;\n          }\n        }\n        index2 = get_next_char();\n        temp_var1 = DAT_00108374;\n        if (index2 == 0xffffffffffffffff) goto end_function;\n        if (0xff < index2) goto process_input;\n        if (index2 == 9) {\nprint_char_3:\n          output_buffer[1] = (char)index2;\n          if (temp_var1 < 3) {\n            print_formatted_output_00102330();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&char_table + index2 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index2 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&char_table + index2 * 2) & 0x40) == 0))))\n            goto process_input;\n            goto print_char_3;\n          }\n          output_buffer[1] = (char)index2;\n          if (temp_var1 < 3) {\n            index2 = 2;\n            break;\n          }\n        }\n        index2 = get_next_char();\n        temp_var1 = DAT_00108374;\n        if (index2 == 0xffffffffffffffff) goto end_function;\n        if (0xff < index2) goto process_input;\n        if (index2 == 9) {\nprint_char_4:\n          output_buffer[2] = (char)index2;\n        }\n        else {\n          if ((*(ushort *)(&char_table + index2 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index2 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&char_table + index2 * 2) & 0x40) == 0))))\n            goto process_input;\n            goto print_char_4;\n          }\n          output_buffer[2] = (char)index2;\n        }\n        if (temp_var1 < 4) {\n          index2 = 3;\n          break;\n        }\n        counter = 3;\ncontinue_loop:\n        input = get_next_char();\n        if (input == 0xffffffffffffffff) {\nend_function:\n          deallocate_memory(output_buffer);\n          return;\n        }\n        if (input < 0x100) {\n          if ((input == 9) ||\n             (flags = *(ushort *)(&char_table + input * 2), (flags & 0x10) != 0))\n          goto print_output;\n          goto print_formatted_output_00102330;\n        }\n      }\nprocess_input:\n      unget_partial_char();\n    }\n  } while( true );\n}\n\n",
            "current_name": "print_formatted_output_00102330",
            "entrypoint": "0x00102330",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102330": "print_formatted_output_00102330",
                "LAB_00102381": "print_char_4",
                "LAB_001023bb": "print_char_3",
                "LAB_001023f5": "print_char_2",
                "LAB_00102438": "print_char",
                "LAB_001033b3": "continue_loop",
                "LAB_00103400": "print_output",
                "LAB_0010348e": "unget_char",
                "LAB_001034be": "end_function",
                "_sch_istable": "char_table",
                "_stdout": "standard_output",
                "bVar4": "is_less_than",
                "code_r0x00102330": "print_formatted_output",
                "code_r0x001034d5": "process_input",
                "fputs": "print_formatted_output",
                "free": "deallocate_memory",
                "get_char": "get_next_char",
                "in_AX": "flags",
                "in_R8D": "counter",
                "in_stack_00000010": "message",
                "in_stack_00000038": "address",
                "param_1": "input",
                "print_formatted_output_001034fa": "print_formatted_output",
                "print_formatted_output_00103510": "print_formatted_output",
                "printf": "print_formatted_output",
                "process_input_001034d5": "process_input",
                "putc": "print_formatted_output",
                "uVar1": "temp_var1",
                "uVar2": "index1",
                "uVar3": "index2",
                "unaff_R14": "output_buffer",
                "unaff_R15": "filename",
                "unget_part_char": "unget_partial_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010259a": {
            "additional_data": {
                "DAT_00108358": {
                    "1": "newline",
                    "2": "newline_string"
                },
                "DAT_00108360": {
                    "1": "option",
                    "2": "data_type"
                },
                "DAT_00108371": {
                    "1": "print_additional_data"
                },
                "DAT_00108372": {
                    "1": "use_address_part",
                    "2": "is_filename"
                },
                "DAT_00108373": {
                    "1": "is_special_character_mode"
                },
                "DAT_00108374": {
                    "1": "flag5",
                    "2": "num_chars"
                },
                "FUN_00102330": {
                    "1": "process_data",
                    "2": "print_filename_and_address_part_0",
                    "6": "decode_data"
                },
                "FUN_00102330()": {
                    "1": "fun_00102330()"
                },
                "FUN_0010259a": {
                    "1": "print_text_and_decode_data",
                    "2": "print_file_contents",
                    "3": "print_data",
                    "5": "print_formatted_output"
                },
                "F_ReverseCode": {
                    "1": "improve_and_print_output"
                },
                "LAB_00102381": {
                    "1": "write_char_3"
                },
                "LAB_001023bb": {
                    "1": "write_char_2"
                },
                "LAB_001023f5": {
                    "1": "write_char_1"
                },
                "LAB_00102438": {
                    "1": "tab_character"
                },
                "LAB_0010348e": {
                    "1": "end_of_input_string"
                },
                "LAB_001034be": {
                    "1": "end_of_output_string"
                },
                "PRINT_SCH_IS_CONTROL": {
                    "1": "is_control_character"
                },
                "PRINT_SCH_IS_GRAPH": {
                    "1": "is_graphic_character"
                },
                "PUTS_STRING": {
                    "1": "print_string"
                },
                "STDIO_PUTCHAR": {
                    "1": "print_character"
                },
                "_sch_istable": {
                    "1": "table",
                    "11": "character_table"
                },
                "_stdout": {
                    "10": "standard_output"
                },
                "bVar3": {
                    "1": "is_last_char",
                    "2": "is_valid_char",
                    "4": "is_special_char"
                },
                "buffer": {
                    "1": "input_buffer",
                    "2": "buffer"
                },
                "counter": {
                    "1": "counter_ptr",
                    "2": "counter"
                },
                "data_ptr": {
                    "2": "data_ptr",
                    "3": "data_pointer"
                },
                "decode_data_00103520": {
                    "1": "decode_data_file",
                    "16": "decode_data"
                },
                "decode_data_00103520()": {
                    "1": "decode_data()"
                },
                "file": {
                    "3": "input_file"
                },
                "fputs": {
                    "1": "write_string",
                    "2": "print_string"
                },
                "free": {
                    "2": "deallocate_memory"
                },
                "get_char": {
                    "1": "read_current_character",
                    "2": "get_character",
                    "4": "read_char"
                },
                "get_char()": {
                    "1": "read_char()"
                },
                "getc": {
                    "1": "read_character"
                },
                "in_R8": {
                    "1": "index2",
                    "2": "counter",
                    "4": "index"
                },
                "modifier": {
                    "1": "update_modifier",
                    "2": "modifier"
                },
                "num2": {
                    "1": "operation_number",
                    "2": "num2"
                },
                "param_11": {
                    "1": "suffix",
                    "2": "filename",
                    "7": "address"
                },
                "param_7": {
                    "1": "ch",
                    "2": "input_length",
                    "3": "index"
                },
                "param_8": {
                    "1": "header",
                    "3": "input_string",
                    "5": "file_name",
                    "9": "filename"
                },
                "print_filename_and_address_part_0": {
                    "1": "print_address_header",
                    "5": "print_filename_and_address"
                },
                "print_filename_and_address_part_0()": {
                    "1": "print_filename_and_address()"
                },
                "print_formatted_output_001034fa": {
                    "1": "print_formatted_output_single_char",
                    "2": "print_formatted_output1",
                    "8": "print_formatted_output_1"
                },
                "print_formatted_output_001034fa()": {
                    "1": "print_single_char_output()"
                },
                "print_formatted_output_00103510": {
                    "1": "print_formatted_output_case2",
                    "2": "print_formatted_output2",
                    "8": "print_formatted_output_2"
                },
                "print_formatted_output_00103510()": {
                    "1": "print_triple_char_output()"
                },
                "print_formatted_output_0010356d": {
                    "1": "print_formatted_output_3"
                },
                "print_formatted_value_0010286f": {
                    "15": "print_formatted_value",
                    "2": "print_value"
                },
                "print_formatted_value_0010286f()": {
                    "1": "print_formatted_value()"
                },
                "print_type_of_file_001033eb": {
                    "1": "print_type_of_file"
                },
                "process_input_001034d5": {
                    "1": "process_single_input",
                    "15": "process_input"
                },
                "process_input_001034d5()": {
                    "1": "process_single_char_input()"
                },
                "put_char": {
                    "1": "put_character"
                },
                "put_formatted_output": {
                    "1": "put_formatted_output"
                },
                "putc": {
                    "1": "put_character",
                    "3": "write_char"
                },
                "putchar": {
                    "1": "print_char"
                },
                "remaining_bytes": {
                    "1": "num_bytes",
                    "2": "remaining_bytes"
                },
                "result": {
                    "1": "result_ptr",
                    "3": "result"
                },
                "uVar1": {
                    "1": "temp_var",
                    "2": "counter",
                    "6": "char_value"
                },
                "uVar2": {
                    "1": "char_read",
                    "2": "char",
                    "3": "character"
                },
                "unaff_R14": {
                    "1": "file_buffer",
                    "11": "output_buffer",
                    "2": "output",
                    "3": "buffer"
                },
                "unaff_R15": {
                    "1": "file_name_desc",
                    "2": "filename_and_address",
                    "3": "output_format",
                    "4": "address",
                    "5": "filename"
                },
                "unget_part_char": {
                    "1": "unread_character",
                    "2": "unget_partial_character",
                    "3": "unread_char"
                },
                "unget_part_char()": {
                    "1": "unget_char()"
                },
                "update_data_00103810": {
                    "17": "update_data"
                },
                "update_data_00103810()": {
                    "1": "update_data()"
                }
            },
            "called": [
                "FUN_001034fa",
                "FUN_00102040",
                "FUN_00102140",
                "FUN_001034d5",
                "FUN_00103510",
                "FUN_00102330",
                "FUN_001021d0",
                "FUN_0010259a",
                "FUN_00102120",
                "FUN_00103520",
                "FUN_00103810",
                "FUN_0010286f"
            ],
            "calling": [
                "FUN_0010259a"
            ],
            "code": "\n\n\nvoid print_formatted_output_0010259a(void)\n\n{\n  uint char_value;\n  ulong character;\n  ulong index;\n  char *output_buffer;\n  undefined8 filename;\n  bool is_special_char;\n  uint file_size;\n  undefined8 filename;\n  undefined8 address;\n  \n  do {\n    file_size = (uint)index;\n    printf(\"%s: \",filename);\n    index = (ulong)file_size;\n    do {\n      if (DAT_00108372 == '\\0') {\n        output_buffer[index] = '\\0';\n        print_string(output_buffer,standard_output);\n      }\n      else {\n        file_size = (uint)index;\n        print_filename_and_address(filename);\n        output_buffer[file_size] = '\\0';\n        print_string(output_buffer,standard_output);\n      }\n      while (character = read_char(), character != 0xffffffffffffffff) {\n        if (0xff < character) {\nend_of_input_string:\n          unget_char();\n          break;\n        }\n        if (character == 9) {\ntab_character:\n          write_char((int)character,standard_output);\n        }\n        else {\n          if ((*(ushort *)(&character_table + character * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)character < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + character * 2) & 0x40) == 0))))\n            goto end_of_input_string;\n            goto tab_character;\n          }\n          write_char((int)character,standard_output);\n        }\n      }\n      if (DAT_00108358 == (char *)0x0) {\n        write_char(10,standard_output);\n      }\n      else {\n        print_string(DAT_00108358,standard_output);\n      }\n      while (index = (ulong)DAT_00108374, DAT_00108374 != 0) {\n        character = read_char();\n        char_value = DAT_00108374;\n        if (character == 0xffffffffffffffff) goto end_of_output_string;\n        if (character < 0x100) {\n          if (character == 9) {\nwrite_char_1:\n            *output_buffer = (char)character;\n            if (char_value < 2) {\n              print_single_char_output();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&character_table + character * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)character < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + character * 2) & 0x40) == 0))))\n              goto code_r0x001034d5;\n              goto write_char_1;\n            }\n            *output_buffer = (char)character;\n            if (char_value < 2) {\n              index = 1;\n              break;\n            }\n          }\n          character = read_char();\n          char_value = DAT_00108374;\n          if (character == 0xffffffffffffffff) goto end_of_output_string;\n          if (0xff < character) goto code_r0x001034d5;\n          if (character == 9) {\nwrite_char_2:\n            output_buffer[1] = (char)character;\n            if (char_value < 3) {\n              print_triple_char_output();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&character_table + character * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)character < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + character * 2) & 0x40) == 0))))\n              goto code_r0x001034d5;\n              goto write_char_2;\n            }\n            output_buffer[1] = (char)character;\n            if (char_value < 3) {\n              index = 2;\n              break;\n            }\n          }\n          character = read_char();\n          char_value = DAT_00108374;\n          if (character == 0xffffffffffffffff) {\nend_of_output_string:\n            deallocate_memory(output_buffer);\n            return;\n          }\n          if (0xff < character) goto code_r0x001034d5;\n          if (character == 9) {\nwrite_char_3:\n            output_buffer[2] = (char)character;\n          }\n          else {\n            if ((*(ushort *)(&character_table + character * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)character < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + character * 2) & 0x40) == 0))))\n              goto code_r0x001034d5;\n              goto write_char_3;\n            }\n            output_buffer[2] = (char)character;\n          }\n          if (3 < char_value) {\n            index = 3;\n            do {\n              file_size = (uint)index;\n              character = read_char();\n              if (character == 0xffffffffffffffff) goto end_of_output_string;\n              if (0xff < character) goto code_r0x001034d5;\n              if (((character != 9) && ((*(ushort *)(&character_table + character * 2) & 0x10) == 0)) &&\n                 ((DAT_00108360 != 'S' || ((long)character < 0x80)))) {\n                if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n                if ((*(ushort *)(&character_table + character * 2) & 0x40) == 0) {\n                  process_single_char_input();\n                  return;\n                }\n              }\n              index = (ulong)(file_size + 1);\n              is_special_char = DAT_00108374 <= file_size + 1;\n              output_buffer[file_size] = (char)character;\n              if (is_special_char) goto joined_r0x0010341b;\n            } while( true );\n          }\n          index = 3;\n          break;\n        }\ncode_r0x001034d5:\n        unget_char();\n      }\njoined_r0x0010341b:\n      filename = address;\n    } while (DAT_00108371 == '\\0');\n  } while( true );\n}\n\n",
            "current_name": "print_formatted_output_0010259a",
            "entrypoint": "0x0010259a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010259a": "print_formatted_output_0010259a",
                "LAB_00102381": "write_char_3",
                "LAB_001023bb": "write_char_2",
                "LAB_001023f5": "write_char_1",
                "LAB_00102438": "tab_character",
                "LAB_0010348e": "end_of_input_string",
                "LAB_001034be": "end_of_output_string",
                "_sch_istable": "character_table",
                "_stdout": "standard_output",
                "bVar3": "is_special_char",
                "file": "input_file",
                "fputs": "print_string",
                "free": "deallocate_memory",
                "get_char": "read_char",
                "get_char()": "read_char()",
                "in_R8": "index",
                "param_11": "address",
                "param_7": "file_size",
                "param_8": "filename",
                "print_filename_and_address_part_0": "print_filename_and_address",
                "print_formatted_output_001034fa": "print_formatted_output_1",
                "print_formatted_output_001034fa()": "print_single_char_output()",
                "print_formatted_output_00103510": "print_formatted_output_2",
                "print_formatted_output_00103510()": "print_triple_char_output()",
                "process_input_001034d5": "process_input",
                "process_input_001034d5()": "process_single_char_input()",
                "putc": "write_char",
                "uVar1": "char_value",
                "uVar2": "character",
                "unaff_R14": "output_buffer",
                "unaff_R15": "filename",
                "unget_part_char": "unread_char",
                "unget_part_char()": "unget_char()"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102771": {
            "additional_data": {
                "(uint)(unaff_RBX << 8) & 0xff0000": {
                    "1": "bitmask1"
                },
                "(uint)(unaff_RBX >> 8) & 0xff00": {
                    "1": "end_bits"
                },
                "(ulong)((uint)(unaff_RBX << 8) & 0xff0000)": {
                    "1": "shift_left"
                },
                "(ulong)((uint)(unaff_RBX >> 8) & 0xff00)": {
                    "1": "shift_right"
                },
                "(unaff_RBX & 0xff) << 0x18": {
                    "1": "shifted_left"
                },
                "0x18": {
                    "1": "shift"
                },
                "0xff": {
                    "1": "mask"
                },
                "<new_variable_name_1>": {
                    "1": "<original_variable_name_1>"
                },
                "<new_variable_name_2>": {
                    "1": "<original_variable_name_2>"
                },
                "<original_function_name>": {
                    "1": "reverse_byte_order"
                },
                "FUN_00102771": {
                    "1": "extracted_bits",
                    "13": "reverse_bits",
                    "2": "rearrange_bits",
                    "4": "reverse_bytes",
                    "8": "reverse_byte_order"
                },
                "input": {
                    "1": "input"
                },
                "uint": {
                    "1": "unsigned_int"
                },
                "unaff_RAX": {
                    "1": "output"
                },
                "unaff_RBX": {
                    "1": "original_number",
                    "19": "input",
                    "2": "original_value",
                    "8": "input_value"
                },
                "unaff_RBX & 0xff": {
                    "1": "lower_byte"
                },
                "unaff_RBX << 8": {
                    "1": "shifted_left"
                },
                "unaff_RBX >> 0x18 & 0xff": {
                    "1": "first_byte",
                    "2": "shifted_right"
                },
                "unaff_RBX >> 0x18 & 0xff | (unaff_RBX & 0xff) << 0x18": {
                    "2": "reversed_bits"
                },
                "unaff_RBX >> 0x18 & 0xff | (unaff_RBX & 0xff) << 0x18 |\n   (ulong)((uint)(unaff_RBX << 8) & 0xff0000) |\n   (ulong)((uint)(unaff_RBX >> 8) & 0xff00)": {
                    "1": "reversed_number"
                },
                "unaff_RBX >> 0x18 & 0xff | (unaff_RBX & 0xff) << 0x18 | (ulong)((uint)(unaff_RBX << 8) & 0xff0000) | (ulong)((uint)(unaff_RBX >> 8) & 0xff00)": {
                    "1": "reversed_value"
                },
                "unaff_RCX": {
                    "1": "shifted_byte"
                },
                "unaff_RDI": {
                    "1": "shifted_high_byte"
                },
                "unaff_RSI": {
                    "1": "shifted_word"
                }
            },
            "called": [],
            "calling": [
                "FUN_00103520"
            ],
            "code": "\nulong reverse_bits_00102771(void)\n\n{\n  ulong input;\n  \n  return input >> 0x18 & 0xff |\n         (input & 0xff) << 0x18 | (ulong)((unsigned_int)(input << 8) & 0xff0000) |\n         (ulong)((unsigned_int)(input >> 8) & 0xff00);\n}\n\n",
            "current_name": "reverse_bits_00102771",
            "entrypoint": "0x00102771",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102771": "reverse_bits_00102771",
                "uint": "unsigned_int",
                "unaff_RBX": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001027e2": {
            "additional_data": {
                "FUN_001027e2": {
                    "1": "update_and_add_values",
                    "2": "update_parameters_and_add",
                    "3": "calculate_sum_and_increment",
                    "8": "calculate_sum"
                },
                "in_RAX": {
                    "1": "counter",
                    "3": "ptr_value",
                    "5": "pointer",
                    "6": "temp_ptr"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "input_value_1",
                    "4": "value_1",
                    "5": "input_1",
                    "6": "num1"
                },
                "param_2": {
                    "1": "second_operand",
                    "2": "input_value_2",
                    "4": "value_2",
                    "5": "input_2",
                    "6": "num2"
                },
                "param_3": {
                    "1": "factor",
                    "2": "c",
                    "3": "condition",
                    "4": "flag",
                    "5": "constant",
                    "8": "modifier"
                },
                "param_4": {
                    "1": "output_pointer",
                    "23": "result",
                    "4": "output"
                }
            },
            "called": [],
            "calling": [
                "FUN_00103810"
            ],
            "code": "\nvoid calculate_sum_001027e2(int num1,int num2,long modifier,long *result)\n\n{\n  int *temp_ptr;\n  \n  *result = *result + (1 - modifier);\n  *temp_ptr = num1 + num2;\n  return;\n}\n\n",
            "current_name": "calculate_sum_001027e2",
            "entrypoint": "0x001027e2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001027e2": "calculate_sum_001027e2",
                "in_RAX": "temp_ptr",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "modifier",
                "param_4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010282b": {
            "additional_data": {
                "*in_RAX": {
                    "1": "set_value_at_pointer"
                },
                "*in_RCX": {
                    "1": "write_address"
                },
                "DAT_00108348": {
                    "1": "extracted_value1",
                    "3": "byte1"
                },
                "DAT_00108349": {
                    "1": "extracted_value3",
                    "2": "byte2"
                },
                "DAT_0010834a": {
                    "1": "highest_byte",
                    "2": "byte3"
                },
                "FUN_0010282b": {
                    "1": "set_byte_values",
                    "2": "initialize_pointers",
                    "3": "initialize_variables",
                    "9": "initialize_data"
                },
                "NULL": {
                    "1": "3"
                },
                "in_RAX": {
                    "1": "output_ptr",
                    "2": "memory_pointer",
                    "3": "value_pointer",
                    "4": "output_pointer",
                    "7": "result_pointer"
                },
                "in_RCX": {
                    "1": "pointer2",
                    "10": "data_pointer",
                    "2": "source",
                    "4": "output_pointer"
                },
                "inputPtr": {
                    "1": "input_pointer"
                },
                "outputPtr": {
                    "1": "output_pointer"
                },
                "unaff_RBX": {
                    "1": "value_to_set",
                    "10": "input_value",
                    "2": "source_data",
                    "3": "input_data",
                    "4": "value",
                    "5": "register_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_00103810"
            ],
            "code": "\nvoid initialize_data_0010282b(void)\n\n{\n  undefined4 *result_pointer;\n  undefined8 *data_pointer;\n  undefined8 input_value;\n  \n  DAT_00108348 = (undefined)((ulong)input_value >> 8);\n  DAT_0010834a = (undefined)((ulong)input_value >> 0x18);\n  DAT_00108349 = (undefined)((ulong)input_value >> 0x10);\n  *result_pointer = 3;\n  *data_pointer = &DAT_00108348;\n  return;\n}\n\n",
            "current_name": "initialize_data_0010282b",
            "entrypoint": "0x0010282b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010282b": "initialize_data_0010282b",
                "in_RAX": "result_pointer",
                "in_RCX": "data_pointer",
                "unaff_RBX": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102853": {
            "additional_data": {
                "DAT_00108372": {
                    "3": "flag"
                },
                "FUN_00102853": {
                    "1": "print_with_filename_address",
                    "2": "print_filename_if_flag_set",
                    "3": "print_filename_if_not_null"
                },
                "FUN_0010286f": {
                    "5": "print_filename_and_address",
                    "6": "print_filename_and_address_part_0"
                },
                "fn_called_0010286f": {
                    "1": "print_filename_and_address_part_0"
                },
                "param_1": {
                    "1": "input_string",
                    "11": "filename",
                    "15": "message",
                    "3": "file_name"
                },
                "print_filename_and_address_part_0": {
                    "1": "print_address",
                    "11": "print_filename_and_address",
                    "2": "print_file_info"
                }
            },
            "called": [
                "FUN_00102120",
                "FUN_0010286f"
            ],
            "calling": [
                "FUN_00103890"
            ],
            "code": "\nvoid print_filename_if_not_null_00102853(undefined8 message)\n\n{\n  printf(\"%s: \",message);\n  if (DAT_00108372 == '\\0') {\n    return;\n  }\n  print_filename_and_address();\n  return;\n}\n\n",
            "current_name": "print_filename_if_not_null_00102853",
            "entrypoint": "0x00102853",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102853": "print_filename_if_not_null_00102853",
                "param_1": "message",
                "print_filename_and_address_part_0": "print_filename_and_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010286f": {
            "additional_data": {
                "%7ld": {
                    "2": "decimal_format"
                },
                "%7ld ": {
                    "1": "decimal_format"
                },
                "%7lo": {
                    "2": "octal_format"
                },
                "%7lo ": {
                    "1": "octal_format"
                },
                "%7lx": {
                    "2": "hexadecimal_format"
                },
                "%7lx ": {
                    "1": "hexadecimal_format"
                },
                ": %7lx : ": {
                    "1": "hex_format"
                },
                "DAT_00108354": {
                    "1": "number_format",
                    "2": "format_code",
                    "6": "format_type"
                },
                "FUN_0010286f": {
                    "13": "print_formatted_number",
                    "18": "print_formatted_value"
                },
                "len_dec": {
                    "1": "decimal_length"
                },
                "len_hex": {
                    "1": "hexadecimal_length"
                },
                "len_oct": {
                    "1": "octal_length"
                },
                "lo": {
                    "1": "octal"
                },
                "lx": {
                    "1": "hexadecimal"
                },
                "param_1": {
                    "13": "number",
                    "18": "value"
                },
                "printf": {
                    "1": "output_formatted_number",
                    "15": "print",
                    "2": "print_formatted_string",
                    "3": "print_formatted_output",
                    "5": "formatted_print"
                },
                "printf format for decimal": {
                    "1": "decimal_format"
                },
                "printf format for hexadecimal": {
                    "1": "hexadecimal_format"
                },
                "printf format for octal": {
                    "1": "octal_format"
                },
                "printf_format_decimal": {
                    "1": "print_decimal_format"
                },
                "printf_format_hexadecimal": {
                    "1": "print_hexadecimal_format"
                },
                "printf_format_octal": {
                    "1": "print_octal_format"
                }
            },
            "called": [
                "FUN_00102120"
            ],
            "calling": [
                "FUN_0010259a",
                "FUN_00102853"
            ],
            "code": "\nvoid print_formatted_value_0010286f(undefined8 value)\n\n{\n  if (DAT_00108354 == 10) {\n    print(\"decimal_format \",value);\n    return;\n  }\n  if (DAT_00108354 != 0x10) {\n    if (DAT_00108354 == 8) {\n      print(\"octal_format \",value);\n      return;\n    }\n    return;\n  }\n  print(\"hexadecimal_format \",value);\n  return;\n}\n\n",
            "current_name": "print_formatted_value_0010286f",
            "entrypoint": "0x0010286f",
            "imported": false,
            "improved": true,
            "renaming": {
                "%7ld": "decimal_format",
                "%7lo": "octal_format",
                "%7lx": "hexadecimal_format",
                "FUN_0010286f": "print_formatted_value_0010286f",
                "lo": "octal",
                "lx": "hexadecimal",
                "param_1": "value",
                "printf": "print"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001028b2": {
            "additional_data": {
                "FUN_001028b2": {
                    "1": "parse_unicode_character",
                    "2": "parse_header",
                    "3": "decode_length",
                    "8": "check_byte_sequence"
                },
                "bVar1": {
                    "2": "byte_value",
                    "20": "first_byte",
                    "5": "current_byte"
                },
                "lVar2": {
                    "1": "matching_length",
                    "2": "offset",
                    "20": "result"
                },
                "param_1": {
                    "1": "header",
                    "12": "byte_sequence",
                    "2": "buffer",
                    "4": "data"
                },
                "param_2": {
                    "1": "header_length",
                    "2": "input_length",
                    "9": "sequence_length"
                }
            },
            "called": [],
            "calling": [
                "FUN_00103240"
            ],
            "code": "\nlong check_byte_sequence_001028b2(byte *byte_sequence,long length)\n\n{\n  byte first_byte;\n  long result;\n  \n  first_byte = *byte_sequence;\n  if ((0xbf < first_byte) && (length != 1)) {\n    result = 0;\n    if ((byte_sequence[1] & 0xc0) == 0x80) {\n      if ((first_byte & 0x20) == 0) {\n        return 2;\n      }\n      if ((length != 2) && ((byte_sequence[2] & 0xc0) == 0x80)) {\n        if ((first_byte & 0x10) == 0) {\n          result = 3;\n        }\n        else {\n          result = 0;\n          if (length != 3) {\n            return (ulong)((byte_sequence[3] & 0xc0) == 0x80) << 2;\n          }\n        }\n      }\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "check_byte_sequence_001028b2",
            "entrypoint": "0x001028b2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001028b2": "check_byte_sequence_001028b2",
                "bVar1": "first_byte",
                "lVar2": "result",
                "param_1": "byte_sequence",
                "param_2": "length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010290e": {
            "additional_data": {
                "FUN_0010290e": {
                    "1": "get_byte_from_file",
                    "12": "read_byte_from_file",
                    "2": "read_byte_from_buffer",
                    "3": "read_byte",
                    "5": "read_next_byte"
                },
                "_IO_FILE": {
                    "1": "stream",
                    "4": "file"
                },
                "param_1": {
                    "1": "file_pointer",
                    "2": "file_stream",
                    "23": "file"
                },
                "param_2": {
                    "1": "buffer_offset",
                    "2": "offset",
                    "23": "position",
                    "3": "file_position"
                },
                "param_3": {
                    "1": "bytes_remaining",
                    "2": "remaining",
                    "24": "remaining_bytes"
                },
                "param_4": {
                    "1": "read_count",
                    "2": "read_errors",
                    "4": "counter",
                    "6": "bytes_read"
                },
                "pbVar1": {
                    "1": "buffer_ptr",
                    "10": "byte_ptr",
                    "4": "read_ptr",
                    "9": "byte_pointer"
                },
                "uVar2": {
                    "1": "decremented_byte_counter",
                    "2": "byte_value",
                    "23": "result"
                }
            },
            "called": [
                "FUN_00102030"
            ],
            "calling": [
                "FUN_00102b11"
            ],
            "code": "\nuint read_byte_from_file_0010290e(file *file,long position,uint *remaining_bytes,int *bytes_read)\n\n{\n  byte *byte_ptr;\n  uint result;\n  \n  if (*remaining_bytes != 0) {\n    result = *remaining_bytes - 1;\n    *remaining_bytes = result;\n    return (uint)*(byte *)(position + (ulong)result);\n  }\n  *bytes_read = *bytes_read + 1;\n  byte_ptr = (byte *)file->_IO_read_ptr;\n  if (file->_IO_read_end <= byte_ptr) {\n    result = __uflow(file);\n    return result;\n  }\n  file->_IO_read_ptr = (char *)(byte_ptr + 1);\n  return (uint)*byte_ptr;\n}\n\n",
            "current_name": "read_byte_from_file_0010290e",
            "entrypoint": "0x0010290e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010290e": "read_byte_from_file_0010290e",
                "_IO_FILE": "file",
                "param_1": "file",
                "param_2": "position",
                "param_3": "remaining_bytes",
                "param_4": "bytes_read",
                "pbVar1": "byte_ptr",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010293a": {
            "additional_data": {
                "DAT_00108350": {
                    "2": "display_type"
                },
                "FUN_0010293a": {
                    "1": "print_unicode_escape_sequence",
                    "19": "display_unicode",
                    "3": "display_unicode_character"
                },
                "_stderr": {
                    "2": "standard_error"
                },
                "_stdout": {
                    "2": "standard_output"
                },
                "bVar1": {
                    "1": "first_bit_mask",
                    "2": "first_four_bits",
                    "3": "first_two_bits",
                    "6": "first_nibble",
                    "8": "first_byte"
                },
                "iVar3": {
                    "1": "is_interactive",
                    "11": "is_tty",
                    "14": "is_terminal"
                },
                "param_1": {
                    "1": "input_buffer",
                    "2": "input_bytes",
                    "4": "buffer",
                    "6": "input",
                    "7": "data"
                },
                "pbVar6": {
                    "1": "end_of_data",
                    "11": "end_ptr",
                    "2": "current_byte",
                    "3": "end_of_buffer"
                },
                "uVar2": {
                    "1": "second_byte_value",
                    "17": "second_byte",
                    "2": "second_nibble",
                    "3": "second_char"
                },
                "uVar4": {
                    "1": "character_count",
                    "2": "display_length",
                    "3": "output_size",
                    "4": "offset",
                    "5": "byte_count"
                },
                "uVar5": {
                    "1": "third_character",
                    "13": "first_byte",
                    "2": "second_char",
                    "6": "third_byte"
                }
            },
            "called": [
                "FUN_00102070",
                "FUN_001021d0",
                "FUN_00102120",
                "FUN_001022f0"
            ],
            "calling": [
                "FUN_00102b11",
                "FUN_00103240"
            ],
            "code": "\n\n\nuint display_unicode_0010293a(byte *data)\n\n{\n  byte first_byte;\n  uint second_byte;\n  int is_terminal;\n  uint byte_count;\n  uint first_byte;\n  byte *end_ptr;\n  \n  byte_count = 2;\n  first_byte = *data & 0x30;\n  if ((first_byte != 0x10) && (byte_count = 3, first_byte != 0x20)) {\n    byte_count = (-(uint)(first_byte == 0) & 0xfffffffe) + 4;\n  }\n  if (DAT_00108350 == 3) {\n    end_ptr = data + byte_count;\n    putc(0x3c,standard_output);\n    printf(\"0x\");\n    do {\n      first_byte = *data;\n      data = data + 1;\n      printf(\"%02x\",(ulong)first_byte);\n    } while (end_ptr != data);\n    putc(0x3e,standard_output);\n    return byte_count;\n  }\n  if (DAT_00108350 < 4) {\n    if (DAT_00108350 == 1) {\n      printf(\"%.1s\",data);\n      return byte_count;\n    }\n    if (DAT_00108350 == 2) {\nLAB_001029cd:\n      second_byte = (uint)data[1];\n      first_byte = (uint)*data;\n      if (byte_count == 3) {\n        printf(\"\\u%02x%02x\",(ulong)((first_byte & 0xf) << 4 | (int)second_byte >> 2 & 0xfU),\n               (ulong)((second_byte & 3) << 6 | data[2] & 0x3f));\n      }\n      else if (byte_count == 4) {\n        printf(\"\\u%02x%02x%02x\",(ulong)((first_byte & 7) << 6 | (int)second_byte >> 2 & 0xfU),\n               (ulong)((second_byte & 3) << 6 | (int)(uint)data[2] >> 2 & 0xfU),\n               (ulong)((data[2] & 3) << 6 | data[3] & 0x3f));\n      }\n      else {\n        printf(\"\\u%02x%02x\",(ulong)((int)(uint)*data >> 2 & 7),\n               (ulong)((first_byte & 3) << 6 | data[1] & 0x3f));\n      }\n      if (DAT_00108350 != 4) {\n        return byte_count;\n      }\n      is_terminal = isatty(1);\n      if (is_terminal == 0) {\n        return byte_count;\n      }\n      printf(\"\\x1b[0m\");\n      return byte_count;\n    }\n  }\n  else if (DAT_00108350 == 4) {\n    is_terminal = isatty(1);\n    if (is_terminal != 0) {\n      printf(\"\\x1b[31;47m\");\n    }\n    goto LAB_001029cd;\n  }\n  fwrite(\"ICE: unexpected unicode display type\\n\",1,0x25,standard_error);\n  return byte_count;\n}\n\n",
            "current_name": "display_unicode_0010293a",
            "entrypoint": "0x0010293a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010293a": "display_unicode_0010293a",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "bVar1": "first_byte",
                "iVar3": "is_terminal",
                "param_1": "data",
                "pbVar6": "end_ptr",
                "uVar2": "second_byte",
                "uVar4": "byte_count",
                "uVar5": "first_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102b11": {
            "additional_data": {
                "DAT_00108350": {
                    "1": "sch_character3"
                },
                "DAT_00108358": {
                    "1": "debug_info"
                },
                "DAT_00108360": {
                    "1": "sch_character"
                },
                "DAT_00108373": {
                    "1": "sch_character2"
                },
                "DAT_00108374": {
                    "1": "max_char_count"
                },
                "FUN_00102b11": {
                    "1": "process_unicode_chars",
                    "2": "process_text",
                    "3": "process_unicode_bytes",
                    "5": "process_unicode_data",
                    "9": "process_unicode_string"
                },
                "_sch_istable": {
                    "1": "sch_table"
                },
                "iVar4": {
                    "1": "temp_value",
                    "11": "result",
                    "2": "read_result",
                    "3": "num_bytes",
                    "4": "byte_count"
                },
                "local_39": {
                    "1": "utf8_byte",
                    "2": "fourth_byte_utf8",
                    "4": "fourth_byte",
                    "5": "byte4"
                },
                "local_3a": {
                    "1": "utf8_byte",
                    "2": "third_byte_utf8",
                    "4": "third_byte",
                    "5": "byte3"
                },
                "local_3b": {
                    "1": "utf8_byte",
                    "2": "second_byte_utf8",
                    "4": "second_byte",
                    "6": "byte2"
                },
                "local_3c": {
                    "1": "utf8_byte",
                    "5": "byte1",
                    "6": "first_byte"
                },
                "local_40": {
                    "1": "position",
                    "14": "bytes_read",
                    "2": "read_bytes",
                    "3": "remaining_bytes"
                },
                "local_4c": {
                    "1": "bytes_read_info",
                    "11": "remaining_bytes",
                    "2": "bytes_read"
                },
                "local_80": {
                    "1": "character_position",
                    "2": "last_address",
                    "3": "last_offset",
                    "4": "last_position",
                    "6": "start_offset"
                },
                "param_1": {
                    "1": "file_pointer",
                    "10": "file",
                    "3": "file_name",
                    "4": "file_address",
                    "7": "filename"
                },
                "param_2": {
                    "1": "offset",
                    "16": "file_offset",
                    "2": "file_position",
                    "8": "position"
                },
                "param_3": {
                    "1": "input_buffer",
                    "3": "unicode_data",
                    "6": "file_data",
                    "7": "data"
                },
                "param_4": {
                    "1": "position",
                    "2": "buffer_offset",
                    "3": "data_length",
                    "4": "file_size",
                    "5": "data_size"
                },
                "param_5": {
                    "1": "max_bytes_to_read",
                    "14": "remaining_bytes",
                    "3": "max_bytes"
                },
                "param_6": {
                    "1": "output_data",
                    "29": "output_buffer"
                },
                "uVar1": {
                    "1": "u_byte",
                    "18": "byte_value",
                    "2": "temp_byte",
                    "4": "byte1"
                },
                "uVar10": {
                    "1": "ch",
                    "2": "byte_value",
                    "3": "current_byte"
                },
                "uVar2": {
                    "1": "byte_read",
                    "3": "byte2",
                    "4": "current_byte",
                    "9": "unicode_byte"
                },
                "uVar3": {
                    "1": "utf8_char",
                    "2": "unicode_byte",
                    "3": "byte3",
                    "4": "next_byte",
                    "5": "second_byte"
                },
                "uVar4": {
                    "1": "unicode_byte3"
                },
                "uVar5": {
                    "1": "output_offset",
                    "2": "output_index",
                    "4": "byte_index",
                    "5": "index"
                },
                "uVar6": {
                    "1": "index",
                    "18": "output_index",
                    "2": "output_offset"
                },
                "uVar7": {
                    "1": "byte_value",
                    "2": "byte4",
                    "4": "second_byte",
                    "7": "byte1"
                },
                "uVar8": {
                    "1": "byte_value",
                    "2": "byte3",
                    "4": "third_byte",
                    "6": "byte2"
                },
                "uVar9": {
                    "1": "unicode_string_length",
                    "2": "character_count",
                    "3": "counter",
                    "5": "char_count",
                    "6": "count"
                }
            },
            "called": [
                "FUN_00102140",
                "FUN_0010290e",
                "FUN_0010293a",
                "FUN_00103890",
                "FUN_001021d0",
                "FUN_00102b11"
            ],
            "calling": [
                "FUN_00102b11",
                "FUN_00103240"
            ],
            "code": "\n\n\nvoid process_unicode_string_00102b11(undefined8 file,long file_offset,undefined8 data,long data_size,uint remaining_bytes,\n                 long output_buffer)\n\n{\n  undefined byte_value;\n  uint unicode_byte;\n  uint second_byte;\n  int result;\n  uint index;\n  ulong output_index;\n  undefined byte1;\n  undefined byte2;\n  uint count;\n  undefined current_byte;\n  ulong start_offset;\n  uint remaining_bytes [3];\n  uint bytes_read;\n  byte first_byte;\n  byte byte2;\n  byte byte3;\n  byte byte4;\n  \n  count = 0;\n  bytes_read = 0;\n  start_offset = 0;\n  output_index = 0;\n  remaining_bytes[0] = remaining_bytes;\n  unicode_byte = 0;\n  while (index = (uint)output_index, count < DAT_00108374) {\n    unicode_byte = get_unicode_byte(data,data_size,remaining_bytes,&bytes_read);\n    if (unicode_byte == 0xffffffff) break;\n    if (unicode_byte < 0x100) {\n      current_byte = (undefined)unicode_byte;\n      if (unicode_byte == 9) {\n        if (count == 0) {\n          start_offset = (ulong)(bytes_read - 1);\n        }\nLAB_00102c09:\n        count = count + 1;\n        *(undefined *)(output_buffer + output_index) = current_byte;\n        output_index = (ulong)(index + 1);\n      }\n      else {\n        if ((*(ushort *)(&sch_table + (long)(int)unicode_byte * 2) & 0x10) == 0) {\n          if ((DAT_00108360 != 'S') || ((int)unicode_byte < 0x80)) {\n            if ((DAT_00108373 == '\\0') ||\n               ((*(ushort *)(&sch_table + (long)(int)unicode_byte * 2) & 0x40) == 0)) goto LAB_00102b96;\n            goto LAB_00102bf3;\n          }\n          if (count == 0) {\n            start_offset = (ulong)(bytes_read - 1);\n          }\n        }\n        else {\nLAB_00102bf3:\n          if (count == 0) {\n            start_offset = (ulong)(bytes_read - 1);\n          }\n          if ((int)unicode_byte < 0x7f) goto LAB_00102c09;\n        }\n        if ((int)unicode_byte < 0xc0) goto LAB_00102b96;\n        second_byte = get_unicode_byte(data,data_size,remaining_bytes,&bytes_read);\n        if (second_byte == 0xffffffff) {\nLAB_00102dee:\n          unicode_byte = 0xffffffff;\n          break;\n        }\n        byte1 = (undefined)second_byte;\n        if ((second_byte & 0xc0) == 0x80) {\n          if ((unicode_byte & 0x20) == 0) {\n            if (DAT_00108350 == 5) goto LAB_00102c67;\n            count = count + 1;\n            *(undefined *)(output_buffer + output_index) = current_byte;\n            *(undefined *)(output_buffer + (ulong)(index + 1)) = byte1;\n            output_index = (ulong)(index + 2);\n            unicode_byte = second_byte;\n          }\n          else {\n            second_byte = get_unicode_byte(data,data_size,remaining_bytes,&bytes_read);\n            if (second_byte == 0xffffffff) goto LAB_00102dee;\n            byte2 = (undefined)second_byte;\n            if ((second_byte & 0xc0) == 0x80) {\n              if ((unicode_byte & 0x10) == 0) {\n                if (DAT_00108350 == 5) goto LAB_00102ce5;\n                count = count + 1;\n                *(undefined *)(output_buffer + output_index) = current_byte;\n                output_index = (ulong)(index + 3);\n                *(undefined *)(output_buffer + (ulong)(index + 1)) = byte1;\n                *(undefined *)(output_buffer + (ulong)(index + 2)) = byte2;\n                unicode_byte = second_byte;\n              }\n              else {\n                unicode_byte = get_unicode_byte(data,data_size,remaining_bytes,&bytes_read);\n                if (unicode_byte == 0xffffffff) goto LAB_00102dee;\n                byte_value = (undefined)unicode_byte;\n                if ((unicode_byte & 0xc0) == 0x80) {\n                  if (DAT_00108350 == 5) {\n                    *(undefined *)(data_size + (ulong)remaining_bytes[0]) = byte_value;\n                    *(undefined *)(data_size + (ulong)(remaining_bytes[0] + 1)) = byte1;\n                    *(undefined *)(data_size + (ulong)(remaining_bytes[0] + 2)) = byte2;\n                    goto LAB_00102db9;\n                  }\n                  count = count + 1;\n                  *(undefined *)(output_buffer + output_index) = current_byte;\n                  *(undefined *)(output_buffer + (ulong)(index + 1)) = byte1;\n                  output_index = (ulong)(index + 4);\n                  *(undefined *)(output_buffer + (ulong)(index + 2)) = byte2;\n                  *(undefined *)(output_buffer + (ulong)(index + 3)) = byte_value;\n                }\n                else {\n                  *(undefined *)(data_size + (ulong)remaining_bytes[0]) = byte_value;\n                  *(undefined *)(data_size + (ulong)(remaining_bytes[0] + 1)) = byte2;\n                  *(undefined *)(data_size + (ulong)(remaining_bytes[0] + 2)) = byte1;\nLAB_00102db9:\n                  remaining_bytes[0] = remaining_bytes[0] + 3;\n                  output_index = 0;\n                  count = 0;\n                }\n              }\n            }\n            else {\nLAB_00102ce5:\n              output_index = 0;\n              count = 0;\n              *(undefined *)(data_size + (ulong)remaining_bytes[0]) = byte2;\n              *(undefined *)(data_size + (ulong)(remaining_bytes[0] + 1)) = byte1;\n              remaining_bytes[0] = remaining_bytes[0] + 2;\n              unicode_byte = second_byte;\n            }\n          }\n        }\n        else {\nLAB_00102c67:\n          count = 0;\n          *(undefined *)(data_size + (ulong)remaining_bytes[0]) = byte1;\n          output_index = 0;\n          remaining_bytes[0] = remaining_bytes[0] + 1;\n          unicode_byte = second_byte;\n        }\n      }\n    }\n    else {\nLAB_00102b96:\n      count = 0;\n      output_index = 0;\n    }\n  }\n  if (count < DAT_00108374) {\n    if (unicode_byte != 0xffffffff) {\nLAB_0010308d:\n      process_unicode_string_00102b11(file,(ulong)bytes_read + file_offset,data,data_size,remaining_bytes[0],output_buffer);\n    }\n  }\n  else {\n    unicode_byte = 0;\n    print_filename_and_address(file,start_offset + file_offset);\n    while (unicode_byte < index) {\n      output_index = (ulong)unicode_byte;\n      if (*(byte *)(output_index + output_buffer) < 0x7f) {\n        unicode_byte = unicode_byte + 1;\n        putc((uint)*(byte *)(output_index + output_buffer),_stdout);\n      }\n      else {\n        result = display_utf8_char();\n        unicode_byte = unicode_byte + result;\n      }\n    }\n    while( true ) {\n      unicode_byte = get_unicode_byte(data,data_size,remaining_bytes,&bytes_read);\n      if (unicode_byte == 0xffffffff) break;\n      if (0xff < unicode_byte) {\nLAB_00103049:\n        if (DAT_00108358 == (char *)0x0) {\n          putc(10,_stdout);\n        }\n        else {\n          fputs(DAT_00108358,_stdout);\n        }\n        goto LAB_0010308d;\n      }\n      if (unicode_byte == 9) {\nLAB_00102ed4:\n        putc(unicode_byte,_stdout);\n      }\n      else {\n        if ((*(ushort *)(&sch_table + (long)(int)unicode_byte * 2) & 0x10) == 0) {\n          if ((DAT_00108360 != 'S') || ((int)unicode_byte < 0x80)) {\n            if ((DAT_00108373 == '\\0') ||\n               ((*(ushort *)(&sch_table + (long)(int)unicode_byte * 2) & 0x40) == 0)) goto LAB_00103049;\n            goto LAB_00102ecf;\n          }\n        }\n        else {\nLAB_00102ecf:\n          if ((int)unicode_byte < 0x7f) goto LAB_00102ed4;\n        }\n        if ((int)unicode_byte < 0xc0) goto LAB_00103049;\n        first_byte = (byte)unicode_byte;\n        result = get_unicode_byte(data,data_size,remaining_bytes,&bytes_read);\n        if (result == -1) break;\n        byte2 = (byte)result;\n        if ((byte2 & 0xc0) != 0x80) {\nLAB_00102f32:\n          output_index = (ulong)remaining_bytes[0];\n          remaining_bytes[0] = remaining_bytes[0] + 1;\n          *(byte *)(data_size + output_index) = byte2;\njoined_r0x00102f51:\n          if (DAT_00108358 == (char *)0x0) {\n            putc(10,_stdout);\n          }\n          else {\n            fputs(DAT_00108358,_stdout);\n          }\n          goto LAB_0010308d;\n        }\n        if ((first_byte & 0x20) == 0) {\n          if (DAT_00108350 != 5) goto LAB_0010300e;\n          goto LAB_00102f32;\n        }\n        result = get_unicode_byte(data,data_size,remaining_bytes,&bytes_read);\n        if (result == -1) break;\n        byte3 = (byte)result;\n        if ((byte3 & 0xc0) != 0x80) {\nLAB_00102f94:\n          *(byte *)(data_size + (ulong)remaining_bytes[0]) = byte3;\n          unicode_byte = remaining_bytes[0] + 1;\n          remaining_bytes[0] = remaining_bytes[0] + 2;\nLAB_00102ff2:\n          *(byte *)(data_size + (ulong)unicode_byte) = byte2;\n          goto joined_r0x00102f51;\n        }\n        if ((first_byte & 0x10) != 0) {\n          result = get_unicode_byte(data,data_size,remaining_bytes,&bytes_read);\n          if (result != -1) {\n            byte4 = (byte)result;\n            if (((byte4 & 0xc0) == 0x80) && (DAT_00108350 != 5)) goto LAB_0010300e;\n            *(byte *)(data_size + (ulong)remaining_bytes[0]) = byte4;\n            *(byte *)(data_size + (ulong)(remaining_bytes[0] + 1)) = byte3;\n            unicode_byte = remaining_bytes[0] + 2;\n            remaining_bytes[0] = remaining_bytes[0] + 3;\n            goto LAB_00102ff2;\n          }\n          break;\n        }\n        if (DAT_00108350 == 5) goto LAB_00102f94;\nLAB_0010300e:\n        display_utf8_char(&first_byte);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,_stdout);\n    }\n    else {\n      fputs(DAT_00108358,_stdout);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_unicode_string_00102b11",
            "entrypoint": "0x00102b11",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102b11": "process_unicode_string_00102b11",
                "_sch_istable": "sch_table",
                "iVar4": "result",
                "local_39": "byte4",
                "local_3a": "byte3",
                "local_3b": "byte2",
                "local_3c": "first_byte",
                "local_40": "bytes_read",
                "local_4c": "remaining_bytes",
                "local_80": "start_offset",
                "param_1": "file",
                "param_2": "file_offset",
                "param_3": "data",
                "param_4": "data_size",
                "param_5": "remaining_bytes",
                "param_6": "output_buffer",
                "uVar1": "byte_value",
                "uVar10": "current_byte",
                "uVar2": "unicode_byte",
                "uVar3": "second_byte",
                "uVar5": "index",
                "uVar6": "output_index",
                "uVar7": "byte1",
                "uVar8": "byte2",
                "uVar9": "count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001030c0": {
            "additional_data": {
                "FUN_001030c0": {
                    "1": "print_strings_options",
                    "11": "print_strings_usage",
                    "2": "print_strings_info",
                    "3": "print_string_info",
                    "6": "print_usage"
                },
                "__ptr": {
                    "1": "target_list_ptr",
                    "30": "target_list"
                },
                "dcgettext": {
                    "1": "get_translated_text"
                },
                "exit": {
                    "2": "exit_program"
                },
                "fprintf": {
                    "1": "print_formatted"
                },
                "fputc": {
                    "1": "write_character",
                    "2": "put_character"
                },
                "free": {
                    "4": "release_memory"
                },
                "lVar1": {
                    "1": "supported_target",
                    "2": "language_code",
                    "3": "language_id",
                    "4": "supported_targets",
                    "5": "target_name"
                },
                "param_1": {
                    "1": "file_pointer",
                    "25": "output_file",
                    "4": "file"
                },
                "param_2": {
                    "31": "exit_code"
                },
                "pcVar2": {
                    "1": "print_string",
                    "16": "message",
                    "4": "text",
                    "5": "localized_string"
                },
                "plVar3": {
                    "1": "current_target",
                    "11": "target_ptr",
                    "2": "target_list_pointer",
                    "3": "target_pointer",
                    "7": "ptr"
                }
            },
            "called": [
                "FUN_001020f0",
                "FUN_00102040",
                "FUN_001021e0",
                "FUN_001022e0",
                "FUN_00102150",
                "FUN_001021a0"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid print_strings_usage_001030c0(FILE *output_file,int exit_code)\n\n{\n  long target_name;\n  char *message;\n  long *target_list;\n  long *target_ptr;\n  \n  target_name = DAT_00108378;\n  message = (char *)get_localized_text(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  write_formatted(output_file,message,target_name);\n  message = (char *)get_localized_text(0,\" Display printable strings in [file(s)] (stdin by default)\\n\",5);\n  write_formatted(output_file,message);\n  message = (char *)get_localized_text(0,\" The options are:\\n\",5);\n  write_formatted(output_file,message);\n  message = (char *)get_localized_text(0,\n                             \"  -a - --all                Scan the entire file, not just the data section [default]\\n  -d --data                 Only scan the data sections in the file\\n\"\n                             ,5);\n  write_formatted(output_file,message);\n  message = (char *)get_localized_text(0,\n                             \"  -f --print-file-name      Print the name of the file before each string\\n  -n <number>               Locate & print any sequence of at least <number>\\n    --bytes=<number>         displayable characters.  (The default is 4).\\n  -t --radix={o,d,x}        Print the location of the string in base 8, 10 or 16\\n  -w --include-all-whitespace Include all whitespace as valid string characters\\n  -o                        An alias for --radix=o\\n  -T --target=<BFDNAME>     Specify the binary file format\\n  -e --encoding={s,S,b,l,B,L} Select character size and endianness:\\n                            s = 7-bit, S = 8-bit, {b,l} = 16-bit, {B,L} = 32-bit\\n  --unicode={default|show|invalid|hex|escape|highlight}\\n  -U {d|s|i|x|e|h}          Specify how to treat UTF-8 encoded unicode characters\\n  -s --output-separator=<string> String used to separate strings in output.\\n  @<file>                   Read options from <file>\\n  -h --help                 Display this information\\n  -v -V --version           Print the program\\'s version number\\n\"\n                             ,5);\n  write_formatted(output_file,message);\n  target_name = DAT_00108378;\n  if (DAT_00108378 == 0) {\n    message = (char *)get_localized_text(0,\"Supported targets:\",5);\n    write_formatted(output_file,message);\n  }\n  else {\n    message = (char *)get_localized_text(0,\"%s: supported targets:\",5);\n    write_formatted(output_file,message,target_name);\n  }\n  target_list = (long *)bfd_target_list();\n  target_ptr = target_list;\n  while( true ) {\n    target_name = *target_ptr;\n    target_ptr = target_ptr + 1;\n    if (target_name == 0) break;\n    write_formatted(output_file,\" %s\");\n  }\n  put_character(10,output_file);\n  release_memory(target_list);\n  if (exit_code == 0) {\n    message = (char *)get_localized_text(0,\"Report bugs to %s\\n\",5);\n    write_formatted(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  terminate_program(exit_code);\n}\n\n",
            "current_name": "print_strings_usage_001030c0",
            "entrypoint": "0x001030c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001030c0": "print_strings_usage_001030c0",
                "__ptr": "target_list",
                "dcgettext": "get_localized_text",
                "exit": "terminate_program",
                "fprintf": "write_formatted",
                "fputc": "put_character",
                "free": "release_memory",
                "lVar1": "target_name",
                "param_1": "output_file",
                "param_2": "exit_code",
                "pcVar2": "message",
                "plVar3": "target_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103240": {
            "additional_data": {
                "DAT_00108350": {
                    "1": "stdout_mode"
                },
                "DAT_00108358": {
                    "1": "line_separator"
                },
                "DAT_00108360": {
                    "1": "special_character_mode"
                },
                "DAT_00108371": {
                    "1": "print_filename_address_flag"
                },
                "DAT_00108372": {
                    "1": "print_address_flag"
                },
                "DAT_00108373": {
                    "1": "print_special_character_flag"
                },
                "DAT_00108374": {
                    "1": "buffer_length"
                },
                "FUN_00103240": {
                    "1": "print_character_buffer",
                    "2": "print_unicode_buffer",
                    "27": "print_formatted_output"
                },
                "LAB_00102381": {
                    "1": "process_tab"
                },
                "LAB_001023bb": {
                    "1": "process_tab"
                },
                "LAB_001023f5": {
                    "1": "process_tab"
                },
                "LAB_00102438": {
                    "1": "print_char"
                },
                "LAB_0010249c": {
                    "1": "print_intput_buffer"
                },
                "LAB_0010252e": {
                    "1": "print_tab"
                },
                "LAB_00102533": {
                    "1": "process_char"
                },
                "LAB_00102551": {
                    "1": "end_of_buffer"
                },
                "LAB_00102688": {
                    "1": "is_valid_utf8"
                },
                "LAB_0010269a": {
                    "1": "invalid_utf8"
                },
                "LAB_00102703": {
                    "1": "print_tab"
                },
                "LAB_00102708": {
                    "1": "print_tab"
                },
                "LAB_0010348e": {
                    "1": "unget_char_break"
                },
                "LAB_001034be": {
                    "1": "free_output_buffer"
                },
                "LAB_001034d5": {
                    "1": "unget_char_break"
                },
                "__ptr": {
                    "1": "memory_buffer",
                    "2": "output_buffer",
                    "3": "ptr_var",
                    "5": "unicode_buffer",
                    "8": "ptr"
                },
                "__s": {
                    "1": "string",
                    "2": "str",
                    "3": "string_var",
                    "6": "output_string",
                    "9": "formatted_output"
                },
                "_sch_istable": {
                    "1": "character_table"
                },
                "_stderr": {
                    "2": "standard_error"
                },
                "_stdout": {
                    "2": "standard_output"
                },
                "bVar12": {
                    "1": "utf8_character",
                    "2": "bool",
                    "3": "valid_utf8",
                    "4": "bool_var"
                },
                "bVar2": {
                    "1": "data_byte",
                    "2": "current_character",
                    "3": "byte_var",
                    "6": "current_byte",
                    "9": "current_char"
                },
                "cVar3": {
                    "1": "should_print_filename",
                    "2": "char",
                    "3": "print_filename",
                    "4": "flag"
                },
                "check_byte_sequence_001028b2": {
                    "1": "check_byte_sequence"
                },
                "display_unicode_0010293a": {
                    "1": "display_unicode_char"
                },
                "fputs": {
                    "1": "put_string"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "fwrite": {
                    "1": "write_to_file"
                },
                "get_char": {
                    "1": "get_next_char"
                },
                "iVar6": {
                    "1": "utf8_validation",
                    "2": "option",
                    "4": "validation_result"
                },
                "is_valid_utf8": {
                    "1": "validate_utf8"
                },
                "lVar4": {
                    "1": "file_offset_temp",
                    "10": "current_offset",
                    "2": "current_file_offset",
                    "3": "long_var",
                    "4": "length",
                    "5": "file_offset"
                },
                "local_3d": {
                    "1": "local_undef_arr",
                    "2": "temp_buffer",
                    "5": "debug_info"
                },
                "local_3d [13]": {
                    "1": "debug_info"
                },
                "local_3d[13]": {
                    "1": "unused_array"
                },
                "local_50": {
                    "1": "group_size",
                    "2": "parameters",
                    "4": "offset_array"
                },
                "local_50[0]": {
                    "1": "input_size"
                },
                "local_54": {
                    "1": "data_length",
                    "2": "data_size",
                    "3": "current_data_size",
                    "4": "remaining_bytes"
                },
                "local_60": {
                    "1": "current_position",
                    "2": "current_byte",
                    "4": "buffer_ptr",
                    "7": "current_buffer"
                },
                "local_80": {
                    "1": "base_offset",
                    "2": "unicode_file_offset",
                    "3": "current_file_offset",
                    "6": "current_address"
                },
                "param_1": {
                    "1": "param_name",
                    "23": "filename",
                    "3": "param1",
                    "4": "file_name"
                },
                "param_2": {
                    "1": "data_offset",
                    "11": "stream",
                    "2": "input_stream",
                    "3": "file_pointer",
                    "6": "file"
                },
                "param_3": {
                    "1": "buffer",
                    "2": "file_size",
                    "20": "file_offset",
                    "3": "param3"
                },
                "param_4": {
                    "1": "input_length",
                    "11": "data_size",
                    "2": "remaining_bytes",
                    "3": "file_size"
                },
                "param_5": {
                    "1": "input_data",
                    "14": "buffer",
                    "2": "byte_sequence",
                    "3": "param5",
                    "5": "data_buffer",
                    "6": "data"
                },
                "pbVar1": {
                    "1": "curr_byte",
                    "14": "current_byte",
                    "3": "ptr",
                    "4": "current_char"
                },
                "print_debug_info_00103890": {
                    "1": "print_debug_info"
                },
                "print_filename_and_address_part_0": {
                    "1": "print_filename_and_address"
                },
                "print_formatted_output_001034fa": {
                    "1": "print_formatted_output"
                },
                "print_formatted_output_00103510": {
                    "1": "print_formatted_output"
                },
                "print_unicode_buffer": {
                    "1": "print_formatted_output"
                },
                "print_unicode_stream": {
                    "1": "print_intput_buffer"
                },
                "printf": {
                    "1": "print_formatted"
                },
                "process_input_001034d5": {
                    "1": "process_input"
                },
                "process_unicode_string_00102b11": {
                    "1": "process_unicode_string"
                },
                "put_c": {
                    "1": "put_char"
                },
                "uVar10": {
                    "1": "loop_counter_3",
                    "2": "temp_index",
                    "3": "ulong_var3",
                    "4": "index"
                },
                "uVar11": {
                    "1": "num_chars",
                    "2": "uint_var2",
                    "4": "count",
                    "5": "char_count"
                },
                "uVar5": {
                    "1": "char_width",
                    "2": "is_valid",
                    "3": "utf8_char_size",
                    "4": "result"
                },
                "uVar7": {
                    "1": "current",
                    "2": "ulong_var1",
                    "3": "byte_index",
                    "7": "index"
                },
                "uVar8": {
                    "1": "loop_counter_2",
                    "2": "string_length",
                    "3": "buffer_length",
                    "5": "length",
                    "7": "buffer_size"
                },
                "uVar9": {
                    "1": "byte_sequence_length",
                    "2": "uint_var1"
                },
                "unget_part_char": {
                    "1": "unget_char"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_00102170",
                "FUN_00102040",
                "FUN_00102140",
                "FUN_001028b2",
                "FUN_001021d0",
                "FUN_0010293a",
                "FUN_00103890",
                "FUN_00102b11",
                "FUN_001022f0"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nvoid print_formatted_output_00103240(long filename,long stream,long file_offset,int data_size,byte *buffer)\n\n{\n  byte *current_byte;\n  byte current_char;\n  char flag;\n  long current_offset;\n  uint result;\n  int validation_result;\n  void *ptr;\n  char *formatted_output;\n  ulong index;\n  ulong buffer_size;\n  uint sequence_length;\n  ulong index;\n  uint char_count;\n  bool is_valid;\n  long current_address;\n  byte *current_buffer;\n  int remaining_bytes;\n  long offset_array [2];\n  undefined debug_info [13];\n  \n  current_buffer = buffer;\n  remaining_bytes = data_size;\n  input_size = file_offset;\n  if (DAT_00108350 == 0) {\n    formatted_output = (char *)allocate_memory(DAT_00108374 + 1);\n    do {\n      while (current_offset = input_size, buffer_size = (ulong)DAT_00108374, DAT_00108374 == 0) {\njoined_r0x001034ef:\n        if (DAT_00108371 != '\\0') {\n          print_formatted(\"%s: \",filename);\n        }\n        if (DAT_00108372 == '\\0') {\n          formatted_output[buffer_size] = '\\0';\n          put_string(formatted_output,standard_output);\n        }\n        else {\n          print_filename_and_address(current_offset);\n          formatted_output[buffer_size] = '\\0';\n          put_string(formatted_output,standard_output);\n        }\n        while (buffer_size = get_next_char(stream,offset_array,&remaining_bytes,&current_buffer), buffer_size != 0xffffffffffffffff)\n        {\n          if (0xff < buffer_size) {\nunget_char_break:\n            unget_char(buffer_size,offset_array,&remaining_bytes,&current_buffer);\n            break;\n          }\n          if (buffer_size == 9) {\nprint_char:\n            putc((int)buffer_size,standard_output);\n          }\n          else {\n            if ((*(ushort *)(&character_table + buffer_size * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)buffer_size < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + buffer_size * 2) & 0x40) == 0))))\n              goto unget_char_break;\n              goto print_char;\n            }\n            putc((int)buffer_size,standard_output);\n          }\n        }\n        if (DAT_00108358 == (char *)0x0) {\n          putc(10,standard_output);\n        }\n        else {\n          put_string(DAT_00108358,standard_output);\n        }\n      }\n      index = get_next_char(stream,offset_array,&remaining_bytes,&current_buffer);\n      sequence_length = DAT_00108374;\n      if (index == 0xffffffffffffffff) goto free_output_buffer;\n      if (index < 0x100) {\n        if (index == 9) {\nprocess_tab:\n          *formatted_output = (char)index;\n          if (sequence_length < 2) {\n            print_formatted_output_00103240();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&character_table + index * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto process_tab;\n          }\n          *formatted_output = (char)index;\n          if (sequence_length < 2) {\n            buffer_size = 1;\n            goto joined_r0x001034ef;\n          }\n        }\n        index = get_next_char(stream,offset_array,&remaining_bytes,&current_buffer);\n        sequence_length = DAT_00108374;\n        if (index == 0xffffffffffffffff) goto free_output_buffer;\n        if (index < 0x100) {\n          if (index == 9) {\nprocess_tab:\n            formatted_output[1] = (char)index;\n            if (sequence_length < 3) {\n              print_formatted_output_00103240();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&character_table + index * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index * 2) & 0x40) == 0))))\n              goto code_r0x001034d5;\n              goto process_tab;\n            }\n            formatted_output[1] = (char)index;\n            if (sequence_length < 3) {\n              buffer_size = 2;\n              goto joined_r0x001034ef;\n            }\n          }\n          index = get_next_char(stream,offset_array,&remaining_bytes,&current_buffer);\n          sequence_length = DAT_00108374;\n          if (index == 0xffffffffffffffff) {\nfree_output_buffer:\n            deallocate_memory(formatted_output);\n            return;\n          }\n          if (index < 0x100) {\n            if (index == 9) {\nprocess_tab:\n              formatted_output[2] = (char)index;\n            }\n            else {\n              if ((*(ushort *)(&character_table + index * 2) & 0x10) == 0) {\n                if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n                   ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index * 2) & 0x40) == 0))\n                   )) goto code_r0x001034d5;\n                goto process_tab;\n              }\n              formatted_output[2] = (char)index;\n            }\n            if (sequence_length < 4) {\n              buffer_size = 3;\n            }\n            else {\n              index = 3;\n              do {\n                index = get_next_char(stream,offset_array,&remaining_bytes,&current_buffer);\n                if (index == 0xffffffffffffffff) goto free_output_buffer;\n                if (0xff < index) goto code_r0x001034d5;\n                if (((index != 9) && ((*(ushort *)(&character_table + index * 2) & 0x10) == 0)) &&\n                   ((DAT_00108360 != 'S' || ((long)index < 0x80)))) {\n                  if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n                  if ((*(ushort *)(&character_table + index * 2) & 0x40) == 0) {\n                    process_input();\n                    return;\n                  }\n                }\n                sequence_length = (int)index + 1;\n                buffer_size = (ulong)sequence_length;\n                is_valid = sequence_length < DAT_00108374;\n                formatted_output[index] = (char)index;\n                index = buffer_size;\n              } while (is_valid);\n            }\n            goto joined_r0x001034ef;\n          }\n        }\n      }\ncode_r0x001034d5:\n      unget_char(index,offset_array,&remaining_bytes,&current_buffer);\n    } while( true );\n  }\n  if (buffer != (byte *)0x0) {\n    buffer_size = (ulong)data_size;\n    current_address = file_offset;\n    if (filename != 0) {\nprint_intput_buffer:\n      sequence_length = DAT_00108374;\n      flag = DAT_00108373;\n      validation_result = DAT_00108350;\n      if (((DAT_00108350 != 0) && (DAT_00108360 == 'S')) && (DAT_0010834c == 1)) {\n        if (buffer_size != 0) {\n          index = 0;\n          char_count = 0;\n          index = 0;\n          do {\n            while( true ) {\n              current_char = buffer[index];\n              if (current_char != 9) break;\nprint_tab:\n              result = 1;\nprocess_char:\n              if (char_count == 0) {\n                index = index;\n              }\n              char_count = char_count + 1;\n              if (sequence_length <= char_count) goto LAB_001026a9;\n              index = index + result;\n              if (buffer_size <= index) goto end_of_buffer;\n            }\n            if ((*(ushort *)(&character_table + (long)(int)(uint)current_char * 2) & 0x10) != 0) {\n              if (0x7e < current_char) goto LAB_0010264e;\n              goto print_tab;\n            }\n            if (0x7f < current_char) {\nLAB_0010264e:\n              if ((current_char < 0xc0) ||\n                 (result = validate_utf8(buffer + index,buffer_size - index), result == 0))\n              goto invalid_utf8;\n              if (validation_result == 5) goto is_valid_utf8;\n              goto process_char;\n            }\n            if (((flag != '\\0') &&\n                ((*(ushort *)(&character_table + (long)(int)(uint)current_char * 2) & 0x40) != 0)) &&\n               (current_char != 0x7f)) goto print_tab;\ninvalid_utf8:\n            result = 1;\nis_valid_utf8:\n            index = index + result;\n            if (buffer_size <= index) goto LAB_001026a1;\n            char_count = 0;\n          } while( true );\n        }\n        goto end_of_buffer;\n      }\n    }\n    write_to_file(\"ICE: bad arguments to print_formatted_output_00103240\\n\",1,0x2b,standard_error);\n  }\n  if (stream != 0) {\n    if (filename != 0) {\nLAB_0010255f:\n      current_offset = input_size;\n      if (((DAT_00108350 != 0) && (DAT_00108360 == 'S')) && (DAT_0010834c == 1)) {\n        ptr = (void *)allocate_memory(DAT_00108374 * 4 + 1);\n        print_intput_buffer_body(filename,current_offset,stream,debug_info,0,ptr);\n        deallocate_memory(ptr);\n        return;\n      }\n    }\n    write_to_file(\"ICE: bad arguments to print_intput_buffer\\n\",1,0x2b,standard_error);\n  }\n  return;\nLAB_001026a1:\n  if (sequence_length != 0) {\nend_of_buffer:\n    if (stream == 0) {\n      return;\n    }\n    goto LAB_0010255f;\n  }\nLAB_001026a9:\n  print_filename_and_address(filename,current_address + index);\n  for (; current_byte = buffer + index, index < buffer_size; index = index + sequence_length) {\n    current_char = *current_byte;\n    if (current_char == 9) {\nprint_tab:\n      putc((uint)current_char,standard_output);\n      sequence_length = 1;\n    }\n    else {\n      if ((*(ushort *)(&character_table + (long)(int)(uint)current_char * 2) & 0x10) == 0) {\n        if ((DAT_00108360 != 'S') || (current_char < 0x80)) {\n          if ((DAT_00108373 != '\\0') &&\n             ((*(ushort *)(&character_table + (long)(int)(uint)current_char * 2) & 0x40) != 0))\n          goto print_tab;\n          break;\n        }\n      }\n      else {\nprint_tab:\n        if (current_char < 0x7f) goto print_tab;\n      }\n      validation_result = validate_utf8(current_byte,buffer_size - index);\n      if ((validation_result == 0) || (DAT_00108350 == 5)) break;\n      sequence_length = display_utf8_char(current_byte);\n    }\n  }\n  if (DAT_00108358 == (char *)0x0) {\n    putc(10,standard_output);\n  }\n  else {\n    put_string(DAT_00108358,standard_output);\n  }\n  current_address = current_address + index;\n  buffer_size = buffer_size - index;\n  buffer = current_byte;\n  goto print_intput_buffer;\n}\n\n",
            "current_name": "print_formatted_output_00103240",
            "entrypoint": "0x00103240",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103240": "print_formatted_output_00103240",
                "LAB_00102381": "process_tab",
                "LAB_001023bb": "process_tab",
                "LAB_001023f5": "process_tab",
                "LAB_00102438": "print_char",
                "LAB_0010249c": "print_intput_buffer",
                "LAB_0010252e": "print_tab",
                "LAB_00102533": "process_char",
                "LAB_00102551": "end_of_buffer",
                "LAB_00102688": "is_valid_utf8",
                "LAB_0010269a": "invalid_utf8",
                "LAB_00102703": "print_tab",
                "LAB_00102708": "print_tab",
                "LAB_0010348e": "unget_char_break",
                "LAB_001034be": "free_output_buffer",
                "__ptr": "ptr",
                "__s": "formatted_output",
                "_sch_istable": "character_table",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "bVar12": "is_valid",
                "bVar2": "current_char",
                "cVar3": "flag",
                "fputs": "put_string",
                "free": "deallocate_memory",
                "fwrite": "write_to_file",
                "get_char": "get_next_char",
                "iVar6": "validation_result",
                "is_valid_utf8": "validate_utf8",
                "lVar4": "current_offset",
                "local_3d": "debug_info",
                "local_50": "offset_array",
                "local_50[0]": "input_size",
                "local_54": "remaining_bytes",
                "local_60": "current_buffer",
                "local_80": "current_address",
                "param_1": "filename",
                "param_2": "stream",
                "param_3": "file_offset",
                "param_4": "data_size",
                "param_5": "buffer",
                "pbVar1": "current_byte",
                "print_filename_and_address_part_0": "print_filename_and_address",
                "print_formatted_output_001034fa": "print_formatted_output",
                "print_formatted_output_00103510": "print_formatted_output",
                "print_unicode_buffer": "print_formatted_output",
                "print_unicode_stream": "print_intput_buffer",
                "printf": "print_formatted",
                "process_input_001034d5": "process_input",
                "uVar10": "index",
                "uVar11": "char_count",
                "uVar5": "result",
                "uVar7": "index",
                "uVar8": "buffer_size",
                "uVar9": "sequence_length",
                "unget_part_char": "unget_char",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001034d5": {
            "additional_data": {
                "DAT_00108358": {
                    "2": "additional_text"
                },
                "DAT_00108360": {
                    "1": "modifier_value",
                    "2": "mode"
                },
                "DAT_00108371": {
                    "1": "enable_prompt",
                    "2": "print_file_name"
                },
                "DAT_00108372": {
                    "1": "print_filename_flag",
                    "2": "print_address"
                },
                "DAT_00108373": {
                    "1": "flag_value",
                    "2": "flag"
                },
                "DAT_00108374": {
                    "1": "max_input_length",
                    "2": "max_length"
                },
                "FUN_001034d5": {
                    "1": "parse_and_print_strings",
                    "16": "process_input",
                    "2": "parse_input_and_print",
                    "8": "parse_input"
                },
                "FUN_00103810": {
                    "1": "update_data"
                },
                "LAB_00102381": {
                    "1": "check_tab3"
                },
                "LAB_001023bb": {
                    "1": "label2"
                },
                "LAB_001023f5": {
                    "1": "check_tab1"
                },
                "LAB_00102438": {
                    "1": "label5"
                },
                "LAB_0010348e": {
                    "1": "label4"
                },
                "LAB_001034be": {
                    "2": "end_label"
                },
                "R0x001034ef": {
                    "1": "process_input_helper"
                },
                "_sch_istable": {
                    "3": "char_table",
                    "8": "character_table"
                },
                "_stdout": {
                    "3": "stdout",
                    "4": "standard_output"
                },
                "bVar5": {
                    "1": "is_less_than_total_count",
                    "2": "flag",
                    "5": "condition",
                    "6": "is_valid",
                    "7": "is_less"
                },
                "code_r0x001034d5": {
                    "1": "loop"
                },
                "data_ptr": {
                    "1": "data_ptr",
                    "4": "data",
                    "9": "data_pointer"
                },
                "fputs": {
                    "1": "print_output",
                    "2": "write_to_stdout"
                },
                "free": {
                    "1": "deallocate_memory",
                    "2": "free_memory",
                    "3": "release_memory"
                },
                "get_char": {
                    "1": "get_character",
                    "2": "get_next_char",
                    "3": "read_char"
                },
                "getc": {
                    "1": "read_char"
                },
                "in_stack_00000010": {
                    "1": "source_filename",
                    "15": "filename",
                    "2": "format_string",
                    "4": "function_name",
                    "5": "file_name"
                },
                "in_stack_00000038": {
                    "1": "source_address",
                    "2": "filename",
                    "22": "address"
                },
                "joined_r0x001034ef": {
                    "1": "output_index_update"
                },
                "modifier": {
                    "1": "mod",
                    "4": "input_modifier",
                    "7": "modifier"
                },
                "num2": {
                    "1": "num_of_entries",
                    "3": "number2"
                },
                "print_filename_and_address_part_0": {
                    "1": "print_file_and_address",
                    "3": "print_filename_and_address"
                },
                "print_formatted_output_001034fa": {
                    "1": "print_output_level_less_than_2",
                    "2": "print_output"
                },
                "print_formatted_output_00103510": {
                    "1": "print_formatted_output2",
                    "2": "print_output"
                },
                "printf": {
                    "1": "print_formatted"
                },
                "putc": {
                    "1": "write_char",
                    "3": "put_character"
                },
                "putchar": {
                    "1": "put_character"
                },
                "result": {
                    "1": "res",
                    "5": "output_result",
                    "7": "result"
                },
                "uVar1": {
                    "1": "ch",
                    "10": "char1",
                    "3": "input_char",
                    "4": "character",
                    "5": "current_char"
                },
                "uVar2": {
                    "1": "next_character",
                    "10": "char2",
                    "2": "character2",
                    "3": "temp",
                    "7": "next_char"
                },
                "uVar3": {
                    "1": "string_length",
                    "2": "counter",
                    "4": "num_chars",
                    "8": "count"
                },
                "uVar4": {
                    "1": "output_index",
                    "2": "current_index",
                    "3": "counter",
                    "4": "count",
                    "5": "i",
                    "8": "index"
                },
                "unaff_R14": {
                    "1": "user_input",
                    "2": "input_string",
                    "4": "buffer",
                    "5": "input_buffer",
                    "7": "output_buffer"
                },
                "unget_part_char": {
                    "1": "get_next_char",
                    "2": "get_previous_char"
                },
                "update_data_00103810": {
                    "20": "update_data"
                }
            },
            "called": [
                "FUN_00103810"
            ],
            "calling": [
                "FUN_00102330",
                "FUN_0010259a"
            ],
            "code": "\n\n\nvoid process_input_001034d5(void)\n\n{\n  ulong char1;\n  ulong char2;\n  uint count;\n  ulong index;\n  char *output_string;\n  bool is_less;\n  undefined8 filename;\n  undefined8 address;\n  \nloop_start:\n  get_previous_char();\n  do {\n    char1 = (ulong)DAT_00108374;\n    if (DAT_00108374 != 0) {\n      char1 = read_char();\n      count = DAT_00108374;\n      if (char1 == 0xffffffffffffffff) goto end_label;\n      if (0xff < char1) goto loop_start;\n      if (char1 == 9) {\nlabel1:\n        *output_string = (char)char1;\n        if (count < 2) {\n          print_output_1();\n          return;\n        }\n      }\n      else {\n        if ((*(ushort *)(&character_table + char1 * 2) & 0x10) == 0) {\n          if (((DAT_00108360 == 'S') && (0x7f < (long)char1)) ||\n             ((DAT_00108373 != '\\0' && ((*(ushort *)(&character_table + char1 * 2) & 0x40) != 0))))\n          goto label1;\n          goto loop_start;\n        }\n        *output_string = (char)char1;\n        if (count < 2) {\n          char1 = 1;\n          goto output_index_update;\n        }\n      }\n      char1 = read_char();\n      count = DAT_00108374;\n      if (char1 == 0xffffffffffffffff) goto end_label;\n      if (0xff < char1) goto loop_start;\n      if (char1 == 9) {\nlabel2:\n        output_string[1] = (char)char1;\n        if (count < 3) {\n          print_output_2();\n          return;\n        }\n      }\n      else {\n        if ((*(ushort *)(&character_table + char1 * 2) & 0x10) == 0) {\n          if (((DAT_00108360 == 'S') && (0x7f < (long)char1)) ||\n             ((DAT_00108373 != '\\0' && ((*(ushort *)(&character_table + char1 * 2) & 0x40) != 0))))\n          goto label2;\n          goto loop_start;\n        }\n        output_string[1] = (char)char1;\n        if (count < 3) {\n          char1 = 2;\n          goto output_index_update;\n        }\n      }\n      char1 = read_char();\n      count = DAT_00108374;\n      if (char1 == 0xffffffffffffffff) {\nend_label:\n        release_memory(output_string);\n        return;\n      }\n      if (0xff < char1) goto loop_start;\n      if (char1 == 9) {\nlabel3:\n        output_string[2] = (char)char1;\n      }\n      else {\n        if ((*(ushort *)(&character_table + char1 * 2) & 0x10) == 0) {\n          if (((DAT_00108360 == 'S') && (0x7f < (long)char1)) ||\n             ((DAT_00108373 != '\\0' && ((*(ushort *)(&character_table + char1 * 2) & 0x40) != 0))))\n          goto label3;\n          goto loop_start;\n        }\n        output_string[2] = (char)char1;\n      }\n      if (count < 4) {\n        char1 = 3;\n      }\n      else {\n        index = 3;\n        do {\n          char2 = read_char();\n          if (char2 == 0xffffffffffffffff) goto end_label;\n          if (0xff < char2) goto loop_start;\n          if (((char2 != 9) && ((*(ushort *)(&character_table + char2 * 2) & 0x10) == 0)) &&\n             ((DAT_00108360 != 'S' || ((long)char2 < 0x80)))) {\n            if (DAT_00108373 == '\\0') goto loop_start;\n            if ((*(ushort *)(&character_table + char2 * 2) & 0x40) == 0) {\n              process_input_001034d5();\n              return;\n            }\n          }\n          count = (int)index + 1;\n          char1 = (ulong)count;\n          is_less = count < DAT_00108374;\n          output_string[index] = (char)char2;\n          index = char1;\n        } while (is_less);\n      }\n    }\noutput_index_update:\n    if (DAT_00108371 != '\\0') {\n      print_formatted_string(\"%s: \",filename);\n    }\n    if (DAT_00108372 == '\\0') {\n      output_string[char1] = '\\0';\n      write_to_stdout(output_string,standard_output);\n    }\n    else {\n      print_filename_and_address(address);\n      output_string[char1] = '\\0';\n      write_to_stdout(output_string,standard_output);\n    }\n    while (char1 = read_char(), char1 != 0xffffffffffffffff) {\n      if (0xff < char1) {\nlabel4:\n        get_previous_char();\n        break;\n      }\n      if (char1 == 9) {\nlabel5:\n        put_character((int)char1,standard_output);\n      }\n      else {\n        if ((*(ushort *)(&character_table + char1 * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)char1 < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + char1 * 2) & 0x40) == 0))))\n          goto label4;\n          goto label5;\n        }\n        put_character((int)char1,standard_output);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      put_character(10,standard_output);\n    }\n    else {\n      write_to_stdout(DAT_00108358,standard_output);\n    }\n  } while( true );\n}\n\n",
            "current_name": "process_input_001034d5",
            "entrypoint": "0x001034d5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001034d5": "process_input_001034d5",
                "LAB_00102381": "label3",
                "LAB_001023bb": "label2",
                "LAB_001023f5": "label1",
                "LAB_00102438": "label5",
                "LAB_0010348e": "label4",
                "LAB_001034be": "end_label",
                "_sch_istable": "character_table",
                "_stdout": "standard_output",
                "bVar5": "is_less",
                "code_r0x001034d5": "loop_start",
                "fputs": "write_to_stdout",
                "free": "release_memory",
                "get_char": "read_char",
                "in_stack_00000010": "filename",
                "in_stack_00000038": "address",
                "joined_r0x001034ef": "output_index_update",
                "print_filename_and_address_part_0": "print_filename_and_address",
                "print_formatted_output_001034fa": "print_output_1",
                "print_formatted_output_00103510": "print_output_2",
                "printf": "print_formatted_string",
                "putc": "put_character",
                "uVar1": "char1",
                "uVar2": "char2",
                "uVar3": "count",
                "uVar4": "index",
                "unaff_R14": "output_string",
                "unget_part_char": "get_previous_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001034fa": {
            "additional_data": {
                "DAT_00108358": {
                    "1": "new_line_string"
                },
                "DAT_00108360": {
                    "3": "char_type"
                },
                "DAT_00108371": {
                    "1": "enable_prefix"
                },
                "DAT_00108372": {
                    "1": "should_print_file_name"
                },
                "DAT_00108373": {
                    "1": "should_check_table"
                },
                "DAT_00108374": {
                    "1": "max_loop_counter"
                },
                "FUN_001034fa": {
                    "1": "print_and_parse_data",
                    "2": "print_and_read_input",
                    "4": "print_formatted_text",
                    "8": "print_formatted_output"
                },
                "_sch_istable": {
                    "6": "character_table"
                },
                "_stdout": {
                    "1": "output_stream",
                    "4": "standard_output"
                },
                "bVar5": {
                    "1": "is_out_of_range",
                    "2": "condition",
                    "8": "is_end_of_file"
                },
                "code_r0x001034fa": {
                    "1": "print_data_loop"
                },
                "fputs": {
                    "1": "output_string",
                    "2": "print_string"
                },
                "free": {
                    "2": "free_memory"
                },
                "get_char": {
                    "1": "get_next_char",
                    "2": "get_character"
                },
                "in_stack_00000010": {
                    "1": "prefix_string",
                    "11": "message",
                    "2": "input_string",
                    "3": "label",
                    "4": "format_string",
                    "7": "prompt"
                },
                "in_stack_00000038": {
                    "1": "char_buffer",
                    "11": "address",
                    "2": "filename_and_address",
                    "4": "filename"
                },
                "joined_r0x0010341b": {
                    "1": "loop_label"
                },
                "print_filename_and_address_part_0": {
                    "1": "print_file_and_address",
                    "2": "print_filename_and_address"
                },
                "printf": {
                    "1": "print_formatted_string"
                },
                "putc": {
                    "2": "print_character"
                },
                "puts": {
                    "1": "output_string"
                },
                "uVar1": {
                    "1": "char_code",
                    "13": "character",
                    "2": "input_char",
                    "3": "current_char",
                    "4": "char1",
                    "5": "char_value"
                },
                "uVar2": {
                    "1": "character_count",
                    "2": "remaining_bytes",
                    "3": "remaining_chars",
                    "5": "counter"
                },
                "uVar3": {
                    "1": "char_position",
                    "17": "index",
                    "2": "counter"
                },
                "uVar4": {
                    "1": "output_index",
                    "2": "count",
                    "3": "position",
                    "4": "counter",
                    "7": "index"
                },
                "unaff_R14": {
                    "1": "buffer",
                    "11": "output_buffer",
                    "12": "output_string",
                    "2": "formatted_text"
                },
                "unaff_R15": {
                    "1": "file_name",
                    "13": "filename",
                    "2": "address",
                    "6": "filename_and_address",
                    "7": "filename_address"
                },
                "unget_part_char": {
                    "1": "unget_partial_character"
                }
            },
            "called": [],
            "calling": [
                "FUN_0010259a"
            ],
            "code": "\n\n\nvoid print_formatted_output_001034fa(void)\n\n{\n  ulong character;\n  uint counter;\n  ulong index;\n  ulong index;\n  char *output_string;\n  undefined8 filename;\n  bool is_end_of_file;\n  undefined8 message;\n  undefined8 address;\n  \nprint_formatted_text_recursive:\n  index = 1;\nloop_label:\n  do {\n    if (DAT_00108371 != '\\0') {\n      print_formatted_string(\"%s: \",message);\n    }\n    if (DAT_00108372 == '\\0') {\n      output_string[index] = '\\0';\n      print_string(output_string,standard_output);\n    }\n    else {\n      print_filename_and_address(filename);\n      output_string[index] = '\\0';\n      print_string(output_string,standard_output);\n    }\n    while (index = get_character(), index != 0xffffffffffffffff) {\n      if (0xff < index) {\nLAB_0010348e:\n        unget_char();\n        break;\n      }\n      if (index == 9) {\nLAB_00102438:\n        print_character((int)index,standard_output);\n      }\n      else {\n        if ((*(ushort *)(&character_table + index * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index * 2) & 0x40) == 0))))\n          goto LAB_0010348e;\n          goto LAB_00102438;\n        }\n        print_character((int)index,standard_output);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      print_character(10,standard_output);\n    }\n    else {\n      print_string(DAT_00108358,standard_output);\n    }\n    while (index = (ulong)DAT_00108374, filename = address, DAT_00108374 != 0) {\n      index = get_character();\n      counter = DAT_00108374;\n      if (index == 0xffffffffffffffff) goto LAB_001034be;\n      if (index < 0x100) {\n        if (index == 9) {\nLAB_001023f5:\n          *output_string = (char)index;\n          if (counter < 2) {\n            print_formatted_output_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&character_table + index * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_001023f5;\n          }\n          *output_string = (char)index;\n          if (counter < 2) goto print_formatted_text_recursive;\n        }\n        index = get_character();\n        counter = DAT_00108374;\n        if (index == 0xffffffffffffffff) goto LAB_001034be;\n        if (0xff < index) goto code_r0x001034d5;\n        if (index == 9) {\nLAB_001023bb:\n          output_string[1] = (char)index;\n          if (counter < 3) {\n            print_formatted_output_00103510();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&character_table + index * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_001023bb;\n          }\n          output_string[1] = (char)index;\n          if (counter < 3) {\n            index = 2;\n            break;\n          }\n        }\n        index = get_character();\n        counter = DAT_00108374;\n        if (index == 0xffffffffffffffff) {\nLAB_001034be:\n          free_memory(output_string);\n          return;\n        }\n        if (0xff < index) goto code_r0x001034d5;\n        if (index == 9) {\nLAB_00102381:\n          output_string[2] = (char)index;\n        }\n        else {\n          if ((*(ushort *)(&character_table + index * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_00102381;\n          }\n          output_string[2] = (char)index;\n        }\n        if (3 < counter) {\n          index = 3;\n          do {\n            character = get_character();\n            if (character == 0xffffffffffffffff) goto LAB_001034be;\n            if (0xff < character) goto code_r0x001034d5;\n            if (((character != 9) && ((*(ushort *)(&character_table + character * 2) & 0x10) == 0)) &&\n               ((DAT_00108360 != 'S' || ((long)character < 0x80)))) {\n              if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n              if ((*(ushort *)(&character_table + character * 2) & 0x40) == 0) {\n                process_input_001034d5();\n                return;\n              }\n            }\n            counter = (int)index + 1;\n            index = (ulong)counter;\n            is_end_of_file = DAT_00108374 <= counter;\n            output_string[index] = (char)character;\n            index = index;\n            if (is_end_of_file) goto loop_label;\n          } while( true );\n        }\n        index = 3;\n        break;\n      }\ncode_r0x001034d5:\n      unget_char();\n    }\n  } while( true );\n}\n\n",
            "current_name": "print_formatted_output_001034fa",
            "entrypoint": "0x001034fa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001034fa": "print_formatted_output_001034fa",
                "_sch_istable": "character_table",
                "_stdout": "standard_output",
                "bVar5": "is_end_of_file",
                "code_r0x001034fa": "print_formatted_text_recursive",
                "fputs": "print_string",
                "free": "free_memory",
                "get_char": "get_character",
                "in_stack_00000010": "message",
                "in_stack_00000038": "address",
                "joined_r0x0010341b": "loop_label",
                "print_filename_and_address_part_0": "print_filename_and_address",
                "printf": "print_formatted_string",
                "putc": "print_character",
                "puts": "output_string",
                "uVar1": "character",
                "uVar2": "counter",
                "uVar3": "index",
                "uVar4": "index",
                "unaff_R14": "output_string",
                "unaff_R15": "filename",
                "unget_part_char": "unget_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103510": {
            "additional_data": {
                "DAT_00108358": {
                    "1": "file_delimiter"
                },
                "DAT_00108360": {
                    "1": "special_flag1"
                },
                "DAT_00108371": {
                    "1": "should_print_message"
                },
                "DAT_00108372": {
                    "1": "print_file_name_flag"
                },
                "DAT_00108373": {
                    "1": "is_file_binary"
                },
                "DAT_00108374": {
                    "1": "input_buffer"
                },
                "FUN_00103510": {
                    "1": "print_and_read_input",
                    "4": "print_file_contents",
                    "6": "print_formatted_text",
                    "7": "print_formatted_output"
                },
                "LAB_00102381": {
                    "1": "assign_to_output_string3"
                },
                "LAB_001023bb": {
                    "1": "assign_to_output_string2"
                },
                "LAB_001023f5": {
                    "1": "assign_to_output_string1"
                },
                "LAB_00102438": {
                    "1": "print_tab"
                },
                "LAB_0010348e": {
                    "1": "skip_character"
                },
                "LAB_001034be": {
                    "1": "end_function"
                },
                "LAB_001034d5": {
                    "1": "skip_character2"
                },
                "STDOUT": {
                    "1": "standard_output"
                },
                "_sch_istable": {
                    "1": "char_type_table",
                    "7": "character_table"
                },
                "_stdout": {
                    "3": "stdout",
                    "4": "output_stream"
                },
                "bVar5": {
                    "1": "is_char_table",
                    "2": "is_less_than",
                    "3": "condition",
                    "4": "is_end_of_file"
                },
                "code_r0x00103510": {
                    "1": "print_and_read_input"
                },
                "fputs": {
                    "1": "put_string"
                },
                "free": {
                    "1": "release_memory",
                    "3": "free_memory"
                },
                "get_char": {
                    "1": "get_next_character"
                },
                "in_stack_00000010": {
                    "1": "filename",
                    "10": "prompt",
                    "11": "message",
                    "3": "format_string"
                },
                "in_stack_00000038": {
                    "1": "counter",
                    "14": "address",
                    "2": "address_part",
                    "6": "filename"
                },
                "joined_r0x0010341b": {
                    "1": "outer_loop"
                },
                "print_filename_and_address_part_0": {
                    "1": "print_filename_and_address"
                },
                "printf": {
                    "1": "print"
                },
                "put_char": {
                    "1": "put_character"
                },
                "putc": {
                    "1": "put_character"
                },
                "putchar": {
                    "1": "print_character"
                },
                "uVar1": {
                    "1": "char",
                    "11": "character",
                    "2": "char_code",
                    "5": "char1"
                },
                "uVar2": {
                    "1": "index",
                    "3": "loop_counter",
                    "4": "counter",
                    "5": "remaining_chars",
                    "6": "count"
                },
                "uVar3": {
                    "1": "counter",
                    "2": "output_index",
                    "21": "index",
                    "3": "buffer_index"
                },
                "uVar4": {
                    "1": "num_chars",
                    "2": "length",
                    "3": "index",
                    "4": "loop_counter"
                },
                "unaff_R14": {
                    "1": "filename_buffer",
                    "2": "file_contents",
                    "3": "string_buffer",
                    "4": "buffer",
                    "5": "output_string",
                    "8": "output_buffer"
                },
                "unaff_R15": {
                    "1": "file_name",
                    "15": "filename",
                    "3": "file_address",
                    "4": "filename_and_address",
                    "5": "filename_address"
                },
                "unget_part_char": {
                    "1": "unread_character",
                    "2": "unget_char"
                }
            },
            "called": [],
            "calling": [
                "FUN_0010259a"
            ],
            "code": "\n\n\nvoid print_formatted_output_00103510(void)\n\n{\n  ulong character;\n  uint count;\n  ulong index;\n  ulong loop_counter;\n  char *output_buffer;\n  undefined8 filename;\n  bool flag;\n  undefined8 message;\n  undefined8 address;\n  \nprint_and_read_input:\n  loop_counter = 2;\nouter_loop:\n  do {\n    if (DAT_00108371 != '\\0') {\n      print_formatted(\"%s: \",message);\n    }\n    if (DAT_00108372 == '\\0') {\n      output_buffer[loop_counter] = '\\0';\n      put_string(output_buffer,output_stream);\n    }\n    else {\n      print_filename_and_address_part(filename);\n      output_buffer[loop_counter] = '\\0';\n      put_string(output_buffer,output_stream);\n    }\n    while (loop_counter = get_next_character(), loop_counter != 0xffffffffffffffff) {\n      if (0xff < loop_counter) {\nskip_character:\n        unget_char();\n        break;\n      }\n      if (loop_counter == 9) {\nprint_tab:\n        put_character((int)loop_counter,output_stream);\n      }\n      else {\n        if ((*(ushort *)(&character_table + loop_counter * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)loop_counter < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + loop_counter * 2) & 0x40) == 0))))\n          goto skip_character;\n          goto print_tab;\n        }\n        put_character((int)loop_counter,output_stream);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      put_character(10,output_stream);\n    }\n    else {\n      put_string(DAT_00108358,output_stream);\n    }\n    while (loop_counter = (ulong)DAT_00108374, filename = address, DAT_00108374 != 0) {\n      loop_counter = get_next_character();\n      count = DAT_00108374;\n      if (loop_counter == 0xffffffffffffffff) goto end_function;\n      if (loop_counter < 0x100) {\n        if (loop_counter == 9) {\nassign_to_output_string1:\n          *output_buffer = (char)loop_counter;\n          if (count < 2) {\n            FUN_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&character_table + loop_counter * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)loop_counter < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + loop_counter * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto assign_to_output_string1;\n          }\n          *output_buffer = (char)loop_counter;\n          if (count < 2) {\n            loop_counter = 1;\n            break;\n          }\n        }\n        loop_counter = get_next_character();\n        count = DAT_00108374;\n        if (loop_counter == 0xffffffffffffffff) goto end_function;\n        if (0xff < loop_counter) goto code_r0x001034d5;\n        if (loop_counter == 9) {\nassign_to_output_string2:\n          output_buffer[1] = (char)loop_counter;\n          if (count < 3) {\n            print_formatted_output_00103510();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&character_table + loop_counter * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)loop_counter < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + loop_counter * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto assign_to_output_string2;\n          }\n          output_buffer[1] = (char)loop_counter;\n          if (count < 3) goto print_and_read_input;\n        }\n        loop_counter = get_next_character();\n        count = DAT_00108374;\n        if (loop_counter == 0xffffffffffffffff) {\nend_function:\n          free_memory(output_buffer);\n          return;\n        }\n        if (0xff < loop_counter) goto code_r0x001034d5;\n        if (loop_counter == 9) {\nassign_to_output_string3:\n          output_buffer[2] = (char)loop_counter;\n        }\n        else {\n          if ((*(ushort *)(&character_table + loop_counter * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)loop_counter < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + loop_counter * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto assign_to_output_string3;\n          }\n          output_buffer[2] = (char)loop_counter;\n        }\n        if (3 < count) {\n          index = 3;\n          do {\n            character = get_next_character();\n            if (character == 0xffffffffffffffff) goto end_function;\n            if (0xff < character) goto code_r0x001034d5;\n            if (((character != 9) && ((*(ushort *)(&character_table + character * 2) & 0x10) == 0)) &&\n               ((DAT_00108360 != 'S' || ((long)character < 0x80)))) {\n              if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n              if ((*(ushort *)(&character_table + character * 2) & 0x40) == 0) {\n                process_input_001034d5();\n                return;\n              }\n            }\n            count = (int)index + 1;\n            loop_counter = (ulong)count;\n            flag = DAT_00108374 <= count;\n            output_buffer[index] = (char)character;\n            index = loop_counter;\n            if (flag) goto outer_loop;\n          } while( true );\n        }\n        loop_counter = 3;\n        break;\n      }\ncode_r0x001034d5:\n      unget_char();\n    }\n  } while( true );\n}\n\n",
            "current_name": "print_formatted_output_00103510",
            "entrypoint": "0x00103510",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103510": "print_formatted_output_00103510",
                "LAB_00102381": "assign_to_output_string3",
                "LAB_001023bb": "assign_to_output_string2",
                "LAB_001023f5": "assign_to_output_string1",
                "LAB_00102438": "print_tab",
                "LAB_0010348e": "skip_character",
                "LAB_001034be": "end_function",
                "_sch_istable": "character_table",
                "_stdout": "output_stream",
                "bVar5": "flag",
                "code_r0x00103510": "print_and_read_input",
                "fputs": "put_string",
                "free": "free_memory",
                "get_char": "get_next_character",
                "in_stack_00000010": "message",
                "in_stack_00000038": "address",
                "joined_r0x0010341b": "outer_loop",
                "print_filename_and_address_part_0": "print_filename_and_address_part",
                "printf": "print_formatted",
                "putc": "put_character",
                "uVar1": "character",
                "uVar2": "count",
                "uVar3": "index",
                "uVar4": "loop_counter",
                "unaff_R14": "output_buffer",
                "unaff_R15": "filename",
                "unget_part_char": "unget_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103520": {
            "additional_data": {
                "F2D41F": {
                    "1": "reverse_binary_data"
                },
                "FUN_00102771": {
                    "1": "get_char_cold"
                },
                "FUN_00103520": {
                    "1": "read_long_from_stream",
                    "2": "extract_data",
                    "5": "read_data",
                    "7": "decode_data"
                },
                "_IO_FILE": {
                    "1": "file"
                },
                "bVar1": {
                    "1": "byte_val",
                    "19": "byte_value",
                    "8": "current_byte"
                },
                "get_char_cold": {
                    "1": "get_char"
                },
                "iVar6": {
                    "1": "remaining_len",
                    "11": "loop_counter",
                    "2": "counter"
                },
                "iVar7": {
                    "1": "expected_bytes",
                    "2": "target_length",
                    "3": "total_bytes",
                    "4": "loop_limit"
                },
                "param_1": {
                    "18": "file",
                    "2": "file_stream",
                    "9": "file_ptr"
                },
                "param_2": {
                    "1": "total_bytes_read",
                    "2": "data_length",
                    "4": "counter"
                },
                "param_3": {
                    "1": "data_len_ptr",
                    "2": "length",
                    "3": "remaining_count",
                    "7": "remaining",
                    "8": "remaining_bytes"
                },
                "param_4": {
                    "1": "buffer_ptr",
                    "2": "data_pointer",
                    "7": "data",
                    "9": "buffer"
                },
                "pbVar2": {
                    "1": "buffer_ptr",
                    "2": "current_ptr",
                    "3": "byte_pointer",
                    "4": "current_byte_ptr",
                    "5": "current_byte",
                    "8": "byte_ptr"
                },
                "uVar3": {
                    "1": "value",
                    "2": "return_value",
                    "3": "uflow_result",
                    "5": "flow_result",
                    "6": "read_result",
                    "7": "result"
                },
                "uVar4": {
                    "1": "temp_unsigned_long",
                    "10": "temp_value",
                    "2": "byte_value",
                    "3": "temp_var"
                },
                "uVar5": {
                    "1": "extracted_value",
                    "12": "result",
                    "2": "value",
                    "6": "decoded_value"
                }
            },
            "called": [
                "FUN_00102030",
                "FUN_00102771"
            ],
            "calling": [
                "FUN_0010259a"
            ],
            "code": "\nulong decode_data_00103520(file *file,long *counter,int *remaining_bytes,byte **buffer)\n\n{\n  byte byte_value;\n  byte *byte_ptr;\n  uint result;\n  ulong temp_value;\n  ulong result;\n  int loop_counter;\n  int loop_limit;\n  \n  loop_limit = DAT_0010834c;\n  if (DAT_0010834c < 1) {\n    result = 0;\n    if (DAT_00108360 == 'L') {\n      result = get_char();\n      return result;\n    }\n    goto LAB_0010361f;\n  }\n  if (file == (file *)0x0) {\n    result = 0;\n    loop_counter = 0;\n    do {\n      if (*remaining_bytes == 0) {\n        return 0xffffffffffffffff;\n      }\n      loop_counter = loop_counter + 1;\n      *remaining_bytes = *remaining_bytes + -1;\n      byte_ptr = *buffer;\n      *buffer = byte_ptr + 1;\n      byte_value = *byte_ptr;\n      *counter = *counter + 1;\n      result = result << 8 | (ulong)byte_value;\n    } while (loop_counter != loop_limit);\n  }\n  else if (*remaining_bytes == 0) {\n    byte_ptr = (byte *)file->_IO_read_ptr;\n    if (file->_IO_read_end <= byte_ptr) {\n      result = __uflow(file);\n      result = (ulong)(result & 0xff);\n      if (result == 0xffffffff) {\n        return 0xffffffffffffffff;\n      }\n      goto LAB_001036aa;\n    }\n    file->_IO_read_ptr = (char *)(byte_ptr + 1);\n    result = (ulong)*byte_ptr;\n    *counter = *counter + 1;\n    loop_counter = 0;\n    if (loop_limit == 1) goto LAB_00103610;\nLAB_00103574:\n    byte_ptr = (byte *)file->_IO_read_ptr;\n    if (byte_ptr < file->_IO_read_end) {\n      file->_IO_read_ptr = (char *)(byte_ptr + 1);\n      byte_value = *byte_ptr;\n      *counter = *counter + 1;\n      result = result << 8 | (ulong)byte_value;\n      if (DAT_0010834c < 3) goto LAB_00103610;\nLAB_001035a1:\n      byte_ptr = (byte *)file->_IO_read_ptr;\n      if (byte_ptr < file->_IO_read_end) {\n        file->_IO_read_ptr = (char *)(byte_ptr + 1);\n        byte_value = *byte_ptr;\n        *counter = *counter + 1;\n        result = result << 8 | (ulong)byte_value;\n        if (DAT_0010834c < 4) goto LAB_00103610;\n      }\n      else {\n        result = __uflow(file);\n        if (result == 0xffffffff) {\n          return 0xffffffffffffffff;\n        }\n        temp_value = (ulong)(result & 0xff);\nLAB_00103717:\n        *counter = *counter + 1;\n        result = result << 8 | temp_value;\n        if (DAT_0010834c < 4) goto LAB_00103610;\n        loop_counter = *remaining_bytes;\n      }\n      loop_limit = 3;\n      while( true ) {\n        if (loop_counter == 0) {\n          while (byte_ptr = (byte *)file->_IO_read_ptr, byte_ptr < file->_IO_read_end) {\n            loop_limit = loop_limit + 1;\n            file->_IO_read_ptr = (char *)(byte_ptr + 1);\n            byte_value = *byte_ptr;\n            *counter = *counter + 1;\n            result = result << 8 | (ulong)byte_value;\n            if (DAT_0010834c <= loop_limit) goto LAB_00103610;\n          }\n          result = __uflow(file);\n          if (result == 0xffffffff) {\n            return 0xffffffffffffffff;\n          }\n          temp_value = (ulong)(result & 0xff);\n        }\n        else {\n          byte_ptr = *buffer;\n          *remaining_bytes = loop_counter + -1;\n          *buffer = byte_ptr + 1;\n          temp_value = (ulong)*byte_ptr;\n        }\n        *counter = *counter + 1;\n        loop_limit = loop_limit + 1;\n        result = result << 8 | temp_value;\n        if (DAT_0010834c <= loop_limit) break;\n        loop_counter = *remaining_bytes;\n      }\n    }\n    else {\n      result = __uflow(file);\n      if (result == 0xffffffff) {\n        return 0xffffffffffffffff;\n      }\n      temp_value = (ulong)(result & 0xff);\nLAB_001036dd:\n      *counter = *counter + 1;\n      result = result << 8 | temp_value;\n      if (2 < DAT_0010834c) {\n        loop_counter = *remaining_bytes;\n        if (loop_counter == 0) goto LAB_001035a1;\n        byte_ptr = *buffer;\n        *remaining_bytes = loop_counter + -1;\n        *buffer = byte_ptr + 1;\n        temp_value = (ulong)*byte_ptr;\n        goto LAB_00103717;\n      }\n    }\n  }\n  else {\n    byte_ptr = *buffer;\n    *remaining_bytes = *remaining_bytes + -1;\n    *buffer = byte_ptr + 1;\n    result = (ulong)*byte_ptr;\nLAB_001036aa:\n    *counter = *counter + 1;\n    if (1 < DAT_0010834c) {\n      loop_counter = *remaining_bytes;\n      if (loop_counter == 0) goto LAB_00103574;\n      byte_ptr = *buffer;\n      *remaining_bytes = loop_counter + -1;\n      *buffer = byte_ptr + 1;\n      temp_value = (ulong)*byte_ptr;\n      goto LAB_001036dd;\n    }\n  }\nLAB_00103610:\n  if (DAT_00108360 == 'L') {\n    result = get_char();\n    return result;\n  }\nLAB_0010361f:\n  if (DAT_00108360 == 'l') {\n    result = result >> 8 & 0xff | (result & 0xff) << 8;\n  }\n  return result;\n}\n\n",
            "current_name": "decode_data_00103520",
            "entrypoint": "0x00103520",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103520": "decode_data_00103520",
                "_IO_FILE": "file",
                "bVar1": "byte_value",
                "get_char_cold": "get_char",
                "iVar6": "loop_counter",
                "iVar7": "loop_limit",
                "param_1": "file",
                "param_2": "counter",
                "param_3": "remaining_bytes",
                "param_4": "buffer",
                "pbVar2": "byte_ptr",
                "uVar3": "result",
                "uVar4": "temp_value",
                "uVar5": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103810": {
            "additional_data": {
                "DAT_00108348": {
                    "1": "modified_value1",
                    "2": "data"
                },
                "DAT_0010834c": {
                    "1": "length"
                },
                "DAT_00108360": {
                    "1": "letter"
                },
                "FUN_00103810": {
                    "1": "adjust_data_and_calculate",
                    "2": "update_parameters",
                    "3": "process_data",
                    "4": "update_params",
                    "8": "update_data"
                },
                "Just initialize_data_0010282b": {
                    "1": "initialize_data"
                },
                "_DAT_00108349": {
                    "1": "modified_value2_ushort"
                },
                "calculate_sum_001027e2": {
                    "15": "calculate_sum"
                },
                "iVar1": {
                    "1": "flag_value",
                    "2": "value1",
                    "3": "num1"
                },
                "iVar3": {
                    "1": "modified_num",
                    "2": "counter",
                    "3": "num2",
                    "4": "previous_value"
                },
                "initialize_data_0010282b": {
                    "15": "initialize_data"
                },
                "lVar2": {
                    "1": "data_length",
                    "2": "constant",
                    "6": "modifier"
                },
                "param_1": {
                    "1": "data",
                    "10": "modifier",
                    "2": "input",
                    "3": "param_value",
                    "7": "input_value"
                },
                "param_2": {
                    "1": "result1",
                    "2": "sum_ptr",
                    "4": "num1",
                    "5": "data_ptr"
                },
                "param_3": {
                    "1": "result2",
                    "2": "counter_ptr",
                    "4": "num2"
                },
                "param_4": {
                    "1": "pointer_to_result3",
                    "2": "result_3",
                    "7": "result_ptr",
                    "8": "result"
                }
            },
            "called": [
                "FUN_0010282b",
                "FUN_001027e2"
            ],
            "calling": [
                "FUN_001034d5",
                "FUN_0010259a"
            ],
            "code": "\n\n\nvoid update_data_00103810(undefined8 modifier,long *data_ptr,int *num2,long *result)\n\n{\n  int num1;\n  long modifier;\n  int previous_value;\n  \n  modifier = (long)DAT_0010834c;\n  if (DAT_0010834c < 2) {\n    return;\n  }\n  previous_value = DAT_0010834c + -1;\n  *data_ptr = *data_ptr - (long)previous_value;\n  num1 = *num2;\n  if (num1 == 0) {\n    if (DAT_00108360 != 'l') {\n      if (DAT_00108360 < 'm') {\n        if (DAT_00108360 == 'b') {\n          DAT_00108348 = (undefined)modifier;\n          *num2 = 1;\n        }\n        else if (DAT_00108360 < 'c') {\n          if (DAT_00108360 == 'B') {\n            _DAT_00108349 = (ushort)modifier << 8 | (ushort)modifier >> 8;\n            DAT_00108348 = (undefined)((ulong)modifier >> 0x10);\n            *num2 = 3;\n          }\n          else if (DAT_00108360 == 'L') {\n            initialize_data();\n            return;\n          }\n        }\n      }\n      *result = (long)&DAT_00108348;\n      return;\n    }\n    DAT_00108348 = (undefined)((ulong)modifier >> 8);\n    *num2 = 1;\n    *result = (long)&DAT_00108348;\n  }\n  else {\n    *result = *result + (1 - modifier);\n    *num2 = previous_value + num1;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_00103810",
            "entrypoint": "0x00103810",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103810": "update_data_00103810",
                "iVar1": "num1",
                "iVar3": "previous_value",
                "initialize_data_0010282b": "initialize_data",
                "lVar2": "modifier",
                "param_1": "modifier",
                "param_2": "data_ptr",
                "param_3": "num2",
                "param_4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103890": {
            "additional_data": {
                "<Undefined8_1>": {
                    "1": "filename_available"
                },
                "<Undefined8_2>": {
                    "1": "print_filename"
                },
                "<Undefined8_3>": {
                    "1": "print_text"
                },
                "<param_1>": {
                    "1": "print_text"
                },
                "<param_2>": {
                    "1": "file_address"
                },
                "DAT_00108371": {
                    "1": "display_message",
                    "2": "is_debug_enabled"
                },
                "DAT_00108372": {
                    "1": "should_print_file_address",
                    "2": "should_print_address"
                },
                "FUN_00103890": {
                    "1": "print_file_if_flag_set",
                    "2": "print_function_info",
                    "3": "print_with_filename",
                    "5": "print_debug_info"
                },
                "param_1": {
                    "1": "info",
                    "15": "message",
                    "3": "function_name",
                    "4": "filename",
                    "7": "file_name"
                },
                "param_2": {
                    "1": "filename",
                    "22": "address",
                    "5": "file_address"
                },
                "print_filename_and_address_part_0": {
                    "1": "print_details",
                    "2": "print_address_info",
                    "3": "print_file_info",
                    "5": "print_address",
                    "8": "print_filename_and_address"
                }
            },
            "called": [
                "FUN_00102853"
            ],
            "calling": [
                "FUN_00102b11",
                "FUN_00103240"
            ],
            "code": "\nvoid print_debug_info_00103890(undefined8 message,undefined8 address)\n\n{\n  if (DAT_00108371 != '\\0') {\n    printf(\"%s: \",message);\n  }\n  if (DAT_00108372 == '\\0') {\n    return;\n  }\n  print_filename_and_address(address);\n  return;\n}\n\n",
            "current_name": "print_debug_info_00103890",
            "entrypoint": "0x00103890",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103890": "print_debug_info_00103890",
                "param_1": "message",
                "param_2": "address",
                "print_filename_and_address_part_0": "print_filename_and_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001038b0": {
            "additional_data": {
                "10": {
                    "1": "newline"
                },
                "DAT_00108378": {
                    "1": "error_message_header"
                },
                "FUN_001038b0": {
                    "1": "print_formatted_message",
                    "29": "print_error_message"
                },
                "__gnuc_va_list": {
                    "2": "args"
                },
                "__gnuc_va_list param_2": {
                    "1": "variable_argument_list"
                },
                "_stderr": {
                    "1": "stderr",
                    "15": "standard_error",
                    "2": "standard_error_stream"
                },
                "_stdout": {
                    "1": "stdout",
                    "15": "standard_output"
                },
                "fflush": {
                    "2": "flush_standard_output"
                },
                "fprintf": {
                    "1": "formatted_print"
                },
                "param_1": {
                    "2": "message_format",
                    "20": "error_message",
                    "9": "message"
                },
                "param_1.__gnuc_va_list": {
                    "1": "args"
                },
                "param_2": {
                    "1": "argument_list",
                    "10": "args",
                    "11": "arguments",
                    "2": "variable_arguments",
                    "3": "format_args"
                },
                "putc": {
                    "1": "write_new_line",
                    "3": "put_character",
                    "4": "write_character"
                },
                "stderr": {
                    "3": "standard_error"
                },
                "stdout": {
                    "3": "standard_output"
                },
                "vfprintf": {
                    "1": "formatted_v_print"
                }
            },
            "called": [
                "FUN_001021e0",
                "FUN_001021d0",
                "FUN_001022b0",
                "FUN_00102220"
            ],
            "calling": [
                "FUN_00103910",
                "FUN_00104a60"
            ],
            "code": "\n\n\nvoid print_error_message_001038b0(char *error_message,variable_argument_list arguments)\n\n{\n  flush_output(standard_output);\n  print_formatted(standard_error,\"%s: \",DAT_00108378);\n  formatted_v_print(standard_error,error_message,arguments);\n  write_character(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_error_message_001038b0",
            "entrypoint": "0x001038b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001038b0": "print_error_message_001038b0",
                "__gnuc_va_list": "variable_argument_list",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "fflush": "flush_output",
                "fprintf": "print_formatted",
                "param_1": "error_message",
                "param_2": "arguments",
                "putc": "write_character",
                "stderr": "standard_error",
                "stdout": "standard_output",
                "vfprintf": "formatted_v_print"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103910": {
            "additional_data": {
                "FUN_00103910": {
                    "1": "report_and_process_data",
                    "23": "report_data",
                    "6": "report_function"
                },
                "in_AL": {
                    "1": "is_non_zero",
                    "10": "flag",
                    "3": "condition",
                    "4": "input_flag"
                },
                "local_18": {
                    "1": "report_param1",
                    "2": "data8",
                    "3": "input8_copy"
                },
                "local_28": {
                    "1": "param7_local",
                    "2": "local_param7",
                    "3": "input7_copy"
                },
                "local_38": {
                    "1": "data6_copy",
                    "2": "data6",
                    "3": "input6_copy"
                },
                "local_48": {
                    "1": "item5_2",
                    "2": "data5",
                    "3": "input5_copy"
                },
                "local_58": {
                    "1": "input_4_copy",
                    "2": "local_param4",
                    "3": "input4_copy"
                },
                "local_68": {
                    "1": "item3_2",
                    "2": "local_param3",
                    "3": "input3_copy"
                },
                "local_78": {
                    "1": "input2",
                    "2": "data2",
                    "3": "input2_copy"
                },
                "local_88": {
                    "1": "input1",
                    "2": "local_param1",
                    "3": "input1_copy"
                },
                "local_90": {
                    "1": "buffer",
                    "3": "param14_copy",
                    "4": "local_param14",
                    "6": "param14"
                },
                "local_98": {
                    "1": "data4",
                    "3": "param13_copy",
                    "4": "local_param13",
                    "6": "param13"
                },
                "local_a0": {
                    "1": "report_data12",
                    "3": "param12_copy",
                    "4": "local_param12",
                    "6": "param12"
                },
                "local_a8": {
                    "1": "param11_1",
                    "3": "param11_copy",
                    "4": "local_param11",
                    "6": "param11"
                },
                "local_b0": {
                    "1": "data1",
                    "3": "param10_copy",
                    "4": "local_param10",
                    "6": "param10"
                },
                "local_b8": {
                    "1": "temp_array",
                    "2": "temp_buffer",
                    "3": "local_data",
                    "5": "local_array",
                    "9": "local_buffer"
                },
                "local_c8": {
                    "1": "local_buf",
                    "12": "local_buffer",
                    "4": "buffer"
                },
                "local_d0": {
                    "1": "local_variable1",
                    "2": "buffer_pointer",
                    "4": "stack_pointer",
                    "5": "buffer_ptr",
                    "6": "buffer"
                },
                "local_d4": {
                    "1": "local_buffer_size",
                    "2": "constant",
                    "4": "offset"
                },
                "local_d8": {
                    "1": "stack_size",
                    "7": "length",
                    "8": "size"
                },
                "param_1": {
                    "1": "optional_param1",
                    "2": "arg1",
                    "3": "input_1",
                    "4": "input1",
                    "5": "data1",
                    "6": "report_param1"
                },
                "param_10": {
                    "1": "input1",
                    "2": "param_10",
                    "4": "report_param10",
                    "8": "param10"
                },
                "param_11": {
                    "1": "report_data2",
                    "2": "param_11",
                    "4": "report_param11",
                    "8": "param11"
                },
                "param_12": {
                    "1": "item12",
                    "2": "param_12",
                    "4": "report_param12",
                    "8": "param12"
                },
                "param_13": {
                    "1": "param_five",
                    "2": "value4",
                    "4": "report_param13",
                    "8": "param13"
                },
                "param_14": {
                    "1": "ptr5",
                    "2": "param_14",
                    "4": "report_param14",
                    "8": "param14"
                },
                "param_2": {
                    "1": "report_header2",
                    "2": "param2",
                    "3": "input_2",
                    "4": "input2",
                    "5": "data2",
                    "6": "report_param2"
                },
                "param_3": {
                    "1": "item3",
                    "2": "param3",
                    "3": "input_3",
                    "4": "input3",
                    "5": "data3",
                    "6": "report_param3"
                },
                "param_4": {
                    "1": "optional_param4",
                    "2": "arg4",
                    "3": "input_4",
                    "4": "input4",
                    "5": "data4",
                    "6": "report_param4"
                },
                "param_5": {
                    "1": "value5",
                    "2": "arg5",
                    "3": "input_5",
                    "4": "input5",
                    "5": "data5",
                    "6": "report_param5"
                },
                "param_6": {
                    "1": "sixth_param",
                    "2": "arg6",
                    "3": "input_6",
                    "4": "input6",
                    "5": "data6",
                    "6": "report_param6"
                },
                "param_7": {
                    "1": "value7",
                    "2": "param7",
                    "3": "input_7",
                    "4": "input7",
                    "5": "data7",
                    "6": "report_param7"
                },
                "param_8": {
                    "1": "item8",
                    "2": "param8",
                    "3": "input_8",
                    "4": "input8",
                    "5": "data8",
                    "6": "report_param8"
                },
                "param_9": {
                    "1": "report_id",
                    "2": "param9",
                    "3": "data_pointer",
                    "4": "data"
                }
            },
            "called": [
                "FUN_001038b0"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid report_data_00103910(undefined4 report_param1,undefined4 report_param2,undefined4 report_param3,undefined4 report_param4,\n                 undefined4 report_param5,undefined4 report_param6,undefined4 report_param7,undefined4 report_param8,\n                 undefined8 data,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 buffer_size;\n  undefined4 offset;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_buffer [8];\n  undefined8 param10;\n  undefined8 param11;\n  undefined8 param12;\n  undefined8 param13;\n  undefined8 param14;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  undefined4 input5_copy;\n  undefined4 input6_copy;\n  undefined4 input7_copy;\n  undefined4 input8_copy;\n  \n  if (flag != '\\0') {\n    input1_copy = report_param1;\n    input2_copy = report_param2;\n    input3_copy = report_param3;\n    input4_copy = report_param4;\n    input5_copy = report_param5;\n    input6_copy = report_param6;\n    input7_copy = report_param7;\n    input8_copy = report_param8;\n  }\n  buffer = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer = local_buffer;\n  offset = 0x30;\n  param10 = param10;\n  param11 = param11;\n  param12 = param12;\n  param13 = param13;\n  param14 = param14;\n  report(data,&buffer_size);\n  return;\n}\n\n",
            "current_name": "report_data_00103910",
            "entrypoint": "0x00103910",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103910": "report_data_00103910",
                "in_AL": "flag",
                "local_18": "input8_copy",
                "local_28": "input7_copy",
                "local_38": "input6_copy",
                "local_48": "input5_copy",
                "local_58": "input4_copy",
                "local_68": "input3_copy",
                "local_78": "input2_copy",
                "local_88": "input1_copy",
                "local_90": "param14",
                "local_98": "param13",
                "local_a0": "param12",
                "local_a8": "param11",
                "local_b0": "param10",
                "local_b8": "local_buffer",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "offset",
                "local_d8": "buffer_size",
                "param_1": "report_param1",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "report_param2",
                "param_3": "report_param3",
                "param_4": "report_param4",
                "param_5": "report_param5",
                "param_6": "report_param6",
                "param_7": "report_param7",
                "param_8": "report_param8",
                "param_9": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001039b0": {
            "additional_data": {
                "FUN_001039b0": {
                    "1": "start_main_process",
                    "2": "start_main_function",
                    "6": "process_entry",
                    "8": "start_main_loop"
                },
                "FUN_00103aa0": {
                    "1": "open_file_with_data",
                    "6": "open_file"
                },
                "__libc_start_main": {
                    "1": "start_main"
                },
                "auStack_8": {
                    "1": "stack_pointer",
                    "4": "stack_buffer",
                    "6": "stack"
                },
                "main": {
                    "1": "program_main"
                },
                "param_1": {
                    "1": "file_param1",
                    "2": "argc",
                    "6": "param1",
                    "9": "arg1"
                },
                "param_2": {
                    "1": "param_stack",
                    "2": "argv",
                    "6": "param_2",
                    "9": "arg2"
                },
                "processEntry": {
                    "1": "start_and_loop",
                    "8": "start_main_loop"
                }
            },
            "called": [
                "FUN_00109010",
                "FUN_00103aa0"
            ],
            "calling": [],
            "code": "\nvoid start_main_loop_001039b0 start_main_loop_001039b0(undefined8 arg1,undefined8 arg2)\n\n{\n  undefined stack [8];\n  \n  start_main(program_main,arg2,&stack0x00000008,0,0,arg1,stack);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "start_main_loop_001039b0",
            "entrypoint": "0x001039b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001039b0": "start_main_loop_001039b0",
                "__libc_start_main": "start_main",
                "auStack_8": "stack",
                "main": "program_main",
                "param_1": "arg1",
                "param_2": "arg2",
                "processEntry": "start_main_loop"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001039e0": {
            "called": [
                "FUN_00109020"
            ],
            "calling": [
                "FUN_00103a50"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001039f3) */\n/* WARNING: Removing unreachable block (ram,0x001039ff) */\n\nvoid FUNC_001039e0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_001039e0",
            "entrypoint": "0x001039e0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_001039e0": "FUNC_001039e0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103a10": {
            "called": [
                "FUN_001091b0"
            ],
            "calling": [
                "FUN_00103a90"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00103a34) */\n/* WARNING: Removing unreachable block (ram,0x00103a40) */\n\nvoid FUNC_00103a10(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103a10",
            "entrypoint": "0x00103a10",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103a10": "FUNC_00103a10"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103a50": {
            "additional_data": {
                "FUNC_001039e0": {
                    "1": "do_something",
                    "12": "perform_cleanup",
                    "2": "cleanup",
                    "7": "cleanup_resources"
                },
                "FUN_00103a50": {
                    "1": "initialize_if_not_done",
                    "13": "initialize_program",
                    "2": "initialize_if_needed",
                    "6": "initialize_application"
                },
                "PTR_LOOP_00108188": {
                    "1": "loop_pointer"
                }
            },
            "called": [
                "FUN_00102320",
                "FUN_001039e0"
            ],
            "calling": [],
            "code": "\nvoid initialize_program_00103a50(void)\n\n{\n  if (DAT_00108340 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00108188);\n  deregister_tm_clones();\n  DAT_00108340 = 1;\n  return;\n}\n\n",
            "current_name": "initialize_program_00103a50",
            "entrypoint": "0x00103a50",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103a50": "initialize_program_00103a50"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103a90": {
            "called": [
                "FUN_00103a10"
            ],
            "calling": [],
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "current_name": "FUN_00103a90",
            "entrypoint": "0x00103a90",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00103aa0": {
            "additional_data": {
                "FUNC_001030c0": {
                    "1": "print_string"
                },
                "FUNC_00103240": {
                    "1": "process_string"
                },
                "FUNC_00103910": {
                    "1": "non_fatal_error"
                },
                "FUNC_00104a60": {
                    "1": "fatal_error"
                },
                "FUN_00103aa0": {
                    "1": "parse_input_files",
                    "2": "parse_and_print_strings",
                    "4": "process_files",
                    "8": "extract_strings_from_file"
                },
                "__d0": {
                    "1": "dynamic_memory"
                },
                "__errno_location": {
                    "1": "get_errno_location"
                },
                "__errno_location()": {
                    "1": "errno_location()"
                },
                "__ptr": {
                    "1": "file_content",
                    "2": "ptr",
                    "3": "buffer",
                    "4": "byte_ptr2"
                },
                "__src": {
                    "1": "src_array",
                    "2": "strings",
                    "3": "string_array",
                    "4": "source_ptr"
                },
                "__stream": {
                    "1": "file_pointer1",
                    "12": "file_stream",
                    "2": "stream",
                    "3": "file",
                    "5": "file_ptr",
                    "6": "input_file"
                },
                "__stream_00": {
                    "1": "stream2",
                    "2": "file_stream_2",
                    "3": "temp_file",
                    "7": "file_stream2"
                },
                "_errno_location": {
                    "1": "get_errno_location"
                },
                "_optind": {
                    "2": "opt_index"
                },
                "_sch_istable": {
                    "1": "table"
                },
                "_stderr": {
                    "1": "stderr"
                },
                "_stdin": {
                    "1": "std_input"
                },
                "_stdout": {
                    "1": "std_output"
                },
                "bVar2": {
                    "1": "var2",
                    "12": "byte_var2",
                    "2": "byte_var"
                },
                "bVar25": {
                    "1": "escape_char_detected",
                    "2": "in_escape",
                    "3": "bool_var25",
                    "4": "bool_var",
                    "8": "bool_var1"
                },
                "bVar27": {
                    "1": "in_double_quotes",
                    "11": "bool_var2",
                    "2": "bool_var_2",
                    "3": "bool_var27"
                },
                "bVar28": {
                    "1": "string_highlight",
                    "11": "bool_var3",
                    "2": "in_double_quotes",
                    "3": "bool_var28"
                },
                "bVar3": {
                    "1": "current_byte",
                    "12": "byte_var3",
                    "2": "byte_var_3",
                    "3": "current_char"
                },
                "bfd_check_format": {
                    "3": "check_bfd_format"
                },
                "bfd_close": {
                    "3": "close_bfd"
                },
                "bfd_errmsg": {
                    "3": "get_bfd_error_message"
                },
                "bfd_get_error": {
                    "2": "get_bfd_error"
                },
                "bfd_init": {
                    "3": "initialize_bfd"
                },
                "bfd_malloc_and_get_section": {
                    "1": "allocate_and_get_bfd_section",
                    "2": "malloc_and_get_bfd_section"
                },
                "bfd_openr": {
                    "1": "open_bfd_for_reading"
                },
                "bfd_set_default_target": {
                    "2": "set_default_bfd_target"
                },
                "bfd_set_error_program_name": {
                    "3": "set_error_program_name"
                },
                "bindtextdomain": {
                    "1": "bind_textdomain",
                    "2": "bind_text_domain"
                },
                "cVar4": {
                    "1": "char_buffer",
                    "10": "char_var",
                    "9": "char_var4"
                },
                "cgettext": {
                    "1": "get_translated_text"
                },
                "dcgettext": {
                    "1": "get_translated_text"
                },
                "dgettext": {
                    "1": "get_translated_string"
                },
                "exit": {
                    "1": "exit_program"
                },
                "fatal": {
                    "1": "fatal_error",
                    "2": "print_fatal_error"
                },
                "fclose": {
                    "4": "close_file"
                },
                "feof": {
                    "1": "is_end_of_file"
                },
                "ferror": {
                    "2": "check_file_error"
                },
                "fflush": {
                    "1": "flush_buffer"
                },
                "fgetc": {
                    "1": "get_file_character"
                },
                "fopen": {
                    "4": "open_file"
                },
                "fprintf": {
                    "1": "print_to_file"
                },
                "fputs": {
                    "1": "put_string_to_file"
                },
                "fread": {
                    "4": "read_from_file"
                },
                "free": {
                    "1": "deallocate_memory",
                    "2": "free_memory"
                },
                "fseek": {
                    "1": "set_file_position",
                    "2": "set_file_pos"
                },
                "ftell": {
                    "1": "get_file_position",
                    "2": "get_file_pos"
                },
                "getopt_long": {
                    "3": "get_long_option"
                },
                "getopt_long_only": {
                    "1": "get_long_options_only"
                },
                "gettext": {
                    "1": "get_translated_string"
                },
                "halt_baddata": {
                    "1": "halt_bad_data"
                },
                "iVar5": {
                    "1": "int_var1",
                    "11": "index",
                    "2": "var5",
                    "3": "index_var",
                    "4": "int_var"
                },
                "iVar7": {
                    "1": "var_index",
                    "2": "temp_var",
                    "3": "index2",
                    "4": "loop_var"
                },
                "isdigit": {
                    "1": "is_digit_character"
                },
                "lVar11": {
                    "1": "temp_value",
                    "2": "index",
                    "3": "long_var11",
                    "5": "long_var",
                    "8": "long_var1"
                },
                "lVar22": {
                    "1": "index",
                    "2": "string_index",
                    "3": "long_var22",
                    "7": "long_var2"
                },
                "local_110": {
                    "1": "long_var_3",
                    "5": "long_var3"
                },
                "local_118": {
                    "1": "local_size_var118",
                    "2": "size_var",
                    "3": "local_size",
                    "4": "size_var3"
                },
                "local_120": {
                    "1": "ulong_var_2",
                    "2": "ulong_var5",
                    "4": "ulong_var2"
                },
                "local_128": {
                    "1": "file_content",
                    "2": "byte_ptr4",
                    "3": "file_data"
                },
                "local_138": {
                    "1": "min_string_length_str",
                    "2": "local_ptr1"
                },
                "local_140": {
                    "1": "calloc_pointer"
                },
                "local_c8": {
                    "1": "stat_info",
                    "4": "local_stat",
                    "5": "stat_struct",
                    "6": "stat_var",
                    "7": "file_stat"
                },
                "local_d0": {
                    "1": "ptr_void_local_d0",
                    "2": "local_ptr2",
                    "3": "section_data",
                    "6": "void_ptr"
                },
                "local_d8": {
                    "1": "string_var_d8",
                    "2": "error_message",
                    "3": "char_ptr3"
                },
                "malloc": {
                    "3": "allocate_memory"
                },
                "memcmp": {
                    "2": "compare_memory"
                },
                "memcpy": {
                    "1": "copy_bytes",
                    "2": "copy_memory"
                },
                "memmove": {
                    "1": "move_memory"
                },
                "move": {
                    "1": "move_memory"
                },
                "non_fatal": {
                    "1": "print_non_fatal_error"
                },
                "param_1": {
                    "31": "argc"
                },
                "param_2": {
                    "1": "input_file_argv",
                    "29": "argv"
                },
                "param_2*": {
                    "1": "param_2"
                },
                "param_2[0]": {
                    "1": "program_name"
                },
                "param_3": {
                    "1": "file_pointer"
                },
                "param_4": {
                    "1": "stderr"
                },
                "param_5": {
                    "1": "stdin"
                },
                "pbVar1": {
                    "1": "pb_var",
                    "2": "current_byte",
                    "4": "ptr1",
                    "6": "byte_ptr1"
                },
                "pbVar19": {
                    "1": "temp_buffer",
                    "2": "ptr_byte2"
                },
                "pbVar2": {
                    "2": "byte_var1"
                },
                "pbVar23": {
                    "1": "ptr_byte_23",
                    "2": "byte_ptr4",
                    "3": "byte_pointer3"
                },
                "pbVar3": {
                    "2": "byte_var2"
                },
                "pcVar20": {
                    "1": "ptr_char",
                    "2": "file_name",
                    "3": "error_message",
                    "5": "str_var"
                },
                "pcVar24": {
                    "1": "ptr_char2",
                    "2": "warning_message",
                    "3": "char_ptr2",
                    "4": "str_var2"
                },
                "perror": {
                    "1": "print_error_messages",
                    "3": "print_error"
                },
                "piVar15": {
                    "1": "errno_var",
                    "10": "int_ptr",
                    "2": "int_pointer1",
                    "3": "errno_location"
                },
                "plVar12": {
                    "1": "ptr2",
                    "2": "file_names",
                    "4": "param_ptr"
                },
                "plVar16": {
                    "1": "argv_var",
                    "2": "current_file",
                    "3": "param_ptr2"
                },
                "plVar18": {
                    "1": "param2_ptr_new2",
                    "2": "param_ptr3"
                },
                "ppuVar21": {
                    "1": "ptr_ptr_21",
                    "2": "optarg_ptr",
                    "3": "ptr_ptr"
                },
                "print_strings": {
                    "1": "print_strings"
                },
                "puVar26": {
                    "1": "section_header",
                    "2": "current_section",
                    "3": "undefined8_pointer1",
                    "6": "undefined8_ptr"
                },
                "report": {
                    "1": "generate_report",
                    "3": "print_report"
                },
                "sVar10": {
                    "1": "string_var10",
                    "10": "bytes_read",
                    "2": "size_var10",
                    "3": "read_size",
                    "4": "size2",
                    "6": "size_var2"
                },
                "sVar9": {
                    "1": "string_var9",
                    "13": "file_size",
                    "2": "size_var",
                    "4": "size1",
                    "5": "size_var1"
                },
                "setlocale": {
                    "1": "set_program_locale",
                    "3": "set_locale"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "stat": {
                    "2": "get_file_stat"
                },
                "strcmp": {
                    "4": "compare_strings"
                },
                "strcpy": {
                    "1": "copy_strings"
                },
                "strerror": {
                    "1": "get_error_message",
                    "2": "get_error_string"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "strncmp": {
                    "1": "compare_strings"
                },
                "strncpy": {
                    "1": "copy_string_n"
                },
                "strtol": {
                    "1": "convert_string_to_long"
                },
                "strtoul": {
                    "1": "parse_unsigned_long"
                },
                "textdomain": {
                    "1": "set_translation_domain",
                    "2": "text_domain"
                },
                "uVar13": {
                    "1": "var13",
                    "11": "ulong_var",
                    "2": "file_mode",
                    "3": "ulong_var1"
                },
                "uVar14": {
                    "1": "temp_ulong2",
                    "2": "uint_var3",
                    "3": "undefined8_var",
                    "4": "error_message"
                },
                "uVar17": {
                    "1": "error_msg",
                    "2": "program_name",
                    "3": "var17"
                },
                "uVar26": {
                    "1": "stat_result"
                },
                "uVar6": {
                    "1": "counter",
                    "2": "loop_counter",
                    "7": "uint_var",
                    "9": "count"
                },
                "uVar8": {
                    "1": "uint_var_2",
                    "2": "error_var",
                    "3": "undefined4_var",
                    "5": "error",
                    "6": "uint_var2"
                },
                "unaff_R12": {
                    "1": "long_pointer5",
                    "2": "unaff_r12"
                },
                "usage": {
                    "3": "print_usage"
                },
                "wchar_t": {
                    "1": "wide_char"
                },
                "xexit": {
                    "1": "program_exit",
                    "3": "exit_program"
                },
                "xmalloc": {
                    "3": "allocate_memory"
                },
                "xmalloc_set_program_name": {
                    "3": "set_program_name"
                },
                "xrealloc": {
                    "4": "reallocate_memory"
                },
                "xstrdup": {
                    "3": "duplicate_string"
                }
            },
            "called": [
                "FUN_00102040",
                "FUN_00102080",
                "FUN_001020b0",
                "FUN_001020c0",
                "FUN_00103240",
                "FUN_00102200",
                "FUN_00102110",
                "FUN_001020d0",
                "FUN_00104a60",
                "FUN_00102090",
                "FUN_001022c0",
                "FUN_00102290",
                "FUN_00102050",
                "FUN_00102060",
                "FUN_001021e0",
                "FUN_001021f0",
                "FUN_00102100",
                "FUN_00102120",
                "FUN_001020e0",
                "FUN_00102230",
                "FUN_001030c0",
                "FUN_00102190",
                "FUN_001022a0",
                "FUN_00102170",
                "FUN_00102240",
                "FUN_001020a0",
                "FUN_00102210",
                "FUN_00102260",
                "FUN_00102300",
                "FUN_00102280",
                "FUN_001022e0",
                "FUN_001021b0",
                "FUN_00102130",
                "FUN_001021c0",
                "FUN_001020f0",
                "FUN_00102160",
                "FUN_00103910",
                "FUN_00102250",
                "FUN_00102220",
                "FUN_00102310",
                "FUN_00102180",
                "FUN_00102270",
                "FUN_001022d0"
            ],
            "calling": [
                "FUN_001039b0"
            ],
            "code": "\n\n\n\nFILE * extract_strings_from_file_00103aa0(int argc,long *argv)\n\n{\n  byte *byte_ptr1;\n  byte byte_var2;\n  byte byte_var3;\n  char char_var;\n  int index;\n  uint count;\n  int loop_var;\n  undefined4 uint_var2;\n  FILE *file_stream;\n  size_t file_size;\n  size_t bytes_read;\n  byte *byte_ptr2;\n  long long_var1;\n  long *param_ptr;\n  ulong ulong_var;\n  long *source_ptr;\n  undefined8 error_message;\n  FILE *file_stream2;\n  int *int_ptr;\n  long *param_ptr2;\n  undefined8 var17;\n  long *param_ptr3;\n  byte *byte_pointer2;\n  char *str_var;\n  undefined **undefined_ptr_ptr;\n  long long_var2;\n  byte *byte_pointer3;\n  char *str_var2;\n  bool bool_var1;\n  long *unaff_r12;\n  undefined8 *undefined8_ptr;\n  bool bool_var2;\n  bool bool_var3;\n  long *long_ptr6;\n  undefined8 ulong_var4;\n  undefined8 file_data;\n  ulong ulong_var2;\n  size_t size_var3;\n  long long_var3;\n  char *char_ptr3;\n  void *void_ptr;\n  get_file_status file_stat;\n  \n  set_locale(6,\"\");\n  bind_text_domain(\"binutils\",\"/usr/share/locale\");\n  text_domain(\"binutils\");\n  DAT_00108378 = *argv;\n  set_program_name();\n  set_error_program_name(DAT_00108378);\n  param_ptr2 = argv;\n  if (argc < 2) goto LAB_00103fa6;\n  ulong_var2 = 2000;\n  unaff_r12 = (long *)0x1;\n  ulong_var4 = (long *)0x0;\n  param_ptr = argv;\n  do {\n    loop_var = (int)unaff_r12;\n    undefined_ptr_ptr = (undefined **)(long)loop_var;\n    long_ptr6 = (long *)((long)undefined_ptr_ptr * 8);\n    param_ptr2 = param_ptr;\n    if (*(char *)param_ptr[(long)undefined_ptr_ptr] == '@') {\n      count = (int)ulong_var2 - 1;\n      ulong_var2 = (ulong)count;\n      if (count == 0) {\n        long_var1 = *param_ptr;\n        str_var = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_001044b1;\n      }\n      str_var = (char *)param_ptr[(long)undefined_ptr_ptr] + 1;\n      index = get_file_status(str_var,&file_stat);\n      if (-1 < index) {\n        if ((file_stat.st_mode & 0xf000) == 0x4000) {\n          do {\n            long_var1 = *param_ptr;\n            str_var = \"%s: error: @-file refers to a directory\\n\";\nLAB_001044b1:\n            print_to_stream(stderr,str_var,long_var1);\n            exit_program(1);\n          } while( true );\n        }\n        file_stream = open_file(str_var,\"r\");\n        if (file_stream != (FILE *)0x0) {\n          index = set_file_pos(file_stream,0,2);\n          if (((index != -1) && (file_size = get_file_pos(file_stream), file_size != 0xffffffffffffffff)) &&\n             (index = set_file_pos(file_stream,0,0), index != -1)) {\n            file_data = (byte *)allocate_memory(file_size + 1);\n            bytes_read = read_from_file(file_data,1,file_size,file_stream);\n            if ((file_size == bytes_read) || (index = get_file_error(file_stream), index == 0)) {\n              file_data[bytes_read] = 0;\n              byte_var3 = *file_data;\n              byte_pointer2 = file_data;\n              while( true ) {\n                if (byte_var3 == 0) goto LAB_001040fd;\n                if (((&table)[(ulong)byte_var3 * 2] & 0x40) == 0) break;\n                byte_var3 = byte_pointer2[1];\n                byte_pointer2 = byte_pointer2 + 1;\n              }\n              file_size = get_string_length((char *)file_data);\n              byte_ptr2 = (byte *)allocate_memory(file_size + 1);\n              source_ptr = (long *)0x0;\n              index = 0;\n              long_var3 = 0;\n              bool_var1 = false;\n              bool_var3 = false;\n              bool_var2 = false;\n              byte_pointer2 = file_data;\n              do {\n                while (((&table)[(ulong)*byte_pointer2 * 2] & 0x40) != 0) {\n                  byte_pointer2 = byte_pointer2 + 1;\n                }\n                if ((index == 0) || (index + -1 <= (int)long_var3)) {\n                  if (source_ptr == (long *)0x0) {\n                    index = 8;\n                    source_ptr = (long *)allocate_memory(0x40);\n                    param_ptr3 = source_ptr + long_var3;\n                    *param_ptr3 = 0;\n                  }\n                  else {\n                    index = index * 2;\n                    source_ptr = (long *)reallocate_memory(source_ptr,(long)index << 3);\n                    param_ptr3 = source_ptr + long_var3;\n                    *param_ptr3 = 0;\n                  }\n                }\n                else {\n                  param_ptr3 = source_ptr + long_var3;\n                }\n                byte_var3 = *byte_pointer2;\n                byte_pointer3 = byte_ptr2;\n                while (byte_var3 != 0) {\n                  while( true ) {\n                    if ((((&table)[(ulong)byte_var3 * 2] & 0x40) != 0) &&\n                       (!(bool)(bool_var3 | bool_var2 | bool_var1))) {\n                      bool_var2 = false;\n                      bool_var1 = false;\n                      bool_var3 = false;\n                      goto LAB_00103d4f;\n                    }\n                    if (!bool_var2) break;\n                    byte_pointer2 = byte_pointer2 + 1;\n                    *byte_pointer3 = byte_var3;\n                    byte_pointer3 = byte_pointer3 + 1;\n                    bool_var2 = false;\n                    byte_var3 = *byte_pointer2;\n                    if (byte_var3 == 0) goto LAB_00103d4f;\n                  }\n                  if (byte_var3 == 0x5c) {\n                    bool_var2 = true;\n                  }\n                  else if (bool_var3) {\n                    if (byte_var3 == 0x27) {\n                      bool_var3 = false;\n                    }\n                    else {\nLAB_00103ec8:\n                      *byte_pointer3 = byte_var3;\n                      byte_pointer3 = byte_pointer3 + 1;\n                    }\n                  }\n                  else if (bool_var1) {\n                    if (byte_var3 != 0x22) goto LAB_00103ec8;\n                    bool_var1 = false;\n                  }\n                  else if (byte_var3 == 0x27) {\n                    bool_var3 = true;\n                  }\n                  else {\n                    if (byte_var3 != 0x22) goto LAB_00103ec8;\n                    bool_var1 = true;\n                  }\n                  byte_ptr1 = byte_pointer2 + 1;\n                  byte_pointer2 = byte_pointer2 + 1;\n                  byte_var3 = *byte_ptr1;\n                }\nLAB_00103d4f:\n                *byte_pointer3 = 0;\n                long_var1 = duplicate_string(byte_ptr2);\n                *param_ptr3 = long_var1;\n                source_ptr[long_var3 + 1] = 0;\n                byte_var3 = *byte_pointer2;\n                byte_var2 = (&table)[(ulong)byte_var3 * 2];\n                while ((byte_var2 & 0x40) != 0) {\n                  byte_var3 = byte_pointer2[1];\n                  byte_pointer2 = byte_pointer2 + 1;\n                  byte_var2 = (&table)[(ulong)byte_var3 * 2];\n                }\n                long_var3 = long_var3 + 1;\n                if (byte_var3 == 0) {\n                  free_memory(byte_ptr2);\n                  if (param_ptr == argv) goto LAB_0010411e;\n                  goto LAB_00103dea;\n                }\n              } while( true );\n            }\n            free_memory(file_data);\n          }\n          close_file(file_stream);\n        }\n      }\n    }\n    if (argc <= loop_var + 1) {\nLAB_00103fa6:\n      DAT_00108373 = 0;\n      file_stream = (FILE *)0x0;\n      DAT_00108372 = 0;\n      undefined_ptr_ptr = &PTR_DAT_001081a0;\n      DAT_00108374 = 4;\n      DAT_00108371 = 0;\n      DAT_00108370 = '\\0';\n      DAT_00108368 = (long *)0x0;\n      DAT_00108360 = 's';\n      DAT_00108358 = (long *)0x0;\n      str_var = \"adfhHn:wot:e:T:s:U:Vv0123456789\";\nLAB_00103ff6:\n      while( true ) {\n        loop_var = (int)unaff_r12;\n        index = get_long_option(argc,param_ptr2,str_var);\n        if (index == -1) break;\n        param_ptr = (long *)str_var;\n        switch(index) {\n        case 0x3f:\n          goto switchD_00104029_caseD_3f;\n        case 0x48:\n        case 0x68:\nswitchD_00104029_caseD_48:\n          print_usage(stdout,0);\n          goto LAB_001044f5;\n        case 0x54:\nswitchD_00104201_caseD_54:\n          unaff_r12 = (long *)&optarg;\n          DAT_00108368 = _optarg;\n          break;\n        case 0x55:\nswitchD_00104201_caseD_55:\n          unaff_r12 = _optarg;\n          loop_var = compare_strings((char *)_optarg,\"default\");\n          if ((loop_var == 0) || (loop_var = compare_strings((char *)unaff_r12,\"d\"), loop_var == 0)) {\n            DAT_00108350 = 0;\n          }\n          else {\n            loop_var = compare_strings((char *)unaff_r12,\"locale\");\n            if ((loop_var == 0) || (loop_var = compare_strings((char *)unaff_r12,\"l\"), loop_var == 0)) {\n              DAT_00108350 = 1;\n            }\n            else {\n              loop_var = compare_strings((char *)unaff_r12,\"escape\");\n              if ((loop_var == 0) || (loop_var = compare_strings((char *)unaff_r12,\"e\"), loop_var == 0)) {\n                DAT_00108350 = 2;\n              }\n              else {\n                loop_var = compare_strings((char *)unaff_r12,\"invalid\");\n                if ((loop_var == 0) || (loop_var = compare_strings((char *)unaff_r12,\"i\"), loop_var == 0)) {\n                  DAT_00108350 = 5;\n                }\n                else {\n                  loop_var = compare_strings((char *)unaff_r12,\"hex\");\n                  if ((loop_var == 0) || (loop_var = compare_strings((char *)unaff_r12,\"x\"), loop_var == 0)) {\n                    DAT_00108350 = 3;\n                  }\n                  else {\n                    loop_var = compare_strings((char *)unaff_r12,\"highlight\");\n                    if ((loop_var != 0) && (loop_var = compare_strings((char *)unaff_r12,\"h\"), loop_var != 0)) {\n                      error_message = get_translated_string(0,\"invalid argument to -U/--unicode: %s\",5);\n                      print_fatal_error(error_message);\n                      print_report();\n                      exit_program(1);\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                      halt_bad_data();\n                    }\n                    DAT_00108350 = 4;\n                  }\n                }\n              }\n            }\n          }\n          break;\n        case 0x56:\n        case 0x76:\nswitchD_00104029_caseD_56:\n          printf(\"GNU %s %s\\n\",\"strings\",\"(GNU Binutils for Debian) 2.40\");\n          str_var = (char *)get_translated_string(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n          printf(str_var);\n          str_var = (char *)get_translated_string(0,\n                                      \"This program is free_memory software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                      ,5);\n          printf(str_var);\n                    \n          exit_program(0);\n        case 0x61:\n          goto switchD_00104029_caseD_61;\n        case 100:\nswitchD_00104029_caseD_64:\n          DAT_00108370 = '\\x01';\n          break;\n        case 0x65:\n          unaff_r12 = (long *)&optarg;\n          loop_var = 0x109108;\n          if (*(char *)((long)_optarg + 1) != '\\0') goto switchD_00104029_caseD_3f;\n          DAT_00108360 = *(char *)_optarg;\n          index = get_long_option(argc,param_ptr2,str_var);\n          if (index == -1) goto LAB_0010407f;\n          switch(index) {\n          case 0x3f:\n            goto switchD_00104029_caseD_3f;\n          case 0x48:\n          case 0x68:\n            goto switchD_00104029_caseD_48;\n          case 0x54:\n            goto switchD_00104201_caseD_54;\n          case 0x55:\n            goto switchD_00104201_caseD_55;\n          case 0x56:\n          case 0x76:\n            goto switchD_00104029_caseD_56;\n          case 0x61:\n            goto switchD_00104029_caseD_61;\n          case 100:\n            goto switchD_00104029_caseD_64;\n          case 0x65:\nswitchD_00104201_caseD_65:\n            if (*(char *)((long)_optarg + 1) != '\\0') goto switchD_00104029_caseD_3f;\n            DAT_00108360 = *(char *)_optarg;\n            index = get_long_option(argc,param_ptr2,str_var);\n            if (index == -1) goto LAB_0010407f;\n            switch(index) {\n            case 0x3f:\n              goto switchD_00104029_caseD_3f;\n            default:\n              break;\n            case 0x48:\n            case 0x68:\n              goto switchD_00104029_caseD_48;\n            case 0x54:\n              goto switchD_00104201_caseD_54;\n            case 0x55:\n              goto switchD_00104201_caseD_55;\n            case 0x56:\n            case 0x76:\n              goto switchD_00104029_caseD_56;\n            case 0x61:\n              goto switchD_00104029_caseD_61;\n            case 100:\n              goto switchD_00104029_caseD_64;\n            case 0x65:\n              goto switchD_00104201_caseD_65;\n            case 0x66:\n              goto switchD_00104029_caseD_66;\n            case 0x6e:\n              goto switchD_00104201_caseD_6e;\n            case 0x6f:\n              goto switchD_00104029_caseD_6f;\n            case 0x73:\n              goto switchD_00104201_caseD_73;\n            case 0x74:\n              goto switchD_00104201_caseD_74;\n            case 0x77:\n              goto switchD_00104029_caseD_77;\n            }\n          case 0x66:\n            goto switchD_00104029_caseD_66;\n          case 0x6e:\n            goto switchD_00104201_caseD_6e;\n          case 0x6f:\n            goto switchD_00104029_caseD_6f;\n          case 0x73:\n            goto switchD_00104201_caseD_73;\n          case 0x74:\n            goto switchD_00104201_caseD_74;\n          case 0x77:\n            goto switchD_00104029_caseD_77;\n          }\n        default:\n          file_stream = (FILE *)(ulong)opt_index;\n          break;\n        case 0x66:\nswitchD_00104029_caseD_66:\n          DAT_00108371 = 1;\n          break;\n        case 0x6e:\nswitchD_00104201_caseD_6e:\n          unaff_r12 = (long *)&optarg;\n          ulong_var = parse_unsigned_long((char *)_optarg,&char_ptr3,0);\n          DAT_00108374 = (int)ulong_var;\n          if ((char_ptr3 != (char *)0x0) && (param_ptr = _optarg, *char_ptr3 != '\\0')) {\nLAB_001042e6:\n            error_message = get_translated_string(0,\"invalid integer argument %s\",5);\n            print_fatal_error(error_message,param_ptr);\n            goto switchD_00104201_caseD_73;\n          }\n          break;\n        case 0x6f:\nswitchD_00104029_caseD_6f:\n          DAT_00108372 = 1;\n          DAT_00108354 = 8;\n          break;\n        case 0x73:\nswitchD_00104201_caseD_73:\n          unaff_r12 = (long *)&optarg;\n          DAT_00108358 = _optarg;\n          str_var = (char *)param_ptr;\n          break;\n        case 0x74:\nswitchD_00104201_caseD_74:\n          unaff_r12 = (long *)&optarg;\n          loop_var = 0x109108;\n          DAT_00108372 = 1;\n          if (*(char *)((long)_optarg + 1) != '\\0') goto switchD_00104029_caseD_3f;\n          char_var = *(char *)_optarg;\n          if (char_var == 'o') {\n            DAT_00108354 = 8;\n          }\n          else if (char_var == 'x') {\n            DAT_00108354 = 0x10;\n          }\n          else {\n            if (char_var != 'd') goto switchD_00104029_caseD_3f;\n            DAT_00108354 = 10;\n          }\n          break;\n        case 0x77:\n          goto switchD_00104029_caseD_77;\n        }\n      }\nLAB_0010407f:\n      if (DAT_00108350 != 0) {\n        DAT_00108360 = 'S';\n      }\n      if ((int)file_stream != 0) {\nLAB_001044f5:\n        str_var = (char *)(param_ptr2 + (long)(int)file_stream + -1);\n        ulong_var = parse_unsigned_long((char *)(*(long *)str_var + 1),&char_ptr3,0);\n        DAT_00108374 = (int)ulong_var;\n        if ((char_ptr3 != (char *)0x0) && (*char_ptr3 != '\\0')) {\n          param_ptr = (long *)(*(long *)str_var + 1);\n          goto LAB_001042e6;\n        }\n      }\n      loop_var = (int)unaff_r12;\n      if (DAT_00108374 == 0) {\n        error_message = get_translated_string(0,\"invalid minimum string length %d\",5);\n        print_fatal_error(error_message,0);\nswitchD_00104029_caseD_61:\n        DAT_00108370 = '\\0';\n        goto LAB_00103ff6;\n      }\n      if (0x31 < (byte)(DAT_00108360 + 0xbeU)) goto switchD_00104029_caseD_3f;\n      ulong_var = 1L << (DAT_00108360 + 0xbeU & 0x3f);\n      if ((ulong_var & 0x2000000020000) == 0) {\n        if ((ulong_var & 0x401) == 0) {\n          if ((ulong_var & 0x40100000000) == 0) goto switchD_00104029_caseD_3f;\n          DAT_0010834c = 2;\n        }\n        else {\n          DAT_0010834c = 4;\n        }\n      }\n      else {\n        DAT_0010834c = 1;\n      }\n      loop_var = initialize_bfd();\n      if (loop_var == 0x118) {\n        str_var = \"x86_64-pc-linux-gnu\";\n        count = set_default_bfd_target(\"x86_64-pc-linux-gnu\");\n        if ((char)count != '\\0') {\n          undefined_ptr_ptr = (undefined **)&optind;\n          if (argc <= (int)opt_index) {\n            DAT_00108370 = 0;\n            print_strings(\"{standard input}\",std_input,0,0,0);\n            return (FILE *)0x0;\n          }\n          ulong_var = 0;\n          file_stream = (FILE *)0x0;\n          param_ptr = (long *)(ulong)count;\n          count = opt_index;\n          long_ptr6 = param_ptr2;\n          goto LAB_001043b8;\n        }\n        uint_var2 = get_bfd_error();\n        undefined_ptr_ptr = (undefined **)get_bfd_error_message(uint_var2);\n        error_message = get_translated_string(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        print_fatal_error(error_message,\"x86_64-pc-linux-gnu\",undefined_ptr_ptr);\n      }\n      error_message = get_translated_string(0,\"print_fatal_error error: libbfd ABI mismatch\",5);\n      print_fatal_error(error_message);\n      param_ptr = param_ptr2;\nLAB_0010462b:\n      str_var2 = \"Warning: \\'%s\\' is a directory\";\nLAB_00104637:\n      error_message = get_translated_string(0,str_var2,5);\n      print_non_fatal_error(error_message,str_var);\n      count = 0;\n      do {\n        while( true ) {\n          ulong_var = (ulong)param_ptr & 0xffffffff;\n          file_stream = (FILE *)(ulong)((uint)file_stream | (count ^ 1) & 0xff);\n          while( true ) {\n            loop_var = (int)ulong_var;\n            count = *(uint *)undefined_ptr_ptr + 1;\n            *(uint *)undefined_ptr_ptr = count;\n            if (argc <= (int)count) {\n              param_ptr2 = param_ptr;\n              if ((char)ulong_var != '\\0') {\n                return file_stream;\n              }\n              goto switchD_00104029_caseD_3f;\n            }\nLAB_001043b8:\n            str_var = (char *)long_ptr6[(int)count];\n            loop_var = compare_strings(str_var,\"-\");\n            if (loop_var != 0) break;\n            DAT_00108370 = '\\0';\n          }\n          loop_var = get_file_status(str_var,&file_stat);\n          if (loop_var < 0) break;\n          if ((file_stat.st_mode & 0xf000) == 0x4000) goto LAB_0010462b;\n          if ((DAT_00108370 == '\\0') ||\n             (param_ptr2 = (long *)open_bfd_for_reading(str_var,DAT_00108368), param_ptr2 == (long *)0x0)) {\nLAB_00104416:\n            file_stream2 = open_file(str_var,\"r\");\n            if (file_stream2 != (FILE *)0x0) {\n              print_strings(str_var,file_stream2,0,0,0);\n              loop_var = close_file(file_stream2);\n              if (loop_var != -1) goto LAB_00104454;\n            }\n            print_to_stream(stderr,\"%s: \",DAT_00108378);\n            print_error(str_var);\n            count = 0;\n          }\n          else {\n            char_var = check_bfd_format(param_ptr2,1);\n            if (char_var == '\\0') {\n              close_bfd();\n              ulong_var4 = param_ptr2;\n              goto LAB_00104416;\n            }\n            undefined8_ptr = (undefined8 *)param_ptr2[0x12];\n            ulong_var4 = (long *)((ulong)param_ptr2 & 0xffffffffffffff00);\n            file_data = (byte *)CONCAT44(file_data._4_4_,argc);\n            for (; undefined8_ptr != (undefined8 *)0x0; undefined8_ptr = (undefined8 *)undefined8_ptr[1]) {\n              char_var = (char)ulong_var4;\n              if (((*(uint *)((long)undefined8_ptr + 0x24) & 0x103) == 0x103) &&\n                 (ulong_var2 = undefined8_ptr[8], ulong_var2 != 0)) {\n                char_var = malloc_and_get_bfd_section(param_ptr2,undefined8_ptr,&void_ptr);\n                if (char_var == '\\0') {\n                  uint_var2 = get_bfd_error();\n                  ulong_var2 = get_bfd_error_message(uint_var2);\n                  error_message = *undefined8_ptr;\n                  var17 = get_translated_string(0,\"%s: Reading section %s failed: %s\",5);\n                  print_non_fatal_error(var17,str_var,error_message);\n                  char_var = (char)ulong_var4;\n                }\n                else {\n                  print_strings(str_var,0,undefined8_ptr[0x10],ulong_var2,void_ptr);\n                  free_memory(void_ptr);\n                }\n              }\n              ulong_var4 = (long *)CONCAT71(ulong_var4._1_7_,char_var);\n            }\n            param_ptr = (long *)((ulong)param_ptr & 0xff);\n            char_var = close_bfd(param_ptr2);\n            if (char_var == '\\0') {\n              loop_var = get_bfd_error();\n              if (loop_var == 0) {\n                error_message = get_translated_string(0,\"cause of error unknown\",5);\n                flush_buffer(stdout);\n              }\n              else {\n                error_message = get_bfd_error_message();\n                flush_buffer(stdout);\n              }\n              print_to_stream(stderr,\"%s: %s: %s\\n\",DAT_00108378,str_var,error_message);\n              goto LAB_00104416;\n            }\n            bool_var3 = (char)ulong_var4 == '\\0';\n            if (bool_var3) goto LAB_00104416;\nLAB_00104454:\n            count = (uint)param_ptr;\n          }\n        }\n        int_ptr = errno_location();\n        str_var2 = \"\\'%s\\': No such file\";\n        if (*int_ptr == 2) goto LAB_00104637;\n        str_var2 = get_error_string(*int_ptr);\n        error_message = get_translated_string(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_non_fatal_error(error_message,str_var,str_var2);\n        count = 0;\n      } while( true );\n    }\n    count = loop_var + 1;\n    ulong_var4 = unaff_r12;\nLAB_00103eac:\n    unaff_r12 = (long *)(ulong)count;\n  } while( true );\nswitchD_00104029_caseD_77:\n  DAT_00108373 = 1;\n  goto LAB_00103ff6;\nswitchD_00104029_caseD_3f:\n  print_usage(stderr);\nLAB_001040fd:\n  source_ptr = (long *)allocate_memory(8);\n  *source_ptr = 0;\n  if (param_ptr2 == argv) {\nLAB_0010411e:\n    if (*param_ptr2 == 0) {\n      index = 0;\n    }\n    else {\n      long_var1 = 1;\n      do {\n        index = (int)long_var1;\n        param_ptr = param_ptr2 + long_var1;\n        long_var1 = long_var1 + 1;\n      } while (*param_ptr != 0);\n    }\n    long_var2 = 0;\n    param_ptr = (long *)allocate_memory((long)(index + 1) << 3);\n    long_var1 = *param_ptr2;\n    while (long_var1 != 0) {\n      error_message = duplicate_string();\n      *(undefined8 *)((long)param_ptr + long_var2) = error_message;\n      long_var2 = long_var2 + 8;\n      long_var1 = *(long *)((long)param_ptr2 + long_var2);\n    }\n    *(undefined8 *)((long)param_ptr + long_var2) = 0;\nLAB_00103dea:\n    param_ptr2 = param_ptr;\n    if (*source_ptr != 0) {\n      long_var1 = 0;\n      do {\n        long_var1 = long_var1 + 1;\n      } while (source_ptr[long_var1] != 0);\n      size_var3 = long_var1 * 8;\n      index = argc;\n      goto LAB_00103e18;\n    }\n  }\n  long_var1 = 0;\n  size_var3 = 0;\n  index = argc;\nLAB_00103e18:\n  free_memory((void *)param_ptr2[(long)undefined_ptr_ptr]);\n  param_ptr = (long *)reallocate_memory(param_ptr2,(long_var1 + 1 + (long)index) * 8);\n  argc = index + -1 + (int)long_var1;\n  move_bytes(param_ptr + (long)((long)undefined_ptr_ptr + long_var1),(void *)((long)(param_ptr + 1) + (long)long_ptr6),\n          (long)(index - loop_var) << 3);\n  copy_memory((void *)((long)param_ptr + (long)long_ptr6),source_ptr,size_var3);\n  free_memory(source_ptr);\n  free_memory(file_data);\n  close_file(file_stream);\n  count = (int)ulong_var4 + 1;\n  unaff_r12 = long_ptr6;\n  param_ptr2 = param_ptr;\n  long_ptr6 = source_ptr;\n  if ((int)count < argc) goto LAB_00103eac;\n  goto LAB_00103fa6;\n}\n\n",
            "current_name": "extract_strings_from_file_00103aa0",
            "entrypoint": "0x00103aa0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103aa0": "extract_strings_from_file_00103aa0",
                "__errno_location": "get_errno_location",
                "__errno_location()": "errno_location()",
                "__ptr": "byte_ptr2",
                "__src": "source_ptr",
                "__stream": "file_stream",
                "__stream_00": "file_stream2",
                "_errno_location": "get_errno_location",
                "_optind": "opt_index",
                "_sch_istable": "table",
                "_stderr": "stderr",
                "_stdin": "std_input",
                "_stdout": "stdout",
                "bVar2": "byte_var2",
                "bVar25": "bool_var1",
                "bVar27": "bool_var2",
                "bVar28": "bool_var3",
                "bVar3": "byte_var3",
                "bfd_check_format": "check_bfd_format",
                "bfd_close": "close_bfd",
                "bfd_errmsg": "get_bfd_error_message",
                "bfd_get_error": "get_bfd_error",
                "bfd_init": "initialize_bfd",
                "bfd_malloc_and_get_section": "malloc_and_get_bfd_section",
                "bfd_openr": "open_bfd_for_reading",
                "bfd_set_default_target": "set_default_bfd_target",
                "bfd_set_error_program_name": "set_error_program_name",
                "bindtextdomain": "bind_text_domain",
                "cVar4": "char_var",
                "cgettext": "get_translated_text",
                "dcgettext": "get_translated_string",
                "exit": "exit_program",
                "fatal": "print_fatal_error",
                "fclose": "close_file",
                "ferror": "get_file_error",
                "fflush": "flush_buffer",
                "fopen": "open_file",
                "fprintf": "print_to_stream",
                "fread": "read_from_file",
                "free": "free_memory",
                "fseek": "set_file_pos",
                "ftell": "get_file_pos",
                "getopt_long": "get_long_option",
                "gettext": "get_translated_string",
                "halt_baddata": "halt_bad_data",
                "iVar5": "index",
                "iVar7": "loop_var",
                "lVar11": "long_var1",
                "lVar22": "long_var2",
                "local_110": "long_var3",
                "local_118": "size_var3",
                "local_120": "ulong_var2",
                "local_128": "file_data",
                "local_138": "ulong_var4",
                "local_140": "long_ptr6",
                "local_c8": "file_stat",
                "local_d0": "void_ptr",
                "local_d8": "char_ptr3",
                "malloc": "allocate_memory",
                "memcpy": "copy_memory",
                "memmove": "move_bytes",
                "move": "move_memory",
                "non_fatal": "print_non_fatal_error",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "byte_ptr1",
                "pbVar19": "byte_pointer2",
                "pbVar2": "byte_var1",
                "pbVar23": "byte_pointer3",
                "pcVar20": "str_var",
                "pcVar24": "str_var2",
                "perror": "print_error",
                "piVar15": "int_ptr",
                "plVar12": "param_ptr",
                "plVar16": "param_ptr2",
                "plVar18": "param_ptr3",
                "ppuVar21": "undefined_ptr_ptr",
                "puVar26": "undefined8_ptr",
                "report": "print_report",
                "sVar10": "bytes_read",
                "sVar9": "file_size",
                "setlocale": "set_locale",
                "stat": "get_file_status",
                "strcmp": "compare_strings",
                "strerror": "get_error_string",
                "strlen": "get_string_length",
                "strtoul": "parse_unsigned_long",
                "textdomain": "text_domain",
                "uVar13": "ulong_var",
                "uVar14": "error_message",
                "uVar17": "var17",
                "uVar26": "stat_result",
                "uVar6": "count",
                "uVar8": "uint_var2",
                "unaff_R12": "unaff_r12",
                "usage": "print_usage",
                "xexit": "exit_program",
                "xmalloc": "allocate_memory",
                "xmalloc_set_program_name": "set_program_name",
                "xrealloc": "reallocate_memory",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104a60": {
            "additional_data": {
                "FUN_00104a60": {
                    "1": "execute_report",
                    "2": "extract_and_report_data",
                    "3": "execute_report_and_exit",
                    "7": "process_data",
                    "9": "report_and_exit"
                },
                "halt_baddata": {
                    "2": "halt_execution"
                },
                "in_AL": {
                    "1": "is_non_zero",
                    "10": "flag",
                    "3": "condition"
                },
                "local_18": {
                    "1": "var13",
                    "2": "input8",
                    "3": "input8_copy"
                },
                "local_28": {
                    "1": "param_7_local",
                    "2": "local_param7",
                    "3": "input7_copy"
                },
                "local_38": {
                    "1": "value20",
                    "2": "input6",
                    "3": "input6_copy"
                },
                "local_48": {
                    "1": "var10",
                    "2": "value5_copy",
                    "3": "input5_copy"
                },
                "local_58": {
                    "1": "input_4_copy",
                    "2": "input4",
                    "3": "input4_copy"
                },
                "local_68": {
                    "1": "input3new",
                    "2": "value3_copy",
                    "3": "input3_copy"
                },
                "local_78": {
                    "1": "second_param_copy",
                    "2": "input2",
                    "3": "input2_copy"
                },
                "local_88": {
                    "1": "input_param1_copy",
                    "2": "value1_copy",
                    "3": "input1_copy"
                },
                "local_90": {
                    "1": "local_variable_9",
                    "2": "param6",
                    "3": "param_14_copy"
                },
                "local_98": {
                    "1": "local_argument_13",
                    "2": "value4",
                    "3": "param_13_copy"
                },
                "local_a0": {
                    "1": "local_param_12",
                    "2": "value12_copy",
                    "3": "param_12_copy"
                },
                "local_a8": {
                    "1": "local_param7",
                    "2": "value11_copy",
                    "3": "param_11_copy"
                },
                "local_b0": {
                    "1": "temp_output1",
                    "2": "value10_copy",
                    "3": "param_10_copy"
                },
                "local_b8": {
                    "1": "data",
                    "2": "temp_array",
                    "4": "buffer",
                    "7": "local_array"
                },
                "local_c8": {
                    "1": "local_buf",
                    "15": "local_buffer",
                    "2": "local_variable_4",
                    "3": "buffer"
                },
                "local_d0": {
                    "1": "local_var_address",
                    "2": "local_variable_3",
                    "9": "buffer"
                },
                "local_d4": {
                    "1": "local4_size",
                    "2": "constant",
                    "3": "local_variable_2",
                    "6": "length"
                },
                "local_d8": {
                    "1": "size1",
                    "13": "size",
                    "2": "local_size",
                    "3": "local_variable_1"
                },
                "param_1": {
                    "1": "input_1",
                    "2": "report_param1",
                    "3": "value1",
                    "4": "arg1",
                    "8": "input1"
                },
                "param_10": {
                    "1": "report_param10",
                    "2": "value1",
                    "3": "data1",
                    "4": "param10"
                },
                "param_11": {
                    "1": "var2",
                    "2": "value11",
                    "3": "param3",
                    "4": "param11"
                },
                "param_12": {
                    "1": "output4",
                    "2": "value12",
                    "3": "param_12",
                    "4": "param12"
                },
                "param_13": {
                    "1": "param_d",
                    "2": "value4",
                    "3": "param_13",
                    "4": "param13"
                },
                "param_14": {
                    "1": "main_param5",
                    "2": "value14",
                    "3": "param6",
                    "4": "param14"
                },
                "param_2": {
                    "1": "description_of_param_2",
                    "2": "report_param2",
                    "3": "value2",
                    "4": "arg2",
                    "8": "input2"
                },
                "param_3": {
                    "1": "input_3",
                    "2": "report_param3",
                    "3": "value3",
                    "4": "arg3",
                    "8": "input3"
                },
                "param_4": {
                    "1": "report_param_4",
                    "2": "data4",
                    "3": "value4",
                    "4": "arg4",
                    "8": "input4"
                },
                "param_5": {
                    "1": "argument_5",
                    "2": "report_param5",
                    "3": "value5",
                    "4": "arg5",
                    "8": "input5"
                },
                "param_6": {
                    "1": "input_param6",
                    "2": "data6",
                    "3": "value6",
                    "4": "arg6",
                    "8": "input6"
                },
                "param_7": {
                    "1": "input_7",
                    "2": "data7",
                    "3": "value7",
                    "4": "arg7",
                    "8": "input7"
                },
                "param_8": {
                    "1": "extracted_param_8",
                    "2": "data8",
                    "3": "value8",
                    "4": "arg8",
                    "8": "input8"
                },
                "param_9": {
                    "1": "input_param_9",
                    "2": "data",
                    "3": "param"
                },
                "report": {
                    "1": "send_report"
                },
                "xexit": {
                    "2": "exit_program"
                }
            },
            "called": [
                "FUN_001038b0",
                "FUN_00102280"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nvoid report_and_exit_00104a60(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param1,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 length;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_array [8];\n  undefined8 param_10_copy;\n  undefined8 param_11_copy;\n  undefined8 param_12_copy;\n  undefined8 param_13_copy;\n  undefined8 param_14_copy;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  undefined4 input5_copy;\n  undefined4 input6_copy;\n  undefined4 input7_copy;\n  undefined4 input8_copy;\n  \n  if (flag != '\\0') {\n    input1_copy = input1;\n    input2_copy = input2;\n    input3_copy = input3;\n    input4_copy = input4;\n    input5_copy = input5;\n    input6_copy = input6;\n    input7_copy = input7;\n    input8_copy = input8;\n  }\n  buffer = &stack0x00000008;\n  size = 8;\n  local_buffer = local_array;\n  length = 0x30;\n  param_10_copy = param10;\n  param_11_copy = param11;\n  param_12_copy = param12;\n  param_13_copy = param13;\n  param_14_copy = param14;\n  report_data(param1,&size);\n  exit_program(1);\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_execution();\n}\n\n",
            "current_name": "report_and_exit_00104a60",
            "entrypoint": "0x00104a60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104a60": "report_and_exit_00104a60",
                "halt_baddata": "halt_execution",
                "in_AL": "flag",
                "local_18": "input8_copy",
                "local_28": "input7_copy",
                "local_38": "input6_copy",
                "local_48": "input5_copy",
                "local_58": "input4_copy",
                "local_68": "input3_copy",
                "local_78": "input2_copy",
                "local_88": "input1_copy",
                "local_90": "param_14_copy",
                "local_98": "param_13_copy",
                "local_a0": "param_12_copy",
                "local_a8": "param_11_copy",
                "local_b0": "param_10_copy",
                "local_b8": "local_array",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "length",
                "local_d8": "size",
                "param_1": "input1",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param1",
                "report": "report_data",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104af4": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_00104af4(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00104af4",
            "entrypoint": "0x00104af4",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00104af4": "FUNC_00104af4"
            },
            "skipped": true,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_00102000",
            "FUN_00102020",
            "FUN_00102771",
            "FUN_001027e2",
            "FUN_0010282b",
            "FUN_00102853",
            "FUN_0010286f",
            "FUN_001028b2",
            "FUN_0010290e",
            "FUN_0010293a",
            "FUN_001030c0",
            "FUN_001034fa",
            "FUN_00103510",
            "FUN_00103520",
            "FUN_00103890",
            "FUN_001038b0",
            "FUN_00103910",
            "FUN_001039b0",
            "FUN_00103a50",
            "FUN_00103aa0",
            "FUN_00104a60"
        ],
        [
            "FUN_00103810"
        ],
        [
            "FUN_00102b11",
            "FUN_001034d5"
        ],
        [
            "FUN_00102330",
            "FUN_0010259a",
            "FUN_00103240"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 186524
}