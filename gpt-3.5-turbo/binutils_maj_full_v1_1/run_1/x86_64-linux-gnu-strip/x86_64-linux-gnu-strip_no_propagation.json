{
    "functions": {
        "FUN_00104020": {
            "additional_data": {
                "*undefined": {
                    "1": "target_address"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "DAT_": {
                    "1": ""
                },
                "FUN_00104020": {
                    "1": "call_indirect_jump",
                    "19": "execute_indirect_jump",
                    "3": "execute_indirect_call",
                    "4": "execute_function"
                },
                "PTR_": {
                    "1": ""
                },
                "PTR_00104020": {
                    "1": "function_ptr"
                },
                "PTR_UNDEFINED": {
                    "1": "code_pointer"
                },
                "PTR_undefined": {
                    "1": "target_address"
                },
                "Undefined": {
                    "1": "function_pointer"
                },
                "code": {
                    "1": "indirect_jump_function",
                    "3": "function_pointer"
                },
                "undefined": {
                    "1": "ptr_to_function",
                    "4": "target_address"
                },
                "undefined *": {
                    "1": "jump_target"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_indirect_jump_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(function_pointer *)(function_address *)0x0)();\n  return;\n}\n\n",
            "current_name": "execute_indirect_jump_00104020",
            "entrypoint": "0x00104020",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104020": "execute_indirect_jump_00104020",
                "code": "function_pointer",
                "undefined": "function_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104920": {
            "additional_data": {
                "5": {
                    "1": "category"
                },
                "FUND_00104920": {
                    "1": "validate_and_report_error"
                },
                "FUN_00104920": {
                    "1": "display_error_message",
                    "2": "validate_input",
                    "4": "validate_number",
                    "5": "print_error_message",
                    "7": "print_bad_number_error_message"
                },
                "FUN_00119dd0": {
                    "1": "report_error"
                },
                "dcgettext": {
                    "1": "retrieve_localized_text",
                    "2": "get_translated_string"
                },
                "param_1": {
                    "1": "error_message_format",
                    "2": "unknown_param1"
                },
                "param_2": {
                    "1": "param2",
                    "2": "unknown_param2"
                },
                "param_3": {
                    "1": "undefined_param3",
                    "2": "unknown_param3"
                },
                "param_4": {
                    "1": "undefined_param4",
                    "2": "unknown_param4"
                },
                "uVar1": {
                    "1": "error_msg",
                    "24": "error_message",
                    "6": "error_string"
                }
            },
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "calling": [
                "FUN_00119940"
            ],
            "code": "\nvoid print_bad_number_error_message_00104920(void)\n\n{\n  undefined8 error_message;\n  \n  error_message = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  FUN_00119dd0(error_message);\n}\n\n",
            "current_name": "print_bad_number_error_message_00104920",
            "entrypoint": "0x00104920",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104920": "print_bad_number_error_message_00104920",
                "dcgettext": "get_message",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104943": {
            "additional_data": {
                "FUN_00104943": {
                    "1": "print_arch_mach_info",
                    "2": "print_formatted_output",
                    "3": "print_arch_mach_details"
                },
                "_stdout": {
                    "1": "stdout",
                    "2": "standard_output"
                },
                "iVar1": {
                    "1": "int_value",
                    "2": "converted_number",
                    "3": "converted_int",
                    "5": "default_value"
                },
                "iVar2": {
                    "1": "counter",
                    "12": "comparison_result",
                    "2": "strcmp_result"
                },
                "iVar7": {
                    "1": "counter",
                    "2": "arch_counter",
                    "3": "arch_mach_counter",
                    "5": "arch_index",
                    "7": "arch_mach_index"
                },
                "iVar9": {
                    "1": "section_start",
                    "2": "inner_loop_index",
                    "3": "current_index"
                },
                "in_RAX": {
                    "1": "input_str",
                    "28": "input_string"
                },
                "lVar3": {
                    "1": "int_value",
                    "11": "converted_value",
                    "2": "converted_number",
                    "3": "converted_long"
                },
                "lVar8": {
                    "1": "current_arch",
                    "2": "string_index"
                },
                "param_11": {
                    "1": "arch_data",
                    "2": "arch_mach_info",
                    "5": "arch_mach"
                },
                "param_13": {
                    "1": "extracted_data",
                    "2": "data_ptr",
                    "3": "binary_data",
                    "5": "data_array"
                },
                "param_7": {
                    "1": "start_loop_index",
                    "2": "max_index",
                    "7": "max_iterations"
                },
                "pcVar5": {
                    "1": "printable_arch",
                    "2": "arch_name",
                    "3": "arch_string",
                    "5": "arch_mach",
                    "7": "arch_mach_string"
                },
                "sVar4": {
                    "1": "field_length",
                    "15": "string_length",
                    "4": "str_length"
                },
                "uStack000000000000000c": {
                    "1": "stack_var",
                    "4": "indentation",
                    "7": "indentation_level"
                },
                "uVar10": {
                    "1": "counter",
                    "2": "length_counter",
                    "3": "char_counter",
                    "6": "string_length",
                    "8": "loop_counter"
                },
                "uVar11": {
                    "1": "arch_mach_loop_index",
                    "2": "arch_index_minus2",
                    "3": "arch_mach_offset",
                    "4": "arch_index",
                    "6": "arch_mach_index"
                },
                "uVar6": {
                    "1": "printable_arch",
                    "2": "arch_string_printable",
                    "5": "arch_mach_printable",
                    "7": "printable_arch_mach"
                },
                "unaff_R15D": {
                    "1": "stack_size",
                    "2": "stack_variable"
                }
            },
            "called": [
                "strlen",
                "strtol",
                "printf",
                "fputs",
                "bfd_printable_arch_mach",
                "putc",
                "strcmp"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\n\n\nvoid print_arch_mach_details_00104943(void)\n\n{\n  int default_value;\n  int comparison_result;\n  char *input_string;\n  long converted_value;\n  size_t string_length;\n  char *arch_mach_string;\n  undefined8 printable_arch_mach;\n  int arch_mach_index;\n  long start_index;\n  int current_index;\n  uint stack_value;\n  ulong loop_counter;\n  uint arch_mach_index;\n  int max_iterations;\n  uint indentation_level;\n  undefined8 arch_mach;\n  long data_array;\n  \n  converted_value = strtol(input_string,(char **)0x0,10);\n  default_value = (int)converted_value;\n  current_index = max_iterations;\n  indentation_level = stack_value;\n  if (default_value == 0) {\n    default_value = 0x50;\n  }\n  do {\n    max_iterations = current_index;\n    if (arch_mach._4_4_ <= max_iterations) {\n      return;\n    }\n    start_index = (long)max_iterations;\n    arch_mach_index = (default_value - indentation_level) + -1;\n    converted_value = start_index;\n    do {\n      current_index = (int)converted_value;\n      if (arch_mach._4_4_ <= current_index) break;\n      string_length = strlen(*(char **)(data_array + converted_value * 0x60));\n      converted_value = converted_value + 1;\n      arch_mach_index = (arch_mach_index - (int)string_length) + -1;\n    } while (-1 < arch_mach_index);\n    printf(\"\\n%*s\",(ulong)(indentation_level + 1),&DAT_0011b4a1);\n    for (converted_value = start_index * 0x60; ((ulong)(uint)(current_index - max_iterations) + start_index) * 0x60 - converted_value != 0;\n        converted_value = converted_value + 0x60) {\n      printf(\"%s \",*(undefined8 *)(data_array + converted_value));\n    }\n    arch_mach_index = 2;\n    putc(10,standard_output);\n    do {\n      arch_mach_string = (char *)bfd_printable_arch_mach(arch_mach_index,0);\n      comparison_result = strcmp(arch_mach_string,\"UNKNOWN!\");\n      if (comparison_result != 0) {\n        printable_arch_mach = bfd_printable_arch_mach(arch_mach_index,0);\n        printf(\"%*s \",(ulong)indentation_level,printable_arch_mach);\n        arch_mach_index = arch_mach_index - 2;\n        converted_value = start_index * 0x60;\n        comparison_result = max_iterations;\n        while (current_index != comparison_result) {\n          arch_mach_string = *(char **)(data_array + converted_value);\n          if (*(char *)((long)(char **)(data_array + converted_value) + (ulong)arch_mach_index + 8) == '\\0') {\n            string_length = strlen(arch_mach_string);\n            for (loop_counter = string_length & 0xffffffff; (int)loop_counter != 0; loop_counter = (ulong)((int)loop_counter - 1)) {\n              putc(0x2d,standard_output);\n            }\n          }\n          else {\n            fputs(arch_mach_string,standard_output);\n          }\n          comparison_result = comparison_result + 1;\n          if (current_index != comparison_result) {\n            putc(0x20,standard_output);\n          }\n          converted_value = converted_value + 0x60;\n        }\n        putc(10,standard_output);\n      }\n      arch_mach_index = arch_mach_index + 1;\n    } while (arch_mach_index != 0x57);\n  } while( true );\n}\n\n",
            "current_name": "print_arch_mach_details_00104943",
            "entrypoint": "0x00104943",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104943": "print_arch_mach_details_00104943",
                "_stdout": "standard_output",
                "iVar1": "default_value",
                "iVar2": "comparison_result",
                "iVar7": "arch_mach_index",
                "iVar9": "current_index",
                "in_RAX": "input_string",
                "lVar3": "converted_value",
                "lVar8": "start_index",
                "param_11": "arch_mach",
                "param_13": "data_array",
                "param_7": "max_iterations",
                "pcVar5": "arch_mach_string",
                "sVar4": "string_length",
                "uStack000000000000000c": "indentation_level",
                "uVar10": "loop_counter",
                "uVar11": "arch_mach_index",
                "uVar6": "printable_arch_mach",
                "unaff_R15D": "stack_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104966": {
            "additional_data": {
                "*piVar1": {
                    "1": "errno_value",
                    "2": "errno_ptr"
                },
                "FUN_00104966": {
                    "1": "check_file_existence",
                    "14": "handle_file_error",
                    "2": "find_file_location",
                    "4": "file_not_found_error",
                    "5": "handle_file_not_found_error"
                },
                "FUN_00119ed0": {
                    "1": "display_message",
                    "11": "print_error_message",
                    "2": "display_error_message"
                },
                "__errno_location": {
                    "1": "get_error_pointer",
                    "2": "get_error_location",
                    "7": "get_errno_location"
                },
                "dcgettext": {
                    "1": "get_text",
                    "2": "get_localized_message",
                    "3": "get_localized_error_message",
                    "5": "get_error_message"
                },
                "piVar1": {
                    "1": "error_pointer",
                    "14": "errno_ptr",
                    "2": "errno_pointer",
                    "3": "error_location",
                    "4": "error_ptr"
                },
                "strerror": {
                    "1": "get_system_error_message",
                    "15": "get_error_string"
                },
                "uVar2": {
                    "1": "localized_error_message",
                    "26": "error_message",
                    "4": "error_string"
                }
            },
            "called": [
                "FUN_00119ed0",
                "dcgettext",
                "__errno_location",
                "strerror"
            ],
            "calling": [
                "FUN_00113f50"
            ],
            "code": "\nundefined8 handle_file_error_00104966(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_message;\n  \n  errno_ptr = __errno_location();\n  if (*errno_ptr == 2) {\n    error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n    FUN_00119ed0(error_message);\n  }\n  else {\n    strerror(*errno_ptr);\n    error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    FUN_00119ed0(error_message);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "current_name": "handle_file_error_00104966",
            "entrypoint": "0x00104966",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104966": "handle_file_error_00104966",
                "__errno_location": "get_errno_location",
                "dcgettext": "get_error_message",
                "piVar1": "errno_ptr",
                "strerror": "get_error_string",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104a35": {
            "additional_data": {
                "FUN_00104a35": {
                    "31": "print_supported_targets"
                },
                "__c": {
                    "1": "character"
                },
                "__format": {
                    "1": "format"
                },
                "__ptr": {
                    "1": "target_list_ptr",
                    "30": "target_list"
                },
                "__stream": {
                    "1": "stream"
                },
                "fprintf": {
                    "1": "write_to_output_file"
                },
                "fputc": {
                    "1": "write_new_line"
                },
                "free": {
                    "1": "free_memory"
                },
                "lVar1": {
                    "1": "target_ptr",
                    "14": "current_target",
                    "2": "target_address",
                    "6": "current_target_value"
                },
                "param_1": {
                    "27": "target",
                    "4": "target_name"
                },
                "param_2": {
                    "1": "output_stream",
                    "28": "output_file"
                },
                "pcVar2": {
                    "1": "localized_text",
                    "20": "message",
                    "3": "text",
                    "4": "target_message"
                },
                "plVar3": {
                    "1": "target_pointer",
                    "13": "current_target",
                    "5": "target_ptr"
                }
            },
            "called": [
                "bfd_target_list",
                "dcgettext",
                "fputc",
                "free",
                "fprintf"
            ],
            "calling": [
                "FUN_00108916",
                "FUN_00108a2a"
            ],
            "code": "\nvoid print_supported_targets_00104a35(long target,FILE *output_file)\n\n{\n  long current_target;\n  char *message;\n  long *target_list;\n  long *current_target;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(output_file,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(output_file,message,target);\n  }\n  target_list = (long *)bfd_target_list();\n  current_target = target_list;\n  while( true ) {\n    current_target = *current_target;\n    current_target = current_target + 1;\n    if (current_target == 0) break;\n    fprintf(output_file,\" %s\");\n  }\n  fputc(10,output_file);\n  free_memory(target_list);\n  return;\n}\n\n",
            "current_name": "print_supported_targets_00104a35",
            "entrypoint": "0x00104a35",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "__ptr": "target_list",
                "fprintf": "write_to_output_file",
                "fputc": "write_new_line",
                "free": "free_memory",
                "lVar1": "current_target",
                "param_1": "target",
                "param_2": "output_file",
                "pcVar2": "message",
                "plVar3": "current_target"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104ad6": {
            "additional_data": {
                "FUN_00104ad6": {
                    "1": "parse_sections",
                    "2": "extract_section_flags",
                    "22": "parse_section_flags"
                },
                "FUN_00119dd0": {
                    "1": "display_flags",
                    "2": "print_supported_flags"
                },
                "FUN_00119ed0": {
                    "1": "display_error"
                },
                "PTR_dcgettext": {
                    "1": "dcgettext"
                },
                "PTR_strlen": {
                    "1": "strlen"
                },
                "PTR_strncasecmp": {
                    "1": "strncasecmp"
                },
                "PTR_xmalloc": {
                    "1": "xmalloc"
                },
                "__n": {
                    "1": "num_chars"
                },
                "__s": {
                    "1": "current_section",
                    "2": "string",
                    "5": "section_name",
                    "6": "section_flag",
                    "9": "section"
                },
                "__s1": {
                    "1": "str1"
                },
                "__s2": {
                    "1": "str2"
                },
                "auVar6": {
                    "1": "return_flags",
                    "18": "result",
                    "2": "result_array",
                    "3": "return_val",
                    "5": "return_value"
                },
                "dcgettext": {
                    "1": "get_text"
                },
                "iVar1": {
                    "1": "result",
                    "26": "comparison_result"
                },
                "iVar5": {
                    "1": "name_difference",
                    "2": "flag_length_int",
                    "3": "string_length",
                    "6": "section_length"
                },
                "param_1": {
                    "1": "msg1"
                },
                "param_2": {
                    "1": "message_part2"
                },
                "param_3": {
                    "1": "message_part3"
                },
                "param_4": {
                    "1": "message_part4"
                },
                "pcVar3": {
                    "1": "temp_str",
                    "13": "comma_position",
                    "2": "comma_ptr",
                    "3": "delimiter"
                },
                "sVar4": {
                    "1": "str_len",
                    "2": "name_length",
                    "3": "section_name_length",
                    "4": "length",
                    "6": "section_length",
                    "7": "string_length"
                },
                "strchr": {
                    "4": "find_character"
                },
                "strlen": {
                    "1": "get_length",
                    "3": "get_string_length"
                },
                "strncasecmp": {
                    "4": "compare_strings"
                },
                "strncpy": {
                    "4": "copy_string"
                },
                "supported_flags_error": {
                    "1": "supported_flags_error"
                },
                "supported_flags_list": {
                    "1": "supported_flags_list"
                },
                "uVar2": {
                    "1": "err_msg",
                    "15": "error_message"
                },
                "ulFlags": {
                    "1": "section_flags"
                },
                "unaff_R14D": {
                    "1": "flag",
                    "21": "section_flags",
                    "7": "flags"
                },
                "unaff_R15": {
                    "1": "current_section",
                    "2": "section_flag",
                    "3": "section",
                    "8": "section_name",
                    "9": "supported_flags"
                },
                "unaff_RBP": {
                    "1": "remaining_flags",
                    "2": "current_position",
                    "3": "next_flag",
                    "4": "remaining_string",
                    "8": "next_section"
                },
                "unaff_retaddr": {
                    "1": "ret_addr",
                    "27": "return_address"
                },
                "unrecognized_flags_error": {
                    "1": "unrecognized_flags_error"
                },
                "xmalloc": {
                    "5": "allocate_memory"
                }
            },
            "called": [
                "strlen",
                "strncasecmp",
                "FUN_00119dd0",
                "xmalloc",
                "FUN_00119ed0",
                "dcgettext",
                "FUN_00104ad6",
                "strncpy",
                "strchr"
            ],
            "calling": [
                "FUN_00104ad6"
            ],
            "code": "\nundefined  [16] parse_section_flags_00104ad6(void)\n\n{\n  int comparison_result;\n  undefined8 error_message;\n  char *comma_position;\n  char *next_section;\n  char *section;\n  size_t string_length;\n  int section_length;\n  uint section_flags;\n  char *supported_flags;\n  undefined result [16];\n  undefined8 return_address;\n  \n  do {\n    section_flags = section_flags | 0x2000;\n    section = next_section;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (section == (char *)0x0) {\n                result._4_4_ = 0;\n                result._0_4_ = section_flags;\n                result._8_8_ = return_address;\n                return result;\n              }\n              comma_position = strchr(section,0x2c);\n              if (comma_position == (char *)0x0) {\n                string_length = strlen(section);\n                section_length = (int)string_length;\n                next_section = (char *)0x0;\n              }\n              else {\n                next_section = comma_position + 1;\n                section_length = (int)comma_position - (int)section;\n              }\n              string_length = (size_t)section_length;\n              comparison_result = strncasecmp(supported_flags,section,string_length);\n              if (comparison_result != 0) break;\n              section_flags = section_flags | 1;\n              section = next_section;\n            }\n            comparison_result = strncasecmp(\"load\",section,string_length);\n            if (comparison_result != 0) break;\n            section_flags = section_flags | 2;\n            section = next_section;\n          }\n          comparison_result = strncasecmp(\"noload\",section,string_length);\n          if (comparison_result != 0) break;\n          section_flags = section_flags | 0x200;\n          section = next_section;\n        }\n        comparison_result = strncasecmp(\"readonly\",section,string_length);\n        if (comparison_result != 0) break;\n        section_flags = section_flags | 8;\n        section = next_section;\n      }\n      comparison_result = strncasecmp(\"debug\",section,string_length);\n      if (comparison_result == 0) break;\n      comparison_result = strncasecmp(\"code\",section,string_length);\n      if (comparison_result == 0) {\n        section_flags = section_flags | 0x10;\n        section = next_section;\n      }\n      else {\n        comparison_result = strncasecmp(\"data\",section,string_length);\n        if (comparison_result == 0) {\n          section_flags = section_flags | 0x20;\n          section = next_section;\n        }\n        else {\n          comparison_result = strncasecmp(\"rom\",section,string_length);\n          if (comparison_result == 0) {\n            section_flags = section_flags | 0x40;\n            section = next_section;\n          }\n          else {\n            comparison_result = strncasecmp(\"exclude\",section,string_length);\n            if (comparison_result == 0) {\n              section_flags = section_flags | 0x8000;\n              section = next_section;\n            }\n            else {\n              comparison_result = strncasecmp(\"share\",section,string_length);\n              if (comparison_result == 0) {\n                section_flags = section_flags | 0x8000000;\n                section = next_section;\n              }\n              else {\n                comparison_result = strncasecmp(\"contents\",section,string_length);\n                if (comparison_result == 0) {\n                  section_flags = section_flags | 0x100;\n                  section = next_section;\n                }\n                else {\n                  comparison_result = strncasecmp(\"merge\",section,string_length);\n                  if (comparison_result == 0) {\n                    section_flags = section_flags | 0x800000;\n                    section = next_section;\n                  }\n                  else {\n                    comparison_result = strncasecmp(\"strings\",section,string_length);\n                    if (comparison_result != 0) {\n                      comma_position = (char *)xmalloc((long)(section_length + 1));\n                      strncpy(comma_position,section,string_length);\n                      comma_position[string_length] = '\\0';\n                      error_message = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      FUN_00119ed0(error_message,comma_position);\n                      error_message = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      FUN_00119dd0(error_message,\n                                   \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                  );\n                    }\n                    section_flags = section_flags | 0x1000000;\n                    section = next_section;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "current_name": "parse_section_flags_00104ad6",
            "entrypoint": "0x00104ad6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104ad6": "parse_section_flags_00104ad6",
                "__s": "section",
                "auVar6": "result",
                "dcgettext": "get_translated_text",
                "iVar1": "comparison_result",
                "iVar5": "section_length",
                "pcVar3": "comma_position",
                "sVar4": "string_length",
                "strchr": "find_character",
                "strlen": "get_string_length",
                "strncasecmp": "compare_strings",
                "strncpy": "copy_string",
                "uVar2": "error_message",
                "unaff_R14D": "section_flags",
                "unaff_R15": "supported_flags",
                "unaff_RBP": "next_section",
                "unaff_retaddr": "return_address",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104bba": {
            "additional_data": {
                "FUN_00104bba": {
                    "1": "validate_memory_flags",
                    "2": "check_error_and_set_flags",
                    "7": "check_and_set_flags"
                },
                "in_EAX": {
                    "1": "input_flags",
                    "11": "eax_value",
                    "14": "flags",
                    "2": "eax_input"
                },
                "uVar1": {
                    "1": "localized_error_message",
                    "13": "error_message",
                    "2": "error_string"
                },
                "unaff_EBP": {
                    "1": "mask",
                    "12": "ebp_value",
                    "2": "register_ebp",
                    "3": "register_value"
                },
                "unaff_R14": {
                    "1": "data_address",
                    "11": "r14_value",
                    "2": "register_r14",
                    "3": "memory_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_00114190"
            ],
            "code": "\nvoid check_and_set_flags_00104bba(void)\n\n{\n  uint flags;\n  undefined8 error_message;\n  uint ebp_value;\n  long r14_value;\n  \n  if ((flags & 2) != 0) {\n    error_message = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    FUN_00119dd0(error_message);\n  }\n  if ((((flags & 8) == 0) || ((ebp_value & 0x10) == 0)) && ((ebp_value & 0x18) != 0x18)) {\n    if ((((flags & 0x20) == 0) || ((ebp_value & 0x40) == 0)) && ((ebp_value & 0x60) != 0x60)) {\n      *(uint *)(r14_value + 0x14) = flags | ebp_value;\n      return;\n    }\n    error_message = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    FUN_00119dd0(error_message);\n  }\n  error_message = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  FUN_00119dd0(error_message);\n}\n\n",
            "current_name": "check_and_set_flags_00104bba",
            "entrypoint": "0x00104bba",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104bba": "check_and_set_flags_00104bba",
                "in_EAX": "flags",
                "uVar1": "error_message",
                "unaff_EBP": "ebp_value",
                "unaff_R14": "r14_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104c36": {
            "additional_data": {
                "FUN_00104c36": {
                    "1": "parse_input_data",
                    "16": "process_lines",
                    "2": "parse_input_lines",
                    "5": "parse_lines"
                },
                "FUN_00104d1c": {
                    "1": "process_comment"
                },
                "FUN_00119ed0": {
                    "1": "print_error_message"
                },
                "bVar4": {
                    "1": "temp_byte",
                    "12": "next_char",
                    "2": "next_character",
                    "3": "current_byte",
                    "5": "next_byte"
                },
                "byte **ppbVar2": {
                    "1": "slot"
                },
                "byte *pbVar3": {
                    "1": "current_byte"
                },
                "byte *pbVar5": {
                    "1": "ptr"
                },
                "byte *unaff_R14": {
                    "1": "current_line"
                },
                "byte *unaff_R15": {
                    "1": "next_line"
                },
                "byte *unaff_RBX": {
                    "1": "line"
                },
                "byte bVar4": {
                    "1": "next_char"
                },
                "byte in_CL": {
                    "1": "current_char"
                },
                "currentChar": {
                    "1": "current_pos[0]"
                },
                "currentPos": {
                    "1": "pb_var5"
                },
                "dcgettext": {
                    "1": "get_translated_string"
                },
                "errorMsg": {
                    "1": "u_var1"
                },
                "filename": {
                    "1": "in_stack_00000008"
                },
                "hashTableSlot": {
                    "1": "ppb_var2"
                },
                "htab_find_slot": {
                    "1": "find_slot"
                },
                "in_CL": {
                    "1": "current_line_character",
                    "21": "current_char",
                    "5": "current_character"
                },
                "in_stack_00000008": {
                    "1": "error_msg_arg",
                    "3": "message_format",
                    "4": "file_name",
                    "6": "format_string",
                    "7": "filename"
                },
                "in_stack_00000010": {
                    "1": "return_value_ptr",
                    "2": "result_ptr",
                    "3": "result",
                    "4": "return_value",
                    "8": "return_address"
                },
                "int unaff_EBP": {
                    "1": "line_number"
                },
                "lineBuffer": {
                    "1": "unaff_rbx"
                },
                "lineCount": {
                    "1": "unaff_ebp"
                },
                "nextPos": {
                    "1": "unaff_r15"
                },
                "pbVar1": {
                    "1": "ptr"
                },
                "pbVar2": {
                    "1": "current_position"
                },
                "pbVar3": {
                    "1": "next_position",
                    "2": "current_char",
                    "3": "temp_pointer",
                    "7": "next_char"
                },
                "pbVar4": {
                    "1": "temp_char",
                    "2": "current_byte"
                },
                "pbVar5": {
                    "1": "current_char",
                    "11": "current_line",
                    "2": "current_position"
                },
                "pbVar6": {
                    "1": "next_char_after_lf"
                },
                "pbVar7": {
                    "1": "next_char_after_cr"
                },
                "ppbVar2": {
                    "1": "byte_pointer",
                    "2": "slot",
                    "4": "slot_pointer",
                    "6": "slot_ptr",
                    "8": "hash_table_slot"
                },
                "previousPos": {
                    "1": "unaff_r14"
                },
                "result": {
                    "1": "in_stack_00000010"
                },
                "uVar1": {
                    "1": "translated_string",
                    "11": "error_message",
                    "2": "translated_message",
                    "3": "error_msg"
                },
                "unaff_EBP": {
                    "1": "line_index",
                    "10": "line_count",
                    "12": "line_number",
                    "5": "line_counter"
                },
                "unaff_R13": {
                    "1": "file_name",
                    "2": "translation_context",
                    "3": "return_address",
                    "4": "filename"
                },
                "unaff_R14": {
                    "1": "next_line_start",
                    "2": "line_start",
                    "4": "line_end",
                    "6": "current_line"
                },
                "unaff_R15": {
                    "1": "last_line",
                    "2": "start_of_line",
                    "5": "next_line",
                    "6": "line_start"
                },
                "unaff_RBX": {
                    "1": "remaining_text",
                    "3": "input_buffer",
                    "4": "line_start"
                },
                "undefined8 *in_stack_00000010": {
                    "1": "return_address"
                },
                "undefined8 in_stack_00000008": {
                    "1": "ignore_message"
                },
                "undefined8 uVar1": {
                    "1": "result"
                },
                "undefined8 unaff_R13": {
                    "1": "filename"
                }
            },
            "called": [],
            "calling": [
                "FUN_00104cc1"
            ],
            "code": "\nvoid process_lines_00104c36(void)\n\n{\n  undefined8 error_message;\n  byte **hash_table_slot;\n  byte *next_char;\n  byte current_char;\n  byte next_char;\n  byte *line_ptr;\n  int line_number;\n  byte *current_line;\n  undefined8 filename;\n  byte *current_line;\n  byte *line_start;\n  undefined8 filename;\n  undefined8 *return_address;\n  \n  do {\n    current_line = line_start;\n    if (current_char == 9) goto LAB_00104c3f;\n    do {\n      if ((current_char == 10) || (current_char == 0xd)) goto LAB_00114676;\n      if (current_char == 0) goto LAB_00114599;\n      current_char = current_line[1];\n      current_line = current_line + 1;\n    } while ((current_char != 0x20) && (current_char != 9));\n    if ((char)current_char < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_char & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      next_char = current_line[1];\n      if ((((((next_char == 9) || (next_char == 0x20)) &&\n            ((next_char = current_line[2], next_char == 9 || (next_char == 0x20)))) &&\n           ((next_char = current_line[3], next_char == 9 || (next_char == 0x20)))) &&\n          ((next_char = current_line[4], next_char == 9 || (next_char == 0x20)))) &&\n         ((next_char = current_line[5], next_char == 9 || (next_char == 0x20)))) {\n        next_char = current_line[6];\n        next_char = current_line + 6;\n        if ((next_char == 9) || (next_char == 0x20)) {\n          do {\n            do {\n              next_char = next_char[1];\n              next_char = next_char + 1;\n            } while (next_char == 0x20);\n          } while (next_char == 9);\n        }\n      }\n      if ((0xd < next_char) || ((-0x2402L >> (next_char & 0x3f) & 1U) != 0)) {\n        error_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        FUN_00119ed0(error_message,filename,line_number);\n      }\n    }\nLAB_00114599:\n    *current_line = 0;\n    if (line_start < current_line) {\n      hash_table_slot = (byte **)htab_find_slot();\n      *hash_table_slot = line_start;\n    }\n    line_number = line_number + 1;\n    current_line = line_ptr;\n    if (current_line[1] == 0) {\n      *return_address = filename;\n      return;\n    }\n    for (; next_char = *current_line, current_line = current_line, next_char != 10; current_line = current_line + 1) {\n      if ((char)next_char < '\\v') {\n        if (next_char == 0) {\n          next_char = current_line + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (next_char == 0xd) {\n          *current_line = 0;\n          next_char = current_line + 1;\n          if (current_line[1] == 10) {\n            next_char = current_line + 2;\n            current_line = current_line + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (next_char == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *current_line = 0;\n    if (current_line[1] == 0xd) {\n      current_line = current_line + 1;\n      next_char = current_line + 2;\n    }\n    else {\n      next_char = current_line + 1;\n    }\nLAB_00114553:\n    current_char = *line_ptr;\n    line_start = line_ptr;\n    while (line_ptr = next_char, current_char == 0x20) {\nLAB_00104c3f:\n      current_line = line_start + 1;\n      line_start = line_start + 1;\n      next_char = line_ptr;\n      current_char = *current_line;\n    }\n  } while( true );\n}\n\n",
            "current_name": "process_lines_00104c36",
            "entrypoint": "0x00104c36",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104c36": "process_lines_00104c36",
                "bVar4": "next_char",
                "dcgettext": "get_translation",
                "htab_find_slot": "find_slot",
                "in_CL": "current_char",
                "in_stack_00000008": "filename",
                "in_stack_00000010": "return_address",
                "pbVar2": "current_line",
                "pbVar3": "next_char",
                "pbVar5": "current_line",
                "ppbVar2": "hash_table_slot",
                "uVar1": "error_message",
                "unaff_EBP": "line_number",
                "unaff_R13": "filename",
                "unaff_R14": "current_line",
                "unaff_R15": "line_start",
                "unaff_RBX": "line_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104cc1": {
            "additional_data": {
                "FUNG_00104cc1": {
                    "1": "parse_lines"
                },
                "FUN_00104c36": {
                    "1": "remove_spaces_and_tabs"
                },
                "FUN_00104cc1": {
                    "1": "parse_lines_and_process",
                    "15": "process_lines",
                    "2": "parse_and_store_lines",
                    "4": "parse_lines"
                },
                "FUN_00104d1c": {
                    "1": "handle_hashtag",
                    "2": "process_special_character"
                },
                "FUN_00104d1c(void)": {
                    "1": "handle_comment"
                },
                "FUN_00119ed0": {
                    "1": "display_error_message",
                    "5": "print_error_message"
                },
                "FUN_00119ed0(undefined4 param_1, undefined4 param_2, undefined4 param_3, undefined4 param_4)": {
                    "1": "print_ignoring_rubbish"
                },
                "PARAM_1": {
                    "1": "msg_id"
                },
                "bVar4": {
                    "1": "next_character",
                    "10": "next_char",
                    "2": "current_char_value",
                    "3": "current_char",
                    "5": "current_byte"
                },
                "code_r0x00104cc1": {
                    "1": "loop_start"
                },
                "dcgettext": {
                    "1": "get_text",
                    "2": "translate_message"
                },
                "dcgettext(void)": {
                    "1": "get_translation"
                },
                "htab_find_slot": {
                    "1": "find_next_slot",
                    "2": "find_slot_in_hash_table"
                },
                "htab_find_slot(void)": {
                    "1": "find_slot"
                },
                "in_R10": {
                    "1": "line",
                    "2": "line_start",
                    "4": "line_end",
                    "6": "current_line",
                    "7": "line_ptr"
                },
                "param_7": {
                    "1": "param7",
                    "11": "line_number",
                    "2": "line_format",
                    "4": "format_string"
                },
                "param_8": {
                    "1": "param_result",
                    "2": "param2",
                    "7": "result"
                },
                "param_9": {
                    "1": "param9",
                    "15": "line",
                    "3": "input_line"
                },
                "pbVar3": {
                    "1": "current_character",
                    "16": "current_char",
                    "2": "current_byte"
                },
                "pbVar5": {
                    "1": "input_buffer_ptr",
                    "2": "current_line",
                    "5": "line_end",
                    "6": "line_start"
                },
                "ppbVar2": {
                    "1": "new_slot",
                    "13": "slot",
                    "2": "hash_table_slot",
                    "8": "slot_ptr"
                },
                "uVar1": {
                    "1": "translated_message",
                    "14": "error_message",
                    "3": "error_msg"
                },
                "unaff_EBP": {
                    "1": "counter",
                    "3": "line_index",
                    "9": "line_number"
                },
                "unaff_R13": {
                    "1": "stdout",
                    "2": "file_name",
                    "4": "result"
                },
                "unaff_R14": {
                    "1": "line",
                    "2": "line_start",
                    "3": "current_char"
                },
                "unaff_R15": {
                    "1": "last_space",
                    "2": "prev_line_start",
                    "3": "line_start"
                },
                "unaff_RBX": {
                    "1": "current_char",
                    "4": "next_line",
                    "6": "line_start"
                },
                "void FUN_00104c36(void)": {
                    "1": "validate_line"
                },
                "void FUN_00104cc1(void)": {
                    "1": "process_lines"
                }
            },
            "called": [
                "FUN_00104c36",
                "htab_find_slot",
                "FUN_00104d1c",
                "FUN_00119ed0",
                "FUN_00104cc1",
                "dcgettext"
            ],
            "calling": [
                "FUN_00104cc1"
            ],
            "code": "\nvoid process_lines_00104cc1(void)\n\n{\n  undefined8 error_message;\n  byte **slot;\n  byte *current_char;\n  byte next_char;\n  byte *line_start;\n  byte *line_start;\n  int line_count;\n  byte *line_ptr;\n  undefined8 result;\n  byte *current_char;\n  byte *line_end;\n  undefined8 line_number;\n  undefined8 *output;\n  byte *line;\n  \nloop_start:\n  line = line_ptr;\n  error_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  FUN_00119ed0(error_message,line_number,line_count);\n  line_start = line_start;\n  line_ptr = line;\nLAB_00114599:\n  do {\n    *line_ptr = 0;\n    if (line_end < line_ptr) {\n      slot = (byte **)htab_find_slot();\n      *slot = line_end;\n    }\n    line_count = line_count + 1;\n    current_char = line_start;\n    if (current_char[1] == 0) {\n      *output = result;\n      return;\n    }\n    for (; next_char = *current_char, current_char = current_char, next_char != 10; current_char = current_char + 1) {\n      if ((char)next_char < '\\v') {\n        if (next_char == 0) {\n          line_start = current_char + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (next_char == 0xd) {\n          *current_char = 0;\n          line_start = current_char + 1;\n          if (current_char[1] == 10) {\n            line_start = current_char + 2;\n            current_char = current_char + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (next_char == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *current_char = 0;\n    if (current_char[1] == 0xd) {\n      current_char = current_char + 1;\n      line_start = current_char + 2;\n    }\n    else {\n      line_start = current_char + 1;\n    }\nLAB_00114553:\n    next_char = *line_start;\n    line_end = line_start;\n    while ((next_char == 0x20 || (line_ptr = line_end, next_char == 9))) {\n      line_start = line_end + 1;\n      line_end = line_end + 1;\n      next_char = *line_start;\n    }\n    do {\n      line_start = line_start;\n      if ((next_char == 10) || (next_char == 0xd)) goto LAB_00114676;\n      if (next_char == 0) goto LAB_00114599;\n      next_char = line_ptr[1];\n      line_ptr = line_ptr + 1;\n    } while ((next_char != 0x20) && (next_char != 9));\n    if ((char)next_char < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (next_char & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    next_char = line_ptr[1];\n    if ((((((next_char == 9) || (next_char == 0x20)) && ((next_char = line_ptr[2], next_char == 9 || (next_char == 0x20)))\n          ) && ((next_char = line_ptr[3], next_char == 9 || (next_char == 0x20)))) &&\n        ((next_char = line_ptr[4], next_char == 9 || (next_char == 0x20)))) &&\n       ((next_char = line_ptr[5], next_char == 9 || (next_char == 0x20)))) {\n      next_char = line_ptr[6];\n      current_char = line_ptr + 6;\n      if ((next_char == 9) || (next_char == 0x20)) {\n        do {\n          do {\n            next_char = current_char[1];\n            current_char = current_char + 1;\n          } while (next_char == 0x20);\n        } while (next_char == 9);\n      }\n    }\n    if ((0xd < next_char) || ((-0x2402L >> (next_char & 0x3f) & 1U) != 0)) goto loop_start;\n  } while( true );\n}\n\n",
            "current_name": "process_lines_00104cc1",
            "entrypoint": "0x00104cc1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104cc1": "process_lines_00104cc1",
                "bVar4": "next_char",
                "code_r0x00104cc1": "loop_start",
                "dcgettext": "translate_message",
                "htab_find_slot": "find_slot_in_hash_table",
                "in_R10": "line_ptr",
                "param_7": "line_number",
                "param_8": "output",
                "param_9": "line",
                "pbVar3": "current_char",
                "pbVar5": "line_start",
                "ppbVar2": "slot",
                "uVar1": "error_message",
                "unaff_EBP": "line_count",
                "unaff_R13": "result",
                "unaff_R14": "current_char",
                "unaff_R15": "line_end",
                "unaff_RBX": "line_start"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104d1c": {
            "additional_data": {
                "*unaff_R14": {
                    "1": "end_of_line_marker"
                },
                "FUN_00104d1c": {
                    "1": "parse_and_ignore_rubbish",
                    "12": "process_lines",
                    "2": "parse_and_process_lines",
                    "3": "process_input_lines",
                    "4": "parse_input_lines",
                    "5": "parse_input"
                },
                "bVar4": {
                    "1": "byte_value",
                    "2": "ch",
                    "6": "current_char_value"
                },
                "in_stack_00000008": {
                    "1": "filename",
                    "15": "format_string",
                    "7": "error_message"
                },
                "in_stack_00000010": {
                    "1": "stack_pointer",
                    "16": "return_address",
                    "2": "result_pointer"
                },
                "pbVar3": {
                    "1": "next_character",
                    "2": "rubbish_ptr",
                    "3": "ptr",
                    "4": "current_char"
                },
                "pbVar4": {
                    "1": "current_char"
                },
                "pbVar5": {
                    "1": "next_byte_pointer",
                    "10": "next_line",
                    "2": "next_line_ptr",
                    "4": "next_line_start",
                    "6": "next_char"
                },
                "pbVar6": {
                    "1": "ptr2",
                    "2": "line_end",
                    "3": "current_line",
                    "4": "next_char"
                },
                "pbVar7": {
                    "1": "line_start",
                    "2": "next_line_char",
                    "3": "line_end",
                    "4": "next_char"
                },
                "ppbVar2": {
                    "1": "entry_slot",
                    "2": "slot_ptr",
                    "3": "hash_table_slot",
                    "6": "slot_pointer"
                },
                "uVar1": {
                    "1": "error_message_format",
                    "2": "error_text",
                    "4": "message",
                    "7": "error_message"
                },
                "unaff_EBP": {
                    "1": "ebp_value",
                    "14": "line_count",
                    "2": "counter",
                    "3": "line_index",
                    "6": "line_counter"
                },
                "unaff_R13": {
                    "1": "original_function",
                    "2": "file_descriptor",
                    "3": "file_handle",
                    "4": "filename"
                },
                "unaff_R14": {
                    "1": "current_character",
                    "17": "current_line",
                    "2": "line",
                    "5": "line_start"
                },
                "unaff_R15": {
                    "1": "line",
                    "16": "current_char",
                    "2": "current_position",
                    "3": "line_end",
                    "4": "line_start"
                }
            },
            "called": [],
            "calling": [
                "FUN_00104cc1"
            ],
            "code": "\nvoid process_lines_00104d1c(void)\n\n{\n  undefined8 error_message;\n  byte **slot;\n  byte *current_char;\n  byte current_byte;\n  byte *next_line;\n  int line_count;\n  byte *next_char;\n  undefined8 filename;\n  byte *next_char;\n  byte *current_line;\n  byte *current_char;\n  undefined8 format_string;\n  undefined8 *return_address;\n  \n  *current_line = 0;\nLAB_00114520:\n  current_line = current_line + 1;\n  do {\n    current_byte = *current_line;\n    next_char = current_line;\n    if (current_byte == 10) {\n      *current_line = 0;\n      if (current_line[1] == 0xd) {\n        next_char = current_line + 1;\n        next_line = current_line + 2;\n      }\n      else {\n        next_line = current_line + 1;\n      }\n    }\n    else if ((char)current_byte < '\\v') {\n      if (current_byte != 0) goto LAB_00114520;\n      next_line = current_line + 1;\n    }\n    else {\n      if (current_byte != 0xd) break;\n      *current_line = 0;\n      next_line = current_line + 1;\n      if (current_line[1] == 10) {\n        next_line = current_line + 2;\n        next_char = current_line + 1;\n      }\n    }\n    current_byte = *current_char;\n    while ((current_byte == 0x20 || (next_char = current_char, current_byte == 9))) {\n      next_char = current_char + 1;\n      current_char = current_char + 1;\n      current_byte = *next_char;\n    }\n    do {\n      if ((current_byte == 10) || (current_byte == 0xd)) goto LAB_00114676;\n      if (current_byte == 0) goto LAB_00114599;\n      current_byte = next_char[1];\n      next_char = next_char + 1;\n    } while ((current_byte != 0x20) && (current_byte != 9));\n    if ((char)current_byte < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      current_byte = next_char[1];\n      if ((((((current_byte == 9) || (current_byte == 0x20)) &&\n            ((current_byte = next_char[2], current_byte == 9 || (current_byte == 0x20)))) &&\n           ((current_byte = next_char[3], current_byte == 9 || (current_byte == 0x20)))) &&\n          ((current_byte = next_char[4], current_byte == 9 || (current_byte == 0x20)))) &&\n         ((current_byte = next_char[5], current_byte == 9 || (current_byte == 0x20)))) {\n        current_byte = next_char[6];\n        current_char = next_char + 6;\n        if ((current_byte == 9) || (current_byte == 0x20)) {\n          do {\n            do {\n              current_byte = current_char[1];\n              current_char = current_char + 1;\n            } while (current_byte == 0x20);\n          } while (current_byte == 9);\n        }\n      }\n      if ((0xd < current_byte) || ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0)) {\n        error_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        FUN_00119ed0(error_message,format_string,line_count);\n      }\n    }\nLAB_00114599:\n    *next_char = 0;\n    if (current_char < next_char) {\n      slot = (byte **)htab_find_slot();\n      *slot = current_char;\n    }\n    line_count = line_count + 1;\n    current_line = next_line;\n    current_char = next_line;\n    if (next_char[1] == 0) {\n      *return_address = filename;\n      return;\n    }\n  } while( true );\n  if (current_byte == 0x23) {\n    process_lines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "current_name": "process_lines_00104d1c",
            "entrypoint": "0x00104d1c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104d1c": "process_lines_00104d1c",
                "bVar4": "current_byte",
                "in_stack_00000008": "format_string",
                "in_stack_00000010": "return_address",
                "pbVar3": "current_char",
                "pbVar5": "next_line",
                "pbVar6": "next_char",
                "pbVar7": "next_char",
                "ppbVar2": "slot",
                "uVar1": "error_message",
                "unaff_EBP": "line_count",
                "unaff_R13": "filename",
                "unaff_R14": "current_line",
                "unaff_R15": "current_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104d25": {
            "additional_data": {
                "FUN_00104d25": {
                    "1": "initialize_state",
                    "12": "initialize_program",
                    "2": "initialize",
                    "3": "initialize_data",
                    "4": "initialize_and_execute"
                },
                "FUN_001126c0": {
                    "1": "call_sub_function_1",
                    "2": "process_data",
                    "3": "execute_operation"
                },
                "FUN_00114b84": {
                    "1": "perform_task_b",
                    "2": "execute_sub_function2",
                    "3": "cleanup_resources",
                    "4": "perform_cleanup",
                    "9": "cleanup"
                },
                "param_1": {
                    "1": "init_param1",
                    "2": "action_param1",
                    "4": "param1"
                },
                "param_2": {
                    "1": "setup_param2",
                    "2": "action_param2",
                    "4": "param2"
                },
                "param_3": {
                    "1": "input_param3",
                    "2": "sub_function1_param3",
                    "4": "param3"
                },
                "param_4": {
                    "1": "setup_param4",
                    "2": "sub_function1_param4",
                    "4": "param4"
                },
                "param_7": {
                    "1": "initial_value",
                    "2": "configuration",
                    "3": "user_input",
                    "4": "param"
                }
            },
            "called": [
                "FUN_001126c0",
                "FUN_00114b84"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid initialize_program_00104d25(void)\n\n{\n  undefined8 param;\n  \n  DAT_00127a40 = 1;\n  FUN_001126c0(0,param,0,0);\n  FUN_00114b84();\n  return;\n}\n\n",
            "current_name": "initialize_program_00104d25",
            "entrypoint": "0x00104d25",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104d25": "initialize_program_00104d25",
                "param_7": "param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104ea2": {
            "additional_data": {
                "BUF_SIZE": {
                    "1": "buffer_size"
                },
                "BVAR17": {
                    "1": "create_temp_dir"
                },
                "C_VAR1": {
                    "1": "status"
                },
                "DAT_001279e9": {
                    "1": "flag_variable3"
                },
                "DAT_001279eb": {
                    "1": "flag_variable2"
                },
                "DAT_00127a40": {
                    "1": "exit_flag"
                },
                "FUNC_00114e50": {
                    "1": "check_validity"
                },
                "FUN_00104ea2": {
                    "1": "process_archive",
                    "2": "extract_and_copy_archived_files",
                    "3": "copy_archive_files",
                    "8": "extract_and_copy_archive"
                },
                "FUN_001052a2": {
                    "1": "check_path"
                },
                "FUN_001125fa": {
                    "1": "get_stat"
                },
                "FUN_001126c0": {
                    "1": "print_message",
                    "2": "print_error_message"
                },
                "FUN_00114b84": {
                    "1": "process_file"
                },
                "FUN_00119ed0": {
                    "1": "print_error_message"
                },
                "FUN_0011a0e0": {
                    "1": "get_temp_dir_path",
                    "2": "create_temp_dir"
                },
                "FUN_0011a110": {
                    "1": "print_error_info_from_stat"
                },
                "FUN_0011a350": {
                    "1": "execute_function"
                },
                "IN_STACK_00000030": {
                    "1": "unknown_flag"
                },
                "I_VAR2": {
                    "1": "architecture"
                },
                "L_VAR12": {
                    "1": "file_size"
                },
                "L_VAR14": {
                    "1": "bytes_to_read"
                },
                "L_VAR5": {
                    "1": "bytes_read"
                },
                "PARAM_10": {
                    "1": "file_path_to_copy"
                },
                "PARAM_11": {
                    "1": "open_mode"
                },
                "PARAM_18": {
                    "1": "chmod_mode"
                },
                "PARAM_19": {
                    "1": "file_size"
                },
                "PARAM_7": {
                    "1": "archive_file_name_list"
                },
                "PARAM_8": {
                    "1": "bytes_remaining_ptr"
                },
                "PARAM_9": {
                    "1": "temp_dir_to_create"
                },
                "PC_VAR10": {
                    "1": "error_message"
                },
                "PC_VAR13": {
                    "1": "close_function"
                },
                "PC_VAR15": {
                    "1": "member_name"
                },
                "PC_VAR7": {
                    "1": "current_path"
                },
                "PI_VAR9": {
                    "1": "errno_location"
                },
                "PPC_VAR3": {
                    "1": "arg_list"
                },
                "PPC_VAR6": {
                    "1": "archive_file"
                },
                "PS_VAR16": {
                    "1": "stat_ptr"
                },
                "PTR_FUN_001125fa": {
                    "1": "some_function_2"
                },
                "PTR_FUN_001126c0": {
                    "1": "some_function_1"
                },
                "PTR_FUN_00114e50": {
                    "1": "some_function_6"
                },
                "PTR_FUN_00119ed0": {
                    "1": "some_function_5"
                },
                "PTR_FUN_0011a0e0": {
                    "1": "some_function_3"
                },
                "PTR_FUN_0011a110": {
                    "1": "some_function_4"
                },
                "PTR_FUN_0011a350": {
                    "1": "some_function_7"
                },
                "PTR_NULL": {
                    "1": "null"
                },
                "PTR___errno_location": {
                    "1": "get_errno_location"
                },
                "PTR_bfd_bread": {
                    "1": "bfd_read"
                },
                "PTR_bfd_bwrite": {
                    "1": "bfd_write"
                },
                "PTR_bfd_check_format": {
                    "1": "bfd_check_format"
                },
                "PTR_bfd_close": {
                    "1": "bfd_close"
                },
                "PTR_bfd_close_all_done": {
                    "1": "bfd_close_or_done"
                },
                "PTR_bfd_get_arch": {
                    "1": "bfd_get_architecture"
                },
                "PTR_bfd_openr": {
                    "1": "bfd_open_for_reading"
                },
                "PTR_bfd_openr_next_archived_file": {
                    "1": "bfd_open_next_archived_file"
                },
                "PTR_bfd_openw": {
                    "1": "bfd_open_for_writing"
                },
                "PTR_bfd_seek": {
                    "1": "bfd_seek"
                },
                "PTR_concat": {
                    "1": "concatenate_strings"
                },
                "PTR_dcgettext": {
                    "1": "dcgettext"
                },
                "PTR_free": {
                    "1": "free"
                },
                "PTR_printf": {
                    "1": "print_formatted_output"
                },
                "PTR_rmdir": {
                    "1": "remove_directory"
                },
                "PTR_stat": {
                    "1": "stat"
                },
                "PTR_strerror": {
                    "1": "strerror"
                },
                "PTR_unlink": {
                    "1": "unlink"
                },
                "PTR_xmalloc": {
                    "1": "xmalloc"
                },
                "PU_VAR8": {
                    "1": "temp_dir_ptr"
                },
                "PV_VAR4": {
                    "1": "buffer"
                },
                "UNAFF_EBX": {
                    "1": "internal_stat_error"
                },
                "UNAFF_R12": {
                    "1": "temp_dir_name"
                },
                "UNAFF_R13": {
                    "1": "temp_dir_list"
                },
                "UNAFF_R15": {
                    "1": "file_pointer"
                },
                "UNAFF_RBP": {
                    "1": "stat_struct"
                },
                "UNAFF_RETADDR": {
                    "1": "return_address"
                },
                "UVAR11": {
                    "1": "temp_dir"
                },
                "__buf": {
                    "1": "stat_buffer"
                },
                "__errno_location": {
                    "1": "get_errno_location",
                    "2": "get_error_number_location"
                },
                "__errnum": {
                    "1": "errnum"
                },
                "__file": {
                    "1": "filename"
                },
                "__format": {
                    "1": "format"
                },
                "__mode_t": {
                    "1": "mode"
                },
                "__name": {
                    "1": "name"
                },
                "__path": {
                    "1": "path"
                },
                "__ptr": {
                    "1": "ptr"
                },
                "bVar17": {
                    "1": "temp_var",
                    "2": "byte_value",
                    "3": "byte_var"
                },
                "bfd_bread": {
                    "1": "read_data"
                },
                "bfd_bwrite": {
                    "1": "write_bfd"
                },
                "bfd_check_format": {
                    "1": "check_bfd_format",
                    "2": "check_file_format"
                },
                "bfd_close": {
                    "1": "close_file",
                    "2": "close_bfd"
                },
                "bfd_close_all_done": {
                    "1": "close_file",
                    "2": "close_all_done"
                },
                "bfd_get_arch": {
                    "1": "get_file_architecture",
                    "2": "get_architecture"
                },
                "bfd_openr": {
                    "1": "open_read"
                },
                "bfd_openr_next_archived_file": {
                    "1": "next_archived_file",
                    "2": "get_next_archived_file"
                },
                "bfd_openw": {
                    "1": "open_file_for_writing"
                },
                "bfd_seek": {
                    "1": "set_file_position"
                },
                "cVar1": {
                    "1": "check_result",
                    "2": "success_flag",
                    "3": "char_var",
                    "5": "success"
                },
                "chmod": {
                    "1": "change_file_mode"
                },
                "concat": {
                    "1": "join_strings"
                },
                "dcgettext": {
                    "1": "get_translated_string"
                },
                "free": {
                    "1": "free_memory"
                },
                "iVar2": {
                    "1": "int_value",
                    "2": "architecture_type",
                    "3": "architecture",
                    "9": "arch_type"
                },
                "in_stack_00000030": {
                    "1": "close_on_empty",
                    "2": "stack_param",
                    "3": "unknown_flag"
                },
                "lVar12": {
                    "1": "temp_var",
                    "14": "file_size",
                    "3": "remaining_size"
                },
                "lVar14": {
                    "1": "long_var14",
                    "2": "bytes_written",
                    "3": "bytes_read",
                    "4": "buffer_size",
                    "6": "read_size"
                },
                "lVar5": {
                    "1": "read_result",
                    "13": "bytes_read",
                    "2": "bytes_written"
                },
                "param_1": {
                    "1": "param1"
                },
                "param_10": {
                    "1": "output_file_name",
                    "2": "format",
                    "3": "destination_file_path"
                },
                "param_11": {
                    "1": "file_mode",
                    "2": "output_file_path",
                    "5": "open_mode",
                    "6": "mode"
                },
                "param_18": {
                    "1": "mode_permissions",
                    "2": "chmod_mode",
                    "3": "file_mode",
                    "4": "file_permissions",
                    "7": "permission"
                },
                "param_19": {
                    "1": "remaining_file_size",
                    "2": "total_file_size",
                    "3": "archive_size",
                    "8": "file_size"
                },
                "param_2": {
                    "1": "param2"
                },
                "param_20": {
                    "1": "format_error_message"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "param_4"
                },
                "param_7": {
                    "1": "archive_path_list",
                    "2": "input_file",
                    "3": "input_file_path",
                    "6": "source_file_path"
                },
                "param_8": {
                    "1": "current_file",
                    "2": "file_sizes",
                    "3": "output_file_size"
                },
                "param_9": {
                    "1": "output_path",
                    "2": "tempdir",
                    "4": "temp_dir",
                    "9": "temp_dir_path"
                },
                "pcVar10": {
                    "1": "current_file_name",
                    "2": "error_str",
                    "3": "file_name",
                    "5": "error_message"
                },
                "pcVar13": {
                    "1": "close_func_ptr",
                    "2": "bfd_close_func",
                    "8": "close_function"
                },
                "pcVar15": {
                    "1": "full_path",
                    "2": "current_path"
                },
                "pcVar7": {
                    "1": "current_char_ptr",
                    "2": "current_path",
                    "4": "current_char"
                },
                "piVar9": {
                    "1": "error_number_ptr",
                    "2": "error_num",
                    "4": "error_number",
                    "5": "errno_ptr"
                },
                "ppcVar10": {
                    "1": "archive_member"
                },
                "ppcVar13": {
                    "1": "close_func"
                },
                "ppcVar16": {
                    "1": "arch_file"
                },
                "ppcVar3": {
                    "1": "next_archived_file",
                    "3": "archived_file",
                    "5": "archived_file_ptr"
                },
                "ppcVar6": {
                    "1": "bfd_handle",
                    "2": "archive_file_pointer",
                    "4": "archive_file"
                },
                "ppcVar7": {
                    "1": "current_file"
                },
                "ppsVar8": {
                    "1": "pointer_pointer_stat_var8"
                },
                "printf": {
                    "1": "print"
                },
                "psVar15": {
                    "1": "stat_buffer"
                },
                "psVar16": {
                    "1": "file_metadata",
                    "2": "stat_pointer"
                },
                "puVar11": {
                    "1": "translated_message"
                },
                "puVar8": {
                    "1": "var_ptr",
                    "2": "temp_dir_ptr",
                    "3": "temp_dir"
                },
                "puVar8_1": {
                    "1": "temp_data"
                },
                "puVar9": {
                    "1": "pointer_int_var9"
                },
                "pvVar4": {
                    "1": "temp_dir",
                    "14": "buffer",
                    "3": "buffer_ptr"
                },
                "rmdir": {
                    "3": "delete_directory"
                },
                "stat": {
                    "1": "get_file_status"
                },
                "strerror": {
                    "1": "get_error_string",
                    "2": "get_error_message"
                },
                "uVar11": {
                    "1": "translated_message",
                    "2": "error_msg",
                    "8": "error_message"
                },
                "unaff_EBX": {
                    "1": "control_flow_var",
                    "2": "stat_error_flag",
                    "6": "stat_error"
                },
                "unaff_R12": {
                    "1": "temp_path",
                    "3": "temp_dir",
                    "4": "archive_path",
                    "5": "temp_dir_path"
                },
                "unaff_R13": {
                    "1": "temp_file_list",
                    "2": "temp_dir_list",
                    "3": "temp_file_info",
                    "4": "temp_files"
                },
                "unaff_R13[2]": {
                    "1": "temp_dir_size"
                },
                "unaff_R15": {
                    "1": "bfd_object",
                    "2": "archive_files",
                    "3": "archive_file"
                },
                "unaff_RBP": {
                    "1": "unaff_rbp",
                    "10": "stat_buffer",
                    "2": "stat_buf_ptr"
                },
                "unaff_retaddr": {
                    "1": "ret_addr",
                    "16": "return_address",
                    "3": "unaff_retaddr"
                },
                "unlink": {
                    "3": "delete_file"
                },
                "xmalloc": {
                    "3": "allocate_memory"
                },
                "xstrdup": {
                    "1": "duplicate_string"
                }
            },
            "called": [
                "FUN_00104ea2",
                "FUN_001052a2",
                "FUN_0011a0e0",
                "xmalloc",
                "chmod",
                "unlink",
                "bfd_openr_next_archived_file",
                "__errno_location",
                "bfd_check_format",
                "FUN_001126c0",
                "bfd_get_arch",
                "bfd_close_all_done",
                "strerror",
                "bfd_close_all_done",
                "bfd_close",
                "FUN_00114b84",
                "bfd_bread",
                "concat",
                "printf",
                "bfd_openr",
                "FUN_001125fa",
                "dcgettext",
                "bfd_openw",
                "free",
                "rmdir",
                "bfd_seek",
                "FUN_0011a350",
                "bfd_close",
                "FUN_00119ed0",
                "FUN_0011a110",
                "FUN_00114e50",
                "stat",
                "xstrdup",
                "bfd_bwrite"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid extract_and_copy_archive_00104ea2(void)\n\n{\n  char result;\n  int arch_type;\n  char **archived_file_ptr;\n  void *buffer;\n  long bytes_read;\n  char **output_file;\n  char *current_char;\n  undefined8 *temp_dir;\n  int *errno_ptr;\n  char *error_message;\n  undefined8 error_message;\n  long file_size;\n  code *close_function;\n  long read_size;\n  int stat_error;\n  get_file_status *stat_buffer;\n  char *current_path;\n  get_file_status *stat_pointer;\n  char *temp_dir_path;\n  undefined8 *temp_files;\n  char **archived_files;\n  byte byte_var;\n  undefined8 return_address;\n  undefined8 *source_file_path;\n  long *output_file_size;\n  char *temp_dir_path;\n  undefined8 *destination_file_path;\n  undefined8 mode;\n  undefined8 unknown_flag;\n  uint permission;\n  long file_size;\n  \n  byte_var = 0;\ncode_r0x00104ea2:\n  output_file = (char **)bfd_openw(temp_dir_path,mode);\n  if (output_file == (char **)0x0) {\nLAB_00104e80:\n    FUN_001126c0(temp_dir_path,0,0,0);\nLAB_00104e93:\n    DAT_00127a40 = 1;\n  }\n  else {\nLAB_00114a5f:\n    result = FUNC_00114e50(archived_files,output_file,return_address);\n    if (result == '\\0') {\n      arch_type = bfd_get_arch(archived_files);\n      if (arch_type == 0) goto LAB_00104d75;\n      result = bfd_close_all_done(output_file);\n      if (result != '\\0') goto LAB_00104ec9;\n      FUN_001126c0(temp_dir_path,0,0,0);\n      goto LAB_00104ec9;\n    }\n    result = bfd_close(output_file);\n    output_file = archived_files;\n    if (result == '\\0') {\n      FUN_001126c0(temp_dir_path,0,0,0);\n      DAT_00127a40 = 1;\n    }\nLAB_00114a86:\n    if ((DAT_001279eb != '\\0') && (stat_error == 0)) {\n      FUN_0011a350(temp_dir_path,stat_buffer);\n    }\n    file_size = bfd_openr(temp_dir_path,mode);\n    temp_dir_size = file_size;\n    *output_file_size = file_size;\n    output_file_size = (long *)(file_size + 0xf0);\n    archived_files = (char **)bfd_openr_next_archived_file(destination_file_path,output_file);\n    bfd_close(output_file);\n    while ((DAT_00127a40 == 0 && (archived_files != (char **)0x0))) {\n      error_message = *archived_files;\n      current_char = error_message;\n      if (*error_message == '/') {\nLAB_0010527d:\n        error_message = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        FUN_00119ed0(error_message,error_message);\n        goto LAB_00104e93;\n      }\n      while (*current_char != '\\0') {\n        current_path = current_char;\n        if ((*current_char == '.') && (current_path = current_char + 1, current_char[1] == '.')) {\n          current_path = current_char + 2;\n          if ((current_char[2] == '\\0') || (current_char[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*current_path != '\\0' && (*current_path != '/')); current_path = current_path + 1) {\n        }\n        current_char = current_path;\n        if (*current_path == '/') {\n          FUN_001052a2();\n          return;\n        }\n      }\n      stat_buffer = (get_file_status *)&stack0x00000050;\n      temp_dir_path = (char *)concat(temp_dir_path,&DAT_0011b47d);\n      arch_type = get_file_status(temp_dir_path,stat_buffer);\n      temp_dir = temp_files;\n      if (-1 < arch_type) {\n        file_size = FUN_0011a0e0(temp_dir_path);\n        free(temp_dir_path);\n        if (file_size == 0) {\n          errno_ptr = __errno_location();\n          error_message = strerror(*errno_ptr);\n          error_message = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          FUN_00119ed0(error_message,error_message);\n          goto LAB_00104e93;\n        }\n        temp_dir = (undefined8 *)xmalloc(0x18);\n        error_message = *archived_files;\n        *temp_dir = temp_files;\n        temp_dir[2] = 0;\n        temp_dir[1] = file_size;\n        temp_dir_path = (char *)concat(file_size,&DAT_0011b47d,error_message);\n      }\n      stat_error = 0;\n      if (DAT_001279eb != '\\0') {\n        stat_pointer = stat_buffer;\n        for (file_size = 0x24; file_size != 0; file_size = file_size + -1) {\n          *(undefined4 *)&stat_pointer->st_dev = 0;\n          stat_pointer = (get_file_status *)((long)stat_pointer + (ulong)byte_var * -8 + 4);\n        }\n        output_file = (char **)archived_files[0x1d];\n        if ((char **)archived_files[0x1d] == (char **)0x0) {\n          output_file = archived_files;\n        }\n        stat_error = (**(code **)(output_file[1] + 0x1e8))(archived_files,stat_buffer);\n        if (stat_error != 0) {\n          error_message = *archived_files;\n          error_message = dcgettext(0,\"internal get_file_status error on %s\",5);\n          FUN_00119ed0(error_message,error_message);\n        }\n      }\n      temp_files = (undefined8 *)xmalloc(0x18);\n      temp_files[1] = temp_dir_path;\n      *temp_files = temp_dir;\n      temp_dir_size = 0;\n      result = bfd_check_format(archived_files,1);\n      if (result != '\\0') {\n        if (unknown_flag._7_1_ != '\\0') goto code_r0x00104ea2;\n        output_file = (char **)bfd_openw(temp_dir_path,*(undefined8 *)archived_files[1]);\n        if (output_file == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      error_message = dcgettext(0,\"Unable to recognise the format of file\",5);\n      FUN_001126c0(0,archived_files,0,error_message);\n      output_file = (char **)bfd_openw(temp_dir_path,mode);\n      if (output_file == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      archived_file_ptr = (char **)archived_files[0x1d];\n      if ((char **)archived_files[0x1d] == (char **)0x0) {\n        archived_file_ptr = archived_files;\n      }\n      arch_type = (**(code **)(archived_file_ptr[1] + 0x1e8))(archived_files);\n      file_size = file_size;\n      if (arch_type == 0) {\n        if (file_size < 0) {\n          FUN_001125fa(archived_files);\n          error_message = dcgettext(0,\"get_file_status returns negative size for `%s\\'\",5);\n          FUN_00119ed0(error_message);\n        }\n        else {\n          arch_type = bfd_seek(archived_files,0,0);\n          if (arch_type == 0) {\n            if (DAT_001279e9 != '\\0') {\n              error_message = *output_file;\n              error_message = FUN_001125fa(archived_files);\n              current_char = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(current_char,error_message,error_message);\n            }\n            buffer = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (file_size == 0) {\n                chmod(*output_file,permission | 0x100);\n                free(buffer);\n                result = bfd_close_all_done(output_file);\n                output_file = archived_files;\n                if (result == '\\0') {\n                  FUN_001126c0(temp_dir_path,0,0,0);\n                  DAT_00127a40 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              read_size = 0x2000;\n              if (file_size < 0x2001) {\n                read_size = file_size;\n              }\n              bytes_read = bfd_bread(buffer,read_size,archived_files);\n              archived_file_ptr = archived_files;\n              if ((read_size != bytes_read) ||\n                 (bytes_read = bfd_bwrite(buffer,read_size,output_file), archived_file_ptr = output_file, read_size != bytes_read))\n              break;\n              file_size = file_size - read_size;\n            }\n            FUN_001126c0(0,archived_file_ptr,0,0);\n            free(buffer);\n          }\n          else {\n            error_message = FUN_001125fa(archived_files);\n            FUN_0011a110(error_message);\n          }\n        }\n      }\n      else {\n        FUN_001126c0(0,archived_files,0,0);\n      }\n      result = bfd_close_all_done(output_file);\n      if (result == '\\0') {\n        FUN_001126c0(temp_dir_path,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(temp_dir_path);\n      DAT_00127a40 = 1;\n    }\n    *output_file_size = 0;\n    buffer = (void *)xstrdup(*source_file_path);\n    if (DAT_00127a40 == 0) {\n      close_function = bfd_close;\n    }\n    else {\n      close_function = bfd_close_all_done;\n    }\n    result = (*close_function)(source_file_path);\n    if (result == '\\0') {\n      DAT_00127a40 = 1;\n      FUN_001126c0(buffer,0,0,0);\n    }\n    free(buffer);\n    buffer = (void *)xstrdup(*destination_file_path);\n    result = bfd_close(destination_file_path);\n    if (result == '\\0') {\n      DAT_00127a40 = 1;\n      FUN_001126c0(buffer,0,0,0);\n    }\n    free(buffer);\n  }\n  while (temp_files != (undefined8 *)0x0) {\n    if (temp_dir_size == 0) {\n      rmdir((char *)temp_files[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)temp_files[1]);\n    }\n    free((void *)temp_files[1]);\n    temp_dir = (undefined8 *)*temp_files;\n    free(temp_files);\n    temp_files = temp_dir;\n  }\n  rmdir(temp_dir_path);\n  free(temp_dir_path);\n  return;\n}\n\n",
            "current_name": "extract_and_copy_archive_00104ea2",
            "entrypoint": "0x00104ea2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104ea2": "extract_and_copy_archive_00104ea2",
                "__errno_location": "get_error_number_location",
                "bVar17": "byte_var",
                "bfd_bread": "read_bfd",
                "bfd_bwrite": "write_bfd",
                "bfd_check_format": "check_file_format",
                "bfd_close": "close_bfd",
                "bfd_close_all_done": "close_all_done",
                "bfd_get_arch": "get_architecture",
                "bfd_openr": "open_read",
                "bfd_openr_next_archived_file": "get_next_archived_file",
                "bfd_openw": "open_write",
                "bfd_seek": "seek_bfd",
                "cVar1": "result",
                "chmod": "change_file_permissions",
                "concat": "join_strings",
                "dcgettext": "get_translated_string",
                "free": "deallocate_memory",
                "iVar2": "arch_type",
                "in_stack_00000030": "unknown_flag",
                "lVar12": "file_size",
                "lVar14": "read_size",
                "lVar5": "bytes_read",
                "param_10": "destination_file_path",
                "param_11": "mode",
                "param_18": "permission",
                "param_19": "file_size",
                "param_7": "source_file_path",
                "param_8": "output_file_size",
                "param_9": "temp_dir_path",
                "pcVar10": "error_message",
                "pcVar13": "close_function",
                "pcVar15": "current_path",
                "pcVar7": "current_char",
                "piVar9": "errno_ptr",
                "ppcVar3": "archived_file_ptr",
                "ppcVar6": "output_file",
                "printf": "print_formatted_string",
                "psVar16": "stat_pointer",
                "puVar8": "temp_dir",
                "pvVar4": "buffer",
                "rmdir": "delete_directory",
                "stat": "get_file_status",
                "strerror": "get_error_message",
                "uVar11": "error_message",
                "unaff_EBX": "stat_error",
                "unaff_R12": "temp_dir_path",
                "unaff_R13": "temp_files",
                "unaff_R13[2]": "temp_dir_size",
                "unaff_R15": "archived_files",
                "unaff_RBP": "stat_buffer",
                "unaff_retaddr": "return_address",
                "unlink": "delete_file",
                "xmalloc": "allocate_memory",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001052a2": {
            "additional_data": {
                "DAT_001279e9": {
                    "1": "unknown_copy"
                },
                "DAT_001279eb": {
                    "1": "internal_stat_err"
                },
                "FUN_001052a2": {
                    "1": "extract_archive",
                    "13": "extract_and_copy_archive",
                    "2": "extract_and_copy_archived_files",
                    "3": "copy_archive"
                },
                "F_UN001052a2": {
                    "1": "copy_archive_files"
                },
                "__format": {
                    "1": "format_err_msg",
                    "13": "format_string",
                    "4": "error_message_format"
                },
                "bVar18": {
                    "1": "zero_byte",
                    "2": "temp_flag",
                    "3": "byte_var",
                    "9": "flag"
                },
                "cVar1": {
                    "1": "format_result",
                    "2": "format_check_result",
                    "3": "format_check",
                    "4": "check_result",
                    "7": "format_valid"
                },
                "iVar2": {
                    "1": "arch_result",
                    "2": "architecture",
                    "3": "int_var1",
                    "4": "arch_format",
                    "9": "arch_type"
                },
                "iVar3": {
                    "1": "stat_res",
                    "20": "stat_result",
                    "3": "int_var2"
                },
                "in_RAX": {
                    "1": "in_register_ax",
                    "2": "archive_size",
                    "5": "rax_value"
                },
                "in_stack_00000008": {
                    "1": "src_dir",
                    "2": "destination_path"
                },
                "in_stack_00000010": {
                    "1": "file_descriptor_ptr_stack",
                    "2": "file_handle"
                },
                "in_stack_00000018": {
                    "1": "tempdir_prefix_pathname",
                    "10": "temp_dir_path",
                    "2": "tempdir_path",
                    "4": "temp_dir_name"
                },
                "in_stack_00000020": {
                    "1": "initial_stack_value20",
                    "2": "archive_handle"
                },
                "in_stack_00000028": {
                    "1": "stack_param5",
                    "2": "output_format",
                    "4": "open_mode"
                },
                "in_stack_00000030": {
                    "1": "is_archive_writeable",
                    "3": "unknown_flag"
                },
                "in_stack_000000f8": {
                    "1": "output_permissions",
                    "2": "file_mode",
                    "3": "permission_flags",
                    "4": "permission"
                },
                "in_stack_00000110": {
                    "1": "stack_00000110",
                    "2": "file_size_stack",
                    "5": "total_size"
                },
                "lVar12": {
                    "1": "length_2",
                    "2": "temp_dir_size",
                    "20": "file_size",
                    "3": "long_var2"
                },
                "lVar15": {
                    "1": "block_size",
                    "2": "bytes_read",
                    "3": "long_var3",
                    "4": "remaining_size",
                    "5": "chunk_size",
                    "6": "bytes_remaining"
                },
                "lVar5": {
                    "1": "read_result",
                    "10": "bytes_read",
                    "2": "read_size",
                    "3": "long_var1",
                    "7": "bread_result"
                },
                "param_1": {
                    "1": "file_path",
                    "12": "param_1",
                    "18": "param1"
                },
                "param_2": {
                    "1": "file_permission",
                    "12": "param_2",
                    "18": "param2"
                },
                "param_3": {
                    "1": "archive_pathname",
                    "12": "param3",
                    "2": "filename",
                    "3": "param_3",
                    "6": "archive_path"
                },
                "pcVar10": {
                    "1": "path_ptr",
                    "12": "current_char",
                    "2": "file_name",
                    "7": "current_path"
                },
                "pcVar14": {
                    "1": "close_function_ptr",
                    "2": "pointer_to_code",
                    "3": "bfd_close_func",
                    "8": "close_function",
                    "9": "close_func"
                },
                "pcVar16": {
                    "1": "pointer_char_var2",
                    "3": "temp_path",
                    "4": "next_char",
                    "5": "current_char"
                },
                "piVar8": {
                    "1": "ptr_int_var1",
                    "2": "error_num",
                    "3": "errno_location",
                    "4": "errno_loc",
                    "8": "errno_ptr"
                },
                "ppcVar11": {
                    "1": "arch_file_pointer",
                    "2": "archived_files",
                    "3": "archive_ptr",
                    "4": "archived_file"
                },
                "ppcVar4": {
                    "1": "archive_dir",
                    "2": "stat_args"
                },
                "psVar17": {
                    "1": "file_stat_struct",
                    "2": "file_stat",
                    "7": "stat_struct",
                    "8": "stat_buffer"
                },
                "puVar7": {
                    "1": "pointer_u_var",
                    "2": "temp_ptr",
                    "3": "temp_dir_info",
                    "9": "temp_dir"
                },
                "pvVar13": {
                    "1": "pointer_void_var",
                    "19": "buffer",
                    "2": "buffer_ptr"
                },
                "uVar6": {
                    "1": "undefined_1",
                    "2": "temp_dir_error",
                    "4": "format_string"
                },
                "uVar9": {
                    "1": "undefined_2",
                    "3": "error_msg",
                    "4": "error_string",
                    "6": "err_msg",
                    "7": "error_message"
                },
                "unaff_R14": {
                    "1": "tempdir_list",
                    "2": "temp_file_list"
                },
                "unaff_R15": {
                    "1": "file_array_ptr",
                    "2": "archive",
                    "3": "archive_ptr"
                },
                "unaff_retaddr": {
                    "1": "ret_address",
                    "18": "return_address",
                    "2": "ret_addr",
                    "3": "return_addr"
                }
            },
            "called": [],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid extract_and_copy_archive_001052a2(undefined8 param1,undefined8 param2,char *param3)\n\n{\n  char format_valid;\n  int arch_type;\n  int stat_result;\n  char **current_file;\n  long bytes_read;\n  undefined8 format_string;\n  char *format_string;\n  undefined8 *temp_dir;\n  int *errno_ptr;\n  undefined8 error_message;\n  long rax_value;\n  char *current_char;\n  char **archived_file;\n  long file_size;\n  void *buffer;\n  code *close_func;\n  long bytes_remaining;\n  char *current_char;\n  stat *stat_buffer;\n  undefined8 *temp_file_list;\n  char **archive_ptr;\n  byte flag;\n  undefined8 return_address;\n  undefined8 *file_path;\n  long *file_handle;\n  char *temp_dir_path;\n  undefined8 *archive_file_ptr;\n  undefined8 open_mode;\n  undefined8 unknown_flag;\n  uint permission;\n  long total_size;\n  \n  flag = 0;\n  current_char = (char *)(rax_value + 1);\n  do {\n    if (*current_char == '/') {\n      extract_and_copy_archive_001052a2();\n      return;\n    }\n    while (*current_char == '\\0') {\n      current_char = (char *)concat(temp_dir_path,&DAT_0011b47d);\n      stat_result = stat(current_char,(stat *)&stack0x00000050);\n      temp_dir = temp_file_list;\n      if (-1 < stat_result) {\n        file_size = FUN_0011a0e0(current_char);\n        free(current_char);\n        if (file_size == 0) {\n          errno_ptr = __errno_location();\n          current_char = strerror(*errno_ptr);\n          error_message = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          FUN_00119ed0(error_message,current_char);\n          goto LAB_00104e93;\n        }\n        temp_dir = (undefined8 *)xmalloc(0x18);\n        current_char = *archive_ptr;\n        *temp_dir = temp_file_list;\n        temp_dir[2] = 0;\n        temp_dir[1] = file_size;\n        current_char = (char *)concat(file_size,&DAT_0011b47d,current_char);\n      }\n      stat_result = 0;\n      if (DAT_001279eb != '\\0') {\n        stat_buffer = (stat *)&stack0x00000050;\n        for (file_size = 0x24; file_size != 0; file_size = file_size + -1) {\n          *(undefined4 *)&stat_buffer->st_dev = 0;\n          stat_buffer = (stat *)((long)stat_buffer + (ulong)flag * -8 + 4);\n        }\n        archived_file = (char **)archive_ptr[0x1d];\n        if ((char **)archive_ptr[0x1d] == (char **)0x0) {\n          archived_file = archive_ptr;\n        }\n        stat_result = (**(code **)(archived_file[1] + 0x1e8))(archive_ptr,(stat *)&stack0x00000050);\n        if (stat_result != 0) {\n          current_char = *archive_ptr;\n          error_message = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00119ed0(error_message,current_char);\n        }\n      }\n      temp_file_list = (undefined8 *)xmalloc(0x18);\n      temp_file_list[1] = current_char;\n      *temp_file_list = temp_dir;\n      temp_file_list[2] = 0;\n      format_valid = bfd_check_format(archive_ptr,1);\n      if (format_valid == '\\0') {\n        error_message = dcgettext(0,\"Unable to recognise the format of file\",5);\n        FUN_001126c0(0,archive_ptr,0,error_message);\n        archived_file = (char **)bfd_openw(current_char,open_mode);\n        if (archived_file == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        current_file = (char **)archive_ptr[0x1d];\n        if ((char **)archive_ptr[0x1d] == (char **)0x0) {\n          current_file = archive_ptr;\n        }\n        arch_type = (**(code **)(current_file[1] + 0x1e8))(archive_ptr,&stack0x000000e0);\n        file_size = total_size;\n        if (arch_type == 0) {\n          if (total_size < 0) {\n            error_message = FUN_001125fa(archive_ptr);\n            format_string = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            FUN_00119ed0(format_string,error_message);\n          }\n          else {\n            arch_type = bfd_seek(archive_ptr,0,0);\n            if (arch_type == 0) {\n              if (DAT_001279e9 != '\\0') {\n                current_char = *archived_file;\n                error_message = FUN_001125fa(archive_ptr);\n                format_string = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(format_string,error_message,current_char);\n              }\n              buffer = (void *)xmalloc(0x2000);\n              for (; file_size != 0; file_size = file_size - bytes_remaining) {\n                bytes_remaining = 0x2000;\n                if (file_size < 0x2001) {\n                  bytes_remaining = file_size;\n                }\n                bytes_read = bfd_bread(buffer,bytes_remaining,archive_ptr);\n                current_file = archive_ptr;\n                if ((bytes_remaining != bytes_read) ||\n                   (bytes_read = bfd_bwrite(buffer,bytes_remaining,archived_file), current_file = archived_file, bytes_remaining != bytes_read\n                   )) {\n                  FUN_001126c0(0,current_file,0,0);\n                  free(buffer);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*archived_file,permission | 0x100);\n              free(buffer);\n              format_valid = bfd_close_all_done(archived_file);\n              if (format_valid == '\\0') {\n                FUN_001126c0(current_char,0,0,0);\n                DAT_00127a40 = 1;\n              }\n              goto LAB_00114a86;\n            }\n            error_message = FUN_001125fa(archive_ptr);\n            FUN_0011a110(error_message);\n          }\n        }\n        else {\n          FUN_001126c0(0,archive_ptr,0,0);\n        }\nLAB_00104f00:\n        format_valid = bfd_close_all_done(archived_file);\n        if (format_valid == '\\0') {\n          FUN_001126c0(current_char,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(current_char);\n        DAT_00127a40 = 1;\n      }\n      else {\n        if (unknown_flag._7_1_ == '\\0') {\n          archived_file = (char **)bfd_openw(current_char,*(undefined8 *)archive_ptr[1]);\n        }\n        else {\n          archived_file = (char **)bfd_openw(current_char,open_mode);\n        }\n        if (archived_file == (char **)0x0) {\nLAB_00104e80:\n          FUN_001126c0(current_char,0,0,0);\n          goto LAB_00104e93;\n        }\n        format_valid = FUNC_00114e50(archive_ptr,archived_file,return_address);\n        if (format_valid == '\\0') {\n          arch_type = bfd_get_arch(archive_ptr);\n          if (arch_type == 0) goto LAB_00104d75;\n          format_valid = bfd_close_all_done(archived_file);\n          if (format_valid == '\\0') {\n            FUN_001126c0(current_char,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        format_valid = bfd_close(archived_file);\n        if (format_valid == '\\0') {\n          FUN_001126c0(current_char,0,0,0);\n          DAT_00127a40 = 1;\n        }\nLAB_00114a86:\n        if ((DAT_001279eb != '\\0') && (stat_result == 0)) {\n          FUN_0011a350(current_char,(stat *)&stack0x00000050);\n        }\n        file_size = bfd_openr(current_char,open_mode);\n        temp_file_list[2] = file_size;\n        *file_handle = file_size;\n        file_handle = (long *)(file_size + 0xf0);\n        archived_file = (char **)bfd_openr_next_archived_file(archive_file_ptr,archive_ptr);\n        bfd_close(archive_ptr);\n        archive_ptr = archived_file;\n      }\n      if ((DAT_00127a40 != 0) || (archive_ptr == (char **)0x0)) {\n        *file_handle = 0;\n        buffer = (void *)xstrdup(*file_path);\n        if (DAT_00127a40 == 0) {\n          close_func = bfd_close;\n        }\n        else {\n          close_func = bfd_close_all_done;\n        }\n        format_valid = (*close_func)(file_path);\n        if (format_valid == '\\0') {\n          DAT_00127a40 = 1;\n          FUN_001126c0(buffer,0,0,0);\n        }\n        free(buffer);\n        buffer = (void *)xstrdup(*archive_file_ptr);\n        format_valid = bfd_close(archive_file_ptr);\n        if (format_valid == '\\0') {\n          DAT_00127a40 = 1;\n          FUN_001126c0(buffer,0,0,0);\n        }\n        free(buffer);\n        goto LAB_00114b4b;\n      }\n      current_char = *archive_ptr;\n      param3 = current_char;\n      if (*current_char == '/') goto LAB_0010527d;\n    }\n    current_char = current_char;\n    if ((*current_char == '.') && (current_char = current_char + 1, current_char[1] == '.')) {\n      current_char = current_char + 2;\n      if ((current_char[2] == '\\0') || (current_char[2] == '/')) {\nLAB_0010527d:\n        error_message = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        FUN_00119ed0(error_message,param3);\nLAB_00104e93:\n        DAT_00127a40 = 1;\nLAB_00114b4b:\n        while (temp_file_list != (undefined8 *)0x0) {\n          if (temp_file_list[2] == 0) {\n            rmdir((char *)temp_file_list[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)temp_file_list[1]);\n          }\n          free((void *)temp_file_list[1]);\n          temp_dir = (undefined8 *)*temp_file_list;\n          free(temp_file_list);\n          temp_file_list = temp_dir;\n        }\n        rmdir(temp_dir_path);\n        free(temp_dir_path);\n        return;\n      }\n    }\n    for (; (current_char = current_char, *current_char != '\\0' && (*current_char != '/')); current_char = current_char + 1) {\n    }\n  } while( true );\n}\n\n",
            "current_name": "extract_and_copy_archive_001052a2",
            "entrypoint": "0x001052a2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001052a2": "extract_and_copy_archive_001052a2",
                "__format": "format_string",
                "bVar18": "flag",
                "cVar1": "format_valid",
                "iVar2": "arch_type",
                "iVar3": "stat_result",
                "in_RAX": "rax_value",
                "in_stack_00000008": "file_path",
                "in_stack_00000010": "file_handle",
                "in_stack_00000018": "temp_dir_path",
                "in_stack_00000020": "archive_file_ptr",
                "in_stack_00000028": "open_mode",
                "in_stack_00000030": "unknown_flag",
                "in_stack_000000f8": "permission",
                "in_stack_00000110": "total_size",
                "lVar12": "file_size",
                "lVar15": "bytes_remaining",
                "lVar5": "bytes_read",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "pcVar10": "current_char",
                "pcVar14": "close_func",
                "pcVar16": "current_char",
                "piVar8": "errno_ptr",
                "ppcVar11": "archived_file",
                "ppcVar4": "current_file",
                "psVar17": "stat_buffer",
                "puVar7": "temp_dir",
                "pvVar13": "buffer",
                "uVar6": "format_string",
                "uVar9": "error_message",
                "unaff_R14": "temp_file_list",
                "unaff_R15": "archive_ptr",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001053b5": {
            "additional_data": {
                "FUN_001053b5": {
                    "1": "check_bad_format",
                    "2": "print_error_message",
                    "4": "print_bad_format_error",
                    "6": "print_bad_format_error_message",
                    "7": "format_error_message"
                },
                "dcgettext": {
                    "1": "retrieve_localized_string",
                    "2": "get_translated_string"
                },
                "param_1": {
                    "1": "undefined1"
                },
                "param_2": {
                    "1": "undefined_param2"
                },
                "param_3": {
                    "1": "undefined_param3"
                },
                "param_4": {
                    "1": "arg_4"
                },
                "uVar1": {
                    "1": "err_msg",
                    "21": "error_message",
                    "3": "format_error_message"
                }
            },
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "calling": [
                "FUN_00114c80"
            ],
            "code": "\nvoid format_error_message_001053b5(void)\n\n{\n  undefined8 error_message;\n  \n  error_message = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(error_message);\n}\n\n",
            "current_name": "format_error_message_001053b5",
            "entrypoint": "0x001053b5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001053b5": "format_error_message_001053b5",
                "dcgettext": "get_translated_message",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001053d5": {
            "additional_data": {
                "FUN_001053d5": {
                    "1": "close_all_and_return_status",
                    "2": "close_and_return_status",
                    "3": "execute_function",
                    "4": "initialize_and_close"
                },
                "FUN_0011a110": {
                    "1": "perform_action_on_pointer"
                },
                "param_1": {
                    "1": "input"
                },
                "unaff_R12": {
                    "1": "param_1",
                    "3": "data_ptr",
                    "6": "base_address"
                },
                "unaff_R14": {
                    "1": "pointer_array",
                    "2": "data_ptr",
                    "3": "function_ptr"
                }
            },
            "called": [
                "FUN_0011a110"
            ],
            "calling": [
                "FUN_00119f70"
            ],
            "code": "\nundefined4 initialize_and_close_001053d5(void)\n\n{\n  long base_address;\n  undefined8 *function_ptr;\n  \n  FUN_0011a110(*function_ptr);\n  *(undefined4 *)(base_address + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(base_address + 8);\n}\n\n",
            "current_name": "initialize_and_close_001053d5",
            "entrypoint": "0x001053d5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001053d5": "initialize_and_close_001053d5",
                "unaff_R12": "base_address",
                "unaff_R14": "function_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010540e": {
            "additional_data": {
                "(*(int *)(*(long *)(param_2 + 8) + 8)": {
                    "1": "ptr1"
                },
                "(*(long *)(*(long *)(param_2 + 8) + 0x380) + 0x71)": {
                    "1": "ptr2"
                },
                "*(byte *)(*(long *)(*(long *)(param_2 + 8) + 0x380) + 0x71)": {
                    "1": "byte_val"
                },
                "*(int *)(*(long *)(param_2 + 8) + 8)": {
                    "1": "value1"
                },
                "*(long *)(*(long *)(param_2 + 8) + 0x380)": {
                    "1": "ptr"
                },
                "0x00105422": {
                    "1": "jumptable"
                },
                "0x380": {
                    "1": "offset"
                },
                "0x71": {
                    "1": "byte_offset"
                },
                "0x78": {
                    "1": "function_offset"
                },
                "FUN_0010540e": {
                    "1": "process_data",
                    "2": "execute_action",
                    "20": "execute_function"
                },
                "byte": {
                    "1": "data_byte"
                },
                "byteValue": {
                    "1": "byte_val"
                },
                "in_RAX": {
                    "1": "temp_value",
                    "4": "temp1",
                    "6": "rax"
                },
                "param_1": {
                    "1": "data",
                    "13": "param1",
                    "2": "input_1",
                    "3": "function_pointer"
                },
                "param_2": {
                    "1": "param_b",
                    "13": "param2",
                    "2": "input_2",
                    "5": "data_pointer"
                },
                "param_3": {
                    "1": "input_3",
                    "12": "param3",
                    "2": "condition_flag",
                    "5": "flag",
                    "6": "condition"
                }
            },
            "called": [],
            "calling": [
                "FUN_00114d50"
            ],
            "code": "\nvoid execute_function_0010540e(undefined8 param1,long param2,uint param3)\n\n{\n  long rax;\n  \n  if ((param3 == 2) && (*(int *)(*(long *)(param2 + 8) + 8) == 2)) {\n    param3 = (uint)*(data_byte *)(*(long *)(*(long *)(param2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(rax + 0x380) + 0x78))(param1,param3 != 0);\n  return;\n}\n\n",
            "current_name": "execute_function_0010540e",
            "entrypoint": "0x0010540e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010540e": "execute_function_0010540e",
                "byte": "data_byte",
                "in_RAX": "rax",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010543c": {
            "additional_data": {
                "*piVar2": {
                    "1": "error_number"
                },
                "FUNKY_FUNCTION": {
                    "1": "handle_open_error"
                },
                "FUN_0010543c": {
                    "1": "open_and_handle_error",
                    "2": "open_and_report_error",
                    "3": "open_file_with_error_message",
                    "4": "open_file_with_error_handling",
                    "5": "open_file_and_print_error",
                    "8": "open_file"
                },
                "param_1": {
                    "1": "error_string"
                },
                "param_2": {
                    "1": "file"
                },
                "pcVar3": {
                    "1": "error_description",
                    "2": "error_msg",
                    "23": "error_message",
                    "5": "error_string"
                },
                "piVar2": {
                    "1": "error_num",
                    "2": "error_number_ptr",
                    "4": "error_location",
                    "5": "errno_ptr",
                    "7": "errno_location"
                },
                "uVar1": {
                    "1": "arg1",
                    "18": "file_descriptor",
                    "2": "file_name",
                    "6": "file_handle"
                },
                "uVar4": {
                    "1": "formatted_error",
                    "2": "error_message_format",
                    "3": "error_message",
                    "5": "translated_error_message",
                    "8": "localized_error_message"
                },
                "unaff_RBP": {
                    "1": "file_descriptor",
                    "2": "stack_base",
                    "4": "stack_pointer",
                    "6": "base_pointer"
                }
            },
            "called": [
                "FUN_00119dd0",
                "dcgettext",
                "__errno_location",
                "strerror"
            ],
            "calling": [
                "FUN_00114d60"
            ],
            "code": "\nvoid open_file_0010543c(void)\n\n{\n  undefined8 file_descriptor;\n  int *errno_location;\n  char *error_message;\n  undefined8 localized_error_message;\n  long base_pointer;\n  \n  errno_location = __errno_location();\n  error_message = strerror(*errno_location);\n  file_descriptor = *(undefined8 *)(base_pointer + 0x10);\n  localized_error_message = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  FUN_00119dd0(localized_error_message,file_descriptor,error_message);\n}\n\n",
            "current_name": "open_file_0010543c",
            "entrypoint": "0x0010543c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010543c": "open_file_0010543c",
                "pcVar3": "error_message",
                "piVar2": "errno_location",
                "uVar1": "file_descriptor",
                "uVar4": "localized_error_message",
                "unaff_RBP": "base_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001054af": {
            "additional_data": {
                "FUN_001054af": {
                    "1": "cleanup_data",
                    "11": "cleanup_hashtables",
                    "2": "cleanup",
                    "4": "cleanup_function"
                },
                "in_RAX": {
                    "1": "not_used_variable",
                    "4": "unused_var",
                    "8": "unused_variable"
                },
                "param_1": {
                    "1": "param1",
                    "13": "unused_param",
                    "3": "arg1",
                    "5": "unused_param1"
                },
                "param_2": {
                    "1": "not_used_param",
                    "12": "unused_param",
                    "3": "arg2",
                    "5": "unused_param2",
                    "6": "unused_param_2"
                }
            },
            "called": [
                "htab_delete"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid cleanup_hashtables_001054af(undefined8 unused_param,undefined8 unused_param)\n\n{\n  undefined8 unused_variable;\n  \n  htab_delete(DAT_00127a18);\n  htab_delete(DAT_00127a10);\n  htab_delete(DAT_00127a28);\n  htab_delete(DAT_00127a08);\n  htab_delete(DAT_00127a00);\n  htab_delete(DAT_001279f8);\n  htab_delete(DAT_001279f0);\n  htab_delete(DAT_001278f0);\n  htab_delete(DAT_001278e8,unused_param,unused_variable);\n  return;\n}\n\n",
            "current_name": "cleanup_hashtables_001054af",
            "entrypoint": "0x001054af",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001054af": "cleanup_hashtables_001054af",
                "in_RAX": "unused_variable",
                "param_1": "unused_param",
                "param_2": "unused_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010551d": {
            "additional_data": {
                "DAT_001279a0": {
                    "1": "flag_variable"
                },
                "FILE": {
                    "2": "file"
                },
                "FUN_0010551d": {
                    "1": "extract_and_improve_code",
                    "2": "process_binary",
                    "3": "merge_debugging_information",
                    "6": "merge_debug_sections"
                },
                "FUN_001126c0": {
                    "1": "handle_error"
                },
                "__errno_location": {
                    "1": "errno_location"
                },
                "__ptr": {
                    "1": "ptr_val2"
                },
                "__ptr_00": {
                    "1": "ptr2"
                },
                "__s": {
                    "1": "string_variable",
                    "2": "section_name",
                    "3": "string1"
                },
                "__s_00": {
                    "1": "file_ptr1"
                },
                "_cStack0000000000000148": {
                    "1": "char_var3"
                },
                "_in_stack_00000018": {
                    "1": "stack_variable"
                },
                "_s": {
                    "1": "p_char_value"
                },
                "_uStack0000000000000048": {
                    "1": "int_pointer1"
                },
                "bStack0000000000000100": {
                    "1": "byte_value"
                },
                "bStack0000000000000101": {
                    "1": "byte_value"
                },
                "bVar2": {
                    "1": "is_merged_section",
                    "2": "byte_value",
                    "3": "byte_variable",
                    "4": "flag",
                    "6": "byte_var"
                },
                "bVar38": {
                    "1": "bool_var38"
                },
                "bVar39": {
                    "1": "byte_variable2"
                },
                "bfd_get_full_section_contents": {
                    "1": "get_full_section_contents"
                },
                "bfd_get_section_size": {
                    "1": "get_section_size"
                },
                "bfd_malloc_and_get_section": {
                    "1": "malloc_and_get_section"
                },
                "bfd_set_section_contents": {
                    "1": "set_section_contents"
                },
                "bfd_set_section_size": {
                    "1": "set_section_size"
                },
                "cStack0000000000000148": {
                    "1": "character_stack_variable148"
                },
                "cVar8": {
                    "1": "char_val",
                    "2": "char1",
                    "3": "char_var8",
                    "5": "char_var1"
                },
                "cVar9": {
                    "1": "char",
                    "2": "success_flag",
                    "3": "char_var9",
                    "7": "char_var2"
                },
                "char": {
                    "3": "char"
                },
                "dcgettext": {
                    "1": "get_message",
                    "2": "get_translated_text"
                },
                "fopen": {
                    "1": "open_file"
                },
                "fprintf": {
                    "1": "print_to_stream"
                },
                "free": {
                    "1": "release_memory",
                    "2": "free_memory"
                },
                "fwrite": {
                    "1": "write_to_file"
                },
                "iStack000000000000006c": {
                    "1": "mach_code_size_bytes"
                },
                "iVar11": {
                    "1": "index",
                    "2": "int_value",
                    "3": "int_var11",
                    "5": "int_var1"
                },
                "iVar13": {
                    "1": "int"
                },
                "iVar14": {
                    "1": "strcmp_result",
                    "2": "int_value",
                    "3": "int_var14",
                    "6": "int_var2"
                },
                "iVar23": {
                    "1": "int_var23"
                },
                "iVar31": {
                    "1": "int3",
                    "2": "int_var3"
                },
                "in_stack_00000008": {
                    "1": "stack_var00000008"
                },
                "in_stack_00000010": {
                    "1": "stack_integer1",
                    "2": "count"
                },
                "in_stack_00000018": {
                    "1": "byte1"
                },
                "in_stack_000000c0": {
                    "1": "parameter3"
                },
                "in_stack_000000c8": {
                    "1": "ulong_variable"
                },
                "in_stack_000000d0": {
                    "1": "long_var2"
                },
                "in_stack_000000d8": {
                    "1": "parameter5"
                },
                "in_stack_000000e0": {
                    "1": "parameter6"
                },
                "in_stack_000000f0": {
                    "1": "long_var4"
                },
                "in_stack_000000f8": {
                    "1": "parameter8"
                },
                "in_stack_00000110": {
                    "1": "parameter9"
                },
                "in_stack_00000118": {
                    "1": "short_value"
                },
                "in_stack_00000140": {
                    "1": "string_pointer"
                },
                "in_stack_00000150": {
                    "1": "parameter12"
                },
                "int": {
                    "1": "int"
                },
                "lStack0000000000000078": {
                    "1": "debug_link_section_size"
                },
                "lStack0000000000000088": {
                    "1": "section_contents_size"
                },
                "lStack00000000000000a0": {
                    "1": "start_address"
                },
                "lVar21": {
                    "1": "var21",
                    "2": "long1",
                    "4": "long_var1"
                },
                "lVar23": {
                    "1": "long_variable23"
                },
                "lVar25": {
                    "1": "new_value7",
                    "2": "long_var25",
                    "3": "long_var2"
                },
                "lVar27": {
                    "1": "long_variable27",
                    "2": "long_var27",
                    "3": "long_var3"
                },
                "lVar29": {
                    "1": "long_variable29"
                },
                "lVar37": {
                    "1": "long_val4"
                },
                "long": {
                    "2": "long"
                },
                "pcVar19": {
                    "1": "character_pointer2",
                    "2": "pointer_var19"
                },
                "pcVar20": {
                    "1": "char_pointer"
                },
                "pcVar24": {
                    "1": "char_pointer2"
                },
                "pcVar28": {
                    "1": "string_variable2",
                    "2": "pointer_var28"
                },
                "pcVar33": {
                    "1": "char_ptr5",
                    "2": "pointer_var33"
                },
                "pcVar35": {
                    "1": "pointer_var35"
                },
                "pcVar39": {
                    "1": "char_ptr39"
                },
                "pcVar4": {
                    "1": "code_pointer",
                    "2": "section_contents",
                    "3": "function_ptr",
                    "9": "function_pointer"
                },
                "pcVar8": {
                    "1": "section_name"
                },
                "pcVar9": {
                    "1": "comparision_result"
                },
                "piVar23": {
                    "1": "ptr_int_var",
                    "2": "int_ptr"
                },
                "plVar15": {
                    "1": "pointer_list",
                    "2": "long_pointer1",
                    "4": "pointer4"
                },
                "plVar21": {
                    "1": "long_pointer3"
                },
                "plVar26": {
                    "1": "pointer_to_long_variable2"
                },
                "plVar32": {
                    "1": "ptr5",
                    "2": "long_pointer2"
                },
                "ppcVar35": {
                    "1": "pointer13"
                },
                "ppuVar37": {
                    "1": "double_pointer1"
                },
                "ppvVar37": {
                    "1": "merged_note_section_table"
                },
                "puVar1": {
                    "1": "sym_flags_ptr",
                    "10": "pointer1",
                    "2": "pointer_variable1",
                    "3": "section_flags",
                    "4": "pointer_var1"
                },
                "puVar23": {
                    "1": "p_pointer"
                },
                "puVar29": {
                    "1": "pointer9",
                    "2": "pointer_variable2"
                },
                "puVar3": {
                    "1": "ptr2",
                    "2": "ptr",
                    "3": "pointer_var3",
                    "9": "pointer2"
                },
                "puVar34": {
                    "1": "file_output"
                },
                "puVar35": {
                    "1": "pointer5"
                },
                "puVar5": {
                    "1": "ptr2",
                    "3": "pointer_var5",
                    "9": "pointer3"
                },
                "pvVar36": {
                    "1": "void_pointer"
                },
                "sStack000000000000015a": {
                    "1": "short_value"
                },
                "sVar18": {
                    "1": "size1",
                    "2": "size_var",
                    "3": "size_var18",
                    "4": "size_var1"
                },
                "sVar19": {
                    "1": "size_variable19"
                },
                "sVar26": {
                    "1": "stabstr_length",
                    "5": "size_var2"
                },
                "size_t": {
                    "1": "size_t"
                },
                "strcat": {
                    "1": "concatenate_strings"
                },
                "strcmp": {
                    "1": "compare_strings"
                },
                "strdup": {
                    "1": "duplicate_string"
                },
                "strerror": {
                    "1": "string_error"
                },
                "strlen": {
                    "1": "string_length"
                },
                "strstr": {
                    "1": "find_substring"
                },
                "uStack0000000000000048": {
                    "1": "alternative_mach_code"
                },
                "uStack0000000000000158": {
                    "1": "unsigned_stack_variable158"
                },
                "uVar10": {
                    "1": "int_value",
                    "2": "uint_var10",
                    "3": "uint_var1"
                },
                "uVar12": {
                    "1": "uint_var1",
                    "2": "uint_variable2",
                    "4": "uint_var2"
                },
                "uVar13": {
                    "1": "uint_val3",
                    "2": "uint_value",
                    "3": "uint_var3"
                },
                "uVar16": {
                    "1": "new_value",
                    "2": "ulong_variable3",
                    "3": "ulong_var3"
                },
                "uVar17": {
                    "1": "unsigned_var17",
                    "2": "ulong_variable4",
                    "3": "ulong_var4"
                },
                "uVar20": {
                    "1": "unsigned_variable8"
                },
                "uVar22": {
                    "1": "ulong_variable6"
                },
                "uVar24": {
                    "1": "new_value6"
                },
                "uVar26": {
                    "1": "uint_var26"
                },
                "uVar28": {
                    "1": "unsigned_variable28"
                },
                "uVar30": {
                    "1": "unsigned_variable11"
                },
                "uVar31": {
                    "1": "unsigned_variable31"
                },
                "uVar6": {
                    "1": "result1",
                    "2": "unsigned_var6",
                    "5": "ulong_var1"
                },
                "uVar7": {
                    "1": "result2",
                    "2": "unsigned_var2",
                    "5": "ulong_var2"
                },
                "unaff_R13": {
                    "1": "register_r13"
                },
                "unaff_R14": {
                    "1": "var_ptr4",
                    "2": "register_r14"
                },
                "unaff_RBP": {
                    "1": "var_ptr"
                },
                "unaff_RBX": {
                    "1": "var_ptr2",
                    "2": "register_bx"
                },
                "undefined": {
                    "4": "void"
                },
                "undefined8": {
                    "1": "void"
                },
                "undefined8_1": {
                    "1": "undefined8_1"
                },
                "unsigned short": {
                    "1": "ushort"
                },
                "varOffset": {
                    "1": "var_offset"
                },
                "void": {
                    "1": "void"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "dcgettext",
                "free",
                "FUN_001126c0"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong merge_debug_sections_0010551d(void)\n\n{\n  uint *pointer1;\n  byte byte_var;\n  void *pointer2;\n  code *function_pointer;\n  void *pointer3;\n  ulong ulong_var1;\n  ulong ulong_var2;\n  char *string1;\n  char char_var1;\n  char char_var2;\n  uint uint_var1;\n  int int_var1;\n  uint uint_var2;\n  void4 uint_var3;\n  int int_var2;\n  long *pointer4;\n  void ulong_var3;\n  void ulong_var4;\n  size_t size_var1;\n  char *pointer_var19;\n  void *pointer_var;\n  void *pointer_var00;\n  ulong ulong_variable5;\n  long long_var1;\n  ulong ulong_variable6;\n  int *int_ptr;\n  ulong unsigned_var24;\n  long long_var2;\n  file *error_message;\n  size_t size_var2;\n  long long_var3;\n  long *register_bx;\n  char *pointer_var28;\n  void *pointer_variable2;\n  ulong unsigned_var30;\n  int int_var31;\n  long previous_frame_pointer;\n  long *long_pointer2;\n  char *pointer_var33;\n  void4 *pointer4;\n  char **debug_section_names;\n  long *long_pointer2;\n  void *void_pointer;\n  void *register_r14;\n  void **double_pointer_var;\n  bool bool_variable1;\n  byte byte_variable2;\n  long stack_var00000008;\n  ulong count;\n  char parameter2;\n  void4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint alternative_mach_code;\n  int mach_code_size_bytes;\n  long debug_link_section_size;\n  long section_contents_size;\n  char *pcStack0000000000000090;\n  long start_address;\n  long *parameter3;\n  ulong ulong_variable;\n  long parameter4;\n  long parameter5;\n  void *parameter6;\n  long parameter7;\n  void parameter8;\n  byte byte_value;\n  byte byte_value;\n  void parameter9;\n  ushort parameter10;\n  char *character_pointer3;\n  char character_stack_variable148;\n  char *parameter12;\n  void unsigned_stack_variable158;\n  short short_stack_variable15a;\n  \n  byte_variable2 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  FUN_001126c0(0);\n  free_memory(register_bx);\nLAB_001151a2:\n  previous_frame_pointer = *(long *)(previous_frame_pointer + 8);\n  pointer_variable2 = DAT_001279d0;\n  if (previous_frame_pointer == 0) goto joined_r0x001151c7;\n  if (DAT_00127a20 != '\\0') {\n    if ((((*(int *)(register_r14[1] + 8) != 5) || (*(int *)(*(long *)(previous_frame_pointer + 0xd0) + 4) != 7)) ||\n        (char_var2 = FUN_00113fb0(), char_var2 == '\\0')) ||\n       ((*(long *)(previous_frame_pointer + 0x60) == 0 || (long_var2 = *(long *)(previous_frame_pointer + 0x40), long_var2 == 0))))\n    goto LAB_001151a2;\n    register_bx = (long *)xmalloc(0x20);\n    register_bx[1] = 0;\n    char_var2 = bfd_get_full_section_contents();\n    if (char_var2 != '\\0') {\n      long_var3 = FUN_001163d0();\n      register_bx[2] = long_var3;\n      if ((long_var3 == long_var2) || (char_var2 = bfd_set_section_size(), char_var2 != '\\0')) {\n        register_bx[3] = (long)long_pointer2;\n        *register_bx = previous_frame_pointer;\n        long_pointer2 = register_bx;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,stack_var00000008,previous_frame_pointer);\n        free_memory((void *)register_bx[1]);\n        free_memory(register_bx);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (long_var2 = *(long *)(previous_frame_pointer + 8); long_var2 != 0; long_var2 = *(long *)(long_var2 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; pointer_variable2 != (void *)0x0; pointer_variable2 = (void *)*pointer_variable2) {\n    long_var2 = bfd_getp_char_valueection_by_name();\n    if (long_var2 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(long_var2 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      size_var1 = *(size_t *)(long_var2 + 0x40);\n      error_message = fopen((char *)pointer_variable2[2],\"w\");\n      if (error_message == (file *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(pointer_variable2[2],0,0);\n      }\n      else {\n        char_var2 = bfd_malloc_and_get_section();\n        if (char_var2 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((size_var1 != 0) &&\n                (size_var2 = fwrite(character_pointer3,1,size_var1,error_message), size_var2 != size_var1)) {\n          int_ptr = __errno_location();\n          pointer_var33 = strerror(*int_ptr);\n          ulong_var4 = pointer_variable2[2];\n          ulong_var3 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(ulong_var3,ulong_var4,pointer_var33);\n          free_memory(character_pointer3);\n          fclose(error_message);\n          return 0;\n        }\n        fclose(error_message);\n        free_memory(character_pointer3);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    debug_link_section_size = 0;\n  }\n  else {\n    long_var2 = bfd_getp_char_valueection_by_name(stack_var00000008,\".gnu_debuglink\");\n    if (long_var2 != 0) {\n      ulong_var4 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(ulong_var4);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    debug_link_section_size = bfd_create_gnu_debuglinkp_char_valueection(stack_var00000008);\n    long_var2 = DAT_00127a30;\n    if (debug_link_section_size == 0) {\n      ulong_var4 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,stack_var00000008,0,ulong_var4,long_var2);\n      return 0;\n    }\n    if (*(int *)(*(long *)(stack_var00000008 + 8) + 8) == 2) {\n      ulong_variable5 = 0;\n      for (unsigned_var24 = *(ulong *)(stack_var00000008 + 0x90); unsigned_var24 != 0;\n          unsigned_var24 = *(ulong *)(unsigned_var24 + 8)) {\n        ulong_variable6 = *(ulong *)(unsigned_var24 + 0x30);\n        unsigned_var30 = ulong_variable5;\n        ulong_var1 = unsigned_var24;\n        ulong_var2 = ulong_variable5;\n        if (ulong_variable6 != 0) {\n          while ((unsigned_var30 = ulong_var1, ulong_var2 != 0 &&\n                 (unsigned_var30 = unsigned_var24, ulong_variable6 <= *(ulong *)(ulong_variable5 + 0x30)))) {\n            unsigned_var24 = *(ulong *)(unsigned_var24 + 8);\n            if (unsigned_var24 == 0) goto LAB_00107db8;\n            ulong_variable6 = *(ulong *)(unsigned_var24 + 0x30);\n            ulong_var1 = ulong_variable5;\n            ulong_var2 = ulong_variable6;\n          }\n        }\n        ulong_variable5 = unsigned_var30;\n      }\nLAB_00107db8:\n      if (ulong_variable5 == 0) {\n        unsigned_var24 = 0x1000;\n      }\n      else {\n        ulong_variable5 = *(long *)(ulong_variable5 + 0x40) + *(long *)(ulong_variable5 + 0x30);\n        unsigned_var24 = 0xffffffffffffffff;\n        if (ulong_variable5 < 0xfffffffffffff001) {\n          unsigned_var24 = ulong_variable5 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(debug_link_section_size + 0x28) = *(byte *)(debug_link_section_size + 0x28) | 1;\n      *(ulong *)(debug_link_section_size + 0x30) = unsigned_var24;\n      *(ulong *)(debug_link_section_size + 0x38) = unsigned_var24;\n    }\n  }\n  long_pointer2 = DAT_001278d0;\n  mach_code_size_bytes = *(int *)(stack_var00000008 + 0xa0);\n  if (mach_code_size_bytes != 0) {\n    unsigned_var24 = FUN_0010554f();\n    return unsigned_var24;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (void4 *)0x0;\n  }\n  else {\n    double_pointer_var = &PTRp_char_valuestring1tab_00125c60;\n    puStack0000000000000020 = (void4 *)xmalloc(0x60);\n    pointer4 = puStack0000000000000020;\n    for (long_var2 = 0x18; long_var2 != 0; long_var2 = long_var2 + -1) {\n      *pointer4 = 0;\n      pointer4 = pointer4 + (ulong)byte_variable2 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      pointer2 = *double_pointer_var;\n      long_var2 = bfd_getp_char_valueection_by_name();\n      long_var3 = bfd_getp_char_valueection_by_name();\n      if ((long_var2 != 0) && (long_var3 != 0)) {\n        long_var2 = *(long *)(long_var2 + 0x40);\n        pointer_var = (void *)xmalloc(long_var2);\n        char_var2 = bfd_getp_char_valueection_contents();\n        if (char_var2 == '\\0') {\n          uint_var3 = bfd_get_error();\n          bfd_errmsg(uint_var3);\n          fprintf(p_char_valuetderr,\"%s: %s: %s\\n\",*register_r14);\n          free_memory(pcStack0000000000000038);\n          free_memory(pointer_var);\n        }\n        else {\n          unsigned_var24 = *(ulong *)(long_var3 + 0x40);\n          pointer_var00 = (void *)xmalloc(unsigned_var24 + 1);\n          parameter2 = bfd_getp_char_valueection_contents();\n          if (parameter2 == '\\0') {\n            uint_var3 = bfd_get_error();\n            bfd_errmsg(uint_var3);\n            fprintf(p_char_valuetderr,\"%s: %s: %s\\n\",*register_r14);\n            free_memory(pcStack0000000000000038);\n          }\n          else {\n            *(void *)((long)pointer_var00 + unsigned_var24) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              start_address = 0;\n              section_contents_size = 0;\n              for (void_pointer = pointer_var; void_pointer <= (void *)((long)pointer_var + long_var2 + -0xc);\n                  void_pointer = (void *)((long)void_pointer + 0xc)) {\n                ulong_variable5 = (**(code **)(register_r14[1] + 0x40))(void_pointer);\n                byte_var = *(byte *)((long)void_pointer + 4);\n                uint_var3 = (**(code **)(register_r14[1] + 0x58))((long)void_pointer + 6);\n                long_var3 = (**(code **)(register_r14[1] + 0x40))((long)void_pointer + 8);\n                if (byte_var == 0) {\n                  section_contents_size = start_address;\n                  start_address = start_address + long_var3;\n                }\n                else {\n                  ulong_variable6 = (ulong_variable5 & 0xffffffff) + section_contents_size;\n                  if (ulong_variable6 < unsigned_var24) {\n                    pointer_var33 = (char *)((long)pointer_var00 + ulong_variable6);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      size_var1 = strlen(pointer_var33);\n                      if (((size_var1 == 0) || (pointer_var28 = pointer_var33 + (size_var1 - 1), *pointer_var28 != '\\')) ||\n                         ((ulong)((long)pointer_var + long_var2) < (long)void_pointer + 0x10U)) goto LAB_001077fb;\n                      *pointer_var28 = '\\0';\n                      void_pointer = (void *)((long)void_pointer + 0xc);\n                      int_var1 = (**(code **)(register_r14[1] + 0x40))(void_pointer);\n                      ulong_variable5 = (ulong)(uint)(int_var1 + (int)section_contents_size);\n                      if (unsigned_var24 <= ulong_variable5) break;\n                      pointer_var33 = (char *)concat(pointer_var33,(long)pointer_var00 + ulong_variable5,0);\n                      *pointer_var28 = '\\';\n                      free_memory(pcStack0000000000000090);\n                      pcStack0000000000000090 = pointer_var33;\n                    }\n                    ulong_var4 = *register_r14;\n                    pointer_var28 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(p_char_valuetderr,pointer_var28,ulong_var4,pointer2,((long)void_pointer - (long)pointer_var) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)byte_var,uint_var3,long_var3,pointer_var33);\n                    char_var2 = FUN_0011173a(puStack0000000000000020,pcStack0000000000000038,byte_var);\n                    if (char_var2 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free_memory(pcStack0000000000000090);\n                      free_memory(pcStack0000000000000038);\n                      free_memory(pointer_var);\n                      free_memory(pointer_var00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    ulong_var4 = *register_r14;\n                    pointer_var33 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(p_char_valuetderr,pointer_var33,ulong_var4,pointer2,((long)void_pointer - (long)pointer_var) / 0xc,\n                            ulong_variable5 & 0xffffffff,(ulong)byte_var,((long)void_pointer - (long)pointer_var) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free_memory(pointer_var);\n              goto LAB_001058eb;\n            }\n          }\n          free_memory(pointer_var00);\n          free_memory(pointer_var);\n        }\nLAB_00105981:\n        free_memory(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      double_pointer_var = double_pointer_var + 2;\n    } while (double_pointer_var != (void **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (char_var2 = FUN_0010c892(), char_var2 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(register_r14[1] + 8) == 1) {\n      long_var2 = 0;\n      for (pointer4 = long_pointer2; pointer4 < long_pointer2 + count; pointer4 = pointer4 + 1) {\n        (**(code **)(register_r14[1] + 0x218))();\n        if (character_stack_variable148 == '-') {\n          if (((long_var2 != 0) || (long_var2 = FUN_00112894(), long_var2 != 0)) &&\n             ((parameter12 != (char *)0x0 && (*parameter12 != '\\0')))) {\n            pointer_var33 = (char *)0x0;\n            pointer_var28 = parameter12;\n            while (((*pointer_var28 != '\\0' && (size_var1 = strlen(pointer_var28), pointer_var28[size_var1 - 1] == '\\')) &&\n                   (pointer4 + 1 < long_pointer2 + count))) {\n              pointer_var19 = (char *)xstrdup(pointer_var28);\n              size_var1 = strlen(pointer_var19);\n              pointer_var19[size_var1 - 1] = '\\0';\n              pointer_var28 = (char *)concat(pointer_var19,*(void *)(pointer4[1] + 8),0);\n              free_memory(pointer_var19);\n              free_memory(pointer_var33);\n              pointer4 = pointer4 + 1;\n              pointer_var33 = pointer_var28;\n            }\n            FUN_001088ae(unsigned_stack_variable158,(int)short_stack_variable15a,character_pointer3,\n                         pointer_var28);\n            parameter2 = FUN_0011173a(puStack0000000000000020,long_var2,unsigned_stack_variable158);\n            if (parameter2 != '\\0') goto LAB_00106cac;\n            FUN_00108b3e();\n            FUN_00108863();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      FUN_00108863();\n      if ((long_var2 != 0) && (char_var2 = FUN_0010c892(), char_var2 == '\\0')) goto LAB_00105981;\n    }\n    if (parameter2 == '\\0') {\n      if ((*(int *)(register_r14[1] + 8) != 2) || (count == 0)) {\n        pointer_var33 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      character_pointer3 = (char *)0x0;\n      parameter3 = long_pointer2;\n      parameter4 = 0;\n      ulong_variable = count;\n      parameter5 = 0;\n      pointer_variable2 = (void *)&stack0x00000148;\n      for (long_var2 = 0x22; long_var2 != 0; long_var2 = long_var2 + -1) {\n        *(void4 *)pointer_variable2 = 0;\n        pointer_variable2 = (void *)((long)pointer_variable2 + (ulong)byte_variable2 * -8 + 4);\n      }\n      char_var2 = '\\0';\n      int_pointer1 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)count <= parameter4) break;\n        long_var2 = long_pointer2[parameter4];\n        char_var1 = bfd_coff_getp_char_valueyment();\n        long_var3 = parameter5;\n        if (char_var1 == '\\0') {\n          uint_var3 = bfd_get_error();\n          bfd_errmsg(uint_var3);\n          pointer_var33 = \"bfd_coff_getp_char_valueyment failed: %s\";\nLAB_00105968:\n          ulong_var4 = dcgettext(0,pointer_var33,5);\n          FUN_00119ed0(ulong_var4);\n          goto LAB_00105981;\n        }\n        pointer_var33 = *(char **)(long_var2 + 8);\n        parameter4 = parameter4 + 1;\n        parameter5 = (ulong)byte_value + 1 + parameter5;\n        if ((byte_value != 0) && (char_var1 = bfd_coff_get_auxent(), char_var1 == '\\0')) {\n          uint_var3 = bfd_get_error();\n          bfd_errmsg(uint_var3);\n          pointer_var33 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)long_var3) {\n          if (byte_value != 0x67) {\n            char_var1 = FUN_0010bbd3(puStack0000000000000020);\n            if (char_var1 == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)parameter7;\n          char_var1 = FUN_0010bbd3(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)byte_value < '\\0') {\n            if (byte_value == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (byte_value < 100) {\n            switch(byte_value) {\n            case 3:\n              if (parameter8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)parameter8._6_2_ & *(uint *)(register_r14[0x22] + 0x40)) ==\n                  2L << ((byte)*(void4 *)(register_r14[0x22] + 0x3c) & 0x3f)) {\n                int_pointer1 = (int *)(**(code **)(register_r14[1] + 0x238))();\n                pcStack0000000000000038 = pointer_var33;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(byte_value) {\n            case 100:\n              int_var1 = strcmp(pointer_var33,\".bb\");\n              if (int_var1 == 0) {\n                char_var1 = FUN_0010be88(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              int_var1 = strcmp(pointer_var33,\".eb\");\n              if (int_var1 == 0) {\n                char_var1 = FUN_0010bf20(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              int_var1 = strcmp(pointer_var33,\".bf\");\n              if (int_var1 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  long_var3 = FUN_0010dac0();\n                  if ((long_var3 == 0) ||\n                     (char_var2 = FUN_0010bc80(puStack0000000000000020), char_var2 == '\\0'))\n                  goto LAB_00105981;\n                  if (int_pointer1 != (int *)0x0) {\n                    int_var1 = 0;\n                    if (byte_value != 0) {\n                      int_var1 = parameter10 - 1;\n                    }\n                    long_var2 = *(long *)(*(long *)(long_var2 + 0x20) + 0x30);\n                    while( true ) {\n                      int_var31 = int_pointer1[4];\n                      if (int_var31 == 0) break;\n                      char_var1 = FUN_0010bf86(puStack0000000000000020,int_var1 + int_var31,\n                                           *(long *)(int_pointer1 + 6) + long_var2);\n                      int_pointer1 = int_pointer1 + 4;\n                      if (char_var1 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  int_pointer1 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pointer_var33 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                int_var1 = strcmp(pointer_var33,\".ef\");\n                if (int_var1 != 0) goto switchD_00106e1a_caseD_68;\n                if (char_var2 != '\\0') {\n                  char_var2 = FUN_0010be1a(puStack0000000000000020);\n                  if (char_var2 == '\\0') goto LAB_00105981;\n                  char_var2 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pointer_var33 = \"%ld: unexpected .ef\\n\";\n              }\n              ulong_var4 = dcgettext(0,pointer_var33,5);\n              FUN_00119ed0(ulong_var4);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          long_var1 = FUN_0010dac0();\n          if (long_var1 == 0) goto LAB_00105981;\n          char_var1 = FUN_00112a33(&stack0x00000140,long_var2,long_var3);\n        }\njoined_r0x00107247:\n        if (char_var1 == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(stack_var00000008 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(stack_var00000008 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(stack_var00000008 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (count != 0) {\n        long_pointer2 = DAT_001278d0 + count;\n        pointer4 = DAT_001278d0;\n        do {\n          uint_var1 = *(uint *)(*pointer4 + 0x18);\n          if ((uint_var1 & 0x1000000) != 0) {\n            *(uint *)(*pointer4 + 0x18) = uint_var1 & 0xfeffffff;\n          }\n          pointer4 = pointer4 + 1;\n        } while (long_pointer2 != pointer4);\n      }\n    }\n    else {\n      for (long_var2 = *(long *)(stack_var00000008 + 0x90); long_var2 != 0; long_var2 = *(long *)(long_var2 + 8)\n          ) {\n        if (*(long *)(long_var2 + 0xe8) != 0) {\n          pointer1 = (uint *)(*(long *)(long_var2 + 0xe8) + 0x18);\n          *pointer1 = *pointer1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 != 7) {\nLAB_00105a07:\n      bfdp_char_valueet_error(0);\n      bfd_map_overp_char_valueections();\n      int_var1 = bfd_get_error();\n      if (int_var1 != 0) {\n        DAT_00127a40 = 1;\n        return 0;\n      }\n    }\n    long_var2 = xmalloc();\n    long_pointer2 = DAT_001278d0;\n    alternative_mach_code = *(uint *)((long)register_r14 + 0x44) & 0x42;\n    DAT_001278c8 = long_var2;\n    if (count == 0) {\n      unsigned_var24 = 0;\n    }\n    else {\n      unsigned_var24 = 0;\n      stack_variable = 0;\n      do {\n        int_var1 = DAT_001279c0;\n        pointer4 = (long *)long_pointer2[stack_variable];\n        function_pointer = (code *)pointer4[4];\n        uint_var1 = *(uint *)(pointer4 + 3);\n        pointer_var33 = (char *)pointer4[1];\n        pointer_var28 = pointer_var33;\n        if (DAT_001279c8 != (void *)0x0) {\n          int_var31 = 0;\n          pointer_variable2 = DAT_001279c8;\n          while( true ) {\n            if ((int_var1 <= int_var31) || (pointer_var19 = (char *)pointer_variable2[5], pointer_var19 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (pointer_var19 != \"\") break;\nLAB_0010750b:\n            int_var31 = int_var31 + 1;\n          }\n          int_var2 = strcmp(pointer_var19,pointer_var33);\n          if (int_var2 != 0) {\n            pointer_variable2 = (void *)*pointer_variable2;\n            goto LAB_0010750b;\n          }\n          free_memory(pointer_var19);\n          ulong_variable5 = unsigned_var24 + 1;\n          pointer_variable2[5] = \"\";\n          ulong_var3 = FUN_0011a2e0(pointer_variable2);\n          ulong_var4 = DAT_001278f0;\n          *(void *)(long_var2 + unsigned_var24 * 8) = ulong_var3;\n          long_var3 = htab_elements(ulong_var4);\n          if ((long_var3 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          char_var2 = *pointer_var33;\n          if (char_var2 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          pointer_var33 = DAT_00127928;\n          if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(stack_var00000008 + 8) + 0x1c) != '\\0')\n             ) {\n            long_var3 = register_r14[1];\n            char_var2 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        long_var3 = htab_elements(DAT_001278f0);\n        ulong_variable5 = unsigned_var24;\n        if ((long_var3 == 0) && (DAT_001278f8 == (char **)0x0)) goto LAB_00105af8;\n        if (pointer_var33 != (char *)0x0) {\nLAB_001064eb:\n          if (((*pointer_var33 == '_') && (pointer_var33[1] == '_')) &&\n             (int_var1 = strcmp(pointer_var33 + (pointer_var33[2] == '_'),\"__gnu_ltop_char_valuelim\"), int_var1 == 0)) {\n            ulong_var4 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            FUN_00119dd0(ulong_var4);\n          }\n        }\n        char_var3 = 0;\n        character_pointer3 = pointer_var33;\n        long_var3 = htab_find(DAT_001278f0);\n        if (((long_var3 == 0) || (pointer_var28 = *(char **)(long_var3 + 8), pointer_var33 == pointer_var28)) &&\n           (pointer_var28 = pointer_var33, debug_section_names = DAT_001278f8, (uint_var1 & 0x100) != 0)) {\n          for (; debug_section_names != (char **)0x0; debug_section_names = (char **)debug_section_names[3]) {\n            int_var1 = strcmp(*debug_section_names,pointer_var33);\n            if (int_var1 == 0) {\n              pointer_var28 = debug_section_names[1];\n              break;\n            }\n          }\n        }\n        pointer4[1] = (long)pointer_var28;\n        char_var2 = *pointer_var28;\n        if (char_var2 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        pointer_var33 = DAT_00127928;\n        long_var3 = register_r14[1];\n        if (*(char *)(long_var3 + 0x1c) == char_var2) {\n          if (DAT_001279a8 == '\\0') {\n            if ((DAT_00127988 == '\\0') ||\n               ((((uint_var1 & 0x82) == 0 && (function_pointer != bfd_map_overp_char_valueections)) &&\n                ((*(byte *)(pointer4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            pointer_var28 = pointer_var28 + 1;\n            pointer4[1] = (long)pointer_var28;\n            goto joined_r0x00106565;\n          }\n          char_var2 = *(char *)(*(long *)(stack_var00000008 + 8) + 0x1c);\n          if (char_var2 == '\\0') goto LAB_0010677d;\n          if (DAT_00127928 != (char *)0x0) {\n            pointer_var28 = pointer_var28 + 1;\n            pointer4[1] = (long)pointer_var28;\n            size_var1 = strlen(pointer_var28);\n            long_var3 = size_var1 + 2;\n            goto LAB_001066bc;\n          }\n          *pointer_var28 = char_var2;\n          pointer4[1] = (long)pointer_var28;\n          unsigned_var24 = ulong_variable5;\n        }\n        else {\n          if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(stack_var00000008 + 8) + 0x1c) == '\\0')\n             ) {\njoined_r0x00106565:\n            unsigned_var24 = ulong_variable5;\n            if (pointer_var33 == (char *)0x0) goto LAB_00105b32;\n            size_var1 = strlen(pointer_var28);\n            size_var2 = strlen(pointer_var33);\n            pointer_var33 = (char *)xmalloc(size_var2 + size_var1 + 1);\n            pointer_var19 = pointer_var33;\n          }\n          else {\nLAB_0010668d:\n            pointer_var33 = DAT_00127928;\n            if ((*(char *)(long_var3 + 0x1c) != '\\0') && (char_var2 != *(char *)(long_var3 + 0x1c)))\n            goto joined_r0x00106565;\n            size_var1 = strlen(pointer_var28);\n            long_var3 = size_var1 + 2;\n            if (pointer_var33 == (char *)0x0) {\n              pointer_var19 = (char *)xmalloc(long_var3);\n            }\n            else {\nLAB_001066bc:\n              size_var1 = strlen(pointer_var33);\n              pointer_var19 = (char *)xmalloc(size_var1 + long_var3);\n            }\n            pointer_var33 = pointer_var19 + 1;\n            *pointer_var19 = *(char *)(*(long *)(stack_var00000008 + 8) + 0x1c);\n          }\n          string1 = DAT_00127928;\n          if (DAT_00127928 != (char *)0x0) {\n            strcpy(pointer_var33,DAT_00127928);\n            size_var1 = strlen(string1);\n            pointer_var33 = pointer_var33 + size_var1;\n          }\n          strcpy(pointer_var33,pointer_var28);\n          pointer4[1] = (long)pointer_var19;\n          pointer_var28 = pointer_var19;\n          unsigned_var24 = ulong_variable5;\n        }\nLAB_00105b32:\n        if (DAT_00127a48 == 7) goto LAB_001067a8;\n        if (((uint_var1 & 0x20) == 0) &&\n           (((uint_var1 & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(pointer4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((alternative_mach_code == 0) &&\n              (((uint_var1 & 0x82) != 0 || ((*(byte *)(pointer4[4] + 0x25) & 0x10) != 0)))) ||\n             (int_var1 = bfd_decodep_char_valueymclass(pointer4), int_var1 == 0x49)) {\nLAB_00105be2:\n            if (DAT_001279ea == '\\0') {\n              long_var3 = htab_find();\n              if (long_var3 == 0) goto LAB_00105c07;\n            }\n            else {\n              char_var3 = char_var3 & 0xffffffffffffff00;\n              character_pointer3 = pointer_var28;\n              htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n              if (character_stack_variable148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uint_var1 & 0x82) == 0) && (function_pointer != bfd_map_overp_char_valueections)) &&\n                  ((*(byte *)(pointer4[4] + 0x25) & 0x10) == 0)) {\n            if ((uint_var1 & 4) == 0) {\n              if (((*(int *)(register_r14[1] + 8) != 2) ||\n                  (long_var3 = *(long *)(pointer4[4] + 0xd0), long_var3 == 0)) ||\n                 (*(long *)(long_var3 + 0x40) == 0)) {\n                if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                if (DAT_00127a44 == 1) {\n                  char_var2 = bfd_is_local_label(register_r14);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            char_var2 = DAT_001279a0;\n            if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n              if (char_var2 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (DAT_00127a48 != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (DAT_001279ea == '\\0') {\n          long_var3 = htab_find();\n          if (long_var3 != 0) {\nLAB_0010687f:\n            ulong_var4 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            FUN_00119ed0(ulong_var4);\n            DAT_00127a40 = 1;\n          }\n        }\n        else {\n          char_var3 = char_var3 & 0xffffffffffffff00;\n          character_pointer3 = pointer_var28;\n          htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n          if (character_stack_variable148 != '\\0') goto LAB_0010687f;\n        }\n        if ((uint_var1 & 0x20) == 0) {\nLAB_00105c07:\n          if (DAT_001279ea != '\\0') {\n            char_var3 = char_var3 & 0xffffffffffffff00;\n            character_pointer3 = pointer_var28;\n            htab_traverse(DAT_00127a10,FUN_0011a170,&stack0x00000140);\n            if (character_stack_variable148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          long_var3 = htab_find();\n          if (long_var3 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((DAT_00127a38 != '\\0') && ((uint_var1 & 0x4000) != 0)) goto LAB_00105c2c;\n          if (DAT_001279ea == '\\0') {\n            long_var3 = htab_find();\n            if (long_var3 != 0) goto LAB_00105c2c;\n          }\n          else {\n            char_var3 = char_var3 & 0xffffffffffffff00;\n            character_pointer3 = pointer_var28;\n            htab_traverse(DAT_00127a28,FUN_0011a170,&stack0x00000140);\n            if (character_stack_variable148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          char_var2 = FUN_001159d0(pointer4[4]);\n          if (char_var2 == '\\0') {\n            if (((uint_var1 & 0x800002) == 0) && (function_pointer != bfd_map_overp_char_valueections)) {\nLAB_00105c5f:\n              if ((uint_var1 & 0x82) != 0) {\n                char_var2 = FUN_00115d70(pointer_var28);\n                if ((char_var2 == '\\0') &&\n                   ((long_var3 = htab_elements(DAT_001279f8), long_var3 == 0 ||\n                    (char_var2 = FUN_00115d70(pointer_var28), char_var2 != '\\0')))) {\n                  if (((((DAT_00127958 == '\\0') ||\n                        (uint_var2 = *(uint *)(pointer4 + 3), (uint_var2 & 0x200000) != 0)) ||\n                       (long_var3 = *pointer4, long_var3 == 0)) ||\n                      ((*(int *)(*(long *)(long_var3 + 8) + 8) != 5 || (*(long *)(long_var3 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)pointer4 + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uint_var2 = *(uint *)(pointer4 + 3);\n                }\n                *(uint *)(pointer4 + 3) = uint_var2 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uint_var1 & 1) != 0) && (char_var2 = FUN_00115d70(pointer_var28), char_var2 != '\\0')) {\n                *(uint *)(pointer4 + 3) = *(uint *)(pointer4 + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((DAT_001279e8 != '\\0') || (char_var2 = FUN_00115d70(pointer_var28), char_var2 != '\\0')) {\n                *(uint *)(pointer4 + 3) = *(uint *)(pointer4 + 3) & 0xff7ffffd | 0x80;\n              }\n              if (function_pointer != bfd_map_overp_char_valueections) goto LAB_00105c5f;\n            }\n            *(long **)(long_var2 + unsigned_var24 * 8) = pointer4;\n            unsigned_var24 = unsigned_var24 + 1;\n          }\n        }\n        stack_variable = stack_variable + 1;\n      } while (count != stack_variable);\n    }\n    if (DAT_001279c8 != (void *)0x0) {\n      pointer_variable2 = DAT_001279c8;\n      int_var1 = DAT_001279c0;\n      for (long_var3 = 0; long_var3 < int_var1; long_var3 = long_var3 + 1) {\n        pointer_var33 = (char *)pointer_variable2[5];\n        if (pointer_var33 == (char *)0x0) {\n          long_var1 = unsigned_var24 * 8;\n          unsigned_var24 = unsigned_var24 + 1;\n          ulong_var4 = FUN_0011a2e0(pointer_variable2,stack_var00000008);\n          *(void *)(long_var2 + long_var1) = ulong_var4;\n          int_var1 = DAT_001279c0;\n        }\n        else if (pointer_var33 != \"\") {\n          ulong_var4 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          FUN_00119dd0(ulong_var4,pointer_var33);\n        }\n        pointer_variable2 = (void *)*pointer_variable2;\n      }\n    }\n    bool_variable1 = DAT_001279a0 != '\\0';\n    *(void *)(long_var2 + unsigned_var24 * 8) = 0;\n    if ((bool_variable1) && (puStack0000000000000020 != (void4 *)0x0)) {\n      int_var1 = *(int *)(*(void **)(stack_var00000008 + 8) + 1);\n      if ((int_var1 != 5) && (int_var1 != 2)) {\n        ulong_var4 = **(void **)(stack_var00000008 + 8);\n        ulong_var3 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,stack_var00000008,0,ulong_var3,ulong_var4);\nLAB_00105d8c:\n        free_memory(puStack0000000000000020);\n        DAT_00127a40 = 1;\n        return 0;\n      }\n      parameter6 = (void *)0x0;\n      char_var2 = FUN_0011378f(stack_var00000008,puStack0000000000000020,&stack0x000000c0,\n                           &stack0x00000110,&stack0x000000e0,&stack0x00000140);\n      if (char_var2 == '\\0') goto LAB_00105d8c;\n      long_var2 = bfd_makep_char_valueection_with_flags(stack_var00000008,\".stab\",0x2108);\n      long_var3 = bfd_makep_char_valueection_with_flags(stack_var00000008,\".stabstr\",0x2108);\n      if ((((long_var2 == 0) || (long_var3 == 0)) ||\n          (char_var2 = bfd_set_section_size(long_var2,parameter9), char_var2 == '\\0')) ||\n         (char_var2 = bfd_set_section_size(long_var3,character_pointer3), char_var2 == '\\0')) {\n        pointer_var33 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        ulong_var4 = dcgettext(0,pointer_var33,5);\n        FUN_001126c0(0,stack_var00000008,0,ulong_var4);\n        free_memory(parameter6);\n        free_memory(puStack0000000000000020);\n        DAT_00127a40 = 1;\n        return 0;\n      }\n      *(void4 *)(long_var2 + 0x7c) = 2;\n      *(void4 *)(long_var3 + 0x7c) = 0;\n      char_var2 = bfd_set_section_contents\n                        (stack_var00000008,long_var2,parameter3,0,parameter9);\n      if ((char_var2 == '\\0') ||\n         (char_var2 = bfd_set_section_contents\n                            (stack_var00000008,long_var3,parameter6,0,character_pointer3),\n         char_var2 == '\\0')) {\n        pointer_var33 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free_memory(puStack0000000000000020);\n    }\n    count = unsigned_var24 & 0xffffffff;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    long_var2 = htab_elements(DAT_00127a18);\n    if (((long_var2 != 0) ||\n        (((((((long_var2 = htab_elements(DAT_00127a28), long_var2 != 0 ||\n              (long_var2 = htab_elements(DAT_00127a08), long_var2 != 0)) ||\n             (long_var2 = htab_elements(DAT_00127a00), long_var2 != 0)) ||\n            ((long_var2 = htab_elements(DAT_001279f8), long_var2 != 0 ||\n             (long_var2 = htab_elements(DAT_001279f0), long_var2 != 0)))) ||\n           (long_var2 = htab_elements(DAT_001278f0), long_var2 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\n  }\n  bfdp_char_valueetp_char_valueymtab(stack_var00000008,DAT_001278c8,count & 0xffffffff);\n  bfd_map_overp_char_valueections(register_r14,FUN_00115dc0,stack_var00000008);\n  bfd_map_overp_char_valueections(register_r14,FUN_00116110,stack_var00000008);\n  for (pointer_variable2 = DAT_001279e0; pointer3 = DAT_001279d8, pointer_variable2 != (void *)0x0;\n      pointer_variable2 = (void *)*pointer_variable2) {\n    char_var2 = bfd_set_section_contents(stack_var00000008,pointer_variable2[5],pointer_variable2[4],0,pointer_variable2[3]);\n    if (char_var2 == '\\0') {\n      FUN_001126c0(0,stack_var00000008,pointer_variable2[5],0);\n      return 0;\n    }\n  }\n  for (; pointer3 != (void *)0x0; pointer3 = (void *)*pointer3) {\n    ulong_var4 = *(void *)(pointer3[5] + 0x60);\n    char_var2 = bfd_set_section_contents(stack_var00000008,ulong_var4,pointer3[4],0,pointer3[3]);\n    if (char_var2 == '\\0') {\n      FUN_001126c0(0,stack_var00000008,ulong_var4,0);\n      return 0;\n    }\n  }\n  if (long_pointer2 == (long *)0x0) {\n    if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n      ulong_var4 = *register_r14;\n      ulong_var3 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      FUN_00119ed0(ulong_var3,ulong_var4);\n    }\nLAB_0010578f:\n    if ((DAT_00127a30 == 0) ||\n       (char_var2 = bfd_fill_in_gnu_debuglinkp_char_valueection(stack_var00000008,debug_link_section_size),\n       long_var2 = DAT_00127a30, char_var2 != '\\0')) {\n      uint_var1 = (**(code **)(*(long *)(stack_var00000008 + 8) + 0x140))(register_r14);\n      unsigned_var24 = (ulong)uint_var1;\n      if ((char)uint_var1 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return unsigned_var24;\n        }\n        char_var2 = bfd_alt_mach_code(stack_var00000008,DAT_00127930 & 0xffffffff);\n        ulong_variable5 = DAT_00127930;\n        if (char_var2 != '\\0') {\n          return unsigned_var24;\n        }\n        ulong_var4 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        FUN_00119ed0(ulong_var4,ulong_variable5);\n        if (*(int *)(*(long *)(stack_var00000008 + 8) + 8) != 5) {\n          ulong_var4 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(ulong_var4);\n          return unsigned_var24;\n        }\n        ulong_var4 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        FUN_00119ed0(ulong_var4);\n        *(short *)(*(long *)(stack_var00000008 + 0x110) + 0x3a) = (short)DAT_00127930;\n        return unsigned_var24;\n      }\n      ulong_var4 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,stack_var00000008,0,ulong_var4);\n    }\n    else {\n      ulong_var4 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,stack_var00000008,0,ulong_var4,long_var2);\n    }\n    return 0;\n  }\n  long_pointer2 = (long *)0x0;\n  pointer_variable2 = *(void **)(stack_var00000008 + 0x90);\n  do {\n    if (pointer_variable2 == (void *)0x0) {\n      do {\n        long_pointer2 = (long *)long_pointer2[3];\n        free_memory((void *)long_pointer2[1]);\n        free_memory(long_pointer2);\n        long_pointer2 = long_pointer2;\n      } while (long_pointer2 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(stack_var00000008 + 8) + 8) == 5)) &&\n        (*(int *)(pointer_variable2[0x1a] + 4) == 7)) &&\n       (char_var2 = FUN_00113fb0(*pointer_variable2,\".gnu.build.attributes\"), char_var2 != '\\0')) {\n      if (long_pointer2 == (long *)0x0) {\n        long_pointer2 = long_pointer2;\n      }\n      pointer4 = long_pointer2;\n      if (*(void **)(*long_pointer2 + 0x60) == pointer_variable2) {\nLAB_0010625f:\n        pointer_var33 = \"error: failed to merge notes\";\n        if (long_pointer2[1] != 0) {\n          char_var2 = bfd_set_section_contents(stack_var00000008,pointer_variable2,long_pointer2[1],0,long_pointer2[2]);\n          if (char_var2 == '\\0') {\n            ulong_var4 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            FUN_001126c0(0,stack_var00000008,pointer_variable2,ulong_var4);\n            return 0;\n          }\n          long_pointer2 = (long *)long_pointer2[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          long_pointer2 = pointer4;\n          if (*(void **)(*pointer4 + 0x60) == pointer_variable2) goto LAB_0010625f;\n          long_pointer2 = (long *)pointer4[3];\n          pointer4 = long_pointer2;\n        } while (long_pointer2 != (long *)0x0);\n        pointer_var33 = \"error: failed to locate merged notes\";\n      }\n      ulong_var4 = dcgettext(0,pointer_var33,5);\n      FUN_001126c0(0,stack_var00000008,pointer_variable2,ulong_var4);\n    }\nLAB_001061be:\n    pointer_variable2 = (void *)pointer_variable2[1];\n  } while( true );\n}\n\n",
            "current_name": "merge_debug_sections_0010551d",
            "entrypoint": "0x0010551d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FILE": "file",
                "FUN_0010551d": "merge_debug_sections_0010551d",
                "__errno_location": "errno_location",
                "__ptr": "pointer_var",
                "__ptr_00": "pointer_var00",
                "__s": "string1",
                "__s_00": "error_message",
                "_cStack0000000000000148": "char_var3",
                "_in_stack_00000018": "stack_variable",
                "_s": "p_char_value",
                "_uStack0000000000000048": "int_pointer1",
                "bStack0000000000000100": "byte_value",
                "bStack0000000000000101": "byte_value",
                "bVar2": "byte_var",
                "bVar38": "bool_variable1",
                "bVar39": "byte_variable2",
                "bfd_get_full_section_contents": "get_full_section_contents",
                "bfd_malloc_and_get_section": "malloc_and_get_section",
                "bfd_set_section_contents": "set_section_contents",
                "bfd_set_section_size": "set_section_size",
                "cStack0000000000000148": "character_stack_variable148",
                "cVar8": "char_var1",
                "cVar9": "char_var2",
                "dcgettext": "get_translated_text",
                "fopen": "open_file",
                "fprintf": "print_to_stream",
                "free": "free_memory",
                "fwrite": "write_to_file",
                "iStack000000000000006c": "mach_code_size_bytes",
                "iVar11": "int_var1",
                "iVar14": "int_var2",
                "iVar23": "int_var23",
                "iVar31": "int_var31",
                "in_stack_00000008": "stack_var00000008",
                "in_stack_00000010": "count",
                "in_stack_00000018": "parameter2",
                "in_stack_000000c0": "parameter3",
                "in_stack_000000c8": "ulong_variable",
                "in_stack_000000d0": "parameter4",
                "in_stack_000000d8": "parameter5",
                "in_stack_000000e0": "parameter6",
                "in_stack_000000f0": "parameter7",
                "in_stack_000000f8": "parameter8",
                "in_stack_00000110": "parameter9",
                "in_stack_00000118": "parameter10",
                "in_stack_00000140": "character_pointer3",
                "in_stack_00000150": "parameter12",
                "lStack0000000000000078": "debug_link_section_size",
                "lStack0000000000000088": "section_contents_size",
                "lStack00000000000000a0": "start_address",
                "lVar21": "long_var1",
                "lVar25": "long_var2",
                "lVar27": "long_var3",
                "pcVar19": "pointer_var19",
                "pcVar28": "pointer_var28",
                "pcVar33": "pointer_var33",
                "pcVar35": "pointer_var35",
                "pcVar4": "function_pointer",
                "piVar23": "int_ptr",
                "plVar15": "pointer4",
                "plVar32": "long_pointer2",
                "ppcVar35": "debug_section_names",
                "ppuVar37": "double_pointer_var",
                "puVar1": "pointer1",
                "puVar29": "pointer_variable2",
                "puVar3": "pointer2",
                "puVar34": "pointer4",
                "puVar5": "pointer3",
                "pvVar36": "void_pointer",
                "sStack000000000000015a": "short_stack_variable15a",
                "sVar18": "size_var1",
                "sVar26": "size_var2",
                "strcmp": "compare_strings",
                "strdup": "duplicate_string",
                "strerror": "string_error",
                "strlen": "string_length",
                "uStack0000000000000048": "alternative_mach_code",
                "uStack0000000000000158": "unsigned_stack_variable158",
                "uVar10": "uint_var1",
                "uVar12": "uint_var2",
                "uVar13": "uint_var3",
                "uVar16": "ulong_var3",
                "uVar17": "ulong_var4",
                "uVar20": "ulong_variable5",
                "uVar22": "ulong_variable6",
                "uVar24": "unsigned_var24",
                "uVar30": "unsigned_var30",
                "uVar6": "ulong_var1",
                "uVar7": "ulong_var2",
                "unaff_R13": "long_pointer2",
                "unaff_R14": "register_r14",
                "unaff_RBP": "previous_frame_pointer",
                "unaff_RBX": "register_bx",
                "undefined": "void",
                "undefined8": "void",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010554f": {
            "additional_data": {
                "DAT_00125c90": {
                    "1": "section_names"
                },
                "DAT_00126e98": {
                    "1": "debugging_string"
                },
                "DAT_001278c8": {
                    "1": "symtab_section_variable"
                },
                "DAT_001278d0": {
                    "1": "input_sections"
                },
                "DAT_001278f0": {
                    "1": "stab_entries_htab"
                },
                "DAT_001278f8": {
                    "1": "debug_syms_by_name"
                },
                "DAT_00127928": {
                    "1": "debugging_section_name"
                },
                "DAT_00127930": {
                    "1": "alternative_mach_code"
                },
                "DAT_00127940": {
                    "1": "section_name_size"
                },
                "DAT_00127958": {
                    "1": "redefining_symbols_flag"
                },
                "DAT_00127959": {
                    "1": "is_obj_copy"
                },
                "DAT_00127988": {
                    "1": "ignore_debugging_attribute_flag"
                },
                "DAT_00127989": {
                    "1": "type_flag_2"
                },
                "DAT_00127990": {
                    "1": "temporary_variable_30"
                },
                "DAT_00127998": {
                    "1": "flag_1",
                    "2": "type_propagation_flag"
                },
                "DAT_00127999": {
                    "1": "zeroed_data_value"
                },
                "DAT_001279a0": {
                    "1": "is_executable"
                },
                "DAT_001279a8": {
                    "1": "match_symbol_names"
                },
                "DAT_001279c0": {
                    "1": "num_alts"
                },
                "DAT_001279c8": {
                    "1": "alternative_codes"
                },
                "DAT_001279e0": {
                    "1": "mergeable_notes_pointer"
                },
                "DAT_001279e8": {
                    "1": "enable_attribute_merge"
                },
                "DAT_001279f0": {
                    "1": "exclude_dynsym"
                },
                "DAT_001279f8": {
                    "1": "indirect_symbol_set_htab"
                },
                "DAT_00127a00": {
                    "1": "inlines_table"
                },
                "DAT_00127a08": {
                    "1": "notes_htab"
                },
                "DAT_00127a10": {
                    "1": "strings_htab"
                },
                "DAT_00127a18": {
                    "1": "strip_debug_sections"
                },
                "DAT_00127a20": {
                    "1": "is_debug_mergeable"
                },
                "DAT_00127a28": {
                    "1": "dupe_syms_table"
                },
                "DAT_00127a30": {
                    "1": "debug_link_data_size"
                },
                "DAT_00127a38": {
                    "1": "keep_relocations"
                },
                "DAT_00127a39": {
                    "1": "strip_symbol_names"
                },
                "DAT_00127a40": {
                    "1": "error_in_processing"
                },
                "DAT_00127a44": {
                    "1": "is_local"
                },
                "DAT_00127a48": {
                    "1": "opt_level"
                },
                "DAT_001287f8": {
                    "1": "symbol_table"
                },
                "FUN_0010554f": {
                    "1": "reconstruct_symbol_table"
                },
                "FUN_00105588": {
                    "1": "set_ptr"
                },
                "FUN_0010870e": {
                    "1": "process_stab_section"
                },
                "FUN_0010875d": {
                    "1": "compare_stab_entries"
                },
                "FUN_00108863": {
                    "1": "cleanup_memory"
                },
                "FUN_001088ae": {
                    "1": "fill_gap"
                },
                "FUN_0010be88": {
                    "1": "is_valid_function_start_end"
                },
                "FUN_0010bf86": {
                    "1": "is_valid_build_note"
                },
                "FUN_0011173a": {
                    "1": "is_valid_symbol_table_entry"
                },
                "FUN_001126c0": {
                    "1": "log_error"
                },
                "FUN_00112894": {
                    "1": "get_string_for_stab_type"
                },
                "FUN_00113fb0": {
                    "1": "has_gnu_debug_link_section"
                },
                "FUN_00115dc0": {
                    "1": "process_section_for_symbol_table"
                },
                "FUN_00116110": {
                    "1": "resolve_mergeable_notes"
                },
                "FUN_00119dd0": {
                    "1": "log_and_exit_on_error"
                },
                "FUN_0011a170": {
                    "1": "update_hash_table"
                },
                "FUN_0011a2e0": {
                    "1": "create_stab_entry"
                },
                "FU_001097db": {
                    "1": "has_mergeable_notes_section"
                },
                "Insecure Function": {
                    "1": "xstrdup"
                },
                "PTR_s__stab_00125c60": {
                    "1": "stab_section_name"
                },
                "VAR_1": {
                    "1": "l_var14"
                },
                "VAR_2": {
                    "1": "param_14"
                },
                "VAR_3": {
                    "1": "param_17"
                },
                "VAR_4": {
                    "1": "u_var29"
                },
                "VAR_5": {
                    "1": "pl_var28"
                },
                "VAR_6": {
                    "1": "pu_var30"
                },
                "VAR_7": {
                    "1": "pu_var33"
                },
                "VAR_n": {
                    "1": "var_n"
                },
                "___dest": {
                    "1": "stab_string"
                },
                "___ptr_01": {
                    "1": "section_contents_2"
                },
                "__dest": {
                    "1": "undeclared_section_0",
                    "3": "concatenated_string"
                },
                "__ptr": {
                    "1": "padding_bytes",
                    "2": "padding_data"
                },
                "__ptr_00": {
                    "1": "stab_section_contents",
                    "2": "stab_contents"
                },
                "__ptr_01": {
                    "1": "stabstr_section_contents"
                },
                "__ptr_02": {
                    "1": "stab_symbols_table",
                    "2": "symbol_table",
                    "3": "stab_data"
                },
                "__s": {
                    "1": "section_name"
                },
                "_param_1": {
                    "1": "section_offset"
                },
                "_param_10": {
                    "1": "section_byte_size"
                },
                "_param_11": {
                    "1": "section_type"
                },
                "_param_12": {
                    "1": "elf_segment_type"
                },
                "_param_13": {
                    "1": "elf_segment_size"
                },
                "_param_14": {
                    "1": "elf_segment_data"
                },
                "_param_15": {
                    "1": "temp_section_data"
                },
                "_param_16": {
                    "1": "elf_section_index"
                },
                "_param_17": {
                    "1": "elf_section_count"
                },
                "_param_18": {
                    "1": "elf_sections"
                },
                "_param_19": {
                    "1": "current_elf_section"
                },
                "_param_2": {
                    "1": "section_table_offset"
                },
                "_param_20": {
                    "1": "section_table"
                },
                "_param_21": {
                    "1": "current_section_flags"
                },
                "_param_22": {
                    "1": "current_section_size"
                },
                "_param_23": {
                    "1": "current_section_content"
                },
                "_param_24": {
                    "1": "current_section_name"
                },
                "_param_25": {
                    "1": "section_flags"
                },
                "_param_26": {
                    "1": "debug_section_name"
                },
                "_param_27": {
                    "1": "debug_section_size"
                },
                "_param_28": {
                    "1": "debug_section_contents"
                },
                "_param_29": {
                    "1": "symbol_table_section"
                },
                "_param_3": {
                    "1": "section_table"
                },
                "_param_30": {
                    "1": "symbol_table_size"
                },
                "_param_31": {
                    "1": "symbol_table_data"
                },
                "_param_32": {
                    "1": "debug_link_size"
                },
                "_param_33": {
                    "1": "debug_link_data"
                },
                "_param_34": {
                    "1": "relocation_section"
                },
                "_param_35": {
                    "1": "current_relocation_chunk"
                },
                "_param_36": {
                    "1": "relocation_data"
                },
                "_param_37": {
                    "1": "single_code_chunk"
                },
                "_param_38": {
                    "1": "code_chunks"
                },
                "_param_39": {
                    "1": "code_to_insert"
                },
                "_param_4": {
                    "1": "relocation_table_offset"
                },
                "_param_40": {
                    "1": "merged_note_section"
                },
                "_param_41": {
                    "1": "current_relocation_entry"
                },
                "_param_42": {
                    "1": "current_symbol_value"
                },
                "_param_43": {
                    "1": "current_symbol_type"
                },
                "_param_44": {
                    "1": "short_value"
                },
                "_param_5": {
                    "1": "relocation_table"
                },
                "_param_6": {
                    "1": "symbol_table_offset"
                },
                "_param_7": {
                    "1": "file_symbol_table"
                },
                "_param_8": {
                    "1": "file_size"
                },
                "_param_9": {
                    "1": "section_index"
                },
                "bVar2": {
                    "1": "symbol_type"
                },
                "bVar38": {
                    "1": "has_stab_data"
                },
                "bVar39": {
                    "1": "iteration_flag"
                },
                "bVar7": {
                    "1": "is_stab_entry_corrupt"
                },
                "bVar8": {
                    "1": "is_debug_info"
                },
                "bfd_coff_get_auxent": {
                    "1": "get_coff_aux_ent"
                },
                "bfd_coff_get_syment": {
                    "1": "get_coff_sym_ent"
                },
                "bfd_errmsg": {
                    "1": "get_error_message"
                },
                "bfd_get_section_by_name": {
                    "1": "get_section_by_name"
                },
                "bfd_is_local_label": {
                    "1": "is_local_label"
                },
                "bfd_make_section_with_flags": {
                    "1": "create_section"
                },
                "bfd_map_over_sections": {
                    "1": "apply_to_each_section"
                },
                "bfd_octets_per_byte": {
                    "1": "num_octets_per_byte"
                },
                "bfd_set_section_contents": {
                    "1": "set_section_contents"
                },
                "bfd_set_section_size": {
                    "1": "set_section_size"
                },
                "byte": {
                    "1": "byte_value"
                },
                "cVar7": {
                    "1": "char_variable_1",
                    "2": "error_flag",
                    "3": "status"
                },
                "cVar8": {
                    "1": "char_variable"
                },
                "concat": {
                    "1": "concatenate_strings"
                },
                "free": {
                    "1": "deallocate"
                },
                "fun": {
                    "1": "section_iteration_function"
                },
                "fun_ptr": {
                    "1": "coff_get_section_size"
                },
                "fwprintf": {
                    "1": "fprintf"
                },
                "iVar10": {
                    "1": "index"
                },
                "iVar11": {
                    "1": "var_5",
                    "2": "comparison_result"
                },
                "iVar27": {
                    "1": "counter"
                },
                "in_R10": {
                    "1": "merged_notes_list",
                    "2": "note_list",
                    "3": "merged_notes"
                },
                "in_stack_00000068": {
                    "1": "segment_count"
                },
                "in_stack_00000068._4_4_": {
                    "1": "num_sections"
                },
                "in_stack_000000c0": {
                    "1": "sections_traversed"
                },
                "in_stack_000000d8": {
                    "1": "rel_name_flag"
                },
                "in_stack_000000e0": {
                    "1": "syment_buffer"
                },
                "in_stack_000000f8": {
                    "1": "in_dynreloc"
                },
                "lVar14": {
                    "1": "bytes_to_allocate",
                    "2": "index",
                    "3": "section_index",
                    "4": "i"
                },
                "lVar23": {
                    "1": "index"
                },
                "lVar28": {
                    "1": "current_note_section"
                },
                "lVar29": {
                    "1": "alignment_length"
                },
                "lVar37": {
                    "1": "section_index",
                    "2": "index",
                    "4": "section_size"
                },
                "loc": {
                    "1": "temp_variable"
                },
                "long * sym": {
                    "1": "sym"
                },
                "long **": {
                    "1": "map_func_over_func"
                },
                "param_1": {
                    "1": "pu_var33",
                    "7": "param_7"
                },
                "param_10": {
                    "1": "param_41"
                },
                "param_11": {
                    "1": "param_24"
                },
                "param_12": {
                    "1": "param_26",
                    "2": "max_gap_size",
                    "3": "section_size",
                    "5": "gap_size"
                },
                "param_13": {
                    "1": "notes_section",
                    "2": "section_name"
                },
                "param_14": {
                    "1": "gap_content",
                    "2": "param_14"
                },
                "param_15": {
                    "1": "target_section_flag",
                    "2": "flags"
                },
                "param_16": {
                    "1": "param_37"
                },
                "param_17": {
                    "1": "symbols",
                    "2": "sections_array",
                    "3": "section_addresses"
                },
                "param_2": {
                    "1": "param_21",
                    "2": "in_stack_00000068",
                    "4": "param_8"
                },
                "param_20": {
                    "1": "param_33"
                },
                "param_21": {
                    "1": "param_8",
                    "2": "debug_link",
                    "3": "debug_link_filename"
                },
                "param_22": {
                    "1": "param_36"
                },
                "param_23": {
                    "1": "current_offset"
                },
                "param_24": {
                    "1": "temp_buffer"
                },
                "param_25": {
                    "1": "data_3"
                },
                "param_26": {
                    "1": "param_11"
                },
                "param_3": {
                    "1": "param_30",
                    "2": "param_15"
                },
                "param_30": {
                    "1": "prev_sections"
                },
                "param_31": {
                    "1": "note_section_count"
                },
                "param_32": {
                    "1": "param_14"
                },
                "param_33": {
                    "1": "temp_gnu_debuglink_data"
                },
                "param_34": {
                    "1": "note_gdb_index"
                },
                "param_36": {
                    "1": "has_debug_info"
                },
                "param_37": {
                    "1": "is_global"
                },
                "param_38": {
                    "1": "param_19"
                },
                "param_39": {
                    "1": "unsigned_short_value",
                    "2": "debug_link_section_size"
                },
                "param_4": {
                    "1": "merged_notes_section_contents_variable"
                },
                "param_40": {
                    "1": "symbols",
                    "3": "sorted_sections"
                },
                "param_41": {
                    "1": "symbol_status"
                },
                "param_42": {
                    "1": "mergeable_base"
                },
                "param_43": {
                    "1": "is_hide"
                },
                "param_43_value": {
                    "1": "is_linked"
                },
                "param_44": {
                    "1": "param_25",
                    "2": "symbol_type"
                },
                "param_49": {
                    "1": "section_gap_count"
                },
                "param_5": {
                    "1": "param_40",
                    "3": "param_14"
                },
                "param_6": {
                    "1": "param_30"
                },
                "param_7": {
                    "1": "bfh",
                    "11": "binary",
                    "3": "binary_file"
                },
                "param_8": {
                    "1": "param_count",
                    "2": "param_31",
                    "7": "section_count",
                    "8": "num_sections"
                },
                "param_9": {
                    "1": "add_padding",
                    "2": "param_9"
                },
                "param_n": {
                    "1": "parameter_n",
                    "4": "param_n"
                },
                "pcVar22": {
                    "1": "file_name"
                },
                "pcVar3": {
                    "1": "pc"
                },
                "pcVar31": {
                    "1": "symbol_name",
                    "2": "message",
                    "4": "section_name"
                },
                "peVar36": {
                    "1": "temporary_variable_27"
                },
                "plVar11": {
                    "1": "section_tab_prop_set_4"
                },
                "plVar15": {
                    "1": "current_symbol_desc",
                    "2": "section_pointer",
                    "8": "current_section"
                },
                "plVar19": {
                    "1": "tmp_section_list"
                },
                "plVar20": {
                    "1": "matching_section",
                    "2": "section",
                    "4": "current_symbol"
                },
                "plVar25": {
                    "1": "stab_section"
                },
                "plVar28": {
                    "1": "sections_with_debug_info",
                    "3": "sections"
                },
                "plVar30": {
                    "1": "section_sizes"
                },
                "plVar31": {
                    "1": "section"
                },
                "plVar32": {
                    "1": "pl_var17_2"
                },
                "plVar35": {
                    "1": "current_debug_info"
                },
                "plVar37": {
                    "1": "section_index"
                },
                "ppVar33": {
                    "1": "ptr"
                },
                "ppcVar22": {
                    "1": "current_symbol_name"
                },
                "ppcVar31": {
                    "1": "stab_name"
                },
                "ppcVar34": {
                    "1": "debug_names_list",
                    "2": "debug_sections"
                },
                "ppuVar14": {
                    "1": "sect_buffer_structures"
                },
                "ppuVar18": {
                    "1": "stab_funcs"
                },
                "ppuVar26": {
                    "1": "note_section_names"
                },
                "ppuVar30": {
                    "1": "gap"
                },
                "ppuVar35": {
                    "1": "stab_str_functions"
                },
                "ppuVar36": {
                    "1": "stab_section",
                    "2": "stab_sections",
                    "3": "stab_section_names"
                },
                "ptr": {
                    "1": "ptr_1"
                },
                "ptr_00000138": {
                    "1": "flag_2"
                },
                "puVar1": {
                    "1": "mask_ptr"
                },
                "puVar11": {
                    "1": "alignment_ptr"
                },
                "puVar15": {
                    "1": "sect_sizes"
                },
                "puVar23": {
                    "1": "ptr_11"
                },
                "puVar26": {
                    "1": "ptr_to_section",
                    "2": "symbol_table"
                },
                "puVar27": {
                    "1": "ptr_2"
                },
                "puVar28": {
                    "1": "ptr_2"
                },
                "puVar30": {
                    "1": "ptr_2"
                },
                "puVar32": {
                    "1": "stab_entry_ptr",
                    "4": "stab_entry"
                },
                "puVar33": {
                    "1": "current_section_data"
                },
                "puVar34": {
                    "1": "ptr_3"
                },
                "puVar36": {
                    "1": "temp_stab_section"
                },
                "puVar4": {
                    "1": "link_section_info"
                },
                "pvVar35": {
                    "1": "section_contents_variable"
                },
                "qsort": {
                    "1": "sort"
                },
                "retval": {
                    "1": "return_value"
                },
                "sVar12": {
                    "1": "padding_count"
                },
                "sVar13": {
                    "1": "section_alignment"
                },
                "sVar18": {
                    "1": "entry_len",
                    "2": "length",
                    "6": "string_length"
                },
                "sVar19": {
                    "1": "length_2"
                },
                "stack0x00000068": {
                    "1": "stack_variables_3"
                },
                "stack0x000000c0": {
                    "1": "attribute_cache"
                },
                "stack0x000000d8": {
                    "1": "merged_notes_variable"
                },
                "stack0x000000e0": {
                    "1": "contents_cache"
                },
                "stack0x000000f8": {
                    "1": "unused_param"
                },
                "stack0x00000110": {
                    "1": "stack_variable"
                },
                "stack0x00000140": {
                    "1": "callback_data"
                },
                "stack0x00000148": {
                    "1": "flags"
                },
                "stack0x00000190": {
                    "1": "section_gap_list"
                },
                "strcmp": {
                    "1": "compare_strings"
                },
                "strcpy": {
                    "1": "copy_string"
                },
                "tmp_error_flag": {
                    "1": "u_var11"
                },
                "tmp_length": {
                    "1": "u_var10"
                },
                "uVar12": {
                    "1": "flags"
                },
                "uVar13": {
                    "1": "flags_2",
                    "2": "symbol_flags"
                },
                "uVar14": {
                    "1": "offset"
                },
                "uVar16": {
                    "1": "translation_unit"
                },
                "uVar17": {
                    "1": "error_message_1",
                    "4": "error_message"
                },
                "uVar20": {
                    "1": "u_var6"
                },
                "uVar21": {
                    "1": "temp_variable",
                    "2": "offset"
                },
                "uVar24": {
                    "1": "translation_length"
                },
                "uVar25": {
                    "1": "u_var3"
                },
                "uVar26": {
                    "1": "temp_gnu_debug_link_section"
                },
                "uVar29": {
                    "1": "gap_size"
                },
                "uVar30": {
                    "1": "size_variable_2"
                },
                "uVar32": {
                    "1": "temp_debug_desc"
                },
                "uVar35": {
                    "1": "temp_note_offset"
                },
                "uVar5": {
                    "1": "padding_value",
                    "2": "padding_byte"
                },
                "uVar6": {
                    "1": "section_index"
                },
                "uVar9": {
                    "1": "temporary_variable_12",
                    "2": "error_code",
                    "4": "result"
                },
                "uVar9->6": {
                    "1": "param_43"
                },
                "unaff_R14": {
                    "1": "bfd_handle",
                    "2": "bfd",
                    "6": "bfd_handler"
                },
                "unaff_R15": {
                    "1": "error_message"
                },
                "undefined * sym": {
                    "1": "sym"
                },
                "usection_size": {
                    "1": "largest_section_size"
                },
                "usections": {
                    "1": "used_sections"
                }
            },
            "called": [
                "FUN_0010bf86",
                "FUN_0010be88",
                "FUN_0011a170",
                "bfd_get_section_by_name",
                "FUN_0010bc80",
                "htab_elements",
                "bfd_set_section_size",
                "bfd_is_local_label",
                "FUN_001126c0",
                "bfd_decode_symclass",
                "strcpy",
                "FUN_00108b3e",
                "FUN_00112894",
                "FUN_00116110",
                "FUN_00112a33",
                "concat",
                "bfd_map_over_sections",
                "dcgettext",
                "bfd_octets_per_byte",
                "FUN_0010dac0",
                "qsort",
                "bfd_set_section_contents",
                "FUN_00108863",
                "FUN_0011a2e0",
                "FUN_00115dc0",
                "FUN_00119dd0",
                "FUN_001088ae",
                "bfd_errmsg",
                "bfd_map_over_sections",
                "bfd_coff_get_syment",
                "FUN_0011173a",
                "bfd_coff_get_auxent",
                "fprintf",
                "htab_traverse",
                "bfd_make_section_with_flags",
                "FUN_00115d70",
                "htab_find",
                "FUN_0010c892",
                "bfd_get_section_contents",
                "xmalloc",
                "bfd_set_error",
                "strlen",
                "FUN_0010bf20",
                "FUN_00116030",
                "FUN_0010870e",
                "bfd_get_error",
                "bfd_alt_mach_code",
                "strcmp",
                "FUN_001159d0",
                "FUN_0010bbd3",
                "bfd_set_symtab",
                "FUN_0010875d",
                "free",
                "FUN_00119ed0",
                "FUN_00113fb0",
                "FUN_0011378f",
                "FUN_0010be1a",
                "xstrdup",
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 reconstruct_symbol_table_0010554f(void)\n\n{\n  uint *symbol_flags;\n  byte_value is_padding;\n  code *symbol_name;\n  undefined8 *debug_info;\n  undefined padding_byte;\n  ushort note_section_index;\n  char status;\n  char char_variable;\n  undefined4 result;\n  int iteration_counter;\n  int comparison_result;\n  uint symbol_attribute;\n  uint symbol_flags;\n  long i;\n  long *current_section;\n  undefined8 translated_string;\n  undefined *padding_data;\n  undefined8 error_message;\n  size_t string_length;\n  size_t secondary_string_length;\n  long *concatenated_string;\n  long *current_symbol;\n  void *stab_contents;\n  void *stabstr_section_contents;\n  ulong difference;\n  char *section_name;\n  char *merged_note;\n  long existing_note_section;\n  ulong variable_2;\n  long *aux_list;\n  undefined8 *symbol_table;\n  int symbol_attribute_index;\n  long *sections;\n  ulong unsigned_value;\n  ulong *padding_buffer_index;\n  char *section_name;\n  undefined4 *stab_entry;\n  undefined *temp_ptr;\n  long *merged_notes;\n  char **debug_sections;\n  void *void_pointer;\n  undefined8 *bfd_handler;\n  undefined **stab_section_names;\n  long section_size;\n  bool has_stab_data;\n  byte_value is_first_iteration;\n  long binary;\n  ulong num_sections;\n  char param_9;\n  undefined4 *stab_data;\n  ulong gap_size;\n  char *section_name;\n  undefined *section_padding;\n  uint bfd_flags;\n  long *section_addresses;\n  undefined8 param_39;\n  undefined8 debug_link_filename;\n  long note_section;\n  char *merged_notes;\n  long mergeable_note_sections;\n  long *output_sections;\n  ulong alternative_machine_value;\n  long symbol_table_index;\n  long in_reloc;\n  void *merged_notes_content;\n  long alternative_machine_code;\n  undefined8 in_dynreloc;\n  byte_value write_debug_information;\n  byte_value bfd_octets_per_byte_result;\n  undefined8 debug_link_section_size;\n  ushort debug_link_section_size;\n  long *qsorted_sections;\n  char fill_in_gnu_debuglink_section_result;\n  char *debugging_section_name;\n  undefined stab_entry_corrupt;\n  short symbol_type;\n  \n  is_first_iteration = 0;\n  if ((DAT_00127998 == '\\0') && (DAT_00127989 == '\\0')) {\n    gap_size = 0;\n    section_padding = (undefined *)0x0;\n    section_addresses = (long *)0x0;\n    unsigned_value = gap_size;\n  }\n  else {\n    i = (ulong)num_sections * 8;\n    section_addresses = (long *)xmaltemp_variable(i);\n    qsorted_sections = section_addresses;\n    bfd_map_over_sections(binary,FUN_0010870e,&callback_data);\n    qsort(section_addresses,(ulong)num_sections,8,FUN_0010875d);\n    section_padding = (undefined *)xmaltemp_variable(i);\n    has_stab_data = DAT_00127998 != '\\0';\n    temp_ptr = section_padding;\n    for (; i != 0; i = i + -1) {\n      *temp_ptr = 0;\n      temp_ptr = temp_ptr + (ulong)is_first_iteration * -2 + 1;\n    }\n    if (has_stab_data) {\n      unsigned_value = 0;\n      gap_size = 0;\n      do {\n        padding_buffer_index = (ulong *)(section_padding + unsigned_value * 8);\n        sections = section_addresses + unsigned_value;\n        difference = gap_size;\n        do {\n          gap_size = difference;\n          if (num_sections - 1 <= (uint)unsigned_value) goto LAB_00107cd1;\n          unsigned_value = (ulong)((uint)unsigned_value + 1);\n          symbol_attribute = num_octets_per_byte(binary,*sections);\n          symbol_flags = num_octets_per_byte(binary);\n          i = *sections;\n          if ((*(uint *)(i + 0x24) & 0x102) != 0x102) break;\n          difference = (ulong)symbol_flags * *(long *)(sections[1] + 0x38);\n          variable_2 = (ulong)symbol_attribute * *(long *)(i + 0x38) + *(long *)(i + 0x40);\n          if (difference <= variable_2) break;\n          difference = difference - variable_2;\n          status = bfd_set_section_size();\n          if (status == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            FUN_001126c0(0,binary,*sections);\n            DAT_00127a40 = 1;\n            goto LAB_00107cd1;\n          }\n          *padding_buffer_index = difference;\n          sections = sections + 1;\n          padding_buffer_index = padding_buffer_index + 1;\n        } while (gap_size < difference);\n      } while( true );\n    }\n    gap_size = 0;\nLAB_00107cd1:\n    unsigned_value = gap_size;\n    if (DAT_00127989 != '\\0') {\n      symbol_attribute = num_octets_per_byte(binary);\n      i = section_addresses[num_sections - 1];\n      difference = DAT_00127990 * (ulong)symbol_attribute;\n      variable_2 = *(long *)(i + 0x40) + (ulong)symbol_attribute * *(long *)(i + 0x38);\n      if (variable_2 < difference) {\n        status = bfd_set_section_size();\n        if (status == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          FUN_001126c0(0,binary,section_addresses[num_sections - 1]);\n          DAT_00127a40 = 1;\n        }\n        else {\n          unsigned_value = difference - variable_2;\n          *(ulong *)(section_padding + (ulong)(num_sections - 1) * 8) = unsigned_value;\n          if (unsigned_value <= gap_size) {\n            unsigned_value = gap_size;\n          }\n        }\n      }\n    }\n  }\n  gap_size = unsigned_value;\n  sections = DAT_001278d0;\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    stab_data = (undefined4 *)0x0;\n  }\n  else {\n    stab_section_names = &PTR_ssection_nametab_00125c60;\n    stab_data = (undefined4 *)xmaltemp_variable(0x60);\n    stab_entry = stab_data;\n    for (i = 0x18; i != 0; i = i + -1) {\n      *stab_entry = 0;\n      stab_entry = stab_entry + (ulong)is_first_iteration * -2 + 1;\n    }\n    section_name = (char *)0x0;\n    do {\n      temp_ptr = *stab_section_names;\n      i = bfd_get_section_by_name(bfd_handler,temp_ptr);\n      section_size = bfd_get_section_by_name();\n      if ((i != 0) && (section_size != 0)) {\n        existing_note_section = *(long *)(i + 0x40);\n        stab_contents = (void *)xmaltemp_variable(existing_note_section);\n        status = bfd_get_section_contents(bfd_handler,i,stab_contents,0,existing_note_section);\n        if (status == '\\0') {\n          result = bfd_get_error();\n          bfd_errmsg(result);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*bfd_handler);\n          free(section_name);\n          free(stab_contents);\n        }\n        else {\n          unsigned_value = *(ulong *)(section_size + 0x40);\n          stabstr_section_contents = (void *)xmaltemp_variable(unsigned_value + 1);\n          param_9 = bfd_get_section_contents(bfd_handler,section_size,stabstr_section_contents,0);\n          if (param_9 == '\\0') {\n            result = bfd_get_error();\n            bfd_errmsg(result);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*bfd_handler);\n            free(section_name);\n          }\n          else {\n            *(undefined *)((long)stabstr_section_contents + unsigned_value) = 0;\n            if ((section_name != (char *)0x0) ||\n               (section_name = (char *)FUN_00112894(bfd_handler,1,sections), section_name != (char *)0x0)) {\n              mergeable_note_sections = 0;\n              note_section = 0;\n              for (void_pointer = stab_contents; void_pointer <= (void *)((long)stab_contents + existing_note_section + -0xc);\n                  void_pointer = (void *)((long)void_pointer + 0xc)) {\n                difference = (**(code **)(bfd_handler[1] + 0x40))(void_pointer);\n                is_padding = *(byte_value *)((long)void_pointer + 4);\n                result = (**(code **)(bfd_handler[1] + 0x58))((long)void_pointer + 6);\n                i = (**(code **)(bfd_handler[1] + 0x40))((long)void_pointer + 8);\n                if (is_padding == 0) {\n                  note_section = mergeable_note_sections;\n                  mergeable_note_sections = mergeable_note_sections + i;\n                }\n                else {\n                  variable_2 = (difference & 0xffffffff) + note_section;\n                  if (variable_2 < unsigned_value) {\n                    section_name = (char *)((long)stabstr_section_contents + variable_2);\n                    merged_notes = (char *)0x0;\n                    while( true ) {\n                      string_length = strlen(section_name);\n                      if (((string_length == 0) || (merged_note = section_name + (string_length - 1), *merged_note != '\\')) ||\n                         ((ulong)((long)stab_contents + existing_note_section) < (long)void_pointer + 0x10U))\n                      goto LAB_001077fb;\n                      *merged_note = '\\0';\n                      void_pointer = (void *)((long)void_pointer + 0xc);\n                      iteration_counter = (**(code **)(bfd_handler[1] + 0x40))(void_pointer);\n                      difference = (ulong)(uint)(iteration_counter + (int)note_section);\n                      if (unsigned_value <= difference) break;\n                      section_name = (char *)concatenate_strings(section_name,(long)stabstr_section_contents + difference,0);\n                      *merged_note = '\\';\n                      free(merged_notes);\n                      merged_notes = section_name;\n                    }\n                    error_message = *bfd_handler;\n                    merged_note = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,merged_note,error_message,temp_ptr,((long)void_pointer - (long)stab_contents) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)is_padding,result,i,section_name);\n                    status = FUN_0011173a(stab_data,section_name,is_padding);\n                    if (status == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(merged_notes);\n                      free(section_name);\n                      free(stab_contents);\n                      free(stabstr_section_contents);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    error_message = *bfd_handler;\n                    section_name = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,section_name,error_message,temp_ptr,((long)void_pointer - (long)stab_contents) / 0xc,\n                            difference & 0xffffffff,(ulong)is_padding,((long)void_pointer - (long)stab_contents) % 0xc)\n                    ;\n                  }\n                }\n              }\n              FUN_00108863();\n              free(stab_contents);\n              goto LAB_001058eb;\n            }\n          }\n          free(stabstr_section_contents);\n          free(stab_contents);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      stab_section_names = stab_section_names + 2;\n    } while (stab_section_names != (undefined **)&DAT_00125c90);\n    if ((section_name != (char *)0x0) && (status = FUN_0010c892(), status == '\\0')) {\nLAB_00105981:\n      free(stab_data);\n      goto LAB_00105588;\n    }\n    if (*(int *)(bfd_handler[1] + 8) == 1) {\n      i = 0;\n      for (current_section = sections; current_section < sections + num_sections; current_section = current_section + 1) {\n        (**(code **)(bfd_handler[1] + 0x218))(bfd_handler,*current_section,&callback_data);\n        if (fill_in_gnu_debuglink_section_result == '-') {\n          if (((i == 0) && (i = FUN_00112894(bfd_handler,0,sections), i == 0)) ||\n             ((debugging_section_name == (char *)0x0 || (*debugging_section_name == '\\0')))) goto LAB_00105981;\n          section_name = (char *)0x0;\n          merged_note = debugging_section_name;\n          while (((*merged_note != '\\0' && (string_length = strlen(merged_note), merged_note[string_length - 1] == '\\')) &&\n                 (current_section + 1 < sections + num_sections))) {\n            section_name = (char *)xstrdup(merged_note);\n            string_length = strlen(section_name);\n            section_name[string_length - 1] = '\\0';\n            merged_note = (char *)concatenate_strings(section_name,*(undefined8 *)(current_section[1] + 8),0);\n            free(section_name);\n            free(section_name);\n            current_section = current_section + 1;\n            section_name = merged_note;\n          }\n          FUN_001088ae(stab_entry_corrupt,(int)symbol_type,qsorted_sections,merged_note);\n          param_9 = FUN_0011173a(stab_data,i,stab_entry_corrupt);\n          if (param_9 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((i != 0) && (status = FUN_0010c892(), status == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(bfd_handler[1] + 8) == 2) && (num_sections != 0)) {\n        qsorted_sections = (long *)0x0;\n        output_sections = sections;\n        symbol_table_index = 0;\n        alternative_machine_value = num_sections;\n        in_reloc = 0;\n        symbol_table = (undefined8 *)&flags;\n        for (i = 0x22; i != 0; i = i + -1) {\n          *(undefined4 *)symbol_table = 0;\n          symbol_table = (undefined8 *)((long)symbol_table + (ulong)is_first_iteration * -8 + 4);\n        }\n        status = '\\0';\n        int_list = (int *)0x0;\n        symbol_attribute = 0;\n        section_name = (char *)0x0;\n        merged_notes = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)num_sections <= symbol_table_index) goto LAB_00105590;\n            i = sections[symbol_table_index];\n            char_variable = bfd_coff_get_syment(bfd_handler,i,&contents_cache);\n            section_size = in_reloc;\n            if (char_variable == '\\0') {\n              result = bfd_get_error();\n              bfd_errmsg(result);\n              section_name = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            section_name = *(char **)(i + 8);\n            symbol_table = (undefined8 *)0x0;\n            symbol_table_index = symbol_table_index + 1;\n            in_reloc = (ulong)bfd_octets_per_byte_result + 1 + in_reloc;\n            if (bfd_octets_per_byte_result != 0) {\n              symbol_table = &stack_variable;\n              char_variable = bfd_coff_get_auxent(bfd_handler,i,0);\n              if (char_variable == '\\0') {\n                result = bfd_get_error();\n                bfd_errmsg(result);\n                section_name = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (merged_notes != (char *)section_size) break;\n            if (write_debug_information != 0x67) {\n              char_variable = FUN_0010bbd3(stab_data);\n              if (char_variable != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            merged_notes = (char *)alternative_machine_code;\n            char_variable = FUN_0010bbd3(stab_data);\n            if (char_variable == '\\0') goto LAB_00105981;\n          }\n          note_section_index = in_dynreloc._6_2_;\n          if ((char)write_debug_information < '\\0') {\n            if (write_debug_information == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            existing_note_section = FUN_0010dac0(bfd_handler,&attribute_cache,&callback_data);\n            if (existing_note_section == 0) break;\n            char_variable = FUN_00112a33(&callback_data,i,section_size);\n          }\n          else {\n            if (write_debug_information < 100) {\n              switch(write_debug_information) {\n              case 3:\n                if (in_dynreloc._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_dynreloc._6_2_ & *(uint *)(bfd_handler[0x22] + 0x40)) !=\n                    2L << ((byte_value)*(undefined4 *)(bfd_handler[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                int_list = (int *)(**(code **)(bfd_handler[1] + 0x238))(bfd_handler);\n                symbol_attribute = (uint)note_section_index;\n                section_name = section_name;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(write_debug_information) {\n            case 100:\n              iteration_counter = strcmp(section_name,\".bb\");\n              if (iteration_counter == 0) {\n                char_variable = FUN_0010be88(stab_data);\n              }\n              else {\n                iteration_counter = strcmp(section_name,\".eb\");\n                if (iteration_counter != 0) goto switchD_00106e1a_caseD_68;\n                char_variable = FUN_0010bf20(stab_data);\n              }\n              break;\n            case 0x65:\n              iteration_counter = strcmp(section_name,\".bf\");\n              if (iteration_counter == 0) {\n                if (section_name != (char *)0x0) {\n                  symbol_flags = (int)symbol_attribute >> ((byte_value)*(undefined4 *)(bfd_handler[0x22] + 0x44) & 0x1f);\n                  section_size = FUN_0010dac0(bfd_handler,&attribute_cache,&callback_data,section_size,\n                                        symbol_flags ^ (symbol_attribute ^ symbol_flags) &\n                                                 *(uint *)(bfd_handler[0x22] + 0x38),symbol_table,0,\n                                        stab_data);\n                  if ((section_size == 0) || (status = FUN_0010bc80(stab_data), status == '\\0'))\n                  goto LAB_00105981;\n                  if (int_list != (int *)0x0) {\n                    iteration_counter = 0;\n                    if (bfd_octets_per_byte_result != 0) {\n                      iteration_counter = debug_link_section_size - 1;\n                    }\n                    i = *(long *)(*(long *)(i + 0x20) + 0x30);\n                    while( true ) {\n                      symbol_attribute_index = int_list[4];\n                      if (symbol_attribute_index == 0) break;\n                      char_variable = FUN_0010bf86(stab_data,iteration_counter + symbol_attribute_index,\n                                           *(long *)(int_list + 6) + i);\n                      int_list = int_list + 4;\n                      if (char_variable == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  symbol_attribute = 0;\n                  int_list = (int *)0x0;\n                  section_name = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                section_name = \"%ld: .bf without preceding section_iteration_functionction\";\n              }\n              else {\n                iteration_counter = strcmp(section_name,\".ef\");\n                if (iteration_counter != 0) goto switchD_00106e1a_caseD_68;\n                if (status != '\\0') {\n                  status = FUN_0010be1a(stab_data);\n                  if (status == '\\0') goto LAB_00105981;\n                  status = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                section_name = \"%ld: unexpected .ef\\n\";\n              }\n              error_message = dcgettext(0,section_name,5);\n              FUN_00119ed0(error_message);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (char_variable != '\\0');\n      }\n      else {\n        section_name = \"%s: no recognized debugging information\";\nLAB_00105968:\n        error_message = dcgettext(0,section_name,5);\n        FUN_00119ed0(error_message);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(binary + 0x44) & 0x42) != 0) && ((*(uint *)(binary + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(binary + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (num_sections != 0) {\n        sections = DAT_001278d0 + num_sections;\n        current_section = DAT_001278d0;\n        do {\n          symbol_attribute = *(uint *)(*current_section + 0x18);\n          if ((symbol_attribute & 0x1000000) != 0) {\n            *(uint *)(*current_section + 0x18) = symbol_attribute & 0xfeffffff;\n          }\n          current_section = current_section + 1;\n        } while (sections != current_section);\n      }\n    }\n    else {\n      for (i = *(long *)(binary + 0x90); i != 0; i = *(long *)(i + 8)) {\n        if (*(long *)(i + 0xe8) != 0) {\n          symbol_flags = (uint *)(*(long *)(i + 0xe8) + 0x18);\n          *symbol_flags = *symbol_flags | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      i = xmaltemp_variable();\n      sections = DAT_001278d0;\n      bfd_flags = *(uint *)((long)bfd_handler + 0x44) & 0x42;\n      DAT_001278c8 = i;\n      if (num_sections == 0) {\n        unsigned_value = 0;\n      }\n      else {\n        unsigned_value = 0;\n        index = 0;\n        do {\n          iteration_counter = DAT_001279c0;\n          current_section = (long *)sections[index];\n          symbol_name = (code *)current_section[4];\n          symbol_attribute = *(uint *)(current_section + 3);\n          current_symbol = (long *)current_section[1];\n          aux_list = current_symbol;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            symbol_attribute_index = 0;\n            symbol_table = DAT_001279c8;\n            while ((symbol_attribute_index < iteration_counter && (section_name = (char *)symbol_table[5], section_name != (char *)0x0))) {\n              if (section_name != \"\") {\n                comparison_result = strcmp(section_name,(char *)current_symbol);\n                if (comparison_result == 0) {\n                  free(section_name);\n                  difference = unsigned_value + 1;\n                  symbol_table[5] = \"\";\n                  translated_string = FUN_0011a2e0(symbol_table);\n                  error_message = DAT_001278f0;\n                  *(undefined8 *)(i + unsigned_value * 8) = translated_string;\n                  section_size = htab_elements(error_message);\n                  if ((section_size != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                symbol_table = (undefined8 *)*symbol_table;\n              }\n              symbol_attribute_index = symbol_attribute_index + 1;\n            }\n          }\n          section_size = htab_elements(DAT_001278f0);\n          difference = unsigned_value;\n          if ((section_size != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (current_symbol != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)current_symbol == '_') && (*(char *)((long)current_symbol + 1) == '_')) &&\n                 (iteration_counter = strcmp((char *)((ulong)(*(char *)((long)current_symbol + 2) == '_') +\n                                          (long)current_symbol),\"__gnu_lto_slim\"), iteration_counter == 0)) {\n                error_message = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(error_message);\n              }\n            }\n            boolean_value = 0;\n            qsorted_sections = current_symbol;\n            section_size = htab_find(DAT_001278f0);\n            if (((section_size == 0) || (aux_list = *(long **)(section_size + 8), current_symbol == aux_list)) &&\n               (aux_list = current_symbol, debug_sections = DAT_001278f8, (symbol_attribute & 0x100) != 0)) {\n              for (; debug_sections != (char **)0x0; debug_sections = (char **)debug_sections[3]) {\n                iteration_counter = strcmp(*debug_sections,(char *)current_symbol);\n                if (iteration_counter == 0) {\n                  aux_list = (long *)debug_sections[1];\n                  break;\n                }\n              }\n            }\n            current_section[1] = (long)aux_list;\n            status = *(char *)aux_list;\n            if (status != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            section_name = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(binary + 8) + 0x1c) != '\\0')) {\n              section_size = bfd_handler[1];\n              status = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          status = *(char *)current_symbol;\n          if (status == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          section_name = DAT_00127928;\n          section_size = bfd_handler[1];\n          if (*(char *)(section_size + 0x1c) == status) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((symbol_attribute & 0x82) == 0 && (symbol_name != bfd_map_over_sections)) &&\n                  ((*(byte_value *)(current_section[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              aux_list = (long *)((long)aux_list + 1);\n              current_section[1] = (long)aux_list;\n              goto joined_r0x00106565;\n            }\n            status = *(char *)(*(long *)(binary + 8) + 0x1c);\n            if (status == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              aux_list = (long *)((long)aux_list + 1);\n              current_section[1] = (long)aux_list;\n              string_length = strlen((char *)aux_list);\n              section_size = string_length + 2;\nLAB_001066bc:\n              string_length = strlen(section_name);\n              current_symbol = (long *)xmaltemp_variable(string_length + section_size);\n              goto LAB_001066d0;\n            }\n            *(char *)aux_list = status;\n            current_section[1] = (long)aux_list;\n            unsigned_value = difference;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(binary + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              unsigned_value = difference;\n              if (section_name == (char *)0x0) goto LAB_00105b32;\n              string_length = strlen((char *)aux_list);\n              secondary_string_length = strlen(section_name);\n              concatenated_string = (long *)xmaltemp_variable(secondary_string_length + string_length + 1);\n              current_symbol = concatenated_string;\n            }\n            else {\nLAB_0010668d:\n              section_name = DAT_00127928;\n              if ((*(char *)(section_size + 0x1c) != '\\0') && (status != *(char *)(section_size + 0x1c)))\n              goto joined_r0x00106565;\n              string_length = strlen((char *)aux_list);\n              section_size = string_length + 2;\n              if (section_name != (char *)0x0) goto LAB_001066bc;\n              current_symbol = (long *)xmaltemp_variable(section_size);\nLAB_001066d0:\n              concatenated_string = (long *)((long)current_symbol + 1);\n              *(char *)current_symbol = *(char *)(*(long *)(binary + 8) + 0x1c);\n            }\n            section_name = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy((char *)concatenated_string,DAT_00127928);\n              string_length = strlen(section_name);\n              concatenated_string = (long *)((long)concatenated_string + string_length);\n            }\n            strcpy((char *)concatenated_string,(char *)aux_list);\n            current_section[1] = (long)current_symbol;\n            aux_list = current_symbol;\n            unsigned_value = difference;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((symbol_attribute & 0x20) == 0) &&\n             (((symbol_attribute & 0x100) == 0 ||\n              ((*(byte_value *)(**(long **)(current_section[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((bfd_flags == 0) &&\n                (((symbol_attribute & 0x82) != 0 || ((*(byte_value *)(current_section[4] + 0x25) & 0x10) != 0)))) ||\n               (iteration_counter = bfd_decode_symclass(current_section), iteration_counter == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                section_size = htab_find();\n                if (section_size == 0) goto LAB_00105c07;\n              }\n              else {\n                boolean_value = boolean_value & 0xffffffffffffff00;\n                qsorted_sections = aux_list;\n                htab_traverse(DAT_00127a18,FUN_0011a170,&callback_data);\n                if (fill_in_gnu_debuglink_section_result == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((symbol_attribute & 0x82) == 0) && (symbol_name != bfd_map_over_sections)) &&\n                    ((*(byte_value *)(current_section[4] + 0x25) & 0x10) == 0)) {\n              if ((symbol_attribute & 4) == 0) {\n                if (((*(int *)(bfd_handler[1] + 8) != 2) ||\n                    (section_size = *(long *)(current_section[4] + 0xd0), section_size == 0)) ||\n                   (*(long *)(section_size + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    status = bfd_is_local_label(bfd_handler);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              status = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (status == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            section_size = htab_find();\n            if (section_size != 0) {\nLAB_0010687f:\n              error_message = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a retemp_variableation\",\n                                 5);\n              FUN_00119ed0(error_message);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            boolean_value = boolean_value & 0xffffffffffffff00;\n            qsorted_sections = aux_list;\n            htab_traverse(DAT_00127a18,FUN_0011a170,&callback_data);\n            if (fill_in_gnu_debuglink_section_result != '\\0') goto LAB_0010687f;\n          }\n          if ((symbol_attribute & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              boolean_value = boolean_value & 0xffffffffffffff00;\n              qsorted_sections = aux_list;\n              htab_traverse(DAT_00127a10,FUN_0011a170,&callback_data);\n              if (fill_in_gnu_debuglink_section_result != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            section_size = htab_find();\n            if (section_size == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((symbol_attribute & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              section_size = htab_find();\n              if (section_size != 0) goto LAB_00105c2c;\n            }\n            else {\n              boolean_value = boolean_value & 0xffffffffffffff00;\n              qsorted_sections = aux_list;\n              htab_traverse(DAT_00127a28,FUN_0011a170,&callback_data);\n              if (fill_in_gnu_debuglink_section_result != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            status = FUN_001159d0(current_section[4]);\n            if (status == '\\0') {\n              if (((symbol_attribute & 0x800002) == 0) && (symbol_name != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((symbol_attribute & 0x82) != 0) {\n                  status = FUN_00115d70(aux_list);\n                  if ((status == '\\0') &&\n                     ((section_size = htab_elements(DAT_001279f8), section_size == 0 ||\n                      (status = FUN_00115d70(aux_list), status != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (symbol_flags = *(uint *)(current_section + 3), (symbol_flags & 0x200000) != 0)) ||\n                         (section_size = *current_section, section_size == 0)) ||\n                        ((*(int *)(*(long *)(section_size + 8) + 8) != 5 ||\n                         (*(long *)(section_size + 0x110) == 0)))) ||\n                       (1 < (*(byte_value *)((long)current_section + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    symbol_flags = *(uint *)(current_section + 3);\n                  }\n                  *(uint *)(current_section + 3) = symbol_flags & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((symbol_attribute & 1) != 0) && (status = FUN_00115d70(aux_list), status != '\\0')) {\n                  *(uint *)(current_section + 3) = *(uint *)(current_section + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (status = FUN_00115d70(aux_list), status != '\\0')) {\n                  *(uint *)(current_section + 3) = *(uint *)(current_section + 3) & 0xff7ffffd | 0x80;\n                }\n                if (symbol_name != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(i + unsigned_value * 8) = current_section;\n              unsigned_value = unsigned_value + 1;\n            }\n          }\n          index = index + 1;\n        } while (num_sections != index);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        symbol_table = DAT_001279c8;\n        iteration_counter = DAT_001279c0;\n        for (section_size = 0; section_size < iteration_counter; section_size = section_size + 1) {\n          section_name = (char *)symbol_table[5];\n          if (section_name == (char *)0x0) {\n            existing_note_section = unsigned_value * 8;\n            unsigned_value = unsigned_value + 1;\n            error_message = FUN_0011a2e0(symbol_table,binary);\n            *(undefined8 *)(i + existing_note_section) = error_message;\n            iteration_counter = DAT_001279c0;\n          }\n          else if (section_name != \"\") {\n            error_message = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(error_message,section_name);\n          }\n          symbol_table = (undefined8 *)*symbol_table;\n        }\n      }\n      has_stab_data = DAT_001279a0 == '\\0';\n      *(undefined8 *)(i + unsigned_value * 8) = 0;\n      if ((has_stab_data) || (stab_data == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        num_sections = unsigned_value & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iteration_counter = *(int *)(*(undefined8 **)(binary + 8) + 1);\n      if ((iteration_counter == 5) || (iteration_counter == 2)) {\n        merged_notes_content = (void *)0x0;\n        status = FUN_0011378f(binary,stab_data,&attribute_cache,&stack_variable,&contents_cache,\n                             &callback_data);\n        if (status != '\\0') {\n          i = bfd_make_section_with_flags(binary,\".stab\",0x2108);\n          section_size = bfd_make_section_with_flags(binary,\".stabstr\",0x2108);\n          if ((((i == 0) || (section_size == 0)) ||\n              (status = bfd_set_section_size(i,debug_link_section_size), status == '\\0')) ||\n             (status = bfd_set_section_size(section_size,qsorted_sections), status == '\\0')) {\n            section_name = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(i + 0x7c) = 2;\n            *(undefined4 *)(section_size + 0x7c) = 0;\n            status = bfd_set_section_contents(binary,i,output_sections,0,debug_link_section_size);\n            if ((status != '\\0') &&\n               (status = bfd_set_section_contents(binary,section_size,merged_notes_content,0,qsorted_sections), status != '\\0')\n               ) {\n              free(stab_data);\n              goto LAB_00105cfa;\n            }\n            section_name = \"can\\'t set debugging section contents\";\n          }\n          error_message = dcgettext(0,section_name,5);\n          FUN_001126c0(0,binary,0,error_message);\n          free(merged_notes_content);\n          free(stab_data);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        error_message = **(undefined8 **)(binary + 8);\n        translated_string = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,binary,0,translated_string,error_message);\n      }\n      free(stab_data);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(bfd_handler,FUN_00116030,DAT_001278d0);\n      iteration_counter = bfd_get_error();\n      if (iteration_counter == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    i = htab_elements(DAT_00127a18);\n    if (((i != 0) ||\n        ((((i = htab_elements(DAT_00127a28), i != 0 ||\n           (i = htab_elements(DAT_00127a08), i != 0)) ||\n          (i = htab_elements(DAT_00127a00), i != 0)) ||\n         ((i = htab_elements(DAT_001279f8), i != 0 ||\n          (i = htab_elements(DAT_001279f0), i != 0)))))) ||\n       ((((i = htab_elements(DAT_001278f0), i != 0 ||\n          ((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')))) || (DAT_00127a39 != '\\0')) ||\n        ((((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')) ||\n         (((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')) || (DAT_001279c0 != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(binary,DAT_001278c8,num_sections & 0xffffffff);\n    bfd_map_over_sections(bfd_handler,FUN_00115dc0,binary);\n    bfd_map_over_sections(bfd_handler,FUN_00116110,binary);\n    for (symbol_table = DAT_001279e0; debug_info = DAT_001279d8, symbol_table != (undefined8 *)0x0;\n        symbol_table = (undefined8 *)*symbol_table) {\n      status = bfd_set_section_contents(binary,symbol_table[5],symbol_table[4],0,symbol_table[3]);\n      if (status == '\\0') {\n        FUN_001126c0(0,binary,symbol_table[5],0);\n        return 0;\n      }\n    }\n    for (; debug_info != (undefined8 *)0x0; debug_info = (undefined8 *)*debug_info) {\n      error_message = *(undefined8 *)(debug_info[5] + 0x60);\n      status = bfd_set_section_contents(binary,error_message,debug_info[4],0,debug_info[3]);\n      if (status == '\\0') {\n        FUN_001126c0(0,binary,error_message,0);\n        return 0;\n      }\n    }\n    if (merged_notes == (long *)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        error_message = *bfd_handler;\n        translated_string = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(translated_string,error_message);\n      }\n    }\n    else {\n      sections = (long *)0x0;\n      for (symbol_table = *(undefined8 **)(binary + 0x90); symbol_table != (undefined8 *)0x0;\n          symbol_table = (undefined8 *)symbol_table[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(binary + 8) + 8) == 5)) &&\n           ((*(int *)(symbol_table[0x1a] + 4) == 7 &&\n            (status = FUN_00113fb0(*symbol_table,\".gnu.build.attributes\"), status != '\\0')))) {\n          if (sections == (long *)0x0) {\n            sections = merged_notes;\n          }\n          current_section = merged_notes;\n          if (*(undefined8 **)(*sections + 0x60) == symbol_table) {\nLAB_0010625f:\n            section_name = \"error: failed to merge notes\";\n            if (sections[1] != 0) {\n              status = bfd_set_section_contents(binary,symbol_table,sections[1],0,sections[2]);\n              if (status == '\\0') {\n                error_message = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,binary,symbol_table,error_message);\n                return 0;\n              }\n              sections = (long *)sections[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              sections = current_section;\n              if (*(undefined8 **)(*current_section + 0x60) == symbol_table) goto LAB_0010625f;\n              sections = (long *)current_section[3];\n              current_section = sections;\n            } while (sections != (long *)0x0);\n            section_name = \"error: failed to temp_variableate merged notes\";\n          }\n          error_message = dcgettext(0,section_name,5);\n          FUN_001126c0(0,binary,symbol_table,error_message);\n        }\nLAB_001061be:\n      }\n      do {\n        sections = (long *)merged_notes[3];\n        free((void *)merged_notes[1]);\n        free(merged_notes);\n        merged_notes = sections;\n      } while (sections != (long *)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (status = bfd_fill_in_gnu_debuglink_section(binary,debug_link_filename), i = DAT_00127a30,\n       status != '\\0')) {\n      if (section_padding != (undefined *)0x0) {\n        if (0x2000 < gap_size) {\n          gap_size = 0x2000;\n        }\n        i = 0;\n        padding_data = (undefined *)xmaltemp_variable(gap_size);\n        padding_byte = DAT_00127999;\n        temp_ptr = padding_data;\n        for (gap_size = gap_size & 0xffffffff; gap_size != 0; gap_size = gap_size - 1) {\n          *temp_ptr = padding_byte;\n          temp_ptr = temp_ptr + (ulong)is_first_iteration * -2 + 1;\n        }\n        for (; (uint)i < num_sections; i = i + 1) {\n          unsigned_value = *(ulong *)(section_padding + i * 8);\n          if (unsigned_value != 0) {\n            section_size = *(long *)(*section_addresses + 0x40) - unsigned_value;\n            do {\n              difference = 0x2000;\n              if (unsigned_value < 0x2001) {\n                difference = unsigned_value;\n              }\n              status = bfd_set_section_contents(binary,*section_addresses,padding_data,section_size,difference);\n              if (status == '\\0') {\n                FUN_001126c0(0,binary,*section_addresses,0);\n                free(padding_data);\n                return 0;\n              }\n              section_size = section_size + difference;\n              unsigned_value = unsigned_value - difference;\n            } while (unsigned_value != 0);\n          }\n          section_addresses = section_addresses + 1;\n        }\n        free(padding_data);\n        free(section_padding);\n      }\n      result = (**(code **)(*(long *)(binary + 8) + 0x140))(bfd_handler);\n      if ((char)result != '\\0') {\n        if (DAT_00127930 == 0) {\n          return result;\n        }\n        status = bfd_alt_mach_code(binary,DAT_00127930 & 0xffffffff);\n        unsigned_value = DAT_00127930;\n        if (status == '\\0') {\n          error_message = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(error_message,unsigned_value);\n          if (*(int *)(*(long *)(binary + 8) + 8) == 5) {\n            error_message = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(error_message);\n            *(short *)(*(long *)(binary + 0x110) + 0x3a) = (short)DAT_00127930;\n            return result;\n          }\n          error_message = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(error_message);\n          return result;\n        }\n        return result;\n      }\n      error_message = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,binary,0,error_message);\n    }\n    else {\n      error_message = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,binary,0,error_message,i);\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "reconstruct_symbol_table_0010554f",
            "entrypoint": "0x0010554f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010554f": "reconstruct_symbol_table_0010554f",
                "__dest": "concatenated_string",
                "__ptr": "padding_data",
                "__ptr_00": "stab_contents",
                "__ptr_01": "stabstr_section_contents",
                "__ptr_02": "stab_data",
                "__s": "section_name",
                "_param_1": "section_offset",
                "_param_15": "int_list",
                "_param_4": "relocation_table_offset",
                "_param_41": "boolean_value",
                "_param_9": "index",
                "bVar2": "is_padding",
                "bVar38": "has_stab_data",
                "bVar39": "is_first_iteration",
                "bfd_coff_get_auxent": "get_coff_aux_ent",
                "bfd_coff_get_syment": "get_coff_sym_ent",
                "bfd_errmsg": "get_error_message",
                "bfd_get_section_by_name": "get_section_by_name",
                "bfd_is_local_label": "is_local_label",
                "bfd_make_section_with_flags": "create_section",
                "bfd_map_over_sections": "apply_to_each_section",
                "bfd_octets_per_byte": "num_octets_per_byte",
                "bfd_set_section_contents": "set_section_contents",
                "bfd_set_section_size": "set_section_size",
                "byte": "byte_value",
                "cVar7": "status",
                "cVar8": "char_variable",
                "concat": "concatenate_strings",
                "free": "deallocate",
                "fun": "section_iteration_function",
                "iVar10": "iteration_counter",
                "iVar11": "comparison_result",
                "iVar27": "symbol_attribute_index",
                "in_R10": "merged_notes",
                "in_stack_00000068": "param_39",
                "in_stack_00000068._4_4_": "num_sections",
                "in_stack_000000d8": "in_reloc",
                "in_stack_000000f8": "in_dynreloc",
                "lVar14": "i",
                "lVar23": "existing_note_section",
                "lVar28": "current_note_section",
                "lVar37": "section_size",
                "loc": "temp_variable",
                "param_1": "param_7",
                "param_12": "gap_size",
                "param_13": "section_name",
                "param_14": "section_padding",
                "param_15": "bfd_flags",
                "param_17": "section_addresses",
                "param_2": "param_8",
                "param_21": "debug_link_filename",
                "param_23": "note_section",
                "param_24": "merged_notes",
                "param_26": "mergeable_note_sections",
                "param_3": "param_15",
                "param_30": "output_sections",
                "param_31": "alternative_machine_value",
                "param_32": "symbol_table_index",
                "param_33": "merged_notes_content",
                "param_34": "alternative_machine_code",
                "param_36": "write_debug_information",
                "param_37": "bfd_octets_per_byte_result",
                "param_38": "debug_link_section_size",
                "param_39": "debug_link_section_size",
                "param_4": "param_30",
                "param_40": "sorted_sections",
                "param_41": "fill_in_gnu_debuglink_section_result",
                "param_42": "debugging_section_name",
                "param_43": "stab_entry_corrupt",
                "param_44": "symbol_type",
                "param_7": "binary",
                "param_8": "num_sections",
                "pcVar22": "merged_note",
                "pcVar3": "symbol_name",
                "pcVar31": "section_name",
                "plVar15": "current_section",
                "plVar20": "current_symbol",
                "plVar25": "aux_list",
                "plVar28": "sections",
                "ppcVar34": "debug_sections",
                "ppuVar36": "stab_section_names",
                "ptr": "ptr_1",
                "puVar1": "symbol_flags",
                "puVar26": "symbol_table",
                "puVar30": "padding_buffer_index",
                "puVar32": "stab_entry",
                "puVar33": "temp_ptr",
                "puVar36": "temp_stab_section",
                "puVar4": "debug_info",
                "pvVar35": "void_pointer",
                "qsort": "sort",
                "sVar18": "string_length",
                "sVar19": "secondary_string_length",
                "stack0x000000c0": "attribute_cache",
                "stack0x000000e0": "contents_cache",
                "stack0x00000110": "stack_variable",
                "stack0x00000140": "callback_data",
                "stack0x00000148": "flags",
                "strcmp": "compare_strings",
                "strcpy": "copy_string",
                "uVar12": "symbol_attribute",
                "uVar13": "symbol_flags",
                "uVar16": "translated_string",
                "uVar17": "error_message",
                "uVar21": "difference",
                "uVar24": "variable_2",
                "uVar26": "temp_gnu_debug_link_section",
                "uVar29": "unsigned_value",
                "uVar30": "size_variable_2",
                "uVar32": "temp_debug_desc",
                "uVar5": "padding_byte",
                "uVar6": "note_section_index",
                "uVar9": "result",
                "unaff_R14": "bfd_handler"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105828": {
            "additional_data": {
                "FUN_00105828": {
                    "1": "check_input_file_architecture",
                    "10": "recognize_input_file_format",
                    "2": "identify_architecture",
                    "4": "identify_file_architecture"
                },
                "FUN_001125fa": {
                    "1": "detect_input_file_format",
                    "2": "recognize_format",
                    "3": "extract_input_file_name",
                    "5": "get_input_file_name"
                },
                "FUN_00119ed0": {
                    "1": "report_error",
                    "4": "display_error_message",
                    "8": "print_error_message"
                },
                "bfd_get_arch": {
                    "1": "get_file_architecture",
                    "10": "get_architecture"
                },
                "bfd_get_mach": {
                    "1": "retrieve_machine_architecture",
                    "10": "get_machine"
                },
                "bfd_printable_arch_mach": {
                    "1": "get_printable_arch",
                    "2": "get_printable_arch_mach",
                    "5": "get_printable_arch_machine"
                },
                "dcgettext": {
                    "1": "retrieve_error_string",
                    "2": "translate_message"
                },
                "iVar1": {
                    "1": "arch_value",
                    "15": "architecture",
                    "2": "architecture_type"
                },
                "param_1": {
                    "1": "param1"
                },
                "param_2": {
                    "1": "param2"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "param4"
                },
                "uVar2": {
                    "1": "arch_value",
                    "2": "arch_result",
                    "5": "architecture",
                    "6": "machine"
                },
                "uVar3": {
                    "1": "input_file_format",
                    "13": "input_file",
                    "2": "format",
                    "3": "machine"
                },
                "uVar4": {
                    "2": "error_msg",
                    "28": "error_message"
                }
            },
            "called": [
                "FUN_00119ed0",
                "FUN_001125fa",
                "bfd_get_mach",
                "dcgettext",
                "bfd_printable_arch_mach",
                "bfd_get_arch"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\nundefined8 recognize_input_file_format_00105828(void)\n\n{\n  int architecture;\n  undefined4 machine;\n  undefined8 input_file;\n  undefined8 error_message;\n  \n  architecture = bfd_get_arch();\n  if (architecture == 0) {\n    input_file = FUN_001125fa();\n    error_message = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    FUN_00119ed0(error_message,input_file);\n  }\n  else {\n    input_file = bfd_get_mach();\n    machine = bfd_get_arch();\n    input_file = bfd_printable_arch_mach(machine,input_file);\n    error_message = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    FUN_00119ed0(error_message,input_file);\n  }\n  return 0;\n}\n\n",
            "current_name": "recognize_input_file_format_00105828",
            "entrypoint": "0x00105828",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105828": "recognize_input_file_format_00105828",
                "bfd_get_arch": "get_architecture",
                "bfd_get_mach": "get_machine",
                "bfd_printable_arch_mach": "get_printable_arch_machine",
                "dcgettext": "get_translated_text",
                "iVar1": "architecture",
                "uVar2": "machine",
                "uVar3": "input_file",
                "uVar4": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107880": {
            "called": [
                "FUN_00115f30",
                "xmalloc",
                "bfd_get_section_by_name",
                "bfd_set_section_size",
                "__errno_location",
                "FUN_001126c0",
                "bfd_get_arch",
                "FUN_00114190",
                "strerror",
                "bfd_malloc_and_get_section",
                "FUN_0010554f",
                "FUN_001163d0",
                "FUN_00115530",
                "fclose",
                "FUN_00105828",
                "bfd_map_over_sections",
                "dcgettext",
                "free",
                "FUN_0010551d",
                "bfd_set_format",
                "FUN_00119ed0",
                "FUN_00113fb0",
                "bfd_get_full_section_contents",
                "fopen",
                "fwrite",
                "bfd_make_section_with_flags",
                "bfd_create_gnu_debuglink_section"
            ],
            "calling": [
                "FUN_001152b6"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = FUN_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = FUN_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279eb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279e0,\n     cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar31 = DAT_001279e0;\n  }\n  for (; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = FUN_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = FUN_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar19);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a30;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = FUN_0010554f();\n    return uVar28;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = FUN_0011173a(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = FUN_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = FUN_0011173a(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar27 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = FUN_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = FUN_0010be88(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = FUN_0010dac0();\n                  if ((lVar17 == 0) || (cVar10 = FUN_0010bc80(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = FUN_0010bf86(param_10,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              FUN_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        FUN_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278d0 + param_8;\n        plVar16 = DAT_001278d0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279c8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = FUN_0011a2e0(puVar31);\n                  uVar19 = DAT_001278f0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278f0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(DAT_001278f0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278f8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127928;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127928;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127928);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar19);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a10,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a28,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279c8;\n        iVar12 = DAT_001279c0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = FUN_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279c0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_001279a0 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                              &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_00127a18);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a28), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_00127a08), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_00127a00), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279f8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279f0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278f0), lVar27 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar31 = DAT_001279e0; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12), lVar27 = DAT_00127a30,\n       cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar23 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)FUN_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279d0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_00107880",
            "entrypoint": "0x00107880",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00107976": {
            "called": [
                "bfd_set_start_address",
                "FUN_001152b6",
                "printf",
                "FUN_001125fa",
                "bfd_get_mach",
                "dcgettext",
                "bfd_set_file_flags",
                "bfd_get_arch"
            ],
            "calling": [
                "FUN_00114e50"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = FUN_001125fa();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~DAT_00127910 & *(uint *)(param_7[1] + 0x14) &\n           (DAT_00127914 | *(uint *)((long)unaff_R14 + 0x44));\n  if (DAT_00127a48 == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = FUN_001125fa();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = FUN_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(*(undefined8 *)param_7[1],&DAT_0011b503), cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = DAT_001279eb == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar28 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar28 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar28 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar28 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = DAT_001279e0, cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar33 = DAT_001279e0;\n  }\n  for (; puVar38 = DAT_001279d8, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    uVar31 = 0x128;\n    lVar28 = FUN_00114190(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = FUN_00115f30(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = FUN_00114190(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = FUN_00114190(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar18);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = FUN_0010554f();\n    return uVar29;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = FUN_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = FUN_00112894(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32)\n          ;\n          in_stack_00000018 = FUN_0011173a(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar28 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0();\n            if (lVar23 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = FUN_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = FUN_0010dac0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = FUN_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = FUN_0010bf86(puStack0000000000000020,iVar13 + iVar35,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              FUN_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        FUN_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278d0 + param_8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = DAT_001279c8;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = FUN_0011a2e0(puVar33);\n                  uVar18 = DAT_001278f0;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(DAT_001278f0);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (DAT_001278f8 == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              FUN_00119dd0(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(DAT_001278f0);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = DAT_001278f8, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = DAT_00127928;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = DAT_00127928;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127928);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar18);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a10,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a28,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(DAT_001279f8), lVar28 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar33 = DAT_001279c8;\n        iVar13 = DAT_001279c0;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = FUN_0011a2e0(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279c0;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = DAT_001279a0 == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          FUN_001126c0(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(DAT_00127a18);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(DAT_00127a28), lVar28 != 0 ||\n              (lVar28 = htab_elements(DAT_00127a08), lVar28 != 0)) ||\n             (lVar28 = htab_elements(DAT_00127a00), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(DAT_001279f8), lVar28 != 0 ||\n             (lVar28 = htab_elements(DAT_001279f0), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(DAT_001278f0), lVar28 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar33 = DAT_001279e0; puVar38 = DAT_001279d8, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar33,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          FUN_001126c0(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = DAT_00127a30, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar22 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)DAT_00127930;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)FUN_001163d0();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = DAT_001279d0;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_00107976",
            "entrypoint": "0x00107976",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00108072": {
            "additional_data": {
                "(cVar3 == '\\0')": {
                    "1": "condition2"
                },
                "(lVar6 != 0) && (lVar7 = *(long *)(unaff_R12 + 8))": {
                    "1": "condition"
                },
                "*(byte *)((long)unaff_RBX + 0x27)": {
                    "1": "byte_variable"
                },
                "*(byte *)(unaff_R15 + 0x28)": {
                    "1": "flag_variable"
                },
                "*(byte *)(unaff_RBX + 5)": {
                    "1": "byte_variable2"
                },
                "*(int *)(lVar7 + 8)": {
                    "1": "int_variable"
                },
                "*(long *)(unaff_R15 + 0xd0)": {
                    "1": "result13"
                },
                "*(uint *)((long)unaff_RBX + 0x7c)": {
                    "1": "result10"
                },
                "*(uint *)(lVar6 + 0x18)": {
                    "1": "uint_variable"
                },
                "*(uint *)(unaff_R15 + 0x7c)": {
                    "1": "result9"
                },
                "*(undefined4 *)((long)unaff_RBX + 0xb4)": {
                    "1": "undefined_variable"
                },
                "FUN_00108072": {
                    "1": "resize_memory_segment",
                    "10": "set_sizes_and_alignment",
                    "2": "set_memory_layout",
                    "5": "set_size_and_alignment"
                },
                "FUN_00108179": {
                    "1": "handle_alignment_error"
                },
                "FUN_00114190": {
                    "1": "allocate_memory"
                },
                "bVar1": {
                    "1": "byte_variable_1",
                    "12": "byte_var",
                    "2": "temp_byte",
                    "3": "byte_var1",
                    "4": "byte_value"
                },
                "byte": {
                    "1": "byte_value"
                },
                "byte bVar1": {
                    "1": "byte_var"
                },
                "cVar3": {
                    "1": "temp_char",
                    "10": "char_var",
                    "2": "char_var3",
                    "4": "char_value"
                },
                "char": {
                    "1": "character"
                },
                "dcgettext": {
                    "1": "get_translation",
                    "2": "translate_text"
                },
                "lVar5": {
                    "1": "gettext_result",
                    "14": "error_message",
                    "2": "error_string",
                    "5": "error_msg"
                },
                "lVar6": {
                    "1": "temp_addr",
                    "2": "allocation_result",
                    "6": "result1"
                },
                "lVar7": {
                    "1": "ptr2",
                    "2": "temp_var2",
                    "4": "alignment",
                    "6": "result2"
                },
                "lVar8": {
                    "1": "size1",
                    "2": "alignment",
                    "6": "result3"
                },
                "lVar9": {
                    "1": "temporary_variable_4"
                },
                "long": {
                    "1": "long_value"
                },
                "uVar2": {
                    "1": "pointer_value",
                    "2": "var2",
                    "4": "ptr"
                },
                "uVar4": {
                    "1": "temp_unsigned_int",
                    "2": "alignment",
                    "3": "uint_value",
                    "8": "uint_var"
                },
                "uint": {
                    "1": "uint_value"
                },
                "unaff_R12": {
                    "1": "pointer_r12",
                    "10": "register12",
                    "2": "r12_value",
                    "4": "r12"
                },
                "unaff_R14B": {
                    "1": "result8",
                    "2": "r14b",
                    "4": "register14_b",
                    "9": "flag"
                },
                "unaff_R15": {
                    "1": "memory_buffer",
                    "10": "register15",
                    "2": "register_15",
                    "3": "r15",
                    "6": "result"
                },
                "unaff_RBP": {
                    "1": "stack_base",
                    "13": "base_pointer",
                    "2": "rbp_value",
                    "4": "rbp"
                },
                "unaff_RBX": {
                    "1": "pointer1",
                    "2": "array_pointer",
                    "3": "arguments",
                    "5": "parameters"
                },
                "unaff_RBX[0xb]": {
                    "1": "result12"
                },
                "unaff_RBX[0xc]": {
                    "1": "result11"
                },
                "undefined8": {
                    "1": "value"
                }
            },
            "called": [
                "FUN_00108179",
                "FUN_00114190",
                "dcgettext"
            ],
            "calling": [
                "FUN_00115530"
            ],
            "code": "\n\n\nvoid set_sizes_and_alignment_00108072(void)\n\n{\n  byte_value byte_var;\n  value ptr;\n  character char_var;\n  uint_value uint_var;\n  long_value error_message;\n  long_value result1;\n  long_value result2;\n  value *parameters;\n  long_value base_pointer;\n  long_value register12;\n  long_value result3;\n  character flag;\n  long_value register15;\n  \n  error_message = dcgettext(0,\"failed to set size\",5);\n  result3 = parameters[6];\n  result1 = FUN_00114190(*parameters,0,0x18);\n  if (result1 == 0) {\n    *(byte_value *)(register15 + 0x28) = *(byte_value *)(register15 + 0x28) | 1;\n    ptr = *parameters;\n    result3 = result3 + _DAT_001279b0;\n    *(long_value *)(register15 + 0x30) = result3;\n    *(long_value *)(register15 + 0x38) = result3;\n    result3 = parameters[7];\n    result1 = FUN_00114190(ptr,0,0x60);\n    if (result1 == 0) goto LAB_00115695;\nLAB_00115860:\n    result2 = *(long_value *)(result1 + 0x20);\n    if ((*(byte_value *)(result1 + 0x14) & 0x40) != 0) {\n      result2 = result2 + result3;\n    }\n    *(long_value *)(register15 + 0x38) = result2;\n    result3 = FUN_00114190(*parameters,0,0x200);\n    if (result3 != 0) goto LAB_00115889;\nLAB_001156b8:\n    uint_var = *(uint_value *)((long_value)parameters + 0x7c);\n    if (uint_var < 0x3f) goto LAB_001156c4;\n    error_message = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(register15 + 0xb4) = *(undefined4 *)((long_value)parameters + 0xb4);\n    *(byte_value *)(register15 + 0x28) =\n         *(byte_value *)(register15 + 0x28) & 0xcf | *(byte_value *)(parameters + 5) & 0x30;\n    result11 = register15;\n    result12 = 0;\n    byte_var = *(byte_value *)((long_value)parameters + 0x27);\n  }\n  else {\n    result2 = *(long_value *)(result1 + 0x18);\n    if ((*(byte_value *)(result1 + 0x14) & 8) == 0) {\n      result2 = result2 + result3;\n    }\n    *(byte_value *)(register15 + 0x28) = *(byte_value *)(register15 + 0x28) | 1;\n    ptr = *parameters;\n    *(long_value *)(register15 + 0x30) = result2;\n    *(long_value *)(register15 + 0x38) = result2;\n    result3 = parameters[7];\n    result1 = FUN_00114190(ptr,0,0x60);\n    if (result1 != 0) goto LAB_00115860;\nLAB_00115695:\n    ptr = *parameters;\n    *(long_value *)(register15 + 0x38) = result3 + _DAT_001279b0;\n    result3 = FUN_00114190(ptr,0,0x200);\n    if (result3 == 0) goto LAB_001156b8;\nLAB_00115889:\n    uint_var = *(uint_value *)(result3 + 0x2c);\n    if (0x3e < uint_var) {\n      FUN_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint_value *)(register15 + 0x7c) = uint_var;\n    *(undefined4 *)(register15 + 0xb4) = *(undefined4 *)((long_value)parameters + 0xb4);\n    *(byte_value *)(register15 + 0x28) =\n         *(byte_value *)(register15 + 0x28) & 0xcf | *(byte_value *)(parameters + 5) & 0x30;\n    result11 = register15;\n    result12 = 0;\n    byte_var = *(byte_value *)((long_value)parameters + 0x27);\n  }\n  if ((byte_var & 2) != 0) {\n    result3 = parameters[0x1a];\n    result1 = FUN_00115d00(result3,parameters[0x1c]);\n    if ((result1 != 0) &&\n       (result2 = *(long_value *)(register12 + 8), *(uint_value *)(result1 + 0x18) = *(uint_value *)(result1 + 0x18) | 0x20,\n       *(int *)(result2 + 8) == 5)) {\n      *(long_value *)(result3 + 0xb0) = result1;\n      char_var = (**(code **)(*(long_value *)(base_pointer + 8) + 0x158))();\n      if (char_var == '\\0') {\n        FUN_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  char_var = (**(code **)(*(long_value *)(base_pointer + 8) + 0x158))();\n  if (char_var == '\\0') {\n    FUN_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long_value *)(register15 + 0xd0) + 4) = 8;\n  }\n  if (error_message != 0) {\n    DAT_00127a40 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "current_name": "set_sizes_and_alignment_00108072",
            "entrypoint": "0x00108072",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108072": "set_sizes_and_alignment_00108072",
                "bVar1": "byte_var",
                "byte": "byte_value",
                "cVar3": "char_var",
                "char": "character",
                "dcgettext": "translate_text",
                "lVar5": "error_message",
                "lVar6": "result1",
                "lVar7": "result2",
                "lVar8": "result3",
                "long": "long_value",
                "uVar2": "ptr",
                "uVar4": "uint_var",
                "uint": "uint_value",
                "unaff_R12": "register12",
                "unaff_R14B": "flag",
                "unaff_R15": "register15",
                "unaff_RBP": "base_pointer",
                "unaff_RBX": "parameters",
                "unaff_RBX[0xb]": "result12",
                "unaff_RBX[0xc]": "result11",
                "undefined8": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010808f": {
            "additional_data": {
                "DAT_00127a40": {
                    "1": "copy_successful",
                    "2": "is_error"
                },
                "FUN_0010808f": {
                    "1": "copy_data",
                    "29": "copy_private_data"
                },
                "FUN_001126c0": {
                    "3": "handle_error"
                },
                "dcgettext": {
                    "1": "get_translation",
                    "2": "get_localized_string",
                    "4": "get_error_message"
                },
                "lVar1": {
                    "1": "translation",
                    "2": "copy_error_message",
                    "3": "error_msg",
                    "7": "error_message"
                },
                "lvar1": {
                    "1": "error_message"
                },
                "unaff_R14B": {
                    "1": "has_failed",
                    "3": "copy_successful",
                    "8": "is_copy_successful"
                },
                "unaff_R15": {
                    "1": "data_offset",
                    "2": "data",
                    "3": "private_data",
                    "6": "data_ptr",
                    "7": "data_pointer",
                    "8": "data_address"
                }
            },
            "called": [
                "dcgettext",
                "FUN_001126c0"
            ],
            "calling": [
                "FUN_00108179"
            ],
            "code": "\nvoid copy_private_data_0010808f(void)\n\n{\n  long error_message;\n  char flag;\n  long data_address;\n  \n  error_message = dcgettext(0,\"failed to copy private data\",5);\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(data_address + 0xd0) + 4) = 8;\n  }\n  if (error_message != 0) {\n    DAT_00127a40 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "current_name": "copy_private_data_0010808f",
            "entrypoint": "0x0010808f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "dcgettext": "get_error_message",
                "lVar1": "error_message",
                "unaff_R14B": "flag",
                "unaff_R15": "data_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108179": {
            "additional_data": {
                "FUN_0010808f": {
                    "2": "handle_error"
                },
                "FUN_00108179": {
                    "1": "initialize_alignment",
                    "29": "set_alignment"
                },
                "FUN_00115d00": {
                    "2": "process_data"
                },
                "cVar3": {
                    "1": "success_flag",
                    "12": "result",
                    "2": "char_var",
                    "6": "status"
                },
                "dcgettext": {
                    "1": "translate"
                },
                "lVar1": {
                    "1": "alignment",
                    "2": "result1",
                    "3": "param1"
                },
                "lVar2": {
                    "1": "temp1",
                    "2": "ptr2",
                    "5": "param2",
                    "8": "value"
                },
                "lVar4": {
                    "1": "gettext_result",
                    "10": "error_message",
                    "2": "err_msg",
                    "5": "error_msg"
                },
                "lVar5": {
                    "1": "result_ptr",
                    "2": "result2",
                    "4": "return_value",
                    "6": "result"
                },
                "unaff_R12": {
                    "1": "extra_pointer",
                    "2": "param3",
                    "3": "r12_value",
                    "8": "r12"
                },
                "unaff_R14B": {
                    "1": "char1",
                    "12": "flag",
                    "2": "r14_b",
                    "6": "r14b"
                },
                "unaff_R15": {
                    "1": "output_pointer",
                    "2": "ptr4",
                    "3": "r15_value",
                    "8": "r15"
                },
                "unaff_RBP": {
                    "1": "input2",
                    "2": "ptr2",
                    "3": "rbp_value",
                    "7": "rbp"
                },
                "unaff_RBX": {
                    "1": "input1",
                    "2": "param1",
                    "3": "rbx_value",
                    "7": "rbx"
                }
            },
            "called": [
                "FUN_0010808f",
                "FUN_00115d00",
                "dcgettext"
            ],
            "calling": [
                "FUN_00108072"
            ],
            "code": "\nvoid set_alignment_00108179(void)\n\n{\n  long result;\n  long value;\n  char result;\n  long error_message;\n  long result;\n  long rbx;\n  long rbp;\n  long r12;\n  char flag;\n  long r15;\n  \n  error_message = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(r15 + 0xb4) = *(undefined4 *)(rbx + 0xb4);\n  *(byte *)(r15 + 0x28) =\n       *(byte *)(r15 + 0x28) & 0xcf | *(byte *)(rbx + 0x28) & 0x30;\n  *(long *)(rbx + 0x60) = r15;\n  *(undefined8 *)(rbx + 0x58) = 0;\n  if ((*(byte *)(rbx + 0x27) & 2) != 0) {\n    result = *(long *)(rbx + 0xd0);\n    result = FUN_00115d00(result,*(undefined8 *)(rbx + 0xe0));\n    if ((result != 0) &&\n       (value = *(long *)(r12 + 8), *(uint *)(result + 0x18) = *(uint *)(result + 0x18) | 0x20,\n       *(int *)(value + 8) == 5)) {\n      *(long *)(result + 0xb0) = result;\n      result = (**(code **)(*(long *)(rbp + 8) + 0x158))();\n      if (result == '\\0') {\n        FUN_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  result = (**(code **)(*(long *)(rbp + 8) + 0x158))();\n  if (result == '\\0') {\n    FUN_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(r15 + 0xd0) + 4) = 8;\n  }\n  if (error_message != 0) {\n    DAT_00127a40 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "current_name": "set_alignment_00108179",
            "entrypoint": "0x00108179",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108179": "set_alignment_00108179",
                "cVar3": "result",
                "dcgettext": "get_localized_error_message",
                "lVar1": "result",
                "lVar2": "value",
                "lVar4": "error_message",
                "lVar5": "result",
                "unaff_R12": "r12",
                "unaff_R14B": "flag",
                "unaff_R15": "r15",
                "unaff_RBP": "rbp",
                "unaff_RBX": "rbx"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001081e9": {
            "additional_data": {
                "FUN_001081e9": {
                    "1": "release_allocated_memory",
                    "10": "release_memory",
                    "2": "free_memory_and_return",
                    "5": "free_memory",
                    "6": "deallocate_memory",
                    "7": "free_and_return"
                },
                "in_RAX": {
                    "2": "result",
                    "5": "return_value"
                },
                "param_7": {
                    "1": "updated_return_value",
                    "13": "return_value",
                    "2": "result"
                },
                "unaff_RBX": {
                    "1": "memory_address",
                    "10": "memory_block",
                    "2": "memory_ptr",
                    "4": "memory_to_free",
                    "5": "ptr_to_free"
                }
            },
            "called": [
                "free"
            ],
            "calling": [
                "FUN_0011a0e0"
            ],
            "code": "\nundefined8 release_memory_001081e9(void)\n\n{\n  undefined8 return_value;\n  void *memory_block;\n  undefined8 return_value;\n  \n  return_value = return_value;\n  free(memory_block);\n  return return_value;\n}\n\n",
            "current_name": "release_memory_001081e9",
            "entrypoint": "0x001081e9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001081e9": "release_memory_001081e9",
                "in_RAX": "return_value",
                "param_7": "return_value",
                "unaff_RBX": "memory_block"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108200": {
            "additional_data": {
                "FUN_00108200": {
                    "1": "copy_file_and_handle_error",
                    "2": "copy_file_and_remove",
                    "4": "copy_file_with_reason",
                    "6": "copy_file_and_handle_errors",
                    "9": "copy_file"
                },
                "FUN_0011a350": {
                    "1": "do_something"
                },
                "__errno_location": {
                    "1": "get_error_number"
                },
                "auVar3": {
                    "1": "return_values",
                    "3": "return_value",
                    "7": "result"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "piVar1": {
                    "1": "error_location_ptr",
                    "2": "errno_ptr",
                    "3": "error_number",
                    "6": "errno_location"
                },
                "strerror": {
                    "1": "get_error_string"
                },
                "uVar2": {
                    "1": "error_msg",
                    "9": "error_message"
                },
                "unaff_R12B": {
                    "1": "is_copying",
                    "2": "should_delete_file",
                    "4": "should_reverse",
                    "7": "should_delete"
                },
                "unaff_R13": {
                    "1": "file_flags",
                    "11": "file_size",
                    "3": "file_permissions",
                    "5": "flags",
                    "6": "error_code"
                },
                "unaff_RBP": {
                    "1": "file_to_copy",
                    "15": "file_path",
                    "2": "source_file",
                    "4": "filename",
                    "6": "file_name"
                },
                "unaff_retaddr": {
                    "30": "return_address"
                },
                "unlink": {
                    "1": "remove_file"
                }
            },
            "called": [
                "FUN_00119ed0",
                "unlink",
                "dcgettext",
                "strerror",
                "__errno_location",
                "FUN_0011a350"
            ],
            "calling": [
                "FUN_00115970"
            ],
            "code": "\nundefined  [16] copy_file_00108200(void)\n\n{\n  int *errno_location;\n  undefined8 error_message;\n  char *file_path;\n  char should_copy;\n  ulong file_size;\n  undefined result [16];\n  undefined8 return_address;\n  \n  errno_location = __errno_location();\n  strerror(*errno_location);\n  error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  FUN_00119ed0(error_message);\n  unlink(file_path);\n  if (should_copy != '\\0') {\n    FUN_0011a350();\n  }\n  result._0_8_ = file_size & 0xffffffff;\n  result._8_8_ = return_address;\n  return result;\n}\n\n",
            "current_name": "copy_file_00108200",
            "entrypoint": "0x00108200",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108200": "copy_file_00108200",
                "__errno_location": "get_error_number",
                "auVar3": "result",
                "dcgettext": "get_error_message",
                "piVar1": "errno_location",
                "strerror": "get_error_string",
                "uVar2": "error_message",
                "unaff_R12B": "should_copy",
                "unaff_R13": "file_size",
                "unaff_RBP": "file_path",
                "unaff_retaddr": "return_address",
                "unlink": "remove_file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108237": {
            "additional_data": {
                "FUN_00108237": {
                    "1": "close_file_and_restore_error",
                    "2": "close_file_and_restore_errno",
                    "3": "close_file_and_return_error",
                    "4": "close_and_set_error_code"
                },
                "iVar1": {
                    "1": "saved_errno",
                    "3": "errno_value"
                },
                "piVar2": {
                    "1": "errno_location",
                    "2": "error_pointer",
                    "8": "errno_pointer"
                },
                "unaff_R12D": {
                    "1": "fd",
                    "30": "file_descriptor"
                }
            },
            "called": [
                "close",
                "__errno_location"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\nundefined8 close_file_00108237(void)\n\n{\n  int errno_value;\n  int *errno_pointer;\n  int file_descriptor;\n  \n  errno_pointer = __errno_location();\n  errno_value = *errno_pointer;\n  close(file_descriptor);\n  *errno_pointer = errno_value;\n  return 0xffffffff;\n}\n\n",
            "current_name": "close_file_00108237",
            "entrypoint": "0x00108237",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108237": "close_file_00108237",
                "iVar1": "errno_value",
                "piVar2": "errno_pointer",
                "unaff_R12D": "file_descriptor"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010827b": {
            "additional_data": {
                "FUN_0010827b": {
                    "1": "check_section_options",
                    "2": "section_error_check",
                    "3": "process_section",
                    "4": "print_error_message",
                    "6": "print_section_error"
                },
                "FUN_00119dd0": {
                    "1": "print_error_message",
                    "2": "handle_error"
                },
                "dcgettext": {
                    "1": "retrieve_error_message"
                },
                "uVar1": {
                    "1": "section_name",
                    "18": "section_value",
                    "2": "section_data",
                    "5": "section"
                },
                "uVar2": {
                    "1": "error_message_ptr",
                    "24": "error_message",
                    "5": "error_msg"
                },
                "unaff_RBX": {
                    "1": "section_data",
                    "11": "section_ptr",
                    "4": "section_name"
                }
            },
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "calling": [
                "FUN_00115b70"
            ],
            "code": "\nvoid print_section_error_0010827b(void)\n\n{\n  undefined8 section_value;\n  undefined8 error_message;\n  undefined8 *section_pointer;\n  \n  section_value = *section_pointer;\n  error_message = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  FUN_00119dd0(error_message,section_value);\n}\n\n",
            "current_name": "print_section_error_0010827b",
            "entrypoint": "0x0010827b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010827b": "print_section_error_0010827b",
                "dcgettext": "get_translated_message",
                "uVar1": "section_value",
                "uVar2": "error_message",
                "unaff_RBX": "section_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010829e": {
            "additional_data": {
                "FUN_0010829e": {
                    "1": "process_ebp",
                    "2": "check_condition_and_return",
                    "4": "process_input",
                    "6": "check_ebp_value"
                },
                "FUN_001082b3": {
                    "1": "process_error",
                    "2": "handle_error"
                },
                "FUN_00113ede": {
                    "1": "get_success_value",
                    "2": "get_data",
                    "7": "reverse_string"
                },
                "uVar1": {
                    "1": "result",
                    "2": "return_value"
                },
                "unaff_EBP": {
                    "1": "error_code",
                    "12": "ebp_value",
                    "2": "parameter",
                    "3": "condition_value",
                    "5": "condition"
                }
            },
            "called": [
                "FUN_001082b3",
                "FUN_00113ede"
            ],
            "calling": [
                "FUN_00115b70"
            ],
            "code": "\nundefined8 check_ebp_value_0010829e(void)\n\n{\n  undefined8 return_value;\n  int ebp_value;\n  \n  if (ebp_value == 5) {\n    return_value = FUN_00113ede();\n    return return_value;\n  }\n  if ((ebp_value != 4) && (ebp_value == 6)) {\n    return_value = FUN_001082b3();\n    return return_value;\n  }\n  return 0;\n}\n\n",
            "current_name": "check_ebp_value_0010829e",
            "entrypoint": "0x0010829e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010829e": "check_ebp_value_0010829e",
                "uVar1": "return_value",
                "unaff_EBP": "ebp_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001082b3": {
            "additional_data": {
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "FUN_001082b3": {
                    "1": "reverse_and_xor",
                    "2": "reverse_bit",
                    "3": "invert_and_return_one",
                    "4": "calculate_inverse",
                    "6": "invert_and_return"
                },
                "FUN_00113ede": {
                    "1": "get_data",
                    "2": "decompile_subfunction"
                },
                "uVar1": {
                    "1": "string_length",
                    "16": "result",
                    "2": "data"
                }
            },
            "called": [
                "FUN_00113ede"
            ],
            "calling": [
                "FUN_0010829e"
            ],
            "code": "\nuint invert_and_return_001082b3(void)\n\n{\n  uint result;\n  \n  result = FUN_00113ede();\n  return result ^ 1;\n}\n\n",
            "current_name": "invert_and_return_001082b3",
            "entrypoint": "0x001082b3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001082b3": "invert_and_return_001082b3",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001082c3": {
            "additional_data": {
                "FUN_001082c3": {
                    "1": "initialize_default_value",
                    "10": "get_default_value",
                    "2": "initialize_data",
                    "4": "initialize_program",
                    "7": "initialize"
                },
                "PTR_returnVal": {
                    "1": "return_value"
                },
                "original_parameter_name_1": {
                    "1": "parameter1"
                },
                "original_parameter_name_2": {
                    "1": "parameter2"
                },
                "original_variable_name_1": {
                    "1": "result"
                },
                "original_variable_name_2": {
                    "1": "variable2"
                },
                "return": {
                    "2": "result"
                },
                "undefined8": {
                    "1": "unsigned_long_long",
                    "7": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_00115d00"
            ],
            "code": "\nvoid get_default_value_001082c3(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "get_default_value_001082c3",
            "entrypoint": "0x001082c3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001082c3": "get_default_value_001082c3",
                "return": "result",
                "undefined8": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001082df": {
            "additional_data": {
                "DAT_00127a28": {
                    "1": "some_data"
                },
                "DAT_00127a48": {
                    "1": "constant_value"
                },
                "FUN_001082df": {
                    "1": "update_pointers",
                    "19": "process_data",
                    "2": "process_items",
                    "4": "extract_valid_pointers"
                },
                "FUN_00115d70": {
                    "1": "check_element",
                    "4": "check_validity"
                },
                "cVar3": {
                    "1": "result_char",
                    "2": "flag",
                    "22": "result",
                    "5": "is_valid"
                },
                "lVar2": {
                    "1": "array_element",
                    "11": "value",
                    "2": "temp_value",
                    "3": "record_value",
                    "4": "pointer_value",
                    "5": "element_value"
                },
                "puVar4": {
                    "1": "new_array_ptr",
                    "2": "result_array",
                    "3": "output_array",
                    "4": "output_pointer",
                    "8": "output_ptr"
                },
                "puVar5": {
                    "1": "current_dest_ptr",
                    "2": "updated_output_pointer",
                    "4": "current_output_ptr"
                },
                "uVar1": {
                    "1": "length",
                    "2": "record_count",
                    "3": "array_length",
                    "4": "num_pointers",
                    "7": "count",
                    "8": "num_elements"
                },
                "uVar6": {
                    "1": "loop_index",
                    "15": "index",
                    "2": "i",
                    "4": "counter",
                    "8": "current_index"
                },
                "unaff_R13": {
                    "1": "output_array",
                    "2": "pointer_array",
                    "3": "source_array",
                    "4": "data_array"
                },
                "unaff_RBP": {
                    "1": "previous_base_address",
                    "2": "stack_base",
                    "6": "frame_pointer",
                    "8": "base_pointer"
                },
                "unaff_RBX": {
                    "1": "input_array",
                    "10": "base_address",
                    "2": "rbx_value"
                }
            },
            "called": [
                "FUN_00115d70"
            ],
            "calling": [
                "FUN_00115dc0"
            ],
            "code": "\nvoid process_data_001082df(void)\n\n{\n  uint num_elements;\n  long value;\n  char result;\n  long base_address;\n  undefined8 *output_ptr;\n  undefined8 *current_output_ptr;\n  long base_pointer;\n  ulong index;\n  undefined8 *data_array;\n  \n  num_elements = *(uint *)(base_address + 0x78);\n  if (DAT_00127a48 == 7) {\n    output_ptr = data_array;\n    for (index = 0; index != num_elements; index = index + 1) {\n      current_output_ptr = output_ptr;\n      if (((*(long **)data_array[index] != (long *)0x0) &&\n          (value = **(long **)data_array[index], value != 0)) &&\n         (result = FUN_00115d70(*(undefined8 *)(value + 8),DAT_00127a28), result != '\\0')) {\n        current_output_ptr = output_ptr + 1;\n        *output_ptr = data_array[index];\n      }\n      output_ptr = current_output_ptr;\n    }\n    *output_ptr = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(base_pointer + 8) + 0x288))();\n  return;\n}\n\n",
            "current_name": "process_data_001082df",
            "entrypoint": "0x001082df",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001082df": "process_data_001082df",
                "cVar3": "result",
                "lVar2": "value",
                "puVar4": "output_ptr",
                "puVar5": "current_output_ptr",
                "uVar1": "num_elements",
                "uVar6": "index",
                "unaff_R13": "data_array",
                "unaff_RBP": "base_pointer",
                "unaff_RBX": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108375": {
            "additional_data": {
                "(int *)(param_2[1] + 8)": {
                    "1": "format_check"
                },
                "FUN_00108375": {
                    "1": "validate_output_format",
                    "2": "check_output_format_and_drop_flag",
                    "4": "check_output_format",
                    "6": "check_and_drop_share_flag",
                    "9": "drop_share_flag_if_not_coff"
                },
                "FUN_00119ed0": {
                    "1": "print_translation_msg"
                },
                "dcgettext": {
                    "1": "get_localized_text"
                },
                "param_1": {
                    "1": "unused_param",
                    "17": "param1",
                    "8": "param_1"
                },
                "param_2": {
                    "1": "param2_array",
                    "10": "param2",
                    "3": "parameters",
                    "8": "param_array"
                },
                "param_3": {
                    "1": "flag_value",
                    "17": "param3",
                    "8": "param_3"
                },
                "uVar1": {
                    "1": "flags",
                    "2": "first_param",
                    "3": "value",
                    "5": "value1",
                    "7": "var1"
                },
                "uVar2": {
                    "1": "warning_msg",
                    "11": "message",
                    "2": "localized_message",
                    "4": "error_message",
                    "7": "var2"
                },
                "unaff_EBX": {
                    "1": "unaff_ebx",
                    "10": "ebx",
                    "11": "ebx_value",
                    "2": "flags",
                    "3": "modified_ebx"
                }
            },
            "called": [
                "FUN_00119ed0",
                "dcgettext"
            ],
            "calling": [
                "FUN_00115f30"
            ],
            "code": "\nuint drop_share_flag_if_not_coff_00108375(undefined8 param1,undefined8 *param2,undefined8 param3)\n\n{\n  undefined8 var1;\n  undefined8 message;\n  uint ebx_value;\n  \n  if (*(int *)(param2[1] + 8) != 2) {\n    var1 = *param2;\n    ebx_value = ebx_value & 0xf7ffffff;\n    message = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    FUN_00119ed0(message,var1,param3);\n  }\n  return ebx_value;\n}\n\n",
            "current_name": "drop_share_flag_if_not_coff_00108375",
            "entrypoint": "0x00108375",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108375": "drop_share_flag_if_not_coff_00108375",
                "dcgettext": "get_translation",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "var1",
                "uVar2": "message",
                "unaff_EBX": "ebx_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001083b7": {
            "additional_data": {
                "FUN_001083b7": {
                    "1": "verify_bfd_error",
                    "2": "check_bfd_error",
                    "3": "handle_param",
                    "4": "check_and_exit",
                    "5": "check_error_and_exit",
                    "6": "handle_error"
                },
                "FUN_0011a110": {
                    "1": "process_bfd",
                    "2": "process_error"
                },
                "bfd_get_error": {
                    "1": "get_error",
                    "5": "get_bfd_error"
                },
                "iVar1": {
                    "1": "error",
                    "3": "bfd_error_code",
                    "6": "error_code",
                    "7": "bfd_error"
                },
                "param_1": {
                    "17": "error_code",
                    "2": "param",
                    "3": "input_param",
                    "4": "input",
                    "5": "input_value"
                },
                "unaff_RBP": {
                    "1": "buffer",
                    "2": "func_ptr",
                    "3": "pointer",
                    "5": "function_pointer"
                },
                "unaff_retaddr": {
                    "1": "unaffected_return_address",
                    "29": "return_address"
                },
                "xexit": {
                    "6": "exit_program"
                }
            },
            "called": [
                "FUN_0011a110",
                "xexit",
                "bfd_get_error"
            ],
            "calling": [
                "FUN_00116030"
            ],
            "code": "\nundefined8 handle_error_001083b7(long error_code)\n\n{\n  int bfd_error;\n  undefined8 *function_pointer;\n  undefined8 return_address;\n  \n  if (error_code == -1) {\n    bfd_error = bfd_get_error();\n    if (bfd_error == 5) {\n      return return_address;\n    }\n  }\n  FUN_0011a110(*function_pointer);\n                    \n  xexit(1);\n}\n\n",
            "current_name": "handle_error_001083b7",
            "entrypoint": "0x001083b7",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001083b7": "handle_error_001083b7",
                "bfd_get_error": "get_bfd_error",
                "iVar1": "bfd_error",
                "param_1": "error_code",
                "unaff_RBP": "function_pointer",
                "unaff_retaddr": "return_address",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001083de": {
            "additional_data": {
                "FUN_001083de": {
                    "1": "reverse_byte_section",
                    "15": "reverse_bytes_in_section",
                    "2": "reverse_section_bytes",
                    "4": "reverse_bytes_section",
                    "6": "reverse_bytes"
                },
                "FUN_00119dd0": {
                    "1": "print_error_message"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "uVar1": {
                    "1": "section_start",
                    "14": "section_value",
                    "2": "first_element",
                    "4": "section_address"
                },
                "uVar2": {
                    "18": "error_message",
                    "3": "error_string",
                    "5": "error_msg"
                },
                "unaff_EBP": {
                    "2": "section_size",
                    "29": "section_length"
                },
                "unaff_RBX": {
                    "1": "section_start",
                    "18": "section_pointer",
                    "2": "section_ptr",
                    "4": "section_data"
                }
            },
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "calling": [
                "FUN_00116110"
            ],
            "code": "\nvoid reverse_bytes_in_section_001083de(void)\n\n{\n  undefined8 section_value;\n  undefined8 error_message;\n  undefined8 *section_pointer;\n  undefined4 section_length;\n  \n  section_value = *section_pointer;\n  error_message = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  FUN_00119dd0(error_message,section_value,section_length);\n}\n\n",
            "current_name": "reverse_bytes_in_section_001083de",
            "entrypoint": "0x001083de",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001083de": "reverse_bytes_in_section_001083de",
                "dcgettext": "get_error_message",
                "uVar1": "section_value",
                "uVar2": "error_message",
                "unaff_EBP": "section_length",
                "unaff_RBX": "section_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108466": {
            "additional_data": {
                "FUN_00108466": {
                    "1": "initialize_program",
                    "19": "initialize_and_free_memory",
                    "2": "initialize_data"
                },
                "FUN_001126c0": {
                    "1": "reset_params",
                    "2": "initialize_sub_function",
                    "4": "perform_cleanup"
                },
                "param_7": {
                    "1": "resource_pointer",
                    "2": "pointer_to_free",
                    "5": "memory_pointer",
                    "7": "memory_to_free",
                    "8": "memory_block"
                }
            },
            "called": [
                "free",
                "FUN_001126c0"
            ],
            "calling": [
                "FUN_00116110"
            ],
            "code": "\nvoid initialize_and_free_memory_00108466(void)\n\n{\n  void *memory_block;\n  \n  DAT_00127a40 = 1;\n  FUN_001126c0(0);\n  free(memory_block);\n  return;\n}\n\n",
            "current_name": "initialize_and_free_memory_00108466",
            "entrypoint": "0x00108466",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108466": "initialize_and_free_memory_00108466",
                "param_7": "memory_block"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010847a": {
            "additional_data": {
                "FUN_0010847a": {
                    "1": "execute_function",
                    "2": "initialize_program",
                    "4": "initialize_application",
                    "5": "execute_initialization",
                    "9": "initialize_system"
                },
                "FUN_00116490": {
                    "1": "process_sub_function",
                    "2": "perform_task",
                    "3": "process_data",
                    "4": "execute_initialization",
                    "5": "perform_operation"
                },
                "param_1": {
                    "1": "command_address",
                    "2": "argument1",
                    "3": "param1",
                    "9": "arg1"
                },
                "param_2": {
                    "1": "counter",
                    "2": "argument2",
                    "4": "param2",
                    "9": "arg2"
                },
                "param_3": {
                    "1": "input_3",
                    "2": "argument3",
                    "4": "param3",
                    "9": "arg3"
                },
                "param_4": {
                    "1": "counter",
                    "2": "argument4",
                    "4": "param4",
                    "9": "arg4"
                }
            },
            "called": [
                "FUN_00116490"
            ],
            "calling": [
                "FUN_001086af"
            ],
            "code": "\nvoid initialize_system_0010847a(void)\n\n{\n  FUN_00116490();\n  return;\n}\n\n",
            "current_name": "initialize_system_0010847a",
            "entrypoint": "0x0010847a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010847a": "initialize_system_0010847a"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001086af": {
            "additional_data": {
                "*unaff_R12": {
                    "1": "curr_note"
                },
                "FUN_0010847a": {
                    "1": "another_function"
                },
                "FUN_001086af": {
                    "1": "extract_gnu_build_attribute_notes"
                },
                "FUN_001126c0": {
                    "1": "handle_error"
                },
                "FUN_00116490": {
                    "1": "calculate_result"
                },
                "FUN_00119ed0": {
                    "1": "display_warning"
                },
                "FUN_0011a1b0": {
                    "1": "compare_attributes"
                },
                "__base": {
                    "1": "base_pointer"
                },
                "__compar": {
                    "1": "compare_function"
                },
                "__compar_fn_t": {
                    "1": "comparison_function"
                },
                "__nmemb": {
                    "1": "attribute_count",
                    "2": "size_var",
                    "3": "array_length",
                    "8": "size"
                },
                "__ptr": {
                    "1": "var26",
                    "2": "pointer_var2",
                    "4": "pointer"
                },
                "__size": {
                    "1": "size"
                },
                "bVar22": {
                    "1": "temp_byte",
                    "2": "flag",
                    "4": "byte_value",
                    "7": "byte_var"
                },
                "bVar4": {
                    "1": "temp_bool",
                    "2": "condition",
                    "3": "is_true",
                    "6": "flag"
                },
                "bfd_set_error": {
                    "1": "set_error"
                },
                "cVar17": {
                    "1": "character_variable",
                    "2": "character",
                    "3": "temp_char",
                    "4": "char_value",
                    "7": "char_var"
                },
                "dcgettext": {
                    "1": "get_text"
                },
                "iVar23": {
                    "1": "counter_2",
                    "2": "int_var2",
                    "4": "counter"
                },
                "iVar6": {
                    "1": "loop_index",
                    "2": "counter",
                    "4": "int_var",
                    "5": "index"
                },
                "in_RCX": {
                    "1": "param7",
                    "2": "in_rcx"
                },
                "in_stack_00000030": {
                    "1": "temp_buffer",
                    "2": "output_buffer",
                    "4": "stack_var1"
                },
                "in_stack_00000038": {
                    "1": "stack_var",
                    "2": "stack_value2",
                    "3": "flags",
                    "4": "stack_var2"
                },
                "lVar7": {
                    "1": "var4",
                    "2": "error_message",
                    "3": "long_var",
                    "7": "length"
                },
                "param_1": {
                    "1": "attribute_name"
                },
                "param_10": {
                    "1": "parameter_variable9",
                    "2": "input_value4",
                    "3": "output_size"
                },
                "param_11": {
                    "1": "input_data",
                    "2": "note_array",
                    "3": "input_array"
                },
                "param_13": {
                    "1": "input_param_13",
                    "2": "param6"
                },
                "param_14": {
                    "1": "parameter_variable11",
                    "2": "param7"
                },
                "param_2": {
                    "1": "note_type"
                },
                "param_3": {
                    "1": "attribute_decription_size"
                },
                "param_4": {
                    "1": "temp_param"
                },
                "param_7": {
                    "1": "input_value1",
                    "2": "param1",
                    "6": "input_value"
                },
                "param_8": {
                    "1": "input_param_8",
                    "2": "param2"
                },
                "param_9": {
                    "1": "input_param_9",
                    "2": "param3"
                },
                "puVar15": {
                    "1": "notes_array",
                    "2": "pointer_var2"
                },
                "puVar16": {
                    "1": "pointer_var2",
                    "2": "pointer_var3",
                    "3": "ptr3"
                },
                "puVar18": {
                    "1": "ptr2",
                    "2": "pointer_var5",
                    "3": "ptr4"
                },
                "puVar19": {
                    "1": "var29",
                    "2": "pointer_var6",
                    "3": "ptr5"
                },
                "puVar21": {
                    "1": "param21",
                    "2": "pointer_var7",
                    "3": "ptr6"
                },
                "puVar5": {
                    "1": "pointer_variable1",
                    "2": "pointer_var",
                    "3": "pointer_var1"
                },
                "qsort": {
                    "1": "sort_attributes"
                },
                "stack0xfffffffffffffff0": {
                    "1": "alignment"
                },
                "uDVar23": {
                    "1": "iteration_counter"
                },
                "uVar1": {
                    "1": "temp_var_1",
                    "14": "result",
                    "4": "return_value"
                },
                "uVar10": {
                    "1": "note_end",
                    "2": "description_size",
                    "3": "temp_var10",
                    "6": "max_value"
                },
                "uVar11": {
                    "1": "total_size",
                    "2": "value3",
                    "3": "temp_var6"
                },
                "uVar12": {
                    "1": "var2",
                    "2": "temp_var12",
                    "3": "temp_var7"
                },
                "uVar13": {
                    "1": "var13",
                    "2": "temp_var13",
                    "3": "temp_var8"
                },
                "uVar14": {
                    "1": "array_value",
                    "2": "temp_var14",
                    "3": "temp_var9"
                },
                "uVar15": {
                    "1": "var19"
                },
                "uVar16": {
                    "1": "var20"
                },
                "uVar17": {
                    "1": "var21"
                },
                "uVar18": {
                    "1": "var22"
                },
                "uVar19": {
                    "1": "var23"
                },
                "uVar2": {
                    "1": "version_pointer_1",
                    "3": "temp_var2",
                    "4": "temp_var1",
                    "5": "temp1"
                },
                "uVar20": {
                    "1": "count6",
                    "2": "temp_var10"
                },
                "uVar21": {
                    "1": "var25"
                },
                "uVar22": {
                    "1": "padding_value"
                },
                "uVar3": {
                    "1": "temporary_variable2",
                    "3": "temp_var3",
                    "4": "temp_var2",
                    "5": "temp2"
                },
                "uVar7": {
                    "1": "var11"
                },
                "uVar8": {
                    "1": "var8",
                    "3": "temp_var8",
                    "4": "temp3"
                },
                "uVar9": {
                    "1": "result1",
                    "2": "value1",
                    "3": "temp_var9",
                    "7": "min_value"
                },
                "unaff_R12": {
                    "1": "temp_array_ptr",
                    "2": "data_pointer",
                    "3": "unaffected_r12"
                },
                "unaff_R13": {
                    "1": "param16_copy",
                    "2": "temp_value5",
                    "4": "unaffected_r13"
                },
                "unaff_R14": {
                    "1": "var_5",
                    "4": "unaffected_r14",
                    "5": "function_pointers"
                },
                "unaff_R15": {
                    "1": "num_versions"
                },
                "unaff_R48": {
                    "1": "idx"
                },
                "unaff_RBP": {
                    "1": "temp_var11",
                    "2": "u_var13",
                    "4": "unaffected_rbp"
                },
                "unaff_RBX": {
                    "1": "data_length",
                    "4": "unaffected_rbx"
                },
                "unaff_RCX": {
                    "1": "attributes"
                },
                "unaff_retaddr": {
                    "1": "unaffected_return_address",
                    "2": "unaffected_retaddr",
                    "6": "return_address"
                }
            },
            "called": [
                "FUN_00119ed0",
                "FUN_00116490",
                "dcgettext",
                "FUN_0011a1b0",
                "bfd_set_error",
                "FUN_001126c0",
                "qsort",
                "FUN_0010847a"
            ],
            "calling": [
                "FUN_00116490"
            ],
            "code": "\nulong extract_gnu_build_attribute_notes_001086af(void)\n\n{\n  ulong result;\n  undefined8 temp1;\n  undefined8 temp2;\n  bool flag;\n  ulong *ptr1;\n  int index;\n  long length;\n  undefined8 temp3;\n  ulong min_value;\n  ulong max_value;\n  ulong temp_var6;\n  undefined *pointer;\n  ulong input_rcx;\n  ulong temp_var7;\n  ulong temp_var8;\n  ulong temp_var9;\n  ulong unaffected_rbx;\n  ulong unaffected_rbp;\n  ulong *ptr2;\n  undefined *ptr3;\n  char char_var;\n  undefined *ptr4;\n  undefined *ptr5;\n  ulong *unaffected_r12;\n  ulong unaffected_r13;\n  ulong temp_var10;\n  size_t size;\n  undefined8 *function_pointers;\n  ulong *ptr6;\n  byte byte_var;\n  int counter;\n  ulong return_address;\n  ulong input_value;\n  uint param2;\n  ulong input_value3;\n  ulong output_size;\n  ulong *input_array;\n  undefined *stack_var1;\n  uint stack_var2;\n  uint param6;\n  undefined8 *input_array2;\n  \n  byte_var = 0;\n  input_value = input_rcx;\n  min_value = (**(code **)(function_pointers[1] + 0x40))();\n  max_value = (**(code **)(function_pointers[1] + 0x40))(unaffected_r12[4] + 4);\nLAB_0011662a:\n  temp_var8 = unaffected_rbp;\n  temp_var10 = unaffected_r13;\n  if (max_value < min_value) {\n    min_value = max_value;\n  }\n  do {\n    temp_var6 = input_value;\n    temp_var7 = input_value;\n    ptr2 = unaffected_r12;\n    if (unaffected_r12[2] == 0x100) {\n      if (min_value == 0) {\n        min_value = return_address;\n      }\n      temp_var9 = *unaffected_r12;\n      unaffected_r12[7] = min_value;\n      unaffected_rbp = temp_var8;\n      unaffected_r13 = max_value;\n      return_address = min_value;\n      if (max_value == 0) goto LAB_001164af;\n    }\n    else {\n      if (min_value == 0) {\n        min_value = input_value3;\n      }\n      temp_var9 = *unaffected_r12;\n      unaffected_r12[7] = min_value;\n      unaffected_rbp = max_value;\n      unaffected_r13 = temp_var10;\n      input_value3 = min_value;\n      if (max_value == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    ptr2[8] = max_value;\n    if (*(char *)((ptr2[3] - 1) + temp_var9) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    unaffected_r12 = ptr2 + 9;\n    if (unaffected_rbx < 0xc) {\n      if (unaffected_rbx != 0) {\n        length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((stack_var2 | param6 | param2) != 0) {\n        if (((param6 | param2) == 0) || (stack_var2 == 0)) {\n          if (param6 == 0) {\n            if (param2 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param2 == 0) goto LAB_001166f8;\n        }\n        length = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      temp1 = *function_pointers;\n      temp2 = *input_array2;\n      temp3 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      FUN_00119ed0(temp3,temp1,temp2);\nLAB_0011671b:\n      size = ((long)unaffected_r12 - (long)input_array >> 3) * -0x71c71c71c71c71c7;\n      qsort(input_array,size,0x48,FUN_0011a1b0);\n      ptr2 = input_array;\n      goto LAB_001167f9;\n    }\n    max_value = (**(code **)(function_pointers[1] + 0x40))(temp_var7);\n    *unaffected_r12 = max_value;\n    max_value = (**(code **)(function_pointers[1] + 0x40))(temp_var7 + 4);\n    ptr2[10] = max_value;\n    min_value = (**(code **)(function_pointers[1] + 0x40))(temp_var7 + 8);\n    temp_var9 = *unaffected_r12;\n    ptr2[0xb] = min_value;\n    max_value = ptr2[10];\n    temp_var8 = temp_var9 + 3 & 0xfffffffffffffffc;\n    ptr2[0xf] = temp_var8;\n    if (max_value != (max_value + 3 & 0xfffffffffffffffc)) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < min_value - 0x100) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    temp_var6 = temp_var8 + max_value + 0xc;\n    if (unaffected_rbx < temp_var6) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (temp_var9 < 2) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    ptr2[0xc] = temp_var7 + 0xc;\n    result = temp_var7 + 0xc + temp_var8;\n    ptr2[0xd] = result;\n    unaffected_rbx = unaffected_rbx + (-0xc - (temp_var8 + max_value));\n    temp_var6 = temp_var7 + temp_var6;\n    if (temp_var9 != 2) {\n      if (*(char *)(temp_var7 + 0xc) == '$') {\n        if ((*(char *)(temp_var7 + 0xd) == '\\x01') && (*(char *)(temp_var7 + 0xe) == '1')) {\n          max_value = FUN_00116490();\n          return max_value;\n        }\n      }\n      else if ((((4 < temp_var9) && (*(char *)(temp_var7 + 0xc) == 'G')) &&\n               (*(char *)(temp_var7 + 0xd) == 'A')) &&\n              ((*(char *)(temp_var7 + 0xe) == '$' && (*(char *)(temp_var7 + 0xf) == '\\x01')))) {\n        if (*(char *)(temp_var7 + 0x10) == '2') {\n          max_value = FUN_00116490();\n          return max_value;\n        }\n        if (*(char *)(temp_var7 + 0x10) == '3') {\n          max_value = FUN_00116490();\n          return max_value;\n        }\n        length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    temp_var8 = unaffected_rbp;\n    temp_var10 = unaffected_r13;\n    if (max_value == 0) {\n      if (min_value == 0x100) {\n        ptr2[0x10] = return_address;\nLAB_001164af:\n        temp_var7 = temp_var6;\n        max_value = temp_var10;\n        ptr2 = unaffected_r12;\n        unaffected_r13 = temp_var10;\n      }\n      else {\n        ptr2[0x10] = input_value3;\nLAB_0011669e:\n        unaffected_rbp = temp_var8;\n        temp_var7 = temp_var6;\n        max_value = temp_var8;\n        ptr2 = unaffected_r12;\n        unaffected_r13 = temp_var10;\n      }\n      goto LAB_001164bb;\n    }\n    if (max_value == 0x10) break;\n    if (0x10 < max_value) {\nLAB_00116679:\n      length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (length != 0) {\n        bfd_set_error(0x11);\n        FUN_001126c0(0,function_pointers,input_array2,length);\n        DAT_00127a40 = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (max_value != 4) {\n      if (max_value == 8) {\n        max_value = extract_gnu_build_attribute_notes_001086af();\n        return max_value;\n      }\n      goto LAB_00116679;\n    }\n    input_value = temp_var6;\n    min_value = (**(code **)(function_pointers[1] + 0x40))();\n    max_value = 0xffffffffffffffff;\n  } while( true );\n  input_value = temp_var6;\n  min_value = (**(code **)(function_pointers[1] + 0x28))(result);\n  max_value = (**(code **)(function_pointers[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (unaffected_r12 <= ptr2) {\n    qsort(input_array,size,0x48,FUN_0011a250);\n    pointer = (undefined *)xmalloc(output_size * 2);\n    input_value = 0;\n    input_value3 = 0;\n    ptr5 = pointer;\n    for (ptr2 = input_array; ptr2 < unaffected_r12; ptr2 = ptr2 + 9) {\n      if (ptr2[2] != 0) {\n        ptr4 = ptr5 + 4;\n        ptr3 = ptr5 + 0xc;\n        if ((ptr2[7] == input_value3) && (ptr2[8] == input_value)) {\n          (**(code **)(function_pointers[1] + 0x50))(*ptr2,ptr5);\n          (**(code **)(function_pointers[1] + 0x50))(0,ptr4);\n          (**(code **)(function_pointers[1] + 0x50))(ptr2[2],ptr5 + 8);\n          min_value = ptr2[6];\n          max_value = *ptr2;\n          ptr5 = (undefined *)ptr2[3];\n          ptr4 = ptr3;\n          for (temp_var8 = max_value; temp_var8 != 0; temp_var8 = temp_var8 - 1) {\n            *ptr4 = *ptr5;\n            ptr5 = ptr5 + (ulong)byte_var * -2 + 1;\n            ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n          }\n          if (max_value < min_value) {\n            for (length = min_value - max_value; length != 0; length = length + -1) {\n              *ptr4 = 0;\n              ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n            }\n          }\n          ptr5 = ptr3 + min_value;\n        }\n        else {\n          (**(code **)(function_pointers[1] + 0x50))();\n          if (*(int *)(function_pointers[1] + 8) == 5) {\n            char_var = (*(char *)(function_pointers[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            char_var = '\\b';\n          }\n          (**(code **)(function_pointers[1] + 0x50))(char_var,ptr4);\n          (**(code **)(function_pointers[1] + 0x50))(ptr2[2],ptr5 + 8);\n          max_value = *ptr2;\n          ptr5 = (undefined *)ptr2[3];\n          ptr4 = ptr3;\n          for (min_value = max_value; min_value != 0; min_value = min_value - 1) {\n            *ptr4 = *ptr5;\n            ptr5 = ptr5 + (ulong)byte_var * -2 + 1;\n            ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n          }\n          min_value = ptr2[6];\n          if (max_value < min_value) {\n            for (length = min_value - max_value; length != 0; length = length + -1) {\n              *ptr4 = 0;\n              ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n            }\n          }\n          length = function_pointers[1];\n          ptr3 = ptr3 + min_value;\n          ptr5 = ptr3 + 8;\n          if ((*(int *)(length + 8) == 5) && (*(char *)(function_pointers[0x22] + 4) == '\\x02')) {\n            (**(code **)(length + 0x38))(ptr2[7],ptr3);\n            (**(code **)(function_pointers[1] + 0x38))(ptr2[8],ptr5);\n            ptr5 = ptr3 + 0x10;\n          }\n          else {\n            (**(code **)(length + 0x50))(ptr2[7],ptr3);\n            (**(code **)(function_pointers[1] + 0x50))(ptr2[8],ptr3 + 4);\n          }\n          input_value3 = ptr2[7];\n          input_value = ptr2[8];\n        }\n      }\n    }\n    min_value = (long)ptr5 - (long)pointer;\n    max_value = min_value;\n    ptr5 = pointer;\n    if (min_value < output_size) {\n      for (; output_size = min_value, max_value != 0; max_value = max_value - 1) {\n        *stack_var1 = *ptr5;\n        ptr5 = ptr5 + (ulong)byte_var * -2 + 1;\n        stack_var1 = stack_var1 + (ulong)byte_var * -2 + 1;\n      }\n    }\n    free(pointer);\nLAB_001166f8:\n    free(input_array);\n    return output_size;\n  }\n  if (ptr2[2] != 0) {\n    max_value = ptr2[7];\n    min_value = ptr2[8];\n    temp_var8 = ptr2[2];\n    ptr6 = ptr2;\n    counter = 0;\n    if (max_value == min_value) {\n      ptr2[2] = 0;\n    }\n    else {\n      do {\n        do {\n          ptr1 = ptr6;\n          ptr6 = ptr1 + -9;\n          if (ptr6 < input_array) goto LAB_001167f5;\n          temp_var10 = ptr1[-7];\n        } while (temp_var10 == 0);\n        input_value = temp_var8;\n        if ((*ptr6 != *ptr2) ||\n           (index = memcmp((void *)ptr1[-6],(void *)ptr2[3],*ptr2), index != 0)) break;\n        temp_var8 = ptr1[-2];\n        temp_var6 = ptr1[-1];\n        if (max_value == temp_var8) {\n          if (min_value == temp_var6) {\n            ptr2[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (min_value <= temp_var6) {\n            ptr2[2] = 0;\n            break;\n          }\n          if (temp_var6 < max_value) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < temp_var6) || (max_value <= (temp_var6 + 0xf & 0xfffffffffffffff0)))\n            goto FUN_00116852;\n          }\nLAB_001167b8:\n          if ((input_value == 0x101) == (temp_var10 == 0x101)) {\n            if (temp_var6 <= min_value) {\n              temp_var6 = min_value;\n            }\n            if (temp_var8 < max_value) {\n              max_value = temp_var8;\n            }\n            ptr1[-1] = temp_var6;\n            ptr1[-2] = max_value;\n            ptr2[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (temp_var8 <= max_value) goto LAB_001167a6;\n          if (temp_var6 < max_value) goto LAB_0010852c;\n          if (min_value < max_value) {\n            if ((0xfffffffffffffff0 < min_value) || (temp_var8 <= (min_value + 0xf & 0xfffffffffffffff0)))\n            goto FUN_00116852;\n            goto LAB_001167b8;\n          }\n          if (min_value != temp_var6) goto LAB_001167b8;\n        }\nFUN_00116852:\n        flag = counter < 0x11;\n        temp_var8 = input_value;\n        counter = counter + 1;\n      } while (flag);\n    }\n  }\nLAB_001167f5:\n  ptr2 = ptr2 + 9;\n  goto LAB_001167f9;\n}\n\n",
            "current_name": "extract_gnu_build_attribute_notes_001086af",
            "entrypoint": "0x001086af",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001086af": "extract_gnu_build_attribute_notes_001086af",
                "__nmemb": "size",
                "__ptr": "pointer",
                "bVar22": "byte_var",
                "bVar4": "flag",
                "bfd_set_error": "set_error",
                "cVar17": "char_var",
                "dcgettext": "get_text",
                "iVar23": "counter",
                "iVar6": "index",
                "in_RCX": "input_rcx",
                "in_stack_00000030": "stack_var1",
                "in_stack_00000038": "stack_var2",
                "lVar7": "length",
                "param_1": "in_rcx",
                "param_10": "output_size",
                "param_11": "input_array",
                "param_13": "param6",
                "param_14": "input_array2",
                "param_7": "input_value",
                "param_8": "param2",
                "param_9": "input_value3",
                "puVar15": "ptr2",
                "puVar16": "ptr3",
                "puVar18": "ptr4",
                "puVar19": "ptr5",
                "puVar21": "ptr6",
                "puVar5": "ptr1",
                "qsort": "sort_attributes",
                "uVar1": "result",
                "uVar10": "max_value",
                "uVar11": "temp_var6",
                "uVar12": "temp_var7",
                "uVar13": "temp_var8",
                "uVar14": "temp_var9",
                "uVar15": "var19",
                "uVar16": "var20",
                "uVar18": "var22",
                "uVar19": "var23",
                "uVar2": "temp1",
                "uVar20": "temp_var10",
                "uVar21": "var25",
                "uVar3": "temp2",
                "uVar8": "temp3",
                "uVar9": "min_value",
                "unaff_R12": "unaffected_r12",
                "unaff_R13": "unaffected_r13",
                "unaff_R14": "function_pointers",
                "unaff_RBP": "unaffected_rbp",
                "unaff_RBX": "unaffected_rbx",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010870e": {
            "additional_data": {
                "(long)(puVar1 + 1)": {
                    "1": "incremented_pointer"
                },
                "*param_3": {
                    "1": "pointer_to_long_value"
                },
                "*param_3 = (long)(puVar1 + 1);": {
                    "1": "update_pointer_to_next_location"
                },
                "*puVar1": {
                    "1": "ptr_value",
                    "2": "dereferenced_pointer"
                },
                "*puVar1 = param_2;": {
                    "1": "store_input_value_in_dereferenced_pointer"
                },
                "FUN_0010870e": {
                    "1": "assign_parameter_and_increment_pointer",
                    "2": "update_parameter_and_increment",
                    "4": "store_parameter_value",
                    "6": "store_value_and_update_pointer"
                },
                "param_1": {
                    "1": "data",
                    "2": "new_value",
                    "3": "value",
                    "4": "destination",
                    "7": "value_to_store"
                },
                "param_2": {
                    "1": "data",
                    "16": "new_value",
                    "7": "value"
                },
                "param_3": {
                    "1": "count_ptr",
                    "10": "pointer",
                    "2": "pointer_to_update",
                    "3": "pointer_to_long"
                },
                "puVar1": {
                    "1": "array_element_pointer",
                    "2": "ptr_to_value",
                    "3": "pointer_to_value",
                    "8": "current_pointer"
                },
                "puVar1 + 1": {
                    "1": "next_pointer"
                }
            },
            "called": [],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid store_value_and_update_pointer_0010870e(undefined8 value_to_store,undefined8 new_value,long *pointer)\n\n{\n  undefined8 *current_pointer;\n  \n  current_pointer = (undefined8 *)*pointer;\n  *current_pointer = new_value;\n  *pointer = (long)(current_pointer + 1);\n  return;\n}\n\n",
            "current_name": "store_value_and_update_pointer_0010870e",
            "entrypoint": "0x0010870e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010870e": "store_value_and_update_pointer_0010870e",
                "param_1": "value_to_store",
                "param_2": "new_value",
                "param_3": "pointer",
                "puVar1": "current_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010871c": {
            "additional_data": {
                "FUN_0010871c": {
                    "1": "handle_unknown_error",
                    "22": "print_error_message",
                    "3": "handle_error",
                    "5": "print_error"
                },
                "_stderr": {
                    "1": "standard_error"
                },
                "_stdout": {
                    "1": "standard_output"
                },
                "uVar1": {
                    "1": "error_string",
                    "20": "error_message"
                },
                "unaff_RBX": {
                    "1": "is_error",
                    "10": "error_flag",
                    "18": "error_code"
                },
                "unaff_retaddr": {
                    "31": "return_address"
                }
            },
            "called": [
                "dcgettext",
                "fflush",
                "fprintf"
            ],
            "calling": [
                "FUN_0011a110"
            ],
            "code": "\n\n\nvoid print_error_message_0010871c(void)\n\n{\n  undefined8 error_message;\n  long error_code;\n  undefined8 return_address;\n  \n  error_message = dcgettext(0,\"cause of error unknown\",5);\n  fflush(standard_output);\n  if (error_code != 0) {\n    fprintf(standard_error,\"%s: %s: %s\\n\",DAT_00127600);\n    return;\n  }\n  fprintf(standard_error,\"%s: %s\\n\",DAT_00127600,error_message,return_address);\n  return;\n}\n\n",
            "current_name": "print_error_message_0010871c",
            "entrypoint": "0x0010871c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "uVar1": "error_message",
                "unaff_RBX": "error_code",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010875d": {
            "additional_data": {
                "FUN_0010875d": {
                    "1": "compare_parameters",
                    "2": "compare_items",
                    "27": "compare_records"
                },
                "iVar3": {
                    "11": "comparison_result",
                    "19": "result"
                },
                "lVar1": {
                    "1": "size1",
                    "11": "record1_value",
                    "4": "value_1",
                    "6": "value1"
                },
                "lVar2": {
                    "1": "length2",
                    "11": "record2_value",
                    "4": "value_2",
                    "6": "value2"
                },
                "param_1": {
                    "1": "values1",
                    "2": "item_1",
                    "22": "record1",
                    "5": "record_1"
                },
                "param_2": {
                    "1": "second_parameter",
                    "2": "item_2",
                    "22": "record2",
                    "5": "record_2"
                },
                "uVar4": {
                    "1": "flags",
                    "18": "flag",
                    "3": "record2_flag"
                }
            },
            "called": [],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nint compare_records_0010875d(long *record1,long *record2)\n\n{\n  long record1_value;\n  long record2_value;\n  int result;\n  uint flag;\n  \n  record1_value = *record1;\n  record2_value = *record2;\n  flag = *(uint *)(record2_value + 0x24) & 0x102;\n  if ((*(uint *)(record1_value + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(record1_value + 0x38) <= *(ulong *)(record2_value + 0x38)) {\n    result = -1;\n    if (*(ulong *)(record2_value + 0x38) <= *(ulong *)(record1_value + 0x38)) {\n      if (*(ulong *)(record2_value + 0x40) < *(ulong *)(record1_value + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(record2_value + 0x40) <= *(ulong *)(record1_value + 0x40)) {\n          result = 1;\n          if (*(uint *)(record1_value + 0x18) <= *(uint *)(record2_value + 0x18)) {\n            return -(uint)(*(uint *)(record1_value + 0x18) < *(uint *)(record2_value + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "compare_records_0010875d",
            "entrypoint": "0x0010875d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "iVar3": "result",
                "lVar1": "record1_value",
                "lVar2": "record2_value",
                "param_1": "record1",
                "param_2": "record2",
                "uVar4": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001087da": {
            "additional_data": {
                "FUN_001087da": {
                    "1": "check_whether_rax_equals100",
                    "11": "check_rax_value",
                    "2": "check_for_value"
                },
                "auVar1": {
                    "24": "result",
                    "4": "return_value"
                },
                "auVar1._1_7_": {
                    "1": "is_value_equal"
                },
                "auVar1._8_8_": {
                    "1": "return_value"
                },
                "auVar1[0]": {
                    "1": "is_comparison_true"
                },
                "in_RAX": {
                    "1": "flag_value",
                    "14": "input_value",
                    "3": "value_to_check",
                    "8": "value"
                },
                "unaff_retaddr": {
                    "29": "return_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_0011a1b0"
            ],
            "code": "\nundefined  [16] check_rax_value_001087da(void)\n\n{\n  long input_value;\n  undefined result [16];\n  undefined8 return_address;\n  \n  is_value_equal = 0;\n  is_comparison_true = input_value == 0x100;\n  return_value = return_address;\n  return result;\n}\n\n",
            "current_name": "check_rax_value_001087da",
            "entrypoint": "0x001087da",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001087da": "check_rax_value_001087da",
                "auVar1": "result",
                "auVar1._1_7_": "is_value_equal",
                "auVar1._8_8_": "return_value",
                "auVar1[0]": "is_comparison_true",
                "in_RAX": "input_value",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001087fd": {
            "additional_data": {
                "FUN_001087fd": {
                    "1": "get_zero_value",
                    "10": "initialize",
                    "2": "calculate_result",
                    "3": "clear_memory",
                    "9": "get_default_value"
                },
                "return": {
                    "2": "result"
                },
                "return_value": {
                    "1": "result"
                },
                "undefined8": {
                    "1": "uint64_t",
                    "8": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_0011a250"
            ],
            "code": "\nvoid initialize_001087fd(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_001087fd",
            "entrypoint": "0x001087fd",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001087fd": "initialize_001087fd",
                "return": "result",
                "undefined8": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108800": {
            "additional_data": {
                "*param_1": {
                    "1": "hash",
                    "2": "input_string"
                },
                "FUN_00108800": {
                    "1": "calculate_string_hash",
                    "2": "calculate_hash",
                    "28": "hash_string"
                },
                "htab_hash_string": {
                    "1": "calculate_hash",
                    "2": "hash_string"
                },
                "param_1": {
                    "1": "param",
                    "14": "input_string",
                    "2": "string_param",
                    "6": "string_ptr"
                }
            },
            "called": [
                "htab_hash_string"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid hash_string_00108800(undefined8 *input_string)\n\n{\n  hash_string_00108800(*input_string);\n  return;\n}\n\n",
            "current_name": "hash_string_00108800",
            "entrypoint": "0x00108800",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108800": "hash_string_00108800",
                "htab_hash_string": "hash_string",
                "param_1": "input_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108808": {
            "additional_data": {
                "FUN_00108808": {
                    "1": "find_section_and_print",
                    "18": "find_missing_section",
                    "6": "find_and_print_section"
                },
                "FUN_00119dd0": {
                    "1": "handle_error"
                },
                "dcgettext": {
                    "1": "get_localized_string"
                },
                "uVar1": {
                    "1": "section_name",
                    "22": "section_address",
                    "3": "section_ptr"
                },
                "uVar2": {
                    "1": "section_missing_message",
                    "2": "section_not_found_message",
                    "20": "error_message",
                    "3": "section_not_found_msg"
                },
                "unaff_RBP": {
                    "1": "stack_base",
                    "18": "base_pointer",
                    "6": "base_address"
                }
            },
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "calling": [
                "FUN_0011a2e0"
            ],
            "code": "\nvoid find_missing_section_00108808(void)\n\n{\n  undefined8 section_address;\n  undefined8 error_message;\n  long base_pointer;\n  \n  section_address = *(undefined8 *)(base_pointer + 0x20);\n  error_message = dcgettext(0,\"Section %s not found\",5);\n                    \n  FUN_00119dd0(error_message,section_address);\n}\n\n",
            "current_name": "find_missing_section_00108808",
            "entrypoint": "0x00108808",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108808": "find_missing_section_00108808",
                "dcgettext": "get_localized_string",
                "uVar1": "section_address",
                "uVar2": "error_message",
                "unaff_RBP": "base_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010882c": {
            "additional_data": {
                "DAT_00119ed0": {
                    "1": "print_error_message"
                },
                "FUN_0010882c": {
                    "1": "print_set_time_error_message",
                    "15": "set_time_error",
                    "5": "set_time_error_handling"
                },
                "__errno_location": {
                    "1": "get_error_code",
                    "2": "get_errno_location",
                    "5": "get_error_location"
                },
                "dcgettext": {
                    "1": "get_translated_string",
                    "2": "get_error_message"
                },
                "piVar1": {
                    "1": "error_location_pointer",
                    "10": "error_number",
                    "2": "errno_pointer",
                    "3": "error_number_ptr",
                    "4": "errno_ptr"
                },
                "strerror": {
                    "1": "get_error_msg",
                    "7": "get_error_string"
                },
                "uVar2": {
                    "1": "error_message_ptr",
                    "18": "error_message",
                    "2": "translated_error_message",
                    "3": "error_msg",
                    "4": "error_string"
                }
            },
            "called": [
                "FUN_00119ed0",
                "__errno_location",
                "dcgettext",
                "strerror"
            ],
            "calling": [
                "FUN_0011a350"
            ],
            "code": "\nvoid set_time_error_0010882c(void)\n\n{\n  int *error_number;\n  undefined8 error_message;\n  \n  error_number = __errno_location();\n  strerror(*error_number);\n  error_message = dcgettext(0,\"%s: cannot set time: %s\",5);\n  FUN_00119ed0(error_message);\n  return;\n}\n\n",
            "current_name": "set_time_error_0010882c",
            "entrypoint": "0x0010882c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010882c": "set_time_error_0010882c",
                "__errno_location": "get_error_location",
                "dcgettext": "get_localized_error_message",
                "piVar1": "error_number",
                "strerror": "get_error_string",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108863": {
            "additional_data": {
                "*puVar1": {
                    "1": "current_ptr",
                    "2": "current_pointer"
                },
                "*puVar2": {
                    "1": "next_ptr",
                    "2": "next_pointer"
                },
                "FUN_00108863": {
                    "1": "free_memory",
                    "18": "clear_memory",
                    "2": "clean_up_memory",
                    "3": "free_memory_blocks",
                    "6": "cleanup_memory"
                },
                "puVar1": {
                    "1": "data_pointer1",
                    "11": "current_pointer",
                    "3": "current_ptr",
                    "7": "current_block"
                },
                "puVar2": {
                    "1": "next_data_pointer",
                    "12": "next_pointer",
                    "3": "next_ptr",
                    "7": "next_block"
                }
            },
            "called": [
                "free"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid clear_memory_00108863(void)\n\n{\n  undefined4 *current_pointer;\n  undefined4 *next_pointer;\n  \n  current_pointer = (undefined4 *)&DAT_00127740;\n  do {\n    next_pointer = current_pointer + 6;\n    free(*(void **)(current_pointer + 4));\n    *(undefined8 *)(current_pointer + 4) = 0;\n    current_pointer = next_pointer;\n  } while (next_pointer != &DAT_001278c0);\n  DAT_001278c0 = 0;\n  return;\n}\n\n",
            "current_name": "clear_memory_00108863",
            "entrypoint": "0x00108863",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108863": "clear_memory_00108863",
                "puVar1": "current_pointer",
                "puVar2": "next_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108898": {
            "additional_data": {
                "FUN_00108898": {
                    "28": "compare_strings",
                    "3": "string_comparison"
                },
                "auVar2": {
                    "1": "comparison_result_bytes",
                    "12": "result",
                    "2": "comparison_result_array",
                    "3": "comparison_result",
                    "4": "result_array"
                },
                "iVar1": {
                    "2": "result",
                    "25": "comparison_result",
                    "3": "string_comparison_result"
                },
                "in_RAX": {
                    "1": "return_val",
                    "3": "unused",
                    "4": "return_value"
                },
                "param_1": {
                    "28": "string1",
                    "3": "string_1"
                },
                "param_2": {
                    "28": "string2",
                    "3": "string_2"
                }
            },
            "called": [
                "strcmp"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16] compare_strings_00108898(char **string1,char **string2)\n\n{\n  int comparison_result;\n  undefined8 return_value;\n  undefined result [16];\n  \n  comparison_result = strcmp(*string1,*string2);\n  result._1_7_ = 0;\n  result[0] = comparison_result == 0;\n  result._8_8_ = return_value;\n  return result;\n}\n\n",
            "current_name": "compare_strings_00108898",
            "entrypoint": "0x00108898",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "auVar2": "result",
                "iVar1": "comparison_result",
                "in_RAX": "return_value",
                "param_1": "string1",
                "param_2": "string2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001088ae": {
            "additional_data": {
                "FUN_001088ae": {
                    "19": "update_data",
                    "2": "update_data_and_return",
                    "6": "update_data_entry"
                },
                "free": {
                    "1": "release_memory"
                },
                "iVar1": {
                    "1": "counter",
                    "11": "new_index",
                    "5": "current_index"
                },
                "lVar2": {
                    "1": "current_entry_index",
                    "12": "index",
                    "2": "current_value",
                    "3": "current_index",
                    "4": "data_index"
                },
                "lVar3": {
                    "1": "updated_index_offset",
                    "17": "offset",
                    "2": "current_offset",
                    "4": "data_offset"
                },
                "param_1": {
                    "1": "data_field1",
                    "10": "value1",
                    "15": "new_value1"
                },
                "param_2": {
                    "1": "entry_value",
                    "10": "value2",
                    "15": "new_value2"
                },
                "param_3": {
                    "1": "data1",
                    "14": "new_value3",
                    "8": "value3"
                },
                "param_4": {
                    "1": "str_to_copy",
                    "14": "new_value4",
                    "2": "str",
                    "5": "value4"
                },
                "uVar4": {
                    "1": "str",
                    "13": "duplicated_string",
                    "2": "new_string",
                    "3": "duplicated_data",
                    "5": "duplicated_value"
                },
                "xstrdup": {
                    "1": "duplicate_string"
                }
            },
            "called": [
                "free",
                "xstrdup"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nulong update_data_001088ae(undefined4 new_value1,undefined4 new_value2,undefined8 new_value3,undefined8 new_value4)\n\n{\n  int new_index;\n  long index;\n  long offset;\n  undefined8 duplicated_string;\n  \n  index = (long)DAT_001278c0;\n  offset = index * 0x18;\n  free((void *)(&DAT_00127750)[index * 3]);\n  *(undefined4 *)(&DAT_00127740 + offset) = new_value1;\n  *(undefined4 *)(&DAT_00127744 + offset) = new_value2;\n  *(undefined8 *)(&DAT_00127748 + offset) = new_value3;\n  duplicated_string = xstrdup(new_value4);\n  (&DAT_00127750)[index * 3] = duplicated_string;\n  new_index = DAT_001278c0 + 1;\n  DAT_001278c0 = new_index % 0x10;\n  return (long)new_index / 0x10 & 0xffffffff;\n}\n\n",
            "current_name": "update_data_001088ae",
            "entrypoint": "0x001088ae",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001088ae": "update_data_001088ae",
                "free": "release_memory",
                "iVar1": "new_index",
                "lVar2": "index",
                "lVar3": "offset",
                "param_1": "new_value1",
                "param_2": "new_value2",
                "param_3": "new_value3",
                "param_4": "new_value4",
                "uVar4": "duplicated_string",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108916": {
            "additional_data": {
                "FUNK_00108916": {
                    "1": "print_usage"
                },
                "FUN_00104a35": {
                    "1": "print_help",
                    "9": "print_additional_info"
                },
                "FUN_00108916": {
                    "1": "print_binary_file_copy_options",
                    "12": "print_usage",
                    "2": "print_file_usage",
                    "3": "copy_binary_file",
                    "5": "print_usage_message",
                    "7": "print_usage_and_exit"
                },
                "F_00104a35": {
                    "1": "print_debug_info"
                },
                "__format": {
                    "2": "format",
                    "4": "format_string"
                },
                "__status": {
                    "1": "exit_status",
                    "2": "status"
                },
                "__stream": {
                    "1": "stream_ptr",
                    "2": "stream",
                    "4": "output_stream"
                },
                "dcgettext": {
                    "1": "get_text",
                    "2": "get_translated_text"
                },
                "exit": {
                    "1": "terminate",
                    "2": "exit_program",
                    "4": "terminate_program"
                },
                "fprintf": {
                    "1": "print_to_stream",
                    "2": "print_formatted"
                },
                "param_1": {
                    "1": "file_pointer",
                    "24": "output_file",
                    "4": "file"
                },
                "param_2": {
                    "2": "status",
                    "21": "exit_code",
                    "4": "exit_status"
                },
                "pcVar2": {
                    "1": "message_ptr",
                    "18": "message",
                    "2": "localized_string",
                    "3": "text"
                },
                "uVar1": {
                    "1": "data",
                    "2": "usage_msg",
                    "5": "usage_message",
                    "9": "usage_string"
                }
            },
            "called": [
                "FUN_00104a35",
                "dcgettext",
                "exit",
                "fprintf"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid print_usage_00108916(FILE *output_file,int exit_code)\n\n{\n  undefined8 usage_string;\n  char *message;\n  \n  usage_string = DAT_00127600;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(output_file,message,usage_string);\n  message = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(output_file,message);\n  FUN_00104a35(DAT_00127600,output_file);\n  if (exit_code == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  terminate_program(exit_code);\n}\n\n",
            "current_name": "print_usage_00108916",
            "entrypoint": "0x00108916",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108916": "print_usage_00108916",
                "dcgettext": "get_translated_text",
                "exit": "terminate_program",
                "fprintf": "print_to_output",
                "param_1": "output_file",
                "param_2": "exit_code",
                "pcVar2": "message",
                "uVar1": "usage_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108a2a": {
            "additional_data": {
                "FUN_00104a35": {
                    "1": "print_program_info",
                    "2": "print_version",
                    "3": "print_object_files_modified",
                    "4": "print_version_info"
                },
                "FUN_00108a2a": {
                    "2": "print_usage_info",
                    "20": "print_usage",
                    "8": "print_usage_and_exit"
                },
                "F_ExtractedCode": {
                    "1": "print_help_message"
                },
                "__format": {
                    "1": "format_string",
                    "2": "format"
                },
                "__status": {
                    "1": "status_code"
                },
                "__stream": {
                    "1": "output_stream",
                    "2": "stream"
                },
                "dcgettext": {
                    "1": "get_translated_string",
                    "2": "get_message",
                    "3": "get_translated_message"
                },
                "exit": {
                    "1": "program_exit",
                    "2": "terminate_program",
                    "7": "exit_program"
                },
                "fprintf": {
                    "1": "print_formatted_output",
                    "2": "write_to_file",
                    "3": "print_formatted"
                },
                "param_1": {
                    "1": "file_pointer",
                    "2": "file_ptr",
                    "24": "output_file",
                    "3": "file"
                },
                "param_2": {
                    "17": "exit_code",
                    "3": "status_code",
                    "5": "exit_status"
                },
                "pcVar2": {
                    "1": "text",
                    "2": "localized_string",
                    "28": "message"
                },
                "uVar1": {
                    "1": "version_info",
                    "10": "version",
                    "14": "version_number",
                    "4": "program_name"
                }
            },
            "called": [
                "FUN_00104a35",
                "dcgettext",
                "exit",
                "fprintf"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid print_usage_00108a2a(FILE *output_file,int exit_code)\n\n{\n  undefined8 version_number;\n  char *message;\n  \n  version_number = DAT_00127600;\n  message = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(output_file,message,version_number);\n  message = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  FUN_00104a35(DAT_00127600,output_file);\n  if (exit_code == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit_program(exit_code);\n}\n\n",
            "current_name": "print_usage_00108a2a",
            "entrypoint": "0x00108a2a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108a2a": "print_usage_00108a2a",
                "dcgettext": "get_translated_message",
                "exit": "exit_program",
                "fprintf": "print_formatted",
                "param_1": "output_file",
                "param_2": "exit_code",
                "pcVar2": "message",
                "uVar1": "version_number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108b3e": {
            "additional_data": {
                "FUN_00108b3e": {
                    "1": "print_last_stab_entries",
                    "18": "print_last_stabs_entries",
                    "2": "print_last_stabs",
                    "4": "print_stab_entries",
                    "6": "print_stabs_entries"
                },
                "__format": {
                    "1": "format_msg",
                    "22": "format_string",
                    "3": "format_str"
                },
                "__stream": {
                    "1": "file_stream"
                },
                "_stderr": {
                    "1": "error_output",
                    "2": "output_stream"
                },
                "bfd_get_stab_name": {
                    "4": "get_stab_name"
                },
                "dcgettext": {
                    "1": "get_stab_entry_string"
                },
                "fprintf": {
                    "1": "print_formatted",
                    "3": "print_to_stream"
                },
                "fputc": {
                    "1": "put_char_to_output"
                },
                "fwrite": {
                    "1": "write_data",
                    "2": "write_to_file"
                },
                "iVar5": {
                    "1": "index",
                    "10": "count",
                    "12": "counter",
                    "2": "iteration_count"
                },
                "lVar1": {
                    "2": "stab_name_ptr",
                    "29": "stab_name"
                },
                "lVar2": {
                    "1": "current_index",
                    "2": "iterator",
                    "26": "index"
                },
                "lVar3": {
                    "1": "current_offset",
                    "29": "offset"
                },
                "param_1": {
                    "1": "unused_param",
                    "18": "param_1",
                    "5": "param1"
                },
                "param_2": {
                    "1": "unused_param",
                    "18": "param_2",
                    "5": "param2"
                },
                "param_3": {
                    "1": "unused_param",
                    "17": "param_3",
                    "5": "param3"
                },
                "piVar4": {
                    "1": "symbol",
                    "12": "stab_entry",
                    "2": "stab_entry_ptr",
                    "8": "stab_ptr"
                }
            },
            "called": [
                "dcgettext",
                "fputc",
                "bfd_get_stab_name",
                "fprintf",
                "fwrite"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 print_last_stabs_entries_00108b3e(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  char *format_string;\n  long stab_name;\n  long index;\n  long offset;\n  int *stab_entry;\n  int counter;\n  \n  format_string = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(output_stream,format_string);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,output_stream);\n  counter = DAT_001278c0;\n  do {\n    index = (long)counter;\n    offset = index * 0x18;\n    stab_entry = (int *)(&DAT_00127740 + offset);\n    if ((&DAT_00127750)[index * 3] != 0) {\n      stab_name = bfd_get_stab_name(*stab_entry);\n      if (stab_name == 0) {\n        if (*stab_entry == 0) {\n          fwrite(\"HdrSym\",1,6,output_stream);\n        }\n        else {\n          fprintf(output_stream,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(output_stream,\"%-6s\",stab_name);\n      }\n      fprintf(output_stream,\" %-6d \",(ulong)*(uint *)(&DAT_00127744 + offset));\n      fprintf(output_stream,\"%08lx\",*(undefined8 *)(&DAT_00127748 + offset));\n      if (*stab_entry != 0) {\n        fprintf(output_stream,\" %s\",(&DAT_00127750)[index * 3]);\n      }\n      fputc(10,output_stream);\n    }\n    counter = (counter + 1) % 0x10;\n  } while (DAT_001278c0 != counter);\n  return param_3;\n}\n\n",
            "current_name": "print_last_stabs_entries_00108b3e",
            "entrypoint": "0x00108b3e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108b3e": "print_last_stabs_entries_00108b3e",
                "__format": "format_string",
                "_stderr": "output_stream",
                "bfd_get_stab_name": "get_stab_name",
                "dcgettext": "get_stab_entry_string",
                "fprintf": "print_to_stream",
                "fputc": "write_char_to_stream",
                "fwrite": "write_to_stream",
                "iVar5": "counter",
                "lVar1": "stab_name",
                "lVar2": "index",
                "lVar3": "offset",
                "piVar4": "stab_entry"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108c86": {
            "additional_data": {
                "FUN_00108c86": {
                    "1": "decode_and_extract_info",
                    "2": "parse_driver_version",
                    "4": "extract_binary_info"
                },
                "FUN_00113fb0": {
                    "1": "search_keyword"
                },
                "__s": {
                    "1": "binary_data",
                    "3": "binary_string",
                    "4": "input_string",
                    "7": "string"
                },
                "__s1": {
                    "1": "substring2",
                    "2": "substring",
                    "5": "architecture_string",
                    "6": "arch_string",
                    "8": "architecture"
                },
                "bVar8": {
                    "1": "iteration_count",
                    "10": "flag",
                    "2": "byte_var",
                    "4": "byte_value"
                },
                "cVar1": {
                    "1": "has_prefix",
                    "2": "check_result",
                    "5": "result"
                },
                "iVar2": {
                    "1": "strcmp_result",
                    "28": "comparison_result"
                },
                "lVar5": {
                    "1": "input_length",
                    "12": "offset",
                    "2": "data_offset",
                    "3": "string_length"
                },
                "param_1": {
                    "1": "driver_name_ptr",
                    "2": "data",
                    "3": "input_data",
                    "4": "binary_data",
                    "5": "input_ptr"
                },
                "puVar4": {
                    "1": "new_substr",
                    "2": "decoded_string",
                    "3": "allocated_string",
                    "7": "new_string"
                },
                "puVar6": {
                    "1": "modified_substring_pointer",
                    "2": "allocated_string_ptr",
                    "6": "new_string_ptr"
                },
                "sVar3": {
                    "1": "data_length_after_extraction",
                    "2": "input_length",
                    "20": "string_length",
                    "5": "length"
                },
                "strcmp": {
                    "5": "compare_strings"
                },
                "strlen": {
                    "5": "get_string_length"
                },
                "uVar7": {
                    "1": "return_val",
                    "22": "return_value",
                    "4": "result"
                },
                "xmalloc": {
                    "5": "allocate_memory"
                }
            },
            "called": [
                "strlen",
                "xmalloc",
                "FUN_00113fb0",
                "strcmp"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined8 extract_binary_info_00108c86(long *input_ptr)\n\n{\n  char result;\n  int comparison_result;\n  size_t string_length;\n  undefined2 *new_string;\n  long offset;\n  char *string;\n  char *architecture;\n  undefined2 *new_string_ptr;\n  undefined8 return_value;\n  byte flag;\n  \n  flag = 0;\n  offset = *input_ptr;\n  string = (char *)(offset + 4);\n  result = FUN_00113fb0(string,&DAT_0011b73b);\n  if (result == '\\0') {\n    result = FUN_00113fb0(string,\"bsdrv-\");\n    if (result == '\\0') {\n      result = FUN_00113fb0(string,\"rtdrv-\");\n      if (result == '\\0') {\n        return 0xffffffff;\n      }\n      string = (char *)(offset + 6);\n      return_value = 0xc;\n    }\n    else {\n      string = (char *)(offset + 6);\n      return_value = 0xb;\n    }\n  }\n  else {\n    return_value = 10;\n  }\n  string_length = strlen(string);\n  new_string = (undefined2 *)xmalloc(string_length + 8);\n  architecture = string + 4;\n  new_string_ptr = new_string;\n  for (offset = string_length + 1; offset != 0; offset = offset + -1) {\n    *(char *)new_string_ptr = *string;\n    string = string + (ulong)flag * -2 + 1;\n    new_string_ptr = (undefined2 *)((long)new_string_ptr + (ulong)flag * -2 + 1);\n  }\n  *(undefined *)(new_string + 1) = 0x69;\n  *new_string = 0x6570;\n  comparison_result = strcmp(architecture,\"ia32\");\n  if (comparison_result == 0) {\n    *(undefined *)((long)new_string + 7) = 0x36;\n    *(undefined2 *)((long)new_string + 5) = 0x3833;\n  }\n  else {\n    comparison_result = strcmp(architecture,\"x86_64\");\n    if (comparison_result == 0) {\n      *(undefined *)((long)new_string + 7) = 0x2d;\n    }\n    else {\n      comparison_result = strcmp(architecture,\"aarch64\");\n      if (comparison_result == 0) {\n        *(undefined8 *)((long)new_string + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *input_ptr = (long)new_string;\n  return return_value;\n}\n\n",
            "current_name": "extract_binary_info_00108c86",
            "entrypoint": "0x00108c86",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108c86": "extract_binary_info_00108c86",
                "__s": "string",
                "__s1": "architecture",
                "bVar8": "flag",
                "cVar1": "result",
                "iVar2": "comparison_result",
                "lVar5": "offset",
                "param_1": "input_ptr",
                "puVar4": "new_string",
                "puVar6": "new_string_ptr",
                "sVar3": "string_length",
                "strcmp": "compare_strings",
                "strlen": "get_string_length",
                "uVar7": "return_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108d9a": {
            "additional_data": {
                "DAT_001278e8": {
                    "1": "symbol2_table"
                },
                "DAT_001278f0": {
                    "1": "symbol1_table"
                },
                "D_001278e8": {
                    "1": "target_hash_table"
                },
                "D_001278f0": {
                    "1": "symbol_hash_table"
                },
                "FUN_00108d9a": {
                    "1": "check_and_update_symbol",
                    "11": "check_symbol_redefinition",
                    "3": "validate_redefinition",
                    "5": "check_symbol_redefined",
                    "6": "check_redefinition"
                },
                "FUN_00119dd0": {
                    "1": "print_error",
                    "2": "print_redefinition_error"
                },
                "dcgettext": {
                    "1": "get_translated_string",
                    "2": "get_localized_message"
                },
                "htab_find": {
                    "6": "find_symbol"
                },
                "htab_find_slot": {
                    "1": "find_empty_slot",
                    "3": "find_symbol_slot"
                },
                "lVar3": {
                    "1": "symbol_result",
                    "2": "symbol_entry",
                    "3": "result",
                    "6": "symbol_found",
                    "9": "symbol_exists"
                },
                "param_1": {
                    "1": "symbol_name",
                    "2": "filename",
                    "3": "file_name",
                    "4": "param",
                    "5": "error_message"
                },
                "param_2": {
                    "1": "old_symbol",
                    "12": "symbol_name",
                    "7": "symbol1"
                },
                "param_3": {
                    "1": "symbol_2",
                    "12": "target_symbol",
                    "2": "target_name",
                    "7": "symbol2"
                },
                "param_4": {
                    "1": "input",
                    "16": "result",
                    "2": "param",
                    "6": "param_4"
                },
                "pcVar2": {
                    "1": "str_symbol1",
                    "2": "symbol_name",
                    "3": "symbol_name_copy",
                    "4": "duplicated_symbol",
                    "7": "duplicate_symbol"
                },
                "plVar5": {
                    "1": "entry_slot",
                    "11": "slot_ptr",
                    "2": "symbol_ptr_slot",
                    "7": "symbol_slot"
                },
                "ppcVar1": {
                    "1": "str_ptrs",
                    "2": "symbol_ptrs",
                    "4": "symbol_and_target",
                    "5": "symbol_names",
                    "6": "symbol_pair"
                },
                "strdup": {
                    "2": "copy_string",
                    "5": "duplicate_string"
                },
                "uVar4": {
                    "1": "error_message_text",
                    "18": "error_message",
                    "2": "error"
                },
                "xmalloc": {
                    "8": "allocate_memory"
                }
            },
            "called": [
                "htab_find",
                "FUN_00119dd0",
                "xmalloc",
                "htab_find_slot",
                "dcgettext",
                "strdup"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined8 check_symbol_redefinition_00108d9a(undefined8 error_message,char *symbol_name,char *target_symbol,undefined8 result)\n\n{\n  char **symbol_pair;\n  char *duplicate_symbol;\n  long symbol_exists;\n  undefined8 error_message;\n  long *slot_ptr;\n  \n  symbol_pair = (char **)xmalloc(0x10);\n  duplicate_symbol = strdup(symbol_name);\n  *symbol_pair = duplicate_symbol;\n  duplicate_symbol = strdup(target_symbol);\n  error_message = DAT_001278f0;\n  symbol_pair[1] = duplicate_symbol;\n  symbol_exists = htab_find(error_message,symbol_pair);\n  if (symbol_exists != 0) {\n    error_message = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    FUN_00119dd0(error_message,error_message,symbol_name);\n  }\n  symbol_exists = htab_find(DAT_001278e8,target_symbol);\n  if (symbol_exists != 0) {\n    error_message = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    FUN_00119dd0(error_message,error_message,target_symbol);\n  }\n  slot_ptr = (long *)htab_find_slot(DAT_001278f0,symbol_pair,1);\n  error_message = DAT_001278e8;\n  *slot_ptr = (long)symbol_pair;\n  duplicate_symbol = symbol_pair[1];\n  symbol_pair = (char **)htab_find_slot(error_message,duplicate_symbol,1);\n  *symbol_pair = duplicate_symbol;\n  return result;\n}\n\n",
            "current_name": "check_symbol_redefinition_00108d9a",
            "entrypoint": "0x00108d9a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108d9a": "check_symbol_redefinition_00108d9a",
                "dcgettext": "get_localized_message",
                "htab_find": "find_symbol",
                "htab_find_slot": "find_symbol_slot",
                "lVar3": "symbol_exists",
                "param_1": "error_message",
                "param_2": "symbol_name",
                "param_3": "target_symbol",
                "param_4": "result",
                "pcVar2": "duplicate_symbol",
                "plVar5": "slot_ptr",
                "ppcVar1": "symbol_pair",
                "strdup": "duplicate_string",
                "uVar4": "error_message",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108e76": {
            "additional_data": {
                "*param_1": {
                    "1": "data_pointer"
                },
                "FUN_00108e76": {
                    "1": "parse_integer_from_byte_array",
                    "2": "convert_string_to_int",
                    "3": "parse_integer_from_string",
                    "4": "extract_integer_from_byte_array",
                    "5": "extract_number_from_string",
                    "7": "parse_integer"
                },
                "bVar1": {
                    "12": "current_byte",
                    "14": "current_char",
                    "2": "current_character"
                },
                "iVar2": {
                    "1": "parsed_int",
                    "10": "parsed_integer",
                    "2": "converted_int",
                    "5": "extracted_integer",
                    "9": "result"
                },
                "param_1": {
                    "1": "str",
                    "10": "string_ptr",
                    "2": "input_ptr",
                    "4": "input_string",
                    "6": "byte_array"
                }
            },
            "called": [],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "code": "\nint parse_integer_00108e76(byte **string_ptr)\n\n{\n  byte current_char;\n  int parsed_integer;\n  \n  parsed_integer = 0;\n  while( true ) {\n    current_char = **string_ptr;\n    if (((&_sch_istable)[(ulong)current_char * 2] & 4) == 0) break;\n    *string_ptr = *string_ptr + 1;\n    parsed_integer = parsed_integer * 10 + -0x30 + (int)(char)current_char;\n  }\n  return parsed_integer;\n}\n\n",
            "current_name": "parse_integer_00108e76",
            "entrypoint": "0x00108e76",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108e76": "parse_integer_00108e76",
                "bVar1": "current_char",
                "iVar2": "parsed_integer",
                "param_1": "string_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108ea1": {
            "additional_data": {
                "*param_1": {
                    "1": "str_pointer"
                },
                "*param_2": {
                    "1": "output_integer"
                },
                "FUN_00108ea1": {
                    "1": "parse_number_from_string",
                    "11": "parse_number",
                    "2": "extract_number_from_string",
                    "3": "parse_and_extract_number",
                    "5": "parse_integer"
                },
                "_sch_istable": {
                    "1": "character_classification_table"
                },
                "iVar1": {
                    "1": "digit",
                    "2": "parsed_number",
                    "7": "current_digit"
                },
                "param_1": {
                    "1": "byte_array_ptr",
                    "2": "byte_array",
                    "3": "input_string",
                    "4": "input_data",
                    "9": "input_ptr"
                },
                "param_2": {
                    "1": "output_integer",
                    "2": "output_ptr",
                    "3": "result_ptr",
                    "6": "output_number"
                },
                "pbVar2": {
                    "1": "input_ptr_current",
                    "12": "current_byte",
                    "2": "current_ptr",
                    "8": "current_char"
                },
                "pbVar3": {
                    "1": "ptr_byte_2",
                    "12": "next_byte",
                    "2": "next_char_ptr",
                    "3": "next_byte_ptr",
                    "8": "next_char"
                },
                "uVar4": {
                    "1": "concatenated_result",
                    "2": "parsed_value",
                    "26": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010d882",
                "FUN_0010d21c"
            ],
            "code": "\nulong parse_number_00108ea1(byte **input_ptr,int *output_number)\n\n{\n  int current_digit;\n  byte *current_byte;\n  byte *next_byte;\n  ulong result;\n  \n  current_byte = *input_ptr;\n  result = 0;\n  if (((&character_classification_table)[(ulong)*current_byte * 2] & 4) != 0) {\n    next_byte = current_byte + 1;\n    current_digit = (char)*current_byte + -0x30;\n    *output_number = current_digit;\n    *input_ptr = next_byte;\n    if (((&character_classification_table)[(ulong)current_byte[1] * 2] & 4) != 0) {\n      do {\n        current_byte = next_byte;\n        current_digit = current_digit * 10 + -0x30 + (int)(char)*current_byte;\n        next_byte = current_byte + 1;\n      } while (((&character_classification_table)[(ulong)current_byte[1] * 2] & 4) != 0);\n      if (current_byte[1] == 0x5f) {\n        next_byte = current_byte + 2;\n        *input_ptr = next_byte;\n        *output_number = current_digit;\n      }\n    }\n    result = CONCAT71((int7)((ulong)next_byte >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "current_name": "parse_number_00108ea1",
            "entrypoint": "0x00108ea1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108ea1": "parse_number_00108ea1",
                "_sch_istable": "character_classification_table",
                "iVar1": "current_digit",
                "param_1": "input_ptr",
                "param_2": "output_number",
                "pbVar2": "current_byte",
                "pbVar3": "next_byte",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108f05": {
            "additional_data": {
                "1": {
                    "1": ""
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "FUN_00108f05": {
                    "1": "initialize_program",
                    "15": "get_one",
                    "2": "get_constant_value",
                    "5": "get_return_value"
                },
                "r": {
                    "1": "result"
                },
                "return": {
                    "1": "result"
                },
                "return value": {
                    "1": "result"
                },
                "undefined": {
                    "1": "",
                    "2": "void"
                },
                "void": {
                    "1": ""
                }
            },
            "called": [],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nvoid get_one_00108f05(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "get_one_00108f05",
            "entrypoint": "0x00108f05",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108f05": "get_one_00108f05",
                "r": "result",
                "return": "result",
                "undefined": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108f08": {
            "additional_data": {
                "FUN_00108f08": {
                    "1": "debug_source",
                    "12": "debug_start_source",
                    "2": "update_debug_source",
                    "3": "add_source_file"
                },
                "_stderr": {
                    "2": "stderr",
                    "3": "error_output",
                    "5": "error_stream"
                },
                "bVar9": {
                    "1": "byte_var",
                    "2": "zero_flag",
                    "3": "zero_byte",
                    "4": "counter",
                    "8": "flag"
                },
                "dcgettext": {
                    "1": "retrieve_translated_text",
                    "2": "get_error_message"
                },
                "filename_cmp": {
                    "1": "compare_filename",
                    "2": "compare_filenames"
                },
                "fprintf": {
                    "1": "print_to_file"
                },
                "iVar1": {
                    "1": "filename_cmp_result",
                    "2": "filename_comparison_result",
                    "3": "result",
                    "6": "comparison_result"
                },
                "lVar5": {
                    "1": "l_index",
                    "21": "loop_counter",
                    "8": "counter"
                },
                "param_1": {
                    "1": "param_address",
                    "2": "debug_context",
                    "3": "source",
                    "4": "source_manager"
                },
                "param_2": {
                    "1": "param_string",
                    "24": "filename",
                    "4": "file_name"
                },
                "pcVar7": {
                    "1": "current_file_name",
                    "19": "current_filename",
                    "2": "default_filename"
                },
                "puVar3": {
                    "1": "debug_set_filenames",
                    "2": "debug_files",
                    "3": "current_node",
                    "4": "current_entry"
                },
                "puVar4": {
                    "1": "next_node",
                    "2": "prev_entry",
                    "3": "temp_node",
                    "4": "temp_ptr"
                },
                "puVar6": {
                    "1": "head_entry",
                    "2": "file_list_head",
                    "3": "file_list",
                    "7": "source_list"
                },
                "puVar8": {
                    "1": "last_node_ptr",
                    "2": "tail",
                    "3": "last_entry"
                },
                "uVar2": {
                    "1": "status",
                    "19": "result",
                    "3": "return_value",
                    "6": "success"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "xmalloc",
                "dcgettext",
                "filename_cmp",
                "fprintf"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\n\n\nundefined8 debug_start_source_00108f08(long source_manager,char *filename)\n\n{\n  int cmp_result;\n  undefined8 result;\n  undefined8 *current_entry;\n  undefined8 *temp_ptr;\n  long loop_counter;\n  undefined8 *source_list;\n  char *current_filename;\n  undefined8 *last_entry;\n  byte flag;\n  \n  flag = 0;\n  current_filename = \"\";\n  if (filename != (char *)0x0) {\n    current_filename = filename;\n  }\n  if (*(long *)(source_manager + 8) == 0) {\n    result = dcgettext(0,\"debug_start_source_00108f08: no debug_set_filename call\",5);\n    fprintf(error_stream,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    for (current_entry = *(undefined8 **)(*(long *)(source_manager + 8) + 8); current_entry != (undefined8 *)0x0;\n        current_entry = (undefined8 *)*current_entry) {\n      cmp_result = filename_cmp(current_entry[1],current_filename);\n      if (cmp_result == 0) goto LAB_00108fad;\n    }\n    current_entry = (undefined8 *)xmalloc(0x18);\n    source_list = *(undefined8 **)(source_manager + 0x10);\n    last_entry = current_entry;\n    for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)last_entry = 0;\n      last_entry = (undefined8 *)((long)last_entry + (ulong)flag * -8 + 4);\n    }\n    current_entry[1] = current_filename;\n    last_entry = (undefined8 *)*source_list;\n    while (temp_ptr = last_entry, temp_ptr != (undefined8 *)0x0) {\n      source_list = temp_ptr;\n      last_entry = (undefined8 *)*temp_ptr;\n    }\n    *source_list = current_entry;\nLAB_00108fad:\n    *(undefined8 **)(source_manager + 0x10) = current_entry;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "debug_start_source_00108f08",
            "entrypoint": "0x00108f08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108f08": "debug_start_source_00108f08",
                "_stderr": "error_stream",
                "bVar9": "flag",
                "dcgettext": "get_error_message",
                "filename_cmp": "compare_filenames",
                "fprintf": "print_error_message",
                "iVar1": "cmp_result",
                "lVar5": "loop_counter",
                "param_1": "source_manager",
                "param_2": "filename",
                "pcVar7": "current_filename",
                "puVar3": "current_entry",
                "puVar4": "temp_ptr",
                "puVar6": "source_list",
                "puVar8": "last_entry",
                "uVar2": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108fb9": {
            "additional_data": {
                "FUN_00108fb9": {
                    "2": "print_error",
                    "4": "print_error_message",
                    "5": "print_bad_stab_message",
                    "6": "print_bad_stab_error_message",
                    "8": "print_bad_stab"
                },
                "__format": {
                    "1": "error_msg_format",
                    "14": "format_string",
                    "2": "format",
                    "3": "error_message_format",
                    "5": "error_format"
                },
                "dcgettext": {
                    "1": "translate_message"
                },
                "fprintf": {
                    "1": "print_error_message"
                },
                "param_1": {
                    "1": "stab_error_string",
                    "14": "error_message",
                    "2": "stab_value",
                    "6": "stab",
                    "7": "stab_message"
                }
            },
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_00109ab1",
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid print_bad_stab_00108fb9(undefined8 error_message)\n\n{\n  char *format_string;\n  \n  format_string = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,format_string,error_message);\n  return;\n}\n\n",
            "current_name": "print_bad_stab_00108fb9",
            "entrypoint": "0x00108fb9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_00108fb9",
                "__format": "format_string",
                "dcgettext": "translate_message",
                "fprintf": "print_error_message",
                "param_1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108fe8": {
            "additional_data": {
                "FUN_00108fe8": {
                    "26": "print_warning",
                    "5": "print_warning_message"
                },
                "__format": {
                    "1": "warning_message_format",
                    "12": "format_string",
                    "13": "warning_format",
                    "3": "format"
                },
                "in_RAX": {
                    "1": "return_val",
                    "3": "return_value",
                    "6": "result"
                },
                "param_1": {
                    "1": "error_msg",
                    "16": "message",
                    "2": "file_name",
                    "4": "message1"
                },
                "param_2": {
                    "1": "source_file",
                    "10": "source",
                    "2": "file_name",
                    "3": "filename",
                    "4": "message2"
                }
            },
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_00109a32",
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid print_warning_00108fe8(undefined8 message,undefined8 source)\n\n{\n  undefined8 result;\n  char *warning_format;\n  \n  warning_format = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,warning_format,source,message,result);\n  return;\n}\n\n",
            "current_name": "print_warning_00108fe8",
            "entrypoint": "0x00108fe8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108fe8": "print_warning_00108fe8",
                "__format": "warning_format",
                "in_RAX": "result",
                "param_1": "message",
                "param_2": "source"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109022": {
            "additional_data": {
                "FUN_00109022": {
                    "1": "extract_file_type",
                    "11": "process_file",
                    "2": "process_file_type",
                    "3": "process_type_file"
                },
                "auVar8": {
                    "1": "return_data",
                    "17": "return_value",
                    "2": "return_val",
                    "7": "result"
                },
                "bVar7": {
                    "1": "loop_index",
                    "10": "byte_var",
                    "2": "byte_variable",
                    "3": "byte_value",
                    "4": "flag"
                },
                "dcgettext": {
                    "1": "get_translated_string"
                },
                "fprintf": {
                    "1": "print_formatted"
                },
                "lVar4": {
                    "1": "index",
                    "14": "loop_counter",
                    "6": "loop_var",
                    "7": "counter"
                },
                "param_1": {
                    "1": "binary_address",
                    "11": "file_number",
                    "3": "file_data",
                    "6": "file_index"
                },
                "param_2": {
                    "1": "type_indices",
                    "2": "type_file",
                    "3": "type_indexes",
                    "4": "type_numbers",
                    "7": "file_numbers",
                    "9": "type_index"
                },
                "param_3": {
                    "1": "unused_param",
                    "2": "arg1",
                    "3": "param_3",
                    "7": "param3"
                },
                "param_4": {
                    "1": "stream2",
                    "2": "var2",
                    "3": "param_4",
                    "6": "param4",
                    "7": "arg4"
                },
                "pcVar2": {
                    "1": "err_msg",
                    "20": "error_message",
                    "7": "error_msg"
                },
                "plVar3": {
                    "1": "file_data_ptr",
                    "2": "file_pointer",
                    "3": "allocated_memory",
                    "4": "file_data",
                    "8": "result"
                },
                "pplVar6": {
                    "1": "type_data_ptr",
                    "2": "type_array_pointer",
                    "3": "type_array"
                },
                "uVar1": {
                    "1": "file_upper_limit",
                    "2": "file_type",
                    "3": "index",
                    "4": "file_index",
                    "5": "file_number"
                },
                "uVar5": {
                    "1": "type_index_value",
                    "2": "type_file_number",
                    "5": "type_index"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "xmalloc",
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c2d2"
            ],
            "code": "\n\n\nundefined  [16] process_file_00109022(long file_number,uint *type_index,undefined8 arg3,undefined8 arg4)\n\n{\n  uint file_number;\n  char *error_message;\n  long *result;\n  long loop_counter;\n  uint type_index;\n  long **type_array;\n  byte byte_var;\n  undefined return_value [16];\n  \n  byte_var = 0;\n  type_index = *type_index;\n  file_number = type_index[1];\n  if (((int)type_index < 0) || (*(uint *)(file_number + 0x80) <= type_index)) {\n    error_message = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,error_message,(ulong)type_index);\n  }\n  else {\n    if (-1 < (int)file_number) {\n      type_array = (long **)(*(long *)(file_number + 0x88) + (long)(int)type_index * 8);\n      for (type_index = file_number; 0xf < (int)type_index; type_index = type_index - 0x10) {\n        if (*type_array == (long *)0x0) {\n          result = (long *)xmalloc(0x88);\n          *type_array = result;\n          for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n            *(undefined4 *)result = 0;\n            result = (long *)((long)result + (ulong)byte_var * -8 + 4);\n          }\n        }\n        type_array = (long **)*type_array;\n      }\n      if (*type_array == (long *)0x0) {\n        result = (long *)xmalloc(0x88);\n        *type_array = result;\n        for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *(undefined4 *)result = 0;\n          result = (long *)((long)result + (ulong)byte_var * -8 + 4);\n        }\n      }\n      result = *type_array + (long)(int)((file_number >> 4) * -0x10 + file_number) + 1;\n      goto LAB_00109117;\n    }\n    error_message = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,error_message,(ulong)file_number);\n  }\n  result = (long *)0x0;\nLAB_00109117:\n  return_value._8_8_ = arg4;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "current_name": "process_file_00109022",
            "entrypoint": "0x00109022",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109022": "process_file_00109022",
                "auVar8": "return_value",
                "bVar7": "byte_var",
                "dcgettext": "get_translated_string",
                "fprintf": "print_formatted",
                "lVar4": "loop_counter",
                "param_1": "file_number",
                "param_2": "type_index",
                "param_3": "arg3",
                "param_4": "arg4",
                "pcVar2": "error_message",
                "plVar3": "result",
                "pplVar6": "type_array",
                "uVar1": "file_number",
                "uVar5": "type_index",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010911f": {
            "additional_data": {
                "FUN_0010911f": {
                    "2": "print_mangled_name_error",
                    "25": "print_error_message",
                    "4": "print_bad_mangled_name"
                },
                "__format": {
                    "1": "translation_string",
                    "14": "format_string",
                    "2": "format_message",
                    "4": "error_message_format"
                },
                "dcgettext": {
                    "1": "get_localized_string"
                },
                "fprintf": {
                    "1": "print_to_stderr"
                },
                "param_1": {
                    "13": "mangled_name",
                    "16": "error_message",
                    "2": "message"
                }
            },
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010d882",
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "code": "\n\n\nvoid print_error_message_0010911f(undefined8 error_message)\n\n{\n  char *format_string;\n  \n  format_string = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,format_string,error_message);\n  return;\n}\n\n",
            "current_name": "print_error_message_0010911f",
            "entrypoint": "0x0010911f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "__format": "format_string",
                "dcgettext": "get_localized_string",
                "fprintf": "print_to_stderr",
                "param_1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010914e": {
            "additional_data": {
                "FUN_0010914e": {
                    "1": "find_named_type_by_compilation_unit",
                    "30": "find_named_type"
                },
                "auVar7": {
                    "1": "result_buffer",
                    "19": "result",
                    "8": "return_value"
                },
                "iVar2": {
                    "1": "str_cmp_result",
                    "2": "result",
                    "26": "comparison_result"
                },
                "lVar1": {
                    "1": "current_cu",
                    "10": "current_unit",
                    "15": "current_compilation_unit",
                    "2": "compilation_unit"
                },
                "lVar5": {
                    "1": "ptr2",
                    "2": "node_ptr",
                    "4": "node"
                },
                "param_1": {
                    "1": "binary",
                    "24": "compilation_unit"
                },
                "param_2": {
                    "10": "name",
                    "21": "type_name"
                },
                "param_3": {
                    "1": "output1",
                    "2": "unused_param",
                    "3": "param3",
                    "5": "param_3",
                    "9": "stream"
                },
                "param_4": {
                    "1": "unused_param",
                    "2": "default_value",
                    "3": "param4",
                    "4": "result",
                    "6": "unused_param_2",
                    "8": "format"
                },
                "puVar4": {
                    "1": "var_ptr",
                    "2": "ptr1",
                    "4": "current_item",
                    "6": "current_node",
                    "7": "current_entry"
                },
                "puVar6": {
                    "1": "loop_node",
                    "2": "unit_entry",
                    "3": "ptr2"
                },
                "uVar3": {
                    "1": "gettext_result",
                    "2": "message",
                    "24": "error_message",
                    "3": "error_msg"
                }
            },
            "called": [
                "dcgettext",
                "fprintf",
                "strcmp"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010d559",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nundefined  [16] find_named_type_0010914e(long compilation_unit,char *type_name,undefined8 stream,undefined8 format)\n\n{\n  long current_compilation_unit;\n  int comparison_result;\n  undefined8 error_message;\n  undefined8 *current_entry;\n  long node;\n  undefined8 *ptr2;\n  undefined result [16];\n  \n  current_compilation_unit = *(long *)(compilation_unit + 8);\n  if (current_compilation_unit == 0) {\n    error_message = dcgettext(0,\"debug_find_named_type_0010914e: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  else {\n    for (node = *(long *)(compilation_unit + 0x20); node != 0; node = *(long *)(node + 8)) {\n      if (*(undefined8 **)(node + 0x28) != (undefined8 *)0x0) {\n        for (current_entry = (undefined8 *)**(undefined8 **)(node + 0x28); current_entry != (undefined8 *)0x0;\n            current_entry = (undefined8 *)*current_entry) {\n          if (*(int *)((long)current_entry + 0x14) == 0) {\n            if (*(char *)current_entry[1] == *type_name) {\n              comparison_result = strcmp((char *)current_entry[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (ptr2 = *(undefined8 **)(current_compilation_unit + 8); ptr2 != (undefined8 *)0x0;\n        ptr2 = (undefined8 *)*ptr2) {\n      if ((undefined8 *)ptr2[2] != (undefined8 *)0x0) {\n        for (current_entry = *(undefined8 **)(undefined8 *)ptr2[2]; current_entry != (undefined8 *)0x0;\n            current_entry = (undefined8 *)*current_entry) {\n          if (*(int *)((long)current_entry + 0x14) == 0) {\n            if (*(char *)current_entry[1] == *type_name) {\n              comparison_result = strcmp((char *)current_entry[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  error_message = 0;\nLAB_00109223:\n  result._8_8_ = format;\n  result._0_8_ = error_message;\n  return result;\nLAB_00109216:\n  error_message = current_entry[4];\n  goto LAB_00109223;\n}\n\n",
            "current_name": "find_named_type_0010914e",
            "entrypoint": "0x0010914e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "auVar7": "result",
                "iVar2": "comparison_result",
                "lVar1": "current_compilation_unit",
                "lVar5": "node",
                "param_1": "compilation_unit",
                "param_2": "type_name",
                "param_3": "stream",
                "param_4": "format",
                "puVar4": "current_entry",
                "puVar6": "ptr2",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010922b": {
            "additional_data": {
                "FUN_0010922b": {
                    "1": "compare_parameters",
                    "14": "check_equality",
                    "2": "compare_params",
                    "6": "compare_values"
                },
                "FUN_00112b6e": {
                    "1": "compare_strings"
                },
                "LAB_00109241": {
                    "1": "return_condition"
                },
                "LAB_00109255": {
                    "1": "while_loop"
                },
                "LAB_001092cb": {
                    "1": "break_condition"
                },
                "LAB_00109382": {
                    "1": "return_false"
                },
                "LAB_001093fd": {
                    "1": "label1"
                },
                "LAB_00109540": {
                    "1": "label2"
                },
                "LAB_001095f1": {
                    "1": "label3"
                },
                "LAB_001097af": {
                    "1": "return_true"
                },
                "LAB_001099c4": {
                    "1": "final_result"
                },
                "abort": {
                    "1": "abort"
                },
                "bVar12": {
                    "1": "is_same",
                    "2": "comparison_result",
                    "3": "is_match",
                    "8": "is_equal",
                    "9": "result"
                },
                "cVar11": {
                    "1": "compare_result",
                    "10": "comparison_result",
                    "15": "result",
                    "3": "is_equal"
                },
                "iVar13": {
                    "1": "compare_result",
                    "2": "string_comparison_result",
                    "3": "strcmp_result",
                    "5": "int_var",
                    "8": "comparison_result"
                },
                "lStack_50": {
                    "1": "stack_list1"
                },
                "lVar19": {
                    "1": "local_var4",
                    "3": "index",
                    "5": "long_var4",
                    "8": "offset"
                },
                "lVar22": {
                    "1": "length",
                    "2": "offset2",
                    "5": "long_var5",
                    "7": "offset"
                },
                "lVar6": {
                    "1": "len_data1",
                    "2": "value1",
                    "4": "length1",
                    "8": "long_var1"
                },
                "lVar7": {
                    "1": "value7",
                    "2": "var2",
                    "4": "length2",
                    "8": "long_var2"
                },
                "lVar8": {
                    "1": "array2_ptr2",
                    "2": "length3",
                    "8": "long_var3"
                },
                "local_48": {
                    "1": "local_var",
                    "2": "local_ptr",
                    "3": "local_array2"
                },
                "local_58": {
                    "1": "nested_list_pointer_list_head",
                    "3": "local_pointer2",
                    "4": "local_ptr2"
                },
                "local_70": {
                    "1": "local_pointer",
                    "2": "local_array_ptr",
                    "3": "local_array1",
                    "4": "local_pointer1"
                },
                "param_1": {
                    "1": "data",
                    "10": "param1",
                    "2": "param",
                    "3": "param_1"
                },
                "param_2": {
                    "1": "array_param1",
                    "2": "arr1",
                    "3": "value1",
                    "4": "data1",
                    "6": "array1"
                },
                "param_3": {
                    "1": "object_2",
                    "2": "values2",
                    "3": "object2",
                    "4": "data2",
                    "6": "array2"
                },
                "pcVar10": {
                    "1": "ptr_char2",
                    "2": "char2",
                    "4": "str2",
                    "6": "char_ptr2"
                },
                "pcVar9": {
                    "1": "char_pointer3",
                    "2": "char1",
                    "4": "char_pointer1",
                    "6": "char_ptr1"
                },
                "plStack_50": {
                    "1": "temporary_param1",
                    "2": "ptr_stack",
                    "4": "stack_ptr"
                },
                "plVar18": {
                    "1": "pointer1",
                    "2": "ptr3"
                },
                "plVar20": {
                    "1": "ptr_long_array1",
                    "2": "ptr2"
                },
                "plVar21": {
                    "1": "list3",
                    "2": "ptr3"
                },
                "ppcVar4": {
                    "1": "param4_pointer",
                    "2": "string_pointer1",
                    "3": "ptr_ptr2",
                    "4": "ptr_to_char1"
                },
                "ppcVar5": {
                    "1": "ptr_char2",
                    "2": "string_pointer2",
                    "3": "ptr_ptr3",
                    "4": "ptr_to_char2"
                },
                "pplVar3": {
                    "1": "ptr_to_values1",
                    "2": "array2_ptr",
                    "4": "ptr_ptr1"
                },
                "puVar16": {
                    "1": "first_nested_list_pointer",
                    "6": "pointer1",
                    "9": "ptr1"
                },
                "puVar17": {
                    "1": "pointer_var2",
                    "6": "pointer2",
                    "9": "ptr2"
                },
                "puVar18": {
                    "1": "pointer_pointer1"
                },
                "puVar19": {
                    "1": "pointer_pointer2"
                },
                "strcmp": {
                    "1": "compare_strings"
                },
                "uVar1": {
                    "1": "length1",
                    "10": "value1",
                    "2": "param1_value",
                    "4": "type1"
                },
                "uVar14": {
                    "1": "string1",
                    "2": "u_var14",
                    "3": "u_var1",
                    "6": "result1"
                },
                "uVar15": {
                    "1": "second_nested_string_list_comparison",
                    "2": "hash2",
                    "3": "u_var2",
                    "6": "result2"
                },
                "uVar2": {
                    "1": "elem2",
                    "10": "value2",
                    "2": "param2_value",
                    "4": "type2"
                }
            },
            "called": [
                "FUN_00112b6e",
                "abort",
                "FUN_0010922b",
                "strcmp"
            ],
            "calling": [
                "FUN_0010c7a0",
                "FUN_0010922b"
            ],
            "code": "\nbyte check_equality_0010922b(long param1,long *array1,long *array2)\n\n{\n  uint value1;\n  uint value2;\n  long **pointer_pointer1;\n  char **ptr_to_char1;\n  char **ptr_to_char2;\n  long long_var1;\n  long long_var2;\n  long long_var3;\n  char *char_ptr1;\n  char *char_ptr2;\n  char result;\n  byte result;\n  int comparison_result;\n  undefined8 result1;\n  undefined8 result2;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  long *array_ptr1;\n  long offset;\n  long *long_ptr2;\n  long *long_ptr3;\n  long offset;\n  long *local_pointer1;\n  undefined8 *local_ptr2;\n  long *stack_ptr;\n  long *local_array2;\n  \n  array_ptr1 = array2;\n  if (array1 == (long *)0x0) {\nreturn_condition:\n    return array2 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (array_ptr1 == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    value1 = *(uint *)array1;\n    if (value1 == 1) goto code_r0x00109263;\n    while (value2 = *(uint *)array2, value2 == 1) {\n      array2 = **(long ***)array2[2];\n      if (array2 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (array1 == array2) {\n      return true;\n    }\n    if (value1 != 0x16) break;\n    if (value2 != 0x17) goto break_condition;\n    array1 = *(long **)(array1[2] + 8);\n    if (array1 == (long *)0x0) goto return_condition;\n  }\n  if ((value1 == 0x17) && (value2 == 0x16)) {\n    array2 = *(long **)(array2[2] + 8);\n    array_ptr1 = array2;\n    goto joined_r0x00109255;\n  }\nbreak_condition:\n  if (*array1 != *array2) {\n    return false;\n  }\n  if (value1 == 3) {\n    return *(char *)(array1 + 2) == *(char *)(array2 + 2);\n  }\n  if (value1 < 4) {\n    if (value1 == 2) {\n      return true;\n    }\n  }\n  else if (value1 - 4 < 3) {\n    return true;\n  }\n  local_ptr2 = *(undefined8 **)(param1 + 0x58);\n  for (ptr2 = local_ptr2; ptr2 != (undefined8 *)0x0; ptr2 = (undefined8 *)*ptr2) {\n    if (((long *)ptr2[1] == array1) && ((long *)ptr2[2] == array2)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(param1 + 0x58) = &local_ptr2;\n  stack_ptr = array1;\n  local_array2 = array2;\n  switch(value1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    array_ptr1 = (long *)array1[2];\n    pointer_pointer1 = (long **)array2[2];\n    if (array_ptr1 == (long *)0x0) {\n      result = pointer_pointer1 == (long **)0x0;\n      goto final_result;\n    }\n    if (pointer_pointer1 == (long **)0x0) goto return_false;\n    if ((*(uint *)(param1 + 0x38) < *(uint *)((long)array_ptr1 + 0xc)) &&\n       (*(uint *)((long)array_ptr1 + 0xc) == *(uint *)((long)pointer_pointer1 + 0xc))) goto return_true;\n    ptr2 = (undefined8 *)*array_ptr1;\n    local_pointer1 = *pointer_pointer1;\n    if (((ptr2 == (undefined8 *)0x0) == (local_pointer1 == (long *)0x0)) &&\n       ((((array_ptr1[2] == 0) == (pointer_pointer1[2] == (long *)0x0) &&\n         ((array_ptr1[3] == 0) == (pointer_pointer1[3] == (long *)0x0))) &&\n        ((array_ptr1[4] == 0) == (pointer_pointer1[4] == (long *)0x0))))) {\n      if (ptr2 == (undefined8 *)0x0) {\nlabel1:\n        if ((array_ptr1[4] != 0) &&\n           (result = check_equality_0010922b(param1,array_ptr1[4],pointer_pointer1[4]), result == '\\0'))\n        goto return_false;\n        long_ptr3 = (long *)array_ptr1[2];\n        if (long_ptr3 == (long *)0x0) {\nlabel2:\n          ptr2 = (undefined8 *)array_ptr1[3];\n          if (ptr2 == (undefined8 *)0x0) goto return_true;\n          array_ptr1 = pointer_pointer1[3];\n          while( true ) {\n            ptr_to_char2 = (char **)*ptr2;\n            if (ptr_to_char2 == (char **)0x0) {\n              result = *array_ptr1 == 0;\n              goto final_result;\n            }\n            ptr_to_char1 = (char **)*array_ptr1;\n            if (ptr_to_char1 == (char **)0x0) break;\n            if ((**ptr_to_char2 != **ptr_to_char1) || (comparison_result = strcmp(*ptr_to_char2,*ptr_to_char1), comparison_result != 0))\n            break;\n            char_ptr1 = ptr_to_char2[1];\n            char_ptr2 = ptr_to_char1[1];\n            if ((char_ptr1 == (char *)0x0) != (char_ptr2 == (char *)0x0)) break;\n            if (char_ptr1 != (char *)0x0) {\n              offset = 0;\n              while( true ) {\n                ptr_to_char2 = *(char ***)(char_ptr1 + offset);\n                ptr_to_char1 = *(char ***)(char_ptr2 + offset);\n                if (ptr_to_char2 == (char **)0x0) break;\n                if (ptr_to_char1 == (char **)0x0) goto return_false;\n                if ((((**ptr_to_char2 != **ptr_to_char1) ||\n                     ((((ulong)ptr_to_char2[2] ^ (ulong)ptr_to_char1[2]) & 0xffffffffffff) != 0)) ||\n                    ((ptr_to_char2[3] != ptr_to_char1[3] ||\n                     ((((ptr_to_char2[4] == (char *)0x0) != (ptr_to_char1[4] == (char *)0x0) ||\n                       (comparison_result = strcmp(*ptr_to_char2,*ptr_to_char1), comparison_result != 0)) ||\n                      (result = check_equality_0010922b(param1,ptr_to_char2[1],ptr_to_char1[1]), result == '\\0')))))) ||\n                   ((ptr_to_char2[4] != (char *)0x0 &&\n                    (result = check_equality_0010922b(param1,ptr_to_char2[4],ptr_to_char1[4]), result == '\\0'))))\n                goto return_false;\n                offset = offset + 8;\n              }\n              if (ptr_to_char1 == (char **)0x0) goto label3;\n              break;\n            }\nlabel3:\n            ptr2 = ptr2 + 1;\n            array_ptr1 = array_ptr1 + 1;\n          }\n        }\n        else {\n          long_ptr2 = pointer_pointer1[2];\n          for (; ptr2 = (undefined8 *)*long_ptr3, ptr2 != (undefined8 *)0x0;\n              long_ptr3 = long_ptr3 + 1) {\n            ptr1 = (undefined8 *)*long_ptr2;\n            if ((((ptr1 == (undefined8 *)0x0) ||\n                 (((ptr2[1] ^ ptr1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(ptr2 + 2) != *(int *)(ptr1 + 2))) ||\n               (result = check_equality_0010922b(param1,*ptr2,*ptr1), result == '\\0'))\n            goto return_false;\n            long_ptr2 = long_ptr2 + 1;\n          }\n          if (*long_ptr2 == 0) goto label2;\n        }\n      }\n      else {\n        for (; ptr_to_char2 = (char **)*ptr2, ptr_to_char2 != (char **)0x0; ptr2 = ptr2 + 1) {\n          ptr_to_char1 = (char **)*local_pointer1;\n          if (ptr_to_char1 == (char **)0x0) goto return_false;\n          char_ptr1 = *ptr_to_char1;\n          char_ptr2 = *ptr_to_char2;\n          if ((*char_ptr2 != *char_ptr1) ||\n             ((((ulong)ptr_to_char2[2] ^ (ulong)ptr_to_char1[2]) & 0xffffffffff) != 0)) goto return_false;\n          if (*(char *)((long)ptr_to_char2 + 0x14) == '\\0') {\n            if (ptr_to_char2[3] == ptr_to_char1[3]) goto LAB_00109480;\n            goto return_false;\n          }\n          comparison_result = strcmp(ptr_to_char2[3],ptr_to_char1[3]);\n          if (comparison_result != 0) goto return_false;\nLAB_00109480:\n          comparison_result = strcmp(char_ptr2,char_ptr1);\n          if (((comparison_result != 0) || (ptr_to_char2[1] == (char *)0x0)) || (ptr_to_char1[1] == (char *)0x0))\n          goto return_false;\n          result1 = FUN_00112b6e(ptr_to_char1[1],0);\n          result2 = FUN_00112b6e(ptr_to_char2[1],0);\n          result = check_equality_0010922b(param1,result2,result1);\n          if (result == '\\0') goto return_false;\n          local_pointer1 = local_pointer1 + 1;\n        }\n        if (*local_pointer1 == 0) goto label1;\n      }\n    }\n    goto return_false;\n  case 0xb:\n    array_ptr1 = (long *)array1[2];\n    long_ptr3 = (long *)array2[2];\n    if (array_ptr1 == (long *)0x0) {\n      result = long_ptr3 == (long *)0x0;\n      goto final_result;\n    }\n    if (long_ptr3 == (long *)0x0) goto return_false;\n    offset = *array_ptr1;\n    long_var1 = *long_ptr3;\n    offset = 0;\n    long_var2 = array_ptr1[1];\n    long_var3 = long_ptr3[1];\n    do {\n      char_ptr1 = *(char **)(offset + offset);\n      if (char_ptr1 == (char *)0x0) {\n        result = *(long *)(long_var1 + offset) == 0;\n        goto LAB_001099c1;\n      }\n      char_ptr2 = *(char **)(long_var1 + offset);\n      if (((char_ptr2 == (char *)0x0) || (*char_ptr1 != *char_ptr2)) ||\n         (*(long *)(long_var2 + offset) != *(long *)(long_var3 + offset))) break;\n      comparison_result = strcmp(char_ptr1,char_ptr2);\n      offset = offset + 8;\n    } while (comparison_result == 0);\nLAB_00109964:\n    result = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    result = check_equality_0010922b(param1,array1[2],array2[2]);\n    goto final_result;\n  case 0xd:\n    if ((*(char *)((undefined8 *)array1[2] + 2) == *(char *)((undefined8 *)array2[2] + 2)) &&\n       (result = check_equality_0010922b(param1,*(undefined8 *)array1[2],*(undefined8 *)array2[2]),\n       result != '\\0')) {\n      array_ptr1 = *(long **)(array1[2] + 8);\n      long_ptr3 = *(long **)(array2[2] + 8);\n      if ((array_ptr1 == (long *)0x0) == (long_ptr3 == (long *)0x0)) {\n        if (array_ptr1 == (long *)0x0) goto return_true;\n        while (((*array_ptr1 != 0 && (*long_ptr3 != 0)) &&\n               (result = check_equality_0010922b(param1), result != '\\0'))) {\n          array_ptr1 = array_ptr1 + 1;\n          long_ptr3 = long_ptr3 + 1;\n        }\nLAB_0010995d:\n        if (*array_ptr1 != 0) goto LAB_00109964;\n        result = *long_ptr3 == 0;\n        break;\n      }\n    }\n    goto return_false;\n  case 0xf:\n    ptr2 = (undefined8 *)array2[2];\n    ptr1 = (undefined8 *)array1[2];\n    result = 0;\n    if ((ptr1[1] == ptr2[1]) && (ptr1[2] == ptr2[2])) {\nLAB_00109862:\n      result = check_equality_0010922b(param1,*ptr1,*ptr2);\n    }\n    break;\n  case 0x10:\n    ptr2 = (undefined8 *)array2[2];\n    ptr1 = (undefined8 *)array1[2];\n    result = 0;\n    if (((ptr1[2] == ptr2[2]) && (ptr1[3] == ptr2[3])) &&\n       (*(char *)(ptr1 + 4) == *(char *)(ptr2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    ptr2 = (undefined8 *)array2[2];\n    ptr1 = (undefined8 *)array1[2];\n    result = 0;\n    if (*(char *)(ptr1 + 1) == *(char *)(ptr2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    result = check_equality_0010922b(param1,*(undefined8 *)array1[2],*(undefined8 *)array2[2]);\n    result = 0;\n    if (result != '\\0') {\n      result = check_equality_0010922b(param1,*(undefined8 *)(array1[2] + 8),*(undefined8 *)(array2[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)array1[2] + 3) == *(char *)((undefined8 *)array2[2] + 3)) &&\n        (result = check_equality_0010922b(param1,*(undefined8 *)array1[2],*(undefined8 *)array2[2]),\n        result != '\\0')) &&\n       (result = check_equality_0010922b(param1,*(undefined8 *)(array1[2] + 8),\n                              *(undefined8 *)(array2[2] + 8)), result != '\\0')) {\n      array_ptr1 = *(long **)(array1[2] + 0x10);\n      long_ptr3 = *(long **)(array2[2] + 0x10);\n      if ((array_ptr1 == (long *)0x0) == (long_ptr3 == (long *)0x0)) {\n        if (array_ptr1 != (long *)0x0) {\n          while (((*array_ptr1 != 0 && (*long_ptr3 != 0)) &&\n                 (result = check_equality_0010922b(param1), result != '\\0'))) {\n            array_ptr1 = array_ptr1 + 1;\n            long_ptr3 = long_ptr3 + 1;\n          }\n          goto LAB_0010995d;\n        }\nreturn_true:\n        result = 1;\n        goto final_result;\n      }\n    }\nreturn_false:\n    result = 0;\n    goto final_result;\n  case 0x16:\n  case 0x17:\n    array_ptr1 = (long *)array2[2];\n    long_ptr3 = (long *)array1[2];\n    comparison_result = strcmp(*(char **)(*long_ptr3 + 8),*(char **)(*array_ptr1 + 8));\n    result = 0;\n    if (comparison_result == 0) {\n      result = check_equality_0010922b(param1,long_ptr3[1],array_ptr1[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  result = result & 1;\nfinal_result:\n  *(undefined8 **)(param1 + 0x58) = local_ptr2;\n  return result;\ncode_r0x00109263:\n  array1 = **(long ***)array1[2];\n  array_ptr1 = array1;\n  goto joined_r0x00109255;\n}\n\n",
            "current_name": "check_equality_0010922b",
            "entrypoint": "0x0010922b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010922b": "check_equality_0010922b",
                "LAB_00109241": "return_condition",
                "LAB_001092cb": "break_condition",
                "LAB_00109382": "return_false",
                "LAB_001093fd": "label1",
                "LAB_00109540": "label2",
                "LAB_001095f1": "label3",
                "LAB_001097af": "return_true",
                "LAB_001099c4": "final_result",
                "bVar12": "result",
                "cVar11": "result",
                "iVar13": "comparison_result",
                "lStack_50": "stack_list1",
                "lVar19": "offset",
                "lVar22": "offset",
                "lVar6": "long_var1",
                "lVar7": "long_var2",
                "lVar8": "long_var3",
                "local_48": "local_array2",
                "local_58": "local_ptr2",
                "local_70": "local_pointer1",
                "param_1": "param1",
                "param_2": "array1",
                "param_3": "array2",
                "pcVar10": "char_ptr2",
                "pcVar9": "char_ptr1",
                "plStack_50": "stack_ptr",
                "plVar18": "array_ptr1",
                "plVar20": "long_ptr2",
                "plVar21": "long_ptr3",
                "ppcVar4": "ptr_to_char1",
                "ppcVar5": "ptr_to_char2",
                "pplVar3": "pointer_pointer1",
                "puVar16": "ptr1",
                "puVar17": "ptr2",
                "strcmp": "compare_strings",
                "uVar1": "value1",
                "uVar14": "result1",
                "uVar15": "result2",
                "uVar2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109a0b": {
            "additional_data": {
                "FUN_00109a0b": {
                    "1": "copy_byte_array",
                    "13": "copy_and_null_terminate",
                    "7": "copy_and_null_terminate_string"
                },
                "bVar4": {
                    "1": "multiplier",
                    "12": "offset",
                    "3": "flag",
                    "8": "increment"
                },
                "lVar2": {
                    "1": "iteration_count",
                    "11": "index",
                    "2": "count",
                    "4": "counter",
                    "7": "i"
                },
                "param_1": {
                    "1": "source_data",
                    "23": "source",
                    "3": "source_array",
                    "4": "source_string"
                },
                "param_2": {
                    "1": "source_array_length",
                    "2": "source_length",
                    "25": "length"
                },
                "puVar1": {
                    "1": "new_buffer",
                    "17": "destination",
                    "2": "copied_array",
                    "7": "copied_string"
                },
                "puVar3": {
                    "1": "current_destination",
                    "11": "dest_ptr",
                    "2": "current_dest",
                    "3": "destination_ptr",
                    "4": "destination"
                }
            },
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_0010afd5",
                "FUN_0010c95e",
                "FUN_0011173a",
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "code": "\nvoid copy_and_null_terminate_00109a0b(undefined *source,int length)\n\n{\n  undefined *destination;\n  long index;\n  undefined *dest_ptr;\n  byte offset;\n  \n  offset = 0;\n  destination = (undefined *)xmalloc((long)(length + 1));\n  dest_ptr = destination;\n  for (index = (long)length; index != 0; index = index + -1) {\n    *dest_ptr = *source;\n    source = source + (ulong)offset * -2 + 1;\n    dest_ptr = dest_ptr + (ulong)offset * -2 + 1;\n  }\n  destination[length] = 0;\n  return;\n}\n\n",
            "current_name": "copy_and_null_terminate_00109a0b",
            "entrypoint": "0x00109a0b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_00109a0b",
                "bVar4": "offset",
                "lVar2": "index",
                "param_1": "source",
                "param_2": "length",
                "puVar1": "destination",
                "puVar3": "dest_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109a32": {
            "additional_data": {
                "FUN_00109a32": {
                    "1": "parse_numeric_string_and_update_status",
                    "2": "parse_and_convert",
                    "3": "parse_unsigned_long",
                    "9": "parse_numeric_string"
                },
                "__base": {
                    "1": "base"
                },
                "__endptr": {
                    "1": "end_ptr"
                },
                "__errno_location": {
                    "1": "get_error_location"
                },
                "__nptr": {
                    "1": "str",
                    "2": "current_position",
                    "4": "input_string",
                    "5": "numeric_string",
                    "8": "current_char"
                },
                "auVar4": {
                    "1": "return_data",
                    "13": "return_value",
                    "14": "result"
                },
                "dcgettext": {
                    "1": "get_translation"
                },
                "param_1": {
                    "1": "str_ptr",
                    "12": "input_string",
                    "2": "string_pointer",
                    "3": "string",
                    "9": "string_ptr"
                },
                "param_2": {
                    "1": "overflow_ptr",
                    "2": "numeric_overflow",
                    "6": "is_overflow",
                    "8": "error_flag"
                },
                "param_3": {
                    "1": "end",
                    "14": "end_of_string",
                    "2": "end_pointer",
                    "3": "end_string"
                },
                "param_4": {
                    "1": "unknown",
                    "2": "unused_param",
                    "6": "param_4",
                    "7": "base"
                },
                "param_5": {
                    "1": "result_ptr",
                    "2": "user_data",
                    "3": "unused_param2",
                    "4": "result",
                    "6": "param_5"
                },
                "piVar1": {
                    "1": "error_ptr",
                    "19": "errno_ptr",
                    "2": "error"
                },
                "strtoul": {
                    "1": "string_to_unsigned_long"
                },
                "uVar2": {
                    "1": "parsed_result",
                    "10": "parsed_value",
                    "2": "numeric_value",
                    "3": "parsed_number",
                    "7": "result",
                    "8": "converted_value"
                },
                "uVar3": {
                    "1": "localized_error",
                    "2": "error_msg",
                    "24": "error_message"
                }
            },
            "called": [
                "FUN_00108fe8",
                "strtoul",
                "__errno_location",
                "dcgettext"
            ],
            "calling": [
                "FUN_00109ab1",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16]\nparse_numeric_string_00109a32(char **input_string,undefined *error_flag,char *end_of_string,undefined8 base,undefined8 param_5)\n\n{\n  char *current_char;\n  int *errno_ptr;\n  ulong parsed_value;\n  undefined8 error_message;\n  undefined result [16];\n  \n  if (error_flag != (undefined *)0x0) {\n    *error_flag = 0;\n  }\n  current_char = *input_string;\n  if ((current_char < end_of_string) && (*current_char != '\\0')) {\n    errno_ptr = __errno_location();\n    *errno_ptr = 0;\n    parsed_value = strtoul(current_char,input_string,0);\n    if ((parsed_value != 0xffffffffffffffff) || (*errno_ptr == 0)) goto LAB_00109aa9;\n    if (error_flag == (undefined *)0x0) {\n      error_message = dcgettext(0,\"numeric overflow\",5);\n      FUN_00108fe8(current_char,error_message);\n    }\n    else {\n      *error_flag = 1;\n    }\n  }\n  parsed_value = 0;\nLAB_00109aa9:\n  result._8_8_ = param_5;\n  result._0_8_ = parsed_value;\n  return result;\n}\n\n",
            "current_name": "parse_numeric_string_00109a32",
            "entrypoint": "0x00109a32",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109a32": "parse_numeric_string_00109a32",
                "__errno_location": "get_error_location",
                "__nptr": "current_char",
                "auVar4": "result",
                "dcgettext": "get_translation",
                "param_1": "input_string",
                "param_2": "error_flag",
                "param_3": "end_of_string",
                "param_4": "base",
                "piVar1": "errno_ptr",
                "strtoul": "string_to_unsigned_long",
                "uVar2": "parsed_value",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109ab1": {
            "additional_data": {
                "*param_1": {
                    "1": "input"
                },
                "*param_2": {
                    "1": "output"
                },
                "FUN_00108fb9": {
                    "2": "free_memory"
                },
                "FUN_00109a32": {
                    "2": "parse_value"
                },
                "FUN_00109ab1": {
                    "1": "parse_function",
                    "16": "parse_function_arguments",
                    "2": "parse_parameters",
                    "3": "parse_arguments"
                },
                "auVar4": {
                    "1": "return_val",
                    "19": "return_value",
                    "2": "result"
                },
                "param_1": {
                    "1": "argument_list",
                    "2": "argument",
                    "3": "input_ptr",
                    "8": "input_string"
                },
                "param_1[0]": {
                    "1": "current_arg_char_ptr"
                },
                "param_2": {
                    "1": "values_array",
                    "2": "output_parameters",
                    "3": "result",
                    "4": "output_ptr",
                    "6": "output_values"
                },
                "param_2[0]": {
                    "1": "arg_1"
                },
                "param_2[1]": {
                    "1": "arg_2"
                },
                "param_3": {
                    "1": "unused_param_3",
                    "15": "param_3",
                    "2": "param3"
                },
                "param_4": {
                    "1": "unused_param",
                    "16": "param_4",
                    "2": "arg_2"
                },
                "param_5": {
                    "1": "unused_param_3",
                    "18": "param_5",
                    "2": "arg5"
                },
                "pcVar2": {
                    "1": "str",
                    "26": "current_char"
                },
                "uVar1": {
                    "1": "temp_value",
                    "2": "value1",
                    "4": "parsed_value",
                    "5": "result",
                    "6": "result_1",
                    "8": "result1"
                },
                "uVar3": {
                    "1": "combined_result",
                    "2": "concatenated_result",
                    "5": "return_value",
                    "7": "result2",
                    "8": "result"
                }
            },
            "called": [
                "FUN_00108fb9",
                "FUN_00109a32"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16]\nparse_function_arguments_00109ab1(char **input_string,undefined4 *output,undefined8 param_3,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined4 result1;\n  char *current_char;\n  undefined8 result;\n  undefined return_value [16];\n  \n  current_char = *input_string;\n  if (*current_char == '(') {\n    *input_string = current_char + 1;\n    result1 = FUN_00109a32(input_string,0);\n    *output = result1;\n    if (**input_string == ',') {\n      *input_string = *input_string + 1;\n      result1 = FUN_00109a32(input_string,0,param_3);\n      arg_2 = result1;\n      if (**input_string == ')') {\n        current_char = *input_string + 1;\n        *input_string = current_char;\n        goto LAB_00109b25;\n      }\n    }\n    FUN_00108fb9(current_char);\n    result = 0;\n  }\n  else {\n    *output = 0;\n    current_char = (char *)FUN_00109a32(input_string,0);\n    arg_2 = (int)current_char;\nLAB_00109b25:\n    result = CONCAT71((int7)((ulong)current_char >> 8),1);\n  }\n  return_value._8_8_ = param_5;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "current_name": "parse_function_arguments_00109ab1",
            "entrypoint": "0x00109ab1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109ab1": "parse_function_arguments_00109ab1",
                "auVar4": "return_value",
                "param_1": "input_string",
                "param_2": "output",
                "param_2[1]": "arg_2",
                "pcVar2": "current_char",
                "uVar1": "result1",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109b2f": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "extract_and_free_next_item",
                    "2": "extract_next_pointer",
                    "3": "extract_ptr_and_free",
                    "7": "extract_and_free_ptr"
                },
                "__ptr": {
                    "1": "current_item",
                    "2": "current_node",
                    "3": "ptr_to_free",
                    "8": "ptr"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "binary_address",
                    "3": "ptr_address",
                    "4": "input_param"
                },
                "puVar1": {
                    "1": "extracted_data",
                    "2": "next_node",
                    "3": "extracted_ptr",
                    "4": "next_ptr",
                    "5": "return_value",
                    "6": "extracted_value"
                }
            },
            "called": [
                "free"
            ],
            "calling": [
                "FUN_0010abdd",
                "FUN_0010ebb0",
                "FUN_0010a377",
                "FUN_0010a2b9",
                "FUN_0010eafe",
                "FUN_0010a77a",
                "FUN_0010a0e9",
                "FUN_0010a83e",
                "FUN_0010e9a0",
                "FUN_0010a94e",
                "FUN_0010e918",
                "FUN_0010a424",
                "FUN_0010ba08",
                "FUN_0010e7c2",
                "FUN_0010b948",
                "FUN_00109ed3",
                "FUN_0010e6a8",
                "FUN_0010e5db",
                "FUN_0010a181",
                "FUN_0010aa53"
            ],
            "code": "\nundefined8 * extract_and_free_ptr_00109b2f(long input_param)\n\n{\n  undefined8 *ptr;\n  undefined8 *extracted_value;\n  \n  ptr = *(undefined8 **)(input_param + 0x60);\n  if (ptr != (undefined8 *)0x0) {\n    extracted_value = (undefined8 *)ptr[1];\n    *(undefined8 *)(input_param + 0x60) = *ptr;\n    release_memory(ptr);\n    return extracted_value;\n  }\n  return ptr;\n}\n\n",
            "current_name": "extract_and_free_ptr_00109b2f",
            "entrypoint": "0x00109b2f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109b2f": "extract_and_free_ptr_00109b2f",
                "__ptr": "ptr",
                "free": "release_memory",
                "param_1": "input_param",
                "puVar1": "extracted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109b52": {
            "additional_data": {
                "FUN_00109b52": {
                    "1": "initialize_structure",
                    "3": "allocate_and_copy",
                    "4": "create_new_entry",
                    "6": "initialize_data",
                    "9": "initialize_data_structure"
                },
                "param_1": {
                    "1": "entry_list",
                    "2": "data_structure_ptr",
                    "4": "data_structure_pointer",
                    "5": "data_structure"
                },
                "param_2": {
                    "1": "string_data",
                    "11": "source_string",
                    "2": "str",
                    "3": "source"
                },
                "param_3": {
                    "1": "ptr",
                    "2": "data",
                    "3": "additional_data",
                    "8": "param3"
                },
                "param_4": {
                    "1": "param4_value",
                    "2": "char_param",
                    "8": "param4",
                    "9": "flag"
                },
                "param_5": {
                    "1": "var_5",
                    "2": "param_5",
                    "3": "int_param",
                    "4": "status",
                    "5": "value",
                    "8": "param5"
                },
                "puVar2": {
                    "1": "new_data_struct",
                    "2": "new_data_structure",
                    "4": "new_entry",
                    "7": "allocated_memory"
                },
                "uVar1": {
                    "1": "temp1",
                    "2": "old_data",
                    "3": "old_entry",
                    "4": "previous_value"
                },
                "uVar3": {
                    "1": "copied_string",
                    "17": "duplicated_string",
                    "2": "str_copy"
                },
                "xmalloc": {
                    "6": "allocate_memory"
                },
                "xstrdup": {
                    "6": "duplicate_string"
                }
            },
            "called": [
                "xmalloc",
                "xstrdup"
            ],
            "calling": [
                "FUN_0010a377",
                "FUN_0010a2b9",
                "FUN_0010a69a",
                "FUN_0010a77a",
                "FUN_0010a0e9",
                "FUN_0010b800",
                "FUN_00109d97",
                "FUN_00109e76",
                "FUN_0010a424",
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_00109cf4",
                "FUN_00109ed3",
                "FUN_00109dfe",
                "FUN_0010a181"
            ],
            "code": "\nundefined initialize_data_structure_00109b52(long data_structure,undefined8 source_string,undefined8 param3,undefined flag,\n                      undefined4 param5)\n\n{\n  undefined8 previous_value;\n  undefined8 *allocated_memory;\n  undefined8 duplicated_string;\n  \n  allocated_memory = (undefined8 *)xmalloc(0x40);\n  duplicated_string = xstrdup(source_string);\n  allocated_memory[2] = param3;\n  *(undefined (*) [16])(allocated_memory + 4) = ZEXT816(0);\n  *(undefined (*) [16])(allocated_memory + 6) = ZEXT816(0);\n  previous_value = *(undefined8 *)(data_structure + 0x60);\n  *(undefined *)((long)allocated_memory + 0x1c) = flag;\n  *(undefined4 *)(allocated_memory + 3) = param5;\n  *(undefined8 **)(data_structure + 0x60) = allocated_memory;\n  *allocated_memory = previous_value;\n  allocated_memory[1] = duplicated_string;\n  return 1;\n}\n\n",
            "current_name": "initialize_data_structure_00109b52",
            "entrypoint": "0x00109b52",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109b52": "initialize_data_structure_00109b52",
                "param_1": "data_structure",
                "param_2": "source_string",
                "param_3": "param3",
                "param_4": "flag",
                "param_5": "param5",
                "puVar2": "allocated_memory",
                "uVar1": "previous_value",
                "uVar3": "duplicated_string",
                "xmalloc": "allocate_memory",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109bbb": {
            "additional_data": {
                "FUN_00109bbb": {
                    "1": "string_terminating_semicolon",
                    "10": "append_semicolon_to_string",
                    "2": "check_and_update_string",
                    "3": "add_semicolon_to_end_of_string",
                    "4": "add_semicolon_to_string",
                    "5": "check_and_append_semicolon"
                },
                "__s": {
                    "1": "str",
                    "11": "string_ptr",
                    "2": "string_to_modify",
                    "3": "string_to_append",
                    "7": "string"
                },
                "param_1": {
                    "1": "data",
                    "2": "input_data",
                    "3": "input_string",
                    "4": "base_address",
                    "5": "input_address"
                },
                "sVar1": {
                    "1": "length",
                    "22": "string_length"
                }
            },
            "called": [
                "strlen"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nbool append_semicolon_to_string_00109bbb(long input_address)\n\n{\n  char *string_ptr;\n  size_t string_length;\n  \n  if (*(long *)(input_address + 0x60) != 0) {\n    string_ptr = *(char **)(*(long *)(input_address + 0x60) + 0x30);\n    if (string_ptr != (char *)0x0) {\n      string_length = strlen(string_ptr);\n      *(undefined2 *)(string_ptr + string_length) = 0x3b;\n    }\n    return string_ptr != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "current_name": "append_semicolon_to_string_00109bbb",
            "entrypoint": "0x00109bbb",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109bbb": "append_semicolon_to_string_00109bbb",
                "__s": "string_ptr",
                "param_1": "input_address",
                "sVar1": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109be3": {
            "additional_data": {
                "FUN_00109be3": {
                    "1": "expand_and_add_to_buffer",
                    "2": "expand_and_insert_value",
                    "3": "append_data_to_array",
                    "4": "append_data"
                },
                "param_1": {
                    "1": "array_ptr",
                    "2": "table",
                    "3": "data",
                    "7": "buffer",
                    "9": "array"
                },
                "param_2": {
                    "1": "record",
                    "10": "data",
                    "3": "entry",
                    "7": "element"
                },
                "param_3": {
                    "1": "additional_info",
                    "11": "size",
                    "2": "count",
                    "3": "length",
                    "8": "value"
                },
                "puVar2": {
                    "1": "ptr_to_element",
                    "2": "insertion_point",
                    "3": "element_pointer",
                    "4": "new_element"
                },
                "uVar1": {
                    "1": "new_data",
                    "2": "new_array_pointer",
                    "3": "new_array_ptr",
                    "4": "new_array",
                    "6": "new_buffer",
                    "7": "realloc_result"
                },
                "uVar3": {
                    "1": "current_size_of_buffer",
                    "16": "current_size",
                    "2": "current_index",
                    "3": "buffer_size",
                    "5": "array_size"
                },
                "xrealloc": {
                    "1": "resize_table"
                }
            },
            "called": [
                "xrealloc"
            ],
            "calling": [
                "FUN_0010d7d4",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 append_data_00109be3(long array,undefined8 data,undefined4 size)\n\n{\n  undefined8 realloc_result;\n  undefined8 *new_element;\n  uint current_size;\n  \n  if (*(uint *)(array + 0x2c) <= *(uint *)(array + 0x28)) {\n    current_size = *(uint *)(array + 0x2c) + 10;\n    *(uint *)(array + 0x2c) = current_size;\n    realloc_result = xrealloc(*(undefined8 *)(array + 0x20),(ulong)current_size << 4);\n    *(undefined8 *)(array + 0x20) = realloc_result;\n  }\n  current_size = *(uint *)(array + 0x28);\n  new_element = (undefined8 *)((ulong)current_size * 0x10 + *(long *)(array + 0x20));\n  *new_element = data;\n  *(undefined4 *)(new_element + 1) = size;\n  *(uint *)(array + 0x28) = current_size + 1;\n  return CONCAT71((int7)((ulong)new_element >> 8),1);\n}\n\n",
            "current_name": "append_data_00109be3",
            "entrypoint": "0x00109be3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109be3": "append_data_00109be3",
                "param_1": "array",
                "param_2": "data",
                "param_3": "size",
                "puVar2": "new_element",
                "uVar1": "realloc_result",
                "uVar3": "current_size",
                "xrealloc": "resize_table"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109c2e": {
            "additional_data": {
                "FUN_00109c2e": {
                    "1": "expand_buffer_and_set_values",
                    "2": "resize_and_fill_array",
                    "5": "expand_array",
                    "6": "expand_and_initialize_array",
                    "9": "resize_array"
                },
                "auVar7": {
                    "1": "return_val",
                    "15": "return_value",
                    "2": "return_data",
                    "9": "result"
                },
                "bVar6": {
                    "1": "temp_var",
                    "2": "temp_flag",
                    "3": "byte_var",
                    "4": "byte_flag"
                },
                "lVar1": {
                    "1": "new_buffer",
                    "2": "new_array_ptr",
                    "3": "new_array_pointer",
                    "4": "new_array_size",
                    "5": "new_array"
                },
                "lVar3": {
                    "1": "counter",
                    "2": "loop_count",
                    "3": "loop_counter",
                    "4": "remaining_elements",
                    "7": "remaining_size"
                },
                "param_1": {
                    "1": "buffer",
                    "16": "array",
                    "2": "data",
                    "3": "array_ptr",
                    "5": "array_pointer"
                },
                "param_2": {
                    "1": "data",
                    "19": "value",
                    "2": "param_value",
                    "3": "new_value"
                },
                "param_3": {
                    "1": "length",
                    "20": "size",
                    "3": "index",
                    "6": "array_size"
                },
                "param_4": {
                    "1": "status_flag",
                    "30": "flag"
                },
                "param_5": {
                    "1": "data",
                    "2": "data_ptr",
                    "3": "ptr",
                    "4": "status",
                    "5": "result"
                },
                "param_6": {
                    "1": "userdata",
                    "2": "param",
                    "3": "value",
                    "4": "result",
                    "5": "return_value",
                    "7": "data"
                },
                "plVar2": {
                    "1": "element",
                    "2": "array_element",
                    "3": "ptr",
                    "4": "element_pointer"
                },
                "puVar4": {
                    "1": "ptr2",
                    "2": "current_ptr",
                    "3": "current_element",
                    "5": "ptr"
                },
                "uVar5": {
                    "1": "original_size",
                    "18": "current_size",
                    "2": "array_size"
                },
                "xrealloc": {
                    "1": "expand_array"
                }
            },
            "called": [
                "xrealloc"
            ],
            "calling": [
                "FUN_00109d5c",
                "FUN_0010a69a"
            ],
            "code": "\nundefined  [16]\nresize_array_00109c2e(long array,long value,ulong size,int flag,undefined4 *output,\n            undefined8 data)\n\n{\n  long new_array;\n  long *current_element;\n  long remaining_size;\n  undefined *current_byte;\n  ulong current_size;\n  byte byte_flag;\n  undefined return_value [16];\n  \n  byte_flag = 0;\n  size = size & 0xffffffff;\n  current_size = *(ulong *)(array + 0x1b0);\n  if (current_size <= size) {\n    if (current_size == 0) {\n      current_size = 10;\n    }\n    for (; current_size <= size; current_size = current_size * 2) {\n    }\n    new_array = xrealloc(*(undefined8 *)(array + 0x1a8),current_size * 0x18);\n    *(long *)(array + 0x1a8) = new_array;\n    current_byte = (undefined *)(*(long *)(array + 0x1b0) * 0x18 + new_array);\n    for (remaining_size = (current_size - *(long *)(array + 0x1b0)) * 0x18; remaining_size != 0; remaining_size = remaining_size + -1) {\n      *current_byte = 0;\n      current_byte = current_byte + (ulong)byte_flag * -2 + 1;\n    }\n    *(ulong *)(array + 0x1b0) = current_size;\n  }\n  current_element = (long *)(size * 0x18 + *(long *)(array + 0x1a8));\n  if (*current_element == 0) {\n    new_array = *(long *)(array + 0x68);\n    *current_element = new_array;\n    *(long *)(array + 0x68) = new_array + 1;\n    current_element[1] = value;\n    *(int *)(current_element + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(current_element + 2) = 0;\n    *(undefined4 *)((long)current_element + 0x14) = *output;\n  }\n  else {\n    *output = *(undefined4 *)((long)current_element + 0x14);\n  }\n  return_value._8_8_ = data;\n  return_value._0_8_ = *current_element;\n  return return_value;\n}\n\n",
            "current_name": "resize_array_00109c2e",
            "entrypoint": "0x00109c2e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109c2e": "resize_array_00109c2e",
                "auVar7": "return_value",
                "bVar6": "byte_flag",
                "lVar1": "new_array",
                "lVar3": "remaining_size",
                "param_1": "array",
                "param_2": "value",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "output",
                "param_6": "data",
                "plVar2": "current_element",
                "puVar4": "current_byte",
                "uVar5": "current_size",
                "xrealloc": "expand_array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109cf4": {
            "additional_data": {
                "FUN_00109cf4": {
                    "1": "convert_and_call_subfunction",
                    "2": "convert_and_process",
                    "5": "format_and_call_function",
                    "6": "convert_and_call_function",
                    "8": "convert_and_call"
                },
                "local_3c": {
                    "1": "formatted_arg",
                    "2": "formatted_input",
                    "3": "formatted_value",
                    "5": "converted_string"
                },
                "param_1": {
                    "1": "input_buffer",
                    "2": "data",
                    "3": "output_buffer",
                    "4": "arg1"
                },
                "param_2": {
                    "1": "number_to_convert",
                    "2": "input2",
                    "3": "number",
                    "4": "input_value",
                    "6": "value"
                },
                "param_3": {
                    "1": "format_specifier",
                    "2": "input_param3",
                    "3": "arg3",
                    "4": "flags",
                    "9": "flag"
                }
            },
            "called": [
                "sprintf",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_0010bba1",
                "FUN_00109d3e",
                "FUN_0010e453",
                "FUN_00109d5c",
                "FUN_0010b948",
                "FUN_0010b800",
                "FUN_00109d97",
                "FUN_00109ed3",
                "FUN_00109dfe"
            ],
            "code": "\nvoid convert_and_call_00109cf4(undefined8 arg1,undefined8 value,undefined4 flag)\n\n{\n  char converted_string [28];\n  \n  sprintf(converted_string,\"%ld\",value);\n  FUN_00109b52(arg1,converted_string,value,0,flag);\n  return;\n}\n\n",
            "current_name": "convert_and_call_00109cf4",
            "entrypoint": "0x00109cf4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109cf4": "convert_and_call_00109cf4",
                "local_3c": "converted_string",
                "param_1": "arg1",
                "param_2": "value",
                "param_3": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109d3e": {
            "additional_data": {
                "FUN_00109cf4": {
                    "1": "process_data_internal",
                    "2": "sub_function"
                },
                "FUN_00109d3e": {
                    "1": "extract_data_and_call_function",
                    "12": "process_data",
                    "3": "extract_value_and_call_function"
                },
                "param_1": {
                    "1": "output_ptr",
                    "2": "output",
                    "5": "input_data",
                    "6": "data",
                    "8": "input_param"
                },
                "param_2": {
                    "1": "size_param",
                    "10": "index",
                    "2": "length",
                    "3": "num_elements",
                    "6": "count"
                },
                "param_3": {
                    "1": "size"
                },
                "uVar1": {
                    "1": "default_data",
                    "2": "return_value",
                    "3": "selected_value",
                    "4": "default_value",
                    "9": "result"
                }
            },
            "called": [
                "FUN_00109cf4"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_00109d3e(undefined8 input_param,int index)\n\n{\n  undefined8 result;\n  \n  result = 0xfffffffffffffff0;\n  if (index - 1U < 8) {\n    result = *(undefined8 *)(&DAT_00121360 + (ulong)(index - 1U) * 8);\n  }\n  FUN_00109cf4(input_param,result,index);\n  return;\n}\n\n",
            "current_name": "process_data_00109d3e",
            "entrypoint": "0x00109d3e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109d3e": "process_data_00109d3e",
                "param_1": "input_param",
                "param_2": "index",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109d5c": {
            "additional_data": {
                "FUN_00109c2e": {
                    "1": "get_valid_result",
                    "4": "get_result"
                },
                "FUN_00109cf4": {
                    "1": "process_data",
                    "3": "process_result"
                },
                "FUN_00109d5c": {
                    "1": "extract_value_from_binary",
                    "2": "execute_operation",
                    "3": "process_input",
                    "6": "execute_function",
                    "7": "process_data"
                },
                "lVar1": {
                    "31": "result"
                },
                "param_1": {
                    "1": "data",
                    "12": "input_data",
                    "2": "input_parameter",
                    "5": "input_value",
                    "9": "input_param"
                },
                "param_2": {
                    "1": "param2"
                },
                "param_3": {
                    "1": "flag"
                },
                "param_4": {
                    "1": "flag"
                },
                "param_5": {
                    "1": "param_d"
                },
                "uVar2": {
                    "1": "output_var",
                    "2": "output_param",
                    "3": "processed_data",
                    "4": "output_data",
                    "5": "output_value",
                    "8": "output"
                }
            },
            "called": [
                "FUN_00109c2e",
                "FUN_00109cf4"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 process_data_00109d5c(undefined8 input_data)\n\n{\n  long result;\n  undefined8 output;\n  \n  result = FUN_00109c2e();\n  if (-1 < result) {\n    output = FUN_00109cf4(input_data,result,0);\n    return output;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_00109d5c",
            "entrypoint": "0x00109d5c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109d5c": "process_data_00109d5c",
                "lVar1": "result",
                "param_1": "input_data",
                "uVar2": "output"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109d97": {
            "additional_data": {
                "FUN_00109b52": {
                    "1": "print_output",
                    "2": "sub_function2",
                    "3": "print_result",
                    "4": "process_sub_function2"
                },
                "FUN_00109cf4": {
                    "1": "process_data",
                    "10": "process_sub_function",
                    "2": "sub_function1",
                    "3": "process_subfunction1",
                    "4": "process_sub_function1"
                },
                "FUN_00109d97": {
                    "1": "update_variable_and_print",
                    "11": "process_data",
                    "2": "process_number",
                    "3": "format_and_print_number",
                    "4": "process_parameter",
                    "5": "process_param"
                },
                "lVar1": {
                    "12": "counter",
                    "2": "current_number",
                    "3": "current_value",
                    "4": "count"
                },
                "local_40": {
                    "1": "output_buffer",
                    "10": "formatted_string",
                    "2": "result_string",
                    "4": "formatted_data",
                    "6": "output_string"
                },
                "param_1": {
                    "1": "input_parameter",
                    "2": "input_param",
                    "3": "input_data",
                    "5": "input",
                    "9": "data"
                },
                "param_2": {
                    "1": "sub_func_param1",
                    "2": "data",
                    "3": "sub_function_param1"
                },
                "param_3": {
                    "1": "sub_function_arg1",
                    "2": "sub_function_param2",
                    "3": "param3"
                },
                "param_4": {
                    "1": "sub_function_arg3",
                    "3": "param4"
                }
            },
            "called": [
                "sprintf",
                "FUN_00109cf4",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_0010a424",
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_00109d97(long data)\n\n{\n  long counter;\n  char formatted_string [40];\n  \n  if (*(long *)(data + 0x70) != 0) {\n    FUN_00109cf4(data,*(long *)(data + 0x70),0);\n    return;\n  }\n  counter = *(long *)(data + 0x68);\n  *(long *)(data + 0x68) = counter + 1;\n  sprintf(formatted_string,\"%ld=%ld\",counter,counter);\n  FUN_00109b52(data,formatted_string,counter,0,0);\n  return;\n}\n\n",
            "current_name": "process_data_00109d97",
            "entrypoint": "0x00109d97",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109d97": "process_data_00109d97",
                "lVar1": "counter",
                "local_40": "formatted_string",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109dfe": {
            "additional_data": {
                "FUN_00109b52": {
                    "1": "print_output",
                    "4": "print_data"
                },
                "FUN_00109cf4": {
                    "1": "process_data",
                    "2": "handle_non_null"
                },
                "FUN_00109dfe": {
                    "1": "update_count_and_print",
                    "14": "process_data",
                    "2": "process_param",
                    "5": "process_parameter"
                },
                "lVar1": {
                    "1": "temp_var",
                    "13": "counter",
                    "2": "current_number",
                    "3": "current_value",
                    "6": "count"
                },
                "local_40": {
                    "1": "formatted_str",
                    "3": "buffer",
                    "4": "output",
                    "5": "message",
                    "7": "formatted_string",
                    "8": "output_string"
                },
                "param_1": {
                    "1": "input_param",
                    "12": "data",
                    "2": "input_number",
                    "4": "param",
                    "5": "input"
                },
                "param_2": {
                    "1": "data"
                },
                "param_3": {
                    "1": "param3",
                    "2": "flag"
                },
                "param_4": {
                    "1": "param_2"
                }
            },
            "called": [
                "sprintf",
                "FUN_00109cf4",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_00109dfe(long data)\n\n{\n  long counter;\n  char output_string [40];\n  \n  if (*(long *)(data + 0x70) != 0) {\n    FUN_00109cf4(data,*(long *)(data + 0x70),0);\n    return;\n  }\n  counter = *(long *)(data + 0x68);\n  *(long *)(data + 0x68) = counter + 1;\n  *(long *)(data + 0x70) = counter;\n  sprintf(output_string,\"%ld=%ld\",counter,counter);\n  FUN_00109b52(data,output_string,counter,1,0);\n  return;\n}\n\n",
            "current_name": "process_data_00109dfe",
            "entrypoint": "0x00109dfe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109dfe": "process_data_00109dfe",
                "lVar1": "counter",
                "local_40": "output_string",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109e76": {
            "additional_data": {
                "FUN_00109e76": {
                    "1": "update_and_format_data",
                    "2": "increment_counter_and_print",
                    "3": "increment_and_print",
                    "4": "increment_and_print_value"
                },
                "lVar1": {
                    "1": "previous_count",
                    "12": "current_value",
                    "2": "count",
                    "3": "counter_value",
                    "5": "previous_value",
                    "6": "counter"
                },
                "local_5a": {
                    "1": "buffer",
                    "14": "formatted_string",
                    "2": "formatted_data",
                    "9": "output_string"
                },
                "param_1": {
                    "1": "data_address",
                    "2": "data",
                    "5": "data_pointer",
                    "7": "base_address"
                },
                "param_2": {
                    "1": "index",
                    "17": "value",
                    "2": "count"
                }
            },
            "called": [
                "sprintf",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_00109e76(long base_address,uint value)\n\n{\n  long current_value;\n  char formatted_string [58];\n  \n  current_value = *(long *)(base_address + 0x68);\n  *(long *)(base_address + 0x68) = current_value + 1;\n  sprintf(formatted_string,\"%ld=r%ld;%u;0;\",current_value,current_value,(ulong)value);\n  FUN_00109b52(base_address,formatted_string,current_value,1,value * 2);\n  return;\n}\n\n",
            "current_name": "process_data_00109e76",
            "entrypoint": "0x00109e76",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109e76": "process_data_00109e76",
                "lVar1": "current_value",
                "local_5a": "formatted_string",
                "param_1": "base_address",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109ed3": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "extract_data"
                },
                "FUN_00109b52": {
                    "1": "check_flag"
                },
                "FUN_00109cf4": {
                    "1": "process_value"
                },
                "FUN_00109ed3": {
                    "1": "extract_and_process_data",
                    "14": "process_data"
                },
                "__ptr": {
                    "1": "temp_str",
                    "12": "temp_ptr",
                    "2": "pointer",
                    "5": "ptr"
                },
                "__s": {
                    "1": "allocated_str",
                    "3": "formatted_str",
                    "6": "new_str",
                    "9": "new_string"
                },
                "bVar12": {
                    "1": "byte_value",
                    "2": "is_zero",
                    "3": "temp_byte",
                    "4": "flag2",
                    "7": "byte_var"
                },
                "cVar3": {
                    "1": "success",
                    "18": "result",
                    "2": "flag",
                    "4": "result_char",
                    "5": "char_var"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "lVar6": {
                    "1": "long_val",
                    "2": "index",
                    "3": "temp_var",
                    "8": "counter"
                },
                "lVar9": {
                    "1": "temp_count",
                    "2": "var2",
                    "6": "loop_var",
                    "7": "loop_counter"
                },
                "param_1": {
                    "1": "param_addr",
                    "2": "data",
                    "3": "data_ptr",
                    "5": "input",
                    "6": "input1"
                },
                "param_2": {
                    "1": "char_val",
                    "2": "param",
                    "5": "character",
                    "6": "input2"
                },
                "param_3": {
                    "1": "input_3",
                    "2": "param_3",
                    "3": "param",
                    "6": "input3"
                },
                "param_4": {
                    "1": "output_ptr",
                    "2": "output1",
                    "3": "array",
                    "8": "output_array"
                },
                "param_5": {
                    "1": "ulong_arr",
                    "2": "size_array",
                    "3": "buffer_size",
                    "4": "array_size"
                },
                "pcVar4": {
                    "1": "string1",
                    "2": "str",
                    "3": "string_ptr",
                    "4": "string",
                    "5": "temp_str",
                    "8": "temp_string"
                },
                "puVar11": {
                    "1": "temp_pointer_2",
                    "2": "byte_ptr",
                    "6": "ptr"
                },
                "sVar5": {
                    "1": "text_size",
                    "14": "string_length",
                    "3": "length",
                    "4": "str_len",
                    "5": "str_length"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "strlen": {
                    "1": "string_length"
                },
                "uVar1": {
                    "1": "existing_array_size",
                    "2": "temp_var1",
                    "3": "element_count",
                    "8": "size"
                },
                "uVar10": {
                    "1": "var10",
                    "2": "new_count",
                    "3": "new_size",
                    "8": "current_size"
                },
                "uVar2": {
                    "1": "var2",
                    "2": "temp_var2",
                    "4": "temp",
                    "8": "new_size"
                },
                "uVar7": {
                    "1": "function_result",
                    "14": "return_value",
                    "3": "return_val",
                    "8": "result"
                },
                "uVar8": {
                    "1": "use_temp_str",
                    "16": "flag",
                    "3": "flag_value"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                },
                "xrealloc": {
                    "1": "reallocate_memory"
                }
            },
            "called": [
                "sprintf",
                "strlen",
                "FUN_00109b2f",
                "xmalloc",
                "FUN_00109cf4",
                "xrealloc",
                "FUN_00109b52",
                "free"
            ],
            "calling": [
                "FUN_0010a0d3",
                "FUN_0010a0a0",
                "FUN_0010a083",
                "FUN_0010e5db",
                "FUN_0010a0bd"
            ],
            "code": "\nundefined8 process_data_00109ed3(long input1,uint input2,undefined4 input3,long *output_array,ulong *array_size)\n\n{\n  ulong size;\n  ulong new_size;\n  char result;\n  char *temp_string;\n  size_t strlen;\n  char *new_string;\n  long counter;\n  void *temp_ptr;\n  undefined8 return_value;\n  undefined flag;\n  long loop_counter;\n  ulong current_size;\n  undefined *ptr;\n  byte byte_var;\n  \n  byte_var = 0;\n  counter = *(long *)(input1 + 0x60);\n  if (counter != 0) {\n    size = *(ulong *)(counter + 0x10);\n    if (((long)size < 1) || (output_array == (long *)0x0)) {\n      flag = *(undefined *)(counter + 0x1c);\n      temp_string = (char *)FUN_00109b2f(input1);\n      string_length = string_length(temp_string);\n      new_string = (char *)xmalloc(string_length + 2);\n      sprintf(new_string,\"%c%s\",(ulong)input2,temp_string);\n      free(temp_string);\n      counter = 0;\n    }\n    else {\n      current_size = *array_size;\n      if (current_size <= size) {\n        if (current_size == 0) {\n          current_size = 10;\n        }\n        for (; current_size <= size; current_size = current_size * 2) {\n        }\n        counter = xrealloc(*output_array,current_size * 8);\n        new_size = *array_size;\n        *output_array = counter;\n        ptr = (undefined *)(counter + new_size * 8);\n        for (loop_counter = (current_size - new_size) * 8; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *ptr = 0;\n          ptr = ptr + (ulong)byte_var * -2 + 1;\n        }\n        *array_size = current_size;\n      }\n      counter = *(long *)(*output_array + size * 8);\n      if ((counter != 0) && (*(char *)(*(long *)(input1 + 0x60) + 0x1c) == '\\0')) {\n        temp_ptr = (void *)FUN_00109b2f(input1);\n        free(temp_ptr);\n        return_value = FUN_00109cf4(input1,counter,input3);\n        return return_value;\n      }\n      counter = *(long *)(input1 + 0x68);\n      *(long *)(input1 + 0x68) = counter + 1;\n      temp_string = (char *)FUN_00109b2f(input1);\n      string_length = string_length(temp_string);\n      new_string = (char *)xmalloc(string_length + 0x14);\n      sprintf(new_string,\"%ld=%c%s\",counter,(ulong)input2,temp_string);\n      free(temp_string);\n      flag = 1;\n      *(long *)(*output_array + size * 8) = counter;\n    }\n    result = FUN_00109b52(input1,new_string,counter,flag,input3);\n    if (result != '\\0') {\n      free(new_string);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_00109ed3",
            "entrypoint": "0x00109ed3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109ed3": "process_data_00109ed3",
                "__ptr": "temp_ptr",
                "__s": "new_string",
                "bVar12": "byte_var",
                "cVar3": "result",
                "free": "deallocate_memory",
                "lVar6": "counter",
                "lVar9": "loop_counter",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "output_array",
                "param_5": "array_size",
                "pcVar4": "temp_string",
                "puVar11": "ptr",
                "sVar5": "string_length",
                "sprintf": "format_string",
                "strlen": "string_length",
                "uVar1": "size",
                "uVar10": "current_size",
                "uVar2": "new_size",
                "uVar7": "return_value",
                "uVar8": "flag",
                "xmalloc": "allocate_memory",
                "xrealloc": "reallocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a083": {
            "additional_data": {
                "0x178": {
                    "1": "offset_1"
                },
                "0x180": {
                    "1": "offset_2"
                },
                "0x2a": {
                    "1": "flag_const"
                },
                "4": {
                    "1": "count_const"
                },
                "FUN_00109ed3": {
                    "1": "execute_sub_function",
                    "11": "process_sub_function",
                    "2": "process_subfunction",
                    "5": "sub_function",
                    "6": "process_data"
                },
                "FUN_0010a083": {
                    "1": "execute_function",
                    "16": "process_data",
                    "2": "execute_sub_function",
                    "5": "initialize_data"
                },
                "param_1": {
                    "1": "data_address",
                    "13": "data",
                    "2": "input",
                    "4": "input_value",
                    "5": "input_data"
                },
                "param_2": {
                    "1": "constant",
                    "16": "value",
                    "3": "constant_value",
                    "4": "flag"
                },
                "param_3": {
                    "1": "counter",
                    "15": "count",
                    "3": "size",
                    "4": "length"
                },
                "param_4": {
                    "1": "dest_ptr",
                    "2": "data_pointer1",
                    "3": "data_ptr",
                    "4": "output_pointer1"
                },
                "param_5": {
                    "1": "result_ptr",
                    "2": "ptr2",
                    "3": "output2",
                    "4": "output_pointer2"
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_0010a083(long data)\n\n{\n  FUN_00109ed3(data,0x2a,4,data + 0x178,data + 0x180);\n  return;\n}\n\n",
            "current_name": "process_data_0010a083",
            "entrypoint": "0x0010a083",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a083": "process_data_0010a083",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0a0": {
            "additional_data": {
                "FUN_00109ed3": {
                    "1": "execute_transformation",
                    "12": "process_sub_function",
                    "3": "process_subfunction",
                    "6": "process_data"
                },
                "FUN_0010a0a0": {
                    "1": "execute_function",
                    "18": "process_data",
                    "3": "initialize_data"
                },
                "param_1": {
                    "1": "input_value",
                    "13": "data",
                    "2": "input_param",
                    "4": "input_data",
                    "5": "data_pointer"
                },
                "param_2": {
                    "1": "param",
                    "12": "value",
                    "2": "code",
                    "4": "value1"
                },
                "param_3": {
                    "1": "param_code",
                    "11": "count",
                    "2": "param3",
                    "4": "value2",
                    "5": "size"
                },
                "param_4": {
                    "1": "output_ptr",
                    "2": "sub_param3",
                    "3": "output1",
                    "5": "ptr1"
                },
                "param_5": {
                    "1": "output_ptr2",
                    "2": "pointer2",
                    "3": "output2",
                    "5": "ptr2"
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_0010a0a0(long data)\n\n{\n  FUN_00109ed3(data,0x26,4,data + 0x198,data + 0x1a0);\n  return;\n}\n\n",
            "current_name": "process_data_0010a0a0",
            "entrypoint": "0x0010a0a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0a0": "process_data_0010a0a0",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0bd": {
            "additional_data": {
                "FUN_00109ed3": {
                    "1": "call_function",
                    "2": "sub_function",
                    "3": "call_sub_function",
                    "7": "process_sub_function"
                },
                "FUN_0010a0bd": {
                    "1": "execute_task",
                    "11": "process_data",
                    "2": "call_sub_function",
                    "5": "execute_function"
                },
                "param_1": {
                    "1": "input_value",
                    "2": "input_parameter",
                    "3": "input_data",
                    "7": "input",
                    "9": "data"
                },
                "param_2": {
                    "1": "sub_func_param1",
                    "16": "value",
                    "2": "code"
                },
                "param_3": {
                    "1": "sub_function_param_2",
                    "2": "parameter",
                    "3": "param3",
                    "5": "data"
                },
                "param_4": {
                    "1": "sub_task_param3",
                    "2": "param_array",
                    "3": "pointer1",
                    "4": "ptr1"
                },
                "param_5": {
                    "1": "result_ptr",
                    "2": "results",
                    "3": "ulong_pointer",
                    "4": "ptr2"
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_0010a0bd(long data)\n\n{\n  FUN_00109ed3(data,0x6b,*(undefined4 *)(*(long *)(data + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "current_name": "process_data_0010a0bd",
            "entrypoint": "0x0010a0bd",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0bd": "process_data_0010a0bd",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0d3": {
            "additional_data": {
                "FUN_00109ed3": {
                    "1": "call_subfunction2",
                    "2": "sub_function",
                    "3": "process_sub_function",
                    "4": "perform_operation",
                    "8": "execute_sub_function"
                },
                "FUN_0010a0d3": {
                    "1": "run_function",
                    "10": "execute_function",
                    "8": "process_data"
                },
                "param_1": {
                    "1": "input_data",
                    "3": "input_value",
                    "4": "input",
                    "5": "input_parameter",
                    "6": "input_param",
                    "8": "data"
                },
                "param_2": {
                    "1": "int_value",
                    "2": "constant",
                    "3": "param2",
                    "4": "operation_code",
                    "5": "value"
                },
                "param_3": {
                    "1": "arg1",
                    "2": "pointer_value",
                    "3": "data",
                    "5": "value"
                },
                "param_4": {
                    "1": "pointer_to_data",
                    "2": "param_array",
                    "3": "data_pointer",
                    "5": "pointer1"
                },
                "param_5": {
                    "1": "ptr2",
                    "2": "ulong_pointer",
                    "3": "param5",
                    "5": "pointer2"
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid execute_function_0010a0d3(long data)\n\n{\n  FUN_00109ed3(data,0x42,*(undefined4 *)(*(long *)(data + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "current_name": "execute_function_0010a0d3",
            "entrypoint": "0x0010a0d3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0d3": "execute_function_0010a0d3",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0e9": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "get_result"
                },
                "FUN_00109b52": {
                    "1": "perform_action"
                },
                "FUN_0010a0e9": {
                    "1": "reverse_and_send_data",
                    "14": "execute_command",
                    "2": "process_data",
                    "3": "send_request",
                    "5": "process_request"
                },
                "__s": {
                    "1": "request_string",
                    "2": "request",
                    "3": "input_string",
                    "4": "string",
                    "7": "command_string"
                },
                "__s_00": {
                    "1": "formatted_string_ptr",
                    "2": "modified_command_string",
                    "4": "modified_string",
                    "9": "formatted_string"
                },
                "__s_01": {
                    "2": "formatted_string"
                },
                "__s_02": {
                    "1": "temporary_string"
                },
                "free": {
                    "2": "deallocate_memory"
                },
                "param_1": {
                    "1": "binary_address",
                    "2": "command_data",
                    "3": "data"
                },
                "param_2": {
                    "1": "param_value_1",
                    "10": "value1",
                    "2": "param1",
                    "3": "param2",
                    "5": "value_1"
                },
                "param_3": {
                    "1": "param_value2",
                    "10": "value2",
                    "2": "param_3",
                    "3": "param3",
                    "5": "value_2"
                },
                "sVar3": {
                    "1": "message_length",
                    "11": "string_length",
                    "2": "request_length",
                    "3": "result_length"
                },
                "sprintf": {
                    "2": "format_string"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "uVar1": {
                    "1": "byte_value",
                    "2": "data_1",
                    "3": "command_flag"
                },
                "uVar2": {
                    "1": "command_result",
                    "10": "return_value",
                    "14": "result",
                    "2": "data_2"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_00109b2f",
                "strlen",
                "sprintf",
                "xmalloc",
                "FUN_00109b52",
                "free"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 execute_command_0010a0e9(long data,undefined8 value1,undefined8 value2)\n\n{\n  undefined command_flag;\n  undefined4 result;\n  char *command_string;\n  size_t strlen;\n  char *formatted_string;\n  \n  command_flag = *(undefined *)(*(long *)(data + 0x60) + 0x1c);\n  result = *(undefined4 *)(*(long *)(data + 0x60) + 0x18);\n  command_string = (char *)FUN_00109b2f();\n  string_length = string_length(command_string);\n  formatted_string = (char *)xmalloc(string_length + 100);\n  sprintf(formatted_string,\"r%s;%ld;%ld;\",command_string,value1,value2);\n  free(command_string);\n  result = FUN_00109b52(data,formatted_string,0,command_flag,result);\n  if ((char)result != '\\0') {\n    free(formatted_string);\n  }\n  return result;\n}\n\n",
            "current_name": "execute_command_0010a0e9",
            "entrypoint": "0x0010a0e9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0e9": "execute_command_0010a0e9",
                "__s": "command_string",
                "__s_00": "formatted_string",
                "free": "deallocate_memory",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "sVar3": "string_length",
                "sprintf": "format_string",
                "strlen": "string_length",
                "uVar1": "command_flag",
                "uVar2": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a181": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "get_string"
                },
                "FUN_00109b52": {
                    "1": "execute_command"
                },
                "FUN_0010a181": {
                    "1": "process_request",
                    "23": "process_data"
                },
                "__s": {
                    "1": "data1",
                    "19": "string1",
                    "7": "str1"
                },
                "__s_00": {
                    "1": "additional_string",
                    "19": "string2",
                    "7": "str2"
                },
                "__s_01": {
                    "1": "new_string_ptr",
                    "13": "result_string",
                    "2": "final_string",
                    "4": "result_str",
                    "6": "combined_string"
                },
                "__s_01 + sVar5": {
                    "1": "concatenated_str"
                },
                "cVar1": {
                    "1": "char_val",
                    "2": "temp_char",
                    "4": "flag_char",
                    "5": "char_flag"
                },
                "free": {
                    "2": "deallocate_memory"
                },
                "iVar2": {
                    "1": "int1",
                    "2": "multiplier",
                    "3": "int_var1",
                    "5": "length",
                    "8": "int_value"
                },
                "iVar3": {
                    "1": "total_value",
                    "18": "result",
                    "2": "var2",
                    "3": "int_var2"
                },
                "lVar7": {
                    "1": "temp_long",
                    "25": "counter",
                    "4": "count"
                },
                "local_41": {
                    "1": "bit_flag",
                    "16": "local_flag",
                    "3": "temp_flag"
                },
                "param_1": {
                    "1": "request",
                    "2": "input_data",
                    "3": "data",
                    "8": "data_ptr"
                },
                "param_2": {
                    "1": "start_address",
                    "15": "start",
                    "2": "start_pos",
                    "5": "start_index"
                },
                "param_3": {
                    "1": "input_param3",
                    "15": "end",
                    "2": "end_pos",
                    "5": "end_index"
                },
                "param_4": {
                    "1": "input_param4",
                    "26": "flag"
                },
                "sVar5": {
                    "1": "str1_length",
                    "12": "length1",
                    "5": "string1_length",
                    "7": "len1"
                },
                "sVar6": {
                    "1": "size_of_string2",
                    "12": "length2",
                    "5": "string2_length",
                    "7": "len2"
                },
                "sprintf": {
                    "2": "format_string"
                },
                "strlen": {
                    "2": "get_length"
                },
                "uVar4": {
                    "1": "output",
                    "2": "return_val",
                    "22": "return_value",
                    "5": "result"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_00109b2f",
                "strlen",
                "sprintf",
                "xmalloc",
                "FUN_00109b52",
                "free"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 process_data_0010a181(long data_ptr,long start,long end,byte flag)\n\n{\n  char char_value;\n  int int_value;\n  int result;\n  undefined4 return_value;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *result_string;\n  long counter;\n  byte local_flag;\n  \n  char_value = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  string1 = (char *)FUN_00109b2f();\n  local_flag = 1;\n  if (char_value == '\\0') {\n    local_flag = *(byte *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  }\n  int_value = *(int *)(*(long *)(data_ptr + 0x60) + 0x18);\n  string2 = (char *)FUN_00109b2f(data_ptr);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  result_string = (char *)xmalloc(length1 + 100 + length2);\n  if (flag == 0) {\n    *result_string = '\\0';\n    counter = 0;\n    local_flag = local_flag & 1;\n  }\n  else {\n    counter = *(long *)(data_ptr + 0x68);\n    *(long *)(data_ptr + 0x68) = counter + 1;\n    sprintf(result_string,\"%ld=@S;\",counter);\n    local_flag = flag;\n  }\n  length1 = strlen(result_string);\n  sprintf(result_string + length1,\"ar%s;%ld;%ld;%s\",string1,start,end,string2);\n  free(string1);\n  free(string2);\n  result = 0;\n  if (start <= end) {\n    result = int_value * (((int)end - (int)start) + 1);\n  }\n  return_value = FUN_00109b52(data_ptr,result_string,counter,local_flag,result);\n  if ((char)return_value != '\\0') {\n    free(result_string);\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_data_0010a181",
            "entrypoint": "0x0010a181",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a181": "process_data_0010a181",
                "__s": "string1",
                "__s_00": "string2",
                "__s_01": "result_string",
                "cVar1": "char_value",
                "free": "deallocate_memory",
                "iVar2": "int_value",
                "iVar3": "result",
                "lVar7": "counter",
                "local_41": "local_flag",
                "param_1": "data_ptr",
                "param_2": "start",
                "param_3": "end",
                "param_4": "flag",
                "sVar5": "length1",
                "sVar6": "length2",
                "sprintf": "format_string",
                "strlen": "get_length",
                "uVar4": "return_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a2b9": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "get_original_string"
                },
                "FUN_00109b52": {
                    "1": "reverse_data"
                },
                "FUN_0010a2b9": {
                    "1": "create_formatted_string",
                    "16": "process_data",
                    "2": "reverse_and_format_string"
                },
                "__s": {
                    "1": "string",
                    "18": "string1",
                    "2": "original_string",
                    "3": "str1"
                },
                "__s_00": {
                    "1": "result_string",
                    "15": "string2",
                    "2": "string_2",
                    "3": "str2",
                    "4": "new_string"
                },
                "auVar4": {
                    "1": "return_val",
                    "23": "result",
                    "6": "return_value"
                },
                "cVar1": {
                    "1": "character1",
                    "10": "char_value",
                    "2": "flag_value",
                    "4": "char_var",
                    "7": "char1"
                },
                "free": {
                    "3": "deallocate_memory"
                },
                "lVar3": {
                    "1": "var1",
                    "24": "counter",
                    "6": "count"
                },
                "param_1": {
                    "1": "input_address",
                    "2": "input_param",
                    "3": "input_data",
                    "5": "data"
                },
                "param_2": {
                    "1": "is_flag_set",
                    "27": "flag"
                },
                "param_3": {
                    "1": "some_param",
                    "2": "var1",
                    "3": "ptr1",
                    "4": "param1",
                    "7": "param3"
                },
                "param_4": {
                    "1": "buffer",
                    "2": "var2",
                    "3": "ptr2",
                    "4": "param2",
                    "7": "param4"
                },
                "sVar2": {
                    "1": "source_length",
                    "12": "string_length",
                    "2": "length",
                    "3": "string_length1",
                    "8": "length1"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "strlen": {
                    "2": "get_string_length"
                },
                "xmalloc": {
                    "3": "allocate_memory"
                }
            },
            "called": [
                "strlen",
                "sprintf",
                "FUN_00109b2f",
                "xmalloc",
                "FUN_00109b52",
                "free"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] process_data_0010a2b9(long data_ptr,char flag,undefined8 param3,undefined8 param4)\n\n{\n  char char_value;\n  char *string1;\n  size_t string_length;\n  char *string2;\n  long counter;\n  undefined result [16];\n  \n  char_value = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  string1 = (char *)FUN_00109b2f();\n  string_length = strlen(string1);\n  string2 = (char *)xmalloc(string_length + 0x1e);\n  if (flag == '\\0') {\n    *string2 = '\\0';\n    counter = 0;\n    flag = char_value;\n  }\n  else {\n    counter = *(long *)(data_ptr + 0x68);\n    *(long *)(data_ptr + 0x68) = counter + 1;\n    sprintf(string2,\"%ld=@S;\",counter);\n  }\n  string_length = strlen(string2);\n  sprintf(string2 + string_length,\"S%s\",string1);\n  free(string1);\n  result._0_4_ = FUN_00109b52(data_ptr,string2,counter,flag,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(string2);\n  }\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "current_name": "process_data_0010a2b9",
            "entrypoint": "0x0010a2b9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a2b9": "process_data_0010a2b9",
                "__s": "string1",
                "__s_00": "string2",
                "auVar4": "result",
                "cVar1": "char_value",
                "free": "deallocate_memory",
                "lVar3": "counter",
                "param_1": "data_ptr",
                "param_2": "flag",
                "param_3": "param3",
                "param_4": "param4",
                "sVar2": "string_length",
                "sprintf": "format_string",
                "strlen": "get_string_length",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a377": {
            "additional_data": {
                "FUN_00109b2f": {
                    "2": "get_string"
                },
                "FUN_00109b52": {
                    "1": "send_data"
                },
                "FUN_0010a377": {
                    "1": "parse_and_process_strings",
                    "2": "process_and_send_data",
                    "4": "reverse_and_send_data",
                    "5": "process_data"
                },
                "__s": {
                    "1": "result_string",
                    "16": "string1",
                    "2": "str1",
                    "4": "first_string"
                },
                "__s_00": {
                    "1": "reversed_data",
                    "16": "string2",
                    "2": "str2",
                    "4": "second_string"
                },
                "__s_01": {
                    "1": "formatted_data",
                    "2": "new_string",
                    "6": "concatenated_string",
                    "7": "result_string",
                    "8": "combined_string"
                },
                "cVar1": {
                    "1": "char1",
                    "11": "flag",
                    "3": "char_flag",
                    "5": "char_value"
                },
                "free": {
                    "2": "deallocate_memory"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "data_address",
                    "3": "input_value",
                    "5": "input_parameter",
                    "7": "data"
                },
                "sVar3": {
                    "1": "source_length",
                    "14": "length1",
                    "2": "len1"
                },
                "sVar4": {
                    "1": "reversed_length",
                    "14": "length2",
                    "2": "length_2"
                },
                "sprintf": {
                    "2": "format_string"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "uVar2": {
                    "1": "output_var",
                    "13": "result",
                    "14": "return_value",
                    "2": "output"
                },
                "uVar5": {
                    "1": "is_null",
                    "2": "flag_value",
                    "3": "flag"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_00109b2f",
                "sprintf",
                "strlen",
                "xmalloc",
                "FUN_00109b52",
                "free"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 process_data_0010a377(long input_param)\n\n{\n  char flag;\n  undefined4 return_value;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *combined_string;\n  undefined use_flag;\n  \n  use_flag = 1;\n  flag = *(char *)(*(long *)(input_param + 0x60) + 0x1c);\n  string1 = (char *)FUN_00109b2f();\n  if (flag == '\\0') {\n    use_flag = *(undefined *)(*(long *)(input_param + 0x60) + 0x1c);\n  }\n  string2 = (char *)FUN_00109b2f(input_param);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  combined_string = (char *)xmalloc(length1 + 3 + length2);\n  sprintf(combined_string,\"@%s,%s\",string2,string1);\n  free(string2);\n  free(string1);\n  return_value = FUN_00109b52(input_param,combined_string,0,use_flag,0);\n  if ((char)return_value != '\\0') {\n    free(combined_string);\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_data_0010a377",
            "entrypoint": "0x0010a377",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a377": "process_data_0010a377",
                "__s": "string1",
                "__s_00": "string2",
                "__s_01": "combined_string",
                "cVar1": "flag",
                "free": "deallocate_memory",
                "param_1": "input_param",
                "sVar3": "length1",
                "sVar4": "length2",
                "sprintf": "format_string",
                "strlen": "get_string_length",
                "uVar2": "return_value",
                "uVar5": "use_flag",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a424": {
            "additional_data": {
                "FUN_00109b2f": {
                    "2": "get_data"
                },
                "FUN_00109b52": {
                    "1": "process_data2"
                },
                "FUN_00109d97": {
                    "2": "check_condition"
                },
                "FUN_0010a424": {
                    "1": "reverse_and_format_data",
                    "8": "process_data"
                },
                "__ptr": {
                    "1": "allocated_array",
                    "13": "ptr_array",
                    "2": "string_array",
                    "8": "dynamic_array"
                },
                "__s": {
                    "1": "char_ptr2",
                    "12": "string2",
                    "2": "second_string",
                    "8": "str2"
                },
                "__s_00": {
                    "1": "combined_str",
                    "2": "new_string",
                    "4": "formatted_string",
                    "7": "final_string",
                    "9": "result_string"
                },
                "bVar10": {
                    "1": "byte_value",
                    "2": "temp_byte2",
                    "3": "loop_flag",
                    "4": "byte_var2",
                    "5": "byte_flag"
                },
                "bVar2": {
                    "1": "temp_flag",
                    "11": "byte_var",
                    "2": "byte_result",
                    "4": "temp_byte",
                    "5": "byte_value"
                },
                "cVar1": {
                    "1": "is_zero",
                    "18": "result",
                    "2": "result_char"
                },
                "free": {
                    "2": "deallocate_memory"
                },
                "iVar3": {
                    "1": "temp_value",
                    "2": "temp_var",
                    "3": "counter",
                    "4": "temp_int",
                    "6": "index"
                },
                "lVar11": {
                    "1": "inner_loop_counter",
                    "2": "index2",
                    "6": "loop_var2",
                    "8": "loop_index"
                },
                "lVar9": {
                    "1": "index2",
                    "2": "loop_variable",
                    "3": "loop_var1",
                    "4": "loop_index",
                    "9": "index"
                },
                "param_1": {
                    "1": "input_address",
                    "2": "input1",
                    "5": "input_param",
                    "7": "data"
                },
                "param_2": {
                    "1": "input2",
                    "17": "flag",
                    "2": "flag_param",
                    "7": "flag1"
                },
                "param_3": {
                    "1": "size_param",
                    "12": "count",
                    "2": "num_strings",
                    "4": "size",
                    "5": "num_elements"
                },
                "param_4": {
                    "1": "addition_param",
                    "2": "condition",
                    "5": "additional_flag",
                    "9": "flag2"
                },
                "pcVar5": {
                    "1": "temp_char_pointer",
                    "12": "string1",
                    "2": "first_string",
                    "3": "source_string",
                    "8": "str1"
                },
                "sVar7": {
                    "1": "len_string1",
                    "10": "length1",
                    "2": "source_length",
                    "4": "size1"
                },
                "sVar8": {
                    "1": "length_2",
                    "10": "length2",
                    "2": "string2_length",
                    "4": "size2"
                },
                "sprintf": {
                    "1": "formatted_string"
                },
                "strcpy": {
                    "2": "copy_string"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "uVar12": {
                    "1": "flag_value",
                    "2": "temp_var",
                    "3": "undefined_var"
                },
                "uVar4": {
                    "1": "result_2",
                    "22": "return_value",
                    "3": "output",
                    "5": "result"
                },
                "uVar6": {
                    "1": "data",
                    "2": "temp",
                    "3": "temp_var",
                    "8": "value",
                    "9": "temp_value"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "sprintf",
                "strlen",
                "FUN_00109b2f",
                "xmalloc",
                "strcpy",
                "FUN_00109b52",
                "free",
                "FUN_00109d97"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 process_data_0010a424(long data,char flag,int count,char flag2)\n\n{\n  char result;\n  byte byte_var;\n  int index;\n  undefined4 return_value;\n  char *string1;\n  undefined8 *ptr_array;\n  undefined8 temp_value;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *result_string;\n  long index;\n  byte byte_flag;\n  long loop_index;\n  undefined undefined_var;\n  \n  if ((flag == '\\0') && (result = FUN_00109d97(), result == '\\0')) {\n    return 0;\n  }\n  byte_flag = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n  string1 = (char *)FUN_00109b2f(data);\n  if (count < 0) {\n    ptr_array = (undefined8 *)0x0;\n    count = 0;\nLAB_0010a582:\n    undefined_var = 1;\n    if (byte_flag != 0) goto LAB_0010a596;\n  }\n  else {\n    if (count != 0) {\n      index = count + 1;\n      ptr_array = (undefined8 *)xmalloc((long)index * 8);\n      index = (long)(count + -1);\n      do {\n        byte_var = 1;\n        if (byte_flag == 0) {\n          byte_var = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n        }\n        temp_value = FUN_00109b2f(data);\n        byte_flag = byte_var & 1;\n        ptr_array[index] = temp_value;\n        index = index + -1;\n      } while ((int)index != -1);\n      if (flag2 == '\\0') {\n        result = FUN_00109d97(data);\n        if (result == '\\0') {\n          return 0;\n        }\n        byte_var = 1;\n        if (byte_flag == 0) {\n          byte_var = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n        }\n        byte_flag = byte_var & 1;\n        temp_value = FUN_00109b2f(data);\n        ptr_array[(long)index + -1] = temp_value;\n        count = index;\n      }\n      goto LAB_0010a582;\n    }\n    ptr_array = (undefined8 *)0x0;\n    if (flag2 != '\\0') goto LAB_0010a582;\n    ptr_array = (undefined8 *)xmalloc(8);\n    result = FUN_00109d97(data);\n    if (result == '\\0') {\n      return 0;\n    }\n    if ((byte_flag != 0) || (*(char *)(*(long *)(data + 0x60) + 0x1c) != '\\0')) {\n      temp_value = FUN_00109b2f(data);\n      count = 1;\n      undefined_var = 1;\n      *ptr_array = temp_value;\n      goto LAB_0010a596;\n    }\n    temp_value = FUN_00109b2f(data);\n    count = 1;\n    *ptr_array = temp_value;\n  }\n  undefined_var = *(undefined *)(*(long *)(data + 0x60) + 0x1c);\nLAB_0010a596:\n  string2 = (char *)FUN_00109b2f(data);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  index = length1 + 10 + length2;\n  for (loop_index = 0; (int)loop_index < count; loop_index = loop_index + 1) {\n    length1 = strlen((char *)ptr_array[loop_index]);\n    index = index + length1;\n  }\n  result_string = (char *)xmalloc(index);\n  sprintf(result_string,\"#%s,%s\",string1,string2);\n  index = 0;\n  free(string1);\n  free(string2);\n  while( true ) {\n    length1 = strlen(result_string);\n    if (count <= (int)index) break;\n    *(undefined2 *)(result_string + length1) = 0x2c;\n    string1 = (char *)ptr_array[index];\n    index = index + 1;\n    strcpy(result_string + length1 + 1,string1);\n    free(string1);\n  }\n  *(undefined2 *)(result_string + length1) = 0x3b;\n  free(ptr_array);\n  return_value = FUN_00109b52(data,result_string,0,undefined_var,0);\n  if ((char)return_value == '\\0') {\n    return 0;\n  }\n  free(result_string);\n  return return_value;\n}\n\n",
            "current_name": "process_data_0010a424",
            "entrypoint": "0x0010a424",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a424": "process_data_0010a424",
                "__ptr": "ptr_array",
                "__s": "string2",
                "__s_00": "result_string",
                "bVar10": "byte_flag",
                "bVar2": "byte_var",
                "cVar1": "result",
                "free": "deallocate_memory",
                "iVar3": "index",
                "lVar11": "loop_index",
                "lVar9": "index",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "count",
                "param_4": "flag2",
                "pcVar5": "string1",
                "sVar7": "length1",
                "sVar8": "length2",
                "sprintf": "create_formatted_string",
                "strcpy": "copy_string",
                "strlen": "get_string_length",
                "uVar12": "undefined_var",
                "uVar4": "return_value",
                "uVar6": "temp_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a69a": {
            "additional_data": {
                "FUN_00109b52": {
                    "1": "store_result"
                },
                "FUN_00109c2e": {
                    "1": "convert_to_string"
                },
                "FUN_0010a69a": {
                    "1": "process_string",
                    "2": "reverse_and_allocate_memory",
                    "26": "process_data"
                },
                "lVar2": {
                    "1": "formatted_value",
                    "12": "length",
                    "3": "result",
                    "7": "value"
                },
                "local_60": {
                    "1": "result_string",
                    "14": "buffer",
                    "2": "output_buffer",
                    "3": "formatted_string",
                    "6": "output_string"
                },
                "param_1": {
                    "1": "input",
                    "11": "data",
                    "2": "input_data",
                    "6": "data_pointer",
                    "7": "data_ptr"
                },
                "param_2": {
                    "1": "input_length",
                    "2": "data_size",
                    "3": "length",
                    "4": "ptr",
                    "6": "param2"
                },
                "param_3": {
                    "1": "length_param",
                    "19": "flag",
                    "2": "length",
                    "3": "is_zero"
                },
                "param_4": {
                    "1": "is_enabled",
                    "2": "ch",
                    "3": "char_flag",
                    "4": "char_value",
                    "6": "flag",
                    "9": "character"
                },
                "param_5": {
                    "1": "value_param",
                    "17": "value",
                    "2": "uint_val",
                    "5": "uint_value"
                },
                "sVar3": {
                    "1": "length_local",
                    "10": "length",
                    "12": "string_length",
                    "6": "str_length"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "strlen": {
                    "1": "calculate_string_length"
                },
                "uVar1": {
                    "28": "result",
                    "3": "return_value"
                },
                "uVar4": {
                    "1": "allocated_space",
                    "19": "allocated_memory",
                    "7": "allocated_ptr"
                },
                "uVar5": {
                    "1": "is_null",
                    "2": "is_allocated",
                    "3": "flag",
                    "6": "is_negative",
                    "7": "has_value"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "strlen",
                "sprintf",
                "FUN_00109c2e",
                "xmalloc",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f",
                "FUN_0010a83e"
            ],
            "code": "\nundefined4 process_data_0010a69a(long data,undefined8 param2,int flag,char character,uint value)\n\n{\n  undefined4 result;\n  long length;\n  size_t string_length;\n  undefined8 allocated_memory;\n  undefined has_value;\n  char buffer [48];\n  \n  if (flag == 0) {\n    buffer[0] = '\\0';\n    has_value = 0;\n    length = 0;\n  }\n  else {\n    length = FUN_00109c2e();\n    if (length < 0) {\n      return 0;\n    }\n    has_value = 1;\n    sprintf(buffer,\"%ld=\",length);\n  }\n  string_length = strlen(buffer);\n  sprintf(buffer + string_length,\"%c%u\",(ulong)((-(uint)(character == '\\0') & 2) + 0x73),(ulong)value);\n  result = FUN_00109b52(data,buffer,length,has_value,value);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  length = *(long *)(data + 0x60);\n  allocated_memory = xmalloc(1);\n  *(undefined8 *)(length + 0x20) = allocated_memory;\n  **(undefined **)(*(long *)(data + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "current_name": "process_data_0010a69a",
            "entrypoint": "0x0010a69a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a69a": "process_data_0010a69a",
                "lVar2": "length",
                "local_60": "buffer",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "flag",
                "param_4": "character",
                "param_5": "value",
                "sVar3": "string_length",
                "sprintf": "format_string",
                "strlen": "calculate_string_length",
                "uVar1": "result",
                "uVar4": "allocated_memory",
                "uVar5": "has_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a77a": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "helper_function"
                },
                "FUN_00109b52": {
                    "1": "process_function"
                },
                "FUN_0010a77a": {
                    "1": "execute_command",
                    "23": "process_data"
                },
                "__s": {
                    "1": "string_pointer",
                    "15": "string1",
                    "2": "string_ptr",
                    "6": "str1"
                },
                "__s + DAT_0010a844": {
                    "1": "sub_ptr"
                },
                "__s_00": {
                    "1": "result1",
                    "12": "string2",
                    "6": "str2"
                },
                "__s_01": {
                    "1": "concatenated_str_ptr",
                    "2": "str3",
                    "3": "new_string",
                    "9": "combined_string"
                },
                "free": {
                    "1": "free_memory"
                },
                "lVar2": {
                    "1": "ptr_val",
                    "3": "struct_ptr",
                    "4": "data_ptr",
                    "5": "ptr1",
                    "9": "ptr"
                },
                "param_1": {
                    "1": "command_address",
                    "11": "data",
                    "3": "input_param",
                    "5": "input",
                    "7": "input_data"
                },
                "sVar5": {
                    "1": "length_string1",
                    "2": "string2_length",
                    "7": "len1",
                    "9": "length1"
                },
                "sVar6": {
                    "1": "temp_string_len2",
                    "2": "length_2",
                    "3": "string1_length",
                    "7": "len2",
                    "9": "length2"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "strlen": {
                    "1": "string_length"
                },
                "uVar1": {
                    "1": "character1",
                    "2": "byte",
                    "3": "character",
                    "8": "flag"
                },
                "uVar3": {
                    "1": "command_value",
                    "11": "value",
                    "2": "ptr2"
                },
                "uVar4": {
                    "1": "result_code",
                    "19": "result",
                    "2": "status",
                    "6": "return_value"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "sprintf",
                "strlen",
                "FUN_00109b2f",
                "xmalloc",
                "FUN_00109b52",
                "free"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 process_data_0010a77a(long data)\n\n{\n  undefined flag;\n  long ptr;\n  char *string1;\n  undefined8 value;\n  undefined4 result;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *combined_string;\n  \n  ptr = *(long *)(data + 0x60);\n  if ((ptr != 0) && (string1 = *(char **)(ptr + 0x20), string1 != (char *)0x0)) {\n    result = *(undefined4 *)(ptr + 0x18);\n    flag = *(undefined *)(ptr + 0x1c);\n    value = *(undefined8 *)(ptr + 0x10);\n    string2 = (char *)FUN_00109b2f();\n    length1 = strlen(string2);\n    length2 = strlen(string1);\n    combined_string = (char *)xmalloc(length1 + 2 + length2);\n    sprintf(combined_string,\"%s%s;\",string2,string1);\n    free(string2);\n    free(string1);\n    result = FUN_00109b52(data,combined_string,value,flag,result);\n    if ((char)result != '\\0') {\n      free(combined_string);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_0010a77a",
            "entrypoint": "0x0010a77a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a77a": "process_data_0010a77a",
                "__s": "string1",
                "__s_00": "string2",
                "__s_01": "combined_string",
                "free": "release_memory",
                "lVar2": "ptr",
                "param_1": "data",
                "sVar5": "length1",
                "sVar6": "length2",
                "sprintf": "format_string",
                "strlen": "string_length",
                "uVar1": "flag",
                "uVar3": "value",
                "uVar4": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a83e": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "get_stored_value",
                    "5": "get_string"
                },
                "FUN_0010a69a": {
                    "1": "check_result",
                    "4": "process_data"
                },
                "FUN_0010a83e": {
                    "1": "process_function",
                    "17": "process_data"
                },
                "__s": {
                    "1": "str",
                    "20": "string1",
                    "4": "str1"
                },
                "__s_00": {
                    "1": "new_buffer",
                    "20": "string2",
                    "4": "str2"
                },
                "cVar3": {
                    "1": "character1",
                    "11": "char_value",
                    "3": "char_val",
                    "6": "character"
                },
                "free": {
                    "2": "deallocate_memory",
                    "4": "release_memory"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "input1",
                    "3": "data",
                    "4": "input_param",
                    "5": "input",
                    "8": "data_ptr"
                },
                "param_2": {
                    "1": "data_length",
                    "10": "param2",
                    "2": "data",
                    "3": "param"
                },
                "param_3": {
                    "1": "input_param3",
                    "2": "count",
                    "3": "size1",
                    "6": "param3"
                },
                "param_4": {
                    "1": "argument4",
                    "10": "flag",
                    "2": "flag_param",
                    "8": "param4"
                },
                "param_5": {
                    "1": "mask",
                    "2": "mask_param",
                    "3": "size2",
                    "5": "value",
                    "8": "param5"
                },
                "param_6": {
                    "1": "input_arg6",
                    "14": "flag1",
                    "3": "condition1"
                },
                "param_7": {
                    "1": "argument7",
                    "14": "flag2",
                    "3": "condition2"
                },
                "sVar2": {
                    "1": "string_size",
                    "12": "length",
                    "14": "string_length",
                    "2": "str_length"
                },
                "sprintf": {
                    "5": "format_string"
                },
                "strlen": {
                    "2": "get_length",
                    "4": "get_string_length"
                },
                "uVar1": {
                    "28": "result",
                    "3": "return_value"
                },
                "xmalloc": {
                    "6": "allocate_memory"
                }
            },
            "called": [
                "sprintf",
                "FUN_00109b2f",
                "strlen",
                "xmalloc",
                "FUN_0010a69a",
                "free"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4\nprocess_data_0010a83e(long data_ptr,undefined8 param2,ulong param3,undefined flag,ulong param5,\n            byte flag1,byte flag2)\n\n{\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t string_length;\n  char char_value;\n  \n  if (((flag2 ^ 1) & flag1) == 0) {\n    string1 = (char *)0x0;\n    char_value = '\\0';\n  }\n  else {\n    char_value = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n    string1 = (char *)FUN_00109b2f();\n    param5 = param5 & 0xffffffff;\n    param3 = param3 & 0xffffffff;\n  }\n  result = FUN_0010a69a(data_ptr,param2,param3,flag,param5);\n  if ((char)result != '\\0') {\n    if (flag1 == 0) {\n      return result;\n    }\n    if (flag2 == 0) {\n      if (string1 == (char *)0x0) {\n        return 0;\n      }\n      string_length = strlen(string1);\n      string2 = (char *)xmalloc(string_length + 3);\n      sprintf(string2,\"~%%%s\",string1);\n      free(string1);\n      if (char_value != '\\0') {\n        *(undefined *)(*(long *)(data_ptr + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(data_ptr + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      string2 = (char *)xmalloc(0x14);\n      sprintf(string2,\"~%%%ld\",*(undefined8 *)(*(long *)(data_ptr + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(data_ptr + 0x60) + 0x38) = string2;\n    return result;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_0010a83e",
            "entrypoint": "0x0010a83e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a83e": "process_data_0010a83e",
                "__s": "string1",
                "__s_00": "string2",
                "cVar3": "char_value",
                "free": "release_memory",
                "param_1": "data_ptr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "flag",
                "param_5": "param5",
                "param_6": "flag1",
                "param_7": "flag2",
                "sVar2": "string_length",
                "sprintf": "format_string",
                "strlen": "get_string_length",
                "uVar1": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a94e": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "extract_data"
                },
                "FUN_0010a94e": {
                    "1": "process_data",
                    "2": "construct_url"
                },
                "__format": {
                    "1": "format_string"
                },
                "__s": {
                    "1": "sub_func_result",
                    "2": "random_string",
                    "3": "hostname",
                    "7": "result"
                },
                "abort": {
                    "1": "abort_program"
                },
                "cVar1": {
                    "1": "flag_type",
                    "10": "flag_value",
                    "4": "flag_char",
                    "7": "flag"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "lVar2": {
                    "1": "ptr_val",
                    "2": "ptr"
                },
                "param_1": {
                    "1": "binary_address",
                    "2": "input_data",
                    "3": "base_address"
                },
                "param_2": {
                    "1": "param_value_1",
                    "11": "username",
                    "2": "input1",
                    "5": "string1"
                },
                "param_3": {
                    "1": "id",
                    "11": "password",
                    "2": "str2",
                    "5": "string2"
                },
                "param_4": {
                    "1": "param_type",
                    "19": "flag",
                    "5": "option"
                },
                "pcVar7": {
                    "1": "original_string",
                    "2": "request_string",
                    "4": "dynamic_string"
                },
                "pcVar9": {
                    "1": "argument_string",
                    "13": "flag_string",
                    "2": "option_text",
                    "3": "flag_str"
                },
                "sVar3": {
                    "1": "size1",
                    "5": "length1",
                    "6": "len1"
                },
                "sVar4": {
                    "1": "input_length",
                    "2": "username_len",
                    "3": "username_length",
                    "5": "length2",
                    "6": "len2"
                },
                "sVar5": {
                    "1": "buffer_length",
                    "4": "length3",
                    "6": "len3"
                },
                "sVar6": {
                    "1": "mac_address_length",
                    "2": "password_len",
                    "3": "password_length",
                    "4": "length4",
                    "6": "len4"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "strlen": {
                    "1": "get_length"
                },
                "uVar8": {
                    "1": "result_code",
                    "14": "result",
                    "16": "return_value"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "strlen",
                "sprintf",
                "FUN_00109b2f",
                "xmalloc",
                "abort",
                "free"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 build_url_0010a94e(long data,char *username,char *password,int flag)\n\n{\n  char flag_value;\n  long data_pointer;\n  char *result;\n  size_t len1;\n  size_t len2;\n  size_t len3;\n  size_t len4;\n  char *dynamic_string;\n  undefined8 return_value;\n  char *flag_string;\n  \n  flag_value = *(char *)(*(long *)(data + 0x60) + 0x1c);\n  result = (char *)FUN_00109b2f();\n  dynamic_string = *(char **)(*(long *)(data + 0x60) + 0x20);\n  if (dynamic_string == (char *)0x0) {\n    return_value = 0;\n  }\n  else {\n    len1 = strlen(dynamic_string);\n    len2 = strlen(username);\n    len3 = strlen(result);\n    len4 = strlen(password);\n    dynamic_string = (char *)xmalloc(len1 + 10 + len2 + len3 + len4);\n    if (flag == 1) {\n      flag_string = \"/1\";\n    }\n    else {\n      flag_string = \"/0\";\n      if ((flag != 2) && (flag_string = \"\", flag != 0)) {\n                    \n        abort_program();\n      }\n    }\n    sprintf(dynamic_string,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(data + 0x60) + 0x20),username,flag_string,\n            result,password,*(long *)(data + 0x60));\n    free(*(void **)(*(long *)(data + 0x60) + 0x20));\n    data_pointer = *(long *)(data + 0x60);\n    *(char **)(data_pointer + 0x20) = dynamic_string;\n    if (flag_value != '\\0') {\n      *(undefined *)(data_pointer + 0x1c) = 1;\n    }\n    return_value = CONCAT71((int7)((ulong)data_pointer >> 8),1);\n  }\n  return return_value;\n}\n\n",
            "current_name": "build_url_0010a94e",
            "entrypoint": "0x0010a94e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a94e": "build_url_0010a94e",
                "__s": "result",
                "abort": "abort_program",
                "cVar1": "flag_value",
                "free": "deallocate_memory",
                "lVar2": "data_pointer",
                "param_1": "data",
                "param_2": "username",
                "param_3": "password",
                "param_4": "flag",
                "pcVar7": "dynamic_string",
                "pcVar9": "flag_string",
                "sVar3": "len1",
                "sVar4": "len2",
                "sVar5": "len3",
                "sVar6": "len4",
                "sprintf": "format_string",
                "strlen": "get_length",
                "uVar8": "return_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010aa53": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "get_data"
                },
                "FUN_0010aa53": {
                    "1": "create_string_and_add_to_data_structure",
                    "3": "parse_and_store_data",
                    "7": "process_data"
                },
                "__s": {
                    "1": "string_to_copy",
                    "15": "string",
                    "3": "str",
                    "4": "string_value"
                },
                "abort": {
                    "1": "terminate_program"
                },
                "cVar1": {
                    "1": "temp_char",
                    "14": "flag_value",
                    "3": "flag_char"
                },
                "cVar3": {
                    "1": "char_value2",
                    "2": "flag_value",
                    "3": "option_value",
                    "5": "flag_char"
                },
                "free": {
                    "1": "free_memory"
                },
                "lVar2": {
                    "1": "structure_address",
                    "2": "data_structure_ptr",
                    "3": "data_pointer",
                    "4": "struct_ptr"
                },
                "lVar7": {
                    "1": "new_ptr",
                    "2": "ptr2",
                    "5": "realloc_pointer",
                    "8": "realloc_ptr"
                },
                "param_1": {
                    "1": "buffer",
                    "2": "data_address",
                    "3": "data_pointer",
                    "4": "data",
                    "5": "data_struct"
                },
                "param_2": {
                    "1": "param",
                    "2": "data",
                    "23": "value",
                    "3": "data_value"
                },
                "param_3": {
                    "1": "flag_char",
                    "16": "flag",
                    "2": "indicator",
                    "3": "char_value",
                    "5": "character"
                },
                "param_4": {
                    "1": "int_value",
                    "10": "flag",
                    "2": "type",
                    "5": "option",
                    "6": "mode"
                },
                "pcVar6": {
                    "1": "new_buffer",
                    "14": "new_string",
                    "2": "new_str",
                    "4": "allocated_string"
                },
                "sVar5": {
                    "1": "message_length",
                    "2": "length",
                    "22": "string_length",
                    "3": "str_length"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "uVar10": {
                    "1": "loop_index",
                    "2": "loop_end",
                    "3": "last_index",
                    "5": "count"
                },
                "uVar4": {
                    "1": "tmp",
                    "2": "loop_var",
                    "3": "index",
                    "4": "loop_index",
                    "5": "counter",
                    "6": "loop_counter"
                },
                "uVar8": {
                    "1": "success_flag",
                    "14": "result",
                    "15": "return_value"
                },
                "uVar9": {
                    "1": "iteration",
                    "10": "index",
                    "2": "temp_counter",
                    "3": "loop_index",
                    "6": "counter"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                },
                "xrealloc": {
                    "1": "reallocate_memory"
                }
            },
            "called": [
                "sprintf",
                "strlen",
                "FUN_00109b2f",
                "xmalloc",
                "xrealloc",
                "abort",
                "free"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 process_data_0010aa53(long data_struct,undefined8 value,char flag,int flag)\n\n{\n  char flag_value;\n  long struct_ptr;\n  char flag_char;\n  uint loop_counter;\n  char *string;\n  size_t string_length;\n  char *new_string;\n  long realloc_ptr;\n  undefined8 return_value;\n  ulong index;\n  ulong count;\n  \n  flag_value = *(char *)(*(long *)(data_struct + 0x60) + 0x1c);\n  string = (char *)FUN_00109b2f();\n  string_length = strlen(string);\n  new_string = (char *)xmalloc(string_length + 0x19);\n  *new_string = flag + '0';\n  if (flag == 1) {\n    flag_char = '1';\n  }\n  else {\n    flag_char = '0';\n    if ((flag != 2) && (flag_char = '2', flag != 0)) {\n                    \n      abort();\n    }\n  }\n  new_string[1] = flag_char;\n  sprintf(new_string + 2,\"%ld,%s;\",value);\n  free_memory(string);\n  struct_ptr = *(long *)(data_struct + 0x60);\n  return_value = 0;\n  if ((struct_ptr != 0) && (*(long *)(struct_ptr + 0x20) != 0)) {\n    struct_ptr = *(long *)(struct_ptr + 0x28);\n    count = 0;\n    if (struct_ptr != 0) {\n      loop_counter = 0;\n      do {\n        index = (ulong)loop_counter;\n        count = (ulong)loop_counter;\n        loop_counter = loop_counter + 1;\n      } while (*(long *)(struct_ptr + index * 8) != 0);\n    }\n    realloc_ptr = xrealloc(struct_ptr,(ulong)((int)count + 2) << 3);\n    *(char **)(realloc_ptr + count * 8) = new_string;\n    *(undefined8 *)(realloc_ptr + (ulong)((int)count + 1) * 8) = 0;\n    struct_ptr = *(long *)(data_struct + 0x60);\n    *(long *)(struct_ptr + 0x28) = realloc_ptr;\n    if (flag_value != '\\0') {\n      *(undefined *)(struct_ptr + 0x1c) = 1;\n    }\n    return_value = 1;\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_data_0010aa53",
            "entrypoint": "0x0010aa53",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010aa53": "process_data_0010aa53",
                "__s": "string",
                "abort": "terminate_program",
                "cVar1": "flag_value",
                "cVar3": "flag_char",
                "free": "free_memory",
                "lVar2": "struct_ptr",
                "lVar7": "realloc_ptr",
                "param_1": "data_struct",
                "param_2": "value",
                "param_3": "flag",
                "param_4": "flag",
                "pcVar6": "new_string",
                "sVar5": "string_length",
                "sprintf": "format_string",
                "strlen": "get_string_length",
                "uVar10": "count",
                "uVar4": "loop_counter",
                "uVar8": "return_value",
                "uVar9": "index",
                "xmalloc": "allocate_memory",
                "xrealloc": "reallocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ab4d": {
            "additional_data": {
                "FUN_0010ab4d": {
                    "1": "append_string_to_buffer",
                    "2": "update_string_and_return",
                    "3": "append_to_log",
                    "4": "update_string"
                },
                "auVar3": {
                    "1": "output1",
                    "13": "result",
                    "3": "return_value",
                    "5": "result1"
                },
                "auVar7": {
                    "1": "new_buffer",
                    "10": "return_value",
                    "2": "output",
                    "5": "result2"
                },
                "lVar2": {
                    "1": "object_ptr2",
                    "2": "struct_ptr_copy",
                    "3": "ptr2"
                },
                "param_1": {
                    "1": "buffer",
                    "2": "structure_address",
                    "3": "data",
                    "4": "input_struct",
                    "5": "base_address"
                },
                "param_2": {
                    "1": "new_entry",
                    "2": "str",
                    "4": "string",
                    "6": "new_string",
                    "7": "input_string"
                },
                "param_3": {
                    "1": "unused_param_3",
                    "2": "unused_param",
                    "3": "arg1",
                    "5": "param3",
                    "6": "param_3"
                },
                "param_4": {
                    "1": "unused_param_4",
                    "2": "unused_param_2",
                    "3": "arg2",
                    "5": "param4",
                    "6": "param_4"
                },
                "pcVar5": {
                    "1": "str_data",
                    "14": "existing_string"
                },
                "sVar4": {
                    "1": "param2_length",
                    "2": "input_length",
                    "3": "string_length",
                    "4": "new_string_length"
                },
                "sVar6": {
                    "1": "length2",
                    "10": "existing_string_length",
                    "5": "existing_string_len"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "strlen": {
                    "2": "get_string_length"
                },
                "uVar1": {
                    "1": "buffer_length",
                    "2": "structure_value",
                    "3": "ptr1",
                    "4": "struct_ptr"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                },
                "xrealloc": {
                    "1": "reallocate_memory"
                }
            },
            "called": [
                "strlen",
                "sprintf",
                "xmalloc",
                "xrealloc"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] update_string_0010ab4d(long base_address,char *input_string,undefined8 param_3,undefined8 param_4)\n\n{\n  ulong struct_ptr;\n  long ptr2;\n  undefined result [16];\n  size_t new_string_length;\n  char *existing_string;\n  size_t existing_string_length;\n  undefined return_value [16];\n  \n  struct_ptr = *(ulong *)(base_address + 0x60);\n  if ((struct_ptr != 0) && (*(long *)(struct_ptr + 0x20) != 0)) {\n    existing_string = *(char **)(struct_ptr + 0x30);\n    new_string_length = strlen(input_string);\n    if (existing_string == (char *)0x0) {\n      existing_string = (char *)xmalloc(new_string_length + 3);\n      *existing_string = '\\0';\n    }\n    else {\n      existing_string_length = strlen(existing_string);\n      existing_string = (char *)xrealloc(existing_string,new_string_length + 4 + existing_string_length);\n    }\n    new_string_length = strlen(existing_string);\n    sprintf(existing_string + new_string_length,\"%s::\",input_string);\n    ptr2 = *(long *)(base_address + 0x60);\n    *(char **)(ptr2 + 0x30) = existing_string;\n    return_value._1_7_ = (undefined7)((ulong)ptr2 >> 8);\n    return_value[0] = 1;\n    return_value._8_8_ = param_4;\n    return return_value;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = struct_ptr;\n  return result << 0x40;\n}\n\n",
            "current_name": "update_string_0010ab4d",
            "entrypoint": "0x0010ab4d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ab4d": "update_string_0010ab4d",
                "auVar3": "result",
                "auVar7": "return_value",
                "lVar2": "ptr2",
                "param_1": "base_address",
                "param_2": "input_string",
                "pcVar5": "existing_string",
                "sVar4": "new_string_length",
                "sVar6": "existing_string_length",
                "sprintf": "concatenate_strings",
                "strlen": "get_string_length",
                "uVar1": "struct_ptr",
                "xmalloc": "allocate_memory",
                "xrealloc": "reallocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010abdd": {
            "additional_data": {
                "(+(param_6 == '\\0') & 0xfeU) + 0x43": {
                    "1": "calculation_1"
                },
                "(+(param_6 == '\\0') & 0xfeU) + 0x44": {
                    "1": "calculation_2"
                },
                "(+(param_8 == '\\0') & 4U) + 0x2a": {
                    "1": "calculation_3"
                },
                "(0x32 - (char)param_3)": {
                    "1": "calculation_7"
                },
                "(int)cVar10": {
                    "1": "char1_cast"
                },
                "(int)cVar11": {
                    "1": "char2_cast"
                },
                "(ulong)(byte)(0x32 - (char)param_3)": {
                    "1": "calculation_4"
                },
                "(ulong)(uint)(int)cVar10": {
                    "1": "calculation_6"
                },
                "(ulong)(uint)(int)cVar11": {
                    "1": "calculation_5"
                },
                "+(param_6 == '\\0')": {
                    "1": "flag3_comparison"
                },
                "+(param_8 == '\\0')": {
                    "1": "flag4_comparison"
                },
                "-(param_6 == '\\0')": {
                    "1": "flag3_negation"
                },
                "-(param_8 == '\\0')": {
                    "1": "flag4_negation"
                },
                "0x0": {
                    "1": "null"
                },
                "0x1c": {
                    "1": "byte_offset"
                },
                "0x28": {
                    "1": "constant_offset"
                },
                "0x2a": {
                    "1": "constant_value_1"
                },
                "0x30": {
                    "1": "string_ptr_offset"
                },
                "0x43": {
                    "1": "constant_value_2"
                },
                "0x44": {
                    "1": "constant_value_3"
                },
                "0x60": {
                    "1": "offset"
                },
                "FUN_00109b2f": {
                    "1": "allocate_memory"
                },
                "FUN_0010abdd": {
                    "1": "update_binary_info",
                    "2": "update_configuration",
                    "7": "process_data"
                },
                "__s": {
                    "1": "another_string",
                    "2": "string_ptr3",
                    "3": "str3"
                },
                "abort": {
                    "2": "terminate_execution"
                },
                "bVar3": {
                    "1": "byte_value",
                    "2": "byte_var1",
                    "6": "byte_var",
                    "9": "byte_val"
                },
                "cVar10": {
                    "1": "char_value_1",
                    "12": "char1",
                    "6": "char_val1",
                    "8": "char_var1"
                },
                "cVar11": {
                    "1": "char_value2",
                    "12": "char2",
                    "6": "char_val2",
                    "9": "char_var2"
                },
                "free": {
                    "1": "deallocate_memory",
                    "3": "release_memory"
                },
                "lVar1": {
                    "1": "data",
                    "2": "data_length",
                    "3": "config_ptr",
                    "4": "data_ptr",
                    "8": "ptr1"
                },
                "local_52": {
                    "1": "local_value",
                    "2": "byte_var",
                    "3": "byte_value",
                    "4": "byte_var2",
                    "9": "local_byte"
                },
                "param_1": {
                    "1": "binary_param",
                    "2": "binary_address",
                    "3": "input_data",
                    "5": "data_ptr"
                },
                "param_2": {
                    "1": "data",
                    "12": "string1",
                    "3": "input_string",
                    "7": "string_param"
                },
                "param_3": {
                    "1": "data_length",
                    "2": "count_param",
                    "3": "input_length",
                    "4": "size_param",
                    "6": "length"
                },
                "param_4": {
                    "1": "char_param_1",
                    "2": "flag1_param",
                    "20": "flag1"
                },
                "param_5": {
                    "1": "toggle2",
                    "2": "flag2_param",
                    "20": "flag2"
                },
                "param_6": {
                    "1": "condition3",
                    "2": "flag3_param",
                    "20": "flag3"
                },
                "param_7": {
                    "1": "long_parameter",
                    "11": "value",
                    "2": "param7",
                    "3": "number_param",
                    "5": "long_param"
                },
                "param_8": {
                    "1": "condition_4",
                    "18": "flag4",
                    "2": "enable"
                },
                "pcVar2": {
                    "1": "str2",
                    "2": "buffer",
                    "3": "str1",
                    "4": "ptr2"
                },
                "pcVar4": {
                    "1": "char_ptr2",
                    "2": "string_var2",
                    "3": "str2",
                    "4": "ptr3"
                },
                "sVar5": {
                    "1": "size1",
                    "2": "length_1",
                    "3": "string_length1",
                    "7": "len1",
                    "8": "length1"
                },
                "sVar6": {
                    "1": "buffer_size2",
                    "2": "length_2",
                    "3": "string_length2",
                    "7": "len2",
                    "8": "length2"
                },
                "sVar7": {
                    "1": "string3_length",
                    "2": "string_length3",
                    "7": "len3",
                    "8": "length3"
                },
                "sVar8": {
                    "1": "aux_str_len",
                    "2": "string_length4",
                    "7": "length4"
                },
                "sprintf": {
                    "1": "concatenate_strings",
                    "2": "format_string"
                },
                "strlen": {
                    "1": "get_string_length",
                    "2": "get_length"
                },
                "uVar9": {
                    "1": "output_value",
                    "24": "result",
                    "5": "return_value"
                },
                "xrealloc": {
                    "1": "reallocate",
                    "3": "resize_memory"
                }
            },
            "called": [
                "strlen",
                "FUN_00109b2f",
                "sprintf",
                "xrealloc",
                "abort",
                "free"
            ],
            "calling": [
                "FUN_0010adf2",
                "FUN_0010add5"
            ],
            "code": "\nundefined8\nprocess_data_0010abdd(long input_param,char *string1,uint length,char flag1,char flag2,char flag3,\n            undefined8 value,char flag4)\n\n{\n  long ptr1;\n  char *str_ptr;\n  byte byte_val;\n  char *ptr3;\n  char *str3;\n  size_t length1;\n  size_t length2;\n  size_t length3;\n  size_t len4;\n  undefined8 result;\n  char char1;\n  char char2;\n  byte local_byte;\n  \n  str3 = (char *)0x0;\n  local_byte = *(byte *)(*(long *)(input_param + 0x60) + 0x1c);\n  ptr3 = (char *)FUN_00109b2f();\n  if (flag4 != '\\0') {\n    byte_val = 1;\n    if (local_byte == 0) {\n      byte_val = *(byte *)(*(long *)(input_param + 0x60) + 0x1c);\n    }\n    local_byte = byte_val & 1;\n    str3 = (char *)FUN_00109b2f(input_param);\n  }\n  ptr1 = *(long *)(input_param + 0x60);\n  if ((ptr1 == 0) || (str_ptr = *(char **)(ptr1 + 0x30), str_ptr == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < length) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    char1 = '?';\n    if (flag1 == '\\0') {\n      char1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    length1 = strlen(str_ptr);\n    length2 = strlen(ptr3);\n    length3 = strlen(string1);\n    len4 = 0;\n    if (flag4 != '\\0') {\n      len4 = strlen(str3);\n    }\n    result = xrealloc(str_ptr,length3 + length1 + 0x28 + length2 + len4);\n    *(undefined8 *)(ptr1 + 0x30) = result;\n    str_ptr = *(char **)(*(long *)(input_param + 0x60) + 0x30);\n    length1 = strlen(str_ptr);\n    sprintf(str_ptr + length1,\"%s:%s;%c%c%c\",ptr3,string1,(ulong)(byte)(0x32 - (char)length),\n            calculation_5,calculation_6,length1);\n    free(ptr3);\n    if (flag4 != '\\0') {\n      ptr3 = *(char **)(*(long *)(input_param + 0x60) + 0x30);\n      length1 = strlen(ptr3);\n      sprintf(ptr3 + length1,\"%ld;%s;\",value,str3);\n      free(str3);\n    }\n    if (local_byte != 0) {\n      *(undefined *)(*(long *)(input_param + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_0010abdd",
            "entrypoint": "0x0010abdd",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)cVar10": "char1_cast",
                "(int)cVar11": "char2_cast",
                "(ulong)(uint)(int)cVar10": "calculation_6",
                "(ulong)(uint)(int)cVar11": "calculation_5",
                "FUN_0010abdd": "process_data_0010abdd",
                "__s": "str3",
                "abort": "terminate_execution",
                "bVar3": "byte_val",
                "cVar10": "char1",
                "cVar11": "char2",
                "free": "release_memory",
                "lVar1": "ptr1",
                "local_52": "local_byte",
                "param_1": "input_param",
                "param_2": "string1",
                "param_3": "length",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "value",
                "param_8": "flag4",
                "pcVar2": "str_ptr",
                "pcVar4": "ptr3",
                "sVar5": "length1",
                "sVar6": "length2",
                "sVar7": "length3",
                "sVar8": "len4",
                "sprintf": "format_string",
                "strlen": "get_length",
                "uVar9": "result",
                "xrealloc": "resize_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010add5": {
            "additional_data": {
                "FUN_0010abdd": {
                    "1": "initialize_variables",
                    "2": "execute_sub_function"
                },
                "FUN_0010add5": {
                    "1": "initialize_game",
                    "11": "execute_initialization",
                    "2": "execute_main_function"
                },
                "param_1": {
                    "1": "initial_value",
                    "10": "input_value",
                    "2": "input_length",
                    "4": "length"
                },
                "param_2": {
                    "1": "file_data",
                    "2": "buffer",
                    "3": "string_param",
                    "5": "data",
                    "9": "input_string"
                },
                "param_3": {
                    "1": "input_value",
                    "2": "flags",
                    "3": "size",
                    "4": "count",
                    "6": "input_size"
                },
                "param_4": {
                    "1": "char_value_1",
                    "15": "flag1",
                    "3": "option1",
                    "6": "flag_1"
                },
                "param_5": {
                    "1": "param_five",
                    "15": "flag2",
                    "3": "option2",
                    "6": "flag_2"
                },
                "param_6": {
                    "1": "param_six",
                    "15": "flag3",
                    "3": "option3",
                    "6": "flag_3"
                }
            },
            "called": [
                "FUN_0010abdd"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid execute_initialization_0010add5(void)\n\n{\n  FUN_0010abdd();\n  return;\n}\n\n",
            "current_name": "execute_initialization_0010add5",
            "entrypoint": "0x0010add5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010add5": "execute_initialization_0010add5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010adf2": {
            "additional_data": {
                "FUN_0010abdd": {
                    "1": "subfunction_initialize",
                    "2": "perform_initialization",
                    "3": "execute_sub_function"
                },
                "FUN_0010adf2": {
                    "1": "initialize_program",
                    "2": "execute_function",
                    "4": "execute_main_function",
                    "5": "initialize_system"
                },
                "param_1": {
                    "1": "arg1",
                    "2": "value",
                    "3": "input_value"
                },
                "param_2": {
                    "1": "param_value2",
                    "2": "component_name",
                    "3": "buffer",
                    "4": "data"
                },
                "param_3": {
                    "1": "config_size",
                    "2": "input_length",
                    "5": "size"
                },
                "param_4": {
                    "1": "enable_option1",
                    "2": "option1",
                    "7": "flag_1",
                    "9": "flag1"
                },
                "param_5": {
                    "1": "arg5",
                    "2": "option2",
                    "7": "flag_2",
                    "9": "flag2"
                },
                "param_6": {
                    "1": "param_flag_3",
                    "2": "option3",
                    "7": "flag_3",
                    "9": "flag3"
                }
            },
            "called": [
                "FUN_0010abdd"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid initialize_0010adf2(void)\n\n{\n  FUN_0010abdd();\n  return;\n}\n\n",
            "current_name": "initialize_0010adf2",
            "entrypoint": "0x0010adf2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010adf2": "initialize_0010adf2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ae0e": {
            "additional_data": {
                "*(char **)(address)": {
                    "1": "string_address"
                },
                "FUN_0010ae0e": {
                    "1": "combine_strings",
                    "3": "process_data"
                },
                "__dest": {
                    "2": "dest_str"
                },
                "__format": {
                    "1": "format_str"
                },
                "__ptr": {
                    "1": "alloc_ptr",
                    "2": "ptr2",
                    "3": "temp_ptr",
                    "5": "ptr3"
                },
                "__ptr + offset": {
                    "1": "address"
                },
                "__s": {
                    "1": "str1",
                    "2": "str"
                },
                "__src": {
                    "2": "src_str"
                },
                "free": {
                    "1": "deallocate_memory",
                    "2": "free_memory"
                },
                "lVar1": {
                    "1": "first_long_variable",
                    "2": "ptr_struct",
                    "3": "ptr_to_struct",
                    "6": "ptr1",
                    "7": "struct_ptr"
                },
                "lVar2": {
                    "1": "ptr_to_char_array",
                    "3": "ptr_array",
                    "4": "ptr",
                    "6": "ptr2"
                },
                "lVar8": {
                    "1": "final_str_size",
                    "12": "total_len",
                    "2": "result_len",
                    "8": "total_length"
                },
                "param_1": {
                    "1": "data",
                    "16": "input",
                    "2": "input_parameter",
                    "3": "input_param",
                    "4": "input_data"
                },
                "pcVar3": {
                    "1": "char_pointer_variable",
                    "2": "str",
                    "4": "str_ptr",
                    "6": "str1"
                },
                "pcVar6": {
                    "1": "new_string",
                    "2": "final_string",
                    "3": "result_string",
                    "4": "str2",
                    "6": "result"
                },
                "sVar4": {
                    "1": "size1",
                    "17": "len1",
                    "2": "length_1",
                    "5": "length1"
                },
                "sVar5": {
                    "1": "second_size_variable",
                    "17": "len2",
                    "2": "length_2",
                    "5": "length2"
                },
                "sprintf": {
                    "1": "append_formatted_string",
                    "2": "format_string"
                },
                "strcat": {
                    "1": "append_string",
                    "2": "concatenate_string"
                },
                "strcpy": {
                    "3": "copy_string"
                },
                "strlen": {
                    "3": "get_string_length"
                },
                "uVar10": {
                    "1": "counter_2",
                    "2": "num_elements",
                    "3": "num_strings",
                    "4": "index",
                    "7": "count"
                },
                "uVar10 * 8": {
                    "1": "offset"
                },
                "uVar7": {
                    "1": "success_flag",
                    "11": "result",
                    "17": "return_value",
                    "2": "status"
                },
                "uVar9": {
                    "1": "uint_variable",
                    "14": "counter",
                    "2": "loop_counter",
                    "4": "index",
                    "8": "count"
                },
                "xmalloc": {
                    "3": "allocate_memory"
                }
            },
            "called": [
                "strlen",
                "sprintf",
                "strcat",
                "xmalloc",
                "strcpy",
                "free"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 process_data_0010ae0e(long input)\n\n{\n  long struct_ptr;\n  long ptr2;\n  void *ptr;\n  char *str1;\n  size_t len1;\n  size_t len2;\n  char *result;\n  undefined8 return_value;\n  long total_len;\n  uint counter;\n  ulong count;\n  \n  return_value = 0;\n  struct_ptr = *(long *)(input + 0x60);\n  if (((struct_ptr != 0) && (*(char **)(struct_ptr + 8) != (char *)0x0)) &&\n     (result = *(char **)(struct_ptr + 0x20), result != (char *)0x0)) {\n    len1 = strlen(*(char **)(struct_ptr + 8));\n    len2 = strlen(result);\n    ptr2 = *(long *)(struct_ptr + 0x28);\n    if (ptr2 == 0) {\n      total_len = len1 + len2 + 10;\n      count = 0;\n    }\n    else {\n      total_len = len1 + len2 + 0x1e;\n      count = 0;\n      while( true ) {\n        result = *(char **)(ptr2 + count * 8);\n        if (result == (char *)0x0) break;\n        len1 = strlen(result);\n        count = (ulong)((int)count + 1);\n        total_len = total_len + len1;\n      }\n    }\n    if (*(char **)(struct_ptr + 0x30) != (char *)0x0) {\n      len1 = strlen(*(char **)(struct_ptr + 0x30));\n      total_len = total_len + len1;\n    }\n    if (*(char **)(struct_ptr + 0x38) != (char *)0x0) {\n      len1 = strlen(*(char **)(struct_ptr + 0x38));\n      total_len = total_len + len1;\n    }\n    result = (char *)xmalloc(total_len);\n    struct_ptr = *(long *)(input + 0x60);\n    strcpy(result,*(char **)(struct_ptr + 8));\n    if (*(long *)(struct_ptr + 0x28) != 0) {\n      counter = 0;\n      len1 = strlen(result);\n      sprintf(result + len1,\"!%u,\",count);\n      while( true ) {\n        struct_ptr = *(long *)(input + 0x60);\n        count = (ulong)counter;\n        ptr = *(void **)(struct_ptr + 0x28);\n        str1 = *(char **)((long)ptr + count * 8);\n        if (str1 == (char *)0x0) break;\n        counter = counter + 1;\n        strcat(result,str1);\n        free_memory(*(void **)(*(long *)(struct_ptr + 0x28) + count * 8));\n      }\n      free_memory(ptr);\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x28) = 0;\n    }\n    struct_ptr = *(long *)(input + 0x60);\n    strcat(result,*(char **)(struct_ptr + 0x20));\n    free_memory(*(void **)(struct_ptr + 0x20));\n    struct_ptr = *(long *)(input + 0x60);\n    *(undefined8 *)(struct_ptr + 0x20) = 0;\n    if (*(char **)(struct_ptr + 0x30) != (char *)0x0) {\n      strcat(result,*(char **)(struct_ptr + 0x30));\n      free_memory(*(void **)(struct_ptr + 0x30));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x30) = 0;\n    }\n    len1 = strlen(result);\n    struct_ptr = *(long *)(input + 0x60);\n    *(undefined2 *)(result + len1) = 0x3b;\n    str1 = *(char **)(struct_ptr + 0x38);\n    if (str1 != (char *)0x0) {\n      strcpy(result + len1 + 1,str1);\n      free_memory(*(void **)(struct_ptr + 0x38));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x38) = 0;\n    }\n    free_memory(*(void **)(*(long *)(input + 0x60) + 8));\n    struct_ptr = *(long *)(input + 0x60);\n    *(char **)(struct_ptr + 8) = result;\n    return_value = CONCAT71((int7)((ulong)struct_ptr >> 8),1);\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_data_0010ae0e",
            "entrypoint": "0x0010ae0e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ae0e": "process_data_0010ae0e",
                "__ptr": "ptr",
                "free": "free_memory",
                "lVar1": "struct_ptr",
                "lVar2": "ptr2",
                "lVar8": "total_len",
                "param_1": "input",
                "pcVar3": "str1",
                "pcVar6": "result",
                "sVar4": "len1",
                "sVar5": "len2",
                "sprintf": "format_string",
                "strcat": "concatenate_string",
                "strcpy": "copy_string",
                "strlen": "get_string_length",
                "uVar10": "count",
                "uVar7": "return_value",
                "uVar9": "counter",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010afd5": {
            "additional_data": {
                "FUN_00109a0b": {
                    "1": "get_string_from_param"
                },
                "FUN_0010afd5": {
                    "1": "find_string_in_struct",
                    "2": "find_string",
                    "3": "find_string_in_nested_structures",
                    "4": "find_matching_string",
                    "6": "find_and_free_string"
                },
                "FUN_00113e23": {
                    "1": "process_data_item",
                    "2": "calculate_hash"
                },
                "__s2": {
                    "1": "str2",
                    "11": "search_string",
                    "2": "string_to_find",
                    "5": "target_string"
                },
                "auVar8": {
                    "1": "return_val",
                    "18": "return_value",
                    "2": "return_data",
                    "3": "result"
                },
                "bVar7": {
                    "1": "byte_var",
                    "2": "index",
                    "4": "count",
                    "5": "counter"
                },
                "free": {
                    "1": "free_memory",
                    "2": "deallocate_memory",
                    "4": "release_memory"
                },
                "iVar1": {
                    "1": "comparison",
                    "3": "result",
                    "6": "comparison_result"
                },
                "lVar4": {
                    "1": "data",
                    "2": "temp_value",
                    "9": "value"
                },
                "param_1": {
                    "1": "list_head",
                    "2": "node_list",
                    "3": "param_list",
                    "6": "list",
                    "8": "linked_list"
                },
                "param_2": {
                    "1": "node_array_size",
                    "2": "param2",
                    "3": "param_2",
                    "4": "context",
                    "6": "data"
                },
                "param_3": {
                    "1": "string1",
                    "2": "input_string",
                    "4": "string",
                    "5": "str"
                },
                "param_4": {
                    "1": "len",
                    "2": "val1",
                    "4": "param4",
                    "8": "param_4"
                },
                "param_5": {
                    "1": "arg5",
                    "2": "val2",
                    "4": "param5",
                    "8": "param_5"
                },
                "param_6": {
                    "1": "var",
                    "3": "param6",
                    "8": "result"
                },
                "puVar2": {
                    "1": "curr_node",
                    "14": "current_node",
                    "3": "ptr1"
                },
                "puVar5": {
                    "1": "curr_list_item",
                    "2": "nested_node",
                    "3": "ptr2",
                    "4": "sub_node",
                    "6": "inner_node"
                },
                "puVar6": {
                    "1": "inner_var",
                    "3": "ptr3",
                    "4": "ptr"
                },
                "strcmp": {
                    "1": "string_comparison",
                    "7": "compare_strings"
                },
                "strncmp": {
                    "1": "string_n_comparison"
                },
                "uVar3": {
                    "1": "val3",
                    "2": "temp_value",
                    "5": "temp",
                    "9": "temp_var"
                },
                "xmalloc": {
                    "7": "allocate_memory"
                }
            },
            "called": [
                "FUN_00113e23",
                "xmalloc",
                "FUN_00109a0b",
                "free",
                "strcmp"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010d559",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16]\nfind_and_free_string_0010afd5(undefined8 *linked_list,long data,undefined8 str,undefined4 param_4,\n            undefined4 param_5,undefined8 result)\n\n{\n  int comparison_result;\n  char *search_string;\n  undefined8 *current_node;\n  undefined8 temp_var;\n  long value;\n  undefined8 *inner_node;\n  undefined4 *temp_ptr;\n  byte counter;\n  undefined return_value [16];\n  \n  counter = 0;\n  search_string = (char *)FUN_00109a0b(str,param_4);\n  for (linked_list = (undefined8 *)*linked_list; linked_list != (undefined8 *)0x0;\n      linked_list = (undefined8 *)*linked_list) {\n    for (current_node = (undefined8 *)linked_list[1]; current_node != (undefined8 *)0x0;\n        current_node = (undefined8 *)*current_node) {\n      if ((undefined8 *)current_node[2] != (undefined8 *)0x0) {\n        for (inner_node = *(undefined8 **)(undefined8 *)current_node[2]; inner_node != (undefined8 *)0x0;\n            inner_node = (undefined8 *)*inner_node) {\n          if ((*(int *)((long)inner_node + 0x14) == 1) && (*(char *)inner_node[1] == *search_string)) {\n            comparison_result = strcmp((char *)inner_node[1],search_string);\n            if (comparison_result == 0) {\n              value = inner_node[4];\n              if (value == 0) goto LAB_0010b05b;\n              release_memory(search_string);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  current_node = *(undefined8 **)(data + 0x1a0);\n  do {\n    if (current_node == (undefined8 *)0x0) {\n      current_node = (undefined8 *)xmalloc(0x28);\n      temp_var = *(undefined8 *)(data + 0x1a0);\n      temp_ptr = (undefined4 *)((long)current_node + 0x14);\n      for (value = 5; value != 0; value = value + -1) {\n        *temp_ptr = 0;\n        temp_ptr = temp_ptr + (ulong)counter * -2 + 1;\n      }\n      *(undefined4 *)(current_node + 2) = param_5;\n      *current_node = temp_var;\n      current_node[1] = search_string;\n      temp_var = FUN_00113e23(current_node + 3,search_string);\n      *(undefined8 **)(data + 0x1a0) = current_node;\n      current_node[4] = temp_var;\nLAB_0010b0e7:\n      value = current_node[4];\nLAB_0010b0eb:\n      return_value._8_8_ = result;\n      return_value._0_8_ = value;\n      return return_value;\n    }\n    if (*(char *)current_node[1] == *search_string) {\n      comparison_result = strcmp((char *)current_node[1],search_string);\n      if (comparison_result == 0) {\n        if (*(int *)(current_node + 2) == 0) {\n          *(undefined4 *)(current_node + 2) = param_5;\n        }\n        release_memory(search_string);\n        goto LAB_0010b0e7;\n      }\n    }\n    current_node = (undefined8 *)*current_node;\n  } while( true );\n}\n\n",
            "current_name": "find_and_free_string_0010afd5",
            "entrypoint": "0x0010afd5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010afd5": "find_and_free_string_0010afd5",
                "__s2": "search_string",
                "auVar8": "return_value",
                "bVar7": "counter",
                "free": "release_memory",
                "iVar1": "comparison_result",
                "lVar4": "value",
                "param_1": "linked_list",
                "param_2": "data",
                "param_3": "str",
                "param_6": "result",
                "puVar2": "current_node",
                "puVar5": "inner_node",
                "puVar6": "temp_ptr",
                "strcmp": "compare_strings",
                "uVar3": "temp_var",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b0fa": {
            "additional_data": {
                "FUN_0010afd5": {
                    "1": "print_data"
                },
                "FUN_0010b0fa": {
                    "1": "demangle_component"
                },
                "FUN_0010b6ea": {
                    "1": "process_data"
                },
                "FUN_00112904": {
                    "1": "set_flag_value"
                },
                "FUN_001129f4": {
                    "1": "get_substring"
                },
                "FUN_00113b1e": {
                    "1": "extract_data"
                },
                "FUN_00113b4a": {
                    "1": "reverse_another_thing"
                },
                "FUN_00113b71": {
                    "1": "reverse_something"
                },
                "FUN_00113cb9": {
                    "1": "reverse_data"
                },
                "FUN_00113ce0": {
                    "1": "reverse_and_convert_data"
                },
                "FUN_00113d3a": {
                    "1": "reverse_bytes"
                },
                "FUN_00113df2": {
                    "1": "convert_bytes"
                },
                "FUN_00113dfe": {
                    "1": "convert_data"
                },
                "FUN_00113e17": {
                    "1": "get_void"
                },
                "__ptr": {
                    "1": "ptr_var",
                    "12": "ptr",
                    "2": "allocated_memory",
                    "4": "pointer"
                },
                "__stream": {
                    "1": "output_stream"
                },
                "cplus_demangle_print": {
                    "1": "demangle_print"
                },
                "fprintf": {
                    "1": "print_to_stderr"
                },
                "iVar2": {
                    "1": "index",
                    "16": "comparison_result",
                    "2": "comparison",
                    "3": "var2"
                },
                "lVar7": {
                    "1": "ptr_length",
                    "3": "length_var",
                    "4": "length"
                },
                "local_40": {
                    "1": "local_str_arr",
                    "16": "local_array",
                    "2": "buffer",
                    "5": "local_buffer"
                },
                "param_1": {
                    "1": "input_param_1",
                    "16": "param1",
                    "2": "input1",
                    "4": "input_param1"
                },
                "param_2": {
                    "1": "var2",
                    "16": "param2",
                    "2": "input2",
                    "4": "input_param2"
                },
                "param_3": {
                    "1": "component",
                    "3": "input_array",
                    "6": "param3",
                    "8": "param_array"
                },
                "param_4": {
                    "1": "len",
                    "17": "param4",
                    "2": "length"
                },
                "param_5": {
                    "1": "output_flag",
                    "15": "param5",
                    "2": "output_param",
                    "3": "status"
                },
                "pcVar3": {
                    "1": "demangled_type",
                    "12": "result",
                    "2": "return_value",
                    "9": "result_string"
                },
                "pcVar5": {
                    "1": "temp_variable3",
                    "17": "error_message",
                    "2": "message",
                    "4": "error_string"
                },
                "plVar4": {
                    "1": "template_args",
                    "2": "pointer",
                    "3": "ptr_array"
                },
                "sVar6": {
                    "1": "size_var",
                    "18": "string_length",
                    "2": "str_length",
                    "6": "length"
                },
                "strcmp": {
                    "1": "compare_strings"
                },
                "strlen": {
                    "1": "get_length"
                },
                "uVar1": {
                    "1": "arr_size",
                    "2": "data",
                    "3": "var1",
                    "4": "array_element",
                    "8": "value"
                }
            },
            "called": [
                "FUN_00113b71",
                "FUN_0010b0fa",
                "FUN_00113b1e",
                "FUN_00113dfe",
                "FUN_00113cb9",
                "dcgettext",
                "FUN_0010b6ea",
                "free",
                "abort",
                "FUN_00113d3a",
                "FUN_00113df2",
                "FUN_00113e17",
                "strlen",
                "FUN_0010afd5",
                "FUN_001129f4",
                "strncmp",
                "FUN_00112904",
                "cplus_demangle_print",
                "FUN_00113b4a",
                "fprintf",
                "FUN_00113ce0",
                "strcmp"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010b6ea"
            ],
            "code": "\n\n\nchar * reverse_and_print_demangled_type_0010b0fa(undefined8 param1,undefined8 param2,uint *param_array,long param4,\n                   undefined *param5)\n\n{\n  uint value;\n  int comparison_result;\n  char *result;\n  long *ptr_array;\n  char *error_message;\n  size_t string_length;\n  void *ptr;\n  long length;\n  undefined local_array [16];\n  \n  if (param5 != (undefined *)0x0) {\n    *param5 = 0;\n  }\n  while( true ) {\n    value = *param_array;\n    if (0x29 < value) break;\n    if (0x17 < value) {\n      switch(value) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        result = (char *)reverse_and_print_demangled_type_0010b0fa(param1,param2,*(undefined8 *)(param_array + 4),0,0);\n        if (result != (char *)0x0) {\n          switch(*param_array) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            result = (char *)FUN_00113b4a(result);\n            return result;\n          case 0x1b:\n            result = (char *)FUN_00113b71(result);\n            return result;\n          default:\n                    \n            abort();\n          case 0x22:\n            result = (char *)FUN_00113d3a(result);\n            return result;\n          case 0x23:\n            result = (char *)FUN_00113cb9(result);\n            return result;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        result = (char *)cplus_demangle_print(3,param_array,0x14,local_array);\n        if (result == (char *)0x0) {\n          error_message = \"Couldn\\'t get demangled builtin type\\n\";\n          result = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        comparison_result = strcmp(result,\"signed char\");\n        if (comparison_result == 0) {\nLAB_0010b406:\n          error_message = (char *)FUN_00113dfe(1,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"bool\");\n        if (comparison_result == 0) {\n          error_message = (char *)FUN_00112904(6,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"char\");\n        if (comparison_result == 0) goto LAB_0010b406;\n        comparison_result = strcmp(result,\"double\");\n        if ((comparison_result == 0) || (comparison_result = strcmp(result,\"long double\"), comparison_result == 0)) {\n          error_message = (char *)FUN_00113df2(8);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"float\");\n        if (comparison_result == 0) {\n          error_message = (char *)FUN_00113df2(4);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"__float128\");\n        if (comparison_result == 0) {\n          error_message = (char *)FUN_00113df2(0x10);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned char\");\n        if (comparison_result == 0) {\n          error_message = (char *)FUN_00113dfe(1,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"int\");\n        if (comparison_result == 0) {\nLAB_0010b504:\n          error_message = (char *)FUN_00113dfe(4,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned int\");\n        if (comparison_result == 0) {\nLAB_0010b528:\n          error_message = (char *)FUN_00113dfe(4,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"long\");\n        if (comparison_result == 0) goto LAB_0010b504;\n        comparison_result = strcmp(result,\"unsigned long\");\n        if (comparison_result == 0) goto LAB_0010b528;\n        comparison_result = strcmp(result,\"__int128\");\n        if (comparison_result == 0) {\n          error_message = (char *)FUN_00113dfe(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned __int128\");\n        if (comparison_result == 0) {\n          error_message = (char *)FUN_00113dfe(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"short\");\n        if (comparison_result == 0) {\n          error_message = (char *)FUN_00113dfe(2,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned short\");\n        if (comparison_result == 0) {\n          error_message = (char *)FUN_00113dfe(2,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"void\");\n        if (comparison_result == 0) {\n          error_message = (char *)FUN_00113e17();\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"wchar_t\");\n        if (comparison_result == 0) goto LAB_0010b528;\n        comparison_result = strcmp(result,\"long long\");\n        if (comparison_result == 0) {\n          error_message = (char *)FUN_00113dfe(8,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned long long\");\n        if (comparison_result == 0) {\n          error_message = (char *)FUN_00113dfe(8,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"...\");\n        if (comparison_result == 0) {\n          error_message = \"Unexpected demangled varargs\\n\";\n          if (param5 == (undefined *)0x0) goto LAB_0010b6a9;\n          *param5 = 1;\n        }\n        else {\n          error_message = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          error_message = (char *)dcgettext(0,error_message,5);\n          fprintf(_stderr,error_message);\n        }\n        error_message = (char *)0x0;\nLAB_0010b6c6:\n        free(result);\n        return error_message;\n      case 0x29:\n        if (*(long *)(param_array + 4) == 0) {\n          ptr = (void *)FUN_00113e17();\n        }\n        else {\n          ptr = (void *)reverse_and_print_demangled_type_0010b0fa(param1,param2,*(long *)(param_array + 4),0,0);\n        }\n        if (ptr != (void *)0x0) {\n          length = FUN_0010b6ea(param1,param2,*(undefined8 *)(param_array + 6),local_array);\n          if (length != 0) {\n            result = (char *)FUN_00113ce0(ptr,length,local_array[0]);\n            return result;\n          }\n          free(ptr);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (value != 1) {\n      if (value == 4) {\n        result = (char *)cplus_demangle_print(3,param_array,0x14,local_array);\n        error_message = \"Failed to print demangled template\\n\";\n        if (result != (char *)0x0) {\n          string_length = strlen(result);\n          error_message = (char *)FUN_0010afd5(param1,param2,result,string_length & 0xffffffff,9);\n          free(result);\n          return error_message;\n        }\nLAB_0010b3d3:\n        error_message = (char *)dcgettext(0,error_message,5);\n        fprintf(_stderr,error_message);\n        return result;\n      }\n      if (value == 0) {\n        if ((param4 == 0) || (ptr_array = (long *)FUN_00113b1e(param4), ptr_array == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    param4 = reverse_and_print_demangled_type_0010b0fa(param1,param2,*(undefined8 *)(param_array + 4),param4,0);\n    if (param4 == 0) goto LAB_0010b38c;\n    param_array = *(uint **)(param_array + 6);\n    param5 = (undefined *)0x0;\n  }\n  result = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,result,(ulong)value);\nLAB_0010b38c:\n  result = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return result;\nLAB_0010b1a5:\n  if (*ptr_array == 0) {\nswitchD_0010b158_caseD_18:\n    result = (char *)FUN_0010afd5(param1,param2,*(undefined8 *)(param_array + 4),param_array[6],0);\n    return result;\n  }\n  result = *(char **)(*ptr_array + 8);\n  if (result == (char *)0x0) goto LAB_0010b38c;\n  error_message = (char *)FUN_001129f4(result);\n  if (error_message != (char *)0x0) {\n    string_length = strlen(error_message);\n    if ((param_array[6] == (uint)string_length) &&\n       (comparison_result = strncmp(error_message,*(char **)(param_array + 4),(long)(int)param_array[6]), comparison_result == 0)) {\n      return result;\n    }\n  }\n  ptr_array = ptr_array + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "current_name": "reverse_and_print_demangled_type_0010b0fa",
            "entrypoint": "0x0010b0fa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b0fa": "reverse_and_print_demangled_type_0010b0fa",
                "__ptr": "ptr",
                "cplus_demangle_print": "demangle_print",
                "fprintf": "print_to_stderr",
                "iVar2": "comparison_result",
                "lVar7": "length",
                "local_40": "local_array",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param_array",
                "param_4": "param4",
                "param_5": "param5",
                "pcVar3": "result",
                "pcVar5": "error_message",
                "plVar4": "ptr_array",
                "sVar6": "string_length",
                "strcmp": "compare_strings",
                "strlen": "get_length",
                "uVar1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b6ea": {
            "additional_data": {
                "FUN_0010b6ea": {
                    "1": "demangle_and_extract_args",
                    "2": "extract_arglist",
                    "3": "parse_arglist",
                    "5": "demangle_arglist",
                    "9": "demangle_v3_arglist"
                },
                "PTR_dcgettext": {
                    "1": "get_translation"
                },
                "PTR_xmalloc": {
                    "1": "allocate_memory"
                },
                "PTR_xrealloc": {
                    "1": "realocate_memory"
                },
                "__format": {
                    "1": "error_msg_format",
                    "22": "error_message",
                    "6": "error_msg"
                },
                "__ptr": {
                    "1": "result_strings",
                    "15": "result",
                    "2": "result_list",
                    "3": "result_array",
                    "8": "result_ptr"
                },
                "_stderr": {
                    "1": "error_stream"
                },
                "fprintf": {
                    "1": "print_formatted_output"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "lVar1": {
                    "1": "length",
                    "2": "value",
                    "3": "temp_var",
                    "7": "result"
                },
                "local_39": {
                    "1": "type",
                    "12": "buffer",
                    "2": "type_str",
                    "3": "temp_buffer",
                    "5": "temp_string"
                },
                "param_1": {
                    "19": "arg1",
                    "2": "arg_1",
                    "4": "param_1",
                    "6": "param1"
                },
                "param_2": {
                    "19": "arg2",
                    "2": "arg_2",
                    "4": "param_2",
                    "6": "param2"
                },
                "param_3": {
                    "1": "list",
                    "22": "arglist",
                    "3": "arg_list",
                    "5": "arglist_ptr"
                },
                "param_4": {
                    "1": "is_empty",
                    "19": "error_flag",
                    "2": "is_error"
                },
                "uVar2": {
                    "1": "type_count",
                    "14": "count",
                    "2": "counter",
                    "4": "result_count",
                    "5": "index"
                },
                "uVar3": {
                    "1": "max_type_count",
                    "10": "size",
                    "2": "buffer_size",
                    "3": "result_size",
                    "9": "capacity"
                },
                "uVar4": {
                    "1": "tmp",
                    "3": "temp_count",
                    "4": "new_index",
                    "5": "index",
                    "8": "new_count"
                }
            },
            "called": [
                "FUN_0010b0fa",
                "xmalloc",
                "dcgettext",
                "xrealloc",
                "free",
                "fprintf"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid * demangle_v3_arglist_0010b6ea(undefined8 arg1,undefined8 arg2,int *arglist,undefined *error_flag)\n\n{\n  void *result;\n  char *error_message;\n  long result;\n  ulong count;\n  ulong size;\n  uint new_count;\n  char buffer [9];\n  \n  size = 10;\n  count = 0;\n  result = (void *)xmalloc(0x50);\n  *error_flag = 0;\n  for (; arglist != (int *)0x0; arglist = *(int **)(arglist + 6)) {\n    if (*arglist != 0x2e) {\n      error_message = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(error_stream,error_message);\n      free(result);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist + 4) == 0) break;\n    result = FUN_0010b0fa(arg1,arg2,*(long *)(arglist + 4),0,buffer);\n    if (result == 0) {\n      if (buffer[0] == '\\0') {\n        free(result);\n        return (void *)0x0;\n      }\n      *error_flag = 1;\n    }\n    else {\n      new_count = (int)count + 1;\n      if ((uint)size <= new_count) {\n        size = (ulong)((uint)size + 10);\n        result = (void *)xrealloc(result,size << 3);\n      }\n      *(long *)((long)result + count * 8) = result;\n      count = (ulong)new_count;\n    }\n  }\n  *(undefined8 *)((long)result + count * 8) = 0;\n  return result;\n}\n\n",
            "current_name": "demangle_v3_arglist_0010b6ea",
            "entrypoint": "0x0010b6ea",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b6ea": "demangle_v3_arglist_0010b6ea",
                "__format": "error_message",
                "__ptr": "result",
                "_stderr": "error_stream",
                "fprintf": "print_formatted_output",
                "free": "deallocate_memory",
                "lVar1": "result",
                "local_39": "buffer",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arglist",
                "param_4": "error_flag",
                "uVar2": "count",
                "uVar3": "size",
                "uVar4": "new_count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b800": {
            "additional_data": {
                "FUN_00109b52": {
                    "1": "process_integer_stab"
                },
                "FUN_00109cf4": {
                    "1": "process_stab"
                },
                "FUN_0010b800": {
                    "1": "parse_integer_type",
                    "10": "process_int_type",
                    "2": "process_input",
                    "3": "process_stab_int_type",
                    "6": "process_integer_type"
                },
                "auStack_8a": {
                    "1": "temp_array",
                    "16": "stack_array",
                    "2": "array"
                },
                "lVar4": {
                    "1": "temp_value",
                    "13": "value",
                    "2": "value1",
                    "3": "temp_var",
                    "4": "temp_var1"
                },
                "lVar5": {
                    "1": "temp_value2",
                    "2": "mask",
                    "4": "temp2",
                    "6": "bit_mask",
                    "7": "bitmask"
                },
                "local_8c": {
                    "1": "local_string",
                    "13": "buffer",
                    "3": "output",
                    "8": "output_string"
                },
                "param_1": {
                    "1": "data",
                    "17": "base_address",
                    "4": "input"
                },
                "param_2": {
                    "1": "input_size",
                    "28": "size"
                },
                "param_3": {
                    "1": "is_flag_set",
                    "25": "flag"
                },
                "plVar1": {
                    "1": "type",
                    "10": "ptr",
                    "2": "ptr_to_element",
                    "4": "ptr_value",
                    "5": "pointer"
                },
                "sVar3": {
                    "1": "string_size",
                    "10": "string_length",
                    "12": "length",
                    "2": "str_len",
                    "5": "str_length"
                },
                "uVar2": {
                    "24": "result",
                    "6": "return_value"
                }
            },
            "called": [
                "strlen",
                "sprintf",
                "FUN_00119ed0",
                "dcgettext",
                "FUN_00109cf4",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f",
                "FUN_0010b948"
            ],
            "code": "\nundefined8 process_int_type_0010b800(long base_address,int size,char flag)\n\n{\n  long *ptr;\n  undefined8 result;\n  size_t length;\n  long value;\n  long bitmask;\n  undefined2 buffer;\n  undefined4 stack_array [24];\n  \n  if (size - 1U < 8) {\n    value = base_address + 0xb8;\n    if (flag != '\\0') {\n      value = base_address + 0x78;\n    }\n    ptr = (long *)(value + (ulong)(size - 1U) * 8);\n    value = *ptr;\n    if (value != 0) {\n      result = FUN_00109cf4(base_address,value,size);\n      return result;\n    }\n    value = *(long *)(base_address + 0x68);\n    *(long *)(base_address + 0x68) = value + 1;\n    *ptr = value;\n    sprintf((char *)&buffer,\"%ld=r%ld;\",value,value);\n    if (flag == '\\0') {\n      bitmask = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      length = strlen((char *)&buffer);\n      sprintf((char *)((long)&buffer + length),\"%ld;%ld;\",-bitmask,bitmask + -1);\n    }\n    else {\n      length = strlen((char *)&buffer);\n      *(undefined2 *)((long)&buffer + length) = 0x3b30;\n      *(undefined *)((long)&buffer + length + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&buffer + length + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&buffer + length + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = FUN_00109b52(base_address,&buffer,value,1,size);\n  }\n  else {\n    result = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    FUN_00119ed0(result,size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "process_int_type_0010b800",
            "entrypoint": "0x0010b800",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b800": "process_int_type_0010b800",
                "auStack_8a": "stack_array",
                "lVar4": "value",
                "lVar5": "bitmask",
                "local_8c": "buffer",
                "param_1": "base_address",
                "param_2": "size",
                "param_3": "flag",
                "plVar1": "ptr",
                "sVar3": "length",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b948": {
            "additional_data": {
                "FUN_00109cf4": {
                    "1": "process_data_block"
                },
                "FUN_0010b800": {
                    "1": "check_condition"
                },
                "FUN_0010b948": {
                    "1": "process_param",
                    "27": "process_data"
                },
                "__ptr": {
                    "1": "allocated_memory",
                    "2": "formatted_data",
                    "4": "ptr",
                    "6": "buffer",
                    "7": "string_pointer"
                },
                "cVar2": {
                    "1": "success_flag",
                    "10": "flag",
                    "12": "result",
                    "5": "is_valid"
                },
                "lVar1": {
                    "1": "data_value",
                    "2": "temp_value",
                    "3": "value",
                    "8": "temp_var"
                },
                "local_5a": {
                    "1": "result_string",
                    "15": "formatted_string",
                    "2": "output",
                    "3": "buffer",
                    "5": "output_string"
                },
                "param_1": {
                    "1": "param1",
                    "13": "data_pointer",
                    "3": "data",
                    "4": "data_ptr"
                },
                "param_2": {
                    "1": "input_2",
                    "2": "data_length",
                    "4": "length",
                    "5": "count",
                    "8": "data_size",
                    "9": "size"
                },
                "uVar3": {
                    "1": "size_u_var",
                    "2": "size_as_unsigned",
                    "3": "data_size_unsigned"
                },
                "uVar4": {
                    "1": "tmp_size",
                    "2": "index",
                    "3": "count_minus_one",
                    "7": "size_minus_one"
                }
            },
            "called": [
                "FUN_00109b2f",
                "sprintf",
                "FUN_00109cf4",
                "FUN_0010b800",
                "FUN_00109b52",
                "free"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_0010b948(long data_pointer,uint size)\n\n{\n  long temp_var;\n  char result;\n  void *string_pointer;\n  ulong data_size_unsigned;\n  uint size_minus_one;\n  char formatted_string [50];\n  \n  size_minus_one = size - 1;\n  data_size_unsigned = (ulong)size;\n  if ((size_minus_one < 0x10) && (temp_var = *(long *)(data_pointer + 0xf8 + (ulong)size_minus_one * 8), temp_var != 0)) {\n    FUN_00109cf4(data_pointer,temp_var,data_size_unsigned);\n    return;\n  }\n  result = FUN_0010b800(data_pointer,4,0);\n  if (result != '\\0') {\n    string_pointer = (void *)FUN_00109b2f(data_pointer);\n    temp_var = *(long *)(data_pointer + 0x68);\n    *(long *)(data_pointer + 0x68) = temp_var + 1;\n    if (size_minus_one < 0x10) {\n      *(long *)(data_pointer + 0xf8 + (ulong)size_minus_one * 8) = temp_var;\n    }\n    sprintf(formatted_string,\"%ld=r%s;%u;0;\",temp_var,string_pointer,data_size_unsigned);\n    free(string_pointer);\n    FUN_00109b52(data_pointer,formatted_string,temp_var,1,data_size_unsigned);\n  }\n  return;\n}\n\n",
            "current_name": "process_data_0010b948",
            "entrypoint": "0x0010b948",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b948": "process_data_0010b948",
                "__ptr": "string_pointer",
                "cVar2": "result",
                "lVar1": "temp_var",
                "local_5a": "formatted_string",
                "param_1": "data_pointer",
                "param_2": "size",
                "uVar3": "data_size_unsigned",
                "uVar4": "size_minus_one"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ba08": {
            "additional_data": {
                "*param_1": {
                    "1": "param1_value"
                },
                "FUN_00109b2f": {
                    "1": "get_unknown_value",
                    "2": "get_warning_message"
                },
                "FUN_0010ba08": {
                    "1": "generate_struct_string",
                    "12": "generate_warning_message",
                    "2": "build_warning_message"
                },
                "FUN_00119ed0": {
                    "2": "print_warning_message",
                    "3": "print_warning"
                },
                "__s": {
                    "1": "field_info_message",
                    "2": "str1",
                    "3": "struct_name",
                    "4": "error_message",
                    "5": "warning_message"
                },
                "__s_00": {
                    "1": "str2",
                    "2": "result_string",
                    "3": "combined_string"
                },
                "abort": {
                    "1": "terminate_execution",
                    "2": "exit_program",
                    "3": "abort_execution"
                },
                "cVar1": {
                    "1": "is_warning",
                    "14": "flag",
                    "2": "flag_char",
                    "4": "is_warning_enabled"
                },
                "dcgettext": {
                    "1": "get_text",
                    "2": "translate_message"
                },
                "free": {
                    "3": "free_memory",
                    "4": "deallocate_memory"
                },
                "iVar2": {
                    "1": "int_value",
                    "17": "struct_size",
                    "2": "field_count"
                },
                "lVar3": {
                    "1": "temp_variable",
                    "2": "length",
                    "3": "local_variable",
                    "4": "local_var"
                },
                "param_1": {
                    "1": "data",
                    "2": "input_params",
                    "3": "struct_pointer",
                    "4": "parameters"
                },
                "param_2": {
                    "31": "field_name"
                },
                "param_3": {
                    "1": "parameter_1",
                    "4": "param_3",
                    "5": "field_value",
                    "8": "param3",
                    "9": "param_value"
                },
                "param_4": {
                    "1": "multiplier",
                    "2": "param4",
                    "22": "field_size"
                },
                "param_5": {
                    "1": "field_flag",
                    "15": "field_type",
                    "2": "option",
                    "4": "flag"
                },
                "pcVar9": {
                    "1": "param5_string",
                    "2": "field_type_str",
                    "3": "field_type_string",
                    "6": "flag_string"
                },
                "sVar4": {
                    "1": "param2_size",
                    "2": "struct_name_length"
                },
                "sVar5": {
                    "1": "length_2",
                    "2": "length2",
                    "4": "field_name_len",
                    "7": "field_name_size",
                    "8": "field_name_length"
                },
                "sVar6": {
                    "1": "length_field_string",
                    "2": "field_value_length"
                },
                "sprintf": {
                    "1": "compose_message",
                    "7": "format_string"
                },
                "strlen": {
                    "1": "string_length",
                    "2": "get_length",
                    "5": "get_string_length"
                },
                "uVar7": {
                    "1": "translated_error_message",
                    "15": "warning_message",
                    "2": "warning_message_format",
                    "3": "warning_format"
                },
                "uVar8": {
                    "1": "return_val",
                    "15": "return_value"
                },
                "xmalloc": {
                    "10": "allocate_memory"
                }
            },
            "called": [
                "strlen",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00119ed0",
                "xmalloc",
                "dcgettext",
                "abort",
                "free"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8\ngenerate_warning_message_0010ba08(undefined8 *parameters,char *field_name,undefined8 param_value,ulong field_size,int field_type)\n\n{\n  char flag;\n  int struct_size;\n  long struct_offset;\n  char *warning_message;\n  size_t struct_name_length;\n  size_t field_name_length;\n  size_t field_value_length;\n  char *combined_string;\n  undefined8 warning_message;\n  undefined8 return_value;\n  char *flag_string;\n  \n  flag = *(char *)(parameters[0xc] + 0x1c);\n  struct_size = *(int *)(parameters[0xc] + 0x18);\n  warning_message = (char *)FUN_00109b2f();\n  if (*(char **)(parameters[0xc] + 0x20) == (char *)0x0) {\n    return_value = 0;\n  }\n  else {\n    struct_name_length = strlen(*(char **)(parameters[0xc] + 0x20));\n    field_name_length = strlen(field_name);\n    field_value_length = strlen(warning_message);\n    combined_string = (char *)xmalloc(struct_name_length + 0x32 + field_name_length + field_value_length);\n    if (field_type == 1) {\n      flag_string = \"/1\";\n    }\n    else {\n      flag_string = \"/0\";\n      if ((field_type != 2) && (flag_string = \"\", field_type != 0)) {\n                    \n        abort_execution();\n      }\n    }\n    if ((field_size == 0) && (field_size = (ulong)(uint)(struct_size * 8), field_size == 0)) {\n      return_value = *(undefined8 *)*parameters;\n      warning_message = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      FUN_00119ed0(warning_message,return_value,field_name);\n    }\n    sprintf(combined_string,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(parameters[0xc] + 0x20),field_name,flag_string,warning_message,\n            param_value,field_size);\n    free(*(void **)(parameters[0xc] + 0x20));\n    struct_offset = parameters[0xc];\n    *(char **)(struct_offset + 0x20) = combined_string;\n    if (flag != '\\0') {\n      *(undefined *)(struct_offset + 0x1c) = 1;\n    }\n    return_value = CONCAT71((int7)((ulong)struct_offset >> 8),1);\n  }\n  return return_value;\n}\n\n",
            "current_name": "generate_warning_message_0010ba08",
            "entrypoint": "0x0010ba08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ba08": "generate_warning_message_0010ba08",
                "__s": "warning_message",
                "__s_00": "combined_string",
                "abort": "abort_execution",
                "cVar1": "flag",
                "dcgettext": "get_translation",
                "free": "deallocate_memory",
                "iVar2": "struct_size",
                "lVar3": "struct_offset",
                "param_1": "parameters",
                "param_2": "field_name",
                "param_3": "param_value",
                "param_4": "field_size",
                "param_5": "field_type",
                "pcVar9": "flag_string",
                "sVar4": "struct_name_length",
                "sVar5": "field_name_length",
                "sVar6": "field_value_length",
                "sprintf": "format_string",
                "strlen": "get_string_length",
                "uVar7": "warning_message",
                "uVar8": "return_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bb52": {
            "additional_data": {
                "0x18": {
                    "1": "initial_value"
                },
                "0x20": {
                    "1": "constant_value"
                },
                "0x28": {
                    "1": "counter"
                },
                "0x30": {
                    "1": "hash_size"
                },
                "FUN_0010bb52": {
                    "1": "create_bfd_hash_func",
                    "2": "create_new_bfd_hash",
                    "3": "initialize_hash_function",
                    "4": "create_bfd_hash",
                    "5": "allocate_and_initialize_hash",
                    "8": "create_hash_function"
                },
                "bfd_hash_allocate": {
                    "1": "allocate_memory_for_hash",
                    "2": "allocate_bfd_hash",
                    "7": "allocate_hash"
                },
                "bfd_hash_newfunc": {
                    "1": "create_new_hash",
                    "2": "initialize_hash_function",
                    "4": "initialize_hash"
                },
                "lVar1": {
                    "1": "hash_result",
                    "2": "hash_function",
                    "6": "hash_ptr",
                    "8": "new_hash"
                },
                "param_1": {
                    "1": "hash_table_size",
                    "2": "hash_size",
                    "4": "input_value",
                    "6": "input_param",
                    "9": "size"
                },
                "param_2": {
                    "1": "func",
                    "2": "param_ptr",
                    "3": "param_2_value",
                    "4": "alloc_param",
                    "5": "param_2",
                    "6": "arg2"
                },
                "param_3": {
                    "1": "allocation_param2",
                    "3": "newfunc_param",
                    "5": "param3",
                    "6": "arg3"
                }
            },
            "called": [
                "bfd_hash_newfunc",
                "bfd_hash_allocate"
            ],
            "calling": [
                "FUN_0011378f"
            ],
            "code": "\nlong create_hash_function_0010bb52(long size,undefined8 arg2,undefined8 arg3)\n\n{\n  long new_hash;\n  \n  if (((size != 0) || (size = bfd_hash_allocate(arg2,0x30), size != 0)) &&\n     (new_hash = bfd_hash_newfunc(size,arg2,arg3), new_hash != 0)) {\n    *(undefined8 *)(new_hash + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(new_hash + 0x18) = 0;\n    *(undefined4 *)(new_hash + 0x28) = 0;\n    return new_hash;\n  }\n  return 0;\n}\n\n",
            "current_name": "create_hash_function_0010bb52",
            "entrypoint": "0x0010bb52",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bb52": "create_hash_function_0010bb52",
                "bfd_hash_allocate": "allocate_hash",
                "bfd_hash_newfunc": "initialize_hash",
                "lVar1": "new_hash",
                "param_1": "size",
                "param_2": "arg2",
                "param_3": "arg3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bba1": {
            "additional_data": {
                "FUN_00109cf4": {
                    "1": "process_found_entry",
                    "2": "process_entry"
                },
                "FUN_0010bba1": {
                    "1": "find_symbol_value",
                    "11": "lookup_and_call_function",
                    "2": "lookup_and_process",
                    "3": "lookup_and_execute",
                    "6": "lookup_and_execute_function"
                },
                "bfd_hash_lookup": {
                    "1": "lookup_entry"
                },
                "lVar1": {
                    "1": "symbol_address",
                    "2": "hash_lookup_result",
                    "4": "hash_value",
                    "5": "hash_result",
                    "6": "lookup_result"
                },
                "param_1": {
                    "1": "symbol_table",
                    "18": "hash_table",
                    "3": "base_address",
                    "4": "input_value"
                },
                "param_2": {
                    "1": "search_value",
                    "14": "key",
                    "2": "entry_key",
                    "3": "hash_key"
                },
                "param_3": {
                    "1": "entry_data"
                },
                "uVar2": {
                    "1": "executed_result",
                    "14": "result",
                    "2": "return_value",
                    "4": "execution_result",
                    "7": "function_result"
                }
            },
            "called": [
                "FUN_00109cf4",
                "bfd_hash_lookup"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 lookup_and_call_function_0010bba1(long hash_table,undefined8 key)\n\n{\n  long lookup_result;\n  undefined8 result;\n  \n  lookup_result = bfd_hash_lookup(hash_table + 0x1b8,key,0,0);\n  if ((lookup_result != 0) && (0 < *(long *)(lookup_result + 0x20))) {\n    result = FUN_00109cf4(hash_table,*(long *)(lookup_result + 0x20),*(undefined4 *)(lookup_result + 0x28));\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "lookup_and_call_function_0010bba1",
            "entrypoint": "0x0010bba1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bba1": "lookup_and_call_function_0010bba1",
                "bfd_hash_lookup": "lookup_entry",
                "lVar1": "lookup_result",
                "param_1": "hash_table",
                "param_2": "key",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bbd3": {
            "additional_data": {
                "FUN_0010bbd3": {
                    "1": "set_debug_info",
                    "2": "initialize_data_structure",
                    "22": "initialize_debug_info"
                },
                "auVar8": {
                    "1": "return_value_array",
                    "12": "result",
                    "16": "return_value",
                    "2": "return_val"
                },
                "bVar7": {
                    "1": "byte_value",
                    "2": "is_zero",
                    "3": "temp_byte",
                    "7": "byte_var",
                    "8": "flag"
                },
                "lVar4": {
                    "1": "loop_count",
                    "12": "loop_counter",
                    "2": "index",
                    "4": "count",
                    "5": "counter"
                },
                "param_1": {
                    "1": "debug_data",
                    "10": "info",
                    "16": "debug_info",
                    "2": "data_structure"
                },
                "param_2": {
                    "1": "param_string",
                    "30": "filename"
                },
                "param_3": {
                    "1": "val1",
                    "15": "param_3",
                    "2": "param1",
                    "6": "param3"
                },
                "param_4": {
                    "1": "arg_4",
                    "15": "param_4",
                    "2": "param2",
                    "6": "param4"
                },
                "pcVar6": {
                    "1": "str",
                    "2": "default_string",
                    "3": "default_filename",
                    "4": "temp_filename",
                    "7": "filename_ptr"
                },
                "puVar1": {
                    "1": "old_units",
                    "2": "units_ptr",
                    "3": "units",
                    "5": "ptr1"
                },
                "puVar2": {
                    "1": "info_units",
                    "2": "units",
                    "4": "ptr2"
                },
                "puVar3": {
                    "1": "new_pointer2",
                    "2": "ptr2",
                    "4": "ptr3"
                },
                "puVar5": {
                    "1": "loop_ptr",
                    "2": "pu_var5",
                    "4": "ptr"
                }
            },
            "called": [
                "xmalloc",
                "__assert_fail"
            ],
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "code": "\nundefined  [16] initialize_debug_info_0010bbd3(long *debug_info,char *filename,undefined8 param_3,undefined8 param_4)\n\n{\n  undefined8 *ptr1;\n  undefined4 *ptr2;\n  undefined4 *ptr3;\n  long loop_counter;\n  undefined4 *ptr;\n  char *filename_ptr;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  filename_ptr = \"\";\n  if (filename != (char *)0x0) {\n    filename_ptr = filename;\n  }\n  ptr2 = (undefined4 *)xmalloc(0x18);\n  ptr = ptr2;\n  for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *ptr = 0;\n    ptr = ptr + (ulong)flag * -2 + 1;\n  }\n  *(char **)(ptr2 + 2) = filename_ptr;\n  ptr3 = (undefined4 *)xmalloc(0x18);\n  debug_info[2] = (long)ptr2;\n  ptr = ptr3;\n  for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *ptr = 0;\n    ptr = ptr + (ulong)flag * -2 + 1;\n  }\n  ptr1 = (undefined8 *)debug_info[1];\n  *(undefined4 **)(ptr3 + 2) = ptr2;\n  if (ptr1 == (undefined8 *)0x0) {\n    if (*debug_info != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debug_info = (long)ptr3;\n  }\n  else {\n    *ptr1 = ptr3;\n  }\n  debug_info[1] = (long)ptr3;\n  debug_info[5] = 0;\n  *(undefined (*) [16])(debug_info + 3) = ZEXT816(0);\n  return_value._8_8_ = param_4;\n  return_value._0_8_ = 1;\n  return return_value;\n}\n\n",
            "current_name": "initialize_debug_info_0010bbd3",
            "entrypoint": "0x0010bbd3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "auVar8": "return_value",
                "bVar7": "flag",
                "lVar4": "loop_counter",
                "param_1": "debug_info",
                "param_2": "filename",
                "pcVar6": "filename_ptr",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "puVar3": "ptr3",
                "puVar5": "ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bc80": {
            "additional_data": {
                "FUN_0010bc80": {
                    "1": "record_debug_information",
                    "2": "record_debug_info",
                    "22": "debug_record_function",
                    "6": "record_debug_function"
                },
                "FUN_00112925": {
                    "1": "generate_debug_record"
                },
                "_stderr": {
                    "2": "error_stream"
                },
                "auVar8": {
                    "1": "output",
                    "13": "result",
                    "15": "return_value"
                },
                "bVar7": {
                    "1": "flag_bit",
                    "12": "flag",
                    "2": "zero_byte",
                    "3": "b_var7",
                    "4": "byte_var"
                },
                "dcgettext": {
                    "1": "get_text"
                },
                "fprintf": {
                    "1": "print_debug"
                },
                "lVar4": {
                    "1": "index",
                    "11": "i",
                    "2": "temp",
                    "3": "loop_index",
                    "7": "loop_counter"
                },
                "param_1": {
                    "1": "record_ptr",
                    "2": "debug_context",
                    "6": "debug_info"
                },
                "param_2": {
                    "1": "file_name",
                    "26": "filename"
                },
                "param_3": {
                    "1": "line",
                    "12": "record_size",
                    "2": "record_length",
                    "3": "size",
                    "4": "line_number"
                },
                "param_4": {
                    "1": "record_flag",
                    "2": "flags",
                    "6": "debug_flag",
                    "7": "flag",
                    "8": "record_type"
                },
                "param_5": {
                    "1": "record_param_5",
                    "20": "param_5",
                    "5": "param5"
                },
                "param_6": {
                    "1": "input_parameter_6",
                    "20": "param_6",
                    "5": "param6"
                },
                "pcVar6": {
                    "1": "debug_set_filename",
                    "12": "default_filename",
                    "2": "debug_msg",
                    "5": "filename_ptr"
                },
                "plVar2": {
                    "1": "allocated_memory",
                    "2": "debug_info",
                    "3": "record_data",
                    "4": "record_info",
                    "8": "record"
                },
                "puVar3": {
                    "1": "ptr2",
                    "2": "buffer",
                    "4": "record_data"
                },
                "puVar5": {
                    "1": "buffer_ptr",
                    "11": "ptr",
                    "2": "info_ptr",
                    "3": "loop_ptr",
                    "6": "pu_var5"
                },
                "uVar1": {
                    "1": "debug_msg",
                    "13": "error_message",
                    "3": "err_msg",
                    "4": "result",
                    "7": "error_msg"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "xmalloc",
                "dcgettext",
                "FUN_00112925",
                "fprintf"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16]\ndebug_record_function_0010bc80(long debug_info,char *filename,long record_size,uint record_type,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined8 error_message;\n  long *record;\n  undefined4 *record_data;\n  long i;\n  undefined4 *ptr;\n  char *default_filename;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  default_filename = \"\";\n  if (filename != (char *)0x0) {\n    default_filename = filename;\n  }\n  if (record_size != 0) {\n    if (*(long *)(debug_info + 8) == 0) {\n      error_message = dcgettext(0,\"debug_record_function_0010bc80: no debug_set_filename call\",5);\n      fprintf(error_stream,\"%s\\n\",error_message);\n    }\n    else {\n      record = (long *)xmalloc(0x18);\n      *record = record_size;\n      *(undefined (*) [16])(record + 1) = ZEXT816(0);\n      record_data = (undefined4 *)xmalloc(0x30);\n      *(long **)(debug_info + 0x18) = record;\n      record[2] = (long)record_data;\n      ptr = record_data;\n      for (i = 0xc; i != 0; i = i + -1) {\n        *ptr = 0;\n        ptr = ptr + (ulong)flag * -2 + 1;\n      }\n      *(undefined4 **)(debug_info + 0x20) = record_data;\n      i = *(long *)(debug_info + 0x10);\n      *(undefined8 *)(record_data + 6) = param_5;\n      *(undefined8 *)(record_data + 8) = 0xffffffffffffffff;\n      i = FUN_00112925(i + 0x10,default_filename,3,(record_type & 0xff) + 1);\n      if (i != 0) {\n        *(long **)(i + 0x20) = record;\n        error_message = CONCAT71((int7)((ulong)i >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  error_message = 0;\nLAB_0010bd56:\n  return_value._8_8_ = param_6;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "current_name": "debug_record_function_0010bc80",
            "entrypoint": "0x0010bc80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bc80": "debug_record_function_0010bc80",
                "_stderr": "error_stream",
                "auVar8": "return_value",
                "bVar7": "flag",
                "dcgettext": "get_text",
                "fprintf": "print_debug",
                "lVar4": "i",
                "param_1": "debug_info",
                "param_2": "filename",
                "param_3": "record_size",
                "param_4": "record_type",
                "pcVar6": "default_filename",
                "plVar2": "record",
                "puVar3": "record_data",
                "puVar5": "ptr",
                "uVar1": "error_message",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bd62": {
            "additional_data": {
                "*_stderr": {
                    "1": "stderr_stream"
                },
                "<bVar8>": {
                    "1": "initialized"
                },
                "<lVar5>": {
                    "1": "function_ptr_data"
                },
                "<original_function_name>": {
                    "1": "record_parameter_debug"
                },
                "<param_1>": {
                    "1": "function_ptr"
                },
                "<param_2>": {
                    "1": "param2"
                },
                "<param_3>": {
                    "1": "param3"
                },
                "<param_4>": {
                    "1": "param4"
                },
                "<param_5>": {
                    "1": "param5"
                },
                "<puVar1>": {
                    "1": "last_node"
                },
                "<puVar3>": {
                    "1": "new_node"
                },
                "<puVar4>": {
                    "1": "current_node"
                },
                "<puVar6>": {
                    "1": "prev_node"
                },
                "<puVar7>": {
                    "1": "current_node_data"
                },
                "<uVar2>": {
                    "1": "error_message"
                },
                "FUN_0010bd62": {
                    "1": "record_debug_parameter",
                    "26": "record_parameter"
                },
                "bVar8": {
                    "1": "byte_var",
                    "3": "is_zero",
                    "4": "loop_counter",
                    "6": "counter",
                    "8": "flag"
                },
                "lVar5": {
                    "1": "counter",
                    "2": "count",
                    "5": "temp_var"
                },
                "param_1": {
                    "1": "function_offset",
                    "2": "function_data",
                    "5": "function_ptr",
                    "8": "function_info"
                },
                "param_2": {
                    "1": "parameter_value_1",
                    "2": "record_id",
                    "3": "param_2_value",
                    "5": "param_2_size"
                },
                "param_3": {
                    "1": "record",
                    "2": "record_count",
                    "3": "param_3_value",
                    "5": "param_3"
                },
                "param_4": {
                    "1": "param",
                    "2": "debug_flag",
                    "3": "param_value",
                    "4": "param_type",
                    "6": "param_4"
                },
                "param_5": {
                    "1": "callback_function",
                    "2": "data",
                    "3": "param_data",
                    "4": "param_5_value",
                    "6": "param_5"
                },
                "puVar1": {
                    "1": "current_pointer",
                    "2": "current",
                    "7": "current_node"
                },
                "puVar3": {
                    "1": "alloc_ptr",
                    "10": "new_record",
                    "2": "allocated_memory",
                    "3": "new_node"
                },
                "puVar4": {
                    "1": "next_param",
                    "2": "next_node",
                    "3": "temp_node",
                    "8": "temp_ptr"
                },
                "puVar6": {
                    "1": "temp_ptr3",
                    "2": "previous_ptr",
                    "7": "last_node",
                    "9": "last_ptr"
                },
                "puVar7": {
                    "1": "loop_ptr",
                    "2": "record_ptr",
                    "3": "temp_record"
                },
                "uVar2": {
                    "1": "translation",
                    "19": "error_message",
                    "7": "error_msg"
                }
            },
            "called": [
                "xmalloc",
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "code": "\n\n\nundefined8\nrecord_parameter_0010bd62(long function_info,long param_2,long param_3,undefined4 param_4,undefined8 param_5)\n\n{\n  undefined8 *current_node;\n  undefined8 error_message;\n  undefined4 *new_record;\n  undefined8 *temp_ptr;\n  long loop_counter;\n  undefined8 *last_ptr;\n  undefined4 *temp_ptr;\n  byte flag;\n  \n  flag = 0;\n  if (param_2 == 0) {\n    return 0;\n  }\n  if (param_3 != 0) {\n    if ((*(long *)(function_info + 8) != 0) && (*(long *)(function_info + 0x18) != 0)) {\n      new_record = (undefined4 *)xmalloc(0x28);\n      temp_ptr = new_record;\n      for (loop_counter = 10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *temp_ptr = 0;\n        temp_ptr = temp_ptr + (ulong)flag * -2 + 1;\n      }\n      loop_counter = *(long *)(function_info + 0x18);\n      *(long *)(new_record + 2) = param_2;\n      *(long *)(new_record + 4) = param_3;\n      new_record[6] = param_4;\n      current_node = *(undefined8 **)(loop_counter + 8);\n      *(undefined8 *)(new_record + 8) = param_5;\n      last_ptr = (undefined8 *)(loop_counter + 8);\n      while (temp_ptr = current_node, temp_ptr != (undefined8 *)0x0) {\n        last_ptr = temp_ptr;\n        current_node = (undefined8 *)*temp_ptr;\n      }\n      *last_ptr = new_record;\n      return 1;\n    }\n    error_message = dcgettext(0,\"debug_record_parameter_0010bd62: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  return 0;\n}\n\n",
            "current_name": "record_parameter_0010bd62",
            "entrypoint": "0x0010bd62",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bd62": "record_parameter_0010bd62",
                "bVar8": "flag",
                "lVar5": "loop_counter",
                "param_1": "function_info",
                "puVar1": "current_node",
                "puVar3": "new_record",
                "puVar4": "temp_ptr",
                "puVar6": "last_ptr",
                "puVar7": "temp_ptr",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010be1a": {
            "additional_data": {
                "FUN_0010be1a": {
                    "1": "debug_end",
                    "18": "debug_end_function",
                    "2": "end_debugging_function",
                    "4": "end_function_debugging"
                },
                "auVar4": {
                    "1": "updated_return_value",
                    "11": "result",
                    "2": "return_val",
                    "8": "return_value"
                },
                "lVar1": {
                    "1": "current_function_context",
                    "10": "current_block",
                    "2": "block",
                    "4": "block_data",
                    "5": "block_ptr"
                },
                "param_1": {
                    "1": "function_struct_ptr",
                    "2": "function_pointer",
                    "4": "function_info",
                    "5": "function_context",
                    "6": "function_data",
                    "7": "function_ptr"
                },
                "param_2": {
                    "1": "new_end_address",
                    "2": "new_value",
                    "3": "new_param"
                },
                "param_3": {
                    "1": "unused_param_3",
                    "12": "unused_param",
                    "2": "new_param_2",
                    "3": "unknown",
                    "4": "unused_parameter"
                },
                "param_4": {
                    "1": "debug_end_msg",
                    "2": "new_param_3",
                    "4": "result"
                },
                "pcVar3": {
                    "1": "default_error_message",
                    "12": "error_message",
                    "15": "error_string",
                    "2": "error_msg"
                },
                "uVar2": {
                    "1": "translation",
                    "14": "error_message",
                    "2": "error_msg",
                    "3": "translated_message"
                }
            },
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_0010c892",
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16] debug_end_function_0010be1a(long function_ptr,undefined8 new_param,undefined8 unused_param,undefined8 return_value)\n\n{\n  long current_block;\n  undefined8 error_message;\n  char *error_string;\n  undefined result [16];\n  \n  if (((*(long *)(function_ptr + 8) == 0) || (current_block = *(long *)(function_ptr + 0x20), current_block == 0)) ||\n     (*(long *)(function_ptr + 0x18) == 0)) {\n    error_string = \"debug_end_function_0010be1a: no current function\";\n  }\n  else {\n    if (*(long *)(current_block + 8) == 0) {\n      *(undefined8 *)(current_block + 0x20) = new_param;\n      error_message = CONCAT71((int7)((ulong)current_block >> 8),1);\n      *(undefined (*) [16])(function_ptr + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    error_string = \"debug_end_function_0010be1a: some blocks were not closed\";\n  }\n  error_message = dcgettext(0,error_string,5);\n  fprintf(_stderr,\"%s\\n\",error_message);\n  error_message = 0;\nLAB_0010be86:\n  result._8_8_ = return_value;\n  result._0_8_ = error_message;\n  return result;\n}\n\n",
            "current_name": "debug_end_function_0010be1a",
            "entrypoint": "0x0010be1a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010be1a": "debug_end_function_0010be1a",
                "auVar4": "result",
                "lVar1": "current_block",
                "param_1": "function_ptr",
                "param_2": "new_param",
                "param_3": "unused_param",
                "param_4": "return_value",
                "pcVar3": "error_string",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010be88": {
            "additional_data": {
                "FUN_0010be88": {
                    "1": "start_block",
                    "15": "debug_start_block",
                    "6": "start_debug_block",
                    "8": "start_block_debugging"
                },
                "__format": {
                    "1": "format"
                },
                "__stream": {
                    "1": "stream"
                },
                "_stderr": {
                    "1": "standard_error_stream"
                },
                "auVar9": {
                    "1": "return_val",
                    "15": "return_value",
                    "2": "return_value_struct",
                    "3": "return_array"
                },
                "bVar8": {
                    "1": "byte_value",
                    "2": "byte_flag",
                    "3": "is_zero",
                    "4": "counter",
                    "7": "byte_var"
                },
                "dcgettext": {
                    "2": "get_error_message"
                },
                "fprintf": {
                    "1": "print_to_stderr"
                },
                "lVar5": {
                    "1": "current_block",
                    "2": "temp_var",
                    "5": "temp_value",
                    "6": "block_address"
                },
                "param_1": {
                    "1": "param1",
                    "16": "block_ptr",
                    "2": "block",
                    "3": "block_info",
                    "4": "block_pointer"
                },
                "param_2": {
                    "1": "debug_param1",
                    "2": "debugger",
                    "3": "start_address",
                    "6": "param_2",
                    "9": "param2"
                },
                "param_3": {
                    "1": "param_b",
                    "2": "end_address",
                    "9": "param3"
                },
                "param_4": {
                    "1": "param_c",
                    "2": "unused2",
                    "3": "result",
                    "7": "param4",
                    "8": "param_4"
                },
                "puVar1": {
                    "1": "next_block_ptr",
                    "2": "current_block",
                    "3": "current_pointer",
                    "5": "ptr1",
                    "6": "current_ptr"
                },
                "puVar3": {
                    "1": "ptr2",
                    "10": "new_block",
                    "3": "allocated_memory",
                    "4": "ptr3",
                    "7": "new_block_ptr"
                },
                "puVar4": {
                    "1": "next_block_ptr",
                    "2": "current_block_ptr",
                    "4": "ptr4",
                    "5": "temp_ptr"
                },
                "puVar6": {
                    "1": "ptr4",
                    "2": "current_pointer",
                    "3": "last_block",
                    "4": "ptr6",
                    "7": "last_ptr"
                },
                "puVar7": {
                    "1": "allocated_memory_copy",
                    "2": "ptr",
                    "3": "temp_block_ptr",
                    "4": "ptr7"
                },
                "uVar2": {
                    "1": "is_successful",
                    "14": "result",
                    "2": "success_flag",
                    "5": "success",
                    "7": "return_value"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "xmalloc",
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16] debug_start_block_0010be88(long block_ptr,undefined8 param2,undefined8 param3,undefined8 param_4)\n\n{\n  undefined8 *current_ptr;\n  undefined8 result;\n  undefined4 *new_block;\n  undefined8 *temp_ptr;\n  long block_address;\n  undefined8 *last_ptr;\n  undefined4 *ptr7;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  if ((*(long *)(block_ptr + 8) == 0) || (*(long *)(block_ptr + 0x20) == 0)) {\n    result = dcgettext(0,\"debug_start_block_0010be88: no current block\",5);\n    fprintf(error_output_stream,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    new_block = (undefined4 *)xmalloc(0x30);\n    ptr7 = new_block;\n    for (block_address = 0xc; block_address != 0; block_address = block_address + -1) {\n      *ptr7 = 0;\n      ptr7 = ptr7 + (ulong)flag * -2 + 1;\n    }\n    block_address = *(long *)(block_ptr + 0x20);\n    *(undefined8 *)(new_block + 6) = param2;\n    *(undefined8 *)(new_block + 8) = 0xffffffffffffffff;\n    *(long *)(new_block + 2) = block_address;\n    current_ptr = *(undefined8 **)(block_address + 0x10);\n    last_ptr = (undefined8 *)(block_address + 0x10);\n    while (temp_ptr = current_ptr, temp_ptr != (undefined8 *)0x0) {\n      last_ptr = temp_ptr;\n      current_ptr = (undefined8 *)*temp_ptr;\n    }\n    *last_ptr = new_block;\n    result = 1;\n    *(undefined4 **)(block_ptr + 0x20) = new_block;\n  }\n  return_value._8_8_ = param_4;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "current_name": "debug_start_block_0010be88",
            "entrypoint": "0x0010be88",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010be88": "debug_start_block_0010be88",
                "_stderr": "error_output_stream",
                "auVar9": "return_value",
                "bVar8": "flag",
                "dcgettext": "get_error_message",
                "fprintf": "print_to_stderr",
                "lVar5": "block_address",
                "param_1": "block_ptr",
                "param_2": "param2",
                "param_3": "param3",
                "puVar1": "current_ptr",
                "puVar3": "new_block",
                "puVar4": "temp_ptr",
                "puVar6": "last_ptr",
                "puVar7": "ptr7",
                "uVar2": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bf20": {
            "additional_data": {
                "FUN_0010bf20": {
                    "1": "end_block_debugger",
                    "18": "debug_end_block",
                    "2": "end_current_block",
                    "3": "end_debug_block",
                    "4": "end_block"
                },
                "auVar4": {
                    "1": "result_variable",
                    "2": "return_array",
                    "3": "return_value_struct",
                    "6": "result",
                    "9": "return_value"
                },
                "dcgettext": {
                    "1": "get_translated_msg"
                },
                "fprintf": {
                    "1": "print_error_message"
                },
                "lVar1": {
                    "1": "current_block_var",
                    "21": "current_block",
                    "9": "current_block_ptr"
                },
                "param_1": {
                    "1": "data",
                    "14": "block_ptr",
                    "3": "block_info",
                    "4": "block"
                },
                "param_2": {
                    "1": "debugger",
                    "2": "new_debug_info",
                    "7": "new_value",
                    "8": "new_block_ptr"
                },
                "param_3": {
                    "1": "unimportant_param",
                    "18": "unused_param",
                    "2": "param_3"
                },
                "param_4": {
                    "1": "debug_var4",
                    "2": "arg4",
                    "7": "result",
                    "8": "return_value"
                },
                "pcVar3": {
                    "1": "error_message_var",
                    "10": "error_string",
                    "15": "error_message",
                    "3": "error_msg"
                },
                "uVar2": {
                    "1": "message_ptr",
                    "12": "error_message",
                    "2": "localized_error_message",
                    "4": "translation",
                    "5": "result"
                }
            },
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16] debug_end_block_0010bf20(long block_ptr,undefined8 new_block_ptr,undefined8 unused_param,undefined8 return_value)\n\n{\n  long current_block;\n  undefined8 error_message;\n  char *error_message;\n  undefined return_value [16];\n  \n  if ((*(long *)(block_ptr + 8) == 0) || (current_block = *(long *)(block_ptr + 0x20), current_block == 0)) {\n    error_message = \"debug_end_block_0010bf20: no current block\";\n  }\n  else {\n    if (*(long *)(current_block + 8) != 0) {\n      *(undefined8 *)(current_block + 0x20) = new_block_ptr;\n      error_message = CONCAT71((int7)((ulong)current_block >> 8),1);\n      *(long *)(block_ptr + 0x20) = *(long *)(current_block + 8);\n      goto LAB_0010bf84;\n    }\n    error_message = \"debug_end_block_0010bf20: attempt to close top level block\";\n  }\n  error_message = dcgettext(0,error_message,5);\n  fprintf(_stderr,\"%s\\n\",error_message);\n  error_message = 0;\nLAB_0010bf84:\n  return_value._8_8_ = return_value;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "current_name": "debug_end_block_0010bf20",
            "entrypoint": "0x0010bf20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bf20": "debug_end_block_0010bf20",
                "auVar4": "return_value",
                "dcgettext": "get_translated_msg",
                "fprintf": "print_error_msg",
                "lVar1": "current_block",
                "param_1": "block_ptr",
                "param_2": "new_block_ptr",
                "param_3": "unused_param",
                "param_4": "return_value",
                "pcVar3": "error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bf86": {
            "additional_data": {
                "FUN_0010bf86": {
                    "1": "record_line_debug_info",
                    "10": "record_debug_line",
                    "3": "update_record_line",
                    "5": "update_debug_record_line"
                },
                "_stderr": {
                    "1": "standard_error",
                    "2": "error_stream"
                },
                "bVar7": {
                    "1": "zero_byte",
                    "25": "flag"
                },
                "lVar5": {
                    "1": "loop_index",
                    "2": "loop_counter",
                    "3": "count",
                    "4": "index",
                    "5": "counter",
                    "8": "i"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "base_address",
                    "8": "record_ptr"
                },
                "param_2": {
                    "1": "ptr2",
                    "2": "new_param_2",
                    "4": "line_number",
                    "8": "line"
                },
                "param_3": {
                    "1": "line",
                    "2": "param3",
                    "3": "unit_ptr",
                    "5": "unit"
                },
                "puVar2": {
                    "1": "ptr_array",
                    "2": "unit_pointer",
                    "3": "current_record",
                    "4": "current_unit_ptr",
                    "6": "current_unit"
                },
                "puVar4": {
                    "1": "buffer",
                    "11": "new_record",
                    "3": "allocated_memory"
                },
                "puVar6": {
                    "1": "info_pointer",
                    "2": "ptr2",
                    "6": "ptr"
                },
                "uVar1": {
                    "1": "output_var",
                    "15": "result",
                    "2": "message",
                    "9": "error_message"
                },
                "uVar3": {
                    "1": "loop_index",
                    "2": "loop_counter",
                    "20": "index",
                    "4": "counter"
                }
            },
            "called": [
                "xmalloc",
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 record_line_0010bf86(long record_ptr,undefined8 line,undefined8 unit)\n\n{\n  undefined8 result;\n  undefined8 *current_unit;\n  ulong index;\n  undefined4 *new_record;\n  long i;\n  undefined4 *temp_ptr;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(record_ptr + 8) == 0) {\n    result = dcgettext(0,\"debug_record_line_0010bf86: no current unit\",5);\n    fprintf(error_stream,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    i = *(long *)(record_ptr + 0x28);\n    if ((i != 0) && (*(long *)(i + 8) == *(long *)(record_ptr + 0x10))) {\n      index = 0;\n      do {\n        if (*(long *)(i + 0x10 + index * 8) == -1) {\n          current_unit = (undefined8 *)(index & 0xffffffff);\n          *(undefined8 *)(i + 0x10 + (long)current_unit * 8) = line;\n          *(undefined8 *)(i + 0x60 + (long)current_unit * 8) = unit;\n          goto LAB_0010c056;\n        }\n        index = index + 1;\n      } while (index != 10);\n    }\n    new_record = (undefined4 *)xmalloc(0xb0);\n    temp_ptr = new_record;\n    for (i = 0x2c; i != 0; i = i + -1) {\n      *temp_ptr = 0;\n      temp_ptr = temp_ptr + (ulong)flag * -2 + 1;\n    }\n    result = *(undefined8 *)(record_ptr + 0x10);\n    *(undefined8 *)(new_record + 4) = line;\n    *(undefined8 *)(new_record + 2) = result;\n    *(undefined8 *)(new_record + 0x18) = unit;\n    temp_ptr = new_record + 6;\n    for (i = 0x48; i != 0; i = i + -1) {\n      *(undefined *)temp_ptr = 0xff;\n      temp_ptr = (undefined4 *)((long)temp_ptr + (ulong)flag * -2 + 1);\n    }\n    current_unit = *(undefined8 **)(record_ptr + 0x28);\n    if (current_unit == (undefined8 *)0x0) {\n      current_unit = *(undefined8 **)(record_ptr + 8);\n      current_unit[2] = new_record;\n    }\n    else {\n      *current_unit = new_record;\n    }\n    *(undefined4 **)(record_ptr + 0x28) = new_record;\nLAB_0010c056:\n    result = CONCAT71((int7)((ulong)current_unit >> 8),1);\n  }\n  return result;\n}\n\n",
            "current_name": "record_line_0010bf86",
            "entrypoint": "0x0010bf86",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bf86": "record_line_0010bf86",
                "_stderr": "error_stream",
                "bVar7": "flag",
                "lVar5": "i",
                "param_1": "record_ptr",
                "param_2": "line",
                "param_3": "unit",
                "puVar2": "current_unit",
                "puVar4": "new_record",
                "puVar6": "temp_ptr",
                "uVar1": "result",
                "uVar3": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c05d": {
            "additional_data": {
                "FUN_0010c05d": {
                    "1": "record_variable_debugging",
                    "10": "record_variable",
                    "13": "debug_record_variable",
                    "2": "record_debug_variable",
                    "4": "record_variable_debug"
                },
                "FUN_00112925": {
                    "1": "process_record",
                    "2": "process_variable"
                },
                "_printf": {
                    "1": "output_format"
                },
                "_stderr": {
                    "1": "error_output",
                    "2": "standard_error"
                },
                "auVar1": {
                    "1": "result_var1",
                    "16": "result",
                    "2": "result_1"
                },
                "auVar9": {
                    "1": "function_result",
                    "2": "result2",
                    "5": "final_result",
                    "8": "return_value"
                },
                "bVar8": {
                    "1": "is_zero",
                    "2": "zero_byte",
                    "3": "byte_var",
                    "4": "flag"
                },
                "cVar4": {
                    "1": "is_global",
                    "18": "flag",
                    "3": "condition"
                },
                "dcgettext": {
                    "1": "get_text",
                    "3": "get_debug_message"
                },
                "fprintf": {
                    "1": "print"
                },
                "lVar5": {
                    "1": "loop_count",
                    "15": "loop_counter",
                    "2": "loop_index",
                    "7": "counter"
                },
                "lVar6": {
                    "1": "current_position",
                    "16": "current_file",
                    "2": "file_pointer",
                    "3": "file_offset"
                },
                "param_1": {
                    "1": "filename",
                    "2": "file_pointer",
                    "3": "file_data",
                    "6": "file_ptr"
                },
                "param_2": {
                    "1": "var_ptr",
                    "2": "variable_value",
                    "3": "offset",
                    "5": "variable_address",
                    "9": "variable_id"
                },
                "param_3": {
                    "1": "data_length",
                    "10": "value",
                    "2": "param_3",
                    "3": "variable_value"
                },
                "param_4": {
                    "1": "condition_type",
                    "2": "data_type",
                    "4": "record_type",
                    "6": "type",
                    "7": "variable_type"
                },
                "param_5": {
                    "1": "record_ptr",
                    "17": "param_5",
                    "2": "arg5",
                    "3": "param5"
                },
                "param_6": {
                    "1": "sixth_param",
                    "14": "param_6",
                    "2": "arg6",
                    "3": "param6",
                    "8": "result"
                },
                "piVar3": {
                    "1": "variable_ptr",
                    "2": "record",
                    "3": "new_variable",
                    "4": "new_record",
                    "7": "allocated_memory"
                },
                "piVar7": {
                    "1": "variable_value",
                    "2": "record_ptr",
                    "3": "ptr",
                    "4": "ptr2"
                },
                "uVar2": {
                    "1": "return_val",
                    "3": "retval",
                    "4": "status",
                    "5": "result",
                    "7": "success"
                },
                "xmalloc": {
                    "1": "memory_allocation",
                    "2": "allocate_memory"
                }
            },
            "called": [
                "xmalloc",
                "dcgettext",
                "FUN_00112925",
                "fprintf"
            ],
            "calling": [
                "FUN_0010c1c6",
                "FUN_0010c139",
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "code": "\n\n\nundefined  [16]\ndebug_record_variable_0010c05d(long file_ptr,long variable_id,ulong value,int variable_type,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined result [16];\n  undefined8 return_value;\n  int *allocated_memory;\n  char flag;\n  long loop_counter;\n  long current_file;\n  int *ptr2;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  if (variable_id == 0) {\n    result._8_8_ = 0;\n    result._0_8_ = value;\n    return result << 0x40;\n  }\n  if (value != 0) {\n    if ((*(long *)(file_ptr + 8) == 0) || (current_file = *(long *)(file_ptr + 0x10), current_file == 0)) {\n      return_value = dcgettext(0,\"debug_record_variable_0010c05d: no current file\",5);\n      fprintf(standard_error,\"%s\\n\",return_value);\n    }\n    else {\n      if (variable_type - 1U < 2) {\n        current_file = current_file + 0x10;\n        flag = (variable_type == 1) + '\\x01';\n      }\n      else if (*(long *)(file_ptr + 0x20) == 0) {\n        current_file = current_file + 0x10;\n        flag = '\\0';\n      }\n      else {\n        current_file = *(long *)(file_ptr + 0x20) + 0x28;\n        flag = '\\0';\n      }\n      current_file = FUN_00112925(current_file,variable_id,2,flag);\n      if (current_file != 0) {\n        allocated_memory = (int *)xmalloc(0x18);\n        ptr2 = allocated_memory + 1;\n        for (loop_counter = 5; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *ptr2 = 0;\n          ptr2 = ptr2 + (ulong)flag * -2 + 1;\n        }\n        *allocated_memory = variable_type;\n        return_value = 1;\n        *(ulong *)(allocated_memory + 2) = value;\n        *(undefined8 *)(allocated_memory + 4) = param_5;\n        *(int **)(current_file + 0x20) = allocated_memory;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  return_value = 0;\nLAB_0010c12e:\n  return_value._8_8_ = param_6;\n  return_value._0_8_ = return_value;\n  return return_value;\n}\n\n",
            "current_name": "debug_record_variable_0010c05d",
            "entrypoint": "0x0010c05d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c05d": "debug_record_variable_0010c05d",
                "_stderr": "standard_error",
                "auVar1": "result",
                "auVar9": "return_value",
                "bVar8": "flag",
                "cVar4": "flag",
                "dcgettext": "get_debug_message",
                "fprintf": "print_to_stderr",
                "lVar5": "loop_counter",
                "lVar6": "current_file",
                "param_1": "file_ptr",
                "param_2": "variable_id",
                "param_3": "value",
                "param_4": "variable_type",
                "piVar3": "allocated_memory",
                "piVar7": "ptr2",
                "uVar2": "return_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c139": {
            "additional_data": {
                "FUN_0010c05d": {
                    "1": "other_function"
                },
                "FUN_0010c139": {
                    "1": "allocate_memory_if_needed",
                    "2": "allocate_resource",
                    "7": "process_data"
                },
                "cVar2": {
                    "1": "resource_flag",
                    "14": "char_value",
                    "5": "character",
                    "6": "flag"
                },
                "in_R10": {
                    "1": "prev_memory",
                    "2": "register_value",
                    "5": "register10"
                },
                "param_1": {
                    "1": "data",
                    "2": "input1",
                    "7": "param1"
                },
                "param_2": {
                    "1": "input2",
                    "2": "data_struct",
                    "3": "data",
                    "5": "param2",
                    "6": "arg2"
                },
                "param_3": {
                    "1": "new_value1",
                    "2": "data_address",
                    "4": "param_3",
                    "7": "arg3",
                    "8": "param3"
                },
                "param_4": {
                    "1": "undefined_param_4",
                    "4": "param_4",
                    "7": "arg4",
                    "8": "param4"
                },
                "param_5": {
                    "1": "param_value2",
                    "4": "param_5",
                    "7": "arg5",
                    "8": "param5"
                },
                "param_6": {
                    "1": "data4",
                    "4": "param_6",
                    "7": "arg6",
                    "8": "param6"
                },
                "puVar4": {
                    "1": "new_buffer",
                    "10": "allocated_memory",
                    "2": "new_pointer",
                    "4": "new_data"
                },
                "uVar1": {
                    "1": "stored_value",
                    "2": "old_data",
                    "5": "prev_value"
                },
                "uVar3": {
                    "17": "result",
                    "9": "return_value"
                },
                "unaff_R15": {
                    "1": "new_value",
                    "2": "register_15",
                    "4": "register15"
                },
                "xmalloc": {
                    "8": "allocate_memory"
                }
            },
            "called": [
                "xmalloc",
                "FUN_0010c05d"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\nulong process_data_0010c139(undefined8 arg1,long arg2,undefined8 param3,undefined8 param4,\n                  undefined4 param5,undefined8 param6)\n\n{\n  undefined8 prev_value;\n  char char_value;\n  ulong result;\n  undefined8 *allocated_memory;\n  undefined8 register10;\n  undefined8 register15;\n  \n  char_value = *(char *)(arg2 + 0x60);\n  if ((char_value != '\\0') && ((*(int *)(arg2 + 0x40) != 0 || (*(char *)(arg2 + 0x44) == '\\0')))) {\n    allocated_memory = (undefined8 *)xmalloc(0x28);\n    prev_value = *(undefined8 *)(arg2 + 0x78);\n    *(undefined8 *)((long)allocated_memory + 0x1c) = 0;\n    allocated_memory[2] = param4;\n    *(undefined4 *)(allocated_memory + 3) = param5;\n    allocated_memory[4] = param6;\n    *(undefined8 **)(arg2 + 0x78) = allocated_memory;\n    *allocated_memory = prev_value;\n    allocated_memory[1] = param3;\n    return CONCAT71((int7)((ulong)register15 >> 8),char_value) & 0xffffffff;\n  }\n  result = FUN_0010c05d(arg1,param3,param4,param5,param6,register10);\n  return result;\n}\n\n",
            "current_name": "process_data_0010c139",
            "entrypoint": "0x0010c139",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c139": "process_data_0010c139",
                "cVar2": "char_value",
                "in_R10": "register10",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "puVar4": "allocated_memory",
                "uVar1": "prev_value",
                "uVar3": "result",
                "unaff_R15": "register15",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c1c6": {
            "additional_data": {
                "FUN_0010c1c6": {
                    "1": "deallocate_and_clear_ptr",
                    "2": "reverse_and_free",
                    "3": "process_list",
                    "8": "reverse_and_free_linked_list"
                },
                "__ptr": {
                    "1": "current_struct_ptr",
                    "16": "current_node",
                    "2": "current_pointer",
                    "8": "current_ptr"
                },
                "cVar2": {
                    "1": "is_successful",
                    "2": "return_value",
                    "24": "result"
                },
                "free": {
                    "1": "release_memory"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "data",
                    "5": "param",
                    "6": "param_1"
                },
                "param_2": {
                    "1": "struct_address",
                    "2": "linked_list",
                    "3": "param_2",
                    "4": "param2"
                },
                "param_3": {
                    "1": "param_c",
                    "13": "param_3",
                    "2": "param1",
                    "3": "arg3",
                    "7": "param3"
                },
                "param_4": {
                    "1": "param_d",
                    "13": "param_4",
                    "2": "param2",
                    "3": "arg4",
                    "7": "param4"
                },
                "param_5": {
                    "1": "param_e",
                    "14": "param_5",
                    "2": "param3",
                    "5": "arg5",
                    "7": "param5"
                },
                "param_6": {
                    "1": "unused_param",
                    "14": "param_6",
                    "2": "param4",
                    "5": "arg6",
                    "7": "param6"
                },
                "puVar1": {
                    "1": "next_struct_address",
                    "16": "next_node",
                    "2": "next_pointer",
                    "9": "next_ptr"
                }
            },
            "called": [
                "free",
                "FUN_0010c05d"
            ],
            "calling": [
                "FUN_0010c892",
                "FUN_0011173a"
            ],
            "code": "\nundefined reverse_and_free_linked_list_0010c1c6(undefined8 param_1,long arg2,undefined8 param_3,undefined8 param_4,\n                      undefined8 param_5,undefined8 param_6)\n\n{\n  undefined8 *next_node;\n  char result;\n  undefined8 *current_node;\n  \n  current_node = *(undefined8 **)(arg2 + 0x78);\n  while( true ) {\n    if (current_node == (undefined8 *)0x0) {\n      *(undefined8 *)(arg2 + 0x78) = 0;\n      return 1;\n    }\n    result = FUN_0010c05d(param_1,current_node[1],current_node[2],*(undefined4 *)(current_node + 3),current_node[4],param_6,\n                         param_5);\n    if (result == '\\0') break;\n    next_node = (undefined8 *)*current_node;\n    release_memory(current_node);\n    current_node = next_node;\n  }\n  return 0;\n}\n\n",
            "current_name": "reverse_and_free_linked_list_0010c1c6",
            "entrypoint": "0x0010c1c6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c1c6": "reverse_and_free_linked_list_0010c1c6",
                "__ptr": "current_node",
                "cVar2": "result",
                "free": "release_memory",
                "param_2": "arg2",
                "puVar1": "next_node"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c218": {
            "additional_data": {
                "*__format": {
                    "1": "format_string"
                },
                "*__stream": {
                    "1": "output_stream"
                },
                "*param_1": {
                    "1": "target"
                },
                "FUNK_0010c218": {
                    "1": "process_debug_name"
                },
                "FUN_0010c218": {
                    "1": "extract_type_name",
                    "15": "process_debug_name_type",
                    "2": "process_debug_name",
                    "3": "process_name_type"
                },
                "FUN_00112904": {
                    "1": "create_file_data",
                    "2": "allocate_memory"
                },
                "FUN_00112925": {
                    "1": "update_debug_info",
                    "2": "process_name",
                    "3": "process_file"
                },
                "__format": {
                    "1": "error_format",
                    "2": "format"
                },
                "__stream": {
                    "1": "output_stream",
                    "2": "stream"
                },
                "_stderr": {
                    "1": "output_stream",
                    "2": "error_output_stream"
                },
                "dcgettext": {
                    "1": "get_localized_text",
                    "11": "get_error_message",
                    "2": "get_text"
                },
                "fprintf": {
                    "1": "print_to_stderr",
                    "5": "print_error_message",
                    "7": "print_error"
                },
                "lVar2": {
                    "1": "debug_variable",
                    "15": "result",
                    "2": "file_type"
                },
                "lVar4": {
                    "1": "pointer_to_struct",
                    "13": "current_file",
                    "2": "file_info",
                    "3": "file_ptr"
                },
                "param_1": {
                    "1": "param",
                    "12": "file_info",
                    "2": "param_ptr",
                    "3": "file_data",
                    "4": "file"
                },
                "param_2": {
                    "1": "length_param",
                    "2": "debug_name_type",
                    "3": "flag1",
                    "5": "current_file"
                },
                "param_3": {
                    "1": "debug_type",
                    "3": "type",
                    "4": "debug_name_type",
                    "5": "name_type"
                },
                "param_4": {
                    "1": "flag"
                },
                "pauVar3": {
                    "1": "ptr_16_array",
                    "2": "buffer",
                    "4": "allocated_memory"
                },
                "uVar1": {
                    "24": "error_message",
                    "5": "error_msg"
                },
                "xmalloc": {
                    "1": "dynamic_memory_allocation",
                    "11": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112904",
                "xmalloc",
                "dcgettext",
                "FUN_00112925",
                "fprintf"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010dac0",
                "FUN_00112a33",
                "FUN_0010c2d2"
            ],
            "code": "\n\n\nlong process_debug_name_type_0010c218(long file_info,long current_file,long name_type)\n\n{\n  undefined8 error_message;\n  long result;\n  undefined (*allocated_memory) [16];\n  long current_file;\n  \n  if ((current_file != 0) && (name_type != 0)) {\n    if ((*(long *)(file_info + 8) == 0) || (*(long *)(file_info + 0x10) == 0)) {\n      error_message = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(error_output_stream,\"%s\\n\",error_message);\n    }\n    else {\n      result = FUN_00112904(0x16,0);\n      if (result != 0) {\n        allocated_memory = (undefined (*) [16])xmalloc(0x10);\n        current_file = *(long *)(file_info + 0x10);\n        *allocated_memory = ZEXT816(0);\n        *(long *)(*allocated_memory + 8) = name_type;\n        *(undefined (**) [16])(result + 0x10) = allocated_memory;\n        current_file = FUN_00112925(current_file + 0x10,current_file,0,3);\n        if (current_file != 0) {\n          *(long *)(current_file + 0x20) = result;\n          *(long *)*allocated_memory = current_file;\n          return result;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_debug_name_type_0010c218",
            "entrypoint": "0x0010c218",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c218": "process_debug_name_type_0010c218",
                "_stderr": "error_output_stream",
                "dcgettext": "get_error_message",
                "fprintf": "print_error",
                "lVar2": "result",
                "lVar4": "current_file",
                "param_1": "file_info",
                "param_2": "current_file",
                "param_3": "name_type",
                "pauVar3": "allocated_memory",
                "uVar1": "error_message",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c2d2": {
            "additional_data": {
                "FUN_0010c218": {
                    "1": "create_and_return_data_type",
                    "2": "create_type"
                },
                "FUN_0010c2d2": {
                    "1": "convert_xcoff_type_to_data_type",
                    "2": "parse_xcoff_type",
                    "5": "get_type_from_xcoff",
                    "8": "get_data_type"
                },
                "FUN_00112904": {
                    "1": "create_logical_type",
                    "3": "create_logical_data_type"
                },
                "FUN_00113dfe": {
                    "1": "get_type_identifier"
                },
                "FUN_00113e17": {
                    "1": "get_void_type_size",
                    "2": "get_void_data_type"
                },
                "FUN_00113e23": {
                    "1": "extract_value",
                    "2": "get_type_from_pointer"
                },
                "_stderr": {
                    "1": "standard_error",
                    "2": "error_output",
                    "3": "stderr"
                },
                "dcgettext": {
                    "1": "get_message",
                    "3": "get_error_message"
                },
                "fprintf": {
                    "1": "print_message",
                    "2": "print_error_message"
                },
                "lVar4": {
                    "1": "data_type_output",
                    "2": "data_type_address",
                    "22": "result",
                    "3": "return_value"
                },
                "param_1": {
                    "1": "data",
                    "2": "arg1",
                    "3": "output",
                    "4": "param",
                    "5": "param_1",
                    "7": "param1"
                },
                "param_2": {
                    "1": "arg_2",
                    "2": "data",
                    "3": "offset",
                    "5": "param_2",
                    "7": "param2"
                },
                "param_3": {
                    "1": "input_3",
                    "2": "type_info",
                    "5": "type",
                    "7": "param3"
                },
                "pcVar2": {
                    "1": "data_type_str",
                    "13": "type_name",
                    "2": "data_type",
                    "6": "type_string",
                    "8": "data_type_string"
                },
                "plVar5": {
                    "1": "pointer_to_data_type",
                    "2": "pointer_result",
                    "3": "data_type_ptr",
                    "7": "ptr_result"
                },
                "uVar1": {
                    "1": "abs_type_code",
                    "2": "type_value",
                    "4": "type",
                    "6": "type_index",
                    "8": "type_code"
                },
                "uVar3": {
                    "1": "type_details",
                    "3": "data_type",
                    "4": "result"
                },
                "uVar6": {
                    "1": "positive_type_index",
                    "2": "neg_type_code",
                    "3": "type_index",
                    "8": "index"
                }
            },
            "called": [
                "FUN_00113e17",
                "FUN_00113e23",
                "FUN_0010c218",
                "FUN_00112904",
                "FUN_00113dfe",
                "dcgettext",
                "FUN_00109022",
                "FUN_00113df2",
                "fprintf"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nlong get_data_type_0010c2d2(undefined8 param1,long param2,int *param3)\n\n{\n  uint type_code;\n  char *type_name;\n  undefined8 type_size;\n  long result;\n  long *ptr_result;\n  uint index;\n  \n  if ((*param3 == 0) && (type_code = param3[1], (int)type_code < 0)) {\n    index = ~type_code;\n    if (index < 0x22) {\n      result = *(long *)(param2 + 0x90 + (ulong)index * 8);\n      if (result == 0) {\n        switch(index) {\n        case 1:\n          type_size = FUN_00113dfe(1,0);\n          type_name = \"char\";\n          break;\n        case 2:\n          type_size = FUN_00113dfe(2,0);\n          type_name = \"short\";\n          break;\n        case 3:\n          type_size = FUN_00113dfe(4,0);\n          type_name = \"long\";\n          break;\n        case 4:\n          type_size = FUN_00113dfe(1,1);\n          type_name = \"unsigned char\";\n          break;\n        case 5:\n          type_size = FUN_00113dfe(1,0);\n          type_name = \"signed char\";\n          break;\n        case 6:\n          type_size = FUN_00113dfe(2,1);\n          type_name = \"unsigned short\";\n          break;\n        case 7:\n          type_size = FUN_00113dfe(4,1);\n          type_name = \"unsigned int\";\n          break;\n        case 8:\n          type_size = FUN_00113dfe(4,1);\n          type_name = \"unsigned\";\n          break;\n        case 9:\n          type_size = FUN_00113dfe(4,1);\n          type_name = \"unsigned long\";\n          break;\n        case 10:\n          type_size = FUN_00113e17();\n          type_name = \"void\";\n          break;\n        case 0xb:\n          type_size = FUN_00113df2(4);\n          type_name = \"float\";\n          break;\n        case 0xc:\n          type_size = FUN_00113df2(8);\n          type_name = \"double\";\n          break;\n        case 0xd:\n          type_size = FUN_00113df2(8);\n          type_name = \"long double\";\n          break;\n        case 0xe:\n          type_size = FUN_00113dfe(4,0);\n          type_name = \"integer\";\n          break;\n        case 0xf:\n          type_size = FUN_00112904(6,4);\n          type_name = \"boolean\";\n          break;\n        case 0x10:\n          type_size = FUN_00113df2(4);\n          type_name = \"short real\";\n          break;\n        case 0x11:\n          type_size = FUN_00113df2(8);\n          type_name = \"real\";\n          break;\n        case 0x12:\n          type_name = \"stringptr\";\n          type_size = 0;\n          break;\n        case 0x13:\n          type_size = FUN_00113dfe(1,1);\n          type_name = \"character\";\n          break;\n        case 0x14:\n          type_size = FUN_00112904(6,1);\n          type_name = \"logical*1\";\n          break;\n        case 0x15:\n          type_size = FUN_00112904(6,2);\n          type_name = \"logical*2\";\n          break;\n        case 0x16:\n          type_size = FUN_00112904(6,4);\n          type_name = \"logical*4\";\n          break;\n        case 0x17:\n          type_size = FUN_00112904(6,4);\n          type_name = \"logical\";\n          break;\n        case 0x18:\n          type_size = FUN_00112904(5,8);\n          type_name = \"complex\";\n          break;\n        case 0x19:\n          type_size = FUN_00112904(5,0x10);\n          type_name = \"double complex\";\n          break;\n        case 0x1a:\n          type_size = FUN_00113dfe(1,0);\n          type_name = \"integer*1\";\n          break;\n        case 0x1b:\n          type_size = FUN_00113dfe(2,0);\n          type_name = \"integer*2\";\n          break;\n        case 0x1c:\n          type_size = FUN_00113dfe(4,0);\n          type_name = \"integer*4\";\n          break;\n        case 0x1d:\n          type_size = FUN_00113dfe(2,0);\n          type_name = \"wchar\";\n          break;\n        case 0x1e:\n          type_size = FUN_00113dfe(8,0);\n          type_name = \"long long\";\n          break;\n        case 0x1f:\n          type_size = FUN_00113dfe(8,1);\n          type_name = \"unsigned long long\";\n          break;\n        case 0x20:\n          type_size = FUN_00112904(6,8);\n          type_name = \"logical*8\";\n          break;\n        case 0x21:\n          type_size = FUN_00113dfe(8,0);\n          type_name = \"integer*8\";\n          break;\n        default:\n          type_size = FUN_00113dfe(4,0);\n          type_name = \"int\";\n        }\n        result = FUN_0010c218(param1,type_name,type_size);\n        *(long *)(param2 + 0x90 + (ulong)index * 8) = result;\n        return result;\n      }\n      return result;\n    }\n    type_name = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(stderr,type_name,(ulong)type_code);\n  }\n  else {\n    ptr_result = (long *)FUN_00109022(param2);\n    if (ptr_result != (long *)0x0) {\n      if (*ptr_result == 0) {\n        result = FUN_00113e23(ptr_result,0);\n        return result;\n      }\n      return *ptr_result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "get_data_type_0010c2d2",
            "entrypoint": "0x0010c2d2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c2d2": "get_data_type_0010c2d2",
                "_stderr": "stderr",
                "dcgettext": "get_error_message",
                "fprintf": "print_error_message",
                "lVar4": "result",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "pcVar2": "type_name",
                "plVar5": "ptr_result",
                "uVar1": "type_code",
                "uVar3": "type_size",
                "uVar6": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c6be": {
            "additional_data": {
                "0": {
                    "1": "success_code"
                },
                "0x10": {
                    "1": "memory_size"
                },
                "0x17": {
                    "1": "tag_type"
                },
                "FUN_0010c6be": {
                    "1": "parse_debug_tag_type",
                    "2": "parse_debug_tag",
                    "3": "process_debug_tag",
                    "8": "debug_tag_type"
                },
                "FUN_00112904": {
                    "1": "allocate_debug_tag",
                    "2": "create_new_tag"
                },
                "FUN_00112925": {
                    "1": "update_offset",
                    "2": "read_data"
                },
                "__format": {
                    "1": "format_specifier"
                },
                "__stream": {
                    "1": "output_stream"
                },
                "_stderr": {
                    "1": "error_output"
                },
                "dcgettext": {
                    "1": "get_translated_string",
                    "2": "get_localized_message"
                },
                "fprintf": {
                    "1": "print_err_message",
                    "2": "print_error_message"
                },
                "fprintf(_stderr,: %s\n: ,uVar2)": {
                    "1": "print_to_standard_error(u_var2)"
                },
                "iVar1": {
                    "1": "tag_comparison",
                    "2": "strcmp_result",
                    "24": "comparison_result",
                    "3": "tag_comparison_result"
                },
                "lVar5": {
                    "1": "position",
                    "3": "temp_value",
                    "5": "result",
                    "6": "file_offset",
                    "7": "offset"
                },
                "param_1": {
                    "1": "input_address",
                    "2": "param1",
                    "3": "file_pointer",
                    "4": "file_handle"
                },
                "param_1 + 0x10": {
                    "1": "file_info_ptr"
                },
                "param_2": {
                    "1": "filename",
                    "16": "tag_name",
                    "2": "debug_tag_type",
                    "3": "file_name"
                },
                "param_3": {
                    "1": "tag_buffer",
                    "2": "tag_pointer",
                    "3": "debug_tag",
                    "4": "tag",
                    "5": "tag_ptr"
                },
                "pauVar4": {
                    "1": "tag_struct_pointer",
                    "2": "dynamic_array",
                    "3": "tag_info"
                },
                "pcVar6": {
                    "1": "debug_msg",
                    "2": "error_msg",
                    "26": "error_message"
                },
                "piVar3": {
                    "1": "allocated_memory",
                    "2": "new_tag_pointer",
                    "3": "new_debug_tag",
                    "5": "new_tag_ptr",
                    "9": "new_tag"
                },
                "strcmp": {
                    "1": "compare_tags",
                    "6": "compare_strings"
                },
                "uVar2": {
                    "1": "localized_error",
                    "3": "localized_error_message",
                    "6": "translated_message"
                },
                "xmalloc": {
                    "1": "allocate_dynamic_memory",
                    "4": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112904",
                "xmalloc",
                "dcgettext",
                "FUN_00112925",
                "fprintf",
                "strcmp"
            ],
            "calling": [
                "FUN_0010c892",
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "code": "\n\n\nint * debug_tag_type_0010c6be(long file_handle,char *tag_name,int *tag_ptr)\n\n{\n  int comparison_result;\n  undefined8 translated_message;\n  int *new_tag;\n  undefined (*tag_info) [16];\n  long offset;\n  char *error_message;\n  \n  if ((tag_name != (char *)0x0) && (tag_ptr != (int *)0x0)) {\n    if (*(long *)(file_handle + 0x10) == 0) {\n      error_message = \"debug_tag_type_0010c6be: no current file\";\n    }\n    else {\n      if (*tag_ptr != 0x17) {\n        new_tag = (int *)FUN_00112904(0x17,0);\n        if (new_tag == (int *)0x0) {\n          return (int *)0x0;\n        }\n        tag_info = (undefined (*) [16])xmalloc(0x10);\n        offset = *(long *)(file_handle + 0x10);\n        *tag_info = ZEXT816(0);\n        *(int **)(*tag_info + 8) = tag_ptr;\n        *(undefined (**) [16])(new_tag + 4) = tag_info;\n        offset = FUN_00112925(offset + 0x10,tag_name,1,3);\n        if (offset == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(offset + 0x20) = new_tag;\n        *(long *)*tag_info = offset;\n        return new_tag;\n      }\n      comparison_result = strcmp(*(char **)(**(long **)(tag_ptr + 4) + 8),tag_name);\n      error_message = \"debug_tag_type_0010c6be: extra tag attempted\";\n      if (comparison_result == 0) {\n        return tag_ptr;\n      }\n    }\n    translated_message = dcgettext(0,error_message,5);\n    fprintf(standard_error_stream,\"%s\\n\",translated_message);\n  }\n  return (int *)0x0;\n}\n\n",
            "current_name": "debug_tag_type_0010c6be",
            "entrypoint": "0x0010c6be",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c6be": "debug_tag_type_0010c6be",
                "_stderr": "standard_error_stream",
                "dcgettext": "get_localized_message",
                "fprintf": "print_error_message",
                "iVar1": "comparison_result",
                "lVar5": "offset",
                "param_1": "file_handle",
                "param_2": "tag_name",
                "param_3": "tag_ptr",
                "pauVar4": "tag_info",
                "pcVar6": "error_message",
                "piVar3": "new_tag",
                "strcmp": "compare_strings",
                "uVar2": "translated_message",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c7a0": {
            "additional_data": {
                "FUN_0010922b": {
                    "1": "compare_class_type"
                },
                "FUN_0010c7a0": {
                    "1": "find_and_set_class_id",
                    "12": "debug_set_class_id",
                    "15": "set_class_id"
                },
                "__assert_fail": {
                    "1": "assert_failed"
                },
                "__s1": {
                    "1": "str2",
                    "12": "existing_class_name",
                    "2": "saved_class_name",
                    "3": "existing_name"
                },
                "auVar8": {
                    "1": "returned_value",
                    "18": "return_value",
                    "7": "result_array"
                },
                "cVar5": {
                    "1": "is_type_name_matching",
                    "2": "check_result",
                    "4": "success",
                    "5": "comparison_result",
                    "7": "result"
                },
                "iVar6": {
                    "1": "incremented_value",
                    "3": "index",
                    "6": "count",
                    "9": "counter"
                },
                "lVar3": {
                    "1": "type_info_ptr",
                    "10": "type_info",
                    "2": "type",
                    "3": "ptr1",
                    "4": "struct_ptr"
                },
                "param_1": {
                    "1": "param_address",
                    "2": "arg1",
                    "8": "class_id"
                },
                "param_2": {
                    "1": "input2",
                    "24": "class_name"
                },
                "param_3": {
                    "1": "class_id",
                    "13": "type",
                    "4": "class_type",
                    "6": "type_kind"
                },
                "param_4": {
                    "1": "param",
                    "17": "param_4",
                    "2": "arg4",
                    "4": "param4"
                },
                "piVar4": {
                    "1": "struct_type_ptr",
                    "10": "type_ptr",
                    "2": "type_pointer",
                    "3": "ptr2"
                },
                "puVar7": {
                    "1": "current",
                    "2": "current_ptr",
                    "4": "new_node"
                },
                "strcmp": {
                    "1": "compare_strings"
                },
                "uVar1": {
                    "1": "temp_value",
                    "2": "temp",
                    "22": "result",
                    "3": "return_value"
                },
                "uVar2": {
                    "1": "index",
                    "2": "new_id",
                    "3": "count",
                    "8": "new_class_id"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "xmalloc",
                "FUN_0010922b",
                "__assert_fail",
                "strcmp"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] set_class_id_0010c7a0(long class_id,char *class_name,int *type,undefined8 param_4)\n\n{\n  undefined8 result;\n  uint new_class_id;\n  long type_info;\n  int *type_ptr;\n  char *existing_class_name;\n  char result;\n  int counter;\n  undefined8 *node;\n  undefined return_value [16];\n  \n  if (3 < *type - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id_0010c7a0\");\n  }\n  type_info = *(long *)(type + 4);\n  node = (undefined8 *)(ulong)*(uint *)(type_info + 0xc);\n  if (*(uint *)(type_info + 0xc) <= *(uint *)(class_id + 0x38)) {\n    for (node = *(undefined8 **)(class_id + 0x50); node != (undefined8 *)0x0;\n        node = (undefined8 *)*node) {\n      type_ptr = (int *)node[1];\n      if (*type_ptr == *type) {\n        existing_class_name = (char *)node[2];\n        if (class_name == (char *)0x0) {\n          if (existing_class_name == (char *)0x0) {\nLAB_0010c82c:\n            result = FUN_0010922b(class_id,type_ptr,type);\n            if (result != '\\0') {\n              new_class_id = *(uint *)(*(long *)(node[1] + 0x10) + 0xc);\n              node = (undefined8 *)(ulong)new_class_id;\n              *(uint *)(type_info + 0xc) = new_class_id;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((existing_class_name != (char *)0x0) && (*existing_class_name == *class_name)) &&\n                (counter = strcmp(existing_class_name,class_name), counter == 0)) goto LAB_0010c82c;\n      }\n    }\n    counter = *(int *)(class_id + 0x34) + 1;\n    *(int *)(class_id + 0x34) = counter;\n    *(int *)(type_info + 0xc) = counter;\n    node = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(class_id + 0x50);\n    node[2] = class_name;\n    *(undefined8 **)(class_id + 0x50) = node;\n    *node = result;\n    node[1] = type;\n  }\nLAB_0010c884:\n  return_value._1_7_ = (undefined7)((ulong)node >> 8);\n  return_value[0] = 1;\n  return_value._8_8_ = param_4;\n  return return_value;\n}\n\n",
            "current_name": "set_class_id_0010c7a0",
            "entrypoint": "0x0010c7a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c7a0": "set_class_id_0010c7a0",
                "__assert_fail": "assert_failed",
                "__s1": "existing_class_name",
                "auVar8": "return_value",
                "cVar5": "result",
                "iVar6": "counter",
                "lVar3": "type_info",
                "param_1": "class_id",
                "param_2": "class_name",
                "param_3": "type",
                "piVar4": "type_ptr",
                "puVar7": "node",
                "strcmp": "compare_strings",
                "uVar1": "result",
                "uVar2": "new_class_id",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c892": {
            "additional_data": {
                "FUN_0010be1a": {
                    "1": "check_validity"
                },
                "FUN_0010c1c6": {
                    "1": "should_be_processed"
                },
                "FUN_0010c6be": {
                    "1": "process_entry"
                },
                "FUN_0010c892": {
                    "1": "make_undefined_type",
                    "18": "process_data",
                    "3": "process_entries"
                },
                "FUN_00112904": {
                    "1": "allocate_type"
                },
                "_stderr": {
                    "1": "stderr",
                    "3": "error_stream"
                },
                "cVar1": {
                    "1": "is_debugging",
                    "13": "flag",
                    "2": "is_debug",
                    "3": "is_valid",
                    "5": "result"
                },
                "dcgettext": {
                    "1": "translate_error_message",
                    "4": "get_error_message"
                },
                "fprintf": {
                    "2": "print_error_message"
                },
                "iVar6": {
                    "1": "var_index",
                    "20": "kind",
                    "3": "counter"
                },
                "lVar2": {
                    "1": "allocation_size",
                    "17": "result",
                    "2": "temp_value1",
                    "3": "temp_var1"
                },
                "lVar3": {
                    "1": "type",
                    "14": "value",
                    "2": "temp_value2",
                    "3": "temp_var2"
                },
                "param_1": {
                    "1": "entry_list",
                    "2": "param",
                    "3": "input_data",
                    "5": "arg1",
                    "9": "data"
                },
                "param_2": {
                    "1": "data_length",
                    "2": "data_size",
                    "3": "param2",
                    "4": "data",
                    "5": "address"
                },
                "puVar5": {
                    "1": "list_iterator",
                    "10": "ptr",
                    "2": "current_node",
                    "3": "current"
                },
                "uVar4": {
                    "1": "success_flag",
                    "22": "return_value",
                    "6": "result"
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_0010c6be",
                "FUN_0010c1c6",
                "dcgettext",
                "FUN_0010be1a",
                "fprintf"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 process_data_0010c892(undefined8 data,long arg2)\n\n{\n  char flag;\n  long result;\n  long value;\n  undefined8 return_value;\n  undefined8 *ptr;\n  int kind;\n  \n  if (*(char *)(arg2 + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (ptr = *(undefined8 **)(arg2 + 0x1a0); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      kind = *(int *)(ptr + 2);\n      value = ptr[1];\n      if (kind != 0) {\n        if (value != 0) {\n          if (kind - 7U < 5) goto LAB_0010c8d5;\n          return_value = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(error_stream,\"%s\\n\",return_value);\n        }\nLAB_0010c910:\n        ptr[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (value == 0) goto LAB_0010c910;\n      kind = 7;\nLAB_0010c8d5:\n      result = FUN_00112904(kind,0);\n      if (result == 0) goto LAB_0010c910;\n      value = FUN_0010c6be(data,value,result);\n      ptr[3] = value;\n      if (value == 0) goto LAB_0010c916;\n    }\n    return_value = 1;\n  }\n  else {\n    flag = FUN_0010c1c6();\n    if (flag != '\\0') {\n      flag = FUN_0010be1a(data,*(undefined8 *)(arg2 + 0x68));\n      if (flag != '\\0') {\n        *(undefined *)(arg2 + 0x60) = 0;\n        *(undefined8 *)(arg2 + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_data_0010c892",
            "entrypoint": "0x0010c892",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c892": "process_data_0010c892",
                "_stderr": "error_stream",
                "cVar1": "flag",
                "dcgettext": "get_error_message",
                "fprintf": "print_error_message",
                "iVar6": "kind",
                "lVar2": "result",
                "lVar3": "value",
                "param_1": "data",
                "param_2": "arg2",
                "puVar5": "ptr",
                "uVar4": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c95e": {
            "additional_data": {
                "**param_2": {
                    "1": "byte_array"
                },
                "*param_1": {
                    "1": "function_arguments"
                },
                "*param_3": {
                    "1": "output_value"
                },
                "FUN_0010c95e": {
                    "1": "parse_and_process",
                    "2": "parse_expression"
                },
                "__ptr": {
                    "1": "tmp_pointer",
                    "2": "pointer_value",
                    "3": "void_ptr",
                    "4": "ptr_value",
                    "5": "pointer"
                },
                "bVar1": {
                    "1": "first_byte",
                    "13": "current_byte",
                    "2": "byte1",
                    "3": "current_char",
                    "8": "byte_value"
                },
                "bVar2": {
                    "1": "second_byte_value",
                    "14": "next_byte",
                    "2": "byte_value_2",
                    "4": "byte_value2"
                },
                "bVar4": {
                    "1": "first_bool_value",
                    "2": "bool1",
                    "5": "bool_value1",
                    "9": "is_signed"
                },
                "bVar5": {
                    "1": "is_mult",
                    "2": "bool_value_2",
                    "5": "bool_value2",
                    "7": "is_unsigned"
                },
                "bVar6": {
                    "1": "next_token",
                    "2": "bool_3",
                    "3": "is_float",
                    "5": "bool_value3"
                },
                "cVar7": {
                    "1": "success_flag",
                    "2": "char_1",
                    "3": "status",
                    "4": "return_value",
                    "5": "result",
                    "9": "char_value"
                },
                "lVar10": {
                    "1": "temp_long_var",
                    "3": "long_var",
                    "4": "result",
                    "7": "long_value"
                },
                "lVar11": {
                    "1": "long3"
                },
                "lVar15": {
                    "1": "output_long",
                    "2": "result2",
                    "3": "return_value",
                    "4": "long_value2"
                },
                "lVar15_2": {
                    "1": "result_4"
                },
                "lVar16": {
                    "1": "ulong_ptr"
                },
                "lVar1a": {
                    "1": "long_value3"
                },
                "local_40": {
                    "1": "local_string_array",
                    "2": "char_ptr_array",
                    "3": "string_array",
                    "9": "char_array"
                },
                "local_40[0]": {
                    "1": "char_ptr_3"
                },
                "local_40[2]": {
                    "1": "string_array"
                },
                "local_48": {
                    "1": "var48",
                    "2": "ulong_value",
                    "3": "value",
                    "6": "ulong_value2"
                },
                "local_49": {
                    "1": "unknown",
                    "2": "undefined_var1",
                    "3": "flag",
                    "7": "undefined_value"
                },
                "param_1": {
                    "1": "config",
                    "2": "input",
                    "4": "param_array",
                    "5": "input_array"
                },
                "param_2": {
                    "1": "input_data",
                    "2": "input_byte_array",
                    "3": "input",
                    "6": "byte_array"
                },
                "param_3": {
                    "1": "output_long_array",
                    "2": "output_array",
                    "3": "long_pointer",
                    "4": "result"
                },
                "pbVar20": {
                    "1": "byte_pointer_3"
                },
                "pbVar3": {
                    "1": "ptr_byte",
                    "2": "byte_ptr",
                    "4": "current_ptr",
                    "8": "byte_pointer"
                },
                "pbVar9": {
                    "1": "temp_byte",
                    "3": "next_byte_ptr",
                    "4": "byte_pointer2",
                    "5": "next_byte_pointer"
                },
                "pcVar12": {
                    "1": "pointer_char",
                    "2": "char_ptr",
                    "8": "char_pointer"
                },
                "pcVar17": {
                    "1": "var_name"
                },
                "pcVar18": {
                    "1": "char_pointer2"
                },
                "pcVar19": {
                    "1": "char_ptr2",
                    "2": "type_name",
                    "5": "char_pointer2"
                },
                "pcVar20": {
                    "1": "ptr_array"
                },
                "ppcVar18": {
                    "1": "ptr_ptr_char",
                    "4": "char_pointer_pointer",
                    "6": "char_ptr_ptr"
                },
                "pscVar19": {
                    "1": "type2"
                },
                "puVar16": {
                    "1": "tmp_long_pointer",
                    "4": "ulong_ptr",
                    "7": "ulong_pointer"
                },
                "puVar17": {
                    "1": "pu_var_2",
                    "6": "undefined_pointer",
                    "7": "undefined_ptr"
                },
                "sVar13": {
                    "1": "size_value1",
                    "2": "size_t_value",
                    "3": "str_length",
                    "5": "string_length",
                    "9": "size_value"
                },
                "uVar11": {
                    "1": "unsigned_value_2",
                    "2": "function_result",
                    "3": "unsigned_var2",
                    "4": "uint64_value",
                    "8": "return_value"
                },
                "uVar14": {
                    "1": "index",
                    "12": "ulong_value",
                    "2": "unsigned_length"
                },
                "uVar8": {
                    "1": "int_value",
                    "10": "uint_value",
                    "2": "size",
                    "3": "length",
                    "5": "unsigned_value"
                }
            },
            "called": [
                "FUN_00113b71",
                "FUN_00113dfe",
                "FUN_00113cb9",
                "FUN_00108e76",
                "FUN_0010911f",
                "FUN_00109a0b",
                "free",
                "FUN_00113df2",
                "FUN_0010d882",
                "FUN_00113d3a",
                "FUN_0010d559",
                "FUN_0010914e",
                "FUN_00113e17",
                "FUN_00108ea1",
                "strlen",
                "FUN_0010afd5",
                "FUN_00112904",
                "FUN_0010c95e",
                "FUN_00113c43",
                "FUN_00113bfa",
                "FUN_00113b4a",
                "FUN_00113ce0",
                "FUN_0010d21c",
                "FUN_00113b98"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010d7d4",
                "FUN_0010d21c",
                "FUN_00113e5e"
            ],
            "code": "\nundefined8 decompile_and_improve_0010c95e(undefined8 *input_array,byte **byte_array,long *result)\n\n{\n  byte current_byte;\n  byte next_byte;\n  byte *byte_pointer;\n  bool is_signed;\n  bool is_unsigned;\n  bool bool_value3;\n  char char_value;\n  uint uint_value;\n  byte *next_byte_pointer;\n  long long_value;\n  undefined8 return_value;\n  char *char_pointer;\n  size_t size_value;\n  ulong ulong_value;\n  void *pointer;\n  long long_value2;\n  ulong *ulong_pointer;\n  undefined *undefined_ptr;\n  char **char_ptr_ptr;\n  char *char_pointer2;\n  byte *temp_byte_ptr2;\n  undefined undefined_value;\n  ulong ulong_value2;\n  char *char_array [2];\n  \n  while( true ) {\n    temp_byte_ptr2 = *byte_array;\n    current_byte = *temp_byte_ptr2;\n    if ('T' < (char)current_byte) break;\n    if ((char)current_byte < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(current_byte) {\n    case 0x41:\n      long_value2 = 0;\n      byte_pointer = temp_byte_ptr2;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *byte_array = temp_byte_ptr2 + 1;\n      char_value = decompile_and_improve_0010c95e(input_array,byte_array,result);\n      if (char_value == '\\0') {\n        return 0;\n      }\n      if (result == (long *)0x0) {\n        return 1;\n      }\n      long_value2 = FUN_00113b71(*result);\n      *result = long_value2;\n      return 1;\n    case 0x46:\n      *byte_array = temp_byte_ptr2 + 1;\n      if (result == (long *)0x0) {\n        ulong_pointer = (ulong *)0x0;\n        char_ptr_ptr = (char **)0x0;\n      }\n      else {\n        ulong_pointer = &ulong_value2;\n        char_ptr_ptr = char_array;\n      }\n      char_value = FUN_0010d882(input_array,byte_array,char_ptr_ptr,ulong_pointer);\n      if (char_value == '\\0') {\n        return 0;\n      }\n      if (**byte_array == 0x5f) {\n        *byte_array = *byte_array + 1;\n        char_value = decompile_and_improve_0010c95e(input_array,byte_array,result);\n        if (char_value == '\\0') {\n          return 0;\n        }\n        if (result == (long *)0x0) {\n          return 1;\n        }\n        long_value2 = FUN_00113ce0(*result,char_ptr_3,ulong_value2 & 0xff);\n        *result = long_value2;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *byte_array = temp_byte_ptr2 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      undefined_value = 0;\n      char_ptr_3 = (char *)0x0;\n      ulong_value2 = 0;\n      *byte_array = temp_byte_ptr2 + 1;\n      if (((&_sch_istable)[(ulong)temp_byte_ptr2[1] * 2] & 4) == 0) {\n        if (temp_byte_ptr2[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        char_ptr_ptr = char_array;\n        if (result == (long *)0x0) {\n          char_ptr_ptr = (char **)0x0;\n        }\n        char_value = FUN_0010d559(input_array,byte_array,char_ptr_ptr);\n        if (char_value == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        uint_value = FUN_00108e76(byte_array);\n        byte_pointer = *byte_array;\n        size_value = strlen((char *)byte_pointer);\n        if (size_value < uint_value) goto switchD_0010cdf9_caseD_60;\n        *byte_array = byte_pointer + uint_value;\n        if ((result != (long *)0x0) &&\n           (char_ptr_3 = (char *)FUN_0010afd5(*input_array,input_array[1],byte_pointer,uint_value,9),\n           char_ptr_3 == (char *)0x0)) {\n          return 0;\n        }\n      }\n      next_byte = **byte_array;\n      if (current_byte == 0x4d) {\n        if ((next_byte == 0x43) || (next_byte == 0x56)) {\n          *byte_array = *byte_array + 1;\n        }\n        if (**byte_array != 0x46) goto switchD_0010cdf9_caseD_60;\n        *byte_array = *byte_array + 1;\n        if (result == (long *)0x0) {\n          undefined_ptr = (undefined *)0x0;\n          ulong_pointer = (ulong *)0x0;\n        }\n        else {\n          undefined_ptr = &undefined_value;\n          ulong_pointer = &ulong_value2;\n        }\n        char_value = FUN_0010d882(input_array,byte_array,ulong_pointer,undefined_ptr);\n        if (char_value == '\\0') {\n          return 0;\n        }\n      }\n      if (**byte_array == 0x5f) {\n        *byte_array = *byte_array + 1;\n        char_value = decompile_and_improve_0010c95e(input_array,byte_array,result);\n        if (char_value == '\\0') {\n          return 0;\n        }\n        if (result == (long *)0x0) {\n          return 1;\n        }\n        if (current_byte != 0x4d) {\n          long_value2 = FUN_00113bfa(char_ptr_3,*result);\n          *result = long_value2;\n          return 1;\n        }\n        long_value2 = FUN_00113b98(*result,char_ptr_3,ulong_value2,undefined_value);\n        *result = long_value2;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      return_value = FUN_0010d559(input_array,byte_array,result);\n      return return_value;\n    case 0x52:\n      *byte_array = temp_byte_ptr2 + 1;\n      char_value = decompile_and_improve_0010c95e(input_array,byte_array,result);\n      if (char_value == '\\0') {\n        return 0;\n      }\n      if (result == (long *)0x0) {\n        return 1;\n      }\n      long_value2 = FUN_00113cb9(*result);\n      *result = long_value2;\n      return 1;\n    case 0x54:\n      *byte_array = temp_byte_ptr2 + 1;\n      char_value = FUN_00108ea1(byte_array,&ulong_value2);\n      if (char_value != '\\0') {\n        if ((uint)ulong_value2 < *(uint *)(input_array + 5)) {\n          char_ptr_3 = *(char **)((ulong_value2 & 0xffffffff) * 0x10 + input_array[4]);\n          char_value = decompile_and_improve_0010c95e(input_array,char_array,result);\n          if (char_value == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (current_byte == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *byte_array = temp_byte_ptr2 + 1;\n    char_value = decompile_and_improve_0010c95e(input_array,byte_array,result);\n    if (char_value == '\\0') {\n      return 0;\n    }\n    if (result == (long *)0x0) {\n      return 1;\n    }\n    long_value2 = FUN_00113d3a(*result);\n    *result = long_value2;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  bool_value3 = false;\n  is_signed = false;\n  char_value = '\\0';\n  is_unsigned = false;\n  do {\n    byte_pointer = *byte_array;\n    current_byte = *byte_pointer;\n    if (current_byte == 0x55) {\n      char_value = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)current_byte) {\n      if (current_byte == 0x56) {\n        bool_value3 = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)current_byte) goto switchD_0010cdf9_caseD_60;\n      if ((char)current_byte < '_') goto LAB_0010cdfb;\n      switch(current_byte) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (result == (long *)0x0) {\nLAB_0010d0aa:\n          *byte_array = byte_pointer + 1;\n          return 1;\n        }\n        long_value2 = FUN_0010914e(*input_array,&DAT_00120436);\n        *result = long_value2;\n        if (long_value2 == 0) {\n          long_value2 = FUN_00112904(6,4);\n          *result = long_value2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        char_pointer2 = \"unsigned char\";\n        if ((char_value == '\\0') && (char_pointer2 = \"char\", is_signed)) {\n          char_pointer2 = \"signed char\";\n        }\n        long_value2 = FUN_0010914e(*input_array,char_pointer2);\n        *result = long_value2;\n        if (long_value2 == 0) {\n          long_value2 = FUN_00113dfe(1,char_value);\n          *result = long_value2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        char_pointer2 = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        long_value2 = FUN_0010914e(*input_array,\"float\");\n        *result = long_value2;\n        if (long_value2 == 0) {\n          long_value2 = FUN_00113df2(4);\n          *result = long_value2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        char_pointer2 = \"unsigned int\";\n        char_pointer = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        char_pointer2 = \"long unsigned int\";\n        char_pointer = \"long int\";\nLAB_0010ced2:\n        if (char_value == '\\0') {\n          char_pointer2 = char_pointer;\n        }\n        long_value2 = FUN_0010914e(*input_array,char_pointer2);\n        *result = long_value2;\n        if (long_value2 == 0) {\n          long_value2 = FUN_00113dfe(4,char_value);\n          *result = long_value2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        char_pointer2 = \"long double\";\n        if (result == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        long_value2 = FUN_0010914e(*input_array,char_pointer2);\n        *result = long_value2;\n        if (long_value2 == 0) {\n          long_value2 = FUN_00113df2(8);\n          *result = long_value2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        char_pointer2 = \"short unsigned int\";\n        if (char_value == '\\0') {\n          char_pointer2 = \"short int\";\n        }\n        long_value2 = FUN_0010914e(*input_array,char_pointer2);\n        *result = long_value2;\n        if (long_value2 == 0) {\n          long_value2 = FUN_00113dfe(2,char_value);\n          *result = long_value2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        char_ptr_ptr = char_array;\n        if (result == (long *)0x0) {\n          char_ptr_ptr = (char **)0x0;\n        }\n        char_value = FUN_0010d21c(input_array,byte_array,char_ptr_ptr);\n        if (char_value == '\\0') {\n          return 0;\n        }\n        if (result == (long *)0x0) {\n          return 1;\n        }\n        size_value = strlen(char_ptr_3);\n        long_value2 = FUN_0010afd5(*input_array,input_array[1],char_ptr_3,size_value & 0xffffffff,9);\n        *result = long_value2;\n        free(char_ptr_3);\n        long_value2 = *result;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        long_value2 = FUN_0010914e(*input_array,&DAT_00120495);\n        *result = long_value2;\n        if (long_value2 == 0) {\n          long_value2 = FUN_00113e17();\n          *result = long_value2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        long_value2 = FUN_0010914e(*input_array,\"__wchar_t\");\n        *result = long_value2;\n        if (long_value2 == 0) {\n          long_value2 = FUN_00113dfe(2,1);\n          *result = long_value2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        char_pointer2 = \"long long unsigned int\";\n        if (char_value == '\\0') {\n          char_pointer2 = \"long long int\";\n        }\n        long_value2 = FUN_0010914e(*input_array,char_pointer2);\n        *result = long_value2;\n        if (long_value2 == 0) {\n          long_value2 = FUN_00113dfe(8,char_value);\n          *result = long_value2;\n        }\n      }\n      *byte_array = *byte_array + 1;\n      goto LAB_0010d1de;\n    }\n    if (current_byte == 0x43) {\n      is_unsigned = true;\n      goto LAB_0010cd84;\n    }\n    if (current_byte != 0x53) goto LAB_0010cdc5;\n    is_signed = true;\nLAB_0010cd84:\n    *byte_array = byte_pointer + 1;\n  } while( true );\nLAB_0010ca26:\n  next_byte_pointer = byte_pointer + 1;\n  *byte_array = next_byte_pointer;\n  current_byte = *next_byte_pointer;\n  if (current_byte == 0) goto switchD_0010cdf9_caseD_60;\n  if (current_byte == 0x5f) {\n    *byte_array = byte_pointer + 2;\n    char_value = decompile_and_improve_0010c95e(input_array,byte_array,result);\n    if (char_value == '\\0') {\n      return 0;\n    }\n    if (result == (long *)0x0) {\n      return 1;\n    }\n    long_value = FUN_0010914e(*input_array,\"int\");\n    if (long_value == 0) {\n      long_value = FUN_00113dfe(4,0);\n    }\n    long_value2 = FUN_00113c43(*result,long_value,0,long_value2,0);\n    *result = long_value2;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)current_byte * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  long_value2 = long_value2 * 10 + (long)((char)current_byte + -0x30);\n  byte_pointer = next_byte_pointer;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)current_byte < ':') {\n    if ((char)current_byte < '0') {\n      if (current_byte != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      FUN_0010911f(temp_byte_ptr2);\n      if (result == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((current_byte != 0x47) || (*byte_array = byte_pointer + 1, ((&_sch_istable)[(ulong)byte_pointer[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  temp_byte_ptr2 = *byte_array;\n  uint_value = FUN_00108e76(byte_array);\n  byte_pointer = *byte_array;\n  size_value = strlen((char *)byte_pointer);\n  ulong_value = (ulong)uint_value;\n  if (ulong_value <= size_value) {\n    *byte_array = byte_pointer + ulong_value;\n    if (result == (long *)0x0) {\n      return 1;\n    }\n    pointer = (void *)FUN_00109a0b(byte_pointer,ulong_value);\n    long_value2 = FUN_0010914e(*input_array,pointer);\n    *result = long_value2;\n    free(pointer);\n    if (*result == 0) {\n      long_value2 = FUN_0010afd5(*input_array,input_array[1],byte_pointer,(int)*byte_array - (int)byte_pointer,0);\n      *result = long_value2;\njoined_r0x0010d1d8:\n      if (long_value2 == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (is_unsigned) {\n      long_value2 = FUN_00113b71(*result);\n      *result = long_value2;\n    }\n    if (bool_value3) {\n      long_value2 = FUN_00113b4a(*result);\n      *result = long_value2;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  FUN_0010911f(temp_byte_ptr2);\n  return 0;\n}\n\n",
            "current_name": "decompile_and_improve_0010c95e",
            "entrypoint": "0x0010c95e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c95e": "decompile_and_improve_0010c95e",
                "__ptr": "pointer",
                "bVar1": "current_byte",
                "bVar2": "next_byte",
                "bVar4": "is_signed",
                "bVar5": "is_unsigned",
                "bVar6": "bool_value3",
                "cVar7": "char_value",
                "lVar10": "long_value",
                "lVar15": "long_value2",
                "local_40": "char_array",
                "local_40[0]": "char_ptr_3",
                "local_48": "ulong_value2",
                "local_49": "undefined_value",
                "param_1": "input_array",
                "param_2": "byte_array",
                "param_3": "result",
                "pbVar20": "temp_byte_ptr2",
                "pbVar3": "byte_pointer",
                "pbVar9": "next_byte_pointer",
                "pcVar12": "char_pointer",
                "pcVar18": "char_pointer2",
                "pcVar19": "char_pointer2",
                "ppcVar18": "char_ptr_ptr",
                "puVar16": "ulong_pointer",
                "puVar17": "undefined_ptr",
                "sVar13": "size_value",
                "uVar11": "return_value",
                "uVar14": "ulong_value",
                "uVar8": "uint_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d21c": {
            "additional_data": {
                "FUN_00108e76": {
                    "1": "extract_number"
                },
                "FUN_00108ea1": {
                    "1": "process_substring",
                    "2": "calculate_length"
                },
                "FUN_0010911f": {
                    "1": "clean_up",
                    "2": "free_memory"
                },
                "FUN_00109a0b": {
                    "1": "get_string",
                    "2": "concatenate_strings"
                },
                "FUN_0010c95e": {
                    "1": "check_byte",
                    "3": "check_condition"
                },
                "FUN_0010d21c": {
                    "1": "reverse_string"
                },
                "__haystack": {
                    "1": "haystack_var",
                    "24": "haystack"
                },
                "__ptr": {
                    "1": "ptr_to_allocated_memory1",
                    "2": "pointer",
                    "3": "pointer1",
                    "7": "ptr1"
                },
                "__ptr_00": {
                    "1": "void_ptr2",
                    "10": "ptr2",
                    "2": "ptr_00",
                    "4": "pointer2"
                },
                "abort": {
                    "1": "terminate_process",
                    "3": "abort_program"
                },
                "bVar1": {
                    "1": "current_char",
                    "12": "byte_var1",
                    "2": "byte_value1",
                    "3": "current_byte",
                    "9": "byte1"
                },
                "bVar14": {
                    "1": "temp_byte2",
                    "2": "byte_value4",
                    "3": "byte14",
                    "4": "byte_var4",
                    "6": "byte4",
                    "7": "byte_var14"
                },
                "bVar16": {
                    "1": "byte_var7",
                    "2": "byte_value5",
                    "3": "byte16",
                    "4": "byte_var5",
                    "6": "byte5",
                    "7": "byte_var16"
                },
                "bVar17": {
                    "1": "byte_var_6",
                    "2": "byte_value6",
                    "3": "byte17",
                    "4": "byte_var6",
                    "6": "byte6",
                    "7": "byte_var17"
                },
                "bVar18": {
                    "1": "temp_byte6",
                    "2": "byte_value7",
                    "3": "byte18",
                    "4": "byte_var7",
                    "6": "byte7",
                    "7": "byte_var18"
                },
                "bVar19": {
                    "1": "byte_var10",
                    "2": "byte_value8",
                    "3": "byte19",
                    "4": "byte_var8",
                    "6": "byte8",
                    "7": "byte_var19"
                },
                "bVar3": {
                    "1": "temp_byte_3",
                    "2": "temp_byte",
                    "3": "byte3",
                    "4": "byte_var2",
                    "6": "byte2",
                    "8": "byte_var3"
                },
                "bVar5": {
                    "1": "byte_var_3",
                    "2": "byte_value3",
                    "3": "byte5",
                    "4": "byte_var3",
                    "6": "byte3",
                    "8": "byte_var5"
                },
                "cVar4": {
                    "1": "char_value1",
                    "2": "char_var1",
                    "4": "temp_char",
                    "6": "char1",
                    "8": "char_var4"
                },
                "concat": {
                    "1": "join_strings",
                    "2": "concatenate_strings"
                },
                "cplus_demangle": {
                    "1": "demangle_name",
                    "3": "demangle_string"
                },
                "free": {
                    "1": "free_memory2",
                    "2": "free_memory"
                },
                "iVar7": {
                    "1": "int_value",
                    "2": "temp_int",
                    "3": "int1",
                    "4": "int_var",
                    "7": "int_var7"
                },
                "local_3c": {
                    "1": "temp_array",
                    "14": "local_array",
                    "2": "uint_array",
                    "3": "array"
                },
                "param_1": {
                    "1": "input_string",
                    "16": "param1",
                    "2": "input1",
                    "7": "param_1"
                },
                "param_2": {
                    "1": "byte_array_ptr",
                    "16": "param2",
                    "2": "input2",
                    "5": "param_2"
                },
                "param_3": {
                    "1": "output_data",
                    "16": "param3",
                    "3": "output",
                    "6": "param_3"
                },
                "pbVar10": {
                    "1": "pointer_byte_10",
                    "2": "current_byte",
                    "5": "byte_ptr10",
                    "7": "byte_ptr2"
                },
                "pbVar2": {
                    "1": "ptr_to_current_byte",
                    "3": "current_pointer",
                    "4": "byte_ptr1",
                    "6": "byte_ptr2"
                },
                "pcVar11": {
                    "1": "char_ptr2",
                    "2": "pc_var11",
                    "3": "pc_var1",
                    "7": "var11"
                },
                "pcVar13": {
                    "1": "char_ptr2",
                    "2": "pc_var13",
                    "3": "pc_var2",
                    "7": "var13"
                },
                "pcVar15": {
                    "1": "char_pointer3",
                    "2": "pc_var15",
                    "3": "pointer5",
                    "7": "var15"
                },
                "sVar9": {
                    "1": "size1",
                    "2": "str_length",
                    "3": "size_var",
                    "4": "size",
                    "7": "size_var9"
                },
                "strlen": {
                    "1": "length_of_substring",
                    "2": "get_string_length"
                },
                "strstr": {
                    "1": "find_sub_string",
                    "4": "find_substring"
                },
                "uVar12": {
                    "1": "uint_var3",
                    "2": "uint_var12",
                    "3": "u_var12"
                },
                "uVar20": {
                    "1": "uint3",
                    "2": "uint_value2",
                    "3": "counter",
                    "5": "uint_var20"
                },
                "uVar21": {
                    "1": "ulong21",
                    "2": "u_var21",
                    "4": "ulong1",
                    "5": "ulong_var21"
                },
                "uVar6": {
                    "1": "uint_var1",
                    "11": "result",
                    "2": "u_var6",
                    "9": "return_value"
                },
                "uVar8": {
                    "1": "var8",
                    "2": "uint_var1",
                    "4": "uint1",
                    "5": "uint_var8"
                }
            },
            "called": [
                "strlen",
                "FUN_00108ea1",
                "concat",
                "FUN_0010c95e",
                "FUN_00108e76",
                "FUN_0010911f",
                "FUN_00109a0b",
                "free",
                "abort",
                "cplus_demangle",
                "strstr"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010d559",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined4 reverse_string_0010d21c(undefined8 param1,byte **param2,undefined8 *param3)\n\n{\n  byte byte_var1;\n  byte *byte_ptr2;\n  byte byte_var3;\n  char char_var4;\n  byte byte_var5;\n  undefined4 result;\n  int int_var7;\n  uint uint_var8;\n  size_t size_var9;\n  byte *byte_ptr2;\n  void *ptr1;\n  void *ptr2;\n  char *haystack;\n  char *var11;\n  undefined8 u_var12;\n  char *var13;\n  byte byte_var14;\n  char *var15;\n  byte byte_var16;\n  byte byte_var17;\n  byte byte_var18;\n  byte byte_var19;\n  uint uint_var20;\n  ulong ulong_var21;\n  uint local_array [3];\n  \n  byte_ptr2 = *param2;\n  *param2 = byte_ptr2 + 1;\n  local_array[0] = FUN_00108e76(param2);\n  ulong_var21 = (ulong)local_array[0];\n  if (local_array[0] != 0) {\n    byte_ptr2 = *param2;\n    size_var9 = strlen((char *)byte_ptr2);\n    if (ulong_var21 <= size_var9) {\n      *param2 = byte_ptr2 + ulong_var21;\n      uint_var20 = 0;\n      result = FUN_00108ea1(param2,local_array);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (local_array[0] <= uint_var20) {\n          if (param3 == (undefined8 *)0x0) {\n            return result;\n          }\n          ptr1 = (void *)FUN_00109a0b(byte_ptr2,(int)*param2 - (int)byte_ptr2);\n          ptr2 = (void *)concatenate_strings(\"NoSuchStrinG__\",ptr1,0);\n          free_memory(ptr1);\n          haystack = (char *)cplus_demangle(ptr2,2);\n          free_memory(ptr2);\n          if ((haystack != (char *)0x0) &&\n             (var11 = strstr(haystack,\"::NoSuchStrinG\"), var13 = haystack,\n             var15 = haystack, var11 != (char *)0x0)) {\n            for (; var13 != var11; var13 = var13 + 1) {\n              if ((*var13 != ' ') ||\n                 (((var13[1] == '>' && (haystack < var13)) && (var13[-1] == '>')))) {\n                *var15 = *var13;\n                var15 = var15 + 1;\n              }\n            }\n            u_var12 = FUN_00109a0b(haystack,(int)var15 - (int)haystack);\n            *param3 = u_var12;\n            free_memory(haystack);\n            return result;\n          }\n          FUN_0010911f(byte_ptr2);\n          free_memory(haystack);\n          return 0;\n        }\n        byte_ptr2 = *param2;\n        if (*byte_ptr2 != 0x5a) {\n          byte_var5 = FUN_0010c95e(param1,param2,0);\n          if (byte_var5 == 0) {\n            return 0;\n          }\n          byte_var3 = 0;\n          byte_var14 = 0;\n          byte_var18 = 0;\n          byte_var17 = 0;\n          byte_var19 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byte_var16 = byte_var3;\n              byte_var1 = *byte_ptr2;\n              if ((byte_var14 | byte_var1 == 0) != 0) {\n                byte_var5 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              byte_var3 = byte_var5;\n              byte_var14 = byte_var5;\n            } while ('v' < (char)byte_var1);\n            if ((char)byte_var1 < 'b') {\n              if ((char)byte_var1 < 'U') {\n                if ((char)byte_var1 < 'C') goto LAB_0010d2e9;\n                ulong_var21 = 1L << (byte_var1 + 0xbd & 0x3f);\n                if ((ulong_var21 & 0x11409) == 0) {\n                  if ((ulong_var21 & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (byte_var1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(byte_var1 + 0xab)) goto LAB_0010d2e9;\n              byte_ptr2 = byte_ptr2 + 1;\n              byte_var3 = byte_var16;\n              byte_var14 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(byte_var1) {\n            case 0x62:\n              byte_var3 = byte_var16;\n              byte_var18 = byte_var5;\n              break;\n            case 99:\n              byte_var3 = byte_var16;\n              byte_var19 = byte_var5;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              byte_var3 = byte_var16;\n              byte_var17 = byte_var5;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort_program();\n            }\n          } while( true );\n        }\n        *param2 = byte_ptr2 + 1;\n        char_var4 = FUN_0010c95e(param1,param2,0);\n        if (char_var4 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  FUN_0010911f(byte_ptr2);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byte_var16 == 0) {\n    if (byte_var19 == 0) {\n      if (byte_var18 == 0) {\n        if (byte_var17 == 0) {\n          if (byte_var5 != 0) {\n            uint_var8 = FUN_00108e76(param2);\n            if (uint_var8 == 0) goto LAB_0010d280;\n            *param2 = *param2 + uint_var8;\n          }\n        }\n        else {\n          if (**param2 == 0x6d) {\n            *param2 = *param2 + 1;\n          }\n          while( true ) {\n            byte_ptr2 = *param2;\n            if (((&_sch_istable)[(ulong)*byte_ptr2 * 2] & 4) == 0) break;\n            *param2 = byte_ptr2 + 1;\n          }\n          if (*byte_ptr2 == 0x2e) {\n            do {\n              byte_ptr2 = byte_ptr2 + 1;\n              *param2 = byte_ptr2;\n            } while (((&_sch_istable)[(ulong)*byte_ptr2 * 2] & 4) != 0);\n          }\n          byte_ptr2 = *param2;\n          if (*byte_ptr2 == 0x65) {\n            do {\n              byte_ptr2 = byte_ptr2 + 1;\n              *param2 = byte_ptr2;\n            } while (((&_sch_istable)[(ulong)*byte_ptr2 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uint_var8 = FUN_00108e76(param2);\n        if (1 < uint_var8) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param2 == 0x6d) {\n        *param2 = *param2 + 1;\n      }\n      int_var7 = FUN_00108e76(param2);\n      if (int_var7 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param2 == 0x6d) {\n      *param2 = *param2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**param2 * 2] & 4) != 0) {\n      *param2 = *param2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  uint_var20 = uint_var20 + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "current_name": "reverse_string_0010d21c",
            "entrypoint": "0x0010d21c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010d21c": "reverse_string_0010d21c",
                "__haystack": "haystack",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "abort": "abort_program",
                "bVar1": "byte_var1",
                "bVar14": "byte_var14",
                "bVar16": "byte_var16",
                "bVar17": "byte_var17",
                "bVar18": "byte_var18",
                "bVar19": "byte_var19",
                "bVar3": "byte_var3",
                "bVar5": "byte_var5",
                "cVar4": "char_var4",
                "concat": "concatenate_strings",
                "cplus_demangle": "demangle_string",
                "free": "free_memory",
                "iVar7": "int_var7",
                "local_3c": "local_array",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "pbVar10": "byte_ptr2",
                "pbVar2": "byte_ptr2",
                "pcVar11": "var11",
                "pcVar13": "var13",
                "pcVar15": "var15",
                "sVar9": "size_var9",
                "strlen": "get_length",
                "strstr": "find_substring",
                "uVar12": "u_var12",
                "uVar20": "uint_var20",
                "uVar21": "ulong_var21",
                "uVar6": "result",
                "uVar8": "uint_var8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d559": {
            "additional_data": {
                "**param_2": {
                    "1": "input_string"
                },
                "*param_1": {
                    "1": "input_params"
                },
                "*param_3": {
                    "1": "output_length"
                },
                "FUN_0010d559": {
                    "1": "process_data",
                    "2": "decode_and_process_data"
                },
                "__endptr": {
                    "1": "char_ptr_2"
                },
                "__nptr": {
                    "1": "number_string_ptr",
                    "2": "byte_ptr_3"
                },
                "__ptr": {
                    "1": "input_void_ptr",
                    "2": "void_pointer",
                    "4": "temp_ptr",
                    "8": "temp_pointer"
                },
                "__s1": {
                    "1": "compared_string",
                    "2": "temp_string_2",
                    "3": "string1",
                    "6": "comparison_string"
                },
                "_sch_istable": {
                    "1": "character_table"
                },
                "bVar1": {
                    "1": "byte_val",
                    "2": "current_byte",
                    "4": "byte_var",
                    "5": "first_char",
                    "6": "byte_value",
                    "9": "first_byte"
                },
                "cVar3": {
                    "1": "temp_char",
                    "11": "result",
                    "2": "char1",
                    "4": "char_var",
                    "5": "result_char"
                },
                "iVar5": {
                    "1": "strcmp_result",
                    "15": "comparison_result",
                    "2": "int1",
                    "4": "int_value"
                },
                "lVar8": {
                    "1": "counter",
                    "2": "temp_value",
                    "3": "long_value",
                    "4": "long_var",
                    "5": "result"
                },
                "local_40": {
                    "1": "local_array_1",
                    "2": "string_array",
                    "3": "local_array",
                    "4": "temp_array",
                    "5": "local_string_array"
                },
                "local_40[2]": {
                    "1": "temporary_string_buffer"
                },
                "local_64": {
                    "1": "iteration_count",
                    "12": "counter",
                    "2": "count",
                    "4": "loop_counter"
                },
                "param_1": {
                    "1": "decoded_data",
                    "14": "input_array",
                    "2": "data",
                    "4": "param_array"
                },
                "param_2": {
                    "1": "string_pointer",
                    "2": "byte_array_ptr",
                    "3": "input",
                    "4": "byte_array",
                    "6": "input_string"
                },
                "param_3": {
                    "1": "output_length_ptr",
                    "2": "length_ptr",
                    "9": "output_length"
                },
                "pbVar11": {
                    "1": "temp_pointer_2",
                    "2": "byte_ptr2"
                },
                "pbVar2": {
                    "1": "current_char",
                    "2": "current_ptr",
                    "3": "string_ptr",
                    "5": "byte_ptr"
                },
                "pcVar10": {
                    "1": "temp_char",
                    "2": "char_pointer",
                    "3": "string_ptr",
                    "4": "char_ptr",
                    "9": "temp_string"
                },
                "plVar9": {
                    "1": "length_ptr",
                    "2": "pointer_array",
                    "4": "ptr_array"
                },
                "ppcVar6": {
                    "1": "temp_array_ptr",
                    "2": "local_array_ptr",
                    "4": "char_ptr_ptr",
                    "5": "temp_array"
                },
                "sVar7": {
                    "1": "string_length2",
                    "13": "string_length",
                    "2": "size",
                    "3": "str_length",
                    "4": "size_var"
                },
                "uVar12": {
                    "1": "uint_value2",
                    "2": "undefined8_value",
                    "3": "undefined8_var"
                },
                "uVar4": {
                    "1": "string_length_limit",
                    "2": "uint1",
                    "3": "uint_value",
                    "4": "uint_var",
                    "5": "string_length"
                }
            },
            "called": [
                "strlen",
                "FUN_0010afd5",
                "FUN_001129f4",
                "strtol",
                "FUN_00113b1e",
                "FUN_00108e76",
                "FUN_0010911f",
                "FUN_00109a0b",
                "free",
                "FUN_0010d21c",
                "strcmp",
                "FUN_0010914e"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 decode_string_0010d559(undefined8 *input_array,byte **input_string,long *output_length)\n\n{\n  byte first_byte;\n  byte *byte_ptr;\n  char result;\n  uint string_length;\n  int comparison_result;\n  char **temp_array;\n  size_t string_length;\n  long result;\n  long *long_ptr;\n  char *temp_string;\n  char *comparison_string;\n  void *temp_pointer;\n  byte *byte_ptr2;\n  undefined8 temp_value;\n  byte *byte_ptr_3;\n  int counter;\n  char *local_string_array [2];\n  \n  byte_ptr = *input_string;\n  first_byte = byte_ptr[1];\n  if ((char)first_byte < ':') {\n    if ((char)first_byte < '1') goto LAB_0010d5d8;\n    counter = (char)first_byte + -0x30;\n    if (byte_ptr[2] == 0x5f) {\n      *input_string = byte_ptr + 1;\n    }\n    byte_ptr2 = *input_string + 2;\n  }\n  else {\n    if (((first_byte != 0x5f) || (((&character_table)[(ulong)byte_ptr[2] * 2] & 4) == 0)) ||\n       (byte_ptr[2] == 0x30)) goto LAB_0010d5d8;\n    byte_ptr_3 = byte_ptr + 2;\n    result = strtol((char *)byte_ptr_3,(char **)0x0,10);\n    counter = (int)result;\n    while (((&character_table)[(ulong)*byte_ptr_3 * 2] & 4) != 0) {\n      byte_ptr_3 = byte_ptr_3 + 1;\n    }\n    byte_ptr2 = byte_ptr_3 + 1;\n    if (*byte_ptr_3 != 0x5f) goto LAB_0010d5d8;\n  }\n  *input_string = byte_ptr2;\n  temp_array = (char **)0x0;\n  if (output_length != (long *)0x0) {\n    temp_array = local_string_array;\n  }\n  result = 0;\n  while( true ) {\n    while( true ) {\n      counter = counter + -1;\n      if (counter == -1) {\n        if (output_length != (long *)0x0) {\n          *output_length = result;\n        }\n        return 1;\n      }\n      if (**input_string == 0x5f) {\n        *input_string = *input_string + 1;\n      }\n      if (**input_string != 0x74) break;\n      result = FUN_0010d21c(input_array,input_string,temp_array);\n      temp_string = local_string_array[0];\n      if (result == '\\0') {\n        return 0;\n      }\n      if (output_length != (long *)0x0) {\n        string_length = strlen(local_string_array[0]);\n        result = FUN_0010afd5(*input_array,input_array[1],temp_string,string_length & 0xffffffff,9);\n        free(temp_string);\n        if (result == 0) {\n          return 0;\n        }\n      }\n    }\n    string_length = FUN_00108e76(input_string);\n    string_length = strlen((char *)*input_string);\n    if (string_length < string_length) break;\n    if (output_length != (long *)0x0) {\n      if ((result != 0) && (long_ptr = (long *)FUN_00113b1e(result), long_ptr != (long *)0x0)) {\n        temp_string = (char *)FUN_00109a0b(*input_string,string_length);\n        for (; result = *long_ptr, result != 0; long_ptr = long_ptr + 1) {\n          result = *(long *)(result + 8);\n          if (result == 0) {\n            free(temp_string);\n            return 0;\n          }\n          comparison_string = (char *)FUN_001129f4(result);\n          if ((comparison_string != (char *)0x0) && (comparison_result = strcmp(comparison_string,temp_string), comparison_result == 0)) break;\n        }\n        free(temp_string);\n        if (result != 0) goto LAB_0010d7ad;\n      }\n      temp_value = 9;\n      if (counter == 0) {\n        temp_pointer = (void *)FUN_00109a0b(*input_string,string_length);\n        result = FUN_0010914e(*input_array,temp_pointer);\n        free(temp_pointer);\n        if (result != 0) goto LAB_0010d7ad;\n        temp_value = 0;\n      }\n      result = FUN_0010afd5(*input_array,input_array[1],*input_string,string_length,temp_value);\n      if (result == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *input_string = *input_string + string_length;\n  }\nLAB_0010d5d8:\n  FUN_0010911f(byte_ptr);\n  return 0;\n}\n\n",
            "current_name": "decode_string_0010d559",
            "entrypoint": "0x0010d559",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010d559": "decode_string_0010d559",
                "__nptr": "byte_ptr_3",
                "__ptr": "temp_pointer",
                "__s1": "comparison_string",
                "_sch_istable": "character_table",
                "bVar1": "first_byte",
                "cVar3": "result",
                "iVar5": "comparison_result",
                "lVar8": "result",
                "local_40": "local_string_array",
                "local_64": "counter",
                "param_1": "input_array",
                "param_2": "input_string",
                "param_3": "output_length",
                "pbVar11": "byte_ptr2",
                "pbVar2": "byte_ptr",
                "pcVar10": "temp_string",
                "plVar9": "long_ptr",
                "ppcVar6": "temp_array",
                "sVar7": "string_length",
                "uVar12": "temp_value",
                "uVar4": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d7d4": {
            "additional_data": {
                "FUN_00109be3": {
                    "1": "perform_operation",
                    "2": "check_data",
                    "4": "check_condition"
                },
                "FUN_0010c95e": {
                    "1": "check_validity",
                    "2": "process_data",
                    "3": "copy_data"
                },
                "FUN_0010d7d4": {
                    "1": "process_and_store_data",
                    "13": "process_data",
                    "2": "extract_and_store_data",
                    "8": "extract_data"
                },
                "cVar2": {
                    "1": "success_flag",
                    "16": "result",
                    "2": "success",
                    "3": "is_valid",
                    "6": "flag"
                },
                "lVar4": {
                    "1": "current_store_value",
                    "2": "data_ptr",
                    "3": "temp_value",
                    "8": "temp"
                },
                "local_40": {
                    "1": "new_data_array",
                    "2": "temp_output",
                    "3": "temp_buffer",
                    "6": "temp_array",
                    "8": "local_array"
                },
                "param_1": {
                    "1": "data",
                    "2": "input_1",
                    "3": "arg1",
                    "6": "input1"
                },
                "param_2": {
                    "1": "data",
                    "2": "input_array",
                    "4": "data_ptr",
                    "6": "input2"
                },
                "param_3": {
                    "1": "alloc_data",
                    "2": "param3",
                    "3": "output_ptr",
                    "4": "output_array"
                },
                "param_4": {
                    "1": "current_index",
                    "2": "count",
                    "5": "counter1",
                    "6": "count_ptr"
                },
                "param_5": {
                    "1": "size_array",
                    "2": "arg5",
                    "3": "capacity_ptr",
                    "5": "counter2"
                },
                "plVar5": {
                    "1": "local_data_ptr",
                    "2": "ptr",
                    "6": "temp_array"
                },
                "uVar1": {
                    "1": "arg2_val",
                    "2": "data_start",
                    "3": "data",
                    "4": "input_value",
                    "6": "value1"
                },
                "uVar3": {
                    "1": "check_result",
                    "10": "return_value",
                    "11": "result",
                    "2": "function_result",
                    "4": "status"
                },
                "uVar6": {
                    "1": "counter",
                    "3": "new_count",
                    "9": "count"
                },
                "xrealloc": {
                    "1": "expand_memory"
                }
            },
            "called": [
                "FUN_0010c95e",
                "xrealloc",
                "FUN_00109be3"
            ],
            "calling": [
                "FUN_0010d882"
            ],
            "code": "\nundefined4\nprocess_data_0010d7d4(undefined8 input1,undefined8 *input2,long *output1,uint *count_ptr,uint *counter2)\n\n{\n  undefined8 value1;\n  char result;\n  undefined4 result;\n  long temp;\n  long *temp_array;\n  uint count;\n  long local_array [2];\n  \n  value1 = *input2;\n  temp_array = local_array;\n  if (output1 == (long *)0x0) {\n    temp_array = (long *)0x0;\n  }\n  result = FUN_0010c95e(input1,input2,temp_array);\n  if ((result != '\\0') &&\n     (result = FUN_00109be3(input1,value1,(int)*input2 - (int)value1), (char)result != '\\0')) {\n    if (output1 == (long *)0x0) {\n      return result;\n    }\n    if (local_array[0] != 0) {\n      if (*counter2 <= *count_ptr + 1) {\n        count = *counter2 + 10;\n        temp = *output1;\n        *counter2 = count;\n        temp = xrealloc(temp,(ulong)count << 3);\n        *output1 = temp;\n      }\n      count = *count_ptr;\n      *(long *)(*output1 + (ulong)count * 8) = local_array[0];\n      *count_ptr = count + 1;\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_0010d7d4",
            "entrypoint": "0x0010d7d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010d7d4": "process_data_0010d7d4",
                "cVar2": "result",
                "lVar4": "temp",
                "local_40": "local_array",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output1",
                "param_4": "count_ptr",
                "param_5": "counter2",
                "plVar5": "temp_array",
                "uVar1": "value1",
                "uVar3": "result",
                "uVar6": "count",
                "xrealloc": "reallocation"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d882": {
            "additional_data": {
                "FUN_00108ea1": {
                    "1": "parse_integer"
                },
                "FUN_0010911f": {
                    "3": "free_memory"
                },
                "FUN_0010d7d4": {
                    "3": "process_data"
                },
                "FUN_0010d882": {
                    "1": "parse_function",
                    "2": "parse_and_process_data",
                    "3": "process_data",
                    "4": "extract_data"
                },
                "bVar7": {
                    "1": "is_iteration",
                    "2": "is_looping",
                    "3": "flag",
                    "9": "loop_condition"
                },
                "cVar3": {
                    "1": "temp_char",
                    "2": "current_char_value",
                    "20": "current_char"
                },
                "iVar1": {
                    "1": "loop_count",
                    "2": "loop_counter",
                    "3": "counter",
                    "5": "iteration_count",
                    "6": "count"
                },
                "lVar4": {
                    "1": "allocated_data",
                    "22": "allocated_memory",
                    "3": "memory_allocation"
                },
                "local_40": {
                    "1": "temp_buffer",
                    "12": "temp_array",
                    "3": "temp_data"
                },
                "local_40[0]": {
                    "1": "pointer"
                },
                "local_44": {
                    "1": "local_var_3",
                    "2": "loop_counter",
                    "3": "count",
                    "5": "loop_count"
                },
                "local_48": {
                    "1": "counter_2",
                    "2": "temp_value",
                    "4": "counter_3",
                    "5": "value"
                },
                "local_4c": {
                    "1": "temp_offset",
                    "2": "buffer_size",
                    "4": "counter_2",
                    "8": "constant"
                },
                "local_50": {
                    "1": "output_index",
                    "2": "data_index",
                    "5": "counter_1",
                    "8": "index"
                },
                "param_1": {
                    "1": "input_length",
                    "2": "data",
                    "3": "input_parameter",
                    "7": "input_data"
                },
                "param_2": {
                    "1": "input2",
                    "2": "input_ptr",
                    "3": "input_array",
                    "5": "string_array",
                    "6": "input_strings"
                },
                "param_3": {
                    "1": "output1",
                    "2": "output_ptr",
                    "3": "arg3",
                    "4": "output_pointer",
                    "7": "output_data"
                },
                "param_4": {
                    "1": "output_undef_ptr",
                    "3": "arg4",
                    "4": "output_flag",
                    "6": "flag_ptr",
                    "7": "flag"
                },
                "pcVar2": {
                    "1": "data",
                    "2": "input_str",
                    "8": "current_char",
                    "9": "current_string"
                },
                "pcVar5": {
                    "1": "current_position",
                    "2": "current_data",
                    "3": "current_ptr",
                    "4": "current_char",
                    "5": "current_pointer"
                },
                "uVar6": {
                    "1": "index_variable",
                    "2": "counter",
                    "8": "index"
                },
                "xmalloc": {
                    "3": "allocate_memory"
                }
            },
            "called": [
                "FUN_00108ea1",
                "FUN_0010d7d4",
                "xmalloc",
                "FUN_0010911f"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 parse_input_0010d882(long input_data,char **input_strings,long *output_array,undefined *flag)\n\n{\n  int count;\n  char *current_string;\n  char current_char;\n  long allocated_memory;\n  char *current_string;\n  ulong index;\n  bool loop_condition;\n  uint index;\n  undefined4 constant;\n  uint value;\n  int loop_count;\n  undefined8 temp_array [2];\n  \n  current_string = *input_strings;\n  constant = 10;\n  if (output_array != (long *)0x0) {\n    allocated_memory = xmalloc();\n    *output_array = allocated_memory;\n    *flag = 0;\n  }\n  index = 0;\n  while( true ) {\n    current_string = *input_strings;\n    current_char = *current_string;\n    if ((current_char == '_' || current_char == '\\0') || (current_char == 'e')) break;\n    if ((current_char == 'N') || (current_char == 'T')) {\n      *input_strings = current_string + 1;\n      if (current_char == 'T') {\n        loop_count = 1;\n      }\n      else {\n        current_char = FUN_00108ea1(input_strings,&loop_count);\n        if (current_char == '\\0') goto LAB_0010d958;\n      }\n      current_char = FUN_00108ea1(input_strings,&value);\n      if ((current_char == '\\0') || (*(uint *)(input_data + 0x28) <= value)) {\nLAB_0010d958:\n        FUN_0010911f(current_string);\n        return 0;\n      }\n      index = (ulong)value;\n      while (count = loop_count + -1, loop_condition = loop_count != 0, loop_count = count, loop_condition) {\n        pointer = *(undefined8 *)(*(long *)(input_data + 0x20) + index * 0x10);\n        current_char = FUN_0010d7d4(input_data,temp_array,output_array,&index,&constant);\n        if (current_char == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      current_char = FUN_0010d7d4(input_data,input_strings,output_array,&index,&constant);\n      if (current_char == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (output_array == (long *)0x0) {\n    if (current_char != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*output_array + (ulong)index * 8) = 0;\n    if (*current_string != 'e') goto LAB_0010d9fa;\n    *flag = 1;\n  }\n  current_string = current_string + 1;\n  *input_strings = current_string;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)current_string >> 8),1);\n}\n\n",
            "current_name": "parse_input_0010d882",
            "entrypoint": "0x0010d882",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010d882": "parse_input_0010d882",
                "bVar7": "loop_condition",
                "cVar3": "current_char",
                "iVar1": "count",
                "lVar4": "allocated_memory",
                "local_40": "temp_array",
                "local_40[0]": "pointer",
                "local_44": "loop_count",
                "local_48": "value",
                "local_4c": "constant",
                "local_50": "index",
                "param_1": "input_data",
                "param_2": "input_strings",
                "param_3": "output_array",
                "param_4": "flag",
                "pcVar2": "current_string",
                "pcVar5": "current_string",
                "uVar6": "index",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010da0b": {
            "additional_data": {
                "FUN_0010da0b": {
                    "1": "allocate_and_fill_memory",
                    "2": "allocate_and_initialize_array",
                    "8": "allocate_and_initialize_slots",
                    "9": "allocate_and_initialize_slot"
                },
                "auVar7": {
                    "1": "return_data",
                    "2": "return_val",
                    "22": "result",
                    "6": "return_value"
                },
                "bVar6": {
                    "1": "byte_var",
                    "2": "loop_flag",
                    "3": "loop_counter",
                    "4": "temp_byte",
                    "5": "is_zero"
                },
                "dcgettext": {
                    "1": "get_localized_string"
                },
                "lVar3": {
                    "1": "adjusted_size",
                    "19": "offset",
                    "2": "num_slots",
                    "4": "slot_offset"
                },
                "lVar4": {
                    "1": "iteration",
                    "12": "loop_counter",
                    "2": "index",
                    "4": "counter"
                },
                "param_1": {
                    "1": "double_pointer",
                    "2": "array_ptr",
                    "3": "slot_list",
                    "4": "slot_ptr",
                    "6": "slot_pointer"
                },
                "param_2": {
                    "1": "index",
                    "29": "slot_index"
                },
                "param_3": {
                    "1": "unknown_param_1",
                    "13": "param_3",
                    "4": "arg1",
                    "9": "param3"
                },
                "param_4": {
                    "1": "arg_4",
                    "13": "param_4",
                    "4": "arg2",
                    "9": "param4"
                },
                "plVar2": {
                    "1": "allocated_array",
                    "12": "new_slot",
                    "2": "allocated_slot",
                    "5": "allocated_memory"
                },
                "uVar1": {
                    "1": "translated_message",
                    "16": "error_message",
                    "7": "error_msg"
                },
                "uVar5": {
                    "1": "temp",
                    "14": "remaining_slots",
                    "2": "updated_slot_index",
                    "4": "temp_var",
                    "6": "temp_index"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_00119dd0",
                "xmalloc",
                "dcgettext"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_00112a33"
            ],
            "code": "\nundefined  [16] allocate_and_initialize_slot_0010da0b(long **slot_pointer,ulong slot_index,undefined8 param_3,undefined8 param_4)\n\n{\n  undefined8 error_message;\n  long *new_slot;\n  long offset;\n  long loop_counter;\n  ulong remaining_slots;\n  byte is_zero;\n  undefined result [16];\n  \n  is_zero = 0;\n  remaining_slots = slot_index;\n  if ((long)slot_index < 0x3e90) {\n    for (; 0xf < (long)remaining_slots; remaining_slots = remaining_slots - 0x10) {\n      if (*slot_pointer == (long *)0x0) {\n        new_slot = (long *)xmalloc(0x88);\n        *slot_pointer = new_slot;\n        for (offset = 0x22; offset != 0; offset = offset + -1) {\n          *(undefined4 *)new_slot = 0;\n          new_slot = (long *)((long)new_slot + (ulong)is_zero * -8 + 4);\n        }\n      }\n      slot_pointer = (long **)*slot_pointer;\n    }\n    offset = (slot_index >> 4) * -0x10;\n    if ((long)slot_index < 0) {\n      offset = 0;\n    }\n    if (*slot_pointer == (long *)0x0) {\n      new_slot = (long *)xmalloc(0x88);\n      *slot_pointer = new_slot;\n      for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *(undefined4 *)new_slot = 0;\n        new_slot = (long *)((long)new_slot + (ulong)is_zero * -8 + 4);\n      }\n    }\n    result._8_8_ = param_4;\n    result._0_8_ = *slot_pointer + slot_index + offset + 1;\n    return result;\n  }\n  error_message = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  FUN_00119dd0(error_message,slot_index);\n}\n\n",
            "current_name": "allocate_and_initialize_slot_0010da0b",
            "entrypoint": "0x0010da0b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_slot_0010da0b",
                "auVar7": "result",
                "bVar6": "is_zero",
                "dcgettext": "get_localized_string",
                "lVar3": "offset",
                "lVar4": "loop_counter",
                "param_1": "slot_pointer",
                "param_2": "slot_index",
                "plVar2": "new_slot",
                "uVar1": "error_message",
                "uVar5": "remaining_slots",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010dac0": {
            "additional_data": {
                "FUN_0010c218": {
                    "1": "function_b"
                },
                "FUN_0010da0b": {
                    "1": "function_f"
                },
                "FUN_0010dac0": {
                    "1": "parse_binary_type",
                    "2": "parse_type",
                    "24": "parse_coff_type"
                },
                "FUN_0010e07c": {
                    "1": "function_e"
                },
                "FUN_00113c43": {
                    "1": "function_j"
                },
                "FUN_00113ce0": {
                    "1": "function_m"
                },
                "FUN_00113d3a": {
                    "1": "function_g"
                },
                "FUN_00113d6e": {
                    "1": "function_l"
                },
                "FUN_00113da9": {
                    "1": "function_c"
                },
                "FUN_00113df2": {
                    "1": "function_h"
                },
                "FUN_00113dfe": {
                    "1": "function_d"
                },
                "FUN_00113e17": {
                    "1": "function_i"
                },
                "FUN_00113e23": {
                    "1": "function_a"
                },
                "FUN_00119ed0": {
                    "1": "function_k"
                },
                "__ptr": {
                    "1": "buffer",
                    "3": "ptr_1",
                    "7": "ptr1"
                },
                "__ptr_00": {
                    "1": "dynamic_array2",
                    "2": "buffer_2",
                    "3": "ptr_2",
                    "7": "ptr2"
                },
                "bVar8": {
                    "1": "temp_var6",
                    "2": "byte_value",
                    "3": "temp_byte"
                },
                "bfd_coff_get_syment": {
                    "1": "bfd_coff_get_syment_func"
                },
                "bfd_errmsg": {
                    "1": "bfd_errmsg_func"
                },
                "bfd_get_error": {
                    "1": "bfd_get_error_func"
                },
                "cVar2": {
                    "1": "symbol_success",
                    "2": "temp_char",
                    "3": "temp_var2"
                },
                "dcgettext": {
                    "1": "dcgettext_func"
                },
                "free": {
                    "1": "free_func"
                },
                "iVar9": {
                    "1": "temp_var9",
                    "2": "int_var9",
                    "3": "counter"
                },
                "lVar1": {
                    "1": "temp_long_1",
                    "2": "l_var1",
                    "3": "length",
                    "4": "result"
                },
                "lVar12": {
                    "1": "result_12",
                    "2": "temp_var12",
                    "3": "local_var12",
                    "4": "index"
                },
                "lVar5": {
                    "1": "type_value",
                    "10": "result",
                    "2": "temp_var5",
                    "3": "local_var5"
                },
                "local_47": {
                    "1": "byte_var",
                    "13": "local_byte"
                },
                "local_48": {
                    "1": "local_flag1",
                    "12": "local_char",
                    "2": "char_var"
                },
                "local_68": {
                    "1": "temp_undefined_arr",
                    "2": "local_array_1",
                    "3": "buffer",
                    "5": "local_array",
                    "8": "local_buffer"
                },
                "param_1": {
                    "1": "input_value",
                    "2": "input_1",
                    "3": "file",
                    "4": "coff_file"
                },
                "param_2": {
                    "1": "coff_param_2",
                    "2": "coff_header",
                    "4": "coff_data",
                    "8": "symbol_table"
                },
                "param_3": {
                    "1": "coff_param_3",
                    "2": "type_table",
                    "3": "symbol_table"
                },
                "param_4": {
                    "1": "param_d",
                    "2": "input_4",
                    "8": "param_4"
                },
                "param_5": {
                    "1": "arg5",
                    "2": "flags",
                    "20": "type_code"
                },
                "param_6": {
                    "1": "array_type",
                    "2": "symbols",
                    "4": "type_info"
                },
                "param_7": {
                    "1": "param7",
                    "2": "input_7",
                    "4": "param_7",
                    "6": "is_unsigned"
                },
                "param_8": {
                    "1": "translator",
                    "2": "param8",
                    "3": "error_message",
                    "6": "param_8"
                },
                "pcVar10": {
                    "1": "var10",
                    "2": "type_name",
                    "3": "temp_char_ptr",
                    "4": "type_string"
                },
                "plVar7": {
                    "1": "pointer_var7",
                    "2": "ptr_var",
                    "3": "pointer"
                },
                "uVar11": {
                    "1": "temp_var9",
                    "2": "ulong_var11",
                    "3": "ulong_var"
                },
                "uVar13": {
                    "1": "uint_var1",
                    "2": "temp_var13"
                },
                "uVar14": {
                    "1": "uint_var3",
                    "2": "u_var14"
                },
                "uVar15": {
                    "1": "temp3",
                    "2": "temp_var15",
                    "3": "u_var15"
                },
                "uVar3": {
                    "1": "bfd_error_code",
                    "3": "local_var3",
                    "7": "error_code"
                },
                "uVar4": {
                    "1": "var4",
                    "2": "local_var4",
                    "3": "temp_var4",
                    "6": "result"
                },
                "uVar6": {
                    "1": "result_6",
                    "2": "temp_var6",
                    "3": "local_var6"
                },
                "xmalloc": {
                    "1": "xmalloc_func"
                },
                "xrealloc": {
                    "1": "xrealloc_func"
                }
            },
            "called": [
                "FUN_00113e23",
                "FUN_0010c218",
                "FUN_00113da9",
                "xmalloc",
                "FUN_00113dfe",
                "dcgettext",
                "FUN_0010e07c",
                "xrealloc",
                "FUN_0010da0b",
                "free",
                "FUN_00113d3a",
                "FUN_00113df2",
                "FUN_0010dac0",
                "FUN_00113e17",
                "FUN_00113c43",
                "FUN_00119ed0",
                "bfd_errmsg",
                "bfd_coff_get_syment",
                "bfd_get_error",
                "FUN_00113d6e",
                "FUN_00113ce0"
            ],
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f",
                "FUN_0010dac0"
            ],
            "code": "\nlong parse_coff_type_0010dac0(long coff_file,long *symbol_table,long symbol_table,undefined8 param_4,uint type_code,\n                 long *type_info,char is_unsigned,undefined8 param_8)\n\n{\n  long local_var1;\n  char temp_var2;\n  undefined4 error_code;\n  undefined8 result;\n  long result;\n  undefined8 local_var6;\n  long *temp_long_ptr;\n  void *ptr1;\n  void *ptr2;\n  byte temp_byte;\n  int counter;\n  char *type_string;\n  ulong ulong_var;\n  long index;\n  uint temp_var13;\n  uint temp_var14;\n  undefined8 u_var15;\n  undefined local_buffer [32];\n  char local_char;\n  byte local_byte;\n  \n  result = *(long *)(coff_file + 0x110);\n  if ((~*(uint *)(result + 0x38) & type_code) != 0) {\n    temp_var13 = (int)type_code >> ((byte)*(undefined4 *)(result + 0x44) & 0x1f);\n    ulong_var = (ulong)(type_code & *(uint *)(result + 0x40));\n    temp_byte = (byte)*(undefined4 *)(result + 0x3c);\n    temp_var13 = (temp_var13 ^ type_code) & *(uint *)(result + 0x38) ^ temp_var13;\n    if (ulong_var == 1L << (temp_byte & 0x3f)) {\n      result = parse_coff_type_0010dac0(coff_file,symbol_table,symbol_table,param_4,temp_var13,type_info,is_unsigned,param_8);\n      result = FUN_00113d3a(result);\n      return result;\n    }\n    if (ulong_var != 2L << (temp_byte & 0x3f)) {\n      if (ulong_var != 3L << (temp_byte & 0x3f)) {\n        result = dcgettext_func(0,\"parse_coff_type_0010dac0: Bad type code 0x%x\",5,*(undefined4 *)(result + 0x3c),\n                          temp_var13);\n        FUN_00119ed0(result,type_code);\n        return 0;\n      }\n      temp_var14 = 0;\n      if (type_info != (long *)0x0) {\n        temp_var14 = (uint)*(ushort *)(type_info + 2);\n        temp_long_ptr = type_info + 2;\n        for (counter = 0; (*(short *)temp_long_ptr != 0 && (counter != 3)); counter = counter + 1) {\n          *(short *)temp_long_ptr = *(short *)((long)temp_long_ptr + 2);\n          temp_long_ptr = (long *)((long)temp_long_ptr + 2);\n        }\n        *(short *)temp_long_ptr = 0;\n      }\n      u_var15 = 0;\n      result = param_8;\n      local_var6 = parse_coff_type_0010dac0(coff_file,symbol_table,symbol_table,param_4,temp_var13,type_info,0);\n      result = *(long *)(symbol_table + 0x28);\n      if (result == 0) {\n        result = FUN_00113dfe(4,0,u_var15,result);\n        result = FUN_0010c218(param_8,\"int\",result);\n        *(long *)(symbol_table + 0x28) = result;\n      }\n      result = FUN_00113c43(local_var6,result,0,(long)(int)(temp_var14 - 1),0);\n      return result;\n    }\n    result = parse_coff_type_0010dac0(coff_file,symbol_table,symbol_table,param_4,temp_var13,type_info,is_unsigned,param_8);\n    result = FUN_00113ce0(result,0,0);\n    return result;\n  }\n  if ((type_info != (long *)0x0) && (0 < *type_info)) {\n    temp_long_ptr = (long *)FUN_0010da0b(symbol_table);\n    if (*temp_long_ptr != 0) {\n      return *temp_long_ptr;\n    }\n    result = FUN_00113e23(temp_long_ptr,0);\n    return result;\n  }\n  if (is_unsigned == '\\0') {\n    type_info = (long *)0x0;\n  }\n  if (0x10 < type_code) {\n    result = FUN_00113e17();\n    return result;\n  }\n  result = *(long *)(symbol_table + 8 + (long)(int)type_code * 8);\n  if (result != 0) {\n    return result;\n  }\n  switch(type_code) {\n  default:\n    result = FUN_00113e17();\n    type_string = \"void\";\n    break;\n  case 2:\n    result = FUN_00113dfe(1,0);\n    type_string = \"char\";\n    break;\n  case 3:\n    result = FUN_00113dfe(2,0);\n    type_string = \"short\";\n    break;\n  case 4:\n    result = FUN_00113dfe(4,0);\n    type_string = \"int\";\n    break;\n  case 5:\n    result = FUN_00113dfe(4,0);\n    type_string = \"long\";\n    break;\n  case 6:\n    result = FUN_00113df2(4);\n    type_string = \"float\";\n    break;\n  case 7:\n    result = FUN_00113df2(8);\n    type_string = \"double\";\n    break;\n  case 8:\n    if (type_info == (long *)0x0) {\n      result = FUN_00113da9(1,0,0);\n      goto LAB_0010e046;\n    }\n    result = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (type_info == (long *)0x0) {\n      result = FUN_00113da9(0,0,0);\n      goto LAB_0010e046;\n    }\n    result = 9;\nLAB_0010de7a:\n    result = FUN_0010e07c(coff_file,symbol_table,symbol_table,result,type_info,param_8);\nLAB_0010e046:\n    temp_long_ptr = (long *)FUN_0010da0b(symbol_table,param_4);\n    *temp_long_ptr = result;\n    return result;\n  case 10:\n    if (type_info == (long *)0x0) {\n      result = FUN_00113d6e(0,0);\n    }\n    else {\n      result = type_info[3];\n      ptr1 = (void *)xmalloc_func(0x50);\n      ptr2 = (void *)xmalloc_func(0x50);\n      index = 0;\n      do {\n        while( true ) {\n          if ((result <= symbol_table[3]) || (symbol_table[1] <= symbol_table[2])) goto LAB_0010e032;\n          counter = (int)index;\n          local_var1 = *(long *)(*symbol_table + symbol_table[2] * 8);\n          temp_var2 = bfd_coff_get_syment_func(coff_file,local_var1,local_buffer);\n          index = (long)counter;\n          if (temp_var2 == '\\0') {\n            error_code = bfd_get_error_func();\n            result = bfd_errmsg_func(error_code);\n            local_var6 = dcgettext_func(0,\"bfd_coff_get_syment_func failed: %s\",5);\n            FUN_00119ed0(local_var6,result);\n            free_func(ptr1);\n            free_func(ptr2);\n            result = 0;\n            goto LAB_0010e046;\n          }\n          symbol_table[2] = symbol_table[2] + 1;\n          symbol_table[3] = (ulong)local_byte + 1 + symbol_table[3];\n          if (local_char != '\\x10') break;\n          if ((int)type_code <= counter + 1) {\n            type_code = type_code + 10;\n            ptr1 = (void *)xrealloc_func(ptr1);\n            ptr2 = (void *)xrealloc_func(ptr2,(long)(int)type_code << 3);\n          }\n          index = *(long *)(local_var1 + 0x20);\n          *(undefined8 *)((long)ptr1 + (long)counter * 8) = *(undefined8 *)(local_var1 + 8);\n          *(long *)((long)ptr2 + (long)counter * 8) =\n               *(long *)(local_var1 + 0x10) + *(long *)(index + 0x30);\n          index = (long)(counter + 1);\n        }\n      } while (local_char != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)ptr1 + index * 8) = 0;\n      result = FUN_00113d6e(ptr1,ptr2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    result = FUN_00113e17();\n    goto LAB_0010e065;\n  case 0xc:\n    result = FUN_00113dfe(1,1);\n    type_string = \"unsigned char\";\n    break;\n  case 0xd:\n    result = FUN_00113dfe(2,1);\n    type_string = \"unsigned short\";\n    break;\n  case 0xe:\n    result = FUN_00113dfe(4,1);\n    type_string = \"unsigned int\";\n    break;\n  case 0xf:\n    result = FUN_00113dfe(4,1);\n    type_string = \"unsigned long\";\n    break;\n  case 0x10:\n    result = FUN_00113df2(0xc);\n    type_string = \"long double\";\n  }\n  result = FUN_0010c218(param_8,type_string,result);\nLAB_0010e065:\n  *(long *)(symbol_table + 8 + (long)(int)type_code * 8) = result;\n  return result;\n}\n\n",
            "current_name": "parse_coff_type_0010dac0",
            "entrypoint": "0x0010dac0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_0010dac0",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "bVar8": "temp_byte",
                "bfd_coff_get_syment": "bfd_coff_get_syment_func",
                "bfd_errmsg": "bfd_errmsg_func",
                "bfd_get_error": "bfd_get_error_func",
                "cVar2": "temp_var2",
                "dcgettext": "dcgettext_func",
                "free": "free_func",
                "iVar9": "counter",
                "lVar1": "local_var1",
                "lVar12": "index",
                "lVar5": "result",
                "local_47": "local_byte",
                "local_48": "local_char",
                "local_68": "local_buffer",
                "param_1": "coff_file",
                "param_2": "symbol_table",
                "param_3": "symbol_table",
                "param_5": "type_code",
                "param_6": "type_info",
                "param_7": "is_unsigned",
                "pcVar10": "type_string",
                "plVar7": "temp_long_ptr",
                "uVar11": "ulong_var",
                "uVar13": "temp_var13",
                "uVar14": "temp_var14",
                "uVar15": "u_var15",
                "uVar3": "error_code",
                "uVar4": "result",
                "uVar6": "local_var6",
                "xmalloc": "xmalloc_func",
                "xrealloc": "xrealloc_func"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e07c": {
            "additional_data": {
                "FUN_0010dac0": {
                    "1": "process_symbol_entry"
                },
                "FUN_0010e07c": {
                    "1": "process_data",
                    "2": "process_binary_data"
                },
                "FUN_00113da9": {
                    "1": "process_symbols"
                },
                "FUN_00119ed0": {
                    "1": "print_error_message"
                },
                "__ptr": {
                    "1": "ptr_array",
                    "2": "symbol_table",
                    "8": "allocated_memory"
                },
                "bfd_coff_get_auxent": {
                    "1": "get_auxiliary_entry"
                },
                "bfd_coff_get_syment": {
                    "1": "retrieve_symbol_entry"
                },
                "bfd_errmsg": {
                    "1": "get_error_message"
                },
                "bfd_get_error": {
                    "1": "get_error_code"
                },
                "cVar4": {
                    "1": "symbol_status",
                    "13": "result",
                    "2": "character_var",
                    "5": "char_var"
                },
                "dcgettext": {
                    "1": "lookup_translation"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "iVar13": {
                    "1": "var13",
                    "2": "integer_variable1",
                    "3": "symbol_offset",
                    "4": "offset"
                },
                "iVar14": {
                    "1": "variable2",
                    "2": "loop_counter",
                    "4": "array_size"
                },
                "lVar1": {
                    "1": "section_table_end",
                    "2": "symbol_table_size",
                    "3": "symbol_table_end"
                },
                "lVar12": {
                    "1": "result_count",
                    "2": "var4",
                    "3": "index",
                    "4": "symbol_count",
                    "6": "symbol_index"
                },
                "lVar2": {
                    "1": "symbol_info",
                    "2": "var2",
                    "3": "symbol_table_entry",
                    "4": "symbol_entry",
                    "6": "symbol_address"
                },
                "lVar3": {
                    "1": "total_count",
                    "2": "current_count",
                    "3": "symbol_index",
                    "4": "symbol_count"
                },
                "local_56": {
                    "1": "local_var5",
                    "2": "ushort_value"
                },
                "local_60": {
                    "1": "buffer3",
                    "2": "aux_data_buffer",
                    "3": "aux_data",
                    "4": "local_array2"
                },
                "local_67": {
                    "1": "has_auxiliary",
                    "2": "var_67",
                    "3": "local_var7"
                },
                "local_68": {
                    "1": "auxiliary_type",
                    "2": "var_68",
                    "3": "local_var6"
                },
                "local_6a": {
                    "1": "buffer2",
                    "2": "section_index",
                    "4": "symbol_type",
                    "5": "local_var5"
                },
                "local_88": {
                    "1": "local_buffer_1",
                    "11": "symbol_name",
                    "2": "buffer",
                    "4": "local_array1"
                },
                "local_a8": {
                    "1": "data1",
                    "2": "local_var_a8",
                    "9": "local_var1"
                },
                "param_1": {
                    "1": "parameter1",
                    "2": "param",
                    "6": "param1",
                    "7": "param_1"
                },
                "param_2": {
                    "1": "ptr_array",
                    "10": "symbol_table",
                    "2": "input_array",
                    "5": "param2"
                },
                "param_3": {
                    "1": "output_handle",
                    "2": "input_param3",
                    "6": "param3",
                    "9": "param_3"
                },
                "param_4": {
                    "1": "input_length",
                    "10": "param_4",
                    "2": "input_param4",
                    "7": "param4"
                },
                "param_5": {
                    "1": "arg5",
                    "2": "input_param5",
                    "3": "symbol_table_size",
                    "7": "param_5"
                },
                "param_6": {
                    "1": "parameter6",
                    "12": "param_6",
                    "2": "input_param6",
                    "7": "param6"
                },
                "pcVar9": {
                    "1": "str",
                    "12": "error_message",
                    "2": "error_message_format",
                    "3": "error_format"
                },
                "puVar10": {
                    "1": "void_pointer",
                    "2": "auxent_buffer",
                    "3": "auxiliary_data"
                },
                "puVar8": {
                    "1": "result_ptr",
                    "2": "ptr",
                    "4": "new_symbol"
                },
                "puVar8[0]": {
                    "1": "allocated_array[0]"
                },
                "puVar8[1]": {
                    "1": "allocated_array[1]"
                },
                "puVar8[2]": {
                    "1": "allocated_array[2]"
                },
                "puVar8[3]": {
                    "1": "allocated_array[3]"
                },
                "puVar8[4]": {
                    "1": "allocated_array[4]"
                },
                "puVar8[6]": {
                    "1": "allocated_array[6]"
                },
                "puVar8[7]": {
                    "1": "allocated_array[7]"
                },
                "uStack_9c": {
                    "1": "stack_variable9_c",
                    "2": "var_9c",
                    "6": "local_var4"
                },
                "uStack_a0": {
                    "1": "local_value_3",
                    "2": "var_a0",
                    "6": "local_var3"
                },
                "uStack_a4": {
                    "1": "local_2",
                    "2": "var_a4",
                    "6": "local_var2"
                },
                "uVar11": {
                    "1": "index_variable",
                    "2": "var11",
                    "3": "auxent_value",
                    "4": "value"
                },
                "uVar5": {
                    "1": "bfd_error_code",
                    "2": "uint_var",
                    "6": "error",
                    "9": "error_code"
                },
                "uVar6": {
                    "1": "uint_var1",
                    "2": "result1",
                    "3": "value"
                },
                "uVar7": {
                    "1": "uint_var3",
                    "2": "result2",
                    "3": "errmsg",
                    "4": "error_message"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                },
                "xrealloc": {
                    "1": "reallocate_memory"
                }
            },
            "called": [
                "FUN_00113da9",
                "FUN_00119ed0",
                "xmalloc",
                "bfd_errmsg",
                "dcgettext",
                "bfd_coff_get_syment",
                "bfd_get_error",
                "xrealloc",
                "free",
                "bfd_coff_get_auxent",
                "FUN_0010dac0"
            ],
            "calling": [
                "FUN_0010dac0"
            ],
            "code": "\nundefined8\nparse_coff_symbols_0010e07c(undefined8 param_1,long *symbol_table,undefined8 param_3,int param_4,long param5,\n            undefined8 param_6)\n\n{\n  long symbol_table_end;\n  long symbol_address;\n  long symbol_count;\n  char result;\n  undefined4 error_code;\n  void *allocated_memory;\n  undefined8 value;\n  undefined8 error_message;\n  undefined4 *new_symbol;\n  char *error_message;\n  undefined *aux_info;\n  uint value;\n  long symbol_index;\n  int offset;\n  int array_size;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined4 local_var3;\n  undefined4 local_var4;\n  undefined symbol_name [30];\n  undefined2 local_var5;\n  byte local_var6;\n  byte local_var7;\n  undefined local_array2 [10];\n  ushort local_var8;\n  \n  array_size = 10;\n  symbol_index = 0;\n  symbol_table_end = *(long *)(param5 + 0x18);\n  allocated_memory = (void *)xmalloc(0x50);\n  while ((symbol_table[3] < symbol_table_end && (symbol_table[2] < symbol_table[1]))) {\n    symbol_address = *(long *)(*symbol_table + symbol_table[2] * 8);\n    result = bfd_coff_get_syment(param_1,symbol_address,symbol_name);\n    if (result == '\\0') {\n      error_code = bfd_get_error();\n      value = bfd_errmsg(error_code);\n      error_message = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      error_message = dcgettext(0,error_message,5);\n      FUN_00119ed0(error_message,value);\n      free(allocated_memory);\n      return 0;\n    }\n    symbol_count = symbol_table[3];\n    aux_info = (undefined *)0x0;\n    symbol_table[2] = symbol_table[2] + 1;\n    symbol_table[3] = symbol_count + 1 + (ulong)local_var7;\n    if (local_var7 != 0) {\n      aux_info = local_array2;\n      result = bfd_coff_get_auxent(param_1,symbol_address,0,aux_info);\n      if (result == '\\0') {\n        error_code = bfd_get_error();\n        value = bfd_errmsg(error_code);\n        error_message = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (local_var6 == 0x12) {\n      value = (uint)local_var8;\n      offset = (int)*(undefined8 *)(symbol_address + 0x10) +\n               (int)*(undefined8 *)(*(long *)(symbol_address + 0x20) + 0x30);\n    }\n    else {\n      if (local_var6 < 0x13) {\n        if ((local_var6 == 8) || (local_var6 == 0xb)) {\n          value = 0;\n          offset = ((int)*(undefined8 *)(symbol_address + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(symbol_address + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (local_var6 == 0x66) break;\n      value = 0;\n      offset = 0;\n    }\nLAB_0010e214:\n    error_message = FUN_0010dac0(param_1,symbol_table,param_3,symbol_count,local_var5,aux_info,1);\n    value = *(undefined8 *)(symbol_address + 8);\n    new_symbol = (undefined4 *)xmalloc(0x20);\n    local_var1 = (undefined4)value;\n    local_var2 = (undefined4)((ulong)value >> 0x20);\n    local_var3 = (undefined4)error_message;\n    local_var4 = (undefined4)((ulong)error_message >> 0x20);\n    *(undefined8 *)(new_symbol + 5) = 0;\n    allocated_array[6] = offset;\n    allocated_array[7] = value;\n    allocated_array[4] = 0;\n    *new_symbol = local_var1;\n    allocated_array[1] = local_var2;\n    allocated_array[2] = local_var3;\n    allocated_array[3] = local_var4;\n    if (array_size <= (int)symbol_index + 1) {\n      array_size = array_size + 10;\n      allocated_memory = (void *)xrealloc(allocated_memory,(long)array_size << 3,new_symbol,0,param_6);\n    }\n    *(undefined4 **)((long)allocated_memory + symbol_index * 8) = new_symbol;\n    symbol_index = symbol_index + 1;\n  }\n  *(undefined8 *)((long)allocated_memory + (long)(int)symbol_index * 8) = 0;\n  value = FUN_00113da9(param_4 == 8,*(undefined2 *)(param5 + 10),allocated_memory);\n  return value;\n}\n\n",
            "current_name": "parse_coff_symbols_0010e07c",
            "entrypoint": "0x0010e07c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e07c": "parse_coff_symbols_0010e07c",
                "__ptr": "allocated_memory",
                "bfd_coff_get_auxent": "get_auxiliary_entry",
                "bfd_coff_get_syment": "retrieve_symbol_entry",
                "bfd_errmsg": "get_error_message",
                "bfd_get_error": "get_error_code",
                "cVar4": "result",
                "dcgettext": "lookup_translation",
                "free": "deallocate_memory",
                "iVar13": "offset",
                "iVar14": "array_size",
                "lVar1": "symbol_table_end",
                "lVar12": "symbol_index",
                "lVar2": "symbol_address",
                "lVar3": "symbol_count",
                "local_56": "local_var8",
                "local_60": "local_array2",
                "local_67": "local_var7",
                "local_68": "local_var6",
                "local_6a": "local_var5",
                "local_88": "symbol_name",
                "local_a8": "local_var1",
                "param_2": "symbol_table",
                "param_5": "param5",
                "pcVar9": "error_message",
                "puVar10": "aux_info",
                "puVar8": "new_symbol",
                "puVar8[1]": "allocated_array[1]",
                "puVar8[2]": "allocated_array[2]",
                "puVar8[3]": "allocated_array[3]",
                "puVar8[4]": "allocated_array[4]",
                "puVar8[6]": "allocated_array[6]",
                "puVar8[7]": "allocated_array[7]",
                "uStack_9c": "local_var4",
                "uStack_a0": "local_var3",
                "uStack_a4": "local_var2",
                "uVar11": "value",
                "uVar5": "error_code",
                "uVar6": "value",
                "uVar7": "error_message",
                "xmalloc": "allocate_memory",
                "xrealloc": "reallocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e2f0": {
            "additional_data": {
                "*(long *)(lVar1 + 0x18)": {
                    "1": "previous_next_entry"
                },
                "*(long *)(lVar3 + 0x20)": {
                    "1": "next_entry"
                },
                "*(ulong *)(lVar3 + local_44)": {
                    "1": "entry_value"
                },
                "*(undefined4 *)(lVar3 + 8 + local_44)": {
                    "1": "entry_local_array"
                },
                "FUN_0010e2f0": {
                    "1": "parse_and_store_string",
                    "14": "process_string",
                    "2": "process_hash_lookup",
                    "3": "process_data"
                },
                "FUN_00119ed0": {
                    "1": "print_error"
                },
                "bfd_errmsg": {
                    "1": "get_error_message"
                },
                "bfd_get_error": {
                    "1": "get_error_code"
                },
                "bfd_hash_lookup": {
                    "1": "lookup_hash"
                },
                "dcgettext": {
                    "1": "get_localized_message"
                },
                "lVar1": {
                    "1": "end_of_list",
                    "2": "hash_entry",
                    "3": "temp_var1",
                    "6": "temp1"
                },
                "lVar3": {
                    "1": "temp_var_2",
                    "2": "hash_lookup_result",
                    "3": "hash_result",
                    "5": "temp2"
                },
                "lVar7": {
                    "1": "temp_var6",
                    "2": "string_length",
                    "3": "temp3",
                    "4": "result"
                },
                "local_3c": {
                    "1": "temp_buffer",
                    "2": "result_2",
                    "3": "var2",
                    "4": "temp_array",
                    "8": "local_array"
                },
                "local_44": {
                    "1": "buffer",
                    "2": "temp3",
                    "3": "var1",
                    "5": "local_var1"
                },
                "param_1": {
                    "1": "input_data",
                    "16": "hash_table",
                    "2": "input_array",
                    "7": "param_array"
                },
                "param_1[1]": {
                    "1": "array_pointer"
                },
                "param_1[2]": {
                    "1": "array_length"
                },
                "param_1[3]": {
                    "1": "current_size"
                },
                "param_1[4]": {
                    "1": "head_entry"
                },
                "param_1[5]": {
                    "1": "head_entry"
                },
                "param_1[6]": {
                    "1": "tail_entry"
                },
                "param_1[7]": {
                    "1": "hash_table_entry"
                },
                "param_2": {
                    "1": "input_value_1",
                    "2": "input_value",
                    "6": "param",
                    "8": "flag"
                },
                "param_3": {
                    "1": "input_length",
                    "2": "param_int",
                    "4": "param_size",
                    "5": "size"
                },
                "param_4": {
                    "1": "buffer",
                    "2": "param_long",
                    "5": "data"
                },
                "param_5": {
                    "1": "key",
                    "12": "string",
                    "2": "str",
                    "4": "param_string",
                    "9": "input_string"
                },
                "sVar6": {
                    "1": "key_length",
                    "19": "string_length",
                    "2": "str_length",
                    "5": "length"
                },
                "strlen": {
                    "1": "get_length"
                },
                "uStack_3e": {
                    "1": "local_var4",
                    "2": "temp6",
                    "3": "u_stack_3e",
                    "7": "stack_var3"
                },
                "uStack_3f": {
                    "1": "undefined_var2",
                    "2": "u_stack3f",
                    "3": "u_stack_3f",
                    "6": "stack_var2"
                },
                "uStack_40": {
                    "1": "undefined_value_1",
                    "2": "u_stack_40",
                    "6": "stack_var1"
                },
                "uVar2": {
                    "1": "bfd_error_code",
                    "11": "error",
                    "13": "error_code"
                },
                "uVar4": {
                    "1": "temp_var4",
                    "12": "error_message",
                    "2": "errmsg",
                    "3": "err_msg",
                    "5": "error_msg"
                },
                "uVar5": {
                    "1": "error_format",
                    "2": "translated_error_msg",
                    "3": "error_msg",
                    "4": "localized_error_message"
                },
                "xrealloc": {
                    "1": "reallocation",
                    "2": "reallocate_memory"
                }
            },
            "called": [
                "strlen",
                "FUN_00119ed0",
                "bfd_errmsg",
                "dcgettext",
                "bfd_get_error",
                "bfd_hash_lookup",
                "xrealloc"
            ],
            "calling": [
                "FUN_0010ebb0",
                "FUN_0010ed2c",
                "FUN_0010eafe",
                "FUN_0010e9a0",
                "FUN_0010e918",
                "FUN_0010e8a9",
                "FUN_0010edb4",
                "FUN_0010e842",
                "FUN_0010e453",
                "FUN_0010e7c2",
                "FUN_0010e439",
                "FUN_0011378f",
                "FUN_0010e6a8",
                "FUN_0010e5db",
                "FUN_0010ec73"
            ],
            "code": "\nundefined8\nprocess_string_0010e2f0(long *hash_table,undefined flag,int size,undefined8 data,char *string)\n\n{\n  long temp1;\n  undefined4 error_code;\n  long temp2;\n  undefined8 error_message;\n  undefined8 localized_error_message;\n  size_t string_length;\n  long result;\n  undefined4 local_var1;\n  undefined stack_var1;\n  undefined stack_var2;\n  undefined2 stack_var3;\n  undefined4 local_array [3];\n  \n  if (string == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    temp2 = bfd_hash_lookup(hash_table + 7,string,1,1);\n    if (temp2 == 0) {\n      error_code = bfd_get_error();\n      error_message = bfd_errmsg(error_code);\n      localized_error_message = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      FUN_00119ed0(localized_error_message,error_message);\n      return 0;\n    }\n    result = *(long *)(temp2 + 0x20);\n    if (result == -1) {\n      result = tail_entry;\n      temp1 = head_entry;\n      *(long *)(temp2 + 0x20) = result;\n      if (temp1 == 0) {\n        head_entry = temp2;\n      }\n      else {\n        *(long *)(temp1 + 0x18) = temp2;\n      }\n      head_entry = temp2;\n      string_length = strlen(string);\n      tail_entry = result + 1 + string_length;\n    }\n  }\n  (**(code **)(*(long *)(*hash_table + 8) + 0x50))(result,&local_var1);\n  stack_var2 = 0;\n  stack_var1 = flag;\n  (**(code **)(*(long *)(*hash_table + 8) + 0x68))((long)size,&stack_var3);\n  (**(code **)(*(long *)(*hash_table + 8) + 0x50))(data,local_array);\n  if ((ulong)current_size < array_length + 0xcU) {\n    current_size = current_size * 2;\n    result = xrealloc(array_pointer);\n    array_pointer = result;\n  }\n  result = array_length;\n  temp2 = array_pointer;\n  *(ulong *)(temp2 + result) = CONCAT26(stack_var3,CONCAT15(stack_var2,CONCAT14(stack_var1,local_var1)));\n  *(undefined4 *)(temp2 + 8 + result) = local_array[0];\n  array_length = array_length + 0xc;\n  return CONCAT71((int7)((ulong)result >> 8),1);\n}\n\n",
            "current_name": "process_string_0010e2f0",
            "entrypoint": "0x0010e2f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e2f0": "process_string_0010e2f0",
                "bfd_errmsg": "get_error_message",
                "bfd_get_error": "get_error_code",
                "bfd_hash_lookup": "lookup_hash",
                "dcgettext": "get_localized_message",
                "lVar1": "temp1",
                "lVar3": "temp2",
                "lVar7": "result",
                "local_3c": "local_array",
                "local_44": "local_var1",
                "param_1": "hash_table",
                "param_1[1]": "array_pointer",
                "param_1[2]": "array_length",
                "param_1[3]": "current_size",
                "param_1[4]": "head_entry",
                "param_1[5]": "head_entry",
                "param_1[6]": "tail_entry",
                "param_2": "flag",
                "param_3": "size",
                "param_4": "data",
                "param_5": "string",
                "sVar6": "string_length",
                "strlen": "get_length",
                "uStack_3e": "stack_var3",
                "uStack_3f": "stack_var2",
                "uStack_40": "stack_var1",
                "uVar2": "error_code",
                "uVar4": "error_message",
                "uVar5": "localized_error_message",
                "xrealloc": "reallocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e439": {
            "additional_data": {
                "FUN_0010e2f0": {
                    "1": "execute_function",
                    "2": "perform_operation",
                    "3": "process_data",
                    "4": "call_subfunction",
                    "8": "call_sub_function"
                },
                "FUN_0010e439": {
                    "1": "set_param_in_struct",
                    "12": "set_param_value",
                    "2": "set_parameter",
                    "3": "set_param_and_call_function"
                },
                "Funksjon_0010e439": {
                    "1": "set_parameter"
                },
                "param_1": {
                    "1": "arg_ptr",
                    "2": "data",
                    "3": "object_pointer",
                    "4": "object_address",
                    "5": "base_address"
                },
                "param_2": {
                    "1": "data_value",
                    "12": "value",
                    "2": "new_param_value",
                    "4": "param_value",
                    "7": "new_value"
                },
                "param_2  [process_data]": {
                    "1": "flag"
                },
                "param_3": {
                    "1": "int_value",
                    "2": "sub_param_1",
                    "3": "param3",
                    "6": "flag"
                },
                "param_4": {
                    "1": "sub_func_param_2",
                    "2": "param_4",
                    "3": "unused_param",
                    "4": "param4"
                },
                "param_4  [process_data]": {
                    "1": "extra_data"
                },
                "param_5": {
                    "1": "buffer",
                    "2": "str",
                    "3": "str_param"
                },
                "param_5  [process_data]": {
                    "1": "string_data"
                }
            },
            "called": [
                "FUN_0010e2f0"
            ],
            "calling": [
                "FUN_0011378f",
                "thunk_FUN_0010e439"
            ],
            "code": "\nvoid set_param_value_0010e439(long base_address,undefined8 value)\n\n{\n  *(undefined8 *)(base_address + 0x210) = value;\n  FUN_0010e2f0(base_address,0x84,0,0,value);\n  return;\n}\n\n",
            "current_name": "set_param_value_0010e439",
            "entrypoint": "0x0010e439",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e439": "set_param_value_0010e439",
                "param_1": "base_address",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e453": {
            "additional_data": {
                "(char *)__s": {
                    "1": "formatted_info_as_string"
                },
                "*(undefined2 *)((long)__s + sVar3)": {
                    "1": "formatted_info_as_string[length]"
                },
                "FUN_00109cf4": {
                    "1": "helper_function3"
                },
                "FUN_0010e453": {
                    "1": "extract_and_process_data",
                    "2": "extract_data",
                    "3": "process_data"
                },
                "PTR_00109b52": {
                    "1": "helper_function1"
                },
                "PTR_0010e2f0": {
                    "1": "helper_function2"
                },
                "__ptr": {
                    "1": "freed_pointer"
                },
                "__s": {
                    "1": "formatted_info",
                    "15": "formatted_string",
                    "2": "new_string",
                    "3": "dynamic_string",
                    "4": "output_string"
                },
                "cVar2": {
                    "1": "result_char",
                    "10": "result",
                    "2": "character",
                    "3": "char_result",
                    "4": "status",
                    "5": "char_value"
                },
                "lVar1": {
                    "1": "array_element",
                    "2": "list_item",
                    "3": "length"
                },
                "lVar1 == 0": {
                    "1": "dependency_address_is_null"
                },
                "lVar5": {
                    "1": "counter",
                    "2": "formatted_string_length",
                    "3": "string_length",
                    "5": "length",
                    "9": "total_length"
                },
                "lVar5 + 1": {
                    "1": "updated_dependency_counter"
                },
                "lVar7": {
                    "1": "temp_offset",
                    "2": "current_index",
                    "3": "index",
                    "6": "array_index",
                    "9": "offset"
                },
                "param_1": {
                    "1": "input_length",
                    "2": "input1",
                    "3": "input_param",
                    "5": "input_value"
                },
                "param_1 + 0x68": {
                    "1": "dependency_counter"
                },
                "param_2": {
                    "1": "input2",
                    "11": "input_string",
                    "2": "str1",
                    "3": "string1",
                    "4": "string_param"
                },
                "param_2 == (char *)0x0": {
                    "1": "binary_name_is_null"
                },
                "param_3": {
                    "1": "suffix_strs",
                    "2": "string_list",
                    "9": "string_array"
                },
                "param_4": {
                    "1": "unused1"
                },
                "param_5": {
                    "1": "info_string"
                },
                "ppcVar6": {
                    "1": "str_array_ptr",
                    "11": "current_string",
                    "2": "string_array_ptr"
                },
                "sVar3": {
                    "1": "current_string_length",
                    "11": "string_length",
                    "2": "string_size",
                    "5": "str_length",
                    "8": "length"
                },
                "sprintf((char *)__s,\"%s:T%ld=e\",param_2,lVar5)": {
                    "1": "sprintf(formatted_info_as_string,\"%s:t%ld=e\",binary_name,updated_dependency_counter)"
                },
                "uVar4": {
                    "1": "output_result",
                    "19": "result",
                    "2": "success",
                    "7": "return_value"
                }
            },
            "called": [
                "strlen",
                "sprintf",
                "xmalloc",
                "FUN_0010e2f0",
                "FUN_00109cf4",
                "FUN_00109b52",
                "free"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 process_data_0010e453(long input_value,char *input_string,char **string_array)\n\n{\n  long length;\n  char result;\n  size_t string_length;\n  undefined2 *formatted_string;\n  undefined8 result;\n  long total_length;\n  char **current_string;\n  long offset;\n  \n  if (string_array == (char **)0x0) {\n    if (input_string != (char *)0x0) {\n      string_length = strlen(input_string);\n      formatted_string = (undefined2 *)xmalloc(string_length + 10);\n      sprintf((char *)formatted_string,\"xe%s:\",input_string);\nLAB_0010e578:\n      result = FUN_00109b52(input_value,formatted_string,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    result = 0;\n  }\n  else {\n    total_length = 10;\n    current_string = string_array;\n    if (input_string != (char *)0x0) {\n      string_length = strlen(input_string);\n      total_length = string_length + 10;\n    }\n    for (; *current_string != (char *)0x0; current_string = current_string + 1) {\n      string_length = strlen(*current_string);\n      total_length = total_length + 0x14 + string_length;\n    }\n    formatted_string = (undefined2 *)xmalloc(total_length);\n    if (input_string == (char *)0x0) {\n      *formatted_string = 0x65;\n      total_length = 0;\n    }\n    else {\n      total_length = *(long *)(input_value + 0x68);\n      *(long *)(input_value + 0x68) = total_length + 1;\n      sprintf((char *)formatted_string,\"%s:T%ld=e\",input_string,total_length);\n    }\n    offset = 0;\n    while( true ) {\n      length = *(long *)((long)string_array + offset);\n      string_length = strlen((char *)formatted_string);\n      if (length == 0) break;\n      offset = offset + 8;\n      sprintf((char *)(undefined2 *)((long)formatted_string + string_length),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formatted_string + string_length) = 0x3b;\n    if (input_string == (char *)0x0) goto LAB_0010e578;\n    result = FUN_0010e2f0(input_value,0x80,0,0,formatted_string);\n    if ((result == '\\0') || (result = FUN_00109cf4(input_value,total_length,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(formatted_string);\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_0010e453",
            "entrypoint": "0x0010e453",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e453": "process_data_0010e453",
                "__s": "formatted_string",
                "cVar2": "result",
                "lVar1": "length",
                "lVar5": "total_length",
                "lVar7": "offset",
                "param_1": "input_value",
                "param_2": "input_string",
                "param_3": "string_array",
                "ppcVar6": "current_string",
                "sVar3": "string_length",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e5db": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "duplicate_data",
                    "2": "allocate_memory"
                },
                "FUN_00109ed3": {
                    "2": "reverse_data"
                },
                "FUN_0010e2f0": {
                    "1": "perform_action",
                    "2": "check_condition"
                },
                "FUN_0010e5db": {
                    "1": "extract_data_and_process",
                    "17": "process_data"
                },
                "__ptr": {
                    "1": "buffer_ptr",
                    "2": "dynamic_memory",
                    "3": "ptr_1",
                    "4": "memory_block",
                    "5": "ptr1",
                    "8": "ptr"
                },
                "__s": {
                    "1": "string1",
                    "11": "string",
                    "3": "string_ptr",
                    "4": "str1",
                    "5": "str"
                },
                "__s_00": {
                    "1": "formatted_string_ptr",
                    "10": "modified_string",
                    "2": "str2",
                    "3": "str_2",
                    "4": "new_string"
                },
                "auVar4": {
                    "1": "output",
                    "11": "return_value",
                    "16": "result"
                },
                "cVar1": {
                    "1": "status",
                    "2": "success_flag",
                    "4": "char_result",
                    "8": "result"
                },
                "free": {
                    "1": "free_memory"
                },
                "iVar3": {
                    "1": "iteration_counter",
                    "10": "iteration_count",
                    "5": "iteration",
                    "9": "counter"
                },
                "in_R10": {
                    "1": "unknown_value",
                    "2": "additional_param",
                    "3": "value_r10"
                },
                "param_1": {
                    "1": "data_address",
                    "2": "input_address",
                    "3": "data_pointer",
                    "4": "input_param",
                    "5": "data_ptr",
                    "9": "data"
                },
                "param_2": {
                    "1": "function_argument2",
                    "2": "size",
                    "4": "length",
                    "5": "count",
                    "8": "num_iterations"
                },
                "param_3": {
                    "1": "unused_param"
                },
                "param_4": {
                    "1": "ptr_array"
                },
                "param_5": {
                    "1": "ulong_array"
                },
                "sVar2": {
                    "1": "source_length",
                    "16": "string_length",
                    "2": "len",
                    "5": "str_length",
                    "6": "str_len"
                },
                "sprintf": {
                    "2": "format_string"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "xmalloc": {
                    "1": "allocate_memory_dynamic"
                }
            },
            "called": [
                "FUN_00109b2f",
                "strlen",
                "sprintf",
                "xmalloc",
                "FUN_0010e2f0",
                "free",
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] process_data_0010e5db(long data,int num_iterations)\n\n{\n  char result;\n  void *ptr;\n  char *string;\n  size_t string_length;\n  char *modified_string;\n  ulong value;\n  int iteration_count;\n  undefined result [16];\n  \n  iteration_count = 0;\n  do {\n    if (num_iterations <= iteration_count) {\n      result = FUN_00109ed3(data,0x66,0,data + 0x188,data + 400,value);\n      return result;\n    }\n    if (*(char *)(*(long *)(data + 0x60) + 0x1c) == '\\0') {\n      ptr = (void *)FUN_00109b2f(data);\n      free(ptr);\n    }\n    else {\n      string = (char *)FUN_00109b2f(data);\n      string_length = strlen(string);\n      modified_string = (char *)xmalloc(string_length + 3);\n      sprintf(modified_string,\":t%s\",string);\n      free(string);\n      result = FUN_0010e2f0(data,0x80,0,0,modified_string);\n      if (result == '\\0') {\n        result._8_8_ = 0;\n        result._0_8_ = value;\n        return result << 0x40;\n      }\n      free(modified_string);\n    }\n    iteration_count = iteration_count + 1;\n  } while( true );\n}\n\n",
            "current_name": "process_data_0010e5db",
            "entrypoint": "0x0010e5db",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e5db": "process_data_0010e5db",
                "__ptr": "ptr",
                "__s": "string",
                "__s_00": "modified_string",
                "auVar4": "result",
                "cVar1": "result",
                "free": "deallocate_memory",
                "iVar3": "iteration_count",
                "in_R10": "value",
                "param_1": "data",
                "param_2": "num_iterations",
                "sVar2": "string_length",
                "sprintf": "format_string",
                "strlen": "calculate_string_length",
                "xmalloc": "allocate_memory_dynamic"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e6a8": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "get_string"
                },
                "FUN_0010e2f0": {
                    "1": "send_to_bfd_function",
                    "3": "perform_operation"
                },
                "FUN_0010e6a8": {
                    "1": "reverse_and_store_string",
                    "7": "process_data"
                },
                "FUN_00119ed0": {
                    "1": "display_error_message"
                },
                "PTR_FUN_00109b2f": {
                    "1": "get_string"
                },
                "PTR_FUN_00119ed0": {
                    "1": "print_error_message"
                },
                "__s": {
                    "1": "str2",
                    "2": "string1",
                    "3": "output_string",
                    "5": "result_string"
                },
                "__s_00": {
                    "1": "temp_buffer",
                    "2": "new_string",
                    "3": "result_string",
                    "5": "final_string",
                    "7": "formatted_string"
                },
                "auVar10": {
                    "1": "return_value_struct",
                    "2": "final_result",
                    "4": "result",
                    "9": "output"
                },
                "auVar10._0_8_": {
                    "1": "status"
                },
                "auVar10._8_8_": {
                    "1": "output"
                },
                "bfd_errmsg": {
                    "4": "get_error_message"
                },
                "bfd_get_error": {
                    "1": "get_bfd_error",
                    "2": "get_error_code"
                },
                "bfd_hash_lookup": {
                    "1": "perform_hash_lookup",
                    "3": "lookup_hash"
                },
                "dcgettext": {
                    "1": "get_error_string",
                    "2": "get_translation"
                },
                "free": {
                    "1": "free_memory",
                    "3": "deallocate_memory"
                },
                "lVar5": {
                    "1": "hash_result",
                    "11": "hash_lookup_result",
                    "15": "lookup_result"
                },
                "lVar8": {
                    "1": "entry_count",
                    "22": "counter",
                    "7": "count"
                },
                "param_1": {
                    "1": "param1",
                    "2": "binary",
                    "4": "input_param",
                    "7": "input"
                },
                "param_2": {
                    "1": "data",
                    "17": "input_string",
                    "2": "source_string",
                    "4": "string"
                },
                "param_3": {
                    "1": "input_parameter_3",
                    "10": "param_3",
                    "16": "param3",
                    "2": "arg1"
                },
                "param_4": {
                    "1": "param_b",
                    "14": "param4",
                    "2": "arg2",
                    "9": "param_4"
                },
                "sVar3": {
                    "1": "message_length",
                    "2": "string_length1",
                    "4": "input_length",
                    "9": "input_string_length"
                },
                "sVar4": {
                    "1": "length_string1",
                    "2": "extracted_string_length"
                },
                "sprintf": {
                    "1": "format_and_store",
                    "2": "format_string"
                },
                "strlen": {
                    "2": "get_string_length",
                    "3": "string_length"
                },
                "uVar1": {
                    "1": "hash_lookup_result",
                    "12": "result",
                    "3": "status",
                    "6": "return_value"
                },
                "uVar10": {
                    "1": "auxiliary_var"
                },
                "uVar2": {
                    "1": "hash_value",
                    "13": "error_code",
                    "2": "format_type",
                    "6": "value"
                },
                "uVar6": {
                    "1": "bfd_error_msg",
                    "10": "error_message",
                    "2": "errmsg",
                    "6": "error_msg"
                },
                "uVar7": {
                    "1": "error_message_format",
                    "2": "error_msg_format",
                    "3": "error_message",
                    "5": "error_format"
                },
                "uVar9": {
                    "1": "output_value",
                    "12": "return_value",
                    "2": "hash_value",
                    "7": "result"
                },
                "xmalloc": {
                    "5": "allocate_memory"
                }
            },
            "called": [
                "sprintf",
                "FUN_00109b2f",
                "strlen",
                "xmalloc",
                "FUN_00119ed0",
                "FUN_0010e2f0",
                "bfd_errmsg",
                "dcgettext",
                "bfd_get_error",
                "bfd_hash_lookup",
                "free"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined  [16] process_data_0010e6a8(long input,char *input_string,undefined8 param3,undefined8 param4)\n\n{\n  uint result;\n  undefined4 error_code;\n  char *result_string;\n  size_t input_strlen;\n  size_t extracted_strlen;\n  char *formatted_string;\n  long lookup_result;\n  undefined8 error_message;\n  undefined8 error_format;\n  long counter;\n  ulong return_value;\n  undefined return_value [16];\n  \n  counter = *(long *)(*(long *)(input + 0x60) + 0x10);\n  error_code = *(undefined4 *)(*(long *)(input + 0x60) + 0x18);\n  result_string = (char *)FUN_00109b2f();\n  input_strlen = strlen(input_string);\n  extracted_strlen = strlen(result_string);\n  formatted_string = (char *)xmalloc(input_strlen + 0x14 + extracted_strlen);\n  if (counter < 1) {\n    counter = *(long *)(input + 0x68);\n    *(long *)(input + 0x68) = counter + 1;\n    sprintf(formatted_string,\"%s:t%ld=%s\",input_string,counter,result_string);\n  }\n  else {\n    sprintf(formatted_string,\"%s:t%s\",input_string,result_string);\n  }\n  free(result_string);\n  result = FUN_0010e2f0(input,0x80,0,0,formatted_string);\n  return_value = (ulong)result;\n  if ((char)result != '\\0') {\n    free(formatted_string);\n    lookup_result = bfd_hash_lookup(input + 0x1b8,input_string,1,0);\n    if (lookup_result != 0) {\n      *(long *)(lookup_result + 0x20) = counter;\n      *(undefined4 *)(lookup_result + 0x28) = error_code;\n      goto LAB_0010e7b3;\n    }\n    error_code = bfd_get_error();\n    error_message = bfd_errmsg(error_code);\n    error_format = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    FUN_00119ed0(error_format,error_message);\n  }\n  return_value = 0;\nLAB_0010e7b3:\n  output = param4;\n  status = return_value;\n  return return_value;\n}\n\n",
            "current_name": "process_data_0010e6a8",
            "entrypoint": "0x0010e6a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e6a8": "process_data_0010e6a8",
                "__s": "result_string",
                "__s_00": "formatted_string",
                "auVar10": "return_value",
                "auVar10._0_8_": "status",
                "auVar10._8_8_": "output",
                "bfd_errmsg": "get_error_message",
                "bfd_get_error": "get_error_code",
                "bfd_hash_lookup": "lookup_hash",
                "dcgettext": "get_translation",
                "free": "deallocate_memory",
                "lVar5": "lookup_result",
                "lVar8": "counter",
                "param_1": "input",
                "param_2": "input_string",
                "param_3": "param3",
                "param_4": "param4",
                "sVar3": "input_string_length",
                "sVar4": "extracted_string_length",
                "sprintf": "format_string",
                "strlen": "string_length",
                "uVar1": "result",
                "uVar10": "auxiliary_var",
                "uVar2": "error_code",
                "uVar6": "error_message",
                "uVar7": "error_format",
                "uVar9": "return_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e7c2": {
            "additional_data": {
                "FUN_0010e7c2": {
                    "1": "create_modified_message",
                    "3": "combine_strings_and_call_function",
                    "4": "construct_message",
                    "5": "format_and_send_data"
                },
                "__s": {
                    "1": "result1",
                    "2": "string1",
                    "3": "timestamp",
                    "4": "result_string"
                },
                "__s_00": {
                    "1": "final_string",
                    "2": "new_string",
                    "3": "new_message",
                    "4": "combined_string"
                },
                "auVar3": {
                    "1": "function_result",
                    "12": "return_value",
                    "15": "result"
                },
                "param_1": {
                    "1": "config_data",
                    "2": "input_1",
                    "4": "data",
                    "8": "param1"
                },
                "param_2": {
                    "1": "message_text",
                    "10": "message",
                    "2": "input2",
                    "5": "string1",
                    "9": "input_string"
                },
                "param_3": {
                    "1": "input_3",
                    "13": "param3",
                    "2": "param_length",
                    "3": "input3",
                    "7": "param_3"
                },
                "param_4": {
                    "1": "input_3",
                    "3": "input4",
                    "8": "param4"
                },
                "sVar1": {
                    "1": "message_text_length",
                    "2": "input_string_len",
                    "3": "input_length",
                    "4": "length1",
                    "9": "message_length"
                },
                "sVar2": {
                    "1": "length_string1",
                    "2": "substring_length",
                    "3": "timestamp_length",
                    "4": "length2"
                }
            },
            "called": [
                "FUN_00109b2f",
                "strlen",
                "sprintf",
                "xmalloc",
                "FUN_0010e2f0",
                "free"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined  [16] format_and_send_data_0010e7c2(undefined8 param1,char *message,undefined8 param3,undefined8 param4)\n\n{\n  char *result_string;\n  size_t message_length;\n  size_t length2;\n  char *combined_string;\n  undefined result [16];\n  \n  result_string = (char *)FUN_00109b2f();\n  message_length = strlen(message);\n  length2 = strlen(result_string);\n  combined_string = (char *)xmalloc(message_length + 3 + length2);\n  sprintf(combined_string,\"%s:T%s\",message,result_string);\n  free(result_string);\n  result._0_4_ = FUN_0010e2f0(param1,0x80,0,0,combined_string);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(combined_string);\n  }\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "current_name": "format_and_send_data_0010e7c2",
            "entrypoint": "0x0010e7c2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e7c2": "format_and_send_data_0010e7c2",
                "__s": "result_string",
                "__s_00": "combined_string",
                "auVar3": "result",
                "param_1": "param1",
                "param_2": "message",
                "param_3": "param3",
                "param_4": "param4",
                "sVar1": "message_length",
                "sVar2": "length2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e842": {
            "additional_data": {
                "FUN_0010e2f0": {
                    "1": "process_data"
                },
                "FUN_0010e842": {
                    "1": "build_message",
                    "11": "format_and_send_data",
                    "2": "process_data",
                    "4": "format_and_send_message"
                },
                "__format": {
                    "1": "format_string"
                },
                "__s": {
                    "1": "request_string",
                    "10": "formatted_string",
                    "2": "formatted_data",
                    "3": "allocated_string",
                    "9": "formatted_message"
                },
                "auVar2": {
                    "1": "function_result",
                    "26": "result",
                    "3": "return_value"
                },
                "free": {
                    "1": "free_memory"
                },
                "param_1": {
                    "1": "input_parameter",
                    "2": "input1",
                    "3": "input_array",
                    "6": "data"
                },
                "param_2": {
                    "1": "endpoint",
                    "14": "input_string",
                    "2": "original_string",
                    "5": "string",
                    "7": "message"
                },
                "param_3": {
                    "1": "input2",
                    "2": "counter",
                    "3": "input_value",
                    "4": "integer_value",
                    "6": "value"
                },
                "param_4": {
                    "1": "pointer_to_data",
                    "2": "result_ptr",
                    "3": "param"
                },
                "sVar1": {
                    "1": "endpoint_length",
                    "14": "string_length",
                    "2": "length",
                    "3": "input_length",
                    "7": "message_length"
                },
                "sprintf": {
                    "2": "format_string"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "sprintf",
                "strlen",
                "xmalloc",
                "FUN_0010e2f0",
                "free"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined  [16] format_and_send_data_0010e842(undefined8 data,char *input_string,undefined8 value,undefined8 output)\n\n{\n  size_t string_length;\n  char *formatted_string;\n  undefined result [16];\n  \n  string_length = strlen(input_string);\n  formatted_string = (char *)xmalloc(string_length + 0x14);\n  sprintf(formatted_string,\"%s:c=i%ld\",input_string,value);\n  result._0_4_ = FUN_0010e2f0(data,0x80,0,0,formatted_string);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free_memory(formatted_string);\n  }\n  result._8_8_ = output;\n  return result;\n}\n\n",
            "current_name": "format_and_send_data_0010e842",
            "entrypoint": "0x0010e842",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e842": "format_and_send_data_0010e842",
                "__s": "formatted_string",
                "auVar2": "result",
                "free": "free_memory",
                "param_1": "data",
                "param_2": "input_string",
                "param_3": "value",
                "param_4": "output",
                "sVar1": "string_length",
                "sprintf": "format_string",
                "strlen": "get_string_length",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e8a9": {
            "additional_data": {
                "FUN_0010e2f0": {
                    "1": "process_data"
                },
                "FUN_0010e8a9": {
                    "1": "parse_and_send_data",
                    "2": "format_and_send_data",
                    "7": "process_data",
                    "9": "reverse_and_send_data"
                },
                "__format": {
                    "1": "output_format",
                    "3": "format_string"
                },
                "__ptr": {
                    "1": "ptr"
                },
                "__s": {
                    "1": "allocated_memory",
                    "2": "combined_string",
                    "3": "new_string",
                    "6": "formatted_string",
                    "8": "formatted_data"
                },
                "param_1": {
                    "1": "input_data",
                    "15": "input_string",
                    "2": "input1",
                    "3": "source_data"
                },
                "param_2": {
                    "1": "buffer",
                    "2": "input2"
                },
                "param_3": {
                    "1": "string",
                    "2": "input_data",
                    "3": "additional_data",
                    "4": "input_string",
                    "6": "data"
                },
                "param_4": {
                    "1": "param_4"
                },
                "param_5": {
                    "1": "concatenated_string",
                    "2": "formatted_string"
                },
                "sVar2": {
                    "1": "len",
                    "2": "input_data_length",
                    "6": "input_length",
                    "7": "string_length",
                    "8": "data_length"
                },
                "uVar1": {
                    "1": "function_return_value",
                    "23": "result",
                    "7": "return_value"
                }
            },
            "called": [
                "sprintf",
                "strlen",
                "xmalloc",
                "FUN_0010e2f0",
                "free"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 reverse_and_send_data_0010e8a9(undefined8 input_string,undefined8 param,char *data)\n\n{\n  undefined4 result;\n  size_t data_length;\n  char *formatted_data;\n  \n  data_length = strlen(data);\n  formatted_data = (char *)xmalloc(data_length + 0x14);\n  sprintf(formatted_data,\"%s:c=f%g\",input_string,data);\n  result = FUN_0010e2f0(param,0x80,0,0,formatted_data);\n  if ((char)result != '\\0') {\n    free(formatted_data);\n  }\n  return result;\n}\n\n",
            "current_name": "reverse_and_send_data_0010e8a9",
            "entrypoint": "0x0010e8a9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e8a9": "reverse_and_send_data_0010e8a9",
                "__s": "formatted_data",
                "param_1": "input_string",
                "param_2": "param",
                "param_3": "data",
                "sVar2": "data_length",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e918": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "generate_token",
                    "3": "get_server_response"
                },
                "FUN_0010e2f0": {
                    "1": "process_data",
                    "2": "send_data",
                    "3": "send_data_to_server"
                },
                "FUN_0010e918": {
                    "1": "process_data",
                    "2": "send_formatted_data",
                    "5": "send_request",
                    "6": "send_data_to_server",
                    "8": "send_data"
                },
                "__ptr": {
                    "1": "memory_block"
                },
                "__s": {
                    "1": "current_date",
                    "2": "secret",
                    "4": "server_response",
                    "5": "response"
                },
                "__s_00": {
                    "1": "request_and_response",
                    "3": "request_data",
                    "7": "formatted_data"
                },
                "free": {
                    "1": "dealloc_memory",
                    "2": "release_memory"
                },
                "param_1": {
                    "1": "input1",
                    "17": "socket",
                    "2": "socket_descriptor"
                },
                "param_2": {
                    "1": "input2",
                    "14": "message",
                    "2": "request",
                    "7": "data"
                },
                "param_3": {
                    "1": "attachment_size",
                    "11": "length",
                    "3": "message_length",
                    "4": "value",
                    "5": "timestamp"
                },
                "sVar2": {
                    "1": "url_length",
                    "11": "message_length",
                    "2": "request_length",
                    "6": "data_length"
                },
                "sVar3": {
                    "1": "url_length",
                    "2": "secret_length",
                    "3": "token_length",
                    "5": "random_string_length",
                    "6": "response_length"
                },
                "sprintf": {
                    "1": "format_request_string",
                    "2": "format_request"
                },
                "strlen": {
                    "3": "get_string_length"
                },
                "uVar1": {
                    "1": "response",
                    "15": "result",
                    "4": "return_value"
                },
                "xmalloc": {
                    "8": "allocate_memory"
                }
            },
            "called": [
                "strlen",
                "FUN_00109b2f",
                "sprintf",
                "xmalloc",
                "FUN_0010e2f0",
                "free"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 send_data_0010e918(undefined8 socket,char *message,undefined8 length)\n\n{\n  undefined4 result;\n  char *response;\n  size_t message_length;\n  size_t response_length;\n  char *formatted_message;\n  \n  response = (char *)FUN_00109b2f();\n  message_length = strlen(message);\n  response_length = strlen(response);\n  formatted_message = (char *)xmalloc(message_length + 0x14 + response_length);\n  sprintf(formatted_message,\"%s:c=e%s,%ld\",message,response,length);\n  free(response);\n  result = FUN_0010e2f0(socket,0x80,0,0,formatted_message);\n  if ((char)result != '\\0') {\n    free(formatted_message);\n  }\n  return result;\n}\n\n",
            "current_name": "send_data_0010e918",
            "entrypoint": "0x0010e918",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e918": "send_data_0010e918",
                "__s": "response",
                "__s_00": "formatted_message",
                "free": "release_memory",
                "param_1": "socket",
                "param_2": "message",
                "param_3": "length",
                "sVar2": "message_length",
                "sVar3": "response_length",
                "sprintf": "format_request",
                "strlen": "get_string_length",
                "uVar1": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e9a0": {
            "additional_data": {
                "&_sch_istable": {
                    "1": "character_table"
                },
                "FUN_00109b2f": {
                    "1": "get_data"
                },
                "FUN_0010e2f0": {
                    "2": "send_message"
                },
                "FUN_0010e9a0": {
                    "1": "combine_strings",
                    "2": "build_message",
                    "3": "process_data",
                    "5": "format_and_send_data"
                },
                "__ptr": {
                    "1": "ptr"
                },
                "__s": {
                    "1": "data",
                    "2": "result_string",
                    "3": "string1",
                    "6": "random_string"
                },
                "__s_00": {
                    "1": "temp_result",
                    "2": "str2",
                    "3": "new_string",
                    "4": "temp_string"
                },
                "__s_01": {
                    "1": "complete_message",
                    "2": "new_string",
                    "3": "formatted_data",
                    "6": "final_string"
                },
                "_sch_istable": {
                    "1": "character_table"
                },
                "abort": {
                    "1": "abort_function"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "lVar1": {
                    "1": "new_message_id",
                    "2": "index",
                    "25": "counter",
                    "3": "count"
                },
                "param_1": {
                    "1": "data_length",
                    "2": "input1",
                    "5": "input",
                    "8": "data"
                },
                "param_2": {
                    "1": "source",
                    "12": "prefix",
                    "2": "input2",
                    "4": "input_string"
                },
                "param_3": {
                    "1": "message_code",
                    "11": "option",
                    "2": "format_code",
                    "4": "data_type",
                    "9": "type"
                },
                "param_4": {
                    "1": "arg",
                    "12": "param",
                    "2": "data",
                    "4": "param_4"
                },
                "pcVar5": {
                    "1": "letter",
                    "2": "type_str",
                    "5": "type_string"
                },
                "sVar3": {
                    "1": "prefix_len",
                    "2": "input_string_length",
                    "3": "input_length",
                    "4": "message_length",
                    "8": "prefix_length"
                },
                "sVar4": {
                    "1": "buffer_length",
                    "2": "timestamp_length",
                    "3": "length2",
                    "4": "result_length",
                    "5": "random_string_length"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "uVar2": {
                    "1": "function_result",
                    "21": "result",
                    "6": "return_value"
                },
                "uVar6": {
                    "1": "constant",
                    "11": "flag",
                    "2": "data_type_value",
                    "3": "value"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "strlen",
                "sprintf",
                "FUN_00109b2f",
                "xmalloc",
                "FUN_0010e2f0",
                "free",
                "abort"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 format_and_send_data_0010e9a0(long data,char *prefix,undefined4 option,undefined8 param)\n\n{\n  long counter;\n  undefined4 result;\n  byte *random_string;\n  byte *temp_string;\n  size_t prefix_length;\n  size_t random_string_length;\n  char *final_string;\n  char *type_string;\n  undefined8 flag;\n  \n  random_string = (byte *)FUN_00109b2f();\n  switch(option) {\n  case 1:\n    type_string = \"G\";\n    flag = 0x20;\n    break;\n  case 2:\n    type_string = \"S\";\n    flag = 0x26;\n    break;\n  case 3:\n    type_string = \"V\";\n    flag = 0x26;\n    break;\n  case 4:\n    type_string = \"\";\n    flag = 0x80;\n    if (((character_table)[(ulong)*random_string * 2] & 4) == 0) {\n      counter = *(long *)(data + 0x68);\n      *(long *)(data + 0x68) = counter + 1;\n      prefix_length = strlen((char *)random_string);\n      temp_string = (byte *)xmalloc(prefix_length + 0x14);\n      sprintf((char *)temp_string,\"%ld=%s\",counter,random_string);\n      free(random_string);\n      random_string = temp_string;\n    }\n    break;\n  case 5:\n    type_string = \"r\";\n    flag = 0x40;\n    break;\n  default:\n                    \n    abort_function();\n  }\n  prefix_length = strlen(prefix);\n  random_string_length = strlen((char *)random_string);\n  final_string = (char *)xmalloc(prefix_length + 3 + random_string_length);\n  sprintf(final_string,\"%s:%s%s\",prefix,type_string,random_string);\n  free(random_string);\n  result = FUN_0010e2f0(data,flag,0,param,final_string);\n  if ((char)result != '\\0') {\n    free(final_string);\n  }\n  return result;\n}\n\n",
            "current_name": "format_and_send_data_0010e9a0",
            "entrypoint": "0x0010e9a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "&_sch_istable": "character_table",
                "FUN_0010e9a0": "format_and_send_data_0010e9a0",
                "__s": "random_string",
                "__s_00": "temp_string",
                "__s_01": "final_string",
                "_sch_istable": "character_table",
                "abort": "abort_function",
                "free": "deallocate_memory",
                "lVar1": "counter",
                "param_1": "data",
                "param_2": "prefix",
                "param_3": "option",
                "param_4": "param",
                "pcVar5": "type_string",
                "sVar3": "prefix_length",
                "sVar4": "random_string_length",
                "sprintf": "format_string",
                "strlen": "get_string_length",
                "uVar2": "result",
                "uVar6": "flag",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010eafe": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "get_appended_message",
                    "2": "get_prefix",
                    "5": "get_string"
                },
                "FUN_0010e2f0": {
                    "1": "process_data",
                    "2": "send_message",
                    "3": "execute_function",
                    "4": "send_data"
                },
                "FUN_0010eafe": {
                    "1": "create_log_entry",
                    "2": "perform_action",
                    "3": "send_data",
                    "6": "process_data"
                },
                "__ptr": {
                    "1": "allocated_memory",
                    "2": "pointer"
                },
                "__s": {
                    "1": "appended_message",
                    "2": "username",
                    "3": "output_string",
                    "4": "result_string",
                    "6": "random_string"
                },
                "__s_00": {
                    "1": "notification",
                    "2": "final_string",
                    "4": "formatted_string",
                    "5": "combined_string"
                },
                "free": {
                    "2": "release_memory",
                    "6": "deallocate_memory"
                },
                "param_1": {
                    "1": "data_address",
                    "2": "binary_address",
                    "3": "data_struct",
                    "5": "context",
                    "7": "data"
                },
                "param_2": {
                    "1": "command",
                    "14": "input_string",
                    "2": "string_param",
                    "7": "message"
                },
                "param_3": {
                    "1": "char_b",
                    "2": "char_param",
                    "25": "flag"
                },
                "sVar2": {
                    "1": "command_length",
                    "2": "input_string_len",
                    "5": "message_length",
                    "7": "input_length"
                },
                "sVar3": {
                    "1": "timestamp_len",
                    "2": "output_length",
                    "5": "random_string_length"
                },
                "sprintf": {
                    "1": "create_formatted_string",
                    "5": "format_string"
                },
                "strlen": {
                    "1": "get_length_of_string",
                    "5": "get_string_length"
                },
                "uVar1": {
                    "10": "return_value",
                    "7": "result"
                },
                "xmalloc": {
                    "11": "allocate_memory"
                }
            },
            "called": [
                "strlen",
                "sprintf",
                "FUN_00109b2f",
                "xmalloc",
                "FUN_0010e2f0",
                "free"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 process_data_0010eafe(long data,char *input_string,char flag)\n\n{\n  undefined4 return_value;\n  char *random_string;\n  size_t input_length;\n  size_t result_length;\n  char *formatted_message;\n  \n  if ((*(int *)(data + 0x1f8) == 0) && (*(long *)(data + 0x1e8) == -1)) {\n    random_string = (char *)FUN_00109b2f();\n    input_length = strlen(input_string);\n    result_length = strlen(random_string);\n    formatted_message = (char *)xmalloc(input_length + 3 + result_length);\n    sprintf(formatted_message,\"%s:%c%s\",input_string,(ulong)((-(uint)(flag == '\\0') & 0x20) + 0x46),random_string);\n    *(undefined8 *)(data + 0x1e8) = *(undefined8 *)(data + 0x10);\n    return_value = FUN_0010e2f0(data,0x24,0,0,formatted_message);\n    if ((char)return_value != '\\0') {\n      free(formatted_message);\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_0010eafe",
            "entrypoint": "0x0010eafe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010eafe": "process_data_0010eafe",
                "__s": "random_string",
                "__s_00": "formatted_message",
                "free": "deallocate_memory",
                "param_1": "data",
                "param_2": "input_string",
                "param_3": "flag",
                "sVar2": "input_length",
                "sVar3": "result_length",
                "sprintf": "format_string",
                "strlen": "get_string_length",
                "uVar1": "return_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ebb0": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "get_data",
                    "2": "get_dynamic_string"
                },
                "FUN_0010e2f0": {
                    "1": "execute_function",
                    "2": "perform_operation"
                },
                "FUN_0010ebb0": {
                    "1": "format_and_process_data",
                    "2": "format_and_send_message",
                    "3": "generate_error_message",
                    "5": "format_and_send_data"
                },
                "_Bool": {
                    "1": "boolean_value"
                },
                "__s": {
                    "1": "buffer",
                    "2": "string1",
                    "3": "result_string",
                    "5": "dynamic_string"
                },
                "__s_00": {
                    "1": "concatenated_string",
                    "2": "new_string",
                    "3": "formatted_message",
                    "4": "final_string"
                },
                "abort": {
                    "1": "terminate",
                    "2": "terminate_execution",
                    "3": "abort_execution"
                },
                "cVar1": {
                    "1": "special_char",
                    "16": "character",
                    "2": "char_value"
                },
                "free": {
                    "1": "free_memory",
                    "2": "release_memory",
                    "4": "deallocate_memory"
                },
                "param_1": {
                    "1": "data",
                    "2": "data_ptr",
                    "3": "param1",
                    "4": "input1"
                },
                "param_2": {
                    "1": "message_header",
                    "10": "input_string",
                    "2": "string_param",
                    "3": "string1",
                    "4": "message"
                },
                "param_3": {
                    "1": "message_length",
                    "2": "length_param",
                    "4": "input_length",
                    "6": "string_length"
                },
                "param_4": {
                    "1": "data",
                    "2": "param",
                    "3": "input2",
                    "4": "param4"
                },
                "sVar4": {
                    "1": "input_length",
                    "2": "input_string_len",
                    "3": "message_length",
                    "7": "input_string_length"
                },
                "sVar5": {
                    "1": "timestamp_length",
                    "2": "allocated_string_length",
                    "3": "dynamic_string_length"
                },
                "sprintf": {
                    "1": "formatted_error_message",
                    "4": "format_string"
                },
                "strlen": {
                    "1": "string_length",
                    "6": "get_string_length"
                },
                "uVar2": {
                    "1": "index",
                    "2": "modified_length",
                    "4": "remaining_length",
                    "5": "length_minus_one"
                },
                "uVar3": {
                    "1": "error_code",
                    "11": "return_value",
                    "16": "result"
                },
                "xmalloc": {
                    "7": "allocate_memory"
                }
            },
            "called": [
                "sprintf",
                "FUN_00109b2f",
                "strlen",
                "xmalloc",
                "FUN_0010e2f0",
                "abort",
                "free"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 format_and_send_data_0010ebb0(undefined8 input_param,char *input_string,int string_length,undefined8 param4)\n\n{\n  char character;\n  uint length_minus_one;\n  undefined4 result;\n  char *dynamic_string;\n  size_t input_string_length;\n  size_t dynamic_string_length;\n  char *final_string;\n  \n  dynamic_string = (char *)FUN_00109b2f();\n  length_minus_one = string_length - 1;\n  if (length_minus_one < 4) {\n    result = *(undefined4 *)(&DAT_00121340 + (ulong)length_minus_one * 4);\n    character = (&DAT_00121334)[length_minus_one];\n    input_string_length = strlen(input_string);\n    dynamic_string_length = strlen(dynamic_string);\n    final_string = (char *)xmalloc(input_string_length + 3 + dynamic_string_length);\n    sprintf(final_string,\"%s:%c%s\",input_string,(ulong)(uint)(int)character,dynamic_string);\n    free(dynamic_string);\n    result = FUN_0010e2f0(input_param,result,0,param4,final_string);\n    if ((char)result != '\\0') {\n      free(final_string);\n    }\n    return result;\n  }\n                    \n  abort_execution();\n}\n\n",
            "current_name": "format_and_send_data_0010ebb0",
            "entrypoint": "0x0010ebb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ebb0": "format_and_send_data_0010ebb0",
                "__s": "dynamic_string",
                "__s_00": "final_string",
                "abort": "abort_execution",
                "cVar1": "character",
                "free": "deallocate_memory",
                "param_1": "input_param",
                "param_2": "input_string",
                "param_3": "string_length",
                "param_4": "param4",
                "sVar4": "input_string_length",
                "sVar5": "dynamic_string_length",
                "sprintf": "format_string",
                "strlen": "get_string_length",
                "uVar2": "length_minus_one",
                "uVar3": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ec73": {
            "additional_data": {
                "FUN_0010e2f0": {
                    "1": "process_sub_function",
                    "2": "process_data",
                    "4": "check_condition"
                },
                "FUN_0010ec73": {
                    "1": "execute_task",
                    "11": "process_data",
                    "2": "perform_operation",
                    "3": "execute_function",
                    "5": "execute_operation"
                },
                "PTR_FUN_0010e2f0": {
                    "1": "ptr_helper_function"
                },
                "cVar2": {
                    "1": "condition_result",
                    "2": "flag",
                    "25": "result"
                },
                "iVar1": {
                    "1": "iteration_count",
                    "13": "counter",
                    "15": "count"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "input_array",
                    "4": "param_array",
                    "8": "data"
                },
                "param_2": {
                    "1": "input_val",
                    "18": "value",
                    "2": "param",
                    "3": "param_value"
                },
                "param_3": {
                    "1": "param3_value",
                    "2": "param_a",
                    "3": "param1",
                    "6": "index",
                    "8": "param3"
                },
                "param_4": {
                    "1": "param4_value",
                    "2": "param_b",
                    "3": "param_4",
                    "5": "param_a",
                    "8": "param4"
                },
                "param_5": {
                    "1": "val3",
                    "2": "param_c",
                    "3": "param3",
                    "4": "param_b",
                    "8": "param5"
                },
                "param_6": {
                    "1": "param_b",
                    "2": "param_d",
                    "3": "param4",
                    "4": "param_c",
                    "9": "param6"
                }
            },
            "called": [
                "FUN_0010e2f0"
            ],
            "calling": [
                "FUN_00113a4d"
            ],
            "code": "\nundefined process_data_0010ec73(long *array,long value,undefined8 param3,undefined8 param4,\n                      undefined8 param5,undefined8 param6)\n\n{\n  int count;\n  char result;\n  \n  if (array[0x3c] != -1) {\n    (**(code **)(*(long *)(*array + 8) + 0x50))(value,array[1] + 8 + array[0x3c]);\n    array[0x3c] = -1;\n  }\n  if (array[0x3d] != -1) {\n    (**(code **)(*(long *)(*array + 8) + 0x50))(value,array[1] + 8 + array[0x3d]);\n    array[0x3d] = -1;\n  }\n  count = *(int *)(array + 0x3f);\n  *(int *)(array + 0x3f) = count + 1;\n  if (count == 0) {\n    array[0x40] = value;\n  }\n  else {\n    if ((array[0x41] != -1) &&\n       (result = FUN_0010e2f0(array,0xc0,0,array[0x41],0,param6,param4), result == '\\0')) {\n      return 0;\n    }\n    array[0x41] = value - array[0x40];\n  }\n  return 1;\n}\n\n",
            "current_name": "process_data_0010ec73",
            "entrypoint": "0x0010ec73",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ec73": "process_data_0010ec73",
                "cVar2": "result",
                "iVar1": "count",
                "param_1": "array",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ed2c": {
            "additional_data": {
                "*(int *)(param_1 + 0x1f8)": {
                    "1": "counter_value"
                },
                "*(long *)(param_1 + 0x208)": {
                    "1": "state"
                },
                "*(ulong *)(param_1 + 0x1f0)": {
                    "1": "max_value"
                },
                "*(ulong *)(param_1 + 0x208)": {
                    "1": "arr[1]"
                },
                "*(undefined8 *)(param_1 + 0x208)": {
                    "1": "state_value"
                },
                "0x1f0": {
                    "1": "max_value_offset"
                },
                "0x1f8": {
                    "1": "counter_offset"
                },
                "0x1f8 - 1": {
                    "1": "counter_decrement"
                },
                "0x200": {
                    "1": "offset_offset"
                },
                "0x208": {
                    "1": "flag_offset"
                },
                "0xc0": {
                    "1": "constant2"
                },
                "0xe0": {
                    "1": "constant1"
                },
                "0xffffffffffffffff": {
                    "1": "flag_reset_value"
                },
                "FUN_0010e2f0": {
                    "1": "subfunction",
                    "2": "perform_operation"
                },
                "FUN_0010ed2c": {
                    "1": "update_max_and_continue",
                    "2": "update_max",
                    "3": "update_maximum",
                    "4": "update_param",
                    "8": "update_max_value"
                },
                "LAB_0010ed78": {
                    "1": "check_counter"
                },
                "arr[0x1f8]": {
                    "1": "counter"
                },
                "auVar4": {
                    "1": "modified_result",
                    "10": "result",
                    "2": "result_value",
                    "6": "output",
                    "8": "return_value"
                },
                "auVar4._0_8_": {
                    "1": "updated_flag"
                },
                "auVar4._8_8_": {
                    "1": "updated_additional_data"
                },
                "cVar1": {
                    "1": "success_flag",
                    "2": "is_successful",
                    "4": "success",
                    "5": "result",
                    "8": "flag"
                },
                "extraout_RDX": {
                    "1": "extra_data",
                    "2": "extra_output",
                    "3": "extra_result"
                },
                "iVar2": {
                    "1": "iteration",
                    "18": "counter",
                    "7": "count"
                },
                "in_R10": {
                    "1": "auxiliary_data",
                    "2": "additional_data",
                    "3": "extra_param",
                    "4": "additional_param"
                },
                "param_1": {
                    "1": "param1",
                    "17": "data",
                    "2": "base_address",
                    "3": "data_structure"
                },
                "param_1 + 0x1f0": {
                    "1": "max_value_ptr"
                },
                "param_1 + 0x1f8": {
                    "1": "counter_ptr"
                },
                "param_1 + 0x200": {
                    "1": "offset_address"
                },
                "param_1 + 0x208": {
                    "1": "state_ptr"
                },
                "param_2": {
                    "1": "new_max",
                    "19": "new_value",
                    "2": "new_max_value",
                    "5": "value"
                },
                "param_2 - *(long *)(param_1 + 0x200)": {
                    "1": "difference"
                },
                "param_3": {
                    "1": "previous_value",
                    "2": "data",
                    "3": "param3",
                    "4": "extra_data"
                },
                "param_3 >> 8": {
                    "1": "shifted_input"
                },
                "param_4": {
                    "1": "extra_param",
                    "2": "param4"
                },
                "param_5": {
                    "1": "param5"
                },
                "uVar3": {
                    "1": "mask",
                    "10": "result",
                    "5": "flag",
                    "7": "updated_value"
                }
            },
            "called": [
                "FUN_0010e2f0"
            ],
            "calling": [
                "FUN_00113a4d"
            ],
            "code": "\nundefined  [16] update_max_value_0010ed2c(long data,ulong new_value,undefined8 extra_data)\n\n{\n  char flag;\n  int counter;\n  undefined8 extra_result;\n  ulong result;\n  undefined8 additional_param;\n  undefined result [16];\n  \n  if (*(ulong *)(data + 0x1f0) < new_value) {\n    *(ulong *)(data + 0x1f0) = new_value;\n  }\n  if (*(long *)(data + 0x208) == -1) {\ncheck_counter:\n    if (*(int *)(data + 0x1f8) != 0) {\n      counter = *(int *)(data + 0x1f8) + -1;\n      result = CONCAT71((int7)((ulong)extra_data >> 8),1);\n      *(int *)(data + 0x1f8) = counter;\n      if (counter != 0) {\n        result = FUN_0010e2f0(data,0xe0,0,new_value - *(long *)(data + 0x200),0,additional_param);\n        return result;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    flag = FUN_0010e2f0(data,0xc0,0,*(long *)(data + 0x208),0);\n    if (flag != '\\0') {\n      *(undefined8 *)(data + 0x208) = 0xffffffffffffffff;\n      extra_data = extra_result;\n      goto check_counter;\n    }\n  }\n  result = 0;\nLAB_0010edae:\n  updated_flag = result & 0xffffffff;\n  updated_additional_data = additional_param;\n  return result;\n}\n\n",
            "current_name": "update_max_value_0010ed2c",
            "entrypoint": "0x0010ed2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ed2c": "update_max_value_0010ed2c",
                "LAB_0010ed78": "check_counter",
                "auVar4": "result",
                "auVar4._0_8_": "updated_flag",
                "auVar4._8_8_": "updated_additional_data",
                "cVar1": "flag",
                "extraout_RDX": "extra_result",
                "iVar2": "counter",
                "in_R10": "additional_param",
                "param_1": "data",
                "param_2": "new_value",
                "param_3": "extra_data",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010edb4": {
            "additional_data": {
                "FUN_0010e2f0": {
                    "1": "make_update"
                },
                "FUN_0010edb4": {
                    "1": "update_file_pointer",
                    "16": "process_file",
                    "2": "update_file_information",
                    "4": "update_file_info"
                },
                "cVar1": {
                    "1": "is_filename_same",
                    "2": "comparison_result",
                    "6": "success_flag",
                    "8": "success"
                },
                "filename_cmp": {
                    "1": "compare_file_name",
                    "2": "compare_filenames"
                },
                "iVar2": {
                    "1": "compare_result",
                    "2": "cmp_result",
                    "8": "comparison_result",
                    "9": "filename_comparison_result"
                },
                "in_R10": {
                    "1": "unused_param",
                    "2": "unused_parameter",
                    "3": "extra_param",
                    "7": "additional_param"
                },
                "param_1": {
                    "1": "file_struct_ptr",
                    "12": "file_data",
                    "2": "file_info_ptr",
                    "4": "file_struct",
                    "8": "file_info"
                },
                "param_1 + 0x1f0": {
                    "1": "file_info.max_size"
                },
                "param_1 + 0x200": {
                    "1": "file_info.current_size"
                },
                "param_1 + 0x210": {
                    "1": "file_struct.field1"
                },
                "param_1 + 0x44": {
                    "1": "update_flag"
                },
                "param_2": {
                    "1": "operation_type",
                    "10": "file_name",
                    "13": "filename",
                    "7": "new_filename"
                },
                "param_3": {
                    "1": "file_permissions",
                    "2": "flags",
                    "6": "file_type",
                    "8": "flag"
                },
                "param_4": {
                    "1": "operation_size",
                    "25": "file_size"
                },
                "param_5": {
                    "1": "operation_filename"
                },
                "uVar3": {
                    "1": "sub_result",
                    "19": "result",
                    "2": "sub_function_result",
                    "6": "return_value"
                }
            },
            "called": [
                "FUN_0010e2f0",
                "filename_cmp"
            ],
            "calling": [
                "FUN_00112502"
            ],
            "code": "\nundefined8 process_file_0010edb4(long file_data,undefined8 filename,undefined4 flag,ulong file_size)\n\n{\n  char success;\n  int filename_comparison;\n  undefined8 result;\n  undefined8 additional_param;\n  \n  if (*(long *)(file_data + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(file_data + 0x1f0) < file_size) {\n    *(ulong *)(file_data + 0x1f0) = file_size;\n  }\n  filename_comparison = filename_cmp(filename);\n  if (filename_comparison != 0) {\n    success = FUN_0010e2f0(file_data,0x84,0,file_size,filename);\n    if (success == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(file_data + 0x210) = filename;\n  }\n  result = FUN_0010e2f0(file_data,0x44,flag,file_size - *(long *)(file_data + 0x200),0,additional_param);\n  return result;\n}\n\n",
            "current_name": "process_file_0010edb4",
            "entrypoint": "0x0010edb4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010edb4": "process_file_0010edb4",
                "cVar1": "success",
                "filename_cmp": "compare_filenames",
                "iVar2": "filename_comparison",
                "in_R10": "additional_param",
                "param_1": "file_data",
                "param_2": "filename",
                "param_3": "flag",
                "param_4": "file_size",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ee3f": {
            "called": [
                "FUN_00108fe8",
                "FUN_00113b71",
                "FUN_00109a32",
                "FUN_0010b6ea",
                "FUN_00112b6e",
                "FUN_0010d559",
                "FUN_00108fb9",
                "strcat",
                "FUN_00109ab1",
                "FUN_00113bfa",
                "strcpy",
                "concat",
                "FUN_00113cb9",
                "dcgettext",
                "FUN_00108e76",
                "FUN_0010911f",
                "FUN_00113d3a",
                "FUN_00113e5e",
                "FUN_001129f4",
                "FUN_00109022",
                "FUN_0010ee3f",
                "FUN_00113ce0",
                "fprintf",
                "strspn",
                "FUN_00113b98",
                "strchr",
                "FUN_00113da9",
                "xmalloc",
                "FUN_00113dfe",
                "xrealloc",
                "FUN_00109a0b",
                "FUN_0010d882",
                "FUN_00109be3",
                "strlen",
                "strncmp",
                "FUN_00112904",
                "FUN_00113b4a",
                "FUN_00113d6e",
                "strcmp",
                "sprintf",
                "strtol",
                "free",
                "FUN_00113df2",
                "FUN_0010914e",
                "strstr",
                "FUN_00113e17",
                "malloc",
                "FUN_0010afd5",
                "cplus_demangle_init_info",
                "FUN_00113c43",
                "FUN_00113fb0",
                "cplus_demangle_mangled_name",
                "FUN_0010d21c",
                "FUN_0010c2d2"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = FUN_00109ab1(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)FUN_0010c2d2(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = FUN_00109022(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)FUN_00113bfa(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)FUN_00113e17();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)FUN_00113b98(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              FUN_00108fb9(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)FUN_00112b6e(lVar4,0,0x3b,1), piVar21 == (int *)0x0)) ||\n               (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)FUN_00113b98(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)FUN_00113cb9(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)FUN_00113d3a(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = FUN_00109a32(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = FUN_00109a32(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)FUN_00112904(5);\n      }\n      else {\n        pvVar17 = (void *)FUN_00113df2(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)FUN_00112904(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113b4a(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = FUN_00109ab1(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = FUN_0010914e(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = FUN_00113dfe(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        FUN_00108fb9(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = FUN_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)FUN_00113c43(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = FUN_00109a32(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)FUN_00113dfe(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)FUN_00113e17();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            FUN_00108fb9(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)FUN_00109a0b(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = FUN_00109a32(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          FUN_00108fb9(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)FUN_00113d6e(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113ce0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113b71(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = FUN_00109a32(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = FUN_00109a32(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)FUN_00113dfe(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)FUN_00113dfe(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)FUN_00113df2(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                FUN_00108fb9(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = FUN_0010c2d2(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                FUN_00108fe8(pbVar27,uVar15);\n                lVar38 = FUN_00113dfe(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)FUN_00112904(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)FUN_00113dfe(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)FUN_00112904(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)FUN_00113dfe(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)FUN_00113dfe(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)FUN_00113dfe(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)FUN_00113dfe(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)FUN_00113dfe(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          FUN_00108fe8(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = FUN_00113fb0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = FUN_00113fb0(pbVar50,\"0777777777777777777777;\"), cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = FUN_00113fb0(pbVar50,\"01777777777777777777777;\"), cVar6 == '\\0'))))\n          goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)FUN_00113dfe(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)FUN_00113dfe(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = FUN_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = FUN_00109a32(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            FUN_00108fb9(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  FUN_00108fe8(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                FUN_00108fe8(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = FUN_00109a32(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)FUN_001129f4();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        FUN_00108fe8(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        FUN_00108fe8(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = FUN_00109a32(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                FUN_00108fb9(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              FUN_00108fb9(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)FUN_00109a0b(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  FUN_00108fb9(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  FUN_00108fe8(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = FUN_00109a32(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = FUN_00109a32(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              FUN_00108fb9(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)FUN_00109a0b(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)FUN_00109a0b(pbVar28);\n            }\n            else {\n              local_150 = (char *)FUN_00109a0b(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)FUN_00109a0b(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              FUN_00108fe8(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = FUN_0010c2d2(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = FUN_00113fb0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = FUN_0010b6ea(param_1,param_2,\n                                                  *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                  &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    FUN_0010911f(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          FUN_0010911f(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = FUN_0010d559(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = FUN_00109be3(&local_98,pbVar42,(int)local_a0 - (int)pbVar42)\n                                ;\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                FUN_0010911f(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = FUN_0010d21c(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = FUN_00109be3(&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = FUN_00108e76(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = FUN_00109be3(&local_98,pbVar28,\n                                                         (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  FUN_0010911f(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)FUN_00113b98(lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = FUN_00113e5e(&local_98,&local_a0,pcVar40);\n                        goto LAB_00110d7e;\n                      }\n                      FUN_0010911f(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      FUN_0010911f(local_a0);\n                    }\n                    else {\n                      cVar6 = FUN_00113e5e(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = FUN_00113fb0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = FUN_00113fb0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)FUN_00113b98(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                FUN_00108fe8(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = FUN_00109a32(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  FUN_00108fb9(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)FUN_00113da9(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)FUN_00112904((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          FUN_00108fe8(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        FUN_00108fb9(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)FUN_0010afd5(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  FUN_00108fb9(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "current_name": "FUNC_0010ee3f",
            "entrypoint": "0x0010ee3f",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0011173a": {
            "additional_data": {
                "FUNC_0010ee3f": {
                    "1": "get_undefined32"
                },
                "FUN_00108f08": {
                    "1": "reverse_string"
                },
                "FUN_00108fb9": {
                    "1": "clean_memory"
                },
                "FUN_00108fe8": {
                    "1": "print_error_message"
                },
                "FUN_00109a0b": {
                    "1": "extract_substring"
                },
                "FUN_0010bbd3": {
                    "1": "check_condition"
                },
                "FUN_0010bc80": {
                    "1": "manipulate_data1"
                },
                "FUN_0010bd62": {
                    "1": "manipulate_data4"
                },
                "FUN_0010be1a": {
                    "1": "manipulate_data8"
                },
                "FUN_0010be88": {
                    "1": "get_undefined16"
                },
                "FUN_0010bf20": {
                    "1": "perform_operation"
                },
                "FUN_0010bf86": {
                    "1": "get_undefined8"
                },
                "FUN_0010c05d": {
                    "1": "manipulate_data6"
                },
                "FUN_0010c139": {
                    "1": "manipulate_data2"
                },
                "FUN_0010c1c6": {
                    "1": "manipulate_data3"
                },
                "FUN_0010c218": {
                    "1": "handle_variable"
                },
                "FUN_0010c6be": {
                    "1": "get_unsigned_long_pointer"
                },
                "FUN_0011173a": {
                    "1": "process_function"
                },
                "FUN_00112996": {
                    "1": "get_memory_location"
                },
                "FUN_00113ce0": {
                    "1": "retrieve_value"
                },
                "FUN_00113d3a": {
                    "1": "get_value"
                },
                "__ptr": {
                    "1": "temporary_pointer_variable",
                    "10": "ptr",
                    "2": "ptr_var",
                    "3": "pointer_variable",
                    "7": "pointer"
                },
                "bVar2": {
                    "1": "byte_variable1",
                    "16": "byte_var2",
                    "2": "byte_var",
                    "5": "temp_byte"
                },
                "cVar1": {
                    "1": "char1",
                    "16": "char_var1",
                    "2": "char_variable1",
                    "3": "temp_char"
                },
                "cVar3": {
                    "1": "temp_char1",
                    "10": "char_var2",
                    "5": "temp_char2",
                    "7": "char_var3"
                },
                "concat": {
                    "1": "concatenate_strings"
                },
                "dVar18": {
                    "2": "temp_double"
                },
                "dVar19": {
                    "1": "temp_double2",
                    "2": "double_var1",
                    "3": "double_variable",
                    "4": "temp_double",
                    "7": "double_var19",
                    "8": "double_var"
                },
                "dcgettext": {
                    "1": "get_translated_text"
                },
                "fprintf": {
                    "2": "print_formatted_string"
                },
                "iVar5": {
                    "1": "int3",
                    "3": "int_var1",
                    "5": "temp_int",
                    "7": "int_var5",
                    "9": "int_var"
                },
                "lVar10": {
                    "1": "long_variable1",
                    "2": "temp_long_var1",
                    "4": "long_var2",
                    "7": "long_var10"
                },
                "lVar11": {
                    "1": "long_variable5",
                    "3": "temp_long2",
                    "4": "long_var3",
                    "7": "long_var11",
                    "8": "long_var2"
                },
                "lVar12": {
                    "1": "long_variable12",
                    "2": "temp_long_var3",
                    "3": "temp_long3",
                    "7": "long_var12",
                    "8": "long_var3"
                },
                "lVar13": {
                    "1": "long4",
                    "2": "temp_long4",
                    "4": "long_var13",
                    "5": "long_var4"
                },
                "lVar15": {
                    "1": "long_var15"
                },
                "lVar16": {
                    "1": "temp_var10"
                },
                "lVar17": {
                    "1": "temp_var11"
                },
                "local_40": {
                    "1": "temp_ptr7",
                    "2": "local_ptr_array"
                },
                "local_48": {
                    "1": "local_ptr48",
                    "2": "local_string",
                    "3": "local_char_ptr"
                },
                "param_1": {
                    "1": "param_flag",
                    "2": "arg1",
                    "7": "param"
                },
                "param_2": {
                    "1": "debug_data",
                    "2": "array",
                    "7": "param_array"
                },
                "param_3": {
                    "1": "param_value_1",
                    "2": "value1",
                    "7": "param3"
                },
                "param_4": {
                    "1": "input2",
                    "2": "value",
                    "7": "param4"
                },
                "param_5": {
                    "1": "unsigned_long_parameter",
                    "2": "arg5",
                    "3": "param_ulong",
                    "7": "param5"
                },
                "param_6": {
                    "1": "parameter_6",
                    "2": "str",
                    "5": "string",
                    "6": "param_string",
                    "7": "param6"
                },
                "pcVar16": {
                    "1": "ptr_char2",
                    "2": "pointer_var4",
                    "3": "ptr_char_var16",
                    "5": "char_ptr2"
                },
                "pcVar19": {
                    "1": "temp_ptr5"
                },
                "pcVar8": {
                    "1": "char_ptr_var",
                    "2": "ptr_var8",
                    "3": "ptr_char_var8",
                    "4": "char_ptr"
                },
                "plVar16": {
                    "1": "long_ptr"
                },
                "plVar18": {
                    "1": "ptr_var18"
                },
                "plVar7": {
                    "1": "ptr2",
                    "2": "ptr_long_var7",
                    "4": "long_var"
                },
                "pplVar13": {
                    "1": "pointer_to_long_pointer",
                    "2": "ptr_ptr_long_var13",
                    "3": "long_ptr_ptr1"
                },
                "pplVar18": {
                    "1": "pointer_to_pointer_var2",
                    "2": "long_ptr_ptr2"
                },
                "pplVar20": {
                    "1": "temp_ptr8"
                },
                "pplVar21": {
                    "1": "temp_ptr9"
                },
                "puVar6": {
                    "1": "ptr_array",
                    "2": "pointer_variable2",
                    "3": "pointer_var1",
                    "5": "ptr_var6",
                    "6": "ptr_var"
                },
                "strchr": {
                    "1": "find_char_in_string"
                },
                "strcmp": {
                    "3": "compare_strings"
                },
                "strlen": {
                    "3": "get_string_length"
                },
                "strtod": {
                    "2": "convert_string_to_double"
                },
                "strtol": {
                    "1": "convert_string_to_long"
                },
                "uVar14": {
                    "1": "temp_unsigned2",
                    "2": "temp_unsigned_var2",
                    "3": "ulong_var",
                    "6": "ulong_var1",
                    "7": "ulong_var14"
                },
                "uVar15": {
                    "1": "temp_u_long_var1",
                    "2": "temp_unsigned_var3",
                    "6": "ulong_var15",
                    "9": "ulong_var2"
                },
                "uVar16": {
                    "1": "uint_var"
                },
                "uVar17": {
                    "1": "temp_unsigned4",
                    "2": "temp_unsigned_var4",
                    "3": "uint_var1",
                    "5": "uint_var",
                    "7": "uint_var17"
                },
                "uVar4": {
                    "1": "temp_undef",
                    "11": "undefined_var",
                    "2": "undefined_variable4",
                    "7": "undefined_var4"
                },
                "uVar9": {
                    "1": "ulong_var9",
                    "10": "undefined_var2",
                    "2": "undefined_variable9",
                    "3": "temp_unsigned_var",
                    "6": "undefined_var9"
                },
                "ulVar14": {
                    "1": "ulong_var1"
                },
                "ulVar15": {
                    "1": "ulong_var2"
                },
                "xmalloc": {
                    "3": "allocate_memory"
                },
                "xrealloc": {
                    "2": "reallocate_memory"
                },
                "xstrdup": {
                    "1": "copy_string",
                    "2": "duplicate_string"
                }
            },
            "called": [
                "FUN_0010c218",
                "FUN_00108fe8",
                "FUN_0010bf86",
                "FUN_0010be88",
                "FUN_0010c6be",
                "strtod",
                "xmalloc",
                "FUN_0010bc80",
                "FUN_00108f08",
                "xrealloc",
                "FUN_00109a0b",
                "strlen",
                "FUN_00108fb9",
                "FUN_0010bf20",
                "FUN_0010c1c6",
                "FUN_0010bd62",
                "FUN_00112996",
                "strcmp",
                "FUN_0010c05d",
                "strtol",
                "concat",
                "dcgettext",
                "FUN_0010bbd3",
                "free",
                "FUN_00113d3a",
                "FUN_0010c139",
                "FUN_0010be1a",
                "xstrdup",
                "FUN_0010ee3f",
                "FUN_00113ce0",
                "fprintf",
                "strchr"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined parse_debug_line_0011173a(undefined8 param1,long *param_array,int param3,int param4,ulong param5,\n                      char *param6)\n\n{\n  char char_var1;\n  byte byte_var2;\n  void *ptr;\n  char char_var2;\n  undefined undefined_var;\n  int int_var;\n  undefined8 *ptr_var;\n  long *long_var;\n  char *char_ptr;\n  undefined8 undefined_var2;\n  long long_var10;\n  long long_var2;\n  long long_var3;\n  long **long_ptr_ptr1;\n  ulong ulong_var14;\n  ulong ulong_var2;\n  char *char_ptr2;\n  uint uint_var17;\n  long **long_ptr_ptr2;\n  double double_var;\n  char *local_char_ptr;\n  long **local_ptr_array [2];\n  \n  if (param_array[4] != 0) {\n    if (((param3 == 100) && (*param6 != '\\0')) && (param_array[5] == param5)) goto LAB_00111a06;\n    char_var2 = FUN_0010bbd3(param1);\n    if (char_var2 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)param_array + 0x44) = 0;\n    *(undefined4 *)(param_array + 8) = 0;\n    param_array[9] = param_array[4];\n    if (*(char *)(param_array + 1) == '\\0') {\n      param_array[6] = param_array[5];\n    }\n    *(undefined4 *)(param_array + 0x10) = 1;\n    ptr_var = (undefined8 *)xmalloc(8);\n    param_array[0x11] = (long)ptr_var;\n    *ptr_var = 0;\n    param_array[4] = 0;\n  }\n  strlen(param6);\n  if (param3 == 0x84) {\nLAB_00111ab7:\n    undefined_var = FUN_00108f08(param1,param6);\n    return undefined_var;\n  }\n  if (param3 < 0x85) {\n    if (param3 == 0x3c) {\n      int_var = strcmp(param6,\"gcc2_compiled.\");\n      if (int_var == 0) {\n        *(undefined4 *)(param_array + 8) = 2;\n        return 1;\n      }\n      int_var = strcmp(param6,\"gcc_compiled.\");\n      if (int_var == 0) {\n        *(undefined4 *)(param_array + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)param_array + 0x44) = 1;\n      return 1;\n    }\n    if (param3 < 0x3d) {\n      if (param3 == 0x24) {\n        if (*param6 == '\\0') {\n          if (*(char *)(param_array + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(param_array + 1) != '\\0') {\n            param5 = param5 + param_array[7];\n          }\n          char_var2 = FUN_0010c1c6(param1,param_array);\n          if (char_var2 != '\\0') {\n            char_var2 = FUN_0010be1a(param1,param5);\n            if (char_var2 != '\\0') {\n              *(undefined *)(param_array + 0xc) = 0;\n              param_array[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(param_array + 0xc) != '\\0') &&\n           ((param5 < (ulong)param_array[0xd] || (param_array[0xd] == 0xffffffffffffffff)))) {\n          param_array[0xd] = param5;\n        }\n      }\n      else if (param3 < 0x25) {\n        if (param3 == 0xc) {\n          return 1;\n        }\n        if (param3 - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (param3 == 0x2a) {\n          return 1;\n        }\n        if (param3 == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (param3 == 100) {\nLAB_00111a06:\n        if (*(char *)(param_array + 0xc) != '\\0') {\n          ulong_var14 = param5;\n          if (((*param6 != '\\0') && (ulong_var2 = param_array[0xd], ulong_var2 != 0xffffffffffffffff)) &&\n             (ulong_var14 = ulong_var2, param5 < ulong_var2)) {\n            ulong_var14 = param5;\n          }\n          char_var2 = FUN_0010c1c6(param1,param_array);\n          if (char_var2 == '\\0') {\n            return 0;\n          }\n          char_var2 = FUN_0010be1a(param1,ulong_var14);\n          if (char_var2 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(param_array + 0xc) = 0;\n          param_array[0xd] = -1;\n        }\n        if (*param6 == '\\0') {\n          return 1;\n        }\n        ptr = (void *)param_array[4];\n        if (ptr == (void *)0x0) {\n          long_var3 = xstrdup(param6);\n          param_array[4] = long_var3;\n        }\n        else {\n          if (*param6 == '/') {\n            long_var3 = xstrdup(param6);\n          }\n          else {\n            long_var3 = concatenate_strings(ptr,param6,0);\n          }\n          param_array[4] = long_var3;\n          free(ptr);\n        }\n        param_array[5] = param5;\n        return 1;\n      }\n      if (param3 < 0x65) {\n        if (param3 == 0x44) {\n          long_var3 = 0;\n          if (*(char *)(param_array + 0xc) != '\\0') {\n            long_var3 = param_array[7];\n          }\n          undefined_var = FUN_0010bf86(param1,(long)param4,long_var3 + param5);\n          return undefined_var;\n        }\n        if (param3 == 0x62) {\n          return 1;\n        }\n      }\n      else if (param3 == 0x82) {\n        long_var = (long *)xmalloc();\n        int_var = *(int *)(param_array + 0x10);\n        long_var10 = param_array[10];\n        long_var2 = param_array[0xb];\n        long_var[5] = 0;\n        long_var3 = param_array[0x11];\n        *(int *)(long_var + 4) = int_var;\n        uint_var17 = int_var + 1;\n        *(uint *)(param_array + 0x10) = uint_var17;\n        *long_var = long_var2;\n        long_var[1] = long_var10;\n        long_var[2] = (long)param6;\n        long_var[3] = param5;\n        param_array[10] = (long)long_var;\n        param_array[0xb] = (long)long_var;\n        long_var3 = xrealloc(long_var3,(ulong)uint_var17 << 3);\n        uint_var17 = *(uint *)(long_var + 4);\n        param_array[0x11] = long_var3;\n        *(undefined8 *)(long_var3 + (ulong)uint_var17 * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    char_ptr = strchr(param6,0x3a);\n    if ((char_ptr != (char *)0x0) && ((char_ptr[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(param_array + 0xc) != '\\0') {\n        ulong_var14 = param_array[0xd];\n        ulong_var2 = param5;\n        if ((ulong_var14 != 0xffffffffffffffff) && (ulong_var2 = ulong_var14, param5 < ulong_var14)) {\n          ulong_var2 = param5;\n        }\n        char_var2 = FUN_0010c1c6(param1,param_array);\n        if (char_var2 == '\\0') {\n          return 0;\n        }\n        char_var2 = FUN_0010be1a(param1,ulong_var2);\n        if (char_var2 == '\\0') {\n          return 0;\n        }\n        param_array[0xd] = -1;\n      }\n      if (*(char *)(param_array + 1) != '\\0') {\n        param_array[7] = param5;\n      }\n      *(undefined *)(param_array + 0xc) = 1;\n    }\n    local_char_ptr = strchr(param6,0x3a);\n    if (local_char_ptr == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (local_char_ptr[1] == ':') goto code_r0x00111cc7;\n    if (*param6 == '$') {\n      char_var2 = param6[1];\n      char_ptr2 = \"eh_throw\";\n      if (char_var2 != 'e') {\n        if (char_var2 < 'f') {\n          if ((char_var2 != 'X') && (char_var2 != '_')) {\nLAB_00111d1a:\n            undefined_var2 = dcgettext(0,\"unknown C++ encoded name\",5);\n            FUN_00108fe8(param6,undefined_var2);\n          }\n        }\n        else {\n          char_ptr2 = \"this\";\n          if (char_var2 == 't') goto LAB_00111d62;\n          if (char_var2 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      char_ptr2 = (char *)0x0;\n      if ((param6 != local_char_ptr) && ((*param6 != ' ' || (local_char_ptr != param6 + 1)))) {\n        char_ptr2 = (char *)FUN_00109a0b(param6,(int)local_char_ptr - (int)param6);\n      }\n    }\nLAB_00111d62:\n    byte_var2 = local_char_ptr[1];\n    char_ptr = local_char_ptr + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)byte_var2 * 2) >> 2) & 1 |\n        (byte_var2 == 0x2d || byte_var2 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      local_char_ptr = char_ptr;\n      long_var3 = FUNC_0010ee3f(param1,param_array,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      undefined_var2 = 4;\n      goto LAB_001123e8;\n    }\n    if (byte_var2 == 0) goto switchD_00111de5_caseD_44;\n    char_ptr = local_char_ptr + 2;\n    char_var2 = local_char_ptr[1];\n    switch(char_var2) {\n    case 'C':\n      local_char_ptr = char_ptr;\n      long_var3 = FUNC_0010ee3f(param1,param_array,0,&local_char_ptr,0);\n      char_ptr = \"debug_record_label: not implemented\";\n      if (long_var3 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      local_char_ptr = char_ptr;\n      long_var3 = FUNC_0010ee3f(param1,param_array,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      char_var2 = FUN_0010bc80(param1,char_ptr2,long_var3,char_var2 == 'F',param5);\n      if (char_var2 != '\\0') {\n        do {\n          if (*local_char_ptr != ';') {\n            return 1;\n          }\n          local_char_ptr = local_char_ptr + 1;\n          long_var3 = FUNC_0010ee3f(param1,param_array,0,&local_char_ptr,0);\n        } while (long_var3 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      local_char_ptr = char_ptr;\n      long_var3 = FUNC_0010ee3f(param1,param_array,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      if (char_ptr2 == (char *)0x0) goto LAB_0011208f;\n      long_var10 = param_array[3];\n      long_var = (long *)param_array[2];\n      char_var2 = *(char *)(*(long *)(*param_array + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (param3 == 0x24) {\n        local_char_ptr = char_ptr;\n        do {\n          if (*local_char_ptr != ';') {\n            return 1;\n          }\n          local_char_ptr = local_char_ptr + 1;\n          long_var3 = FUNC_0010ee3f(param1,param_array,0,&local_char_ptr,0);\n        } while (long_var3 != 0);\n        return 0;\n      }\n    case 'R':\n      local_char_ptr = char_ptr;\n      long_var3 = FUNC_0010ee3f(param1,param_array,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      undefined_var2 = 2;\n      break;\n    case 'S':\n      local_char_ptr = char_ptr;\n      long_var3 = FUNC_0010ee3f(param1,param_array,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      undefined_var2 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      char_var2 = local_char_ptr[2];\n      if (char_var2 == 't') {\n        char_ptr = local_char_ptr + 3;\n      }\n      local_char_ptr = char_ptr;\n      long_var3 = FUNC_0010ee3f(param1,param_array,char_ptr2,&local_char_ptr,local_ptr_array);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      if (char_ptr2 == (char *)0x0) {\n        return 1;\n      }\n      char_var1 = *(char *)(param_array + 0x35);\n      long_var = (long *)FUN_0010c6be(param1,char_ptr2,long_var3);\n      if (long_var == (long *)0x0) {\n        return 0;\n      }\n      if (local_ptr_array[0] != (long **)0x0) {\n        *local_ptr_array[0] = long_var;\n      }\n      if (char_var1 != '\\0') goto LAB_001122f0;\n      long_ptr_ptr1 = (long **)(param_array + 0x34);\n      long_ptr_ptr2 = (long **)param_array[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      local_char_ptr = char_ptr;\n      long_var3 = FUNC_0010ee3f(param1,param_array,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      undefined_var2 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      char_ptr = local_char_ptr + 3;\n      if (((local_char_ptr[2] != '\\0') && (char_ptr = local_char_ptr + 4, local_char_ptr[3] == 'n')) &&\n         (char_ptr = local_char_ptr + 5, char_ptr2 = local_char_ptr + 4, local_char_ptr = char_ptr, *char_ptr2 == '0')) {\n        for (; char_ptr = local_char_ptr, *local_char_ptr != '\\0'; local_char_ptr = local_char_ptr + 1) {\n          if (*local_char_ptr == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      local_char_ptr = char_ptr;\n      long_var3 = FUNC_0010ee3f(param1,param_array,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      undefined_var2 = 4;\n      break;\n    case 'c':\n      if (local_char_ptr[2] == '=') {\n        char_ptr = local_char_ptr + 4;\n        char_var2 = local_char_ptr[3];\n        local_char_ptr = char_ptr;\n        if (char_var2 == 'i') {\n          long_var3 = strtol(char_ptr,(char **)0x0,10);\n          if (char_ptr2 == (char *)0x0) {\n            return 0;\n          }\n          long_var10 = FUN_00112996(param1,char_ptr2,4);\n          if (long_var10 != 0) {\n            *(long *)(long_var10 + 0x20) = (long)(int)long_var3;\n            return 1;\n          }\n          return 0;\n        }\n        if (char_var2 == 'r') {\n          double_var = strtod(char_ptr,(char **)0x0);\n          if (char_ptr2 == (char *)0x0) {\n            return 0;\n          }\n          long_var3 = FUN_00112996(param1,char_ptr2,5);\n          if (long_var3 != 0) {\n            *(double *)(long_var3 + 0x20) = double_var;\n            return 1;\n          }\n          return 0;\n        }\n        if (char_var2 == 'e') {\n          long_var3 = FUNC_0010ee3f(param1,param_array,0,&local_char_ptr,0);\n          if (long_var3 == 0) {\n            return 0;\n          }\n          char_ptr = local_char_ptr;\n          if (*local_char_ptr == ',') {\n            long_var10 = strtol(local_char_ptr,(char **)0x0,10);\n            if (char_ptr2 == (char *)0x0) {\n              return 0;\n            }\n            long_var2 = FUN_00112996(param1,char_ptr2,6);\n            if (long_var2 != 0) {\n              long_var = (long *)xmalloc(0x10);\n              *long_var = long_var3;\n              long_var[1] = (long)(int)long_var10;\n              *(long **)(long_var2 + 0x20) = long_var;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (local_char_ptr[2] == 'F') {\n        local_char_ptr = local_char_ptr + 3;\n        long_var3 = FUNC_0010ee3f(param1,param_array,0,&local_char_ptr,0);\n        if (long_var3 == 0) {\n          return 0;\n        }\n        undefined_var2 = FUN_00113ce0(long_var3,0,0);\n        long_var3 = FUN_00113d3a(undefined_var2);\n      }\n      else {\n        local_char_ptr = char_ptr;\n        long_var3 = FUNC_0010ee3f(param1,param_array,0,&local_char_ptr,0);\n      }\n      if (long_var3 == 0) {\n        return 0;\n      }\n      undefined_var2 = 1;\n      break;\n    case 'r':\n      local_char_ptr = char_ptr;\n      long_var3 = FUNC_0010ee3f(param1,param_array,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      undefined_var2 = 5;\nLAB_001123e8:\n      char_var2 = FUN_0010c139(param1,param_array,char_ptr2,long_var3,undefined_var2,param5);\n      goto joined_r0x001123f8;\n    case 't':\n      local_char_ptr = char_ptr;\n      long_var3 = FUNC_0010ee3f(param1,param_array,char_ptr2,&local_char_ptr,local_ptr_array);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      if (char_ptr2 == (char *)0x0) {\n        return 1;\n      }\n      long_var = (long *)FUN_0010c218(param1,char_ptr2,long_var3);\n      if (long_var == (long *)0x0) {\n        return 0;\n      }\n      if (local_ptr_array[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_ptr_array[0] = long_var;\n      return 1;\n    case 'v':\n      local_char_ptr = char_ptr;\n      long_var3 = FUNC_0010ee3f(param1,param_array,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      undefined_var2 = 3;\n    }\n    char_var2 = FUN_0010bd62(param1,char_ptr2,long_var3,undefined_var2,param5);\n    goto joined_r0x001123f8;\n  }\n  if (param3 == 0xe0) {\n    if ((*(char *)((long)param_array + 0x44) != '\\0') && (param4 == 1)) {\n      return 1;\n    }\n    char_var2 = FUN_0010c1c6(param1,param_array);\n    if (char_var2 == '\\0') {\n      return 0;\n    }\n    char_var2 = FUN_0010bf20(param1,param_array[7] + param_array[6] + param5);\n    if (char_var2 == '\\0') {\n      return 0;\n    }\n    param_array = param_array + 0xe;\n    *(int *)param_array = *(int *)param_array + -1;\n    char_ptr = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)param_array) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < param3) {\n      if (param3 == 0xe2) {\n        char_ptr = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        char_ptr = \"debug_end_common_block: not implemented\";\n        if (param3 != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      undefined_var2 = dcgettext(0,char_ptr,5);\n      fprintf(_stderr,\"%s\\n\",undefined_var2);\n      return 0;\n    }\n    if (param3 != 0xc0) {\n      if (param3 == 0xc2) {\n        int_var = *(int *)(param_array + 0x10);\n        *(uint *)(param_array + 0x10) = int_var + 1U;\n        long_var3 = xrealloc(param_array[0x11],(ulong)(int_var + 1U) << 3);\n        ptr_var = (undefined8 *)param_array[0xb];\n        param_array[0x11] = long_var3;\n        while( true ) {\n          if (ptr_var == (undefined8 *)0x0) {\n            undefined_var2 = dcgettext(0,\"Undefined N_EXCL\",5);\n            FUN_00108fe8(param6,undefined_var2);\n            *(undefined8 *)(param_array[0x11] + (ulong)(*(int *)(param_array + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((param5 == ptr_var[3]) && (int_var = strcmp((char *)ptr_var[2],param6), int_var == 0))\n          break;\n          ptr_var = (undefined8 *)*ptr_var;\n        }\n        *(undefined8 *)(long_var3 + (ulong)(*(int *)(param_array + 0x10) - 1) * 8) = ptr_var[5];\n        return 1;\n      }\n      if (param3 == 0xa2) {\n        long_var3 = param_array[10];\n        if (long_var3 != 0) {\n          long_var10 = *(long *)(long_var3 + 8);\n          uint_var17 = *(uint *)(long_var3 + 0x20);\n          param_array[10] = long_var10;\n          if ((uint_var17 < *(uint *)(param_array + 0x10)) &&\n             (*(undefined8 *)(long_var3 + 0x28) = *(undefined8 *)(param_array[0x11] + (ulong)uint_var17 * 8),\n             long_var10 != 0)) {\n            param6 = *(char **)(long_var10 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        param6 = (char *)param_array[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)param_array + 0x44) != '\\0') && (param4 == 1)) {\n      return 1;\n    }\n    if (*(char *)(param_array + 0xc) != '\\0') {\n      char_var2 = FUN_0010be88(param1,param_array[7] + param_array[6] + param5);\n      if (char_var2 == '\\0') {\n        return 0;\n      }\n      char_var2 = FUN_0010c1c6(param1,param_array);\n      if (char_var2 != '\\0') {\n        *(int *)(param_array + 0xe) = *(int *)(param_array + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    char_ptr = \"N_LBRAC not within function\\n\";\n  }\n  char_ptr = (char *)dcgettext(0,char_ptr,5);\n  fprintf(_stderr,char_ptr);\n  return 0;\ncode_r0x00111cc7:\n  local_char_ptr = local_char_ptr + 2;\n  local_char_ptr = strchr(local_char_ptr,0x3a);\n  if (local_char_ptr == (char *)0x0) {\n    char_ptr = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    local_char_ptr = char_ptr;\n    FUN_00108fb9(param6);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (long_ptr_ptr2 == (long **)0x0) {\nLAB_001122f0:\n    if (char_var2 != 't') {\n      return 1;\n    }\n    long_var = (long *)FUN_0010c218(param1,char_ptr2,long_var);\n    if (long_var != (long *)0x0) {\n      if (local_ptr_array[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_ptr_array[0] = long_var;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)long_ptr_ptr2[1] == *char_ptr2) &&\n     (int_var = strcmp((char *)long_ptr_ptr2[1],char_ptr2), int_var == 0)) {\n    long_ptr_ptr2[3] = long_var;\n    *long_ptr_ptr1 = *long_ptr_ptr2;\n    goto LAB_001122f0;\n  }\n  long_ptr_ptr1 = long_ptr_ptr2;\n  long_ptr_ptr2 = (long **)*long_ptr_ptr2;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (long_var10 < 1) {\nLAB_0011208f:\n    undefined_var2 = 1;\nLAB_001121c4:\n    char_var2 = FUN_0010c05d(param1,char_ptr2,long_var3,undefined_var2,param5);\njoined_r0x001123f8:\n    if (char_var2 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  char_ptr = *(char **)(*long_var + 8);\n  if ((char_var2 != '\\0') && (char_var2 == *char_ptr)) {\n    char_ptr = char_ptr + 1;\n  }\n  if ((*char_ptr == *char_ptr2) && (int_var = strcmp(char_ptr,char_ptr2), int_var == 0)) {\n    param5 = *(long *)(*long_var + 0x10) + *(long *)(*(long *)(*long_var + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  long_var10 = long_var10 + -1;\n  long_var = long_var + 1;\n  goto LAB_00112045;\n}\n\n",
            "current_name": "parse_debug_line_0011173a",
            "entrypoint": "0x0011173a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011173a": "parse_debug_line_0011173a",
                "__ptr": "ptr",
                "bVar2": "byte_var2",
                "cVar1": "char_var1",
                "cVar3": "char_var2",
                "concat": "concatenate_strings",
                "dVar19": "double_var",
                "dcgettext": "get_translated_string",
                "fprintf": "print_formatted_string",
                "iVar5": "int_var",
                "lVar10": "long_var10",
                "lVar11": "long_var2",
                "lVar12": "long_var3",
                "lVar13": "long_var4",
                "local_40": "local_ptr_array",
                "local_48": "local_char_ptr",
                "param_1": "param1",
                "param_2": "param_array",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "pcVar16": "char_ptr2",
                "pcVar8": "char_ptr",
                "plVar18": "ptr_var18",
                "plVar7": "long_var",
                "pplVar13": "long_ptr_ptr1",
                "pplVar18": "long_ptr_ptr2",
                "puVar6": "ptr_var",
                "strchr": "find_character",
                "strcmp": "compare_strings",
                "strlen": "get_string_length",
                "strtod": "convert_string_to_double",
                "strtol": "string_to_long",
                "uVar14": "ulong_var14",
                "uVar15": "ulong_var2",
                "uVar17": "uint_var17",
                "uVar4": "undefined_var",
                "uVar9": "undefined_var2",
                "xmalloc": "allocate_memory",
                "xrealloc": "reallocate_memory",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112502": {
            "additional_data": {
                "FUN_0010edb4": {
                    "1": "execute_function",
                    "4": "check_condition"
                },
                "FUN_00112502": {
                    "1": "search_and_verify_data",
                    "2": "check_param",
                    "3": "process_data",
                    "5": "check_threshold"
                },
                "cVar4": {
                    "1": "result_char",
                    "23": "result",
                    "3": "check_result"
                },
                "param_1": {
                    "1": "structure_address",
                    "2": "input_data",
                    "3": "data_struct_ptr",
                    "5": "data_ptr"
                },
                "param_2": {
                    "1": "config",
                    "2": "arg1",
                    "4": "param",
                    "6": "param2"
                },
                "param_3": {
                    "1": "desired_value",
                    "2": "target_value",
                    "3": "param3",
                    "4": "limit",
                    "6": "value",
                    "7": "threshold"
                },
                "puVar2": {
                    "1": "structure_pointer",
                    "2": "data_array",
                    "5": "ptr_array",
                    "7": "array_ptr"
                },
                "uVar1": {
                    "1": "loop_counter",
                    "24": "index",
                    "5": "counter"
                },
                "uVar3": {
                    "1": "next_param",
                    "2": "temp_value",
                    "3": "temp_var",
                    "4": "value"
                }
            },
            "called": [
                "FUN_0010edb4"
            ],
            "calling": [
                "FUN_0011378f",
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "code": "\nundefined check_threshold_00112502(long data_ptr,undefined8 param2,ulong threshold)\n\n{\n  uint index;\n  undefined8 *array_ptr;\n  undefined8 value;\n  char result;\n  \n  do {\n    array_ptr = *(undefined8 **)(data_ptr + 0x40);\n    if (array_ptr == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((index = *(uint *)(data_ptr + 0x48), index < 10 && (array_ptr[(ulong)index + 2] != -1))) {\n      if (threshold <= (ulong)array_ptr[(ulong)index + 0xc]) {\n        return 1;\n      }\n      result = FUN_0010edb4(param2,*(undefined8 *)(array_ptr[1] + 8));\n      if (result == '\\0') {\n        return 0;\n      }\n      *(int *)(data_ptr + 0x48) = *(int *)(data_ptr + 0x48) + 1;\n    }\n    value = *array_ptr;\n    *(undefined4 *)(data_ptr + 0x48) = 0;\n    *(undefined8 *)(data_ptr + 0x40) = value;\n  } while( true );\n}\n\n",
            "current_name": "check_threshold_00112502",
            "entrypoint": "0x00112502",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112502": "check_threshold_00112502",
                "cVar4": "result",
                "param_1": "data_ptr",
                "param_2": "param2",
                "param_3": "threshold",
                "puVar2": "array_ptr",
                "uVar1": "index",
                "uVar3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011256b": {
            "additional_data": {
                "*param_1": {
                    "1": "formats"
                },
                "FUN_0011256b": {
                    "1": "print_formats",
                    "30": "print_matching_formats"
                },
                "___stdout": {
                    "1": "stdout_buffer"
                },
                "__c": {
                    "4": "character"
                },
                "__format": {
                    "1": "format_error_message",
                    "2": "error_message",
                    "21": "format_string",
                    "3": "message_format"
                },
                "__ptr": {
                    "2": "pointer"
                },
                "__stream": {
                    "3": "output_stream"
                },
                "_stderr": {
                    "1": "standard_error",
                    "2": "stderr_stream",
                    "3": "stderr"
                },
                "_stdout": {
                    "1": "output_stream",
                    "2": "stdout_stream",
                    "3": "stdout"
                },
                "dcgettext": {
                    "1": "get_translated_text",
                    "2": "get_translated_string"
                },
                "fflush": {
                    "1": "flush_buffer_to_stdout",
                    "2": "flush_output"
                },
                "fprintf": {
                    "1": "print_to_stderr",
                    "2": "print_formatted"
                },
                "fputc": {
                    "1": "put_character"
                },
                "free": {
                    "1": "release_memory",
                    "2": "deallocate_memory"
                },
                "param_1": {
                    "1": "format_array",
                    "14": "formats",
                    "2": "formats_array",
                    "5": "format_list",
                    "7": "format_strings"
                },
                "plVar2": {
                    "1": "format_pointer",
                    "2": "current_format_string",
                    "24": "current_format",
                    "3": "current_string"
                },
                "uVar1": {
                    "1": "default_format",
                    "2": "data",
                    "5": "matching_formats"
                }
            },
            "called": [
                "dcgettext",
                "fputc",
                "fflush",
                "free",
                "fprintf"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\n\n\nvoid print_matching_formats_0011256b(long *formats)\n\n{\n  undefined8 matching_formats;\n  char *format_string;\n  long *current_format;\n  \n  fflush(stdout);\n  matching_formats = DAT_00127600;\n  format_string = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(error_stream,format_string,matching_formats);\n  for (current_format = formats; *current_format != 0; current_format = current_format + 1) {\n    fprintf(error_stream,\" %s\");\n  }\n  free(formats);\n  fputc(10,error_stream);\n  return;\n}\n\n",
            "current_name": "print_matching_formats_0011256b",
            "entrypoint": "0x0011256b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "__format": "format_string",
                "_stderr": "error_stream",
                "_stdout": "stdout",
                "dcgettext": "get_translated_string",
                "fflush": "flush_output",
                "fprintf": "print_formatted",
                "fputc": "put_character",
                "free": "deallocate_memory",
                "param_1": "formats",
                "plVar2": "current_format",
                "uVar1": "matching_formats"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001125fa": {
            "additional_data": {
                "DAT_00127a50": {
                    "1": "formatted_string"
                },
                "DAT_00127a58": {
                    "1": "max_filename_size"
                },
                "FUN_001125fa": {
                    "1": "extract_archive_filename",
                    "2": "generate_filename",
                    "3": "generate_archive_filename",
                    "4": "get_modified_filename"
                },
                "__assert_fail": {
                    "1": "assert_fail",
                    "2": "assertion_failure"
                },
                "__s": {
                    "1": "final_string",
                    "11": "filename",
                    "2": "formatted_string",
                    "3": "original_filename"
                },
                "free": {
                    "1": "release_memory",
                    "3": "deallocate_memory"
                },
                "param_1": {
                    "1": "input_data",
                    "16": "arguments",
                    "2": "args",
                    "3": "input_params"
                },
                "ppcVar2": {
                    "1": "archive_filename",
                    "2": "archive"
                },
                "sVar3": {
                    "1": "archive_length",
                    "2": "archive_filename_length",
                    "3": "archive_name_length",
                    "7": "length1"
                },
                "sVar4": {
                    "1": "input_length",
                    "4": "filename_length",
                    "7": "length2"
                },
                "sprintf": {
                    "1": "format_filename",
                    "3": "format_string"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "uVar1": {
                    "1": "new_length",
                    "15": "total_length",
                    "2": "modified_filename_length"
                },
                "xmalloc": {
                    "4": "allocate_memory"
                }
            },
            "called": [
                "strlen",
                "sprintf",
                "xmalloc",
                "free",
                "__assert_fail"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_001152b6",
                "FUN_00105828",
                "FUN_00114e50",
                "FUN_00107976",
                "FUN_001126c0"
            ],
            "code": "\nchar * get_formatted_string_001125fa(char **arguments)\n\n{\n  ulong total_length;\n  char **archive;\n  size_t length1;\n  size_t length2;\n  char *filename;\n  \n  if (arguments == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  archive = (char **)arguments[0x1d];\n  filename = *arguments;\n  if ((archive != (char **)0x0) && ((*(byte *)((long)archive + 0x49) & 0x10) == 0)) {\n    length1 = strlen(*archive);\n    length2 = strlen(filename);\n    total_length = length1 + 3 + length2;\n    if (DAT_00127a58 < total_length) {\n      if (DAT_00127a58 != 0) {\n        free(DAT_00127a50);\n      }\n      DAT_00127a58 = (total_length >> 1) + total_length;\n      DAT_00127a50 = (char *)xmalloc();\n    }\n    sprintf(DAT_00127a50,\"%s(%s)\",*(undefined8 *)arguments[0x1d],*arguments);\n    filename = DAT_00127a50;\n  }\n  return filename;\n}\n\n",
            "current_name": "get_formatted_string_001125fa",
            "entrypoint": "0x001125fa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001125fa": "get_formatted_string_001125fa",
                "__assert_fail": "assert_failure",
                "__s": "filename",
                "free": "deallocate_memory",
                "param_1": "arguments",
                "ppcVar2": "archive",
                "sVar3": "length1",
                "sVar4": "length2",
                "sprintf": "format_string",
                "strlen": "get_string_length",
                "uVar1": "total_length",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001126c0": {
            "additional_data": {
                "DAT_0011b4a0": {
                    "1": "error_message_prefix"
                },
                "DAT_00127600": {
                    "1": "unknown_cause_error_message",
                    "2": "unknown_error_cause"
                },
                "FUN_001126c0": {
                    "1": "process_error",
                    "2": "handle_error",
                    "21": "print_error_message",
                    "6": "print_error"
                },
                "LAB_001127c1": {
                    "1": "label"
                },
                "_stderr": {
                    "1": "standard_error",
                    "3": "error_stream"
                },
                "_stdout": {
                    "1": "stdout_stream",
                    "2": "standard_output"
                },
                "iVar1": {
                    "1": "error_check",
                    "2": "error_flag",
                    "3": "error_code",
                    "5": "bfd_error",
                    "9": "error"
                },
                "in_AL": {
                    "1": "is_error_found",
                    "14": "flag",
                    "3": "input_flag",
                    "7": "condition"
                },
                "local_100": {
                    "1": "chunk_size",
                    "11": "buffer_size",
                    "3": "buffer_size1",
                    "4": "size1"
                },
                "local_48": {
                    "1": "local_error_code8",
                    "2": "local_var14",
                    "3": "param8_copy"
                },
                "local_58": {
                    "1": "local_error_code7",
                    "2": "local_var13",
                    "3": "param7_copy"
                },
                "local_68": {
                    "1": "error_param6_copy",
                    "2": "arg6_copy",
                    "3": "param6_copy"
                },
                "local_78": {
                    "1": "backup_error_code_5",
                    "2": "arg5_copy",
                    "3": "param5_copy"
                },
                "local_88": {
                    "1": "local_error4",
                    "2": "param4_backup",
                    "3": "param4_copy"
                },
                "local_98": {
                    "1": "flag3_copy",
                    "2": "param3_backup",
                    "3": "param3_copy"
                },
                "local_a8": {
                    "1": "param_d",
                    "2": "local_var8",
                    "3": "param2_copy"
                },
                "local_b8": {
                    "1": "local_param_1",
                    "2": "error_code_backup"
                },
                "local_c0": {
                    "1": "param_b_updated",
                    "2": "local_var6",
                    "3": "local_param14",
                    "8": "param14_copy"
                },
                "local_c8": {
                    "1": "param1_copy",
                    "2": "local_var5",
                    "3": "local_param13",
                    "8": "param13_copy"
                },
                "local_e8": {
                    "1": "temp_buffer",
                    "2": "local_stack_buffer",
                    "3": "local_array",
                    "4": "error_buffer",
                    "5": "buffer",
                    "6": "local_buffer"
                },
                "local_f0": {
                    "1": "ptr2",
                    "2": "arg2",
                    "3": "buffer",
                    "7": "local_buffer"
                },
                "local_f8": {
                    "1": "param_address",
                    "2": "arg1",
                    "3": "local_var3"
                },
                "local_fc": {
                    "1": "element_size",
                    "2": "string_size",
                    "3": "local_var2",
                    "4": "buffer_size2"
                },
                "param_1": {
                    "1": "error_code_1",
                    "10": "error_code1",
                    "2": "error_type",
                    "3": "error_flag",
                    "5": "error_code"
                },
                "param_10": {
                    "1": "param_length",
                    "11": "error_code",
                    "2": "param_10",
                    "3": "error_message2",
                    "6": "param10"
                },
                "param_11": {
                    "1": "buffer",
                    "2": "param_array",
                    "3": "param_11",
                    "6": "error_array"
                },
                "param_12": {
                    "1": "additional_error_message",
                    "15": "format_string",
                    "2": "error_format",
                    "3": "error_message4"
                },
                "param_13": {
                    "1": "unknown_param1",
                    "18": "param13",
                    "2": "arg1",
                    "3": "param1",
                    "4": "param_13"
                },
                "param_14": {
                    "1": "param_b",
                    "18": "param14",
                    "2": "arg2",
                    "3": "param2",
                    "4": "param_14"
                },
                "param_2": {
                    "1": "error_type2",
                    "10": "error_code2",
                    "2": "arg2",
                    "3": "error2",
                    "8": "param2"
                },
                "param_3": {
                    "1": "error_code_3",
                    "10": "error_code3",
                    "2": "param_3",
                    "3": "error3",
                    "8": "param3"
                },
                "param_4": {
                    "1": "error_param4",
                    "10": "error_code4",
                    "2": "arg4",
                    "3": "error4",
                    "8": "param4"
                },
                "param_5": {
                    "1": "flag5",
                    "10": "error_code5",
                    "2": "arg5",
                    "3": "error5",
                    "8": "param5"
                },
                "param_6": {
                    "1": "error_info3",
                    "10": "error_code6",
                    "2": "arg6",
                    "3": "error6",
                    "8": "param6"
                },
                "param_7": {
                    "1": "flag7",
                    "10": "error_code7",
                    "2": "param_7",
                    "3": "error7",
                    "8": "param7"
                },
                "param_8": {
                    "1": "error_param8",
                    "10": "error_code8",
                    "2": "param_8",
                    "3": "error8",
                    "8": "param8"
                },
                "param_9": {
                    "1": "error_msg",
                    "2": "error_string",
                    "22": "error_message",
                    "3": "error_message1"
                },
                "stack0x00000008": {
                    "1": "stack"
                },
                "uVar2": {
                    "1": "error_message_text",
                    "3": "error_msg",
                    "7": "error_message"
                }
            },
            "called": [
                "vfprintf",
                "fputs",
                "FUN_001125fa",
                "bfd_errmsg",
                "dcgettext",
                "bfd_get_error",
                "fflush",
                "fprintf",
                "fwrite"
            ],
            "calling": [
                "FUN_00104d25",
                "FUN_00104ea2",
                "FUN_0010808f",
                "FUN_001086af",
                "FUN_00114690",
                "FUN_00116b90",
                "FUN_00115dc0",
                "FUN_0010551d",
                "FUN_00114e50",
                "FUN_00107880",
                "FUN_0010554f",
                "FUN_00108466",
                "FUN_00116110"
            ],
            "code": "\n\n\nvoid print_error_message_001126c0(undefined4 error_code1,undefined4 error_code2,undefined4 error_code3,undefined4 error_code4,\n                 undefined4 error_code5,undefined4 error_code6,undefined4 error_code7,undefined4 error_code8,\n                 long error_message,long error_code,long *param11,char *format_string,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char flag;\n  int error;\n  undefined8 error_message;\n  undefined4 buffer_size;\n  undefined4 buffer_size2;\n  undefined *local_var3;\n  undefined *local_buffer;\n  undefined local_buffer [32];\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 error_code_backup;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 param5_copy;\n  undefined4 param6_copy;\n  undefined4 param7_copy;\n  undefined4 param8_copy;\n  \n  if (flag != '\\0') {\n    error_code_backup = error_code1;\n    param2_copy = error_code2;\n    param3_copy = error_code3;\n    param4_copy = error_code4;\n    param5_copy = error_code5;\n    param6_copy = error_code6;\n    param7_copy = error_code7;\n    param8_copy = error_code8;\n  }\n  param13_copy = param13;\n  param14_copy = param14;\n  error = bfd_get_error();\n  if (error == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg();\n  }\n  fflush(standard_output);\n  fputs(DAT_00127600,error_stream);\n  if (error_code != 0) {\n    if (error_message == 0) {\n      error_message = FUN_001125fa(error_code);\n    }\n    if ((param11 != (long *)0x0) && (*param11 != 0)) {\n      fprintf(error_stream,\": %s[%s]\",error_message);\n      goto label;\n    }\n  }\n  fprintf(error_stream,\": %s\",error_message);\nlabel:\n  if (format_string != (char *)0x0) {\n    local_var3 = &stack;\n    local_buffer = local_buffer;\n    buffer_size = 0x20;\n    buffer_size2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,error_stream);\n    vfprintf(error_stream,format_string,&buffer_size);\n  }\n  fprintf(error_stream,\": %s\\n\",error_message);\n  return;\n}\n\n",
            "current_name": "print_error_message_001126c0",
            "entrypoint": "0x001126c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001126c0": "print_error_message_001126c0",
                "LAB_001127c1": "label",
                "_stderr": "error_stream",
                "_stdout": "standard_output",
                "iVar1": "error",
                "in_AL": "flag",
                "local_100": "buffer_size",
                "local_48": "param8_copy",
                "local_58": "param7_copy",
                "local_68": "param6_copy",
                "local_78": "param5_copy",
                "local_88": "param4_copy",
                "local_98": "param3_copy",
                "local_a8": "param2_copy",
                "local_b8": "error_code_backup",
                "local_c0": "param14_copy",
                "local_c8": "param13_copy",
                "local_e8": "local_buffer",
                "local_f0": "local_buffer",
                "local_f8": "local_var3",
                "local_fc": "buffer_size2",
                "param_1": "error_code1",
                "param_10": "error_code",
                "param_11": "param11",
                "param_12": "format_string",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "error_code2",
                "param_3": "error_code3",
                "param_4": "error_code4",
                "param_5": "error_code5",
                "param_6": "error_code6",
                "param_7": "error_code7",
                "param_8": "error_code8",
                "param_9": "error_message",
                "stack0x00000008": "stack",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011283f": {
            "additional_data": {
                "FUN_0011283f": {
                    "1": "check_and_update_directory",
                    "10": "check_directory_access",
                    "2": "check_directory_permission",
                    "3": "check_directory_permissions"
                },
                "__buf": {
                    "1": "buffer"
                },
                "__file": {
                    "1": "filename"
                },
                "__name": {
                    "1": "name"
                },
                "__type": {
                    "1": "type"
                },
                "access": {
                    "2": "check_file_access"
                },
                "iVar1": {
                    "20": "access_result"
                },
                "param_1": {
                    "1": "file_name",
                    "13": "directory_path",
                    "6": "path",
                    "9": "file_path"
                },
                "param_2": {
                    "1": "output_path",
                    "2": "default_directory",
                    "3": "current_directory",
                    "4": "directory",
                    "5": "default_path",
                    "6": "directory_path"
                },
                "sStack_a8": {
                    "1": "stats_buffer",
                    "2": "file_status",
                    "8": "file_stats",
                    "9": "file_stat"
                },
                "stat": {
                    "1": "get_file_status"
                }
            },
            "called": [
                "stat",
                "access"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\nchar * check_directory_access_0011283f(char *directory_path,char *directory_path)\n\n{\n  int access_result;\n  get_file_status file_stat;\n  \n  if ((directory_path == (char *)0x0) && (directory_path != (char *)0x0)) {\n    access_result = check_file_access(directory_path,7);\n    if (access_result == 0) {\n      access_result = get_file_status(directory_path,&file_stat);\n      if ((access_result == 0) && ((file_stat.st_mode & 0xf000) == 0x4000)) {\n        directory_path = directory_path;\n      }\n    }\n  }\n  return directory_path;\n}\n\n",
            "current_name": "check_directory_access_0011283f",
            "entrypoint": "0x0011283f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011283f": "check_directory_access_0011283f",
                "access": "check_file_access",
                "iVar1": "access_result",
                "param_1": "directory_path",
                "param_2": "directory_path",
                "sStack_a8": "file_stat",
                "stat": "get_file_status"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112894": {
            "additional_data": {
                "FUN_00112894": {
                    "1": "initialize_data",
                    "11": "initialize_data_structure",
                    "2": "create_memory_buffer",
                    "3": "initialize_data_struct",
                    "6": "create_data_structure"
                },
                "bVar4": {
                    "1": "constant",
                    "2": "initial_value",
                    "3": "offset",
                    "4": "byte_var",
                    "8": "byte_value"
                },
                "lVar3": {
                    "1": "loop_index",
                    "12": "counter",
                    "14": "loop_counter",
                    "2": "loop_count"
                },
                "param_1": {
                    "1": "input1",
                    "2": "input_param",
                    "3": "initial_value",
                    "4": "value1",
                    "5": "data"
                },
                "param_2": {
                    "1": "input2",
                    "12": "flag",
                    "3": "byte_value",
                    "4": "value2"
                },
                "param_3": {
                    "1": "param3_value",
                    "2": "data_value1",
                    "3": "param_3",
                    "4": "param3",
                    "6": "value1"
                },
                "param_4": {
                    "1": "param4_value",
                    "2": "data_value2",
                    "3": "param_4",
                    "4": "param4",
                    "6": "value2"
                },
                "puVar1": {
                    "1": "data_structure_pointer",
                    "12": "data_structure",
                    "2": "memory_buffer",
                    "3": "data_array",
                    "4": "buffer"
                },
                "puVar2": {
                    "1": "alloc_ptr",
                    "2": "current_address",
                    "3": "current_pointer",
                    "4": "current_ptr",
                    "5": "temp_pointer",
                    "7": "temp_ptr"
                },
                "xmalloc": {
                    "8": "allocate_memory"
                }
            },
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nundefined8 *\ninitialize_data_structure_00112894(undefined8 data,undefined flag,undefined8 value1,undefined8 value2)\n\n{\n  undefined8 *data_structure;\n  undefined8 *temp_ptr;\n  long loop_counter;\n  byte byte_value;\n  \n  byte_value = 0;\n  data_structure = (undefined8 *)xmalloc(0x1b0);\n  temp_ptr = data_structure;\n  for (loop_counter = 0x6c; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *(undefined4 *)temp_ptr = 0;\n    temp_ptr = (undefined8 *)((long)temp_ptr + (ulong)byte_value * -8 + 4);\n  }\n  *data_structure = data;\n  *(undefined *)(data_structure + 1) = flag;\n  data_structure[2] = value1;\n  data_structure[3] = value2;\n  *(undefined4 *)(data_structure + 0x10) = 1;\n  temp_ptr = (undefined8 *)xmalloc(8);\n  data_structure[0xd] = 0xffffffffffffffff;\n  data_structure[0x11] = temp_ptr;\n  *temp_ptr = 0;\n  return data_structure;\n}\n\n",
            "current_name": "initialize_data_structure_00112894",
            "entrypoint": "0x00112894",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112894": "initialize_data_structure_00112894",
                "bVar4": "byte_value",
                "lVar3": "loop_counter",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "value1",
                "param_4": "value2",
                "puVar1": "data_structure",
                "puVar2": "temp_ptr",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112904": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "initialize_zero_memory"
                },
                "<original_variable_name_1>": {
                    "1": "memory_block"
                },
                "<original_variable_name_2>": {
                    "1": "param1"
                },
                "<original_variable_name_3>": {
                    "1": "param2"
                },
                "FUN_00112904": {
                    "1": "initialize_structure",
                    "2": "initialize_data_struct",
                    "4": "initialize_data_structure",
                    "5": "initialize_memory_block",
                    "7": "initialize_data",
                    "9": "initialize_memory"
                },
                "param_1": {
                    "1": "initial_value",
                    "11": "value1",
                    "2": "first_param",
                    "4": "data1"
                },
                "param_2": {
                    "1": "input2",
                    "11": "value2",
                    "2": "input_param2",
                    "4": "data2"
                },
                "puVar1": {
                    "1": "memory_pointer",
                    "2": "data_structure",
                    "3": "data_ptr",
                    "9": "allocated_memory"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_0010c892",
                "FUN_00113e23",
                "FUN_0010c218",
                "FUN_00113b71",
                "FUN_00113da9",
                "FUN_0010c6be",
                "FUN_0010b0fa",
                "FUN_00113dfe",
                "FUN_00113cb9",
                "FUN_00113d3a",
                "FUN_00113df2",
                "FUN_00113e17",
                "FUN_0010c95e",
                "FUN_00113c43",
                "FUN_00113bfa",
                "FUN_00113b4a",
                "FUN_00113ce0",
                "FUN_0010ee3f",
                "FUN_00113d6e",
                "FUN_00113b98",
                "FUN_0010c2d2"
            ],
            "code": "\nvoid initialize_memory_00112904(undefined4 value1,undefined4 value2)\n\n{\n  undefined4 *allocated_memory;\n  \n  allocated_memory = (undefined4 *)xmalloc(0x18);\n  *allocated_memory = value1;\n  allocated_memory[1] = value2;\n  *(undefined (*) [16])(allocated_memory + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "current_name": "initialize_memory_00112904",
            "entrypoint": "0x00112904",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112904": "initialize_memory_00112904",
                "param_1": "value1",
                "param_2": "value2",
                "puVar1": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112925": {
            "additional_data": {
                "FUN_00112925": {
                    "1": "initialize_struct",
                    "10": "initialize_memory",
                    "2": "initialize_data",
                    "8": "initialize_data_structure"
                },
                "bVar5": {
                    "1": "byte_counter",
                    "2": "byte_val",
                    "3": "byte_value",
                    "4": "counter",
                    "6": "flag"
                },
                "lVar3": {
                    "1": "iteration",
                    "16": "loop_counter",
                    "2": "index",
                    "7": "counter"
                },
                "param_1": {
                    "1": "input_array",
                    "2": "memory_array",
                    "5": "array_ptr",
                    "9": "array_pointer"
                },
                "param_2": {
                    "1": "param_value2",
                    "13": "value",
                    "3": "param_value",
                    "6": "param2"
                },
                "param_3": {
                    "1": "param_b",
                    "22": "param3",
                    "3": "value2"
                },
                "param_4": {
                    "1": "param_c",
                    "22": "param4",
                    "3": "value3"
                },
                "pauVar2": {
                    "1": "existing_data_structure",
                    "3": "existing_array_ptr",
                    "4": "existing_memory",
                    "9": "existing_array"
                },
                "puVar1": {
                    "1": "array_pointer",
                    "2": "data",
                    "3": "new_array",
                    "4": "allocated_memory",
                    "5": "array"
                },
                "puVar4": {
                    "1": "temp_memory",
                    "2": "current_data",
                    "3": "current_element",
                    "6": "current_pointer"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_0010bc80",
                "FUN_00112996",
                "FUN_0010c05d"
            ],
            "code": "\nundefined4 *\ninitialize_array_00112925(undefined (**array_pointer) [16],undefined8 value,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 *array;\n  undefined (*existing_array) [16];\n  long loop_counter;\n  undefined4 *current_pointer;\n  byte flag;\n  \n  flag = 0;\n  array = (undefined4 *)xmalloc(0x28);\n  current_pointer = array;\n  for (loop_counter = 10; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *current_pointer = 0;\n    current_pointer = current_pointer + (ulong)flag * -2 + 1;\n  }\n  existing_array = *array_pointer;\n  *(undefined8 *)(array + 2) = value;\n  array[5] = param3;\n  array[6] = param4;\n  if (existing_array == (undefined (*) [16])0x0) {\n    existing_array = (undefined (*) [16])xmalloc(0x10);\n    *existing_array = ZEXT816(0);\n    *array_pointer = existing_array;\n    *(undefined (**) [16])(*existing_array + 8) = existing_array;\n  }\n  **(undefined8 **)(*existing_array + 8) = array;\n  *(undefined4 **)(*existing_array + 8) = array;\n  return array;\n}\n\n",
            "current_name": "initialize_array_00112925",
            "entrypoint": "0x00112925",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112925": "initialize_array_00112925",
                "bVar5": "flag",
                "lVar3": "loop_counter",
                "param_1": "array_pointer",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "pauVar2": "existing_array",
                "puVar1": "array",
                "puVar4": "current_pointer",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112996": {
            "additional_data": {
                "FUN_00112925": {
                    "1": "get_text"
                },
                "FUN_00112996": {
                    "1": "process_namespace_file",
                    "25": "add_to_current_namespace"
                },
                "_stderr": {
                    "1": "error_output_stream",
                    "4": "error_stream"
                },
                "dcgettext": {
                    "1": "get_text",
                    "2": "get_debug_message",
                    "5": "get_error_message"
                },
                "fprintf": {
                    "1": "print_error",
                    "3": "print_error_message"
                },
                "lVar2": {
                    "1": "pointer_offset",
                    "10": "offset",
                    "2": "file_offset",
                    "3": "namespace_ptr",
                    "4": "temp_var"
                },
                "param_1": {
                    "1": "namespace_struct",
                    "2": "arg1",
                    "3": "file",
                    "4": "file_ptr",
                    "5": "file_pointer",
                    "7": "namespace_ptr"
                },
                "param_2": {
                    "1": "arg1",
                    "10": "param2",
                    "13": "param_2",
                    "2": "arg2",
                    "3": "param1"
                },
                "param_3": {
                    "1": "param3_address",
                    "11": "param3",
                    "13": "param_3",
                    "2": "arg3",
                    "3": "param2"
                },
                "uVar1": {
                    "1": "translated_message",
                    "2": "error_message",
                    "23": "result",
                    "4": "return_value"
                }
            },
            "called": [
                "dcgettext",
                "FUN_00112925",
                "fprintf"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\n\n\nundefined8 add_to_current_namespace_00112996(long namespace_ptr,undefined8 param_2,undefined8 param_3)\n\n{\n  undefined8 result;\n  long offset;\n  \n  if ((*(long *)(namespace_ptr + 8) != 0) && (*(long *)(namespace_ptr + 0x10) != 0)) {\n    offset = *(long *)(namespace_ptr + 0x10) + 0x10;\n    if (*(long *)(namespace_ptr + 0x20) != 0) {\n      offset = *(long *)(namespace_ptr + 0x20) + 0x28;\n    }\n    result = FUN_00112925(offset,param_2,param_3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace_00112996: no current file\",5);\n  fprintf(error_stream,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "current_name": "add_to_current_namespace_00112996",
            "entrypoint": "0x00112996",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112996": "add_to_current_namespace_00112996",
                "_stderr": "error_stream",
                "dcgettext": "get_error_message",
                "fprintf": "print_error_message",
                "lVar2": "offset",
                "param_1": "namespace_ptr",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001129f4": {
            "additional_data": {
                "((undefined8 *)*puVar1)[1]": {
                    "1": "extracted_value"
                },
                "(param_1 != piVar2) && (param_1 = piVar2, piVar2 != (int *)0x0)": {
                    "1": "continue_loop"
                },
                "(undefined8 *)*puVar1": {
                    "1": "casted_ptr"
                },
                "*(undefined8 *)(**(long **)(param_1 + 4) + 8)": {
                    "1": "extracted_value"
                },
                "**(long **)(param_1 + 4)": {
                    "1": "dereferenced_long_ptr"
                },
                "FUN_001129f4": {
                    "1": "reverse_and_get_value",
                    "2": "extract_data",
                    "4": "extract_return_value",
                    "6": "extract_value_from_binary"
                },
                "param_1": {
                    "1": "binary_data",
                    "16": "input_array",
                    "2": "data",
                    "3": "array"
                },
                "param_1 + 4": {
                    "1": "array_element"
                },
                "piVar2": {
                    "1": "array_element",
                    "2": "pointer_2",
                    "4": "current_pointer",
                    "6": "current_ptr"
                },
                "puVar1": {
                    "1": "ptr_to_array_ptr",
                    "2": "array_ptr",
                    "3": "pointer_to_array",
                    "7": "array_pointer"
                }
            },
            "called": [
                "FUN_001129f4"
            ],
            "calling": [
                "FUN_001129f4",
                "FUN_0010b0fa",
                "FUN_00112b6e",
                "FUN_0010d559",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 extract_value_from_binary_001129f4(int *input_array)\n\n{\n  undefined8 *array_pointer;\n  int *current_ptr;\n  \n  do {\n    if (*input_array != 1) {\n      if (1 < *input_array - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(input_array + 4) + 8);\n    }\n    array_pointer = (undefined8 *)(input_array + 4);\n    current_ptr = **(int ***)(undefined8 *)*array_pointer;\n  } while ((input_array != current_ptr) && (input_array = current_ptr, current_ptr != (int *)0x0));\n  return ((undefined8 *)*array_pointer)[1];\n}\n\n",
            "current_name": "extract_value_from_binary_001129f4",
            "entrypoint": "0x001129f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001129f4": "extract_value_from_binary_001129f4",
                "param_1": "input_array",
                "piVar2": "current_ptr",
                "puVar1": "array_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112a33": {
            "additional_data": {
                "FUN_0010bd62": {
                    "1": "reverse_something_else",
                    "3": "perform_operation"
                },
                "FUN_0010c05d": {
                    "1": "calculate_result",
                    "2": "calculate_value"
                },
                "FUN_0010c218": {
                    "1": "execute_function3",
                    "3": "check_value"
                },
                "FUN_0010c6be": {
                    "1": "get_type_value",
                    "2": "allocate_memory",
                    "3": "get_pointer"
                },
                "FUN_0010da0b": {
                    "1": "copy_to_output",
                    "5": "allocate_memory"
                },
                "FUN_00112a33": {
                    "1": "check_param",
                    "2": "execute_operation",
                    "3": "process_parameter",
                    "4": "process_data",
                    "6": "process_input",
                    "7": "process_param"
                },
                "lVar2": {
                    "1": "temp_var",
                    "16": "return_value",
                    "3": "temp",
                    "4": "value",
                    "5": "result"
                },
                "param_1": {
                    "1": "data",
                    "13": "param1",
                    "3": "input1",
                    "4": "arg1"
                },
                "param_2": {
                    "1": "input_data",
                    "13": "param2",
                    "2": "data",
                    "3": "input2",
                    "4": "arg2"
                },
                "param_3": {
                    "1": "data",
                    "13": "param3",
                    "3": "input3",
                    "4": "arg3"
                },
                "param_4": {
                    "1": "type",
                    "11": "param4",
                    "2": "param_type",
                    "3": "input_type",
                    "4": "opcode"
                },
                "param_5": {
                    "1": "long_param2",
                    "15": "param5",
                    "4": "arg5",
                    "5": "param1"
                },
                "param_6": {
                    "1": "func_param2",
                    "15": "param6",
                    "4": "arg6",
                    "5": "param2"
                },
                "param_7": {
                    "1": "command_flag",
                    "15": "param7",
                    "2": "param_flag",
                    "3": "flags"
                },
                "plVar3": {
                    "1": "output_ptr",
                    "2": "return_value_ptr",
                    "3": "pointer",
                    "5": "ptr_return_value"
                },
                "switchD_00112a73_caseD_2": {
                    "1": "handle_case2"
                },
                "uVar1": {
                    "23": "result",
                    "7": "return_value"
                }
            },
            "called": [
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_0010bd62",
                "FUN_0010da0b",
                "FUN_0010c05d"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nbool process_param_00112a33(undefined8 param1,long param2,undefined8 param3,byte param4,undefined8 param5\n                 ,undefined8 param6,uint param7)\n\n{\n  undefined result;\n  long return_value;\n  long *result_pointer;\n  \n  if (param4 < 0x12) {\n    if (param4 != 0) {\n      switch(param4) {\n      case 1:\n        result = FUN_0010c05d(param5,*(undefined8 *)(param2 + 8),param6,4,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 2:\n        goto handle_case2;\n      case 3:\n        result = FUN_0010c05d(param5,*(undefined8 *)(param2 + 8),param6,(param7 & 0xff) + 2,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 4:\n        result = FUN_0010c05d(param5,*(undefined8 *)(param2 + 8),param6,5,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 9:\n        result = FUN_0010bd62(param5,*(undefined8 *)(param2 + 8),param6,1,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        return_value = FUN_0010c6be(param5,*(undefined8 *)(param2 + 8));\n        if (return_value == 0) {\n          return false;\n        }\n        result_pointer = (long *)FUN_0010da0b(param1,param3);\n        *result_pointer = return_value;\n        break;\n      case 0xd:\n        return_value = FUN_0010c218(param5,*(undefined8 *)(param2 + 8));\n        return return_value != 0;\n      case 0x11:\n        result = FUN_0010bd62(param5,*(undefined8 *)(param2 + 8),param6,2,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      }\n    }\n  }\n  else if (param4 == 0x7f) {\nhandle_case2:\n    result = FUN_0010c05d(param5,*(undefined8 *)(param2 + 8),param6,1,\n                         *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "current_name": "process_param_00112a33",
            "entrypoint": "0x00112a33",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112a33": "process_param_00112a33",
                "lVar2": "return_value",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "plVar3": "result_pointer",
                "switchD_00112a73_caseD_2": "handle_case2",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112b6e": {
            "additional_data": {
                "FUN_001129f4": {
                    "1": "get_real_type"
                },
                "FUN_00112b6e": {
                    "1": "find_circular_debug_info",
                    "21": "get_real_type",
                    "6": "find_real_type"
                },
                "__format": {
                    "1": "error_message_format",
                    "2": "error_message",
                    "26": "format_string"
                },
                "__stream": {
                    "1": "output_stream"
                },
                "_stderr": {
                    "1": "standard_error"
                },
                "bVar5": {
                    "1": "circular_check",
                    "28": "is_circular"
                },
                "iVar1": {
                    "1": "type",
                    "3": "input_value",
                    "4": "type_value"
                },
                "local_10": {
                    "1": "local_input_value",
                    "2": "local_input_array",
                    "5": "temp_input_array"
                },
                "local_18": {
                    "1": "temp_info",
                    "2": "debug_info_copy",
                    "3": "visited_debug_info",
                    "4": "current_debug_info",
                    "5": "temp_debug_info"
                },
                "param_1": {
                    "1": "type_info",
                    "14": "input_array",
                    "2": "type_pointer",
                    "3": "type"
                },
                "param_2": {
                    "1": "debug_info_list",
                    "21": "debug_info",
                    "5": "debug_info_array"
                },
                "piVar3": {
                    "1": "result_ptr",
                    "17": "result",
                    "4": "result_pointer",
                    "8": "result_array"
                },
                "plVar4": {
                    "1": "debug_ptr",
                    "17": "current_debug_info",
                    "2": "current"
                },
                "uVar2": {
                    "1": "error_msg",
                    "7": "error_message"
                }
            },
            "called": [
                "FUN_001129f4",
                "dcgettext",
                "FUN_00112b6e",
                "fprintf"
            ],
            "calling": [
                "FUN_00112c1f",
                "FUN_00113b1e",
                "FUN_00112b6e",
                "FUN_0010922b",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nint * get_real_type_00112b6e(int *input_array,long *debug_info)\n\n{\n  int first_element;\n  undefined8 error_message;\n  char *format_string;\n  int *result;\n  long *current_debug_info;\n  bool is_circular;\n  long *temp_debug_info;\n  int *temp_input_array;\n  \n  first_element = *input_array;\n  if ((first_element != 1) && (1 < first_element - 0x16U)) {\n    return input_array;\n  }\n  current_debug_info = debug_info;\n  while (current_debug_info != (long *)0x0) {\n    if ((input_array == (int *)current_debug_info[1]) ||\n       (is_circular = current_debug_info == (long *)*current_debug_info, current_debug_info = (long *)*current_debug_info, is_circular)) {\n      error_message = FUN_001129f4(input_array,\"debug_get_real_type_00112b6e: circular debug information for %s\\n\");\n      format_string = (char *)dcgettext(0);\n      fprintf(error_output,format_string,error_message);\n      return (int *)0x0;\n    }\n  }\n  temp_debug_info = debug_info;\n  temp_input_array = input_array;\n  if (first_element - 0x16U < 2) {\n    result = (int *)get_real_type_00112b6e((*(undefined8 **)(input_array + 4))[1],&temp_debug_info);\n    return result;\n  }\n  result = *(int **)**(undefined8 **)(input_array + 4);\n  if (input_array == result) {\n    return input_array;\n  }\n  if (result == (int *)0x0) {\n    return input_array;\n  }\n  result = (int *)get_real_type_00112b6e(result,&temp_debug_info);\n  return result;\n}\n\n",
            "current_name": "get_real_type_00112b6e",
            "entrypoint": "0x00112b6e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112b6e": "get_real_type_00112b6e",
                "__format": "format_string",
                "_stderr": "error_output",
                "bVar5": "is_circular",
                "iVar1": "first_element",
                "local_10": "temp_input_array",
                "local_18": "temp_debug_info",
                "param_1": "input_array",
                "param_2": "debug_info",
                "piVar3": "result",
                "plVar4": "current_debug_info",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112c1f": {
            "additional_data": {
                "FUN_00109bbb": {
                    "1": "check_flag_success"
                },
                "FUN_00109d3e": {
                    "1": "analyze_data"
                },
                "FUN_00109d5c": {
                    "1": "write_class_type"
                },
                "FUN_00109d97": {
                    "1": "write_end_of_entity"
                },
                "FUN_00109dfe": {
                    "1": "write_built_in_type"
                },
                "FUN_00109e76": {
                    "1": "process_data_type"
                },
                "FUN_0010a083": {
                    "1": "write_void"
                },
                "FUN_0010a0a0": {
                    "1": "write_end_namespace"
                },
                "FUN_0010a0bd": {
                    "1": "print_message"
                },
                "FUN_0010a0d3": {
                    "1": "print_error_message"
                },
                "FUN_0010a0e9": {
                    "1": "write_member_pointer"
                },
                "FUN_0010a181": {
                    "1": "process_conversion"
                },
                "FUN_0010a2b9": {
                    "1": "write_enum_value"
                },
                "FUN_0010a377": {
                    "1": "process_result"
                },
                "FUN_0010a424": {
                    "1": "write_array"
                },
                "FUN_0010a69a": {
                    "1": "check_flag"
                },
                "FUN_0010a77a": {
                    "1": "write_namespace"
                },
                "FUN_0010a83e": {
                    "1": "write_class"
                },
                "FUN_0010a94e": {
                    "1": "write_function_pointer"
                },
                "FUN_0010aa53": {
                    "1": "write_enum_const"
                },
                "FUN_0010ab4d": {
                    "1": "process_iteration"
                },
                "FUN_0010add5": {
                    "1": "write_unimplemented"
                },
                "FUN_0010adf2": {
                    "1": "write_nullptr"
                },
                "FUN_0010ae0e": {
                    "1": "calculate_result_with_flag"
                },
                "FUN_0010b800": {
                    "1": "process_data_type_with_flag"
                },
                "FUN_0010b948": {
                    "1": "write_enumeration"
                },
                "FUN_0010ba08": {
                    "1": "process_data"
                },
                "FUN_0010bba1": {
                    "1": "process_type"
                },
                "FUN_0010c7a0": {
                    "1": "process_parameter_data"
                },
                "FUN_0010e453": {
                    "1": "write_data"
                },
                "FUN_0010e5db": {
                    "1": "calculate_result"
                },
                "FUN_00112b6e": {
                    "1": "find_memory_allocation"
                },
                "FUN_00112c1f": {
                    "1": "decode_binary_function",
                    "2": "process_debug_info",
                    "3": "write_type"
                },
                "FUN_00112d8e": {
                    "1": "process_case1"
                },
                "abort": {
                    "1": "abort_program"
                },
                "bVar14": {
                    "1": "is_self_referencing",
                    "2": "bool_flag",
                    "9": "bool_var"
                },
                "cVar5": {
                    "1": "temp_char_value",
                    "11": "char_var",
                    "2": "flag",
                    "3": "char_variable",
                    "7": "result"
                },
                "dcgettext": {
                    "1": "get_locale"
                },
                "fprintf": {
                    "1": "print_formatted_output"
                },
                "iVar9": {
                    "1": "i_var",
                    "2": "index",
                    "3": "var2",
                    "5": "int_var"
                },
                "lVar2": {
                    "1": "temp_long_value",
                    "2": "var",
                    "3": "long_var"
                },
                "local_3c": {
                    "1": "var2",
                    "3": "local_var_3c",
                    "4": "local_var3c",
                    "7": "local_var"
                },
                "param_1": {
                    "1": "input_data",
                    "11": "info",
                    "2": "input1",
                    "4": "param1"
                },
                "param_2": {
                    "1": "config",
                    "2": "input2",
                    "4": "param2",
                    "7": "name"
                },
                "param_3": {
                    "1": "types",
                    "2": "debug_object",
                    "4": "param3",
                    "5": "type"
                },
                "param_4": {
                    "1": "buffer",
                    "2": "base",
                    "3": "base_type",
                    "6": "param4"
                },
                "piVar6": {
                    "1": "ptr_val",
                    "2": "ptr4",
                    "3": "ptr3"
                },
                "plVar1": {
                    "1": "pointer_var1",
                    "2": "pointer_to_var1",
                    "3": "ptr",
                    "4": "pointer1"
                },
                "puVar3": {
                    "1": "sub_type_ptr",
                    "2": "ptr2",
                    "3": "pointer2",
                    "5": "ptr1"
                },
                "puVar4": {
                    "1": "undefined_ptr4",
                    "2": "ptr3",
                    "3": "pointer3",
                    "5": "ptr2"
                },
                "stderr": {
                    "1": "stderr"
                },
                "stdout": {
                    "1": "stdout"
                },
                "uVar10": {
                    "1": "output_value3",
                    "2": "var3",
                    "3": "param2"
                },
                "uVar11": {
                    "1": "undefined_var11",
                    "2": "var4",
                    "3": "param3"
                },
                "uVar12": {
                    "1": "loop_counter",
                    "2": "var5",
                    "3": "counter"
                },
                "uVar13": {
                    "1": "uint_var_2",
                    "2": "value",
                    "3": "var6"
                },
                "uVar14": {
                    "1": "uvar14"
                },
                "uVar17": {
                    "1": "type_id"
                },
                "uVar18": {
                    "1": "base_id"
                },
                "uVar19": {
                    "1": "field_name"
                },
                "uVar20": {
                    "1": "accessibility"
                },
                "uVar21": {
                    "1": "is_virtual_function"
                },
                "uVar22": {
                    "1": "virtual_function_index"
                },
                "uVar23": {
                    "1": "cv_qualifier"
                },
                "uVar24": {
                    "1": "cv_qualification"
                },
                "uVar25": {
                    "1": "member_name"
                },
                "uVar7": {
                    "1": "var7",
                    "3": "output",
                    "8": "return_value",
                    "9": "result"
                },
                "uVar8": {
                    "1": "uint_var1",
                    "2": "var1",
                    "3": "param1"
                },
                "uVar9": {
                    "1": "int_var"
                }
            },
            "called": [
                "FUN_00112c1f",
                "FUN_00109d5c",
                "FUN_0010a83e",
                "FUN_00112b6e",
                "FUN_00109e76",
                "FUN_0010bba1",
                "FUN_0010a0d3",
                "FUN_0010a424",
                "FUN_0010ba08",
                "FUN_0010e453",
                "FUN_0010add5",
                "FUN_0010a083",
                "__assert_fail",
                "FUN_0010e5db",
                "FUN_0010a181",
                "FUN_0010aa53",
                "FUN_00109d3e",
                "FUN_0010a377",
                "FUN_0010a2b9",
                "FUN_0010a69a",
                "FUN_0010a77a",
                "dcgettext",
                "FUN_0010b800",
                "FUN_0010a0e9",
                "FUN_0010a94e",
                "abort",
                "FUN_00109d97",
                "FUN_0010a0bd",
                "FUN_0010ab4d",
                "FUN_0010adf2",
                "FUN_0010a0a0",
                "FUN_0010b948",
                "FUN_00109bbb",
                "FUN_0010c7a0",
                "fprintf",
                "FUN_0010ae0e",
                "FUN_00109dfe"
            ],
            "calling": [
                "FUN_00112c1f",
                "FUN_001135a5"
            ],
            "code": "\n\n\nundefined8 write_type_00112c1f(ulong info,undefined8 name,int *type,long param4)\n\n{\n  long *pointer1;\n  long variable1;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  char char_var;\n  int *pointer4;\n  undefined8 result;\n  undefined8 param1;\n  int int_var;\n  undefined4 param2;\n  undefined8 param3;\n  ulong ulong_var;\n  uint var6;\n  bool bool_var;\n  uint local_var;\n  \n  ulong_var = info;\nLAB_00112c39:\n  if (type != (int *)0x0) {\n    int_var = *type;\n    if (int_var - 0x16U < 2) {\n      do {\n        pointer1 = *(long **)(type + 4);\n        var6 = *(uint *)(info + 0x30);\n        ulong_var = (ulong)var6;\n        variable1 = *pointer1;\n        if (*(uint *)(variable1 + 0x10) == var6) {\n          if (int_var == 0x16) {\n            result = FUN_0010bba1(name,*(undefined8 *)(variable1 + 8));\n            return result;\n          }\nLAB_00112c94:\n          pointer4 = (int *)FUN_00112b6e(type,0);\n          if (pointer4 == (int *)0x0) goto LAB_00112dd6;\n          if ((*pointer4 - 7U < 4) && (*(long *)(pointer4 + 4) != 0)) {\n            if ((*(uint *)(*(long *)(pointer4 + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n               (char_var = FUN_0010c7a0(info,*(undefined8 *)(**(long **)(type + 4) + 8),pointer4),\n               char_var == '\\0')) {\n              return 0;\n            }\n            var6 = *(uint *)(*(long *)(pointer4 + 4) + 0xc);\n          }\n          else {\n            var6 = 0;\n          }\n          int_var = *pointer4;\n          result = *(undefined8 *)(**(long **)(type + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (int_var == 0x17) {\n          if (variable1 != param4) goto LAB_00112c94;\n          *(uint *)(param4 + 0x10) = var6;\n          param4 = *pointer1;\n          type = (int *)pointer1[1];\n          goto LAB_00112c39;\n        }\n        if (param4 != 0) {\n          *(uint *)(param4 + 0x10) = var6;\n        }\n        type = (int *)pointer1[1];\n        if (type == (int *)0x0) goto LAB_00112dd6;\n        int_var = *type;\n        param4 = 0;\n      } while (int_var - 0x16U < 2);\nLAB_00112d74:\n      result = 0;\n    }\n    else {\n      if (param4 == 0) goto LAB_00112d74;\n      *(undefined4 *)(param4 + 0x10) = *(undefined4 *)(info + 0x30);\n      if (*(int *)(param4 + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type_00112c1f\");\n      }\n      result = *(undefined8 *)(param4 + 8);\n    }\n    switch(int_var) {\n    case 0:\n      result = dcgettext(0,\"debug_write_type_00112c1f: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      result = FUN_00109dfe(name);\n      return result;\n    case 3:\n      result = FUN_0010b800(name,type[1],*(undefined *)(type + 4));\n      return result;\n    case 4:\n      result = FUN_0010b948(name,type[1]);\n      return result;\n    case 5:\n      result = FUN_00109e76(name,type[1]);\n      return result;\n    case 6:\n      result = FUN_00109d3e(name,type[1]);\n      return result;\n    case 7:\n    case 8:\n      if (*(long *)(type + 4) != 0) {\n        if ((*(uint *)(*(long *)(type + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n           (char_var = FUN_0010c7a0(info,result,type), char_var == '\\0')) {\n          return 0;\n        }\n        variable1 = *(long *)(type + 4);\n        if (*(int *)(info + 0x30) == *(int *)(variable1 + 8)) {\n          var6 = *(uint *)(variable1 + 0xc);\n          if (var6 <= *(uint *)(info + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type_00112c1f\");\n          }\n          int_var = *type;\nLAB_00112ed2:\n          result = FUN_00109d5c(name,result,var6,int_var);\n          return result;\n        }\n        *(int *)(variable1 + 8) = *(int *)(info + 0x30);\n      }\n      param2 = 0;\n      if (*(long *)(type + 4) != 0) {\n        param2 = *(undefined4 *)(*(long *)(type + 4) + 0xc);\n      }\n      char_var = FUN_0010a69a(name,result,param2,*type == 7,type[1]);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(type + 4) != (long *)0x0) && (ulong_var = 0, **(long **)(type + 4) != 0)) {\n        while( true ) {\n          ptr2 = *(undefined8 **)(**(long **)(type + 4) + ulong_var * 8);\n          if (ptr2 == (undefined8 *)0x0) break;\n          char_var = write_type_00112c1f(info,name,ptr2[1],0);\n          if (char_var == '\\0') {\n            return 0;\n          }\n          char_var = FUN_0010ba08(name,*ptr2,*(undefined4 *)(ptr2 + 3),\n                               *(undefined4 *)((long)ptr2 + 0x1c),*(undefined4 *)(ptr2 + 2));\n          if (char_var == '\\0') {\n            return 0;\n          }\n          ulong_var = (ulong)((int)ulong_var + 1);\n        }\n      }\n      result = FUN_0010a77a(name);\n      return result;\n    case 9:\n    case 10:\n      if (*(long *)(type + 4) == 0) {\n        var6 = 0;\n        pointer4 = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(type + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n           (ulong_var = info, char_var = FUN_0010c7a0(info,result,type), char_var == '\\0')) {\n          return 0;\n        }\n        variable1 = *(long *)(type + 4);\n        var6 = *(uint *)(variable1 + 0xc);\n        if (*(int *)(info + 0x30) == *(int *)(variable1 + 8)) {\n          if (var6 <= *(uint *)(info + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          int_var = *type;\n          goto LAB_00112ed2;\n        }\n        pointer4 = *(int **)(variable1 + 0x20);\n        *(int *)(variable1 + 8) = *(int *)(info + 0x30);\n        if (((pointer4 != (int *)0x0) && (type != pointer4)) &&\n           (ulong_var = info, char_var = write_type_00112c1f(info,name,pointer4,0), char_var == '\\0')) {\n          return 0;\n        }\n      }\n      char_var = FUN_0010a83e(name,result,var6,*type == 9,type[1],pointer4 != (int *)0x0,\n                           type == pointer4,ulong_var);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      if (*(long **)(type + 4) != (long *)0x0) {\n        var6 = 0;\n        if (**(long **)(type + 4) != 0) {\n          while (ptr2 = *(undefined8 **)(**(long **)(type + 4) + (ulong)var6 * 8),\n                ptr2 != (undefined8 *)0x0) {\n            char_var = write_type_00112c1f(info,name,ptr2[1],0);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)ptr2 + 0x14) == '\\0') {\n              char_var = FUN_0010ba08(name,*ptr2,*(undefined4 *)(ptr2 + 3));\n            }\n            else {\n              char_var = FUN_0010a94e(name,*ptr2,ptr2[3]);\n            }\n            if (char_var == '\\0') {\n              return 0;\n            }\n            var6 = var6 + 1;\n          }\n        }\n        var6 = 0;\n        if (*(long *)(*(long *)(type + 4) + 0x10) != 0) {\n          while (ptr2 = *(undefined8 **)\n                           (*(long *)(*(long *)(type + 4) + 0x10) + (ulong)var6 * 8),\n                ptr2 != (undefined8 *)0x0) {\n            char_var = write_type_00112c1f(info,name,*ptr2,0);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            char_var = FUN_0010aa53(name,*(undefined4 *)(ptr2 + 1),\n                                 *(undefined *)((long)ptr2 + 0xc));\n            if (char_var == '\\0') {\n              return 0;\n            }\n            var6 = var6 + 1;\n          }\n        }\n        local_var = 0;\n        if (*(long *)(*(long *)(type + 4) + 0x18) != 0) {\n          while (ptr2 = *(undefined8 **)\n                           (*(long *)(*(long *)(type + 4) + 0x18) + (ulong)local_var * 8),\n                ptr2 != (undefined8 *)0x0) {\n            char_var = FUN_0010ab4d(name,*ptr2);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            var6 = 0;\n            while (ptr1 = *(undefined8 **)(ptr2[1] + (ulong)var6 * 8),\n                  ptr1 != (undefined8 *)0x0) {\n              if ((ptr1[4] != 0) &&\n                 (char_var = write_type_00112c1f(info,name,ptr1[4],0), char_var == '\\0')) {\n                return 0;\n              }\n              char_var = write_type_00112c1f(info,name,ptr1[1],0);\n              if (char_var == '\\0') {\n                return 0;\n              }\n              if (ptr1[3] == -1) {\n                char_var = FUN_0010adf2(name,*ptr1,*(undefined4 *)(ptr1 + 2),\n                                     *(undefined *)((long)ptr1 + 0x14),\n                                     *(undefined *)((long)ptr1 + 0x15));\n              }\n              else {\n                char_var = FUN_0010add5(name);\n              }\n              if (char_var == '\\0') {\n                return 0;\n              }\n              var6 = var6 + 1;\n            }\n            char_var = FUN_00109bbb(name);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            local_var = local_var + 1;\n          }\n        }\n      }\n      result = FUN_0010ae0e(name);\n      return result;\n    case 0xb:\n      ptr2 = *(undefined8 **)(type + 4);\n      if (ptr2 == (undefined8 *)0x0) {\n        param1 = 0;\n        param3 = 0;\n      }\n      else {\n        param1 = ptr2[1];\n        param3 = *ptr2;\n      }\n      result = FUN_0010e453(name,result,param3,param1);\n      return result;\n    case 0xc:\n      char_var = write_type_00112c1f(info,name,*(undefined8 *)(type + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a083(name);\n      return result;\n    case 0xd:\n      char_var = write_type_00112c1f(info,name,**(undefined8 **)(type + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      ulong_var = 0;\n      if (*(long *)(*(long *)(type + 4) + 8) == 0) {\n        ulong_var = 0xffffffff;\n      }\n      else {\n        while (variable1 = *(long *)(*(long *)(*(long *)(type + 4) + 8) + ulong_var * 8), variable1 != 0) {\n          ulong_var = ulong_var + 1;\n          char_var = write_type_00112c1f(info,name,variable1,0);\n          if (char_var == '\\0') {\n            return 0;\n          }\n        }\n        ulong_var = ulong_var & 0xffffffff;\n      }\n      result = FUN_0010e5db(name,ulong_var,*(undefined *)(*(long *)(type + 4) + 0x10));\n      return result;\n    case 0xe:\n      char_var = write_type_00112c1f(info,name,*(undefined8 *)(type + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a0a0(name);\n      return result;\n    case 0xf:\n      char_var = write_type_00112c1f(info,name,**(undefined8 **)(type + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a0e9(name,*(undefined8 *)(*(long *)(type + 4) + 8),\n                           *(undefined8 *)(*(long *)(type + 4) + 0x10));\n      return result;\n    case 0x10:\n      char_var = write_type_00112c1f(info,name,**(undefined8 **)(type + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      char_var = write_type_00112c1f(info,name,*(undefined8 *)(*(long *)(type + 4) + 8),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      variable1 = *(long *)(type + 4);\n      result = FUN_0010a181(name,*(undefined8 *)(variable1 + 0x10),*(undefined8 *)(variable1 + 0x18),\n                           *(undefined *)(variable1 + 0x20));\n      return result;\n    case 0x11:\n      char_var = write_type_00112c1f(info,name,**(undefined8 **)(type + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a2b9(name,*(undefined *)(*(long *)(type + 4) + 8));\n      return result;\n    case 0x12:\n      char_var = write_type_00112c1f(info,name,**(undefined8 **)(type + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      char_var = write_type_00112c1f(info,name,*(undefined8 *)(*(long *)(type + 4) + 8),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a377(name);\n      return result;\n    case 0x13:\n      char_var = write_type_00112c1f(info,name,**(undefined8 **)(type + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      ulong_var = 0;\n      if (*(long *)(*(long *)(type + 4) + 0x10) == 0) {\n        ulong_var = 0xffffffff;\n      }\n      else {\n        while (variable1 = *(long *)(*(long *)(*(long *)(type + 4) + 0x10) + ulong_var * 8), variable1 != 0)\n        {\n          ulong_var = ulong_var + 1;\n          char_var = write_type_00112c1f(info,name,variable1,0);\n          if (char_var == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(type + 4) + 8) != 0) &&\n         (char_var = write_type_00112c1f(info,name,*(long *)(*(long *)(type + 4) + 8),0),\n         char_var == '\\0')) {\n        return 0;\n      }\n      result = FUN_0010a424(name,*(long *)(*(long *)(type + 4) + 8) != 0,ulong_var & 0xffffffff,\n                           *(undefined *)(*(long *)(type + 4) + 0x18));\n      return result;\n    case 0x14:\n      char_var = write_type_00112c1f(info,name,*(undefined8 *)(type + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a0bd(name);\n      return result;\n    case 0x15:\n      char_var = write_type_00112c1f(info,name,*(undefined8 *)(type + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a0d3(name);\n      return result;\n    default:\n                    \n      abort_process();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  bool_var = *(int **)**(undefined8 **)(type + 4) == type;\n  type = *(int **)**(undefined8 **)(type + 4);\n  if (bool_var) {\nLAB_00112dd6:\n    result = FUN_00109d97(name);\n    return result;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "current_name": "write_type_00112c1f",
            "entrypoint": "0x00112c1f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112c1f": "write_type_00112c1f",
                "abort": "abort_process",
                "bVar14": "bool_var",
                "cVar5": "char_var",
                "dcgettext": "get_translation_string",
                "fprintf": "write_to_stream",
                "iVar9": "int_var",
                "lVar2": "variable1",
                "local_3c": "local_var",
                "param_1": "info",
                "param_2": "name",
                "param_3": "type",
                "param_4": "param4",
                "piVar6": "pointer4",
                "plVar1": "pointer1",
                "puVar3": "ptr1",
                "puVar4": "ptr2",
                "uVar10": "param2",
                "uVar11": "param3",
                "uVar12": "ulong_var",
                "uVar13": "var6",
                "uVar7": "result",
                "uVar8": "param1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001135a5": {
            "additional_data": {
                "FUN_00108f05": {
                    "1": "get_default_value"
                },
                "FUN_0010e6a8": {
                    "1": "perform_action1",
                    "3": "perform_operation1"
                },
                "FUN_0010e7c2": {
                    "1": "perform_operation_b",
                    "2": "perform_operation2"
                },
                "FUN_0010e842": {
                    "1": "execute_case_4",
                    "2": "perform_operation10"
                },
                "FUN_0010e8a9": {
                    "1": "execute_case_5"
                },
                "FUN_0010e918": {
                    "1": "perform_operation7"
                },
                "FUN_0010e9a0": {
                    "1": "perform_operation5",
                    "2": "perform_operation3"
                },
                "FUN_0010eafe": {
                    "1": "perform_operation_d",
                    "2": "perform_operation7"
                },
                "FUN_0010ebb0": {
                    "1": "perform_operation8"
                },
                "FUN_00112502": {
                    "1": "process_case3_sub_func3",
                    "2": "perform_operation6"
                },
                "FUN_00112c1f": {
                    "7": "check_condition"
                },
                "FUN_001135a5": {
                    "1": "process_request",
                    "10": "process_data",
                    "2": "execute_function",
                    "3": "process_function"
                },
                "FUN_00113a4d": {
                    "1": "perform_operation2",
                    "2": "perform_operation9"
                },
                "abort": {
                    "1": "terminate"
                },
                "cVar2": {
                    "1": "found_flag",
                    "14": "result",
                    "3": "condition"
                },
                "iVar1": {
                    "1": "some_int",
                    "10": "index",
                    "2": "status",
                    "3": "counter",
                    "4": "count"
                },
                "param_1": {
                    "1": "request_param1",
                    "15": "arg1",
                    "2": "input_param",
                    "4": "param1",
                    "6": "input1"
                },
                "param_2": {
                    "1": "input_param2",
                    "15": "arg2",
                    "2": "output_param",
                    "4": "param2",
                    "6": "input2"
                },
                "param_3": {
                    "1": "input_param3",
                    "13": "arg3",
                    "3": "function_data",
                    "4": "param3",
                    "5": "data"
                },
                "puVar4": {
                    "1": "pointer_variable1",
                    "2": "pointer1",
                    "3": "ptr_var1",
                    "6": "current_node",
                    "7": "ptr1"
                },
                "puVar5": {
                    "1": "node_list",
                    "2": "pointer2",
                    "3": "ptr_var2",
                    "8": "ptr2"
                },
                "uVar3": {
                    "1": "some_undefined8",
                    "16": "return_value",
                    "4": "output",
                    "9": "result"
                }
            },
            "called": [
                "FUN_0010ebb0",
                "FUN_00112c1f",
                "FUN_00108f05",
                "FUN_0010eafe",
                "FUN_0010e9a0",
                "abort",
                "FUN_0010e918",
                "FUN_0010e8a9",
                "FUN_00113a4d",
                "FUN_0010e842",
                "FUN_0010e7c2",
                "FUN_00112502",
                "FUN_0010e6a8"
            ],
            "calling": [
                "FUN_0011378f",
                "FUN_00113a4d"
            ],
            "code": "\nundefined8 process_data_001135a5(undefined8 arg1,undefined8 arg2,long arg3)\n\n{\n  int index;\n  char result;\n  undefined8 return_value;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  \n  if (6 < *(uint *)(arg3 + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(arg3 + 0x14)) {\n  case 0:\n    result = FUN_00112c1f(arg1,arg2,*(undefined8 *)(arg3 + 0x20),arg3);\n    if (result != '\\0') {\n      return_value = FUN_0010e6a8(arg2,*(undefined8 *)(arg3 + 8));\n      return return_value;\n    }\n    break;\n  case 1:\n    result = FUN_00112c1f(arg1,arg2,*(undefined8 *)(arg3 + 0x20),arg3);\n    if (result != '\\0') {\n      return_value = FUN_0010e7c2(arg2,*(undefined8 *)(arg3 + 8));\n      return return_value;\n    }\n    break;\n  case 2:\n    result = FUN_00112c1f(arg1,arg2,*(undefined8 *)(*(long *)(arg3 + 0x20) + 8),0);\n    if (result != '\\0') {\n      return_value = FUN_0010e9a0(arg2,*(undefined8 *)(arg3 + 8),**(undefined4 **)(arg3 + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(arg3 + 0x20) + 4));\n      return return_value;\n    }\n    break;\n  case 3:\n    ptr2 = *(undefined8 **)(arg3 + 0x20);\n    index = *(int *)(arg3 + 0x18);\n    return_value = *(undefined8 *)(arg3 + 8);\n    result = FUN_00112502(arg1,arg2,*(undefined8 *)(ptr2[2] + 0x18));\n    if (((result != '\\0') && (result = FUN_00112c1f(arg1,arg2,*ptr2,0), result != '\\0')) &&\n       (result = FUN_0010eafe(arg2,return_value,index == 2), result != '\\0')) {\n      for (ptr1 = (undefined8 *)ptr2[1]; ptr1 != (undefined8 *)0x0;\n          ptr1 = (undefined8 *)*ptr1) {\n        result = FUN_00112c1f(arg1,arg2,ptr1[2],0);\n        if (result == '\\0') {\n          return 0;\n        }\n        result = FUN_0010ebb0(arg2,ptr1[1],*(undefined4 *)(ptr1 + 3));\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      ptr2 = (undefined8 *)ptr2[2];\n      while( true ) {\n        if (ptr2 == (undefined8 *)0x0) {\n          return_value = FUN_00108f05(arg2);\n          return return_value;\n        }\n        result = FUN_00113a4d(arg1,arg2,ptr2);\n        if (result == '\\0') break;\n        ptr2 = (undefined8 *)*ptr2;\n      }\n    }\n    break;\n  case 4:\n    return_value = FUN_0010e842(arg2,*(undefined8 *)(arg3 + 8),*(undefined8 *)(arg3 + 0x20));\n    return return_value;\n  case 5:\n    return_value = FUN_0010e8a9(*(undefined8 *)(arg3 + 0x20),arg2,*(undefined8 *)(arg3 + 8));\n    return return_value;\n  case 6:\n    result = FUN_00112c1f(arg1,arg2,**(undefined8 **)(arg3 + 0x20),0);\n    if (result != '\\0') {\n      return_value = FUN_0010e918(arg2,*(undefined8 *)(arg3 + 8),\n                           *(undefined8 *)(*(long *)(arg3 + 0x20) + 8));\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_001135a5",
            "entrypoint": "0x001135a5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001135a5": "process_data_001135a5",
                "cVar2": "result",
                "iVar1": "index",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "puVar4": "ptr1",
                "puVar5": "ptr2",
                "uVar3": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011378f": {
            "additional_data": {
                "FUN_0010bb52": {
                    "1": "allocate_memory2",
                    "2": "initialize_hash_table"
                },
                "FUN_0010e2f0": {
                    "1": "process_data3"
                },
                "FUN_0010e439": {
                    "1": "perform_operation_2"
                },
                "FUN_00112502": {
                    "1": "process_data2"
                },
                "FUN_001135a5": {
                    "1": "process_data"
                },
                "FUN_0011378f": {
                    "1": "process_binary_data",
                    "2": "analyze_binary",
                    "3": "extract_and_process_data"
                },
                "FUN_00119ed0": {
                    "1": "print_error_message"
                },
                "__dest": {
                    "1": "destination_str",
                    "2": "dest_str",
                    "3": "dest_string",
                    "5": "destination"
                },
                "auVar1": {
                    "1": "temp_buffer",
                    "11": "temp_array",
                    "2": "temp_arr",
                    "3": "temp_var"
                },
                "bVar12": {
                    "1": "temp_byte",
                    "11": "byte_var",
                    "2": "byte_value",
                    "3": "flag"
                },
                "bfd_errmsg": {
                    "1": "error_message",
                    "2": "get_error_message"
                },
                "bfd_get_error": {
                    "3": "get_error"
                },
                "bfd_hash_table_init": {
                    "1": "initialize_hash_table"
                },
                "cVar2": {
                    "1": "temp_char",
                    "2": "char_result",
                    "3": "char_variable",
                    "4": "status",
                    "8": "char_var"
                },
                "lVar7": {
                    "1": "var",
                    "12": "loop_counter",
                    "2": "count",
                    "4": "loop_var"
                },
                "local_1e8": {
                    "1": "local_arr3",
                    "2": "local_array3"
                },
                "local_1f0": {
                    "1": "local_int7",
                    "2": "var_1f0"
                },
                "local_1f8": {
                    "1": "temp_var6",
                    "2": "var_1f8",
                    "3": "var5"
                },
                "local_220": {
                    "1": "temp_array3",
                    "2": "local_array2"
                },
                "local_228": {
                    "1": "local_var5",
                    "2": "var_228"
                },
                "local_238": {
                    "1": "local_array_var_1",
                    "2": "local_variable_7"
                },
                "local_248": {
                    "1": "temp_output_1",
                    "2": "local_variable_3",
                    "3": "local_var1",
                    "5": "var1"
                },
                "local_250": {
                    "1": "local_data_1",
                    "2": "local_long1"
                },
                "local_258": {
                    "1": "local_data_1",
                    "2": "param_1_copy",
                    "4": "local_ptr1"
                },
                "local_58": {
                    "1": "flag5",
                    "3": "var10"
                },
                "local_60": {
                    "1": "local_60",
                    "3": "var9"
                },
                "local_68": {
                    "1": "another_constant",
                    "3": "var8"
                },
                "local_78": {
                    "1": "local_78",
                    "2": "local_array5"
                },
                "local_a0": {
                    "1": "temp_array3",
                    "2": "local_array4"
                },
                "param_1": {
                    "1": "input1",
                    "2": "input_1",
                    "3": "input_param_1"
                },
                "param_2": {
                    "1": "input2",
                    "2": "output_array",
                    "3": "output_ptr"
                },
                "param_3": {
                    "1": "length_ptr",
                    "2": "output_param_1"
                },
                "param_4": {
                    "1": "temp_array_ptr",
                    "2": "output_data_2"
                },
                "param_5": {
                    "1": "output_ptr3",
                    "2": "output_param_3"
                },
                "param_6": {
                    "1": "temp_array3",
                    "2": "output_data_4",
                    "4": "result_ptr"
                },
                "plVar11": {
                    "1": "pointer_list",
                    "2": "pointer_variable_5",
                    "3": "long_ptr"
                },
                "puVar10": {
                    "1": "nested_ptr2",
                    "2": "linked_list_ptr",
                    "3": "pointer_variable_4"
                },
                "puVar5": {
                    "1": "dest_ptr",
                    "2": "ptr1",
                    "3": "pointer_variable",
                    "4": "ptr",
                    "5": "temp_ptr"
                },
                "puVar8": {
                    "1": "buffer_ptr2",
                    "2": "nested_ptr",
                    "3": "ptr2"
                },
                "puVar9": {
                    "1": "temp_arr2",
                    "2": "ptr3",
                    "3": "pointer_variable_3",
                    "6": "array_ptr"
                },
                "sVar6": {
                    "1": "str_len_var",
                    "16": "string_length",
                    "2": "size_var",
                    "3": "str_length"
                },
                "strcmp": {
                    "1": "string_compare"
                },
                "strcpy": {
                    "1": "string_copy",
                    "2": "copy_string"
                },
                "strlen": {
                    "1": "string_length",
                    "2": "get_string_length"
                },
                "thunk_FUN_0010e439": {
                    "1": "perform_operation_3"
                },
                "uStack_23c": {
                    "1": "u_stack_data_3",
                    "2": "var_23c",
                    "5": "var4"
                },
                "uStack_240": {
                    "1": "local_var_3",
                    "2": "temp_var3",
                    "5": "var3"
                },
                "uStack_244": {
                    "1": "new_variable_17",
                    "2": "temp_var2",
                    "5": "var2"
                },
                "uStack_4c": {
                    "1": "local_int14",
                    "3": "var13"
                },
                "uStack_50": {
                    "1": "temp_u_stack_50",
                    "3": "var12"
                },
                "uStack_54": {
                    "1": "temp_var6",
                    "3": "var11"
                },
                "uStack_70": {
                    "1": "stack_variable",
                    "2": "temp_value"
                },
                "uVar3": {
                    "1": "temp_var_3",
                    "12": "error_code",
                    "2": "result",
                    "5": "return_value"
                },
                "uVar4": {
                    "1": "uint_var_2",
                    "2": "errmsg",
                    "7": "error_msg",
                    "9": "error_message"
                },
                "unique0x100000e9": {
                    "1": "temp_var_35"
                },
                "unique0x100000ed": {
                    "1": "unique_value_2"
                },
                "xmalloc": {
                    "3": "allocate_memory"
                }
            },
            "called": [
                "xmalloc",
                "FUN_0010bb52",
                "FUN_001135a5",
                "strlen",
                "FUN_00119ed0",
                "FUN_00112502",
                "FUN_0010e2f0",
                "bfd_errmsg",
                "FUN_0010e439",
                "bfd_get_error",
                "strcpy",
                "thunk_FUN_0010e439",
                "bfd_hash_table_init"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nundefined4\nextract_and_process_data_0011378f(undefined8 *input_param_1,undefined8 *output_ptr,long *output_1,undefined8 *output_2,\n            undefined8 *string_ptr,undefined8 *result_ptr)\n\n{\n  undefined temp_array [16];\n  char char_var;\n  undefined4 error_code;\n  undefined8 error_message;\n  undefined *temp_ptr;\n  size_t string_length;\n  long loop_counter;\n  undefined8 *ptr2;\n  undefined4 *array_ptr;\n  char *destination;\n  undefined8 *pointer_variable_4;\n  long *long_ptr;\n  byte byte_var;\n  undefined8 *local_ptr1;\n  long allocated_mem;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined local_variable_7 [16];\n  undefined8 local_variable_8;\n  undefined temporary_array [40];\n  undefined8 var5;\n  undefined8 var6;\n  undefined4 local_array3 [82];\n  undefined local_array4 [40];\n  undefined local_array5 [8];\n  undefined8 var7;\n  undefined8 var8;\n  undefined4 var9;\n  undefined4 var10;\n  undefined4 var11;\n  undefined4 var12;\n  undefined4 var13;\n  \n  byte_var = 0;\n  var1 = 0;\n  var2 = 0;\n  var3 = 500;\n  var4 = 0;\n  local_ptr1 = input_param_1;\n  allocated_mem = xmalloc(500);\n  local_variable_8 = 1;\n  local_variable_7 = ZEXT816(0);\n  char_var = bfd_hash_table_init(temporary_array,FUN_0010bb52,0x30);\n  if ((char_var == '\\0') || (char_var = bfd_hash_table_init(local_array4,FUN_0010bb52,0x30), char_var == '\\0')) {\n    error_code = bfd_get_error();\n    error_message = bfd_errmsg(error_code);\n    FUN_00119ed0(\"bfd_hash_table_init_failed: %s\",error_message);\n  }\n  else {\n    var5 = 0;\n    unique_value = 0xffffffff;\n    local_array5 = (undefined  [8])0xffffffffffffffff;\n    unique_value_2 = 0xffffffff;\n    array_ptr = local_array3;\n    for (loop_counter = 0x52; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *array_ptr = 0;\n      array_ptr = array_ptr + (ulong)byte_var * -2 + 1;\n    }\n    var8 = 0;\n    var9 = 0;\n    var6 = 1;\n    var10 = 0;\n    var11 = 0;\n    var12 = 0xffffffff;\n    var13 = 0xffffffff;\n    char_var = FUN_0010e2f0(&local_ptr1,0,0,0,0);\n    temp_array = _local_array5;\n    if (char_var != '\\0') {\n      local_array5._4_4_ = var2;\n      local_array5._0_4_ = var1;\n      var7 = temp_array._8_8_;\n      char_var = FUN_0010e2f0(&local_ptr1,100,0,0,*input_param_1);\n      if (char_var != '\\0') {\n        *(int *)(output_ptr + 6) = *(int *)(output_ptr + 6) + 1;\n        output_ptr[10] = 0;\n        pointer_variable_4 = (undefined8 *)*output_ptr;\n        *(undefined4 *)(output_ptr + 7) = *(undefined4 *)((long)output_ptr + 0x34);\n        for (; pointer_variable_4 != (undefined8 *)0x0; pointer_variable_4 = (undefined8 *)*pointer_variable_4) {\n          output_ptr[8] = pointer_variable_4[2];\n          *(undefined4 *)(output_ptr + 9) = 0;\n          char_var = thunk_FUN_0010e439(&local_ptr1,*(undefined8 *)(pointer_variable_4[1] + 8));\n          if (char_var == '\\0') {\n            return 0;\n          }\n          long_ptr = (long *)pointer_variable_4[1];\n          if (long_ptr != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)long_ptr[2] != (undefined8 *)0x0) {\n                for (ptr2 = *(undefined8 **)(undefined8 *)long_ptr[2]; ptr2 != (undefined8 *)0x0;\n                    ptr2 = (undefined8 *)*ptr2) {\n                  char_var = FUN_001135a5(output_ptr,&local_ptr1);\n                  if (char_var == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              long_ptr = (long *)*long_ptr;\n              if (long_ptr == (long *)0x0) break;\n              char_var = FUN_0010e439(&local_ptr1,long_ptr[1]);\n              if (char_var == '\\0') {\n                return 0;\n              }\n            }\n          }\n          char_var = FUN_00112502(output_ptr,&local_ptr1,0xffffffffffffffff);\n          if (char_var == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(var13,var12) == -1) &&\n           (error_code = FUN_0010e2f0(&local_ptr1,100,0,var8,0), (char)error_code != '\\0')) {\n          (**(code **)(input_param_1[1] + 0x50))(local_variable_8,allocated_mem + 8);\n          *output_1 = allocated_mem;\n          *output_2 = CONCAT44(var2,var1);\n          *result_ptr = local_variable_8;\n          temp_ptr = (undefined *)xmalloc();\n          *temp_ptr = 0;\n          destination = temp_ptr + 1;\n          *string_ptr = temp_ptr;\n          for (loop_counter = local_variable_7._0_8_; loop_counter != 0; loop_counter = *(long *)(loop_counter + 0x18)) {\n            strcpy(destination,*(char **)(loop_counter + 8));\n            string_length = strlen(destination);\n            destination = destination + string_length + 1;\n          }\n          return error_code;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "extract_and_process_data_0011378f",
            "entrypoint": "0x0011378f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011378f": "extract_and_process_data_0011378f",
                "__dest": "destination",
                "auVar1": "temp_array",
                "bVar12": "byte_var",
                "bfd_errmsg": "get_error_message",
                "bfd_get_error": "get_error",
                "bfd_hash_table_init": "initialize_hash_table",
                "cVar2": "char_var",
                "lVar7": "loop_counter",
                "local_1e8": "local_array3",
                "local_1f0": "var6",
                "local_1f8": "var5",
                "local_220": "temporary_array",
                "local_228": "local_variable_8",
                "local_238": "local_variable_7",
                "local_248": "var1",
                "local_250": "allocated_mem",
                "local_258": "local_ptr1",
                "local_58": "var10",
                "local_60": "var9",
                "local_68": "var8",
                "local_78": "local_array5",
                "local_a0": "local_array4",
                "param_1": "input_param_1",
                "param_2": "output_ptr",
                "param_3": "output_1",
                "param_4": "output_2",
                "param_5": "string_ptr",
                "param_6": "result_ptr",
                "plVar11": "long_ptr",
                "puVar10": "pointer_variable_4",
                "puVar5": "temp_ptr",
                "puVar8": "ptr2",
                "puVar9": "array_ptr",
                "sVar6": "string_length",
                "strcpy": "copy_string",
                "strlen": "get_string_length",
                "uStack_23c": "var4",
                "uStack_240": "var3",
                "uStack_244": "var2",
                "uStack_4c": "var13",
                "uStack_50": "var12",
                "uStack_54": "var11",
                "uStack_70": "var7",
                "uVar3": "error_code",
                "uVar4": "error_message",
                "unique0x100000e9": "unique_value",
                "unique0x100000ed": "unique_value_2",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113a4d": {
            "additional_data": {
                "FUN_00113a4d": {
                    "1": "verify_and_process",
                    "14": "process_data"
                },
                "auVar4": {
                    "1": "check_arr",
                    "18": "result_array",
                    "3": "temp_array"
                },
                "cVar1": {
                    "1": "result1",
                    "2": "check_result",
                    "20": "result",
                    "3": "flag"
                },
                "param_1": {
                    "1": "first_param",
                    "10": "input1",
                    "11": "arg1",
                    "2": "param1",
                    "4": "input_1"
                },
                "param_2": {
                    "1": "arg_2",
                    "10": "input2",
                    "11": "arg2",
                    "2": "param2",
                    "4": "input_2"
                },
                "param_3": {
                    "1": "third_param",
                    "3": "data",
                    "4": "data1",
                    "6": "arg3",
                    "7": "data_ptr"
                },
                "param_4": {
                    "1": "data4",
                    "11": "arg4",
                    "2": "input_4",
                    "4": "input3",
                    "5": "param4"
                },
                "param_5": {
                    "1": "param2_ptr",
                    "11": "arg5",
                    "2": "input_5",
                    "4": "input4",
                    "6": "param5"
                },
                "puVar3": {
                    "1": "list_iterator",
                    "24": "ptr"
                },
                "uVar2": {
                    "1": "result2",
                    "19": "return_value",
                    "3": "output",
                    "7": "result"
                }
            },
            "called": [
                "FUN_0010ed2c",
                "FUN_00112502",
                "FUN_001135a5",
                "FUN_00113a4d",
                "FUN_0010ec73"
            ],
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "code": "\nundefined8\nprocess_data_00113a4d(undefined8 arg1,undefined8 arg2,long data_ptr,undefined8 arg4,\n            undefined8 arg5)\n\n{\n  char result;\n  undefined8 return_value;\n  undefined8 *ptr;\n  undefined result_array [16];\n  \n  result = FUN_00112502(arg1,arg2,*(undefined8 *)(data_ptr + 0x18));\n  if ((result != '\\0') &&\n     (((*(long *)(data_ptr + 0x28) == 0 && (*(long *)(data_ptr + 8) != 0)) ||\n      (result = FUN_0010ec73(arg2,*(undefined8 *)(data_ptr + 0x18)), result != '\\0')))) {\n    if (*(undefined8 **)(data_ptr + 0x28) != (undefined8 *)0x0) {\n      for (ptr = (undefined8 *)**(undefined8 **)(data_ptr + 0x28); ptr != (undefined8 *)0x0;\n          ptr = (undefined8 *)*ptr) {\n        result = FUN_001135a5(arg1,arg2,ptr);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (ptr = *(undefined8 **)(data_ptr + 0x10); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      result = process_data_00113a4d(arg1,arg2,ptr);\n      if (result == '\\0') {\n        return 0;\n      }\n    }\n    result_array = FUN_00112502(arg1,arg2,*(undefined8 *)(data_ptr + 0x20));\n    if (result_array[0] != '\\0') {\n      if ((*(long *)(data_ptr + 0x28) == 0) && (*(long *)(data_ptr + 8) != 0)) {\n        return result_array._0_8_;\n      }\n      return_value = FUN_0010ed2c(arg2,*(undefined8 *)(data_ptr + 0x20),result_array._8_8_,arg5);\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_00113a4d",
            "entrypoint": "0x00113a4d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113a4d": "process_data_00113a4d",
                "auVar4": "result_array",
                "cVar1": "result",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data_ptr",
                "param_4": "arg4",
                "param_5": "arg5",
                "puVar3": "ptr",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b1e": {
            "additional_data": {
                "FUN_00112b6e": {
                    "1": "get_data_info"
                },
                "FUN_00113b1e": {
                    "1": "process_data",
                    "2": "extract_value_from_binary",
                    "6": "extract_data_from_binary"
                },
                "auVar1": {
                    "1": "result1",
                    "2": "default_result",
                    "4": "default_output"
                },
                "auVar4": {
                    "1": "modified_data",
                    "2": "extracted_data",
                    "3": "output_value",
                    "4": "return_value"
                },
                "param_1": {
                    "1": "data",
                    "10": "input_param",
                    "2": "value1",
                    "3": "input_data",
                    "4": "binary_address",
                    "5": "input_value"
                },
                "param_2": {
                    "1": "unknown_value",
                    "16": "unused_param",
                    "3": "unused",
                    "5": "param2"
                },
                "param_3": {
                    "1": "backup_param",
                    "2": "data",
                    "3": "param3",
                    "4": "output_param",
                    "5": "data_param",
                    "7": "default_value"
                },
                "param_4": {
                    "1": "extracted_data",
                    "3": "result",
                    "5": "param4",
                    "7": "output_value"
                },
                "piVar2": {
                    "1": "binary_data",
                    "2": "pointer",
                    "3": "result_array",
                    "4": "result_pointer",
                    "6": "result",
                    "7": "result_ptr"
                },
                "uVar3": {
                    "1": "data_value",
                    "2": "extracted_data",
                    "3": "result_value",
                    "6": "extracted_value",
                    "7": "result"
                }
            },
            "called": [
                "FUN_00112b6e"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010d559"
            ],
            "code": "\nundefined  [16] extract_data_from_binary_00113b1e(long input_param,undefined8 unused_param,ulong default_value,undefined8 output_value)\n\n{\n  undefined default_output [16];\n  int *result_ptr;\n  undefined8 value;\n  undefined return_value [16];\n  \n  if (input_param != 0) {\n    result_ptr = (int *)FUN_00112b6e(input_param,0);\n    if ((result_ptr == (int *)0x0) || (3 < *result_ptr - 7U)) {\n      value = 0;\n    }\n    else {\n      value = **(undefined8 **)(result_ptr + 4);\n    }\n    return_value._8_8_ = output_value;\n    return_value._0_8_ = value;\n    return return_value;\n  }\n  default_output._8_8_ = 0;\n  default_output._0_8_ = default_value;\n  return default_output << 0x40;\n}\n\n",
            "current_name": "extract_data_from_binary_00113b1e",
            "entrypoint": "0x00113b1e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b1e": "extract_data_from_binary_00113b1e",
                "auVar1": "default_output",
                "auVar4": "return_value",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "default_value",
                "param_4": "output_value",
                "piVar2": "result_ptr",
                "uVar3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b4a": {
            "additional_data": {
                "0": {
                    "1": "init_param_2"
                },
                "0x10": {
                    "1": "offset"
                },
                "0x15": {
                    "1": "init_param_1"
                },
                "FUN_00112904": {
                    "1": "get_memory_address",
                    "3": "initialize_result"
                },
                "FUN_00113b4a": {
                    "1": "extract_and_store_param",
                    "2": "initialize_pointer",
                    "3": "extract_value_from_binary",
                    "6": "extract_param"
                },
                "lVar1": {
                    "1": "initialized_value",
                    "20": "result"
                },
                "param_1": {
                    "1": "param",
                    "15": "input_value",
                    "2": "input_parameter",
                    "3": "input",
                    "6": "input_param"
                },
                "param_2": {
                    "1": "unused_param"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nlong extract_param_00113b4a(long input_value)\n\n{\n  long result;\n  \n  if (input_value != 0) {\n    result = FUN_00112904(0x15,0);\n    if (result == 0) {\n      result = 0;\n    }\n    else {\n      *(long *)(result + 0x10) = input_value;\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "extract_param_00113b4a",
            "entrypoint": "0x00113b4a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b4a": "extract_param_00113b4a",
                "lVar1": "result",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b71": {
            "additional_data": {
                "FUN_00112904": {
                    "5": "allocate_memory"
                },
                "FUN_00113b71": {
                    "1": "initialize_data_structure",
                    "2": "extract_value",
                    "3": "initialize_variable",
                    "5": "initialize_data"
                },
                "lVar1": {
                    "1": "pointer_value",
                    "10": "result",
                    "2": "result_pointer"
                },
                "param_1": {
                    "1": "data",
                    "17": "input_value",
                    "3": "input",
                    "4": "input_param"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_data_00113b71(long input_value)\n\n{\n  long result;\n  \n  if (input_value != 0) {\n    result = FUN_00112904(0x14,0);\n    if (result == 0) {\n      result = 0;\n    }\n    else {\n      *(long *)(result + 0x10) = input_value;\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_data_00113b71",
            "entrypoint": "0x00113b71",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b71": "initialize_data_00113b71",
                "lVar1": "result",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b98": {
            "additional_data": {
                "FUN_00112904": {
                    "1": "initialize_data_structure"
                },
                "FUN_00113b98": {
                    "1": "allocate_and_initialize_structure",
                    "11": "create_data_structure",
                    "2": "initialize_data",
                    "4": "initialize_data_structure"
                },
                "PLVAR2": {
                    "1": "data_structure"
                },
                "lVar1": {
                    "1": "allocated_memory",
                    "21": "result"
                },
                "param_1": {
                    "1": "object_value",
                    "11": "input1",
                    "3": "input_value",
                    "5": "input_value_1"
                },
                "param_2": {
                    "1": "param2_value",
                    "11": "input2",
                    "2": "param2",
                    "5": "input_value_2"
                },
                "param_3": {
                    "1": "param3_value",
                    "11": "input3",
                    "2": "param3",
                    "5": "input_3"
                },
                "param_4": {
                    "1": "param4_value",
                    "10": "input4",
                    "3": "param4",
                    "5": "input_value_4"
                },
                "plVar2": {
                    "1": "new_object",
                    "2": "new_entry",
                    "7": "allocated_memory",
                    "8": "data_structure"
                },
                "xmalloc": {
                    "5": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nlong create_data_structure_00113b98(long input1,long input2,long input3,undefined input4)\n\n{\n  long result;\n  long *data_structure;\n  \n  if ((input1 != 0) && (result = FUN_00112904(0x13,0), result != 0)) {\n    data_structure = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)data_structure + 0x19) = 0;\n    *data_structure = input1;\n    *(undefined4 *)((long)data_structure + 0x1c) = 0;\n    data_structure[1] = input2;\n    data_structure[2] = input3;\n    *(undefined *)(data_structure + 3) = input4;\n    *(long **)(result + 0x10) = data_structure;\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "create_data_structure_00113b98",
            "entrypoint": "0x00113b98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b98": "create_data_structure_00113b98",
                "lVar1": "result",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "plVar2": "data_structure",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113bfa": {
            "additional_data": {
                "0x10": {
                    "1": "allocation_size"
                },
                "0x12": {
                    "1": "constant_size"
                },
                "FUN_00112904": {
                    "1": "initialize_structure",
                    "2": "initialize_data",
                    "3": "allocate_memory"
                },
                "FUN_00113bfa": {
                    "1": "allocate_params_and_store_in_pointer",
                    "10": "create_data_structure",
                    "2": "create_object"
                },
                "lVar1": {
                    "1": "new_data_struct",
                    "18": "result",
                    "2": "return_value"
                },
                "param_1": {
                    "1": "parameter1",
                    "2": "data1",
                    "4": "input_value1",
                    "5": "value1",
                    "8": "input1"
                },
                "param_2": {
                    "1": "second_value",
                    "2": "input_value_2",
                    "4": "input_value2",
                    "5": "value2",
                    "8": "input2"
                },
                "plVar2": {
                    "1": "allocated_ptr_contents",
                    "13": "allocated_memory",
                    "2": "object_ptr"
                },
                "xmalloc": {
                    "1": "allocate_dynamic_memory",
                    "5": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nlong create_data_structure_00113bfa(long input1,long input2)\n\n{\n  long result;\n  long *allocated_memory;\n  \n  if (((input1 != 0) && (input2 != 0)) && (result = FUN_00112904(0x12,0), result != 0)) {\n    allocated_memory = (long *)xmalloc(0x10);\n    *allocated_memory = input1;\n    allocated_memory[1] = input2;\n    *(long **)(result + 0x10) = allocated_memory;\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "create_data_structure_00113bfa",
            "entrypoint": "0x00113bfa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113bfa": "create_data_structure_00113bfa",
                "lVar1": "result",
                "param_1": "input1",
                "param_2": "input2",
                "plVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113c43": {
            "additional_data": {
                "FUN_00112904": {
                    "1": "init_memory",
                    "2": "allocate_memory"
                },
                "FUN_00113c43": {
                    "1": "process_parameters",
                    "2": "allocate_and_initialize",
                    "3": "process_data",
                    "6": "initialize_data_structure"
                },
                "auVar3": {
                    "1": "return_value_and_param",
                    "20": "return_value",
                    "3": "result",
                    "4": "output"
                },
                "lVar1": {
                    "1": "result_address",
                    "11": "result",
                    "4": "allocation_result",
                    "9": "allocated_memory"
                },
                "param_1": {
                    "1": "source_param1",
                    "10": "input1",
                    "2": "input_value1",
                    "3": "input_param_1",
                    "4": "input_1",
                    "8": "input_param1"
                },
                "param_2": {
                    "1": "data2",
                    "10": "input2",
                    "2": "input_value2",
                    "3": "input_param_2",
                    "4": "input_2",
                    "8": "input_param2"
                },
                "param_3": {
                    "1": "source_param3",
                    "10": "input3",
                    "2": "param3",
                    "3": "input_param_3",
                    "4": "input_3",
                    "8": "input_param3"
                },
                "param_4": {
                    "1": "data4",
                    "10": "input4",
                    "2": "param4",
                    "3": "input_param_4",
                    "4": "input_4",
                    "8": "input_param4"
                },
                "param_5": {
                    "1": "source_param5",
                    "10": "input5",
                    "2": "param5",
                    "3": "input_param_5",
                    "4": "input_5",
                    "8": "input_param5"
                },
                "param_6": {
                    "1": "input_value6",
                    "10": "input6",
                    "3": "input_param_6",
                    "4": "input_6",
                    "8": "input_param6"
                },
                "plVar2": {
                    "1": "initialized_data_buffer",
                    "2": "new_data",
                    "3": "data_pointer",
                    "8": "allocated_memory"
                },
                "xmalloc": {
                    "1": "dynamic_memory_allocation",
                    "4": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16]\ninitialize_data_structure_00113c43(long input1,long input2,long input3,long input4,undefined input5,\n            undefined8 input6)\n\n{\n  long result;\n  long *allocated_memory;\n  undefined return_value [16];\n  \n  if ((input1 != 0) && (input2 != 0)) {\n    result = FUN_00112904(0x10,0);\n    if (result != 0) {\n      allocated_memory = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)allocated_memory + 0x21) = 0;\n      *allocated_memory = input1;\n      *(undefined4 *)((long)allocated_memory + 0x24) = 0;\n      allocated_memory[1] = input2;\n      allocated_memory[2] = input3;\n      allocated_memory[3] = input4;\n      *(undefined *)(allocated_memory + 4) = input5;\n      *(long **)(result + 0x10) = allocated_memory;\n      goto LAB_00113caa;\n    }\n  }\n  result = 0;\nLAB_00113caa:\n  return_value._8_8_ = input6;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "current_name": "initialize_data_structure_00113c43",
            "entrypoint": "0x00113c43",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113c43": "initialize_data_structure_00113c43",
                "auVar3": "return_value",
                "lVar1": "result",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "plVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113cb9": {
            "additional_data": {
                "0x10": {
                    "1": "offset"
                },
                "0xe": {
                    "1": "num_elements"
                },
                "FUN_00112904": {
                    "1": "initialize_data",
                    "2": "initialize_memory",
                    "4": "allocate_memory"
                },
                "FUN_00113cb9": {
                    "1": "initialize_param_data",
                    "2": "initialize_pointer",
                    "3": "extract_parameter_value",
                    "4": "process_param"
                },
                "lVar1": {
                    "1": "allocated_memory",
                    "19": "result",
                    "2": "result_pointer"
                },
                "param_1": {
                    "1": "data",
                    "12": "input_value",
                    "4": "input",
                    "9": "input_param"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nlong extract_parameter_00113cb9(long input_value)\n\n{\n  long result;\n  \n  if (input_value != 0) {\n    result = FUN_00112904(0xe,0);\n    if (result == 0) {\n      result = 0;\n    }\n    else {\n      *(long *)(result + 0x10) = input_value;\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "extract_parameter_00113cb9",
            "entrypoint": "0x00113cb9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113cb9": "extract_parameter_00113cb9",
                "lVar1": "result",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113ce0": {
            "additional_data": {
                "FUN_00112904": {
                    "1": "initialize_value"
                },
                "FUN_00113ce0": {
                    "1": "reverse_and_allocate_memory",
                    "2": "extract_data",
                    "3": "process_data"
                },
                "auVar3": {
                    "1": "output_data",
                    "18": "return_value",
                    "2": "return_val",
                    "3": "output"
                },
                "lVar1": {
                    "1": "memory_allocation_result",
                    "2": "return_value",
                    "22": "result"
                },
                "param_1": {
                    "1": "input_1",
                    "2": "input_param1",
                    "3": "input_value1",
                    "6": "input1"
                },
                "param_2": {
                    "1": "length_param",
                    "2": "input_param2",
                    "3": "input_value2",
                    "6": "input2"
                },
                "param_3": {
                    "1": "input_3",
                    "2": "input_param3",
                    "3": "param_3",
                    "5": "undefined_param",
                    "6": "input3"
                },
                "param_4": {
                    "1": "unused_param_4",
                    "2": "unused_parameter",
                    "3": "input_param_4",
                    "4": "unused_param"
                },
                "param_5": {
                    "1": "ptr2",
                    "3": "param_5",
                    "4": "param5"
                },
                "plVar2": {
                    "1": "resource_data",
                    "17": "allocated_memory",
                    "2": "buffer"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0011173a",
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16]\nallocate_and_initialize_00113ce0(long input1,long input2,undefined input3,undefined8 unused_param,undefined8 param5)\n\n{\n  long result;\n  long *allocated_memory;\n  undefined return_value [16];\n  \n  if (input1 != 0) {\n    result = FUN_00112904(0xd,0);\n    if (result != 0) {\n      allocated_memory = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)allocated_memory + 0x11) = 0;\n      *allocated_memory = input1;\n      *(undefined4 *)((long)allocated_memory + 0x14) = 0;\n      allocated_memory[1] = input2;\n      *(undefined *)(allocated_memory + 2) = input3;\n      *(long **)(result + 0x10) = allocated_memory;\n      goto LAB_00113d2f;\n    }\n  }\n  result = 0;\nLAB_00113d2f:\n  return_value._8_8_ = param5;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "current_name": "allocate_and_initialize_00113ce0",
            "entrypoint": "0x00113ce0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113ce0": "allocate_and_initialize_00113ce0",
                "auVar3": "return_value",
                "lVar1": "result",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "unused_param",
                "param_5": "param5",
                "plVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113d3a": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "find_linked_node"
                },
                "FUN_00112904": {
                    "1": "allocate_list_node",
                    "2": "allocate_memory"
                },
                "FUN_00113d3a": {
                    "1": "get_child_node",
                    "2": "get_linked_value"
                },
                "lVar1": {
                    "1": "extracted_data",
                    "2": "next_element",
                    "3": "return_value",
                    "4": "next_node",
                    "7": "result"
                },
                "param_1": {
                    "1": "data",
                    "2": "current_node",
                    "3": "input_param",
                    "6": "input_value"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0011173a",
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "code": "\nlong get_pointer_00113d3a(long input_value)\n\n{\n  long result;\n  \n  if (input_value != 0) {\n    result = *(long *)(input_value + 8);\n    if (result == 0) {\n      result = FUN_00112904(0xc,0);\n      if (result == 0) {\n        result = 0;\n      }\n      else {\n        *(long *)(result + 0x10) = input_value;\n        *(long *)(input_value + 8) = result;\n      }\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "get_pointer_00113d3a",
            "entrypoint": "0x00113d3a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113d3a": "get_pointer_00113d3a",
                "lVar1": "result",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113d6e": {
            "additional_data": {
                "FUN_00112904": {
                    "1": "initialize_node",
                    "3": "initialize_memory"
                },
                "FUN_00113d6e": {
                    "1": "allocate_and_store_param",
                    "2": "create_data_entry",
                    "3": "create_data_structure",
                    "8": "allocate_and_store_data"
                },
                "lVar1": {
                    "1": "data_entry_address",
                    "17": "result",
                    "2": "object_address"
                },
                "param_1": {
                    "1": "data",
                    "2": "value_1",
                    "3": "value1",
                    "5": "data_1",
                    "7": "data1"
                },
                "param_2": {
                    "1": "input_value_2",
                    "2": "input2",
                    "3": "value2",
                    "5": "data_2",
                    "7": "data2"
                },
                "puVar2": {
                    "1": "new_object",
                    "2": "allocated_data_ptr",
                    "3": "new_node",
                    "6": "allocated_data",
                    "9": "allocated_memory"
                },
                "xmalloc": {
                    "4": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "code": "\nlong allocate_and_store_data_00113d6e(undefined8 data1,undefined8 data2)\n\n{\n  long result;\n  undefined8 *allocated_memory;\n  \n  result = FUN_00112904(0xb,0);\n  if (result != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x10);\n    *allocated_memory = data1;\n    allocated_memory[1] = data2;\n    *(undefined8 **)(result + 0x10) = allocated_memory;\n  }\n  return result;\n}\n\n",
            "current_name": "allocate_and_store_data_00113d6e",
            "entrypoint": "0x00113d6e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113d6e": "allocate_and_store_data_00113d6e",
                "lVar1": "result",
                "param_1": "data1",
                "param_2": "data2",
                "puVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113da9": {
            "additional_data": {
                "FUN_00113da9": {
                    "1": "decode_and_store_data",
                    "15": "initialize_data_structure",
                    "2": "initialize_buffer",
                    "4": "initialize_memory_block",
                    "5": "initialize_memory"
                },
                "auVar5": {
                    "1": "result_data_structure",
                    "19": "result",
                    "8": "return_value"
                },
                "bVar4": {
                    "1": "shift_value",
                    "2": "byte_value",
                    "3": "byte_var",
                    "5": "temp_byte"
                },
                "lVar2": {
                    "1": "index",
                    "2": "loop_count",
                    "20": "loop_counter",
                    "5": "counter"
                },
                "param_1": {
                    "1": "num_of_bytes",
                    "2": "byte_value",
                    "3": "offset",
                    "7": "byte_offset",
                    "9": "input_byte"
                },
                "param_2": {
                    "1": "unused_param",
                    "13": "param2",
                    "2": "unused_param1",
                    "3": "input1"
                },
                "param_3": {
                    "1": "input_data",
                    "2": "input_param",
                    "3": "input2",
                    "5": "data",
                    "8": "param3"
                },
                "param_4": {
                    "1": "data",
                    "10": "param4",
                    "2": "value",
                    "3": "input3"
                },
                "puVar1": {
                    "1": "memory_block_ptr",
                    "10": "allocated_memory",
                    "2": "buffer",
                    "6": "memory_block"
                },
                "puVar3": {
                    "1": "current_position",
                    "14": "current_pointer",
                    "2": "current_address",
                    "4": "ptr",
                    "6": "current_ptr"
                }
            },
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "calling": [
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16] initialize_data_structure_00113da9(byte input_byte,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *allocated_memory;\n  long loop_counter;\n  undefined8 *current_pointer;\n  byte temp_byte;\n  undefined result [16];\n  \n  temp_byte = 0;\n  result._0_8_ = FUN_00112904(8 - (uint)input_byte);\n  if (result._0_8_ != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x28);\n    current_pointer = allocated_memory + 1;\n    for (loop_counter = 8; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)current_pointer = 0;\n      current_pointer = (undefined8 *)((long)current_pointer + (ulong)temp_byte * -8 + 4);\n    }\n    *allocated_memory = param3;\n    *(undefined8 **)(result._0_8_ + 0x10) = allocated_memory;\n  }\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "current_name": "initialize_data_structure_00113da9",
            "entrypoint": "0x00113da9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113da9": "initialize_data_structure_00113da9",
                "auVar5": "result",
                "bVar4": "temp_byte",
                "lVar2": "loop_counter",
                "param_1": "input_byte",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "allocated_memory",
                "puVar3": "current_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113df2": {
            "additional_data": {
                "FUN_00112904": {
                    "1": "set_data",
                    "18": "call_sub_function",
                    "2": "call_subfunction"
                },
                "FUN_00113df2": {
                    "1": "initialize_subroutine",
                    "14": "execute_function",
                    "2": "initialize_data",
                    "6": "initialize_function"
                },
                "param_1": {
                    "1": "process_data",
                    "2": "arg",
                    "3": "argument",
                    "6": "data"
                },
                "param_2": {
                    "1": "argument2",
                    "2": "sub_function_param"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f",
                "FUN_0010dac0",
                "FUN_0010c2d2"
            ],
            "code": "\nvoid execute_function_00113df2(undefined4 data)\n\n{\n  FUN_00112904(4,data);\n  return;\n}\n\n",
            "current_name": "execute_function_00113df2",
            "entrypoint": "0x00113df2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113df2": "execute_function_00113df2",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113dfe": {
            "additional_data": {
                "FUN_00113dfe": {
                    "1": "update_parameter",
                    "2": "store_value_in_memory",
                    "3": "update_memory_value",
                    "4": "update_parameter_value"
                },
                "lVar1": {
                    "1": "updated_value_address",
                    "13": "result",
                    "2": "result_pointer",
                    "3": "result_ptr",
                    "6": "memory_address"
                },
                "param_1": {
                    "1": "data",
                    "2": "offset",
                    "3": "size",
                    "5": "value",
                    "7": "input_value"
                },
                "param_2": {
                    "1": "input2",
                    "13": "new_value",
                    "2": "new_parameter_value",
                    "3": "data",
                    "8": "value"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010dac0",
                "FUN_0010ee3f",
                "FUN_0010c2d2"
            ],
            "code": "\nvoid update_parameter_value_00113dfe(undefined4 input_value,undefined new_value)\n\n{\n  long result;\n  \n  result = FUN_00112904(3,input_value);\n  if (result != 0) {\n    *(undefined *)(result + 0x10) = new_value;\n  }\n  return;\n}\n\n",
            "current_name": "update_parameter_value_00113dfe",
            "entrypoint": "0x00113dfe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113dfe": "update_parameter_value_00113dfe",
                "lVar1": "result",
                "param_1": "input_value",
                "param_2": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113e17": {
            "additional_data": {
                "FUN_00112904": {
                    "1": "set_parameters",
                    "4": "call_sub_function"
                },
                "FUN_00113e17": {
                    "1": "initialize_settings",
                    "2": "initialize_sub_system",
                    "3": "execute_function",
                    "5": "initialize_function",
                    "6": "initialize"
                },
                "param_1": {
                    "1": "input_param1",
                    "2": "input1",
                    "3": "value1",
                    "4": "param1"
                },
                "param_2": {
                    "1": "default_value",
                    "2": "input2",
                    "3": "value2",
                    "4": "param2"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f",
                "FUN_0010dac0",
                "FUN_0010c2d2"
            ],
            "code": "\nvoid initialize_00113e17(void)\n\n{\n  FUN_00112904(2,0);\n  return;\n}\n\n",
            "current_name": "initialize_00113e17",
            "entrypoint": "0x00113e17",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113e17": "initialize_00113e17"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113e23": {
            "additional_data": {
                "FUN_00112904": {
                    "1": "initialize_data_structure"
                },
                "FUN_00113e23": {
                    "1": "store_parameters_in_list",
                    "2": "create_new_entry",
                    "5": "allocate_and_store_data"
                },
                "lVar1": {
                    "1": "new_entry",
                    "2": "entry_address",
                    "20": "result"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "data_1",
                    "3": "input1",
                    "4": "first_parameter",
                    "5": "value1"
                },
                "param_2": {
                    "1": "value",
                    "2": "data_2",
                    "3": "input2",
                    "4": "second_parameter",
                    "5": "value2"
                },
                "puVar2": {
                    "1": "new_object",
                    "13": "allocated_memory",
                    "2": "new_entry_ptr",
                    "4": "new_entry"
                },
                "xmalloc": {
                    "5": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "calling": [
                "FUN_0010afd5",
                "FUN_0010dac0",
                "FUN_0010c2d2"
            ],
            "code": "\nlong allocate_and_store_data_00113e23(undefined8 value1,undefined8 value2)\n\n{\n  long result;\n  undefined8 *allocated_memory;\n  \n  result = FUN_00112904(1,0);\n  if (result != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x10);\n    *allocated_memory = value1;\n    allocated_memory[1] = value2;\n    *(undefined8 **)(result + 0x10) = allocated_memory;\n  }\n  return result;\n}\n\n",
            "current_name": "allocate_and_store_data_00113e23",
            "entrypoint": "0x00113e23",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113e23": "allocate_and_store_data_00113e23",
                "lVar1": "result",
                "param_1": "value1",
                "param_2": "value2",
                "puVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113e5e": {
            "additional_data": {
                "FUN_00113e5e": {
                    "1": "process_param",
                    "2": "extract_type_from_string",
                    "3": "process_input"
                },
                "cVar1": {
                    "1": "type_validation",
                    "11": "result",
                    "2": "type_check",
                    "4": "type_check_result"
                },
                "local_20": {
                    "1": "input_string",
                    "2": "type_ptr"
                },
                "local_20[0]": {
                    "1": "modified_input",
                    "2": "current_string"
                },
                "param_1": {
                    "1": "output_buffer",
                    "2": "input_data",
                    "3": "output_ptr",
                    "5": "input"
                },
                "param_2": {
                    "1": "param_address",
                    "2": "input_string",
                    "3": "param_2",
                    "4": "input"
                },
                "param_3": {
                    "1": "argc",
                    "2": "param3",
                    "3": "input_length",
                    "4": "string_length",
                    "5": "offset",
                    "7": "length"
                }
            },
            "called": [
                "FUN_0010c95e",
                "FUN_00113fb0"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 process_input_00113e5e(undefined8 output,char **input,long length)\n\n{\n  char result;\n  char *current_string [2];\n  \n  current_string = *input;\n  *input = (char *)(length + 2);\n  if ((((long)(char *)(length + 2) - (long)current_string < 5) ||\n      (result = FUN_00113fb0(current_string,\"type\"), result == '\\0')) ||\n     ((current_string[4] != '$' && (current_string[4] != '.')))) {\n    if (*current_string != '_') {\n      return 1;\n    }\n    if (current_string[1] != '_') {\n      return 1;\n    }\n    if (current_string[2] != 'o') {\n      return 1;\n    }\n    if (current_string[3] != 'p') {\n      return 1;\n    }\n    current_string = current_string + 4;\n  }\n  else {\n    current_string = current_string + 5;\n  }\n  result = FUN_0010c95e(output,current_string,0);\n  if (result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_input_00113e5e",
            "entrypoint": "0x00113e5e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113e5e": "process_input_00113e5e",
                "cVar1": "result",
                "local_20": "current_string",
                "local_20[0]": "current_string",
                "param_1": "output",
                "param_2": "input",
                "param_3": "length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113ede": {
            "additional_data": {
                "FUN_00113ede": {
                    "1": "extract_last_chars",
                    "2": "check_and_reverse_string",
                    "3": "extract_substring",
                    "4": "extract_last_four_characters"
                },
                "FUN_00113fb0": {
                    "1": "reverse_string"
                },
                "__s": {
                    "1": "substring",
                    "13": "string",
                    "2": "string_ptr",
                    "6": "input_string",
                    "9": "current_string"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "argument",
                    "4": "input_string",
                    "7": "strings",
                    "8": "input_strings"
                },
                "param_2": {
                    "1": "substring_pattern"
                },
                "sVar1": {
                    "1": "substring_length",
                    "2": "length",
                    "28": "string_length"
                },
                "uVar2": {
                    "1": "processed_data",
                    "25": "result",
                    "4": "reversed_string"
                }
            },
            "called": [
                "strlen",
                "FUN_00113fb0"
            ],
            "calling": [
                "FUN_001082b3",
                "FUN_0010829e"
            ],
            "code": "\nundefined8 extract_last_four_characters_00113ede(char **input_strings)\n\n{\n  char *string;\n  size_t string_length;\n  undefined8 result;\n  \n  if (input_strings == (char **)0x0) {\n    return 0;\n  }\n  string = *input_strings;\n  if (string != (char *)0x0) {\n    string_length = strlen(string);\n    if (4 < (int)string_length) {\n      result = FUN_00113fb0(string + (long)(int)string_length + -4,&DAT_0012142b);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "extract_last_four_characters_00113ede",
            "entrypoint": "0x00113ede",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113ede": "extract_last_four_characters_00113ede",
                "__s": "string",
                "param_1": "input_strings",
                "sVar1": "string_length",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113f20": {
            "additional_data": {
                "FUN_00113f20": {
                    "1": "create_hashtable",
                    "17": "initialize_hash_table",
                    "2": "initialize_hash_tab",
                    "7": "initialize_hashtable"
                },
                "free": {
                    "1": "custom_free",
                    "11": "release_memory",
                    "9": "deallocate_memory"
                },
                "htab_create_alloc": {
                    "1": "create_hash_tab",
                    "2": "create_hash_table_with_alloc",
                    "20": "create_hash_table",
                    "5": "create_hashtable"
                },
                "htab_hash_string": {
                    "1": "hash_string_in_hash_table",
                    "2": "hash_string_for_hashtable",
                    "22": "hash_string",
                    "3": "string_hash_function"
                },
                "xcalloc": {
                    "1": "allocate_zeroed_memory",
                    "29": "allocate_memory"
                }
            },
            "called": [
                "free",
                "htab_create_alloc",
                "htab_eq_string",
                "htab_hash_string",
                "xcalloc"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid initialize_hash_table_00113f20(void)\n\n{\n  htab_create_alloc(0x10,htab_hash_string,htab_eq_string,0,xcalloc,free);\n  return;\n}\n\n",
            "current_name": "initialize_hash_table_00113f20",
            "entrypoint": "0x00113f20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113f20": "initialize_hash_table_00113f20",
                "free": "release_memory",
                "htab_create_alloc": "create_hash_table",
                "htab_hash_string": "hash_string",
                "xcalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113f50": {
            "additional_data": {
                "FUN_00113f50": {
                    "1": "check_file_info",
                    "16": "check_file",
                    "2": "check_file_properties",
                    "4": "check_file_status"
                },
                "__errno_location": {
                    "1": "get_errno_location"
                },
                "dcgettext": {
                    "1": "translate_text"
                },
                "iVar1": {
                    "1": "status_check_result",
                    "23": "status",
                    "3": "result",
                    "4": "stat_result"
                },
                "param_1": {
                    "1": "file_name",
                    "24": "file_path",
                    "6": "filename"
                },
                "pcVar4": {
                    "1": "error",
                    "11": "error_reason",
                    "2": "error_description",
                    "3": "error_message",
                    "4": "reason",
                    "8": "error_string"
                },
                "piVar2": {
                    "1": "err_num_ptr",
                    "12": "errno_ptr",
                    "2": "error",
                    "7": "error_code"
                },
                "sStack_a8": {
                    "1": "file_status",
                    "15": "file_stats",
                    "7": "file_info",
                    "8": "file_stat"
                },
                "sStack_a8.st_mode": {
                    "1": "file_mode"
                },
                "sStack_a8.st_size": {
                    "1": "file_size"
                },
                "stat": {
                    "1": "get_file_status",
                    "3": "get_file_stats"
                },
                "uVar3": {
                    "1": "error_translated",
                    "14": "error_message",
                    "2": "warning_message",
                    "5": "error_msg",
                    "7": "message"
                }
            },
            "called": [
                "FUN_00104966",
                "FUN_00119ed0",
                "stat",
                "dcgettext"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00114460",
                "FUN_00116b90"
            ],
            "code": "\nlong check_file_00113f50(char *file_path)\n\n{\n  int status;\n  int *errno_ptr;\n  undefined8 error_message;\n  char *error_reason;\n  get_file_stats file_stats;\n  \n  if (file_path != (char *)0x0) {\n    status = get_file_stats(file_path,&file_stats);\n    if (status < 0) {\n      errno_ptr = __errno_location();\n      if (*errno_ptr == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        FUN_00119ed0(error_message,file_path);\n      }\n      else {\n        error_reason = strerror(*errno_ptr);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00119ed0(error_message,file_path,error_reason);\n      }\n    }\n    else if ((file_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      FUN_00119ed0(error_message,file_path);\n    }\n    else if ((file_mode & 0xf000) == 0x8000) {\n      if (-1 < file_size) {\n        return file_size;\n      }\n      error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      FUN_00119ed0(error_message,file_path);\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      FUN_00119ed0(error_message,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "current_name": "check_file_00113f50",
            "entrypoint": "0x00113f50",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113f50": "check_file_00113f50",
                "__errno_location": "get_errno_location",
                "dcgettext": "get_translation",
                "iVar1": "status",
                "param_1": "file_path",
                "pcVar4": "error_reason",
                "piVar2": "errno_ptr",
                "sStack_a8": "file_stats",
                "sStack_a8.st_mode": "file_mode",
                "sStack_a8.st_size": "file_size",
                "stat": "get_file_stats",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113fb0": {
            "additional_data": {
                "FUN_00113fb0": {
                    "1": "reverse_compare_strings",
                    "10": "string_comparison",
                    "13": "compare_strings",
                    "2": "compare_and_return_result"
                },
                "__n": {
                    "1": "target_string_length",
                    "11": "string2_length",
                    "13": "length",
                    "2": "string_length"
                },
                "auVar2": {
                    "1": "return_data",
                    "2": "comparison_result_array",
                    "21": "result",
                    "4": "comparison_result"
                },
                "extraout_var": {
                    "1": "comparison_result_extension",
                    "2": "result",
                    "3": "extra_output",
                    "5": "comparison_result"
                },
                "iVar1": {
                    "1": "strncmp_result",
                    "18": "comparison_result",
                    "2": "result",
                    "4": "string_comparison_result"
                },
                "in_RAX": {
                    "1": "auxiliary_value",
                    "2": "return_value"
                },
                "param_1": {
                    "1": "string_1",
                    "2": "str1",
                    "23": "string1",
                    "3": "input_string"
                },
                "param_2": {
                    "1": "target_string",
                    "2": "str2",
                    "23": "string2"
                }
            },
            "called": [
                "strlen",
                "strncmp"
            ],
            "calling": [
                "FUN_00115f50",
                "FUN_00113ede",
                "FUN_00114c20",
                "FUN_00107880",
                "FUN_0010554f",
                "FUN_00108c86",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_00113e5e"
            ],
            "code": "\nundefined  [16] compare_strings_00113fb0(char *string1,char *string2)\n\n{\n  int comparison_result;\n  undefined8 return_value;\n  size_t length;\n  undefined4 comparison_result;\n  undefined result [16];\n  \n  length = strlen(string2);\n  comparison_result = strncmp(string1,string2,length);\n  result._1_7_ = (undefined7)(CONCAT44(comparison_result,comparison_result) >> 8);\n  result[0] = comparison_result == 0;\n  result._8_8_ = return_value;\n  return result;\n}\n\n",
            "current_name": "compare_strings_00113fb0",
            "entrypoint": "0x00113fb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113fb0": "compare_strings_00113fb0",
                "__n": "length",
                "auVar2": "result",
                "extraout_var": "comparison_result",
                "iVar1": "comparison_result",
                "in_RAX": "return_value",
                "param_1": "string1",
                "param_2": "string2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113fe0": {
            "additional_data": {
                "FUN_00113fe0": {
                    "1": "section_flags_to_value",
                    "27": "parse_section_flags"
                },
                "auVar8": {
                    "1": "result_container",
                    "10": "result",
                    "2": "result_var",
                    "5": "result_struct",
                    "6": "return_value"
                },
                "iVar1": {
                    "1": "str_comparison_result",
                    "13": "comparison_result",
                    "17": "result"
                },
                "iVar6": {
                    "1": "section_length_int",
                    "2": "section_flag_index",
                    "3": "length",
                    "4": "section_flag_length",
                    "5": "flag_index"
                },
                "param_1": {
                    "1": "flags_string",
                    "15": "section_flags",
                    "2": "section_name",
                    "3": "section_flag_string",
                    "6": "input_string"
                },
                "param_2": {
                    "1": "unused_param1",
                    "12": "param_2",
                    "16": "param2"
                },
                "param_3": {
                    "1": "unknown_parameter3",
                    "12": "param_3",
                    "16": "param3"
                },
                "param_4": {
                    "1": "section_flag_error",
                    "16": "param4",
                    "2": "section_flags",
                    "7": "param_4"
                },
                "pcVar3": {
                    "1": "comma_char",
                    "11": "comma_position",
                    "2": "comma_index",
                    "3": "delimiter",
                    "9": "comma_pos"
                },
                "pcVar4": {
                    "1": "remaining_flags",
                    "10": "next_section_flag",
                    "2": "next_section_name",
                    "3": "next_section",
                    "5": "next_flag"
                },
                "sVar5": {
                    "1": "input_length",
                    "10": "flag_length",
                    "2": "section_length",
                    "3": "length",
                    "4": "section_name_length"
                },
                "uVar2": {
                    "1": "unrecognized_section_flag_error",
                    "2": "error_msg",
                    "4": "err_msg",
                    "6": "error_message",
                    "7": "error_string"
                },
                "uVar7": {
                    "1": "combined_flag",
                    "13": "parsed_flags",
                    "2": "flags",
                    "3": "section_flag",
                    "6": "section_flags"
                }
            },
            "called": [],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16] parse_section_flags_00113fe0(char *section_flags,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  int result;\n  undefined8 error_string;\n  char *comma_position;\n  char *next_section_flag;\n  size_t flag_length;\n  int flag_index;\n  uint parsed_flags;\n  undefined result [16];\n  \n  parsed_flags = 0;\n  do {\n    comma_position = strchr(section_flags,0x2c);\n    if (comma_position == (char *)0x0) {\n      flag_length = strlen(section_flags);\n      flag_index = (int)flag_length;\n      next_section_flag = (char *)0x0;\n    }\n    else {\n      next_section_flag = comma_position + 1;\n      flag_index = (int)comma_position - (int)section_flags;\n    }\n    flag_length = (size_t)flag_index;\n    result = strncasecmp(\"alloc\",section_flags,flag_length);\n    if (result == 0) {\n      parsed_flags = parsed_flags | 1;\n    }\n    else {\n      result = strncasecmp(\"load\",section_flags,flag_length);\n      if (result == 0) {\n        parsed_flags = parsed_flags | 2;\n      }\n      else {\n        result = strncasecmp(\"noload\",section_flags,flag_length);\n        if (result == 0) {\n          parsed_flags = parsed_flags | 0x200;\n        }\n        else {\n          result = strncasecmp(\"readonly\",section_flags,flag_length);\n          if (result == 0) {\n            parsed_flags = parsed_flags | 8;\n          }\n          else {\n            result = strncasecmp(\"debug\",section_flags,flag_length);\n            if (result == 0) {\n              parsed_flags = parsed_flags | 0x2000;\n            }\n            else {\n              result = strncasecmp(\"code\",section_flags,flag_length);\n              if (result == 0) {\n                parsed_flags = parsed_flags | 0x10;\n              }\n              else {\n                result = strncasecmp(\"data\",section_flags,flag_length);\n                if (result == 0) {\n                  parsed_flags = parsed_flags | 0x20;\n                }\n                else {\n                  result = strncasecmp(\"rom\",section_flags,flag_length);\n                  if (result == 0) {\n                    parsed_flags = parsed_flags | 0x40;\n                  }\n                  else {\n                    result = strncasecmp(\"exclude\",section_flags,flag_length);\n                    if (result == 0) {\n                      parsed_flags = parsed_flags | 0x8000;\n                    }\n                    else {\n                      result = strncasecmp(\"share\",section_flags,flag_length);\n                      if (result == 0) {\n                        parsed_flags = parsed_flags | 0x8000000;\n                      }\n                      else {\n                        result = strncasecmp(\"contents\",section_flags,flag_length);\n                        if (result == 0) {\n                          parsed_flags = parsed_flags | 0x100;\n                        }\n                        else {\n                          result = strncasecmp(\"merge\",section_flags,flag_length);\n                          if (result == 0) {\n                            parsed_flags = parsed_flags | 0x800000;\n                          }\n                          else {\n                            result = strncasecmp(\"strings\",section_flags,flag_length);\n                            if (result != 0) {\n                              comma_position = (char *)xmalloc((long)(flag_index + 1));\n                              strncpy(comma_position,section_flags,flag_length);\n                              comma_position[flag_length] = '\\0';\n                              error_string = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              FUN_00119ed0(error_string,comma_position);\n                              error_string = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              FUN_00119dd0(error_string,\n                                           \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                          );\n                            }\n                            parsed_flags = parsed_flags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    section_flags = next_section_flag;\n  } while (next_section_flag != (char *)0x0);\n  result._4_4_ = 0;\n  result._0_4_ = parsed_flags;\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "current_name": "parse_section_flags_00113fe0",
            "entrypoint": "0x00113fe0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "auVar8": "result",
                "iVar1": "result",
                "iVar6": "flag_index",
                "param_1": "section_flags",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "pcVar3": "comma_position",
                "pcVar4": "next_section_flag",
                "sVar5": "flag_length",
                "uVar2": "error_string",
                "uVar7": "parsed_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114190": {
            "additional_data": {
                "FUN_00114190": {
                    "1": "check_and_modify_permissions",
                    "2": "find_matching_pattern",
                    "3": "process_data"
                },
                "dcgettext": {
                    "1": "get_translated_text"
                },
                "fnmatch": {
                    "1": "match_pattern"
                },
                "iVar4": {
                    "1": "temp_index",
                    "2": "index",
                    "3": "result",
                    "7": "temp_var4",
                    "9": "comparison_result"
                },
                "param_1": {
                    "1": "data",
                    "18": "input_array",
                    "3": "input_string"
                },
                "param_2": {
                    "1": "is_null",
                    "16": "flag",
                    "2": "check_flag"
                },
                "param_3": {
                    "1": "bitwise_flag",
                    "11": "flags",
                    "3": "mask",
                    "5": "permissions"
                },
                "plVar2": {
                    "1": "temp_array_ptr",
                    "2": "ptr1",
                    "6": "pattern",
                    "8": "temp_var2"
                },
                "pplVar3": {
                    "1": "ptr2",
                    "2": "result_pointer",
                    "5": "result",
                    "6": "temp_var3"
                },
                "pplVar6": {
                    "1": "current_ptr_array",
                    "2": "temp_var6",
                    "3": "current_node"
                },
                "pplVar7": {
                    "1": "ptr2",
                    "2": "previous_item"
                },
                "pplVar8": {
                    "1": "rule2",
                    "2": "next_result",
                    "3": "next_pointer"
                },
                "strcmp": {
                    "1": "string_comparison_function",
                    "2": "compare_strings"
                },
                "uVar1": {
                    "1": "flags",
                    "2": "mask",
                    "4": "var1",
                    "5": "result",
                    "8": "temp_var1"
                },
                "uVar5": {
                    "1": "unsigned_var2",
                    "5": "error_msg",
                    "7": "temp_var5",
                    "9": "error_message"
                },
                "xmalloc": {
                    "1": "dynamic_memory_allocation_function",
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_00119dd0",
                "fnmatch",
                "FUN_00104bba",
                "xmalloc",
                "dcgettext",
                "strcmp"
            ],
            "calling": [
                "FUN_00115dc0",
                "FUN_00108072",
                "FUN_00114c20",
                "FUN_00107880",
                "FUN_00115b70",
                "FUN_00115530",
                "FUN_00116110",
                "FUN_00116b90"
            ],
            "code": "\nlong ** process_data_00114190(long *input_array,char flag,uint flags)\n\n{\n  uint temp_var1;\n  long *temp_var2;\n  long **temp_var3;\n  int comparison_result;\n  undefined8 error_message;\n  long **current_node;\n  long **previous_item;\n  long **next_pointer;\n  \n  previous_item = DAT_00127900;\n  if (DAT_00127900 == (long **)0x0) {\n    if (flag == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (flag == '\\0') {\n    if ((flags & *(uint *)((long)DAT_00127900 + 0x14)) == 0) {\nLAB_001141e5:\n      current_node = (long **)*previous_item;\n      if (current_node == (long **)0x0) {\n        return (long **)0x0;\n      }\n      previous_item = (long **)0x0;\n    }\n    else {\n      temp_var2 = DAT_00127900[1];\n      if (*(char *)temp_var2 == '!') {\n        comparison_result = fnmatch((char *)((long)temp_var2 + 1),(char *)input_array,0);\n        current_node = previous_item;\n        if (comparison_result == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      comparison_result = fnmatch((char *)temp_var2,(char *)input_array,0);\n      if (comparison_result != 0) goto LAB_001141e5;\n      current_node = (long **)*previous_item;\n      if (current_node == (long **)0x0) goto LAB_00114245;\n    }\n    if ((flags & *(uint *)((long)current_node + 0x14)) != 0) {\n      temp_var2 = current_node[1];\n      if (*(char *)temp_var2 == '!') {\n        comparison_result = fnmatch((char *)((long)temp_var2 + 1),(char *)input_array,0);\n        if (comparison_result == 0) {\nLAB_0011438e:\n          *(undefined *)(current_node + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        comparison_result = fnmatch((char *)temp_var2,(char *)input_array,0);\n        if ((previous_item == (long **)0x0) && (comparison_result == 0)) {\n          next_pointer = (long **)*current_node;\n          previous_item = current_node;\n          if (next_pointer == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    next_pointer = (long **)*current_node;\n    current_node = previous_item;\n    if (next_pointer != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    comparison_result = strcmp((char *)DAT_00127900[1],(char *)input_array);\n    if (comparison_result == 0) {\nLAB_001143cd:\n      temp_var1 = *(uint *)((long)previous_item + 0x14);\n      if ((((temp_var1 & 1) != 0) && ((flags & 2) != 0)) ||\n         (((flags & 1) != 0 && ((temp_var1 & 2) != 0)))) {\n        error_message = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        FUN_00119dd0(error_message,input_array);\n      }\n      if ((((temp_var1 & 8) != 0) && ((flags & 0x10) != 0)) || ((flags & 0x18) == 0x18)) {\n        error_message = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        FUN_00119dd0(error_message,input_array);\n      }\n      if ((((temp_var1 & 0x20) == 0) || ((flags & 0x40) == 0)) && ((flags & 0x60) != 0x60)) {\n        *(uint *)((long)previous_item + 0x14) = temp_var1 | flags;\n        return previous_item;\n      }\n      error_message = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      FUN_00119dd0(error_message,input_array);\n    }\n    previous_item = (long **)*previous_item;\n    if (previous_item == (long **)0x0) goto LAB_001142a9;\n    comparison_result = strcmp((char *)previous_item[1],(char *)input_array);\n    if (comparison_result == 0) goto LAB_001143cd;\n    next_pointer = (long **)*previous_item;\n    current_node = (long **)0x0;\n    if (next_pointer == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      previous_item = current_node;\n      if (flag == '\\0') {\n        while (current_node = next_pointer, temp_var3 = previous_item, next_pointer = current_node,\n              (flags & *(uint *)((long)current_node + 0x14)) != 0) {\n          temp_var2 = current_node[1];\n          if (*(char *)temp_var2 == '!') {\n            comparison_result = fnmatch((char *)((long)temp_var2 + 1),(char *)input_array,0);\n            if (comparison_result == 0) goto LAB_0011438e;\n            next_pointer = (long **)*current_node;\n            if ((long **)*current_node == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            comparison_result = fnmatch((char *)temp_var2,(char *)input_array,0);\n            if ((previous_item == (long **)0x0) && (comparison_result == 0)) {\n              previous_item = current_node;\n              next_pointer = (long **)*current_node;\n              if ((long **)*current_node == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              next_pointer = (long **)*current_node;\n              if ((long **)*current_node == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        comparison_result = strcmp((char *)next_pointer[1],(char *)input_array);\n        temp_var3 = current_node;\n        previous_item = next_pointer;\n        if (comparison_result == 0) goto LAB_001143cd;\n      }\n      current_node = temp_var3;\n      next_pointer = (long **)*next_pointer;\n      previous_item = current_node;\n    } while (next_pointer != (long **)0x0);\nLAB_001142a1:\n    if (flag != '\\0') {\nLAB_001142a9:\n      current_node = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(current_node + 3) = (undefined  [16])0x0;\n      *(undefined *)(current_node + 2) = 0;\n      *(uint *)((long)current_node + 0x14) = flags;\n      current_node[5] = (long *)0x0;\n      previous_item = current_node;\n      *current_node = (long *)DAT_00127900;\n      DAT_00127900 = previous_item;\n      current_node[1] = input_array;\n      return current_node;\n    }\n  }\nLAB_00114212:\n  if (previous_item == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(previous_item + 2) = 1;\n  return previous_item;\n}\n\n",
            "current_name": "process_data_00114190",
            "entrypoint": "0x00114190",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114190": "process_data_00114190",
                "dcgettext": "get_translated_string",
                "fnmatch": "match_pattern",
                "iVar4": "comparison_result",
                "param_1": "input_array",
                "param_2": "flag",
                "param_3": "flags",
                "plVar2": "temp_var2",
                "pplVar3": "temp_var3",
                "pplVar6": "current_node",
                "pplVar7": "previous_item",
                "pplVar8": "next_pointer",
                "strcmp": "compare_strings",
                "uVar1": "temp_var1",
                "uVar5": "error_message",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114460": {
            "additional_data": {
                "*piVar2": {
                    "1": "error_number_ptr"
                },
                "DAT_00127a40": {
                    "1": "has_error"
                },
                "FUN_00113f50": {
                    "4": "get_file_size"
                },
                "FUN_00114460": {
                    "1": "extract_and_process_file",
                    "12": "read_and_process_file",
                    "2": "read_file_and_process_lines",
                    "3": "process_file",
                    "5": "parse_file"
                },
                "__errno_location": {
                    "1": "get_error_code_location",
                    "3": "get_errno_location"
                },
                "__n": {
                    "1": "filesize",
                    "30": "file_size"
                },
                "__ptr": {
                    "1": "file_content",
                    "22": "buffer",
                    "3": "file_data",
                    "5": "file_buffer"
                },
                "__stream": {
                    "18": "file",
                    "2": "file_ptr",
                    "3": "file_pointer",
                    "8": "file_stream"
                },
                "bVar8": {
                    "1": "byte_value",
                    "11": "current_char",
                    "12": "current_byte",
                    "2": "ch"
                },
                "dcgettext": {
                    "1": "translate",
                    "2": "translate_message"
                },
                "fclose": {
                    "1": "close_file_stream",
                    "3": "close_file"
                },
                "ferror": {
                    "1": "check_file_error",
                    "2": "check_error"
                },
                "fopen": {
                    "4": "open_file"
                },
                "fread": {
                    "2": "read_from_file"
                },
                "iVar1": {
                    "1": "line_index",
                    "19": "line_number",
                    "3": "line_count",
                    "4": "line_counter"
                },
                "param_1": {
                    "31": "filename"
                },
                "param_2": {
                    "1": "dictionary",
                    "21": "hash_table",
                    "3": "table",
                    "5": "hashtable"
                },
                "param_3": {
                    "1": "buffer_ptr",
                    "13": "file_content",
                    "2": "data",
                    "3": "output",
                    "6": "file_data"
                },
                "pbVar10": {
                    "1": "current_char",
                    "2": "current_character",
                    "3": "current_pos",
                    "6": "current_position"
                },
                "pbVar11": {
                    "1": "last_non_space_char_pointer",
                    "2": "ptr2"
                },
                "pbVar12": {
                    "1": "start_pos",
                    "2": "current_line",
                    "7": "line_start"
                },
                "pbVar7": {
                    "1": "ptr_whitespace",
                    "2": "line",
                    "4": "current_char"
                },
                "pbVar8": {
                    "2": "current_char"
                },
                "pbVar9": {
                    "1": "next_line_start",
                    "2": "next_character",
                    "3": "next_line_ptr",
                    "7": "next_char",
                    "8": "next_byte"
                },
                "pcVar3": {
                    "1": "err_msg",
                    "16": "error_message",
                    "2": "error_msg",
                    "8": "error_string"
                },
                "piVar2": {
                    "1": "error_ptr",
                    "2": "error_num",
                    "5": "error_number",
                    "6": "errno_location"
                },
                "ppbVar6": {
                    "1": "hash_entry",
                    "2": "hash_table_slot_ptr",
                    "3": "hash_table_entry",
                    "4": "slot_ptr",
                    "7": "slot",
                    "8": "hash_table_slot"
                },
                "sVar5": {
                    "26": "bytes_read",
                    "5": "read_size"
                },
                "strerror": {
                    "2": "get_error_message"
                },
                "uVar4": {
                    "1": "localized_string",
                    "2": "localized_message",
                    "3": "translated_error_message",
                    "4": "translated_msg",
                    "7": "translated_message",
                    "8": "translated_string"
                },
                "xmalloc": {
                    "4": "allocate_memory"
                }
            },
            "called": [
                "FUN_00119dd0",
                "fclose",
                "ferror",
                "xmalloc",
                "FUN_00113f50",
                "fread",
                "strerror",
                "dcgettext",
                "__errno_location",
                "fopen"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid read_and_process_file_00114460(char *filename,undefined8 hash_table,byte **file_content)\n\n{\n  int line_number;\n  int *errno_location;\n  char *error_message;\n  undefined8 translated_string;\n  size_t file_size;\n  byte *buffer;\n  FILE *file;\n  size_t bytes_read;\n  byte **hash_table_slot;\n  byte *current_char;\n  byte current_byte;\n  byte *next_byte;\n  byte *current_position;\n  byte *next_pos;\n  byte *line_start;\n  \n  file_size = FUN_00113f50();\n  if (file_size == 0) {\n    DAT_00127a40 = 1;\n  }\n  else {\n    buffer = (byte *)xmalloc(file_size + 2);\n    file = fopen(filename,\"r\");\n    if (file == (FILE *)0x0) {\n      errno_location = __errno_location();\n      error_message = strerror(*errno_location);\n      translated_string = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      FUN_00119dd0(translated_string,filename,error_message);\n    }\n    bytes_read = fread(buffer,1,file_size,file);\n    if ((bytes_read == 0) || (line_number = ferror(file), line_number != 0)) {\n      translated_string = dcgettext(0,\"%s: fread failed\",5);\n                    \n      FUN_00119dd0(translated_string,filename);\n    }\n    line_number = 1;\n    fclose(file);\n    *(undefined2 *)(buffer + file_size) = 10;\n    current_byte = *buffer;\n    line_start = buffer;\n    while (current_position = line_start, current_byte != 0) {\n      for (; current_byte = *current_position, next_pos = current_position, current_byte != 10; current_position = current_position + 1) {\n        if ((char)current_byte < '\\v') {\n          if (current_byte == 0) {\n            next_byte = current_position + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (current_byte == 0xd) {\n            *current_position = 0;\n            next_byte = current_position + 1;\n            if (current_position[1] == 10) {\n              next_byte = current_position + 2;\n              next_pos = current_position + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (current_byte == 0x23) {\n            FUN_00104d1c();\n            return;\n          }\n        }\n      }\n      *current_position = 0;\n      if (current_position[1] == 0xd) {\n        next_pos = current_position + 1;\n        next_byte = current_position + 2;\n      }\n      else {\n        next_byte = current_position + 1;\n      }\nLAB_00114553:\n      current_byte = *line_start;\n      while ((current_byte == 0x20 || (current_position = line_start, current_byte == 9))) {\n        current_position = line_start + 1;\n        line_start = line_start + 1;\n        current_byte = *current_position;\n      }\n      do {\n        if ((current_byte == 10) || (current_byte == 0xd)) goto LAB_00114676;\n        if (current_byte == 0) goto LAB_00114599;\n        current_byte = current_position[1];\n        current_position = current_position + 1;\n      } while ((current_byte != 0x20) && (current_byte != 9));\n      if ((char)current_byte < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        current_byte = current_position[1];\n        if ((((((current_byte == 9) || (current_byte == 0x20)) &&\n              ((current_byte = current_position[2], current_byte == 9 || (current_byte == 0x20)))) &&\n             ((current_byte = current_position[3], current_byte == 9 || (current_byte == 0x20)))) &&\n            ((current_byte = current_position[4], current_byte == 9 || (current_byte == 0x20)))) &&\n           ((current_byte = current_position[5], current_byte == 9 || (current_byte == 0x20)))) {\n          current_byte = current_position[6];\n          current_char = current_position + 6;\n          if ((current_byte == 9) || (current_byte == 0x20)) {\n            do {\n              do {\n                current_byte = current_char[1];\n                current_char = current_char + 1;\n              } while (current_byte == 0x20);\n            } while (current_byte == 9);\n          }\n        }\n        if ((0xd < current_byte) || ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0)) {\n          translated_string = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          FUN_00119ed0(translated_string,filename,line_number);\n        }\n      }\nLAB_00114599:\n      *current_position = 0;\n      if (line_start < current_position) {\n        hash_table_slot = (byte **)htab_find_slot(hash_table,line_start,1);\n        *hash_table_slot = line_start;\n      }\n      line_number = line_number + 1;\n      line_start = next_byte;\n      current_byte = next_pos[1];\n    }\n    *file_content = buffer;\n  }\n  return;\n}\n\n",
            "current_name": "read_and_process_file_00114460",
            "entrypoint": "0x00114460",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114460": "read_and_process_file_00114460",
                "__errno_location": "get_errno_location",
                "__n": "file_size",
                "__ptr": "buffer",
                "__stream": "file",
                "bVar8": "current_byte",
                "dcgettext": "translate_message",
                "fclose": "close_file",
                "ferror": "check_error",
                "fopen": "open_file",
                "fread": "read_from_file",
                "iVar1": "line_number",
                "param_1": "filename",
                "param_2": "hash_table",
                "param_3": "file_content",
                "pbVar10": "current_position",
                "pbVar11": "next_pos",
                "pbVar12": "line_start",
                "pbVar7": "current_char",
                "pbVar9": "next_byte",
                "pcVar3": "error_message",
                "piVar2": "errno_location",
                "ppbVar6": "hash_table_slot",
                "sVar5": "bytes_read",
                "strerror": "get_error_string",
                "uVar4": "translated_string",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114690": {
            "additional_data": {
                "DAT_0011b47d": {
                    "1": "global_var9"
                },
                "DAT_001264b4": {
                    "1": "global_var8"
                },
                "DAT_0012799c": {
                    "1": "global_var7"
                },
                "DAT_001279a4": {
                    "1": "global_variable_1"
                },
                "DAT_001279e9": {
                    "1": "copying_error_flag"
                },
                "DAT_001279eb": {
                    "1": "global_var4"
                },
                "DAT_00127a30": {
                    "1": "global_var3"
                },
                "DAT_00127a40": {
                    "1": "global_var2"
                },
                "DAT_00127a48": {
                    "1": "global_variable_3"
                },
                "FUN_00114690": {
                    "1": "extract_file_from_archive",
                    "2": "process_file",
                    "7": "process_binary_file"
                },
                "__ptr": {
                    "1": "pointer_to_uint64_3"
                },
                "bVar1": {
                    "1": "file_attributes",
                    "12": "byte_var1",
                    "2": "flag",
                    "3": "byte_value",
                    "4": "byte_var"
                },
                "bVar25": {
                    "1": "global_var_flag",
                    "10": "bool_var1",
                    "2": "bool_var25",
                    "3": "bool_var"
                },
                "bVar26": {
                    "1": "boolean_variable3",
                    "10": "byte_var2",
                    "2": "bool_var2",
                    "3": "byte_var26"
                },
                "cVar2": {
                    "1": "char1",
                    "10": "char_var1",
                    "2": "format_check_result",
                    "5": "char_var2"
                },
                "cVar3": {
                    "1": "char_value2",
                    "10": "char_var2",
                    "2": "char_variable2",
                    "5": "char_var3"
                },
                "copyFunctions": {
                    "1": "copy_functions"
                },
                "errorCode": {
                    "1": "error_code"
                },
                "getIndexNewName": {
                    "1": "get_index"
                },
                "iVar4": {
                    "1": "index",
                    "2": "status",
                    "3": "int_var4",
                    "8": "int_var1"
                },
                "iVar5": {
                    "1": "int_var_2",
                    "2": "status",
                    "3": "int_var5",
                    "5": "bfd_stat_result",
                    "8": "int_var2"
                },
                "lStack_98": {
                    "1": "long_stack_var_98",
                    "2": "file_size2",
                    "4": "l_stack_var1",
                    "8": "file_size"
                },
                "lVar13": {
                    "1": "temp_dir_handle",
                    "2": "long_variable2",
                    "3": "file_size",
                    "9": "long_var2"
                },
                "lVar21": {
                    "1": "length_2",
                    "2": "buffer_size",
                    "3": "long_var21",
                    "8": "long_var3"
                },
                "lVar8": {
                    "1": "read_result",
                    "2": "long_variable1",
                    "3": "size",
                    "9": "long_var1"
                },
                "length": {
                    "1": "file_length"
                },
                "local_158": {
                    "1": "stat_var1",
                    "2": "local_stat_struct",
                    "3": "archived_file_stat",
                    "4": "local_stat"
                },
                "local_198": {
                    "1": "current_temp_dir_handle_ptr",
                    "2": "local_pointer_long"
                },
                "local_1a0": {
                    "1": "ulong_ptr1",
                    "2": "output_file_handle"
                },
                "local_c8": {
                    "1": "temp_dirs_array",
                    "2": "local_temp_dir",
                    "3": "temp_dir_array"
                },
                "local_c8 [3]": {
                    "1": "void_pointer_array"
                },
                "param_1": {
                    "1": "file_input_name",
                    "10": "input_file_path",
                    "17": "input_file",
                    "2": "input_file_name"
                },
                "param_2": {
                    "1": "file_output",
                    "10": "output_file_path",
                    "17": "output_file",
                    "2": "output_file_name"
                },
                "param_3": {
                    "1": "fd",
                    "30": "file_descriptor"
                },
                "param_4": {
                    "1": "file_properties",
                    "2": "stat_buf",
                    "3": "stat_buffer",
                    "4": "file_stat",
                    "5": "file_status"
                },
                "param_5": {
                    "1": "bfd_flags",
                    "2": "bfd_parameters",
                    "3": "flags",
                    "4": "bfd_options",
                    "5": "target_format"
                },
                "param_6": {
                    "1": "archive_mode",
                    "2": "tempdir",
                    "3": "temp_dir_path",
                    "6": "temp_dir"
                },
                "param_7": {
                    "1": "flags",
                    "2": "unknown_param",
                    "3": "copy_options"
                },
                "pcVar15": {
                    "1": "pointer_char_var15",
                    "2": "pointer_to_char1",
                    "5": "temp_dir"
                },
                "pcVar17": {
                    "1": "pointer_char2",
                    "2": "current_path",
                    "3": "pointer_to_char2"
                },
                "pcVar18": {
                    "1": "pathname",
                    "2": "temp_path",
                    "3": "pointer_to_char3"
                },
                "pcVar19": {
                    "1": "pointer_char_4"
                },
                "pcVar20": {
                    "1": "code_ptr",
                    "2": "pointer_to_code",
                    "3": "close_function"
                },
                "pcVar23": {
                    "1": "temp_path",
                    "2": "pointer_to_char",
                    "3": "temp_string"
                },
                "pcVar24": {
                    "1": "stat_ptr"
                },
                "piVar10": {
                    "1": "ptr2",
                    "2": "errno_ptr",
                    "3": "int_ptr1",
                    "4": "errno_location"
                },
                "piVar14": {
                    "1": "temp_ptr"
                },
                "piVar15": {
                    "1": "ptr_to_char_ptr"
                },
                "ppcVar16": {
                    "1": "pointer_pointer_char_1",
                    "2": "pointer_to_pointer_char2",
                    "5": "archived_file"
                },
                "ppcVar19": {
                    "1": "temp_files"
                },
                "ppcVar20": {
                    "1": "close_function"
                },
                "ppcVar6": {
                    "1": "double_pointer_char_var6",
                    "2": "pointer_to_char_pointer",
                    "3": "pointer_to_pointer_char1"
                },
                "ppvVar16": {
                    "1": "pointer_pointer_array"
                },
                "psVar24": {
                    "1": "stat_ptr1",
                    "2": "stat_ptr",
                    "3": "pointer_to_stat"
                },
                "puVar14": {
                    "1": "input_file_bfd",
                    "5": "bfd_handle"
                },
                "puVar15": {
                    "1": "pointer_to_char1"
                },
                "puVar19": {
                    "1": "new_handle"
                },
                "puVar9": {
                    "1": "undefined8_ptr",
                    "2": "temp_pointer"
                },
                "pvVar7": {
                    "1": "temp_buffer",
                    "2": "pointer_void",
                    "3": "pointer_to_void",
                    "8": "buffer"
                },
                "uStack_b0": {
                    "1": "uint_var1",
                    "2": "permissions",
                    "4": "u_stack_var1"
                },
                "uVar11": {
                    "1": "long_var11",
                    "2": "uint64_var1",
                    "3": "undefined8_var1",
                    "4": "uint_var1"
                },
                "uVar12": {
                    "1": "unsigned_long_var12",
                    "2": "error_string",
                    "3": "undefined8_var2",
                    "4": "uint_var2"
                },
                "uVar22": {
                    "1": "format_flag",
                    "2": "unsigned_var22",
                    "4": "uint_var1"
                }
            },
            "called": [
                "FUN_0011a0e0",
                "bfd_openr_next_archived_file",
                "__errno_location",
                "bfd_check_format",
                "FUN_001126c0",
                "bfd_set_error",
                "FUN_00114d50",
                "bfd_close_all_done",
                "strerror",
                "bfd_get_error",
                "bfd_check_format_matches",
                "FUN_00104d25",
                "close",
                "bfd_openr",
                "dcgettext",
                "bfd_openw",
                "free",
                "bfd_close",
                "bfd_fdopenw",
                "bfd_set_format",
                "FUN_00119dd0",
                "FUN_00119ed0",
                "FUN_00113f50",
                "bfd_stat",
                "FUN_00114e50",
                "FUN_0011256b"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nvoid process_binary_file_00114690(undefined8 input_file,undefined8 output_file,int file_descriptor,undefined8 file_status,\n                 undefined8 target_format,long temp_dir,undefined8 copy_options)\n\n{\n  byte byte_var1;\n  char char_var1;\n  char char_var2;\n  int int_var1;\n  int int_var2;\n  char **pointer_to_pointer_char1;\n  void *buffer;\n  long long_var1;\n  undefined8 *temp_pointer;\n  int *errno_location;\n  undefined8 uint_var1;\n  undefined8 uint_var2;\n  long long_var2;\n  undefined8 *bfd_handle;\n  char *temp_dir;\n  char **archived_file;\n  char *pointer_to_char2;\n  char *pointer_to_char3;\n  undefined8 *pointer_to_uint64_3;\n  char **pointer_to_pointer_to_string_array_2;\n  code *close_function;\n  long long_var3;\n  uint uint_var1;\n  char *temp_string;\n  stat *pointer_to_stat;\n  bool bool_var1;\n  byte byte_var2;\n  undefined8 *output_file_handle;\n  long *local_long_var198;\n  stat local_stat;\n  void *temp_dir_array [3];\n  uint u_stack_var1;\n  long file_size;\n  \n  byte_var2 = 0;\n  long_var2 = FUN_00113f50();\n  if (long_var2 < 1) {\n    if (long_var2 == 0) {\n      uint_var2 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      FUN_00119ed0(uint_var2,input_file);\n    }\n    DAT_00127a40 = 1;\n    return;\n  }\n  bfd_handle = (undefined8 *)bfd_openr(input_file,target_format);\n  if ((bfd_handle == (undefined8 *)0x0) || (int_var2 = bfd_stat(bfd_handle,file_status), int_var2 != 0)) {\n    FUN_001126c0(input_file,0,0,0);\n    DAT_00127a40 = 1;\n    return;\n  }\n  switch(DAT_001279a4) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x8000;\n  }\n  if (DAT_0012799c == 1) {\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0xc0000;\n  }\n  else if (DAT_0012799c == 2) {\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x40000;\n  }\n  char_var1 = bfd_check_format(bfd_handle,2);\n  if (char_var1 != '\\0') {\n    if (temp_dir == 0) {\n      char_var1 = '\\0';\n      temp_dir = *(long *)bfd_handle[1];\n    }\n    if (file_descriptor < 0) {\n      output_file_handle = (undefined8 *)bfd_openw(output_file,temp_dir);\n    }\n    else {\n      output_file_handle = (undefined8 *)bfd_fdopenw(output_file,temp_dir,file_descriptor);\n    }\n    if (output_file_handle != (undefined8 *)0x0) {\n      if (DAT_00127a30 != 0) {\n        uint_var2 = *bfd_handle;\n        uint_var1 = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        FUN_00119ed0(uint_var1,uint_var2);\n        DAT_00127a30 = 0;\n      }\n      FUN_00114d50(output_file_handle,bfd_handle,DAT_001264b4);\n      local_long_var198 = output_file_handle + 0x1f;\n      if ((*(byte *)((long)bfd_handle + 0x49) & 0x10) != 0) {\n        DAT_00127a40 = 1;\n        bfd_set_error(5);\n        uint_var2 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        FUN_001126c0(0,bfd_handle,0,uint_var2);\n        return;\n      }\n      temp_dir = (char *)FUN_0011a0e0(*output_file_handle);\n      if (temp_dir == (char *)0x0) {\n        errno_location = __errno_location();\n        temp_dir = strerror(*errno_location);\n        uint_var2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        FUN_00119dd0(uint_var2,temp_dir);\n      }\n      if (DAT_00127a48 == 7) {\n        byte_var1 = *(byte *)((long)bfd_handle + 0x49);\n        uint_var1 = 0;\n      }\n      else {\n        byte_var1 = *(byte *)((long)bfd_handle + 0x49);\n        uint_var1 = byte_var1 >> 3 & 1;\n      }\n      bool_var1 = _DAT_001264b0 != 0;\n      *(byte *)((long)output_file_handle + 0x49) =\n           byte_var1 & 0x10 | (byte)(uint_var1 << 3) | *(byte *)((long)output_file_handle + 0x49) & 0xe7;\n      if (bool_var1) {\n        *(uint *)((long)output_file_handle + 0x44) = *(uint *)((long)output_file_handle + 0x44) | 0x2000;\n      }\n      pointer_to_uint64_3 = (undefined8 *)0x0;\n      archived_file = (char **)bfd_openr_next_archived_file(bfd_handle,0);\n      char_var2 = bfd_set_format(output_file_handle,*(byte *)(bfd_handle + 9) & 7);\n      if (char_var2 == '\\0') {\n        DAT_00127a40 = 1;\n        FUN_001126c0(0,output_file_handle,0,0);\n        FUN_00114b84();\n        return;\n      }\n      while ((DAT_00127a40 == 0 && (archived_file != (char **)0x0))) {\n        pointer_to_char3 = *archived_file;\n        pointer_to_char2 = pointer_to_char3;\n        if (*pointer_to_char3 == '/') {\nLAB_0010527d:\n          uint_var2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          FUN_00119ed0(uint_var2,pointer_to_char3);\nLAB_00104e93:\n          DAT_00127a40 = 1;\n          goto LAB_00114b4b;\n        }\n        while (*pointer_to_char2 != '\\0') {\n          temp_string = pointer_to_char2;\n          if ((*pointer_to_char2 == '.') && (temp_string = pointer_to_char2 + 1, pointer_to_char2[1] == '.')) {\n            temp_string = pointer_to_char2 + 2;\n            if ((pointer_to_char2[2] == '\\0') || (pointer_to_char2[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*temp_string != '\\0' && (*temp_string != '/')); temp_string = temp_string + 1) {\n          }\n          pointer_to_char2 = temp_string;\n          if (*temp_string == '/') {\n            FUN_001052a2();\n            return;\n          }\n        }\n        pointer_to_char3 = (char *)concat(temp_dir,&DAT_0011b47d);\n        int_var2 = stat(pointer_to_char3,&local_stat);\n        temp_pointer = pointer_to_uint64_3;\n        if (-1 < int_var2) {\n          long_var2 = FUN_0011a0e0(pointer_to_char3);\n          free(pointer_to_char3);\n          if (long_var2 == 0) {\n            errno_location = __errno_location();\n            pointer_to_char3 = strerror(*errno_location);\n            uint_var2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            FUN_00119ed0(uint_var2,pointer_to_char3);\n            goto LAB_00104e93;\n          }\n          temp_pointer = (undefined8 *)xmalloc(0x18);\n          pointer_to_char3 = *archived_file;\n          *temp_pointer = pointer_to_uint64_3;\n          temp_pointer[2] = 0;\n          temp_pointer[1] = long_var2;\n          pointer_to_char3 = (char *)concat(long_var2,&DAT_0011b47d,pointer_to_char3);\n        }\n        int_var2 = 0;\n        if (DAT_001279eb != '\\0') {\n          pointer_to_stat = &local_stat;\n          for (long_var2 = 0x24; long_var2 != 0; long_var2 = long_var2 + -1) {\n            *(undefined4 *)&pointer_to_stat->st_dev = 0;\n            pointer_to_stat = (stat *)((long)pointer_to_stat + (ulong)byte_var2 * -8 + 4);\n          }\n          pointer_to_pointer_to_string_array_2 = (char **)archived_file[0x1d];\n          if ((char **)archived_file[0x1d] == (char **)0x0) {\n            pointer_to_pointer_to_string_array_2 = archived_file;\n          }\n          int_var2 = (**(code **)(pointer_to_pointer_to_string_array_2[1] + 0x1e8))(archived_file,&local_stat);\n          if (int_var2 != 0) {\n            pointer_to_char2 = *archived_file;\n            uint_var2 = dcgettext(0,\"internal stat error on %s\",5);\n            FUN_00119ed0(uint_var2,pointer_to_char2);\n          }\n        }\n        pointer_to_uint64_3 = (undefined8 *)xmalloc(0x18);\n        pointer_to_uint64_3[1] = pointer_to_char3;\n        *pointer_to_uint64_3 = temp_pointer;\n        pointer_to_uint64_3[2] = 0;\n        char_var2 = bfd_check_format(archived_file,1);\n        if (char_var2 == '\\0') {\n          uint_var2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          FUN_001126c0(0,archived_file,0,uint_var2);\n          pointer_to_pointer_to_string_array_2 = (char **)bfd_openw(pointer_to_char3,temp_dir);\n          if (pointer_to_pointer_to_string_array_2 == (char **)0x0) {\nLAB_00104e80:\n            FUN_001126c0(pointer_to_char3,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          pointer_to_pointer_char1 = (char **)archived_file[0x1d];\n          if ((char **)archived_file[0x1d] == (char **)0x0) {\n            pointer_to_pointer_char1 = archived_file;\n          }\n          int_var1 = (**(code **)(pointer_to_pointer_char1[1] + 0x1e8))(archived_file);\n          long_var2 = file_size;\n          if (int_var1 == 0) {\n            if (file_size < 0) {\n              FUN_001125fa(archived_file);\n              uint_var2 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              FUN_00119ed0(uint_var2);\n            }\n            else {\n              int_var1 = bfd_seek(archived_file,0,0);\n              if (int_var1 == 0) {\n                if (DAT_001279e9 != '\\0') {\n                  pointer_to_char2 = *pointer_to_pointer_to_string_array_2;\n                  uint_var2 = FUN_001125fa(archived_file);\n                  temp_string = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(temp_string,uint_var2,pointer_to_char2);\n                }\n                buffer = (void *)xmalloc(0x2000);\n                for (; long_var2 != 0; long_var2 = long_var2 - long_var3) {\n                  long_var3 = 0x2000;\n                  if (long_var2 < 0x2001) {\n                    long_var3 = long_var2;\n                  }\n                  long_var1 = bfd_bread(buffer,long_var3,archived_file);\n                  pointer_to_pointer_char1 = archived_file;\n                  if ((long_var3 != long_var1) ||\n                     (long_var1 = bfd_bwrite(buffer,long_var3,pointer_to_pointer_to_string_array_2), pointer_to_pointer_char1 = pointer_to_pointer_to_string_array_2,\n                     long_var3 != long_var1)) {\n                    FUN_001126c0(0,pointer_to_pointer_char1,0,0);\n                    free(buffer);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*pointer_to_pointer_to_string_array_2,u_stack_var1 | 0x100);\n                free(buffer);\n                char_var2 = bfd_close_all_done(pointer_to_pointer_to_string_array_2);\n                if (char_var2 == '\\0') {\n                  FUN_001126c0(pointer_to_char3,0,0,0);\n                  DAT_00127a40 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              uint_var2 = FUN_001125fa(archived_file);\n              FUN_0011a110(uint_var2);\n            }\n          }\n          else {\n            FUN_001126c0(0,archived_file,0,0);\n          }\nLAB_00104f00:\n          char_var2 = bfd_close_all_done(pointer_to_pointer_to_string_array_2);\n          if (char_var2 == '\\0') {\n            FUN_001126c0(pointer_to_char3,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(pointer_to_char3);\n          DAT_00127a40 = 1;\n        }\n        else {\n          if (char_var1 == '\\0') {\n            pointer_to_pointer_to_string_array_2 = (char **)bfd_openw(pointer_to_char3,*(undefined8 *)archived_file[1]);\n          }\n          else {\n            pointer_to_pointer_to_string_array_2 = (char **)bfd_openw(pointer_to_char3,temp_dir);\n          }\n          if (pointer_to_pointer_to_string_array_2 == (char **)0x0) goto LAB_00104e80;\n          char_var2 = FUNC_00114e50(archived_file,pointer_to_pointer_to_string_array_2,copy_options);\n          if (char_var2 == '\\0') {\n            int_var1 = bfd_get_arch(archived_file);\n            if (int_var1 == 0) goto LAB_00104d75;\n            char_var2 = bfd_close_all_done(pointer_to_pointer_to_string_array_2);\n            if (char_var2 == '\\0') {\n              FUN_001126c0(pointer_to_char3,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          char_var2 = bfd_close(pointer_to_pointer_to_string_array_2);\n          if (char_var2 == '\\0') {\n            FUN_001126c0(pointer_to_char3,0,0,0);\n            DAT_00127a40 = 1;\n          }\nLAB_00114a86:\n          if ((DAT_001279eb != '\\0') && (int_var2 == 0)) {\n            FUN_0011a350(pointer_to_char3,&local_stat);\n          }\n          long_var2 = bfd_openr(pointer_to_char3,temp_dir);\n          pointer_to_uint64_3[2] = long_var2;\n          *local_long_var198 = long_var2;\n          local_long_var198 = (long *)(long_var2 + 0xf0);\n          pointer_to_pointer_to_string_array_2 = (char **)bfd_openr_next_archived_file(bfd_handle);\n          bfd_close(archived_file);\n          archived_file = pointer_to_pointer_to_string_array_2;\n        }\n      }\n      *local_long_var198 = 0;\n      buffer = (void *)xstrdup(*output_file_handle);\n      if (DAT_00127a40 == 0) {\n        close_function = bfd_close;\n      }\n      else {\n        close_function = bfd_close_all_done;\n      }\n      char_var1 = (*close_function)(output_file_handle);\n      if (char_var1 == '\\0') {\n        DAT_00127a40 = 1;\n        FUN_001126c0(buffer,0,0,0);\n      }\n      free(buffer);\n      buffer = (void *)xstrdup(*bfd_handle);\n      char_var1 = bfd_close(bfd_handle);\n      if (char_var1 == '\\0') {\n        DAT_00127a40 = 1;\n        FUN_001126c0(buffer,0,0,0);\n      }\n      free(buffer);\nLAB_00114b4b:\n      while (pointer_to_uint64_3 != (undefined8 *)0x0) {\n        if (pointer_to_uint64_3[2] == 0) {\n          rmdir((char *)pointer_to_uint64_3[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)pointer_to_uint64_3[1]);\n        }\n        free((void *)pointer_to_uint64_3[1]);\n        bfd_handle = (undefined8 *)*pointer_to_uint64_3;\n        free(pointer_to_uint64_3);\n        pointer_to_uint64_3 = bfd_handle;\n      }\n      rmdir(temp_dir);\n      free(temp_dir);\n      return;\n    }\nLAB_00105231:\n    close(file_descriptor);\n    FUN_001126c0(output_file,0,0,0);\n    DAT_00127a40 = 1;\n    return;\n  }\n  char_var1 = bfd_check_format_matches(bfd_handle,1,temp_dir_array);\n  if (char_var1 == '\\0') {\n    int_var2 = bfd_get_error();\n    char_var1 = bfd_check_format_matches(bfd_handle,3,&local_stat);\n    if (char_var1 == '\\0') {\n      int_var1 = bfd_get_error();\n      if (int_var2 != int_var1) {\n        bfd_set_error(int_var2);\n      }\n      FUN_001126c0(input_file,0,0,0);\n      if (int_var2 == 0xd) {\n        FUN_0011256b(temp_dir_array[0]);\n      }\n      if (int_var1 != 0xd) {\n        DAT_00127a40 = 1;\n        return;\n      }\n      FUN_0011256b(local_stat.st_dev);\n      DAT_00127a40 = 1;\n      return;\n    }\n    if (int_var2 == 0xd) {\n      free(temp_dir_array[0]);\n    }\n  }\n  if (temp_dir == 0) {\n    temp_dir = *(long *)bfd_handle[1];\n  }\n  if (file_descriptor < 0) {\n    long_var2 = bfd_openw(output_file,temp_dir);\n  }\n  else {\n    long_var2 = bfd_fdopenw(output_file,temp_dir,file_descriptor);\n  }\n  if (long_var2 == 0) goto LAB_00105231;\n  FUN_00114d50(long_var2,bfd_handle,DAT_001264b4);\n  char_var1 = FUNC_00114e50(bfd_handle,long_var2,copy_options);\n  if (char_var1 == '\\0') {\n    DAT_00127a40 = 1;\n  }\n  else if (DAT_00127a40 == 0) {\n    char_var1 = bfd_close(long_var2);\n    goto LAB_001147d5;\n  }\n  char_var1 = bfd_close_all_done(long_var2);\nLAB_001147d5:\n  if (char_var1 != '\\x01') {\n    DAT_00127a40 = 1;\n    FUN_001126c0(output_file,0,0,0);\n    return;\n  }\n  char_var1 = bfd_close(bfd_handle);\n  if (char_var1 == '\\0') {\n    DAT_00127a40 = 1;\n    FUN_001126c0(input_file,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_binary_file_00114690",
            "entrypoint": "0x00114690",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114690": "process_binary_file_00114690",
                "__ptr": "pointer_to_uint64_3",
                "bVar1": "byte_var1",
                "bVar25": "bool_var1",
                "bVar26": "byte_var2",
                "cVar2": "char_var1",
                "cVar3": "char_var2",
                "iVar4": "int_var1",
                "iVar5": "int_var2",
                "lStack_98": "file_size",
                "lVar13": "long_var2",
                "lVar21": "long_var3",
                "lVar8": "long_var1",
                "local_158": "local_stat",
                "local_198": "local_long_var198",
                "local_1a0": "output_file_handle",
                "local_c8": "temp_dir_array",
                "param_1": "input_file",
                "param_2": "output_file",
                "param_3": "file_descriptor",
                "param_4": "file_status",
                "param_5": "target_format",
                "param_6": "temp_dir",
                "param_7": "copy_options",
                "pcVar15": "temp_dir",
                "pcVar17": "pointer_to_char2",
                "pcVar18": "pointer_to_char3",
                "pcVar19": "str_var4",
                "pcVar20": "close_function",
                "pcVar23": "temp_string",
                "piVar10": "errno_location",
                "ppcVar16": "archived_file",
                "ppcVar19": "pointer_to_pointer_to_string_array_2",
                "ppcVar6": "pointer_to_pointer_char1",
                "psVar24": "pointer_to_stat",
                "puVar14": "bfd_handle",
                "puVar9": "temp_pointer",
                "pvVar7": "buffer",
                "uStack_b0": "u_stack_var1",
                "uVar11": "uint_var1",
                "uVar12": "uint_var2",
                "uVar22": "uint_var1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114b84": {
            "additional_data": {
                "FUN_00114b84": {
                    "1": "remove_directory_and_free",
                    "13": "remove_directory",
                    "2": "delete_and_free_directory",
                    "4": "remove_directory_and_free_memory",
                    "9": "remove_and_free_directory"
                },
                "free": {
                    "1": "free_memory"
                },
                "param_9": {
                    "28": "directory_path",
                    "3": "path"
                },
                "rmdir": {
                    "1": "remove_directory_function"
                }
            },
            "called": [
                "free",
                "rmdir"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00104d25"
            ],
            "code": "\nvoid remove_directory_00114b84(void)\n\n{\n  char *directory_path;\n  \n  rmdir(directory_path);\n  free_memory(directory_path);\n  return;\n}\n\n",
            "current_name": "remove_directory_00114b84",
            "entrypoint": "0x00114b84",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114b84": "remove_directory_00114b84",
                "free": "free_memory",
                "param_9": "directory_path",
                "rmdir": "remove_directory_function"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114c20": {
            "additional_data": {
                "&DAT_0011b499": {
                    "1": "condition_data"
                },
                "'\\0'": {
                    "1": "constant3"
                },
                "'a'": {
                    "1": "constant2"
                },
                "DAT_0011b499": {
                    "1": "data",
                    "2": "valid_data",
                    "3": "constant_data"
                },
                "DAT_001278d8": {
                    "1": "updated_data",
                    "2": "global_variable",
                    "3": "status",
                    "6": "flag"
                },
                "FUN_00113fb0": {
                    "1": "check_flag",
                    "2": "check_character",
                    "5": "check_validity",
                    "8": "check_condition"
                },
                "FUN_00114190": {
                    "1": "process_string",
                    "7": "process_data",
                    "9": "modify_data"
                },
                "FUN_00114c20": {
                    "1": "execute_process",
                    "23": "initialize_data",
                    "3": "process_data"
                },
                "cVar1": {
                    "1": "result1",
                    "2": "char_result",
                    "22": "result"
                },
                "param_1": {
                    "1": "process_data",
                    "12": "data_pointer",
                    "2": "data_ptr",
                    "3": "input_data",
                    "9": "data"
                },
                "param_2": {
                    "1": "data",
                    "3": "flag"
                },
                "param_3": {
                    "1": "substring_length",
                    "2": "value",
                    "8": "size"
                },
                "pcVar2": {
                    "1": "selected_char_pointer",
                    "2": "character_pointer",
                    "6": "pointer",
                    "9": "char_pointer"
                }
            },
            "called": [
                "FUN_00113fb0",
                "FUN_00114190"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid initialize_data_00114c20(long data_pointer)\n\n{\n  char result;\n  char *char_pointer;\n  \n  FUN_00114190(data_pointer,1,1);\n  result = FUN_00113fb0(data_pointer,&DAT_0011b499);\n  if (result != '\\0') {\n    char_pointer = (char *)(data_pointer + 5);\n    if (*(char *)(data_pointer + 4) != constant2) {\n      char_pointer = (char *)(data_pointer + 4);\n    }\n    if (*char_pointer != '\\0') {\n      FUN_00114190(char_pointer,1,0x100);\n    }\n  }\n  DAT_001278d8 = 1;\n  return;\n}\n\n",
            "current_name": "initialize_data_00114c20",
            "entrypoint": "0x00114c20",
            "imported": false,
            "improved": true,
            "renaming": {
                "'a'": "constant2",
                "FUN_00114c20": "initialize_data_00114c20",
                "cVar1": "result",
                "param_1": "data_pointer",
                "pcVar2": "char_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114c80": {
            "additional_data": {
                "FUN_001053b5": {
                    "1": "function1"
                },
                "FUN_00114c80": {
                    "1": "extract_parameter",
                    "2": "parse_assignment",
                    "3": "parse_param_string",
                    "4": "parse_param",
                    "7": "parse_parameter"
                },
                "FUN_00119dd0": {
                    "1": "handle_error_message"
                },
                "FUN_0011a480": {
                    "1": "substring",
                    "7": "get_substring"
                },
                "PTR_xmalloc": {
                    "1": "allocate_memory"
                },
                "auVar3": {
                    "1": "parsed_query_string",
                    "10": "result",
                    "2": "parsed_assignment",
                    "3": "parsed_params",
                    "9": "parsed_data"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "param_1": {
                    "1": "str",
                    "22": "input_string",
                    "5": "query_string"
                },
                "param_2": {
                    "1": "param2_value",
                    "2": "value1",
                    "3": "param_2",
                    "5": "default_value",
                    "6": "value_1"
                },
                "param_3": {
                    "1": "error_msg",
                    "17": "error_message",
                    "2": "param_3",
                    "3": "param_3_value"
                },
                "param_4": {
                    "1": "param4_value",
                    "2": "extra_data",
                    "5": "param_4_value",
                    "6": "value_2"
                },
                "pcVar1": {
                    "1": "equals_char_ptr",
                    "2": "equals_sign_pos",
                    "3": "equal_sign_ptr",
                    "4": "equal_sign_pos",
                    "8": "equal_sign_position"
                },
                "strchr": {
                    "1": "find_char",
                    "7": "find_character"
                },
                "uVar2": {
                    "1": "gettext_result",
                    "12": "result",
                    "2": "key",
                    "4": "error_message"
                },
                "xmalloc": {
                    "7": "allocate_memory"
                }
            },
            "called": [
                "xmalloc",
                "FUN_001053b5",
                "FUN_0011a480",
                "strchr"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16] parse_parameter_00114c80(char *input_string,undefined8 value_1,undefined8 error_message,undefined8 value_2)\n\n{\n  char *equal_sign_position;\n  undefined8 result;\n  undefined result [16];\n  \n  equal_sign_position = strchr(input_string,0x3d);\n  if (equal_sign_position != (char *)0x0) {\n    result._0_8_ = (undefined8 *)xmalloc(0x30);\n    result = FUN_0011a480(input_string,(long)equal_sign_position - (long)input_string);\n    result._0_8_[2] = equal_sign_position + 1;\n    result._0_8_[1] = result;\n    result._0_8_[4] = 0;\n    result._0_8_[3] = 0;\n    *result._0_8_ = value_1;\n    result._8_8_ = value_2;\n    return result;\n  }\n  result = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(result,error_message);\n}\n\n",
            "current_name": "parse_parameter_00114c80",
            "entrypoint": "0x00114c80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114c80": "parse_parameter_00114c80",
                "auVar3": "result",
                "dcgettext": "get_error_message",
                "param_1": "input_string",
                "param_2": "value_1",
                "param_3": "error_message",
                "param_4": "value_2",
                "pcVar1": "equal_sign_position",
                "strchr": "find_character",
                "uVar2": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114cf0": {
            "additional_data": {
                "FUN_00114cf0": {
                    "1": "reverse_file_name",
                    "15": "create_file_path",
                    "2": "create_directory_path",
                    "3": "create_path"
                },
                "bVar6": {
                    "1": "is_delimiter",
                    "2": "slash_found",
                    "7": "is_slash",
                    "8": "found_slash"
                },
                "lVar2": {
                    "1": "len",
                    "13": "index",
                    "2": "path_length",
                    "6": "length"
                },
                "lVar3": {
                    "1": "file_name_start_index",
                    "2": "start_index",
                    "5": "offset",
                    "6": "path_length",
                    "7": "prefix_length"
                },
                "lVar4": {
                    "1": "dir_length",
                    "13": "slash_index",
                    "2": "last_slash_index",
                    "3": "slash_position"
                },
                "param_1": {
                    "1": "input_filepath",
                    "11": "file_path",
                    "16": "path",
                    "2": "filename"
                },
                "pcVar1": {
                    "1": "last_occurrence",
                    "2": "last_delimiter",
                    "24": "last_slash"
                },
                "pcVar5": {
                    "1": "path_ptr",
                    "14": "new_path",
                    "4": "destination",
                    "5": "new_file_path"
                },
                "strrchr": {
                    "1": "find_last_character"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "xmalloc",
                "strrchr"
            ],
            "calling": [
                "FUN_0011a0e0",
                "FUN_00116b90"
            ],
            "code": "\nvoid create_file_path_00114cf0(char *path)\n\n{\n  char *last_slash;\n  long index;\n  long prefix_length;\n  long slash_index;\n  char *new_path;\n  byte found_slash;\n  \n  found_slash = 0;\n  last_slash = strrchr(path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    prefix_length = 0;\n  }\n  else {\n    slash_index = (long)last_slash - (long)path;\n    last_slash = (char *)xmalloc(slash_index + 0xb);\n    prefix_length = slash_index + 1;\n    new_path = last_slash;\n    for (index = slash_index; index != 0; index = index + -1) {\n      *new_path = *path;\n      path = path + (ulong)found_slash * -2 + 1;\n      new_path = new_path + (ulong)found_slash * -2 + 1;\n    }\n    last_slash[slash_index] = '/';\n  }\n  *(undefined8 *)(last_slash + prefix_length) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + prefix_length) + 8) = 0;\n  return;\n}\n\n",
            "current_name": "create_file_path_00114cf0",
            "entrypoint": "0x00114cf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114cf0": "create_file_path_00114cf0",
                "bVar6": "found_slash",
                "lVar2": "index",
                "lVar3": "prefix_length",
                "lVar4": "slash_index",
                "param_1": "path",
                "pcVar1": "last_slash",
                "pcVar5": "new_path",
                "strrchr": "find_last_occurrence",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114d50": {
            "additional_data": {
                "(**(code **)(*(long *)(*(long *)(param_1 + 8) + 0x380) + 0x78))": {
                    "1": "sub_function"
                },
                "(uint)*(byte *)(*(long *)(*(long *)(param_2 + 8) + 0x380) + 0x71)": {
                    "1": "modified_condition"
                },
                "*(int *)(*(long *)(param_1 + 8) + 8)": {
                    "1": "value1"
                },
                "*(int *)(*(long *)(param_2 + 8) + 8)": {
                    "1": "value2"
                },
                "0x0010540e": {
                    "1": "sub_function"
                },
                "<unnamed_variable>": {
                    "1": "operation_result"
                },
                "DAT_00105422": {
                    "1": "jumptable"
                },
                "F: ,\n: code_1": {
                    "1": "f"
                },
                "FUN_0010540e": {
                    "1": "execute_function",
                    "2": "process_data",
                    "5": "sub_function",
                    "6": "execute_sub_function"
                },
                "FUN_00114d50": {
                    "1": "execute_process",
                    "11": "execute_function",
                    "4": "process_data"
                },
                "Funct_RE_0x00114d50": {
                    "1": "check_and_execute"
                },
                "PTR_0010540e": {
                    "1": "pointer_action"
                },
                "byte": {
                    "1": "byte_value"
                },
                "byte_getter": {
                    "1": "get_byte"
                },
                "byte_value": {
                    "2": "value"
                },
                "code": {
                    "1": "call_function"
                },
                "jumptable_address": {
                    "1": "jump_table_addr"
                },
                "param_1": {
                    "1": "data1",
                    "2": "argument1",
                    "3": "input_1",
                    "4": "input1",
                    "6": "arg1"
                },
                "param_1_Fun_0010540e": {
                    "1": "arg1_execute_with_condition"
                },
                "param_2": {
                    "1": "obj2",
                    "2": "argument2",
                    "3": "input_2",
                    "4": "input2",
                    "5": "arg2"
                },
                "param_2_Fun_0010540e": {
                    "1": "arg2_execute_with_condition"
                },
                "param_3": {
                    "1": "flags",
                    "12": "flag",
                    "8": "condition"
                },
                "param_3_Fun_0010540e": {
                    "1": "condition_execute_with_condition"
                }
            },
            "called": [
                "FUN_0010540e"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid execute_function_00114d50(long arg1,long arg2,uint flag)\n\n{\n  if (*(int *)(*(long *)(arg1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((flag == 2) && (*(int *)(*(long *)(arg2 + 8) + 8) == 2)) {\n    flag = (uint)*(byte_value *)(*(long *)(*(long *)(arg2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(function_ptr **)(*(long *)(*(long *)(arg1 + 8) + 0x380) + 0x78))(arg1,flag != 0);\n  return;\n}\n\n",
            "current_name": "execute_function_00114d50",
            "entrypoint": "0x00114d50",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114d50": "execute_function_00114d50",
                "byte": "byte_value",
                "code": "function_ptr",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114d60": {
            "additional_data": {
                "FUN_00114d60": {
                    "1": "read_file_and_store_contents",
                    "2": "read_and_store_file_contents",
                    "3": "read_and_store_file",
                    "4": "read_file_contents",
                    "6": "read_file"
                },
                "FUN_00119dd0": {
                    "1": "handle_error"
                },
                "Fundo": {
                    "1": "read_and_store_file_contents"
                },
                "__errno_location": {
                    "1": "get_errno_location"
                },
                "__stream": {
                    "10": "file_stream",
                    "13": "file_pointer",
                    "2": "file_handle",
                    "3": "file"
                },
                "_stream": {
                    "1": "file_stream"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "fclose": {
                    "1": "close_file"
                },
                "feof": {
                    "1": "end_of_file"
                },
                "ferror": {
                    "1": "check_error"
                },
                "fopen": {
                    "1": "open_file"
                },
                "fread": {
                    "1": "read_bytes"
                },
                "iVar1": {
                    "1": "is_eof",
                    "10": "eof_indicator",
                    "4": "end_of_file",
                    "7": "is_end_of_file"
                },
                "lVar7": {
                    "1": "buffer_offset",
                    "5": "current_position",
                    "6": "current_offset",
                    "8": "current_size"
                },
                "lVar8": {
                    "1": "allocation_size",
                    "14": "buffer_size",
                    "2": "current_buffer_size",
                    "3": "allocated_size",
                    "7": "max_size"
                },
                "param_1": {
                    "1": "file_data",
                    "18": "file_info",
                    "9": "file_path"
                },
                "pcVar3": {
                    "1": "err_message",
                    "11": "error_string",
                    "13": "error_message",
                    "2": "err_msg",
                    "4": "error_msg"
                },
                "piVar2": {
                    "1": "error_flag_ptr",
                    "2": "error_code",
                    "3": "error_location",
                    "6": "errno_location",
                    "9": "errno_ptr"
                },
                "sVar6": {
                    "1": "fread_result",
                    "23": "bytes_read",
                    "4": "read_size"
                },
                "strerror": {
                    "2": "get_error_string"
                },
                "uVar4": {
                    "1": "error_message_format",
                    "2": "err_msg_format",
                    "3": "error_format_string",
                    "4": "error_format",
                    "5": "error_string",
                    "6": "error_message"
                },
                "uVar5": {
                    "1": "alloc_ptr",
                    "2": "buffer_ptr",
                    "5": "buffer",
                    "7": "allocated_memory"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                },
                "xrealloc": {
                    "1": "reallocate_memory"
                }
            },
            "called": [
                "xmalloc",
                "FUN_0010543c",
                "fopen"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid read_file_00114d60(long file_info)\n\n{\n  int eof_indicator;\n  int *errno_ptr;\n  char *error_message;\n  undefined8 error_message;\n  FILE *file_pointer;\n  undefined8 allocated_memory;\n  size_t bytes_read;\n  long current_size;\n  long buffer_size;\n  \n  file_pointer = fopen(*(char **)(file_info + 0x10),\"r\");\n  if (file_pointer == (FILE *)0x0) {\n    errno_ptr = __errno_location();\n    error_message = strerror(*errno_ptr);\n    allocated_memory = *(undefined8 *)(file_info + 0x10);\n    error_message = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    FUN_00119dd0(error_message,allocated_memory,error_message);\n  }\n  buffer_size = 0x1000;\n  current_size = 0;\n  allocated_memory = xmalloc(0x1000);\n  *(undefined8 *)(file_info + 0x20) = allocated_memory;\n  while( true ) {\n    eof_indicator = feof(file_pointer);\n    if (eof_indicator != 0) {\n      *(long *)(file_info + 0x18) = current_size;\n      fclose(file_pointer);\n      return;\n    }\n    if (current_size == buffer_size) {\n      buffer_size = current_size * 2;\n      allocated_memory = xrealloc(*(undefined8 *)(file_info + 0x20),buffer_size);\n      *(undefined8 *)(file_info + 0x20) = allocated_memory;\n    }\n    bytes_read = fread((void *)(*(long *)(file_info + 0x20) + current_size),1,buffer_size - current_size,file_pointer);\n    eof_indicator = ferror(file_pointer);\n    if (eof_indicator != 0) break;\n    current_size = current_size + bytes_read;\n  }\n  allocated_memory = *(undefined8 *)(file_info + 0x10);\n  error_message = dcgettext(0,\"%s: fread failed\",5);\n                    \n  FUN_00119dd0(error_message,allocated_memory);\n}\n\n",
            "current_name": "read_file_00114d60",
            "entrypoint": "0x00114d60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114d60": "read_file_00114d60",
                "__errno_location": "get_errno_location",
                "__stream": "file_pointer",
                "_stream": "file_stream",
                "dcgettext": "get_error_message",
                "fclose": "close_file",
                "feof": "end_of_file",
                "ferror": "check_error",
                "fopen": "open_file",
                "fread": "read_bytes",
                "iVar1": "eof_indicator",
                "lVar7": "current_size",
                "lVar8": "buffer_size",
                "param_1": "file_info",
                "pcVar3": "error_message",
                "piVar2": "errno_ptr",
                "sVar6": "bytes_read",
                "strerror": "get_error_string",
                "uVar4": "error_message",
                "uVar5": "allocated_memory",
                "xmalloc": "allocate_memory",
                "xrealloc": "reallocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114dc7": {
            "additional_data": {
                "(void *)(*(long *)(unaff_RBP + 0x20) + unaff_R12)": {
                    "1": "destination"
                },
                "FUN_00114dc7": {
                    "1": "process_data",
                    "2": "read_and_process_file",
                    "4": "read_and_resize_data",
                    "7": "read_and_resize_buffer"
                },
                "FUN_00119dd0": {
                    "1": "print_error_message"
                },
                "dcgettext": {
                    "2": "get_error_message"
                },
                "fclose": {
                    "1": "close_file"
                },
                "feof": {
                    "1": "is_end_of_file",
                    "2": "check_end_of_file"
                },
                "ferror": {
                    "1": "check_file_error",
                    "2": "check_error"
                },
                "fread": {
                    "1": "read_bytes"
                },
                "iVar1": {
                    "2": "error_status",
                    "23": "error",
                    "5": "error_flag"
                },
                "sVar4": {
                    "1": "num_read",
                    "26": "bytes_read",
                    "3": "read_size"
                },
                "uVar2": {
                    "1": "error_text",
                    "23": "error_message",
                    "5": "error_string"
                },
                "uVar3": {
                    "1": "placeholder",
                    "2": "translation",
                    "3": "error_context",
                    "4": "error_message",
                    "5": "message",
                    "7": "translated_error_message"
                },
                "unaff_R12": {
                    "1": "current_address",
                    "2": "start_index",
                    "3": "start_position",
                    "5": "current_position",
                    "8": "start_offset"
                },
                "unaff_R12 * 2": {
                    "1": "new_size"
                },
                "unaff_R14": {
                    "1": "read_end_index",
                    "10": "end_offset",
                    "2": "end_pos",
                    "3": "buffer_size",
                    "7": "end_position"
                },
                "unaff_RBP": {
                    "1": "buffer_offset",
                    "13": "buffer",
                    "5": "buffer_ptr",
                    "6": "buffer_pointer"
                },
                "unaff_RBX": {
                    "2": "file_ptr",
                    "22": "file",
                    "7": "file_pointer"
                },
                "xrealloc": {
                    "2": "resize_buffer"
                }
            },
            "called": [
                "fclose",
                "FUN_00119dd0",
                "ferror",
                "fread",
                "dcgettext",
                "FUN_00114dc7",
                "xrealloc",
                "feof"
            ],
            "calling": [
                "FUN_00114dc7"
            ],
            "code": "\nvoid read_and_resize_buffer_00114dc7(void)\n\n{\n  int error;\n  undefined8 error_message;\n  undefined8 translated_error_message;\n  size_t bytes_read;\n  FILE *file;\n  long buffer;\n  long start_offset;\n  long end_offset;\n  \n  while( true ) {\n    bytes_read = fread((void *)(*(long *)(buffer + 0x20) + start_offset),1,end_offset - start_offset,\n                  file);\n    error = ferror(file);\n    if (error != 0) {\n      translated_error_message = *(undefined8 *)(buffer + 0x10);\n      error_message = dcgettext(0,\"%s: fread failed\",5);\n                    \n      FUN_00119dd0(error_message,translated_error_message);\n    }\n    start_offset = start_offset + bytes_read;\n    error = feof(file);\n    if (error != 0) break;\n    if (start_offset == end_offset) {\n      end_offset = start_offset * 2;\n      translated_error_message = xrealloc(*(undefined8 *)(buffer + 0x20),end_offset);\n      *(undefined8 *)(buffer + 0x20) = translated_error_message;\n    }\n  }\n  *(long *)(buffer + 0x18) = start_offset;\n  fclose(file);\n  return;\n}\n\n",
            "current_name": "read_and_resize_buffer_00114dc7",
            "entrypoint": "0x00114dc7",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114dc7": "read_and_resize_buffer_00114dc7",
                "dcgettext": "get_error_message",
                "fclose": "close_file",
                "feof": "check_end_of_file",
                "ferror": "check_error",
                "fread": "read_bytes_from_file",
                "iVar1": "error",
                "sVar4": "bytes_read",
                "uVar2": "error_message",
                "uVar3": "translated_error_message",
                "unaff_R12": "start_offset",
                "unaff_R14": "end_offset",
                "unaff_RBP": "buffer",
                "unaff_RBX": "file",
                "xrealloc": "resize_buffer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114e00": {
            "additional_data": {
                "FUN_00114e00": {
                    "1": "get_endianness_description",
                    "11": "get_endianness",
                    "2": "decode_endianness",
                    "7": "get_endianness_string",
                    "9": "print_endianness"
                },
                "dcgettext": {
                    "1": "get_endianness_text",
                    "2": "translate",
                    "3": "translate_message",
                    "4": "get_endianness_string",
                    "7": "translate_text"
                },
                "param_1": {
                    "1": "endianness_value",
                    "2": "endianness_code",
                    "22": "endianness",
                    "3": "endianness_type"
                }
            },
            "called": [
                "dcgettext"
            ],
            "calling": [
                "FUN_00119f70"
            ],
            "code": "\nvoid get_endianness_00114e00(int endianness)\n\n{\n  if (endianness == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endianness == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "current_name": "get_endianness_00114e00",
            "entrypoint": "0x00114e00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114e00": "get_endianness_00114e00",
                "dcgettext": "translate_text",
                "param_1": "endianness"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114e50": {
            "called": [
                "bfd_set_format",
                "FUN_00119ed0",
                "FUN_001125fa",
                "FUN_00107976",
                "dcgettext",
                "FUN_001126c0"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    FUN_001126c0(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = FUN_001125fa(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (DAT_001279e9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((DAT_001279a4 != 1) && ((DAT_001279a4 & 1) != 0)) {\n      uVar18 = FUN_001125fa(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_0012799c != 0) {\n      uVar18 = FUN_001125fa(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_001279e9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (DAT_0012790c == '\\0') {\n    if (DAT_00127978 == '\\0') {\n      lVar35 = DAT_001279b8 + param_1[0x17];\n    }\n    else {\n      lVar35 = DAT_001279b8 + _DAT_00127980;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~DAT_00127910 & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (DAT_00127914 | *(uint *)((long)param_1 + 0x44));\n  if (DAT_00127a48 == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = FUN_001125fa(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = FUN_001125fa(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = FUN_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = FUN_00113fb0(**(undefined8 **)(param_2 + 8),&DAT_0011b503), cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = FUN_00113fb0(*(undefined8 *)param_1[1],&DAT_0011b503), cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = DAT_001279eb == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar35 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar35 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar35 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar35 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,DAT_001278c8);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,FUN_00115530,param_2);\n  puVar30 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = DAT_001279e0,\n     cVar11 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0,param_1,0);\n    puVar30 = DAT_001279e0;\n  }\n  for (; puVar38 = DAT_001279d8, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    uVar28 = 0x128;\n    lVar35 = FUN_00114190(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = FUN_00115f30(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      FUN_001126c0(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = FUN_00114190(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = FUN_00114190(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        FUN_001126c0(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      FUN_001126c0(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar18);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = DAT_00127a30;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = FUN_0010554f();\n    return uVar26;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &PTR_s__stab_00125c60;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)FUN_00112894(param_1,1,plVar6), pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = FUN_0011173a(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = FUN_0010c892(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = FUN_00112894(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          FUN_001088ae(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = FUN_0011173a(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar35 != 0) && (cVar11 = FUN_0010c892(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = FUN_0010bbd3(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = FUN_0010bbd3(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = FUN_00112a33(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = FUN_0010be88(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = FUN_0010bf20(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = FUN_0010dac0(param_1,&plStack_148,&pcStack_c8,lVar16,\n                                        uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38)\n                                        ,puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = FUN_0010bc80(puStack_1e8), cVar11 == '\\0'))\n                  goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = FUN_0010bf86(puStack_1e8,iVar13 + iVar32,\n                                            *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = FUN_0010be1a(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              FUN_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        FUN_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = DAT_001278d0 + uStack_1f8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      DAT_001278c8 = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = DAT_001279c0;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = DAT_001279c8;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = FUN_0011a2e0(puVar30);\n                  uVar18 = DAT_001278f0;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(DAT_001278f0);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(DAT_001278f0);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = DAT_001278f8, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0')) {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = DAT_00127928;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = DAT_00127928;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127928);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(DAT_00127a18,FUN_0011a170,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar18);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(DAT_00127a18,FUN_0011a170,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a10,FUN_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a28,FUN_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = FUN_001159d0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = FUN_00115d70(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(DAT_001279f8), lVar35 == 0 ||\n                      (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar30 = DAT_001279c8;\n        iVar13 = DAT_001279c0;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = FUN_0011a2e0(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279c0;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = DAT_001279a0 == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = FUN_0011378f(param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          FUN_001126c0(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,FUN_00116030,DAT_001278d0);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(DAT_00127a18);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(DAT_00127a28), lVar35 != 0 ||\n              (lVar35 = htab_elements(DAT_00127a08), lVar35 != 0)) ||\n             (lVar35 = htab_elements(DAT_00127a00), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(DAT_001279f8), lVar35 != 0 ||\n             (lVar35 = htab_elements(DAT_001279f0), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(DAT_001278f0), lVar35 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,DAT_001278c8,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,FUN_00115dc0,param_2);\n    bfd_map_over_sections(param_1,FUN_00116110,param_2);\n    for (puVar30 = DAT_001279e0; puVar38 = DAT_001279d8, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        FUN_001126c0(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        FUN_001126c0(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = FUN_00113fb0(*puVar30,\".gnu.build.attributes\"), cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          FUN_001126c0(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190), lVar35 = DAT_00127a30,\n       cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,DAT_00127930 & 0xffffffff);\n        uVar22 = DAT_00127930;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = FUN_00113fb0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)FUN_001163d0(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = DAT_001279d0;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_00114e50",
            "entrypoint": "0x00114e50",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_001152b6": {
            "called": [
                "FUN_00119ed0",
                "FUN_001125fa",
                "dcgettext",
                "FUN_00107880"
            ],
            "calling": [
                "FUN_00107976"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = FUN_001125fa();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = FUN_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = FUN_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279eb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279e0,\n     cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar31 = DAT_001279e0;\n  }\n  for (; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = FUN_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = FUN_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar19);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = FUN_0010554f();\n    return uVar28;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = FUN_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = FUN_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30)\n          ;\n          in_stack_00000018 = FUN_0011173a(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar27 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = FUN_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = FUN_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = FUN_0010dac0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = FUN_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = FUN_0010bf86(puStack0000000000000020,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              FUN_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        FUN_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = DAT_001278d0 + uStack0000000000000010;\n        plVar16 = DAT_001278d0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279c8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = FUN_0011a2e0(puVar31);\n                  uVar19 = DAT_001278f0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278f0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(DAT_001278f0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278f8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127928;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127928;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127928);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar19);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a10,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a28,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279c8;\n        iVar12 = DAT_001279c0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = FUN_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279c0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_001279a0 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_00127a18);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a28), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_00127a08), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_00127a00), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279f8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279f0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278f0), lVar27 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar31 = DAT_001279e0; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = DAT_00127a30, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar23 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)FUN_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279d0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_001152b6",
            "entrypoint": "0x001152b6",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00115530": {
            "additional_data": {
                "FUN_00115530": {
                    "1": "process_extracted_function",
                    "4": "create_output_section",
                    "5": "process_binary",
                    "9": "process_binary_function"
                },
                "bVar14": {
                    "1": "temp_var12",
                    "3": "temp_var14",
                    "4": "condition",
                    "5": "bool_var14"
                },
                "cVar4": {
                    "1": "temporary_char_variable",
                    "2": "status",
                    "3": "char_var",
                    "4": "char_var4",
                    "6": "result"
                },
                "iVar5": {
                    "1": "temporary_int_variable",
                    "2": "index",
                    "3": "comparison_result",
                    "4": "comparison",
                    "5": "int_var5",
                    "6": "temp_var5"
                },
                "lVar1": {
                    "1": "temp_variable_1",
                    "2": "result",
                    "4": "length_var1",
                    "8": "temp_var1"
                },
                "lVar9": {
                    "1": "temp9",
                    "2": "temp",
                    "6": "temp_var9"
                },
                "local_40": {
                    "1": "section_size_array",
                    "2": "size_array",
                    "3": "section_size"
                },
                "local_40[2]": {
                    "1": "section_sizes"
                },
                "local_48": {
                    "1": "string1",
                    "4": "local_var2",
                    "5": "local_var48"
                },
                "local_50": {
                    "1": "local_variable1",
                    "2": "error_code",
                    "3": "error",
                    "4": "error_msg",
                    "5": "local_var50"
                },
                "param_1": {
                    "1": "input_1",
                    "2": "binary",
                    "3": "input",
                    "4": "input_param",
                    "5": "arg1",
                    "6": "param1"
                },
                "param_2": {
                    "1": "file_content",
                    "2": "input_strings",
                    "3": "arg2",
                    "6": "arguments"
                },
                "param_3": {
                    "1": "input_3",
                    "2": "output_param",
                    "4": "output",
                    "5": "arg3",
                    "6": "param3"
                },
                "pcVar10": {
                    "1": "pointer1",
                    "2": "str2",
                    "3": "ptr_var10",
                    "4": "temp_var10"
                },
                "pcVar11": {
                    "1": "temp_var6",
                    "2": "pointer_var11",
                    "3": "ptr_var11",
                    "5": "temp_var11"
                },
                "pcVar12": {
                    "1": "temp_variable_12",
                    "2": "str4",
                    "3": "ptr_var12",
                    "5": "temp_var12"
                },
                "pcVar2": {
                    "1": "some_pointer",
                    "2": "pointer_var2",
                    "3": "ptr_var2",
                    "7": "temp_var2"
                },
                "ppcVar3": {
                    "1": "str_arr",
                    "2": "pointer_pointer_var3",
                    "3": "ptr_ptr_var3",
                    "6": "temp_var3"
                },
                "sVar7": {
                    "1": "src_length",
                    "2": "size1",
                    "3": "temp_var7",
                    "5": "size_var7"
                },
                "sVar8": {
                    "1": "temp_size_var8",
                    "2": "length2",
                    "3": "temp_var8",
                    "5": "size_var8"
                },
                "uVar13": {
                    "1": "temporary_uint_variable_2",
                    "2": "flag",
                    "3": "uint_var2",
                    "5": "flags"
                },
                "uVar6": {
                    "1": "temp_variable_6",
                    "3": "uint_var",
                    "4": "mask",
                    "5": "uint_var6",
                    "6": "temp_var6"
                }
            },
            "called": [
                "FUN_00115f30",
                "xmalloc",
                "FUN_001159d0",
                "bfd_set_section_size",
                "dcgettext",
                "bfd_convert_section_setup",
                "strlen",
                "strcat",
                "FUN_00108072",
                "FUN_00114190",
                "strcpy",
                "bfd_make_section_anyway_with_flags",
                "strcmp"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nvoid process_binary_function_00115530(long param1,char **param2,long param3)\n\n{\n  long temp_var1;\n  char *temp_var2;\n  char **temp_var3;\n  char temp_var4;\n  int temp_var5;\n  uint temp_var6;\n  size_t size_var1;\n  size_t size_var2;\n  long temp_var9;\n  char *temp_var10;\n  char *temp_var11;\n  char *temp_var12;\n  uint temp_var13;\n  bool bool_var14;\n  long local_var50;\n  char *local_var48;\n  long local_var40 [2];\n  \n  temp_var4 = FUN_001159d0(param2);\n  if (temp_var4 != '\\0') {\n    return;\n  }\n  temp_var10 = *param2;\n  temp_var13 = *(uint *)((long)param2 + 0x24);\n  local_var48 = temp_var10;\n  temp_var3 = DAT_001278f8;\n  if (*(int *)(*(long *)(param1 + 8) + 8) != *(int *)(*(long *)(param3 + 8) + 8)) {\n    temp_var13 = temp_var13 & *(uint *)(*(long *)(param1 + 8) + 0x18) &\n             *(uint *)(*(long *)(param3 + 8) + 0x18);\n  }\n  for (; temp_var3 != (char **)0x0; temp_var3 = (char **)temp_var3[3]) {\n    temp_var5 = strcmp(*temp_var3,temp_var10);\n    if (temp_var5 == 0) {\n      if (*(uint *)(temp_var3 + 2) != 0xffffffff) {\n        temp_var13 = *(uint *)(temp_var3 + 2);\n      }\n      if (temp_var10 != temp_var3[1]) {\n        local_var48 = temp_var3[1];\n        temp_var13 = FUN_00115f30(temp_var13,param3);\n      }\n      break;\n    }\n  }\n  if (((DAT_00127918 != (char *)0x0) &&\n      (temp_var10 = DAT_00127918, (*(byte *)((long)param2 + 0x24) & 1) != 0)) ||\n     (temp_var10 = DAT_00127920, DAT_00127920 != (char *)0x0)) {\n    size_var1 = strlen(temp_var10);\n    size_var2 = strlen(local_var48);\n    temp_var12 = (char *)xmalloc(size_var1 + 1 + size_var2);\n    temp_var10 = strcpy(temp_var12,temp_var10);\n    local_var48 = strcat(temp_var10,local_var48);\n  }\n  temp_var9 = FUN_00114190(*param2,0,0x80);\n  bool_var14 = false;\n  if (temp_var9 == 0) {\n    if ((DAT_00127a48 == 4) && ((temp_var13 & 0x2000001) != 0)) {\n      temp_var5 = *(int *)(*(long *)(param1 + 8) + 8);\n      if (temp_var5 == 5) {\n        if (*(int *)(param2[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(param3 + 8) + 8) == 5) {\n            bool_var14 = (temp_var13 & 0x2000000) == 0;\n            temp_var6 = ~((-(uint)((temp_var13 & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)param2 + 0x24) = *(uint *)((long)param2 + 0x24) & temp_var6;\n          }\n          else {\n            temp_var6 = 0xfdfffefd;\n          }\n          temp_var13 = temp_var13 & temp_var6;\n        }\n      }\n      else if ((temp_var5 != 2) || (temp_var5 = strcmp(*param2,\".buildid\"), temp_var5 != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    temp_var13 = FUN_00115f30(temp_var13 & 0x104 | *(uint *)(temp_var9 + 0x28),param3,*param2);\n  }\n  temp_var4 = bfd_convert_section_setup(param1,param2,param3,&local_var48,local_var40);\n  if (temp_var4 == '\\0') {\n    temp_var10 = (char *)0x0;\n    local_var50 = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  temp_var10 = (char *)bfd_make_section_anyway_with_flags(param3,local_var48,temp_var13);\n  if (temp_var10 == (char *)0x0) {\n    local_var50 = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (DAT_001264bc < 0) {\n    if (DAT_0012790c != '\\0') {\n      local_var40[0] = 0;\n      goto LAB_001158e7;\n    }\n    temp_var4 = bfd_set_section_size(temp_var10,local_var40[0]);\n    if (temp_var4 == '\\0') {\n      FUN_00108072();\n      return;\n    }\n  }\n  else {\n    local_var40[0] = ((((long)DAT_00127a3c - 1U) + local_var40[0]) / (ulong)(long)DAT_00127a3c) *\n                  (long)DAT_001264b8;\nLAB_001158e7:\n    temp_var4 = bfd_set_section_size(temp_var10);\n    if (temp_var4 == '\\0') {\n      FUN_00108072();\n      return;\n    }\n  }\n  local_var50 = 0;\n  temp_var12 = param2[6];\n  temp_var9 = FUN_00114190(*param2,0,0x18);\n  if (temp_var9 == 0) {\n    temp_var10[0x28] = temp_var10[0x28] | 1;\n    temp_var11 = *param2;\n    temp_var12 = temp_var12 + _DAT_001279b0;\n    *(char **)(temp_var10 + 0x30) = temp_var12;\n    *(char **)(temp_var10 + 0x38) = temp_var12;\n    temp_var12 = param2[7];\n    temp_var9 = FUN_00114190(temp_var11,0,0x60);\n    if (temp_var9 == 0) goto LAB_00115695;\nLAB_00115860:\n    temp_var11 = *(char **)(temp_var9 + 0x20);\n    if ((*(byte *)(temp_var9 + 0x14) & 0x40) != 0) {\n      temp_var11 = temp_var11 + (long)temp_var12;\n    }\n    *(char **)(temp_var10 + 0x38) = temp_var11;\n    temp_var9 = FUN_00114190(*param2,0,0x200);\n    if (temp_var9 != 0) goto LAB_00115889;\nLAB_001156b8:\n    temp_var13 = *(uint *)((long)param2 + 0x7c);\n    if (temp_var13 < 0x3f) goto LAB_001156c4;\n    local_var50 = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(temp_var10 + 0xb4) = *(undefined4 *)((long)param2 + 0xb4);\n    temp_var10[0x28] = temp_var10[0x28] & 0xcfU | *(byte *)(param2 + 5) & 0x30;\n    param2[0xc] = temp_var10;\n    param2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param2 + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    temp_var4 = (**(code **)(*(long *)(param3 + 8) + 0x158))(param1,param2,param3,temp_var10);\n    if (temp_var4 == '\\0') {\n      FUN_0010808f();\n      return;\n    }\n  }\n  else {\n    temp_var11 = *(char **)(temp_var9 + 0x18);\n    if ((*(byte *)(temp_var9 + 0x14) & 8) == 0) {\n      temp_var11 = temp_var11 + (long)temp_var12;\n    }\n    temp_var10[0x28] = temp_var10[0x28] | 1;\n    temp_var2 = *param2;\n    *(char **)(temp_var10 + 0x30) = temp_var11;\n    *(char **)(temp_var10 + 0x38) = temp_var11;\n    temp_var12 = param2[7];\n    temp_var9 = FUN_00114190(temp_var2,0,0x60);\n    if (temp_var9 != 0) goto LAB_00115860;\nLAB_00115695:\n    temp_var11 = *param2;\n    *(char **)(temp_var10 + 0x38) = temp_var12 + _DAT_001279b0;\n    temp_var9 = FUN_00114190(temp_var11,0,0x200);\n    if (temp_var9 == 0) goto LAB_001156b8;\nLAB_00115889:\n    temp_var13 = *(uint *)(temp_var9 + 0x2c);\n    if (0x3e < temp_var13) {\n      FUN_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(temp_var10 + 0x7c) = temp_var13;\n    *(undefined4 *)(temp_var10 + 0xb4) = *(undefined4 *)((long)param2 + 0xb4);\n    temp_var10[0x28] = temp_var10[0x28] & 0xcfU | *(byte *)(param2 + 5) & 0x30;\n    param2[0xc] = temp_var10;\n    param2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param2 + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    temp_var12 = param2[0x1a];\n    temp_var9 = FUN_00115d00(temp_var12,param2[0x1c]);\n    if ((temp_var9 == 0) ||\n       (temp_var1 = *(long *)(param1 + 8), *(uint *)(temp_var9 + 0x18) = *(uint *)(temp_var9 + 0x18) | 0x20,\n       *(int *)(temp_var1 + 8) != 5)) goto LAB_00115700;\n    *(long *)(temp_var12 + 0xb0) = temp_var9;\n    temp_var4 = (**(code **)(*(long *)(param3 + 8) + 0x158))(param1,param2,param3,temp_var10);\n    if (temp_var4 == '\\0') {\n      FUN_0010808f();\n      return;\n    }\n  }\n  if (bool_var14) {\n    *(undefined4 *)(*(long *)(temp_var10 + 0xd0) + 4) = 8;\n  }\n  if (local_var50 == 0) {\n    return;\n  }\nLAB_001080d1:\n  DAT_00127a40 = 1;\n  FUN_001126c0(0,param3,temp_var10,local_var50);\n  return;\n}\n\n",
            "current_name": "process_binary_function_00115530",
            "entrypoint": "0x00115530",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115530": "process_binary_function_00115530",
                "bVar14": "bool_var14",
                "cVar4": "temp_var4",
                "iVar5": "temp_var5",
                "lVar1": "temp_var1",
                "lVar9": "temp_var9",
                "local_40": "local_var40",
                "local_48": "local_var48",
                "local_50": "local_var50",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "pcVar10": "temp_var10",
                "pcVar11": "temp_var11",
                "pcVar12": "temp_var12",
                "pcVar2": "temp_var2",
                "ppcVar3": "temp_var3",
                "sVar7": "size_var1",
                "sVar8": "size_var2",
                "uVar13": "temp_var13",
                "uVar6": "temp_var6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115970": {
            "additional_data": {
                "FUN_00115970": {
                    "1": "copy_file_and_handle_error",
                    "12": "copy_and_unlink_file",
                    "3": "copy_file",
                    "5": "copy_and_remove_file"
                },
                "auVar6": {
                    "1": "result_container",
                    "14": "return_value",
                    "4": "result_struct",
                    "8": "result"
                },
                "param_1": {
                    "1": "src_file_path",
                    "11": "source_file",
                    "15": "source_file_path",
                    "2": "original_file_path"
                },
                "param_2": {
                    "1": "new_file_path",
                    "11": "destination_file",
                    "14": "destination_file_path",
                    "2": "destination_path"
                },
                "param_3": {
                    "1": "permission_flags",
                    "11": "flags",
                    "2": "param1",
                    "3": "copy_mode",
                    "4": "file_permissions"
                },
                "param_4": {
                    "1": "reserved_param",
                    "2": "param2",
                    "4": "file_size",
                    "5": "file_permissions",
                    "7": "mode"
                },
                "param_5": {
                    "1": "unlink_source",
                    "2": "should_remove_destination",
                    "3": "delete_source",
                    "7": "should_reverse"
                },
                "param_6": {
                    "1": "return_address",
                    "16": "result",
                    "2": "copy_result",
                    "3": "return_value",
                    "6": "error_code"
                },
                "pcVar3": {
                    "1": "error_description",
                    "17": "error_message",
                    "9": "error_string"
                },
                "piVar2": {
                    "1": "error_location_ptr",
                    "2": "errno_location_ptr",
                    "3": "errno_pointer",
                    "4": "error_location",
                    "6": "errno_ptr",
                    "9": "errno_location"
                },
                "uVar1": {
                    "1": "error",
                    "23": "copy_result",
                    "4": "copy_status"
                },
                "uVar4": {
                    "1": "localized_error",
                    "2": "translated_error_message",
                    "5": "localized_error_message",
                    "9": "error_string"
                },
                "uVar5": {
                    "1": "unlink_status",
                    "11": "unlink_result",
                    "2": "copy_error_code",
                    "3": "error_code",
                    "5": "copy_success"
                }
            },
            "called": [
                "FUN_00108200",
                "FUN_00115a90"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16]\ncopy_and_unlink_file_00115970(char *source_file_path,char *destination_file_path,undefined4 flags,undefined8 mode,char should_reverse,\n            undefined8 result)\n\n{\n  uint copy_result;\n  int *errno_location;\n  char *error_message;\n  undefined8 error_string;\n  ulong unlink_result;\n  undefined return_value [16];\n  \n  if (destination_file_path == source_file_path) {\n    unlink_result = 0;\n  }\n  else {\n    copy_result = FUN_00115a90(flags,destination_file_path,mode);\n    unlink_result = (ulong)copy_result;\n    if (copy_result != 0) {\n      errno_location = __errno_location();\n      error_message = strerror(*errno_location);\n      error_string = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      FUN_00119ed0(error_string,destination_file_path,error_message);\n    }\n    unlink(source_file_path);\n  }\n  if (should_reverse != '\\0') {\n    FUN_0011a350(destination_file_path,mode);\n  }\n  return_value._8_8_ = result;\n  return_value._0_8_ = unlink_result;\n  return return_value;\n}\n\n",
            "current_name": "copy_and_unlink_file_00115970",
            "entrypoint": "0x00115970",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115970": "copy_and_unlink_file_00115970",
                "auVar6": "return_value",
                "param_1": "source_file_path",
                "param_2": "destination_file_path",
                "param_3": "flags",
                "param_4": "mode",
                "param_5": "should_reverse",
                "param_6": "result",
                "pcVar3": "error_message",
                "piVar2": "errno_location",
                "uVar1": "copy_result",
                "uVar4": "error_string",
                "uVar5": "unlink_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001159d0": {
            "additional_data": {
                "FUNK_001159d0": {
                    "1": "check_if_data_valid"
                },
                "FUN_001159d0": {
                    "1": "check_for_valid_condition",
                    "3": "check_and_process_data",
                    "4": "check_data_validity",
                    "6": "check_function"
                },
                "FUN_00115b70": {
                    "1": "check_condition"
                },
                "FUN_00115d00": {
                    "1": "check_compatibility"
                },
                "FUN_00115d70": {
                    "1": "check_flag"
                },
                "cVar2": {
                    "1": "is_invalid",
                    "10": "is_valid",
                    "2": "check",
                    "5": "flag"
                },
                "lVar4": {
                    "1": "function_result",
                    "2": "temp_value1",
                    "4": "ptr1",
                    "5": "temp1"
                },
                "lVar5": {
                    "1": "nested_result",
                    "2": "temp_value2",
                    "4": "ptr2",
                    "5": "temp2"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "data_pointer",
                    "3": "input_parameter",
                    "4": "data",
                    "5": "input"
                },
                "param_2": {
                    "1": "ptr3"
                },
                "uVar1": {
                    "1": "return_value1",
                    "19": "result",
                    "4": "temp_var1",
                    "5": "return_value"
                },
                "uVar3": {
                    "1": "output_var",
                    "13": "return_value",
                    "7": "status"
                }
            },
            "called": [
                "FUN_00115d00",
                "FUN_00115b70",
                "FUN_00115d70"
            ],
            "calling": [
                "FUN_00115f50",
                "FUN_0010554f",
                "FUN_00115530"
            ],
            "code": "\nundefined4 check_function_001159d0(long input)\n\n{\n  undefined8 result;\n  char is_valid;\n  undefined4 return_value;\n  long temp1;\n  long temp2;\n  \n  return_value = FUN_00115b70();\n  if ((char)return_value == '\\0') {\n    if ((*(byte *)(input + 0x27) & 2) == 0) {\n      return return_value;\n    }\n    temp1 = FUN_00115d00(*(undefined8 *)(input + 0xd0),*(undefined8 *)(input + 0xe0));\n    if ((temp1 != 0) &&\n       (((result = *(undefined8 *)(temp1 + 8), DAT_00127a48 != 7 ||\n         (is_valid = FUN_00115d70(result,DAT_00127a28), is_valid != '\\0')) &&\n        (is_valid = FUN_00115d70(result,DAT_00127a18), is_valid == '\\0')))) {\n      temp1 = *(long *)(*(long *)(input + 0xd0) + 0xc0);\n      temp2 = temp1;\n      do {\n        if (temp2 == 0) {\n          return 1;\n        }\n        is_valid = FUN_00115b70(temp2);\n        if (is_valid == '\\0') {\n          return return_value;\n        }\n        temp2 = *(long *)(*(long *)(temp2 + 0xd0) + 0xc0);\n      } while (temp1 != temp2);\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_function_001159d0",
            "entrypoint": "0x001159d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001159d0": "check_function_001159d0",
                "cVar2": "is_valid",
                "lVar4": "temp1",
                "lVar5": "temp2",
                "param_1": "input",
                "uVar1": "result",
                "uVar3": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115a90": {
            "additional_data": {
                "FUN_00108237": {
                    "1": "handle_error"
                },
                "FUN_00115a90": {
                    "1": "extract_file_contents",
                    "14": "copy_file",
                    "2": "reverse_and_save_file"
                },
                "_Var3": {
                    "1": "source_file_size",
                    "2": "source_file_offset",
                    "3": "current_position",
                    "4": "current_offset",
                    "9": "file_offset"
                },
                "__errno_location": {
                    "2": "get_errno_location"
                },
                "__fd": {
                    "1": "file_descriptor_2",
                    "15": "destination_file_descriptor",
                    "2": "output_fd",
                    "3": "destination_fd",
                    "6": "output_file_descriptor"
                },
                "__mode_t": {
                    "1": "mode_type"
                },
                "__off_t": {
                    "1": "offset_type"
                },
                "__off_t _Var3": {
                    "1": "file_offset"
                },
                "__whence": {
                    "1": "seek_position"
                },
                "close": {
                    "2": "close_file"
                },
                "fchmod": {
                    "1": "set_file_permissions"
                },
                "iVar1": {
                    "1": "errno",
                    "11": "original_errno",
                    "2": "error",
                    "4": "errno_value",
                    "6": "error_code"
                },
                "iVar2": {
                    "1": "temp_value",
                    "2": "read_count",
                    "3": "read_bytes",
                    "4": "current_errno",
                    "5": "bytes_read",
                    "9": "read_result"
                },
                "local_2038": {
                    "30": "buffer"
                },
                "lseek": {
                    "1": "set_file_position"
                },
                "open": {
                    "2": "open_file"
                },
                "param_1": {
                    "1": "source_file",
                    "15": "source_file_descriptor",
                    "3": "source_fd",
                    "8": "file_descriptor"
                },
                "param_2": {
                    "1": "source_file",
                    "11": "destination_file_path",
                    "2": "output_file_path",
                    "3": "file_path",
                    "4": "destination_file"
                },
                "param_3": {
                    "1": "mode_struct_pointer",
                    "2": "mode_pointer",
                    "3": "permissions",
                    "5": "file_permissions"
                },
                "piVar6": {
                    "1": "errno_location_pointer",
                    "11": "errno_location",
                    "2": "error_code_pointer",
                    "3": "errno_ptr",
                    "4": "error_location"
                },
                "read": {
                    "1": "read_data"
                },
                "sVar5": {
                    "1": "write_bytes",
                    "2": "num_bytes_written",
                    "21": "bytes_written"
                },
                "uVar4": {
                    "1": "read_bytes",
                    "11": "bytes_read",
                    "2": "total_bytes_copied",
                    "4": "bytes_copied",
                    "5": "return_value"
                },
                "write": {
                    "1": "write_data"
                }
            },
            "called": [
                "read",
                "open",
                "close",
                "__errno_location",
                "fchmod",
                "write",
                "FUN_00108237",
                "lseek"
            ],
            "calling": [
                "FUN_00115970"
            ],
            "code": "\nulong copy_file_00115a90(int source_file_descriptor,char *destination_file_path,long file_permissions)\n\n{\n  int original_errno;\n  int destination_file_descriptor;\n  int read_result;\n  offset_type file_offset;\n  ulong bytes_read;\n  size_t bytes_written;\n  int *errno_location;\n  undefined buffer [8200];\n  \n  if ((-1 < source_file_descriptor) && (file_offset = lseek(source_file_descriptor,0,0), file_offset == 0)) {\n    destination_file_descriptor = open_file(destination_file_path,0x201);\n    if (destination_file_descriptor < 0) {\n      bytes_read = FUN_00108237();\n      return bytes_read;\n    }\n    do {\n      bytes_read = read_data(source_file_descriptor,buffer,0x2000);\n      read_result = (int)bytes_read;\n      if (read_result < 1) {\n        errno_location = __errno_location();\n        original_errno = *errno_location;\n        fchmod(destination_file_descriptor,*(mode_type *)(file_permissions + 0x18));\n        close_file(source_file_descriptor);\n        close_file(destination_file_descriptor);\n        if (read_result != 0) {\n          *errno_location = original_errno;\n          return 0xffffffff;\n        }\n        return bytes_read & 0xffffffff;\n      }\n      bytes_written = write_data(destination_file_descriptor,buffer,(long)read_result);\n    } while (bytes_written == (long)read_result);\n    errno_location = __errno_location();\n    read_result = *errno_location;\n    close_file(source_file_descriptor);\n    close_file(destination_file_descriptor);\n    *errno_location = read_result;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "copy_file_00115a90",
            "entrypoint": "0x00115a90",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115a90": "copy_file_00115a90",
                "_Var3": "file_offset",
                "__errno_location": "get_errno_location",
                "__fd": "destination_file_descriptor",
                "__mode_t": "mode_type",
                "__off_t": "offset_type",
                "close": "close_file",
                "fchmod": "change_file_permissions",
                "iVar1": "original_errno",
                "iVar2": "read_result",
                "local_2038": "buffer",
                "lseek": "set_file_position",
                "open": "open_file",
                "param_1": "source_file_descriptor",
                "param_2": "destination_file_path",
                "param_3": "file_permissions",
                "piVar6": "errno_location",
                "read": "read_data",
                "sVar5": "bytes_written",
                "uVar4": "bytes_read",
                "write": "write_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115b70": {
            "additional_data": {
                "*param_1": {
                    "1": "section_name"
                },
                ".gnu_debugaltlink": {
                    "1": "debug_altlink"
                },
                ".gnu_debuglink": {
                    "1": "debug_link"
                },
                ".reloc": {
                    "1": "relocation"
                },
                "DAT_001278d8": {
                    "1": "global_flag1"
                },
                "DAT_001279a0": {
                    "1": "global_flag3"
                },
                "DAT_001279d8": {
                    "1": "update_option"
                },
                "DAT_00127a39": {
                    "1": "copy_option"
                },
                "DAT_00127a44": {
                    "1": "global_variable2"
                },
                "DAT_00127a48": {
                    "1": "global_variable1"
                },
                "FUN_0010829e": {
                    "1": "execute_reloc_option"
                },
                "FUN_001082b3": {
                    "1": "process_debug_info"
                },
                "FUN_00113ede": {
                    "1": "execute_debug_option"
                },
                "FUN_00114190": {
                    "1": "extract_data",
                    "2": "get_section_info"
                },
                "FUN_00115b70": {
                    "1": "check_and_print_section_errors",
                    "2": "check_section",
                    "3": "validate_section",
                    "4": "validate_section_options",
                    "9": "check_section_options"
                },
                "FUN_00119dd0": {
                    "2": "print_error_message",
                    "3": "print_error"
                },
                "dcgettext": {
                    "1": "get_string",
                    "3": "get_error_message"
                },
                "iVar2": {
                    "1": "compare_result",
                    "15": "comparison_result",
                    "2": "result",
                    "4": "strcmp_result"
                },
                "iVar3": {
                    "1": "section_flag",
                    "15": "section_type",
                    "3": "option",
                    "7": "section_option"
                },
                "lVar4": {
                    "1": "section_option_1",
                    "2": "result_1",
                    "4": "section_size",
                    "5": "result1"
                },
                "lVar5": {
                    "1": "section_matches2",
                    "2": "section_flags",
                    "4": "section_size2",
                    "5": "result2"
                },
                "param_1": {
                    "1": "param",
                    "10": "section_name",
                    "5": "section",
                    "6": "section_names"
                },
                "pcVar1": {
                    "1": "cur_section_name",
                    "20": "current_section",
                    "3": "current_section_name",
                    "6": "section_name"
                },
                "plVar7": {
                    "1": "list_node",
                    "21": "section_list"
                },
                "strcmp": {
                    "4": "compare_strings"
                },
                "uVar6": {
                    "1": "error_msg",
                    "13": "error_message",
                    "2": "error",
                    "6": "return_value",
                    "8": "result"
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_0010827b",
                "FUN_00114190",
                "dcgettext",
                "FUN_0010829e",
                "strcmp"
            ],
            "calling": [
                "FUN_001159d0"
            ],
            "code": "\nundefined8 check_section_options_00115b70(char **section_name)\n\n{\n  char *current_section;\n  int comparison_result;\n  int section_type;\n  long result1;\n  long result2;\n  undefined8 error_message;\n  long *section_list;\n  \n  result1 = FUN_00114190(*section_name,0,4);\n  if (result1 == 0) {\n    if ((DAT_001278d8 != '\\0') || (DAT_00127a39 != '\\0')) {\n      result1 = FUN_00114190(*section_name,0,1);\n      result2 = FUN_00114190(*section_name,0,2);\n      if (result1 != 0) {\n        if (result2 != 0) {\n          current_section = *section_name;\n          error_message = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          FUN_00119dd0(error_message,current_section);\n        }\n        if (result1 != 0) {\n          if (DAT_001279d8 == (long *)0x0) {\n            return 1;\n          }\n          current_section = *section_name;\n          section_list = DAT_001279d8;\n          do {\n            section_type = strcmp(current_section,(char *)section_list[1]);\n            if (section_type == 0) {\n              error_message = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              FUN_00119dd0(error_message,current_section);\n            }\n            section_list = (long *)*section_list;\n          } while (section_list != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((DAT_00127a39 != '\\0') && (result2 == 0)) {\n        return 1;\n      }\n    }\n    section_type = DAT_00127a48;\n    if ((*(byte *)((long)section_name + 0x25) & 0x20) != 0) {\n      if ((((DAT_00127a48 - 2U < 2) || (DAT_00127a48 == 7)) || (DAT_00127a44 == 2)) ||\n         (DAT_001279a0 != '\\0')) {\n        current_section = *section_name;\n        comparison_result = strcmp(current_section,\"debug_altlink\");\n        if ((comparison_result != 0) && (comparison_result = strcmp(current_section,\"debug_link\"), comparison_result != 0)) {\n          section_type = strcmp(current_section,\"relocation\");\n          if (section_type != 0) {\n            return 1;\n          }\n          error_message = FUN_0010829e();\n          return error_message;\n        }\n      }\n      if (section_type == 5) {\n        error_message = FUN_00113ede(section_name);\n        return error_message;\n      }\n      if (section_type == 4) {\n        return 0;\n      }\n    }\n    if (section_type == 6) {\n      error_message = FUN_001082b3();\n      return error_message;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "check_section_options_00115b70",
            "entrypoint": "0x00115b70",
            "imported": false,
            "improved": true,
            "renaming": {
                ".gnu_debugaltlink": "debug_altlink",
                ".gnu_debuglink": "debug_link",
                ".reloc": "relocation",
                "FUN_00115b70": "check_section_options_00115b70",
                "dcgettext": "get_error_message",
                "iVar2": "comparison_result",
                "iVar3": "section_type",
                "lVar4": "result1",
                "lVar5": "result2",
                "param_1": "section_name",
                "pcVar1": "current_section",
                "plVar7": "section_list",
                "strcmp": "compare_strings",
                "uVar6": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115d00": {
            "additional_data": {
                "*(byte *)(*(long *)(*(long *)(*(long *)(param_2 + 8) + 0x380) + 0x340) + 5)": {
                    "1": "struct_member_4",
                    "3": "byte_value"
                },
                "*(int *)(*(long *)(param_2 + 0x110) + 0xd40)": {
                    "1": "data_check_value"
                },
                "*(int *)(*(long *)(param_2 + 8) + 8)": {
                    "1": "structure_type"
                },
                "*(int *)(param_1 + 0x28)": {
                    "1": "list_member_1",
                    "2": "input_value_check"
                },
                "*(long *)(*(long *)(*(long *)(param_2 + 8) + 0x380) + 0x340)": {
                    "1": "structure_info"
                },
                "*(long *)(DAT_001278d0 + (ulong)(uVar1 - 1) * 8)": {
                    "1": "temp7"
                },
                "*(uint *)(param_1 + 0x2c)": {
                    "1": "temp5"
                },
                "*(ulong *)(*(long *)(param_2 + 0x110) + 0x88)": {
                    "1": "division"
                },
                "*(ulong *)(*(long *)(param_2 + 0x110) + 0x88) / (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(param_2 + 8) + 0x380) + 0x340) + 5)": {
                    "1": "temp6"
                },
                "FUN_001082c3": {
                    "1": "get_sub_function_signature"
                },
                "FUN_00115d00": {
                    "1": "find_value_based_on_conditions",
                    "13": "find_matching_value",
                    "2": "find_value"
                },
                "lVar2": {
                    "1": "valid_index",
                    "10": "matching_value",
                    "15": "result"
                },
                "lVar2 = *(long *)(DAT_001278d0 + (ulong)(uVar1 - 1) * 8)": {
                    "1": "found_value"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "input_param",
                    "3": "input_data",
                    "4": "value_array",
                    "9": "input_value"
                },
                "param_2": {
                    "1": "structure_data",
                    "3": "data",
                    "4": "data_struct",
                    "5": "binary_data"
                },
                "uVar1": {
                    "1": "temp1",
                    "2": "counter",
                    "3": "value_count",
                    "6": "count"
                }
            },
            "called": [
                "FUN_001082c3"
            ],
            "calling": [
                "FUN_00108179",
                "FUN_001159d0"
            ],
            "code": "\nlong find_matching_value_00115d00(long input_value,long data_structure)\n\n{\n  uint count;\n  long result;\n  \n  result = DAT_001278d0;\n  if (DAT_001278d0 != 0) {\n    if (*(int *)(*(long *)(data_structure + 8) + 8) == 5) {\n      if (*(int *)(input_value + 0x28) == *(int *)(*(long *)(data_structure + 0x110) + 0xd40)) {\n        count = *(uint *)(input_value + 0x2c);\n        if (count == 0) {\n          result = 0;\n        }\n        else if ((ulong)count <\n                 *(ulong *)(*(long *)(data_structure + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(data_structure + 8) + 0x380) + 0x340) + 5))\n        {\n          result = *(long *)(DAT_001278d0 + (ulong)(count - 1) * 8);\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "find_matching_value_00115d00",
            "entrypoint": "0x00115d00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115d00": "find_matching_value_00115d00",
                "lVar2": "result",
                "param_1": "input_value",
                "param_2": "data_structure",
                "uVar1": "count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115d70": {
            "additional_data": {
                "FUN_00115d70": {
                    "1": "find_or_traverse_hash_table",
                    "2": "check_value_existence",
                    "3": "check_hash_table"
                },
                "FUN_0011a170": {
                    "1": "compare_values_within_table"
                },
                "htab_find": {
                    "1": "find_element"
                },
                "htab_traverse": {
                    "1": "traverse_hash_table"
                },
                "lVar1": {
                    "1": "hash_value",
                    "2": "found_value",
                    "3": "entry_value",
                    "9": "result"
                },
                "local_10": {
                    "1": "existence",
                    "2": "is_value_found",
                    "4": "is_found",
                    "6": "result",
                    "7": "is_present"
                },
                "local_18": {
                    "1": "found_value",
                    "2": "entry",
                    "3": "key_found"
                },
                "param_1": {
                    "1": "input1",
                    "2": "input_data",
                    "3": "input_1",
                    "7": "key"
                },
                "param_2": {
                    "1": "input2",
                    "14": "hash_table",
                    "2": "hashtable",
                    "3": "input_2",
                    "4": "table"
                }
            },
            "called": [
                "htab_find",
                "FUN_0011a170",
                "htab_traverse"
            ],
            "calling": [
                "FUN_001159d0",
                "FUN_0010554f",
                "FUN_001082df"
            ],
            "code": "\nundefined check_hash_table_00115d70(undefined8 key,undefined8 hash_table)\n\n{\n  long result;\n  undefined8 current_entry;\n  undefined is_present;\n  \n  if (DAT_001279ea == '\\0') {\n    result = htab_find(hash_table,key);\n    is_present = result != 0;\n  }\n  else {\n    is_present = 0;\n    current_entry = key;\n    htab_traverse(hash_table,FUN_0011a170,&current_entry);\n  }\n  return is_present;\n}\n\n",
            "current_name": "check_hash_table_00115d70",
            "entrypoint": "0x00115d70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115d70": "check_hash_table_00115d70",
                "htab_find": "find_value_in_table",
                "htab_traverse": "traverse_table",
                "lVar1": "result",
                "local_10": "is_present",
                "local_18": "current_entry",
                "param_1": "key",
                "param_2": "hash_table"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115dc0": {
            "additional_data": {
                "DAT_001278d0": {
                    "1": "reloc_option"
                },
                "DAT_00127a28": {
                    "1": "constant2"
                },
                "DAT_00127a40": {
                    "1": "some_data2"
                },
                "DAT_00127a48": {
                    "1": "constant",
                    "2": "constant1"
                },
                "FUN_001082df": {
                    "1": "some_function"
                },
                "FUN_001126c0": {
                    "1": "handle_error2"
                },
                "FUN_00114190": {
                    "1": "calculate_size"
                },
                "FUN_00115d70": {
                    "1": "check_relocation_data"
                },
                "FUN_00115dc0": {
                    "1": "analyze_and_execute",
                    "2": "analyze_binary",
                    "9": "process_binary_function"
                },
                "FUN_00115f50": {
                    "1": "check_relocation"
                },
                "FUN_0011a110": {
                    "1": "error_exit",
                    "2": "handle_error"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "jmp_table",
                    "19": "jump_table",
                    "5": "jumptable"
                },
                "bfd_alloc": {
                    "1": "allocate_memory"
                },
                "bfd_canonicalize_reloc": {
                    "3": "canonicalize_reloc"
                },
                "bfd_get_error": {
                    "2": "get_bfd_error"
                },
                "bfd_get_reloc_upper_bound": {
                    "1": "get_upper_bound",
                    "2": "get_reloc_upper_bound"
                },
                "cVar1": {
                    "1": "is_successful",
                    "14": "result",
                    "2": "status",
                    "3": "is_error"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "iVar2": {
                    "1": "error_type",
                    "12": "error",
                    "15": "error_code",
                    "2": "bfd_error"
                },
                "lVar4": {
                    "1": "reloc_value",
                    "11": "reloc_upper_bound",
                    "7": "reloc_bound",
                    "8": "upper_bound"
                },
                "param_1": {
                    "1": "data",
                    "10": "param1",
                    "2": "arg1",
                    "3": "param",
                    "5": "param_1"
                },
                "param_2": {
                    "1": "file_data",
                    "2": "data",
                    "3": "parameters",
                    "4": "param_2",
                    "8": "param2"
                },
                "param_3": {
                    "1": "input_3",
                    "2": "param_length",
                    "3": "length",
                    "5": "param_3",
                    "9": "param3"
                },
                "puVar5": {
                    "1": "alloc_pointer",
                    "14": "reloc_array",
                    "2": "reloc_buffer",
                    "7": "reloc_data"
                },
                "puVar7": {
                    "1": "filtered_reloc_data_start",
                    "2": "dest_ptr",
                    "3": "reloc_array_ptr",
                    "5": "pu_var7"
                },
                "puVar8": {
                    "1": "dest_ptr2",
                    "2": "temp_var2",
                    "5": "pu_var8"
                },
                "uStack_38": {
                    "1": "temp_value",
                    "2": "unused_var",
                    "3": "temp_var",
                    "4": "u_stack_38",
                    "8": "stack_var"
                },
                "uVar3": {
                    "1": "allocation",
                    "2": "reloc_var",
                    "3": "reloc_upper_bound",
                    "4": "reloc_result",
                    "9": "result"
                },
                "uVar6": {
                    "1": "total_relocs",
                    "2": "reloc_size",
                    "23": "reloc_count"
                },
                "uVar9": {
                    "1": "loop_index",
                    "11": "index",
                    "2": "loop_var",
                    "3": "u_var9",
                    "6": "loop_counter"
                },
                "xexit": {
                    "1": "exit",
                    "2": "exit_program"
                }
            },
            "called": [
                "FUN_00115f50",
                "bfd_get_reloc_upper_bound",
                "bfd_canonicalize_reloc",
                "FUN_0011a110",
                "xexit",
                "dcgettext",
                "FUN_00114190",
                "bfd_get_error",
                "bfd_alloc",
                "FUN_001082df",
                "FUN_001126c0"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid process_binary_function_00115dc0(undefined8 param1,undefined8 *param2,long param3)\n\n{\n  char result;\n  int error_code;\n  undefined8 result;\n  long reloc_upper_bound;\n  undefined8 *reloc_array;\n  ulong reloc_count;\n  code *jump_table;\n  undefined8 *pu_var7;\n  undefined8 *pu_var8;\n  ulong index;\n  undefined8 stack_var;\n  \n  result = FUN_00115f50(param1,param2,0);\n  if (result != '\\0') {\n    return;\n  }\n  result = param2[0xc];\n  if ((((*(byte *)(param3 + 0x48) & 7) != 3) && (DAT_00127a48 != 6)) &&\n     (reloc_upper_bound = FUN_00114190(*param2,0,0x100), reloc_upper_bound == 0)) {\n    reloc_upper_bound = bfd_get_reloc_upper_bound(param1,param2);\n    if (reloc_upper_bound < 0) {\n      if ((reloc_upper_bound != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n        DAT_00127a40 = 1;\n        result = 0;\nLAB_00108315:\n        FUN_001126c0(0,param1,param2,result,stack_var);\n        return;\n      }\n    }\n    else if (reloc_upper_bound != 0) {\n      reloc_array = (undefined8 *)param2[0xe];\n      if (reloc_array == (undefined8 *)0x0) {\n        reloc_array = (undefined8 *)bfd_alloc(param3);\n        if (reloc_array == (undefined8 *)0x0) {\n          FUN_0011a110(0);\n                    \n          xexit(1);\n        }\n        reloc_count = bfd_canonicalize_reloc(param1,param2,reloc_array,DAT_001278d0);\n        if ((long)reloc_count < 0) {\n          DAT_00127a40 = 1;\n          result = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        reloc_count = (ulong)*(uint *)(param2 + 0xf);\n      }\n      if (DAT_00127a48 == 7) {\n        pu_var7 = reloc_array;\n        for (index = 0; index != reloc_count; index = index + 1) {\n          pu_var8 = pu_var7;\n          if (((*(long **)reloc_array[index] != (long *)0x0) &&\n              (reloc_upper_bound = **(long **)reloc_array[index], reloc_upper_bound != 0)) &&\n             (result = FUN_00115d70(*(undefined8 *)(reloc_upper_bound + 8),DAT_00127a28), result != '\\0')) {\n            pu_var8 = pu_var7 + 1;\n            *pu_var7 = reloc_array[index];\n          }\n          pu_var7 = pu_var8;\n        }\n        *pu_var7 = 0;\n        reloc_count = (long)pu_var7 - (long)reloc_array >> 3;\n      }\n      jump_table = *(code **)(*(long *)(param3 + 8) + 0x288);\n      if (reloc_count == 0) {\n        reloc_count = 0;\n        reloc_array = (undefined8 *)0x0;\n      }\n      else {\n        reloc_count = reloc_count & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  reloc_count = 0;\n  reloc_array = (undefined8 *)0x0;\n  jump_table = *(code **)(*(long *)(param3 + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(param3,result,reloc_array,reloc_count);\n  return;\n}\n\n",
            "current_name": "process_binary_function_00115dc0",
            "entrypoint": "0x00115dc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115dc0": "process_binary_function_00115dc0",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "bfd_alloc": "allocate_memory",
                "bfd_canonicalize_reloc": "canonicalize_reloc",
                "bfd_get_error": "get_bfd_error",
                "bfd_get_reloc_upper_bound": "get_reloc_upper_bound",
                "cVar1": "result",
                "dcgettext": "get_translated_message",
                "iVar2": "error_code",
                "lVar4": "reloc_upper_bound",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "puVar5": "reloc_array",
                "puVar7": "pu_var7",
                "puVar8": "pu_var8",
                "uStack_38": "stack_var",
                "uVar3": "result",
                "uVar6": "reloc_count",
                "uVar9": "index",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115f30": {
            "additional_data": {
                "FUN_00108375": {
                    "1": "log_note_and_drop_flag"
                },
                "FUN_00115f30": {
                    "1": "normalize_param_flags",
                    "18": "drop_share_flag_if_not_coff",
                    "2": "drop_share_flag",
                    "3": "remove_share_flag_if_not_coff",
                    "5": "drop_share_flag_if_needed"
                },
                "FUN_00119ed0": {
                    "2": "print_message",
                    "4": "print_note_message"
                },
                "dcgettext": {
                    "1": "get_translation"
                },
                "param_1": {
                    "1": "message",
                    "19": "flags",
                    "3": "input_flag",
                    "5": "input_flags"
                },
                "param_2": {
                    "1": "info_pointers",
                    "10": "params",
                    "2": "arguments",
                    "4": "param_array",
                    "7": "parameters"
                },
                "param_2[1]": {
                    "1": "params_array_element1"
                },
                "param_3": {
                    "1": "extra_param",
                    "11": "output_format",
                    "2": "param",
                    "3": "data",
                    "5": "output"
                },
                "uVar1": {
                    "1": "first_arg",
                    "2": "first_param_value",
                    "3": "value",
                    "4": "value1",
                    "7": "var1",
                    "8": "first_param"
                },
                "uVar2": {
                    "1": "note_msg",
                    "2": "translation",
                    "7": "var2",
                    "9": "message"
                },
                "undefined8": {
                    "1": "output_message"
                }
            },
            "called": [
                "FUN_00108375"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_00115530"
            ],
            "code": "\nuint drop_share_flag_if_not_coff_00115f30(uint flags,output_message *params,output_message output_format)\n\n{\n  output_message first_param;\n  output_message message;\n  \n  if (((flags & 0x8000000) != 0) && (*(int *)(params_array_element1 + 8) != 2)) {\n    first_param = *params;\n    flags = flags & 0xf7ffffff;\n    message = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    FUN_00119ed0(message,first_param,output_format);\n  }\n  return flags;\n}\n\n",
            "current_name": "drop_share_flag_if_not_coff_00115f30",
            "entrypoint": "0x00115f30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115f30": "drop_share_flag_if_not_coff_00115f30",
                "dcgettext": "get_localized_message",
                "param_1": "flags",
                "param_2": "params",
                "param_2[1]": "params_array_element1",
                "param_3": "output_format",
                "uVar1": "first_param",
                "uVar2": "message",
                "undefined8": "output_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115f50": {
            "additional_data": {
                "DAT_0012790c": {
                    "1": "global_var2"
                },
                "DAT_001279d8": {
                    "1": "data_ptr"
                },
                "DAT_00127a20": {
                    "1": "is_flag3_set"
                },
                "DAT_00127a40": {
                    "1": "is_flag1_set"
                },
                "FUN_00113fb0": {
                    "1": "find_build_attribute",
                    "2": "find_attribute",
                    "3": "find_substring"
                },
                "FUN_001159d0": {
                    "1": "check_if_empty",
                    "2": "check_empty_string"
                },
                "FUN_00115f50": {
                    "1": "check_function",
                    "2": "check_duplicate_function",
                    "5": "check_duplicate_string"
                },
                "F_ExtractedFunction": {
                    "1": "check_binary_function"
                },
                "__s1": {
                    "1": "argument_str",
                    "10": "current_string",
                    "2": "argument_string",
                    "3": "current_arg",
                    "4": "string1"
                },
                "auVar4": {
                    "1": "comp_result",
                    "2": "temp",
                    "3": "result",
                    "4": "comparison_result"
                },
                "extraout_EDX": {
                    "1": "extra_out_var"
                },
                "param_1": {
                    "1": "input_length",
                    "2": "input_value",
                    "3": "length",
                    "4": "arg1"
                },
                "param_2": {
                    "1": "symbol_list",
                    "10": "strings",
                    "2": "array_of_strings",
                    "9": "arguments"
                },
                "param_3": {
                    "1": "is_static",
                    "2": "arg3",
                    "24": "flag"
                },
                "plVar3": {
                    "1": "pointer_array",
                    "2": "current_node",
                    "3": "list_pointer",
                    "7": "ptr"
                },
                "strcmp": {
                    "9": "compare_strings"
                },
                "uVar1": {
                    "1": "strcmp_result",
                    "8": "comparison_result"
                },
                "uVar2": {
                    "1": "temp_var",
                    "2": "temp",
                    "3": "status",
                    "5": "extra_var",
                    "6": "result"
                }
            },
            "called": [
                "FUN_00113fb0",
                "FUN_001159d0",
                "strcmp"
            ],
            "calling": [
                "FUN_00115dc0",
                "FUN_00116110"
            ],
            "code": "\nuint check_duplicate_string_00115f50(long arg1,char **strings,char flag)\n\n{\n  char *current_string;\n  uint result;\n  undefined4 result;\n  undefined4 extra_data;\n  long *ptr;\n  undefined comparison_result [12];\n  \n  if ((DAT_00127a40 != 0) || (DAT_0012790c != '\\0')) {\n    return 1;\n  }\n  comparison_result = FUN_001159d0(strings);\n  if (comparison_result[0] == '\\0') {\n    if (DAT_001279d8 != (long *)0x0) {\n      current_string = *strings;\n      ptr = DAT_001279d8;\n      do {\n        result = strcmp(current_string,(char *)ptr[1]);\n        comparison_result._4_4_ = 0;\n        comparison_result._0_4_ = result;\n        comparison_result._8_4_ = extra_data;\n        if (result == 0) {\n          return 1;\n        }\n        ptr = (long *)*ptr;\n      } while (ptr != (long *)0x0);\n    }\n    result = comparison_result._8_4_;\n    if (((((flag == '\\0') || (DAT_00127a20 == '\\0')) ||\n         (comparison_result._8_4_ = result, comparison_result._0_8_ = *(long *)(arg1 + 8),\n         *(int *)(*(long *)(arg1 + 8) + 8) != 5)) ||\n        ((comparison_result._0_8_ = (ulong)strings[0x1a], *(int *)(strings[0x1a] + 4) != 7 ||\n         (comparison_result = FUN_00113fb0(*strings,\".gnu.build.attributes\"), comparison_result[0] == '\\0')))) &&\n       ((*(byte *)((long)strings + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(comparison_result._1_7_,strings[8] == (char *)0x0) |\n             CONCAT31(comparison_result._9_3_,strings[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_duplicate_string_00115f50",
            "entrypoint": "0x00115f50",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115f50": "check_duplicate_string_00115f50",
                "__s1": "current_string",
                "auVar4": "comparison_result",
                "extraout_EDX": "extra_data",
                "param_1": "arg1",
                "param_2": "strings",
                "param_3": "flag",
                "plVar3": "ptr",
                "strcmp": "compare_strings",
                "uVar1": "result",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116030": {
            "additional_data": {
                "FUN_001083b7": {
                    "1": "get_error_message"
                },
                "FUN_00116030": {
                    "1": "process_reloc_table",
                    "2": "process_relocs",
                    "3": "process_reloc",
                    "5": "process_relocations",
                    "9": "process_relocation"
                },
                "FUN_0011a110": {
                    "2": "handle_error"
                },
                "__ptr": {
                    "1": "reloc_data_array",
                    "10": "reloc_buffer",
                    "2": "buffer",
                    "9": "reloc_ptr"
                },
                "bfd_canonicalize_reloc": {
                    "1": "canonicalize_relocation"
                },
                "bfd_get_reloc_upper_bound": {
                    "1": "get_relocation_upper_bound"
                },
                "extraout_RAX": {
                    "1": "exit_code",
                    "3": "extra_result",
                    "6": "extra_return_value",
                    "9": "return_value"
                },
                "free": {
                    "2": "free_memory"
                },
                "fwrite": {
                    "1": "write_file"
                },
                "iVar5": {
                    "1": "bfd_error_code",
                    "16": "error_code",
                    "4": "error",
                    "9": "bfd_error"
                },
                "in_RAX": {
                    "1": "original_return_value",
                    "10": "result",
                    "17": "return_value"
                },
                "lVar1": {
                    "1": "relocation_upper_bound",
                    "3": "reloc_upper_bound"
                },
                "lVar2": {
                    "1": "relocation_address",
                    "2": "entry_value",
                    "3": "reloc_entry_value",
                    "6": "reloc_value"
                },
                "lVar3": {
                    "1": "data1",
                    "2": "var1",
                    "4": "reloc_value_1"
                },
                "lVar4": {
                    "1": "data_variable_2",
                    "2": "var2",
                    "4": "reloc_value_2"
                },
                "lVar6": {
                    "1": "malloc_size",
                    "2": "fwrite_addr",
                    "3": "fwrite",
                    "4": "fwrite_func",
                    "7": "upper_bound"
                },
                "lVar7": {
                    "1": "canonicalize_result",
                    "15": "num_relocs",
                    "2": "reloc_size",
                    "8": "reloc_count"
                },
                "lVar8": {
                    "1": "reloc_entry_index",
                    "2": "loop_counter",
                    "3": "counter",
                    "4": "i",
                    "6": "index",
                    "9": "reloc_index"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "array",
                    "4": "file_path",
                    "6": "param_array"
                },
                "param_2": {
                    "1": "base_address",
                    "2": "param_offset",
                    "4": "file_offset",
                    "5": "param_size"
                },
                "plVar1": {
                    "1": "reloc_entry_value",
                    "3": "reloc_entry_ptr",
                    "4": "reloc_entry"
                },
                "plVar9": {
                    "1": "reloc_entry"
                },
                "uStack_28": {
                    "1": "u_stack_28",
                    "2": "return_value_3",
                    "4": "default_return",
                    "6": "stack_variable"
                },
                "xexit": {
                    "2": "exit_program"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "bfd_canonicalize_reloc",
                "FUN_0011a110",
                "xexit",
                "fwrite",
                "free",
                "FUN_001083b7"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 process_relocation_00116030(undefined8 *param_array,long param_size)\n\n{\n  long *reloc_ptr;\n  long reloc_value;\n  long reloc_value_1;\n  long reloc_value_2;\n  int error_code;\n  undefined8 return_value;\n  long upper_bound;\n  void *reloc_buffer;\n  long num_relocs;\n  undefined8 return_value;\n  long reloc_index;\n  undefined8 stack_variable;\n  \n  if (*(long *)(param_size + 0x60) == 0) {\n    return return_value;\n  }\n  upper_bound = bfd_get_reloc_upper_bound();\n  if (upper_bound < 0) {\n    if ((upper_bound != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n      FUN_0011a110(*param_array);\n                    \n      xexit(1);\n    }\n  }\n  else if (upper_bound != 0) {\n    reloc_buffer = (void *)xmalloc();\n    num_relocs = bfd_canonicalize_reloc(param_array,param_size,reloc_buffer);\n    reloc_value_2 = _DAT_00128680;\n    reloc_value_1 = _DAT_00128568;\n    upper_bound = _fwrite;\n    if (num_relocs < 0) {\n      FUN_0011a110(*param_array);\n                    \n      xexit(1);\n    }\n    if (num_relocs != 0) {\n      reloc_index = 0;\n      do {\n        reloc_ptr = **(long ***)((long)reloc_buffer + reloc_index * 8);\n        if ((((reloc_ptr != (long *)0x0) && (reloc_value = *reloc_ptr, reloc_value != 0)) && (reloc_value != upper_bound)) &&\n           ((reloc_value != reloc_value_2 && (reloc_value != reloc_value_1)))) {\n          *(uint *)(reloc_value + 0x18) = *(uint *)(reloc_value + 0x18) | 0x20;\n        }\n        reloc_index = reloc_index + 1;\n      } while (num_relocs != reloc_index);\n    }\n    free_memory(reloc_buffer);\n    return return_value;\n  }\n  return stack_variable;\n}\n\n",
            "current_name": "process_relocation_00116030",
            "entrypoint": "0x00116030",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116030": "process_relocation_00116030",
                "__ptr": "reloc_buffer",
                "bfd_canonicalize_reloc": "canonicalize_reloc",
                "bfd_get_reloc_upper_bound": "get_reloc_upper_bound",
                "extraout_RAX": "return_value",
                "free": "free_memory",
                "fwrite": "write_to_file",
                "iVar5": "error_code",
                "in_RAX": "return_value",
                "lVar1": "reloc_upper_bound",
                "lVar2": "reloc_value",
                "lVar3": "reloc_value_1",
                "lVar4": "reloc_value_2",
                "lVar6": "upper_bound",
                "lVar7": "num_relocs",
                "lVar8": "reloc_index",
                "param_1": "param_array",
                "param_2": "param_size",
                "plVar1": "reloc_ptr",
                "uStack_28": "stack_variable",
                "xexit": "exit_program",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116110": {
            "additional_data": {
                "FUN_00116110": {
                    "1": "copy_section_data",
                    "2": "reverse_section",
                    "6": "reverse_section_contents",
                    "7": "process_section"
                },
                "__ptr": {
                    "1": "temp_ptr1",
                    "2": "ptr1",
                    "7": "buffer",
                    "8": "allocated_memory"
                },
                "bVar20": {
                    "1": "byte_flag",
                    "2": "temp_var20",
                    "4": "byte_var",
                    "6": "flag"
                },
                "cVar6": {
                    "1": "var4",
                    "2": "temp_var6",
                    "3": "temp6",
                    "4": "char_var",
                    "7": "result"
                },
                "iVar10": {
                    "1": "undefined_var10",
                    "2": "var10",
                    "3": "temp_var10",
                    "4": "temp10"
                },
                "iVar4": {
                    "1": "counter1",
                    "2": "var2",
                    "3": "int_var1",
                    "4": "var4",
                    "5": "temp4"
                },
                "iVar5": {
                    "1": "i_var5",
                    "2": "var3",
                    "3": "int_var2",
                    "4": "var5",
                    "5": "temp5"
                },
                "lVar13": {
                    "1": "temp_var6",
                    "2": "long_var3",
                    "4": "temp13"
                },
                "lVar3": {
                    "1": "section_index",
                    "2": "temp_var3",
                    "3": "section_offset",
                    "5": "section_size"
                },
                "lVar8": {
                    "1": "iter1",
                    "2": "temp_l_var2",
                    "3": "loop_index1",
                    "4": "temp8"
                },
                "local_30": {
                    "1": "buffer",
                    "2": "local_ptr",
                    "4": "section_data",
                    "8": "section_contents"
                },
                "local_38": {
                    "1": "local_size",
                    "10": "section_size",
                    "3": "section_length",
                    "4": "size"
                },
                "param_1": {
                    "1": "input_param1",
                    "24": "param1",
                    "4": "param_1"
                },
                "param_2": {
                    "1": "undefined_param2",
                    "23": "param2",
                    "4": "param_2"
                },
                "param_3": {
                    "1": "input_param3",
                    "24": "param3",
                    "4": "param_3"
                },
                "ptr": {
                    "1": "temp_ptr"
                },
                "puVar12": {
                    "1": "ptr_to_byte",
                    "2": "ptr1",
                    "3": "ptr_var"
                },
                "puVar14": {
                    "1": "pointer2",
                    "2": "ptr1",
                    "3": "temp_ptr3",
                    "4": "pointer_var2"
                },
                "puVar15": {
                    "1": "pointer_var2",
                    "2": "temp_ptr3",
                    "3": "temp_ptr4",
                    "4": "pointer_var3"
                },
                "pvVar16": {
                    "1": "var10",
                    "3": "ptr4",
                    "4": "pointer_var4"
                },
                "uVar1": {
                    "1": "byte_var",
                    "2": "temp_byte",
                    "3": "byte_value",
                    "4": "temp_var1",
                    "9": "temp1"
                },
                "uVar11": {
                    "1": "undefined_var11",
                    "2": "offset",
                    "3": "temp_var11",
                    "4": "temp11"
                },
                "uVar17": {
                    "1": "temp_var3",
                    "2": "var17",
                    "3": "temp_var17",
                    "4": "temp17"
                },
                "uVar18": {
                    "1": "temp_var6",
                    "2": "var18",
                    "3": "temp_var18",
                    "4": "temp18"
                },
                "uVar19": {
                    "1": "temp_var9",
                    "2": "ulong_var5",
                    "3": "u_var19",
                    "4": "temp19"
                },
                "uVar2": {
                    "1": "param2_value",
                    "10": "temp2",
                    "2": "unused_var2",
                    "3": "undefined_var2",
                    "5": "temp_var2"
                },
                "uVar7": {
                    "1": "undefined_var7",
                    "2": "undefined_var3",
                    "3": "temp_var7",
                    "4": "temp7"
                },
                "uVar9": {
                    "1": "loop_counter",
                    "2": "j",
                    "3": "temp_var9",
                    "4": "temp9"
                }
            },
            "called": [
                "FUN_00115f50",
                "bfd_convert_section_contents",
                "xmalloc",
                "bfd_get_full_section_contents",
                "bfd_set_section_size",
                "FUN_00114190",
                "free",
                "FUN_00108466",
                "FUN_001126c0",
                "FUN_001083de",
                "bfd_set_section_contents"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid process_section_00116110(undefined8 param1,undefined8 *param2,undefined8 param3)\n\n{\n  undefined temp1;\n  undefined8 temp2;\n  long temp3;\n  int temp4;\n  int temp5;\n  char result;\n  undefined8 temp7;\n  undefined8 *allocated_memory;\n  long temp8;\n  ulong temp9;\n  int temp10;\n  ulong temp11;\n  undefined *ptr2;\n  long temp13;\n  undefined8 *pointer_var2;\n  undefined8 *pointer_var3;\n  void *pointer_var4;\n  ulong temp17;\n  ulong temp18;\n  ulong temp19;\n  byte flag;\n  ulong section_size;\n  void *section_contents;\n  \n  flag = 0;\n  result = FUN_00115f50(param1,param2,1);\n  if (result != '\\0') {\n    return;\n  }\n  section_size = param2[8];\n  temp3 = param2[0xc];\n  if (((*(byte *)((long)param2 + 0x25) & 1) == 0) || ((*(byte *)(temp3 + 0x25) & 1) == 0)) {\n    temp13 = FUN_00114190(*param2,0,0x80);\n    if (temp13 == 0) {\n      return;\n    }\n    if ((*(byte *)(temp13 + 0x29) & 1) == 0) {\n      return;\n    }\n    allocated_memory = (undefined8 *)xmalloc(section_size);\n    pointer_var3 = allocated_memory;\n    if (7 < section_size) {\n      for (temp18 = section_size >> 3; temp18 != 0; temp18 = temp18 - 1) {\n        *pointer_var3 = 0;\n        pointer_var3 = pointer_var3 + (ulong)flag * -2 + 1;\n      }\n    }\n    pointer_var2 = pointer_var3;\n    if ((section_size & 4) != 0) {\n      pointer_var2 = (undefined8 *)((long)pointer_var3 + (ulong)flag * -8 + 4);\n      *(undefined4 *)pointer_var3 = 0;\n    }\n    pointer_var3 = pointer_var2;\n    if ((section_size & 2) != 0) {\n      pointer_var3 = (undefined8 *)((long)pointer_var2 + (ulong)flag * -4 + 2);\n      *(undefined2 *)pointer_var2 = 0;\n    }\n    if ((section_size & 1) != 0) {\n      *(undefined *)pointer_var3 = 0;\n    }\n    result = bfd_set_section_contents(param3,temp3,allocated_memory,0);\n    if (result != '\\0') {\n      free(allocated_memory);\n      return;\n    }\n    DAT_00127a40 = 1;\n    FUN_001126c0(0,param3,temp3,0);\n    free(allocated_memory);\n    return;\n  }\n  section_contents = (void *)0x0;\n  result = bfd_get_full_section_contents(param1,param2,&section_contents);\n  if ((result == '\\0') ||\n     (result = bfd_convert_section_contents(param1,param2,param3,&section_contents,&section_size),\n     temp10 = DAT_00127908, result == '\\0')) {\n    bfd_set_section_size(temp3,0);\n    DAT_00127a40 = 1;\n    FUN_001126c0(0,param1,param2,0);\n    free(section_contents);\n    return;\n  }\n  temp4 = DAT_001264b8;\n  temp5 = DAT_001264bc;\n  if (DAT_00127908 != 0) {\n    temp18 = (ulong)DAT_00127908;\n    if (section_size % temp18 != 0) {\n      temp2 = *param2;\n      temp7 = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      FUN_00119dd0(temp7,temp2,temp10);\n    }\n    temp10 = DAT_00127908 / 2;\n    temp11 = 0;\n    while (temp19 = temp11, temp4 = DAT_001264b8, temp5 = DAT_001264bc, temp19 < section_size) {\n      temp11 = temp18 + temp19;\n      temp17 = temp11;\n      for (temp9 = 0; temp9 < (ulong)(long)temp10; temp9 = temp9 + 1) {\n        temp17 = temp17 - 1;\n        ptr2 = (undefined *)(temp19 + temp9 + (long)section_contents);\n        temp1 = *ptr2;\n        *ptr2 = *(undefined *)((long)section_contents + temp17);\n        *(undefined *)((long)section_contents + temp17) = temp1;\n      }\n    }\n  }\n  DAT_001264b8 = temp4;\n  DAT_001264bc = temp5;\n  if (-1 < temp5) {\n    temp18 = (ulong)DAT_00127a3c;\n    temp10 = (int)((ulong)param2[7] % temp18);\n    temp11 = ((long)temp5 - (long)temp10) + (long)section_contents;\n    if (temp5 < temp10) {\n      temp11 = temp11 + temp18;\n    }\n    temp13 = (section_size + (long)section_contents) - temp11;\n    pointer_var4 = section_contents;\n    for (; temp11 < section_size + (long)section_contents; temp11 = temp11 + temp18) {\n      for (temp8 = 0; ((int)temp8 < temp4 && (temp8 != temp13)); temp8 = temp8 + 1) {\n        *(undefined *)((long)pointer_var4 + temp8) = *(undefined *)(temp11 + temp8);\n      }\n      pointer_var4 = (void *)((long)pointer_var4 + temp8);\n      temp13 = temp13 - temp18;\n    }\n    section_size = ((((temp18 - 1) + section_size) - (long)temp5) / temp18) * (long)temp4;\n    temp18 = *(ulong *)(temp3 + 0x38) / temp18;\n    *(ulong *)(temp3 + 0x38) = temp18;\n    if (temp5 < temp10) {\n      *(ulong *)(temp3 + 0x38) = temp18 + 1;\n      result = bfd_set_section_contents(param3,temp3,section_contents,0,section_size);\n      if (result == '\\0') {\n        FUN_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  result = bfd_set_section_contents(param3,temp3,section_contents,0,section_size);\n  if (result == '\\0') {\n    FUN_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(section_contents);\n  return;\n}\n\n",
            "current_name": "process_section_00116110",
            "entrypoint": "0x00116110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116110": "process_section_00116110",
                "__ptr": "allocated_memory",
                "bVar20": "flag",
                "cVar6": "result",
                "iVar10": "temp10",
                "iVar4": "temp4",
                "iVar5": "temp5",
                "lVar13": "temp13",
                "lVar3": "temp3",
                "lVar8": "temp8",
                "local_30": "section_contents",
                "local_38": "section_size",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "ptr": "temp_ptr",
                "puVar12": "ptr2",
                "puVar14": "pointer_var2",
                "puVar15": "pointer_var3",
                "pvVar16": "pointer_var4",
                "uVar1": "temp1",
                "uVar11": "temp11",
                "uVar17": "temp17",
                "uVar18": "temp18",
                "uVar19": "temp19",
                "uVar2": "temp2",
                "uVar7": "temp7",
                "uVar9": "temp9"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001163d0": {
            "additional_data": {
                "FUN_001086af": {
                    "1": "handle_attribute"
                },
                "FUN_001163d0": {
                    "1": "improve_and_readabilize",
                    "2": "merge_build_attributes"
                },
                "FUN_00116490": {
                    "1": "handle_version"
                },
                "FUN_00119ed0": {
                    "1": "error_handler"
                },
                "FUN_0011a1b0": {
                    "1": "compare_attributes"
                },
                "FUN_0011a250": {
                    "1": "sort_attributes"
                },
                "UNK_VALUE1": {
                    "1": "special_value1"
                },
                "UNK_VALUE2": {
                    "1": "special_value2"
                },
                "UNK_VALUE3": {
                    "1": "special_value3"
                },
                "__nmemb": {
                    "1": "var17",
                    "2": "size_var",
                    "3": "count",
                    "7": "num_elements"
                },
                "__ptr": {
                    "1": "ptr2",
                    "2": "temp_buffer",
                    "3": "reloc_buffer",
                    "6": "reloc_ptr",
                    "7": "buffer"
                },
                "__ptr_00": {
                    "1": "ptr2",
                    "2": "buffer2"
                },
                "bVar26": {
                    "1": "alignment_flag",
                    "10": "byte_var",
                    "2": "temp_byte",
                    "3": "temp_flag"
                },
                "bVar4": {
                    "1": "temp_bool",
                    "10": "flag",
                    "3": "is_condition_true",
                    "4": "is_valid",
                    "6": "condition"
                },
                "bfd_canonicalize_reloc": {
                    "1": "canonicalize_reloc"
                },
                "bfd_get_reloc_upper_bound": {
                    "1": "get_reloc_upper_bound"
                },
                "cVar19": {
                    "1": "temp_char19",
                    "12": "char_var",
                    "2": "char_value",
                    "3": "character",
                    "6": "temp_char"
                },
                "dcgettext": {
                    "1": "get_text"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "iVar21": {
                    "1": "loop_index",
                    "2": "var21",
                    "3": "loop_counter"
                },
                "iVar6": {
                    "1": "loop_index",
                    "2": "counter",
                    "3": "loop_var",
                    "7": "index"
                },
                "lVar8": {
                    "1": "var66",
                    "10": "length",
                    "2": "loop_var"
                },
                "local_60": {
                    "1": "ptr60",
                    "2": "attribute_array",
                    "4": "local_ptr1",
                    "6": "local_array"
                },
                "local_68": {
                    "1": "local_variable3",
                    "2": "var68",
                    "3": "local_var3",
                    "4": "local_var4"
                },
                "local_70": {
                    "1": "temp_offset",
                    "2": "var70",
                    "4": "local_var_3",
                    "5": "local_var3"
                },
                "local_88": {
                    "1": "var_buffer1",
                    "2": "local_variable1",
                    "4": "local_var_1",
                    "9": "local_var1"
                },
                "param_1": {
                    "1": "section_start",
                    "2": "section_header",
                    "3": "input_param1",
                    "4": "param_1"
                },
                "param_2": {
                    "1": "input2",
                    "2": "section2",
                    "3": "input_param2",
                    "4": "param_2"
                },
                "param_3": {
                    "1": "input_param3",
                    "2": "input_length",
                    "3": "param3",
                    "4": "param_3"
                },
                "param_4": {
                    "1": "input_data",
                    "2": "attribute_data",
                    "3": "param4",
                    "4": "data",
                    "6": "output_buffer"
                },
                "puVar17": {
                    "1": "reloc_array_ptr",
                    "2": "attribute_ptr",
                    "3": "ptr2"
                },
                "puVar18": {
                    "1": "ptr2",
                    "2": "pointer_var3",
                    "3": "ptr3"
                },
                "puVar18, puVar20": {
                    "1": "temp_pointers"
                },
                "puVar19": {
                    "1": "pointer_var_4"
                },
                "puVar20": {
                    "1": "pointer_var_4",
                    "2": "pointer_var4",
                    "4": "ptr4"
                },
                "puVar21": {
                    "1": "pointer_var_6"
                },
                "puVar22": {
                    "1": "ptr22",
                    "2": "temp_ptr_4",
                    "3": "ptr5"
                },
                "puVar23": {
                    "1": "ptr2",
                    "2": "pointer_var6",
                    "3": "attribute_array"
                },
                "puVar25": {
                    "1": "pointer_var_6",
                    "2": "pointer_var7",
                    "3": "ptr7"
                },
                "puVar5": {
                    "1": "ptr_array",
                    "2": "ptr_var1",
                    "3": "pointer",
                    "4": "ptr1",
                    "5": "pointer_var"
                },
                "uStack_80": {
                    "1": "stack_var",
                    "2": "stack_var1",
                    "4": "local_var_2",
                    "5": "local_var2"
                },
                "uVar1": {
                    "1": "result1",
                    "28": "result"
                },
                "uVar10": {
                    "1": "counter2",
                    "2": "temp_var_5",
                    "4": "temp_var2",
                    "6": "var10"
                },
                "uVar11": {
                    "1": "temp_var11",
                    "2": "temp_var_6",
                    "3": "value2",
                    "4": "temp_var3",
                    "6": "var11"
                },
                "uVar12": {
                    "1": "temp1",
                    "2": "temp_var_7",
                    "4": "temp_var4",
                    "6": "var12"
                },
                "uVar13": {
                    "1": "var10",
                    "2": "aligned_value",
                    "4": "temp_var5",
                    "6": "var13"
                },
                "uVar13, uVar14, uVar15, uVar16": {
                    "1": "temp_variables"
                },
                "uVar14": {
                    "1": "var_8",
                    "2": "temp_var_9",
                    "3": "temp_var6",
                    "6": "var14"
                },
                "uVar15": {
                    "1": "var10",
                    "2": "temp_var_10",
                    "3": "temp_var7",
                    "6": "var15"
                },
                "uVar16": {
                    "1": "binary_var11",
                    "2": "temp_var_11",
                    "3": "temp_var8",
                    "6": "var16"
                },
                "uVar2": {
                    "1": "result2",
                    "2": "temp_var_1",
                    "4": "var2",
                    "7": "var1"
                },
                "uVar24": {
                    "1": "temp_var6",
                    "2": "temp_var9",
                    "5": "var24"
                },
                "uVar3": {
                    "1": "temp3",
                    "2": "temp_var_2",
                    "4": "var3",
                    "7": "var2"
                },
                "uVar4": {
                    "1": "boolean"
                },
                "uVar7": {
                    "1": "result4",
                    "2": "temp_var_3",
                    "3": "var7",
                    "5": "var3"
                },
                "uVar9": {
                    "1": "counter1",
                    "2": "temp_var_4",
                    "4": "temp_var1",
                    "6": "var9"
                },
                "xcalloc": {
                    "1": "allocate_and_clear_memory"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "bfd_get_reloc_upper_bound",
                "FUN_00119ed0",
                "xmalloc",
                "bfd_canonicalize_reloc",
                "dcgettext",
                "free",
                "xcalloc"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\n\nulong merge_build_attributes_001163d0(undefined8 *param_1,undefined8 *param_2,ulong param_3,undefined *output_buffer)\n\n{\n  ulong result;\n  undefined8 var1;\n  undefined8 var2;\n  bool flag;\n  ulong *pointer_var;\n  int index;\n  undefined8 var3;\n  long length;\n  void *buffer;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  ulong var12;\n  undefined *buffer2;\n  ulong var13;\n  ulong var14;\n  ulong var15;\n  ulong var16;\n  ulong *ptr2;\n  undefined *ptr3;\n  char char_var;\n  undefined *ptr4;\n  int loop_counter;\n  undefined *ptr5;\n  ulong *ptr6;\n  ulong var24;\n  size_t num_elements;\n  ulong *ptr7;\n  byte byte_var;\n  ulong local_var1;\n  ulong local_var2;\n  ulong local_var3;\n  ulong local_var4;\n  ulong *local_array;\n  \n  byte_var = 0;\n  length = bfd_get_reloc_upper_bound();\n  local_var4 = param_3;\n  if (0 < length) {\n    buffer = (void *)xmalloc(length);\n    length = bfd_canonicalize_reloc(param_1,param_2,buffer,DAT_001278d0);\n    free(buffer);\n    if (length != 0) {\n      if (_DAT_001264c0 == 0) {\n        var1 = *param_1;\n        var2 = *param_2;\n        var3 = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        FUN_00119ed0(var3,var1,var2);\n      }\n      local_array = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  local_array = (ulong *)xcalloc(param_3 / 0xc,0x48,param_3 % 0xc);\n  local_var1 = 0;\n  local_var3 = 0;\n  var16 = param_3;\n  var15 = 0;\n  ptr6 = local_array;\n  var14 = 0;\n  ptr5 = output_buffer;\n  while (0xb < var16) {\n    var10 = (**(code **)(param_1[1] + 0x40))(ptr5);\n    *ptr6 = var10;\n    var10 = (**(code **)(param_1[1] + 0x40))(ptr5 + 4);\n    ptr6[1] = var10;\n    var11 = (**(code **)(param_1[1] + 0x40))(ptr5 + 8);\n    var10 = *ptr6;\n    ptr6[2] = var11;\n    var12 = ptr6[1];\n    var13 = var10 + 3 & 0xfffffffffffffffc;\n    ptr6[6] = var13;\n    if (var12 != (var12 + 3 & 0xfffffffffffffffc)) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < var11 - 0x100) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = var13 + var12 + 0xc;\n    if (var16 < result) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (var10 < 2) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    ptr6[3] = (ulong)(ptr5 + 0xc);\n    ptr6[4] = (ulong)(ptr5 + var13 + 0xc);\n    var16 = var16 + (-0xc - (var13 + var12));\n    if (var10 != 2) {\n      if (ptr5[0xc] == '$') {\n        if ((ptr5[0xd] == '\\x01') && (ptr5[0xe] == '1')) {\n          var16 = FUN_00116490();\n          return var16;\n        }\n      }\n      else if ((((4 < var10) && (ptr5[0xc] == 'G')) && (ptr5[0xd] == 'A')) &&\n              ((ptr5[0xe] == '$' && (ptr5[0xf] == '\\x01')))) {\n        if (ptr5[0x10] == '2') {\n          var16 = FUN_00116490();\n          return var16;\n        }\n        if (ptr5[0x10] == '3') {\n          var16 = FUN_00116490();\n          return var16;\n        }\n        length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    var9 = var15;\n    var24 = var14;\n    if (var12 == 0) {\n      if (var11 == 0x100) {\n        ptr6[7] = local_var1;\nLAB_001164af:\n        var12 = var14;\n        var24 = var14;\n      }\n      else {\n        ptr6[7] = local_var3;\nLAB_0011669e:\n        var9 = var15;\n        var12 = var15;\n      }\n    }\n    else {\n      if (var12 != 0x10) {\n        if (var12 < 0x11) {\n          if (var12 == 4) {\n            var11 = (**(code **)(param_1[1] + 0x40))();\n            var12 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (var12 == 8) {\n            var16 = FUN_001086af();\n            return var16;\n          }\n        }\n        length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      var11 = (**(code **)(param_1[1] + 0x28))(ptr5 + var13 + 0xc);\n      var12 = (**(code **)(param_1[1] + 0x28))();\n      if (var12 < var11) {\n        var11 = var12;\n      }\nLAB_00116631:\n      if (ptr6[2] == 0x100) {\n        if (var11 == 0) {\n          var11 = local_var1;\n        }\n        var10 = *ptr6;\n        ptr6[7] = var11;\n        var24 = var12;\n        local_var1 = var11;\n        if (var12 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var11 == 0) {\n          var11 = local_var3;\n        }\n        var10 = *ptr6;\n        ptr6[7] = var11;\n        var9 = var12;\n        local_var3 = var11;\n        if (var12 == 0) goto LAB_0011669e;\n      }\n    }\n    ptr6[8] = var12;\n    if (*(char *)((ptr6[3] - 1) + var10) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptr6 = ptr6 + 9;\n    var15 = var9;\n    var14 = var24;\n    ptr5 = ptr5 + result;\n  }\n  if (var16 == 0) {\n    var1 = *param_1;\n    var2 = *param_2;\n    var3 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    FUN_00119ed0(var3,var1,var2);\n    num_elements = ((long)ptr6 - (long)local_array >> 3) * -0x71c71c71c71c71c7;\n    qsort(local_array,num_elements,0x48,FUN_0011a1b0);\n    for (ptr2 = local_array; ptr2 < ptr6; ptr2 = ptr2 + 9) {\n      var16 = ptr2[2];\n      if (var16 != 0) {\n        var15 = ptr2[7];\n        var14 = ptr2[8];\n        ptr7 = ptr2;\n        loop_counter = 0;\n        if (var15 == var14) {\n          ptr2[2] = 0;\n        }\n        else {\n          do {\n            do {\n              pointer_var = ptr7;\n              ptr7 = pointer_var + -9;\n              if (ptr7 < local_array) goto LAB_001167f5;\n              var10 = pointer_var[-7];\n            } while (var10 == 0);\n            if ((*ptr7 != *ptr2) ||\n               (index = memcmp((void *)pointer_var[-6],(void *)ptr2[3],*ptr2), index != 0)) break;\n            var12 = pointer_var[-2];\n            var11 = pointer_var[-1];\n            if (var15 == var12) {\n              if (var14 == var11) {\n                ptr2[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (var14 <= var11) {\n                ptr2[2] = 0;\n                break;\n              }\n              if (var11 < var15) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < var11) || (var15 <= (var11 + 0xf & 0xfffffffffffffff0))\n                   ) goto FUN_00116852;\n              }\nLAB_001167b8:\n              if ((var16 == 0x101) == (var10 == 0x101)) {\n                if (var11 <= var14) {\n                  var11 = var14;\n                }\n                if (var12 < var15) {\n                  var15 = var12;\n                }\n                pointer_var[-1] = var11;\n                pointer_var[-2] = var15;\n                ptr2[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (var12 <= var15) goto LAB_001167a6;\n              if (var11 < var15) goto LAB_0010852c;\n              if (var14 < var15) {\n                if ((0xfffffffffffffff0 < var14) || (var12 <= (var14 + 0xf & 0xfffffffffffffff0))\n                   ) goto FUN_00116852;\n                goto LAB_001167b8;\n              }\n              if (var14 != var11) goto LAB_001167b8;\n            }\nFUN_00116852:\n            flag = loop_counter < 0x11;\n            loop_counter = loop_counter + 1;\n          } while (flag);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(local_array,num_elements,0x48,FUN_0011a250);\n    buffer2 = (undefined *)xmalloc(param_3 * 2);\n    local_var2 = 0;\n    local_var3 = 0;\n    ptr5 = buffer2;\n    for (ptr2 = local_array; ptr2 < ptr6; ptr2 = ptr2 + 9) {\n      if (ptr2[2] != 0) {\n        ptr3 = ptr5 + 0xc;\n        if ((ptr2[7] == local_var3) && (ptr2[8] == local_var2)) {\n          (**(code **)(param_1[1] + 0x50))(*ptr2,ptr5);\n          (**(code **)(param_1[1] + 0x50))(0,ptr5 + 4);\n          (**(code **)(param_1[1] + 0x50))(ptr2[2],ptr5 + 8);\n          var15 = ptr2[6];\n          var16 = *ptr2;\n          ptr5 = (undefined *)ptr2[3];\n          ptr4 = ptr3;\n          for (var14 = var16; var14 != 0; var14 = var14 - 1) {\n            *ptr4 = *ptr5;\n            ptr5 = ptr5 + (ulong)byte_var * -2 + 1;\n            ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n          }\n          if (var16 < var15) {\n            for (length = var15 - var16; length != 0; length = length + -1) {\n              *ptr4 = 0;\n              ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n            }\n          }\n          ptr5 = ptr3 + var15;\n        }\n        else {\n          (**(code **)(param_1[1] + 0x50))();\n          if (*(int *)(param_1[1] + 8) == 5) {\n            char_var = (*(char *)(param_1[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            char_var = '\\b';\n          }\n          (**(code **)(param_1[1] + 0x50))(char_var,ptr5 + 4);\n          (**(code **)(param_1[1] + 0x50))(ptr2[2],ptr5 + 8);\n          var16 = *ptr2;\n          ptr5 = (undefined *)ptr2[3];\n          ptr4 = ptr3;\n          for (var15 = var16; var15 != 0; var15 = var15 - 1) {\n            *ptr4 = *ptr5;\n            ptr5 = ptr5 + (ulong)byte_var * -2 + 1;\n            ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n          }\n          var15 = ptr2[6];\n          if (var16 < var15) {\n            for (length = var15 - var16; length != 0; length = length + -1) {\n              *ptr4 = 0;\n              ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n            }\n          }\n          length = param_1[1];\n          ptr3 = ptr3 + var15;\n          ptr5 = ptr3 + 8;\n          if ((*(int *)(length + 8) == 5) && (*(char *)(param_1[0x22] + 4) == '\\x02')) {\n            (**(code **)(length + 0x38))(ptr2[7],ptr3);\n            (**(code **)(param_1[1] + 0x38))(ptr2[8],ptr5);\n            ptr5 = ptr3 + 0x10;\n          }\n          else {\n            (**(code **)(length + 0x50))(ptr2[7],ptr3);\n            (**(code **)(param_1[1] + 0x50))(ptr2[8],ptr3 + 4);\n          }\n          local_var3 = ptr2[7];\n          local_var2 = ptr2[8];\n        }\n      }\n    }\n    var15 = (long)ptr5 - (long)buffer2;\n    var16 = var15;\n    ptr5 = buffer2;\n    local_var4 = param_3;\n    if (var15 < param_3) {\n      for (; local_var4 = var15, var16 != 0; var16 = var16 - 1) {\n        *output_buffer = *ptr5;\n        ptr5 = ptr5 + (ulong)byte_var * -2 + 1;\n        output_buffer = output_buffer + (ulong)byte_var * -2 + 1;\n      }\n    }\n    free(buffer2);\n  }\n  else {\n    length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (length != 0) {\n      bfd_set_error(0x11);\n      FUN_001126c0(0,param_1,param_2,length);\n      DAT_00127a40 = 1;\n    }\n  }\nLAB_001166f8:\n  free(local_array);\n  return local_var4;\n}\n\n",
            "current_name": "merge_build_attributes_001163d0",
            "entrypoint": "0x001163d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001163d0": "merge_build_attributes_001163d0",
                "__nmemb": "num_elements",
                "__ptr": "buffer",
                "__ptr_00": "buffer2",
                "bVar26": "byte_var",
                "bVar4": "flag",
                "bfd_canonicalize_reloc": "canonicalize_reloc",
                "bfd_get_reloc_upper_bound": "get_reloc_upper_bound",
                "cVar19": "char_var",
                "dcgettext": "get_text",
                "free": "deallocate_memory",
                "iVar21": "loop_counter",
                "iVar6": "index",
                "lVar8": "length",
                "local_60": "local_array",
                "local_68": "local_var4",
                "local_70": "local_var3",
                "local_88": "local_var1",
                "param_4": "output_buffer",
                "puVar17": "ptr2",
                "puVar18": "ptr3",
                "puVar20": "ptr4",
                "puVar22": "ptr5",
                "puVar23": "ptr6",
                "puVar25": "ptr7",
                "puVar5": "pointer_var",
                "uStack_80": "local_var2",
                "uVar1": "result",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "uVar13": "var13",
                "uVar14": "var14",
                "uVar15": "var15",
                "uVar16": "var16",
                "uVar2": "var1",
                "uVar24": "var24",
                "uVar3": "var2",
                "uVar7": "var3",
                "uVar9": "var9",
                "xcalloc": "allocate_and_clear_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116490": {
            "additional_data": {
                "FUN_00116490": {
                    "1": "decode_function"
                },
                "__nmemb": {
                    "1": "num_notes",
                    "2": "size_var",
                    "3": "num_elements",
                    "5": "nmemb",
                    "8": "size"
                },
                "__ptr": {
                    "1": "pointer_var2",
                    "2": "pointer2",
                    "3": "ptr2",
                    "4": "buffer",
                    "5": "ptr_var2",
                    "6": "ptr"
                },
                "bVar21": {
                    "1": "temp_byte",
                    "15": "byte_var"
                },
                "bVar4": {
                    "1": "is_note_valid",
                    "2": "condition",
                    "5": "flag",
                    "9": "bool_var"
                },
                "bfd_set_error": {
                    "1": "set_error"
                },
                "cVar16": {
                    "1": "temp_char",
                    "16": "char_var",
                    "2": "character"
                },
                "dcgettext": {
                    "1": "get_text"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "iVar22": {
                    "1": "index2",
                    "10": "int_var2"
                },
                "iVar6": {
                    "1": "new_var6",
                    "11": "int_var",
                    "2": "var6",
                    "3": "counter"
                },
                "in_R11": {
                    "1": "description_ptr",
                    "2": "register4",
                    "3": "r11_value"
                },
                "in_RAX": {
                    "1": "rax_var",
                    "2": "input1",
                    "3": "rax_value"
                },
                "in_stack_00000020": {
                    "1": "input2",
                    "12": "stack_var1",
                    "2": "buffer_size"
                },
                "in_stack_00000028": {
                    "1": "ptr_var8",
                    "10": "stack_var2",
                    "2": "note_array"
                },
                "in_stack_00000030": {
                    "1": "buffer2",
                    "10": "stack_var3"
                },
                "in_stack_00000038": {
                    "1": "input4",
                    "2": "stack_var38",
                    "9": "stack_var4"
                },
                "in_stack_00000040": {
                    "1": "value9",
                    "2": "stack_var40",
                    "9": "stack_var5"
                },
                "in_stack_00000048": {
                    "1": "var48",
                    "2": "warning_message",
                    "9": "stack_var6"
                },
                "lVar7": {
                    "1": "len",
                    "2": "loop_var",
                    "6": "length",
                    "9": "long_var"
                },
                "memcmp": {
                    "1": "compare_memory"
                },
                "param_1": {
                    "1": "function_pointer",
                    "19": "param1",
                    "3": "input_param",
                    "5": "arg1"
                },
                "param_2": {
                    "1": "param_b",
                    "14": "param2",
                    "4": "attribute_size",
                    "5": "arg2"
                },
                "param_3": {
                    "1": "param_c",
                    "13": "param3",
                    "2": "attribute_name",
                    "3": "note_name",
                    "5": "arg3"
                },
                "param_4": {
                    "1": "param_d",
                    "14": "param4",
                    "5": "arg4"
                },
                "param_7": {
                    "1": "param_e",
                    "17": "param7",
                    "2": "arg5"
                },
                "param_8": {
                    "1": "var8",
                    "17": "param8",
                    "2": "has_version_note"
                },
                "param_9": {
                    "1": "value7",
                    "17": "param9",
                    "2": "arg9"
                },
                "ptr": {
                    "1": "buffer"
                },
                "puVar14": {
                    "1": "pointer_var3",
                    "2": "ptr3",
                    "4": "ptr_var2",
                    "5": "pointer_var2"
                },
                "puVar15": {
                    "1": "ptr2",
                    "2": "ptr4",
                    "4": "ptr_var3",
                    "5": "pointer_var3"
                },
                "puVar17": {
                    "1": "temp_pointer5",
                    "2": "ptr5",
                    "4": "ptr_var4",
                    "5": "pointer_var4"
                },
                "puVar18": {
                    "1": "ptr18",
                    "2": "ptr6",
                    "4": "ptr_var5",
                    "5": "ptr_var6"
                },
                "puVar19": {
                    "1": "attribute_notes_end",
                    "2": "ptr7",
                    "4": "ptr_var6",
                    "5": "ptr_var7"
                },
                "puVar20": {
                    "1": "ptr_var20",
                    "4": "ptr_var8"
                },
                "puVar5": {
                    "1": "ptr5",
                    "2": "pointer_var1",
                    "3": "pointer1",
                    "4": "pointer_var",
                    "6": "ptr_var"
                },
                "qsort": {
                    "1": "quick_sort"
                },
                "uVar1": {
                    "1": "result_var1",
                    "10": "var1",
                    "3": "temp1",
                    "4": "temp_var1",
                    "6": "result1"
                },
                "uVar10": {
                    "1": "end_offset",
                    "2": "temp_var10",
                    "6": "result6",
                    "8": "var10"
                },
                "uVar11": {
                    "1": "ret_address",
                    "2": "temp_var11",
                    "6": "result7",
                    "8": "var11"
                },
                "uVar12": {
                    "1": "result_var8",
                    "2": "temp_var12",
                    "6": "result8",
                    "8": "var12"
                },
                "uVar13": {
                    "1": "result_var9",
                    "2": "temp_var9",
                    "6": "result9",
                    "8": "var13"
                },
                "uVar2": {
                    "1": "description_size",
                    "10": "var2",
                    "3": "temp2",
                    "4": "temp_var2",
                    "6": "result2"
                },
                "uVar3": {
                    "1": "variable3",
                    "10": "var3",
                    "3": "temp3",
                    "4": "temp_var3",
                    "6": "result3"
                },
                "uVar8": {
                    "1": "data4",
                    "2": "var4",
                    "6": "result4",
                    "8": "var8"
                },
                "uVar9": {
                    "1": "input2",
                    "2": "temp_var9",
                    "6": "result5",
                    "8": "var9"
                },
                "unaff_R12": {
                    "1": "unaff_ptr_var",
                    "2": "register_r12"
                },
                "unaff_R13": {
                    "1": "note_data_end",
                    "2": "register_r13"
                },
                "unaff_R14": {
                    "1": "unaff_ptr_var2",
                    "2": "register7"
                },
                "unaff_RAX": {
                    "1": "note_type"
                },
                "unaff_RBP": {
                    "1": "register_var3",
                    "2": "unaff_rbp"
                },
                "unaff_RBX": {
                    "1": "unaffected_register1",
                    "2": "unaff_rbx",
                    "3": "remaining_size"
                },
                "unaff_retaddr": {
                    "1": "retaddr_value",
                    "2": "unaff_ret_addr",
                    "5": "return_address"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_001086af",
                "dcgettext"
            ],
            "calling": [
                "FUN_001086af",
                "FUN_0010847a"
            ],
            "code": "\nulong decode_function_00116490(undefined8 param1,ulong param2,ulong param3,long param4)\n\n{\n  undefined8 var1;\n  undefined8 var2;\n  ulong var3;\n  bool bool_var;\n  ulong *ptr_var;\n  int int_var;\n  long long_var;\n  undefined8 var8;\n  ulong rax_value;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  ulong var12;\n  undefined *ptr;\n  ulong var13;\n  ulong remaining_size;\n  ulong register3;\n  ulong *ptr_var3;\n  undefined *ptr_var4;\n  char char_var;\n  undefined *ptr_var5;\n  undefined *ptr_var6;\n  ulong r11_value;\n  ulong *register5;\n  ulong *ptr_var7;\n  ulong register6;\n  size_t size;\n  undefined8 *register7;\n  ulong *ptr_var8;\n  byte byte_var;\n  int int_var2;\n  ulong return_address;\n  ulong param7;\n  uint param8;\n  ulong param9;\n  ulong stack_var1;\n  ulong *stack_var2;\n  undefined *stack_var3;\n  uint stack_var4;\n  uint stack_var5;\n  undefined8 *stack_var6;\n  \n  byte_var = 0;\ncode_r0x00116490:\n  long_var = param4;\n  var10 = register3;\n  var13 = register6;\n  if (rax_value == 0) {\n    if (param2 == 0x100) {\n      register5[7] = return_address;\n      var11 = return_address;\nLAB_001164af:\n      var9 = register6;\n      var13 = register6;\n      return_address = var11;\n    }\n    else {\n      register5[7] = param9;\nLAB_0011669e:\n      var10 = register3;\n      var9 = register3;\n    }\nLAB_001164bb:\n    register5[8] = var9;\n    if (*(char *)((register5[3] - 1) + param3) != '\\0') {\n      long_var = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptr_var7 = register5 + 9;\n    if (0xb < remaining_size) {\n      var9 = (**(code **)(register7[1] + 0x40))(long_var);\n      *ptr_var7 = var9;\n      var9 = (**(code **)(register7[1] + 0x40))(long_var + 4);\n      register5[10] = var9;\n      param2 = (**(code **)(register7[1] + 0x40))(long_var + 8);\n      param3 = *ptr_var7;\n      register5[0xb] = param2;\n      rax_value = register5[10];\n      var9 = param3 + 3 & 0xfffffffffffffffc;\n      register5[0xf] = var9;\n      if (rax_value != (rax_value + 3 & 0xfffffffffffffffc)) {\n        long_var = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param2 - 0x100) {\n        long_var = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      var11 = var9 + rax_value + 0xc;\n      if (remaining_size < var11) {\n        long_var = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param3 < 2) {\n        long_var = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      register5[0xc] = long_var + 0xc;\n      r11_value = long_var + 0xc + var9;\n      register5[0xd] = r11_value;\n      remaining_size = remaining_size + (-0xc - (var9 + rax_value));\n      param4 = long_var + var11;\n      register3 = var10;\n      register5 = ptr_var7;\n      register6 = var13;\n      if (param3 != 2) {\n        if (*(char *)(long_var + 0xc) == '$') {\n          if ((*(char *)(long_var + 0xd) == '\\x01') && (*(char *)(long_var + 0xe) == '1')) {\n            var10 = decode_function_00116490();\n            return var10;\n          }\n        }\n        else if ((((4 < param3) && (*(char *)(long_var + 0xc) == 'G')) &&\n                 (*(char *)(long_var + 0xd) == 'A')) &&\n                ((*(char *)(long_var + 0xe) == '$' && (*(char *)(long_var + 0xf) == '\\x01')))) {\n          if (*(char *)(long_var + 0x10) == '2') {\n            var10 = decode_function_00116490();\n            return var10;\n          }\n          if (*(char *)(long_var + 0x10) == '3') {\n            var10 = decode_function_00116490();\n            return var10;\n          }\n          long_var = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (remaining_size != 0) {\n      long_var = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((stack_var4 | stack_var5 | param8) == 0) {\n      var1 = *register7;\n      var2 = *stack_var6;\n      var8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      FUN_00119ed0(var8,var1,var2);\nLAB_0011671b:\n      size = ((long)ptr_var7 - (long)stack_var2 >> 3) * -0x71c71c71c71c71c7;\n      qsort(stack_var2,size,0x48,FUN_0011a1b0);\n      for (ptr_var3 = stack_var2; ptr_var3 < ptr_var7; ptr_var3 = ptr_var3 + 9) {\n        var10 = ptr_var3[2];\n        if (var10 != 0) {\n          var13 = ptr_var3[7];\n          var9 = ptr_var3[8];\n          ptr_var8 = ptr_var3;\n          int_var2 = 0;\n          if (var13 == var9) {\n            ptr_var3[2] = 0;\n          }\n          else {\n            do {\n              do {\n                ptr_var = ptr_var8;\n                ptr_var8 = ptr_var + -9;\n                if (ptr_var8 < stack_var2) goto LAB_001167f5;\n                var11 = ptr_var[-7];\n              } while (var11 == 0);\n              if ((*ptr_var8 != *ptr_var3) ||\n                 (int_var = memcmp((void *)ptr_var[-6],(void *)ptr_var3[3],*ptr_var3), int_var != 0))\n              break;\n              var3 = ptr_var[-2];\n              var12 = ptr_var[-1];\n              if (var13 == var3) {\n                if (var9 == var12) {\n                  ptr_var3[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (var9 <= var12) {\n                  ptr_var3[2] = 0;\n                  break;\n                }\n                if (var12 < var13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < var12) ||\n                     (var13 <= (var12 + 0xf & 0xfffffffffffffff0))) goto FUN_00116852;\n                }\nLAB_001167b8:\n                if ((var10 == 0x101) == (var11 == 0x101)) {\n                  if (var12 <= var9) {\n                    var12 = var9;\n                  }\n                  if (var3 < var13) {\n                    var13 = var3;\n                  }\n                  ptr_var[-1] = var12;\n                  ptr_var[-2] = var13;\n                  ptr_var3[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (var3 <= var13) goto LAB_001167a6;\n                if (var12 < var13) goto LAB_0010852c;\n                if (var9 < var13) {\n                  if ((0xfffffffffffffff0 < var9) || (var3 <= (var9 + 0xf & 0xfffffffffffffff0)))\n                  goto FUN_00116852;\n                  goto LAB_001167b8;\n                }\n                if (var9 != var12) goto LAB_001167b8;\n              }\nFUN_00116852:\n              bool_var = int_var2 < 0x11;\n              int_var2 = int_var2 + 1;\n            } while (bool_var);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(stack_var2,size,0x48,FUN_0011a250);\n      ptr = (undefined *)xmalloc(stack_var1 * 2);\n      param7 = 0;\n      param9 = 0;\n      ptr_var6 = ptr;\n      for (ptr_var3 = stack_var2; ptr_var3 < ptr_var7; ptr_var3 = ptr_var3 + 9) {\n        if (ptr_var3[2] != 0) {\n          ptr_var5 = ptr_var6 + 4;\n          ptr_var4 = ptr_var6 + 0xc;\n          if ((ptr_var3[7] == param9) && (ptr_var3[8] == param7)) {\n            (**(code **)(register7[1] + 0x50))(*ptr_var3,ptr_var6);\n            (**(code **)(register7[1] + 0x50))(0,ptr_var5);\n            (**(code **)(register7[1] + 0x50))(ptr_var3[2],ptr_var6 + 8);\n            var13 = ptr_var3[6];\n            var10 = *ptr_var3;\n            ptr_var6 = (undefined *)ptr_var3[3];\n            ptr_var5 = ptr_var4;\n            for (var9 = var10; var9 != 0; var9 = var9 - 1) {\n              *ptr_var5 = *ptr_var6;\n              ptr_var6 = ptr_var6 + (ulong)byte_var * -2 + 1;\n              ptr_var5 = ptr_var5 + (ulong)byte_var * -2 + 1;\n            }\n            if (var10 < var13) {\n              for (long_var = var13 - var10; long_var != 0; long_var = long_var + -1) {\n                *ptr_var5 = 0;\n                ptr_var5 = ptr_var5 + (ulong)byte_var * -2 + 1;\n              }\n            }\n            ptr_var6 = ptr_var4 + var13;\n          }\n          else {\n            (**(code **)(register7[1] + 0x50))();\n            if (*(int *)(register7[1] + 8) == 5) {\n              char_var = (*(char *)(register7[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              char_var = '\\b';\n            }\n            (**(code **)(register7[1] + 0x50))(char_var,ptr_var5);\n            (**(code **)(register7[1] + 0x50))(ptr_var3[2],ptr_var6 + 8);\n            var10 = *ptr_var3;\n            ptr_var6 = (undefined *)ptr_var3[3];\n            ptr_var5 = ptr_var4;\n            for (var13 = var10; var13 != 0; var13 = var13 - 1) {\n              *ptr_var5 = *ptr_var6;\n              ptr_var6 = ptr_var6 + (ulong)byte_var * -2 + 1;\n              ptr_var5 = ptr_var5 + (ulong)byte_var * -2 + 1;\n            }\n            var13 = ptr_var3[6];\n            if (var10 < var13) {\n              for (long_var = var13 - var10; long_var != 0; long_var = long_var + -1) {\n                *ptr_var5 = 0;\n                ptr_var5 = ptr_var5 + (ulong)byte_var * -2 + 1;\n              }\n            }\n            long_var = register7[1];\n            ptr_var4 = ptr_var4 + var13;\n            ptr_var6 = ptr_var4 + 8;\n            if ((*(int *)(long_var + 8) == 5) && (*(char *)(register7[0x22] + 4) == '\\x02')) {\n              (**(code **)(long_var + 0x38))(ptr_var3[7],ptr_var4);\n              (**(code **)(register7[1] + 0x38))(ptr_var3[8],ptr_var6);\n              ptr_var6 = ptr_var4 + 0x10;\n            }\n            else {\n              (**(code **)(long_var + 0x50))(ptr_var3[7],ptr_var4);\n              (**(code **)(register7[1] + 0x50))(ptr_var3[8],ptr_var4 + 4);\n            }\n            param9 = ptr_var3[7];\n            param7 = ptr_var3[8];\n          }\n        }\n      }\n      var13 = (long)ptr_var6 - (long)ptr;\n      var10 = var13;\n      ptr_var6 = ptr;\n      if (var13 < stack_var1) {\n        for (; stack_var1 = var13, var10 != 0; var10 = var10 - 1) {\n          *stack_var3 = *ptr_var6;\n          ptr_var6 = ptr_var6 + (ulong)byte_var * -2 + 1;\n          stack_var3 = stack_var3 + (ulong)byte_var * -2 + 1;\n        }\n      }\n      free(ptr);\nLAB_001166f8:\n      free(stack_var2);\n      return stack_var1;\n    }\n    if (((stack_var5 | param8) == 0) || (stack_var4 == 0)) {\n      if (stack_var5 == 0) {\n        if (param8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param8 == 0) goto LAB_001166f8;\n    }\n    long_var = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (rax_value == 0x10) {\n      var11 = (**(code **)(register7[1] + 0x28))(r11_value);\n      var9 = (**(code **)(register7[1] + 0x28))(register5[4] + 8);\n      if (var9 < var11) {\n        var11 = var9;\n      }\nLAB_00116631:\n      if (register5[2] == 0x100) {\n        if (var11 == 0) {\n          var11 = return_address;\n        }\n        param3 = *register5;\n        register5[7] = var11;\n        var13 = var9;\n        return_address = var11;\n        if (var9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var11 == 0) {\n          var11 = param9;\n        }\n        param3 = *register5;\n        register5[7] = var11;\n        var10 = var9;\n        param9 = var11;\n        if (var9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (rax_value < 0x11) {\n      if (rax_value == 4) {\n        var11 = (**(code **)(register7[1] + 0x40))(r11_value);\n        var9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (rax_value == 8) {\n        var10 = FUN_001086af();\n        return var10;\n      }\n    }\n    long_var = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (long_var != 0) {\n    bfd_set_error(0x11);\n    FUN_001126c0(0,register7,stack_var6,long_var);\n    DAT_00127a40 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "current_name": "decode_function_00116490",
            "entrypoint": "0x00116490",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116490": "decode_function_00116490",
                "__nmemb": "size",
                "__ptr": "ptr",
                "bVar21": "byte_var",
                "bVar4": "bool_var",
                "bfd_set_error": "set_error",
                "cVar16": "char_var",
                "dcgettext": "get_text",
                "free": "deallocate_memory",
                "iVar22": "int_var2",
                "iVar6": "int_var",
                "in_R11": "r11_value",
                "in_RAX": "rax_value",
                "in_stack_00000020": "stack_var1",
                "in_stack_00000028": "stack_var2",
                "in_stack_00000030": "stack_var3",
                "in_stack_00000038": "stack_var4",
                "in_stack_00000040": "stack_var5",
                "in_stack_00000048": "stack_var6",
                "lVar7": "long_var",
                "memcmp": "compare_memory",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "ptr": "buffer",
                "puVar14": "ptr_var3",
                "puVar15": "ptr_var4",
                "puVar17": "ptr_var5",
                "puVar18": "ptr_var6",
                "puVar19": "ptr_var7",
                "puVar20": "ptr_var8",
                "puVar5": "ptr_var",
                "qsort": "quick_sort",
                "uVar1": "var1",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "uVar13": "var13",
                "uVar2": "var2",
                "uVar3": "var3",
                "uVar8": "var8",
                "uVar9": "var9",
                "unaff_R12": "register5",
                "unaff_R13": "register6",
                "unaff_R14": "register7",
                "unaff_RBP": "register3",
                "unaff_RBX": "remaining_size",
                "unaff_retaddr": "return_address",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116852": {
            "additional_data": {
                "FUN_00116852": {
                    "1": "find_and_process_data",
                    "2": "analyze_data",
                    "4": "process_data"
                },
                "FUN_0011a250": {
                    "2": "compare_function",
                    "4": "compare_values"
                },
                "__base": {
                    "1": "array"
                },
                "__compar_fn_t": {
                    "1": "comparison_function"
                },
                "__n": {
                    "2": "size"
                },
                "__nmemb": {
                    "1": "num_elements"
                },
                "__ptr": {
                    "1": "memory_buffer",
                    "2": "temp_array",
                    "3": "dynamic_array"
                },
                "__s1": {
                    "1": "string_1"
                },
                "__s2": {
                    "1": "string_2"
                },
                "__size": {
                    "1": "element_size"
                },
                "bVar14": {
                    "1": "byte_variable14",
                    "2": "byte_value",
                    "4": "temp_byte"
                },
                "cVar10": {
                    "1": "character_variable",
                    "2": "char_val",
                    "3": "char_value",
                    "4": "temp_char"
                },
                "free": {
                    "1": "deallocate_memory",
                    "5": "release_memory"
                },
                "iVar3": {
                    "1": "memcmp_result",
                    "13": "comparison_result",
                    "2": "compare_result"
                },
                "in_R10": {
                    "1": "counter1",
                    "2": "index",
                    "3": "current_index",
                    "9": "counter"
                },
                "in_R11": {
                    "1": "input_variable11",
                    "2": "condition"
                },
                "in_R13": {
                    "1": "input_variable13"
                },
                "in_R14": {
                    "1": "input_variable14"
                },
                "in_R15": {
                    "1": "input_variable15"
                },
                "in_RBP": {
                    "1": "result"
                },
                "in_RBX": {
                    "1": "previous_size"
                },
                "in_RCX": {
                    "1": "data",
                    "2": "data_end",
                    "3": "end_ptr"
                },
                "lVar7": {
                    "1": "counter",
                    "2": "iteration",
                    "4": "loop_var",
                    "6": "loop_counter"
                },
                "memcmp": {
                    "1": "compare_data",
                    "5": "compare_memory"
                },
                "param_1": {
                    "1": "comparison_ptr_1"
                },
                "param_10": {
                    "1": "param10",
                    "2": "parameter10",
                    "3": "param_10",
                    "5": "output_size",
                    "7": "result_size"
                },
                "param_11": {
                    "1": "source_array",
                    "2": "data",
                    "3": "data_array",
                    "4": "input_array"
                },
                "param_12": {
                    "1": "param12",
                    "2": "parameter12",
                    "4": "output_array"
                },
                "param_13": {
                    "1": "some_param",
                    "2": "param3",
                    "3": "param13",
                    "5": "context"
                },
                "param_14": {
                    "1": "param7",
                    "2": "input_size",
                    "4": "data_size",
                    "5": "array_size"
                },
                "param_15": {
                    "1": "unused2"
                },
                "param_2": {
                    "1": "comparison_ptr_2"
                },
                "param_7": {
                    "1": "search1",
                    "2": "parameter7",
                    "4": "param7",
                    "6": "param_7",
                    "7": "param1"
                },
                "param_8": {
                    "1": "unused1"
                },
                "param_9": {
                    "1": "param_b",
                    "2": "parameter9",
                    "4": "param9",
                    "6": "param_9",
                    "7": "param2"
                },
                "pcVar2": {
                    "1": "code_pointer",
                    "2": "comparison_func",
                    "6": "function_pointer"
                },
                "psVar13": {
                    "1": "ptr5",
                    "2": "array_index"
                },
                "puVar11": {
                    "1": "temp_data_ptr",
                    "2": "pointer2",
                    "3": "temp_ptr2"
                },
                "puVar12": {
                    "1": "pointer_var12",
                    "2": "pointer3",
                    "4": "temp_ptr3"
                },
                "puVar9": {
                    "1": "ptr2",
                    "2": "pointer1",
                    "3": "temp_ptr1"
                },
                "qsort": {
                    "1": "sort_data",
                    "5": "sort_array"
                },
                "sVar1": {
                    "1": "tmp_size",
                    "2": "item_size"
                },
                "uVar10": {
                    "1": "var_1"
                },
                "uVar4": {
                    "1": "index_plus_one",
                    "2": "count",
                    "3": "increment",
                    "4": "counter"
                },
                "uVar5": {
                    "1": "variable3",
                    "2": "temp1",
                    "4": "min_value"
                },
                "uVar6": {
                    "1": "temp_var6",
                    "2": "max_size",
                    "3": "max_value"
                },
                "uVar8": {
                    "1": "var4",
                    "2": "temp_value",
                    "3": "current_value"
                },
                "unaff_R10": {
                    "1": "temp_index"
                },
                "unaff_R11": {
                    "1": "data_type"
                },
                "unaff_R12": {
                    "1": "temp_ptr"
                },
                "unaff_R13": {
                    "1": "end_of_data_array",
                    "2": "end_pointer"
                },
                "unaff_R14": {
                    "1": "current_data_pointer",
                    "2": "array_pointer",
                    "3": "current_element"
                },
                "unaff_R15": {
                    "1": "max_value",
                    "2": "max_size"
                },
                "unaff_RBP": {
                    "1": "input_data",
                    "2": "current_item"
                },
                "unaff_RBP[2]": {
                    "1": "flag"
                },
                "unaff_RBP[3]": {
                    "1": "string_pointer"
                },
                "unaff_RBX": {
                    "1": "size1",
                    "2": "max_value"
                },
                "xmalloc": {
                    "6": "allocate_memory"
                }
            },
            "called": [
                "FUN_00116852",
                "FUN_0011a250",
                "xmalloc",
                "memcmp",
                "free",
                "qsort"
            ],
            "calling": [
                "FUN_00116852"
            ],
            "code": "\nulong process_data_00116852(void)\n\n{\n  size_t element_size;\n  code *function_pointer;\n  int comparison_result;\n  uint counter;\n  undefined *dynamic_array;\n  size_t *end_ptr;\n  ulong min_value;\n  ulong max_value;\n  long loop_counter;\n  ulong current_value;\n  size_t max_value;\n  size_t *current_item;\n  undefined *temp_ptr1;\n  char temp_char;\n  undefined *temp_pointer2;\n  ulong counter;\n  undefined *temp_ptr3;\n  size_t comparison_value;\n  size_t *start;\n  size_t *current_element;\n  size_t current_value;\n  size_t *current_pointer;\n  byte temp_byte;\n  size_t param1;\n  size_t param2;\n  ulong result_size;\n  size_t *input_array;\n  undefined *result;\n  long context;\n  size_t array_size;\n  \n  temp_byte = 0;\ncode_r0x00116852:\n  counter = (int)counter + 1;\n  if (0x10 < (int)counter) goto LAB_001167f5;\nLAB_00116863:\n  current_element = current_element + -9;\n  do {\n    if (start <= current_element) {\n      element_size = current_element[2];\n      if (element_size == 0) goto LAB_00116863;\n      current_value = (ulong)counter;\n      if ((*current_element == *current_item) &&\n         (comparison_result = memcmp((void *)current_element[3],(void *)string_pointer,*current_item), comparison_result == 0)) {\n        max_value = current_element[7];\n        min_value = current_element[8];\n        counter = current_value & 0xffffffff;\n        if (current_value == max_value) {\n          if (max_value != min_value) goto LAB_001167a6;\n          flag = 0;\n        }\n        else {\n          if (current_value < max_value) {\n            if (min_value < current_value) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < min_value) || (current_value <= (min_value + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (max_value < current_value) {\n              if ((0xfffffffffffffff0 < max_value) ||\n                 (max_value <= (max_value + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (max_value == min_value) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (max_value <= min_value) {\n              flag = 0;\n              goto LAB_001167f5;\n            }\n            if (min_value < current_value) goto LAB_0010852c;\n          }\n          if ((comparison_value == 0x101) != (element_size == 0x101)) goto code_r0x00116852;\n          if (min_value <= max_value) {\n            min_value = max_value;\n          }\n          if (max_value < current_value) {\n            current_value = max_value;\n          }\n          current_element[8] = min_value;\n          current_element[7] = current_value;\n          flag = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        current_element = current_item;\n        current_item = current_element + 9;\n        if (end_ptr <= current_item) {\n          qsort(input_array,array_size,0x48,FUN_0011a250);\n          dynamic_array = (undefined *)xmalloc(result_size * 2);\n          param1 = 0;\n          temp_ptr3 = dynamic_array;\n          for (current_pointer = input_array; current_pointer < end_ptr; current_pointer = current_pointer + 9) {\n            if (current_pointer[2] != 0) {\n              temp_pointer2 = temp_ptr3 + 4;\n              temp_ptr1 = temp_ptr3 + 0xc;\n              function_pointer = *(code **)(*(long *)(context + 8) + 0x50);\n              if ((current_pointer[7] == param2) && (current_pointer[8] == param1)) {\n                (*function_pointer)(*current_pointer,temp_ptr3);\n                (**(code **)(*(long *)(context + 8) + 0x50))(0,temp_pointer2);\n                (**(code **)(*(long *)(context + 8) + 0x50))(current_pointer[2],temp_ptr3 + 8);\n                max_value = current_pointer[6];\n                current_value = *current_pointer;\n                temp_ptr3 = (undefined *)current_pointer[3];\n                temp_pointer2 = temp_ptr1;\n                for (min_value = current_value; min_value != 0; min_value = min_value - 1) {\n                  *temp_pointer2 = *temp_ptr3;\n                  temp_ptr3 = temp_ptr3 + (ulong)temp_byte * -2 + 1;\n                  temp_pointer2 = temp_pointer2 + (ulong)temp_byte * -2 + 1;\n                }\n                if (current_value < max_value) {\n                  for (loop_counter = max_value - current_value; loop_counter != 0; loop_counter = loop_counter + -1) {\n                    *temp_pointer2 = 0;\n                    temp_pointer2 = temp_pointer2 + (ulong)temp_byte * -2 + 1;\n                  }\n                }\n                temp_ptr3 = temp_ptr1 + max_value;\n              }\n              else {\n                (*function_pointer)();\n                if (*(int *)(*(long *)(context + 8) + 8) == 5) {\n                  temp_char = (*(char *)(*(long *)(context + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  temp_char = '\\b';\n                }\n                (**(code **)(*(long *)(context + 8) + 0x50))(temp_char,temp_pointer2);\n                (**(code **)(*(long *)(context + 8) + 0x50))(current_pointer[2],temp_ptr3 + 8);\n                current_value = *current_pointer;\n                temp_ptr3 = (undefined *)current_pointer[3];\n                temp_pointer2 = temp_ptr1;\n                for (max_value = current_value; max_value != 0; max_value = max_value - 1) {\n                  *temp_pointer2 = *temp_ptr3;\n                  temp_ptr3 = temp_ptr3 + (ulong)temp_byte * -2 + 1;\n                  temp_pointer2 = temp_pointer2 + (ulong)temp_byte * -2 + 1;\n                }\n                max_value = current_pointer[6];\n                if (current_value < max_value) {\n                  for (loop_counter = max_value - current_value; loop_counter != 0; loop_counter = loop_counter + -1) {\n                    *temp_pointer2 = 0;\n                    temp_pointer2 = temp_pointer2 + (ulong)temp_byte * -2 + 1;\n                  }\n                }\n                loop_counter = *(long *)(context + 8);\n                temp_ptr1 = temp_ptr1 + max_value;\n                temp_ptr3 = temp_ptr1 + 8;\n                if ((*(int *)(loop_counter + 8) == 5) &&\n                   (*(char *)(*(long *)(context + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(loop_counter + 0x38))(current_pointer[7],temp_ptr1);\n                  (**(code **)(*(long *)(context + 8) + 0x38))(current_pointer[8],temp_ptr3);\n                  temp_ptr3 = temp_ptr1 + 0x10;\n                }\n                else {\n                  (**(code **)(loop_counter + 0x50))(current_pointer[7],temp_ptr1);\n                  (**(code **)(*(long *)(context + 8) + 0x50))(current_pointer[8],temp_ptr1 + 4);\n                }\n                param2 = current_pointer[7];\n                param1 = current_pointer[8];\n              }\n            }\n          }\n          max_value = (long)temp_ptr3 - (long)dynamic_array;\n          current_value = max_value;\n          temp_ptr3 = dynamic_array;\n          if (max_value < result_size) {\n            for (; result_size = max_value, current_value != 0; current_value = current_value - 1) {\n              *result = *temp_ptr3;\n              temp_ptr3 = temp_ptr3 + (ulong)temp_byte * -2 + 1;\n              result = result + (ulong)temp_byte * -2 + 1;\n            }\n          }\n          free(dynamic_array);\n          free(input_array);\n          return result_size;\n        }\n        comparison_value = current_element[0xb];\n      } while (comparison_value == 0);\n      current_value = current_element[0x10];\n      max_value = current_element[0x11];\n      counter = 0;\n      if (current_value != max_value) break;\n      current_element[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "current_name": "process_data_00116852",
            "entrypoint": "0x00116852",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116852": "process_data_00116852",
                "__ptr": "dynamic_array",
                "bVar14": "temp_byte",
                "cVar10": "temp_char",
                "free": "release_memory",
                "iVar3": "comparison_result",
                "in_R10": "counter",
                "in_R11": "comparison_value",
                "in_RCX": "end_ptr",
                "lVar7": "loop_counter",
                "memcmp": "compare_memory",
                "param_1": "comparison_ptr_1",
                "param_10": "result_size",
                "param_11": "input_array",
                "param_12": "result",
                "param_13": "context",
                "param_14": "array_size",
                "param_7": "param1",
                "param_9": "param2",
                "pcVar2": "function_pointer",
                "psVar13": "current_pointer",
                "puVar11": "temp_pointer2",
                "puVar12": "temp_ptr3",
                "puVar9": "temp_ptr1",
                "qsort": "sort_array",
                "sVar1": "element_size",
                "uVar4": "counter",
                "uVar5": "min_value",
                "uVar6": "max_value",
                "uVar8": "current_value",
                "unaff_R13": "start",
                "unaff_R14": "current_element",
                "unaff_R15": "current_value",
                "unaff_RBP": "current_item",
                "unaff_RBP[2]": "flag",
                "unaff_RBP[3]": "string_pointer",
                "unaff_RBX": "max_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116ad0": {
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00116ad0",
            "entrypoint": "0x00116ad0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00116b00": {
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "calling": [
                "_INIT_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00116b00",
            "entrypoint": "0x00116b00",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00116b90": {
            "called": [
                "bindtextdomain",
                "FUN_00119970",
                "strtoul",
                "htab_elements",
                "__errno_location",
                "FUN_00108916",
                "FUN_0011a390",
                "FUN_001126c0",
                "mkstemp",
                "htab_find_slot",
                "FUN_00114190",
                "strerror",
                "strcpy",
                "bfd_init",
                "bfd_scan_arch",
                "FUN_00113f20",
                "bfd_set_default_target",
                "fclose",
                "close",
                "FUN_00114690",
                "xexit",
                "dcgettext",
                "filename_cmp",
                "FUN_00113fe0",
                "strcasecmp",
                "FUN_00114c80",
                "FUN_00119dd0",
                "memcpy",
                "FUN_00113f50",
                "htab_create_alloc",
                "FUN_00115970",
                "FUN_00114c20",
                "stat",
                "bfd_errmsg",
                "bfd_set_error_program_name",
                "strncpy",
                "FUN_00108c86",
                "FUN_001199d0",
                "fprintf",
                "FUN_00108898",
                "strchr",
                "setlocale",
                "FUN_001054af",
                "dup",
                "xmalloc",
                "FUN_00119940",
                "xmalloc_set_program_name",
                "getopt_long",
                "xrealloc",
                "FUN_00114cf0",
                "FUN_0011a480",
                "xcalloc",
                "getc",
                "strlen",
                "unlink_if_ordinary",
                "free",
                "memmove",
                "FUN_00108800",
                "FUN_00108d9a",
                "bfd_get_error",
                "FUN_00114d60",
                "strcmp",
                "ftell",
                "strncasecmp",
                "strtol",
                "ferror",
                "FUN_00114460",
                "free",
                "FUN_00108a2a",
                "malloc",
                "fseek",
                "FUN_00119ed0",
                "FUN_00113fb0",
                "fread",
                "xstrdup",
                "fopen",
                "textdomain"
            ],
            "calling": [
                "entry"
            ],
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_00127600 = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  DAT_00127a48 = 0;\n  DAT_00127a44 = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    FUN_00119dd0(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = DAT_00127600;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    FUN_00119dd0(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = _DAT_001264c0;\n  if ((int)_DAT_001264c0 < 0) {\n    sVar15 = strlen(DAT_00127600);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  _DAT_001264c0 = uVar10;\n  DAT_00127a18 = FUN_00113f20();\n  DAT_00127a10 = FUN_00113f20();\n  DAT_00127a28 = FUN_00113f20();\n  DAT_00127a08 = FUN_00113f20();\n  DAT_00127a00 = FUN_00113f20();\n  DAT_001279f8 = FUN_00113f20();\n  DAT_001279f0 = FUN_00113f20();\n  DAT_001278f0 = htab_create_alloc(0x10,FUN_00108800,FUN_00108898);\n  DAT_001278e8 = FUN_00113f20();\n  puVar6 = PTR_DAT_001264e0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = FUN_0011a390;\n  }\n  if (0x1f < *(int *)(PTR_DAT_001264e0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    PTR_DAT_001264e0 = (undefined *)puVar20;\n  }\n  puVar6 = PTR_DAT_001264e0;\n  iVar11 = *(int *)(PTR_DAT_001264e0 + 8);\n  *(int *)(PTR_DAT_001264e0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = FUN_001054af;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (_DAT_001264c0 != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",\n                           &PTR_s_disable_deterministic_archives_00126500);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        _DAT_001264b0 = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        FUN_00108a2a(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a28,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        DAT_00127a20 = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a18,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        FUN_00114c20(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        DAT_00127a48 = 2;\n        break;\n      case 0x55:\n        _DAT_001264b0 = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        DAT_00127a44 = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        DAT_001279eb = 1;\n        break;\n      case 0x73:\n        DAT_00127a48 = 7;\n        break;\n      case 0x76:\n        DAT_001279e9 = 1;\n        break;\n      case 0x77:\n        DAT_001279ea = 1;\n        break;\n      case 0x78:\n        DAT_00127a44 = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        DAT_00127a38 = 1;\n        break;\n      case 0xb3:\n        FUN_00114190(_optarg,1,4);\n        break;\n      case 0xb5:\n        DAT_00127959 = 1;\n        break;\n      case 0xba:\n        DAT_00127a20 = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        DAT_00127a48 = 4;\n        break;\n      case 0xc6:\n        FUN_00114190(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        DAT_00127a48 = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (DAT_00127a48 < 8)) &&\n           ((-0xdaL >> ((byte)DAT_00127a48 & 0x3f) & 1U) == 0)) {\n          DAT_00127a20 = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          FUN_00119970(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (_DAT_001264b0 < 0) {\n          _DAT_001264b0 = 1;\n        }\n        if (((DAT_00127a48 | DAT_00127a44) == 0) &&\n           (lVar30 = htab_elements(DAT_00127a18), lVar30 == 0)) {\n          DAT_00127a48 = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        FUN_00108a2a(_stderr,1);\n        unaff_R13 = (char *)&PTR_s_disable_deterministic_archives_00126500;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",\n                       &PTR_s_add_gnu_debuglink_00126900);\n  pFVar14 = _optarg;\n  uVar10 = DAT_00127908;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    FUN_001199d0();\n    return DAT_00127a40;\n  }\n  if ((char)local_110 != '\\0') {\n    FUN_00119970(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((DAT_00127a3c != 0) && (DAT_001264bc == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (DAT_00127a3c <= DAT_001264bc) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (DAT_00127a3c - DAT_001264bc < DAT_001264b8) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (_DAT_001264b0 < 0) {\n    _DAT_001264b0 = 1;\n  }\n  if ((DAT_00127a48 | DAT_00127a44) == 0) {\n    DAT_00127a48 = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = FUN_00113fb0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = FUN_00108c86(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = FUN_00113fb0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = FUN_00108c86(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (DAT_00126474 == -1) {\n        DAT_00126474 = (short)iVar11;\n      }\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)FUN_00114cf0(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  FUN_00114690(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (DAT_00127a40 == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = FUN_00115970(__template,pcVar32,pcVar26,local_c8,DAT_001279eb);\n    DAT_00127a40 = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = DAT_00127900;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          FUN_00119ed0(uVar22,\"--change-section-vma\",uVar3,\n                       (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          FUN_00119ed0(uVar22,\"--change-section-lma\",uVar3,\n                       (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(DAT_00127970);\n  free(DAT_00127968);\n  free(DAT_00127960);\n  free(DAT_00127950);\n  free(DAT_00127948);\n  free(DAT_00127940);\n  free(DAT_00127938);\n  return DAT_00127a40;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = DAT_00127a40;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return DAT_00127a40;\n  }\n  lVar30 = FUN_00113f50(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    DAT_00127a40 = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)FUN_00114cf0(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        FUN_001126c0(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    DAT_00127a40 = 0;\n    FUN_00114690(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (DAT_00127a40 == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = FUN_00115970(pFVar21,pFVar33,iVar13,local_c8,DAT_001279eb);\n      DAT_00127a40 = uVar10;\n      if (iVar11 != 0) {\n        DAT_00127a40 = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  DAT_00127a48 = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        FUN_00108d9a(pFVar14,unaff_R13,\n                     (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      FUN_00119dd0(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    FUN_00108d9a(pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13))\n    ;\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = FUN_00113fe0(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)DAT_001278f8;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    FUN_00108916(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          FUN_00119dd0(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)DAT_001278f8;\n    DAT_001278f8 = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    _DAT_001264b0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    FUN_00108916(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a28,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    DAT_00127a20 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a18,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    FUN_00114c20(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    DAT_00127a48 = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    _DAT_001264b0 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    DAT_00127a44 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264bc = (int)lVar30;\n    if (DAT_001264bc < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    DAT_00127a48 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      DAT_00127a3c = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      DAT_00127a3c = (int)lVar30;\n      if (DAT_00127a3c < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    FUN_00114190(_optarg,1,2);\n    DAT_00127a39 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    DAT_001279eb = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    DAT_001279e9 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    DAT_001279ea = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    DAT_00127a44 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    DAT_001279e0 = FUN_00114c80(_optarg,DAT_001279e0,\"--add-section\");\n    FUN_00114d60(DAT_001279e0);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    DAT_001264b4 = 1;\n    DAT_00127a30 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = FUN_0011a480(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = FUN_0011a480(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            FUN_00119ed0(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            FUN_00119dd0(uVar24,\n                         \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                        );\n          }\n          uVar24 = FUN_0011a480(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = DAT_001279c8;\n        bVar39 = DAT_001279c8 == (undefined8 *)0x0;\n        DAT_001279c8 = puVar20;\n        if (bVar39) {\n          PTR_DAT_001275c0 = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)PTR_DAT_001275c0 = puVar20;\n    PTR_DAT_001275c0 = (undefined *)puVar20;\nLAB_00117e65:\n    DAT_001279c0 = DAT_001279c0 + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    DAT_00127930 = strtoul((char *)_optarg,(char **)0x0,0);\n    if (DAT_00127930 == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    _DAT_001279b0 = FUN_00119940(_optarg,\"--change-addresses\");\n    DAT_001279b8 = _DAT_001279b0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    DAT_001279a8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = FUN_00114190(pcVar32,1,uVar12);\n    lVar17 = FUN_00119940((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    DAT_001279b8 = FUN_00119940(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      DAT_001279a4 = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    DAT_001279a0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    DAT_001279a4 = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    DAT_001279d0 = FUN_00114c80(_optarg,DAT_001279d0,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      DAT_0012799c = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      DAT_0012799c = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    DAT_00127a48 = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    DAT_0012790c = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    DAT_001264a8 = FUN_00119940(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)FUN_00119940(_optarg,\"--gap-fill\");\n    DAT_00127999 = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      FUN_00119ed0(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    DAT_00127998 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a00,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    FUN_00114460(_optarg,DAT_00127a00,&DAT_00127948);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    DAT_001264a0 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126498 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          FUN_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    FUN_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    DAT_00126490 = FUN_00119940(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    DAT_00127910 = DAT_00127910 | 0x100;\n    DAT_00127914 = DAT_00127914 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264b8 = (int)lVar30;\n    if (DAT_001264b8 < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    FUN_00114460(_optarg,DAT_001279f8,&DAT_00127940);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    DAT_00127a38 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    FUN_00114190(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    FUN_00114460(_optarg,DAT_00127a28,&DAT_00127960);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    DAT_00127959 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    DAT_00127958 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    FUN_00114460(_optarg,DAT_00127a08,&DAT_00127950);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    DAT_00127a20 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    DAT_00127a48 = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    DAT_00127990 = FUN_00119940(_optarg,\"--pad-to\");\n    DAT_00127989 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    DAT_00127918 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    DAT_00127920 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    DAT_00127928 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    DAT_00127914 = DAT_00127914 | 0x100;\n    DAT_00127910 = DAT_00127910 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    DAT_00127914 = DAT_00127914 | 0x80;\n    DAT_00127910 = DAT_00127910 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    FUN_00108d9a(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      FUN_00119dd0(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    DAT_00127988 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    FUN_00114190(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)DAT_00127908;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_00127908 = (uint)uVar27;\n    if (((int)DAT_00127908 < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != DAT_00127908) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      FUN_00119ed0(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    DAT_00126488 = FUN_00119940(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)FUN_00114190(pcVar32,1,0x80);\n    uVar12 = FUN_00113fe0((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = FUN_00114190(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    _DAT_00127980 = FUN_00119940(_optarg,\"--set-start\");\n    DAT_00127978 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = FUN_00119940(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    DAT_00126480 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126478 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          FUN_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    FUN_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    DAT_00127a48 = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    FUN_00114460(_optarg,DAT_00127a18,&DAT_00127970);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    DAT_00127a48 = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a10,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    FUN_00114460(_optarg,DAT_00127a10,&DAT_00127968);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      DAT_00126472 = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        DAT_00126470 = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        FUN_00119ed0(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      DAT_00126474 = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&PTR_s_native_00125ca0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0 + (long)unaff_R13 * 2;\n      DAT_00126474 = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      FUN_00119dd0(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    DAT_001279d8 = FUN_00114c80(_optarg,DAT_001279d8,\"--update-section\");\n    FUN_00114d60(DAT_001279d8);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = FUN_00119940(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    DAT_001279e8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    FUN_00114460(_optarg,DAT_001279f0,&DAT_00127938);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    DAT_00127910 = DAT_00127910 | 0x80;\n    DAT_00127914 = DAT_00127914 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  FUN_00119dd0(uVar24,pFVar14);\n}\n\n",
            "current_name": "FUNC_00116b90",
            "entrypoint": "0x00116b90",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00119940": {
            "additional_data": {
                "*local_20[0]": {
                    "1": "result"
                },
                "FUN_00119940": {
                    "1": "process_vma",
                    "2": "validate_and_display_number",
                    "3": "check_and_print_bad_number",
                    "4": "check_and_print_error_message"
                },
                "local_20": {
                    "1": "vma_result",
                    "12": "scan_result",
                    "2": "scanned_value",
                    "3": "scan_results",
                    "4": "buffer"
                },
                "param_1": {
                    "1": "memory_address",
                    "2": "input",
                    "3": "vma_address",
                    "5": "input_value",
                    "6": "input_param"
                },
                "param_2": {
                    "1": "file_name",
                    "14": "error_message",
                    "6": "output_param",
                    "7": "message"
                },
                "uVar1": {
                    "1": "localized_error_message",
                    "2": "error_string",
                    "3": "translated_error_message",
                    "4": "translated_message",
                    "5": "error_message"
                }
            },
            "called": [
                "FUN_00104920",
                "bfd_scan_vma"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid check_and_print_error_message_00119940(undefined8 input_param,undefined8 error_message)\n\n{\n  undefined8 error_message;\n  char *scan_result [2];\n  \n  bfd_scan_vma(input_param,scan_result,0);\n  if (*scan_result[0] == '\\0') {\n    return;\n  }\n  error_message = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  FUN_00119dd0(error_message,error_message,input_param);\n}\n\n",
            "current_name": "check_and_print_error_message_00119940",
            "entrypoint": "0x00119940",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119940": "check_and_print_error_message_00119940",
                "local_20": "scan_result",
                "param_1": "input_param",
                "param_2": "error_message",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119970": {
            "additional_data": {
                "FUN_00119970": {
                    "1": "print_gnu_version",
                    "19": "print_version_info",
                    "3": "print_version_information"
                },
                "param_1": {
                    "1": "tool_name",
                    "11": "version",
                    "2": "package_name",
                    "6": "version_string",
                    "8": "program_name"
                },
                "pcVar1": {
                    "1": "copyright",
                    "2": "license_text",
                    "3": "copyright_msg",
                    "4": "copyright_string",
                    "7": "copyright_message"
                }
            },
            "called": [
                "printf",
                "dcgettext",
                "exit"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid print_version_info_00119970(undefined8 version)\n\n{\n  char *copyright_message;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  copyright_message = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyright_message);\n  copyright_message = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyright_message);\n                    \n  exit(0);\n}\n\n",
            "current_name": "print_version_info_00119970",
            "entrypoint": "0x00119970",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119970": "print_version_info_00119970",
                "param_1": "version",
                "pcVar1": "copyright_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001199d0": {
            "additional_data": {
                "*_stderr": {
                    "1": "stderr"
                },
                "*_stdout": {
                    "1": "stdout"
                },
                "COLUMNS": {
                    "1": "columns"
                },
                "DAT_0011b39a": {
                    "1": "fallback_tmp_dir"
                },
                "DAT_0011b4a1": {
                    "1": "dash_line"
                },
                "DAT_00120324": {
                    "1": "default_temp"
                },
                "DAT_001278e0": {
                    "1": "temp_file_path",
                    "2": "temporary_directory"
                },
                "FNI_00104943": {
                    "1": "print_unknown"
                },
                "FNI_0011283f": {
                    "1": "get_temporary_path"
                },
                "FNI_00119f70": {
                    "1": "iterate_over_targets"
                },
                "FUNC_0011283f": {
                    "1": "get_full_path"
                },
                "FUNC_00119f70": {
                    "1": "iterate_over_targets"
                },
                "FUN_0011283f": {
                    "1": "get_concatenated_path"
                },
                "FUN_001199d0": {
                    "1": "print_bfd_header_version",
                    "2": "print_formatted_architectures",
                    "3": "print_supported_architectures",
                    "5": "print_bfd_header_info"
                },
                "FUN_00119f70": {
                    "1": "iterate_over_targets"
                },
                "FunnyFunctionName": {
                    "1": "better_function_name"
                },
                "PC": {
                    "1": "format_string"
                },
                "__errno_location": {
                    "1": "get_error_number_addr",
                    "2": "get_errno_location"
                },
                "__stderrp": {
                    "1": "error_stream"
                },
                "_stderr": {
                    "1": "stderr"
                },
                "_stdout": {
                    "1": "stdout"
                },
                "abort": {
                    "1": "abort_program",
                    "3": "abort_execution"
                },
                "bfd_iterate_over_targets": {
                    "1": "iterate_over_targets"
                },
                "bfd_printable_arch_mach": {
                    "1": "get_printable_architecture_machine",
                    "4": "get_printable_arch_mach"
                },
                "close": {
                    "5": "close_file"
                },
                "dcgettext": {
                    "1": "get_localized_header",
                    "2": "gettext"
                },
                "fprintf": {
                    "1": "print_error_message"
                },
                "free": {
                    "2": "free_memory"
                },
                "getenv": {
                    "1": "get_environment_var",
                    "4": "get_environment_variable"
                },
                "iVar1": {
                    "1": "max_display_columns",
                    "2": "terminal_columns",
                    "3": "columns",
                    "4": "num_columns",
                    "5": "column_width"
                },
                "iVar11": {
                    "1": "error_result"
                },
                "iVar2": {
                    "1": "iteration_index",
                    "3": "file_descriptor",
                    "4": "arch_index",
                    "6": "arch_mach_index"
                },
                "iVar3": {
                    "1": "arch_index",
                    "3": "strcmp_result"
                },
                "iVar9": {
                    "1": "counter",
                    "2": "file_descriptor",
                    "3": "loop_index",
                    "6": "arch_index"
                },
                "lVar10": {
                    "1": "loop_var_1",
                    "2": "header_length",
                    "3": "temp_dir_len"
                },
                "lVar11": {
                    "1": "length_2",
                    "3": "index",
                    "4": "arch_index"
                },
                "local_70": {
                    "1": "counter",
                    "2": "tmp_file_descriptor",
                    "3": "index",
                    "6": "arch_index"
                },
                "mkstemps": {
                    "1": "make_temporary_file",
                    "2": "create_temporary_file"
                },
                "pcVar4": {
                    "1": "header_file_message",
                    "2": "header_format",
                    "3": "header_msg",
                    "4": "header_file_version",
                    "5": "header_version",
                    "7": "header_message"
                },
                "pcVar6": {
                    "1": "temporary_path",
                    "3": "temporary_directory",
                    "4": "temp_directory",
                    "5": "temp_file_path",
                    "8": "temp_dir"
                },
                "piVar8": {
                    "1": "error_num",
                    "11": "error_number",
                    "2": "error",
                    "4": "errno_location",
                    "5": "error_code"
                },
                "ppcVar12": {
                    "1": "current_arch",
                    "11": "arch_mach_array",
                    "2": "arch_mach",
                    "3": "arch_mach_ptr"
                },
                "printf": {
                    "1": "print",
                    "3": "print_formatted"
                },
                "sVar5": {
                    "1": "header_message_len",
                    "2": "length",
                    "3": "header_version_length",
                    "4": "header_length"
                },
                "strcpy": {
                    "5": "copy_string"
                },
                "strerror": {
                    "1": "get_error_message",
                    "4": "get_error_string"
                },
                "strlen": {
                    "5": "get_string_length"
                },
                "uVar13": {
                    "1": "longest_arch_mach_length",
                    "2": "max_arch_string_length",
                    "3": "max_arch_mach_len",
                    "4": "max_length",
                    "9": "max_arch_mach_length"
                },
                "uVar14": {
                    "1": "string_index",
                    "2": "str_length",
                    "3": "string_length",
                    "6": "arch_mach_length"
                },
                "uVar7": {
                    "1": "concatenated_file_path",
                    "13": "result",
                    "3": "temp_path"
                },
                "unlink": {
                    "1": "remove_file",
                    "4": "delete_file"
                },
                "xmalloc": {
                    "4": "allocate_memory"
                }
            },
            "called": [
                "FUN_0011283f",
                "close",
                "printf",
                "xmalloc",
                "unlink",
                "FUN_00119f70",
                "__errno_location",
                "dcgettext",
                "getenv",
                "bfd_printable_arch_mach",
                "abort",
                "free",
                "bfd_iterate_over_targets",
                "strlen",
                "strerror",
                "strcpy",
                "FUN_00104943",
                "fprintf",
                "mkstemps"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nvoid print_bfd_header_info_001199d0(void)\n\n{\n  int column_width;\n  int arch_mach_index;\n  int strcmp_result;\n  char *header_message;\n  size_t header_message_length;\n  char *temp_dir;\n  undefined8 result;\n  int *error_number;\n  int arch_index;\n  long temp_dir_len;\n  long arch_index;\n  char **arch_mach_array;\n  uint max_arch_mach_length;\n  ulong arch_mach_length;\n  int arch_index;\n  \n  header_message = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(header_message,\"(GNU Binutils for Debian) 2.40\");\n  if (DAT_001278e0 == (char *)0x0) {\n    header_message = getenv(\"TMPDIR\");\n    result = FUN_0011283f(header_message,0);\n    header_message = getenv(\"TMP\");\n    result = FUN_0011283f(header_message,result);\n    header_message = getenv(\"TEMP\");\n    result = FUN_0011283f(header_message,result);\n    result = FUN_0011283f(&DAT_0011b39a,result);\n    result = FUN_0011283f(\"/var/tmp\",result);\n    header_message = (char *)FUN_0011283f(&DAT_00120324,result);\n    if (header_message == (char *)0x0) {\n      header_message = \".\";\n    }\n    header_message_length = strlen(header_message);\n    temp_dir = (char *)xmalloc((int)header_message_length + 2);\n    DAT_001278e0 = strcpy(temp_dir,header_message);\n    DAT_001278e0[header_message_length & 0xffffffff] = '/';\n    DAT_001278e0[(int)header_message_length + 1] = '\\0';\n  }\n  header_message = DAT_001278e0;\n  header_message_length = strlen(DAT_001278e0);\n  temp_dir_len = (long)(int)header_message_length;\n  temp_dir = (char *)xmalloc(temp_dir_len + 9);\n  strcpy(temp_dir,header_message);\n  *(undefined2 *)(temp_dir + temp_dir_len) = 0x6363;\n  *(undefined4 *)(temp_dir + temp_dir_len + 2) = 0x58585858;\n  *(undefined4 *)((long)(temp_dir + temp_dir_len + 2) + 3) = 0x585858;\n  temp_dir[temp_dir_len + 8] = '\\0';\n  arch_mach_index = mkstemps(temp_dir,0);\n  if (arch_mach_index == -1) {\n    error_number = __errno_location();\n    temp_dir = strerror(*error_number);\n    fprintf(error_stream,\"Cannot create temporary file in %s: %s\\n\",header_message,temp_dir);\n                    \n    abort_execution();\n  }\n  arch_mach_index = close_file(arch_mach_index);\n  if (arch_mach_index != 0) {\n                    \n    abort_execution();\n  }\n  max_arch_mach_length = 0;\n  arch_mach_index = 2;\n  bfd_iterate_over_targets(FUN_00119f70);\n  unlink(temp_dir);\n  free(temp_dir);\n  arch_index = 0;\n  do {\n    header_message = (char *)bfd_printable_arch_mach(arch_mach_index);\n    header_message_length = strlen(header_message);\n    if ((int)max_arch_mach_length < (int)(uint)header_message_length) {\n      max_arch_mach_length = (uint)header_message_length;\n    }\n    arch_mach_index = arch_mach_index + 1;\n  } while (arch_mach_index != 0x57);\n  header_message = getenv(\"columns\");\n  arch_mach_index = arch_index;\n  if (header_message != (char *)0x0) {\n    temp_dir_len = strtol(header_message,(char **)0x0,10);\n    column_width = (int)temp_dir_len;\n    if (column_width != 0) goto LAB_00119b11;\n  }\n  column_width = 0x50;\nLAB_00119b11:\n  do {\n    arch_index = arch_mach_index;\n    if (-1 < arch_index) {\n      return;\n    }\n    arch_index = (long)arch_index;\n    arch_index = (column_width - max_arch_mach_length) + -1;\n    temp_dir_len = arch_index;\n    do {\n      arch_mach_index = (int)temp_dir_len;\n      if (-1 < arch_mach_index) break;\n      header_message_length = strlen(*(char **)(temp_dir_len * 0x60));\n      temp_dir_len = temp_dir_len + 1;\n      arch_index = (arch_index - (int)header_message_length) + -1;\n    } while (-1 < arch_index);\n    printf(\"\\n%*s\",(ulong)(max_arch_mach_length + 1),&DAT_0011b4a1);\n    for (arch_mach_array = (char **)(arch_index * 0x60);\n        ((ulong)(uint)(arch_mach_index - arch_index) + arch_index) * 0x60 - (long)arch_mach_array != 0;\n        arch_mach_array = arch_mach_array + 0xc) {\n      printf(\"%s \",*arch_mach_array);\n    }\n    arch_index = 2;\n    putc(10,standard_output);\n    do {\n      header_message = (char *)bfd_printable_arch_mach(arch_index,0);\n      strcmp_result = strcmp(header_message,\"UNKNOWN!\");\n      if (strcmp_result != 0) {\n        result = bfd_printable_arch_mach(arch_index,0);\n        printf(\"%*s \",(ulong)max_arch_mach_length,result);\n        arch_mach_array = (char **)(arch_index * 0x60);\n        strcmp_result = arch_index;\n        while (arch_mach_index != strcmp_result) {\n          if (*(char *)((long)arch_mach_array + (ulong)(arch_index - 2) + 8) == '\\0') {\n            header_message_length = strlen(*arch_mach_array);\n            for (arch_mach_length = header_message_length & 0xffffffff; (int)arch_mach_length != 0; arch_mach_length = (ulong)((int)arch_mach_length - 1)) {\n              putc(0x2d,standard_output);\n            }\n          }\n          else {\n            fputs(*arch_mach_array,standard_output);\n          }\n          strcmp_result = strcmp_result + 1;\n          if (arch_mach_index != strcmp_result) {\n            putc(0x20,standard_output);\n          }\n          arch_mach_array = arch_mach_array + 0xc;\n        }\n        putc(10,standard_output);\n      }\n      arch_index = arch_index + 1;\n    } while (arch_index != 0x57);\n  } while( true );\n}\n\n",
            "current_name": "print_bfd_header_info_001199d0",
            "entrypoint": "0x001199d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "COLUMNS": "columns",
                "FUN_001199d0": "print_bfd_header_info_001199d0",
                "__errno_location": "get_error_code_location",
                "_stderr": "error_stream",
                "_stdout": "standard_output",
                "abort": "abort_execution",
                "bfd_iterate_over_targets": "iterate_over_targets",
                "bfd_printable_arch_mach": "get_printable_arch_mach",
                "close": "close_file",
                "dcgettext": "gettext",
                "fprintf": "print_formatted_error",
                "free": "deallocate_memory",
                "getenv": "get_environment_variable",
                "iVar1": "column_width",
                "iVar2": "arch_mach_index",
                "iVar3": "strcmp_result",
                "iVar9": "arch_index",
                "lVar10": "temp_dir_len",
                "lVar11": "arch_index",
                "local_70": "arch_index",
                "mkstemps": "create_temporary_file",
                "pcVar4": "header_message",
                "pcVar6": "temp_dir",
                "piVar8": "error_number",
                "ppcVar12": "arch_mach_array",
                "printf": "print_formatted",
                "sVar5": "header_message_length",
                "strcpy": "copy_string",
                "strerror": "get_error_string",
                "strlen": "get_string_length",
                "uVar13": "max_arch_mach_length",
                "uVar14": "arch_mach_length",
                "uVar7": "result",
                "unlink": "delete_file",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119dd0": {
            "additional_data": {
                "FUN_00119dd0": {
                    "1": "execute_and_exit",
                    "2": "extract_and_exit",
                    "3": "process_data",
                    "7": "reverse_and_exit"
                },
                "FUN_00119e70": {
                    "1": "process_sub_function",
                    "6": "process_data"
                },
                "in_AL": {
                    "1": "input",
                    "2": "condition_check",
                    "3": "input_flag",
                    "4": "condition",
                    "8": "flag"
                },
                "local_18": {
                    "1": "parameter_8_copy",
                    "2": "local_input8",
                    "4": "input8_copy"
                },
                "local_28": {
                    "1": "var7_copy",
                    "2": "input_7_copy",
                    "4": "input7_copy"
                },
                "local_38": {
                    "1": "local_arg6",
                    "2": "local_input6",
                    "4": "input6_copy"
                },
                "local_48": {
                    "1": "condition5",
                    "2": "local_input5",
                    "4": "input5_copy"
                },
                "local_58": {
                    "1": "local_input_4",
                    "2": "local_input4",
                    "4": "input4_copy"
                },
                "local_68": {
                    "1": "local_var_3",
                    "2": "input_3_copy",
                    "4": "input3_copy"
                },
                "local_78": {
                    "1": "value7",
                    "2": "local_input2",
                    "4": "input2_copy"
                },
                "local_88": {
                    "1": "input_param1_copy",
                    "2": "input_1_copy",
                    "4": "input1_copy"
                },
                "local_90": {
                    "1": "temp_data6",
                    "2": "param6",
                    "5": "param_14_copy"
                },
                "local_98": {
                    "1": "val_4",
                    "2": "param5",
                    "5": "param_13_copy"
                },
                "local_a0": {
                    "1": "param_d",
                    "2": "param4",
                    "5": "param_12_copy"
                },
                "local_a8": {
                    "1": "buffer_param11",
                    "2": "param3",
                    "5": "param_11_copy"
                },
                "local_b0": {
                    "1": "param1_ptr",
                    "2": "param2",
                    "5": "param_10_copy"
                },
                "local_b8": {
                    "1": "temporary_buffer",
                    "3": "buffer",
                    "5": "temp_buffer",
                    "6": "local_array"
                },
                "local_c8": {
                    "1": "pointer_c8",
                    "15": "local_buffer",
                    "2": "pointer_2",
                    "4": "buffer"
                },
                "local_d0": {
                    "1": "stack_pointer",
                    "11": "buffer",
                    "2": "local_ptr",
                    "3": "buffer_ptr"
                },
                "local_d4": {
                    "1": "string_length",
                    "2": "value",
                    "5": "size"
                },
                "local_d8": {
                    "1": "size1",
                    "2": "local_size",
                    "4": "length",
                    "5": "count",
                    "6": "size",
                    "9": "buffer_size"
                },
                "param_1": {
                    "1": "reverse_param1",
                    "2": "function_param_1",
                    "4": "input_1",
                    "9": "input1"
                },
                "param_10": {
                    "1": "val2",
                    "2": "param_b",
                    "3": "param10",
                    "4": "param2",
                    "6": "param_10"
                },
                "param_11": {
                    "1": "data_param3",
                    "2": "param_c",
                    "3": "param11",
                    "4": "param3",
                    "6": "param_11"
                },
                "param_12": {
                    "1": "val4",
                    "2": "param_d",
                    "3": "data4",
                    "4": "param4",
                    "6": "param_12"
                },
                "param_13": {
                    "1": "input_param13",
                    "2": "param_e",
                    "3": "param13",
                    "4": "param5",
                    "6": "param_13"
                },
                "param_14": {
                    "1": "input_param_14",
                    "2": "param_f",
                    "3": "data6",
                    "4": "param6",
                    "6": "param_14"
                },
                "param_2": {
                    "1": "var2",
                    "2": "function_param_2",
                    "4": "input_param2",
                    "9": "input2"
                },
                "param_3": {
                    "1": "param3",
                    "10": "input3",
                    "2": "arg3",
                    "4": "input_3",
                    "5": "input_param3"
                },
                "param_4": {
                    "1": "input_param3",
                    "10": "input4",
                    "2": "arg4",
                    "4": "input_4",
                    "5": "input_param4"
                },
                "param_5": {
                    "1": "value_5",
                    "10": "input5",
                    "2": "arg5",
                    "4": "input_5",
                    "5": "input_param5"
                },
                "param_6": {
                    "1": "input_param_6",
                    "10": "input6",
                    "2": "function_param_6",
                    "4": "input_6",
                    "5": "input_param6"
                },
                "param_7": {
                    "1": "param7",
                    "10": "input7",
                    "2": "function_param_7",
                    "4": "input_7",
                    "5": "input_param7"
                },
                "param_8": {
                    "1": "input_param_8",
                    "10": "input8",
                    "2": "parameter_8",
                    "4": "input_8",
                    "5": "input_param8"
                },
                "param_9": {
                    "1": "data_param1",
                    "2": "var1",
                    "3": "data1",
                    "4": "param1",
                    "6": "param_9"
                },
                "xexit": {
                    "1": "exit_function",
                    "8": "exit_program"
                }
            },
            "called": [
                "FUN_00119e70",
                "xexit"
            ],
            "calling": [
                "FUN_00104920",
                "FUN_00114690",
                "FUN_00114460",
                "FUN_00104ad6",
                "FUN_0010da0b",
                "FUN_00116b90",
                "FUN_00108808",
                "FUN_001083de",
                "FUN_0010827b",
                "FUN_00114190",
                "FUN_00108d9a",
                "FUN_0010543c",
                "FUN_00114dc7",
                "FUN_001053b5",
                "FUN_0010554f",
                "FUN_00115b70"
            ],
            "code": "\nvoid reverse_and_exit_00119dd0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param_9,undefined8 input10,undefined8 input11,undefined8 input12,\n                 undefined8 input13,undefined8 input14)\n\n{\n  char flag;\n  undefined4 buffer_size;\n  undefined4 size;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_array [8];\n  undefined8 param_10_copy;\n  undefined8 param_11_copy;\n  undefined8 param_12_copy;\n  undefined8 param_13_copy;\n  undefined8 param_14_copy;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  undefined4 input5_copy;\n  undefined4 input6_copy;\n  undefined4 input7_copy;\n  undefined4 input8_copy;\n  \n  if (flag != '\\0') {\n    input1_copy = input1;\n    input2_copy = input2;\n    input3_copy = input3;\n    input4_copy = input4;\n    input5_copy = input5;\n    input6_copy = input6;\n    input7_copy = input7;\n    input8_copy = input8;\n  }\n  buffer = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer = local_array;\n  size = 0x30;\n  param_10_copy = input10;\n  param_11_copy = input11;\n  param_12_copy = input12;\n  param_13_copy = input13;\n  param_14_copy = input14;\n  FUN_00119e70(param_9,&buffer_size);\n                    \n  xexit(1);\n}\n\n",
            "current_name": "reverse_and_exit_00119dd0",
            "entrypoint": "0x00119dd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119dd0": "reverse_and_exit_00119dd0",
                "in_AL": "flag",
                "local_18": "input8_copy",
                "local_28": "input7_copy",
                "local_38": "input6_copy",
                "local_48": "input5_copy",
                "local_58": "input4_copy",
                "local_68": "input3_copy",
                "local_78": "input2_copy",
                "local_88": "input1_copy",
                "local_90": "param_14_copy",
                "local_98": "param_13_copy",
                "local_a0": "param_12_copy",
                "local_a8": "param_11_copy",
                "local_b0": "param_10_copy",
                "local_b8": "local_array",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "size",
                "local_d8": "buffer_size",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119e70": {
            "additional_data": {
                "DAT_00127600": {
                    "1": "error_message_constant",
                    "2": "error_prefix"
                },
                "FILE": {
                    "1": "file"
                },
                "FUN_00119e70": {
                    "1": "print_message_with_format",
                    "24": "print_error_message",
                    "3": "print_formatted_message"
                },
                "__arg": {
                    "1": "args",
                    "2": "argument_list",
                    "9": "arguments"
                },
                "__c": {
                    "8": "character"
                },
                "__format": {
                    "1": "error_format_string",
                    "5": "format",
                    "8": "format_string"
                },
                "__gnuc_va_list": {
                    "1": "variable_argument_list",
                    "2": "arguments"
                },
                "__s": {
                    "1": "file_stream",
                    "2": "file",
                    "3": "output_file",
                    "5": "stream"
                },
                "__stream": {
                    "1": "file_stream",
                    "2": "output_stream",
                    "4": "stream"
                },
                "_stderr": {
                    "1": "error_stream",
                    "2": "stderr",
                    "8": "standard_error"
                },
                "_stdout": {
                    "1": "stdout_file",
                    "2": "stdout",
                    "7": "standard_output"
                },
                "fflush": {
                    "1": "flush_buffer",
                    "4": "flush_output"
                },
                "fprintf": {
                    "1": "print_string"
                },
                "param_1": {
                    "11": "error_message",
                    "17": "message",
                    "3": "format_string"
                },
                "param_2": {
                    "1": "variable_arguments_list",
                    "11": "arguments",
                    "13": "args",
                    "3": "format_arguments"
                },
                "putc": {
                    "1": "put_character",
                    "2": "write_character"
                },
                "vfprintf": {
                    "1": "write_to_error_stream_with_args",
                    "2": "format_and_print"
                }
            },
            "called": [
                "vfprintf",
                "fflush",
                "putc",
                "fprintf"
            ],
            "calling": [
                "FUN_00119dd0",
                "FUN_00119ed0"
            ],
            "code": "\n\n\nvoid print_error_message_00119e70(char *message,arguments args)\n\n{\n  fflush(standard_output);\n  fprintf(standard_error,\"%s: \",DAT_00127600);\n  vfprintf(standard_error,message,args);\n  putc(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_error_message_00119e70",
            "entrypoint": "0x00119e70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "__gnuc_va_list": "arguments",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "fflush": "flush_output",
                "fprintf": "write_to_error_stream",
                "param_1": "message",
                "param_2": "args",
                "putc": "write_character",
                "vfprintf": "format_and_print"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119ed0": {
            "additional_data": {
                "FUN_00119e70": {
                    "1": "helper_function",
                    "2": "process_sub_function",
                    "4": "process_data"
                },
                "FUN_00119ed0": {
                    "1": "extract_and_process_data",
                    "10": "process_data",
                    "2": "process_parameters"
                },
                "in_AL": {
                    "1": "is_nonzero",
                    "14": "flag",
                    "2": "condition_check",
                    "3": "condition_flag"
                },
                "local_18": {
                    "1": "extracted_param_8",
                    "2": "input_param_8",
                    "3": "input8_copy"
                },
                "local_28": {
                    "1": "local_param7",
                    "2": "input_param7_copy",
                    "3": "input7_copy"
                },
                "local_38": {
                    "1": "param_6_copy",
                    "2": "input_param6_copy",
                    "3": "input6_copy"
                },
                "local_48": {
                    "1": "new_param_5",
                    "2": "input_param5_copy",
                    "3": "input5_copy"
                },
                "local_58": {
                    "1": "local_var_four",
                    "2": "input_param4_copy",
                    "3": "input4_copy"
                },
                "local_68": {
                    "1": "local_var_3",
                    "2": "input_param3_copy",
                    "3": "input3_copy"
                },
                "local_78": {
                    "1": "input2",
                    "2": "input_param2_copy",
                    "3": "input2_copy"
                },
                "local_88": {
                    "1": "input1",
                    "2": "local_param_1",
                    "3": "input1_copy"
                },
                "local_90": {
                    "1": "pointer_param_14",
                    "2": "arg5_copy",
                    "3": "param14",
                    "4": "param_14_copy"
                },
                "local_98": {
                    "1": "temp_param_13",
                    "2": "pointer_param_5",
                    "3": "param13",
                    "4": "param_13_copy"
                },
                "local_a0": {
                    "1": "param_d",
                    "2": "local_param_12",
                    "3": "param12",
                    "4": "param_12_copy"
                },
                "local_a8": {
                    "1": "pointer_param_11",
                    "2": "local_param_11",
                    "3": "param11",
                    "4": "param_11_copy"
                },
                "local_b0": {
                    "1": "var2",
                    "2": "local_param_10",
                    "3": "param10",
                    "4": "param_10_copy"
                },
                "local_b8": {
                    "1": "local_variable_array",
                    "3": "temp_buffer",
                    "4": "temporary_buffer",
                    "6": "local_buffer"
                },
                "local_c8": {
                    "1": "temp_array",
                    "12": "local_buffer",
                    "5": "buffer"
                },
                "local_d0": {
                    "1": "array_ptr",
                    "2": "data_ptr",
                    "3": "stack_pointer",
                    "4": "buffer",
                    "5": "buffer_ptr"
                },
                "local_d4": {
                    "1": "constant",
                    "2": "offset",
                    "3": "buffer_size",
                    "4": "length"
                },
                "local_d8": {
                    "1": "length_of_buffer",
                    "11": "size",
                    "2": "stack_size",
                    "3": "length",
                    "5": "buffer_size"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "input_param1",
                    "3": "input_1",
                    "8": "input1",
                    "9": "input_param_1"
                },
                "param_10": {
                    "1": "var2",
                    "2": "arg1",
                    "3": "param_10",
                    "5": "input_param_10"
                },
                "param_11": {
                    "1": "ptr2",
                    "2": "data3",
                    "3": "param_11",
                    "5": "input_param_11"
                },
                "param_12": {
                    "1": "param_d",
                    "2": "data4",
                    "3": "pointer_param_4",
                    "5": "input_param_12"
                },
                "param_13": {
                    "1": "param_d",
                    "2": "data5",
                    "3": "param_13",
                    "5": "input_param_13"
                },
                "param_14": {
                    "1": "param6",
                    "2": "data6",
                    "3": "pointer_param_6",
                    "5": "input_param_14"
                },
                "param_2": {
                    "1": "data_param_2",
                    "2": "input_param2",
                    "3": "input_2",
                    "8": "input2",
                    "9": "input_param_2"
                },
                "param_3": {
                    "1": "data_param_3",
                    "2": "input_param3",
                    "3": "input_3",
                    "9": "input3"
                },
                "param_4": {
                    "1": "data_param_4",
                    "2": "arg4",
                    "3": "input_4",
                    "9": "input4"
                },
                "param_5": {
                    "1": "value5",
                    "2": "arg5",
                    "3": "input_5",
                    "9": "input_param_5"
                },
                "param_6": {
                    "1": "data_6",
                    "2": "input_param6",
                    "3": "input_6",
                    "9": "input_param_6"
                },
                "param_7": {
                    "1": "value7",
                    "2": "input_param7",
                    "3": "input_7",
                    "9": "input7"
                },
                "param_8": {
                    "1": "input_value8",
                    "2": "input_param8",
                    "3": "input_8",
                    "9": "input_param_8"
                },
                "param_9": {
                    "1": "format_string",
                    "2": "data1",
                    "3": "data_ptr",
                    "5": "input_param_9"
                }
            },
            "called": [
                "FUN_00119e70"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00104966",
                "FUN_00105828",
                "FUN_001086af",
                "FUN_00114690",
                "FUN_00104cc1",
                "FUN_00108375",
                "FUN_0010e07c",
                "FUN_0010b800",
                "FUN_00104ad6",
                "FUN_0010dac0",
                "FUN_00116b90",
                "FUN_00108200",
                "FUN_0010ba08",
                "FUN_001152b6",
                "FUN_00113f50",
                "FUN_0010e2f0",
                "FUN_00114e50",
                "FUN_00107880",
                "FUN_0011378f",
                "FUN_0010554f",
                "FUN_001163d0",
                "FUN_0010e6a8",
                "FUN_0010882c"
            ],
            "code": "\nvoid process_data_00119ed0(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4,\n                 undefined4 input_param_5,undefined4 input_param_6,undefined4 input_param_7,undefined4 input_param_8,\n                 undefined8 input_param_9,undefined8 input_param_10,undefined8 input_param_11,undefined8 input_param_12,\n                 undefined8 input_param_13,undefined8 input_param_14)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 length;\n  undefined *buffer_ptr;\n  undefined *local_buffer;\n  undefined local_buffer [8];\n  undefined8 param_10_copy;\n  undefined8 param_11_copy;\n  undefined8 param_12_copy;\n  undefined8 param_13_copy;\n  undefined8 param_14_copy;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  undefined4 input5_copy;\n  undefined4 input6_copy;\n  undefined4 input7_copy;\n  undefined4 input8_copy;\n  \n  if (flag != '\\0') {\n    input1_copy = input_param_1;\n    input2_copy = input_param_2;\n    input3_copy = input_param_3;\n    input4_copy = input_param_4;\n    input5_copy = input_param_5;\n    input6_copy = input_param_6;\n    input7_copy = input_param_7;\n    input8_copy = input_param_8;\n  }\n  buffer_ptr = &stack0x00000008;\n  size = 8;\n  local_buffer = local_buffer;\n  length = 0x30;\n  param_10_copy = input_param_10;\n  param_11_copy = input_param_11;\n  param_12_copy = input_param_12;\n  param_13_copy = input_param_13;\n  param_14_copy = input_param_14;\n  FUN_00119e70(input_param_9,&size);\n  return;\n}\n\n",
            "current_name": "process_data_00119ed0",
            "entrypoint": "0x00119ed0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119ed0": "process_data_00119ed0",
                "in_AL": "flag",
                "local_18": "input8_copy",
                "local_28": "input7_copy",
                "local_38": "input6_copy",
                "local_48": "input5_copy",
                "local_58": "input4_copy",
                "local_68": "input3_copy",
                "local_78": "input2_copy",
                "local_88": "input1_copy",
                "local_90": "param_14_copy",
                "local_98": "param_13_copy",
                "local_a0": "param_12_copy",
                "local_a8": "param_11_copy",
                "local_b0": "param_10_copy",
                "local_b8": "local_buffer",
                "local_c8": "local_buffer",
                "local_d0": "buffer_ptr",
                "local_d4": "length",
                "local_d8": "size",
                "param_1": "input_param_1",
                "param_10": "input_param_10",
                "param_11": "input_param_11",
                "param_12": "input_param_12",
                "param_13": "input_param_13",
                "param_14": "input_param_14",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "param_5": "input_param_5",
                "param_6": "input_param_6",
                "param_7": "input_param_7",
                "param_8": "input_param_8",
                "param_9": "input_param_9"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119f70": {
            "additional_data": {
                "FUN_001053d5": {
                    "1": "close_all_done"
                },
                "FUN_00114e00": {
                    "1": "reverse_string"
                },
                "FUN_00119f70": {
                    "1": "process_binary_function",
                    "3": "process_binary_data"
                },
                "FUN_0011a110": {
                    "1": "unknown_function_2",
                    "2": "cleanup"
                },
                "F_UNDF_00119f70": {
                    "1": "analyze_header_and_data"
                },
                "__format": {
                    "1": "format_str",
                    "19": "format_string",
                    "3": "output_format",
                    "4": "print_format"
                },
                "bfd_close_all_done": {
                    "1": "close_all_bfd_files"
                },
                "bfd_get_error": {
                    "1": "get_error",
                    "5": "get_bfd_error"
                },
                "bfd_openw": {
                    "1": "open_bfd_file",
                    "2": "open_file"
                },
                "bfd_printable_arch_mach": {
                    "1": "get_printable_arch_mach"
                },
                "bfd_set_format": {
                    "1": "set_file_format",
                    "2": "set_bfd_format",
                    "3": "set_format"
                },
                "cVar2": {
                    "1": "format_status",
                    "2": "format_result",
                    "4": "status",
                    "7": "flag"
                },
                "dcgettext": {
                    "1": "get_text_in_language",
                    "2": "get_text"
                },
                "iVar3": {
                    "1": "architecture",
                    "10": "counter",
                    "2": "arch_mach",
                    "3": "format_index",
                    "7": "index"
                },
                "lVar6": {
                    "1": "buffer_length",
                    "10": "buffer_size",
                    "2": "size",
                    "5": "allocation_size",
                    "8": "allocated_size"
                },
                "lVar6: ": {
                    "1": "data_size"
                },
                "lVar8": {
                    "1": "realloc_ptr",
                    "2": "new_buffer",
                    "6": "allocated_memory"
                },
                "memset": {
                    "1": "zero_out_memory",
                    "3": "initialize_memory"
                },
                "param_1": {
                    "1": "input_header",
                    "11": "header_data",
                    "3": "header",
                    "4": "input_data",
                    "6": "headers"
                },
                "param_2": {
                    "1": "output_ptr",
                    "2": "output_file_data",
                    "4": "output_file",
                    "7": "data"
                },
                "printf": {
                    "1": "print_with_format"
                },
                "uVar1": {
                    "1": "header_count",
                    "2": "header",
                    "3": "header_length",
                    "4": "status",
                    "5": "header_size"
                },
                "uVar4": {
                    "1": "result1",
                    "2": "func_result_1",
                    "3": "header_string",
                    "5": "formatted_header",
                    "6": "header_format"
                },
                "uVar5": {
                    "1": "header_data",
                    "2": "data_info",
                    "3": "data_string",
                    "6": "formatted_data"
                },
                "uVar7": {
                    "1": "arch_mach_info",
                    "2": "temp_var",
                    "4": "arch_mach",
                    "5": "header"
                },
                "xrealloc": {
                    "1": "realloc_memory",
                    "2": "resize_buffer",
                    "3": "reallocate_memory"
                }
            },
            "called": [
                "bfd_close_all_done",
                "FUN_001053d5",
                "bfd_set_format",
                "printf",
                "FUN_0011a110",
                "dcgettext",
                "FUN_00114e00",
                "bfd_get_error",
                "xrealloc",
                "bfd_openw",
                "bfd_printable_arch_mach",
                "memset"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\nundefined4 process_binary_data_00119f70(undefined8 *header_data,undefined8 *output_data)\n\n{\n  undefined4 header_size;\n  char flag;\n  int counter;\n  undefined8 header_format;\n  undefined8 formatted_data;\n  char *format_string;\n  long buffer_size;\n  undefined8 header;\n  long realloc_result;\n  \n  counter = *(int *)((long)output_data + 0xc) + 1;\n  *(int *)((long)output_data + 0xc) = counter;\n  if ((ulong)output_data[2] < (ulong)((long)counter * 0x60)) {\n    buffer_size = 0x3000;\n    if (0x3f < counter) {\n      buffer_size = (long)counter * 0xc0;\n    }\n    realloc_result = xrealloc(output_data[3]);\n    output_data[3] = realloc_result;\n    memset((void *)(realloc_result + output_data[2]),0,buffer_size - output_data[2]);\n    output_data[2] = buffer_size;\n  }\n  header_size = *(undefined4 *)((long)header_data + 0xc);\n  *(undefined8 *)((long)*(int *)((long)output_data + 0xc) * 0x60 + output_data[3] + -0x60) = *header_data;\n  header_format = FUN_00114e00(header_size);\n  formatted_data = FUN_00114e00(*(undefined4 *)(header_data + 2));\n  header = *header_data;\n  format_string = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(format_string,header,formatted_data,header_format);\n  buffer_size = bfd_openw(*output_data,*header_data);\n  if (buffer_size == 0) {\n    FUN_0011a110(*output_data);\n    *(undefined4 *)(output_data + 1) = 1;\n  }\n  else {\n    counter = 2;\n    flag = bfd_set_format(buffer_size,1);\n    if (flag == '\\0') {\n      counter = bfd_get_error();\n      if (counter != 5) {\n        FUN_0011a110(*header_data);\n        *(undefined4 *)(output_data + 1) = 1;\n      }\n    }\n    else {\n      do {\n        flag = (**(code **)(*(long *)(buffer_size + 8) + 0x2a0))(buffer_size,counter,0);\n        if (flag != '\\0') {\n          header = bfd_printable_arch_mach(counter,0);\n          printf(\"  %s\\n\",header);\n          *(undefined *)\n           ((long)*(int *)((long)output_data + 0xc) * 0x60 + output_data[3] + -0x58 + (ulong)(counter - 2)) =\n               1;\n        }\n        counter = counter + 1;\n      } while (counter != 0x57);\n    }\n    bfd_close_all_done(buffer_size);\n  }\n  return *(undefined4 *)(output_data + 1);\n}\n\n",
            "current_name": "process_binary_data_00119f70",
            "entrypoint": "0x00119f70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119f70": "process_binary_data_00119f70",
                "__format": "format_string",
                "bfd_close_all_done": "close_all_bfd",
                "bfd_get_error": "get_bfd_error",
                "bfd_openw": "open_file",
                "bfd_printable_arch_mach": "get_architecture",
                "bfd_set_format": "set_format",
                "cVar2": "flag",
                "dcgettext": "get_text",
                "iVar3": "counter",
                "lVar6": "buffer_size",
                "lVar8": "realloc_result",
                "memset": "initialize_memory",
                "param_1": "header_data",
                "param_2": "output_data",
                "printf": "print_text",
                "uVar1": "header_size",
                "uVar4": "header_format",
                "uVar5": "formatted_data",
                "uVar7": "header",
                "xrealloc": "reallocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a0e0": {
            "additional_data": {
                "FUN_001081e9": {
                    "1": "undefined_function"
                },
                "FUN_00114cf0": {
                    "1": "get_temp_template",
                    "2": "generate_template"
                },
                "FUN_0011a0e0": {
                    "1": "create_temporary_directory",
                    "2": "generate_temp_directory",
                    "25": "create_temp_directory"
                },
                "__template": {
                    "1": "directory_template",
                    "22": "template",
                    "5": "template_path"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "mkdtemp": {
                    "1": "create_temporary_directory",
                    "5": "make_temp_directory"
                },
                "param_1": {
                    "1": "directory_template"
                },
                "pcVar1": {
                    "1": "created_directory",
                    "2": "temp_dir_path",
                    "23": "result",
                    "3": "temp_directory"
                }
            },
            "called": [
                "mkdtemp",
                "FUN_00114cf0",
                "FUN_001081e9"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\nchar * create_temp_directory_0011a0e0(void)\n\n{\n  char *template;\n  char *result;\n  \n  template = (char *)FUN_00114cf0();\n  result = mkdtemp(template);\n  if (result == (char *)0x0) {\n    free(template);\n  }\n  return result;\n}\n\n",
            "current_name": "create_temp_directory_0011a0e0",
            "entrypoint": "0x0011a0e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a0e0": "create_temp_directory_0011a0e0",
                "__template": "template",
                "free": "release_memory",
                "mkdtemp": "make_temp_directory",
                "pcVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a110": {
            "additional_data": {
                "FUN_0011a110": {
                    "1": "print_bfd_error",
                    "10": "print_error",
                    "18": "print_error_message",
                    "2": "print_bfd_error_message"
                },
                "PRINT_ERROR_UNKNOWN_MSG": {
                    "1": "cause_of_error_unknown_msg"
                },
                "_stderr": {
                    "1": "standard_error",
                    "3": "stderr"
                },
                "_stdout": {
                    "1": "standard_output",
                    "3": "stdout"
                },
                "bfd_errmsg": {
                    "1": "get_error_message"
                },
                "bfd_get_error": {
                    "1": "get_error_code"
                },
                "dcgettext": {
                    "1": "get_unknown_error_message"
                },
                "fflush": {
                    "1": "flush_output"
                },
                "fprintf": {
                    "1": "print_formatted_error_message"
                },
                "iVar1": {
                    "1": "error_def",
                    "12": "error",
                    "13": "error_code",
                    "2": "error_status"
                },
                "in_R10": {
                    "1": "unknown",
                    "4": "additional_info"
                },
                "param_1": {
                    "1": "file_name",
                    "2": "error_code",
                    "3": "error_description",
                    "9": "error_type"
                },
                "uVar2": {
                    "1": "error_description",
                    "19": "error_message",
                    "2": "error_msg",
                    "7": "error_string"
                }
            },
            "called": [
                "bfd_errmsg",
                "FUN_0010871c",
                "bfd_get_error"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00115dc0",
                "FUN_001053d5",
                "FUN_00116030",
                "FUN_00119f70",
                "FUN_001083b7"
            ],
            "code": "\n\n\nvoid print_error_message_0011a110(long error_type)\n\n{\n  int error_code;\n  undefined8 error_message;\n  undefined8 additional_info;\n  \n  error_code = bfd_get_error();\n  if (error_code == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg(error_code);\n  }\n  fflush(stdout);\n  if (error_type != 0) {\n    fprintf(stderr,\"%s: %s: %s\\n\",DAT_00127600,error_type,error_message,additional_info);\n    return;\n  }\n  fprintf(stderr,\"%s: %s\\n\",DAT_00127600,error_message,additional_info);\n  return;\n}\n\n",
            "current_name": "print_error_message_0011a110",
            "entrypoint": "0x0011a110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a110": "print_error_message_0011a110",
                "_stderr": "stderr",
                "_stdout": "stdout",
                "bfd_errmsg": "get_error_message",
                "bfd_get_error": "get_error_code",
                "dcgettext": "get_unknown_error_message",
                "fflush": "flush_output",
                "fprintf": "print_formatted_error_message",
                "iVar1": "error_code",
                "in_R10": "additional_info",
                "param_1": "error_type",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a170": {
            "additional_data": {
                "FUN_0011a170": {
                    "1": "perform_pattern_matching",
                    "11": "match_pattern",
                    "2": "check_pattern_match",
                    "3": "pattern_matching",
                    "9": "pattern_match"
                },
                "__name": {
                    "1": "current_name"
                },
                "__pattern": {
                    "1": "pattern_start",
                    "13": "current_pattern",
                    "2": "pattern_str",
                    "4": "pattern_ptr",
                    "6": "pattern"
                },
                "iVar1": {
                    "1": "matching_result",
                    "18": "match_result",
                    "2": "pattern_match_result",
                    "8": "result"
                },
                "param_1": {
                    "1": "pattern_ptr",
                    "29": "pattern"
                },
                "param_2": {
                    "1": "input_string",
                    "27": "name"
                }
            },
            "called": [
                "fnmatch"
            ],
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "code": "\nint match_pattern_0011a170(char **pattern,char **name)\n\n{\n  char *current_pattern;\n  int match_result;\n  \n  current_pattern = *pattern;\n  if (*current_pattern == '!') {\n    match_result = fnmatch(current_pattern + 1,*name,0);\n    if (match_result == 0) {\n      *(undefined *)(name + 1) = 0;\n      return match_result;\n    }\n  }\n  else {\n    match_result = fnmatch(current_pattern,*name,0);\n    if (match_result == 0) {\n      *(undefined *)(name + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "match_pattern_0011a170",
            "entrypoint": "0x0011a170",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a170": "match_pattern_0011a170",
                "__pattern": "current_pattern",
                "iVar1": "match_result",
                "param_1": "pattern",
                "param_2": "name"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a1b0": {
            "additional_data": {
                "FUN_0011a1b0": {
                    "1": "compare_params",
                    "2": "compare_and_return",
                    "3": "compare_records",
                    "7": "compare_memory_regions"
                },
                "__n": {
                    "1": "length"
                },
                "__s1": {
                    "1": "record1"
                },
                "__s2": {
                    "1": "record2"
                },
                "auVar5": {
                    "1": "result_container",
                    "2": "result_array",
                    "3": "return_val",
                    "5": "output",
                    "8": "return_value",
                    "9": "result"
                },
                "extraout_var": {
                    "1": "var",
                    "2": "extra_output"
                },
                "iVar3": {
                    "1": "memory_comparison_result",
                    "16": "comparison_result",
                    "6": "result",
                    "7": "memcmp_result"
                },
                "param_1": {
                    "1": "input_array_1",
                    "2": "data1",
                    "3": "region1"
                },
                "param_2": {
                    "1": "memory_2",
                    "2": "input2",
                    "3": "region2"
                },
                "param_3": {
                    "1": "data1",
                    "2": "value1",
                    "3": "size1",
                    "4": "param_3"
                },
                "param_4": {
                    "1": "arg_4",
                    "2": "value2",
                    "3": "size2",
                    "4": "param_4"
                },
                "uVar1": {
                    "1": "record_1_length",
                    "2": "size_1",
                    "3": "size1"
                },
                "uVar2": {
                    "1": "record_2_size",
                    "2": "region2_size",
                    "3": "size2"
                },
                "uVar4": {
                    "1": "output",
                    "16": "combined_result",
                    "2": "return_value",
                    "3": "comparison_result",
                    "6": "final_result"
                }
            },
            "called": [
                "memcmp",
                "FUN_001087da"
            ],
            "calling": [
                "FUN_001086af"
            ],
            "code": "\nundefined  [16] compare_memory_0011a1b0(ulong *region1,ulong *region2,undefined8 param_3,undefined8 param_4)\n\n{\n  ulong size1;\n  ulong size2;\n  int comparison_result;\n  undefined4 extra_output;\n  ulong combined_result;\n  undefined result [16];\n  \n  combined_result = *region1;\n  if (*region2 <= *region1) {\n    combined_result = *region2;\n  }\n  comparison_result = memcmp((void *)(region1[3] + 3),(void *)(region2[3] + 3),combined_result - 3);\n  combined_result = CONCAT44(extra_output,comparison_result);\n  if (comparison_result == 0) {\n    size1 = region1[8];\n    if (size1 < region2[7]) {\n      combined_result = 0xffffffff;\n    }\n    else {\n      size2 = region2[8];\n      if (size2 < region1[7]) {\n        combined_result = 1;\n      }\n      else {\n        combined_result = 0xffffffff;\n        if (region2[7] <= region1[7]) {\n          if (size2 < size1) {\n            combined_result = 1;\n          }\n          else {\n            combined_result = 0xffffffff;\n            if (size2 <= size1) {\n              if (region1[2] == 0x100) {\n                combined_result = (ulong)-(uint)(region2[2] != 0x100);\n              }\n              else {\n                combined_result = (ulong)(region2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  result._8_8_ = param_4;\n  result._0_8_ = combined_result;\n  return result;\n}\n\n",
            "current_name": "compare_memory_0011a1b0",
            "entrypoint": "0x0011a1b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a1b0": "compare_memory_0011a1b0",
                "auVar5": "result",
                "extraout_var": "extra_output",
                "iVar3": "comparison_result",
                "param_1": "region1",
                "param_2": "region2",
                "uVar1": "size1",
                "uVar2": "size2",
                "uVar4": "combined_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a250": {
            "additional_data": {
                "*(char *)(param_1[3] + 3)": {
                    "1": "character1",
                    "2": "record1_field3_char"
                },
                "*(char *)(param_2[3] + 3)": {
                    "1": "record_2_field_3_char_3",
                    "2": "record2_field3_char"
                },
                "*(char *)(record1[3] + 3)": {
                    "1": "record1_field3_byte3"
                },
                "*(char *)(record2[3] + 3)": {
                    "1": "record2_field3_byte3"
                },
                "*(char *)(record_1[3] + 3)": {
                    "1": "record_1_third_char"
                },
                "*(char *)(record_2[3] + 3)": {
                    "1": "record_2_third_char"
                },
                "*param_1": {
                    "1": "record1_data_size",
                    "2": "record1_field1"
                },
                "*param_2": {
                    "1": "dereferenced_record2",
                    "2": "record2_field0"
                },
                "*record_1": {
                    "1": "record_1_length"
                },
                "*record_2": {
                    "1": "record_2_length"
                },
                "3": {
                    "1": "third_element"
                },
                "4": {
                    "1": "minimum_record_length"
                },
                "4 < *record_1": {
                    "1": "is_record_1_version_gt_4"
                },
                "4 < *record_2": {
                    "1": "is_record_2_version_gt_4"
                },
                "7": {
                    "1": "seventh_element"
                },
                "8": {
                    "1": "eighth_element"
                },
                "<param_1>": {
                    "1": "record1"
                },
                "<param_2>": {
                    "1": "record2"
                },
                "<uVar1>": {
                    "1": "record1_flag"
                },
                "FUN_001087fd": {
                    "1": "get_flag"
                },
                "FUN_0011a250": {
                    "1": "compare_elements",
                    "2": "compare_params",
                    "25": "compare_records"
                },
                "char": {
                    "1": "character"
                },
                "param_1": {
                    "1": "memory_block_1",
                    "14": "record1",
                    "9": "record_1"
                },
                "param_1[2]": {
                    "1": "param1_value"
                },
                "param_1[3]": {
                    "1": "record1_field3"
                },
                "param_1[7]": {
                    "1": "record1_value7",
                    "2": "record_1_field_7",
                    "3": "record1_field7"
                },
                "param_1[8]": {
                    "1": "record1_value2",
                    "2": "record_1_field_8",
                    "3": "record1_field8"
                },
                "param_2": {
                    "1": "memory_block2",
                    "14": "record2",
                    "9": "record_2"
                },
                "param_2[2]": {
                    "1": "record_2_field_2",
                    "2": "record2_field2"
                },
                "param_2[3]": {
                    "1": "record2_value3"
                },
                "param_2[7]": {
                    "1": "record2_value1",
                    "2": "record_2_field_7",
                    "3": "record2_field7"
                },
                "param_2[8]": {
                    "1": "record2_value",
                    "2": "record_2_field_8",
                    "3": "record2_field8"
                },
                "record1[2]": {
                    "1": "record1_size"
                },
                "record1[3]": {
                    "1": "record1_data_ptr"
                },
                "record1[7]": {
                    "1": "record1_size"
                },
                "record1[8]": {
                    "1": "record1_value2"
                },
                "record2[2]": {
                    "1": "record2_size"
                },
                "record2[3]": {
                    "1": "record2_data_ptr"
                },
                "record2[7]": {
                    "1": "record2_size"
                },
                "record2[8]": {
                    "1": "record2_data"
                },
                "record_1[2]": {
                    "1": "record_1_index2",
                    "2": "record_1_field_2"
                },
                "record_1[3]": {
                    "1": "record_1_field_3"
                },
                "record_1[7]": {
                    "1": "record_1_index7"
                },
                "record_1[8]": {
                    "1": "record_1_field_8"
                },
                "record_2[2]": {
                    "1": "record_2_index2",
                    "2": "record_2_field_2"
                },
                "record_2[3]": {
                    "1": "record_2_data"
                },
                "record_2[7]": {
                    "1": "record_2_index7"
                },
                "record_2[8]": {
                    "1": "record_2_index8"
                },
                "record_a[2]": {
                    "1": "flag_a"
                },
                "record_a[3]": {
                    "1": "record_a_data_ptr"
                },
                "record_a[7]": {
                    "1": "value_a"
                },
                "record_a[8]": {
                    "1": "size_a"
                },
                "record_b[2]": {
                    "1": "flag_b"
                },
                "record_b[3]": {
                    "1": "record_b_data_ptr"
                },
                "record_b[7]": {
                    "1": "value_b"
                },
                "record_b[8]": {
                    "1": "size_b"
                },
                "uVar1": {
                    "1": "record_1_index2",
                    "2": "value1",
                    "3": "record_1_field_2",
                    "4": "record1_field2"
                }
            },
            "called": [
                "FUN_001087fd"
            ],
            "calling": [
                "FUN_00116852"
            ],
            "code": "\nint compare_records_0011a250(ulong *record1,ulong *record2)\n\n{\n  ulong record1_field2;\n  \n  record1_field2 = record_1_val2;\n  if (record1_field2 == record2_field2) {\n    if (record2_field7 <= record1_field7) {\n      if (record1_field7 <= record2_field7) {\n        if (record2_field8 < record1_field8) {\n          return -1;\n        }\n        if (record2_field8 <= record1_field8) {\n          if ((4 < *record1) && (4 < *record2)) {\n            if (*(character *)(record_1_val3 + 3) != *(character *)(record_2_val3 + 3)) {\n              return (int)*(character *)(record_1_val3 + 3) - (int)*(character *)(record_2_val3 + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((record1_field2 == 0) || ((record1_field2 != 0x100 && (record2_field2 != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "current_name": "compare_records_0011a250",
            "entrypoint": "0x0011a250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "char": "character",
                "param_1": "record1",
                "param_1[2]": "record_1_val2",
                "param_1[3]": "record_1_val3",
                "param_1[7]": "record1_field7",
                "param_1[8]": "record1_field8",
                "param_2": "record2",
                "param_2[2]": "record2_field2",
                "param_2[3]": "record_2_val3",
                "param_2[7]": "record2_field7",
                "param_2[8]": "record2_field8",
                "uVar1": "record1_field2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a2e0": {
            "additional_data": {
                "0x128598": {
                    "1": "default_section_address"
                },
                "FUN_00119dd0": {
                    "6": "print_error_message"
                },
                "FUN_0011a2e0": {
                    "1": "copy_section_data",
                    "12": "extract_section_info",
                    "2": "update_section_information",
                    "3": "extract_section"
                },
                "bfd_get_section_by_name": {
                    "1": "get_section_info_by_name",
                    "2": "get_section_info",
                    "7": "get_section_by_name"
                },
                "bfd_get_section_by_name(param_2)": {
                    "1": "get_section_by_name(binary_ptr)"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "lVar3": {
                    "1": "extracted_section_info",
                    "2": "new_section_info",
                    "5": "section_ptr"
                },
                "lVar4": {
                    "1": "section_name_addr",
                    "12": "section_ptr",
                    "2": "section_name_ptr",
                    "4": "section_name"
                },
                "param_1": {
                    "1": "section_info_struct_addr",
                    "11": "section_info",
                    "2": "section_data",
                    "3": "input_data",
                    "4": "section_info_ptr"
                },
                "param_2": {
                    "1": "param_bfd_data",
                    "2": "binary_handle",
                    "3": "param",
                    "4": "binary",
                    "5": "binary_ptr"
                },
                "uVar1": {
                    "1": "section_variable1",
                    "2": "section_address",
                    "5": "section_name"
                },
                "uVar2": {
                    "1": "section_name",
                    "9": "error_message"
                }
            },
            "called": [
                "bfd_get_section_by_name",
                "FUN_00108808"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nlong extract_section_info_0011a2e0(long section_info,long binary_ptr)\n\n{\n  undefined8 section_name;\n  undefined8 error_message;\n  long section_ptr;\n  long section_ptr;\n  \n  section_ptr = (**(code **)(*(long *)(binary_ptr + 8) + 0x208))(binary_ptr);\n  section_ptr = *(long *)(section_info + 0x20);\n  *(undefined8 *)(section_ptr + 8) = *(undefined8 *)(section_info + 8);\n  *(undefined8 *)(section_ptr + 0x10) = *(undefined8 *)(section_info + 0x10);\n  *(undefined4 *)(section_ptr + 0x18) = *(undefined4 *)(section_info + 0x18);\n  if (section_ptr == 0) {\n    section_ptr = 0x128598;\n  }\n  else {\n    section_ptr = bfd_get_section_by_name(binary_ptr);\n    if (section_ptr == 0) {\n      section_name = *(undefined8 *)(section_info + 0x20);\n      error_message = dcgettext(0,\"Section %s not found\",5);\n                    \n      FUN_00119dd0(error_message,section_name);\n    }\n  }\n  *(long *)(section_ptr + 0x20) = section_ptr;\n  return section_ptr;\n}\n\n",
            "current_name": "extract_section_info_0011a2e0",
            "entrypoint": "0x0011a2e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a2e0": "extract_section_info_0011a2e0",
                "bfd_get_section_by_name": "get_section_by_name",
                "bfd_get_section_by_name(param_2)": "get_section_by_name(binary_ptr)",
                "dcgettext": "get_text_from_message_catalog",
                "lVar3": "section_ptr",
                "lVar4": "section_ptr",
                "param_1": "section_info",
                "param_2": "binary_ptr",
                "uVar1": "section_name",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a350": {
            "additional_data": {
                "FUN_00119ed0": {
                    "2": "print_error_message"
                },
                "FUN_0011a350": {
                    "1": "set_file_times",
                    "2": "set_file_modification_time",
                    "24": "set_file_time"
                },
                "iVar1": {
                    "1": "return_code",
                    "26": "result"
                },
                "local_28": {
                    "1": "empty"
                },
                "local_38": {
                    "1": "file_descriptor",
                    "12": "access_time",
                    "3": "time1"
                },
                "param_1": {
                    "31": "file_path"
                },
                "param_2": {
                    "1": "file_data",
                    "27": "file_info"
                },
                "param_2 + 0x48": {
                    "1": "file_info.file_size"
                },
                "param_2 + 0x4c": {
                    "1": "file_info.block_size"
                },
                "param_2 + 0x50": {
                    "1": "file_info.block_count"
                },
                "param_2 + 0x54": {
                    "1": "file_info.reserved"
                },
                "param_2 + 0x58": {
                    "1": "file_info.access_time"
                },
                "param_2 + 0x5c": {
                    "1": "file_info.mod_time"
                },
                "param_2 + 0x60": {
                    "1": "file_info.file_flags"
                },
                "param_2 + 100": {
                    "1": "file_info.file_type"
                },
                "pcVar3": {
                    "1": "err_string",
                    "14": "error_message",
                    "2": "error_str",
                    "3": "err_msg",
                    "4": "error_msg",
                    "5": "error_string"
                },
                "piVar2": {
                    "1": "error_pointer",
                    "2": "error_num",
                    "3": "errno_location",
                    "9": "errno_ptr"
                },
                "uStack_1c": {
                    "1": "change_time"
                },
                "uStack_20": {
                    "1": "backup_time"
                },
                "uStack_24": {
                    "1": "mod_time"
                },
                "uStack_2c": {
                    "1": "unused3",
                    "2": "creation_time",
                    "3": "time4"
                },
                "uStack_30": {
                    "1": "timestamp_3",
                    "3": "time3",
                    "6": "change_time"
                },
                "uStack_34": {
                    "1": "timespec_struct2",
                    "3": "time2",
                    "4": "modification_time",
                    "7": "mod_time"
                },
                "uVar4": {
                    "1": "localized_error",
                    "2": "translated_error_msg",
                    "3": "error_string",
                    "8": "translated_error_message"
                },
                "utimensat": {
                    "1": "update_file_times"
                }
            },
            "called": [
                "utimensat",
                "FUN_0010882c"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00108200"
            ],
            "code": "\nvoid set_file_time_0011a350(char *file_path,long file_info)\n\n{\n  int result;\n  int *errno_ptr;\n  char *error_message;\n  undefined8 translated_error_message;\n  undefined4 access_time;\n  undefined4 mod_time;\n  undefined4 change_time;\n  undefined4 time4;\n  undefined4 file_size;\n  undefined4 block_size;\n  undefined4 block_count;\n  undefined4 file_type;\n  \n  file_size = *(undefined4 *)(file_info + 0x58);\n  block_size = *(undefined4 *)(file_info + 0x5c);\n  block_count = *(undefined4 *)(file_info + 0x60);\n  file_type = *(undefined4 *)(file_info + 100);\n  access_time = *(undefined4 *)(file_info + 0x48);\n  mod_time = *(undefined4 *)(file_info + 0x4c);\n  change_time = *(undefined4 *)(file_info + 0x50);\n  time4 = *(undefined4 *)(file_info + 0x54);\n  result = utimensat(-100,file_path,(timespec *)&access_time,0);\n  if (result != 0) {\n    errno_ptr = __errno_location();\n    error_message = strerror(*errno_ptr);\n    translated_error_message = dcgettext(0,\"%s: cannot set time: %s\",5);\n    FUN_00119ed0(translated_error_message,file_path,error_message);\n  }\n  return;\n}\n\n",
            "current_name": "set_file_time_0011a350",
            "entrypoint": "0x0011a350",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a350": "set_file_time_0011a350",
                "iVar1": "result",
                "local_28": "file_size",
                "local_38": "access_time",
                "param_1": "file_path",
                "param_2": "file_info",
                "pcVar3": "error_message",
                "piVar2": "errno_ptr",
                "uStack_1c": "file_type",
                "uStack_20": "block_count",
                "uStack_24": "block_size",
                "uStack_2c": "time4",
                "uStack_30": "change_time",
                "uStack_34": "mod_time",
                "uVar4": "translated_error_message",
                "utimensat": "update_file_times"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a390": {
            "additional_data": {
                "(long *)PTR_DAT_001264e0": {
                    "1": "function_chain"
                },
                "(undefined *)0x0": {
                    "1": "null"
                },
                "*(int *)(plVar4 + 1)": {
                    "1": "num_functions"
                },
                "FUN_0011a390": {
                    "1": "execute_func_chain",
                    "8": "execute_function_chain",
                    "9": "execute_functions"
                },
                "F_UNIMPROVED": {
                    "1": "better_function_name"
                },
                "LAB_0011a466": {
                    "1": "loop_exit"
                },
                "PTR_DAT_001264e0": {
                    "2": "function_list"
                },
                "lVar1": {
                    "1": "function_index",
                    "15": "index",
                    "2": "last_index",
                    "3": "index1",
                    "6": "current_index"
                },
                "lVar1 + 1": {
                    "1": "current_function"
                },
                "lVar1 + 2": {
                    "1": "current_function"
                },
                "lVar2": {
                    "1": "current",
                    "11": "prev_index",
                    "2": "current_index",
                    "3": "index2",
                    "6": "previous_index"
                },
                "lVar2 + -1": {
                    "1": "prev_index"
                },
                "lVar2 + -2": {
                    "1": "prev_function"
                },
                "lVar2 + -3": {
                    "1": "prev_function"
                },
                "lVar2 + -4": {
                    "1": "prev_function"
                },
                "lVar2 + -5": {
                    "1": "prev_function"
                },
                "lVar2 + 1": {
                    "1": "prev_function"
                },
                "lVar2 + 2": {
                    "1": "prev_function"
                },
                "lVar3": {
                    "1": "previous",
                    "15": "temp_index",
                    "2": "loop_index",
                    "3": "index3"
                },
                "lVar3 + 1": {
                    "1": "prev_prev_function"
                },
                "lVar3 + 2": {
                    "1": "prev_prev_function"
                },
                "plVar4": {
                    "1": "callback_list",
                    "5": "function_chain",
                    "6": "function_pointers",
                    "7": "function_pointer"
                },
                "plVar4[lVar1]": {
                    "1": "execute_function"
                },
                "plVar4[lVar3 + -2]": {
                    "1": "execute_function"
                },
                "plVar4[lVar3 + -3]": {
                    "1": "execute_function"
                },
                "plVar4[lVar3 + -4]": {
                    "1": "execute_function"
                },
                "plVar4[lVar3 + -5]": {
                    "1": "execute_function"
                },
                "plVar4[lVar3 + 1]": {
                    "1": "execute_function"
                },
                "plVar4[lVar3 + 2]": {
                    "1": "execute_function"
                },
                "plVar4[lVar3]": {
                    "1": "execute_function"
                },
                "uVar5": {
                    "1": "number_of_functions",
                    "2": "index",
                    "3": "iteration_count",
                    "5": "counter",
                    "8": "count"
                },
                "uVar5 & 7": {
                    "1": "modulo_count"
                }
            },
            "called": [],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid execute_functions_0011a390(void)\n\n{\n  long index;\n  long prev_index;\n  long temp_index;\n  long *function_pointer;\n  uint count;\n  \n  function_pointer = (long *)PTR_DAT_001264e0;\n  if (PTR_DAT_001264e0 != (undefined *)0x0) {\n    do {\n      count = *(int *)(function_pointer + 1) - 1;\n      if (-1 < (int)count) {\n        index = (long)(int)count;\n        count = count & 7;\n        (*(code *)function_pointer[index + 2])();\n        prev_index = index + -1;\n        if (-1 < (int)prev_index) {\n          temp_index = prev_index;\n          if (count != 0) {\n            if (count != 1) {\n              if (count != 2) {\n                if (count != 3) {\n                  if (count != 4) {\n                    if (count != 5) {\n                      if (count != 6) {\n                        (*(code *)function_pointer[index + 1])();\n                        prev_index = index + -2;\n                      }\n                      (*(code *)function_pointer[prev_index + 2])();\n                      prev_index = prev_index + -1;\n                    }\n                    (*(code *)function_pointer[prev_index + 2])();\n                    prev_index = prev_index + -1;\n                  }\n                  (*(code *)function_pointer[prev_index + 2])();\n                  prev_index = prev_index + -1;\n                }\n                (*(code *)function_pointer[prev_index + 2])();\n                prev_index = prev_index + -1;\n              }\n              (*(code *)function_pointer[prev_index + 2])();\n              prev_index = prev_index + -1;\n            }\n            (*(code *)function_pointer[prev_index + 2])();\n            temp_index = prev_index + -1;\n            if ((int)(prev_index + -1) < 0) goto loop_exit;\n          }\n          do {\n            (*(code *)function_pointer[temp_index + 2])();\n            index = temp_index + -1;\n            (*(code *)function_pointer[temp_index + 1])();\n            (*(code *)execute_function)();\n            (*(code *)execute_function)();\n            (*(code *)function_pointer[temp_index + -2])();\n            (*(code *)function_pointer[temp_index + -3])();\n            (*(code *)function_pointer[temp_index + -4])();\n            (*(code *)function_pointer[temp_index + -5])();\n            temp_index = temp_index + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nloop_exit:\n      function_pointer = (long *)*function_pointer;\n    } while (function_pointer != (long *)0x0);\n  }\n  return;\n}\n\n",
            "current_name": "execute_functions_0011a390",
            "entrypoint": "0x0011a390",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a390": "execute_functions_0011a390",
                "LAB_0011a466": "loop_exit",
                "lVar1": "index",
                "lVar2": "prev_index",
                "lVar3": "temp_index",
                "plVar4": "function_pointer",
                "plVar4[lVar1]": "execute_function",
                "plVar4[lVar3]": "execute_function",
                "uVar5": "count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a480": {
            "additional_data": {
                "FUN_0011a480": {
                    "1": "copy_string_with_terminator",
                    "17": "copy_string",
                    "3": "copy_string_and_null_terminate",
                    "4": "copy_string_with_null_terminator"
                },
                "__dest": {
                    "1": "dest_string",
                    "10": "copied_string",
                    "2": "destination",
                    "6": "new_string",
                    "8": "destination_string"
                },
                "__n": {
                    "1": "n",
                    "2": "str_length",
                    "25": "string_length"
                },
                "__src": {
                    "1": "source"
                },
                "param_1": {
                    "1": "string",
                    "11": "input_string",
                    "15": "source_string",
                    "2": "str"
                },
                "param_2": {
                    "1": "max_string_length",
                    "2": "max_size",
                    "22": "max_length",
                    "6": "max_len"
                }
            },
            "called": [
                "memcpy",
                "xmalloc",
                "strnlen"
            ],
            "calling": [
                "FUN_00114c80",
                "FUN_00116b90"
            ],
            "code": "\nvoid copy_string_0011a480(char *source_string,size_t max_length)\n\n{\n  size_t string_length;\n  void *copied_string;\n  \n  string_length = strnlen(source_string,max_length);\n  copied_string = (void *)xmalloc(string_length + 1);\n  *(undefined *)((long)copied_string + string_length) = 0;\n  memcpy(copied_string,source_string,string_length);\n  return;\n}\n\n",
            "current_name": "copy_string_0011a480",
            "entrypoint": "0x0011a480",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a480": "copy_string_0011a480",
                "__dest": "copied_string",
                "__n": "string_length",
                "param_1": "source_string",
                "param_2": "max_length"
            },
            "skipped": false,
            "tags": []
        },
        "_DT_FINI": {
            "called": [],
            "calling": [],
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "current_name": "_DT_FINI",
            "entrypoint": "0x0011a4b4",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_DT_INIT": {
            "called": [
                "__gmon_start__"
            ],
            "calling": [],
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "current_name": "_DT_INIT",
            "entrypoint": "0x00104000",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_FINI_0": {
            "called": [
                "__cxa_finalize",
                "FUN_00116ad0"
            ],
            "calling": [],
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001275e0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00126468);\n  FUNC_00116ad0();\n  DAT_001275e0 = 1;\n  return;\n}\n\n",
            "current_name": "_FINI_0",
            "entrypoint": "0x00116b40",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_INIT_0": {
            "called": [
                "FUN_00116b00"
            ],
            "calling": [],
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00116b00();\n  return;\n}\n\n",
            "current_name": "_INIT_0",
            "entrypoint": "0x00116b80",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__assert_fail": {
            "called": [
                "__assert_fail"
            ],
            "calling": [
                "FUN_00112c1f",
                "FUN_001125fa",
                "FUN_0010bbd3",
                "FUN_0010c7a0"
            ],
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "current_name": "__assert_fail",
            "entrypoint": "0x00104300",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__cxa_finalize": {
            "called": [
                "__cxa_finalize"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "current_name": "__cxa_finalize",
            "entrypoint": "0x00104910",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__errno_location": {
            "called": [
                "__errno_location"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00104966",
                "FUN_00109a32",
                "FUN_00114690",
                "FUN_00114460",
                "FUN_00108237",
                "FUN_00116b90",
                "FUN_00108200",
                "FUN_00107880",
                "FUN_0010543c",
                "FUN_00115a90",
                "FUN_001199d0",
                "FUN_0010882c"
            ],
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "current_name": "__errno_location",
            "entrypoint": "0x001040b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "abort": {
            "called": [
                "abort"
            ],
            "calling": [
                "FUN_0010abdd",
                "FUN_0010ebb0",
                "FUN_0010ba08",
                "FUN_00112c1f",
                "FUN_0010b0fa",
                "FUN_0010e9a0",
                "FUN_001135a5",
                "FUN_0010a94e",
                "FUN_0010922b",
                "FUN_001199d0",
                "FUN_0010d21c",
                "FUN_0010aa53"
            ],
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "current_name": "abort",
            "entrypoint": "0x001040a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "access": {
            "called": [
                "access"
            ],
            "calling": [
                "FUN_0011283f"
            ],
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "current_name": "access",
            "entrypoint": "0x00104740",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_alloc": {
            "called": [
                "bfd_alloc"
            ],
            "calling": [
                "FUN_00115dc0"
            ],
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "current_name": "bfd_alloc",
            "entrypoint": "0x00104250",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_alt_mach_code": {
            "called": [
                "bfd_alt_mach_code"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "current_name": "bfd_alt_mach_code",
            "entrypoint": "0x00104590",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_bread": {
            "called": [
                "bfd_bread"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "current_name": "bfd_bread",
            "entrypoint": "0x00104870",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_bwrite": {
            "called": [
                "bfd_bwrite"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "current_name": "bfd_bwrite",
            "entrypoint": "0x00104530",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_canonicalize_reloc": {
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "calling": [
                "FUN_00115dc0",
                "FUN_00116030",
                "FUN_001163d0"
            ],
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "current_name": "bfd_canonicalize_reloc",
            "entrypoint": "0x001047b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_check_format": {
            "called": [
                "bfd_check_format"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "current_name": "bfd_check_format",
            "entrypoint": "0x00104810",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_check_format_matches": {
            "called": [
                "bfd_check_format_matches"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "current_name": "bfd_check_format_matches",
            "entrypoint": "0x00104780",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_close": {
            "called": [
                "bfd_close"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "current_name": "bfd_close",
            "entrypoint": "0x00104908",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_close_all_done": {
            "called": [
                "bfd_close_all_done"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690",
                "FUN_00119f70"
            ],
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "current_name": "bfd_close_all_done",
            "entrypoint": "0x00104900",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_coff_get_auxent": {
            "called": [
                "bfd_coff_get_auxent"
            ],
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "current_name": "bfd_coff_get_auxent",
            "entrypoint": "0x001045b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_coff_get_syment": {
            "called": [
                "bfd_coff_get_syment"
            ],
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f",
                "FUN_0010dac0"
            ],
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "current_name": "bfd_coff_get_syment",
            "entrypoint": "0x001046a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_convert_section_contents": {
            "called": [
                "bfd_convert_section_contents"
            ],
            "calling": [
                "FUN_00116110"
            ],
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "current_name": "bfd_convert_section_contents",
            "entrypoint": "0x001042f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_convert_section_setup": {
            "called": [
                "bfd_convert_section_setup"
            ],
            "calling": [
                "FUN_00115530"
            ],
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "current_name": "bfd_convert_section_setup",
            "entrypoint": "0x001040f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_create_gnu_debuglink_section": {
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "current_name": "bfd_create_gnu_debuglink_section",
            "entrypoint": "0x00104180",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_decode_symclass": {
            "called": [
                "bfd_decode_symclass"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "current_name": "bfd_decode_symclass",
            "entrypoint": "0x00104490",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_errmsg": {
            "called": [
                "bfd_errmsg"
            ],
            "calling": [
                "FUN_0011a110",
                "FUN_0010e2f0",
                "FUN_0010e07c",
                "FUN_0011378f",
                "FUN_0010554f",
                "FUN_001126c0",
                "FUN_0010e6a8",
                "FUN_00116b90",
                "FUN_0010dac0"
            ],
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "current_name": "bfd_errmsg",
            "entrypoint": "0x001047a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_fdopenw": {
            "called": [
                "bfd_fdopenw"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "current_name": "bfd_fdopenw",
            "entrypoint": "0x001048d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_fill_in_gnu_debuglink_section": {
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "current_name": "bfd_fill_in_gnu_debuglink_section",
            "entrypoint": "0x00104600",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_arch": {
            "called": [
                "bfd_get_arch"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00105828",
                "FUN_00107976",
                "FUN_00107880"
            ],
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "current_name": "bfd_get_arch",
            "entrypoint": "0x00104570",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_error": {
            "called": [
                "bfd_get_error"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_0010e07c",
                "FUN_00119f70",
                "FUN_001126c0",
                "FUN_00116b90",
                "FUN_0010dac0",
                "FUN_001083b7",
                "FUN_00115dc0",
                "FUN_0011a110",
                "FUN_0010e2f0",
                "FUN_0011378f",
                "FUN_0010554f",
                "FUN_0010e6a8"
            ],
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "current_name": "bfd_get_error",
            "entrypoint": "0x00104370",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_full_section_contents": {
            "called": [
                "bfd_get_full_section_contents"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_00116110"
            ],
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "current_name": "bfd_get_full_section_contents",
            "entrypoint": "0x00104440",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_mach": {
            "called": [
                "bfd_get_mach"
            ],
            "calling": [
                "FUN_00105828",
                "FUN_00107976"
            ],
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "current_name": "bfd_get_mach",
            "entrypoint": "0x00104650",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_reloc_upper_bound": {
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "calling": [
                "FUN_00115dc0",
                "FUN_00116030",
                "FUN_001163d0"
            ],
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "current_name": "bfd_get_reloc_upper_bound",
            "entrypoint": "0x00104840",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_section_by_name": {
            "called": [
                "bfd_get_section_by_name"
            ],
            "calling": [
                "FUN_0011a2e0",
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "current_name": "bfd_get_section_by_name",
            "entrypoint": "0x00104400",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_section_contents": {
            "called": [
                "bfd_get_section_contents"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "current_name": "bfd_get_section_contents",
            "entrypoint": "0x00104260",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_stab_name": {
            "called": [
                "bfd_get_stab_name"
            ],
            "calling": [
                "FUN_00108b3e"
            ],
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "current_name": "bfd_get_stab_name",
            "entrypoint": "0x00104110",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_hash_allocate": {
            "called": [
                "bfd_hash_allocate"
            ],
            "calling": [
                "FUN_0010bb52"
            ],
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "current_name": "bfd_hash_allocate",
            "entrypoint": "0x00104450",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_hash_lookup": {
            "called": [
                "bfd_hash_lookup"
            ],
            "calling": [
                "FUN_0010bba1",
                "FUN_0010e2f0",
                "FUN_0010e6a8"
            ],
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "current_name": "bfd_hash_lookup",
            "entrypoint": "0x00104560",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_hash_newfunc": {
            "called": [
                "bfd_hash_newfunc"
            ],
            "calling": [
                "FUN_0010bb52"
            ],
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "current_name": "bfd_hash_newfunc",
            "entrypoint": "0x00104200",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_hash_table_init": {
            "called": [
                "bfd_hash_table_init"
            ],
            "calling": [
                "FUN_0011378f"
            ],
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "current_name": "bfd_hash_table_init",
            "entrypoint": "0x00104830",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_init": {
            "called": [
                "bfd_init"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "current_name": "bfd_init",
            "entrypoint": "0x00104430",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_is_local_label": {
            "called": [
                "bfd_is_local_label"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "current_name": "bfd_is_local_label",
            "entrypoint": "0x001048a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_iterate_over_targets": {
            "called": [
                "bfd_iterate_over_targets"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "current_name": "bfd_iterate_over_targets",
            "entrypoint": "0x00104620",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_make_section_anyway_with_flags": {
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "calling": [
                "FUN_00115530"
            ],
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "current_name": "bfd_make_section_anyway_with_flags",
            "entrypoint": "0x00104190",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_make_section_with_flags": {
            "called": [
                "bfd_make_section_with_flags"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "current_name": "bfd_make_section_with_flags",
            "entrypoint": "0x00104120",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_malloc_and_get_section": {
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "current_name": "bfd_malloc_and_get_section",
            "entrypoint": "0x001041e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_map_over_sections": {
            "called": [
                "bfd_map_over_sections"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "current_name": "bfd_map_over_sections",
            "entrypoint": "0x00104850",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_octets_per_byte": {
            "called": [
                "bfd_octets_per_byte"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "current_name": "bfd_octets_per_byte",
            "entrypoint": "0x00104520",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openr": {
            "called": [
                "bfd_openr"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "current_name": "bfd_openr",
            "entrypoint": "0x001041f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openr_next_archived_file": {
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "current_name": "bfd_openr_next_archived_file",
            "entrypoint": "0x00104820",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openw": {
            "called": [
                "bfd_openw"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690",
                "FUN_00119f70"
            ],
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "current_name": "bfd_openw",
            "entrypoint": "0x00104690",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_printable_arch_mach": {
            "called": [
                "bfd_printable_arch_mach"
            ],
            "calling": [
                "FUN_00105828",
                "FUN_00119f70",
                "FUN_00104943",
                "FUN_001199d0"
            ],
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "current_name": "bfd_printable_arch_mach",
            "entrypoint": "0x001045a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_scan_arch": {
            "called": [
                "bfd_scan_arch"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "current_name": "bfd_scan_arch",
            "entrypoint": "0x00104710",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_scan_vma": {
            "called": [
                "bfd_scan_vma"
            ],
            "calling": [
                "FUN_00119940"
            ],
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "current_name": "bfd_scan_vma",
            "entrypoint": "0x00104070",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_seek": {
            "called": [
                "bfd_seek"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "current_name": "bfd_seek",
            "entrypoint": "0x001048e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_default_target": {
            "called": [
                "bfd_set_default_target"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "current_name": "bfd_set_default_target",
            "entrypoint": "0x00104150",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_error": {
            "called": [
                "bfd_set_error"
            ],
            "calling": [
                "FUN_001086af",
                "FUN_00114690",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "current_name": "bfd_set_error",
            "entrypoint": "0x001043a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_error_program_name": {
            "called": [
                "bfd_set_error_program_name"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "current_name": "bfd_set_error_program_name",
            "entrypoint": "0x001046e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_file_flags": {
            "called": [
                "bfd_set_file_flags"
            ],
            "calling": [
                "FUN_00107976"
            ],
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "current_name": "bfd_set_file_flags",
            "entrypoint": "0x00104630",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_format": {
            "called": [
                "bfd_set_format"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00114e50",
                "FUN_00107880",
                "FUN_00119f70"
            ],
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "current_name": "bfd_set_format",
            "entrypoint": "0x00104500",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_section_contents": {
            "called": [
                "bfd_set_section_contents"
            ],
            "calling": [
                "FUN_0010554f",
                "FUN_00116110"
            ],
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "current_name": "bfd_set_section_contents",
            "entrypoint": "0x00104330",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_section_size": {
            "called": [
                "bfd_set_section_size"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_0010554f",
                "FUN_00116110",
                "FUN_00115530"
            ],
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "current_name": "bfd_set_section_size",
            "entrypoint": "0x001045f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_start_address": {
            "called": [
                "bfd_set_start_address"
            ],
            "calling": [
                "FUN_00107976"
            ],
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "current_name": "bfd_set_start_address",
            "entrypoint": "0x00104860",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_symtab": {
            "called": [
                "bfd_set_symtab"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "current_name": "bfd_set_symtab",
            "entrypoint": "0x00104460",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_stat": {
            "called": [
                "bfd_stat"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "current_name": "bfd_stat",
            "entrypoint": "0x001041b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_target_list": {
            "called": [
                "bfd_target_list"
            ],
            "calling": [
                "FUN_00104a35"
            ],
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "current_name": "bfd_target_list",
            "entrypoint": "0x00104350",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bindtextdomain": {
            "called": [
                "bindtextdomain"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "current_name": "bindtextdomain",
            "entrypoint": "0x00104220",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "chmod": {
            "called": [
                "chmod"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "current_name": "chmod",
            "entrypoint": "0x001046d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "close": {
            "called": [
                "close"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00115a90",
                "FUN_00108237",
                "FUN_00116b90",
                "FUN_001199d0"
            ],
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "close",
            "entrypoint": "0x001043c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "concat": {
            "called": [
                "concat"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "current_name": "concat",
            "entrypoint": "0x00104320",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "cplus_demangle": {
            "called": [
                "cplus_demangle"
            ],
            "calling": [
                "FUN_0010d21c"
            ],
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "current_name": "cplus_demangle",
            "entrypoint": "0x001046b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "cplus_demangle_init_info": {
            "called": [
                "cplus_demangle_init_info"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "current_name": "cplus_demangle_init_info",
            "entrypoint": "0x00104550",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "cplus_demangle_mangled_name": {
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "current_name": "cplus_demangle_mangled_name",
            "entrypoint": "0x00104700",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "cplus_demangle_print": {
            "called": [
                "cplus_demangle_print"
            ],
            "calling": [
                "FUN_0010b0fa"
            ],
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "current_name": "cplus_demangle_print",
            "entrypoint": "0x00104050",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "dcgettext": {
            "called": [
                "dcgettext"
            ],
            "calling": [
                "FUN_00104920",
                "FUN_00104a35",
                "FUN_0010c218",
                "FUN_0010bf86",
                "FUN_00108fe8",
                "FUN_00104966",
                "FUN_0010be88",
                "FUN_0010c6be",
                "FUN_00109a32",
                "FUN_00119970",
                "FUN_0010bc80",
                "FUN_00104cc1",
                "FUN_00107976",
                "FUN_0010b6ea",
                "FUN_00112b6e",
                "FUN_00108916",
                "FUN_001126c0",
                "FUN_00108fb9",
                "FUN_0010ba08",
                "FUN_00114190",
                "FUN_0010bd62",
                "FUN_00114dc7",
                "FUN_0010554f",
                "FUN_00108b3e",
                "FUN_00112996",
                "FUN_0010b0fa",
                "FUN_001086af",
                "FUN_00114690",
                "FUN_0010911f",
                "FUN_0010b800",
                "FUN_0010da0b",
                "FUN_0010dac0",
                "FUN_001083de",
                "FUN_00108179",
                "FUN_00115dc0",
                "FUN_00108200",
                "FUN_001152b6",
                "FUN_00113f50",
                "FUN_00114e50",
                "FUN_00109022",
                "FUN_001053b5",
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_001199d0",
                "FUN_0010882c",
                "FUN_0010c892",
                "FUN_00104ea2",
                "FUN_00112c1f",
                "FUN_00108375",
                "FUN_00108f08",
                "FUN_00114e00",
                "FUN_00104ad6",
                "FUN_00108808",
                "FUN_0010bf20",
                "FUN_0010827b",
                "FUN_00108d9a",
                "FUN_001163d0",
                "FUN_00115b70",
                "FUN_00115530",
                "FUN_0010c05d",
                "FUN_0010808f",
                "FUN_00105828",
                "FUN_00114460",
                "FUN_00116490",
                "FUN_0010e07c",
                "FUN_00119f70",
                "FUN_00108a2a",
                "FUN_00116b90",
                "FUN_0010914e",
                "FUN_0010551d",
                "FUN_0010e2f0",
                "FUN_00108072",
                "FUN_0010871c",
                "FUN_00107880",
                "FUN_0010543c",
                "FUN_0010be1a",
                "FUN_0010e6a8",
                "FUN_0011256b",
                "FUN_0010c2d2"
            ],
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "current_name": "dcgettext",
            "entrypoint": "0x00104240",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "dup": {
            "called": [
                "dup"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "dup",
            "entrypoint": "0x001042d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "entry": {
            "called": [
                "__libc_start_main",
                "FUN_00116b90"
            ],
            "calling": [],
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUNC_00116b90,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x00116aa0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "exit": {
            "called": [
                "exit"
            ],
            "calling": [
                "FUN_00119970",
                "FUN_00108916",
                "FUN_00108a2a"
            ],
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "current_name": "exit",
            "entrypoint": "0x001047f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fchmod": {
            "called": [
                "fchmod"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "current_name": "fchmod",
            "entrypoint": "0x001046c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fclose": {
            "called": [
                "fclose"
            ],
            "calling": [
                "FUN_00114460",
                "FUN_00107880",
                "FUN_00114dc7",
                "FUN_00116b90"
            ],
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fclose",
            "entrypoint": "0x00104210",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "feof": {
            "called": [
                "feof"
            ],
            "calling": [
                "FUN_00114dc7"
            ],
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "feof",
            "entrypoint": "0x001044d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ferror": {
            "called": [
                "ferror"
            ],
            "calling": [
                "FUN_00114460",
                "FUN_00114dc7",
                "FUN_00116b90"
            ],
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "ferror",
            "entrypoint": "0x00104130",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fflush": {
            "called": [
                "fflush"
            ],
            "calling": [
                "FUN_00119e70",
                "FUN_0010871c",
                "FUN_001126c0",
                "FUN_0011256b"
            ],
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fflush",
            "entrypoint": "0x001045e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "filename_cmp": {
            "called": [
                "filename_cmp"
            ],
            "calling": [
                "FUN_0010edb4",
                "FUN_00108f08",
                "FUN_00116b90"
            ],
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "current_name": "filename_cmp",
            "entrypoint": "0x001041a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fnmatch": {
            "called": [
                "fnmatch"
            ],
            "calling": [
                "FUN_0011a170",
                "FUN_00114190"
            ],
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "current_name": "fnmatch",
            "entrypoint": "0x00104340",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fopen": {
            "called": [
                "fopen"
            ],
            "calling": [
                "FUN_00114460",
                "FUN_00107880",
                "FUN_00114d60",
                "FUN_00116b90"
            ],
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "current_name": "fopen",
            "entrypoint": "0x00104750",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fprintf": {
            "called": [
                "fprintf"
            ],
            "calling": [
                "FUN_00104a35",
                "FUN_0010c892",
                "FUN_0010c218",
                "FUN_0010bf86",
                "FUN_00108fe8",
                "FUN_0010be88",
                "FUN_0010c6be",
                "FUN_00112c1f",
                "FUN_0010bc80",
                "FUN_0010b6ea",
                "FUN_00108f08",
                "FUN_00112b6e",
                "FUN_00108916",
                "FUN_001126c0",
                "FUN_0010bf20",
                "FUN_00108fb9",
                "FUN_0010bd62",
                "FUN_0010554f",
                "FUN_00108b3e",
                "FUN_00112996",
                "FUN_0010c05d",
                "FUN_0010b0fa",
                "FUN_0010911f",
                "FUN_00108a2a",
                "FUN_00116b90",
                "FUN_0010914e",
                "FUN_00119e70",
                "FUN_0010871c",
                "FUN_00109022",
                "FUN_0010be1a",
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_001199d0",
                "FUN_0011256b",
                "FUN_0010c2d2"
            ],
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "current_name": "fprintf",
            "entrypoint": "0x001044b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fputc": {
            "called": [
                "fputc"
            ],
            "calling": [
                "FUN_00104a35",
                "FUN_00108b3e",
                "FUN_0011256b"
            ],
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fputc",
            "entrypoint": "0x001043f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fputs": {
            "called": [
                "fputs"
            ],
            "calling": [
                "FUN_00104943",
                "FUN_001126c0"
            ],
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fputs",
            "entrypoint": "0x00104310",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fread": {
            "called": [
                "fread"
            ],
            "calling": [
                "FUN_00114460",
                "FUN_00114dc7",
                "FUN_00116b90"
            ],
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "current_name": "fread",
            "entrypoint": "0x00104160",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "free": {
            "called": [
                "free"
            ],
            "calling": [
                "FUN_0010abdd",
                "FUN_00104a35",
                "FUN_0010eafe",
                "FUN_0010b6ea",
                "FUN_0010e9a0",
                "FUN_0010d559",
                "FUN_0010a424",
                "FUN_0010e842",
                "FUN_0010ba08",
                "FUN_0010c95e",
                "FUN_0010c1c6",
                "FUN_0010554f",
                "FUN_00109ed3",
                "FUN_00116110",
                "FUN_0010e5db",
                "FUN_0010aa53",
                "FUN_00114b84",
                "FUN_0010a2b9",
                "FUN_0010b0fa",
                "FUN_001125fa",
                "FUN_00114690",
                "FUN_0010a77a",
                "FUN_0010a0e9",
                "FUN_0010dac0",
                "FUN_00108863",
                "FUN_001088ae",
                "FUN_0010e7c2",
                "FUN_0010b948",
                "FUN_0011173a",
                "FUN_00108466",
                "FUN_001199d0",
                "FUN_0010ee3f",
                "FUN_00104ea2",
                "FUN_0010a83e",
                "FUN_0010e918",
                "FUN_0010e8a9",
                "FUN_00109b2f",
                "FUN_0010e453",
                "FUN_00116030",
                "FUN_001163d0",
                "FUN_0010a181",
                "FUN_0010ebb0",
                "FUN_0010a377",
                "FUN_0010e07c",
                "FUN_0010a94e",
                "FUN_00116b90",
                "FUN_0010afd5",
                "FUN_0010551d",
                "FUN_00116852",
                "FUN_00107880",
                "FUN_001081e9",
                "FUN_0010e6a8",
                "FUN_0010d21c",
                "FUN_0011256b",
                "FUN_0010ae0e"
            ],
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "current_name": "free",
            "entrypoint": "0x001048f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fseek": {
            "called": [
                "fseek"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "current_name": "fseek",
            "entrypoint": "0x00104660",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ftell": {
            "called": [
                "ftell"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "current_name": "ftell",
            "entrypoint": "0x001044c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fwrite": {
            "called": [
                "fwrite"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_00108b3e",
                "FUN_001126c0"
            ],
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "current_name": "fwrite",
            "entrypoint": "0x00104800",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getc": {
            "called": [
                "getc"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "getc",
            "entrypoint": "0x001048b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getenv": {
            "called": [
                "getenv"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "current_name": "getenv",
            "entrypoint": "0x00104040",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getopt_long": {
            "called": [
                "getopt_long"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "current_name": "getopt_long",
            "entrypoint": "0x00104280",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_create_alloc": {
            "called": [
                "htab_create_alloc"
            ],
            "calling": [
                "FUN_00113f20",
                "FUN_00116b90"
            ],
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "current_name": "htab_create_alloc",
            "entrypoint": "0x00104720",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_delete": {
            "called": [
                "htab_delete"
            ],
            "calling": [
                "FUN_001054af"
            ],
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "current_name": "htab_delete",
            "entrypoint": "0x00104090",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_elements": {
            "called": [
                "htab_elements"
            ],
            "calling": [
                "FUN_0010554f",
                "FUN_00116b90"
            ],
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "current_name": "htab_elements",
            "entrypoint": "0x001044e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_find": {
            "called": [
                "htab_find"
            ],
            "calling": [
                "FUN_00108d9a",
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "current_name": "htab_find",
            "entrypoint": "0x001047d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_find_slot": {
            "called": [
                "htab_find_slot"
            ],
            "calling": [
                "FUN_00104cc1",
                "FUN_00108d9a",
                "FUN_00116b90"
            ],
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "current_name": "htab_find_slot",
            "entrypoint": "0x001044a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_hash_string": {
            "called": [
                "htab_hash_string"
            ],
            "calling": [
                "FUN_00108800"
            ],
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "current_name": "htab_hash_string",
            "entrypoint": "0x001048f8",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_traverse": {
            "called": [
                "htab_traverse"
            ],
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "current_name": "htab_traverse",
            "entrypoint": "0x00104580",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "lseek": {
            "called": [
                "lseek"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "current_name": "lseek",
            "entrypoint": "0x001042e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "malloc": {
            "called": [
                "malloc"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "current_name": "malloc",
            "entrypoint": "0x001045c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memcmp": {
            "called": [
                "memcmp"
            ],
            "calling": [
                "FUN_00116852",
                "FUN_0011a1b0"
            ],
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "current_name": "memcmp",
            "entrypoint": "0x00104420",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memcpy": {
            "called": [
                "memcpy"
            ],
            "calling": [
                "FUN_0011a480",
                "FUN_00116b90"
            ],
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memcpy",
            "entrypoint": "0x00104540",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memmove": {
            "called": [
                "memmove"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memmove",
            "entrypoint": "0x001046f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memset": {
            "called": [
                "memset"
            ],
            "calling": [
                "FUN_00119f70"
            ],
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memset",
            "entrypoint": "0x00104360",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "mkdtemp": {
            "called": [
                "mkdtemp"
            ],
            "calling": [
                "FUN_0011a0e0"
            ],
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "current_name": "mkdtemp",
            "entrypoint": "0x00104670",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "mkstemp": {
            "called": [
                "mkstemp"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "current_name": "mkstemp",
            "entrypoint": "0x00104640",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "mkstemps": {
            "called": [
                "mkstemps"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "current_name": "mkstemps",
            "entrypoint": "0x00104030",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "open": {
            "called": [
                "open"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "current_name": "open",
            "entrypoint": "0x00104730",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "printf": {
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00119970",
                "FUN_00107976",
                "FUN_00119f70",
                "FUN_00104943",
                "FUN_001199d0"
            ],
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "current_name": "printf",
            "entrypoint": "0x001042a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "putc": {
            "called": [
                "putc"
            ],
            "calling": [
                "FUN_00119e70",
                "FUN_00104943"
            ],
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "putc",
            "entrypoint": "0x00104480",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "qsort": {
            "called": [
                "qsort"
            ],
            "calling": [
                "FUN_00116852",
                "FUN_001086af",
                "FUN_0010554f"
            ],
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "current_name": "qsort",
            "entrypoint": "0x00104140",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "read": {
            "called": [
                "read"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "current_name": "read",
            "entrypoint": "0x00104410",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "rmdir": {
            "called": [
                "rmdir"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114b84"
            ],
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "current_name": "rmdir",
            "entrypoint": "0x00104230",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "setlocale": {
            "called": [
                "setlocale"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "current_name": "setlocale",
            "entrypoint": "0x00104680",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "sprintf": {
            "called": [
                "sprintf"
            ],
            "calling": [
                "FUN_0010abdd",
                "FUN_0010eafe",
                "FUN_0010a83e",
                "FUN_0010e9a0",
                "FUN_0010e918",
                "FUN_00109e76",
                "FUN_0010e8a9",
                "FUN_0010a424",
                "FUN_0010e842",
                "FUN_0010ba08",
                "FUN_0010e453",
                "FUN_00109ed3",
                "FUN_0010e5db",
                "FUN_0010a181",
                "FUN_0010aa53",
                "FUN_0010ebb0",
                "FUN_0010a377",
                "FUN_0010a2b9",
                "FUN_0010a69a",
                "FUN_001125fa",
                "FUN_0010a77a",
                "FUN_0010a0e9",
                "FUN_0010b800",
                "FUN_0010a94e",
                "FUN_00109d97",
                "FUN_0010ab4d",
                "FUN_0010e7c2",
                "FUN_0010b948",
                "FUN_00109cf4",
                "FUN_0010e6a8",
                "FUN_0010ee3f",
                "FUN_00109dfe",
                "FUN_0010ae0e"
            ],
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "current_name": "sprintf",
            "entrypoint": "0x001047e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "stat": {
            "called": [
                "stat"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_0011283f",
                "FUN_00113f50",
                "FUN_00116b90"
            ],
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "stat",
            "entrypoint": "0x001044f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcasecmp": {
            "called": [
                "strcasecmp"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "strcasecmp",
            "entrypoint": "0x00104080",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcat": {
            "called": [
                "strcat"
            ],
            "calling": [
                "FUN_00115530",
                "FUN_0010ee3f",
                "FUN_0010ae0e"
            ],
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "current_name": "strcat",
            "entrypoint": "0x001047c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strchr": {
            "called": [
                "strchr"
            ],
            "calling": [
                "FUN_00104ad6",
                "FUN_0011173a",
                "FUN_00114c80",
                "FUN_0010ee3f",
                "FUN_00116b90"
            ],
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "current_name": "strchr",
            "entrypoint": "0x00104290",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcmp": {
            "called": [
                "strcmp"
            ],
            "calling": [
                "FUN_0010c6be",
                "FUN_0010b0fa",
                "FUN_0010922b",
                "FUN_0010d559",
                "FUN_00116b90",
                "FUN_0010914e",
                "FUN_00115f50",
                "FUN_0010afd5",
                "FUN_00114190",
                "FUN_00104943",
                "FUN_0010554f",
                "FUN_0011173a",
                "FUN_00115b70",
                "FUN_00108c86",
                "FUN_0010c7a0",
                "FUN_00115530",
                "FUN_0010ee3f",
                "FUN_00108898"
            ],
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "strcmp",
            "entrypoint": "0x00104470",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcpy": {
            "called": [
                "strcpy"
            ],
            "calling": [
                "FUN_0010a424",
                "FUN_0011378f",
                "FUN_0010554f",
                "FUN_00115530",
                "FUN_001199d0",
                "FUN_0010ee3f",
                "FUN_00116b90",
                "FUN_0010ae0e"
            ],
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "current_name": "strcpy",
            "entrypoint": "0x00104100",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strdup": {
            "called": [
                "strdup"
            ],
            "calling": [
                "FUN_00108d9a"
            ],
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "current_name": "strdup",
            "entrypoint": "0x00104880",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strerror": {
            "called": [
                "strerror"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00104966",
                "FUN_00108200",
                "FUN_00114690",
                "FUN_00114460",
                "FUN_00107880",
                "FUN_0010543c",
                "FUN_00116b90",
                "FUN_001199d0",
                "FUN_0010882c"
            ],
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "current_name": "strerror",
            "entrypoint": "0x00104890",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strlen": {
            "called": [
                "strlen"
            ],
            "calling": [
                "FUN_0010abdd",
                "FUN_0010eafe",
                "FUN_0010a83e",
                "FUN_0010e9a0",
                "FUN_00104ad6",
                "FUN_0010e918",
                "FUN_0010d559",
                "FUN_0010e8a9",
                "FUN_0010a424",
                "FUN_0010e842",
                "FUN_0010ba08",
                "FUN_0010c95e",
                "FUN_0010e453",
                "FUN_00104943",
                "FUN_0010554f",
                "FUN_00109ed3",
                "FUN_00115530",
                "FUN_0010e5db",
                "FUN_0010a181",
                "FUN_0010aa53",
                "FUN_0010ebb0",
                "FUN_0010a377",
                "FUN_0010a2b9",
                "FUN_00113ede",
                "FUN_0010a69a",
                "FUN_0010b0fa",
                "FUN_001125fa",
                "FUN_0010a77a",
                "FUN_0010a0e9",
                "FUN_0010b800",
                "FUN_0010a94e",
                "FUN_00116b90",
                "FUN_0010ab4d",
                "FUN_0010e7c2",
                "FUN_0010e2f0",
                "FUN_00113fb0",
                "FUN_0011378f",
                "FUN_00109bbb",
                "FUN_0011173a",
                "FUN_00108c86",
                "FUN_0010e6a8",
                "FUN_001199d0",
                "FUN_0010ee3f",
                "FUN_0010d21c",
                "FUN_0010ae0e"
            ],
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "current_name": "strlen",
            "entrypoint": "0x00104270",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strncasecmp": {
            "called": [
                "strncasecmp"
            ],
            "calling": [
                "FUN_00104ad6",
                "FUN_00116b90"
            ],
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "current_name": "strncasecmp",
            "entrypoint": "0x001045d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strncmp": {
            "called": [
                "strncmp"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_00113fb0",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "current_name": "strncmp",
            "entrypoint": "0x001040e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strncpy": {
            "called": [
                "strncpy"
            ],
            "calling": [
                "FUN_00104ad6",
                "FUN_00116b90"
            ],
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "current_name": "strncpy",
            "entrypoint": "0x001040d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strnlen": {
            "called": [
                "strnlen"
            ],
            "calling": [
                "FUN_0011a480"
            ],
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "current_name": "strnlen",
            "entrypoint": "0x00104380",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strrchr": {
            "called": [
                "strrchr"
            ],
            "calling": [
                "FUN_00114cf0"
            ],
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "current_name": "strrchr",
            "entrypoint": "0x001042c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strspn": {
            "called": [
                "strspn"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "current_name": "strspn",
            "entrypoint": "0x001043e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strstr": {
            "called": [
                "strstr"
            ],
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "current_name": "strstr",
            "entrypoint": "0x001048c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strtod": {
            "called": [
                "strtod"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "current_name": "strtod",
            "entrypoint": "0x00104170",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strtol": {
            "called": [
                "strtol"
            ],
            "calling": [
                "FUN_00104943",
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_0010d559",
                "FUN_00116b90"
            ],
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "current_name": "strtol",
            "entrypoint": "0x00104510",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strtoul": {
            "called": [
                "strtoul"
            ],
            "calling": [
                "FUN_00109a32",
                "FUN_00116b90"
            ],
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "current_name": "strtoul",
            "entrypoint": "0x00104790",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "textdomain": {
            "called": [
                "textdomain"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "current_name": "textdomain",
            "entrypoint": "0x001041d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_0010e439": {
            "additional_data": {
                "*((object_address + 0x210))": {
                    "1": "object_property"
                },
                "*(undefined8 *)(param_1 + 0x210)": {
                    "1": "memory_location"
                },
                "0": {
                    "1": "arg2"
                },
                "0x210": {
                    "1": "offset"
                },
                "0x84": {
                    "1": "constant_1"
                },
                "FUN_0010e2f0": {
                    "1": "call_specific_function",
                    "2": "process_data",
                    "4": "call_sub_function"
                },
                "param_1": {
                    "1": "param_address",
                    "16": "base_address",
                    "2": "base_addr",
                    "3": "object_address"
                },
                "param_1 + 0x210": {
                    "1": "context_with_offset"
                },
                "param_2": {
                    "1": "data",
                    "13": "new_value",
                    "2": "new_param",
                    "4": "param_value",
                    "6": "value"
                },
                "thunk_FUN_0010e439": {
                    "1": "update_param_data",
                    "14": "set_param_and_call_function",
                    "2": "update_data_and_call_function"
                }
            },
            "called": [
                "FUN_0010e439"
            ],
            "calling": [
                "FUN_0011378f"
            ],
            "code": "\nvoid set_param_and_call_function_thunk_0010e439(long base_address,undefined8 new_value)\n\n{\n  *(undefined8 *)(base_address + 0x210) = new_value;\n  FUN_0010e2f0(base_address,0x84,0,0,new_value);\n  return;\n}\n\n",
            "current_name": "set_param_and_call_function_thunk_0010e439",
            "entrypoint": "0x0010e451",
            "imported": false,
            "improved": true,
            "renaming": {
                "param_1": "base_address",
                "param_2": "new_value",
                "thunk_FUN_0010e439": "set_param_and_call_function_thunk_0010e439"
            },
            "skipped": false,
            "tags": []
        },
        "unlink": {
            "called": [
                "unlink"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00108200",
                "FUN_001199d0"
            ],
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "current_name": "unlink",
            "entrypoint": "0x001040c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "unlink_if_ordinary": {
            "called": [
                "unlink_if_ordinary"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "current_name": "unlink_if_ordinary",
            "entrypoint": "0x00104610",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "utimensat": {
            "called": [
                "utimensat"
            ],
            "calling": [
                "FUN_0011a350"
            ],
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "current_name": "utimensat",
            "entrypoint": "0x00104060",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "vfprintf": {
            "called": [
                "vfprintf"
            ],
            "calling": [
                "FUN_00119e70",
                "FUN_001126c0"
            ],
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "current_name": "vfprintf",
            "entrypoint": "0x00104770",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "write": {
            "called": [
                "write"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "current_name": "write",
            "entrypoint": "0x001041c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xcalloc": {
            "called": [
                "xcalloc"
            ],
            "calling": [
                "FUN_001163d0"
            ],
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "current_name": "xcalloc",
            "entrypoint": "0x00104918",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xexit": {
            "called": [
                "xexit"
            ],
            "calling": [
                "FUN_00115dc0",
                "FUN_00119dd0",
                "FUN_00116030",
                "FUN_00116b90",
                "FUN_001083b7"
            ],
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "current_name": "xexit",
            "entrypoint": "0x00104760",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc": {
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_00113e23",
                "FUN_0010c218",
                "FUN_0010bf86",
                "FUN_0010be88",
                "FUN_0010c6be",
                "FUN_0010bc80",
                "FUN_0010eafe",
                "FUN_0010b6ea",
                "FUN_0010e9a0",
                "FUN_0010a424",
                "FUN_0010e842",
                "FUN_0010ba08",
                "FUN_00113bfa",
                "FUN_00114190",
                "FUN_0010bd62",
                "FUN_0010554f",
                "FUN_00112894",
                "FUN_00109ed3",
                "FUN_00116110",
                "FUN_0010e5db",
                "FUN_0010aa53",
                "FUN_0010a2b9",
                "FUN_0010a69a",
                "FUN_001125fa",
                "FUN_0010a77a",
                "FUN_0010a0e9",
                "FUN_0010da0b",
                "FUN_00114c80",
                "FUN_0010dac0",
                "FUN_0010ab4d",
                "FUN_0010e7c2",
                "FUN_00109022",
                "FUN_00109b52",
                "FUN_0011173a",
                "FUN_00108c86",
                "FUN_00113ce0",
                "FUN_0010ee3f",
                "FUN_001199d0",
                "FUN_00113b98",
                "FUN_00104ea2",
                "FUN_00113da9",
                "FUN_00108f08",
                "FUN_0010a83e",
                "FUN_00114cf0",
                "FUN_00109a0b",
                "FUN_00104ad6",
                "FUN_0011a480",
                "FUN_0010d882",
                "FUN_0010e918",
                "FUN_0010e8a9",
                "FUN_00112904",
                "FUN_0010e453",
                "FUN_00116030",
                "FUN_00108d9a",
                "FUN_001163d0",
                "FUN_00114d60",
                "FUN_00113d6e",
                "FUN_00115530",
                "FUN_0010c05d",
                "FUN_0010a181",
                "FUN_0010ebb0",
                "FUN_0010a377",
                "FUN_00114460",
                "FUN_0010bbd3",
                "FUN_0010e07c",
                "FUN_0010a94e",
                "FUN_00116b90",
                "FUN_0010afd5",
                "FUN_00116852",
                "FUN_00113c43",
                "FUN_0010c139",
                "FUN_00107880",
                "FUN_00112925",
                "FUN_0011378f",
                "FUN_0010c7a0",
                "FUN_0010e6a8",
                "FUN_0010ae0e"
            ],
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "current_name": "xmalloc",
            "entrypoint": "0x00104390",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc_set_program_name": {
            "called": [
                "xmalloc_set_program_name"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "current_name": "xmalloc_set_program_name",
            "entrypoint": "0x001043b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xrealloc": {
            "called": [
                "xrealloc"
            ],
            "calling": [
                "FUN_0010abdd",
                "FUN_00109c2e",
                "FUN_0010d7d4",
                "FUN_0010b6ea",
                "FUN_0010e07c",
                "FUN_00119f70",
                "FUN_00109be3",
                "FUN_00116b90",
                "FUN_0010dac0",
                "FUN_0010ab4d",
                "FUN_0010e2f0",
                "FUN_00114dc7",
                "FUN_0011173a",
                "FUN_00109ed3",
                "FUN_0010ee3f",
                "FUN_0010aa53"
            ],
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "current_name": "xrealloc",
            "entrypoint": "0x001042b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xstrdup": {
            "called": [
                "xstrdup"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_001088ae",
                "FUN_00109b52",
                "FUN_0010554f",
                "FUN_0011173a",
                "FUN_00116b90"
            ],
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "current_name": "xstrdup",
            "entrypoint": "0x001043d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_00104020",
            "FUN_00104920",
            "FUN_00104943",
            "FUN_00104966",
            "FUN_00104a35",
            "FUN_00104ad6",
            "FUN_00104bba",
            "FUN_00104c36",
            "FUN_00104cc1",
            "FUN_00104d1c",
            "FUN_00104d25",
            "FUN_00104ea2",
            "FUN_001052a2",
            "FUN_001053b5",
            "FUN_001053d5",
            "FUN_0010540e",
            "FUN_0010543c",
            "FUN_001054af",
            "FUN_0010551d",
            "FUN_0010554f",
            "FUN_00105828",
            "FUN_00108072",
            "FUN_0010808f",
            "FUN_00108179",
            "FUN_001081e9",
            "FUN_00108200",
            "FUN_00108237",
            "FUN_0010827b",
            "FUN_0010829e",
            "FUN_001082b3",
            "FUN_001082c3",
            "FUN_001082df",
            "FUN_00108375",
            "FUN_001083b7",
            "FUN_001083de",
            "FUN_00108466",
            "FUN_0010847a",
            "FUN_001086af",
            "FUN_0010870e",
            "FUN_0010871c",
            "FUN_0010875d",
            "FUN_001087da",
            "FUN_001087fd",
            "FUN_00108800",
            "FUN_00108808",
            "FUN_0010882c",
            "FUN_00108863",
            "FUN_00108898",
            "FUN_001088ae",
            "FUN_00108916",
            "FUN_00108a2a",
            "FUN_00108b3e",
            "FUN_00108c86",
            "FUN_00108d9a",
            "FUN_00108e76",
            "FUN_00108ea1",
            "FUN_00108f05",
            "FUN_00108f08",
            "FUN_00108fb9",
            "FUN_00108fe8",
            "FUN_00109022",
            "FUN_0010911f",
            "FUN_0010914e",
            "FUN_0010922b",
            "FUN_00109a0b",
            "FUN_00109a32",
            "FUN_00109ab1",
            "FUN_00109b2f",
            "FUN_00109b52",
            "FUN_00109bbb",
            "FUN_00109be3",
            "FUN_00109c2e",
            "FUN_00109cf4",
            "FUN_00109d3e",
            "FUN_00109d5c",
            "FUN_00109d97",
            "FUN_00109dfe",
            "FUN_00109e76",
            "FUN_00109ed3",
            "FUN_0010a083",
            "FUN_0010a0a0",
            "FUN_0010a0bd",
            "FUN_0010a0d3",
            "FUN_0010a0e9",
            "FUN_0010a181",
            "FUN_0010a2b9",
            "FUN_0010a377",
            "FUN_0010a424",
            "FUN_0010a69a",
            "FUN_0010a77a",
            "FUN_0010a83e",
            "FUN_0010a94e",
            "FUN_0010aa53",
            "FUN_0010ab4d",
            "FUN_0010abdd",
            "FUN_0010add5",
            "FUN_0010adf2",
            "FUN_0010ae0e",
            "FUN_0010afd5",
            "FUN_0010b0fa",
            "FUN_0010b6ea",
            "FUN_0010b800",
            "FUN_0010b948",
            "FUN_0010ba08",
            "FUN_0010bb52",
            "FUN_0010bba1",
            "FUN_0010bbd3",
            "FUN_0010bc80",
            "FUN_0010bd62",
            "FUN_0010be1a",
            "FUN_0010be88",
            "FUN_0010bf20",
            "FUN_0010bf86",
            "FUN_0010c05d",
            "FUN_0010c139",
            "FUN_0010c1c6",
            "FUN_0010c218",
            "FUN_0010c2d2",
            "FUN_0010c6be",
            "FUN_0010c7a0",
            "FUN_0010c892",
            "FUN_0010c95e",
            "FUN_0010d21c",
            "FUN_0010d559",
            "FUN_0010d7d4",
            "FUN_0010d882",
            "FUN_0010da0b",
            "FUN_0010dac0",
            "FUN_0010e07c",
            "FUN_0010e2f0",
            "FUN_0010e439",
            "thunk_FUN_0010e439",
            "FUN_0010e453",
            "FUN_0010e5db",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_0010e842",
            "FUN_0010e8a9",
            "FUN_0010e918",
            "FUN_0010e9a0",
            "FUN_0010eafe",
            "FUN_0010ebb0",
            "FUN_0010ec73",
            "FUN_0010ed2c",
            "FUN_0010edb4",
            "FUN_0011173a",
            "FUN_00112502",
            "FUN_0011256b",
            "FUN_001125fa",
            "FUN_001126c0",
            "FUN_0011283f",
            "FUN_00112894",
            "FUN_00112904",
            "FUN_00112925",
            "FUN_00112996",
            "FUN_001129f4",
            "FUN_00112a33",
            "FUN_00112b6e",
            "FUN_00112c1f",
            "FUN_001135a5",
            "FUN_0011378f",
            "FUN_00113a4d",
            "FUN_00113b1e",
            "FUN_00113b4a",
            "FUN_00113b71",
            "FUN_00113b98",
            "FUN_00113bfa",
            "FUN_00113c43",
            "FUN_00113cb9",
            "FUN_00113ce0",
            "FUN_00113d3a",
            "FUN_00113d6e",
            "FUN_00113da9",
            "FUN_00113df2",
            "FUN_00113dfe",
            "FUN_00113e17",
            "FUN_00113e23",
            "FUN_00113e5e",
            "FUN_00113ede",
            "FUN_00113f20",
            "FUN_00113f50",
            "FUN_00113fb0",
            "FUN_00113fe0",
            "FUN_00114190",
            "FUN_00114460",
            "FUN_00114690",
            "FUN_00114b84",
            "FUN_00114c20",
            "FUN_00114c80",
            "FUN_00114cf0",
            "FUN_00114d50",
            "FUN_00114d60",
            "FUN_00114dc7",
            "FUN_00114e00",
            "FUN_00115530",
            "FUN_00115970",
            "FUN_001159d0",
            "FUN_00115a90",
            "FUN_00115b70",
            "FUN_00115d00",
            "FUN_00115d70",
            "FUN_00115dc0",
            "FUN_00115f30",
            "FUN_00115f50",
            "FUN_00116030",
            "FUN_00116110",
            "FUN_001163d0",
            "FUN_00116490",
            "FUN_00116852",
            "FUN_00119940",
            "FUN_00119970",
            "FUN_001199d0",
            "FUN_00119dd0",
            "FUN_00119e70",
            "FUN_00119ed0",
            "FUN_00119f70",
            "FUN_0011a0e0",
            "FUN_0011a110",
            "FUN_0011a170",
            "FUN_0011a1b0",
            "FUN_0011a250",
            "FUN_0011a2e0",
            "FUN_0011a350",
            "FUN_0011a390",
            "FUN_0011a480"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 1213335
}