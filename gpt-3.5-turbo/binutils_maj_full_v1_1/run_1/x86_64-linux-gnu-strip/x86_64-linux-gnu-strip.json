{
    "functions": {
        "FUN_00104020": {
            "additional_data": {
                "0x0": {
                    "1": "jump_target_address"
                },
                "DAT": {
                    "1": "dat"
                },
                "DAT_": {
                    "1": ""
                },
                "FUN_00104020": {
                    "1": "execute_indirect_function",
                    "15": "execute_indirect_jump",
                    "2": "execute_function",
                    "6": "execute_indirect_call"
                },
                "PTR": {
                    "1": "ptr"
                },
                "PTR_": {
                    "1": ""
                },
                "PTR_undefined": {
                    "1": "target_function_ptr"
                },
                "code": {
                    "1": "indirect_jump_function",
                    "4": "function_pointer"
                },
                "original_parameter_name_1": {
                    "1": "parameter1"
                },
                "original_variable_name_1": {
                    "1": "variable1"
                },
                "undefined": {
                    "1": "target_address",
                    "6": "function_pointer"
                },
                "void": {
                    "1": "void"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_indirect_jump_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(function_pointer *)(function_pointer *)0x0)();\n  return;\n}\n\n",
            "current_name": "execute_indirect_jump_00104020",
            "entrypoint": "0x00104020",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104020": "execute_indirect_jump_00104020",
                "code": "function_pointer",
                "undefined": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104920": {
            "additional_data": {
                "FIND_AND_PRINT_BAD_NUMBER": {
                    "1": "print_error_and_exit"
                },
                "FUN_00104920": {
                    "1": "print_error_invalid_number",
                    "10": "print_error_and_exit",
                    "3": "print_error_message",
                    "5": "print_error_bad_number"
                },
                "dcgettext": {
                    "1": "get_text",
                    "4": "get_error_message"
                },
                "print_error_and_exit_00119dd0": {
                    "5": "print_error_and_exit"
                },
                "uVar1": {
                    "1": "bad_number_error_message",
                    "26": "error_message",
                    "4": "error_string"
                }
            },
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "calling": [
                "FUN_00119940"
            ],
            "code": "\nvoid print_error_and_exit_00104920(void)\n\n{\n  undefined8 error_message;\n  \n  error_message = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  print_error_and_exit_00104920(error_message);\n}\n\n",
            "current_name": "print_error_and_exit_00104920",
            "entrypoint": "0x00104920",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104920": "print_error_and_exit_00104920",
                "dcgettext": "get_error_message",
                "print_error_and_exit_00119dd0": "print_error_and_exit",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104943": {
            "additional_data": {
                "FUN_00104943": {
                    "1": "extract_and_print_functions",
                    "2": "print_binary_information",
                    "3": "print_arch_mach_info",
                    "6": "print_binary_info"
                },
                "_stdout": {
                    "1": "standard_output"
                },
                "iVar1": {
                    "1": "num_conversion",
                    "2": "int_value",
                    "6": "default_value"
                },
                "iVar2": {
                    "1": "tmp_value",
                    "2": "strcmp_result",
                    "3": "arch_mach_comparison",
                    "4": "arch_index",
                    "8": "comparison_result"
                },
                "iVar7": {
                    "1": "arch_mach_loop",
                    "12": "arch_mach_index",
                    "8": "arch_index"
                },
                "iVar9": {
                    "1": "current",
                    "2": "line_index",
                    "6": "current_index"
                },
                "in_RAX": {
                    "1": "binary_string",
                    "23": "input_string",
                    "5": "input_str"
                },
                "lVar3": {
                    "1": "index",
                    "2": "long_value",
                    "3": "converted_num",
                    "9": "converted_value"
                },
                "lVar3 * 0x60": {
                    "1": "current_string_index"
                },
                "lVar8": {
                    "1": "starting_line_index",
                    "2": "start",
                    "7": "start_index"
                },
                "lVar8 * 0x60": {
                    "1": "string_index"
                },
                "lvar3": {
                    "1": "converted_integer"
                },
                "param_11": {
                    "1": "format_specifier",
                    "3": "arch_mach_info"
                },
                "param_13": {
                    "1": "lines_array",
                    "2": "data_ptr",
                    "3": "data_pointer",
                    "4": "binary_data"
                },
                "param_7": {
                    "1": "num_arch_mach_info",
                    "2": "start_index",
                    "3": "limit",
                    "4": "param7"
                },
                "pcVar5": {
                    "1": "arch_info",
                    "10": "arch_mach_string",
                    "2": "printable_string",
                    "5": "arch_string"
                },
                "sVar4": {
                    "1": "entry_length",
                    "16": "string_length",
                    "2": "length",
                    "5": "str_length"
                },
                "uStack000000000000000c": {
                    "1": "stack_var",
                    "4": "indentation_level",
                    "7": "indentation"
                },
                "uVar10": {
                    "1": "counter",
                    "14": "loop_counter",
                    "3": "loop_var"
                },
                "uVar11": {
                    "1": "arch_mach_counter",
                    "2": "modified_arch_mach_index",
                    "4": "arch_mach_offset",
                    "5": "arch_offset"
                },
                "uVar6": {
                    "1": "printable_arch",
                    "12": "printable_arch_mach",
                    "2": "printable_arch_string",
                    "3": "arch_mach_printable"
                },
                "unaff_R15D": {
                    "1": "stack_var",
                    "2": "stack_param",
                    "4": "stack_value"
                }
            },
            "called": [
                "strlen",
                "printf",
                "putc",
                "strcmp",
                "fputs",
                "strtol",
                "bfd_printable_arch_mach"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\n\n\nvoid print_binary_info_00104943(void)\n\n{\n  int default_value;\n  int comparison_result;\n  char *input_string;\n  long converted_value;\n  size_t string_length;\n  char *arch_mach_string;\n  undefined8 printable_arch_mach;\n  int arch_mach_index;\n  long start_index;\n  int current_index;\n  uint stack_value;\n  ulong loop_counter;\n  uint arch_offset;\n  int param7;\n  uint indentation;\n  undefined8 arch_mach_info;\n  long param13;\n  \n  converted_value = strtol(input_string,(char **)0x0,10);\n  default_value = (int)converted_value;\n  current_index = param7;\n  indentation = stack_value;\n  if (default_value == 0) {\n    default_value = 0x50;\n  }\n  do {\n    param7 = current_index;\n    if (arch_mach_info._4_4_ <= param7) {\n      return;\n    }\n    start_index = (long)param7;\n    arch_mach_index = (default_value - indentation) + -1;\n    converted_value = start_index;\n    do {\n      current_index = (int)converted_value;\n      if (arch_mach_info._4_4_ <= current_index) break;\n      string_length = strlen(*(char **)(param13 + converted_value * 0x60));\n      converted_value = converted_value + 1;\n      arch_mach_index = (arch_mach_index - (int)string_length) + -1;\n    } while (-1 < arch_mach_index);\n    printf(\"\\n%*s\",(ulong)(indentation + 1),&DAT_0011b4a1);\n    for (converted_value = start_index * 0x60; ((ulong)(uint)(current_index - param7) + start_index) * 0x60 - converted_value != 0;\n        converted_value = converted_value + 0x60) {\n      printf(\"%s \",*(undefined8 *)(param13 + converted_value));\n    }\n    arch_mach_index = 2;\n    putc(10,standard_output);\n    do {\n      arch_mach_string = (char *)bfd_printable_arch_mach(arch_mach_index,0);\n      comparison_result = strcmp(arch_mach_string,\"UNKNOWN!\");\n      if (comparison_result != 0) {\n        printable_arch_mach = bfd_printable_arch_mach(arch_mach_index,0);\n        printf(\"%*s \",(ulong)indentation,printable_arch_mach);\n        arch_offset = arch_mach_index - 2;\n        converted_value = start_index * 0x60;\n        comparison_result = param7;\n        while (current_index != comparison_result) {\n          arch_mach_string = *(char **)(param13 + converted_value);\n          if (*(char *)((long)(char **)(param13 + converted_value) + (ulong)arch_offset + 8) == '\\0') {\n            string_length = strlen(arch_mach_string);\n            for (loop_counter = string_length & 0xffffffff; (int)loop_counter != 0; loop_counter = (ulong)((int)loop_counter - 1)) {\n              putc(0x2d,standard_output);\n            }\n          }\n          else {\n            fputs(arch_mach_string,standard_output);\n          }\n          comparison_result = comparison_result + 1;\n          if (current_index != comparison_result) {\n            putc(0x20,standard_output);\n          }\n          converted_value = converted_value + 0x60;\n        }\n        putc(10,standard_output);\n      }\n      arch_mach_index = arch_mach_index + 1;\n    } while (arch_mach_index != 0x57);\n  } while( true );\n}\n\n",
            "current_name": "print_binary_info_00104943",
            "entrypoint": "0x00104943",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104943": "print_binary_info_00104943",
                "_stdout": "standard_output",
                "iVar1": "default_value",
                "iVar2": "comparison_result",
                "iVar7": "arch_mach_index",
                "iVar9": "current_index",
                "in_RAX": "input_string",
                "lVar3": "converted_value",
                "lVar8": "start_index",
                "param_11": "arch_mach_info",
                "param_13": "param13",
                "param_7": "param7",
                "pcVar5": "arch_mach_string",
                "sVar4": "string_length",
                "uStack000000000000000c": "indentation",
                "uVar10": "loop_counter",
                "uVar11": "arch_offset",
                "uVar6": "printable_arch_mach",
                "unaff_R15D": "stack_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104966": {
            "additional_data": {
                "*piVar1": {
                    "2": "errno_ptr"
                },
                "FUN_00104966": {
                    "1": "handle_file_not_found",
                    "17": "handle_file_error",
                    "2": "file_not_found_error",
                    "3": "print_file_error",
                    "4": "print_error_message"
                },
                "dcgettext": {
                    "2": "get_error_message"
                },
                "piVar1": {
                    "1": "errno_location_ptr",
                    "15": "errno_ptr",
                    "2": "errno_location",
                    "4": "error_ptr"
                },
                "print_error_message_00119ed0": {
                    "1": "print_error_message_helper",
                    "7": "print_error_message"
                },
                "uVar2": {
                    "1": "localized_message",
                    "26": "error_message",
                    "3": "error_msg"
                }
            },
            "called": [
                "strerror",
                "__errno_location",
                "FUN_00119ed0",
                "dcgettext"
            ],
            "calling": [
                "FUN_00113f50"
            ],
            "code": "\nundefined8 handle_file_error_00104966(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_message;\n  \n  errno_ptr = __errno_location();\n  if (*errno_ptr == 2) {\n    error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n    print_error_message(error_message);\n  }\n  else {\n    strerror(*errno_ptr);\n    error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    print_error_message(error_message);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "current_name": "handle_file_error_00104966",
            "entrypoint": "0x00104966",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104966": "handle_file_error_00104966",
                "dcgettext": "get_error_message",
                "piVar1": "errno_ptr",
                "print_error_message_00119ed0": "print_error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104a35": {
            "additional_data": {
                "FUN_00104a35": {
                    "31": "print_supported_targets"
                },
                "__ptr": {
                    "1": "target_list_ptr",
                    "30": "target_list"
                },
                "fprintf": {
                    "1": "print_formatted"
                },
                "fputc": {
                    "1": "print_character"
                },
                "lVar1": {
                    "1": "target_addr",
                    "2": "target_pointer",
                    "4": "target_id",
                    "5": "current_target_value",
                    "8": "current_target"
                },
                "param_1": {
                    "28": "target",
                    "3": "target_name"
                },
                "param_2": {
                    "28": "output_file",
                    "3": "file"
                },
                "pcVar2": {
                    "1": "support_str",
                    "15": "message",
                    "2": "target_message",
                    "3": "text"
                },
                "plVar3": {
                    "1": "current_ptr",
                    "16": "current_target",
                    "3": "target_ptr",
                    "4": "current_target_ptr",
                    "6": "ptr"
                }
            },
            "called": [
                "bfd_target_list",
                "fputc",
                "dcgettext",
                "free",
                "fprintf"
            ],
            "calling": [
                "FUN_00108916",
                "FUN_00108a2a"
            ],
            "code": "\nvoid print_supported_targets_00104a35(long target,FILE *output_file)\n\n{\n  long current_target;\n  char *message;\n  long *target_list;\n  long *current_target;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(output_file,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(output_file,message,target);\n  }\n  target_list = (long *)bfd_target_list();\n  current_target = target_list;\n  while( true ) {\n    current_target = *current_target;\n    current_target = current_target + 1;\n    if (current_target == 0) break;\n    fprintf(output_file,\" %s\");\n  }\n  fputc(10,output_file);\n  free(target_list);\n  return;\n}\n\n",
            "current_name": "print_supported_targets_00104a35",
            "entrypoint": "0x00104a35",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "__ptr": "target_list",
                "fprintf": "print_formatted",
                "fputc": "print_character",
                "lVar1": "current_target",
                "param_1": "target",
                "param_2": "output_file",
                "pcVar2": "message",
                "plVar3": "current_target"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104ad6": {
            "additional_data": {
                "FUN_00104ad6": {
                    "1": "parse_section_flag",
                    "26": "parse_section_flags"
                },
                "__s": {
                    "1": "str",
                    "3": "current_flag",
                    "5": "section_flag",
                    "8": "section"
                },
                "auVar6": {
                    "1": "result_struct",
                    "13": "result",
                    "8": "return_value"
                },
                "iVar1": {
                    "1": "is_match",
                    "25": "comparison_result"
                },
                "iVar5": {
                    "1": "delimiter_offset",
                    "2": "section_length_int"
                },
                "iVar5: , : section_length_int: ,\n: unaff_R14D": {
                    "1": "section_flags"
                },
                "pcVar3": {
                    "1": "comma_pointer",
                    "15": "comma_position",
                    "2": "delimiter_position",
                    "3": "delimiter"
                },
                "sVar4": {
                    "1": "str_length",
                    "2": "substring_length",
                    "4": "string_length",
                    "5": "section_name_length",
                    "8": "section_length"
                },
                "uVar2": {
                    "1": "error_string",
                    "14": "error_message"
                },
                "unaff_R14D": {
                    "1": "section_flags_result",
                    "18": "section_flags",
                    "2": "parsed_flags",
                    "4": "flags"
                },
                "unaff_R15": {
                    "1": "compare_flag",
                    "2": "section_flag",
                    "3": "flag_to_compare",
                    "6": "supported_flags",
                    "8": "section_name"
                },
                "unaff_RBP": {
                    "1": "remaining_flags",
                    "10": "current_flag",
                    "2": "current_section",
                    "5": "current_position"
                },
                "unaff_retaddr": {
                    "28": "return_address"
                }
            },
            "called": [
                "strlen",
                "FUN_00104ad6",
                "xmalloc",
                "strchr",
                "FUN_00119ed0",
                "dcgettext",
                "FUN_00119dd0",
                "strncpy",
                "strncasecmp"
            ],
            "calling": [
                "FUN_00104ad6"
            ],
            "code": "\nundefined  [16] parse_section_flags_00104ad6(void)\n\n{\n  int comparison_result;\n  undefined8 error_message;\n  char *comma_position;\n  char *current_flag;\n  char *section;\n  size_t section_length;\n  int section_name_index;\n  uint section_flags;\n  char *section_name;\n  undefined result [16];\n  undefined8 return_address;\n  \n  do {\n    section_flags = section_flags | 0x2000;\n    section = current_flag;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (section == (char *)0x0) {\n                result._4_4_ = 0;\n                result._0_4_ = section_flags;\n                result._8_8_ = return_address;\n                return result;\n              }\n              comma_position = strchr(section,0x2c);\n              if (comma_position == (char *)0x0) {\n                section_length = strlen(section);\n                section_name_index = (int)section_length;\n                current_flag = (char *)0x0;\n              }\n              else {\n                current_flag = comma_position + 1;\n                section_name_index = (int)comma_position - (int)section;\n              }\n              section_length = (size_t)section_name_index;\n              comparison_result = strncasecmp(section_name,section,section_length);\n              if (comparison_result != 0) break;\n              section_flags = section_flags | 1;\n              section = current_flag;\n            }\n            comparison_result = strncasecmp(\"load\",section,section_length);\n            if (comparison_result != 0) break;\n            section_flags = section_flags | 2;\n            section = current_flag;\n          }\n          comparison_result = strncasecmp(\"noload\",section,section_length);\n          if (comparison_result != 0) break;\n          section_flags = section_flags | 0x200;\n          section = current_flag;\n        }\n        comparison_result = strncasecmp(\"readonly\",section,section_length);\n        if (comparison_result != 0) break;\n        section_flags = section_flags | 8;\n        section = current_flag;\n      }\n      comparison_result = strncasecmp(\"debug\",section,section_length);\n      if (comparison_result == 0) break;\n      comparison_result = strncasecmp(\"code\",section,section_length);\n      if (comparison_result == 0) {\n        section_flags = section_flags | 0x10;\n        section = current_flag;\n      }\n      else {\n        comparison_result = strncasecmp(\"data\",section,section_length);\n        if (comparison_result == 0) {\n          section_flags = section_flags | 0x20;\n          section = current_flag;\n        }\n        else {\n          comparison_result = strncasecmp(\"rom\",section,section_length);\n          if (comparison_result == 0) {\n            section_flags = section_flags | 0x40;\n            section = current_flag;\n          }\n          else {\n            comparison_result = strncasecmp(\"exclude\",section,section_length);\n            if (comparison_result == 0) {\n              section_flags = section_flags | 0x8000;\n              section = current_flag;\n            }\n            else {\n              comparison_result = strncasecmp(\"share\",section,section_length);\n              if (comparison_result == 0) {\n                section_flags = section_flags | 0x8000000;\n                section = current_flag;\n              }\n              else {\n                comparison_result = strncasecmp(\"contents\",section,section_length);\n                if (comparison_result == 0) {\n                  section_flags = section_flags | 0x100;\n                  section = current_flag;\n                }\n                else {\n                  comparison_result = strncasecmp(\"merge\",section,section_length);\n                  if (comparison_result == 0) {\n                    section_flags = section_flags | 0x800000;\n                    section = current_flag;\n                  }\n                  else {\n                    comparison_result = strncasecmp(\"strings\",section,section_length);\n                    if (comparison_result != 0) {\n                      comma_position = (char *)xmalloc((long)(section_name_index + 1));\n                      strncpy(comma_position,section,section_length);\n                      comma_position[section_length] = '\\0';\n                      error_message = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      print_error_message_00119ed0(error_message,comma_position);\n                      error_message = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      print_error_and_exit_00119dd0(error_message,\n                                   \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                  );\n                    }\n                    section_flags = section_flags | 0x1000000;\n                    section = current_flag;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "current_name": "parse_section_flags_00104ad6",
            "entrypoint": "0x00104ad6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104ad6": "parse_section_flags_00104ad6",
                "__s": "section",
                "auVar6": "result",
                "iVar1": "comparison_result",
                "iVar5": "section_name_index",
                "pcVar3": "comma_position",
                "sVar4": "section_length",
                "uVar2": "error_message",
                "unaff_R14D": "section_flags",
                "unaff_R15": "section_name",
                "unaff_RBP": "current_flag",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104bba": {
            "additional_data": {
                "FUN_00104bba": {
                    "1": "check_error_conditions",
                    "3": "check_and_set_error_flags",
                    "4": "validate_and_set_flags",
                    "9": "check_and_set_flags"
                },
                "dcgettext": {
                    "1": "get_localized_string"
                },
                "in_EAX": {
                    "1": "eax_input",
                    "15": "flags",
                    "4": "eax",
                    "9": "eax_value"
                },
                "uVar1": {
                    "1": "localized_error_message",
                    "2": "error_msg",
                    "21": "error_message"
                },
                "unaff_EBP": {
                    "1": "flags2",
                    "4": "ebp",
                    "5": "register_value",
                    "9": "ebp_value"
                },
                "unaff_R14": {
                    "1": "data_address",
                    "2": "memory_address",
                    "4": "r14",
                    "5": "register_r14",
                    "8": "r14_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_00114190"
            ],
            "code": "\nvoid check_and_set_flags_00104bba(void)\n\n{\n  uint flags;\n  undefined8 error_message;\n  uint ebp_value;\n  long r14_value;\n  \n  if ((flags & 2) != 0) {\n    error_message = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    print_error_and_exit_00119dd0(error_message);\n  }\n  if ((((flags & 8) == 0) || ((ebp_value & 0x10) == 0)) && ((ebp_value & 0x18) != 0x18)) {\n    if ((((flags & 0x20) == 0) || ((ebp_value & 0x40) == 0)) && ((ebp_value & 0x60) != 0x60)) {\n      *(uint *)(r14_value + 0x14) = flags | ebp_value;\n      return;\n    }\n    error_message = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    print_error_and_exit_00119dd0(error_message);\n  }\n  error_message = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  print_error_and_exit_00119dd0(error_message);\n}\n\n",
            "current_name": "check_and_set_flags_00104bba",
            "entrypoint": "0x00104bba",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104bba": "check_and_set_flags_00104bba",
                "dcgettext": "get_localized_string",
                "in_EAX": "flags",
                "uVar1": "error_message",
                "unaff_EBP": "ebp_value",
                "unaff_R14": "r14_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104c36": {
            "additional_data": {
                "DAT_00119ed0": {
                    "1": "print_warning"
                },
                "FUN_00104c36": {
                    "1": "parse_and_ignore_rubbish",
                    "18": "process_lines",
                    "2": "parse_and_process_lines",
                    "3": "parse_lines",
                    "4": "parse_input_lines"
                },
                "FUN_00104d1c": {
                    "1": "process_comment_block"
                },
                "bVar4": {
                    "1": "temp_char",
                    "11": "next_char",
                    "2": "next_next_char",
                    "3": "next_byte"
                },
                "dcgettext": {
                    "1": "get_localized_message"
                },
                "htab_find_slot": {
                    "1": "find_hash_table_slot"
                },
                "in_CL": {
                    "1": "current_char_value",
                    "2": "current_byte_value",
                    "21": "current_char"
                },
                "in_stack_00000008": {
                    "1": "dcgettext_arg1",
                    "2": "message_format",
                    "3": "file_name",
                    "4": "filename",
                    "6": "format_string"
                },
                "in_stack_00000010": {
                    "1": "return_ptr",
                    "3": "result",
                    "4": "result_ptr",
                    "5": "return_value",
                    "6": "return_address"
                },
                "pbVar2": {
                    "1": "current_char_ptr"
                },
                "pbVar3": {
                    "1": "next_position",
                    "2": "next_char_ptr",
                    "4": "current_byte",
                    "7": "next_char"
                },
                "pbVar4": {
                    "1": "next_byte",
                    "2": "temp_char"
                },
                "pbVar5": {
                    "1": "current_char_pointer",
                    "2": "line",
                    "9": "current_line"
                },
                "ppbVar2": {
                    "1": "line_ptr",
                    "2": "hash_slot",
                    "4": "slot_ptr",
                    "5": "hash_table_slot",
                    "7": "slot"
                },
                "uVar1": {
                    "1": "error_msg",
                    "2": "translation",
                    "7": "error_message"
                },
                "unaff_EBP": {
                    "11": "line_count",
                    "3": "line_counter",
                    "6": "line_index"
                },
                "unaff_R13": {
                    "1": "helper_function",
                    "2": "file_name"
                },
                "unaff_R14": {
                    "1": "last_line_buffer",
                    "2": "line_start",
                    "3": "last_line",
                    "4": "previous_line",
                    "5": "line_end"
                },
                "unaff_R15": {
                    "1": "end_line",
                    "2": "current_char",
                    "3": "current_line",
                    "4": "line_end",
                    "7": "line_start"
                },
                "unaff_RBX": {
                    "1": "input_lines",
                    "3": "line_start",
                    "4": "line",
                    "5": "line_pointer",
                    "6": "current_line"
                }
            },
            "called": [],
            "calling": [
                "FUN_00104cc1"
            ],
            "code": "\nvoid process_lines_00104c36(void)\n\n{\n  undefined8 error_message;\n  byte **slot;\n  byte *next_char;\n  byte current_char;\n  byte next_char;\n  byte *current_line;\n  int line_count;\n  byte *current_line;\n  undefined8 return_address;\n  byte *line_end;\n  byte *next_line;\n  undefined8 format_string;\n  undefined8 *return_address;\n  \n  do {\n    current_line = next_line;\n    if (current_char == 9) goto LAB_00104c3f;\n    do {\n      if ((current_char == 10) || (current_char == 0xd)) goto LAB_00114676;\n      if (current_char == 0) goto LAB_00114599;\n      current_char = current_line[1];\n      current_line = current_line + 1;\n    } while ((current_char != 0x20) && (current_char != 9));\n    if ((char)current_char < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_char & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      next_char = current_line[1];\n      if ((((((next_char == 9) || (next_char == 0x20)) &&\n            ((next_char = current_line[2], next_char == 9 || (next_char == 0x20)))) &&\n           ((next_char = current_line[3], next_char == 9 || (next_char == 0x20)))) &&\n          ((next_char = current_line[4], next_char == 9 || (next_char == 0x20)))) &&\n         ((next_char = current_line[5], next_char == 9 || (next_char == 0x20)))) {\n        next_char = current_line[6];\n        next_char = current_line + 6;\n        if ((next_char == 9) || (next_char == 0x20)) {\n          do {\n            do {\n              next_char = next_char[1];\n              next_char = next_char + 1;\n            } while (next_char == 0x20);\n          } while (next_char == 9);\n        }\n      }\n      if ((0xd < next_char) || ((-0x2402L >> (next_char & 0x3f) & 1U) != 0)) {\n        error_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        print_error_message_00119ed0(error_message,format_string,line_count);\n      }\n    }\nLAB_00114599:\n    *current_line = 0;\n    if (next_line < current_line) {\n      slot = (byte **)htab_find_slot();\n      *slot = next_line;\n    }\n    line_count = line_count + 1;\n    current_line = current_line;\n    if (line_end[1] == 0) {\n      *return_address = return_address;\n      return;\n    }\n    for (; next_char = *current_line, line_end = current_line, next_char != 10; current_line = current_line + 1) {\n      if ((char)next_char < '\\v') {\n        if (next_char == 0) {\n          next_char = current_line + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (next_char == 0xd) {\n          *current_line = 0;\n          next_char = current_line + 1;\n          if (current_line[1] == 10) {\n            next_char = current_line + 2;\n            line_end = current_line + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (next_char == 0x23) {\n          process_lines_00104d1c();\n          return;\n        }\n      }\n    }\n    *current_line = 0;\n    if (current_line[1] == 0xd) {\n      line_end = current_line + 1;\n      next_char = current_line + 2;\n    }\n    else {\n      next_char = current_line + 1;\n    }\nLAB_00114553:\n    current_char = *current_line;\n    next_line = current_line;\n    while (current_line = next_char, current_char == 0x20) {\nLAB_00104c3f:\n      current_line = next_line + 1;\n      next_line = next_line + 1;\n      next_char = current_line;\n      current_char = *current_line;\n    }\n  } while( true );\n}\n\n",
            "current_name": "process_lines_00104c36",
            "entrypoint": "0x00104c36",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104c36": "process_lines_00104c36",
                "bVar4": "next_char",
                "dcgettext": "get_localized_message",
                "htab_find_slot": "find_hash_table_slot",
                "in_CL": "current_char",
                "in_stack_00000008": "format_string",
                "in_stack_00000010": "return_address",
                "pbVar2": "temp_ptr",
                "pbVar3": "next_char",
                "pbVar5": "current_line",
                "ppbVar2": "slot",
                "uVar1": "error_message",
                "unaff_EBP": "line_count",
                "unaff_R13": "return_address",
                "unaff_R14": "line_end",
                "unaff_R15": "next_line",
                "unaff_RBX": "current_line"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104cc1": {
            "additional_data": {
                "FUN_00104cc1": {
                    "1": "sanitize_input_lines",
                    "2": "process_input_lines",
                    "21": "process_lines",
                    "6": "parse_and_process_lines"
                },
                "LAB_00114553": {
                    "1": "skip_spaces_and_tabs"
                },
                "LAB_00114599": {
                    "1": "store_line_hash"
                },
                "LAB_00114676": {
                    "1": "is_valid_char"
                },
                "bVar4": {
                    "1": "current_character",
                    "2": "current_char_value",
                    "3": "current_byte",
                    "5": "current_char",
                    "9": "next_char"
                },
                "dcgettext": {
                    "1": "get_translated_text"
                },
                "htab_find_slot": {
                    "1": "find_slot"
                },
                "in_R10": {
                    "1": "current_position",
                    "2": "line_start",
                    "4": "line",
                    "8": "line_ptr"
                },
                "param_7": {
                    "1": "output_file_path",
                    "10": "line_number",
                    "2": "param_4",
                    "4": "error_message"
                },
                "param_8": {
                    "1": "error_argument",
                    "2": "output_list",
                    "3": "output_ptr",
                    "5": "result"
                },
                "param_9": {
                    "1": "input_param",
                    "2": "input_string",
                    "3": "current_line",
                    "4": "input_line",
                    "8": "line"
                },
                "pbVar2": {
                    "1": "current_byte"
                },
                "pbVar3": {
                    "1": "current_position",
                    "12": "current_char",
                    "3": "current_char_ptr"
                },
                "pbVar4": {
                    "1": "next_byte"
                },
                "pbVar5": {
                    "1": "current_position",
                    "2": "next_char",
                    "3": "start_of_line",
                    "5": "line_start"
                },
                "ppbVar2": {
                    "1": "entry_slot",
                    "4": "hash_slot",
                    "5": "hash_table_slot",
                    "6": "slot",
                    "7": "slot_ptr"
                },
                "print_error_message_00119ed0": {
                    "3": "print_error_message"
                },
                "process_lines_00104d1c": {
                    "1": "process_lines"
                },
                "uVar1": {
                    "1": "localized_error_msg",
                    "13": "error_message",
                    "2": "error_msg"
                },
                "unaff_EBP": {
                    "1": "character_count",
                    "16": "line_number",
                    "2": "line_index",
                    "5": "line_counter",
                    "6": "line_count"
                },
                "unaff_R13": {
                    "1": "result_ptr",
                    "2": "result",
                    "3": "param_1",
                    "4": "error_message",
                    "6": "return_value"
                },
                "unaff_R14": {
                    "1": "unaff_r14",
                    "2": "param_2",
                    "4": "line_end",
                    "6": "line_start"
                },
                "unaff_R15": {
                    "1": "end_of_file",
                    "2": "current_char",
                    "3": "line_end"
                },
                "unaff_RBX": {
                    "1": "next_line_start",
                    "2": "current_char",
                    "3": "start_of_line",
                    "5": "line_start"
                }
            },
            "called": [
                "FUN_00104d1c",
                "FUN_00104cc1",
                "FUN_00119ed0",
                "dcgettext",
                "htab_find_slot",
                "FUN_00104c36"
            ],
            "calling": [
                "FUN_00104cc1"
            ],
            "code": "\nvoid process_lines_00104cc1(void)\n\n{\n  undefined8 error_message;\n  byte **slot_ptr;\n  byte *current_char;\n  byte next_char;\n  byte *current_line;\n  byte *line_start;\n  int line_number;\n  byte *line_ptr;\n  undefined8 return_value;\n  byte *line_start;\n  byte *line_end;\n  undefined8 line_number;\n  undefined8 *result;\n  byte *line;\n  \ncode_r0x00104cc1:\n  line = line_ptr;\n  error_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  print_error_message(error_message,line_number,line_number);\n  line_start = current_line;\n  line_ptr = line;\nstore_line_hash:\n  do {\n    *line_ptr = 0;\n    if (line_end < line_ptr) {\n      slot_ptr = (byte **)htab_find_slot();\n      *slot_ptr = line_end;\n    }\n    line_number = line_number + 1;\n    current_char = line_start;\n    if (line_start[1] == 0) {\n      *result = return_value;\n      return;\n    }\n    for (; next_char = *current_char, line_start = current_char, next_char != 10; current_char = current_char + 1) {\n      if ((char)next_char < '\\v') {\n        if (next_char == 0) {\n          current_line = current_char + 1;\n          goto skip_spaces_and_tabs;\n        }\n      }\n      else {\n        if (next_char == 0xd) {\n          *current_char = 0;\n          current_line = current_char + 1;\n          if (current_char[1] == 10) {\n            current_line = current_char + 2;\n            line_start = current_char + 1;\n          }\n          goto skip_spaces_and_tabs;\n        }\n        if (next_char == 0x23) {\n          process_special_lines();\n          return;\n        }\n      }\n    }\n    *current_char = 0;\n    if (current_char[1] == 0xd) {\n      line_start = current_char + 1;\n      current_line = current_char + 2;\n    }\n    else {\n      current_line = current_char + 1;\n    }\nskip_spaces_and_tabs:\n    next_char = *line_start;\n    line_end = line_start;\n    while ((next_char == 0x20 || (line_ptr = line_end, next_char == 9))) {\n      line_start = line_end + 1;\n      line_end = line_end + 1;\n      next_char = *line_start;\n    }\n    do {\n      line_start = current_line;\n      if ((next_char == 10) || (next_char == 0xd)) goto is_valid_char;\n      if (next_char == 0) goto store_line_hash;\n      next_char = line_ptr[1];\n      line_ptr = line_ptr + 1;\n    } while ((next_char != 0x20) && (next_char != 9));\n    if ((char)next_char < '\\x0e') {\nis_valid_char:\n      if ((-0x2402L >> (next_char & 0x3f) & 1U) == 0) goto store_line_hash;\n    }\n    next_char = line_ptr[1];\n    if ((((((next_char == 9) || (next_char == 0x20)) && ((next_char = line_ptr[2], next_char == 9 || (next_char == 0x20)))\n          ) && ((next_char = line_ptr[3], next_char == 9 || (next_char == 0x20)))) &&\n        ((next_char = line_ptr[4], next_char == 9 || (next_char == 0x20)))) &&\n       ((next_char = line_ptr[5], next_char == 9 || (next_char == 0x20)))) {\n      next_char = line_ptr[6];\n      current_char = line_ptr + 6;\n      if ((next_char == 9) || (next_char == 0x20)) {\n        do {\n          do {\n            next_char = current_char[1];\n            current_char = current_char + 1;\n          } while (next_char == 0x20);\n        } while (next_char == 9);\n      }\n    }\n    if ((0xd < next_char) || ((-0x2402L >> (next_char & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "current_name": "process_lines_00104cc1",
            "entrypoint": "0x00104cc1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104cc1": "process_lines_00104cc1",
                "LAB_00114553": "skip_spaces_and_tabs",
                "LAB_00114599": "store_line_hash",
                "LAB_00114676": "is_valid_char",
                "bVar4": "next_char",
                "dcgettext": "get_error_message",
                "htab_find_slot": "find_slot",
                "in_R10": "line_ptr",
                "param_7": "line_number",
                "param_8": "result",
                "param_9": "line",
                "pbVar2": "current_byte",
                "pbVar3": "current_char",
                "pbVar5": "line_start",
                "ppbVar2": "slot_ptr",
                "print_error_message_00119ed0": "print_error_message",
                "process_lines_00104d1c": "process_special_lines",
                "uVar1": "error_message",
                "unaff_EBP": "line_number",
                "unaff_R13": "return_value",
                "unaff_R14": "line_start",
                "unaff_R15": "line_end",
                "unaff_RBX": "current_line"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104d1c": {
            "additional_data": {
                "FUN_00104d1c": {
                    "1": "process_data",
                    "2": "process_text",
                    "3": "parse_and_ignore_rubbish",
                    "7": "process_lines"
                },
                "FUN_00119ed0": {
                    "1": "print_error_message"
                },
                "bVar4": {
                    "1": "byte_var",
                    "14": "current_char",
                    "2": "next_char",
                    "4": "current_char_value",
                    "6": "current_byte"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "htab_find_slot": {
                    "1": "find_slot"
                },
                "in_stack_00000008": {
                    "1": "catalog",
                    "2": "error_msg",
                    "3": "message",
                    "4": "filename",
                    "5": "format_string",
                    "8": "error_message"
                },
                "in_stack_00000010": {
                    "1": "stack_param2",
                    "16": "return_address",
                    "2": "result",
                    "3": "return_value"
                },
                "pbVar2": {
                    "1": "line_ptr"
                },
                "pbVar3": {
                    "1": "byte_ptr_temp",
                    "2": "space_ptr",
                    "3": "current_char"
                },
                "pbVar5": {
                    "1": "ptr2",
                    "2": "next_line_start",
                    "4": "next_line_ptr",
                    "5": "next_char",
                    "7": "next_line"
                },
                "pbVar6": {
                    "1": "current_char",
                    "2": "temp",
                    "3": "next_char"
                },
                "pbVar7": {
                    "1": "temp_char",
                    "2": "ptr2",
                    "6": "next_char"
                },
                "ppbVar2": {
                    "1": "hash_entry",
                    "12": "slot",
                    "2": "slot_pointer",
                    "5": "hash_table_slot"
                },
                "uVar1": {
                    "1": "error_msg",
                    "11": "error_message",
                    "2": "translation",
                    "4": "error_string"
                },
                "unaff_EBP": {
                    "1": "ebp_value",
                    "11": "line_count",
                    "2": "line_counter",
                    "5": "counter",
                    "8": "line_number"
                },
                "unaff_R13": {
                    "1": "original_function",
                    "2": "file_path",
                    "3": "callback",
                    "8": "file_name"
                },
                "unaff_R14": {
                    "1": "string_start",
                    "13": "current_line",
                    "2": "line",
                    "4": "line_ptr",
                    "5": "line_start"
                },
                "unaff_R15": {
                    "1": "current_position",
                    "12": "current_char",
                    "2": "line_start",
                    "3": "line_end"
                }
            },
            "called": [],
            "calling": [
                "FUN_00104cc1"
            ],
            "code": "\nvoid process_lines_00104d1c(void)\n\n{\n  undefined8 error_message;\n  byte **slot;\n  byte *next_char;\n  byte current_char;\n  byte *next_line;\n  int line_count;\n  byte *next_char;\n  undefined8 file_name;\n  byte *next_char;\n  byte *current_line;\n  byte *current_char;\n  undefined8 error_message;\n  undefined8 *return_address;\n  \n  *current_line = 0;\nLAB_00114520:\n  current_line = current_line + 1;\n  do {\n    current_char = *current_line;\n    next_char = current_line;\n    if (current_char == 10) {\n      *current_line = 0;\n      if (current_line[1] == 0xd) {\n        next_char = current_line + 1;\n        next_line = current_line + 2;\n      }\n      else {\n        next_line = current_line + 1;\n      }\n    }\n    else if ((char)current_char < '\\v') {\n      if (current_char != 0) goto LAB_00114520;\n      next_line = current_line + 1;\n    }\n    else {\n      if (current_char != 0xd) break;\n      *current_line = 0;\n      next_line = current_line + 1;\n      if (current_line[1] == 10) {\n        next_line = current_line + 2;\n        next_char = current_line + 1;\n      }\n    }\n    current_char = *current_char;\n    while ((current_char == 0x20 || (next_char = current_char, current_char == 9))) {\n      next_char = current_char + 1;\n      current_char = current_char + 1;\n      current_char = *next_char;\n    }\n    do {\n      if ((current_char == 10) || (current_char == 0xd)) goto LAB_00114676;\n      if (current_char == 0) goto LAB_00114599;\n      current_char = next_char[1];\n      next_char = next_char + 1;\n    } while ((current_char != 0x20) && (current_char != 9));\n    if ((char)current_char < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_char & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      current_char = next_char[1];\n      if ((((((current_char == 9) || (current_char == 0x20)) &&\n            ((current_char = next_char[2], current_char == 9 || (current_char == 0x20)))) &&\n           ((current_char = next_char[3], current_char == 9 || (current_char == 0x20)))) &&\n          ((current_char = next_char[4], current_char == 9 || (current_char == 0x20)))) &&\n         ((current_char = next_char[5], current_char == 9 || (current_char == 0x20)))) {\n        current_char = next_char[6];\n        next_char = next_char + 6;\n        if ((current_char == 9) || (current_char == 0x20)) {\n          do {\n            do {\n              current_char = next_char[1];\n              next_char = next_char + 1;\n            } while (current_char == 0x20);\n          } while (current_char == 9);\n        }\n      }\n      if ((0xd < current_char) || ((-0x2402L >> (current_char & 0x3f) & 1U) != 0)) {\n        error_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        print_error_message_00119ed0(error_message,error_message,line_count);\n      }\n    }\nLAB_00114599:\n    *next_char = 0;\n    if (current_char < next_char) {\n      slot = (byte **)htab_find_slot();\n      *slot = current_char;\n    }\n    line_count = line_count + 1;\n    current_line = next_line;\n    current_char = next_line;\n    if (next_char[1] == 0) {\n      *return_address = file_name;\n      return;\n    }\n  } while( true );\n  if (current_char == 0x23) {\n    process_lines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "current_name": "process_lines_00104d1c",
            "entrypoint": "0x00104d1c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104d1c": "process_lines_00104d1c",
                "bVar4": "current_char",
                "dcgettext": "get_error_message",
                "htab_find_slot": "find_slot",
                "in_stack_00000008": "error_message",
                "in_stack_00000010": "return_address",
                "pbVar2": "next_line",
                "pbVar3": "next_char",
                "pbVar5": "next_line",
                "pbVar6": "next_char",
                "pbVar7": "next_char",
                "ppbVar2": "slot",
                "uVar1": "error_message",
                "unaff_EBP": "line_count",
                "unaff_R13": "file_name",
                "unaff_R14": "current_line",
                "unaff_R15": "current_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104d25": {
            "additional_data": {
                "FUN_00104d25": {
                    "1": "initialize_and_remove_directory",
                    "2": "print_error_and_remove_directory",
                    "4": "initialize_program",
                    "5": "initialize_and_print_error_message",
                    "9": "initialize_and_print_error"
                },
                "param_7": {
                    "1": "unused_param",
                    "2": "parameter",
                    "3": "error_code",
                    "6": "error_message",
                    "9": "param"
                },
                "print_error_message_001126c0": {
                    "1": "print_error",
                    "18": "print_error_message",
                    "3": "display_error_message"
                },
                "remove_directory_00114b84": {
                    "1": "remove_program_directory",
                    "19": "remove_directory"
                }
            },
            "called": [
                "FUN_001126c0",
                "FUN_00114b84"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid initialize_and_print_error_00104d25(void)\n\n{\n  undefined8 param;\n  \n  DAT_00127a40 = 1;\n  print_error_message(0,param,0,0);\n  remove_directory();\n  return;\n}\n\n",
            "current_name": "initialize_and_print_error_00104d25",
            "entrypoint": "0x00104d25",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104d25": "initialize_and_print_error_00104d25",
                "param_7": "param",
                "print_error_message_001126c0": "print_error_message",
                "remove_directory_00114b84": "remove_directory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104ea2": {
            "additional_data": {
                "DAT_001279e9": {
                    "1": "flag_var4"
                },
                "DAT_001279eb": {
                    "1": "flag_var2"
                },
                "FUNC_00114e50": {
                    "1": "process_archive_file"
                },
                "FUN_00104ea2": {
                    "1": "decompile_and_copy_archive",
                    "27": "extract_and_copy_archive"
                },
                "bVar17": {
                    "1": "temp_byte",
                    "2": "byte_value",
                    "8": "byte_var"
                },
                "cVar1": {
                    "1": "char_val",
                    "2": "status",
                    "4": "result",
                    "5": "char_var"
                },
                "chmod": {
                    "1": "change_file_mode"
                },
                "create_temp_directory_0011a0e0": {
                    "1": "create_temp_directory"
                },
                "elseVar": {
                    "1": "else_flag"
                },
                "extract_and_copy_archive_001052a2": {
                    "1": "extract_and_copy_file"
                },
                "free": {
                    "1": "free_memory"
                },
                "get_formatted_string_001125fa": {
                    "1": "get_formatted_message"
                },
                "iVar2": {
                    "1": "int_value",
                    "2": "architecture",
                    "4": "result",
                    "5": "int_var"
                },
                "in_stack_00000030": {
                    "1": "unrecognized_format_flag",
                    "4": "unknown_flag"
                },
                "in_stack_00000030._7_1_": {
                    "1": "flag_var3"
                },
                "lVar12": {
                    "1": "index",
                    "2": "file_size",
                    "4": "bytes_remaining",
                    "9": "remaining_size"
                },
                "lVar14": {
                    "1": "chunk_size",
                    "10": "bytes_written",
                    "2": "bytes_to_copy"
                },
                "lVar5": {
                    "1": "variable_9",
                    "18": "bytes_read",
                    "2": "long_var"
                },
                "param_10": {
                    "1": "archive_filename",
                    "2": "archive_format",
                    "3": "input_filename"
                },
                "param_11": {
                    "1": "output_file_path",
                    "2": "flags",
                    "3": "file_mode",
                    "7": "open_mode",
                    "8": "write_mode"
                },
                "param_18": {
                    "1": "permission_flags",
                    "13": "permission",
                    "2": "file_mode",
                    "4": "permissions",
                    "8": "file_permissions"
                },
                "param_19": {
                    "1": "file_timestamp",
                    "22": "file_size",
                    "4": "archive_size"
                },
                "param_7": {
                    "1": "archive_filename",
                    "3": "output_filename",
                    "4": "source_file_path"
                },
                "param_8": {
                    "1": "output_status",
                    "2": "file_size",
                    "3": "temp_dir_path"
                },
                "param_9": {
                    "1": "destination_dir",
                    "12": "temp_dir_path",
                    "2": "extracted_dir_path",
                    "6": "temp_directory"
                },
                "pcVar10": {
                    "1": "current_file_name",
                    "2": "current_member",
                    "3": "current_file",
                    "4": "file_name"
                },
                "pcVar13": {
                    "1": "bfd_close_func",
                    "2": "bfd_close_function",
                    "7": "close_function"
                },
                "pcVar15": {
                    "1": "path_ptr",
                    "2": "pathname"
                },
                "pcVar7": {
                    "1": "inner_loop_ptr",
                    "2": "current_char",
                    "5": "current_path"
                },
                "piVar9": {
                    "1": "error_num",
                    "2": "error_code",
                    "3": "errno_location"
                },
                "ppcVar10": {
                    "1": "file_path"
                },
                "ppcVar13": {
                    "1": "bfd_close_func",
                    "3": "close_function"
                },
                "ppcVar3": {
                    "1": "file_descriptor2",
                    "2": "archive_member",
                    "6": "archived_file"
                },
                "ppcVar6": {
                    "1": "bfd_handle",
                    "2": "output_file",
                    "6": "archive_file"
                },
                "ppcvVar6": {
                    "1": "archive"
                },
                "ppvVar3": {
                    "1": "archived_file"
                },
                "print_error_message_001126c0": {
                    "1": "print_error_message"
                },
                "print_error_message_00119ed0": {
                    "1": "print_error_message_with_args"
                },
                "print_error_message_0011a110": {
                    "1": "print_error_stat_message"
                },
                "printf": {
                    "1": "print_formatted"
                },
                "printf_00111be0": {
                    "1": "print_formatted_message"
                },
                "printf_001126c0": {
                    "1": "print_formatted_error_message"
                },
                "psVar16": {
                    "1": "file_stat_ptr",
                    "3": "stat_ptr"
                },
                "puVar8": {
                    "1": "temp_dir_node",
                    "2": "temp_directory_info"
                },
                "pvVar4": {
                    "1": "temp_buffer",
                    "8": "buffer"
                },
                "rmdir": {
                    "1": "remove_directory"
                },
                "set_file_time_0011a350": {
                    "1": "set_file_time"
                },
                "uVar11": {
                    "1": "int_var2",
                    "9": "error_message"
                },
                "unaff_EBX": {
                    "1": "unaff_index",
                    "2": "error_flag",
                    "5": "stat_result",
                    "6": "stat_error"
                },
                "unaff_R12": {
                    "1": "archive_filename",
                    "12": "archive_path",
                    "2": "temp_file_path",
                    "4": "archive_file_path"
                },
                "unaff_R13": {
                    "1": "temp_file_structure",
                    "2": "temp_directories",
                    "3": "temp_directory_list",
                    "6": "temp_dir_info"
                },
                "unaff_R15": {
                    "1": "archive_file",
                    "2": "archive_ptr",
                    "3": "archive_files",
                    "8": "archive"
                },
                "unaff_R19": {
                    "1": "return_code"
                },
                "unaff_RBP": {
                    "1": "file_stat_buf",
                    "10": "file_stat",
                    "2": "stat_info",
                    "7": "stat_buffer"
                },
                "unaff_RBX": {
                    "1": "stat_result"
                },
                "unaff_ebx": {
                    "1": "stat_error"
                },
                "unaff_retaddr": {
                    "28": "return_address"
                },
                "unlink": {
                    "1": "remove_file"
                },
                "xstrdup": {
                    "1": "duplicate_string"
                }
            },
            "called": [
                "strerror",
                "chmod",
                "FUN_001126c0",
                "FUN_0011a110",
                "unlink",
                "printf",
                "free",
                "dcgettext",
                "FUN_0011a350",
                "bfd_bread",
                "stat",
                "bfd_get_arch",
                "FUN_00114b84",
                "__errno_location",
                "FUN_0011a0e0",
                "bfd_openr_next_archived_file",
                "FUN_00104ea2",
                "bfd_close_all_done",
                "concat",
                "xmalloc",
                "bfd_openr",
                "FUN_00119ed0",
                "xstrdup",
                "bfd_seek",
                "bfd_openw",
                "FUN_00114e50",
                "bfd_close",
                "bfd_bwrite",
                "bfd_close",
                "rmdir",
                "FUN_001125fa",
                "bfd_check_format",
                "bfd_close_all_done",
                "FUN_001052a2"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid extract_and_copy_archive_00104ea2(void)\n\n{\n  char char_var;\n  int int_var;\n  char **archived_file;\n  void *buffer;\n  long bytes_read;\n  char **archive_file;\n  char *current_path;\n  undefined8 *temp_directory_info;\n  int *errno_location;\n  char *file_name;\n  undefined8 error_message;\n  long remaining_size;\n  code *close_function;\n  long bytes_written;\n  int stat_error;\n  stat *file_stat;\n  char *pathname;\n  stat *stat_ptr;\n  char *archive_path;\n  undefined8 *temp_dir_info;\n  char **archive;\n  byte byte_var;\n  undefined8 return_address;\n  undefined8 *source_file_path;\n  long *temp_dir_path;\n  char *temp_dir_path;\n  undefined8 *input_filename;\n  undefined8 write_mode;\n  undefined8 unknown_flag;\n  uint permission;\n  long file_size;\n  \n  byte_var = 0;\ncode_r0x00104ea2:\n  archive_file = (char **)bfd_openw(archive_path,write_mode);\n  if (archive_file == (char **)0x0) {\nLAB_00104e80:\n    print_error_message(archive_path,0,0,0);\nLAB_00104e93:\n    DAT_00127a40 = 1;\n  }\n  else {\nLAB_00114a5f:\n    char_var = FUNC_00114e50(archive,archive_file,return_address);\n    if (char_var == '\\0') {\n      int_var = bfd_get_arch(archive);\n      if (int_var == 0) goto LAB_00104d75;\n      char_var = bfd_close_all_done(archive_file);\n      if (char_var != '\\0') goto LAB_00104ec9;\n      print_error_message(archive_path,0,0,0);\n      goto LAB_00104ec9;\n    }\n    char_var = bfd_close(archive_file);\n    archive_file = archive;\n    if (char_var == '\\0') {\n      print_error_message(archive_path,0,0,0);\n      DAT_00127a40 = 1;\n    }\nLAB_00114a86:\n    if ((DAT_001279eb != '\\0') && (stat_error == 0)) {\n      set_file_time(archive_path,file_stat);\n    }\n    remaining_size = bfd_openr(archive_path,write_mode);\n    temp_dir_info[2] = remaining_size;\n    *temp_dir_path = remaining_size;\n    temp_dir_path = (long *)(remaining_size + 0xf0);\n    archive = (char **)bfd_openr_next_archived_file(input_filename,archive_file);\n    bfd_close(archive_file);\n    while ((DAT_00127a40 == 0 && (archive != (char **)0x0))) {\n      file_name = *archive;\n      current_path = file_name;\n      if (*file_name == '/') {\nLAB_0010527d:\n        error_message = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        print_error_message_with_args(error_message,file_name);\n        goto LAB_00104e93;\n      }\n      while (*current_path != '\\0') {\n        pathname = current_path;\n        if ((*current_path == '.') && (pathname = current_path + 1, current_path[1] == '.')) {\n          pathname = current_path + 2;\n          if ((current_path[2] == '\\0') || (current_path[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*pathname != '\\0' && (*pathname != '/')); pathname = pathname + 1) {\n        }\n        current_path = pathname;\n        if (*pathname == '/') {\n          extract_and_copy_file();\n          return;\n        }\n      }\n      file_stat = (stat *)&stack0x00000050;\n      archive_path = (char *)concat(temp_dir_path,&DAT_0011b47d);\n      int_var = stat(archive_path,file_stat);\n      temp_directory_info = temp_dir_info;\n      if (-1 < int_var) {\n        remaining_size = create_temp_directory(archive_path);\n        free_memory(archive_path);\n        if (remaining_size == 0) {\n          errno_location = __errno_location();\n          file_name = strerror(*errno_location);\n          error_message = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          print_error_message_with_args(error_message,file_name);\n          goto LAB_00104e93;\n        }\n        temp_directory_info = (undefined8 *)xmalloc(0x18);\n        file_name = *archive;\n        *temp_directory_info = temp_dir_info;\n        temp_directory_info[2] = 0;\n        temp_directory_info[1] = remaining_size;\n        archive_path = (char *)concat(remaining_size,&DAT_0011b47d,file_name);\n      }\n      stat_error = 0;\n      if (DAT_001279eb != '\\0') {\n        stat_ptr = file_stat;\n        for (remaining_size = 0x24; remaining_size != 0; remaining_size = remaining_size + -1) {\n          *(undefined4 *)&stat_ptr->st_dev = 0;\n          stat_ptr = (stat *)((long)stat_ptr + (ulong)byte_var * -8 + 4);\n        }\n        archive_file = (char **)archive[0x1d];\n        if ((char **)archive[0x1d] == (char **)0x0) {\n          archive_file = archive;\n        }\n        stat_error = (**(code **)(archive_file[1] + 0x1e8))(archive,file_stat);\n        if (stat_error != 0) {\n          file_name = *archive;\n          error_message = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_message_with_args(error_message,file_name);\n        }\n      }\n      temp_dir_info = (undefined8 *)xmalloc(0x18);\n      temp_dir_info[1] = archive_path;\n      *temp_dir_info = temp_directory_info;\n      temp_dir_info[2] = 0;\n      char_var = bfd_check_format(archive,1);\n      if (char_var != '\\0') {\n        if (flag_var3 != '\\0') goto code_r0x00104ea2;\n        archive_file = (char **)bfd_openw(archive_path,*(undefined8 *)archive[1]);\n        if (archive_file == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      error_message = dcgettext(0,\"Unable to recognise the format of file\",5);\n      print_error_message(0,archive,0,error_message);\n      archive_file = (char **)bfd_openw(archive_path,write_mode);\n      if (archive_file == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      archived_file = (char **)archive[0x1d];\n      if ((char **)archive[0x1d] == (char **)0x0) {\n        archived_file = archive;\n      }\n      int_var = (**(code **)(archived_file[1] + 0x1e8))(archive);\n      remaining_size = file_size;\n      if (int_var == 0) {\n        if (file_size < 0) {\n          get_formatted_message(archive);\n          error_message = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          print_error_message_with_args(error_message);\n        }\n        else {\n          int_var = bfd_seek(archive,0,0);\n          if (int_var == 0) {\n            if (DAT_001279e9 != '\\0') {\n              file_name = *archive_file;\n              error_message = get_formatted_message(archive);\n              current_path = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(current_path,error_message,file_name);\n            }\n            buffer = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (remaining_size == 0) {\n                chmod(*archive_file,permission | 0x100);\n                free_memory(buffer);\n                char_var = bfd_close_all_done(archive_file);\n                archive_file = archive;\n                if (char_var == '\\0') {\n                  print_error_message(archive_path,0,0,0);\n                  DAT_00127a40 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              bytes_written = 0x2000;\n              if (remaining_size < 0x2001) {\n                bytes_written = remaining_size;\n              }\n              bytes_read = bfd_bread(buffer,bytes_written,archive);\n              archived_file = archive;\n              if ((bytes_written != bytes_read) ||\n                 (bytes_read = bfd_bwrite(buffer,bytes_written,archive_file), archived_file = archive_file, bytes_written != bytes_read))\n              break;\n              remaining_size = remaining_size - bytes_written;\n            }\n            print_error_message(0,archived_file,0,0);\n            free_memory(buffer);\n          }\n          else {\n            error_message = get_formatted_message(archive);\n            print_error_stat_message(error_message);\n          }\n        }\n      }\n      else {\n        print_error_message(0,archive,0,0);\n      }\n      char_var = bfd_close_all_done(archive_file);\n      if (char_var == '\\0') {\n        print_error_message(archive_path,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(archive_path);\n      DAT_00127a40 = 1;\n    }\n    *temp_dir_path = 0;\n    buffer = (void *)xstrdup(*source_file_path);\n    if (DAT_00127a40 == 0) {\n      close_function = bfd_close;\n    }\n    else {\n      close_function = bfd_close_all_done;\n    }\n    char_var = (*close_function)(source_file_path);\n    if (char_var == '\\0') {\n      DAT_00127a40 = 1;\n      print_error_message(buffer,0,0,0);\n    }\n    free_memory(buffer);\n    buffer = (void *)xstrdup(*input_filename);\n    char_var = bfd_close(input_filename);\n    if (char_var == '\\0') {\n      DAT_00127a40 = 1;\n      print_error_message(buffer,0,0,0);\n    }\n    free_memory(buffer);\n  }\n  while (temp_dir_info != (undefined8 *)0x0) {\n    if (temp_dir_info[2] == 0) {\n      rmdir((char *)temp_dir_info[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)temp_dir_info[1]);\n    }\n    free_memory((void *)temp_dir_info[1]);\n    temp_directory_info = (undefined8 *)*temp_dir_info;\n    free_memory(temp_dir_info);\n    temp_dir_info = temp_directory_info;\n  }\n  rmdir(temp_dir_path);\n  free_memory(temp_dir_path);\n  return;\n}\n\n",
            "current_name": "extract_and_copy_archive_00104ea2",
            "entrypoint": "0x00104ea2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104ea2": "extract_and_copy_archive_00104ea2",
                "bVar17": "byte_var",
                "cVar1": "char_var",
                "chmod": "change_file_mode",
                "create_temp_directory_0011a0e0": "create_temp_directory",
                "extract_and_copy_archive_001052a2": "extract_and_copy_file",
                "free": "free_memory",
                "get_formatted_string_001125fa": "get_formatted_message",
                "iVar2": "int_var",
                "in_stack_00000030": "unknown_flag",
                "in_stack_00000030._7_1_": "flag_var3",
                "lVar12": "remaining_size",
                "lVar14": "bytes_written",
                "lVar5": "bytes_read",
                "param_10": "input_filename",
                "param_11": "write_mode",
                "param_18": "permission",
                "param_19": "file_size",
                "param_7": "source_file_path",
                "param_8": "temp_dir_path",
                "param_9": "temp_dir_path",
                "pcVar10": "file_name",
                "pcVar13": "close_function",
                "pcVar15": "pathname",
                "pcVar7": "current_path",
                "piVar9": "errno_location",
                "ppcVar3": "archived_file",
                "ppcVar6": "archive_file",
                "print_error_message_001126c0": "print_error_message",
                "print_error_message_00119ed0": "print_error_message_with_args",
                "print_error_message_0011a110": "print_error_stat_message",
                "printf": "print_formatted",
                "psVar16": "stat_ptr",
                "puVar8": "temp_directory_info",
                "pvVar4": "buffer",
                "rmdir": "remove_directory",
                "set_file_time_0011a350": "set_file_time",
                "uVar11": "error_message",
                "unaff_EBX": "stat_error",
                "unaff_R12": "archive_path",
                "unaff_R13": "temp_dir_info",
                "unaff_R15": "archive",
                "unaff_RBP": "file_stat",
                "unaff_retaddr": "return_address",
                "unlink": "remove_file",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001052a2": {
            "additional_data": {
                "DAT_001279e9": {
                    "1": "is_negative_size"
                },
                "DAT_001279eb": {
                    "1": "is_internal_stat_error"
                },
                "DAT_00127a40": {
                    "1": "is_error"
                },
                "FUN_001052a2": {
                    "1": "extract_and_copy_archive_contents",
                    "3": "extract_and_copy_archived_files",
                    "4": "copy_archive",
                    "7": "process_archive",
                    "9": "extract_and_copy_archive"
                },
                "__format": {
                    "1": "copy_msg_format",
                    "3": "error_message_format",
                    "5": "error_msg_format",
                    "6": "error_format",
                    "9": "format_string"
                },
                "bVar18": {
                    "1": "zero_byte",
                    "2": "stack_value",
                    "3": "temp_flag",
                    "7": "flag"
                },
                "cVar1": {
                    "1": "format_result",
                    "2": "check_result",
                    "7": "format_valid"
                },
                "iVar2": {
                    "1": "index",
                    "12": "arch_type",
                    "2": "arch_result",
                    "5": "arch"
                },
                "iVar3": {
                    "1": "int_value2",
                    "2": "internal_stat_error",
                    "23": "stat_result"
                },
                "in_RAX": {
                    "1": "rax_var",
                    "2": "archive_file"
                },
                "in_stack_00000008": {
                    "1": "temp_path",
                    "2": "output_path"
                },
                "in_stack_00000010": {
                    "1": "dest_path_ptr",
                    "2": "archive_ptr"
                },
                "in_stack_00000018": {
                    "1": "temp_path",
                    "14": "temp_dir_path",
                    "2": "tempdir"
                },
                "in_stack_00000020": {
                    "1": "ptr_to_parent",
                    "2": "archive_file"
                },
                "in_stack_00000028": {
                    "1": "archive_mode",
                    "2": "open_mode",
                    "3": "open_flags",
                    "4": "output_format"
                },
                "in_stack_00000030": {
                    "1": "mode_check",
                    "2": "format_flag"
                },
                "in_stack_000000f8": {
                    "1": "stack_var7",
                    "2": "permissions",
                    "3": "permission",
                    "6": "file_permissions",
                    "8": "file_permission"
                },
                "in_stack_00000110": {
                    "1": "arch_count",
                    "2": "archive_size",
                    "3": "file_count",
                    "4": "total_file_size",
                    "5": "file_size"
                },
                "lVar12": {
                    "1": "temp_dir_len",
                    "19": "file_size",
                    "2": "long_var12"
                },
                "lVar15": {
                    "1": "chunk_size",
                    "2": "bytes_left",
                    "3": "bytes_remaining",
                    "5": "copy_size"
                },
                "lVar5": {
                    "1": "read_result",
                    "12": "bytes_read",
                    "2": "long_var5",
                    "3": "bread_size",
                    "7": "bread_result"
                },
                "param_1": {
                    "1": "source",
                    "18": "param1",
                    "9": "param_1"
                },
                "param_2": {
                    "1": "param_in_rdx",
                    "18": "param2",
                    "9": "param_2"
                },
                "param_3": {
                    "1": "archive_file_name",
                    "14": "param3",
                    "2": "filename",
                    "3": "path",
                    "7": "archive_path"
                },
                "pcVar10": {
                    "1": "arch_name_ptr",
                    "2": "path_ptr",
                    "7": "current_path",
                    "8": "current_char"
                },
                "pcVar14": {
                    "1": "code_pointer_var14",
                    "13": "close_func",
                    "4": "bfd_close_func",
                    "6": "close_function"
                },
                "pcVar16": {
                    "1": "char_ptr2",
                    "2": "current_token",
                    "3": "current_char",
                    "4": "next_char"
                },
                "piVar8": {
                    "1": "error_location_ptr",
                    "10": "errno_ptr",
                    "2": "int_pointer_var8",
                    "3": "error_num",
                    "6": "errno_location"
                },
                "ppcVar11": {
                    "1": "pointer_pointer_char_var11",
                    "2": "arch_file",
                    "3": "arch_file_ptr"
                },
                "ppcVar4": {
                    "1": "stat_args",
                    "2": "arch_info",
                    "3": "archived_files"
                },
                "psVar17": {
                    "1": "stat_info",
                    "10": "stat_struct",
                    "2": "file_stat",
                    "3": "stat_struct_ptr",
                    "4": "stat_buffer"
                },
                "puVar7": {
                    "1": "temp_var_ptr",
                    "2": "tempdir",
                    "4": "temp_dir_info",
                    "5": "temp_dir_ptr",
                    "8": "temp_dir"
                },
                "pvVar13": {
                    "1": "ptr_value3",
                    "2": "buffer_ptr",
                    "23": "buffer"
                },
                "stack0x00000050": {
                    "1": "stat_buffer"
                },
                "stack0x000000e0": {
                    "1": "stat_output"
                },
                "stack0x00000170": {
                    "1": "unknown_buffer"
                },
                "uVar6": {
                    "1": "undefined_var",
                    "2": "temp_string",
                    "3": "error_msg",
                    "6": "error_message"
                },
                "uVar9": {
                    "1": "unsgn_value2",
                    "2": "undefined_var9",
                    "3": "err_msg",
                    "7": "error_msg"
                },
                "unaff_R14": {
                    "1": "temp_data_ptr",
                    "2": "archive_info",
                    "4": "temp_dir_list"
                },
                "unaff_R15": {
                    "1": "archive_path",
                    "2": "archive_file_list",
                    "3": "archive_info",
                    "5": "archive"
                },
                "unaff_retaddr": {
                    "1": "unaffected_return_addr",
                    "16": "return_address",
                    "2": "ret_addr",
                    "8": "return_addr"
                }
            },
            "called": [],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid extract_and_copy_archive_001052a2(undefined8 param1,undefined8 param2,char *param3)\n\n{\n  char format_valid;\n  int arch_type;\n  int stat_result;\n  char **archived_files;\n  long bytes_read;\n  undefined8 error_message;\n  char *format_string;\n  undefined8 *temp_dir;\n  int *errno_ptr;\n  undefined8 error_message;\n  long address;\n  char *current_char;\n  char **arch_file_ptr;\n  long file_size;\n  void *buffer;\n  code *close_func;\n  long copy_size;\n  char *next_char;\n  stat *stat_struct;\n  undefined8 *temp_dir_list;\n  char **archive;\n  byte flag;\n  undefined8 return_address;\n  undefined8 *output_path;\n  long *file_ptr;\n  char *temp_dir_path;\n  undefined8 *archive_file;\n  undefined8 output_format;\n  undefined8 output_format_flag;\n  uint file_permission;\n  long file_size;\n  \n  flag = 0;\n  current_char = (char *)(address + 1);\n  do {\n    if (*current_char == '/') {\n      extract_and_copy_archive_001052a2();\n      return;\n    }\n    while (*current_char == '\\0') {\n      current_char = (char *)concat(temp_dir_path,&DAT_0011b47d);\n      stat_result = stat(current_char,(stat *)&stat_buffer);\n      temp_dir = temp_dir_list;\n      if (-1 < stat_result) {\n        file_size = create_temp_directory_0011a0e0(current_char);\n        free(current_char);\n        if (file_size == 0) {\n          errno_ptr = __errno_location();\n          current_char = strerror(*errno_ptr);\n          error_message = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          print_error_message_00119ed0(error_message,current_char);\n          goto LAB_00104e93;\n        }\n        temp_dir = (undefined8 *)xmalloc(0x18);\n        current_char = *archive;\n        *temp_dir = temp_dir_list;\n        temp_dir[2] = 0;\n        temp_dir[1] = file_size;\n        current_char = (char *)concat(file_size,&DAT_0011b47d,current_char);\n      }\n      stat_result = 0;\n      if (DAT_001279eb != '\\0') {\n        stat_struct = (stat *)&stat_buffer;\n        for (file_size = 0x24; file_size != 0; file_size = file_size + -1) {\n          *(undefined4 *)&stat_struct->st_dev = 0;\n          stat_struct = (stat *)((long)stat_struct + (ulong)flag * -8 + 4);\n        }\n        arch_file_ptr = (char **)archive[0x1d];\n        if ((char **)archive[0x1d] == (char **)0x0) {\n          arch_file_ptr = archive;\n        }\n        stat_result = (**(code **)(arch_file_ptr[1] + 0x1e8))(archive,(stat *)&stat_buffer);\n        if (stat_result != 0) {\n          next_char = *archive;\n          error_message = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_message_00119ed0(error_message,next_char);\n        }\n      }\n      temp_dir_list = (undefined8 *)xmalloc(0x18);\n      temp_dir_list[1] = current_char;\n      *temp_dir_list = temp_dir;\n      temp_dir_list[2] = 0;\n      format_valid = bfd_check_format(archive,1);\n      if (format_valid == '\\0') {\n        error_message = dcgettext(0,\"Unable to recognise the format of file\",5);\n        print_error_message_001126c0(0,archive,0,error_message);\n        arch_file_ptr = (char **)bfd_openw(current_char,output_format);\n        if (arch_file_ptr == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        archived_files = (char **)archive[0x1d];\n        if ((char **)archive[0x1d] == (char **)0x0) {\n          archived_files = archive;\n        }\n        arch_type = (**(code **)(archived_files[1] + 0x1e8))(archive,&stat_output);\n        file_size = file_size;\n        if (arch_type == 0) {\n          if (file_size < 0) {\n            error_message = get_formatted_string_001125fa(archive);\n            error_message = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            print_error_message_00119ed0(error_message,error_message);\n          }\n          else {\n            arch_type = bfd_seek(archive,0,0);\n            if (arch_type == 0) {\n              if (DAT_001279e9 != '\\0') {\n                next_char = *arch_file_ptr;\n                error_message = get_formatted_string_001125fa(archive);\n                format_string = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(format_string,error_message,next_char);\n              }\n              buffer = (void *)xmalloc(0x2000);\n              for (; file_size != 0; file_size = file_size - copy_size) {\n                copy_size = 0x2000;\n                if (file_size < 0x2001) {\n                  copy_size = file_size;\n                }\n                bytes_read = bfd_bread(buffer,copy_size,archive);\n                archived_files = archive;\n                if ((copy_size != bytes_read) ||\n                   (bytes_read = bfd_bwrite(buffer,copy_size,arch_file_ptr), archived_files = arch_file_ptr, copy_size != bytes_read\n                   )) {\n                  print_error_message_001126c0(0,archived_files,0,0);\n                  free(buffer);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*arch_file_ptr,file_permission | 0x100);\n              free(buffer);\n              format_valid = bfd_close_all_done(arch_file_ptr);\n              if (format_valid == '\\0') {\n                print_error_message_001126c0(current_char,0,0,0);\n                DAT_00127a40 = 1;\n              }\n              goto LAB_00114a86;\n            }\n            error_message = get_formatted_string_001125fa(archive);\n            print_error_message_0011a110(error_message);\n          }\n        }\n        else {\n          print_error_message_001126c0(0,archive,0,0);\n        }\nLAB_00104f00:\n        format_valid = bfd_close_all_done(arch_file_ptr);\n        if (format_valid == '\\0') {\n          print_error_message_001126c0(current_char,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(current_char);\n        DAT_00127a40 = 1;\n      }\n      else {\n        if (output_format_flag._7_1_ == '\\0') {\n          arch_file_ptr = (char **)bfd_openw(current_char,*(undefined8 *)archive[1]);\n        }\n        else {\n          arch_file_ptr = (char **)bfd_openw(current_char,output_format);\n        }\n        if (arch_file_ptr == (char **)0x0) {\nLAB_00104e80:\n          print_error_message_001126c0(current_char,0,0,0);\n          goto LAB_00104e93;\n        }\n        format_valid = FUNC_00114e50(archive,arch_file_ptr,return_address);\n        if (format_valid == '\\0') {\n          arch_type = bfd_get_arch(archive);\n          if (arch_type == 0) goto LAB_00104d75;\n          format_valid = bfd_close_all_done(arch_file_ptr);\n          if (format_valid == '\\0') {\n            print_error_message_001126c0(current_char,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        format_valid = bfd_close(arch_file_ptr);\n        if (format_valid == '\\0') {\n          print_error_message_001126c0(current_char,0,0,0);\n          DAT_00127a40 = 1;\n        }\nLAB_00114a86:\n        if ((DAT_001279eb != '\\0') && (stat_result == 0)) {\n          set_file_time_0011a350(current_char,(stat *)&stat_buffer);\n        }\n        file_size = bfd_openr(current_char,output_format);\n        temp_dir_list[2] = file_size;\n        *file_ptr = file_size;\n        file_ptr = (long *)(file_size + 0xf0);\n        arch_file_ptr = (char **)bfd_openr_next_archived_file(archive_file,archive);\n        bfd_close(archive);\n        archive = arch_file_ptr;\n      }\n      if ((DAT_00127a40 != 0) || (archive == (char **)0x0)) {\n        *file_ptr = 0;\n        buffer = (void *)xstrdup(*output_path);\n        if (DAT_00127a40 == 0) {\n          close_func = bfd_close;\n        }\n        else {\n          close_func = bfd_close_all_done;\n        }\n        format_valid = (*close_func)(output_path);\n        if (format_valid == '\\0') {\n          DAT_00127a40 = 1;\n          print_error_message_001126c0(buffer,0,0,0);\n        }\n        free(buffer);\n        buffer = (void *)xstrdup(*archive_file);\n        format_valid = bfd_close(archive_file);\n        if (format_valid == '\\0') {\n          DAT_00127a40 = 1;\n          print_error_message_001126c0(buffer,0,0,0);\n        }\n        free(buffer);\n        goto LAB_00114b4b;\n      }\n      current_char = *archive;\n      param3 = current_char;\n      if (*current_char == '/') goto LAB_0010527d;\n    }\n    next_char = current_char;\n    if ((*current_char == '.') && (next_char = current_char + 1, current_char[1] == '.')) {\n      next_char = current_char + 2;\n      if ((current_char[2] == '\\0') || (current_char[2] == '/')) {\nLAB_0010527d:\n        error_message = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        print_error_message_00119ed0(error_message,param3);\nLAB_00104e93:\n        DAT_00127a40 = 1;\nLAB_00114b4b:\n        while (temp_dir_list != (undefined8 *)0x0) {\n          if (temp_dir_list[2] == 0) {\n            rmdir((char *)temp_dir_list[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)temp_dir_list[1]);\n          }\n          free((void *)temp_dir_list[1]);\n          temp_dir = (undefined8 *)*temp_dir_list;\n          free(temp_dir_list);\n          temp_dir_list = temp_dir;\n        }\n        rmdir(temp_dir_path);\n        free(temp_dir_path);\n        return;\n      }\n    }\n    for (; (current_char = next_char, *next_char != '\\0' && (*next_char != '/')); next_char = next_char + 1) {\n    }\n  } while( true );\n}\n\n",
            "current_name": "extract_and_copy_archive_001052a2",
            "entrypoint": "0x001052a2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001052a2": "extract_and_copy_archive_001052a2",
                "__format": "format_string",
                "bVar18": "flag",
                "cVar1": "format_valid",
                "iVar2": "arch_type",
                "iVar3": "stat_result",
                "in_RAX": "address",
                "in_stack_00000008": "output_path",
                "in_stack_00000010": "file_ptr",
                "in_stack_00000018": "temp_dir_path",
                "in_stack_00000020": "archive_file",
                "in_stack_00000028": "output_format",
                "in_stack_00000030": "output_format_flag",
                "in_stack_000000f8": "file_permission",
                "in_stack_00000110": "file_size",
                "lVar12": "file_size",
                "lVar15": "copy_size",
                "lVar5": "bytes_read",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "pcVar10": "current_char",
                "pcVar14": "close_func",
                "pcVar16": "next_char",
                "piVar8": "errno_ptr",
                "ppcVar11": "arch_file_ptr",
                "ppcVar4": "archived_files",
                "psVar17": "stat_struct",
                "puVar7": "temp_dir",
                "pvVar13": "buffer",
                "stack0x00000050": "stat_buffer",
                "stack0x000000e0": "stat_output",
                "uVar6": "error_message",
                "uVar9": "error_message",
                "unaff_R14": "temp_dir_list",
                "unaff_R15": "archive",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001053b5": {
            "additional_data": {
                "FUN_001053b5": {
                    "1": "print_bad_format_error_and_exit",
                    "14": "print_error_and_exit",
                    "2": "print_bad_format_error_message",
                    "5": "print_bad_format_error",
                    "7": "print_error_message"
                },
                "dcgettext": {
                    "1": "translate_error_message",
                    "3": "get_error_message"
                },
                "print_error_and_exit_00119dd0": {
                    "1": "print_error_message_and_exit",
                    "3": "print_error_and_exit"
                },
                "uVar1": {
                    "1": "translated_message",
                    "2": "error_msg",
                    "26": "error_message"
                }
            },
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "calling": [
                "FUN_00114c80"
            ],
            "code": "\nvoid print_error_and_exit_001053b5(void)\n\n{\n  undefined8 error_message;\n  \n  error_message = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_and_exit_001053b5(error_message);\n}\n\n",
            "current_name": "print_error_and_exit_001053b5",
            "entrypoint": "0x001053b5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001053b5": "print_error_and_exit_001053b5",
                "dcgettext": "get_error_message",
                "print_error_and_exit_00119dd0": "print_error_and_exit",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001053d5": {
            "additional_data": {
                "*(undefined4 *)(unaff_R12 + 8)": {
                    "1": "return_value"
                },
                "FUN_001053d5": {
                    "1": "print_close_and_return",
                    "12": "print_error_and_close",
                    "3": "print_error_message"
                },
                "bfd_close_all_done": {
                    "1": "close_file"
                },
                "print_error_message_0011a110": {
                    "3": "print_error_message"
                },
                "unaff_R12": {
                    "1": "error_pointer",
                    "2": "file_pointer",
                    "4": "file_descriptor",
                    "6": "error_ptr"
                },
                "unaff_R14": {
                    "1": "bfd_ptr",
                    "2": "error_message_address",
                    "4": "message_pointer",
                    "5": "error_message_ptr",
                    "7": "message_ptr",
                    "8": "error_message"
                }
            },
            "called": [
                "FUN_0011a110"
            ],
            "calling": [
                "FUN_00119f70"
            ],
            "code": "\nundefined4 print_error_and_close_001053d5(void)\n\n{\n  long error_ptr;\n  undefined8 *error_message;\n  \n  print_error_message(*error_message);\n  *(undefined4 *)(error_ptr + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(error_ptr + 8);\n}\n\n",
            "current_name": "print_error_and_close_001053d5",
            "entrypoint": "0x001053d5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001053d5": "print_error_and_close_001053d5",
                "bfd_close_all_done": "close_file",
                "print_error_message_0011a110": "print_error_message",
                "unaff_R12": "error_ptr",
                "unaff_R14": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010540e": {
            "additional_data": {
                "*(int *)(*(long *)(*(long *)(param_2 + 8) + 0x380) + 0x71)": {
                    "1": "pointer_value2"
                },
                "*(long *)(*(long *)(param_2 + 8) + 8)": {
                    "1": "pointer_value1"
                },
                "*(long *)(param_2 + 8)": {
                    "1": "pointer"
                },
                "0x380": {
                    "1": "constant1"
                },
                "0x71": {
                    "1": "constant2"
                },
                "FUN_0010540e": {
                    "1": "execute_logic",
                    "19": "execute_function",
                    "2": "execute_operation"
                },
                "byte": {
                    "1": "value"
                },
                "code": {
                    "1": "function_pointer"
                },
                "in_RAX": {
                    "1": "object_pointer",
                    "2": "temp_var",
                    "3": "rax"
                },
                "param_1": {
                    "1": "data",
                    "2": "function_param",
                    "3": "arg1",
                    "4": "argument1",
                    "6": "param1"
                },
                "param_2": {
                    "1": "param_b",
                    "2": "input_data",
                    "3": "data_pointer",
                    "4": "argument2",
                    "6": "param2"
                },
                "param_3": {
                    "1": "flags",
                    "2": "arg3",
                    "3": "condition",
                    "4": "argument3",
                    "5": "param3",
                    "9": "flag"
                }
            },
            "called": [],
            "calling": [
                "FUN_00114d50"
            ],
            "code": "\nvoid execute_function_0010540e(undefined8 param1,long param2,uint flag)\n\n{\n  long rax;\n  \n  if ((flag == 2) && (*(int *)(*(long *)(param2 + 8) + 8) == 2)) {\n    flag = (uint)*(value *)(*(long *)(*(long *)(param2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(function_pointer **)(*(long *)(rax + 0x380) + 0x78))(param1,flag != 0);\n  return;\n}\n\n",
            "current_name": "execute_function_0010540e",
            "entrypoint": "0x0010540e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010540e": "execute_function_0010540e",
                "byte": "value",
                "code": "function_pointer",
                "in_RAX": "rax",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010543c": {
            "additional_data": {
                "*pcVar3": {
                    "1": "errno_message"
                },
                "*piVar2": {
                    "1": "errno_location"
                },
                "FUN_0010543c": {
                    "1": "print_and_exit_with_error",
                    "26": "print_error_and_exit"
                },
                "pcVar3": {
                    "1": "str_error",
                    "17": "error_message",
                    "2": "error_str",
                    "9": "error_string"
                },
                "piVar2": {
                    "1": "errno_location_ptr",
                    "2": "errno_location_pointer",
                    "7": "errno_ptr",
                    "8": "errno_location"
                },
                "uVar1": {
                    "1": "param1",
                    "13": "file_descriptor",
                    "2": "argument_1",
                    "3": "file_pointer",
                    "4": "file_handle"
                },
                "uVar4": {
                    "1": "translation",
                    "2": "error_msg",
                    "5": "localized_error_message",
                    "7": "error_message"
                },
                "unaff_RBP": {
                    "1": "register_rbp",
                    "10": "base_pointer",
                    "2": "stack_base"
                }
            },
            "called": [
                "strerror",
                "__errno_location",
                "dcgettext",
                "FUN_00119dd0"
            ],
            "calling": [
                "FUN_00114d60"
            ],
            "code": "\nvoid print_error_and_exit_0010543c(void)\n\n{\n  undefined8 file_descriptor;\n  int *errno_location;\n  char *error_message;\n  undefined8 error_message;\n  long base_pointer;\n  \n  errno_location = __errno_location();\n  error_message = strerror(*errno_location);\n  file_descriptor = *(undefined8 *)(base_pointer + 0x10);\n  error_message = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  print_error_and_exit_0010543c_00119dd0(error_message,file_descriptor,error_message);\n}\n\n",
            "current_name": "print_error_and_exit_0010543c",
            "entrypoint": "0x0010543c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010543c": "print_error_and_exit_0010543c",
                "pcVar3": "error_message",
                "piVar2": "errno_location",
                "uVar1": "file_descriptor",
                "uVar4": "error_message",
                "unaff_RBP": "base_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001054af": {
            "additional_data": {
                "FUN_001054af": {
                    "1": "cleanup_resource",
                    "12": "cleanup_hash_table",
                    "2": "cleanup_function",
                    "3": "delete_hash_tables",
                    "4": "cleanup_hashtables"
                },
                "in_RAX": {
                    "1": "unused_variable_1",
                    "2": "unused_var",
                    "3": "unused_variable"
                },
                "param_1": {
                    "1": "param",
                    "10": "unused_param1",
                    "2": "param1",
                    "4": "unused_param_1",
                    "6": "unused_param"
                },
                "param_2": {
                    "1": "entry2_param",
                    "12": "unused_param2",
                    "2": "param2",
                    "4": "unused_param_2",
                    "5": "unused_param"
                }
            },
            "called": [
                "htab_delete"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid cleanup_hash_table_001054af(undefined8 unused_param1,undefined8 unused_param2)\n\n{\n  undefined8 unused_variable;\n  \n  htab_delete(DAT_00127a18);\n  htab_delete(DAT_00127a10);\n  htab_delete(DAT_00127a28);\n  htab_delete(DAT_00127a08);\n  htab_delete(DAT_00127a00);\n  htab_delete(DAT_001279f8);\n  htab_delete(DAT_001279f0);\n  htab_delete(DAT_001278f0);\n  htab_delete(DAT_001278e8,unused_param2,unused_variable);\n  return;\n}\n\n",
            "current_name": "cleanup_hash_table_001054af",
            "entrypoint": "0x001054af",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001054af": "cleanup_hash_table_001054af",
                "in_RAX": "unused_variable",
                "param_1": "unused_param1",
                "param_2": "unused_param2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010551d": {
            "additional_data": {
                "FUN_0010551d": {
                    "1": "extract_stab_data",
                    "2": "process_binary_file",
                    "4": "process_debug_info",
                    "5": "process_binary"
                },
                "__ptr": {
                    "1": "void_pointer"
                },
                "__ptr_00": {
                    "1": "string_contents_ptr",
                    "2": "void_pointer2"
                },
                "__s": {
                    "1": "string_variable",
                    "2": "error_message",
                    "3": "string",
                    "5": "string_var"
                },
                "__s_00": {
                    "2": "section_dump_file"
                },
                "__s_01": {
                    "1": "error_str"
                },
                "bStack0000000000000100": {
                    "1": "is_mergeable"
                },
                "bStack0000000000000101": {
                    "1": "has_contents"
                },
                "bVar2": {
                    "1": "aux_symbol_flag",
                    "2": "flag",
                    "4": "byte_var2",
                    "6": "byte_value",
                    "7": "byte_var"
                },
                "bVar38": {
                    "1": "boolean_variable_2",
                    "2": "bool_var1"
                },
                "bVar39": {
                    "1": "byte_value2"
                },
                "bVar8": {
                    "1": "are_debug_sections_present"
                },
                "bVarXX": {
                    "1": "bool_var"
                },
                "cVar33": {
                    "1": "message"
                },
                "cVar8": {
                    "1": "section_char",
                    "2": "char_value1",
                    "3": "char_var8",
                    "4": "char_var1",
                    "5": "char_var"
                },
                "cVar9": {
                    "1": "another_char_value",
                    "2": "char_value2",
                    "3": "char_var9",
                    "8": "char_var2"
                },
                "char *__s": {
                    "1": "string_pointer"
                },
                "char *pcVar19": {
                    "1": "string_pointer2"
                },
                "char cVar8": {
                    "1": "char_var1"
                },
                "char cVar9": {
                    "1": "char_var2"
                },
                "code **pcVar30": {
                    "1": "function_pointer2"
                },
                "iStack000000000000006c": {
                    "1": "integer_variable_3"
                },
                "iVar11": {
                    "1": "int_value",
                    "2": "integer_var11",
                    "3": "int_value1",
                    "5": "int_var1"
                },
                "iVar14": {
                    "1": "int_value",
                    "2": "int_var14",
                    "3": "int_value2",
                    "8": "int_var2"
                },
                "iVar23": {
                    "1": "errno_location"
                },
                "iVar31": {
                    "1": "int_value",
                    "2": "int_var3"
                },
                "iVarXX": {
                    "1": "integer_var"
                },
                "in_stack_...": {
                    "1": "ulong_var6"
                },
                "in_stack_00000008": {
                    "1": "bfd"
                },
                "in_stack_00000010": {
                    "1": "num_sections"
                },
                "in_stack_00000018": {
                    "1": "char_var3"
                },
                "in_stack_000000c0": {
                    "1": "stab_data"
                },
                "in_stack_000000c8": {
                    "1": "section_index"
                },
                "in_stack_000000d0": {
                    "1": "mergeable_data"
                },
                "in_stack_000000d8": {
                    "1": "debug_data"
                },
                "in_stack_000000e0": {
                    "1": "debug_strings"
                },
                "in_stack_000000f0": {
                    "1": "debugline_data"
                },
                "in_stack_000000f8": {
                    "1": "debugline_size"
                },
                "in_stack_00000110": {
                    "1": "section_content"
                },
                "in_stack_00000118": {
                    "1": "note_entry"
                },
                "in_stack_00000140": {
                    "1": "section_name_entry"
                },
                "int *piVar23": {
                    "1": "int_pointer"
                },
                "int iVar11": {
                    "1": "int_var1"
                },
                "int iVar14": {
                    "1": "int_var2"
                },
                "ioVar39": {
                    "1": "byte_var2"
                },
                "lStack0000000000000078": {
                    "1": "long_var4"
                },
                "lStack0000000000000088": {
                    "1": "long_var5"
                },
                "lStack00000000000000a0": {
                    "1": "long_var6"
                },
                "lStackXX": {
                    "1": "long_stack_var"
                },
                "lVar10": {
                    "1": "symtab_data"
                },
                "lVar11": {
                    "1": "section"
                },
                "lVar15": {
                    "1": "long_value2"
                },
                "lVar21": {
                    "1": "var21",
                    "2": "long_var21",
                    "5": "long_var1"
                },
                "lVar25": {
                    "1": "long_var25",
                    "2": "var25",
                    "3": "long_var2"
                },
                "lVar27": {
                    "1": "data_length",
                    "2": "var27",
                    "3": "long_var3"
                },
                "lVar28": {
                    "1": "debug_link_section_size"
                },
                "lVar32": {
                    "1": "head"
                },
                "lVar42": {
                    "1": "long_variable_3"
                },
                "lVar45": {
                    "1": "long_variable_4"
                },
                "lVar6": {
                    "1": "section_data_size"
                },
                "lVar7": {
                    "1": "merged_notes_size"
                },
                "long *plVar15": {
                    "1": "pointer4"
                },
                "long lVar21": {
                    "1": "long_var1"
                },
                "long lVar25": {
                    "1": "long_var2"
                },
                "long lVar27": {
                    "1": "long_var3"
                },
                "long lVar28": {
                    "1": "long_var4"
                },
                "long lVar29": {
                    "1": "long_var5"
                },
                "pVar30": {
                    "1": "ctx_ptr"
                },
                "pcStack...": {
                    "1": "string_var5"
                },
                "pcStack0000000000000038": {
                    "1": "str_ptr4"
                },
                "pcStack0000000000000090": {
                    "1": "pointer_to_character_5"
                },
                "pcVar19": {
                    "1": "section_file_name",
                    "2": "pointer_var19",
                    "3": "string_var2"
                },
                "pcVar27": {
                    "1": "filename"
                },
                "pcVar28": {
                    "1": "pointer_char2",
                    "2": "string_var3",
                    "3": "section_name"
                },
                "pcVar33": {
                    "1": "pointer_to_character_3"
                },
                "pcVar34": {
                    "1": "pointer4"
                },
                "pcVar35": {
                    "1": "pointer_to_pointer_to_character"
                },
                "pcVar39": {
                    "1": "pointer39"
                },
                "pcVar4": {
                    "1": "section_name",
                    "9": "function_pointer"
                },
                "pcVar8": {
                    "1": "character_1"
                },
                "pcVar9": {
                    "1": "character_2"
                },
                "pcVarXX": {
                    "1": "str_var"
                },
                "piVar23": {
                    "1": "int_pointer1"
                },
                "plVar15": {
                    "1": "pointer_list15",
                    "4": "pointer4"
                },
                "plVar15_2": {
                    "1": "long_array_pointer15_2"
                },
                "plVar29": {
                    "1": "attribute_notes"
                },
                "plVar31": {
                    "1": "debug_info_ptr"
                },
                "plVar32": {
                    "1": "pointer9"
                },
                "plVar32_2": {
                    "1": "long_array_pointer32_2"
                },
                "plVarXX": {
                    "1": "section_pointer"
                },
                "ppcVar13": {
                    "1": "debug_section_names"
                },
                "ppcVar14": {
                    "1": "stab_name"
                },
                "ppcVar35": {
                    "1": "pointer_pointer"
                },
                "ppuVar37": {
                    "1": "pointer_pointer_var37"
                },
                "ppuVarXX": {
                    "1": "pointer_to_pointer_var"
                },
                "puStack...": {
                    "1": "pointer_var1"
                },
                "puStack0000000000000020": {
                    "1": "pointer_variable"
                },
                "puVar1": {
                    "1": "section_content_pointer",
                    "10": "pointer1",
                    "2": "pointer_var1",
                    "5": "section_flags"
                },
                "puVar20": {
                    "1": "section_info_ptr"
                },
                "puVar23": {
                    "1": "pointer7"
                },
                "puVar29": {
                    "1": "pointer9",
                    "2": "pointer_var29"
                },
                "puVar3": {
                    "1": "ptr_to_aux_symbol_data",
                    "2": "ptr_var",
                    "3": "pointer3",
                    "7": "pointer2"
                },
                "puVar30": {
                    "1": "next_section"
                },
                "puVar34": {
                    "1": "merged_section_info"
                },
                "puVar37": {
                    "1": "section_list_iterator"
                },
                "puVar48": {
                    "1": "pointer_to_undefined_3"
                },
                "puVar5": {
                    "1": "ptr_uint64",
                    "2": "pointer_var5",
                    "3": "pointer5",
                    "7": "pointer3"
                },
                "puVarXX": {
                    "1": "note_section_pointer"
                },
                "pvVar36": {
                    "1": "section_contents"
                },
                "sVar12": {
                    "1": "section_name"
                },
                "sVar18": {
                    "1": "size_variable",
                    "2": "size_value1",
                    "3": "size_var18",
                    "5": "size_var1"
                },
                "sVar19": {
                    "1": "error_string"
                },
                "sVar20": {
                    "1": "error_description"
                },
                "sVar21": {
                    "1": "debug_section_name"
                },
                "sVar22": {
                    "1": "error_message"
                },
                "sVar23": {
                    "1": "section_contents"
                },
                "sVar24": {
                    "1": "error_message"
                },
                "sVar25": {
                    "1": "error_description"
                },
                "sVar26": {
                    "1": "another_size_variable",
                    "2": "bytes_written",
                    "3": "size_value2",
                    "6": "size_var2"
                },
                "sVar32": {
                    "1": "size_t_variable_3"
                },
                "sVarXX": {
                    "1": "string_var"
                },
                "size_t sVar18": {
                    "1": "size_var1"
                },
                "uStack0000000000000048": {
                    "1": "uint_var4"
                },
                "uStackXX": {
                    "1": "uninitialized_stack_var"
                },
                "uVar10": {
                    "1": "uint_var",
                    "2": "var10",
                    "3": "unsigned_var10",
                    "4": "uint_var1"
                },
                "uVar12": {
                    "1": "val_3",
                    "2": "var12",
                    "3": "unsigned_var4",
                    "5": "uint_var2"
                },
                "uVar13": {
                    "1": "bfd_error_code",
                    "2": "undefined4_value",
                    "3": "unsigned_var5"
                },
                "uVar16": {
                    "1": "ulong_var9",
                    "2": "undefined8_value1",
                    "3": "unsigned_var6",
                    "4": "ulong_var3"
                },
                "uVar17": {
                    "1": "ulong_var10",
                    "2": "undefined8_value2",
                    "3": "unsigned_var17",
                    "4": "ulong_var4"
                },
                "uVar20": {
                    "1": "uint_value",
                    "2": "unsigned_var20"
                },
                "uVar22": {
                    "1": "ulong_value4",
                    "2": "ulong_var6"
                },
                "uVar24": {
                    "1": "result",
                    "2": "ulong_var7"
                },
                "uVar26": {
                    "1": "var26"
                },
                "uVar27": {
                    "1": "unsigned_var27"
                },
                "uVar30": {
                    "1": "unsigned_var30",
                    "2": "ulong_var8"
                },
                "uVar6": {
                    "1": "ulong_var6",
                    "3": "unsigned_var6"
                },
                "uVar7": {
                    "1": "merged_notes_size",
                    "3": "unsigned_var2",
                    "4": "ulong_var2"
                },
                "uVar9": {
                    "1": "debuglink_section_size"
                },
                "uVarXX": {
                    "1": "updated_variable_name"
                },
                "uVarYY": {
                    "1": "loop_var"
                },
                "uVarZZ": {
                    "1": "loop_var2"
                },
                "uint uVar10": {
                    "1": "unsigned_int_var"
                },
                "uint uVar12": {
                    "1": "unsigned_int_var2"
                },
                "ulong uVar16": {
                    "1": "unsigned_long_var3"
                },
                "ulong uVar17": {
                    "1": "unsigned_long_var4"
                },
                "ulong uVar20": {
                    "1": "unsigned_long_var5"
                },
                "ulong uVar22": {
                    "1": "unsigned_long_var6"
                },
                "ulong uVar24": {
                    "1": "unsigned_long_var7"
                },
                "ulong uVar26": {
                    "1": "unsigned_long_var8"
                },
                "ulong uVar6": {
                    "1": "unsigned_long_var1"
                },
                "ulong uVar7": {
                    "1": "unsigned_long_var2"
                },
                "unaff_R13": {
                    "1": "r13_var"
                },
                "unaff_R14": {
                    "1": "new_pointer2"
                },
                "unaff_RBP": {
                    "1": "rbp_var"
                },
                "unaff_RBX": {
                    "1": "merged_notes_list_ptr"
                },
                "undefined8 uVar32": {
                    "1": "unsigned_long_var9"
                },
                "void *__ptr": {
                    "1": "void_pointer"
                },
                "void *__ptr_00": {
                    "1": "void_pointer2"
                },
                "void *pvVar31": {
                    "1": "void_pointer3"
                }
            },
            "called": [
                "FUN_001126c0",
                "dcgettext",
                "free"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong process_binary_0010551d(void)\n\n{\n  uint *pointer1;\n  byte byte_var;\n  undefined *pointer2;\n  code *function_pointer;\n  undefined8 *pointer3;\n  ulong ulong_value1;\n  ulong ulong_var2;\n  char *string_var;\n  char char_var;\n  char char_var2;\n  uint uint_var1;\n  int int_var1;\n  uint uint_var2;\n  undefined4 unsigned_var5;\n  int int_var2;\n  long *pointer4;\n  undefined8 ulong_var3;\n  undefined8 ulong_var4;\n  size_t size_var1;\n  char *string_var2;\n  void *section_contents;\n  void *void_pointer2;\n  ulong merged_section_index;\n  long long_var1;\n  ulong ulong_var6;\n  int *error_number;\n  ulong ulong_var7;\n  long long_var2;\n  FILE *section_dump_file;\n  size_t size_var2;\n  long long_var3;\n  long *ptr_to_allocated_memory;\n  char *section_name;\n  undefined8 *pointer_var29;\n  ulong ulong_var8;\n  int int_var3;\n  long ptr_to_current_state;\n  long *merged_section_data_pointer;\n  char *error_message;\n  undefined4 *section_data_pointer;\n  char **section_matched_pattern_pointer;\n  long *ptr_to_linked_list;\n  void *section_contents;\n  undefined8 *ptr_to_string;\n  undefined **section_name_pointer;\n  bool bool_value;\n  byte unreachable_block;\n  long file_object;\n  ulong num_elements;\n  char notes_data;\n  undefined4 *section_attributes;\n  char *pointer_to_character_4;\n  uint unsigned_variable_4;\n  int integer_variable_3;\n  long long_variable_5;\n  long long_var5;\n  char *pointer_to_character_5;\n  long long_variable_6;\n  long *stabs_data;\n  ulong section_index;\n  long mergeable_data;\n  long debug_data;\n  void *debug_strings;\n  long debugline_data;\n  undefined8 debugline_size;\n  byte is_mergeable;\n  byte has_contents;\n  undefined8 section_content;\n  ushort note_entry;\n  char *section_name_entry;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  unreachable_block = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  print_error_message_001126c0(0);\n  free(ptr_to_allocated_memory);\nLAB_001151a2:\n  ptr_to_current_state = *(long *)(ptr_to_current_state + 8);\n  pointer_var29 = DAT_001279d0;\n  if (ptr_to_current_state == 0) goto joined_r0x001151c7;\n  if (DAT_00127a20 != '\\0') {\n    if ((((*(int *)(ptr_to_string[1] + 8) != 5) || (*(int *)(*(long *)(ptr_to_current_state + 0xd0) + 4) != 7)) ||\n        (char_var2 = compare_strings_00113fb0(), char_var2 == '\\0')) ||\n       ((*(long *)(ptr_to_current_state + 0x60) == 0 || (long_var2 = *(long *)(ptr_to_current_state + 0x40), long_var2 == 0))))\n    goto LAB_001151a2;\n    ptr_to_allocated_memory = (long *)xmalloc(0x20);\n    ptr_to_allocated_memory[1] = 0;\n    char_var2 = bfd_get_full_section_contents();\n    if (char_var2 != '\\0') {\n      long_var3 = process_build_attribute_notes_001163d0();\n      ptr_to_allocated_memory[2] = long_var3;\n      if ((long_var3 == long_var2) || (char_var2 = bfd_set_section_size(), char_var2 != '\\0')) {\n        ptr_to_allocated_memory[3] = (long)ptr_to_linked_list;\n        *ptr_to_allocated_memory = ptr_to_current_state;\n        ptr_to_linked_list = ptr_to_allocated_memory;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,file_object,ptr_to_current_state);\n        free((void *)ptr_to_allocated_memory[1]);\n        free(ptr_to_allocated_memory);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (long_var2 = *(long *)(ptr_to_current_state + 8); long_var2 != 0; long_var2 = *(long *)(long_var2 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; pointer_var29 != (undefined8 *)0x0; pointer_var29 = (undefined8 *)*pointer_var29) {\n    long_var2 = bfd_get_section_by_name();\n    if (long_var2 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(long_var2 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      size_var1 = *(size_t *)(long_var2 + 0x40);\n      section_dump_file = fopen((char *)pointer_var29[2],\"w\");\n      if (section_dump_file == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(pointer_var29[2],0,0);\n      }\n      else {\n        char_var2 = bfd_malloc_and_get_section();\n        if (char_var2 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((size_var1 != 0) &&\n                (size_var2 = fwrite(section_name_entry,1,size_var1,section_dump_file), size_var2 != size_var1)) {\n          error_number = __errno_location();\n          error_message = strerror(*error_number);\n          ulong_var4 = pointer_var29[2];\n          ulong_var3 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(ulong_var3,ulong_var4,error_message);\n          free(section_name_entry);\n          fclose(section_dump_file);\n          return 0;\n        }\n        fclose(section_dump_file);\n        free(section_name_entry);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    long_variable_5 = 0;\n  }\n  else {\n    long_var2 = bfd_get_section_by_name(file_object,\".gnu_debuglink\");\n    if (long_var2 != 0) {\n      ulong_var4 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(ulong_var4);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    long_variable_5 = bfd_create_gnu_debuglink_section(file_object);\n    long_var2 = DAT_00127a30;\n    if (long_variable_5 == 0) {\n      ulong_var4 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,file_object,0,ulong_var4,long_var2);\n      return 0;\n    }\n    if (*(int *)(*(long *)(file_object + 8) + 8) == 2) {\n      merged_section_index = 0;\n      for (ulong_var7 = *(ulong *)(file_object + 0x90); ulong_var7 != 0;\n          ulong_var7 = *(ulong *)(ulong_var7 + 8)) {\n        ulong_var6 = *(ulong *)(ulong_var7 + 0x30);\n        ulong_var8 = merged_section_index;\n        ulong_value1 = ulong_var7;\n        ulong_var2 = merged_section_index;\n        if (ulong_var6 != 0) {\n          while ((ulong_var8 = ulong_value1, ulong_var2 != 0 &&\n                 (ulong_var8 = ulong_var7, ulong_var6 <= *(ulong *)(merged_section_index + 0x30)))) {\n            ulong_var7 = *(ulong *)(ulong_var7 + 8);\n            if (ulong_var7 == 0) goto LAB_00107db8;\n            ulong_var6 = *(ulong *)(ulong_var7 + 0x30);\n            ulong_value1 = merged_section_index;\n            ulong_var2 = ulong_var6;\n          }\n        }\n        merged_section_index = ulong_var8;\n      }\nLAB_00107db8:\n      if (merged_section_index == 0) {\n        ulong_var7 = 0x1000;\n      }\n      else {\n        merged_section_index = *(long *)(merged_section_index + 0x40) + *(long *)(merged_section_index + 0x30);\n        ulong_var7 = 0xffffffffffffffff;\n        if (merged_section_index < 0xfffffffffffff001) {\n          ulong_var7 = merged_section_index + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(long_variable_5 + 0x28) = *(byte *)(long_variable_5 + 0x28) | 1;\n      *(ulong *)(long_variable_5 + 0x30) = ulong_var7;\n      *(ulong *)(long_variable_5 + 0x38) = ulong_var7;\n    }\n  }\n  merged_section_data_pointer = DAT_001278d0;\n  integer_variable_3 = *(int *)(file_object + 0xa0);\n  if (integer_variable_3 != 0) {\n    ulong_var7 = process_debug_info_0010554f();\n    return ulong_var7;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    section_attributes = (undefined4 *)0x0;\n  }\n  else {\n    section_name_pointer = &PTR_sstring_vartab_00125c60;\n    section_attributes = (undefined4 *)xmalloc(0x60);\n    section_data_pointer = section_attributes;\n    for (long_var2 = 0x18; long_var2 != 0; long_var2 = long_var2 + -1) {\n      *section_data_pointer = 0;\n      section_data_pointer = section_data_pointer + (ulong)unreachable_block * -2 + 1;\n    }\n    pointer_to_character_4 = (char *)0x0;\n    do {\n      pointer2 = *section_name_pointer;\n      long_var2 = bfd_get_section_by_name();\n      long_var3 = bfd_get_section_by_name();\n      if ((long_var2 != 0) && (long_var3 != 0)) {\n        long_var2 = *(long *)(long_var2 + 0x40);\n        section_contents = (void *)xmalloc(long_var2);\n        char_var2 = bfd_get_section_contents();\n        if (char_var2 == '\\0') {\n          unsigned_var5 = bfd_get_error();\n          bfd_errmsg(unsigned_var5);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*ptr_to_string);\n          free(pointer_to_character_4);\n          free(section_contents);\n        }\n        else {\n          ulong_var7 = *(ulong *)(long_var3 + 0x40);\n          void_pointer2 = (void *)xmalloc(ulong_var7 + 1);\n          notes_data = bfd_get_section_contents();\n          if (notes_data == '\\0') {\n            unsigned_var5 = bfd_get_error();\n            bfd_errmsg(unsigned_var5);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*ptr_to_string);\n            free(pointer_to_character_4);\n          }\n          else {\n            *(undefined *)((long)void_pointer2 + ulong_var7) = 0;\n            if ((pointer_to_character_4 != (char *)0x0) ||\n               (pointer_to_character_4 = (char *)initialize_data_structure_00112894(),\n               pointer_to_character_4 != (char *)0x0)) {\n              long_variable_6 = 0;\n              long_var5 = 0;\n              for (section_contents = section_contents; section_contents <= (void *)((long)section_contents + long_var2 + -0xc);\n                  section_contents = (void *)((long)section_contents + 0xc)) {\n                merged_section_index = (**(code **)(ptr_to_string[1] + 0x40))(section_contents);\n                byte_var = *(byte *)((long)section_contents + 4);\n                unsigned_var5 = (**(code **)(ptr_to_string[1] + 0x58))((long)section_contents + 6);\n                long_var3 = (**(code **)(ptr_to_string[1] + 0x40))((long)section_contents + 8);\n                if (byte_var == 0) {\n                  long_var5 = long_variable_6;\n                  long_variable_6 = long_variable_6 + long_var3;\n                }\n                else {\n                  ulong_var6 = (merged_section_index & 0xffffffff) + long_var5;\n                  if (ulong_var6 < ulong_var7) {\n                    error_message = (char *)((long)void_pointer2 + ulong_var6);\n                    pointer_to_character_5 = (char *)0x0;\n                    while( true ) {\n                      size_var1 = strlen(error_message);\n                      if (((size_var1 == 0) || (section_name = error_message + (size_var1 - 1), *section_name != '\\')) ||\n                         ((ulong)((long)section_contents + long_var2) < (long)section_contents + 0x10U)) goto LAB_001077fb;\n                      *section_name = '\\0';\n                      section_contents = (void *)((long)section_contents + 0xc);\n                      int_var1 = (**(code **)(ptr_to_string[1] + 0x40))(section_contents);\n                      merged_section_index = (ulong)(uint)(int_var1 + (int)long_var5);\n                      if (ulong_var7 <= merged_section_index) break;\n                      error_message = (char *)concat(error_message,(long)void_pointer2 + merged_section_index,0);\n                      *section_name = '\\';\n                      free(pointer_to_character_5);\n                      pointer_to_character_5 = error_message;\n                    }\n                    ulong_var4 = *ptr_to_string;\n                    section_name = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,section_name,ulong_var4,pointer2,((long)section_contents - (long)section_contents) / 0xc);\nLAB_001077fb:\n                    update_data_001088ae((ulong)byte_var,unsigned_var5,long_var3,error_message);\n                    char_var2 = process_debug_info_0011173a(section_attributes,pointer_to_character_4,byte_var);\n                    if (char_var2 == '\\0') {\n                      print_stab_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(pointer_to_character_5);\n                      free(pointer_to_character_4);\n                      free(section_contents);\n                      free(void_pointer2);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    ulong_var4 = *ptr_to_string;\n                    error_message = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,error_message,ulong_var4,pointer2,((long)section_contents - (long)section_contents) / 0xc,\n                            merged_section_index & 0xffffffff,(ulong)byte_var,((long)section_contents - (long)section_contents) % 0xc);\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(section_contents);\n              goto LAB_001058eb;\n            }\n          }\n          free(void_pointer2);\n          free(section_contents);\n        }\nLAB_00105981:\n        free(section_attributes);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      section_name_pointer = section_name_pointer + 2;\n    } while (section_name_pointer != (undefined **)&DAT_00125c90);\n    if ((pointer_to_character_4 != (char *)0x0) && (char_var2 = process_debug_info_0010c892(), char_var2 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(ptr_to_string[1] + 8) == 1) {\n      long_var2 = 0;\n      for (pointer4 = merged_section_data_pointer; pointer4 < merged_section_data_pointer + num_elements; pointer4 = pointer4 + 1) {\n        (**(code **)(ptr_to_string[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((long_var2 != 0) || (long_var2 = initialize_data_structure_00112894(), long_var2 != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            error_message = (char *)0x0;\n            section_name = in_stack_00000150;\n            while (((*section_name != '\\0' && (size_var1 = strlen(section_name), section_name[size_var1 - 1] == '\\')) &&\n                   (pointer4 + 1 < merged_section_data_pointer + num_elements))) {\n              string_var2 = (char *)xstrdup(section_name);\n              size_var1 = strlen(string_var2);\n              string_var2[size_var1 - 1] = '\\0';\n              section_name = (char *)concat(string_var2,*(undefined8 *)(pointer4[1] + 8),0);\n              free(string_var2);\n              free(error_message);\n              pointer4 = pointer4 + 1;\n              error_message = section_name;\n            }\n            update_data_001088ae(uStack0000000000000158,(int)sStack000000000000015a,section_name_entry,\n                         section_name);\n            notes_data = process_debug_info_0011173a(section_attributes,long_var2,uStack0000000000000158);\n            if (notes_data != '\\0') goto LAB_00106cac;\n            print_stab_entries_00108b3e();\n            free_memory_blocks_00108863();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      free_memory_blocks_00108863();\n      if ((long_var2 != 0) && (char_var2 = process_debug_info_0010c892(), char_var2 == '\\0')) goto LAB_00105981;\n    }\n    if (notes_data == '\\0') {\n      if ((*(int *)(ptr_to_string[1] + 8) != 2) || (num_elements == 0)) {\n        error_message = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      section_name_entry = (char *)0x0;\n      stabs_data = merged_section_data_pointer;\n      mergeable_data = 0;\n      section_index = num_elements;\n      debug_data = 0;\n      pointer_var29 = (undefined8 *)&stack0x00000148;\n      for (long_var2 = 0x22; long_var2 != 0; long_var2 = long_var2 + -1) {\n        *(undefined4 *)pointer_var29 = 0;\n        pointer_var29 = (undefined8 *)((long)pointer_var29 + (ulong)unreachable_block * -8 + 4);\n      }\n      char_var2 = '\\0';\n      _unsigned_variable_4 = (int *)0x0;\n      pointer_to_character_4 = (char *)0x0;\n      pointer_to_character_5 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)num_elements <= mergeable_data) break;\n        long_var2 = merged_section_data_pointer[mergeable_data];\n        char_var = bfd_coff_get_syment();\n        long_var3 = debug_data;\n        if (char_var == '\\0') {\n          unsigned_var5 = bfd_get_error();\n          bfd_errmsg(unsigned_var5);\n          error_message = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          ulong_var4 = dcgettext(0,error_message,5);\n          print_error_message_00119ed0(ulong_var4);\n          goto LAB_00105981;\n        }\n        error_message = *(char **)(long_var2 + 8);\n        mergeable_data = mergeable_data + 1;\n        debug_data = (ulong)has_contents + 1 + debug_data;\n        if ((has_contents != 0) && (char_var = bfd_coff_get_auxent(), char_var == '\\0')) {\n          unsigned_var5 = bfd_get_error();\n          bfd_errmsg(unsigned_var5);\n          error_message = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pointer_to_character_5 == (char *)long_var3) {\n          if (is_mergeable != 0x67) {\n            char_var = initialize_debug_info_0010bbd3(section_attributes);\n            if (char_var == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pointer_to_character_5 = (char *)debugline_data;\n          char_var = initialize_debug_info_0010bbd3(section_attributes);\n        }\n        else {\nLAB_00106de4:\n          if ((char)is_mergeable < '\\0') {\n            if (is_mergeable == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (is_mergeable < 100) {\n            switch(is_mergeable) {\n            case 3:\n              if (debugline_size._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)debugline_size._6_2_ & *(uint *)(ptr_to_string[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(ptr_to_string[0x22] + 0x3c) & 0x3f)) {\n                _unsigned_variable_4 = (int *)(**(code **)(ptr_to_string[1] + 0x238))();\n                pointer_to_character_4 = error_message;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(is_mergeable) {\n            case 100:\n              int_var1 = strcmp(error_message,\".bb\");\n              if (int_var1 == 0) {\n                char_var = start_debug_block_0010be88(section_attributes);\n                goto joined_r0x00107247;\n              }\n              int_var1 = strcmp(error_message,\".eb\");\n              if (int_var1 == 0) {\n                char_var = debug_end_block_0010bf20(section_attributes);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              int_var1 = strcmp(error_message,\".bf\");\n              if (int_var1 == 0) {\n                if (pointer_to_character_4 != (char *)0x0) {\n                  long_var3 = parse_coff_type_0010dac0();\n                  if ((long_var3 == 0) ||\n                     (char_var2 = debug_record_function_0010bc80(section_attributes), char_var2 == '\\0'))\n                  goto LAB_00105981;\n                  if (_unsigned_variable_4 != (int *)0x0) {\n                    int_var1 = 0;\n                    if (has_contents != 0) {\n                      int_var1 = note_entry - 1;\n                    }\n                    long_var2 = *(long *)(*(long *)(long_var2 + 0x20) + 0x30);\n                    while( true ) {\n                      int_var3 = _unsigned_variable_4[4];\n                      if (int_var3 == 0) break;\n                      char_var = record_debug_line_0010bf86(section_attributes,int_var1 + int_var3,\n                                           *(long *)(_unsigned_variable_4 + 6) + long_var2);\n                      _unsigned_variable_4 = _unsigned_variable_4 + 4;\n                      if (char_var == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _unsigned_variable_4 = (int *)0x0;\n                  pointer_to_character_4 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                error_message = \"%ld: .bf without preceding function\";\n              }\n              else {\n                int_var1 = strcmp(error_message,\".ef\");\n                if (int_var1 != 0) goto switchD_00106e1a_caseD_68;\n                if (char_var2 != '\\0') {\n                  char_var2 = debug_end_function_0010be1a(section_attributes);\n                  if (char_var2 == '\\0') goto LAB_00105981;\n                  char_var2 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                error_message = \"%ld: unexpected .ef\\n\";\n              }\n              ulong_var4 = dcgettext(0,error_message,5);\n              print_error_message_00119ed0(ulong_var4);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          long_var1 = parse_coff_type_0010dac0();\n          if (long_var1 == 0) goto LAB_00105981;\n          char_var = process_record_00112a33(&stack0x00000140,long_var2,long_var3);\n        }\njoined_r0x00107247:\n        if (char_var == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(file_object + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(file_object + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(file_object + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (num_elements != 0) {\n        merged_section_data_pointer = DAT_001278d0 + num_elements;\n        pointer4 = DAT_001278d0;\n        do {\n          uint_var1 = *(uint *)(*pointer4 + 0x18);\n          if ((uint_var1 & 0x1000000) != 0) {\n            *(uint *)(*pointer4 + 0x18) = uint_var1 & 0xfeffffff;\n          }\n          pointer4 = pointer4 + 1;\n        } while (merged_section_data_pointer != pointer4);\n      }\n    }\n    else {\n      for (long_var2 = *(long *)(file_object + 0x90); long_var2 != 0; long_var2 = *(long *)(long_var2 + 8)\n          ) {\n        if (*(long *)(long_var2 + 0xe8) != 0) {\n          pointer1 = (uint *)(*(long *)(long_var2 + 0xe8) + 0x18);\n          *pointer1 = *pointer1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      int_var1 = bfd_get_error();\n      if (int_var1 != 0) {\n        DAT_00127a40 = 1;\n        return 0;\n      }\n    }\n    long_var2 = xmalloc();\n    merged_section_data_pointer = DAT_001278d0;\n    unsigned_variable_4 = *(uint *)((long)ptr_to_string + 0x44) & 0x42;\n    DAT_001278c8 = long_var2;\n    if (num_elements == 0) {\n      ulong_var7 = 0;\n    }\n    else {\n      ulong_var7 = 0;\n      _notes_data = 0;\n      do {\n        int_var1 = DAT_001279c0;\n        pointer4 = (long *)merged_section_data_pointer[_notes_data];\n        function_pointer = (code *)pointer4[4];\n        uint_var1 = *(uint *)(pointer4 + 3);\n        error_message = (char *)pointer4[1];\n        section_name = error_message;\n        if (DAT_001279c8 != (undefined8 *)0x0) {\n          int_var3 = 0;\n          pointer_var29 = DAT_001279c8;\n          while( true ) {\n            if ((int_var1 <= int_var3) || (string_var2 = (char *)pointer_var29[5], string_var2 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (string_var2 != \"\") break;\nLAB_0010750b:\n            int_var3 = int_var3 + 1;\n          }\n          int_var2 = strcmp(string_var2,error_message);\n          if (int_var2 != 0) {\n            pointer_var29 = (undefined8 *)*pointer_var29;\n            goto LAB_0010750b;\n          }\n          free(string_var2);\n          merged_section_index = ulong_var7 + 1;\n          pointer_var29[5] = \"\";\n          ulong_var3 = extract_section_info_0011a2e0(pointer_var29);\n          ulong_var4 = DAT_001278f0;\n          *(undefined8 *)(long_var2 + ulong_var7 * 8) = ulong_var3;\n          long_var3 = htab_elements(ulong_var4);\n          if ((long_var3 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          char_var2 = *error_message;\n          if (char_var2 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          error_message = DAT_00127928;\n          if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(file_object + 8) + 0x1c) != '\\0')\n             ) {\n            long_var3 = ptr_to_string[1];\n            char_var2 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        long_var3 = htab_elements(DAT_001278f0);\n        merged_section_index = ulong_var7;\n        if ((long_var3 == 0) && (DAT_001278f8 == (char **)0x0)) goto LAB_00105af8;\n        if (error_message != (char *)0x0) {\nLAB_001064eb:\n          if (((*error_message == '_') && (error_message[1] == '_')) &&\n             (int_var1 = strcmp(error_message + (error_message[2] == '_'),\"__gnu_lto_slim\"), int_var1 == 0)) {\n            ulong_var4 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            print_error_and_exit_00119dd0(ulong_var4);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        section_name_entry = error_message;\n        long_var3 = htab_find(DAT_001278f0);\n        if (((long_var3 == 0) || (section_name = *(char **)(long_var3 + 8), error_message == section_name)) &&\n           (section_name = error_message, section_matched_pattern_pointer = DAT_001278f8, (uint_var1 & 0x100) != 0)) {\n          for (; section_matched_pattern_pointer != (char **)0x0; section_matched_pattern_pointer = (char **)section_matched_pattern_pointer[3]) {\n            int_var1 = strcmp(*section_matched_pattern_pointer,error_message);\n            if (int_var1 == 0) {\n              section_name = section_matched_pattern_pointer[1];\n              break;\n            }\n          }\n        }\n        pointer4[1] = (long)section_name;\n        char_var2 = *section_name;\n        if (char_var2 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        error_message = DAT_00127928;\n        long_var3 = ptr_to_string[1];\n        if (*(char *)(long_var3 + 0x1c) == char_var2) {\n          if (DAT_001279a8 == '\\0') {\n            if ((DAT_00127988 == '\\0') ||\n               ((((uint_var1 & 0x82) == 0 && (function_pointer != bfd_map_over_sections)) &&\n                ((*(byte *)(pointer4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            section_name = section_name + 1;\n            pointer4[1] = (long)section_name;\n            goto joined_r0x00106565;\n          }\n          char_var2 = *(char *)(*(long *)(file_object + 8) + 0x1c);\n          if (char_var2 == '\\0') goto LAB_0010677d;\n          if (DAT_00127928 != (char *)0x0) {\n            section_name = section_name + 1;\n            pointer4[1] = (long)section_name;\n            size_var1 = strlen(section_name);\n            long_var3 = size_var1 + 2;\n            goto LAB_001066bc;\n          }\n          *section_name = char_var2;\n          pointer4[1] = (long)section_name;\n          ulong_var7 = merged_section_index;\n        }\n        else {\n          if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(file_object + 8) + 0x1c) == '\\0')\n             ) {\njoined_r0x00106565:\n            ulong_var7 = merged_section_index;\n            if (error_message == (char *)0x0) goto LAB_00105b32;\n            size_var1 = strlen(section_name);\n            size_var2 = strlen(error_message);\n            error_message = (char *)xmalloc(size_var2 + size_var1 + 1);\n            string_var2 = error_message;\n          }\n          else {\nLAB_0010668d:\n            error_message = DAT_00127928;\n            if ((*(char *)(long_var3 + 0x1c) != '\\0') && (char_var2 != *(char *)(long_var3 + 0x1c)))\n            goto joined_r0x00106565;\n            size_var1 = strlen(section_name);\n            long_var3 = size_var1 + 2;\n            if (error_message == (char *)0x0) {\n              string_var2 = (char *)xmalloc(long_var3);\n            }\n            else {\nLAB_001066bc:\n              size_var1 = strlen(error_message);\n              string_var2 = (char *)xmalloc(size_var1 + long_var3);\n            }\n            error_message = string_var2 + 1;\n            *string_var2 = *(char *)(*(long *)(file_object + 8) + 0x1c);\n          }\n          string_var = DAT_00127928;\n          if (DAT_00127928 != (char *)0x0) {\n            strcpy(error_message,DAT_00127928);\n            size_var1 = strlen(string_var);\n            error_message = error_message + size_var1;\n          }\n          strcpy(error_message,section_name);\n          pointer4[1] = (long)string_var2;\n          section_name = string_var2;\n          ulong_var7 = merged_section_index;\n        }\nLAB_00105b32:\n        if (DAT_00127a48 == 7) goto LAB_001067a8;\n        if (((uint_var1 & 0x20) == 0) &&\n           (((uint_var1 & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(pointer4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((unsigned_variable_4 == 0) &&\n              (((uint_var1 & 0x82) != 0 || ((*(byte *)(pointer4[4] + 0x25) & 0x10) != 0)))) ||\n             (int_var1 = bfd_decode_symclass(pointer4), int_var1 == 0x49)) {\nLAB_00105be2:\n            if (DAT_001279ea == '\\0') {\n              long_var3 = htab_find();\n              if (long_var3 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              section_name_entry = section_name;\n              htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uint_var1 & 0x82) == 0) && (function_pointer != bfd_map_over_sections)) &&\n                  ((*(byte *)(pointer4[4] + 0x25) & 0x10) == 0)) {\n            if ((uint_var1 & 4) == 0) {\n              if (((*(int *)(ptr_to_string[1] + 8) != 2) ||\n                  (long_var3 = *(long *)(pointer4[4] + 0xd0), long_var3 == 0)) ||\n                 (*(long *)(long_var3 + 0x40) == 0)) {\n                if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                if (DAT_00127a44 == 1) {\n                  char_var2 = bfd_is_local_label(ptr_to_string);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            char_var2 = DAT_001279a0;\n            if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n              if (char_var2 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (DAT_00127a48 != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (DAT_001279ea == '\\0') {\n          long_var3 = htab_find();\n          if (long_var3 != 0) {\nLAB_0010687f:\n            ulong_var4 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            print_error_message_00119ed0(ulong_var4);\n            DAT_00127a40 = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          section_name_entry = section_name;\n          htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((uint_var1 & 0x20) == 0) {\nLAB_00105c07:\n          if (DAT_001279ea != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            section_name_entry = section_name;\n            htab_traverse(DAT_00127a10,pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          long_var3 = htab_find();\n          if (long_var3 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((DAT_00127a38 != '\\0') && ((uint_var1 & 0x4000) != 0)) goto LAB_00105c2c;\n          if (DAT_001279ea == '\\0') {\n            long_var3 = htab_find();\n            if (long_var3 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            section_name_entry = section_name;\n            htab_traverse(DAT_00127a28,pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          char_var2 = process_section_001159d0(pointer4[4]);\n          if (char_var2 == '\\0') {\n            if (((uint_var1 & 0x800002) == 0) && (function_pointer != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((uint_var1 & 0x82) != 0) {\n                char_var2 = check_pattern_match_00115d70(section_name);\n                if ((char_var2 == '\\0') &&\n                   ((long_var3 = htab_elements(DAT_001279f8), long_var3 == 0 ||\n                    (char_var2 = check_pattern_match_00115d70(section_name), char_var2 != '\\0')))) {\n                  if (((((DAT_00127958 == '\\0') ||\n                        (uint_var2 = *(uint *)(pointer4 + 3), (uint_var2 & 0x200000) != 0)) ||\n                       (long_var3 = *pointer4, long_var3 == 0)) ||\n                      ((*(int *)(*(long *)(long_var3 + 8) + 8) != 5 || (*(long *)(long_var3 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)pointer4 + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uint_var2 = *(uint *)(pointer4 + 3);\n                }\n                *(uint *)(pointer4 + 3) = uint_var2 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uint_var1 & 1) != 0) && (char_var2 = check_pattern_match_00115d70(section_name), char_var2 != '\\0')) {\n                *(uint *)(pointer4 + 3) = *(uint *)(pointer4 + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((DAT_001279e8 != '\\0') || (char_var2 = check_pattern_match_00115d70(section_name), char_var2 != '\\0')) {\n                *(uint *)(pointer4 + 3) = *(uint *)(pointer4 + 3) & 0xff7ffffd | 0x80;\n              }\n              if (function_pointer != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(long_var2 + ulong_var7 * 8) = pointer4;\n            ulong_var7 = ulong_var7 + 1;\n          }\n        }\n        _notes_data = _notes_data + 1;\n      } while (num_elements != _notes_data);\n    }\n    if (DAT_001279c8 != (undefined8 *)0x0) {\n      pointer_var29 = DAT_001279c8;\n      int_var1 = DAT_001279c0;\n      for (long_var3 = 0; long_var3 < int_var1; long_var3 = long_var3 + 1) {\n        error_message = (char *)pointer_var29[5];\n        if (error_message == (char *)0x0) {\n          long_var1 = ulong_var7 * 8;\n          ulong_var7 = ulong_var7 + 1;\n          ulong_var4 = extract_section_info_0011a2e0(pointer_var29,file_object);\n          *(undefined8 *)(long_var2 + long_var1) = ulong_var4;\n          int_var1 = DAT_001279c0;\n        }\n        else if (error_message != \"\") {\n          ulong_var4 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          print_error_and_exit_00119dd0(ulong_var4,error_message);\n        }\n        pointer_var29 = (undefined8 *)*pointer_var29;\n      }\n    }\n    bool_value = DAT_001279a0 != '\\0';\n    *(undefined8 *)(long_var2 + ulong_var7 * 8) = 0;\n    if ((bool_value) && (section_attributes != (undefined4 *)0x0)) {\n      int_var1 = *(int *)(*(undefined8 **)(file_object + 8) + 1);\n      if ((int_var1 != 5) && (int_var1 != 2)) {\n        ulong_var4 = **(undefined8 **)(file_object + 8);\n        ulong_var3 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,file_object,0,ulong_var3,ulong_var4);\nLAB_00105d8c:\n        free(section_attributes);\n        DAT_00127a40 = 1;\n        return 0;\n      }\n      debug_strings = (void *)0x0;\n      char_var2 = parse_binary_0011378f(file_object,section_attributes,&stack0x000000c0,\n                           &stack0x00000110,&stack0x000000e0,&stack0x00000140);\n      if (char_var2 == '\\0') goto LAB_00105d8c;\n      long_var2 = bfd_make_section_with_flags(file_object,\".stab\",0x2108);\n      long_var3 = bfd_make_section_with_flags(file_object,\".stabstr\",0x2108);\n      if ((((long_var2 == 0) || (long_var3 == 0)) ||\n          (char_var2 = bfd_set_section_size(long_var2,section_content), char_var2 == '\\0')) ||\n         (char_var2 = bfd_set_section_size(long_var3,section_name_entry), char_var2 == '\\0')) {\n        error_message = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        ulong_var4 = dcgettext(0,error_message,5);\n        print_error_message_001126c0(0,file_object,0,ulong_var4);\n        free(debug_strings);\n        free(section_attributes);\n        DAT_00127a40 = 1;\n        return 0;\n      }\n      *(undefined4 *)(long_var2 + 0x7c) = 2;\n      *(undefined4 *)(long_var3 + 0x7c) = 0;\n      char_var2 = bfd_set_section_contents\n                        (file_object,long_var2,stabs_data,0,section_content);\n      if ((char_var2 == '\\0') ||\n         (char_var2 = bfd_set_section_contents\n                            (file_object,long_var3,debug_strings,0,section_name_entry),\n         char_var2 == '\\0')) {\n        error_message = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(section_attributes);\n    }\n    num_elements = ulong_var7 & 0xffffffff;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    long_var2 = htab_elements(DAT_00127a18);\n    if (((long_var2 != 0) ||\n        (((((((long_var2 = htab_elements(DAT_00127a28), long_var2 != 0 ||\n              (long_var2 = htab_elements(DAT_00127a08), long_var2 != 0)) ||\n             (long_var2 = htab_elements(DAT_00127a00), long_var2 != 0)) ||\n            ((long_var2 = htab_elements(DAT_001279f8), long_var2 != 0 ||\n             (long_var2 = htab_elements(DAT_001279f0), long_var2 != 0)))) ||\n           (long_var2 = htab_elements(DAT_001278f0), long_var2 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(file_object,DAT_001278c8,num_elements & 0xffffffff);\n  bfd_map_over_sections(ptr_to_string,process_section_00115dc0,file_object);\n  bfd_map_over_sections(ptr_to_string,process_section_00116110,file_object);\n  for (pointer_var29 = DAT_001279e0; pointer3 = DAT_001279d8, pointer_var29 != (undefined8 *)0x0;\n      pointer_var29 = (undefined8 *)*pointer_var29) {\n    char_var2 = bfd_set_section_contents(file_object,pointer_var29[5],pointer_var29[4],0,pointer_var29[3]);\n    if (char_var2 == '\\0') {\n      print_error_message_001126c0(0,file_object,pointer_var29[5],0);\n      return 0;\n    }\n  }\n  for (; pointer3 != (undefined8 *)0x0; pointer3 = (undefined8 *)*pointer3) {\n    ulong_var4 = *(undefined8 *)(pointer3[5] + 0x60);\n    char_var2 = bfd_set_section_contents(file_object,ulong_var4,pointer3[4],0,pointer3[3]);\n    if (char_var2 == '\\0') {\n      print_error_message_001126c0(0,file_object,ulong_var4,0);\n      return 0;\n    }\n  }\n  if (ptr_to_linked_list == (long *)0x0) {\n    if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n      ulong_var4 = *ptr_to_string;\n      ulong_var3 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      print_error_message_00119ed0(ulong_var3,ulong_var4);\n    }\nLAB_0010578f:\n    if ((DAT_00127a30 == 0) ||\n       (char_var2 = bfd_fill_in_gnu_debuglink_section(file_object,long_variable_5),\n       long_var2 = DAT_00127a30, char_var2 != '\\0')) {\n      uint_var1 = (**(code **)(*(long *)(file_object + 8) + 0x140))(ptr_to_string);\n      ulong_var7 = (ulong)uint_var1;\n      if ((char)uint_var1 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return ulong_var7;\n        }\n        char_var2 = bfd_alt_mach_code(file_object,DAT_00127930 & 0xffffffff);\n        merged_section_index = DAT_00127930;\n        if (char_var2 != '\\0') {\n          return ulong_var7;\n        }\n        ulong_var4 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        print_error_message_00119ed0(ulong_var4,merged_section_index);\n        if (*(int *)(*(long *)(file_object + 8) + 8) != 5) {\n          ulong_var4 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(ulong_var4);\n          return ulong_var7;\n        }\n        ulong_var4 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        print_error_message_00119ed0(ulong_var4);\n        *(short *)(*(long *)(file_object + 0x110) + 0x3a) = (short)DAT_00127930;\n        return ulong_var7;\n      }\n      ulong_var4 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,file_object,0,ulong_var4);\n    }\n    else {\n      ulong_var4 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,file_object,0,ulong_var4,long_var2);\n    }\n    return 0;\n  }\n  merged_section_data_pointer = (long *)0x0;\n  pointer_var29 = *(undefined8 **)(file_object + 0x90);\n  do {\n    if (pointer_var29 == (undefined8 *)0x0) {\n      do {\n        merged_section_data_pointer = (long *)ptr_to_linked_list[3];\n        free((void *)ptr_to_linked_list[1]);\n        free(ptr_to_linked_list);\n        ptr_to_linked_list = merged_section_data_pointer;\n      } while (merged_section_data_pointer != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(file_object + 8) + 8) == 5)) &&\n        (*(int *)(pointer_var29[0x1a] + 4) == 7)) &&\n       (char_var2 = compare_strings_00113fb0(*pointer_var29,\".gnu.build.attributes\"), char_var2 != '\\0')) {\n      if (merged_section_data_pointer == (long *)0x0) {\n        merged_section_data_pointer = ptr_to_linked_list;\n      }\n      pointer4 = ptr_to_linked_list;\n      if (*(undefined8 **)(*merged_section_data_pointer + 0x60) == pointer_var29) {\nLAB_0010625f:\n        error_message = \"error: failed to merge notes\";\n        if (merged_section_data_pointer[1] != 0) {\n          char_var2 = bfd_set_section_contents(file_object,pointer_var29,merged_section_data_pointer[1],0,merged_section_data_pointer[2]);\n          if (char_var2 == '\\0') {\n            ulong_var4 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            print_error_message_001126c0(0,file_object,pointer_var29,ulong_var4);\n            return 0;\n          }\n          merged_section_data_pointer = (long *)merged_section_data_pointer[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          merged_section_data_pointer = pointer4;\n          if (*(undefined8 **)(*pointer4 + 0x60) == pointer_var29) goto LAB_0010625f;\n          merged_section_data_pointer = (long *)pointer4[3];\n          pointer4 = merged_section_data_pointer;\n        } while (merged_section_data_pointer != (long *)0x0);\n        error_message = \"error: failed to locate merged notes\";\n      }\n      ulong_var4 = dcgettext(0,error_message,5);\n      print_error_message_001126c0(0,file_object,pointer_var29,ulong_var4);\n    }\nLAB_001061be:\n    pointer_var29 = (undefined8 *)pointer_var29[1];\n  } while( true );\n}\n\n",
            "current_name": "process_binary_0010551d",
            "entrypoint": "0x0010551d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010551d": "process_binary_0010551d",
                "__ptr": "section_contents",
                "__ptr_00": "void_pointer2",
                "__s": "string_var",
                "__s_00": "section_dump_file",
                "bStack0000000000000100": "is_mergeable",
                "bStack0000000000000101": "has_contents",
                "bVar2": "byte_var",
                "bVar38": "bool_value",
                "bVar39": "unreachable_block",
                "cVar33": "message",
                "cVar8": "char_var",
                "cVar9": "char_var2",
                "iStack000000000000006c": "integer_variable_3",
                "iVar11": "int_var1",
                "iVar14": "int_var2",
                "iVar23": "errno_location",
                "iVar31": "int_var3",
                "in_stack_00000008": "file_object",
                "in_stack_00000010": "num_elements",
                "in_stack_00000018": "notes_data",
                "in_stack_000000c0": "stabs_data",
                "in_stack_000000c8": "section_index",
                "in_stack_000000d0": "mergeable_data",
                "in_stack_000000d8": "debug_data",
                "in_stack_000000e0": "debug_strings",
                "in_stack_000000f0": "debugline_data",
                "in_stack_000000f8": "debugline_size",
                "in_stack_00000110": "section_content",
                "in_stack_00000118": "note_entry",
                "in_stack_00000140": "section_name_entry",
                "lStack0000000000000078": "long_variable_5",
                "lStack0000000000000088": "long_var5",
                "lStack00000000000000a0": "long_variable_6",
                "lVar15": "section_index",
                "lVar21": "long_var1",
                "lVar25": "long_var2",
                "lVar27": "long_var3",
                "lVar32": "head",
                "pcStack0000000000000038": "pointer_to_character_4",
                "pcStack0000000000000090": "pointer_to_character_5",
                "pcVar19": "string_var2",
                "pcVar28": "section_name",
                "pcVar33": "error_message",
                "pcVar35": "pointer_to_pointer_to_character",
                "pcVar4": "function_pointer",
                "piVar23": "error_number",
                "plVar15": "pointer4",
                "plVar32": "merged_section_data_pointer",
                "ppcVar35": "section_matched_pattern_pointer",
                "ppuVar37": "section_name_pointer",
                "puStack0000000000000020": "section_attributes",
                "puVar1": "pointer1",
                "puVar29": "pointer_var29",
                "puVar3": "pointer2",
                "puVar34": "section_data_pointer",
                "puVar37": "section_list_iterator",
                "puVar5": "pointer3",
                "pvVar36": "section_contents",
                "sVar18": "size_var1",
                "sVar26": "size_var2",
                "uStack0000000000000048": "unsigned_variable_4",
                "uVar10": "uint_var1",
                "uVar12": "uint_var2",
                "uVar13": "unsigned_var5",
                "uVar16": "ulong_var3",
                "uVar17": "ulong_var4",
                "uVar20": "merged_section_index",
                "uVar22": "ulong_var6",
                "uVar24": "ulong_var7",
                "uVar30": "ulong_var8",
                "uVar6": "ulong_value1",
                "uVar7": "ulong_var2",
                "unaff_R13": "ptr_to_linked_list",
                "unaff_R14": "ptr_to_string",
                "unaff_RBP": "ptr_to_current_state",
                "unaff_RBX": "ptr_to_allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010554f": {
            "additional_data": {
                "*_stderr": {
                    "1": "standard_error"
                },
                "DAT_00127989": {
                    "1": "settlement_flag"
                },
                "DAT_00127990": {
                    "1": "padding_multiplier"
                },
                "DAT_00127998": {
                    "1": "dat_foo",
                    "2": "type_propagation_flag"
                },
                "DAT_001279a0": {
                    "1": "merge_sections_flag"
                },
                "DAT_001279c0": {
                    "1": "pattern_match_count"
                },
                "DAT_00127a40": {
                    "1": "error_flag"
                },
                "FUN_0010554f": {
                    "1": "reorganize_and_optimize_function",
                    "2": "process_debug_information",
                    "5": "process_debug_info"
                },
                "__dest": {
                    "1": "pointer_dest"
                },
                "__ptr": {
                    "1": "pad_section_data",
                    "2": "pointer_value"
                },
                "__ptr_00": {
                    "1": "pointer_value1"
                },
                "__ptr_01": {
                    "1": "pointer_value2"
                },
                "__ptr_02": {
                    "1": "stab_section_info"
                },
                "__ptr_tmp": {
                    "1": "pointer_value_tmp"
                },
                "__s": {
                    "1": "string_value"
                },
                "__s_copy": {
                    "1": "string_value_copy"
                },
                "__s_tmp": {
                    "1": "string_value_tmp"
                },
                "__symb": {
                    "1": "symbol_name"
                },
                "_param_15": {
                    "1": "int_value4"
                },
                "_param_41": {
                    "1": "_param_41"
                },
                "bVar2": {
                    "1": "byte_var"
                },
                "bVar38": {
                    "1": "bool_value_2"
                },
                "bVar38:": {
                    "1": "flag"
                },
                "bVar39": {
                    "1": "flag"
                },
                "bVar7": {
                    "1": "boolean_flag"
                },
                "cVar38": {
                    "1": "bool_value_1"
                },
                "cVar39": {
                    "1": "byte_value"
                },
                "cVar7": {
                    "1": "char_value_1",
                    "2": "success"
                },
                "cVar8": {
                    "1": "char_var2"
                },
                "iVar10": {
                    "1": "int_value"
                },
                "iVar11": {
                    "1": "int_value2",
                    "2": "int_value_2"
                },
                "iVar27": {
                    "1": "int_value"
                },
                "in_R10": {
                    "1": "merged_notes_list",
                    "2": "note_sections"
                },
                "in_stack_00000068": {
                    "1": "flags",
                    "2": "num_records"
                },
                "in_stack_00000068._4_4_": {
                    "1": "section_index"
                },
                "in_stack_000000d8": {
                    "1": "total_gap_size"
                },
                "in_stack_000000f8": {
                    "1": "variable_stack3"
                },
                "lVar14": {
                    "1": "index",
                    "2": "loop_counter",
                    "6": "section_size"
                },
                "lVar23": {
                    "1": "string_length"
                },
                "lVar37": {
                    "1": "long_value4"
                },
                "pData": {
                    "1": "pointer_data"
                },
                "pPointer": {
                    "1": "pointer_value4"
                },
                "param_12": {
                    "1": "max_gap_size",
                    "2": "gap_size",
                    "3": "max_section_size"
                },
                "param_13": {
                    "1": "parameter13",
                    "2": "section_name"
                },
                "param_14": {
                    "1": "debug_link_contents",
                    "2": "section_contents",
                    "5": "section_sizes"
                },
                "param_15": {
                    "1": "count_parameter"
                },
                "param_17": {
                    "1": "array_of_pointers",
                    "2": "section_table",
                    "3": "section_offsets",
                    "5": "section_pointers"
                },
                "param_21": {
                    "1": "section_name",
                    "2": "debug_info",
                    "5": "debug_link_section_name"
                },
                "param_23": {
                    "1": "add_to_relocations"
                },
                "param_24": {
                    "1": "end_address"
                },
                "param_26": {
                    "1": "rel_section_size"
                },
                "param_29": {
                    "1": "section_data"
                },
                "param_30": {
                    "1": "section_name"
                },
                "param_31": {
                    "1": "param_value3"
                },
                "param_32": {
                    "1": "section_data_size"
                },
                "param_33": {
                    "1": "parameter33",
                    "2": "note_data",
                    "3": "debug_link_contents"
                },
                "param_34": {
                    "1": "debug_data_size"
                },
                "param_36": {
                    "1": "parameter36",
                    "2": "param_36"
                },
                "param_37": {
                    "1": "is_executable",
                    "2": "param_37"
                },
                "param_38": {
                    "1": "parameter38"
                },
                "param_39": {
                    "1": "debug_build_type"
                },
                "param_40": {
                    "1": "sorted_records",
                    "2": "section_data"
                },
                "param_41": {
                    "1": "debug_note_found"
                },
                "param_42": {
                    "1": "debug_line_note_sections",
                    "2": "section_name"
                },
                "param_43": {
                    "1": "redefinition_flag"
                },
                "param_44": {
                    "1": "param_8"
                },
                "param_53": {
                    "1": "use_alt_machine_code"
                },
                "param_7": {
                    "1": "bfd_object",
                    "12": "binary",
                    "2": "bfd",
                    "6": "binary_file"
                },
                "param_8": {
                    "1": "parameter8",
                    "3": "num_records",
                    "7": "section_count",
                    "8": "num_sections"
                },
                "param_9": {
                    "1": "char_parameter",
                    "2": "flag"
                },
                "pcVar22": {
                    "1": "pointer_to_char"
                },
                "pcVar3": {
                    "1": "code_var",
                    "2": "function_pointer"
                },
                "pcVar31": {
                    "4": "error_message"
                },
                "plVar15": {
                    "1": "section_entry"
                },
                "plVar20": {
                    "1": "str_table_entry"
                },
                "plVar25": {
                    "1": "sec_ptr"
                },
                "plVar28": {
                    "1": "current_section",
                    "4": "section_pointer"
                },
                "ppcVar34": {
                    "1": "pointer_to_pointer_to_char"
                },
                "ppuVar34": {
                    "1": "ppu_var34"
                },
                "ppuVar36": {
                    "1": "stab_sections"
                },
                "puVar1": {
                    "1": "p_pointer"
                },
                "puVar26": {
                    "1": "auxiliary_pointer"
                },
                "puVar30": {
                    "1": "gap_sizes"
                },
                "puVar32": {
                    "1": "pointer_to_uint"
                },
                "puVar33": {
                    "1": "ptr_to_pointer"
                },
                "puVar4": {
                    "1": "pointer_to_data_2"
                },
                "sVar18": {
                    "1": "buffer_size"
                },
                "sVar19": {
                    "1": "string_length_2"
                },
                "stack0x00000140": {
                    "1": "loop_vars"
                },
                "uVar12": {
                    "1": "flags",
                    "3": "section_flags"
                },
                "uVar13": {
                    "1": "uint_var2"
                },
                "uVar16": {
                    "1": "u_var16"
                },
                "uVar17": {
                    "1": "u_var17"
                },
                "uVar21": {
                    "1": "u_var21"
                },
                "uVar24": {
                    "1": "padding_size"
                },
                "uVar29": {
                    "1": "debug_offset",
                    "2": "u_var29"
                },
                "uVar5": {
                    "1": "undefined_value_1",
                    "2": "undefined_value"
                },
                "uVar6": {
                    "1": "section_index",
                    "2": "ushort_value"
                },
                "uVar9": {
                    "1": "undefined4_var",
                    "2": "return_value",
                    "5": "result"
                },
                "unaff_R14": {
                    "1": "bfd_handle",
                    "2": "bfd",
                    "3": "bfd_object"
                },
                "update_pointer_and_value_0010870e": {
                    "1": "update_pointer_and_value"
                }
            },
            "called": [
                "FUN_0010dac0",
                "bfd_alt_mach_code",
                "bfd_set_section_size",
                "FUN_00119dd0",
                "bfd_is_local_label",
                "FUN_0010bbd3",
                "FUN_0010870e",
                "FUN_0010c892",
                "bfd_set_symtab",
                "bfd_set_section_contents",
                "bfd_octets_per_byte",
                "bfd_coff_get_auxent",
                "bfd_fill_in_gnu_debuglink_section",
                "FUN_0010be88",
                "FUN_00116110",
                "concat",
                "xmalloc",
                "FUN_0010875d",
                "FUN_0011173a",
                "FUN_00119ed0",
                "FUN_0010be1a",
                "bfd_coff_get_syment",
                "FUN_0010bc80",
                "strcpy",
                "bfd_get_error",
                "strlen",
                "bfd_map_over_sections",
                "FUN_00108b3e",
                "FUN_0011a2e0",
                "bfd_get_section_by_name",
                "FUN_0011378f",
                "bfd_make_section_with_flags",
                "htab_find",
                "FUN_00112a33",
                "FUN_001126c0",
                "FUN_0010bf20",
                "htab_elements",
                "FUN_001088ae",
                "dcgettext",
                "free",
                "strcmp",
                "FUN_00115dc0",
                "bfd_errmsg",
                "FUN_00112894",
                "fprintf",
                "bfd_decode_symclass",
                "bfd_set_error",
                "bfd_get_section_contents",
                "FUN_00113fb0",
                "FUN_001159d0",
                "xstrdup",
                "bfd_map_over_sections",
                "FUN_0011a170",
                "FUN_00115d70",
                "qsort",
                "FUN_0010bf86",
                "FUN_00108863",
                "htab_traverse",
                "FUN_00116030"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 process_debug_info_0010554f(void)\n\n{\n  uint *p_pointer;\n  byte is_padding;\n  code *function_pointer;\n  undefined8 *p_pointer2;\n  undefined undefined_value;\n  ushort ushort_value;\n  char success;\n  char char_value2;\n  undefined4 result;\n  int comparison_val;\n  int int_value_2;\n  uint section_flags;\n  uint symbol_flags;\n  long section_size;\n  long *current_section;\n  undefined8 temp_var1;\n  undefined *pointer_value;\n  undefined8 temp_var2;\n  size_t str_len;\n  size_t string_length_2;\n  long *pointer_dest;\n  long *section_info2;\n  void *pointer_value1;\n  void *pointer_value2;\n  ulong calculated_value;\n  char *string_value;\n  char *pointer_to_char;\n  long ptr_1;\n  ulong temp_var4;\n  long *section_info3;\n  undefined8 *ptr;\n  int int_value3;\n  long *section_pointer;\n  ulong u_var29;\n  ulong *p_pointer3;\n  char *error_message;\n  undefined4 *stab_section_pointer;\n  undefined *ptr_start;\n  long *merged_notes;\n  char **name_list;\n  void *pvVar35;\n  undefined8 *bfd_object;\n  undefined **stab_section_names;\n  long iteration_variable;\n  bool has_debug_info;\n  byte is_negative_size;\n  long binary;\n  ulong num_sections;\n  char flag;\n  undefined4 *stab_table;\n  ulong max_section_size;\n  char *section_name;\n  undefined *section_sizes;\n  uint count_parameter;\n  long *section_pointers;\n  undefined8 num_records;\n  undefined8 debug_link_section_name;\n  long offset_parameter;\n  char *section_type;\n  long pointer_array_parameter;\n  long *section_pointers;\n  ulong debug_str_section_size;\n  long section_index;\n  long total_gap_size;\n  void *debug_link_contents;\n  long merged_notes_size;\n  undefined8 variable_stack3;\n  byte param_36;\n  byte param_37;\n  undefined8 stab_section_size;\n  ushort debug_build_type;\n  long *section_data;\n  char is_stab_info;\n  char *section_name;\n  undefined symbol_bind;\n  short symbol_type;\n  \n  is_negative_size = 0;\n  if ((DAT_00127998 == '\\0') && (DAT_00127989 == '\\0')) {\n    max_section_size = 0;\n    section_sizes = (undefined *)0x0;\n    section_pointers = (long *)0x0;\n    u_var29 = max_section_size;\n  }\n  else {\n    section_size = (ulong)section_index * 8;\n    section_pointers = (long *)xmalloc(section_size);\n    section_data = section_pointers;\n    bfd_map_over_sections(binary,update_pointer_and_value,&loop_vars);\n    qsort(section_pointers,(ulong)section_index,8,compare_records_0010875d);\n    section_sizes = (undefined *)xmalloc(section_size);\n    has_debug_info = DAT_00127998 != '\\0';\n    ptr_start = section_sizes;\n    for (; section_size != 0; section_size = section_size + -1) {\n      *ptr_start = 0;\n      ptr_start = ptr_start + (ulong)is_negative_size * -2 + 1;\n    }\n    if (has_debug_info) {\n      u_var29 = 0;\n      max_section_size = 0;\n      do {\n        p_pointer3 = (ulong *)(section_sizes + u_var29 * 8);\n        section_pointer = section_pointers + u_var29;\n        calculated_value = max_section_size;\n        do {\n          max_section_size = calculated_value;\n          if (section_index - 1 <= (uint)u_var29) goto LAB_00107cd1;\n          u_var29 = (ulong)((uint)u_var29 + 1);\n          section_flags = bfd_octets_per_byte(binary,*section_pointer);\n          symbol_flags = bfd_octets_per_byte(binary);\n          section_size = *section_pointer;\n          if ((*(uint *)(section_size + 0x24) & 0x102) != 0x102) break;\n          calculated_value = (ulong)symbol_flags * *(long *)(section_pointer[1] + 0x38);\n          temp_var4 = (ulong)section_flags * *(long *)(section_size + 0x38) + *(long *)(section_size + 0x40);\n          if (calculated_value <= temp_var4) break;\n          calculated_value = calculated_value - temp_var4;\n          success = bfd_set_section_size();\n          if (success == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            print_error_message_001126c0(0,binary,*section_pointer);\n            DAT_00127a40 = 1;\n            goto LAB_00107cd1;\n          }\n          *p_pointer3 = calculated_value;\n          section_pointer = section_pointer + 1;\n          p_pointer3 = p_pointer3 + 1;\n        } while (max_section_size < calculated_value);\n      } while( true );\n    }\n    max_section_size = 0;\nLAB_00107cd1:\n    u_var29 = max_section_size;\n    if (DAT_00127989 != '\\0') {\n      section_flags = bfd_octets_per_byte(binary);\n      section_size = section_pointers[section_index - 1];\n      calculated_value = DAT_00127990 * (ulong)section_flags;\n      temp_var4 = *(long *)(section_size + 0x40) + (ulong)section_flags * *(long *)(section_size + 0x38);\n      if (temp_var4 < calculated_value) {\n        success = bfd_set_section_size();\n        if (success == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          print_error_message_001126c0(0,binary,section_pointers[section_index - 1]);\n          DAT_00127a40 = 1;\n        }\n        else {\n          u_var29 = calculated_value - temp_var4;\n          *(ulong *)(section_sizes + (ulong)(section_index - 1) * 8) = u_var29;\n          if (u_var29 <= max_section_size) {\n            u_var29 = max_section_size;\n          }\n        }\n      }\n    }\n  }\n  max_section_size = u_var29;\n  section_pointer = DAT_001278d0;\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    stab_table = (undefined4 *)0x0;\n  }\n  else {\n    stab_section_names = &PTR_sstring_valuetab_00125c60;\n    stab_table = (undefined4 *)xmalloc(0x60);\n    stab_section_pointer = stab_table;\n    for (section_size = 0x18; section_size != 0; section_size = section_size + -1) {\n      *stab_section_pointer = 0;\n      stab_section_pointer = stab_section_pointer + (ulong)is_negative_size * -2 + 1;\n    }\n    section_name = (char *)0x0;\n    do {\n      ptr_start = *stab_section_names;\n      section_size = bfd_get_section_by_name(bfd_object,ptr_start);\n      iteration_variable = bfd_get_section_by_name();\n      if ((section_size != 0) && (iteration_variable != 0)) {\n        ptr_1 = *(long *)(section_size + 0x40);\n        pointer_value1 = (void *)xmalloc(ptr_1);\n        success = bfd_get_section_contents(bfd_object,section_size,pointer_value1,0,ptr_1);\n        if (success == '\\0') {\n          result = bfd_get_error();\n          bfd_errmsg(result);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*bfd_object);\n          free(section_name);\n          free(pointer_value1);\n        }\n        else {\n          u_var29 = *(ulong *)(iteration_variable + 0x40);\n          pointer_value2 = (void *)xmalloc(u_var29 + 1);\n          flag = bfd_get_section_contents(bfd_object,iteration_variable,pointer_value2,0);\n          if (flag == '\\0') {\n            result = bfd_get_error();\n            bfd_errmsg(result);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*bfd_object);\n            free(section_name);\n          }\n          else {\n            *(undefined *)((long)pointer_value2 + u_var29) = 0;\n            if ((section_name != (char *)0x0) ||\n               (section_name = (char *)initialize_data_structure_00112894(bfd_object,1,section_pointer), section_name != (char *)0x0)) {\n              pointer_array_parameter = 0;\n              offset_parameter = 0;\n              for (pvVar35 = pointer_value1; pvVar35 <= (void *)((long)pointer_value1 + ptr_1 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                calculated_value = (**(code **)(bfd_object[1] + 0x40))(pvVar35);\n                is_padding = *(byte *)((long)pvVar35 + 4);\n                result = (**(code **)(bfd_object[1] + 0x58))((long)pvVar35 + 6);\n                section_size = (**(code **)(bfd_object[1] + 0x40))((long)pvVar35 + 8);\n                if (is_padding == 0) {\n                  offset_parameter = pointer_array_parameter;\n                  pointer_array_parameter = pointer_array_parameter + section_size;\n                }\n                else {\n                  temp_var4 = (calculated_value & 0xffffffff) + offset_parameter;\n                  if (temp_var4 < u_var29) {\n                    error_message = (char *)((long)pointer_value2 + temp_var4);\n                    section_type = (char *)0x0;\n                    while( true ) {\n                      str_len = strlen(error_message);\n                      if (((str_len == 0) || (pointer_to_char = error_message + (str_len - 1), *pointer_to_char != '\\')) ||\n                         ((ulong)((long)pointer_value1 + ptr_1) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pointer_to_char = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      comparison_val = (**(code **)(bfd_object[1] + 0x40))(pvVar35);\n                      calculated_value = (ulong)(uint)(comparison_val + (int)offset_parameter);\n                      if (u_var29 <= calculated_value) break;\n                      error_message = (char *)concat(error_message,(long)pointer_value2 + calculated_value,0);\n                      *pointer_to_char = '\\';\n                      free(section_type);\n                      section_type = error_message;\n                    }\n                    temp_var2 = *bfd_object;\n                    pointer_to_char = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pointer_to_char,temp_var2,ptr_start,((long)pvVar35 - (long)pointer_value1) / 0xc);\nLAB_001077fb:\n                    update_data_001088ae((ulong)is_padding,result,section_size,error_message);\n                    success = process_debug_info_0010554f_0011173a(stab_table,section_name,is_padding);\n                    if (success == '\\0') {\n                      print_stab_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(section_type);\n                      free(section_name);\n                      free(pointer_value1);\n                      free(pointer_value2);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    temp_var2 = *bfd_object;\n                    error_message = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,error_message,temp_var2,ptr_start,((long)pvVar35 - (long)pointer_value1) / 0xc,\n                            calculated_value & 0xffffffff,(ulong)is_padding,((long)pvVar35 - (long)pointer_value1) % 0xc)\n                    ;\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(pointer_value1);\n              goto LAB_001058eb;\n            }\n          }\n          free(pointer_value2);\n          free(pointer_value1);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      stab_section_names = stab_section_names + 2;\n    } while (stab_section_names != (undefined **)&DAT_00125c90);\n    if ((section_name != (char *)0x0) && (success = process_debug_info_0010554f_0010c892(), success == '\\0')) {\nLAB_00105981:\n      free(stab_table);\n      goto LAB_00105588;\n    }\n    if (*(int *)(bfd_object[1] + 8) == 1) {\n      section_size = 0;\n      for (current_section = section_pointer; current_section < section_pointer + num_sections; current_section = current_section + 1) {\n        (**(code **)(bfd_object[1] + 0x218))(bfd_object,*current_section,&loop_vars);\n        if (is_stab_info == '-') {\n          if (((section_size == 0) && (section_size = initialize_data_structure_00112894(bfd_object,0,section_pointer), section_size == 0)) ||\n             ((section_name == (char *)0x0 || (*section_name == '\\0')))) goto LAB_00105981;\n          error_message = (char *)0x0;\n          pointer_to_char = section_name;\n          while (((*pointer_to_char != '\\0' && (str_len = strlen(pointer_to_char), pointer_to_char[str_len - 1] == '\\')) &&\n                 (current_section + 1 < section_pointer + num_sections))) {\n            string_value = (char *)xstrdup(pointer_to_char);\n            str_len = strlen(string_value);\n            string_value[str_len - 1] = '\\0';\n            pointer_to_char = (char *)concat(string_value,*(undefined8 *)(current_section[1] + 8),0);\n            free(string_value);\n            free(error_message);\n            current_section = current_section + 1;\n            error_message = pointer_to_char;\n          }\n          update_data_001088ae(symbol_bind,(int)symbol_type,section_data,pointer_to_char);\n          flag = process_debug_info_0010554f_0011173a(stab_table,section_size,symbol_bind);\n          if (flag == '\\0') {\n            print_stab_entries_00108b3e();\n            free_memory_blocks_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_memory_blocks_00108863();\n      if ((section_size != 0) && (success = process_debug_info_0010554f_0010c892(), success == '\\0')) goto LAB_00105981;\n    }\n    if (flag == '\\0') {\n      if ((*(int *)(bfd_object[1] + 8) == 2) && (num_sections != 0)) {\n        section_data = (long *)0x0;\n        section_pointers = section_pointer;\n        section_index = 0;\n        debug_str_section_size = num_sections;\n        total_gap_size = 0;\n        ptr = (undefined8 *)&stack0x00000148;\n        for (section_size = 0x22; section_size != 0; section_size = section_size + -1) {\n          *(undefined4 *)ptr = 0;\n          ptr = (undefined8 *)((long)ptr + (ulong)is_negative_size * -8 + 4);\n        }\n        success = '\\0';\n        int_value4 = (int *)0x0;\n        section_flags = 0;\n        section_name = (char *)0x0;\n        section_type = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)num_sections <= section_index) goto LAB_00105590;\n            section_size = section_pointer[section_index];\n            char_value2 = bfd_coff_get_syment(bfd_object,section_size,&stack0x000000e0);\n            iteration_variable = total_gap_size;\n            if (char_value2 == '\\0') {\n              result = bfd_get_error();\n              bfd_errmsg(result);\n              error_message = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            error_message = *(char **)(section_size + 8);\n            ptr = (undefined8 *)0x0;\n            section_index = section_index + 1;\n            total_gap_size = (ulong)param_37 + 1 + total_gap_size;\n            if (param_37 != 0) {\n              ptr = &stack0x00000110;\n              char_value2 = bfd_coff_get_auxent(bfd_object,section_size,0);\n              if (char_value2 == '\\0') {\n                result = bfd_get_error();\n                bfd_errmsg(result);\n                error_message = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (section_type != (char *)iteration_variable) break;\n            if (param_36 != 0x67) {\n              char_value2 = initialize_debug_info_0010bbd3(stab_table);\n              if (char_value2 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            section_type = (char *)merged_notes_size;\n            char_value2 = initialize_debug_info_0010bbd3(stab_table);\n            if (char_value2 == '\\0') goto LAB_00105981;\n          }\n          ushort_value = variable_stack3._6_2_;\n          if ((char)param_36 < '\\0') {\n            if (param_36 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            ptr_1 = parse_coff_type_0010dac0(bfd_object,&stack0x000000c0,&loop_vars);\n            if (ptr_1 == 0) break;\n            char_value2 = process_record_00112a33(&loop_vars,section_size,iteration_variable);\n          }\n          else {\n            if (param_36 < 100) {\n              switch(param_36) {\n              case 3:\n                if (variable_stack3._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)variable_stack3._6_2_ & *(uint *)(bfd_object[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(bfd_object[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                int_value4 = (int *)(**(code **)(bfd_object[1] + 0x238))(bfd_object);\n                section_flags = (uint)ushort_value;\n                section_name = error_message;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(param_36) {\n            case 100:\n              comparison_val = strcmp(error_message,\".bb\");\n              if (comparison_val == 0) {\n                char_value2 = start_debug_block_0010be88(stab_table);\n              }\n              else {\n                comparison_val = strcmp(error_message,\".eb\");\n                if (comparison_val != 0) goto switchD_00106e1a_caseD_68;\n                char_value2 = debug_end_block_0010bf20(stab_table);\n              }\n              break;\n            case 0x65:\n              comparison_val = strcmp(error_message,\".bf\");\n              if (comparison_val == 0) {\n                if (section_name != (char *)0x0) {\n                  symbol_flags = (int)section_flags >> ((byte)*(undefined4 *)(bfd_object[0x22] + 0x44) & 0x1f);\n                  iteration_variable = parse_coff_type_0010dac0(bfd_object,&stack0x000000c0,&loop_vars,iteration_variable,\n                                        symbol_flags ^ (section_flags ^ symbol_flags) &\n                                                 *(uint *)(bfd_object[0x22] + 0x38),ptr,0,\n                                        stab_table);\n                  if ((iteration_variable == 0) || (success = debug_record_function_0010bc80(stab_table), success == '\\0'))\n                  goto LAB_00105981;\n                  if (int_value4 != (int *)0x0) {\n                    comparison_val = 0;\n                    if (param_37 != 0) {\n                      comparison_val = debug_build_type - 1;\n                    }\n                    section_size = *(long *)(*(long *)(section_size + 0x20) + 0x30);\n                    while( true ) {\n                      int_value3 = int_value4[4];\n                      if (int_value3 == 0) break;\n                      char_value2 = record_debug_line_0010bf86(stab_table,comparison_val + int_value3,\n                                           *(long *)(int_value4 + 6) + section_size);\n                      int_value4 = int_value4 + 4;\n                      if (char_value2 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  section_flags = 0;\n                  int_value4 = (int *)0x0;\n                  section_name = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                error_message = \"%ld: .bf without preceding function\";\n              }\n              else {\n                comparison_val = strcmp(error_message,\".ef\");\n                if (comparison_val != 0) goto switchD_00106e1a_caseD_68;\n                if (success != '\\0') {\n                  success = debug_end_function_0010be1a(stab_table);\n                  if (success == '\\0') goto LAB_00105981;\n                  success = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                error_message = \"%ld: unexpected .ef\\n\";\n              }\n              temp_var2 = dcgettext(0,error_message,5);\n              print_error_message_00119ed0(temp_var2);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (char_value2 != '\\0');\n      }\n      else {\n        error_message = \"%s: no recognized debugging information\";\nLAB_00105968:\n        temp_var2 = dcgettext(0,error_message,5);\n        print_error_message_00119ed0(temp_var2);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(binary + 0x44) & 0x42) != 0) && ((*(uint *)(binary + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(binary + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (num_sections != 0) {\n        section_pointer = DAT_001278d0 + num_sections;\n        current_section = DAT_001278d0;\n        do {\n          section_flags = *(uint *)(*current_section + 0x18);\n          if ((section_flags & 0x1000000) != 0) {\n            *(uint *)(*current_section + 0x18) = section_flags & 0xfeffffff;\n          }\n          current_section = current_section + 1;\n        } while (section_pointer != current_section);\n      }\n    }\n    else {\n      for (section_size = *(long *)(binary + 0x90); section_size != 0; section_size = *(long *)(section_size + 8)) {\n        if (*(long *)(section_size + 0xe8) != 0) {\n          p_pointer = (uint *)(*(long *)(section_size + 0xe8) + 0x18);\n          *p_pointer = *p_pointer | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      section_size = xmalloc();\n      section_pointer = DAT_001278d0;\n      count_parameter = *(uint *)((long)bfd_object + 0x44) & 0x42;\n      DAT_001278c8 = section_size;\n      if (num_sections == 0) {\n        u_var29 = 0;\n      }\n      else {\n        u_var29 = 0;\n        _flag = 0;\n        do {\n          comparison_val = DAT_001279c0;\n          current_section = (long *)section_pointer[_flag];\n          function_pointer = (code *)current_section[4];\n          section_flags = *(uint *)(current_section + 3);\n          section_info2 = (long *)current_section[1];\n          section_info3 = section_info2;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            int_value3 = 0;\n            ptr = DAT_001279c8;\n            while ((int_value3 < comparison_val && (error_message = (char *)ptr[5], error_message != (char *)0x0))) {\n              if (error_message != \"\") {\n                int_value_2 = strcmp(error_message,(char *)section_info2);\n                if (int_value_2 == 0) {\n                  free(error_message);\n                  calculated_value = u_var29 + 1;\n                  ptr[5] = \"\";\n                  temp_var1 = extract_section_info_0011a2e0(ptr);\n                  temp_var2 = DAT_001278f0;\n                  *(undefined8 *)(section_size + u_var29 * 8) = temp_var1;\n                  iteration_variable = htab_elements(temp_var2);\n                  if ((iteration_variable != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                ptr = (undefined8 *)*ptr;\n              }\n              int_value3 = int_value3 + 1;\n            }\n          }\n          iteration_variable = htab_elements(DAT_001278f0);\n          calculated_value = u_var29;\n          if ((iteration_variable != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (section_info2 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)section_info2 == '_') && (*(char *)((long)section_info2 + 1) == '_')) &&\n                 (comparison_val = strcmp((char *)((ulong)(*(char *)((long)section_info2 + 2) == '_') +\n                                          (long)section_info2),\"__gnu_lto_slim\"), comparison_val == 0)) {\n                temp_var2 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(temp_var2);\n              }\n            }\n            byte_value3 = 0;\n            section_data = section_info2;\n            iteration_variable = htab_find(DAT_001278f0);\n            if (((iteration_variable == 0) || (section_info3 = *(long **)(iteration_variable + 8), section_info2 == section_info3)) &&\n               (section_info3 = section_info2, name_list = DAT_001278f8, (section_flags & 0x100) != 0)) {\n              for (; name_list != (char **)0x0; name_list = (char **)name_list[3]) {\n                comparison_val = strcmp(*name_list,(char *)section_info2);\n                if (comparison_val == 0) {\n                  section_info3 = (long *)name_list[1];\n                  break;\n                }\n              }\n            }\n            current_section[1] = (long)section_info3;\n            success = *(char *)section_info3;\n            if (success != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            error_message = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(binary + 8) + 0x1c) != '\\0')) {\n              iteration_variable = bfd_object[1];\n              success = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          success = *(char *)section_info2;\n          if (success == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          error_message = DAT_00127928;\n          iteration_variable = bfd_object[1];\n          if (*(char *)(iteration_variable + 0x1c) == success) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((section_flags & 0x82) == 0 && (function_pointer != bfd_map_over_sections)) &&\n                  ((*(byte *)(current_section[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              section_info3 = (long *)((long)section_info3 + 1);\n              current_section[1] = (long)section_info3;\n              goto joined_r0x00106565;\n            }\n            success = *(char *)(*(long *)(binary + 8) + 0x1c);\n            if (success == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              section_info3 = (long *)((long)section_info3 + 1);\n              current_section[1] = (long)section_info3;\n              str_len = strlen((char *)section_info3);\n              iteration_variable = str_len + 2;\nLAB_001066bc:\n              str_len = strlen(error_message);\n              section_info2 = (long *)xmalloc(str_len + iteration_variable);\n              goto LAB_001066d0;\n            }\n            *(char *)section_info3 = success;\n            current_section[1] = (long)section_info3;\n            u_var29 = calculated_value;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(binary + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              u_var29 = calculated_value;\n              if (error_message == (char *)0x0) goto LAB_00105b32;\n              str_len = strlen((char *)section_info3);\n              string_length_2 = strlen(error_message);\n              pointer_dest = (long *)xmalloc(string_length_2 + str_len + 1);\n              section_info2 = pointer_dest;\n            }\n            else {\nLAB_0010668d:\n              error_message = DAT_00127928;\n              if ((*(char *)(iteration_variable + 0x1c) != '\\0') && (success != *(char *)(iteration_variable + 0x1c)))\n              goto joined_r0x00106565;\n              str_len = strlen((char *)section_info3);\n              iteration_variable = str_len + 2;\n              if (error_message != (char *)0x0) goto LAB_001066bc;\n              section_info2 = (long *)xmalloc(iteration_variable);\nLAB_001066d0:\n              pointer_dest = (long *)((long)section_info2 + 1);\n              *(char *)section_info2 = *(char *)(*(long *)(binary + 8) + 0x1c);\n            }\n            error_message = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy((char *)pointer_dest,DAT_00127928);\n              str_len = strlen(error_message);\n              pointer_dest = (long *)((long)pointer_dest + str_len);\n            }\n            strcpy((char *)pointer_dest,(char *)section_info3);\n            current_section[1] = (long)section_info2;\n            section_info3 = section_info2;\n            u_var29 = calculated_value;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((section_flags & 0x20) == 0) &&\n             (((section_flags & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(current_section[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((count_parameter == 0) &&\n                (((section_flags & 0x82) != 0 || ((*(byte *)(current_section[4] + 0x25) & 0x10) != 0)))) ||\n               (comparison_val = bfd_decode_symclass(current_section), comparison_val == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                iteration_variable = htab_find();\n                if (iteration_variable == 0) goto LAB_00105c07;\n              }\n              else {\n                byte_value3 = byte_value3 & 0xffffffffffffff00;\n                section_data = section_info3;\n                htab_traverse(DAT_00127a18,pattern_match_0011a170,&loop_vars);\n                if (is_stab_info == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((section_flags & 0x82) == 0) && (function_pointer != bfd_map_over_sections)) &&\n                    ((*(byte *)(current_section[4] + 0x25) & 0x10) == 0)) {\n              if ((section_flags & 4) == 0) {\n                if (((*(int *)(bfd_object[1] + 8) != 2) ||\n                    (iteration_variable = *(long *)(current_section[4] + 0xd0), iteration_variable == 0)) ||\n                   (*(long *)(iteration_variable + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    success = bfd_is_local_label(bfd_object);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              success = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (success == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            iteration_variable = htab_find();\n            if (iteration_variable != 0) {\nLAB_0010687f:\n              temp_var2 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(temp_var2);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            byte_value3 = byte_value3 & 0xffffffffffffff00;\n            section_data = section_info3;\n            htab_traverse(DAT_00127a18,pattern_match_0011a170,&loop_vars);\n            if (is_stab_info != '\\0') goto LAB_0010687f;\n          }\n          if ((section_flags & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              byte_value3 = byte_value3 & 0xffffffffffffff00;\n              section_data = section_info3;\n              htab_traverse(DAT_00127a10,pattern_match_0011a170,&loop_vars);\n              if (is_stab_info != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            iteration_variable = htab_find();\n            if (iteration_variable == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((section_flags & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              iteration_variable = htab_find();\n              if (iteration_variable != 0) goto LAB_00105c2c;\n            }\n            else {\n              byte_value3 = byte_value3 & 0xffffffffffffff00;\n              section_data = section_info3;\n              htab_traverse(DAT_00127a28,pattern_match_0011a170,&loop_vars);\n              if (is_stab_info != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            success = process_section_001159d0(current_section[4]);\n            if (success == '\\0') {\n              if (((section_flags & 0x800002) == 0) && (function_pointer != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((section_flags & 0x82) != 0) {\n                  success = check_pattern_match_00115d70(section_info3);\n                  if ((success == '\\0') &&\n                     ((iteration_variable = htab_elements(DAT_001279f8), iteration_variable == 0 ||\n                      (success = check_pattern_match_00115d70(section_info3), success != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (symbol_flags = *(uint *)(current_section + 3), (symbol_flags & 0x200000) != 0)) ||\n                         (iteration_variable = *current_section, iteration_variable == 0)) ||\n                        ((*(int *)(*(long *)(iteration_variable + 8) + 8) != 5 ||\n                         (*(long *)(iteration_variable + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)current_section + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    symbol_flags = *(uint *)(current_section + 3);\n                  }\n                  *(uint *)(current_section + 3) = symbol_flags & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((section_flags & 1) != 0) && (success = check_pattern_match_00115d70(section_info3), success != '\\0')) {\n                  *(uint *)(current_section + 3) = *(uint *)(current_section + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (success = check_pattern_match_00115d70(section_info3), success != '\\0')) {\n                  *(uint *)(current_section + 3) = *(uint *)(current_section + 3) & 0xff7ffffd | 0x80;\n                }\n                if (function_pointer != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(section_size + u_var29 * 8) = current_section;\n              u_var29 = u_var29 + 1;\n            }\n          }\n          _flag = _flag + 1;\n        } while (num_sections != _flag);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        ptr = DAT_001279c8;\n        comparison_val = DAT_001279c0;\n        for (iteration_variable = 0; iteration_variable < comparison_val; iteration_variable = iteration_variable + 1) {\n          error_message = (char *)ptr[5];\n          if (error_message == (char *)0x0) {\n            ptr_1 = u_var29 * 8;\n            u_var29 = u_var29 + 1;\n            temp_var2 = extract_section_info_0011a2e0(ptr,binary);\n            *(undefined8 *)(section_size + ptr_1) = temp_var2;\n            comparison_val = DAT_001279c0;\n          }\n          else if (error_message != \"\") {\n            temp_var2 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(temp_var2,error_message);\n          }\n          ptr = (undefined8 *)*ptr;\n        }\n      }\n      has_debug_info = DAT_001279a0 == '\\0';\n      *(undefined8 *)(section_size + u_var29 * 8) = 0;\n      if ((has_debug_info) || (stab_table == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        num_sections = u_var29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      comparison_val = *(int *)(*(undefined8 **)(binary + 8) + 1);\n      if ((comparison_val == 5) || (comparison_val == 2)) {\n        debug_link_contents = (void *)0x0;\n        success = parse_binary_0011378f(binary,stab_table,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                             &loop_vars);\n        if (success != '\\0') {\n          section_size = bfd_make_section_with_flags(binary,\".stab\",0x2108);\n          iteration_variable = bfd_make_section_with_flags(binary,\".stabstr\",0x2108);\n          if ((((section_size == 0) || (iteration_variable == 0)) ||\n              (success = bfd_set_section_size(section_size,stab_section_size), success == '\\0')) ||\n             (success = bfd_set_section_size(iteration_variable,section_data), success == '\\0')) {\n            error_message = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(section_size + 0x7c) = 2;\n            *(undefined4 *)(iteration_variable + 0x7c) = 0;\n            success = bfd_set_section_contents(binary,section_size,section_pointers,0,stab_section_size);\n            if ((success != '\\0') &&\n               (success = bfd_set_section_contents(binary,iteration_variable,debug_link_contents,0,section_data), success != '\\0')\n               ) {\n              free(stab_table);\n              goto LAB_00105cfa;\n            }\n            error_message = \"can\\'t set debugging section contents\";\n          }\n          temp_var2 = dcgettext(0,error_message,5);\n          print_error_message_001126c0(0,binary,0,temp_var2);\n          free(debug_link_contents);\n          free(stab_table);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        temp_var2 = **(undefined8 **)(binary + 8);\n        temp_var1 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,binary,0,temp_var1,temp_var2);\n      }\n      free(stab_table);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(bfd_object,process_relocation_00116030,DAT_001278d0);\n      comparison_val = bfd_get_error();\n      if (comparison_val == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    section_size = htab_elements(DAT_00127a18);\n    if (((section_size != 0) ||\n        ((((section_size = htab_elements(DAT_00127a28), section_size != 0 ||\n           (section_size = htab_elements(DAT_00127a08), section_size != 0)) ||\n          (section_size = htab_elements(DAT_00127a00), section_size != 0)) ||\n         ((section_size = htab_elements(DAT_001279f8), section_size != 0 ||\n          (section_size = htab_elements(DAT_001279f0), section_size != 0)))))) ||\n       ((((section_size = htab_elements(DAT_001278f0), section_size != 0 ||\n          ((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')))) || (DAT_00127a39 != '\\0')) ||\n        ((((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')) ||\n         (((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')) || (DAT_001279c0 != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(binary,DAT_001278c8,num_sections & 0xffffffff);\n    bfd_map_over_sections(bfd_object,process_section_00115dc0,binary);\n    bfd_map_over_sections(bfd_object,process_section_00116110,binary);\n    for (ptr = DAT_001279e0; p_pointer2 = DAT_001279d8, ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      success = bfd_set_section_contents(binary,ptr[5],ptr[4],0,ptr[3]);\n      if (success == '\\0') {\n        print_error_message_001126c0(0,binary,ptr[5],0);\n        return 0;\n      }\n    }\n    for (; p_pointer2 != (undefined8 *)0x0; p_pointer2 = (undefined8 *)*p_pointer2) {\n      temp_var2 = *(undefined8 *)(p_pointer2[5] + 0x60);\n      success = bfd_set_section_contents(binary,temp_var2,p_pointer2[4],0,p_pointer2[3]);\n      if (success == '\\0') {\n        print_error_message_001126c0(0,binary,temp_var2,0);\n        return 0;\n      }\n    }\n    if (merged_notes == (long *)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        temp_var2 = *bfd_object;\n        temp_var1 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(temp_var1,temp_var2);\n      }\n    }\n    else {\n      section_pointer = (long *)0x0;\n      for (ptr = *(undefined8 **)(binary + 0x90); ptr != (undefined8 *)0x0;\n          ptr = (undefined8 *)ptr[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(binary + 8) + 8) == 5)) &&\n           ((*(int *)(ptr[0x1a] + 4) == 7 &&\n            (success = compare_strings_00113fb0(*ptr,\".gnu.build.attributes\"), success != '\\0')))) {\n          if (section_pointer == (long *)0x0) {\n            section_pointer = merged_notes;\n          }\n          current_section = merged_notes;\n          if (*(undefined8 **)(*section_pointer + 0x60) == ptr) {\nLAB_0010625f:\n            error_message = \"error: failed to merge notes\";\n            if (section_pointer[1] != 0) {\n              success = bfd_set_section_contents(binary,ptr,section_pointer[1],0,section_pointer[2]);\n              if (success == '\\0') {\n                temp_var2 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,binary,ptr,temp_var2);\n                return 0;\n              }\n              section_pointer = (long *)section_pointer[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              section_pointer = current_section;\n              if (*(undefined8 **)(*current_section + 0x60) == ptr) goto LAB_0010625f;\n              section_pointer = (long *)current_section[3];\n              current_section = section_pointer;\n            } while (section_pointer != (long *)0x0);\n            error_message = \"error: failed to locate merged notes\";\n          }\n          temp_var2 = dcgettext(0,error_message,5);\n          print_error_message_001126c0(0,binary,ptr,temp_var2);\n        }\nLAB_001061be:\n      }\n      do {\n        section_pointer = (long *)merged_notes[3];\n        free((void *)merged_notes[1]);\n        free(merged_notes);\n        merged_notes = section_pointer;\n      } while (section_pointer != (long *)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (success = bfd_fill_in_gnu_debuglink_section(binary,debug_link_section_name), section_size = DAT_00127a30,\n       success != '\\0')) {\n      if (section_sizes != (undefined *)0x0) {\n        if (0x2000 < max_section_size) {\n          max_section_size = 0x2000;\n        }\n        section_size = 0;\n        pointer_value = (undefined *)xmalloc(max_section_size);\n        undefined_value = DAT_00127999;\n        ptr_start = pointer_value;\n        for (max_section_size = max_section_size & 0xffffffff; max_section_size != 0; max_section_size = max_section_size - 1) {\n          *ptr_start = undefined_value;\n          ptr_start = ptr_start + (ulong)is_negative_size * -2 + 1;\n        }\n        for (; (uint)section_size < section_index; section_size = section_size + 1) {\n          u_var29 = *(ulong *)(section_sizes + section_size * 8);\n          if (u_var29 != 0) {\n            iteration_variable = *(long *)(*section_pointers + 0x40) - u_var29;\n            do {\n              calculated_value = 0x2000;\n              if (u_var29 < 0x2001) {\n                calculated_value = u_var29;\n              }\n              success = bfd_set_section_contents(binary,*section_pointers,pointer_value,iteration_variable,calculated_value);\n              if (success == '\\0') {\n                print_error_message_001126c0(0,binary,*section_pointers,0);\n                free(pointer_value);\n                return 0;\n              }\n              iteration_variable = iteration_variable + calculated_value;\n              u_var29 = u_var29 - calculated_value;\n            } while (u_var29 != 0);\n          }\n          section_pointers = section_pointers + 1;\n        }\n        free(pointer_value);\n        free(section_sizes);\n      }\n      result = (**(code **)(*(long *)(binary + 8) + 0x140))(bfd_object);\n      if ((char)result != '\\0') {\n        if (DAT_00127930 == 0) {\n          return result;\n        }\n        success = bfd_alt_mach_code(binary,DAT_00127930 & 0xffffffff);\n        u_var29 = DAT_00127930;\n        if (success == '\\0') {\n          temp_var2 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(temp_var2,u_var29);\n          if (*(int *)(*(long *)(binary + 8) + 8) == 5) {\n            temp_var2 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(temp_var2);\n            *(short *)(*(long *)(binary + 0x110) + 0x3a) = (short)DAT_00127930;\n            return result;\n          }\n          temp_var2 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(temp_var2);\n          return result;\n        }\n        return result;\n      }\n      temp_var2 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,binary,0,temp_var2);\n    }\n    else {\n      temp_var2 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,binary,0,temp_var2,section_size);\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_debug_info_0010554f",
            "entrypoint": "0x0010554f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010554f": "process_debug_info_0010554f",
                "__dest": "pointer_dest",
                "__ptr": "pointer_value",
                "__ptr_00": "pointer_value1",
                "__ptr_01": "pointer_value2",
                "__ptr_02": "stab_table",
                "__s": "string_value",
                "_param_15": "int_value4",
                "_param_41": "byte_value3",
                "bVar2": "is_padding",
                "bVar38": "has_debug_info",
                "bVar39": "is_negative_size",
                "cVar7": "success",
                "cVar8": "char_value2",
                "iVar10": "comparison_val",
                "iVar11": "int_value_2",
                "iVar27": "int_value3",
                "in_R10": "merged_notes",
                "in_stack_00000068": "num_records",
                "in_stack_00000068._4_4_": "section_index",
                "in_stack_000000d8": "total_gap_size",
                "in_stack_000000f8": "variable_stack3",
                "lVar14": "section_size",
                "lVar23": "ptr_1",
                "lVar37": "iteration_variable",
                "param_12": "max_section_size",
                "param_13": "section_name",
                "param_14": "section_sizes",
                "param_15": "count_parameter",
                "param_17": "section_pointers",
                "param_21": "debug_link_section_name",
                "param_23": "offset_parameter",
                "param_24": "section_type",
                "param_26": "pointer_array_parameter",
                "param_30": "section_pointers",
                "param_31": "debug_str_section_size",
                "param_32": "section_index",
                "param_33": "debug_link_contents",
                "param_34": "merged_notes_size",
                "param_38": "stab_section_size",
                "param_39": "debug_build_type",
                "param_40": "section_data",
                "param_41": "is_stab_info",
                "param_42": "section_name",
                "param_43": "symbol_bind",
                "param_44": "symbol_type",
                "param_7": "binary",
                "param_8": "num_sections",
                "param_9": "flag",
                "pcVar22": "pointer_to_char",
                "pcVar3": "function_pointer",
                "pcVar31": "error_message",
                "plVar15": "current_section",
                "plVar20": "section_info2",
                "plVar25": "section_info3",
                "plVar28": "section_pointer",
                "ppcVar34": "name_list",
                "ppuVar36": "stab_section_names",
                "puVar1": "p_pointer",
                "puVar26": "ptr",
                "puVar30": "p_pointer3",
                "puVar32": "stab_section_pointer",
                "puVar33": "ptr_start",
                "puVar4": "p_pointer2",
                "sVar18": "str_len",
                "sVar19": "string_length_2",
                "stack0x00000140": "loop_vars",
                "uVar12": "section_flags",
                "uVar13": "symbol_flags",
                "uVar16": "temp_var1",
                "uVar17": "temp_var2",
                "uVar21": "calculated_value",
                "uVar24": "temp_var4",
                "uVar29": "u_var29",
                "uVar5": "undefined_value",
                "uVar6": "ushort_value",
                "uVar9": "result",
                "unaff_R14": "bfd_object",
                "update_pointer_and_value_0010870e": "update_pointer_and_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105828": {
            "additional_data": {
                "FUN_00105828": {
                    "1": "check_input_file_architecture",
                    "2": "recognize_file_architecture",
                    "3": "identify_file_architecture",
                    "4": "recognize_input_file_format",
                    "6": "check_file_architecture"
                },
                "bfd_get_arch": {
                    "1": "get_architecture"
                },
                "bfd_get_mach": {
                    "1": "get_machine"
                },
                "bfd_printable_arch_mach": {
                    "1": "printable_arch_mach"
                },
                "dcgettext": {
                    "1": "get_localized_text"
                },
                "get_formatted_string_001125fa": {
                    "1": "get_input_file_name",
                    "2": "get_formatted_string"
                },
                "iVar1": {
                    "1": "file_arch",
                    "16": "architecture",
                    "2": "arch_type",
                    "4": "architecture_type"
                },
                "print_error_message_00119ed0": {
                    "3": "print_error_message"
                },
                "uVar2": {
                    "1": "arch_value",
                    "2": "file_format",
                    "3": "formatted_architecture",
                    "4": "machine"
                },
                "uVar3": {
                    "1": "machine",
                    "13": "formatted_architecture",
                    "3": "formatted_arch_mach",
                    "5": "formatted_arch",
                    "6": "formatted_string"
                },
                "uVar4": {
                    "1": "error_message_template",
                    "30": "error_message"
                }
            },
            "called": [
                "bfd_get_arch",
                "bfd_get_mach",
                "FUN_00119ed0",
                "dcgettext",
                "FUN_001125fa",
                "bfd_printable_arch_mach"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\nundefined8 check_file_architecture_00105828(void)\n\n{\n  int architecture;\n  undefined4 machine_type;\n  undefined8 formatted_architecture;\n  undefined8 error_message;\n  \n  architecture = bfd_get_arch();\n  if (architecture == 0) {\n    formatted_architecture = get_formatted_string();\n    error_message = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    print_error_message(error_message,formatted_architecture);\n  }\n  else {\n    formatted_architecture = bfd_get_mach();\n    machine_type = bfd_get_arch();\n    formatted_architecture = bfd_printable_arch_mach(machine_type,formatted_architecture);\n    error_message = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    print_error_message(error_message,formatted_architecture);\n  }\n  return 0;\n}\n\n",
            "current_name": "check_file_architecture_00105828",
            "entrypoint": "0x00105828",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105828": "check_file_architecture_00105828",
                "bfd_get_arch": "get_architecture",
                "bfd_get_mach": "get_machine",
                "bfd_printable_arch_mach": "printable_arch_mach",
                "dcgettext": "get_error_string",
                "get_formatted_string_001125fa": "get_formatted_string",
                "iVar1": "architecture",
                "print_error_message_00119ed0": "print_error_message",
                "uVar2": "machine_type",
                "uVar3": "formatted_architecture",
                "uVar4": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107880": {
            "called": [
                "strerror",
                "FUN_001126c0",
                "bfd_malloc_and_get_section",
                "free",
                "dcgettext",
                "bfd_set_section_size",
                "fclose",
                "FUN_00114190",
                "FUN_0010551d",
                "FUN_00115530",
                "bfd_get_arch",
                "__errno_location",
                "bfd_create_gnu_debuglink_section",
                "FUN_00115f30",
                "FUN_001163d0",
                "fwrite",
                "bfd_get_full_section_contents",
                "FUN_00113fb0",
                "xmalloc",
                "FUN_00119ed0",
                "bfd_set_format",
                "bfd_map_over_sections",
                "FUN_00105828",
                "FUN_0010554f",
                "fopen",
                "bfd_get_section_by_name",
                "bfd_make_section_with_flags"
            ],
            "calling": [
                "FUN_001152b6"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = get_formatted_string_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_file_architecture_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = compare_strings_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = compare_strings_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279eb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279e0,\n     cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0);\n    puVar31 = DAT_001279e0;\n  }\n  for (; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = process_data_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = drop_share_flag_if_not_coff_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = process_data_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = process_data_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        print_error_message_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar19);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a30;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = process_debug_info_0010554f();\n    return uVar28;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_data_structure_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = process_debug_info_0011173a(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_stab_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_info_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = initialize_data_structure_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          update_data_001088ae(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = process_debug_info_0011173a(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            print_stab_entries_00108b3e();\n            free_memory_blocks_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_memory_blocks_00108863();\n      if ((lVar27 != 0) && (cVar10 = process_debug_info_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = process_record_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = start_debug_block_0010be88(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block_0010bf20(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_0010dac0();\n                  if ((lVar17 == 0) || (cVar10 = debug_record_function_0010bc80(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = record_debug_line_0010bf86(param_10,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function_0010be1a(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              print_error_message_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        print_error_message_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278d0 + param_8;\n        plVar16 = DAT_001278d0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279c8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = extract_section_info_0011a2e0(puVar31);\n                  uVar19 = DAT_001278f0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278f0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(DAT_001278f0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278f8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127928;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127928;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127928);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar19);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a10,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a28,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = process_section_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = check_pattern_match_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                      (cVar10 = check_pattern_match_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = check_pattern_match_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = check_pattern_match_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279c8;\n        iVar12 = DAT_001279c0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = extract_section_info_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279c0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_001279a0 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = parse_binary_0011378f(param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                              &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_00127a18);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a28), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_00127a08), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_00127a00), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279f8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279f0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278f0), lVar27 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_section_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,process_section_00116110,param_7);\n    for (puVar31 = DAT_001279e0; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = compare_strings_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12), lVar27 = DAT_00127a30,\n       cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar23 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = compare_strings_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)process_build_attribute_notes_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279d0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_00107880",
            "entrypoint": "0x00107880",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00107976": {
            "called": [
                "bfd_set_start_address",
                "bfd_get_arch",
                "bfd_get_mach",
                "bfd_set_file_flags",
                "printf",
                "dcgettext",
                "FUN_001125fa",
                "FUN_001152b6"
            ],
            "calling": [
                "FUN_00114e50"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = get_formatted_string_001125fa();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~DAT_00127910 & *(uint *)(param_7[1] + 0x14) &\n           (DAT_00127914 | *(uint *)((long)unaff_R14 + 0x44));\n  if (DAT_00127a48 == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = get_formatted_string_001125fa();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = get_formatted_string_001125fa();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = check_file_architecture_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = compare_strings_00113fb0(*(undefined8 *)param_7[1],&DAT_0011b503), cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = compare_strings_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = DAT_001279eb == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar28 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar28 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar28 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar28 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = DAT_001279e0, cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0);\n    puVar33 = DAT_001279e0;\n  }\n  for (; puVar38 = DAT_001279d8, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    uVar31 = 0x128;\n    lVar28 = process_data_00114190(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = drop_share_flag_if_not_coff_00115f30(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = process_data_00114190(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = process_data_00114190(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        print_error_message_001126c0(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar18);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = process_debug_info_0010554f();\n    return uVar29;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_data_structure_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_001088ae((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = process_debug_info_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_stab_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_info_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = initialize_data_structure_00112894(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          update_data_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32)\n          ;\n          in_stack_00000018 = process_debug_info_0011173a(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            print_stab_entries_00108b3e();\n            free_memory_blocks_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_memory_blocks_00108863();\n      if ((lVar28 != 0) && (cVar10 = process_debug_info_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_0010dac0();\n            if (lVar23 == 0) break;\n            cVar9 = process_record_00112a33(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = start_debug_block_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = parse_coff_type_0010dac0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = debug_record_function_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = record_debug_line_0010bf86(puStack0000000000000020,iVar13 + iVar35,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              print_error_message_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        print_error_message_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278d0 + param_8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = DAT_001279c8;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = extract_section_info_0011a2e0(puVar33);\n                  uVar18 = DAT_001278f0;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(DAT_001278f0);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (DAT_001278f8 == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              print_error_and_exit_00119dd0(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(DAT_001278f0);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = DAT_001278f8, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = DAT_00127928;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = DAT_00127928;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127928);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar18);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a10,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a28,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = process_section_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = check_pattern_match_00115d70(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(DAT_001279f8), lVar28 == 0 ||\n                      (cVar10 = check_pattern_match_00115d70(pcVar32), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = check_pattern_match_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = check_pattern_match_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar33 = DAT_001279c8;\n        iVar13 = DAT_001279c0;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = extract_section_info_0011a2e0(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279c0;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = DAT_001279a0 == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = parse_binary_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          print_error_message_001126c0(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(DAT_00127a18);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(DAT_00127a28), lVar28 != 0 ||\n              (lVar28 = htab_elements(DAT_00127a08), lVar28 != 0)) ||\n             (lVar28 = htab_elements(DAT_00127a00), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(DAT_001279f8), lVar28 != 0 ||\n             (lVar28 = htab_elements(DAT_001279f0), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(DAT_001278f0), lVar28 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_section_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,process_section_00116110,param_7);\n    for (puVar33 = DAT_001279e0; puVar38 = DAT_001279d8, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = compare_strings_00113fb0(*puVar33,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          print_error_message_001126c0(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = DAT_00127a30, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar22 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)DAT_00127930;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = compare_strings_00113fb0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)process_build_attribute_notes_001163d0();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = DAT_001279d0;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_00107976",
            "entrypoint": "0x00107976",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00108072": {
            "additional_data": {
                "(*(long *)(unaff_R15 + 0xd0) + 4)": {
                    "1": "result_3"
                },
                "(**(code **)(*(long *)(unaff_RBP + 8) + 0x158))()": {
                    "1": "function_call"
                },
                "*(byte *)(lVar6 + 0x14)": {
                    "1": "byte_var_2"
                },
                "*(long *)(lVar6 + 0x20)": {
                    "1": "result_2"
                },
                "*(uint *)((long)unaff_RBX + 0x7c)": {
                    "1": "int_var"
                },
                "**": {
                    "1": "pointer_to_function"
                },
                "**(code **)(*(long *)(unaff_RBP + 8) + 0x158)": {
                    "1": "function_pointer"
                },
                "**code **": {
                    "1": "function_pointer"
                },
                "DAT_00127a40": {
                    "1": "constant_value2",
                    "2": "error_flag"
                },
                "FUN_00108072": {
                    "1": "process_and_set_data",
                    "2": "process_data",
                    "4": "set_alignment_and_size",
                    "7": "set_data_size",
                    "8": "set_size_and_alignment"
                },
                "LAB_00115695": {
                    "1": "label_1"
                },
                "LAB_001156b8": {
                    "1": "failure_label3"
                },
                "LAB_001156c4": {
                    "1": "label2"
                },
                "LAB_00115860": {
                    "1": "failure_label2"
                },
                "LAB_00115889": {
                    "1": "label_3"
                },
                "_DAT_001279b0": {
                    "1": "constant"
                },
                "bVar1": {
                    "1": "flag_value",
                    "10": "byte_var",
                    "2": "byte_var1",
                    "4": "byte_variable",
                    "5": "byte_value"
                },
                "cVar3": {
                    "1": "char_val",
                    "2": "char_var3",
                    "3": "char_value",
                    "8": "char_var"
                },
                "copy_private_data_0010808f": {
                    "7": "copy_private_data"
                },
                "dcgettext": {
                    "1": "get_message",
                    "3": "get_text",
                    "4": "get_error_message"
                },
                "find_matching_value_00115d00": {
                    "7": "find_matching_value"
                },
                "lVar5": {
                    "1": "error_size",
                    "19": "error_message",
                    "2": "gettext_result",
                    "3": "error_msg"
                },
                "lVar6": {
                    "1": "data1",
                    "2": "result1",
                    "3": "process_data_result"
                },
                "lVar7": {
                    "1": "additional_length",
                    "2": "result2",
                    "7": "matching_value"
                },
                "lVar8": {
                    "1": "alignment",
                    "2": "value"
                },
                "print_error_message_001126c0": {
                    "7": "print_error_message"
                },
                "process_data_00114190": {
                    "7": "process_data"
                },
                "setAlignment_00108179": {
                    "1": "set_alignment"
                },
                "set_alignment_00108179": {
                    "7": "set_alignment"
                },
                "uVar2": {
                    "1": "temp_variable_1",
                    "2": "undefined_var2",
                    "4": "undefined_var"
                },
                "uVar4": {
                    "1": "alignment",
                    "2": "size",
                    "3": "alignment_value",
                    "4": "value",
                    "7": "uint_var"
                },
                "unaff_R12": {
                    "1": "pointer_r12",
                    "2": "register_r12",
                    "3": "register12",
                    "5": "register_12"
                },
                "unaff_R14B": {
                    "1": "is_non_zero",
                    "10": "flag",
                    "2": "register14_b",
                    "4": "is_reversed"
                },
                "unaff_R15": {
                    "1": "unaffected_r15",
                    "2": "register_r15",
                    "3": "register15",
                    "5": "register_15",
                    "8": "result"
                },
                "unaff_RBP": {
                    "1": "ptr2",
                    "18": "base_pointer",
                    "2": "stack_base_pointer"
                },
                "unaff_RBX": {
                    "1": "function_params",
                    "2": "input_data",
                    "3": "args",
                    "4": "data",
                    "6": "parameters"
                }
            },
            "called": [
                "dcgettext",
                "FUN_00108179",
                "FUN_00114190"
            ],
            "calling": [
                "FUN_00115530"
            ],
            "code": "\n\n\nvoid set_size_and_alignment_00108072(void)\n\n{\n  byte byte_var;\n  undefined8 undefined_var;\n  char char_var;\n  uint uint_var;\n  long error_message;\n  long process_data_result;\n  long matching_value;\n  undefined8 *parameters;\n  long base_pointer;\n  long register_12;\n  long data_offset;\n  char flag;\n  long result;\n  \n  error_message = dcgettext(0,\"failed to set size\",5);\n  data_offset = parameters[6];\n  process_data_result = process_data(*parameters,0,0x18);\n  if (process_data_result == 0) {\n    *(byte *)(result + 0x28) = *(byte *)(result + 0x28) | 1;\n    undefined_var = *parameters;\n    data_offset = data_offset + _DAT_001279b0;\n    *(long *)(result + 0x30) = data_offset;\n    *(long *)(result + 0x38) = data_offset;\n    data_offset = parameters[7];\n    process_data_result = process_data(undefined_var,0,0x60);\n    if (process_data_result == 0) goto label_1;\nlabel_2:\n    matching_value = *(long *)(process_data_result + 0x20);\n    if ((*(byte *)(process_data_result + 0x14) & 0x40) != 0) {\n      matching_value = matching_value + data_offset;\n    }\n    *(long *)(result + 0x38) = matching_value;\n    data_offset = process_data(*parameters,0,0x200);\n    if (data_offset != 0) goto label_3;\nalignment_failed:\n    uint_var = *(uint *)((long)parameters + 0x7c);\n    if (uint_var < 0x3f) goto label2;\n    error_message = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(result + 0xb4) = *(undefined4 *)((long)parameters + 0xb4);\n    *(byte *)(result + 0x28) =\n         *(byte *)(result + 0x28) & 0xcf | *(byte *)(parameters + 5) & 0x30;\n    parameters[0xc] = result;\n    parameters[0xb] = 0;\n    byte_var = *(byte *)((long)parameters + 0x27);\n  }\n  else {\n    matching_value = *(long *)(process_data_result + 0x18);\n    if ((*(byte *)(process_data_result + 0x14) & 8) == 0) {\n      matching_value = matching_value + data_offset;\n    }\n    *(byte *)(result + 0x28) = *(byte *)(result + 0x28) | 1;\n    undefined_var = *parameters;\n    *(long *)(result + 0x30) = matching_value;\n    *(long *)(result + 0x38) = matching_value;\n    data_offset = parameters[7];\n    process_data_result = process_data(undefined_var,0,0x60);\n    if (process_data_result != 0) goto label_2;\nlabel_1:\n    undefined_var = *parameters;\n    *(long *)(result + 0x38) = data_offset + _DAT_001279b0;\n    data_offset = process_data(undefined_var,0,0x200);\n    if (data_offset == 0) goto alignment_failed;\nlabel_3:\n    uint_var = *(uint *)(data_offset + 0x2c);\n    if (0x3e < uint_var) {\n      set_alignment();\n      return;\n    }\nlabel2:\n    *(uint *)(result + 0x7c) = uint_var;\n    *(undefined4 *)(result + 0xb4) = *(undefined4 *)((long)parameters + 0xb4);\n    *(byte *)(result + 0x28) =\n         *(byte *)(result + 0x28) & 0xcf | *(byte *)(parameters + 5) & 0x30;\n    parameters[0xc] = result;\n    parameters[0xb] = 0;\n    byte_var = *(byte *)((long)parameters + 0x27);\n  }\n  if ((byte_var & 2) != 0) {\n    data_offset = parameters[0x1a];\n    process_data_result = find_matching_value(data_offset,parameters[0x1c]);\n    if ((process_data_result != 0) &&\n       (matching_value = *(long *)(register_12 + 8), *(uint *)(process_data_result + 0x18) = *(uint *)(process_data_result + 0x18) | 0x20,\n       *(int *)(matching_value + 8) == 5)) {\n      *(long *)(data_offset + 0xb0) = process_data_result;\n      char_var = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n      if (char_var == '\\0') {\n        copy_private_data();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  char_var = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n  if (char_var == '\\0') {\n    copy_private_data();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(result + 0xd0) + 4) = 8;\n  }\n  if (error_message != 0) {\n    DAT_00127a40 = 1;\n    print_error_message(0);\n  }\n  return;\n}\n\n",
            "current_name": "set_size_and_alignment_00108072",
            "entrypoint": "0x00108072",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108072": "set_size_and_alignment_00108072",
                "LAB_00115695": "label_1",
                "LAB_001156b8": "alignment_failed",
                "LAB_001156c4": "label2",
                "LAB_00115860": "label_2",
                "LAB_00115889": "label_3",
                "bVar1": "byte_var",
                "cVar3": "char_var",
                "copy_private_data_0010808f": "copy_private_data",
                "dcgettext": "get_error_message",
                "find_matching_value_00115d00": "find_matching_value",
                "lVar5": "error_message",
                "lVar6": "process_data_result",
                "lVar7": "matching_value",
                "lVar8": "data_offset",
                "print_error_message_001126c0": "print_error_message",
                "process_data_00114190": "process_data",
                "set_alignment_00108179": "set_alignment",
                "uVar2": "undefined_var",
                "uVar4": "uint_var",
                "unaff_R12": "register_12",
                "unaff_R14B": "flag",
                "unaff_R15": "result",
                "unaff_RBP": "base_pointer",
                "unaff_RBX": "parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010808f": {
            "additional_data": {
                "DAT_00127a40": {
                    "1": "error_message_flag"
                },
                "FUN_0010808f": {
                    "1": "update_private_data",
                    "30": "copy_private_data"
                },
                "dcgettext": {
                    "1": "get_translated_error_message",
                    "3": "get_translated_message",
                    "4": "get_error_message"
                },
                "lVar1": {
                    "1": "localized_error_message",
                    "14": "error_message",
                    "2": "error_msg",
                    "4": "error_string"
                },
                "print_error_message_001126c0": {
                    "11": "print_error_message"
                },
                "unaff_R14B": {
                    "1": "should_copy_data",
                    "2": "is_private_data_copied",
                    "3": "copy_successful",
                    "5": "is_copy_successful",
                    "8": "flag"
                },
                "unaff_R15": {
                    "1": "data_offset",
                    "2": "source_address",
                    "5": "base_address",
                    "6": "data_ptr",
                    "7": "data_address",
                    "8": "data_pointer"
                }
            },
            "called": [
                "FUN_001126c0",
                "dcgettext"
            ],
            "calling": [
                "FUN_00108179"
            ],
            "code": "\nvoid copy_private_data_0010808f(void)\n\n{\n  long error_message;\n  char flag;\n  long data_pointer;\n  \n  error_message = dcgettext(0,\"failed to copy private data\",5);\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(data_pointer + 0xd0) + 4) = 8;\n  }\n  if (error_message != 0) {\n    DAT_00127a40 = 1;\n    print_error_message(0);\n  }\n  return;\n}\n\n",
            "current_name": "copy_private_data_0010808f",
            "entrypoint": "0x0010808f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "dcgettext": "get_error_message",
                "lVar1": "error_message",
                "print_error_message_001126c0": "print_error_message",
                "unaff_R14B": "flag",
                "unaff_R15": "data_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108179": {
            "additional_data": {
                "DAT_00127a40": {
                    "1": "error_flag"
                },
                "FUN_00108179": {
                    "1": "set_alignment_and_copy_private_data",
                    "20": "set_alignment",
                    "6": "set_alignment_and_copy_data"
                },
                "cVar3": {
                    "1": "error_code",
                    "2": "status",
                    "3": "flag",
                    "4": "success_flag",
                    "6": "result"
                },
                "cVar3_00108179": {
                    "1": "is_successful"
                },
                "copy_private_data_0010808f": {
                    "6": "copy_private_data"
                },
                "dcgettext": {
                    "3": "get_error_message"
                },
                "find_matching_value_00115d00": {
                    "6": "find_matching_value"
                },
                "lVar1": {
                    "1": "result1",
                    "2": "error_msg",
                    "3": "result",
                    "4": "error_string",
                    "6": "error_message"
                },
                "lVar1_00108179": {
                    "1": "error_string"
                },
                "lVar2": {
                    "1": "helper_struct_data",
                    "14": "matching_value",
                    "2": "value_comparison"
                },
                "lVar2_00108179": {
                    "1": "matching_value"
                },
                "lVar4": {
                    "1": "alignment_fail_msg",
                    "2": "failed_alignment_string",
                    "4": "error_string",
                    "6": "error_msg"
                },
                "lVar4_00108179": {
                    "1": "alignment_error_string"
                },
                "lVar5": {
                    "1": "matching_value2",
                    "11": "matching_value",
                    "2": "matching_value_result",
                    "3": "value",
                    "8": "found_value"
                },
                "lVar5_00108179": {
                    "1": "matching_value_result"
                },
                "print_error_message_001126c0": {
                    "6": "print_error_message"
                },
                "unaff_R12": {
                    "1": "context_address",
                    "2": "matching_value",
                    "5": "r12"
                },
                "unaff_R12_00108179": {
                    "1": "r12"
                },
                "unaff_R14B": {
                    "1": "is_error",
                    "2": "r14",
                    "3": "r14b",
                    "7": "flag"
                },
                "unaff_R14B_00108179": {
                    "1": "r14b"
                },
                "unaff_R15": {
                    "1": "struct4",
                    "2": "new_object",
                    "5": "r15"
                },
                "unaff_R15_00108179": {
                    "1": "r15"
                },
                "unaff_RBP": {
                    "1": "context2",
                    "2": "frame_base",
                    "3": "stack_base_pointer",
                    "5": "rbp",
                    "8": "base_pointer"
                },
                "unaff_RBP_00108179": {
                    "1": "rbp"
                },
                "unaff_RBX": {
                    "1": "previous_value",
                    "2": "base_pointer",
                    "5": "rbx"
                },
                "unaff_RBX_00108179": {
                    "1": "rbx"
                }
            },
            "called": [
                "FUN_0010808f",
                "dcgettext",
                "FUN_00115d00"
            ],
            "calling": [
                "FUN_00108072"
            ],
            "code": "\nvoid set_alignment_00108179(void)\n\n{\n  long error_message;\n  long matching_value;\n  char result;\n  long error_msg;\n  long matching_value;\n  long rbx;\n  long base_pointer;\n  long r12;\n  char flag;\n  long r15;\n  \n  error_msg = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(r15 + 0xb4) = *(undefined4 *)(rbx + 0xb4);\n  *(byte *)(r15 + 0x28) =\n       *(byte *)(r15 + 0x28) & 0xcf | *(byte *)(rbx + 0x28) & 0x30;\n  *(long *)(rbx + 0x60) = r15;\n  *(undefined8 *)(rbx + 0x58) = 0;\n  if ((*(byte *)(rbx + 0x27) & 2) != 0) {\n    error_message = *(long *)(rbx + 0xd0);\n    matching_value = find_matching_value(error_message,*(undefined8 *)(rbx + 0xe0));\n    if ((matching_value != 0) &&\n       (matching_value = *(long *)(r12 + 8), *(uint *)(matching_value + 0x18) = *(uint *)(matching_value + 0x18) | 0x20,\n       *(int *)(matching_value + 8) == 5)) {\n      *(long *)(error_message + 0xb0) = matching_value;\n      result = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n      if (result == '\\0') {\n        copy_private_data();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  result = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n  if (result == '\\0') {\n    copy_private_data();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(r15 + 0xd0) + 4) = 8;\n  }\n  if (error_msg != 0) {\n    DAT_00127a40 = 1;\n    print_error_message(0);\n  }\n  return;\n}\n\n",
            "current_name": "set_alignment_00108179",
            "entrypoint": "0x00108179",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108179": "set_alignment_00108179",
                "cVar3": "result",
                "copy_private_data_0010808f": "copy_private_data",
                "dcgettext": "get_error_message",
                "find_matching_value_00115d00": "find_matching_value",
                "lVar1": "error_message",
                "lVar2": "matching_value",
                "lVar4": "error_msg",
                "lVar5": "matching_value",
                "print_error_message_001126c0": "print_error_message",
                "unaff_R12": "r12",
                "unaff_R14B": "flag",
                "unaff_R15": "r15",
                "unaff_RBP": "base_pointer",
                "unaff_RBX": "rbx"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001081e9": {
            "additional_data": {
                "FUN_001081e9": {
                    "1": "deallocation_function",
                    "15": "free_memory",
                    "2": "free_and_return",
                    "3": "dealloc_memory",
                    "7": "release_memory"
                },
                "in_RAX": {
                    "1": "previous_return_value",
                    "2": "result"
                },
                "param_7": {
                    "17": "return_value",
                    "2": "return_val",
                    "4": "result"
                },
                "unaff_RBX": {
                    "1": "memory_to_be_released",
                    "15": "memory_block",
                    "2": "memory_to_deallocate",
                    "3": "memory_to_free",
                    "4": "memory_address"
                }
            },
            "called": [
                "free"
            ],
            "calling": [
                "FUN_0011a0e0"
            ],
            "code": "\nundefined8 free_memory_001081e9(void)\n\n{\n  undefined8 return_value;\n  void *memory_block;\n  undefined8 return_value;\n  \n  return_value = return_value;\n  free(memory_block);\n  return return_value;\n}\n\n",
            "current_name": "free_memory_001081e9",
            "entrypoint": "0x001081e9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001081e9": "free_memory_001081e9",
                "in_RAX": "return_value",
                "param_7": "return_value",
                "unaff_RBX": "memory_block"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108200": {
            "additional_data": {
                "FUN_00108200": {
                    "1": "copy_file_if_possible",
                    "12": "copy_file_and_set_time",
                    "2": "copy_file_and_print_error",
                    "4": "copy_file"
                },
                "auVar3": {
                    "1": "return_value"
                },
                "piVar1": {
                    "1": "errno_location"
                },
                "uVar2": {
                    "1": "error_message"
                },
                "unaff_R12B": {
                    "1": "copy_file",
                    "10": "should_set_time",
                    "11": "should_set_file_time",
                    "2": "copy_flag",
                    "3": "copy_file_flag"
                },
                "unaff_R13": {
                    "1": "flags",
                    "3": "error_code",
                    "4": "file_permissions",
                    "5": "file_attributes",
                    "9": "file_time"
                },
                "unaff_RBP": {
                    "1": "filepath",
                    "19": "file_path",
                    "2": "source_file_path",
                    "3": "file_name"
                },
                "unaff_retaddr": {
                    "31": "return_address"
                }
            },
            "called": [
                "strerror",
                "unlink",
                "__errno_location",
                "FUN_00119ed0",
                "dcgettext",
                "FUN_0011a350"
            ],
            "calling": [
                "FUN_00115970"
            ],
            "code": "\nundefined  [16] copy_file_and_set_time_00108200(void)\n\n{\n  int *errno_location;\n  undefined8 error_message;\n  char *file_path;\n  char should_set_file_time;\n  ulong file_time;\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  errno_location = __errno_location();\n  strerror(*errno_location);\n  error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  print_error_message_00119ed0(error_message);\n  unlink(file_path);\n  if (should_set_file_time != '\\0') {\n    set_file_time_0011a350();\n  }\n  return_value._0_8_ = file_time & 0xffffffff;\n  return_value._8_8_ = return_address;\n  return return_value;\n}\n\n",
            "current_name": "copy_file_and_set_time_00108200",
            "entrypoint": "0x00108200",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108200": "copy_file_and_set_time_00108200",
                "auVar3": "return_value",
                "piVar1": "errno_location",
                "uVar2": "error_message",
                "unaff_R12B": "should_set_file_time",
                "unaff_R13": "file_time",
                "unaff_RBP": "file_path",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108237": {
            "additional_data": {
                "FUG_00108237": {
                    "1": "close_file_and_return_error"
                },
                "FUN_00108237": {
                    "1": "close_file_and_reset_errno",
                    "3": "close_file_and_set_error",
                    "4": "close_file_and_return_error",
                    "5": "close_file_and_set_errno"
                },
                "__errno_location": {
                    "1": "get_errno_location"
                },
                "iVar1": {
                    "1": "old_errno",
                    "2": "saved_errno"
                },
                "piVar2": {
                    "1": "error_location_ptr",
                    "2": "errno_location",
                    "3": "errno_ptr",
                    "4": "errno_pointer",
                    "5": "error_pointer"
                },
                "unaff_R12D": {
                    "1": "file_handle",
                    "30": "file_descriptor"
                }
            },
            "called": [
                "close",
                "__errno_location"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\nundefined8 close_file_and_set_errno_00108237(void)\n\n{\n  int saved_errno;\n  int *error_pointer;\n  int file_descriptor;\n  \n  error_pointer = __errno_location();\n  saved_errno = *error_pointer;\n  close(file_descriptor);\n  *error_pointer = saved_errno;\n  return 0xffffffff;\n}\n\n",
            "current_name": "close_file_and_set_errno_00108237",
            "entrypoint": "0x00108237",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108237": "close_file_and_set_errno_00108237",
                "__errno_location": "get_errno_location",
                "iVar1": "saved_errno",
                "piVar2": "error_pointer",
                "unaff_R12D": "file_descriptor"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010827b": {
            "additional_data": {
                "FUN_0010827b": {
                    "1": "handle_section_error",
                    "2": "print_section_error_and_exit",
                    "21": "print_error_and_exit"
                },
                "print_error_and_exit_00119dd0": {
                    "1": "print_error_and_exit"
                },
                "uVar1": {
                    "1": "section_name",
                    "16": "section_value",
                    "2": "section"
                },
                "uVar2": {
                    "1": "section_error_message",
                    "19": "error_message",
                    "2": "error_msg"
                },
                "unaff_RBX": {
                    "1": "section_data",
                    "13": "section_ptr",
                    "2": "section_address",
                    "6": "section_pointer"
                }
            },
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "calling": [
                "FUN_00115b70"
            ],
            "code": "\nvoid print_error_and_exit_0010827b(void)\n\n{\n  undefined8 section_value;\n  undefined8 error_message;\n  undefined8 *section_ptr;\n  \n  section_value = *section_ptr;\n  error_message = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  print_error_and_exit_0010827b(error_message,section_value);\n}\n\n",
            "current_name": "print_error_and_exit_0010827b",
            "entrypoint": "0x0010827b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010827b": "print_error_and_exit_0010827b",
                "print_error_and_exit_00119dd0": "print_error_and_exit",
                "uVar1": "section_value",
                "uVar2": "error_message",
                "unaff_RBX": "section_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010829e": {
            "additional_data": {
                "FUN_0010829e": {
                    "1": "check_and_calculate",
                    "12": "process_input",
                    "2": "process_operation",
                    "4": "process_data"
                },
                "calculate_inverted_result_001082b3": {
                    "1": "calculate_result",
                    "17": "calculate_inverted_result"
                },
                "calculate_inverted_result_001082b3()": {
                    "1": "calculate_inverted_result"
                },
                "check_string_length_00113ede": {
                    "1": "validate_string_length",
                    "15": "get_string_length"
                },
                "check_string_length_00113ede()": {
                    "1": "get_string_length"
                },
                "uVar1": {
                    "2": "result"
                },
                "unaff_EBP": {
                    "1": "operand",
                    "12": "input_value",
                    "2": "error_code",
                    "4": "input",
                    "6": "ebp_value"
                }
            },
            "called": [
                "FUN_00113ede",
                "FUN_001082b3"
            ],
            "calling": [
                "FUN_00115b70"
            ],
            "code": "\nundefined8 process_input_0010829e(void)\n\n{\n  undefined8 result;\n  int input_value;\n  \n  if (input_value == 5) {\n    result = get_string_length;\n    return result;\n  }\n  if ((input_value != 4) && (input_value == 6)) {\n    result = calculate_inverted_result;\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_input_0010829e",
            "entrypoint": "0x0010829e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010829e": "process_input_0010829e",
                "calculate_inverted_result_001082b3": "calculate_inverted_result",
                "calculate_inverted_result_001082b3()": "calculate_inverted_result",
                "check_string_length_00113ede": "get_string_length",
                "check_string_length_00113ede()": "get_string_length",
                "uVar1": "result",
                "unaff_EBP": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001082b3": {
            "additional_data": {
                "FUN_001082b3": {
                    "1": "invert_and_compare",
                    "2": "calculate_flipped_value",
                    "5": "invert_and_check_string_length"
                },
                "check_string_length_00113ede": {
                    "19": "get_string_length"
                },
                "uVar1": {
                    "1": "checked_string_length",
                    "28": "string_length"
                }
            },
            "called": [
                "FUN_00113ede"
            ],
            "calling": [
                "FUN_0010829e"
            ],
            "code": "\nuint calculate_inverted_result_001082b3(void)\n\n{\n  uint string_length;\n  \n  string_length = get_string_length();\n  return string_length ^ 1;\n}\n\n",
            "current_name": "calculate_inverted_result_001082b3",
            "entrypoint": "0x001082b3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001082b3": "calculate_inverted_result_001082b3",
                "check_string_length_00113ede": "get_string_length",
                "uVar1": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001082c3": {
            "additional_data": {
                "<No Parameters>": {
                    "1": ""
                },
                "<No Variables>": {
                    "1": ""
                },
                "<original_function_name>": {
                    "1": "get_default_value"
                },
                "<original_parameter_name_1>": {
                    "2": "<new_parameter_name_1>"
                },
                "<original_parameter_name_2>": {
                    "1": "<new_parameter_name_2>"
                },
                "<original_variable_name_1>": {
                    "2": "result"
                },
                "<original_variable_name_2>": {
                    "1": "count"
                },
                "<original_variable_name_n>": {
                    "1": "temp"
                },
                "DAT": {
                    "1": "dat"
                },
                "FUN_001082c3": {
                    "1": "initialize_default_value",
                    "11": "initialize",
                    "2": "get_zero_value",
                    "4": "get_default_value"
                },
                "PTR": {
                    "1": "ptr"
                },
                "iVar1": {
                    "1": "index"
                },
                "initialize": {
                    "1": "void"
                },
                "it1_p": {
                    "1": "iterator"
                },
                "return": {
                    "3": "result"
                },
                "return_value": {
                    "1": "return_value"
                },
                "undefined8": {
                    "1": "int",
                    "9": "void"
                },
                "void": {
                    "1": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_00115d00"
            ],
            "code": "\nvoid initialize_001082c3(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_001082c3",
            "entrypoint": "0x001082c3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001082c3": "initialize_001082c3",
                "return": "result",
                "undefined8": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001082df": {
            "additional_data": {
                "*(long **)unaff_R13[uVar6]": {
                    "1": "current_element_ptr"
                },
                "FUN_001082df": {
                    "1": "analyze_and_execute",
                    "15": "process_data",
                    "2": "extract_and_check_patterns"
                },
                "cVar3": {
                    "1": "is_valid_pattern",
                    "11": "pattern_match_result",
                    "2": "is_pattern_match",
                    "4": "is_match",
                    "5": "pattern_match"
                },
                "check_pattern_match_00115d70": {
                    "2": "check_pattern_match"
                },
                "lVar2": {
                    "1": "curr_element",
                    "2": "item_value",
                    "3": "pointer_value",
                    "4": "current_value",
                    "6": "current_element"
                },
                "puVar4": {
                    "1": "new_array_ptr",
                    "2": "output_pointer",
                    "3": "result_ptr",
                    "4": "output_ptr"
                },
                "puVar5": {
                    "1": "updated_output_pointer",
                    "2": "current_output_ptr"
                },
                "uVar1": {
                    "1": "total_items",
                    "2": "input_size",
                    "3": "num_pointers",
                    "4": "array_length",
                    "8": "num_elements"
                },
                "uVar6": {
                    "1": "counter",
                    "11": "current_index",
                    "3": "iteration_count",
                    "7": "index"
                },
                "unaff_R13": {
                    "1": "output_array",
                    "2": "ptr_array",
                    "3": "pointer_array",
                    "5": "data_array"
                },
                "unaff_RBP": {
                    "1": "context_pointer",
                    "11": "base_pointer",
                    "3": "stack_base",
                    "5": "frame_pointer"
                },
                "unaff_RBX": {
                    "1": "ptr_array",
                    "12": "base_address",
                    "2": "data_pointer"
                }
            },
            "called": [
                "FUN_00115d70"
            ],
            "calling": [
                "FUN_00115dc0"
            ],
            "code": "\nvoid process_data_001082df(void)\n\n{\n  uint num_elements;\n  long current_element;\n  char pattern_match_result;\n  long base_address;\n  undefined8 *output_ptr;\n  undefined8 *temp_ptr;\n  long base_pointer;\n  ulong current_index;\n  undefined8 *data_array;\n  \n  num_elements = *(uint *)(base_address + 0x78);\n  if (DAT_00127a48 == 7) {\n    output_ptr = data_array;\n    for (current_index = 0; current_index != num_elements; current_index = current_index + 1) {\n      temp_ptr = output_ptr;\n      if (((*(long **)data_array[current_index] != (long *)0x0) &&\n          (current_element = **(long **)data_array[current_index], current_element != 0)) &&\n         (pattern_match_result = check_pattern_match(*(undefined8 *)(current_element + 8),DAT_00127a28), pattern_match_result != '\\0')) {\n        temp_ptr = output_ptr + 1;\n        *output_ptr = data_array[current_index];\n      }\n      output_ptr = temp_ptr;\n    }\n    *output_ptr = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(base_pointer + 8) + 0x288))();\n  return;\n}\n\n",
            "current_name": "process_data_001082df",
            "entrypoint": "0x001082df",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001082df": "process_data_001082df",
                "cVar3": "pattern_match_result",
                "check_pattern_match_00115d70": "check_pattern_match",
                "lVar2": "current_element",
                "puVar4": "output_ptr",
                "puVar5": "temp_ptr",
                "uVar1": "num_elements",
                "uVar6": "current_index",
                "unaff_R13": "data_array",
                "unaff_RBP": "base_pointer",
                "unaff_RBX": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108375": {
            "additional_data": {
                "FUN_00108375": {
                    "1": "check_output_format_and_print_error_message",
                    "2": "check_and_print_note",
                    "3": "check_output_format",
                    "4": "check_and_print_error",
                    "8": "drop_share_flag_if_not_coff"
                },
                "param_1": {
                    "1": "file_name",
                    "2": "unused_param",
                    "3": "param",
                    "4": "arg1",
                    "5": "param1",
                    "9": "param_1"
                },
                "param_2": {
                    "1": "file_info",
                    "2": "param2_array",
                    "3": "args",
                    "4": "param_array"
                },
                "param_3": {
                    "1": "unused_param",
                    "4": "arg3",
                    "6": "param3",
                    "9": "param_3"
                },
                "print_error_message_00119ed0": {
                    "2": "print_error_message"
                },
                "uVar1": {
                    "1": "param1_value",
                    "2": "value1",
                    "3": "file",
                    "6": "first_param"
                },
                "uVar2": {
                    "1": "error_msg",
                    "19": "error_message",
                    "2": "message",
                    "6": "var2"
                },
                "unaff_EBX": {
                    "1": "error_code",
                    "2": "flags",
                    "3": "modified_ebx",
                    "5": "ebx",
                    "6": "flag",
                    "8": "ebx_value"
                }
            },
            "called": [
                "FUN_00119ed0",
                "dcgettext"
            ],
            "calling": [
                "FUN_00115f30"
            ],
            "code": "\nuint drop_share_flag_if_not_coff_00108375(undefined8 param_1,undefined8 *arg2,undefined8 param_3)\n\n{\n  undefined8 first_param;\n  undefined8 error_message;\n  uint ebx_value;\n  \n  if (*(int *)(arg2[1] + 8) != 2) {\n    first_param = *arg2;\n    ebx_value = ebx_value & 0xf7ffffff;\n    error_message = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    print_error_message(error_message,first_param,param_3);\n  }\n  return ebx_value;\n}\n\n",
            "current_name": "drop_share_flag_if_not_coff_00108375",
            "entrypoint": "0x00108375",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108375": "drop_share_flag_if_not_coff_00108375",
                "param_2": "arg2",
                "print_error_message_00119ed0": "print_error_message",
                "uVar1": "first_param",
                "uVar2": "error_message",
                "unaff_EBX": "ebx_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001083b7": {
            "additional_data": {
                "FUN_001083b7": {
                    "1": "print_error_message_and_exit",
                    "16": "handle_error",
                    "2": "handle_param_error",
                    "3": "print_error_or_return",
                    "7": "print_error_and_exit"
                },
                "iVar1": {
                    "1": "error_type",
                    "15": "bfd_error",
                    "2": "error_code",
                    "7": "bfd_error_code"
                },
                "param_1": {
                    "1": "input_value",
                    "29": "error_code"
                },
                "print_error_message_0011a110": {
                    "2": "print_error_message"
                },
                "unaff_RBP": {
                    "1": "error_message_pointer",
                    "10": "error_message",
                    "2": "message_pointer",
                    "3": "message_ptr",
                    "4": "error_message_ptr"
                },
                "unaff_retaddr": {
                    "1": "return_value",
                    "2": "return_addr",
                    "28": "return_address"
                },
                "xexit": {
                    "1": "exit_program"
                }
            },
            "called": [
                "bfd_get_error",
                "FUN_0011a110",
                "xexit"
            ],
            "calling": [
                "FUN_00116030"
            ],
            "code": "\nundefined8 handle_error_001083b7(long error_code)\n\n{\n  int bfd_error;\n  undefined8 *error_message;\n  undefined8 return_address;\n  \n  if (error_code == -1) {\n    bfd_error = bfd_get_error();\n    if (bfd_error == 5) {\n      return return_address;\n    }\n  }\n  print_error_message(*error_message);\n                    \n  xexit(1);\n}\n\n",
            "current_name": "handle_error_001083b7",
            "entrypoint": "0x001083b7",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001083b7": "handle_error_001083b7",
                "iVar1": "bfd_error",
                "param_1": "error_code",
                "print_error_message_0011a110": "print_error_message",
                "unaff_RBP": "error_message",
                "unaff_retaddr": "return_address",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001083de": {
            "additional_data": {
                "FUN_001083de": {
                    "1": "reverse_bytes_section",
                    "24": "print_error_and_exit"
                },
                "uVar1": {
                    "1": "section_ptr",
                    "2": "section_value",
                    "3": "section_size",
                    "5": "section",
                    "7": "section_length"
                },
                "uVar2": {
                    "1": "error_msg",
                    "21": "error_message"
                },
                "unaff_EBP": {
                    "1": "section_index",
                    "12": "section_length",
                    "4": "length",
                    "9": "error_code"
                },
                "unaff_RBX": {
                    "1": "buffer_ptr",
                    "2": "section_ptr",
                    "3": "section",
                    "4": "section_length_ptr",
                    "6": "section_pointer",
                    "7": "section_length"
                }
            },
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "calling": [
                "FUN_00116110"
            ],
            "code": "\nvoid print_error_and_exit_001083de(void)\n\n{\n  undefined8 section_length;\n  undefined8 error_message;\n  undefined8 *section_length;\n  undefined4 section_length;\n  \n  section_length = *section_length;\n  error_message = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  print_error_and_exit_001083de_00119dd0(error_message,section_length,section_length);\n}\n\n",
            "current_name": "print_error_and_exit_001083de",
            "entrypoint": "0x001083de",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001083de": "print_error_and_exit_001083de",
                "uVar1": "section_length",
                "uVar2": "error_message",
                "unaff_EBP": "section_length",
                "unaff_RBX": "section_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108466": {
            "additional_data": {
                "FUN_00108466": {
                    "1": "free_and_print_error",
                    "2": "free_memory_and_print_error",
                    "3": "print_error_and_free_memory",
                    "4": "print_error_and_free",
                    "7": "free_and_print_error_message"
                },
                "free": {
                    "1": "release_memory"
                },
                "param_7": {
                    "1": "ptr_to_free_memory",
                    "2": "buffer",
                    "3": "data_to_free",
                    "4": "memory_block",
                    "9": "memory_to_free"
                },
                "print_error_message_001126c0": {
                    "10": "print_error_message",
                    "2": "display_error_message"
                }
            },
            "called": [
                "FUN_001126c0",
                "free"
            ],
            "calling": [
                "FUN_00116110"
            ],
            "code": "\nvoid free_and_print_error_message_00108466(void)\n\n{\n  void *memory_to_free;\n  \n  DAT_00127a40 = 1;\n  print_error_message(0);\n  release_memory(memory_to_free);\n  return;\n}\n\n",
            "current_name": "free_and_print_error_message_00108466",
            "entrypoint": "0x00108466",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108466": "free_and_print_error_message_00108466",
                "free": "release_memory",
                "param_7": "memory_to_free",
                "print_error_message_001126c0": "print_error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010847a": {
            "additional_data": {
                "FUNC_00116490": {
                    "1": "execute_sub_function",
                    "2": "execute_initialization",
                    "6": "initialize_data"
                },
                "FUN_0010847a": {
                    "1": "initialize_and_execute",
                    "2": "initialize_program",
                    "3": "initialize",
                    "4": "initialize_application",
                    "7": "execute_initialization",
                    "8": "initialize_system"
                }
            },
            "called": [
                "FUN_00116490"
            ],
            "calling": [
                "FUN_001086af"
            ],
            "code": "\nvoid initialize_system_0010847a(void)\n\n{\n  process_build_attribute_notes_00116490();\n  return;\n}\n\n",
            "code_backup": "\nvoid FUN_0010847a(void)\n\n{\n  FUNC_00116490();\n  return;\n}\n\n",
            "current_name": "initialize_system_0010847a",
            "entrypoint": "0x0010847a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010847a": "initialize_system_0010847a"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001086af": {
            "additional_data": {
                "DAT_00127a40": {
                    "1": "dat_00127a40"
                },
                "FUN_001086af": {
                    "1": "process_and_combine_build_attributes",
                    "2": "process_build_attributes",
                    "22": "process_build_attribute_notes"
                },
                "PTR_FUN_001086af": {
                    "1": "ptr_process_and_combine_build_attributes"
                },
                "PTR_bfd_set_error": {
                    "1": "ptr_bfd_set_error"
                },
                "PTR_dcgettext": {
                    "1": "ptr_dcgettext"
                },
                "PTR_free": {
                    "1": "ptr_free"
                },
                "PTR_print_error_message_001126c0": {
                    "1": "ptr_print_error_message_001126c0"
                },
                "PTR_qsort": {
                    "1": "ptr_qsort"
                },
                "PTR_xmalloc": {
                    "1": "ptr_xmalloc"
                },
                "__nmemb": {
                    "1": "temp_buffer_size",
                    "2": "nmemb",
                    "4": "num_records"
                },
                "__ptr": {
                    "1": "allocated_memory",
                    "2": "temp_buffer",
                    "3": "ptr",
                    "5": "buffer"
                },
                "bVar1": {
                    "1": "is_version_note"
                },
                "bVar2": {
                    "1": "is_attribute_note"
                },
                "bVar22": {
                    "1": "temp15",
                    "2": "flag",
                    "3": "byte_var"
                },
                "bVar3": {
                    "1": "is_note_at_end"
                },
                "bVar4": {
                    "1": "var_17",
                    "2": "condition",
                    "4": "flag"
                },
                "cVar17": {
                    "1": "temp_char",
                    "4": "char_var"
                },
                "compare_memory_0011a1b0": {
                    "1": "compare_records"
                },
                "compare_records_0011a250": {
                    "1": "compare_records"
                },
                "dcgettext": {
                    "1": "get_translation"
                },
                "free": {
                    "1": "free_memory"
                },
                "iVar1": {
                    "1": "error"
                },
                "iVar2": {
                    "1": "compare_result"
                },
                "iVar23": {
                    "1": "loop_index",
                    "2": "counter",
                    "8": "loop_counter"
                },
                "iVar3": {
                    "1": "processed_count"
                },
                "iVar6": {
                    "1": "var10",
                    "2": "index",
                    "4": "memcmp_result"
                },
                "in_RCX": {
                    "1": "rcx",
                    "2": "input_value2",
                    "4": "param_1"
                },
                "in_stack_00000030": {
                    "1": "output_ptr",
                    "2": "stack_var1",
                    "4": "output_buffer"
                },
                "in_stack_00000038": {
                    "1": "option",
                    "2": "stack_var2"
                },
                "lVar7": {
                    "1": "message_length",
                    "2": "length",
                    "7": "error_message"
                },
                "memcmp": {
                    "1": "compare_memory"
                },
                "param_10": {
                    "1": "record_array_size",
                    "2": "output_value",
                    "3": "buffer_size",
                    "6": "param_10"
                },
                "param_11": {
                    "1": "record_array_original",
                    "2": "record_array",
                    "3": "param_11",
                    "5": "records"
                },
                "param_13": {
                    "1": "flags",
                    "2": "note_version",
                    "5": "param_13"
                },
                "param_14": {
                    "1": "program_version",
                    "4": "param_14"
                },
                "param_7": {
                    "1": "input_value1",
                    "2": "input",
                    "3": "input_value",
                    "4": "param_7",
                    "5": "in_rcx"
                },
                "param_8": {
                    "1": "r8",
                    "4": "param_8"
                },
                "param_9": {
                    "1": "note_data",
                    "2": "version",
                    "6": "param_9"
                },
                "print_error_message": {
                    "1": "print_error_message"
                },
                "print_error_message_001126c0": {
                    "1": "print_error_message"
                },
                "process_build_attribute_notes_00116490": {
                    "1": "process_attribute_notes"
                },
                "process_records_00116852": {
                    "1": "update_records"
                },
                "puVar10": {
                    "1": "ptr_var10"
                },
                "puVar11": {
                    "1": "ptr_var11"
                },
                "puVar12": {
                    "1": "ptr_var12"
                },
                "puVar13": {
                    "1": "ptr_var13"
                },
                "puVar14": {
                    "1": "ptr_var14"
                },
                "puVar15": {
                    "1": "pointer2",
                    "2": "current_note",
                    "6": "current_record"
                },
                "puVar16": {
                    "1": "dest_ptr"
                },
                "puVar17": {
                    "1": "record_desc_end"
                },
                "puVar18": {
                    "1": "ptr_18"
                },
                "puVar19": {
                    "1": "var29"
                },
                "puVar20": {
                    "1": "ptr_var20"
                },
                "puVar21": {
                    "1": "temp_ptr4"
                },
                "puVar22": {
                    "1": "result_msg"
                },
                "puVar23": {
                    "1": "ptr_var23"
                },
                "puVar24": {
                    "1": "version_msg"
                },
                "puVar25": {
                    "1": "ptr_var25"
                },
                "puVar26": {
                    "1": "ptr_var26"
                },
                "puVar27": {
                    "1": "ptr_var27"
                },
                "puVar28": {
                    "1": "ptr_var28"
                },
                "puVar29": {
                    "1": "ptr_var29"
                },
                "puVar30": {
                    "1": "ptr_var30"
                },
                "puVar31": {
                    "1": "ptr_var31"
                },
                "puVar32": {
                    "1": "ptr_var32"
                },
                "puVar33": {
                    "1": "ptr_var33"
                },
                "puVar34": {
                    "1": "ptr_var34"
                },
                "puVar35": {
                    "1": "ptr_var35"
                },
                "puVar36": {
                    "1": "ptr_var36"
                },
                "puVar37": {
                    "1": "ptr_var37"
                },
                "puVar38": {
                    "1": "ptr_var38"
                },
                "puVar39": {
                    "1": "ptr_var39"
                },
                "puVar5": {
                    "1": "ptr5",
                    "2": "pointer1",
                    "5": "ptr"
                },
                "puVar7": {
                    "1": "ptr_var7"
                },
                "puVar8": {
                    "1": "ptr_var8"
                },
                "puVar9": {
                    "1": "ptr_var9"
                },
                "qsort": {
                    "1": "sort_records"
                },
                "temp8": {
                    "1": "temp8"
                },
                "temp9": {
                    "1": "temp9"
                },
                "uVar1": {
                    "1": "num_records_processed",
                    "12": "result"
                },
                "uVar10": {
                    "1": "var10",
                    "2": "max_value",
                    "3": "description_size",
                    "4": "note_size"
                },
                "uVar11": {
                    "1": "temp_var11",
                    "2": "current_size",
                    "3": "note_offset"
                },
                "uVar12": {
                    "1": "unaff_rbp",
                    "2": "current_offset"
                },
                "uVar13": {
                    "1": "bp",
                    "2": "start_address"
                },
                "uVar14": {
                    "1": "temp_var_14",
                    "2": "current_note"
                },
                "uVar15": {
                    "1": "temp_var_15"
                },
                "uVar16": {
                    "1": "attr_desc"
                },
                "uVar17": {
                    "1": "description_size"
                },
                "uVar18": {
                    "1": "temp_offset"
                },
                "uVar19": {
                    "1": "r8"
                },
                "uVar2": {
                    "1": "max_record_size",
                    "2": "temp1",
                    "3": "var2"
                },
                "uVar20": {
                    "1": "unaff_rcx",
                    "2": "note_type"
                },
                "uVar21": {
                    "1": "compare_result"
                },
                "uVar22": {
                    "1": "temp_var_22"
                },
                "uVar23": {
                    "1": "ulong_var23",
                    "2": "i"
                },
                "uVar24": {
                    "1": "ulong_var24"
                },
                "uVar25": {
                    "1": "temp_var_25"
                },
                "uVar26": {
                    "1": "ulong_var26"
                },
                "uVar27": {
                    "1": "ulong_var27"
                },
                "uVar28": {
                    "1": "temp_var_28"
                },
                "uVar29": {
                    "1": "temp_var_29"
                },
                "uVar3": {
                    "1": "temp_var_3",
                    "2": "temp2",
                    "3": "var3"
                },
                "uVar30": {
                    "1": "ulong_var30"
                },
                "uVar31": {
                    "1": "ulong_var31"
                },
                "uVar32": {
                    "1": "record_attr_note_addr"
                },
                "uVar33": {
                    "1": "temp_var_33"
                },
                "uVar34": {
                    "1": "ulong_var34"
                },
                "uVar35": {
                    "1": "temp_var_35"
                },
                "uVar36": {
                    "1": "record_attr_note_end"
                },
                "uVar37": {
                    "1": "temp_var_37"
                },
                "uVar38": {
                    "1": "ulong_var38"
                },
                "uVar39": {
                    "1": "ulong_var39"
                },
                "uVar4": {
                    "1": "rcx"
                },
                "uVar40": {
                    "1": "temp_var_40"
                },
                "uVar41": {
                    "1": "temp_var_41"
                },
                "uVar42": {
                    "1": "temp_var_42"
                },
                "uVar43": {
                    "1": "temp_var_43"
                },
                "uVar44": {
                    "1": "temp_var_44"
                },
                "uVar45": {
                    "1": "temp_var_45"
                },
                "uVar46": {
                    "1": "temp_var_46"
                },
                "uVar47": {
                    "1": "temp_var_47"
                },
                "uVar48": {
                    "1": "temp_var_48"
                },
                "uVar49": {
                    "1": "temp_var_49"
                },
                "uVar5": {
                    "1": "r8"
                },
                "uVar50": {
                    "1": "temp_var_50"
                },
                "uVar51": {
                    "1": "temp_var_51"
                },
                "uVar6": {
                    "1": "note_description"
                },
                "uVar7": {
                    "1": "ulong_var7"
                },
                "uVar8": {
                    "1": "error_message_format",
                    "2": "warning_message",
                    "3": "var8"
                },
                "uVar9": {
                    "1": "var13",
                    "2": "value1",
                    "3": "note_type"
                },
                "unaff_R04": {
                    "1": "unaff_r04"
                },
                "unaff_R12": {
                    "1": "note_ptr",
                    "2": "record_ptr",
                    "3": "record_array",
                    "5": "records"
                },
                "unaff_R13": {
                    "1": "temp9",
                    "2": "r13",
                    "3": "record_count"
                },
                "unaff_R14": {
                    "1": "data",
                    "2": "function_pointers"
                },
                "unaff_R15": {
                    "1": "pointer9"
                },
                "unaff_RBP": {
                    "1": "min_note_size",
                    "2": "note_type"
                },
                "unaff_RBX": {
                    "1": "notes_data_size",
                    "2": "num_records",
                    "3": "remaining_size"
                },
                "unaff_RBx": {
                    "1": "remaining_records"
                },
                "unaff_RCX": {
                    "1": "note_size"
                },
                "unaff_retaddr": {
                    "1": "temp_var_56",
                    "2": "retaddr",
                    "3": "default_version",
                    "4": "return_address"
                },
                "var12": {
                    "1": "var12"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "qsort",
                "FUN_0011a1b0",
                "FUN_001126c0",
                "FUN_00116490",
                "FUN_00119ed0",
                "dcgettext",
                "FUN_0010847a",
                "bfd_set_error"
            ],
            "calling": [
                "FUN_00116490"
            ],
            "code": "\nulong process_build_attribute_notes_001086af(void)\n\n{\n  ulong result;\n  undefined8 var2;\n  undefined8 var3;\n  bool flag;\n  ulong *ptr;\n  int memcmp_result;\n  long error_message;\n  undefined8 var8;\n  ulong note_type;\n  ulong note_size;\n  ulong note_offset;\n  undefined *buffer;\n  ulong param_1;\n  ulong current_offset;\n  ulong start_address;\n  ulong note_type;\n  ulong remaining_size;\n  ulong note_type;\n  ulong *current_record;\n  undefined *ptr_16;\n  char char_var;\n  undefined *ptr_18;\n  undefined *ptr_19;\n  ulong *records;\n  ulong record_count;\n  ulong note_type;\n  size_t num_records;\n  undefined8 *r14;\n  ulong *record_ptr;\n  byte byte_var;\n  int loop_counter;\n  ulong return_address;\n  ulong in_rcx;\n  uint param_8;\n  ulong param_9;\n  ulong param_10;\n  ulong *records;\n  undefined *output_buffer;\n  uint stack_var2;\n  uint param_13;\n  undefined8 *param_14;\n  \n  byte_var = 0;\n  in_rcx = param_1;\n  note_type = (**(code **)(r14[1] + 0x40))();\n  note_size = (**(code **)(r14[1] + 0x40))(records[4] + 4);\nLAB_0011662a:\n  start_address = note_type;\n  note_type = record_count;\n  if (note_size < note_type) {\n    note_type = note_size;\n  }\n  do {\n    note_offset = in_rcx;\n    current_offset = in_rcx;\n    current_record = records;\n    if (records[2] == 0x100) {\n      if (note_type == 0) {\n        note_type = return_address;\n      }\n      note_type = *records;\n      records[7] = note_type;\n      note_type = start_address;\n      record_count = note_size;\n      return_address = note_type;\n      if (note_size == 0) goto LAB_001164af;\n    }\n    else {\n      if (note_type == 0) {\n        note_type = param_9;\n      }\n      note_type = *records;\n      records[7] = note_type;\n      note_type = note_size;\n      record_count = note_type;\n      param_9 = note_type;\n      if (note_size == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    current_record[8] = note_size;\n    if (*(char *)((current_record[3] - 1) + note_type) != '\\0') {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    records = current_record + 9;\n    if (remaining_size < 0xc) {\n      if (remaining_size != 0) {\n        error_message = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((stack_var2 | param_13 | param_8) != 0) {\n        if (((param_13 | param_8) == 0) || (stack_var2 == 0)) {\n          if (param_13 == 0) {\n            if (param_8 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param_8 == 0) goto LAB_001166f8;\n        }\n        error_message = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      var2 = *r14;\n      var3 = *param_14;\n      var8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(var8,var2,var3);\nLAB_0011671b:\n      num_records = ((long)records - (long)records >> 3) * -0x71c71c71c71c71c7;\n      qsort(records,num_records,0x48,compare_records);\n      current_record = records;\n      goto LAB_001167f9;\n    }\n    note_size = (**(code **)(r14[1] + 0x40))(current_offset);\n    *records = note_size;\n    note_size = (**(code **)(r14[1] + 0x40))(current_offset + 4);\n    current_record[10] = note_size;\n    note_type = (**(code **)(r14[1] + 0x40))(current_offset + 8);\n    note_type = *records;\n    current_record[0xb] = note_type;\n    note_size = current_record[10];\n    start_address = note_type + 3 & 0xfffffffffffffffc;\n    current_record[0xf] = start_address;\n    if (note_size != (note_size + 3 & 0xfffffffffffffffc)) {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < note_type - 0x100) {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    note_offset = start_address + note_size + 0xc;\n    if (remaining_size < note_offset) {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (note_type < 2) {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    current_record[0xc] = current_offset + 0xc;\n    result = current_offset + 0xc + start_address;\n    current_record[0xd] = result;\n    remaining_size = remaining_size + (-0xc - (start_address + note_size));\n    note_offset = current_offset + note_offset;\n    if (note_type != 2) {\n      if (*(char *)(current_offset + 0xc) == '$') {\n        if ((*(char *)(current_offset + 0xd) == '\\x01') && (*(char *)(current_offset + 0xe) == '1')) {\n          note_size = process_attribute_notes();\n          return note_size;\n        }\n      }\n      else if ((((4 < note_type) && (*(char *)(current_offset + 0xc) == 'G')) &&\n               (*(char *)(current_offset + 0xd) == 'A')) &&\n              ((*(char *)(current_offset + 0xe) == '$' && (*(char *)(current_offset + 0xf) == '\\x01')))) {\n        if (*(char *)(current_offset + 0x10) == '2') {\n          note_size = process_attribute_notes();\n          return note_size;\n        }\n        if (*(char *)(current_offset + 0x10) == '3') {\n          note_size = process_attribute_notes();\n          return note_size;\n        }\n        error_message = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    start_address = note_type;\n    note_type = record_count;\n    if (note_size == 0) {\n      if (note_type == 0x100) {\n        current_record[0x10] = return_address;\nLAB_001164af:\n        current_offset = note_offset;\n        note_size = note_type;\n        current_record = records;\n        record_count = note_type;\n      }\n      else {\n        current_record[0x10] = param_9;\nLAB_0011669e:\n        note_type = start_address;\n        current_offset = note_offset;\n        note_size = start_address;\n        current_record = records;\n        record_count = note_type;\n      }\n      goto LAB_001164bb;\n    }\n    if (note_size == 0x10) break;\n    if (0x10 < note_size) {\nLAB_00116679:\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (error_message != 0) {\n        bfd_set_error(0x11);\n        print_error_message(0,r14,param_14,error_message);\n        DAT_00127a40 = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (note_size != 4) {\n      if (note_size == 8) {\n        note_size = process_build_attribute_notes_001086af();\n        return note_size;\n      }\n      goto LAB_00116679;\n    }\n    in_rcx = note_offset;\n    note_type = (**(code **)(r14[1] + 0x40))();\n    note_size = 0xffffffffffffffff;\n  } while( true );\n  in_rcx = note_offset;\n  note_type = (**(code **)(r14[1] + 0x28))(result);\n  note_size = (**(code **)(r14[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (records <= current_record) {\n    qsort(records,num_records,0x48,compare_records);\n    buffer = (undefined *)xmalloc(param_10 * 2);\n    in_rcx = 0;\n    param_9 = 0;\n    ptr_19 = buffer;\n    for (current_record = records; current_record < records; current_record = current_record + 9) {\n      if (current_record[2] != 0) {\n        ptr_18 = ptr_19 + 4;\n        ptr_16 = ptr_19 + 0xc;\n        if ((current_record[7] == param_9) && (current_record[8] == in_rcx)) {\n          (**(code **)(r14[1] + 0x50))(*current_record,ptr_19);\n          (**(code **)(r14[1] + 0x50))(0,ptr_18);\n          (**(code **)(r14[1] + 0x50))(current_record[2],ptr_19 + 8);\n          note_type = current_record[6];\n          note_size = *current_record;\n          ptr_19 = (undefined *)current_record[3];\n          ptr_18 = ptr_16;\n          for (start_address = note_size; start_address != 0; start_address = start_address - 1) {\n            *ptr_18 = *ptr_19;\n            ptr_19 = ptr_19 + (ulong)byte_var * -2 + 1;\n            ptr_18 = ptr_18 + (ulong)byte_var * -2 + 1;\n          }\n          if (note_size < note_type) {\n            for (error_message = note_type - note_size; error_message != 0; error_message = error_message + -1) {\n              *ptr_18 = 0;\n              ptr_18 = ptr_18 + (ulong)byte_var * -2 + 1;\n            }\n          }\n          ptr_19 = ptr_16 + note_type;\n        }\n        else {\n          (**(code **)(r14[1] + 0x50))();\n          if (*(int *)(r14[1] + 8) == 5) {\n            char_var = (*(char *)(r14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            char_var = '\\b';\n          }\n          (**(code **)(r14[1] + 0x50))(char_var,ptr_18);\n          (**(code **)(r14[1] + 0x50))(current_record[2],ptr_19 + 8);\n          note_size = *current_record;\n          ptr_19 = (undefined *)current_record[3];\n          ptr_18 = ptr_16;\n          for (note_type = note_size; note_type != 0; note_type = note_type - 1) {\n            *ptr_18 = *ptr_19;\n            ptr_19 = ptr_19 + (ulong)byte_var * -2 + 1;\n            ptr_18 = ptr_18 + (ulong)byte_var * -2 + 1;\n          }\n          note_type = current_record[6];\n          if (note_size < note_type) {\n            for (error_message = note_type - note_size; error_message != 0; error_message = error_message + -1) {\n              *ptr_18 = 0;\n              ptr_18 = ptr_18 + (ulong)byte_var * -2 + 1;\n            }\n          }\n          error_message = r14[1];\n          ptr_16 = ptr_16 + note_type;\n          ptr_19 = ptr_16 + 8;\n          if ((*(int *)(error_message + 8) == 5) && (*(char *)(r14[0x22] + 4) == '\\x02')) {\n            (**(code **)(error_message + 0x38))(current_record[7],ptr_16);\n            (**(code **)(r14[1] + 0x38))(current_record[8],ptr_19);\n            ptr_19 = ptr_16 + 0x10;\n          }\n          else {\n            (**(code **)(error_message + 0x50))(current_record[7],ptr_16);\n            (**(code **)(r14[1] + 0x50))(current_record[8],ptr_16 + 4);\n          }\n          param_9 = current_record[7];\n          in_rcx = current_record[8];\n        }\n      }\n    }\n    note_type = (long)ptr_19 - (long)buffer;\n    note_size = note_type;\n    ptr_19 = buffer;\n    if (note_type < param_10) {\n      for (; param_10 = note_type, note_size != 0; note_size = note_size - 1) {\n        *output_buffer = *ptr_19;\n        ptr_19 = ptr_19 + (ulong)byte_var * -2 + 1;\n        output_buffer = output_buffer + (ulong)byte_var * -2 + 1;\n      }\n    }\n    free_memory(buffer);\nLAB_001166f8:\n    free_memory(records);\n    return param_10;\n  }\n  if (current_record[2] != 0) {\n    note_size = current_record[7];\n    note_type = current_record[8];\n    start_address = current_record[2];\n    record_ptr = current_record;\n    loop_counter = 0;\n    if (note_size == note_type) {\n      current_record[2] = 0;\n    }\n    else {\n      do {\n        do {\n          ptr = record_ptr;\n          record_ptr = ptr + -9;\n          if (record_ptr < records) goto LAB_001167f5;\n          note_type = ptr[-7];\n        } while (note_type == 0);\n        in_rcx = start_address;\n        if ((*record_ptr != *current_record) ||\n           (memcmp_result = compare_memory((void *)ptr[-6],(void *)current_record[3],*current_record), memcmp_result != 0)) break;\n        start_address = ptr[-2];\n        note_offset = ptr[-1];\n        if (note_size == start_address) {\n          if (note_type == note_offset) {\n            current_record[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (note_type <= note_offset) {\n            current_record[2] = 0;\n            break;\n          }\n          if (note_offset < note_size) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < note_offset) || (note_size <= (note_offset + 0xf & 0xfffffffffffffff0)))\n            goto update_records;\n          }\nLAB_001167b8:\n          if ((in_rcx == 0x101) == (note_type == 0x101)) {\n            if (note_offset <= note_type) {\n              note_offset = note_type;\n            }\n            if (start_address < note_size) {\n              note_size = start_address;\n            }\n            ptr[-1] = note_offset;\n            ptr[-2] = note_size;\n            current_record[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (start_address <= note_size) goto LAB_001167a6;\n          if (note_offset < note_size) goto LAB_0010852c;\n          if (note_type < note_size) {\n            if ((0xfffffffffffffff0 < note_type) || (start_address <= (note_type + 0xf & 0xfffffffffffffff0)))\n            goto update_records;\n            goto LAB_001167b8;\n          }\n          if (note_type != note_offset) goto LAB_001167b8;\n        }\nupdate_records:\n        flag = loop_counter < 0x11;\n        start_address = in_rcx;\n        loop_counter = loop_counter + 1;\n      } while (flag);\n    }\n  }\nLAB_001167f5:\n  current_record = current_record + 9;\n  goto LAB_001167f9;\n}\n\n",
            "current_name": "process_build_attribute_notes_001086af",
            "entrypoint": "0x001086af",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001086af": "process_build_attribute_notes_001086af",
                "__nmemb": "num_records",
                "__ptr": "buffer",
                "bVar2": "is_attribute_note",
                "bVar22": "byte_var",
                "bVar4": "flag",
                "cVar17": "char_var",
                "compare_memory_0011a1b0": "compare_records",
                "compare_records_0011a250": "compare_records",
                "dcgettext": "get_translation",
                "free": "free_memory",
                "iVar2": "compare_result",
                "iVar23": "loop_counter",
                "iVar6": "memcmp_result",
                "in_RCX": "param_1",
                "in_stack_00000030": "output_buffer",
                "in_stack_00000038": "stack_var2",
                "lVar7": "error_message",
                "memcmp": "compare_memory",
                "param_11": "records",
                "param_7": "in_rcx",
                "print_error_message_001126c0": "print_error_message",
                "process_build_attribute_notes_00116490": "process_attribute_notes",
                "process_records_00116852": "update_records",
                "puVar15": "current_record",
                "puVar16": "ptr_16",
                "puVar18": "ptr_18",
                "puVar19": "ptr_19",
                "puVar21": "record_ptr",
                "puVar5": "ptr",
                "qsort": "sort_records",
                "uVar1": "result",
                "uVar10": "note_size",
                "uVar11": "note_offset",
                "uVar12": "current_offset",
                "uVar13": "start_address",
                "uVar14": "note_type",
                "uVar15": "r14",
                "uVar16": "r15",
                "uVar18": "rdx",
                "uVar19": "r8",
                "uVar2": "var2",
                "uVar20": "note_type",
                "uVar21": "r10",
                "uVar3": "var3",
                "uVar5": "r8",
                "uVar8": "var8",
                "uVar9": "note_type",
                "unaff_R12": "records",
                "unaff_R13": "record_count",
                "unaff_R14": "r14",
                "unaff_RBP": "note_type",
                "unaff_RBX": "remaining_size",
                "unaff_retaddr": "return_address",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010870e": {
            "additional_data": {
                "(long)(puVar1 + 1)": {
                    "1": "incremented_pointer_value"
                },
                "*param_3": {
                    "1": "updated_pointer"
                },
                "*ptr": {
                    "1": "updated_array_value"
                },
                "*puVar1": {
                    "1": "dereferenced_pointer_to_value",
                    "2": "value_at_current_pointer"
                },
                "FUN_0010870e": {
                    "1": "update_and_increment_long_pointer",
                    "2": "update_pointer",
                    "3": "store_parameter_value",
                    "4": "update_pointer_and_value"
                },
                "param_1": {
                    "1": "input_value",
                    "2": "new_value",
                    "3": "param_1"
                },
                "param_2": {
                    "1": "data",
                    "13": "new_value",
                    "2": "value_to_copy",
                    "3": "param2",
                    "4": "value"
                },
                "param_3": {
                    "1": "pointer_to_update",
                    "2": "pointer_list",
                    "3": "memory_pointer",
                    "5": "pointer"
                },
                "puVar1": {
                    "1": "memory_address",
                    "2": "pointer",
                    "4": "pointer_to_value",
                    "6": "current_pointer"
                }
            },
            "called": [],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid update_pointer_and_value_0010870e(undefined8 param1,undefined8 new_value,long *pointer)\n\n{\n  undefined8 *current_pointer;\n  \n  current_pointer = (undefined8 *)*pointer;\n  *current_pointer = new_value;\n  *pointer = (long)(current_pointer + 1);\n  return;\n}\n\n",
            "current_name": "update_pointer_and_value_0010870e",
            "entrypoint": "0x0010870e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010870e": "update_pointer_and_value_0010870e",
                "param_1": "param1",
                "param_2": "new_value",
                "param_3": "pointer",
                "puVar1": "current_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010871c": {
            "additional_data": {
                "FUN_0010871c": {
                    "1": "print_error_details",
                    "23": "print_error_message",
                    "6": "print_error"
                },
                "_stderr": {
                    "1": "standard_error"
                },
                "_stdout": {
                    "1": "standard_output"
                },
                "uVar1": {
                    "1": "error_description",
                    "2": "error_msg",
                    "21": "error_message",
                    "3": "error_string"
                },
                "unaff_RBX": {
                    "1": "error_cause",
                    "11": "error_flag",
                    "16": "error_code"
                },
                "unaff_retaddr": {
                    "31": "return_address"
                }
            },
            "called": [
                "dcgettext",
                "fflush",
                "fprintf"
            ],
            "calling": [
                "FUN_0011a110"
            ],
            "code": "\n\n\nvoid print_error_message_0010871c(void)\n\n{\n  undefined8 error_message;\n  long error_code;\n  undefined8 return_address;\n  \n  error_message = dcgettext(0,\"cause of error unknown\",5);\n  fflush(standard_output);\n  if (error_code != 0) {\n    fprintf(standard_error,\"%s: %s: %s\\n\",DAT_00127600);\n    return;\n  }\n  fprintf(standard_error,\"%s: %s\\n\",DAT_00127600,error_message,return_address);\n  return;\n}\n\n",
            "current_name": "print_error_message_0010871c",
            "entrypoint": "0x0010871c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "uVar1": "error_message",
                "unaff_RBX": "error_code",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010875d": {
            "additional_data": {
                "FUN_0010875d": {
                    "1": "compare_and_sort",
                    "27": "compare_records"
                },
                "iVar3": {
                    "2": "comparison_result",
                    "29": "result"
                },
                "lVar1": {
                    "1": "record1_pointer",
                    "2": "ptr_record1",
                    "4": "record1_value",
                    "5": "value_1",
                    "7": "value1"
                },
                "lVar2": {
                    "1": "address_record2",
                    "2": "ptr_record2",
                    "4": "record2_value",
                    "5": "value_2",
                    "7": "value2"
                },
                "param_1": {
                    "1": "input1",
                    "23": "record1",
                    "5": "record_1"
                },
                "param_2": {
                    "1": "input2",
                    "23": "record2",
                    "5": "record_2"
                },
                "uVar4": {
                    "1": "value2_ptr_offset",
                    "2": "flags",
                    "21": "flag",
                    "3": "record2_flag"
                }
            },
            "called": [],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nint compare_records_0010875d(long *record1,long *record2)\n\n{\n  long value1;\n  long value2;\n  int result;\n  uint flag;\n  \n  value1 = *record1;\n  value2 = *record2;\n  flag = *(uint *)(value2 + 0x24) & 0x102;\n  if ((*(uint *)(value1 + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(value1 + 0x38) <= *(ulong *)(value2 + 0x38)) {\n    result = -1;\n    if (*(ulong *)(value2 + 0x38) <= *(ulong *)(value1 + 0x38)) {\n      if (*(ulong *)(value2 + 0x40) < *(ulong *)(value1 + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(value2 + 0x40) <= *(ulong *)(value1 + 0x40)) {\n          result = 1;\n          if (*(uint *)(value1 + 0x18) <= *(uint *)(value2 + 0x18)) {\n            return -(uint)(*(uint *)(value1 + 0x18) < *(uint *)(value2 + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "compare_records_0010875d",
            "entrypoint": "0x0010875d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "iVar3": "result",
                "lVar1": "value1",
                "lVar2": "value2",
                "param_1": "record1",
                "param_2": "record2",
                "uVar4": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001087da": {
            "additional_data": {
                "FUN_001087da": {
                    "1": "check_if_rax_equal_to100",
                    "11": "check_rax_value",
                    "2": "check_if_rax_equals100",
                    "3": "check_value"
                },
                "auVar1": {
                    "1": "comparison_result",
                    "21": "result",
                    "3": "return_value",
                    "4": "result_array"
                },
                "in_RAX": {
                    "1": "input_param",
                    "10": "value",
                    "11": "input_value",
                    "2": "memory_address",
                    "4": "value_to_check"
                },
                "unaff_retaddr": {
                    "29": "return_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_0011a1b0"
            ],
            "code": "\nundefined  [16] check_rax_value_001087da(void)\n\n{\n  long input_value;\n  undefined result [16];\n  undefined8 return_address;\n  \n  result._1_7_ = 0;\n  result[0] = input_value == 0x100;\n  result._8_8_ = return_address;\n  return result;\n}\n\n",
            "current_name": "check_rax_value_001087da",
            "entrypoint": "0x001087da",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001087da": "check_rax_value_001087da",
                "auVar1": "result",
                "in_RAX": "input_value",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001087fd": {
            "additional_data": {
                "0": {
                    "1": ""
                },
                "DAT_": {
                    "1": "<unchanged>"
                },
                "FUN_001087fd": {
                    "1": "initialize_program",
                    "2": "clear_memory",
                    "5": "get_zero",
                    "6": "get_default_value",
                    "9": "initialize"
                },
                "PTR_": {
                    "1": "<unchanged>"
                },
                "return": {
                    "1": "",
                    "2": "result"
                },
                "undefined8": {
                    "1": "unsigned_long",
                    "2": "uint64_t",
                    "5": "void"
                },
                "void": {
                    "1": ""
                }
            },
            "called": [],
            "calling": [
                "FUN_0011a250"
            ],
            "code": "\nvoid initialize_001087fd(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_001087fd",
            "entrypoint": "0x001087fd",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001087fd": "initialize_001087fd",
                "return": "result",
                "undefined8": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108800": {
            "additional_data": {
                "*param_1": {
                    "1": "ptr_string",
                    "2": "string",
                    "4": "str"
                },
                "FUN_00108800": {
                    "1": "initialize_hash",
                    "23": "hash_string",
                    "4": "calculate_hash"
                },
                "htab_hash_string": {
                    "1": "hash_string"
                },
                "param_1": {
                    "1": "hash_table",
                    "11": "input_string",
                    "2": "string_ptr",
                    "3": "string",
                    "5": "str"
                }
            },
            "called": [
                "htab_hash_string"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid hash_string_00108800(undefined8 *input_string)\n\n{\n  htab_hash_string_00108800(*input_string);\n  return;\n}\n\n",
            "current_name": "hash_string_00108800",
            "entrypoint": "0x00108800",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108800": "hash_string_00108800",
                "htab_hash_string": "compute_hash",
                "param_1": "input_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108808": {
            "additional_data": {
                "FUN_00108808": {
                    "1": "handle_section_not_found",
                    "14": "print_error_if_section_not_found",
                    "2": "print_error_for_missing_section",
                    "6": "print_error_and_exit"
                },
                "uVar1": {
                    "1": "section_name",
                    "2": "section_pointer",
                    "25": "section_address"
                },
                "uVar2": {
                    "1": "error_msg",
                    "29": "error_message"
                },
                "unaff_RBP": {
                    "1": "stack_base",
                    "23": "base_pointer"
                }
            },
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "calling": [
                "FUN_0011a2e0"
            ],
            "code": "\nvoid print_error_if_section_not_found_00108808(void)\n\n{\n  undefined8 section_address;\n  undefined8 error_message;\n  long base_pointer;\n  \n  section_address = *(undefined8 *)(base_pointer + 0x20);\n  error_message = dcgettext(0,\"Section %s not found\",5);\n                    \n  print_error_and_exit_00119dd0(error_message,section_address);\n}\n\n",
            "current_name": "print_error_if_section_not_found_00108808",
            "entrypoint": "0x00108808",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108808": "print_error_if_section_not_found_00108808",
                "uVar1": "section_address",
                "uVar2": "error_message",
                "unaff_RBP": "base_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010882c": {
            "additional_data": {
                "*piVar1": {
                    "1": "errno"
                },
                "FUN_0010882c": {
                    "1": "print_error_and_set_time",
                    "16": "print_error_message",
                    "2": "print_error_cannot_set_time",
                    "3": "print_error_and_exit"
                },
                "dcgettext": {
                    "1": "get_translated_string",
                    "2": "get_localized_message"
                },
                "piVar1": {
                    "1": "errno_location_pointer",
                    "2": "error_code",
                    "4": "errno_pointer",
                    "7": "errno_ptr",
                    "8": "error_location"
                },
                "print_error_message_00119ed0": {
                    "5": "print_error_message"
                },
                "strerror": {
                    "2": "get_error_message"
                },
                "uVar2": {
                    "2": "translated_message",
                    "22": "error_message",
                    "5": "error_string"
                }
            },
            "called": [
                "strerror",
                "__errno_location",
                "FUN_00119ed0",
                "dcgettext"
            ],
            "calling": [
                "FUN_0011a350"
            ],
            "code": "\nvoid print_error_message_0010882c(void)\n\n{\n  int *error_location;\n  undefined8 error_message;\n  \n  error_location = __errno_location();\n  strerror(*error_location);\n  error_message = dcgettext(0,\"%s: cannot set time: %s\",5);\n  print_error_message_0010882c(error_message);\n  return;\n}\n\n",
            "current_name": "print_error_message_0010882c",
            "entrypoint": "0x0010882c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010882c": "print_error_message_0010882c",
                "dcgettext": "get_localized_message",
                "piVar1": "error_location",
                "print_error_message_00119ed0": "print_error_message",
                "strerror": "get_error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108863": {
            "additional_data": {
                "FUN_00108863": {
                    "1": "destroy_memory",
                    "10": "free_memory_blocks",
                    "2": "deallocate_memory",
                    "6": "clear_memory",
                    "7": "free_memory"
                },
                "puVar1": {
                    "1": "array_pointer",
                    "17": "current_block",
                    "3": "current_ptr",
                    "6": "current_pointer"
                },
                "puVar2": {
                    "1": "next_data_pointer",
                    "17": "next_block",
                    "4": "next_ptr",
                    "6": "next_pointer"
                }
            },
            "called": [
                "free"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid free_memory_blocks_00108863(void)\n\n{\n  undefined4 *current_block;\n  undefined4 *next_block;\n  \n  current_block = (undefined4 *)&DAT_00127740;\n  do {\n    next_block = current_block + 6;\n    free(*(void **)(current_block + 4));\n    *(undefined8 *)(current_block + 4) = 0;\n    current_block = next_block;\n  } while (next_block != &DAT_001278c0);\n  DAT_001278c0 = 0;\n  return;\n}\n\n",
            "current_name": "free_memory_blocks_00108863",
            "entrypoint": "0x00108863",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108863": "free_memory_blocks_00108863",
                "puVar1": "current_block",
                "puVar2": "next_block"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108898": {
            "additional_data": {
                "FUN_00108898": {
                    "1": "compare_string_pointers",
                    "2": "string_compare",
                    "28": "compare_strings"
                },
                "auVar2": {
                    "1": "comparison_output",
                    "12": "result",
                    "2": "comparison_array"
                },
                "iVar1": {
                    "25": "comparison_result",
                    "6": "string_comparison_result"
                },
                "in_RAX": {
                    "1": "input_register",
                    "2": "unused_value",
                    "3": "undefined_value",
                    "8": "return_value"
                },
                "param_1": {
                    "1": "string_pointer1",
                    "2": "string_1",
                    "25": "string1",
                    "3": "str1"
                },
                "param_2": {
                    "1": "string_pointer2",
                    "2": "string_2",
                    "25": "string2",
                    "3": "str2"
                }
            },
            "called": [
                "strcmp"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16] compare_strings_00108898(char **string1,char **string2)\n\n{\n  int comparison_result;\n  undefined8 return_value;\n  undefined result [16];\n  \n  comparison_result = strcmp(*string1,*string2);\n  result._1_7_ = 0;\n  result[0] = comparison_result == 0;\n  result._8_8_ = return_value;\n  return result;\n}\n\n",
            "current_name": "compare_strings_00108898",
            "entrypoint": "0x00108898",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "auVar2": "result",
                "iVar1": "comparison_result",
                "in_RAX": "return_value",
                "param_1": "string1",
                "param_2": "string2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001088ae": {
            "additional_data": {
                "FUN_001088ae": {
                    "1": "deallocate_and_store_value",
                    "16": "update_data",
                    "3": "update_data_and_return_index",
                    "6": "update_data_entry"
                },
                "iVar1": {
                    "1": "updated_data_entry_index",
                    "13": "new_index",
                    "2": "index",
                    "4": "current_index",
                    "5": "updated_index"
                },
                "lVar2": {
                    "1": "data_entry_index",
                    "10": "current_index",
                    "11": "index",
                    "2": "current_entry",
                    "3": "data_index"
                },
                "lVar3": {
                    "1": "index_offset",
                    "14": "offset",
                    "2": "array_index",
                    "3": "current_offset",
                    "6": "data_offset"
                },
                "param_1": {
                    "2": "status",
                    "22": "new_value1",
                    "3": "new_param1",
                    "4": "value1"
                },
                "param_2": {
                    "2": "type",
                    "22": "new_value2",
                    "3": "new_param2",
                    "4": "value2"
                },
                "param_3": {
                    "1": "timestamp",
                    "19": "new_value3",
                    "2": "new_value1",
                    "4": "new_param3"
                },
                "param_4": {
                    "1": "message",
                    "18": "new_value4",
                    "2": "new_string",
                    "4": "new_param4"
                },
                "uVar4": {
                    "1": "duplicate_data",
                    "2": "new_string",
                    "9": "duplicated_value"
                }
            },
            "called": [
                "xstrdup",
                "free"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nulong update_data_001088ae(undefined4 new_value1,undefined4 new_value2,undefined8 new_value3,undefined8 new_value4)\n\n{\n  int new_index;\n  long index;\n  long offset;\n  undefined8 duplicated_value;\n  \n  index = (long)DAT_001278c0;\n  offset = index * 0x18;\n  free((void *)(&DAT_00127750)[index * 3]);\n  *(undefined4 *)(&DAT_00127740 + offset) = new_value1;\n  *(undefined4 *)(&DAT_00127744 + offset) = new_value2;\n  *(undefined8 *)(&DAT_00127748 + offset) = new_value3;\n  duplicated_value = xstrdup(new_value4);\n  (&DAT_00127750)[index * 3] = duplicated_value;\n  new_index = DAT_001278c0 + 1;\n  DAT_001278c0 = new_index % 0x10;\n  return (long)new_index / 0x10 & 0xffffffff;\n}\n\n",
            "current_name": "update_data_001088ae",
            "entrypoint": "0x001088ae",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001088ae": "update_data_001088ae",
                "iVar1": "new_index",
                "lVar2": "index",
                "lVar3": "offset",
                "param_1": "new_value1",
                "param_2": "new_value2",
                "param_3": "new_value3",
                "param_4": "new_value4",
                "uVar4": "duplicated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108916": {
            "additional_data": {
                "DAT_00127600": {
                    "1": "default_file_format"
                },
                "FUN_00108916": {
                    "1": "print_help",
                    "26": "print_usage"
                },
                "dcgettext": {
                    "1": "get_translated_text"
                },
                "exit": {
                    "1": "exit_program"
                },
                "fprintf": {
                    "1": "print_to_file"
                },
                "param_1": {
                    "1": "file_stream",
                    "17": "output_file",
                    "3": "file_ptr",
                    "4": "file",
                    "5": "file_pointer"
                },
                "param_2": {
                    "1": "exit_status",
                    "13": "error_code",
                    "17": "exit_code"
                },
                "pcVar2": {
                    "1": "message_ptr",
                    "16": "message",
                    "2": "localized_text",
                    "4": "localized_string",
                    "5": "text"
                },
                "print_supported_targets_00104a35": {
                    "3": "print_supported_targets"
                },
                "uVar1": {
                    "1": "data",
                    "10": "usage_string",
                    "2": "version_string",
                    "3": "usage_text",
                    "7": "usage_message"
                }
            },
            "called": [
                "FUN_00104a35",
                "dcgettext",
                "fprintf",
                "exit"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid print_usage_00108916(FILE *output_file,int exit_code)\n\n{\n  undefined8 usage_string;\n  char *message;\n  \n  usage_string = DAT_00127600;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(output_file,message,usage_string);\n  message = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(output_file,message);\n  print_supported_targets(DAT_00127600,output_file);\n  if (exit_code == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit_program(exit_code);\n}\n\n",
            "current_name": "print_usage_00108916",
            "entrypoint": "0x00108916",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108916": "print_usage_00108916",
                "dcgettext": "get_translation",
                "exit": "exit_program",
                "fprintf": "print_formatted",
                "param_1": "output_file",
                "param_2": "exit_code",
                "pcVar2": "message",
                "print_supported_targets_00104a35": "print_supported_targets",
                "uVar1": "usage_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108a2a": {
            "additional_data": {
                "FUN_00108a2a": {
                    "1": "print_stripped_output",
                    "24": "print_usage",
                    "3": "print_usage_and_exit"
                },
                "dcgettext": {
                    "1": "get_locale_message"
                },
                "fprintf": {
                    "1": "write_to_output"
                },
                "param_1": {
                    "2": "file_ptr",
                    "24": "output_file",
                    "5": "file"
                },
                "param_2": {
                    "2": "exit_status",
                    "25": "exit_code",
                    "4": "error_code"
                },
                "pcVar2": {
                    "1": "message_ptr",
                    "18": "message",
                    "2": "format_string",
                    "3": "text",
                    "5": "localized_string"
                },
                "print_supported_targets_00104a35": {
                    "2": "print_supported_targets"
                },
                "uVar1": {
                    "1": "header_message",
                    "2": "usage",
                    "3": "version",
                    "4": "usage_message",
                    "5": "version_number",
                    "7": "usage_string"
                }
            },
            "called": [
                "FUN_00104a35",
                "dcgettext",
                "fprintf",
                "exit"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid print_usage_00108a2a(FILE *output_file,int exit_code)\n\n{\n  undefined8 usage_string;\n  char *message;\n  \n  usage_string = DAT_00127600;\n  message = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(output_file,message,usage_string);\n  message = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  print_supported_targets(DAT_00127600,output_file);\n  if (exit_code == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exit_code);\n}\n\n",
            "current_name": "print_usage_00108a2a",
            "entrypoint": "0x00108a2a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108a2a": "print_usage_00108a2a",
                "dcgettext": "get_localized_message",
                "fprintf": "write_to_output",
                "param_1": "output_file",
                "param_2": "exit_code",
                "pcVar2": "message",
                "print_supported_targets_00104a35": "print_supported_targets",
                "uVar1": "usage_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108b3e": {
            "additional_data": {
                "DAT_00127740": {
                    "1": "stab_entry_array"
                },
                "DAT_00127750": {
                    "1": "string_array"
                },
                "DAT_001278c0": {
                    "1": "current_index"
                },
                "FUN_00108b3e": {
                    "1": "print_last_stabs_entries_with_error",
                    "13": "print_stab_entries",
                    "7": "print_stabs_entries",
                    "9": "print_last_stabs_entries"
                },
                "__format": {
                    "1": "error_message_format",
                    "19": "format_string",
                    "2": "message",
                    "6": "format_str"
                },
                "_stderr": {
                    "1": "output_stream",
                    "2": "stderr"
                },
                "bfd_get_stab_name": {
                    "3": "get_stab_name"
                },
                "dcgettext": {
                    "1": "get_text"
                },
                "fprintf": {
                    "1": "print_formatted",
                    "3": "print_to_stderr"
                },
                "fputc": {
                    "3": "put_char_to_stderr"
                },
                "fwrite": {
                    "2": "write_to_stderr",
                    "3": "write_to_file"
                },
                "iVar5": {
                    "1": "iteration_count",
                    "2": "iteration",
                    "3": "count",
                    "4": "loop_counter",
                    "6": "counter",
                    "7": "index"
                },
                "lVar1": {
                    "1": "stab_name_offset",
                    "28": "stab_name"
                },
                "lVar2": {
                    "1": "i_var_index",
                    "17": "index",
                    "3": "loop_index",
                    "4": "i_var5"
                },
                "lVar3": {
                    "1": "stab_index",
                    "2": "stab_entry_offset",
                    "21": "offset",
                    "3": "stab_offset"
                },
                "param_1": {
                    "1": "input1",
                    "24": "param_1",
                    "3": "param1"
                },
                "param_2": {
                    "1": "input2",
                    "24": "param_2",
                    "3": "param2"
                },
                "param_3": {
                    "1": "param_exit_code",
                    "2": "return_value",
                    "22": "param_3",
                    "3": "param3"
                },
                "piVar4": {
                    "1": "stab",
                    "15": "stab_entry",
                    "2": "stab_type",
                    "6": "stab_ptr"
                }
            },
            "called": [
                "fputc",
                "dcgettext",
                "fwrite",
                "fprintf",
                "bfd_get_stab_name"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 print_stab_entries_00108b3e(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  char *format_string;\n  long stab_name;\n  long index;\n  long offset;\n  int *stab_entry;\n  int index;\n  \n  format_string = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(error_stream,format_string);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,error_stream);\n  index = DAT_001278c0;\n  do {\n    index = (long)index;\n    offset = index * 0x18;\n    stab_entry = (int *)(&DAT_00127740 + offset);\n    if ((&DAT_00127750)[index * 3] != 0) {\n      stab_name = bfd_get_stab_name(*stab_entry);\n      if (stab_name == 0) {\n        if (*stab_entry == 0) {\n          fwrite(\"HdrSym\",1,6,error_stream);\n        }\n        else {\n          fprintf(error_stream,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(error_stream,\"%-6s\",stab_name);\n      }\n      fprintf(error_stream,\" %-6d \",(ulong)*(uint *)(&DAT_00127744 + offset));\n      fprintf(error_stream,\"%08lx\",*(undefined8 *)(&DAT_00127748 + offset));\n      if (*stab_entry != 0) {\n        fprintf(error_stream,\" %s\",(&DAT_00127750)[index * 3]);\n      }\n      fputc(10,error_stream);\n    }\n    index = (index + 1) % 0x10;\n  } while (DAT_001278c0 != index);\n  return param_3;\n}\n\n",
            "current_name": "print_stab_entries_00108b3e",
            "entrypoint": "0x00108b3e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108b3e": "print_stab_entries_00108b3e",
                "__format": "format_string",
                "_stderr": "error_stream",
                "bfd_get_stab_name": "get_stab_name",
                "dcgettext": "get_translated_message",
                "fprintf": "print_to_stderr",
                "fputc": "put_char_to_stderr",
                "fwrite": "write_to_file",
                "iVar5": "index",
                "lVar1": "stab_name",
                "lVar2": "index",
                "lVar3": "offset",
                "piVar4": "stab_entry"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108c86": {
            "additional_data": {
                "FUN_00108c86": {
                    "1": "check_and_get_info",
                    "2": "extract_info_from_binary"
                },
                "__s": {
                    "1": "current_position",
                    "3": "current_string",
                    "6": "input_string",
                    "8": "string_ptr"
                },
                "__s1": {
                    "1": "arch_name",
                    "3": "arch_ptr",
                    "4": "architecture_string"
                },
                "bVar8": {
                    "1": "counter",
                    "3": "byte_val",
                    "4": "byte_value",
                    "6": "is_negative",
                    "7": "flag"
                },
                "cVar1": {
                    "1": "is_equal",
                    "16": "comparison_result",
                    "8": "result"
                },
                "iVar2": {
                    "1": "comparison_result_2",
                    "12": "comparison_result",
                    "2": "compare_result",
                    "7": "string_comparison_result"
                },
                "lVar5": {
                    "1": "array_value",
                    "10": "offset",
                    "2": "input_value"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "input_array",
                    "3": "input_string",
                    "5": "input_ptr"
                },
                "puVar4": {
                    "1": "output_ptr",
                    "2": "extracted_info",
                    "3": "extracted_string",
                    "4": "new_string_ptr",
                    "7": "new_string"
                },
                "puVar6": {
                    "1": "new_driver_name",
                    "2": "current_position",
                    "4": "new_string_ptr"
                },
                "sVar3": {
                    "1": "actual_string_length",
                    "2": "length",
                    "22": "string_length"
                },
                "strcmp": {
                    "1": "compare_strings"
                },
                "uVar7": {
                    "1": "result_code",
                    "17": "return_value",
                    "2": "output",
                    "8": "result"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "strlen",
                "xmalloc",
                "strcmp",
                "FUN_00113fb0"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined8 extract_info_from_binary_00108c86(long *input_ptr)\n\n{\n  char comparison_result;\n  int comparison_result;\n  size_t string_length;\n  undefined2 *new_string;\n  long offset;\n  char *string_ptr;\n  char *architecture;\n  undefined2 *new_string_ptr;\n  undefined8 return_value;\n  byte flag;\n  \n  flag = 0;\n  offset = *input_ptr;\n  string_ptr = (char *)(offset + 4);\n  comparison_result = strcmp_00113fb0(string_ptr,&DAT_0011b73b);\n  if (comparison_result == '\\0') {\n    comparison_result = strcmp_00113fb0(string_ptr,\"bsdrv-\");\n    if (comparison_result == '\\0') {\n      comparison_result = strcmp_00113fb0(string_ptr,\"rtdrv-\");\n      if (comparison_result == '\\0') {\n        return 0xffffffff;\n      }\n      string_ptr = (char *)(offset + 6);\n      return_value = 0xc;\n    }\n    else {\n      string_ptr = (char *)(offset + 6);\n      return_value = 0xb;\n    }\n  }\n  else {\n    return_value = 10;\n  }\n  string_length = strlen(string_ptr);\n  new_string = (undefined2 *)xmalloc(string_length + 8);\n  architecture = string_ptr + 4;\n  new_string_ptr = new_string;\n  for (offset = string_length + 1; offset != 0; offset = offset + -1) {\n    *(char *)new_string_ptr = *string_ptr;\n    string_ptr = string_ptr + (ulong)flag * -2 + 1;\n    new_string_ptr = (undefined2 *)((long)new_string_ptr + (ulong)flag * -2 + 1);\n  }\n  *(undefined *)(new_string + 1) = 0x69;\n  *new_string = 0x6570;\n  comparison_result = strcmp(architecture,\"ia32\");\n  if (comparison_result == 0) {\n    *(undefined *)((long)new_string + 7) = 0x36;\n    *(undefined2 *)((long)new_string + 5) = 0x3833;\n  }\n  else {\n    comparison_result = strcmp(architecture,\"x86_64\");\n    if (comparison_result == 0) {\n      *(undefined *)((long)new_string + 7) = 0x2d;\n    }\n    else {\n      comparison_result = strcmp(architecture,\"aarch64\");\n      if (comparison_result == 0) {\n        *(undefined8 *)((long)new_string + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *input_ptr = (long)new_string;\n  return return_value;\n}\n\n",
            "current_name": "extract_info_from_binary_00108c86",
            "entrypoint": "0x00108c86",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108c86": "extract_info_from_binary_00108c86",
                "__s": "string_ptr",
                "__s1": "architecture",
                "bVar8": "flag",
                "cVar1": "comparison_result",
                "iVar2": "comparison_result",
                "lVar5": "offset",
                "param_1": "input_ptr",
                "puVar4": "new_string",
                "puVar6": "new_string_ptr",
                "sVar3": "string_length",
                "strcmp": "compare_strings",
                "uVar7": "return_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108d9a": {
            "additional_data": {
                "*plVar5": {
                    "1": "symbol_entry"
                },
                "DAT_001278e8": {
                    "1": "symbol_map2"
                },
                "DAT_001278f0": {
                    "1": "symbol_table_1"
                },
                "FUN_00108d9a": {
                    "1": "find_and_print_error",
                    "2": "check_redefinition",
                    "22": "check_symbol_redefinition"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "htab_find": {
                    "1": "find_symbol"
                },
                "lVar3": {
                    "1": "symbol_entry_found",
                    "2": "symbol_definition",
                    "5": "symbol_exists",
                    "7": "symbol_found"
                },
                "param_1": {
                    "1": "error_code",
                    "2": "program_name",
                    "3": "file_path",
                    "5": "filename",
                    "7": "file_name"
                },
                "param_2": {
                    "1": "symbol_1",
                    "15": "symbol_name",
                    "2": "symbol",
                    "4": "symbol_name1",
                    "7": "symbol_name_1"
                },
                "param_3": {
                    "1": "symbol2",
                    "11": "target_symbol",
                    "2": "target",
                    "4": "symbol_name2",
                    "7": "symbol_name_2"
                },
                "param_4": {
                    "20": "result",
                    "3": "param_4",
                    "8": "return_value"
                },
                "pcVar2": {
                    "1": "duplicated_symbol_name",
                    "2": "symbol_dup",
                    "3": "duplicate_symbol_name",
                    "8": "symbol_name_copy"
                },
                "plVar5": {
                    "1": "slot_location",
                    "2": "entry_slot",
                    "3": "slot_pointer",
                    "4": "slot",
                    "9": "symbol_slot"
                },
                "ppcVar1": {
                    "1": "symbol_table_entry",
                    "2": "symbol_ptrs",
                    "4": "symbol_list",
                    "5": "symbol_entry",
                    "6": "symbol_pair"
                },
                "print_error_and_exit_00119dd0": {
                    "1": "print_error_and_exit"
                },
                "uVar4": {
                    "1": "error_msg_id",
                    "22": "error_message",
                    "3": "error_msg"
                }
            },
            "called": [
                "xmalloc",
                "dcgettext",
                "FUN_00119dd0",
                "htab_find_slot",
                "strdup",
                "htab_find"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined8 check_symbol_redefinition_00108d9a(undefined8 error_message,char *symbol_name,char *target_symbol,undefined8 result)\n\n{\n  char **symbol_pair;\n  char *symbol_name_copy;\n  long symbol_found;\n  undefined8 error_message;\n  long *symbol_slot;\n  \n  symbol_pair = (char **)xmalloc(0x10);\n  symbol_name_copy = strdup(symbol_name);\n  *symbol_pair = symbol_name_copy;\n  symbol_name_copy = strdup(target_symbol);\n  error_message = DAT_001278f0;\n  symbol_pair[1] = symbol_name_copy;\n  symbol_found = htab_find(error_message,symbol_pair);\n  if (symbol_found != 0) {\n    error_message = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    print_error_and_exit(error_message,error_message,symbol_name);\n  }\n  symbol_found = htab_find(DAT_001278e8,target_symbol);\n  if (symbol_found != 0) {\n    error_message = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    print_error_and_exit(error_message,error_message,target_symbol);\n  }\n  symbol_slot = (long *)htab_find_slot(DAT_001278f0,symbol_pair,1);\n  error_message = DAT_001278e8;\n  *symbol_slot = (long)symbol_pair;\n  symbol_name_copy = symbol_pair[1];\n  symbol_pair = (char **)htab_find_slot(error_message,symbol_name_copy,1);\n  *symbol_pair = symbol_name_copy;\n  return result;\n}\n\n",
            "current_name": "check_symbol_redefinition_00108d9a",
            "entrypoint": "0x00108d9a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108d9a": "check_symbol_redefinition_00108d9a",
                "dcgettext": "get_error_message",
                "htab_find": "find_symbol",
                "lVar3": "symbol_found",
                "param_1": "error_message",
                "param_2": "symbol_name",
                "param_3": "target_symbol",
                "param_4": "result",
                "pcVar2": "symbol_name_copy",
                "plVar5": "symbol_slot",
                "ppcVar1": "symbol_pair",
                "print_error_and_exit_00119dd0": "print_error_and_exit",
                "uVar4": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108e76": {
            "additional_data": {
                "FUN_00108e76": {
                    "1": "extract_integer_from_byte_array",
                    "2": "extract_integer",
                    "4": "extract_integer_from_string",
                    "5": "extract_number_from_string"
                },
                "bVar1": {
                    "1": "current_character",
                    "13": "current_byte"
                },
                "iVar2": {
                    "1": "decimal_value",
                    "15": "result",
                    "2": "parsed_number",
                    "6": "parsed_integer"
                },
                "param_1": {
                    "1": "data_ptr",
                    "2": "input_data",
                    "3": "input_string",
                    "6": "byte_array",
                    "9": "string_ptr"
                }
            },
            "called": [],
            "calling": [
                "FUN_0010d21c",
                "FUN_0010c95e",
                "FUN_0010d559",
                "FUN_0010ee3f"
            ],
            "code": "\nint extract_number_from_string_00108e76(byte **string_ptr)\n\n{\n  byte current_char;\n  int result;\n  \n  result = 0;\n  while( true ) {\n    current_char = **string_ptr;\n    if (((&_sch_istable)[(ulong)current_char * 2] & 4) == 0) break;\n    *string_ptr = *string_ptr + 1;\n    result = result * 10 + -0x30 + (int)(char)current_char;\n  }\n  return result;\n}\n\n",
            "current_name": "extract_number_from_string_00108e76",
            "entrypoint": "0x00108e76",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108e76": "extract_number_from_string_00108e76",
                "bVar1": "current_char",
                "iVar2": "result",
                "param_1": "string_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108ea1": {
            "additional_data": {
                "*param_1": {
                    "1": "input_data"
                },
                "*param_2": {
                    "1": "parsed_number"
                },
                "FUN_00108ea1": {
                    "1": "parse_and_convert",
                    "15": "parse_number",
                    "3": "parse_integer_from_string",
                    "9": "parse_integer"
                },
                "_sch_istable": {
                    "1": "character_table"
                },
                "iVar1": {
                    "1": "digit",
                    "2": "accumulated_number",
                    "3": "parsed_number",
                    "5": "current_digit"
                },
                "param_1": {
                    "1": "data",
                    "2": "byte_stream",
                    "3": "string_ptr",
                    "4": "input",
                    "5": "input_data",
                    "6": "input_ptr"
                },
                "param_2": {
                    "1": "output_num",
                    "2": "result_ptr",
                    "3": "output_integer",
                    "4": "result",
                    "5": "parsed_number"
                },
                "pbVar2": {
                    "1": "character",
                    "11": "current_char",
                    "13": "current_byte",
                    "2": "current_char_ptr",
                    "3": "byte_ptr"
                },
                "pbVar3": {
                    "1": "next_character",
                    "11": "next_char",
                    "13": "next_byte",
                    "2": "next_byte_ptr"
                },
                "uVar4": {
                    "1": "return_val",
                    "23": "result",
                    "4": "parsed_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_0010d21c",
                "FUN_0010c95e",
                "FUN_0010d882"
            ],
            "code": "\nulong parse_number_00108ea1(byte **input_ptr,int *parsed_integer)\n\n{\n  int current_digit;\n  byte *current_byte;\n  byte *next_byte;\n  ulong result;\n  \n  current_byte = *input_ptr;\n  result = 0;\n  if (((&character_table)[(ulong)*current_byte * 2] & 4) != 0) {\n    next_byte = current_byte + 1;\n    current_digit = (char)*current_byte + -0x30;\n    *parsed_integer = current_digit;\n    *input_ptr = next_byte;\n    if (((&character_table)[(ulong)current_byte[1] * 2] & 4) != 0) {\n      do {\n        current_byte = next_byte;\n        current_digit = current_digit * 10 + -0x30 + (int)(char)*current_byte;\n        next_byte = current_byte + 1;\n      } while (((&character_table)[(ulong)current_byte[1] * 2] & 4) != 0);\n      if (current_byte[1] == 0x5f) {\n        next_byte = current_byte + 2;\n        *input_ptr = next_byte;\n        *parsed_integer = current_digit;\n      }\n    }\n    result = CONCAT71((int7)((ulong)next_byte >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "current_name": "parse_number_00108ea1",
            "entrypoint": "0x00108ea1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108ea1": "parse_number_00108ea1",
                "_sch_istable": "character_table",
                "iVar1": "current_digit",
                "param_1": "input_ptr",
                "param_2": "parsed_integer",
                "pbVar2": "current_byte",
                "pbVar3": "next_byte",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108f05": {
            "additional_data": {
                "*PTR_NONE": {
                    "1": "none_pointer"
                },
                "FUN_00108f05": {
                    "1": "get_constant",
                    "11": "get_one",
                    "2": "calculate_return_value",
                    "7": "get_return_value"
                },
                "FUN_00108f05_retval": {
                    "1": "constant"
                },
                "return": {
                    "1": "status",
                    "3": "result"
                },
                "undefined": {
                    "5": "int"
                }
            },
            "called": [],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nint get_one_00108f05(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "get_one_00108f05",
            "entrypoint": "0x00108f05",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108f05": "get_one_00108f05",
                "return": "result",
                "undefined": "int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108f08": {
            "additional_data": {
                "FUN_00108f08": {
                    "1": "source_file_tracking",
                    "2": "add_debug_source",
                    "6": "debug_start_source",
                    "7": "add_source_file"
                },
                "_stderr": {
                    "2": "error_stream"
                },
                "bVar9": {
                    "1": "byte_var",
                    "2": "counter",
                    "3": "flag",
                    "4": "byte_value",
                    "5": "zero_byte"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "filename_cmp": {
                    "1": "compare_file_names"
                },
                "iVar1": {
                    "1": "filename_cmp_result",
                    "15": "comparison_result",
                    "2": "filename_comparison_result",
                    "3": "filename_comparison",
                    "7": "cmp_result"
                },
                "lVar5": {
                    "1": "loop_count",
                    "2": "loop_index",
                    "20": "loop_counter",
                    "4": "counter"
                },
                "param_1": {
                    "1": "debug_source_map",
                    "2": "debug_context",
                    "3": "source_manager",
                    "4": "source_file_list"
                },
                "param_2": {
                    "1": "source_debugging_param2",
                    "24": "filename",
                    "4": "file_name"
                },
                "pcVar7": {
                    "1": "temp_str",
                    "15": "current_filename",
                    "2": "filename",
                    "3": "current_file_name"
                },
                "puVar3": {
                    "1": "filename_node",
                    "2": "debug_files_list",
                    "3": "current_file",
                    "5": "current_node",
                    "9": "current_entry"
                },
                "puVar4": {
                    "1": "prev_entry",
                    "2": "next_node",
                    "3": "previous_node",
                    "4": "current_node",
                    "5": "temp_ptr",
                    "7": "previous_entry"
                },
                "puVar6": {
                    "1": "loop_ptr",
                    "2": "current_node",
                    "3": "file_list_head"
                },
                "puVar8": {
                    "1": "last_ptr",
                    "2": "previous_file",
                    "3": "new_entry",
                    "4": "last_entry",
                    "5": "last_node"
                },
                "uVar2": {
                    "1": "status",
                    "15": "result",
                    "3": "success_flag",
                    "5": "success",
                    "6": "return_value"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "filename_cmp",
                "xmalloc",
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\n\n\nundefined8 add_source_file_00108f08(long source_file_list,char *filename)\n\n{\n  int comparison_result;\n  undefined8 result;\n  undefined8 *current_entry;\n  undefined8 *previous_entry;\n  long loop_counter;\n  undefined8 *file_list_head;\n  char *current_filename;\n  undefined8 *last_node;\n  byte zero_byte;\n  \n  zero_byte = 0;\n  current_filename = \"\";\n  if (filename != (char *)0x0) {\n    current_filename = filename;\n  }\n  if (*(long *)(source_file_list + 8) == 0) {\n    result = dcgettext(0,\"debug_start_source: no debug_set_filename call\",5);\n    fprintf(error_stream,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    for (current_entry = *(undefined8 **)(*(long *)(source_file_list + 8) + 8); current_entry != (undefined8 *)0x0;\n        current_entry = (undefined8 *)*current_entry) {\n      comparison_result = filename_cmp(current_entry[1],current_filename);\n      if (comparison_result == 0) goto LAB_00108fad;\n    }\n    current_entry = (undefined8 *)xmalloc(0x18);\n    file_list_head = *(undefined8 **)(source_file_list + 0x10);\n    last_node = current_entry;\n    for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)last_node = 0;\n      last_node = (undefined8 *)((long)last_node + (ulong)zero_byte * -8 + 4);\n    }\n    current_entry[1] = current_filename;\n    last_node = (undefined8 *)*file_list_head;\n    while (previous_entry = last_node, previous_entry != (undefined8 *)0x0) {\n      file_list_head = previous_entry;\n      last_node = (undefined8 *)*previous_entry;\n    }\n    *file_list_head = current_entry;\nLAB_00108fad:\n    *(undefined8 **)(source_file_list + 0x10) = current_entry;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "add_source_file_00108f08",
            "entrypoint": "0x00108f08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108f08": "add_source_file_00108f08",
                "_stderr": "error_stream",
                "bVar9": "zero_byte",
                "dcgettext": "get_error_message",
                "filename_cmp": "compare_file_names",
                "iVar1": "comparison_result",
                "lVar5": "loop_counter",
                "param_1": "source_file_list",
                "param_2": "filename",
                "pcVar7": "current_filename",
                "puVar3": "current_entry",
                "puVar4": "previous_entry",
                "puVar6": "file_list_head",
                "puVar8": "last_node",
                "uVar2": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108fb9": {
            "additional_data": {
                "FUN_00108fb9": {
                    "10": "print_bad_stab",
                    "14": "print_error_message",
                    "2": "print_stab_error",
                    "3": "print_bad_stab_error"
                },
                "__format": {
                    "1": "error_message_format",
                    "23": "format_string",
                    "3": "error_format"
                },
                "param_1": {
                    "1": "stab",
                    "2": "stab_message",
                    "20": "error_message",
                    "3": "error_msg"
                }
            },
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_00109ab1"
            ],
            "code": "\n\n\nvoid print_error_message_00108fb9(undefined8 error_message)\n\n{\n  char *format_string;\n  \n  format_string = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,format_string,error_message);\n  return;\n}\n\n",
            "current_name": "print_error_message_00108fb9",
            "entrypoint": "0x00108fb9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108fb9": "print_error_message_00108fb9",
                "__format": "format_string",
                "param_1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108fe8": {
            "additional_data": {
                "FUN_00108fe8": {
                    "1": "display_warning",
                    "26": "print_warning",
                    "4": "print_warning_message"
                },
                "__format": {
                    "1": "formatted_string",
                    "13": "warning_format",
                    "15": "format_string"
                },
                "_stderr": {
                    "1": "stderr"
                },
                "in_RAX": {
                    "1": "unknown_value",
                    "2": "format_specifier",
                    "3": "rax_value",
                    "7": "return_value"
                },
                "param_1": {
                    "1": "file_name",
                    "15": "message",
                    "3": "warning_message",
                    "8": "error_message"
                },
                "param_2": {
                    "1": "message2",
                    "10": "source",
                    "2": "error_type",
                    "3": "filename",
                    "6": "file_name"
                }
            },
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_00109a32",
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid print_warning_00108fe8(undefined8 message,undefined8 source)\n\n{\n  undefined8 return_value;\n  char *format_string;\n  \n  format_string = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(stderr,format_string,source,message,return_value);\n  return;\n}\n\n",
            "current_name": "print_warning_00108fe8",
            "entrypoint": "0x00108fe8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108fe8": "print_warning_00108fe8",
                "__format": "format_string",
                "_stderr": "stderr",
                "in_RAX": "return_value",
                "param_1": "message",
                "param_2": "source"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109022": {
            "additional_data": {
                "FUN_00109022": {
                    "1": "get_file_type_info",
                    "2": "validate_and_allocate_memory",
                    "4": "process_file"
                },
                "auVar8": {
                    "1": "return_value_ptr",
                    "12": "return_value",
                    "14": "result"
                },
                "bVar7": {
                    "1": "zero_byte",
                    "14": "byte_var",
                    "2": "offset",
                    "3": "byte_value"
                },
                "lVar4": {
                    "13": "loop_counter",
                    "2": "loop_index",
                    "4": "counter",
                    "6": "loop_var"
                },
                "param_1": {
                    "1": "file_id",
                    "10": "file_number",
                    "4": "file_count",
                    "5": "file_data"
                },
                "param_2": {
                    "1": "file_types",
                    "2": "type_numbers",
                    "3": "file_numbers",
                    "5": "type_indices",
                    "6": "file_indices",
                    "8": "type_index"
                },
                "param_3": {
                    "1": "unused_param",
                    "3": "arg1",
                    "4": "param3",
                    "5": "param_3",
                    "8": "arg3"
                },
                "param_4": {
                    "1": "arg_4",
                    "3": "arg2",
                    "4": "param4",
                    "5": "param_4",
                    "8": "arg4"
                },
                "pcVar2": {
                    "1": "err_msg",
                    "22": "error_message",
                    "7": "error_msg"
                },
                "plVar3": {
                    "1": "file_data_ptr",
                    "2": "file_content",
                    "4": "allocated_memory",
                    "6": "result"
                },
                "pplVar6": {
                    "1": "type_data_ptr",
                    "2": "type_pointer",
                    "4": "type_array"
                },
                "uVar1": {
                    "1": "type_index_high",
                    "10": "type_index",
                    "3": "file_index",
                    "5": "index"
                },
                "uVar5": {
                    "1": "type_index_value",
                    "2": "file_number",
                    "3": "index_number",
                    "4": "type_index",
                    "5": "type_file_number"
                }
            },
            "called": [
                "xmalloc",
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c2d2"
            ],
            "code": "\n\n\nundefined  [16] process_file_00109022(long file_number,uint *type_index,undefined8 arg3,undefined8 arg4)\n\n{\n  uint type_index;\n  char *error_message;\n  long *result;\n  long loop_counter;\n  uint type_file_number;\n  long **type_array;\n  byte byte_var;\n  undefined result [16];\n  \n  byte_var = 0;\n  type_file_number = *type_index;\n  type_index = type_index[1];\n  if (((int)type_file_number < 0) || (*(uint *)(file_number + 0x80) <= type_file_number)) {\n    error_message = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,error_message,(ulong)type_file_number);\n  }\n  else {\n    if (-1 < (int)type_index) {\n      type_array = (long **)(*(long *)(file_number + 0x88) + (long)(int)type_file_number * 8);\n      for (type_file_number = type_index; 0xf < (int)type_file_number; type_file_number = type_file_number - 0x10) {\n        if (*type_array == (long *)0x0) {\n          result = (long *)xmalloc(0x88);\n          *type_array = result;\n          for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n            *(undefined4 *)result = 0;\n            result = (long *)((long)result + (ulong)byte_var * -8 + 4);\n          }\n        }\n        type_array = (long **)*type_array;\n      }\n      if (*type_array == (long *)0x0) {\n        result = (long *)xmalloc(0x88);\n        *type_array = result;\n        for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *(undefined4 *)result = 0;\n          result = (long *)((long)result + (ulong)byte_var * -8 + 4);\n        }\n      }\n      result = *type_array + (long)(int)((type_index >> 4) * -0x10 + type_index) + 1;\n      goto LAB_00109117;\n    }\n    error_message = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,error_message,(ulong)type_index);\n  }\n  result = (long *)0x0;\nLAB_00109117:\n  result._8_8_ = arg4;\n  result._0_8_ = result;\n  return result;\n}\n\n",
            "current_name": "process_file_00109022",
            "entrypoint": "0x00109022",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109022": "process_file_00109022",
                "auVar8": "result",
                "bVar7": "byte_var",
                "lVar4": "loop_counter",
                "param_1": "file_number",
                "param_2": "type_index",
                "param_3": "arg3",
                "param_4": "arg4",
                "pcVar2": "error_message",
                "plVar3": "result",
                "pplVar6": "type_array",
                "uVar1": "type_index",
                "uVar5": "type_file_number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010911f": {
            "additional_data": {
                "FUN_0010911f": {
                    "1": "print_mangled_name",
                    "2": "print_error",
                    "23": "print_error_message",
                    "5": "print_bad_mangled_name"
                },
                "__format": {
                    "1": "error_message_format",
                    "17": "format_string",
                    "3": "error_format",
                    "7": "message_format"
                },
                "_stderr": {
                    "1": "error_stream"
                },
                "param_1": {
                    "14": "error_message",
                    "8": "mangled_name",
                    "9": "message"
                }
            },
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_0010d21c",
                "FUN_0010c95e",
                "FUN_0010d559",
                "FUN_0010d882",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid print_error_message_0010911f(undefined8 error_message)\n\n{\n  char *format_string;\n  \n  format_string = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(error_stream,format_string,error_message);\n  return;\n}\n\n",
            "current_name": "print_error_message_0010911f",
            "entrypoint": "0x0010911f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "__format": "format_string",
                "_stderr": "error_stream",
                "param_1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010914e": {
            "additional_data": {
                "FUN_0010914e": {
                    "1": "find_named_type_in_binary",
                    "29": "find_named_type"
                },
                "auVar7": {
                    "1": "output_data",
                    "13": "result",
                    "2": "result_value",
                    "9": "return_value"
                },
                "iVar2": {
                    "1": "result",
                    "2": "cmp_result",
                    "24": "comparison_result",
                    "3": "strcmp_result"
                },
                "lVar1": {
                    "1": "comp_unit_ptr",
                    "16": "current_compilation_unit",
                    "2": "current_compilation",
                    "9": "current_unit"
                },
                "lVar5": {
                    "1": "loop_var",
                    "2": "l_var5",
                    "3": "type_list"
                },
                "param_1": {
                    "1": "binary",
                    "23": "compilation_unit"
                },
                "param_2": {
                    "1": "target_name",
                    "25": "type_name"
                },
                "param_3": {
                    "1": "stderr",
                    "2": "arg_1",
                    "3": "arg3",
                    "4": "param3",
                    "5": "unused_param_1"
                },
                "param_4": {
                    "1": "var2",
                    "2": "arg_2",
                    "3": "arg4",
                    "4": "param_4",
                    "5": "default_value",
                    "6": "unused_param_2"
                },
                "puVar4": {
                    "1": "pu_var",
                    "2": "current_element",
                    "5": "current_item",
                    "7": "current_entry"
                },
                "puVar6": {
                    "1": "current_compilation_unit_child",
                    "2": "current_unit",
                    "4": "current_unit_entry"
                },
                "uVar3": {
                    "1": "err_msg",
                    "2": "error_msg",
                    "25": "error_message"
                }
            },
            "called": [
                "dcgettext",
                "strcmp",
                "fprintf"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010d559",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nundefined  [16] find_named_type_0010914e(long compilation_unit,char *type_name,undefined8 unused_param_1,undefined8 unused_param_2)\n\n{\n  long current_compilation_unit;\n  int comparison_result;\n  undefined8 error_message;\n  undefined8 *current_entry;\n  long type_list;\n  undefined8 *current_unit_entry;\n  undefined result [16];\n  \n  current_compilation_unit = *(long *)(compilation_unit + 8);\n  if (current_compilation_unit == 0) {\n    error_message = dcgettext(0,\"debug_find_named_type_0010914e: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  else {\n    for (type_list = *(long *)(compilation_unit + 0x20); type_list != 0; type_list = *(long *)(type_list + 8)) {\n      if (*(undefined8 **)(type_list + 0x28) != (undefined8 *)0x0) {\n        for (current_entry = (undefined8 *)**(undefined8 **)(type_list + 0x28); current_entry != (undefined8 *)0x0;\n            current_entry = (undefined8 *)*current_entry) {\n          if (*(int *)((long)current_entry + 0x14) == 0) {\n            if (*(char *)current_entry[1] == *type_name) {\n              comparison_result = strcmp((char *)current_entry[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (current_unit_entry = *(undefined8 **)(current_compilation_unit + 8); current_unit_entry != (undefined8 *)0x0;\n        current_unit_entry = (undefined8 *)*current_unit_entry) {\n      if ((undefined8 *)current_unit_entry[2] != (undefined8 *)0x0) {\n        for (current_entry = *(undefined8 **)(undefined8 *)current_unit_entry[2]; current_entry != (undefined8 *)0x0;\n            current_entry = (undefined8 *)*current_entry) {\n          if (*(int *)((long)current_entry + 0x14) == 0) {\n            if (*(char *)current_entry[1] == *type_name) {\n              comparison_result = strcmp((char *)current_entry[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  error_message = 0;\nLAB_00109223:\n  result._8_8_ = unused_param_2;\n  result._0_8_ = error_message;\n  return result;\nLAB_00109216:\n  error_message = current_entry[4];\n  goto LAB_00109223;\n}\n\n",
            "current_name": "find_named_type_0010914e",
            "entrypoint": "0x0010914e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "auVar7": "result",
                "iVar2": "comparison_result",
                "lVar1": "current_compilation_unit",
                "lVar5": "type_list",
                "param_1": "compilation_unit",
                "param_2": "type_name",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "puVar4": "current_entry",
                "puVar6": "current_unit_entry",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010922b": {
            "additional_data": {
                "FUN_0010922b": {
                    "1": "is_equal",
                    "16": "check_equality",
                    "5": "compare_values"
                },
                "bVar12": {
                    "1": "is_same",
                    "15": "is_equal",
                    "2": "byte_result",
                    "4": "result"
                },
                "cVar11": {
                    "1": "compare_result",
                    "17": "result",
                    "2": "comparison_result",
                    "3": "is_equal"
                },
                "iVar13": {
                    "1": "comparison_result2",
                    "12": "comparison_result",
                    "2": "string_comparison_result",
                    "4": "int_var"
                },
                "lVar19": {
                    "1": "first_long64_var",
                    "13": "offset",
                    "2": "var4",
                    "3": "index"
                },
                "lVar22": {
                    "1": "temp_offset",
                    "2": "long_var5",
                    "3": "var5",
                    "5": "offset"
                },
                "lVar6": {
                    "1": "string1",
                    "2": "source_ptr",
                    "5": "length1",
                    "6": "var1"
                },
                "lVar7": {
                    "1": "x_long_var",
                    "2": "target_ptr",
                    "5": "length2",
                    "6": "var2"
                },
                "lVar8": {
                    "1": "local_var_3",
                    "2": "long_var3",
                    "5": "length3",
                    "6": "var3"
                },
                "local_48": {
                    "1": "nested_obj_ptr3",
                    "2": "local_array",
                    "3": "local_array3",
                    "4": "local_ptr3"
                },
                "local_58": {
                    "1": "current_ptr",
                    "2": "linked_list",
                    "3": "local_array2"
                },
                "local_70": {
                    "1": "local_pointer",
                    "2": "temp_array1",
                    "3": "local_array1",
                    "4": "local_ptr1"
                },
                "param_1": {
                    "1": "data",
                    "10": "param1",
                    "2": "param"
                },
                "param_2": {
                    "1": "data1",
                    "2": "input1",
                    "4": "value1",
                    "7": "array1"
                },
                "param_3": {
                    "1": "obj2",
                    "2": "input2",
                    "4": "value2",
                    "7": "array2"
                },
                "pcVar10": {
                    "1": "ptr2",
                    "11": "str2",
                    "2": "string2",
                    "4": "char_ptr2"
                },
                "pcVar9": {
                    "1": "char_pointer_1",
                    "11": "str1",
                    "2": "string1",
                    "4": "char_ptr1"
                },
                "plStack_50": {
                    "1": "local_var",
                    "2": "local_ptr2",
                    "5": "stack_ptr"
                },
                "plVar18": {
                    "1": "first_long_pointer_var",
                    "2": "ptr_to_long1",
                    "3": "ptr6",
                    "4": "ptr1"
                },
                "plVar20": {
                    "1": "target_ptr3",
                    "2": "ptr_to_long2",
                    "3": "ptr2"
                },
                "plVar21": {
                    "1": "list3",
                    "2": "ptr_to_long3",
                    "3": "ptr3"
                },
                "ppcVar4": {
                    "1": "pp_str1",
                    "2": "ptr_to_char1",
                    "4": "ptr2"
                },
                "ppcVar5": {
                    "1": "rhs_char_ptr_ptr",
                    "2": "ptr_str2",
                    "4": "ptr3"
                },
                "pplVar3": {
                    "1": "ptr_to_values1",
                    "3": "ptr_ptr1",
                    "4": "ptr1"
                },
                "puVar16": {
                    "1": "type_ptr1",
                    "2": "ptr_real_type1",
                    "3": "pointer1",
                    "4": "ptr4",
                    "9": "ptr1"
                },
                "puVar17": {
                    "1": "data_type_pointer2",
                    "2": "ptr_real_type2",
                    "3": "pointer2",
                    "4": "ptr5",
                    "9": "ptr2"
                },
                "uVar1": {
                    "1": "len_array1",
                    "12": "type1",
                    "2": "array1_type",
                    "5": "value1"
                },
                "uVar14": {
                    "1": "type1_real",
                    "15": "real_type1",
                    "3": "type1"
                },
                "uVar15": {
                    "1": "param2_type",
                    "15": "real_type2",
                    "3": "type2"
                },
                "uVar2": {
                    "1": "type_target",
                    "12": "type2",
                    "2": "array2_type",
                    "5": "value2"
                }
            },
            "called": [
                "abort",
                "FUN_00112b6e",
                "strcmp",
                "FUN_0010922b"
            ],
            "calling": [
                "FUN_0010922b",
                "FUN_0010c7a0"
            ],
            "code": "\nbyte check_equality_0010922b(long param1,long *array1,long *array2)\n\n{\n  uint type1;\n  uint type2;\n  long **ptr1;\n  char **ptr2;\n  char **ptr3;\n  long var1;\n  long var2;\n  long var3;\n  char *str1;\n  char *str2;\n  char result;\n  byte is_equal;\n  int comparison_result;\n  undefined8 real_type1;\n  undefined8 real_type2;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  long *ptr1;\n  long offset;\n  long *ptr7;\n  long *ptr8;\n  long offset;\n  long *local_ptr1;\n  undefined8 *list;\n  long *stack_ptr;\n  long *local_ptr3;\n  \n  ptr1 = array2;\n  if (array1 == (long *)0x0) {\nLAB_00109241:\n    return array2 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (ptr1 == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    type1 = *(uint *)array1;\n    if (type1 == 1) goto code_r0x00109263;\n    while (type2 = *(uint *)array2, type2 == 1) {\n      array2 = **(long ***)array2[2];\n      if (array2 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (array1 == array2) {\n      return true;\n    }\n    if (type1 != 0x16) break;\n    if (type2 != 0x17) goto LAB_001092cb;\n    array1 = *(long **)(array1[2] + 8);\n    if (array1 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((type1 == 0x17) && (type2 == 0x16)) {\n    array2 = *(long **)(array2[2] + 8);\n    ptr1 = array2;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*array1 != *array2) {\n    return false;\n  }\n  if (type1 == 3) {\n    return *(char *)(array1 + 2) == *(char *)(array2 + 2);\n  }\n  if (type1 < 4) {\n    if (type1 == 2) {\n      return true;\n    }\n  }\n  else if (type1 - 4 < 3) {\n    return true;\n  }\n  list = *(undefined8 **)(param1 + 0x58);\n  for (ptr2 = list; ptr2 != (undefined8 *)0x0; ptr2 = (undefined8 *)*ptr2) {\n    if (((long *)ptr2[1] == array1) && ((long *)ptr2[2] == array2)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(param1 + 0x58) = &list;\n  stack_ptr = array1;\n  local_ptr3 = array2;\n  switch(type1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    ptr1 = (long *)array1[2];\n    ptr1 = (long **)array2[2];\n    if (ptr1 == (long *)0x0) {\n      is_equal = ptr1 == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptr1 == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(param1 + 0x38) < *(uint *)((long)ptr1 + 0xc)) &&\n       (*(uint *)((long)ptr1 + 0xc) == *(uint *)((long)ptr1 + 0xc))) goto LAB_001097af;\n    ptr2 = (undefined8 *)*ptr1;\n    local_ptr1 = *ptr1;\n    if (((ptr2 == (undefined8 *)0x0) == (local_ptr1 == (long *)0x0)) &&\n       ((((ptr1[2] == 0) == (ptr1[2] == (long *)0x0) &&\n         ((ptr1[3] == 0) == (ptr1[3] == (long *)0x0))) &&\n        ((ptr1[4] == 0) == (ptr1[4] == (long *)0x0))))) {\n      if (ptr2 == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((ptr1[4] != 0) &&\n           (result = check_equality_0010922b(param1,ptr1[4],ptr1[4]), result == '\\0'))\n        goto LAB_00109382;\n        ptr8 = (long *)ptr1[2];\n        if (ptr8 == (long *)0x0) {\nLAB_00109540:\n          ptr2 = (undefined8 *)ptr1[3];\n          if (ptr2 == (undefined8 *)0x0) goto LAB_001097af;\n          ptr1 = ptr1[3];\n          while( true ) {\n            ptr3 = (char **)*ptr2;\n            if (ptr3 == (char **)0x0) {\n              is_equal = *ptr1 == 0;\n              goto LAB_001099c4;\n            }\n            ptr2 = (char **)*ptr1;\n            if (ptr2 == (char **)0x0) break;\n            if ((**ptr3 != **ptr2) || (comparison_result = strcmp(*ptr3,*ptr2), comparison_result != 0))\n            break;\n            str1 = ptr3[1];\n            str2 = ptr2[1];\n            if ((str1 == (char *)0x0) != (str2 == (char *)0x0)) break;\n            if (str1 != (char *)0x0) {\n              offset = 0;\n              while( true ) {\n                ptr3 = *(char ***)(str1 + offset);\n                ptr2 = *(char ***)(str2 + offset);\n                if (ptr3 == (char **)0x0) break;\n                if (ptr2 == (char **)0x0) goto LAB_00109382;\n                if ((((**ptr3 != **ptr2) ||\n                     ((((ulong)ptr3[2] ^ (ulong)ptr2[2]) & 0xffffffffffff) != 0)) ||\n                    ((ptr3[3] != ptr2[3] ||\n                     ((((ptr3[4] == (char *)0x0) != (ptr2[4] == (char *)0x0) ||\n                       (comparison_result = strcmp(*ptr3,*ptr2), comparison_result != 0)) ||\n                      (result = check_equality_0010922b(param1,ptr3[1],ptr2[1]), result == '\\0')))))) ||\n                   ((ptr3[4] != (char *)0x0 &&\n                    (result = check_equality_0010922b(param1,ptr3[4],ptr2[4]), result == '\\0'))))\n                goto LAB_00109382;\n                offset = offset + 8;\n              }\n              if (ptr2 == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            ptr2 = ptr2 + 1;\n            ptr1 = ptr1 + 1;\n          }\n        }\n        else {\n          ptr7 = ptr1[2];\n          for (; ptr2 = (undefined8 *)*ptr8, ptr2 != (undefined8 *)0x0;\n              ptr8 = ptr8 + 1) {\n            ptr1 = (undefined8 *)*ptr7;\n            if ((((ptr1 == (undefined8 *)0x0) ||\n                 (((ptr2[1] ^ ptr1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(ptr2 + 2) != *(int *)(ptr1 + 2))) ||\n               (result = check_equality_0010922b(param1,*ptr2,*ptr1), result == '\\0'))\n            goto LAB_00109382;\n            ptr7 = ptr7 + 1;\n          }\n          if (*ptr7 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; ptr3 = (char **)*ptr2, ptr3 != (char **)0x0; ptr2 = ptr2 + 1) {\n          ptr2 = (char **)*local_ptr1;\n          if (ptr2 == (char **)0x0) goto LAB_00109382;\n          str1 = *ptr2;\n          str2 = *ptr3;\n          if ((*str2 != *str1) ||\n             ((((ulong)ptr3[2] ^ (ulong)ptr2[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)ptr3 + 0x14) == '\\0') {\n            if (ptr3[3] == ptr2[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          comparison_result = strcmp(ptr3[3],ptr2[3]);\n          if (comparison_result != 0) goto LAB_00109382;\nLAB_00109480:\n          comparison_result = strcmp(str2,str1);\n          if (((comparison_result != 0) || (ptr3[1] == (char *)0x0)) || (ptr2[1] == (char *)0x0))\n          goto LAB_00109382;\n          real_type1 = get_real_type_00112b6e(ptr2[1],0);\n          real_type2 = get_real_type_00112b6e(ptr3[1],0);\n          result = check_equality_0010922b(param1,real_type2,real_type1);\n          if (result == '\\0') goto LAB_00109382;\n          local_ptr1 = local_ptr1 + 1;\n        }\n        if (*local_ptr1 == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    ptr1 = (long *)array1[2];\n    ptr8 = (long *)array2[2];\n    if (ptr1 == (long *)0x0) {\n      is_equal = ptr8 == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptr8 == (long *)0x0) goto LAB_00109382;\n    offset = *ptr1;\n    var1 = *ptr8;\n    offset = 0;\n    var2 = ptr1[1];\n    var3 = ptr8[1];\n    do {\n      str1 = *(char **)(offset + offset);\n      if (str1 == (char *)0x0) {\n        is_equal = *(long *)(var1 + offset) == 0;\n        goto LAB_001099c1;\n      }\n      str2 = *(char **)(var1 + offset);\n      if (((str2 == (char *)0x0) || (*str1 != *str2)) ||\n         (*(long *)(var2 + offset) != *(long *)(var3 + offset))) break;\n      comparison_result = strcmp(str1,str2);\n      offset = offset + 8;\n    } while (comparison_result == 0);\nLAB_00109964:\n    is_equal = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    is_equal = check_equality_0010922b(param1,array1[2],array2[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)array1[2] + 2) == *(char *)((undefined8 *)array2[2] + 2)) &&\n       (result = check_equality_0010922b(param1,*(undefined8 *)array1[2],*(undefined8 *)array2[2]),\n       result != '\\0')) {\n      ptr1 = *(long **)(array1[2] + 8);\n      ptr8 = *(long **)(array2[2] + 8);\n      if ((ptr1 == (long *)0x0) == (ptr8 == (long *)0x0)) {\n        if (ptr1 == (long *)0x0) goto LAB_001097af;\n        while (((*ptr1 != 0 && (*ptr8 != 0)) &&\n               (result = check_equality_0010922b(param1), result != '\\0'))) {\n          ptr1 = ptr1 + 1;\n          ptr8 = ptr8 + 1;\n        }\nLAB_0010995d:\n        if (*ptr1 != 0) goto LAB_00109964;\n        is_equal = *ptr8 == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    ptr2 = (undefined8 *)array2[2];\n    ptr1 = (undefined8 *)array1[2];\n    is_equal = 0;\n    if ((ptr1[1] == ptr2[1]) && (ptr1[2] == ptr2[2])) {\nLAB_00109862:\n      is_equal = check_equality_0010922b(param1,*ptr1,*ptr2);\n    }\n    break;\n  case 0x10:\n    ptr2 = (undefined8 *)array2[2];\n    ptr1 = (undefined8 *)array1[2];\n    is_equal = 0;\n    if (((ptr1[2] == ptr2[2]) && (ptr1[3] == ptr2[3])) &&\n       (*(char *)(ptr1 + 4) == *(char *)(ptr2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    ptr2 = (undefined8 *)array2[2];\n    ptr1 = (undefined8 *)array1[2];\n    is_equal = 0;\n    if (*(char *)(ptr1 + 1) == *(char *)(ptr2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    result = check_equality_0010922b(param1,*(undefined8 *)array1[2],*(undefined8 *)array2[2]);\n    is_equal = 0;\n    if (result != '\\0') {\n      is_equal = check_equality_0010922b(param1,*(undefined8 *)(array1[2] + 8),*(undefined8 *)(array2[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)array1[2] + 3) == *(char *)((undefined8 *)array2[2] + 3)) &&\n        (result = check_equality_0010922b(param1,*(undefined8 *)array1[2],*(undefined8 *)array2[2]),\n        result != '\\0')) &&\n       (result = check_equality_0010922b(param1,*(undefined8 *)(array1[2] + 8),\n                              *(undefined8 *)(array2[2] + 8)), result != '\\0')) {\n      ptr1 = *(long **)(array1[2] + 0x10);\n      ptr8 = *(long **)(array2[2] + 0x10);\n      if ((ptr1 == (long *)0x0) == (ptr8 == (long *)0x0)) {\n        if (ptr1 != (long *)0x0) {\n          while (((*ptr1 != 0 && (*ptr8 != 0)) &&\n                 (result = check_equality_0010922b(param1), result != '\\0'))) {\n            ptr1 = ptr1 + 1;\n            ptr8 = ptr8 + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        is_equal = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    is_equal = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    ptr1 = (long *)array2[2];\n    ptr8 = (long *)array1[2];\n    comparison_result = strcmp(*(char **)(*ptr8 + 8),*(char **)(*ptr1 + 8));\n    is_equal = 0;\n    if (comparison_result == 0) {\n      is_equal = check_equality_0010922b(param1,ptr8[1],ptr1[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  is_equal = is_equal & 1;\nLAB_001099c4:\n  *(undefined8 **)(param1 + 0x58) = list;\n  return is_equal;\ncode_r0x00109263:\n  array1 = **(long ***)array1[2];\n  ptr1 = array1;\n  goto joined_r0x00109255;\n}\n\n",
            "current_name": "check_equality_0010922b",
            "entrypoint": "0x0010922b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010922b": "check_equality_0010922b",
                "bVar12": "is_equal",
                "cVar11": "result",
                "iVar13": "comparison_result",
                "lVar19": "offset",
                "lVar22": "offset",
                "lVar6": "var1",
                "lVar7": "var2",
                "lVar8": "var3",
                "local_48": "local_ptr3",
                "local_58": "list",
                "local_70": "local_ptr1",
                "param_1": "param1",
                "param_2": "array1",
                "param_3": "array2",
                "pcVar10": "str2",
                "pcVar9": "str1",
                "plStack_50": "stack_ptr",
                "plVar18": "ptr1",
                "plVar20": "ptr7",
                "plVar21": "ptr8",
                "ppcVar4": "ptr2",
                "ppcVar5": "ptr3",
                "pplVar3": "ptr1",
                "puVar16": "ptr1",
                "puVar17": "ptr2",
                "uVar1": "type1",
                "uVar14": "real_type1",
                "uVar15": "real_type2",
                "uVar2": "type2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109a0b": {
            "additional_data": {
                "*puVar1": {
                    "1": "destination"
                },
                "*puVar3": {
                    "1": "dest_pointer"
                },
                "FUN_00109a0b": {
                    "1": "initialize_string",
                    "17": "copy_and_null_terminate",
                    "2": "copy_and_zero_terminate",
                    "6": "copy_and_null_terminate_string"
                },
                "bVar4": {
                    "1": "pointer_increment",
                    "2": "reverse",
                    "3": "offset",
                    "8": "is_negative",
                    "9": "increment"
                },
                "lVar2": {
                    "1": "length",
                    "10": "i",
                    "2": "remaining_size",
                    "3": "count",
                    "5": "remaining_length",
                    "9": "index"
                },
                "param_1": {
                    "1": "source_buffer",
                    "21": "source",
                    "8": "source_string"
                },
                "param_2": {
                    "2": "string_length",
                    "22": "length",
                    "3": "source_length",
                    "4": "size"
                },
                "puVar1": {
                    "1": "destination_buffer",
                    "18": "destination",
                    "2": "new_string",
                    "8": "copied_string"
                },
                "puVar3": {
                    "1": "current_dest",
                    "12": "dest_ptr",
                    "2": "dest_pointer",
                    "7": "destination_string"
                }
            },
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_0010afd5",
                "FUN_0010d21c",
                "FUN_0010c95e",
                "FUN_0010d559",
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "code": "\nvoid copy_and_null_terminate_00109a0b(undefined *source,int length)\n\n{\n  undefined *destination;\n  long i;\n  undefined *dest_ptr;\n  byte increment;\n  \n  increment = 0;\n  destination = (undefined *)xmalloc((long)(length + 1));\n  dest_ptr = destination;\n  for (i = (long)length; i != 0; i = i + -1) {\n    *dest_ptr = *source;\n    source = source + (ulong)increment * -2 + 1;\n    dest_ptr = dest_ptr + (ulong)increment * -2 + 1;\n  }\n  destination[length] = 0;\n  return;\n}\n\n",
            "current_name": "copy_and_null_terminate_00109a0b",
            "entrypoint": "0x00109a0b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_00109a0b",
                "bVar4": "increment",
                "lVar2": "i",
                "param_1": "source",
                "param_2": "length",
                "puVar1": "destination",
                "puVar3": "dest_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109a32": {
            "additional_data": {
                "FUN_00109a32": {
                    "1": "parse_and_warn_number",
                    "2": "parse_unsigned_number",
                    "3": "parse_and_convert_string",
                    "6": "parse_unsigned_long"
                },
                "__nptr": {
                    "1": "string_to_convert",
                    "10": "current_char",
                    "2": "num_string",
                    "3": "string",
                    "4": "current_string"
                },
                "auVar4": {
                    "1": "output",
                    "18": "result",
                    "9": "return_value"
                },
                "param_1": {
                    "1": "string",
                    "11": "input_string",
                    "2": "string_pointer",
                    "4": "string_array",
                    "6": "string_ptr"
                },
                "param_2": {
                    "1": "overflow_ptr",
                    "2": "out_of_range_flag",
                    "4": "overflow_flag",
                    "5": "error_flag_ptr",
                    "6": "is_overflow"
                },
                "param_3": {
                    "1": "delimiter",
                    "14": "end_of_string",
                    "3": "string_end",
                    "4": "end_of_input"
                },
                "param_4": {
                    "1": "unused_1",
                    "2": "unused_param",
                    "4": "unused_param_4",
                    "7": "unused_param_1"
                },
                "param_5": {
                    "1": "var_5",
                    "2": "unused_arg2",
                    "3": "param_5",
                    "8": "unused_param_2"
                },
                "piVar1": {
                    "1": "error_flag_ptr",
                    "2": "error_indicator",
                    "20": "errno_ptr",
                    "3": "error_ptr"
                },
                "uVar2": {
                    "1": "number",
                    "2": "numeric_value",
                    "3": "result",
                    "5": "parsed_number",
                    "9": "parsed_value"
                },
                "uVar3": {
                    "1": "localized_error",
                    "17": "error_message",
                    "3": "warning_message",
                    "6": "error_msg"
                }
            },
            "called": [
                "__errno_location",
                "FUN_00108fe8",
                "dcgettext",
                "strtoul"
            ],
            "calling": [
                "FUN_0010ee3f",
                "FUN_00109ab1"
            ],
            "code": "\nundefined  [16]\nparse_numeric_string_00109a32(char **input_string,undefined *is_overflow,char *end_of_string,undefined8 unused_param_1,undefined8 unused_param_2)\n\n{\n  char *current_char;\n  int *errno_ptr;\n  ulong parsed_value;\n  undefined8 error_message;\n  undefined result [16];\n  \n  if (is_overflow != (undefined *)0x0) {\n    *is_overflow = 0;\n  }\n  current_char = *input_string;\n  if ((current_char < end_of_string) && (*current_char != '\\0')) {\n    errno_ptr = __errno_location();\n    *errno_ptr = 0;\n    parsed_value = strtoul(current_char,input_string,0);\n    if ((parsed_value != 0xffffffffffffffff) || (*errno_ptr == 0)) goto LAB_00109aa9;\n    if (is_overflow == (undefined *)0x0) {\n      error_message = dcgettext(0,\"numeric overflow\",5);\n      print_warning_00108fe8(current_char,error_message);\n    }\n    else {\n      *is_overflow = 1;\n    }\n  }\n  parsed_value = 0;\nLAB_00109aa9:\n  result._8_8_ = unused_param_2;\n  result._0_8_ = parsed_value;\n  return result;\n}\n\n",
            "current_name": "parse_numeric_string_00109a32",
            "entrypoint": "0x00109a32",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109a32": "parse_numeric_string_00109a32",
                "__nptr": "current_char",
                "auVar4": "result",
                "param_1": "input_string",
                "param_2": "is_overflow",
                "param_3": "end_of_string",
                "param_4": "unused_param_1",
                "param_5": "unused_param_2",
                "piVar1": "errno_ptr",
                "uVar2": "parsed_value",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109ab1": {
            "additional_data": {
                "FUN_00109ab1": {
                    "1": "parse_and_extract_values",
                    "2": "parse_parameters",
                    "4": "parse_coordinates",
                    "7": "parse_function_arguments"
                },
                "auVar4": {
                    "1": "output_data",
                    "19": "return_value",
                    "2": "output",
                    "4": "result"
                },
                "param_1": {
                    "1": "argument_string",
                    "12": "input_string",
                    "2": "coordinate_str",
                    "3": "string_ptr"
                },
                "param_2": {
                    "1": "result_arr",
                    "10": "output_values",
                    "2": "output_array",
                    "4": "parsed_values"
                },
                "param_3": {
                    "1": "y_coordinate",
                    "2": "arg3",
                    "20": "param_3"
                },
                "param_4": {
                    "1": "temporary_value_2",
                    "2": "arg4",
                    "21": "param_4"
                },
                "param_5": {
                    "1": "unused_param_3",
                    "2": "arg5",
                    "23": "param_5"
                },
                "parse_numeric_string_00109a32": {
                    "1": "parse_numeric_string"
                },
                "pcVar2": {
                    "1": "curr_char",
                    "2": "current_char_ptr",
                    "26": "current_char"
                },
                "print_error_message_00108fb9": {
                    "1": "print_error_message"
                },
                "uVar1": {
                    "1": "parsed_val",
                    "18": "parsed_value",
                    "6": "parsed_value_1"
                },
                "uVar3": {
                    "1": "concatenated_value",
                    "21": "result",
                    "4": "return_value"
                }
            },
            "called": [
                "FUN_00109a32",
                "FUN_00108fb9"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16]\nparse_function_arguments_00109ab1(char **input_string,undefined4 *output_values,undefined8 param_3,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined4 parsed_value;\n  char *current_char;\n  undefined8 result;\n  undefined return_value [16];\n  \n  current_char = *input_string;\n  if (*current_char == '(') {\n    *input_string = current_char + 1;\n    parsed_value = parse_numeric_string(input_string,0);\n    *output_values = parsed_value;\n    if (**input_string == ',') {\n      *input_string = *input_string + 1;\n      parsed_value = parse_numeric_string(input_string,0,param_3);\n      output_values[1] = parsed_value;\n      if (**input_string == ')') {\n        current_char = *input_string + 1;\n        *input_string = current_char;\n        goto LAB_00109b25;\n      }\n    }\n    print_error_message(current_char);\n    result = 0;\n  }\n  else {\n    *output_values = 0;\n    current_char = (char *)parse_numeric_string(input_string,0);\n    output_values[1] = (int)current_char;\nLAB_00109b25:\n    result = CONCAT71((int7)((ulong)current_char >> 8),1);\n  }\n  return_value._8_8_ = param_5;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "current_name": "parse_function_arguments_00109ab1",
            "entrypoint": "0x00109ab1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109ab1": "parse_function_arguments_00109ab1",
                "auVar4": "return_value",
                "param_1": "input_string",
                "param_2": "output_values",
                "parse_numeric_string_00109a32": "parse_numeric_string",
                "pcVar2": "current_char",
                "print_error_message_00108fb9": "print_error_message",
                "uVar1": "parsed_value",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109b2f": {
            "additional_data": {
                "*(undefined8 *)(param_1 + 0x60)": {
                    "1": "next_memory_address"
                },
                "FUN_00109b2f": {
                    "1": "extract_item_from_list",
                    "2": "extract_and_free_next_item",
                    "3": "extract_and_free_next_node",
                    "7": "extract_and_free_ptr"
                },
                "__ptr": {
                    "1": "last_ptr",
                    "2": "current_ptr",
                    "3": "current_node",
                    "8": "ptr"
                },
                "__ptr[1]": {
                    "1": "value_in_memory"
                },
                "free(__ptr)": {
                    "1": "free_ptr"
                },
                "param_1": {
                    "1": "ptr_address",
                    "2": "base_address",
                    "6": "param"
                },
                "puVar1": {
                    "1": "p_next_item",
                    "2": "extracted_ptr",
                    "7": "return_value"
                }
            },
            "called": [
                "free"
            ],
            "calling": [
                "FUN_0010a83e",
                "FUN_0010ebb0",
                "FUN_0010a377",
                "FUN_0010e9a0",
                "FUN_0010eafe",
                "FUN_0010a0e9",
                "FUN_0010a94e",
                "FUN_0010e5db",
                "FUN_0010ba08",
                "FUN_0010a424",
                "FUN_0010aa53",
                "FUN_0010abdd",
                "FUN_0010e7c2",
                "FUN_0010a181",
                "FUN_0010a77a",
                "FUN_0010b948",
                "FUN_0010e918",
                "FUN_0010a2b9",
                "FUN_0010e6a8",
                "FUN_00109ed3"
            ],
            "code": "\nundefined8 * extract_and_free_ptr_00109b2f(long param)\n\n{\n  undefined8 *ptr;\n  undefined8 *return_value;\n  \n  ptr = *(undefined8 **)(param + 0x60);\n  if (ptr != (undefined8 *)0x0) {\n    return_value = (undefined8 *)value_in_memory;\n    *(undefined8 *)(param + 0x60) = *ptr;\n    free_ptr;\n    return return_value;\n  }\n  return ptr;\n}\n\n",
            "current_name": "extract_and_free_ptr_00109b2f",
            "entrypoint": "0x00109b2f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109b2f": "extract_and_free_ptr_00109b2f",
                "__ptr": "ptr",
                "__ptr[1]": "value_in_memory",
                "free(__ptr)": "free_ptr",
                "param_1": "param",
                "puVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109b52": {
            "additional_data": {
                "*(undefined (*) [16])": {
                    "1": "data_structure_field"
                },
                "*(undefined4 *)": {
                    "1": "data_structure_field_2"
                },
                "*puVar2": {
                    "1": "first_element_of_new_entry"
                },
                "FUN_00109b52": {
                    "1": "initialize_dynamic_memory",
                    "2": "allocate_and_initialize",
                    "3": "initialize_data",
                    "4": "create_new_entry",
                    "6": "initialize_data_structure"
                },
                "ZEXT816": {
                    "1": "zero_extension"
                },
                "param_1": {
                    "1": "structure_address",
                    "2": "data_structure_ptr",
                    "4": "data_structure"
                },
                "param_2": {
                    "1": "str",
                    "12": "source_string",
                    "2": "string",
                    "4": "string_param",
                    "5": "input_string"
                },
                "param_3": {
                    "1": "input_value",
                    "2": "param3",
                    "4": "param_3",
                    "6": "additional_data"
                },
                "param_4": {
                    "1": "param4_value",
                    "13": "flag",
                    "2": "input_flag",
                    "3": "param4",
                    "5": "param_4"
                },
                "param_5": {
                    "1": "identifier",
                    "3": "param5",
                    "5": "param_5",
                    "6": "value"
                },
                "puVar2": {
                    "1": "object_ptr",
                    "2": "new_object",
                    "3": "dynamic_array",
                    "4": "allocated_memory",
                    "6": "new_entry"
                },
                "puVar2[1]": {
                    "1": "second_element_of_new_entry"
                },
                "uVar1": {
                    "1": "old_head_ptr",
                    "2": "previous_value",
                    "4": "old_entry"
                },
                "uVar3": {
                    "1": "str_duplicate",
                    "20": "duplicated_string"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                },
                "xstrdup": {
                    "1": "duplicate_string"
                }
            },
            "called": [
                "xmalloc",
                "xstrdup"
            ],
            "calling": [
                "FUN_00109dfe",
                "FUN_00109d97",
                "FUN_0010a377",
                "FUN_0010a0e9",
                "FUN_0010b800",
                "FUN_0010a424",
                "FUN_00109cf4",
                "FUN_00109e76",
                "FUN_0010a181",
                "FUN_0010a77a",
                "FUN_0010b948",
                "FUN_0010a2b9",
                "FUN_0010a69a",
                "FUN_0010e453",
                "FUN_00109ed3"
            ],
            "code": "\nundefined initialize_data_structure_00109b52(long data_structure,undefined8 source_string,undefined8 additional_data,undefined flag,\n                      undefined4 value)\n\n{\n  undefined8 old_entry;\n  undefined8 *new_entry;\n  undefined8 duplicated_string;\n  \n  new_entry = (undefined8 *)xmalloc(0x40);\n  duplicated_string = xstrdup(source_string);\n  new_entry[2] = additional_data;\n  *(undefined (*) [16])(new_entry + 4) = zero_extension(0);\n  *(undefined (*) [16])(new_entry + 6) = zero_extension(0);\n  old_entry = *(undefined8 *)(data_structure + 0x60);\n  *(undefined *)((long)new_entry + 0x1c) = flag;\n  *(undefined4 *)(new_entry + 3) = value;\n  *(undefined8 **)(data_structure + 0x60) = new_entry;\n  *new_entry = old_entry;\n  second_element_of_new_entry = duplicated_string;\n  return 1;\n}\n\n",
            "current_name": "initialize_data_structure_00109b52",
            "entrypoint": "0x00109b52",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109b52": "initialize_data_structure_00109b52",
                "ZEXT816": "zero_extension",
                "param_1": "data_structure",
                "param_2": "source_string",
                "param_3": "additional_data",
                "param_4": "flag",
                "param_5": "value",
                "puVar2": "new_entry",
                "puVar2[1]": "second_element_of_new_entry",
                "uVar1": "old_entry",
                "uVar3": "duplicated_string",
                "xmalloc": "allocate_memory",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109bbb": {
            "additional_data": {
                "FUN_00109bbb": {
                    "1": "append_to_end_with_semicolon",
                    "17": "append_semicolon_to_string",
                    "2": "add_semicolon_to_string",
                    "3": "check_and_append_semicolon"
                },
                "__s": {
                    "1": "str_ptr",
                    "12": "string_pointer",
                    "2": "string_to_append",
                    "4": "string",
                    "8": "string_ptr"
                },
                "param_1": {
                    "1": "data",
                    "2": "input_address",
                    "4": "object_address",
                    "8": "input"
                },
                "sVar1": {
                    "1": "str_len",
                    "23": "string_length"
                }
            },
            "called": [
                "strlen"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nbool append_semicolon_to_string_00109bbb(long input)\n\n{\n  char *string_pointer;\n  size_t string_length;\n  \n  if (*(long *)(input + 0x60) != 0) {\n    string_pointer = *(char **)(*(long *)(input + 0x60) + 0x30);\n    if (string_pointer != (char *)0x0) {\n      string_length = strlen(string_pointer);\n      *(undefined2 *)(string_pointer + string_length) = 0x3b;\n    }\n    return string_pointer != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "current_name": "append_semicolon_to_string_00109bbb",
            "entrypoint": "0x00109bbb",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109bbb": "append_semicolon_to_string_00109bbb",
                "__s": "string_pointer",
                "param_1": "input",
                "sVar1": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109be3": {
            "additional_data": {
                "(ulong)uVar3 * 0x10 + *(long *)(param_1 + 0x20)": {
                    "1": "address"
                },
                "*(uint *)(param_1 + 0x28)": {
                    "1": "length"
                },
                "*(uint *)(param_1 + 0x28) + 1": {
                    "1": "updated_count"
                },
                "*(uint *)(param_1 + 0x2c)": {
                    "1": "list_size_value"
                },
                "*(undefined4 *)(puVar2 + 1)": {
                    "1": "new_entry_data"
                },
                "*(undefined8 *)(param_1 + 0x20)": {
                    "1": "list_data_value"
                },
                "CONCAT71": {
                    "1": "create_return_value"
                },
                "CONCAT71((int7)((ulong)puVar2 >> 8),1)": {
                    "2": "return_value"
                },
                "FUN_00109be3": {
                    "1": "expand_and_insert_item",
                    "11": "expand_and_store_data",
                    "3": "expand_and_insert_data",
                    "4": "expand_and_add_to_buffer"
                },
                "param_1": {
                    "1": "item_list",
                    "2": "array",
                    "3": "data_structure",
                    "4": "buffer",
                    "7": "data"
                },
                "param_1 + 0x20": {
                    "1": "list_data"
                },
                "param_1 + 0x28": {
                    "1": "list_count"
                },
                "param_1 + 0x2c": {
                    "1": "list_size"
                },
                "param_2": {
                    "1": "value_to_add",
                    "16": "value",
                    "2": "data",
                    "3": "item"
                },
                "param_3": {
                    "1": "new_element_size",
                    "10": "size",
                    "2": "data",
                    "3": "value",
                    "4": "flag"
                },
                "puVar2": {
                    "1": "memory_pointer",
                    "2": "data_ptr",
                    "3": "insertion_point",
                    "4": "data_pointer"
                },
                "uVar1": {
                    "1": "new_memory_ptr",
                    "2": "new_array_ptr",
                    "3": "new_buffer",
                    "6": "realloc_result"
                },
                "uVar3": {
                    "1": "buffer_length",
                    "2": "current_index",
                    "21": "current_size"
                }
            },
            "called": [
                "xrealloc"
            ],
            "calling": [
                "FUN_0010d7d4",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 expand_and_store_data_00109be3(long data,undefined8 value,undefined4 size)\n\n{\n  undefined8 realloc_result;\n  undefined8 *data_pointer;\n  uint current_size;\n  \n  if (*(uint *)(data + 0x2c) <= *(uint *)(data + 0x28)) {\n    current_size = *(uint *)(data + 0x2c) + 10;\n    *(uint *)(data + 0x2c) = current_size;\n    realloc_result = xrealloc(*(undefined8 *)(data + 0x20),(ulong)current_size << 4);\n    *(undefined8 *)(data + 0x20) = realloc_result;\n  }\n  current_size = *(uint *)(data + 0x28);\n  data_pointer = (undefined8 *)((ulong)current_size * 0x10 + *(long *)(data + 0x20));\n  *data_pointer = value;\n  *(undefined4 *)(data_pointer + 1) = size;\n  *(uint *)(data + 0x28) = current_size + 1;\n  return create_return_value((int7)((ulong)data_pointer >> 8),1);\n}\n\n",
            "current_name": "expand_and_store_data_00109be3",
            "entrypoint": "0x00109be3",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT71": "create_return_value",
                "FUN_00109be3": "expand_and_store_data_00109be3",
                "param_1": "data",
                "param_2": "value",
                "param_3": "size",
                "puVar2": "data_pointer",
                "uVar1": "realloc_result",
                "uVar3": "current_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109c2e": {
            "additional_data": {
                "FUN_00109c2e": {
                    "1": "expand_and_store_data",
                    "2": "expand_and_fill_array",
                    "5": "expand_array",
                    "7": "resize_and_initialize_array",
                    "9": "resize_array"
                },
                "auVar7": {
                    "1": "return_value_struct",
                    "20": "return_value",
                    "4": "result_array"
                },
                "bVar6": {
                    "1": "flag_status",
                    "3": "byte_flag",
                    "4": "flag2",
                    "6": "flag",
                    "9": "is_zero"
                },
                "lVar1": {
                    "1": "new_buffer",
                    "2": "new_ptr",
                    "4": "new_array_ptr",
                    "5": "new_array"
                },
                "lVar3": {
                    "1": "counter",
                    "2": "count",
                    "3": "loop_counter",
                    "4": "remaining",
                    "6": "remaining_elements",
                    "7": "remaining_size"
                },
                "param_1": {
                    "1": "buffer",
                    "20": "array",
                    "3": "array_ptr",
                    "4": "array_pointer"
                },
                "param_2": {
                    "1": "data",
                    "2": "value_to_add",
                    "20": "value",
                    "3": "new_value",
                    "4": "element"
                },
                "param_3": {
                    "1": "current_size",
                    "18": "size",
                    "2": "index",
                    "3": "array_length"
                },
                "param_4": {
                    "1": "condition",
                    "30": "flag"
                },
                "param_5": {
                    "1": "flag_pointer",
                    "2": "data",
                    "4": "output",
                    "8": "result"
                },
                "param_6": {
                    "1": "aux_var",
                    "2": "data",
                    "3": "value",
                    "4": "extra_data",
                    "7": "result"
                },
                "plVar2": {
                    "1": "current_element_pointer",
                    "2": "array_element",
                    "6": "element_ptr",
                    "7": "element_pointer"
                },
                "puVar4": {
                    "1": "current_fill_element",
                    "2": "current_pointer",
                    "4": "current_ptr",
                    "5": "ptr",
                    "6": "current_element"
                },
                "uVar5": {
                    "1": "current_array_length",
                    "15": "current_size",
                    "3": "existing_size",
                    "6": "array_size"
                }
            },
            "called": [
                "xrealloc"
            ],
            "calling": [
                "FUN_00109d5c",
                "FUN_0010a69a"
            ],
            "code": "\nundefined  [16]\nresize_array_00109c2e(long array,long value,ulong size,int flag,undefined4 *result,\n            undefined8 result)\n\n{\n  long new_array_pointer;\n  long *element_pointer;\n  long remaining_size;\n  undefined *current_element;\n  ulong current_size;\n  byte is_zero;\n  undefined return_value [16];\n  \n  is_zero = 0;\n  size = size & 0xffffffff;\n  current_size = *(ulong *)(array + 0x1b0);\n  if (current_size <= size) {\n    if (current_size == 0) {\n      current_size = 10;\n    }\n    for (; current_size <= size; current_size = current_size * 2) {\n    }\n    new_array_pointer = xrealloc(*(undefined8 *)(array + 0x1a8),current_size * 0x18);\n    *(long *)(array + 0x1a8) = new_array_pointer;\n    current_element = (undefined *)(*(long *)(array + 0x1b0) * 0x18 + new_array_pointer);\n    for (remaining_size = (current_size - *(long *)(array + 0x1b0)) * 0x18; remaining_size != 0; remaining_size = remaining_size + -1) {\n      *current_element = 0;\n      current_element = current_element + (ulong)is_zero * -2 + 1;\n    }\n    *(ulong *)(array + 0x1b0) = current_size;\n  }\n  element_pointer = (long *)(size * 0x18 + *(long *)(array + 0x1a8));\n  if (*element_pointer == 0) {\n    new_array_pointer = *(long *)(array + 0x68);\n    *element_pointer = new_array_pointer;\n    *(long *)(array + 0x68) = new_array_pointer + 1;\n    element_pointer[1] = value;\n    *(int *)(element_pointer + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(element_pointer + 2) = 0;\n    *(undefined4 *)((long)element_pointer + 0x14) = *result;\n  }\n  else {\n    *result = *(undefined4 *)((long)element_pointer + 0x14);\n  }\n  return_value._8_8_ = result;\n  return_value._0_8_ = *element_pointer;\n  return return_value;\n}\n\n",
            "current_name": "resize_array_00109c2e",
            "entrypoint": "0x00109c2e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109c2e": "resize_array_00109c2e",
                "auVar7": "return_value",
                "bVar6": "is_zero",
                "lVar1": "new_array_pointer",
                "lVar3": "remaining_size",
                "param_1": "array",
                "param_2": "value",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "result",
                "param_6": "result",
                "plVar2": "element_pointer",
                "puVar4": "current_element",
                "uVar5": "current_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109cf4": {
            "additional_data": {
                "FUN_00109cf4": {
                    "1": "convert_and_initialize_data",
                    "2": "initialize_data",
                    "23": "initialize_data_structure",
                    "3": "initialize_and_process_data"
                },
                "local_3c": {
                    "1": "value_as_string",
                    "10": "value_string",
                    "2": "value_str",
                    "3": "data_string"
                },
                "param_1": {
                    "1": "input1",
                    "19": "data_structure",
                    "2": "input_param",
                    "3": "data_structure_ptr"
                },
                "param_2": {
                    "1": "param_b",
                    "15": "value",
                    "2": "arg2",
                    "4": "data_value"
                },
                "param_3": {
                    "1": "index",
                    "14": "flag",
                    "2": "flags"
                }
            },
            "called": [
                "sprintf",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00109dfe",
                "FUN_00109d5c",
                "FUN_00109d97",
                "FUN_00109d3e",
                "FUN_0010b948",
                "FUN_0010bba1",
                "FUN_0010b800",
                "FUN_0010e453",
                "FUN_00109ed3"
            ],
            "code": "\nvoid initialize_data_structure_00109cf4(undefined8 data_structure,undefined8 value,undefined4 flag)\n\n{\n  char value_string [28];\n  \n  sprintf(value_string,\"%ld\",value);\n  initialize_data_structure_00109cf4_00109b52(data_structure,value_string,value,0,flag);\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_00109cf4",
            "entrypoint": "0x00109cf4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109cf4": "initialize_data_structure_00109cf4",
                "local_3c": "value_string",
                "param_1": "data_structure",
                "param_2": "value",
                "param_3": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109d3e": {
            "additional_data": {
                "FUN_00109d3e": {
                    "1": "initialize_data",
                    "26": "initialize_data_structure"
                },
                "param_1": {
                    "1": "param1",
                    "2": "input_param",
                    "3": "data_structure_ptr",
                    "8": "param",
                    "9": "data_structure"
                },
                "param_2": {
                    "1": "size_param",
                    "24": "size"
                },
                "uVar1": {
                    "1": "data",
                    "12": "default_value",
                    "2": "initial_value",
                    "3": "data_value",
                    "4": "initialized_value"
                }
            },
            "called": [
                "FUN_00109cf4"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid initialize_data_structure_00109d3e(undefined8 data_structure,int size)\n\n{\n  undefined8 default_value;\n  \n  default_value = 0xfffffffffffffff0;\n  if (size - 1U < 8) {\n    default_value = *(undefined8 *)(&DAT_00121360 + (ulong)(size - 1U) * 8);\n  }\n  initialize_data_structure_00109d3e_00109cf4(data_structure,default_value,size);\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_00109d3e",
            "entrypoint": "0x00109d3e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109d3e": "initialize_data_structure_00109d3e",
                "param_1": "data_structure",
                "param_2": "size",
                "uVar1": "default_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109d5c": {
            "additional_data": {
                "FUN_00109d5c": {
                    "1": "initialize_resize_and_initialize",
                    "10": "initialize_and_resize_array",
                    "3": "initialize_data_array",
                    "6": "initialize_data_structure",
                    "8": "initialize_array"
                },
                "lVar1": {
                    "1": "resized_array_length",
                    "2": "resized_array_size",
                    "28": "array_size"
                },
                "param_1": {
                    "1": "data",
                    "18": "input_data",
                    "2": "input_parameter",
                    "9": "input_param"
                },
                "uVar2": {
                    "1": "data_structure",
                    "2": "initialized_data_structure",
                    "23": "result",
                    "5": "initialized_structure"
                }
            },
            "called": [
                "FUN_00109cf4",
                "FUN_00109c2e"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 initialize_and_resize_array_00109d5c(undefined8 input_data)\n\n{\n  long array_size;\n  undefined8 result;\n  \n  array_size = resize_array_00109c2e();\n  if (-1 < array_size) {\n    result = initialize_data_structure_00109cf4(input_data,array_size,0);\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_and_resize_array_00109d5c",
            "entrypoint": "0x00109d5c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109d5c": "initialize_and_resize_array_00109d5c",
                "lVar1": "array_size",
                "param_1": "input_data",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109d97": {
            "additional_data": {
                "FUN_00109d97": {
                    "1": "initialize_data",
                    "12": "initialize_or_increment",
                    "2": "initialize_or_increment_data",
                    "3": "initialize_data_structure",
                    "4": "initialize_or_increment_data_structure"
                },
                "lVar1": {
                    "1": "local_variable_1",
                    "18": "counter",
                    "2": "index",
                    "3": "current_value"
                },
                "local_40": {
                    "1": "local_variable_2",
                    "2": "output_string",
                    "23": "formatted_string",
                    "4": "message"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "input_parameter",
                    "3": "data",
                    "4": "data_structure",
                    "5": "data_ptr"
                }
            },
            "called": [
                "FUN_00109cf4",
                "sprintf",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_0010a424",
                "FUN_00112c1f"
            ],
            "code": "\nvoid initialize_or_increment_00109d97(long data_ptr)\n\n{\n  long counter;\n  char formatted_string [40];\n  \n  if (*(long *)(data_ptr + 0x70) != 0) {\n    initialize_data_structure_00109cf4(data_ptr,*(long *)(data_ptr + 0x70),0);\n    return;\n  }\n  counter = *(long *)(data_ptr + 0x68);\n  *(long *)(data_ptr + 0x68) = counter + 1;\n  sprintf(formatted_string,\"%ld=%ld\",counter,counter);\n  initialize_data_structure_00109b52(data_ptr,formatted_string,counter,0,0);\n  return;\n}\n\n",
            "current_name": "initialize_or_increment_00109d97",
            "entrypoint": "0x00109d97",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109d97": "initialize_or_increment_00109d97",
                "lVar1": "counter",
                "local_40": "formatted_string",
                "param_1": "data_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109dfe": {
            "additional_data": {
                "FUN_00109dfe": {
                    "1": "initialize_or_increment_structure",
                    "12": "initialize_or_increment",
                    "2": "initialize_data_structure",
                    "3": "initialize_or_increment_data",
                    "4": "initialize_or_increment_counter",
                    "6": "initialize_or_increment_data_structure"
                },
                "initialize_data_structure_00109b52": {
                    "1": "initialize_data_structure"
                },
                "initialize_data_structure_00109cf4": {
                    "1": "initialize_data_structure_conditional"
                },
                "lVar1": {
                    "1": "current_index",
                    "14": "counter",
                    "2": "index",
                    "3": "count",
                    "4": "current_value"
                },
                "local_40": {
                    "1": "message_buffer",
                    "2": "buffer",
                    "22": "formatted_string",
                    "3": "format_string"
                },
                "param_1": {
                    "1": "structure_pointer",
                    "2": "data_ptr",
                    "3": "counter",
                    "4": "data_structure_ptr",
                    "7": "data"
                }
            },
            "called": [
                "FUN_00109cf4",
                "sprintf",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid initialize_or_increment_00109dfe(long data)\n\n{\n  long counter;\n  char formatted_string [40];\n  \n  if (*(long *)(data + 0x70) != 0) {\n    initialize_data_structure_conditional(data,*(long *)(data + 0x70),0);\n    return;\n  }\n  counter = *(long *)(data + 0x68);\n  *(long *)(data + 0x68) = counter + 1;\n  *(long *)(data + 0x70) = counter;\n  sprintf(formatted_string,\"%ld=%ld\",counter,counter);\n  initialize_data_structure(data,formatted_string,counter,1,0);\n  return;\n}\n\n",
            "current_name": "initialize_or_increment_00109dfe",
            "entrypoint": "0x00109dfe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109dfe": "initialize_or_increment_00109dfe",
                "initialize_data_structure_00109b52": "initialize_data_structure",
                "initialize_data_structure_00109cf4": "initialize_data_structure_conditional",
                "lVar1": "counter",
                "local_40": "formatted_string",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109e76": {
            "additional_data": {
                "FUN_00109e76": {
                    "1": "increment_counter_and_initialize_data_structure",
                    "2": "increment_and_initialize",
                    "22": "update_data_structure"
                },
                "lVar1": {
                    "1": "previous_count",
                    "16": "current_value",
                    "2": "previous_value",
                    "3": "count",
                    "4": "counter"
                },
                "local_5a": {
                    "1": "output_string",
                    "2": "message",
                    "21": "formatted_string",
                    "6": "format_string"
                },
                "param_1": {
                    "1": "data_structure_pointer",
                    "10": "data_structure",
                    "2": "data",
                    "5": "data_pointer",
                    "8": "data_structure_ptr"
                },
                "param_2": {
                    "1": "count",
                    "30": "value"
                }
            },
            "called": [
                "sprintf",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid update_data_structure_00109e76(long data_structure,uint value)\n\n{\n  long current_value;\n  char formatted_string [58];\n  \n  current_value = *(long *)(data_structure + 0x68);\n  *(long *)(data_structure + 0x68) = current_value + 1;\n  sprintf(formatted_string,\"%ld=r%ld;%u;0;\",current_value,current_value,(ulong)value);\n  initialize_data_structure_00109b52(data_structure,formatted_string,current_value,1,value * 2);\n  return;\n}\n\n",
            "current_name": "update_data_structure_00109e76",
            "entrypoint": "0x00109e76",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109e76": "update_data_structure_00109e76",
                "lVar1": "current_value",
                "local_5a": "formatted_string",
                "param_1": "data_structure",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109ed3": {
            "additional_data": {
                "FUN_00109ed3": {
                    "1": "extract_and_initialize_data_structure",
                    "23": "process_data",
                    "3": "reverse_and_initialize"
                },
                "__ptr": {
                    "1": "ptr_variable",
                    "11": "extracted_ptr",
                    "2": "extracted_pointer",
                    "4": "extracted_data",
                    "6": "temp_ptr"
                },
                "__ptr1": {
                    "1": "extracted_and_freed_pointer1"
                },
                "__s": {
                    "1": "string",
                    "2": "formatted_str",
                    "6": "new_string",
                    "8": "formatted_string",
                    "9": "new_str"
                },
                "bVar12": {
                    "1": "temp_flag",
                    "2": "zero_byte",
                    "4": "byte_var"
                },
                "cVar3": {
                    "1": "is_initialized",
                    "15": "result",
                    "2": "init_result",
                    "3": "status"
                },
                "extract_and_free_ptr_00109b2f": {
                    "1": "extract_and_free_ptr"
                },
                "extract_and_free_ptr_00109b2f_2": {
                    "1": "extract_and_free_ptr_2"
                },
                "initialize_data_structure_00109b52": {
                    "1": "initialize_data_structure_2"
                },
                "initialize_data_structure_00109cf4": {
                    "1": "initialize_data_structure"
                },
                "lVar6": {
                    "1": "entry_number",
                    "14": "counter",
                    "2": "index",
                    "4": "temp_var"
                },
                "lVar9": {
                    "1": "loop_index",
                    "15": "loop_counter",
                    "2": "loop_count",
                    "3": "remaining_size",
                    "4": "loop_var"
                },
                "param_1": {
                    "1": "input_address",
                    "2": "data",
                    "3": "input_data"
                },
                "param_2": {
                    "1": "input2",
                    "2": "param_value",
                    "3": "data_type",
                    "7": "character",
                    "9": "flag"
                },
                "param_3": {
                    "1": "input_3",
                    "2": "param",
                    "3": "size",
                    "4": "param3",
                    "7": "flag"
                },
                "param_4": {
                    "1": "buffer",
                    "2": "dynamic_array",
                    "3": "array_ptr"
                },
                "param_5": {
                    "1": "length_ptr",
                    "2": "buffer_size",
                    "3": "size_ptr",
                    "6": "array_size"
                },
                "pcVar4": {
                    "1": "new_string",
                    "2": "input_string",
                    "6": "extracted_string",
                    "7": "string_ptr",
                    "8": "str"
                },
                "puVar11": {
                    "1": "ptr_array",
                    "11": "ptr",
                    "2": "pointer",
                    "3": "byte_ptr"
                },
                "sVar5": {
                    "1": "data_length",
                    "13": "string_length",
                    "2": "input_length",
                    "4": "str_length",
                    "7": "str_len"
                },
                "uVar1": {
                    "1": "num_1",
                    "2": "data_length",
                    "8": "size"
                },
                "uVar10": {
                    "1": "old_size",
                    "11": "current_size",
                    "2": "temp_size",
                    "3": "new_size"
                },
                "uVar2": {
                    "1": "num_2",
                    "11": "new_size",
                    "2": "temp_value"
                },
                "uVar7": {
                    "1": "return_val",
                    "10": "result",
                    "2": "function_result",
                    "3": "init_result",
                    "9": "return_value"
                },
                "uVar8": {
                    "1": "value_flag",
                    "2": "init_flag",
                    "3": "initialize_flag",
                    "5": "is_initialized",
                    "8": "flag"
                }
            },
            "called": [
                "strlen",
                "FUN_00109b2f",
                "FUN_00109cf4",
                "xmalloc",
                "free",
                "xrealloc",
                "sprintf",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_0010a0bd",
                "FUN_0010e5db",
                "FUN_0010a083",
                "FUN_0010a0d3",
                "FUN_0010a0a0"
            ],
            "code": "\nundefined8 process_data_00109ed3(long input,uint flag,undefined4 flag,long *data_array,ulong *array_size)\n\n{\n  ulong size;\n  ulong new_size;\n  char result;\n  char *str;\n  size_t string_length;\n  char *new_str;\n  long counter;\n  void *extracted_ptr;\n  undefined8 result;\n  undefined flag;\n  long loop_counter;\n  ulong current_size;\n  undefined *ptr;\n  byte byte_value;\n  \n  byte_value = 0;\n  counter = *(long *)(input + 0x60);\n  if (counter != 0) {\n    size = *(ulong *)(counter + 0x10);\n    if (((long)size < 1) || (data_array == (long *)0x0)) {\n      flag = *(undefined *)(counter + 0x1c);\n      str = (char *)extract_and_free_ptr(input);\n      string_length = strlen(str);\n      new_str = (char *)xmalloc(string_length + 2);\n      sprintf(new_str,\"%c%s\",(ulong)flag,str);\n      free(str);\n      counter = 0;\n    }\n    else {\n      current_size = *array_size;\n      if (current_size <= size) {\n        if (current_size == 0) {\n          current_size = 10;\n        }\n        for (; current_size <= size; current_size = current_size * 2) {\n        }\n        counter = xrealloc(*data_array,current_size * 8);\n        new_size = *array_size;\n        *data_array = counter;\n        ptr = (undefined *)(counter + new_size * 8);\n        for (loop_counter = (current_size - new_size) * 8; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *ptr = 0;\n          ptr = ptr + (ulong)byte_value * -2 + 1;\n        }\n        *array_size = current_size;\n      }\n      counter = *(long *)(*data_array + size * 8);\n      if ((counter != 0) && (*(char *)(*(long *)(input + 0x60) + 0x1c) == '\\0')) {\n        extracted_ptr = (void *)extract_and_free_ptr(input);\n        free(extracted_ptr);\n        result = initialize_data_structure(input,counter,flag);\n        return result;\n      }\n      counter = *(long *)(input + 0x68);\n      *(long *)(input + 0x68) = counter + 1;\n      str = (char *)extract_and_free_ptr(input);\n      string_length = strlen(str);\n      new_str = (char *)xmalloc(string_length + 0x14);\n      sprintf(new_str,\"%ld=%c%s\",counter,(ulong)flag,str);\n      free(str);\n      flag = 1;\n      *(long *)(*data_array + size * 8) = counter;\n    }\n    result = initialize_data_structure_2(input,new_str,counter,flag,flag);\n    if (result != '\\0') {\n      free(new_str);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_00109ed3",
            "entrypoint": "0x00109ed3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109ed3": "process_data_00109ed3",
                "__ptr": "extracted_ptr",
                "__s": "new_str",
                "bVar12": "byte_value",
                "cVar3": "result",
                "extract_and_free_ptr_00109b2f": "extract_and_free_ptr",
                "initialize_data_structure_00109b52": "initialize_data_structure_2",
                "initialize_data_structure_00109cf4": "initialize_data_structure",
                "lVar6": "counter",
                "lVar9": "loop_counter",
                "param_1": "input",
                "param_2": "flag",
                "param_3": "flag",
                "param_4": "data_array",
                "param_5": "array_size",
                "pcVar4": "str",
                "puVar11": "ptr",
                "sVar5": "string_length",
                "uVar1": "size",
                "uVar10": "current_size",
                "uVar2": "new_size",
                "uVar7": "result",
                "uVar8": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a083": {
            "additional_data": {
                "+ 0x178": {
                    "1": "data_ptr_1"
                },
                "+ 0x180": {
                    "1": "offset_2"
                },
                "+ 0x2a": {
                    "1": "offset"
                },
                "0x178": {
                    "1": "offset",
                    "2": "offset1",
                    "3": "offset_1"
                },
                "0x180": {
                    "1": "offset_plus_eight",
                    "2": "offset2",
                    "3": "offset_2"
                },
                "0x2a": {
                    "1": "constant_multiplier",
                    "3": "constant",
                    "4": "constant_value"
                },
                "4": {
                    "1": "step"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "FUN_0010a083": {
                    "1": "process_data_with_offset",
                    "2": "process_and_store_data",
                    "21": "process_data",
                    "4": "process_and_update_data"
                },
                "data + 0x178": {
                    "1": "data_offset"
                },
                "data + 0x180": {
                    "1": "data_offset2"
                },
                "data_ptr + 0x178": {
                    "1": "data_offset1"
                },
                "data_ptr + 0x180": {
                    "1": "data_offset2"
                },
                "param_1": {
                    "1": "data_offset",
                    "11": "data",
                    "2": "data_address",
                    "5": "data_ptr",
                    "6": "input_data"
                },
                "param_1 + 0x178": {
                    "1": "offset_data",
                    "2": "data_offset",
                    "3": "offset_1"
                },
                "param_1 + 0x180": {
                    "1": "data_length",
                    "2": "processed_data_end",
                    "3": "offset_2"
                },
                "param_2": {
                    "1": "constant_value"
                },
                "param_3": {
                    "1": "length"
                },
                "param_4": {
                    "1": "address_offset"
                },
                "param_5": {
                    "1": "address_offset2"
                },
                "process_data_00109ed3": {
                    "1": "perform_data_processing",
                    "3": "process_data_helper",
                    "8": "process_data"
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_0010a083(long data)\n\n{\n  process_data_0010a083(data,0x2a,4,data + 0x178,data + 0x180);\n  return;\n}\n\n",
            "current_name": "process_data_0010a083",
            "entrypoint": "0x0010a083",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a083": "process_data_0010a083",
                "param_1": "data",
                "process_data_00109ed3": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0a0": {
            "additional_data": {
                "0x198": {
                    "1": "offset_a",
                    "2": "data_offset_1",
                    "3": "offset1",
                    "6": "offset_1"
                },
                "0x1a0": {
                    "1": "result_address",
                    "2": "data_offset_2",
                    "3": "offset2",
                    "6": "offset_2"
                },
                "0x26": {
                    "1": "constant1",
                    "2": "data_length",
                    "3": "constant",
                    "4": "constant_value"
                },
                "4": {
                    "1": "constant_value_4",
                    "2": "constant_2"
                },
                "DAT_00109ed7": {
                    "1": "offset_1"
                },
                "DAT_00109ed8": {
                    "1": "offset_2"
                },
                "FUN_0010a0a0": {
                    "1": "process_and_handle_data",
                    "18": "process_data",
                    "5": "process_and_update_data",
                    "6": "process_and_store_data"
                },
                "PTR_00109ed3": {
                    "1": "process_data_func"
                },
                "data": {
                    "1": "data"
                },
                "param_1": {
                    "1": "data_chunk",
                    "10": "data",
                    "2": "input",
                    "4": "data_address",
                    "5": "input_data",
                    "7": "data_ptr"
                },
                "param_1 + 0x198": {
                    "1": "output_data_start",
                    "2": "data_offset_1"
                },
                "param_1 + 0x1a0": {
                    "1": "data_length",
                    "2": "data_offset_2"
                },
                "param_2": {
                    "1": "constant"
                },
                "param_3": {
                    "1": "length"
                },
                "param_4": {
                    "1": "address1"
                },
                "param_5": {
                    "1": "address2"
                },
                "process_data_00109ed3": {
                    "1": "data_processing_function",
                    "12": "process_data",
                    "2": "process_data_helper"
                },
                "var_1": {
                    "1": "first_offset"
                },
                "var_2": {
                    "1": "second_offset"
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_0010a0a0(long data)\n\n{\n  process_data_0010a0a0(data,0x26,4,data + 0x198,data + 0x1a0);\n  return;\n}\n\n",
            "current_name": "process_data_0010a0a0",
            "entrypoint": "0x0010a0a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0a0": "process_data_0010a0a0",
                "param_1": "data",
                "process_data_00109ed3": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0bd": {
            "additional_data": {
                "*(undefined4 *)(*(long *)(input + 0x60) + 0x18)": {
                    "1": "extracted_value"
                },
                "*(undefined4 *)(*(long *)(param_1 + 0x60) + 0x18)": {
                    "1": "memory_address",
                    "2": "offset",
                    "4": "ptr_value",
                    "5": "data_address"
                },
                "0": {
                    "1": "unused_variable",
                    "2": "unused_var_2"
                },
                "0x60": {
                    "1": "offset_value"
                },
                "0x6b": {
                    "1": "constant1",
                    "7": "constant_value",
                    "9": "constant"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "FUN_0010a0bd": {
                    "1": "process_data_with_parameters",
                    "2": "process_and_send_data",
                    "28": "process_data"
                },
                "param_1": {
                    "1": "param",
                    "18": "data",
                    "3": "input",
                    "6": "input_data"
                },
                "process_data_00109ed3": {
                    "1": "data_processing_function",
                    "4": "process_data",
                    "7": "process_data_helper"
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_0010a0bd(long data)\n\n{\n  process_data_0010a0bd_helper(data,0x6b,*(undefined4 *)(*(long *)(data + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "current_name": "process_data_0010a0bd",
            "entrypoint": "0x0010a0bd",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0bd": "process_data_0010a0bd",
                "param_1": "data",
                "process_data_00109ed3": "process_data_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0d3": {
            "additional_data": {
                "*(long *)(data_offset + 0x18)": {
                    "1": "result"
                },
                "*(long *)(param_1 + 0x60) + 0x18": {
                    "1": "address"
                },
                "*(long *)(ptr + 0x18)": {
                    "1": "data"
                },
                "*(undefined4 *)(*(long *)(param_1 + 0x60) + 0x18)": {
                    "1": "extracted_value",
                    "2": "data_value",
                    "3": "pointer_value"
                },
                "0": {
                    "1": "unused_2"
                },
                "0x18": {
                    "1": "sub_offset"
                },
                "0x42": {
                    "1": "flag",
                    "11": "constant",
                    "3": "constant_value"
                },
                "0x60": {
                    "1": "data_address",
                    "3": "offset"
                },
                "FUN_0010a0d3": {
                    "1": "process_and_return",
                    "2": "process_and_send_data",
                    "27": "process_data"
                },
                "UNKNOWN_1": {
                    "1": "offset"
                },
                "UNKNOWN_2": {
                    "1": "ptr"
                },
                "UNKNOWN_3": {
                    "1": "unknown"
                },
                "UNKNOWN_4": {
                    "1": "unknown"
                },
                "param_1": {
                    "1": "data_ptr",
                    "2": "input_param",
                    "21": "data",
                    "3": "input",
                    "4": "input_data"
                },
                "param_1 + 0x60": {
                    "1": "data_struct"
                },
                "param_2": {
                    "1": "constant"
                },
                "process_data_00109ed3": {
                    "1": "process_data2",
                    "14": "process_data_helper",
                    "2": "process_data_internal",
                    "6": "process_data"
                },
                "x18": {
                    "1": "value"
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_0010a0d3(long data)\n\n{\n  process_data_0010a0d3_helper(data,0x42,*(undefined4 *)(*(long *)(data + 0x60) + 0value),0,0);\n  return;\n}\n\n",
            "current_name": "process_data_0010a0d3",
            "entrypoint": "0x0010a0d3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0d3": "process_data_0010a0d3",
                "param_1": "data",
                "process_data_00109ed3": "process_data_helper",
                "x18": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0e9": {
            "additional_data": {
                "FUN_0010a0e9": {
                    "1": "initialize_and_return_result",
                    "11": "process_data",
                    "2": "execute_command",
                    "4": "initialize_data_structure",
                    "5": "process_request"
                },
                "__s": {
                    "1": "extracted_data",
                    "27": "extracted_string"
                },
                "__s_00": {
                    "1": "formatted_string_ptr",
                    "10": "formatted_string",
                    "4": "new_string",
                    "8": "modified_string"
                },
                "param_1": {
                    "1": "input1",
                    "2": "data",
                    "3": "data_structure",
                    "4": "request",
                    "8": "data_ptr"
                },
                "param_2": {
                    "1": "input2",
                    "16": "value1",
                    "2": "param1",
                    "3": "param_2",
                    "7": "param2"
                },
                "param_3": {
                    "1": "input3",
                    "16": "value2",
                    "2": "param2",
                    "3": "param_3",
                    "7": "param3"
                },
                "sVar3": {
                    "1": "length",
                    "25": "string_length",
                    "4": "extracted_string_length"
                },
                "uVar1": {
                    "1": "data",
                    "2": "extracted_value"
                },
                "uVar2": {
                    "1": "result_code",
                    "12": "result",
                    "2": "return_value"
                }
            },
            "called": [
                "FUN_00109b2f",
                "strlen",
                "xmalloc",
                "free",
                "sprintf",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 process_data_0010a0e9(long data_ptr,undefined8 value1,undefined8 value2)\n\n{\n  undefined extracted_value;\n  undefined4 result;\n  char *extracted_string;\n  size_t string_length;\n  char *formatted_string;\n  \n  extracted_value = *(undefined *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  result = *(undefined4 *)(*(long *)(data_ptr + 0x60) + 0x18);\n  extracted_string = (char *)extract_and_free_ptr_00109b2f();\n  string_length = strlen(extracted_string);\n  formatted_string = (char *)xmalloc(string_length + 100);\n  sprintf(formatted_string,\"r%s;%ld;%ld;\",extracted_string,value1,value2);\n  free(extracted_string);\n  result = initialize_data_structure_00109b52(data_ptr,formatted_string,0,extracted_value,result);\n  if ((char)result != '\\0') {\n    free(formatted_string);\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_0010a0e9",
            "entrypoint": "0x0010a0e9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0e9": "process_data_0010a0e9",
                "__s": "extracted_string",
                "__s_00": "formatted_string",
                "param_1": "data_ptr",
                "param_2": "value1",
                "param_3": "value2",
                "sVar3": "string_length",
                "uVar1": "extracted_value",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a181": {
            "additional_data": {
                "FUN_0010a181": {
                    "1": "reverse_and_initialize_data_structure",
                    "2": "generate_data",
                    "25": "process_data"
                },
                "__s": {
                    "1": "result_string",
                    "18": "string1",
                    "2": "first_string",
                    "7": "str1"
                },
                "__s_00": {
                    "1": "string_2",
                    "18": "string2",
                    "2": "second_string",
                    "7": "str2"
                },
                "__s_01": {
                    "1": "combined_string",
                    "11": "result_string",
                    "2": "final_string",
                    "4": "new_string",
                    "5": "result"
                },
                "cVar1": {
                    "1": "temp_char",
                    "3": "flag_char",
                    "4": "char1",
                    "7": "char_flag",
                    "9": "char_value"
                },
                "iVar2": {
                    "1": "int_value",
                    "2": "length",
                    "3": "var1",
                    "5": "int_value1",
                    "6": "int_var1"
                },
                "iVar3": {
                    "1": "int_value_2",
                    "2": "value2",
                    "3": "var2",
                    "5": "int_value2",
                    "6": "int_var2",
                    "7": "result"
                },
                "lVar7": {
                    "1": "long_value",
                    "24": "counter",
                    "4": "count"
                },
                "local_41": {
                    "1": "combined_flag",
                    "17": "local_flag",
                    "2": "flag2",
                    "4": "temp_flag"
                },
                "param_1": {
                    "1": "data_address",
                    "2": "data_structure",
                    "3": "input_data",
                    "4": "data_struct",
                    "5": "data",
                    "6": "data_ptr"
                },
                "param_2": {
                    "1": "start_range",
                    "11": "start_index",
                    "6": "start_value"
                },
                "param_3": {
                    "1": "end_pos",
                    "11": "end",
                    "6": "end_value"
                },
                "param_4": {
                    "31": "flag"
                },
                "sVar5": {
                    "1": "first_strlen",
                    "14": "length1",
                    "2": "str1_length",
                    "4": "len1"
                },
                "sVar6": {
                    "1": "str_len2",
                    "14": "length2",
                    "2": "length_2",
                    "4": "len2"
                },
                "uVar4": {
                    "1": "status",
                    "2": "return_val",
                    "23": "return_value",
                    "5": "result"
                }
            },
            "called": [
                "FUN_00109b2f",
                "strlen",
                "xmalloc",
                "free",
                "sprintf",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 process_data_0010a181(long data_ptr,long start,long end,byte flag)\n\n{\n  char char_value;\n  int int_var1;\n  int result;\n  undefined4 return_value;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *result_string;\n  long counter;\n  byte local_flag;\n  \n  char_value = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  string1 = (char *)extract_and_free_ptr_00109b2f();\n  local_flag = 1;\n  if (char_value == '\\0') {\n    local_flag = *(byte *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  }\n  int_var1 = *(int *)(*(long *)(data_ptr + 0x60) + 0x18);\n  string2 = (char *)extract_and_free_ptr_00109b2f(data_ptr);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  result_string = (char *)xmalloc(length1 + 100 + length2);\n  if (flag == 0) {\n    *result_string = '\\0';\n    counter = 0;\n    local_flag = local_flag & 1;\n  }\n  else {\n    counter = *(long *)(data_ptr + 0x68);\n    *(long *)(data_ptr + 0x68) = counter + 1;\n    sprintf(result_string,\"%ld=@S;\",counter);\n    local_flag = flag;\n  }\n  length1 = strlen(result_string);\n  sprintf(result_string + length1,\"ar%s;%ld;%ld;%s\",string1,start,end,string2);\n  free(string1);\n  free(string2);\n  result = 0;\n  if (start <= end) {\n    result = int_var1 * (((int)end - (int)start) + 1);\n  }\n  return_value = initialize_data_structure_00109b52(data_ptr,result_string,counter,local_flag,result);\n  if ((char)return_value != '\\0') {\n    free(result_string);\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_data_0010a181",
            "entrypoint": "0x0010a181",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a181": "process_data_0010a181",
                "__s": "string1",
                "__s_00": "string2",
                "__s_01": "result_string",
                "cVar1": "char_value",
                "iVar2": "int_var1",
                "iVar3": "result",
                "lVar7": "counter",
                "local_41": "local_flag",
                "param_1": "data_ptr",
                "param_2": "start",
                "param_3": "end",
                "param_4": "flag",
                "sVar5": "length1",
                "sVar6": "length2",
                "uVar4": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a2b9": {
            "additional_data": {
                "FUN_0010a2b9": {
                    "1": "convert_to_string",
                    "14": "process_data",
                    "2": "extract_and_initialize_data_structure"
                },
                "__s": {
                    "1": "extracted_data",
                    "2": "str_ptr",
                    "22": "extracted_string"
                },
                "__s_00": {
                    "1": "str2",
                    "13": "modified_string",
                    "2": "new_str_ptr",
                    "3": "allocated_string"
                },
                "auVar4": {
                    "1": "result_struct",
                    "2": "return_value",
                    "27": "result"
                },
                "cVar1": {
                    "1": "temp_char",
                    "11": "char_value",
                    "2": "character",
                    "5": "char1"
                },
                "lVar3": {
                    "1": "current_index",
                    "21": "counter",
                    "3": "index",
                    "4": "count"
                },
                "param_1": {
                    "1": "data_object",
                    "12": "data_ptr",
                    "2": "binary_address",
                    "3": "data"
                },
                "param_2": {
                    "1": "initialize",
                    "29": "flag"
                },
                "param_3": {
                    "1": "result1",
                    "2": "unused_param",
                    "3": "param1",
                    "4": "param_3",
                    "5": "arg1",
                    "6": "ptr1"
                },
                "param_4": {
                    "1": "input2",
                    "2": "result_ptr",
                    "3": "param_4",
                    "5": "arg2",
                    "6": "ptr2"
                },
                "sVar2": {
                    "1": "data_length",
                    "15": "string_length",
                    "2": "extracted_string_length",
                    "3": "length",
                    "4": "str_length"
                }
            },
            "called": [
                "strlen",
                "FUN_00109b2f",
                "xmalloc",
                "free",
                "sprintf",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] process_data_0010a2b9(long data_ptr,char flag,undefined8 ptr1,undefined8 ptr2)\n\n{\n  char char_value;\n  char *extracted_string;\n  size_t string_length;\n  char *modified_string;\n  long counter;\n  undefined result [16];\n  \n  char_value = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  extracted_string = (char *)extract_and_free_ptr_00109b2f();\n  string_length = strlen(extracted_string);\n  modified_string = (char *)xmalloc(string_length + 0x1e);\n  if (flag == '\\0') {\n    *modified_string = '\\0';\n    counter = 0;\n    flag = char_value;\n  }\n  else {\n    counter = *(long *)(data_ptr + 0x68);\n    *(long *)(data_ptr + 0x68) = counter + 1;\n    sprintf(modified_string,\"%ld=@S;\",counter);\n  }\n  string_length = strlen(modified_string);\n  sprintf(modified_string + string_length,\"S%s\",extracted_string);\n  free(extracted_string);\n  result._0_4_ = initialize_data_structure_00109b52(data_ptr,modified_string,counter,flag,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(modified_string);\n  }\n  result._8_8_ = ptr2;\n  return result;\n}\n\n",
            "current_name": "process_data_0010a2b9",
            "entrypoint": "0x0010a2b9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a2b9": "process_data_0010a2b9",
                "__s": "extracted_string",
                "__s_00": "modified_string",
                "auVar4": "result",
                "cVar1": "char_value",
                "lVar3": "counter",
                "param_1": "data_ptr",
                "param_2": "flag",
                "param_3": "ptr1",
                "param_4": "ptr2",
                "sVar2": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a377": {
            "additional_data": {
                "FUN_0010a377": {
                    "1": "construct_data_structure",
                    "12": "process_data",
                    "2": "combine_strings"
                },
                "__s": {
                    "1": "extracted_data",
                    "11": "string1",
                    "2": "extracted_string",
                    "3": "extracted_string1",
                    "4": "str1"
                },
                "__s_00": {
                    "1": "ptr2",
                    "11": "string2",
                    "2": "string_2",
                    "3": "extracted_string_2",
                    "4": "str2"
                },
                "__s_01": {
                    "1": "final_string",
                    "14": "combined_string",
                    "2": "new_string",
                    "3": "result",
                    "5": "concatenated_string"
                },
                "cVar1": {
                    "1": "check_value",
                    "19": "flag"
                },
                "param_1": {
                    "1": "data_address",
                    "2": "input_param",
                    "4": "input_data",
                    "6": "input",
                    "9": "data"
                },
                "sVar3": {
                    "1": "size1",
                    "14": "length1",
                    "3": "first_string_length",
                    "4": "len1"
                },
                "sVar4": {
                    "1": "target_length",
                    "14": "length2",
                    "3": "second_string_length",
                    "4": "length_2"
                },
                "uVar2": {
                    "1": "status",
                    "22": "result",
                    "6": "return_value"
                },
                "uVar5": {
                    "1": "is_flag_set",
                    "2": "is_null",
                    "4": "flag"
                }
            },
            "called": [
                "FUN_00109b2f",
                "strlen",
                "xmalloc",
                "free",
                "sprintf",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 process_data_0010a377(long data)\n\n{\n  char flag;\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *combined_string;\n  undefined flag;\n  \n  flag = 1;\n  flag = *(char *)(*(long *)(data + 0x60) + 0x1c);\n  string1 = (char *)extract_and_free_ptr_00109b2f();\n  if (flag == '\\0') {\n    flag = *(undefined *)(*(long *)(data + 0x60) + 0x1c);\n  }\n  string2 = (char *)extract_and_free_ptr_00109b2f(data);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  combined_string = (char *)xmalloc(length1 + 3 + length2);\n  sprintf(combined_string,\"@%s,%s\",string2,string1);\n  free(string2);\n  free(string1);\n  result = initialize_data_structure_00109b52(data,combined_string,0,flag,0);\n  if ((char)result != '\\0') {\n    free(combined_string);\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_0010a377",
            "entrypoint": "0x0010a377",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a377": "process_data_0010a377",
                "__s": "string1",
                "__s_00": "string2",
                "__s_01": "combined_string",
                "cVar1": "flag",
                "param_1": "data",
                "sVar3": "length1",
                "sVar4": "length2",
                "uVar2": "result",
                "uVar5": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a424": {
            "additional_data": {
                "FUN_0010a424": {
                    "1": "construct_data_structure",
                    "22": "process_data"
                },
                "__ptr": {
                    "1": "pointers_array",
                    "19": "ptr_array",
                    "2": "array_ptr"
                },
                "__ptr[lVar9]": {
                    "1": "ptr_array_value"
                },
                "__s": {
                    "1": "extracted_string2",
                    "16": "str2",
                    "2": "second_string",
                    "3": "ptr2",
                    "6": "string2"
                },
                "__s_00": {
                    "1": "new_char_ptr",
                    "2": "combined_str",
                    "3": "new_string",
                    "4": "result_string",
                    "5": "final_string",
                    "9": "result_str"
                },
                "bVar10": {
                    "1": "flag2",
                    "2": "temp_flag",
                    "4": "byte_flag",
                    "5": "loop_flag"
                },
                "bVar2": {
                    "1": "flag_value",
                    "2": "bit_value",
                    "3": "byte_val",
                    "4": "temp_byte",
                    "5": "byte_var",
                    "8": "byte_value"
                },
                "cVar1": {
                    "1": "initialization_status",
                    "2": "initialize_result",
                    "24": "result"
                },
                "iVar3": {
                    "1": "incremented_count",
                    "14": "index",
                    "2": "temp_int",
                    "4": "temp_var"
                },
                "lVar11": {
                    "1": "counter_2",
                    "2": "index2",
                    "3": "loop_index2",
                    "5": "loop_index"
                },
                "lVar9": {
                    "1": "counter",
                    "2": "i",
                    "3": "loop_counter",
                    "4": "loop_var",
                    "5": "loop_index",
                    "7": "index"
                },
                "param_1": {
                    "1": "data_address",
                    "2": "data_structure",
                    "3": "input_data",
                    "4": "data_pointer",
                    "8": "data",
                    "9": "data_ptr"
                },
                "param_2": {
                    "1": "is_initialized",
                    "27": "flag"
                },
                "param_3": {
                    "1": "num_items",
                    "19": "count",
                    "2": "length",
                    "6": "num_elements"
                },
                "param_4": {
                    "1": "additional_flag",
                    "2": "increment",
                    "3": "flag2",
                    "4": "condition",
                    "5": "increment_flag",
                    "6": "initialize_flag"
                },
                "pcVar5": {
                    "1": "string_a",
                    "16": "str1",
                    "2": "first_string",
                    "3": "ptr1",
                    "6": "string1"
                },
                "sVar7": {
                    "1": "first_string_len",
                    "2": "size1",
                    "9": "length1"
                },
                "sVar7 + lVar11": {
                    "1": "index_offset"
                },
                "sVar8": {
                    "1": "string_length_b",
                    "2": "size2",
                    "9": "length2"
                },
                "uVar12": {
                    "1": "bit_flag",
                    "2": "byte_value",
                    "3": "flag_value"
                },
                "uVar4": {
                    "1": "return_val",
                    "24": "return_value",
                    "6": "result"
                },
                "uVar6": {
                    "1": "temp_var",
                    "11": "value",
                    "12": "extracted_value",
                    "4": "temp_value"
                }
            },
            "called": [
                "strlen",
                "FUN_00109b2f",
                "FUN_00109d97",
                "xmalloc",
                "free",
                "sprintf",
                "strcpy",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 process_data_0010a424(long data_ptr,char flag,int count,char initialize_flag)\n\n{\n  char result;\n  byte byte_value;\n  int index;\n  undefined4 return_value;\n  char *str1;\n  undefined8 *ptr_array;\n  undefined8 extracted_value;\n  char *str2;\n  size_t len1;\n  size_t len2;\n  char *result_str;\n  long index;\n  byte loop_flag;\n  long loop_index;\n  undefined flag_value;\n  \n  if ((flag == '\\0') && (result = initialize_or_increment_00109d97(), result == '\\0')) {\n    return 0;\n  }\n  loop_flag = *(byte *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  str1 = (char *)extract_and_free_ptr_00109b2f(data_ptr);\n  if (count < 0) {\n    ptr_array = (undefined8 *)0x0;\n    count = 0;\nLAB_0010a582:\n    flag_value = 1;\n    if (loop_flag != 0) goto LAB_0010a596;\n  }\n  else {\n    if (count != 0) {\n      index = count + 1;\n      ptr_array = (undefined8 *)xmalloc((long)index * 8);\n      index = (long)(count + -1);\n      do {\n        byte_value = 1;\n        if (loop_flag == 0) {\n          byte_value = *(byte *)(*(long *)(data_ptr + 0x60) + 0x1c);\n        }\n        extracted_value = extract_and_free_ptr_00109b2f(data_ptr);\n        loop_flag = byte_value & 1;\n        ptr_array_value = extracted_value;\n        index = index + -1;\n      } while ((int)index != -1);\n      if (initialize_flag == '\\0') {\n        result = initialize_or_increment_00109d97(data_ptr);\n        if (result == '\\0') {\n          return 0;\n        }\n        byte_value = 1;\n        if (loop_flag == 0) {\n          byte_value = *(byte *)(*(long *)(data_ptr + 0x60) + 0x1c);\n        }\n        loop_flag = byte_value & 1;\n        extracted_value = extract_and_free_ptr_00109b2f(data_ptr);\n        ptr_array[(long)index + -1] = extracted_value;\n        count = index;\n      }\n      goto LAB_0010a582;\n    }\n    ptr_array = (undefined8 *)0x0;\n    if (initialize_flag != '\\0') goto LAB_0010a582;\n    ptr_array = (undefined8 *)xmalloc(8);\n    result = initialize_or_increment_00109d97(data_ptr);\n    if (result == '\\0') {\n      return 0;\n    }\n    if ((loop_flag != 0) || (*(char *)(*(long *)(data_ptr + 0x60) + 0x1c) != '\\0')) {\n      extracted_value = extract_and_free_ptr_00109b2f(data_ptr);\n      count = 1;\n      flag_value = 1;\n      *ptr_array = extracted_value;\n      goto LAB_0010a596;\n    }\n    extracted_value = extract_and_free_ptr_00109b2f(data_ptr);\n    count = 1;\n    *ptr_array = extracted_value;\n  }\n  flag_value = *(undefined *)(*(long *)(data_ptr + 0x60) + 0x1c);\nLAB_0010a596:\n  str2 = (char *)extract_and_free_ptr_00109b2f(data_ptr);\n  len1 = strlen(str1);\n  len2 = strlen(str2);\n  index = len1 + 10 + len2;\n  for (loop_index = 0; (int)loop_index < count; loop_index = loop_index + 1) {\n    len1 = strlen((char *)ptr_array[loop_index]);\n    index = index + len1;\n  }\n  result_str = (char *)xmalloc(index);\n  sprintf(result_str,\"#%s,%s\",str1,str2);\n  index = 0;\n  free(str1);\n  free(str2);\n  while( true ) {\n    len1 = strlen(result_str);\n    if (count <= (int)index) break;\n    *(undefined2 *)(result_str + len1) = 0x2c;\n    str1 = (char *)ptr_array_value;\n    index = index + 1;\n    strcpy(result_str + len1 + 1,str1);\n    free(str1);\n  }\n  *(undefined2 *)(result_str + len1) = 0x3b;\n  free(ptr_array);\n  return_value = initialize_data_structure_00109b52(data_ptr,result_str,0,flag_value,0);\n  if ((char)return_value == '\\0') {\n    return 0;\n  }\n  free(result_str);\n  return return_value;\n}\n\n",
            "current_name": "process_data_0010a424",
            "entrypoint": "0x0010a424",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a424": "process_data_0010a424",
                "__ptr": "ptr_array",
                "__ptr[lVar9]": "ptr_array_value",
                "__s": "str2",
                "__s_00": "result_str",
                "bVar10": "loop_flag",
                "bVar2": "byte_value",
                "cVar1": "result",
                "iVar3": "index",
                "lVar11": "loop_index",
                "lVar9": "index",
                "param_1": "data_ptr",
                "param_2": "flag",
                "param_3": "count",
                "param_4": "initialize_flag",
                "pcVar5": "str1",
                "sVar7": "len1",
                "sVar8": "len2",
                "uVar12": "flag_value",
                "uVar4": "return_value",
                "uVar6": "extracted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a69a": {
            "additional_data": {
                "FUN_0010a69a": {
                    "1": "initialize_structure",
                    "11": "initialize_data_structure",
                    "2": "initialize_and_allocate_data",
                    "4": "initialize_and_allocate_memory",
                    "5": "initialize_data"
                },
                "lVar2": {
                    "1": "allocated_memory",
                    "11": "resized_array",
                    "2": "resized_array_size",
                    "3": "resized_size",
                    "7": "array_size"
                },
                "local_60": {
                    "1": "local_string",
                    "13": "output_string",
                    "2": "string_buffer",
                    "4": "buffer",
                    "8": "formatted_string"
                },
                "param_1": {
                    "1": "input_ptr",
                    "3": "data",
                    "4": "data_structure_ptr",
                    "9": "data_ptr"
                },
                "param_2": {
                    "1": "data_length",
                    "2": "ptr",
                    "5": "param_2",
                    "7": "param2"
                },
                "param_3": {
                    "1": "condition_flag",
                    "2": "is_resized",
                    "4": "resize_flag",
                    "5": "array_size",
                    "6": "size",
                    "9": "flag"
                },
                "param_4": {
                    "1": "char_val",
                    "12": "flag",
                    "2": "is_null",
                    "3": "char_flag"
                },
                "param_5": {
                    "1": "integer_flag",
                    "2": "number",
                    "20": "value",
                    "3": "uint_value"
                },
                "sVar3": {
                    "1": "prefix_length",
                    "15": "string_length",
                    "9": "length"
                },
                "uVar1": {
                    "2": "success_flag",
                    "24": "result",
                    "4": "return_value"
                },
                "uVar4": {
                    "1": "malloc_ptr",
                    "2": "new_pointer",
                    "20": "allocated_memory",
                    "4": "allocated_ptr"
                },
                "uVar5": {
                    "1": "is_array_resized",
                    "15": "is_resized",
                    "2": "is_initialized",
                    "3": "flag"
                }
            },
            "called": [
                "strlen",
                "xmalloc",
                "FUN_00109c2e",
                "sprintf",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_0010a83e",
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 initialize_data_structure_0010a69a(long data_structure,undefined8 param2,int flag,char flag,uint value)\n\n{\n  undefined4 result;\n  long resized_array;\n  size_t string_length;\n  undefined8 allocated_memory;\n  undefined is_resized;\n  char output_string [48];\n  \n  if (flag == 0) {\n    output_string[0] = '\\0';\n    is_resized = 0;\n    resized_array = 0;\n  }\n  else {\n    resized_array = resize_array_00109c2e();\n    if (resized_array < 0) {\n      return 0;\n    }\n    is_resized = 1;\n    sprintf(output_string,\"%ld=\",resized_array);\n  }\n  string_length = strlen(output_string);\n  sprintf(output_string + string_length,\"%c%u\",(ulong)((-(uint)(flag == '\\0') & 2) + 0x73),(ulong)value);\n  result = initialize_data_structure_0010a69a_00109b52(data_structure,output_string,resized_array,is_resized,value);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  resized_array = *(long *)(data_structure + 0x60);\n  allocated_memory = xmalloc(1);\n  *(undefined8 *)(resized_array + 0x20) = allocated_memory;\n  **(undefined **)(*(long *)(data_structure + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "current_name": "initialize_data_structure_0010a69a",
            "entrypoint": "0x0010a69a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a69a": "initialize_data_structure_0010a69a",
                "lVar2": "resized_array",
                "local_60": "output_string",
                "param_1": "data_structure",
                "param_2": "param2",
                "param_3": "flag",
                "param_4": "flag",
                "param_5": "value",
                "sVar3": "string_length",
                "uVar1": "result",
                "uVar4": "allocated_memory",
                "uVar5": "is_resized"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a77a": {
            "additional_data": {
                "FUN_0010a77a": {
                    "1": "process_entry",
                    "15": "process_data",
                    "2": "parse_and_initialize_data",
                    "7": "initialize_data_structure"
                },
                "__s": {
                    "1": "source",
                    "15": "string1",
                    "2": "string_ptr",
                    "3": "string1_ptr",
                    "4": "source_string"
                },
                "__s_00": {
                    "1": "str2",
                    "12": "string2",
                    "13": "extracted_string",
                    "2": "string2_ptr"
                },
                "__s_01": {
                    "1": "combined_str",
                    "12": "combined_string",
                    "2": "new_string",
                    "4": "result_string",
                    "7": "concatenated_string"
                },
                "lVar2": {
                    "1": "source_ptr",
                    "3": "structure_ptr",
                    "4": "data_structure_ptr",
                    "5": "data_ptr"
                },
                "param_1": {
                    "1": "input_value",
                    "2": "data_ptr",
                    "3": "input_param",
                    "5": "input",
                    "7": "input_data",
                    "9": "data"
                },
                "sVar5": {
                    "1": "extracted_string_len",
                    "10": "length1",
                    "2": "len1",
                    "8": "extracted_string_length"
                },
                "sVar6": {
                    "1": "source_string_len",
                    "10": "length2",
                    "2": "length_string1",
                    "3": "source_string_length"
                },
                "uVar1": {
                    "1": "param1_value",
                    "2": "char1",
                    "4": "char_value",
                    "6": "flag"
                },
                "uVar3": {
                    "1": "param3_value",
                    "2": "long_value",
                    "3": "value1",
                    "7": "value"
                },
                "uVar4": {
                    "14": "result",
                    "15": "return_value",
                    "2": "return_val"
                }
            },
            "called": [
                "strlen",
                "FUN_00109b2f",
                "xmalloc",
                "free",
                "sprintf",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 process_data_0010a77a(long data)\n\n{\n  undefined flag;\n  long data_ptr;\n  char *string1;\n  undefined8 value;\n  undefined4 return_value;\n  char *extracted_string;\n  size_t length1;\n  size_t length2;\n  char *combined_string;\n  \n  data_ptr = *(long *)(data + 0x60);\n  if ((data_ptr != 0) && (string1 = *(char **)(data_ptr + 0x20), string1 != (char *)0x0)) {\n    return_value = *(undefined4 *)(data_ptr + 0x18);\n    flag = *(undefined *)(data_ptr + 0x1c);\n    value = *(undefined8 *)(data_ptr + 0x10);\n    extracted_string = (char *)extract_and_free_ptr_00109b2f();\n    length1 = strlen(extracted_string);\n    length2 = strlen(string1);\n    combined_string = (char *)xmalloc(length1 + 2 + length2);\n    sprintf(combined_string,\"%s%s;\",extracted_string,string1);\n    free(extracted_string);\n    free(string1);\n    return_value = initialize_data_structure_00109b52(data,combined_string,value,flag,return_value);\n    if ((char)return_value != '\\0') {\n      free(combined_string);\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_0010a77a",
            "entrypoint": "0x0010a77a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a77a": "process_data_0010a77a",
                "__s": "string1",
                "__s_00": "extracted_string",
                "__s_01": "combined_string",
                "lVar2": "data_ptr",
                "param_1": "data",
                "sVar5": "length1",
                "sVar6": "length2",
                "uVar1": "flag",
                "uVar3": "value",
                "uVar4": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a83e": {
            "additional_data": {
                "FUN_0010a83e": {
                    "1": "parse_data_and_initialize",
                    "18": "process_data",
                    "2": "restructure_data"
                },
                "__s": {
                    "1": "string",
                    "2": "extracted_data",
                    "3": "str1",
                    "4": "string_ptr",
                    "5": "extracted_string",
                    "8": "string1"
                },
                "__s_00": {
                    "1": "formatted_string_ptr",
                    "2": "new_str",
                    "3": "new_string_ptr",
                    "6": "formatted_string",
                    "8": "string2"
                },
                "cVar3": {
                    "1": "flag_char",
                    "2": "flag_value",
                    "5": "char_flag",
                    "7": "char_value"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "param_1": {
                    "1": "input_memory",
                    "11": "data_ptr",
                    "2": "data",
                    "3": "arg1"
                },
                "param_2": {
                    "1": "data_length",
                    "2": "input_data",
                    "3": "param_ptr"
                },
                "param_3": {
                    "1": "size_1",
                    "2": "param1",
                    "3": "param_3",
                    "4": "size_param"
                },
                "param_4": {
                    "1": "var4",
                    "2": "flag_param",
                    "3": "arg4",
                    "6": "param_4",
                    "7": "flag"
                },
                "param_5": {
                    "1": "address_1",
                    "2": "param3",
                    "3": "mask",
                    "6": "param_5"
                },
                "param_6": {
                    "1": "param_flag1",
                    "10": "flag_1",
                    "2": "flag2",
                    "3": "is_flag_set",
                    "8": "flag1"
                },
                "param_7": {
                    "1": "flag_param_2",
                    "10": "flag_2",
                    "2": "is_value_set",
                    "3": "arg7",
                    "8": "flag2"
                },
                "sVar2": {
                    "1": "data_length",
                    "17": "string_length",
                    "3": "str_length",
                    "4": "length"
                },
                "sprintf": {
                    "1": "string_formatting"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "uVar1": {
                    "1": "status",
                    "23": "result",
                    "3": "return_value"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_00109b2f",
                "strlen",
                "xmalloc",
                "free",
                "FUN_0010a69a",
                "sprintf"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4\nprocess_data_0010a83e(long data_ptr,undefined8 arg2,ulong size,undefined flag,ulong param_5,\n            byte flag_1,byte flag_2)\n\n{\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t string_length;\n  char char_value;\n  \n  if (((flag_2 ^ 1) & flag_1) == 0) {\n    string1 = (char *)0x0;\n    char_value = '\\0';\n  }\n  else {\n    char_value = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n    string1 = (char *)extract_and_free_ptr_00109b2f();\n    param_5 = param_5 & 0xffffffff;\n    size = size & 0xffffffff;\n  }\n  result = initialize_data_structure_0010a69a(data_ptr,arg2,size,flag,param_5);\n  if ((char)result != '\\0') {\n    if (flag_1 == 0) {\n      return result;\n    }\n    if (flag_2 == 0) {\n      if (string1 == (char *)0x0) {\n        return 0;\n      }\n      string_length = strlen(string1);\n      string2 = (char *)xmalloc(string_length + 3);\n      sprintf(string2,\"~%%%s\",string1);\n      free(string1);\n      if (char_value != '\\0') {\n        *(undefined *)(*(long *)(data_ptr + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(data_ptr + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      string2 = (char *)xmalloc(0x14);\n      sprintf(string2,\"~%%%ld\",*(undefined8 *)(*(long *)(data_ptr + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(data_ptr + 0x60) + 0x38) = string2;\n    return result;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_0010a83e",
            "entrypoint": "0x0010a83e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a83e": "process_data_0010a83e",
                "__s": "string1",
                "__s_00": "string2",
                "cVar3": "char_value",
                "free": "release_memory",
                "param_1": "data_ptr",
                "param_2": "arg2",
                "param_3": "size",
                "param_4": "flag",
                "param_6": "flag_1",
                "param_7": "flag_2",
                "sVar2": "string_length",
                "sprintf": "format_string",
                "strlen": "get_string_length",
                "uVar1": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a94e": {
            "additional_data": {
                "FUN_0010a94e": {
                    "1": "construct_url",
                    "2": "update_config",
                    "5": "generate_formatted_string"
                },
                "__s": {
                    "1": "str",
                    "19": "extracted_string",
                    "3": "server_address",
                    "4": "extracted_data"
                },
                "cVar1": {
                    "1": "char_val",
                    "3": "config_flag",
                    "5": "flag_value",
                    "6": "flag_char"
                },
                "lVar2": {
                    "1": "ptr2",
                    "2": "ptr",
                    "3": "config_ptr"
                },
                "param_1": {
                    "1": "url_context",
                    "2": "data_pointer",
                    "4": "param"
                },
                "param_2": {
                    "1": "file_name",
                    "2": "input1",
                    "6": "string1",
                    "7": "username"
                },
                "param_3": {
                    "1": "data",
                    "2": "str2",
                    "6": "string2",
                    "7": "password"
                },
                "param_4": {
                    "1": "encryption_flag",
                    "18": "flag",
                    "2": "option"
                },
                "pcVar7": {
                    "1": "request_string",
                    "2": "existing_string",
                    "3": "url",
                    "6": "formatted_string"
                },
                "pcVar9": {
                    "1": "param3_str",
                    "12": "flag_string",
                    "3": "option_string",
                    "8": "flag_str"
                },
                "sVar3": {
                    "1": "existing_value_length",
                    "2": "url_length",
                    "3": "len1",
                    "5": "length1"
                },
                "sVar4": {
                    "1": "data_length",
                    "3": "len2",
                    "5": "length2"
                },
                "sVar5": {
                    "1": "extracted_string_len",
                    "2": "extracted_data_length",
                    "3": "len3",
                    "5": "length3",
                    "7": "extracted_string_length"
                },
                "sVar6": {
                    "1": "param2_length",
                    "3": "len4",
                    "4": "password_length",
                    "5": "length4"
                },
                "uVar8": {
                    "1": "success_flag",
                    "23": "result",
                    "7": "return_value"
                }
            },
            "called": [
                "strlen",
                "FUN_00109b2f",
                "xmalloc",
                "abort",
                "free",
                "sprintf"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 generate_formatted_string_0010a94e(long param,char *username,char *password,int flag)\n\n{\n  char flag;\n  long config_ptr;\n  char *extracted_string;\n  size_t length1;\n  size_t username_length;\n  size_t extracted_string_length;\n  size_t length4;\n  char *formatted_string;\n  undefined8 result;\n  char *flag_string;\n  \n  flag = *(char *)(*(long *)(param + 0x60) + 0x1c);\n  extracted_string = (char *)extract_and_free_ptr_00109b2f();\n  formatted_string = *(char **)(*(long *)(param + 0x60) + 0x20);\n  if (formatted_string == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    length1 = strlen(formatted_string);\n    username_length = strlen(username);\n    extracted_string_length = strlen(extracted_string);\n    length4 = strlen(password);\n    formatted_string = (char *)xmalloc(length1 + 10 + username_length + extracted_string_length + length4);\n    if (flag == 1) {\n      flag_string = \"/1\";\n    }\n    else {\n      flag_string = \"/0\";\n      if ((flag != 2) && (flag_string = \"\", flag != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(formatted_string,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(param + 0x60) + 0x20),username,flag_string,\n            extracted_string,password,*(long *)(param + 0x60));\n    free(*(void **)(*(long *)(param + 0x60) + 0x20));\n    config_ptr = *(long *)(param + 0x60);\n    *(char **)(config_ptr + 0x20) = formatted_string;\n    if (flag != '\\0') {\n      *(undefined *)(config_ptr + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)config_ptr >> 8),1);\n  }\n  return result;\n}\n\n",
            "current_name": "generate_formatted_string_0010a94e",
            "entrypoint": "0x0010a94e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a94e": "generate_formatted_string_0010a94e",
                "__s": "extracted_string",
                "cVar1": "flag",
                "lVar2": "config_ptr",
                "param_1": "param",
                "param_2": "username",
                "param_3": "password",
                "param_4": "flag",
                "pcVar7": "formatted_string",
                "pcVar9": "flag_string",
                "sVar3": "length1",
                "sVar4": "username_length",
                "sVar5": "extracted_string_length",
                "sVar6": "length4",
                "uVar8": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010aa53": {
            "additional_data": {
                "FUN_0010aa53": {
                    "1": "create_log_entry",
                    "2": "extract_and_store_data",
                    "3": "parse_and_store_data",
                    "8": "process_data"
                },
                "__s": {
                    "1": "string1",
                    "2": "extracted_data",
                    "20": "extracted_string",
                    "3": "string"
                },
                "cVar1": {
                    "1": "previous_flag",
                    "11": "flag_value",
                    "2": "char_value",
                    "3": "flag_char",
                    "5": "flag"
                },
                "cVar3": {
                    "1": "switch_char",
                    "2": "mode_value",
                    "3": "flag_value",
                    "4": "mode_char"
                },
                "lVar2": {
                    "1": "data_struct_ptr",
                    "2": "struct_address",
                    "3": "data_structure_ptr",
                    "6": "data_ptr"
                },
                "lVar7": {
                    "1": "structure_ptr_2",
                    "14": "realloc_ptr",
                    "2": "realloc_result",
                    "4": "realloc_data"
                },
                "param_1": {
                    "1": "object_pointer",
                    "2": "data",
                    "3": "input_data",
                    "5": "input",
                    "6": "data_structure"
                },
                "param_2": {
                    "1": "extracted_value",
                    "20": "value",
                    "3": "param_value",
                    "4": "data"
                },
                "param_3": {
                    "1": "indicator",
                    "2": "flag_char",
                    "20": "flag",
                    "4": "character"
                },
                "param_4": {
                    "1": "action",
                    "11": "mode",
                    "2": "type",
                    "3": "status",
                    "6": "option"
                },
                "pcVar6": {
                    "1": "new_string_ptr",
                    "2": "dynamic_string",
                    "4": "new_string",
                    "7": "formatted_data",
                    "9": "formatted_string"
                },
                "sVar5": {
                    "1": "source_length",
                    "2": "data_length",
                    "22": "string_length"
                },
                "uVar10": {
                    "1": "num_pointers",
                    "2": "index2",
                    "8": "last_index"
                },
                "uVar4": {
                    "1": "loop_index",
                    "4": "index",
                    "6": "counter",
                    "8": "loop_counter"
                },
                "uVar8": {
                    "14": "result",
                    "2": "success_flag",
                    "7": "success",
                    "8": "return_value"
                },
                "uVar9": {
                    "1": "loop_index",
                    "14": "index",
                    "2": "loop_var1",
                    "4": "loop_counter",
                    "6": "counter"
                }
            },
            "called": [
                "strlen",
                "FUN_00109b2f",
                "xmalloc",
                "abort",
                "free",
                "xrealloc",
                "sprintf"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 format_and_store_data_0010aa53(long data_structure,undefined8 value,char flag,int mode)\n\n{\n  char flag_value;\n  long data_ptr;\n  char mode_char;\n  uint loop_counter;\n  char *extracted_string;\n  size_t string_length;\n  char *formatted_string;\n  long realloc_ptr;\n  undefined8 result;\n  ulong index;\n  ulong last_index;\n  \n  flag_value = *(char *)(*(long *)(data_structure + 0x60) + 0x1c);\n  extracted_string = (char *)extract_and_free_ptr_00109b2f();\n  string_length = strlen(extracted_string);\n  formatted_string = (char *)xmalloc(string_length + 0x19);\n  *formatted_string = flag + '0';\n  if (mode == 1) {\n    mode_char = '1';\n  }\n  else {\n    mode_char = '0';\n    if ((mode != 2) && (mode_char = '2', mode != 0)) {\n                    \n      abort();\n    }\n  }\n  formatted_string[1] = mode_char;\n  sprintf(formatted_string + 2,\"%ld,%s;\",value);\n  free(extracted_string);\n  data_ptr = *(long *)(data_structure + 0x60);\n  result = 0;\n  if ((data_ptr != 0) && (*(long *)(data_ptr + 0x20) != 0)) {\n    data_ptr = *(long *)(data_ptr + 0x28);\n    last_index = 0;\n    if (data_ptr != 0) {\n      loop_counter = 0;\n      do {\n        index = (ulong)loop_counter;\n        last_index = (ulong)loop_counter;\n        loop_counter = loop_counter + 1;\n      } while (*(long *)(data_ptr + index * 8) != 0);\n    }\n    realloc_ptr = xrealloc(data_ptr,(ulong)((int)last_index + 2) << 3);\n    *(char **)(realloc_ptr + last_index * 8) = formatted_string;\n    *(undefined8 *)(realloc_ptr + (ulong)((int)last_index + 1) * 8) = 0;\n    data_ptr = *(long *)(data_structure + 0x60);\n    *(long *)(data_ptr + 0x28) = realloc_ptr;\n    if (flag_value != '\\0') {\n      *(undefined *)(data_ptr + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "format_and_store_data_0010aa53",
            "entrypoint": "0x0010aa53",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010aa53": "format_and_store_data_0010aa53",
                "__s": "extracted_string",
                "cVar1": "flag_value",
                "cVar3": "mode_char",
                "lVar2": "data_ptr",
                "lVar7": "realloc_ptr",
                "param_1": "data_structure",
                "param_2": "value",
                "param_3": "flag",
                "param_4": "mode",
                "pcVar6": "formatted_string",
                "sVar5": "string_length",
                "uVar10": "last_index",
                "uVar4": "loop_counter",
                "uVar8": "result",
                "uVar9": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ab4d": {
            "additional_data": {
                "FUN_0010ab4d": {
                    "1": "append_string_with_delimiter",
                    "2": "concatenate_strings",
                    "3": "append_string_to_data",
                    "6": "append_string_to_buffer"
                },
                "auVar3": {
                    "1": "return_buffer",
                    "20": "result",
                    "4": "result1"
                },
                "auVar7": {
                    "1": "output_var2",
                    "12": "return_value",
                    "2": "result",
                    "4": "result2",
                    "5": "new_result"
                },
                "lVar2": {
                    "1": "buffer_ptr_copy",
                    "2": "buffer_ptr2",
                    "3": "ptr2"
                },
                "param_1": {
                    "1": "object",
                    "2": "data_struct_ptr",
                    "3": "buffer",
                    "5": "base_address"
                },
                "param_2": {
                    "1": "string1",
                    "2": "new_string",
                    "3": "str",
                    "5": "string_to_append",
                    "6": "input_string"
                },
                "param_3": {
                    "1": "unused_1",
                    "2": "unused",
                    "4": "param3",
                    "5": "unused_param"
                },
                "param_4": {
                    "1": "input2",
                    "2": "flag",
                    "4": "param4"
                },
                "pcVar5": {
                    "1": "data",
                    "13": "existing_string",
                    "4": "existing_buffer"
                },
                "sVar4": {
                    "1": "message_length",
                    "2": "new_string_length",
                    "3": "str_len1",
                    "6": "input_length",
                    "8": "string_length"
                },
                "sVar6": {
                    "1": "existing_buffer_len",
                    "12": "existing_string_length",
                    "2": "str_len2",
                    "3": "existing_buffer_length"
                },
                "uVar1": {
                    "1": "buffer",
                    "2": "struct_field1",
                    "3": "buffer_ptr"
                }
            },
            "called": [
                "strlen",
                "xmalloc",
                "xrealloc",
                "sprintf"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] append_string_to_buffer_0010ab4d(long base_address,char *string,undefined8 unused_param,undefined8 param4)\n\n{\n  ulong buffer_ptr;\n  long ptr2;\n  undefined result [16];\n  size_t string_length;\n  char *existing_string;\n  size_t existing_string_length;\n  undefined return_value [16];\n  \n  buffer_ptr = *(ulong *)(base_address + 0x60);\n  if ((buffer_ptr != 0) && (*(long *)(buffer_ptr + 0x20) != 0)) {\n    existing_string = *(char **)(buffer_ptr + 0x30);\n    string_length = strlen(string);\n    if (existing_string == (char *)0x0) {\n      existing_string = (char *)xmalloc(string_length + 3);\n      *existing_string = '\\0';\n    }\n    else {\n      existing_string_length = strlen(existing_string);\n      existing_string = (char *)xrealloc(existing_string,string_length + 4 + existing_string_length);\n    }\n    string_length = strlen(existing_string);\n    sprintf(existing_string + string_length,\"%s::\",string);\n    ptr2 = *(long *)(base_address + 0x60);\n    *(char **)(ptr2 + 0x30) = existing_string;\n    return_value._1_7_ = (undefined7)((ulong)ptr2 >> 8);\n    return_value[0] = 1;\n    return_value._8_8_ = param4;\n    return return_value;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = buffer_ptr;\n  return result << 0x40;\n}\n\n",
            "current_name": "append_string_to_buffer_0010ab4d",
            "entrypoint": "0x0010ab4d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ab4d": "append_string_to_buffer_0010ab4d",
                "auVar3": "result",
                "auVar7": "return_value",
                "lVar2": "ptr2",
                "param_1": "base_address",
                "param_2": "string",
                "param_3": "unused_param",
                "param_4": "param4",
                "pcVar5": "existing_string",
                "sVar4": "string_length",
                "sVar6": "existing_string_length",
                "uVar1": "buffer_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010abdd": {
            "additional_data": {
                "FUN_0010abdd": {
                    "1": "updated_function",
                    "13": "process_data",
                    "3": "update_record"
                },
                "__s": {
                    "1": "str2",
                    "2": "additional_info",
                    "3": "ptr4",
                    "4": "str3"
                },
                "bVar3": {
                    "1": "byte_var",
                    "2": "temp_byte",
                    "3": "temp_flag",
                    "6": "byte_val"
                },
                "cVar10": {
                    "1": "character1",
                    "19": "char1",
                    "2": "char_var1",
                    "3": "temp_char1"
                },
                "cVar11": {
                    "1": "char_value2",
                    "19": "char2",
                    "2": "char_var2",
                    "3": "temp_char2"
                },
                "lVar1": {
                    "1": "ptr2",
                    "2": "record_ptr",
                    "4": "ptr1"
                },
                "local_52": {
                    "1": "local_var",
                    "2": "temp_byte",
                    "3": "byte_value",
                    "4": "local_flag",
                    "5": "byte1",
                    "8": "local_byte"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "data_address",
                    "3": "data",
                    "6": "data_ptr"
                },
                "param_2": {
                    "1": "data",
                    "14": "string1",
                    "2": "new_value",
                    "4": "str1"
                },
                "param_3": {
                    "1": "int_value",
                    "2": "input_length",
                    "3": "flag",
                    "4": "num1",
                    "9": "length"
                },
                "param_4": {
                    "1": "flag1_param",
                    "2": "condition1",
                    "24": "flag1"
                },
                "param_5": {
                    "1": "flag2_param",
                    "2": "condition2",
                    "24": "flag2"
                },
                "param_6": {
                    "1": "update_flag",
                    "2": "condition3",
                    "23": "flag3"
                },
                "param_7": {
                    "1": "data",
                    "2": "long_value",
                    "3": "timestamp",
                    "4": "num2",
                    "9": "value"
                },
                "param_8": {
                    "1": "condition_4",
                    "22": "flag4"
                },
                "pcVar2": {
                    "1": "str2",
                    "2": "buffer",
                    "3": "string2",
                    "5": "ptr2"
                },
                "pcVar4": {
                    "1": "ptr2",
                    "2": "string3",
                    "4": "extracted_ptr",
                    "5": "str2"
                },
                "sVar5": {
                    "1": "len_string1",
                    "10": "len1",
                    "2": "record_data_length",
                    "7": "length1"
                },
                "sVar6": {
                    "1": "extracted_string_len",
                    "10": "len2",
                    "7": "length2"
                },
                "sVar7": {
                    "1": "data_length",
                    "10": "len3",
                    "2": "len_string1",
                    "6": "length3"
                },
                "sVar8": {
                    "1": "extracted_ptr_len",
                    "10": "len4",
                    "5": "length4"
                },
                "uVar9": {
                    "2": "return_value",
                    "29": "result"
                }
            },
            "called": [
                "strlen",
                "FUN_00109b2f",
                "abort",
                "free",
                "xrealloc",
                "sprintf"
            ],
            "calling": [
                "FUN_0010add5",
                "FUN_0010adf2"
            ],
            "code": "\nundefined8\nprocess_data_0010abdd(long data_ptr,char *string1,uint length,char flag1,char flag2,char flag3,\n            undefined8 value,char flag4)\n\n{\n  long ptr1;\n  char *str1;\n  byte byte_val;\n  char *str2;\n  char *str3;\n  size_t len1;\n  size_t len2;\n  size_t len3;\n  size_t len4;\n  undefined8 result;\n  char char1;\n  char char2;\n  byte local_byte;\n  \n  str3 = (char *)0x0;\n  local_byte = *(byte *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  str2 = (char *)extract_and_free_ptr_00109b2f();\n  if (flag4 != '\\0') {\n    byte_val = 1;\n    if (local_byte == 0) {\n      byte_val = *(byte *)(*(long *)(data_ptr + 0x60) + 0x1c);\n    }\n    local_byte = byte_val & 1;\n    str3 = (char *)extract_and_free_ptr_00109b2f(data_ptr);\n  }\n  ptr1 = *(long *)(data_ptr + 0x60);\n  if ((ptr1 == 0) || (str1 = *(char **)(ptr1 + 0x30), str1 == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < length) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    char1 = '?';\n    if (flag1 == '\\0') {\n      char1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    len1 = strlen(str1);\n    len2 = strlen(str2);\n    len3 = strlen(string1);\n    len4 = 0;\n    if (flag4 != '\\0') {\n      len4 = strlen(str3);\n    }\n    result = xrealloc(str1,len3 + len1 + 0x28 + len2 + len4);\n    *(undefined8 *)(ptr1 + 0x30) = result;\n    str1 = *(char **)(*(long *)(data_ptr + 0x60) + 0x30);\n    len1 = strlen(str1);\n    sprintf(str1 + len1,\"%s:%s;%c%c%c\",str2,string1,(ulong)(byte)(0x32 - (char)length),\n            (ulong)(uint)(int)char2,(ulong)(uint)(int)char1,len1);\n    free(str2);\n    if (flag4 != '\\0') {\n      str2 = *(char **)(*(long *)(data_ptr + 0x60) + 0x30);\n      len1 = strlen(str2);\n      sprintf(str2 + len1,\"%ld;%s;\",value,str3);\n      free(str3);\n    }\n    if (local_byte != 0) {\n      *(undefined *)(*(long *)(data_ptr + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_0010abdd",
            "entrypoint": "0x0010abdd",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010abdd": "process_data_0010abdd",
                "__s": "str3",
                "bVar3": "byte_val",
                "cVar10": "char1",
                "cVar11": "char2",
                "lVar1": "ptr1",
                "local_52": "local_byte",
                "param_1": "data_ptr",
                "param_2": "string1",
                "param_3": "length",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "value",
                "param_8": "flag4",
                "pcVar2": "str1",
                "pcVar4": "str2",
                "sVar5": "len1",
                "sVar6": "len2",
                "sVar7": "len3",
                "sVar8": "len4",
                "uVar9": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010add5": {
            "additional_data": {
                "": {
                    "2": ""
                },
                "FUN_0010add5": {
                    "10": "process_and_return_data",
                    "18": "process_data",
                    "3": "process_and_return"
                },
                "process_data_0010abdd": {
                    "1": "extract_data",
                    "2": "perform_data_processing",
                    "21": "process_data"
                }
            },
            "called": [
                "FUN_0010abdd"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_0010add5(void)\n\n{\n  process_data_0010add5();\n  return;\n}\n\n",
            "current_name": "process_data_0010add5",
            "entrypoint": "0x0010add5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010add5": "process_data_0010add5",
                "process_data_0010abdd": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010adf2": {
            "additional_data": {
                "FUN_0010adf2": {
                    "1": "process_data_wrapper",
                    "2": "process_and_return",
                    "25": "process_data",
                    "3": "process_and_return_data"
                },
                "process_data_0010abdd": {
                    "1": "perform_data_processing",
                    "26": "process_data"
                }
            },
            "called": [
                "FUN_0010abdd"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_0010adf2(void)\n\n{\n  process_data_0010adf2();\n  return;\n}\n\n",
            "current_name": "process_data_0010adf2",
            "entrypoint": "0x0010adf2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010adf2": "process_data_0010adf2",
                "process_data_0010abdd": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ae0e": {
            "additional_data": {
                "FUN_0010ae0e": {
                    "1": "extract_strings_from_memory",
                    "2": "combine_strings",
                    "3": "extract_strings"
                },
                "__ptr": {
                    "1": "sub_string_arr_ptr",
                    "2": "ptr",
                    "5": "ptr3",
                    "9": "temp_ptr"
                },
                "lVar1": {
                    "1": "structure_pointer",
                    "12": "struct_ptr",
                    "6": "ptr1"
                },
                "lVar2": {
                    "1": "inner_pointer",
                    "2": "ptr_array",
                    "3": "array_ptr",
                    "6": "ptr2",
                    "7": "ptr"
                },
                "lVar8": {
                    "1": "new_length",
                    "8": "total_len"
                },
                "param_1": {
                    "1": "input_address",
                    "14": "input",
                    "2": "data",
                    "6": "input_param"
                },
                "pcVar3": {
                    "1": "string1",
                    "2": "temp_char",
                    "3": "temp_char_ptr",
                    "6": "str_ptr"
                },
                "pcVar6": {
                    "1": "str2",
                    "2": "new_string",
                    "5": "result",
                    "6": "result_string"
                },
                "sVar4": {
                    "1": "sub_string_length",
                    "10": "len1",
                    "12": "length1",
                    "2": "str_length1"
                },
                "sVar5": {
                    "1": "sub_data_length",
                    "10": "len2",
                    "12": "length2",
                    "2": "length_2"
                },
                "uVar10": {
                    "1": "sub_string_index",
                    "2": "counter2",
                    "4": "num_strings",
                    "6": "count"
                },
                "uVar7": {
                    "13": "result",
                    "18": "return_value"
                },
                "uVar9": {
                    "1": "sub_string_count",
                    "18": "counter",
                    "5": "index"
                }
            },
            "called": [
                "strlen",
                "xmalloc",
                "free",
                "sprintf",
                "strcat",
                "strcpy"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 extract_strings_0010ae0e(long input)\n\n{\n  long struct_ptr;\n  long ptr;\n  void *temp_ptr;\n  char *str_ptr;\n  size_t length1;\n  size_t length2;\n  char *result_string;\n  undefined8 return_value;\n  long total_len;\n  uint counter;\n  ulong count;\n  \n  return_value = 0;\n  struct_ptr = *(long *)(input + 0x60);\n  if (((struct_ptr != 0) && (*(char **)(struct_ptr + 8) != (char *)0x0)) &&\n     (result_string = *(char **)(struct_ptr + 0x20), result_string != (char *)0x0)) {\n    length1 = strlen(*(char **)(struct_ptr + 8));\n    length2 = strlen(result_string);\n    ptr = *(long *)(struct_ptr + 0x28);\n    if (ptr == 0) {\n      total_len = length1 + length2 + 10;\n      count = 0;\n    }\n    else {\n      total_len = length1 + length2 + 0x1e;\n      count = 0;\n      while( true ) {\n        result_string = *(char **)(ptr + count * 8);\n        if (result_string == (char *)0x0) break;\n        length1 = strlen(result_string);\n        count = (ulong)((int)count + 1);\n        total_len = total_len + length1;\n      }\n    }\n    if (*(char **)(struct_ptr + 0x30) != (char *)0x0) {\n      length1 = strlen(*(char **)(struct_ptr + 0x30));\n      total_len = total_len + length1;\n    }\n    if (*(char **)(struct_ptr + 0x38) != (char *)0x0) {\n      length1 = strlen(*(char **)(struct_ptr + 0x38));\n      total_len = total_len + length1;\n    }\n    result_string = (char *)xmalloc(total_len);\n    struct_ptr = *(long *)(input + 0x60);\n    strcpy(result_string,*(char **)(struct_ptr + 8));\n    if (*(long *)(struct_ptr + 0x28) != 0) {\n      counter = 0;\n      length1 = strlen(result_string);\n      sprintf(result_string + length1,\"!%u,\",count);\n      while( true ) {\n        struct_ptr = *(long *)(input + 0x60);\n        count = (ulong)counter;\n        temp_ptr = *(void **)(struct_ptr + 0x28);\n        str_ptr = *(char **)((long)temp_ptr + count * 8);\n        if (str_ptr == (char *)0x0) break;\n        counter = counter + 1;\n        strcat(result_string,str_ptr);\n        free(*(void **)(*(long *)(struct_ptr + 0x28) + count * 8));\n      }\n      free(temp_ptr);\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x28) = 0;\n    }\n    struct_ptr = *(long *)(input + 0x60);\n    strcat(result_string,*(char **)(struct_ptr + 0x20));\n    free(*(void **)(struct_ptr + 0x20));\n    struct_ptr = *(long *)(input + 0x60);\n    *(undefined8 *)(struct_ptr + 0x20) = 0;\n    if (*(char **)(struct_ptr + 0x30) != (char *)0x0) {\n      strcat(result_string,*(char **)(struct_ptr + 0x30));\n      free(*(void **)(struct_ptr + 0x30));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x30) = 0;\n    }\n    length1 = strlen(result_string);\n    struct_ptr = *(long *)(input + 0x60);\n    *(undefined2 *)(result_string + length1) = 0x3b;\n    str_ptr = *(char **)(struct_ptr + 0x38);\n    if (str_ptr != (char *)0x0) {\n      strcpy(result_string + length1 + 1,str_ptr);\n      free(*(void **)(struct_ptr + 0x38));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(input + 0x60) + 8));\n    struct_ptr = *(long *)(input + 0x60);\n    *(char **)(struct_ptr + 8) = result_string;\n    return_value = CONCAT71((int7)((ulong)struct_ptr >> 8),1);\n  }\n  return return_value;\n}\n\n",
            "current_name": "extract_strings_0010ae0e",
            "entrypoint": "0x0010ae0e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ae0e": "extract_strings_0010ae0e",
                "__ptr": "temp_ptr",
                "lVar1": "struct_ptr",
                "lVar2": "ptr",
                "lVar8": "total_len",
                "param_1": "input",
                "pcVar3": "str_ptr",
                "pcVar6": "result_string",
                "sVar4": "length1",
                "sVar5": "length2",
                "uVar10": "count",
                "uVar7": "return_value",
                "uVar9": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010afd5": {
            "additional_data": {
                "*param_1": {
                    "1": "list"
                },
                "FUN_0010afd5": {
                    "1": "find_value_in_nested_structure",
                    "2": "find_string",
                    "3": "find_matching_string",
                    "5": "find_string_in_memory"
                },
                "__s2": {
                    "1": "null_terminated_str",
                    "11": "search_string",
                    "3": "input_string_copy",
                    "4": "input_string"
                },
                "auVar8": {
                    "1": "temp_array",
                    "10": "result",
                    "11": "return_value",
                    "2": "output"
                },
                "bVar7": {
                    "1": "byte_var",
                    "10": "counter",
                    "2": "temp_byte",
                    "3": "loop_index",
                    "4": "flag"
                },
                "copy_and_null_terminate_00109a0b": {
                    "3": "copy_and_null_terminate"
                },
                "free": {
                    "1": "free_memory"
                },
                "iVar1": {
                    "3": "comparison_result",
                    "4": "result"
                },
                "initialize_memory_00113e23": {
                    "3": "initialize_memory"
                },
                "lVar4": {
                    "1": "string_length",
                    "2": "result",
                    "4": "value",
                    "5": "temp_value"
                },
                "param_1": {
                    "1": "prev_node_ptr",
                    "10": "linked_list",
                    "2": "node_list",
                    "3": "list1",
                    "5": "list"
                },
                "param_2": {
                    "1": "struct_pointer",
                    "11": "context",
                    "2": "struct_ptr",
                    "4": "data"
                },
                "param_3": {
                    "1": "target_string",
                    "2": "str_to_find",
                    "4": "str",
                    "7": "input_string",
                    "9": "string"
                },
                "param_4": {
                    "1": "source_length",
                    "2": "search_string_length",
                    "3": "len",
                    "4": "input_length"
                },
                "param_5": {
                    "1": "replacement",
                    "2": "flag",
                    "3": "replacement_value",
                    "4": "default_value",
                    "9": "value"
                },
                "param_6": {
                    "1": "input_value",
                    "2": "param6",
                    "3": "result",
                    "4": "memory"
                },
                "puVar2": {
                    "1": "ptr_arr2",
                    "16": "current_node",
                    "2": "current_item"
                },
                "puVar5": {
                    "1": "inner_node_ptr",
                    "12": "inner_node",
                    "2": "sublist"
                },
                "puVar6": {
                    "1": "flags",
                    "2": "inner_node_ptr",
                    "4": "ptr",
                    "5": "temp_ptr"
                },
                "strcmp": {
                    "2": "compare_strings"
                },
                "uVar3": {
                    "1": "tmp_value",
                    "3": "result",
                    "5": "temp_var",
                    "6": "temp_value",
                    "7": "temp"
                },
                "xmalloc": {
                    "3": "allocate_memory"
                }
            },
            "called": [
                "xmalloc",
                "FUN_00113e23",
                "free",
                "strcmp",
                "FUN_00109a0b"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010d559",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16]\nfind_string_in_memory_0010afd5(undefined8 *linked_list,long context,undefined8 string,undefined4 length,\n            undefined4 value,undefined8 memory)\n\n{\n  int result;\n  char *search_string;\n  undefined8 *current_node;\n  undefined8 temp;\n  long temp_value;\n  undefined8 *inner_node;\n  undefined4 *temp_ptr;\n  byte counter;\n  undefined return_value [16];\n  \n  counter = 0;\n  search_string = (char *)copy_and_null_terminate(string,length);\n  for (linked_list = (undefined8 *)*linked_list; linked_list != (undefined8 *)0x0;\n      linked_list = (undefined8 *)*linked_list) {\n    for (current_node = (undefined8 *)linked_list[1]; current_node != (undefined8 *)0x0;\n        current_node = (undefined8 *)*current_node) {\n      if ((undefined8 *)current_node[2] != (undefined8 *)0x0) {\n        for (inner_node = *(undefined8 **)(undefined8 *)current_node[2]; inner_node != (undefined8 *)0x0;\n            inner_node = (undefined8 *)*inner_node) {\n          if ((*(int *)((long)inner_node + 0x14) == 1) && (*(char *)inner_node[1] == *search_string)) {\n            result = strcmp((char *)inner_node[1],search_string);\n            if (result == 0) {\n              temp_value = inner_node[4];\n              if (temp_value == 0) goto LAB_0010b05b;\n              free_memory(search_string);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  current_node = *(undefined8 **)(context + 0x1a0);\n  do {\n    if (current_node == (undefined8 *)0x0) {\n      current_node = (undefined8 *)xmalloc(0x28);\n      temp = *(undefined8 *)(context + 0x1a0);\n      temp_ptr = (undefined4 *)((long)current_node + 0x14);\n      for (temp_value = 5; temp_value != 0; temp_value = temp_value + -1) {\n        *temp_ptr = 0;\n        temp_ptr = temp_ptr + (ulong)counter * -2 + 1;\n      }\n      *(undefined4 *)(current_node + 2) = value;\n      *current_node = temp;\n      current_node[1] = search_string;\n      temp = initialize_memory(current_node + 3,search_string);\n      *(undefined8 **)(context + 0x1a0) = current_node;\n      current_node[4] = temp;\nLAB_0010b0e7:\n      temp_value = current_node[4];\nLAB_0010b0eb:\n      return_value._8_8_ = memory;\n      return_value._0_8_ = temp_value;\n      return return_value;\n    }\n    if (*(char *)current_node[1] == *search_string) {\n      result = strcmp((char *)current_node[1],search_string);\n      if (result == 0) {\n        if (*(int *)(current_node + 2) == 0) {\n          *(undefined4 *)(current_node + 2) = value;\n        }\n        free_memory(search_string);\n        goto LAB_0010b0e7;\n      }\n    }\n    current_node = (undefined8 *)*current_node;\n  } while( true );\n}\n\n",
            "current_name": "find_string_in_memory_0010afd5",
            "entrypoint": "0x0010afd5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010afd5": "find_string_in_memory_0010afd5",
                "__s2": "search_string",
                "auVar8": "return_value",
                "bVar7": "counter",
                "copy_and_null_terminate_00109a0b": "copy_and_null_terminate",
                "free": "free_memory",
                "iVar1": "result",
                "initialize_memory_00113e23": "initialize_memory",
                "lVar4": "temp_value",
                "param_1": "linked_list",
                "param_2": "context",
                "param_3": "string",
                "param_4": "length",
                "param_5": "value",
                "param_6": "memory",
                "puVar2": "current_node",
                "puVar5": "inner_node",
                "puVar6": "temp_ptr",
                "strcmp": "compare_strings",
                "uVar3": "temp",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b0fa": {
            "additional_data": {
                "FUN_0010b0fa": {
                    "1": "demangle_and_initialize_memory"
                },
                "__ptr": {
                    "1": "ptr_to_void",
                    "2": "void_pointer",
                    "3": "allocated_memory",
                    "5": "memory_pointer",
                    "6": "ptr",
                    "8": "memory_ptr"
                },
                "iVar2": {
                    "1": "index",
                    "2": "result",
                    "21": "comparison_result",
                    "4": "value2"
                },
                "lVar7": {
                    "1": "demangled_arg_list_size",
                    "2": "length2",
                    "3": "arglist_length",
                    "7": "long_value"
                },
                "local_40": {
                    "1": "buffer",
                    "11": "local_buffer",
                    "13": "local_array",
                    "2": "local_memory"
                },
                "param_1": {
                    "1": "start_address",
                    "11": "param1",
                    "2": "input_param1",
                    "3": "input1",
                    "4": "input_param_1",
                    "6": "param_1"
                },
                "param_2": {
                    "1": "param_2_name",
                    "11": "param2",
                    "2": "input_param2",
                    "3": "input2",
                    "4": "input_param_2",
                    "6": "param_2"
                },
                "param_3": {
                    "1": "input_param_array",
                    "2": "param_list",
                    "3": "param_array",
                    "5": "input_array",
                    "9": "param3"
                },
                "param_4": {
                    "1": "input_length",
                    "10": "param4",
                    "2": "input_value",
                    "3": "input_param_4"
                },
                "param_5": {
                    "1": "arg5",
                    "10": "param5",
                    "2": "param_flag",
                    "3": "input_param_5",
                    "6": "error_flag"
                },
                "pcVar3": {
                    "1": "string_result",
                    "11": "result_string",
                    "12": "result",
                    "2": "output_value"
                },
                "pcVar4": {
                    "1": "result2"
                },
                "pcVar5": {
                    "1": "secondary_result_string",
                    "12": "error_message",
                    "2": "string_result",
                    "3": "message_string",
                    "4": "message"
                },
                "plVar4": {
                    "1": "ptr_array",
                    "2": "array_pointer",
                    "4": "pointer_array"
                },
                "sVar6": {
                    "1": "str_length",
                    "25": "string_length",
                    "4": "length"
                },
                "uVar1": {
                    "1": "index",
                    "2": "component",
                    "4": "value1",
                    "6": "array_element",
                    "8": "value"
                }
            },
            "called": [
                "FUN_00113df2",
                "FUN_00112904",
                "FUN_001129f4",
                "abort",
                "dcgettext",
                "free",
                "strcmp",
                "FUN_00113d3a",
                "fprintf",
                "FUN_00113ce0",
                "FUN_00113b4a",
                "cplus_demangle_print",
                "strlen",
                "FUN_00113dfe",
                "FUN_00113b71",
                "FUN_00113cb9",
                "FUN_0010afd5",
                "FUN_0010b0fa",
                "FUN_00113b1e",
                "FUN_00113e17",
                "strncmp",
                "FUN_0010b6ea"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010b6ea"
            ],
            "code": "\n\n\nchar * parse_demangled_type_0010b0fa(undefined8 param1,undefined8 param2,uint *param3,long param4,\n                   undefined *param5)\n\n{\n  uint value;\n  int comparison_result;\n  char *result;\n  long *pointer_array;\n  char *error_message;\n  size_t string_length;\n  void *memory_ptr;\n  long long_value;\n  undefined local_array [16];\n  \n  if (param5 != (undefined *)0x0) {\n    *param5 = 0;\n  }\n  while( true ) {\n    value = *param3;\n    if (0x29 < value) break;\n    if (0x17 < value) {\n      switch(value) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        result = (char *)parse_demangled_type_0010b0fa(param1,param2,*(undefined8 *)(param3 + 4),0,0);\n        if (result != (char *)0x0) {\n          switch(*param3) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            result = (char *)initialize_memory_00113b4a(result);\n            return result;\n          case 0x1b:\n            result = (char *)initialize_memory_00113b71(result);\n            return result;\n          default:\n                    \n            abort();\n          case 0x22:\n            result = (char *)initialize_or_get_memory_block_00113d3a(result);\n            return result;\n          case 0x23:\n            result = (char *)initialize_memory_00113cb9(result);\n            return result;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        result = (char *)cplus_demangle_print(3,param3,0x14,local_array);\n        if (result == (char *)0x0) {\n          error_message = \"Couldn\\'t get demangled builtin type\\n\";\n          result = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        comparison_result = strcmp(result,\"signed char\");\n        if (comparison_result == 0) {\nLAB_0010b406:\n          error_message = (char *)set_memory_value_00113dfe(1,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"bool\");\n        if (comparison_result == 0) {\n          error_message = (char *)initialize_memory_00112904(6,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"char\");\n        if (comparison_result == 0) goto LAB_0010b406;\n        comparison_result = strcmp(result,\"double\");\n        if ((comparison_result == 0) || (comparison_result = strcmp(result,\"long double\"), comparison_result == 0)) {\n          error_message = (char *)initialize_memory_00113df2(8);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"float\");\n        if (comparison_result == 0) {\n          error_message = (char *)initialize_memory_00113df2(4);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"__float128\");\n        if (comparison_result == 0) {\n          error_message = (char *)initialize_memory_00113df2(0x10);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned char\");\n        if (comparison_result == 0) {\n          error_message = (char *)set_memory_value_00113dfe(1,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"int\");\n        if (comparison_result == 0) {\nLAB_0010b504:\n          error_message = (char *)set_memory_value_00113dfe(4,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned int\");\n        if (comparison_result == 0) {\nLAB_0010b528:\n          error_message = (char *)set_memory_value_00113dfe(4,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"long\");\n        if (comparison_result == 0) goto LAB_0010b504;\n        comparison_result = strcmp(result,\"unsigned long\");\n        if (comparison_result == 0) goto LAB_0010b528;\n        comparison_result = strcmp(result,\"__int128\");\n        if (comparison_result == 0) {\n          error_message = (char *)set_memory_value_00113dfe(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned __int128\");\n        if (comparison_result == 0) {\n          error_message = (char *)set_memory_value_00113dfe(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"short\");\n        if (comparison_result == 0) {\n          error_message = (char *)set_memory_value_00113dfe(2,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned short\");\n        if (comparison_result == 0) {\n          error_message = (char *)set_memory_value_00113dfe(2,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"void\");\n        if (comparison_result == 0) {\n          error_message = (char *)initialize_memory_00113e17();\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"wchar_t\");\n        if (comparison_result == 0) goto LAB_0010b528;\n        comparison_result = strcmp(result,\"long long\");\n        if (comparison_result == 0) {\n          error_message = (char *)set_memory_value_00113dfe(8,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned long long\");\n        if (comparison_result == 0) {\n          error_message = (char *)set_memory_value_00113dfe(8,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"...\");\n        if (comparison_result == 0) {\n          error_message = \"Unexpected demangled varargs\\n\";\n          if (param5 == (undefined *)0x0) goto LAB_0010b6a9;\n          *param5 = 1;\n        }\n        else {\n          error_message = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          error_message = (char *)dcgettext(0,error_message,5);\n          fprintf(_stderr,error_message);\n        }\n        error_message = (char *)0x0;\nLAB_0010b6c6:\n        free(result);\n        return error_message;\n      case 0x29:\n        if (*(long *)(param3 + 4) == 0) {\n          memory_ptr = (void *)initialize_memory_00113e17();\n        }\n        else {\n          memory_ptr = (void *)parse_demangled_type_0010b0fa(param1,param2,*(long *)(param3 + 4),0,0);\n        }\n        if (memory_ptr != (void *)0x0) {\n          long_value = demangle_arglist_0010b6ea(param1,param2,*(undefined8 *)(param3 + 6),local_array);\n          if (long_value != 0) {\n            result = (char *)initialize_memory_00113ce0(memory_ptr,long_value,local_array[0]);\n            return result;\n          }\n          free(memory_ptr);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (value != 1) {\n      if (value == 4) {\n        result = (char *)cplus_demangle_print(3,param3,0x14,local_array);\n        error_message = \"Failed to print demangled template\\n\";\n        if (result != (char *)0x0) {\n          string_length = strlen(result);\n          error_message = (char *)find_string_in_memory_0010afd5(param1,param2,result,string_length & 0xffffffff,9);\n          free(result);\n          return error_message;\n        }\nLAB_0010b3d3:\n        error_message = (char *)dcgettext(0,error_message,5);\n        fprintf(_stderr,error_message);\n        return result;\n      }\n      if (value == 0) {\n        if ((param4 == 0) || (pointer_array = (long *)extract_real_value_00113b1e(param4), pointer_array == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    param4 = parse_demangled_type_0010b0fa(param1,param2,*(undefined8 *)(param3 + 4),param4,0);\n    if (param4 == 0) goto LAB_0010b38c;\n    param3 = *(uint **)(param3 + 6);\n    param5 = (undefined *)0x0;\n  }\n  result = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,result,(ulong)value);\nLAB_0010b38c:\n  result = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return result;\nLAB_0010b1a5:\n  if (*pointer_array == 0) {\nswitchD_0010b158_caseD_18:\n    result = (char *)find_string_in_memory_0010afd5(param1,param2,*(undefined8 *)(param3 + 4),param3[6],0);\n    return result;\n  }\n  result = *(char **)(*pointer_array + 8);\n  if (result == (char *)0x0) goto LAB_0010b38c;\n  error_message = (char *)extract_data_001129f4(result);\n  if (error_message != (char *)0x0) {\n    string_length = strlen(error_message);\n    if ((param3[6] == (uint)string_length) &&\n       (comparison_result = strncmp(error_message,*(char **)(param3 + 4),(long)(int)param3[6]), comparison_result == 0)) {\n      return result;\n    }\n  }\n  pointer_array = pointer_array + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "current_name": "parse_demangled_type_0010b0fa",
            "entrypoint": "0x0010b0fa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b0fa": "parse_demangled_type_0010b0fa",
                "__ptr": "memory_ptr",
                "iVar2": "comparison_result",
                "lVar7": "long_value",
                "local_40": "local_array",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "pcVar3": "result",
                "pcVar5": "error_message",
                "plVar4": "pointer_array",
                "sVar6": "string_length",
                "uVar1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b6ea": {
            "additional_data": {
                "FUN_0010b6ea": {
                    "1": "demangle_and_extract_args",
                    "10": "demangle_arglist",
                    "4": "decode_arglist",
                    "8": "demangle_v3_arglist"
                },
                "__format": {
                    "11": "error_msg",
                    "20": "error_message"
                },
                "__ptr": {
                    "1": "decoded_arglist",
                    "12": "result",
                    "7": "result_ptr",
                    "9": "result_array"
                },
                "lVar1": {
                    "1": "result2",
                    "2": "demangled_str",
                    "4": "result",
                    "6": "demangled_value"
                },
                "local_39": {
                    "1": "symbol_name",
                    "2": "type_str",
                    "3": "type_string",
                    "6": "temp_buffer"
                },
                "param_1": {
                    "1": "input1",
                    "2": "param1",
                    "22": "arg1"
                },
                "param_2": {
                    "1": "input2",
                    "2": "param2",
                    "22": "arg2"
                },
                "param_3": {
                    "1": "symbol_list",
                    "25": "arglist"
                },
                "param_4": {
                    "1": "warn_flag",
                    "17": "error_flag",
                    "2": "has_error",
                    "6": "is_error"
                },
                "uVar2": {
                    "1": "string_count",
                    "2": "counter",
                    "3": "index",
                    "4": "result_count",
                    "7": "count"
                },
                "uVar3": {
                    "1": "max_num_types",
                    "2": "buffer_size",
                    "3": "array_size",
                    "4": "result_capacity",
                    "8": "capacity"
                },
                "uVar4": {
                    "1": "temp_count",
                    "2": "current_index",
                    "4": "new_count",
                    "9": "index"
                }
            },
            "called": [
                "xmalloc",
                "FUN_0010b0fa",
                "dcgettext",
                "free",
                "xrealloc",
                "fprintf"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid * demangle_arglist_0010b6ea(undefined8 arg1,undefined8 arg2,int *arglist,undefined *error_flag)\n\n{\n  void *result;\n  char *error_message;\n  long demangled_value;\n  ulong count;\n  ulong capacity;\n  uint index;\n  char buffer [9];\n  \n  capacity = 10;\n  count = 0;\n  result = (void *)xmalloc(0x50);\n  *error_flag = 0;\n  for (; arglist != (int *)0x0; arglist = *(int **)(arglist + 6)) {\n    if (*arglist != 0x2e) {\n      error_message = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_message);\n      free(result);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist + 4) == 0) break;\n    demangled_value = parse_demangled_type_0010b0fa(arg1,arg2,*(long *)(arglist + 4),0,buffer);\n    if (demangled_value == 0) {\n      if (buffer[0] == '\\0') {\n        free(result);\n        return (void *)0x0;\n      }\n      *error_flag = 1;\n    }\n    else {\n      index = (int)count + 1;\n      if ((uint)capacity <= index) {\n        capacity = (ulong)((uint)capacity + 10);\n        result = (void *)xrealloc(result,capacity << 3);\n      }\n      *(long *)((long)result + count * 8) = demangled_value;\n      count = (ulong)index;\n    }\n  }\n  *(undefined8 *)((long)result + count * 8) = 0;\n  return result;\n}\n\n",
            "code_backup": "\n\n\nvoid * FUN_0010b6ea(undefined8 param_1,undefined8 param_2,int *param_3,undefined *param_4)\n\n{\n  void *__ptr;\n  char *__format;\n  long lVar1;\n  ulong uVar2;\n  ulong uVar3;\n  uint uVar4;\n  char local_39 [9];\n  \n  uVar3 = 10;\n  uVar2 = 0;\n  __ptr = (void *)xmalloc(0x50);\n  *param_4 = 0;\n  for (; param_3 != (int *)0x0; param_3 = *(int **)(param_3 + 6)) {\n    if (*param_3 != 0x2e) {\n      __format = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,__format);\n      free(__ptr);\n      return (void *)0x0;\n    }\n    if (*(long *)(param_3 + 4) == 0) break;\n    lVar1 = FUNC_0010b0fa(param_1,param_2,*(long *)(param_3 + 4),0,local_39);\n    if (lVar1 == 0) {\n      if (local_39[0] == '\\0') {\n        free(__ptr);\n        return (void *)0x0;\n      }\n      *param_4 = 1;\n    }\n    else {\n      uVar4 = (int)uVar2 + 1;\n      if ((uint)uVar3 <= uVar4) {\n        uVar3 = (ulong)((uint)uVar3 + 10);\n        __ptr = (void *)xrealloc(__ptr,uVar3 << 3);\n      }\n      *(long *)((long)__ptr + uVar2 * 8) = lVar1;\n      uVar2 = (ulong)uVar4;\n    }\n  }\n  *(undefined8 *)((long)__ptr + uVar2 * 8) = 0;\n  return __ptr;\n}\n\n",
            "current_name": "demangle_arglist_0010b6ea",
            "entrypoint": "0x0010b6ea",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b6ea": "demangle_arglist_0010b6ea",
                "__format": "error_message",
                "__ptr": "result",
                "lVar1": "demangled_value",
                "local_39": "buffer",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arglist",
                "param_4": "error_flag",
                "uVar2": "count",
                "uVar3": "capacity",
                "uVar4": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b800": {
            "additional_data": {
                "FUN_0010b800": {
                    "1": "initialize_structure",
                    "26": "initialize_data_structure"
                },
                "auStack_8a": {
                    "1": "array_with_size24",
                    "2": "array_stack",
                    "3": "temp_array",
                    "5": "unused_array",
                    "9": "stack_array"
                },
                "lVar4": {
                    "1": "index",
                    "12": "value",
                    "2": "temp_value",
                    "3": "temp_var1"
                },
                "lVar5": {
                    "1": "shift_value",
                    "2": "var2",
                    "3": "mask",
                    "4": "bitmask"
                },
                "local_8c": {
                    "1": "message_buffer",
                    "2": "format_string",
                    "5": "formatted_string",
                    "6": "local_string",
                    "7": "buffer"
                },
                "param_1": {
                    "1": "input_address",
                    "15": "base_address",
                    "2": "data_pointer",
                    "7": "data"
                },
                "param_2": {
                    "31": "size"
                },
                "param_3": {
                    "1": "is_flag_set",
                    "27": "flag"
                },
                "plVar1": {
                    "1": "pointer_to_value",
                    "2": "ptr_to_value",
                    "3": "data_pointer",
                    "4": "ptr",
                    "5": "pointer"
                },
                "sVar3": {
                    "1": "string_size",
                    "16": "string_length",
                    "2": "str_length",
                    "8": "length"
                },
                "uVar2": {
                    "11": "return_value",
                    "19": "result"
                }
            },
            "called": [
                "strlen",
                "FUN_00109cf4",
                "FUN_00119ed0",
                "dcgettext",
                "sprintf",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_0010b948",
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 initialize_data_structure_0010b800(long base_address,int size,char flag)\n\n{\n  long *ptr_to_long;\n  undefined8 result;\n  size_t string_length;\n  long value;\n  long bitmask;\n  undefined2 output_string;\n  undefined4 stack_array [24];\n  \n  if (size - 1U < 8) {\n    value = base_address + 0xb8;\n    if (flag != '\\0') {\n      value = base_address + 0x78;\n    }\n    ptr_to_long = (long *)(value + (ulong)(size - 1U) * 8);\n    value = *ptr_to_long;\n    if (value != 0) {\n      result = initialize_data_structure_0010b800_00109cf4(base_address,value,size);\n      return result;\n    }\n    value = *(long *)(base_address + 0x68);\n    *(long *)(base_address + 0x68) = value + 1;\n    *ptr_to_long = value;\n    sprintf((char *)&output_string,\"%ld=r%ld;\",value,value);\n    if (flag == '\\0') {\n      bitmask = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      string_length = strlen((char *)&output_string);\n      sprintf((char *)((long)&output_string + string_length),\"%ld;%ld;\",-bitmask,bitmask + -1);\n    }\n    else {\n      string_length = strlen((char *)&output_string);\n      *(undefined2 *)((long)&output_string + string_length) = 0x3b30;\n      *(undefined *)((long)&output_string + string_length + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&output_string + string_length + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&output_string + string_length + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = initialize_data_structure_0010b800_00109b52(base_address,&output_string,value,1,size);\n  }\n  else {\n    result = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    print_error_message_00119ed0(result,size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "initialize_data_structure_0010b800",
            "entrypoint": "0x0010b800",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b800": "initialize_data_structure_0010b800",
                "auStack_8a": "stack_array",
                "lVar4": "value",
                "lVar5": "bitmask",
                "local_8c": "output_string",
                "param_1": "base_address",
                "param_2": "size",
                "param_3": "flag",
                "plVar1": "ptr_to_long",
                "sVar3": "string_length",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b948": {
            "additional_data": {
                "FUN_0010b948": {
                    "1": "initialize_or_continue_data_structure",
                    "2": "initialize_or_extract_data",
                    "25": "initialize_data_structure"
                },
                "__ptr": {
                    "1": "data",
                    "14": "extracted_ptr",
                    "2": "ptr",
                    "4": "extracted_data",
                    "5": "extracted_pointer"
                },
                "cVar2": {
                    "1": "result_char",
                    "2": "is_valid",
                    "4": "success",
                    "5": "success_flag",
                    "6": "is_initialized",
                    "8": "result"
                },
                "lVar1": {
                    "1": "structure_address",
                    "2": "ptr",
                    "3": "temp_var"
                },
                "local_5a": {
                    "2": "format_string",
                    "21": "formatted_string",
                    "4": "output_string"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "data",
                    "3": "input_param",
                    "4": "data_structure_ptr",
                    "8": "data_structure"
                },
                "param_2": {
                    "1": "param_two",
                    "19": "size",
                    "2": "param2",
                    "3": "count"
                },
                "uVar3": {
                    "1": "size_ulong",
                    "2": "size_converted",
                    "3": "size_unsigned"
                },
                "uVar4": {
                    "1": "size_decreased",
                    "12": "size_minus_one",
                    "2": "index",
                    "3": "adjusted_size"
                }
            },
            "called": [
                "FUN_00109b2f",
                "FUN_00109cf4",
                "free",
                "FUN_0010b800",
                "sprintf",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid initialize_data_structure_0010b948(long data_structure,uint size)\n\n{\n  long temp_var;\n  char result;\n  void *extracted_ptr;\n  ulong size_unsigned;\n  uint size_minus_one;\n  char formatted_string [50];\n  \n  size_minus_one = size - 1;\n  size_unsigned = (ulong)size;\n  if ((size_minus_one < 0x10) && (temp_var = *(long *)(data_structure + 0xf8 + (ulong)size_minus_one * 8), temp_var != 0)) {\n    initialize_data_structure_0010b948_00109cf4(data_structure,temp_var,size_unsigned);\n    return;\n  }\n  result = initialize_data_structure_0010b948_0010b800(data_structure,4,0);\n  if (result != '\\0') {\n    extracted_ptr = (void *)extract_and_free_ptr_00109b2f(data_structure);\n    temp_var = *(long *)(data_structure + 0x68);\n    *(long *)(data_structure + 0x68) = temp_var + 1;\n    if (size_minus_one < 0x10) {\n      *(long *)(data_structure + 0xf8 + (ulong)size_minus_one * 8) = temp_var;\n    }\n    sprintf(formatted_string,\"%ld=r%s;%u;0;\",temp_var,extracted_ptr,size_unsigned);\n    free(extracted_ptr);\n    initialize_data_structure_0010b948_00109b52(data_structure,formatted_string,temp_var,1,size_unsigned);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_0010b948",
            "entrypoint": "0x0010b948",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b948": "initialize_data_structure_0010b948",
                "__ptr": "extracted_ptr",
                "cVar2": "result",
                "lVar1": "temp_var",
                "local_5a": "formatted_string",
                "param_1": "data_structure",
                "param_2": "size",
                "uVar3": "size_unsigned",
                "uVar4": "size_minus_one"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ba08": {
            "additional_data": {
                "FUN_0010ba08": {
                    "1": "generate_string",
                    "15": "generate_warning_message",
                    "2": "generate_field_string",
                    "5": "build_warning_message"
                },
                "__s": {
                    "1": "extracted_value",
                    "2": "extracted_data",
                    "22": "extracted_string"
                },
                "__s_00": {
                    "1": "new_string_ptr",
                    "2": "final_string",
                    "3": "new_string",
                    "9": "formatted_string"
                },
                "abort": {
                    "1": "stop_execution"
                },
                "cVar1": {
                    "1": "should_print_warning",
                    "2": "is_field_initialized",
                    "3": "flag_value",
                    "9": "flag"
                },
                "dcgettext": {
                    "1": "get_message"
                },
                "extract_and_free_ptr_00109b2f": {
                    "2": "extract_and_free_pointer"
                },
                "free": {
                    "1": "dealloc_memory",
                    "2": "free_memory"
                },
                "iVar2": {
                    "1": "field_type",
                    "11": "struct_size",
                    "2": "int_value",
                    "5": "field_count"
                },
                "lVar3": {
                    "1": "field_data_ptr",
                    "2": "struct_offset",
                    "5": "local_var"
                },
                "param_1": {
                    "1": "function_params",
                    "2": "arguments",
                    "3": "ptr_array",
                    "5": "param_array"
                },
                "param_2": {
                    "31": "field_name"
                },
                "param_3": {
                    "1": "field_offset",
                    "11": "field_value",
                    "2": "field_size",
                    "4": "param3",
                    "5": "param_3"
                },
                "param_4": {
                    "1": "unknown_size",
                    "2": "size",
                    "23": "field_size",
                    "3": "struct_size"
                },
                "param_5": {
                    "1": "flag_value",
                    "12": "field_type",
                    "2": "param_type",
                    "5": "flag"
                },
                "pcVar9": {
                    "1": "format_type_string",
                    "2": "special_char",
                    "3": "field_type_string",
                    "9": "flag_string"
                },
                "print_error_message_00119ed0": {
                    "1": "print_warning_message",
                    "5": "print_error_message"
                },
                "sVar4": {
                    "1": "old_string_size",
                    "3": "param_1_length"
                },
                "sVar5": {
                    "1": "length2",
                    "10": "field_name_length",
                    "2": "size_field_name",
                    "3": "field_name_len",
                    "5": "field_name_size"
                },
                "sVar6": {
                    "1": "extracted_pointer_length",
                    "2": "extracted_string_len",
                    "9": "extracted_string_length"
                },
                "sprintf": {
                    "1": "formatted_string",
                    "4": "format_string"
                },
                "strlen": {
                    "1": "calculate_string_length",
                    "2": "get_string_length"
                },
                "uVar7": {
                    "1": "translation",
                    "19": "warning_message",
                    "6": "error_message"
                },
                "uVar8": {
                    "2": "return_val",
                    "22": "return_value",
                    "7": "result"
                },
                "xmalloc": {
                    "1": "dynamic_memory_allocation",
                    "5": "allocate_memory"
                }
            },
            "called": [
                "strlen",
                "FUN_00109b2f",
                "xmalloc",
                "abort",
                "FUN_00119ed0",
                "dcgettext",
                "free",
                "sprintf"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8\ngenerate_warning_message_0010ba08(undefined8 *param_array,char *field_name,undefined8 field_value,ulong field_size,int field_type)\n\n{\n  char flag;\n  int struct_size;\n  long local_var;\n  char *extracted_string;\n  size_t param_1_length;\n  size_t field_name_length;\n  size_t extracted_string_length;\n  char *formatted_string;\n  undefined8 warning_message;\n  undefined8 return_value;\n  char *flag_string;\n  \n  flag = *(char *)(param_array[0xc] + 0x1c);\n  struct_size = *(int *)(param_array[0xc] + 0x18);\n  extracted_string = (char *)extract_and_free_pointer();\n  if (*(char **)(param_array[0xc] + 0x20) == (char *)0x0) {\n    return_value = 0;\n  }\n  else {\n    param_1_length = strlen(*(char **)(param_array[0xc] + 0x20));\n    field_name_length = strlen(field_name);\n    extracted_string_length = strlen(extracted_string);\n    formatted_string = (char *)xmalloc(param_1_length + 0x32 + field_name_length + extracted_string_length);\n    if (field_type == 1) {\n      flag_string = \"/1\";\n    }\n    else {\n      flag_string = \"/0\";\n      if ((field_type != 2) && (flag_string = \"\", field_type != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((field_size == 0) && (field_size = (ulong)(uint)(struct_size * 8), field_size == 0)) {\n      return_value = *(undefined8 *)*param_array;\n      warning_message = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      print_error_message(warning_message,return_value,field_name);\n    }\n    sprintf(formatted_string,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(param_array[0xc] + 0x20),field_name,flag_string,extracted_string,\n            field_value,field_size);\n    free_memory(*(void **)(param_array[0xc] + 0x20));\n    local_var = param_array[0xc];\n    *(char **)(local_var + 0x20) = formatted_string;\n    if (flag != '\\0') {\n      *(undefined *)(local_var + 0x1c) = 1;\n    }\n    return_value = CONCAT71((int7)((ulong)local_var >> 8),1);\n  }\n  return return_value;\n}\n\n",
            "current_name": "generate_warning_message_0010ba08",
            "entrypoint": "0x0010ba08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ba08": "generate_warning_message_0010ba08",
                "__s": "extracted_string",
                "__s_00": "formatted_string",
                "abort": "exit_program",
                "cVar1": "flag",
                "dcgettext": "get_locale_text",
                "extract_and_free_ptr_00109b2f": "extract_and_free_pointer",
                "free": "free_memory",
                "iVar2": "struct_size",
                "lVar3": "local_var",
                "param_1": "param_array",
                "param_2": "field_name",
                "param_3": "field_value",
                "param_4": "field_size",
                "param_5": "field_type",
                "pcVar9": "flag_string",
                "print_error_message_00119ed0": "print_error_message",
                "sVar4": "param_1_length",
                "sVar5": "field_name_length",
                "sVar6": "extracted_string_length",
                "sprintf": "format_string",
                "strlen": "get_string_length",
                "uVar7": "warning_message",
                "uVar8": "return_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bb52": {
            "additional_data": {
                "0x18": {
                    "1": "hash_value_start"
                },
                "0x20": {
                    "1": "hash_value_max"
                },
                "0x28": {
                    "1": "hash_value_increment"
                },
                "0x30": {
                    "1": "hash_allocation_size"
                },
                "FUN_0010bb52": {
                    "1": "allocate_hash_function",
                    "14": "allocate_and_initialize_hash",
                    "2": "create_bfd_hash",
                    "6": "create_hash_function"
                },
                "bfd_hash_allocate": {
                    "6": "allocate_hash"
                },
                "bfd_hash_newfunc": {
                    "1": "initialize_hash",
                    "2": "create_new_function"
                },
                "lVar1": {
                    "1": "hash_result",
                    "2": "hash_pointer",
                    "3": "hash",
                    "8": "new_hash",
                    "9": "hash_ptr"
                },
                "lVar1 + 0x18": {
                    "1": "new_hash_start"
                },
                "lVar1 + 0x20": {
                    "1": "new_hash_end"
                },
                "lVar1 + 0x28": {
                    "1": "new_hash_value"
                },
                "param_1": {
                    "1": "hash",
                    "10": "size",
                    "4": "input",
                    "5": "input_value",
                    "8": "input_param"
                },
                "param_2": {
                    "1": "param8",
                    "15": "param_2",
                    "9": "param2"
                },
                "param_3": {
                    "1": "flags",
                    "15": "param_3",
                    "9": "param3"
                }
            },
            "called": [
                "bfd_hash_allocate",
                "bfd_hash_newfunc"
            ],
            "calling": [
                "FUN_0011378f"
            ],
            "code": "\nlong allocate_and_initialize_hash_0010bb52(long size,undefined8 param_2,undefined8 param_3)\n\n{\n  long hash_ptr;\n  \n  if (((size != 0) || (size = bfd_hash_allocate(param_2,0x30), size != 0)) &&\n     (hash_ptr = bfd_hash_newfunc(size,param_2,param_3), hash_ptr != 0)) {\n    *(undefined8 *)(hash_ptr + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(hash_ptr + 0x18) = 0;\n    *(undefined4 *)(hash_ptr + 0x28) = 0;\n    return hash_ptr;\n  }\n  return 0;\n}\n\n",
            "current_name": "allocate_and_initialize_hash_0010bb52",
            "entrypoint": "0x0010bb52",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bb52": "allocate_and_initialize_hash_0010bb52",
                "bfd_hash_allocate": "allocate_hash",
                "bfd_hash_newfunc": "create_new_function",
                "lVar1": "hash_ptr",
                "param_1": "size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bba1": {
            "additional_data": {
                "*(long *)(lVar1 + 0x20)": {
                    "1": "data_size"
                },
                "*(undefined4 *)(lVar1 + 0x28)": {
                    "1": "initialize_param"
                },
                "FUN_0010bba1": {
                    "1": "lookup_data_structure",
                    "2": "lookup_and_initialize_structure",
                    "20": "lookup_and_initialize_data_structure",
                    "3": "initialize_data_structure",
                    "4": "lookup_and_initialize"
                },
                "initialize_data_structure_00109cf4": {
                    "1": "initialize_data_structure"
                },
                "lVar1": {
                    "1": "result",
                    "10": "lookup_result",
                    "2": "hash_entry",
                    "3": "entry",
                    "6": "hash_lookup_result",
                    "9": "hash_result"
                },
                "param_1": {
                    "1": "input_1",
                    "12": "input_param",
                    "2": "binary_address",
                    "3": "input_hash",
                    "4": "base_address",
                    "5": "hash_table"
                },
                "param_1 + 0x1b8": {
                    "1": "modified_input_param"
                },
                "param_2": {
                    "1": "secondary_param",
                    "2": "input_data",
                    "5": "data",
                    "6": "key"
                },
                "uVar2": {
                    "14": "result",
                    "2": "initialize_result",
                    "3": "initialized_data_structure",
                    "6": "data_structure"
                }
            },
            "called": [
                "FUN_00109cf4",
                "bfd_hash_lookup"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 lookup_and_initialize_data_structure_0010bba1(long input_param,undefined8 key)\n\n{\n  long lookup_result;\n  undefined8 result;\n  \n  lookup_result = bfd_hash_lookup(input_param + 0x1b8,key,0,0);\n  if ((lookup_result != 0) && (0 < *(long *)(lookup_result + 0x20))) {\n    result = initialize_data_structure(input_param,*(long *)(lookup_result + 0x20),*(undefined4 *)(lookup_result + 0x28));\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "lookup_and_initialize_data_structure_0010bba1",
            "entrypoint": "0x0010bba1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bba1": "lookup_and_initialize_data_structure_0010bba1",
                "initialize_data_structure_00109cf4": "initialize_data_structure",
                "lVar1": "lookup_result",
                "param_1": "input_param",
                "param_2": "key",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bbd3": {
            "additional_data": {
                "FUN_0010bbd3": {
                    "1": "set_debug_info",
                    "2": "initialize_data_structure",
                    "25": "initialize_debug_info"
                },
                "auVar8": {
                    "18": "return_value",
                    "3": "return_val",
                    "9": "result"
                },
                "bVar7": {
                    "1": "byte_value",
                    "12": "flag",
                    "2": "bool_value",
                    "3": "zero_byte",
                    "6": "byte_var"
                },
                "lVar4": {
                    "1": "loop_index",
                    "16": "loop_counter",
                    "2": "loop_count",
                    "4": "count",
                    "5": "counter"
                },
                "param_1": {
                    "1": "debug_data",
                    "18": "debug_info",
                    "2": "data_structure",
                    "9": "info"
                },
                "param_2": {
                    "31": "filename"
                },
                "param_3": {
                    "1": "data1",
                    "16": "param3",
                    "2": "arg3",
                    "3": "var3",
                    "4": "param_3"
                },
                "param_4": {
                    "1": "data2",
                    "16": "param4",
                    "2": "var2",
                    "3": "var4",
                    "4": "param_4"
                },
                "pcVar6": {
                    "1": "empty_str",
                    "2": "str",
                    "3": "temp_filename",
                    "4": "filename_ptr",
                    "5": "new_filename",
                    "9": "default_filename"
                },
                "puVar1": {
                    "1": "previous_info",
                    "2": "units",
                    "3": "previous_debug_info",
                    "9": "ptr1"
                },
                "puVar2": {
                    "1": "info1",
                    "2": "new_units",
                    "9": "ptr2"
                },
                "puVar3": {
                    "1": "unit2",
                    "2": "ptr2",
                    "3": "new_debug_info",
                    "9": "ptr3"
                },
                "puVar5": {
                    "1": "current_unit",
                    "2": "temp",
                    "3": "ptr5",
                    "4": "ptr",
                    "6": "ptr4"
                },
                "xmalloc": {
                    "1": "dynamic_memory_allocation"
                }
            },
            "called": [
                "xmalloc",
                "__assert_fail"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\nundefined  [16] initialize_debug_info_0010bbd3(long *debug_info,char *filename,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *ptr1;\n  undefined4 *ptr2;\n  undefined4 *ptr3;\n  long loop_counter;\n  undefined4 *ptr4;\n  char *default_filename;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  default_filename = \"\";\n  if (filename != (char *)0x0) {\n    default_filename = filename;\n  }\n  ptr2 = (undefined4 *)xmalloc(0x18);\n  ptr4 = ptr2;\n  for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *ptr4 = 0;\n    ptr4 = ptr4 + (ulong)flag * -2 + 1;\n  }\n  *(char **)(ptr2 + 2) = default_filename;\n  ptr3 = (undefined4 *)xmalloc(0x18);\n  debug_info[2] = (long)ptr2;\n  ptr4 = ptr3;\n  for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *ptr4 = 0;\n    ptr4 = ptr4 + (ulong)flag * -2 + 1;\n  }\n  ptr1 = (undefined8 *)debug_info[1];\n  *(undefined4 **)(ptr3 + 2) = ptr2;\n  if (ptr1 == (undefined8 *)0x0) {\n    if (*debug_info != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debug_info = (long)ptr3;\n  }\n  else {\n    *ptr1 = ptr3;\n  }\n  debug_info[1] = (long)ptr3;\n  debug_info[5] = 0;\n  *(undefined (*) [16])(debug_info + 3) = ZEXT816(0);\n  return_value._8_8_ = param4;\n  return_value._0_8_ = 1;\n  return return_value;\n}\n\n",
            "current_name": "initialize_debug_info_0010bbd3",
            "entrypoint": "0x0010bbd3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "auVar8": "return_value",
                "bVar7": "flag",
                "lVar4": "loop_counter",
                "param_1": "debug_info",
                "param_2": "filename",
                "param_3": "param3",
                "param_4": "param4",
                "pcVar6": "default_filename",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "puVar3": "ptr3",
                "puVar5": "ptr4",
                "xmalloc": "dynamic_memory_allocation"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bc80": {
            "additional_data": {
                "FUN_0010bc80": {
                    "1": "record_debug_info",
                    "17": "debug_record_function",
                    "3": "initialize_debug_record",
                    "8": "record_debug_function"
                },
                "auVar8": {
                    "1": "result_arr",
                    "16": "return_value",
                    "2": "ret_val",
                    "6": "result"
                },
                "bVar7": {
                    "1": "is_zero",
                    "16": "flag",
                    "2": "temp_byte",
                    "3": "zero"
                },
                "lVar4": {
                    "1": "temp_var",
                    "16": "result",
                    "2": "loop_counter",
                    "5": "temp"
                },
                "param_1": {
                    "1": "filename",
                    "2": "function_data",
                    "3": "debug_context",
                    "5": "debug_info"
                },
                "param_2": {
                    "1": "record_param2",
                    "2": "file_name",
                    "27": "filename"
                },
                "param_3": {
                    "1": "param",
                    "13": "record_size",
                    "2": "record_length",
                    "6": "line_number",
                    "7": "size"
                },
                "param_4": {
                    "1": "extra_data",
                    "10": "flags",
                    "2": "debug_flag",
                    "5": "record_type",
                    "7": "flag"
                },
                "param_5": {
                    "1": "func",
                    "14": "param_5",
                    "2": "arg1",
                    "8": "param5"
                },
                "param_6": {
                    "1": "callback_param",
                    "14": "param_6",
                    "2": "arg2",
                    "4": "result",
                    "8": "param6"
                },
                "pcVar6": {
                    "1": "filename_or_empty",
                    "17": "default_filename",
                    "2": "default_file_name"
                },
                "plVar2": {
                    "1": "debug_data",
                    "10": "record",
                    "3": "record_data",
                    "4": "debug_record",
                    "5": "debug_info",
                    "6": "record_ptr"
                },
                "puVar3": {
                    "1": "memory_info",
                    "2": "memory_block",
                    "3": "buffer",
                    "4": "debug_info",
                    "7": "debug_data"
                },
                "puVar5": {
                    "1": "data",
                    "10": "ptr",
                    "2": "pu_var5",
                    "5": "temp_ptr"
                },
                "uVar1": {
                    "1": "msg",
                    "2": "result",
                    "20": "error_message",
                    "3": "error_msg"
                }
            },
            "called": [
                "xmalloc",
                "FUN_00112925",
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16]\ndebug_record_function_0010bc80(long debug_info,char *filename,long record_size,uint flags,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined8 error_message;\n  long *record;\n  undefined4 *debug_data;\n  long result;\n  undefined4 *ptr;\n  char *default_filename;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  default_filename = \"\";\n  if (filename != (char *)0x0) {\n    default_filename = filename;\n  }\n  if (record_size != 0) {\n    if (*(long *)(debug_info + 8) == 0) {\n      error_message = dcgettext(0,\"debug_record_function_0010bc80: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",error_message);\n    }\n    else {\n      record = (long *)xmalloc(0x18);\n      *record = record_size;\n      *(undefined (*) [16])(record + 1) = ZEXT816(0);\n      debug_data = (undefined4 *)xmalloc(0x30);\n      *(long **)(debug_info + 0x18) = record;\n      record[2] = (long)debug_data;\n      ptr = debug_data;\n      for (result = 0xc; result != 0; result = result + -1) {\n        *ptr = 0;\n        ptr = ptr + (ulong)flag * -2 + 1;\n      }\n      *(undefined4 **)(debug_info + 0x20) = debug_data;\n      result = *(long *)(debug_info + 0x10);\n      *(undefined8 *)(debug_data + 6) = param_5;\n      *(undefined8 *)(debug_data + 8) = 0xffffffffffffffff;\n      result = initialize_memory_00112925(result + 0x10,default_filename,3,(flags & 0xff) + 1);\n      if (result != 0) {\n        *(long **)(result + 0x20) = record;\n        error_message = CONCAT71((int7)((ulong)result >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  error_message = 0;\nLAB_0010bd56:\n  return_value._8_8_ = param_6;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "current_name": "debug_record_function_0010bc80",
            "entrypoint": "0x0010bc80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bc80": "debug_record_function_0010bc80",
                "auVar8": "return_value",
                "bVar7": "flag",
                "lVar4": "result",
                "param_1": "debug_info",
                "param_2": "filename",
                "param_3": "record_size",
                "param_4": "flags",
                "pcVar6": "default_filename",
                "plVar2": "record",
                "puVar3": "debug_data",
                "puVar5": "ptr",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bd62": {
            "additional_data": {
                "FUN_0010bd62": {
                    "1": "record_debug_parameter",
                    "17": "record_parameter",
                    "2": "record_parameter_debugging",
                    "8": "record_parameter_debug"
                },
                "bVar8": {
                    "1": "byte_value",
                    "2": "loop_count",
                    "5": "is_zero",
                    "6": "counter",
                    "7": "flag"
                },
                "lVar5": {
                    "1": "temp_long_var",
                    "2": "loop_index",
                    "3": "counter",
                    "4": "temp_value",
                    "8": "loop_counter"
                },
                "param_1": {
                    "1": "func_address",
                    "2": "function_pointer",
                    "4": "function_data",
                    "9": "function_info"
                },
                "param_2": {
                    "1": "param_2_value",
                    "2": "record_id",
                    "4": "param_address",
                    "5": "param1"
                },
                "param_3": {
                    "1": "param2_ptr",
                    "2": "param_data",
                    "4": "param3",
                    "5": "param2",
                    "6": "param_size"
                },
                "param_4": {
                    "1": "flags",
                    "2": "param_4_value",
                    "5": "param4",
                    "6": "param3",
                    "9": "param_type"
                },
                "param_5": {
                    "1": "param_record",
                    "2": "arg4",
                    "3": "param_5",
                    "4": "param_value",
                    "5": "param5",
                    "6": "param4"
                },
                "puVar1": {
                    "1": "last_ptr",
                    "2": "next_node",
                    "4": "current_node",
                    "7": "current_ptr"
                },
                "puVar2": {
                    "1": "result"
                },
                "puVar3": {
                    "1": "alloc_ptr",
                    "10": "new_record",
                    "2": "allocated_memory",
                    "4": "new_node"
                },
                "puVar4": {
                    "1": "loop_ptr",
                    "2": "temp_pointer",
                    "3": "current_ptr",
                    "4": "current_node"
                },
                "puVar6": {
                    "1": "previous_entry_ptr",
                    "3": "last_pointer",
                    "6": "last_node",
                    "8": "last_ptr"
                },
                "puVar7": {
                    "1": "alloc_ptr_address",
                    "2": "record_ptr",
                    "3": "temp_node",
                    "4": "temp_ptr"
                },
                "uVar2": {
                    "1": "debug_error_msg",
                    "20": "error_message",
                    "5": "error_msg"
                }
            },
            "called": [
                "xmalloc",
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_00112a33",
                "FUN_0011173a"
            ],
            "code": "\n\n\nundefined8\nrecord_parameter_0010bd62(long function_ptr,long param1,long param_size,undefined4 param_type,undefined8 param4)\n\n{\n  undefined8 *current_ptr;\n  undefined8 error_message;\n  undefined4 *new_record;\n  undefined8 *temp_ptr;\n  long loop_counter;\n  undefined8 *last_ptr;\n  undefined4 *temp_ptr;\n  byte flag;\n  \n  flag = 0;\n  if (param1 == 0) {\n    return 0;\n  }\n  if (param_size != 0) {\n    if ((*(long *)(function_ptr + 8) != 0) && (*(long *)(function_ptr + 0x18) != 0)) {\n      new_record = (undefined4 *)xmalloc(0x28);\n      temp_ptr = new_record;\n      for (loop_counter = 10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *temp_ptr = 0;\n        temp_ptr = temp_ptr + (ulong)flag * -2 + 1;\n      }\n      loop_counter = *(long *)(function_ptr + 0x18);\n      *(long *)(new_record + 2) = param1;\n      *(long *)(new_record + 4) = param_size;\n      new_record[6] = param_type;\n      current_ptr = *(undefined8 **)(loop_counter + 8);\n      *(undefined8 *)(new_record + 8) = param4;\n      last_ptr = (undefined8 *)(loop_counter + 8);\n      while (temp_ptr = current_ptr, temp_ptr != (undefined8 *)0x0) {\n        last_ptr = temp_ptr;\n        current_ptr = (undefined8 *)*temp_ptr;\n      }\n      *last_ptr = new_record;\n      return 1;\n    }\n    error_message = dcgettext(0,\"debug_record_parameter_0010bd62: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  return 0;\n}\n\n",
            "current_name": "record_parameter_0010bd62",
            "entrypoint": "0x0010bd62",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bd62": "record_parameter_0010bd62",
                "bVar8": "flag",
                "lVar5": "loop_counter",
                "param_1": "function_ptr",
                "param_2": "param1",
                "param_3": "param_size",
                "param_4": "param_type",
                "param_5": "param4",
                "puVar1": "current_ptr",
                "puVar3": "new_record",
                "puVar4": "temp_ptr",
                "puVar6": "last_ptr",
                "puVar7": "temp_ptr",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010be1a": {
            "additional_data": {
                "FUN_0010be1a": {
                    "1": "end_current_function",
                    "14": "debug_end_function",
                    "2": "find_current_function",
                    "3": "end_debugging_function"
                },
                "auVar4": {
                    "1": "return_value_struct",
                    "10": "return_value",
                    "5": "result"
                },
                "lVar1": {
                    "1": "block_context",
                    "13": "current_block",
                    "2": "current_block_ptr",
                    "3": "block_pointer"
                },
                "param_1": {
                    "1": "function_state_ptr",
                    "2": "function_pointer",
                    "3": "function_state",
                    "5": "function_info",
                    "7": "function_data"
                },
                "param_2": {
                    "1": "new_block_address",
                    "2": "new_address",
                    "3": "new_param"
                },
                "param_3": {
                    "1": "debug_info",
                    "17": "unused_param",
                    "2": "new_param3",
                    "3": "param_3"
                },
                "param_4": {
                    "1": "au_var4",
                    "2": "error_message",
                    "6": "return_value",
                    "8": "result"
                },
                "pcVar3": {
                    "1": "error_message_text",
                    "12": "error_string",
                    "14": "error_message",
                    "2": "error_text"
                },
                "uVar2": {
                    "1": "translation",
                    "12": "error_message",
                    "2": "localized_error"
                }
            },
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010c892",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16] debug_end_function_0010be1a(long function_data,undefined8 new_param,undefined8 unused_param,undefined8 result)\n\n{\n  long current_block;\n  undefined8 error_message;\n  char *error_message;\n  undefined return_value [16];\n  \n  if (((*(long *)(function_data + 8) == 0) || (current_block = *(long *)(function_data + 0x20), current_block == 0)) ||\n     (*(long *)(function_data + 0x18) == 0)) {\n    error_message = \"debug_end_function_0010be1a: no current function\";\n  }\n  else {\n    if (*(long *)(current_block + 8) == 0) {\n      *(undefined8 *)(current_block + 0x20) = new_param;\n      error_message = CONCAT71((int7)((ulong)current_block >> 8),1);\n      *(undefined (*) [16])(function_data + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    error_message = \"debug_end_function_0010be1a: some blocks were not closed\";\n  }\n  error_message = dcgettext(0,error_message,5);\n  fprintf(_stderr,\"%s\\n\",error_message);\n  error_message = 0;\nLAB_0010be86:\n  return_value._8_8_ = result;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "current_name": "debug_end_function_0010be1a",
            "entrypoint": "0x0010be1a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010be1a": "debug_end_function_0010be1a",
                "auVar4": "return_value",
                "lVar1": "current_block",
                "param_1": "function_data",
                "param_2": "new_param",
                "param_3": "unused_param",
                "param_4": "result",
                "pcVar3": "error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010be88": {
            "additional_data": {
                "FUN_0010be88": {
                    "1": "process_debug_start_block",
                    "10": "debug_start_block",
                    "11": "start_debug_block",
                    "6": "start_block_debugging"
                },
                "auVar9": {
                    "1": "return_value_struct",
                    "21": "return_value",
                    "3": "result"
                },
                "bVar8": {
                    "1": "temp_byte",
                    "12": "flag",
                    "2": "counter",
                    "3": "byte_value",
                    "6": "loop_counter"
                },
                "lVar5": {
                    "1": "temp_value",
                    "12": "block_address"
                },
                "param_1": {
                    "1": "block_start",
                    "4": "block_pointer",
                    "6": "block",
                    "7": "block_ptr"
                },
                "param_2": {
                    "1": "debug_param1",
                    "10": "start_address",
                    "5": "param2"
                },
                "param_3": {
                    "1": "unknown",
                    "2": "unused_param",
                    "5": "param3",
                    "7": "param_3"
                },
                "param_4": {
                    "1": "flags",
                    "2": "status",
                    "3": "param_4",
                    "4": "param4"
                },
                "puVar1": {
                    "1": "last_ptr",
                    "2": "current_block_ptr",
                    "3": "current",
                    "9": "current_ptr"
                },
                "puVar3": {
                    "1": "memory_block",
                    "14": "new_block",
                    "2": "allocated_memory",
                    "7": "new_block_ptr"
                },
                "puVar4": {
                    "1": "next_block_ptr",
                    "10": "temp_ptr",
                    "2": "next_block",
                    "5": "current_block"
                },
                "puVar6": {
                    "1": "ptr6",
                    "10": "last_ptr",
                    "2": "prev_block",
                    "4": "last_block"
                },
                "puVar7": {
                    "1": "loop_ptr",
                    "2": "ptr",
                    "3": "temp_ptr",
                    "6": "temp_block"
                },
                "puvar7": {
                    "1": "temp_block_ptr"
                },
                "uVar2": {
                    "1": "success_flag",
                    "21": "result",
                    "7": "success"
                }
            },
            "called": [
                "xmalloc",
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16] start_debug_block_0010be88(long block_info,undefined8 start_address,undefined8 param_3,undefined8 return_value)\n\n{\n  undefined8 *current_ptr;\n  undefined8 result;\n  undefined4 *new_block;\n  undefined8 *temp_ptr;\n  long block_address;\n  undefined8 *last_ptr;\n  undefined4 *temp_block;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  if ((*(long *)(block_info + 8) == 0) || (*(long *)(block_info + 0x20) == 0)) {\n    result = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    new_block = (undefined4 *)xmalloc(0x30);\n    temp_block = new_block;\n    for (block_address = 0xc; block_address != 0; block_address = block_address + -1) {\n      *temp_block = 0;\n      temp_block = temp_block + (ulong)flag * -2 + 1;\n    }\n    block_address = *(long *)(block_info + 0x20);\n    *(undefined8 *)(new_block + 6) = start_address;\n    *(undefined8 *)(new_block + 8) = 0xffffffffffffffff;\n    *(long *)(new_block + 2) = block_address;\n    current_ptr = *(undefined8 **)(block_address + 0x10);\n    last_ptr = (undefined8 *)(block_address + 0x10);\n    while (temp_ptr = current_ptr, temp_ptr != (undefined8 *)0x0) {\n      last_ptr = temp_ptr;\n      current_ptr = (undefined8 *)*temp_ptr;\n    }\n    *last_ptr = new_block;\n    result = 1;\n    *(undefined4 **)(block_info + 0x20) = new_block;\n  }\n  return_value._8_8_ = return_value;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "current_name": "start_debug_block_0010be88",
            "entrypoint": "0x0010be88",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010be88": "start_debug_block_0010be88",
                "auVar9": "return_value",
                "bVar8": "flag",
                "lVar5": "block_address",
                "param_1": "block_info",
                "param_2": "start_address",
                "param_4": "return_value",
                "puVar1": "current_ptr",
                "puVar3": "new_block",
                "puVar4": "temp_ptr",
                "puVar6": "last_ptr",
                "puVar7": "temp_block",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bf20": {
            "additional_data": {
                "FUN_0010bf20": {
                    "1": "close_block",
                    "14": "debug_end_block",
                    "4": "end_current_block",
                    "5": "end_block"
                },
                "auVar4": {
                    "1": "return_data",
                    "3": "return_value",
                    "8": "result"
                },
                "lVar1": {
                    "1": "current_block_info",
                    "22": "current_block",
                    "6": "current_block_ptr"
                },
                "param_1": {
                    "1": "block_manager_ptr",
                    "17": "block_ptr",
                    "2": "debug_block_ptr",
                    "4": "block_pointer",
                    "5": "block_info"
                },
                "param_2": {
                    "1": "block_id",
                    "2": "new_end_address",
                    "3": "new_block_ptr"
                },
                "param_3": {
                    "1": "undefined1",
                    "14": "unused_param",
                    "5": "unused"
                },
                "param_4": {
                    "1": "user_result",
                    "11": "return_value",
                    "2": "unused_param"
                },
                "pcVar3": {
                    "1": "error_msg_text",
                    "11": "error_string",
                    "13": "error_message",
                    "3": "error_msg"
                },
                "uVar2": {
                    "1": "error_code",
                    "10": "error_message",
                    "2": "translation",
                    "3": "localized_error_message",
                    "5": "error_msg"
                }
            },
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16] debug_end_block_0010bf20(long block_ptr,undefined8 new_block_ptr,undefined8 unused_param,undefined8 return_value)\n\n{\n  long current_block;\n  undefined8 error_message;\n  char *error_message;\n  undefined result [16];\n  \n  if ((*(long *)(block_ptr + 8) == 0) || (current_block = *(long *)(block_ptr + 0x20), current_block == 0)) {\n    error_message = \"debug_end_block_0010bf20: no current block\";\n  }\n  else {\n    if (*(long *)(current_block + 8) != 0) {\n      *(undefined8 *)(current_block + 0x20) = new_block_ptr;\n      error_message = CONCAT71((int7)((ulong)current_block >> 8),1);\n      *(long *)(block_ptr + 0x20) = *(long *)(current_block + 8);\n      goto LAB_0010bf84;\n    }\n    error_message = \"debug_end_block_0010bf20: attempt to close top level block\";\n  }\n  error_message = dcgettext(0,error_message,5);\n  fprintf(_stderr,\"%s\\n\",error_message);\n  error_message = 0;\nLAB_0010bf84:\n  result._8_8_ = return_value;\n  result._0_8_ = error_message;\n  return result;\n}\n\n",
            "current_name": "debug_end_block_0010bf20",
            "entrypoint": "0x0010bf20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bf20": "debug_end_block_0010bf20",
                "auVar4": "result",
                "lVar1": "current_block",
                "param_1": "block_ptr",
                "param_2": "new_block_ptr",
                "param_3": "unused_param",
                "param_4": "return_value",
                "pcVar3": "error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bf86": {
            "additional_data": {
                "FUN_0010bf86": {
                    "1": "record_line_debug_information",
                    "2": "record_line_debug_info",
                    "3": "update_record_line",
                    "8": "update_debug_record_line"
                },
                "_stderr": {
                    "1": "error_stream"
                },
                "bVar7": {
                    "1": "is_zero",
                    "2": "is_negative",
                    "21": "flag"
                },
                "lVar5": {
                    "1": "loop_index",
                    "2": "iterator",
                    "3": "index",
                    "4": "i",
                    "6": "loop_counter",
                    "7": "counter"
                },
                "param_1": {
                    "1": "info_ptr",
                    "2": "debug_context",
                    "3": "record_data",
                    "4": "unit",
                    "5": "record"
                },
                "param_2": {
                    "1": "record",
                    "11": "line_number",
                    "2": "debug_param1",
                    "3": "line_record",
                    "4": "line"
                },
                "param_3": {
                    "1": "line_info",
                    "2": "unit_pointer",
                    "6": "unit"
                },
                "puVar2": {
                    "1": "current_debug_ptr",
                    "10": "current_unit",
                    "2": "unit_pointer",
                    "3": "current_record"
                },
                "puVar4": {
                    "1": "new_entry",
                    "12": "new_record",
                    "2": "new_debug_record",
                    "3": "allocated_memory"
                },
                "puVar6": {
                    "1": "current_record_ptr",
                    "2": "record_ptr",
                    "3": "record_pointer",
                    "4": "temp_ptr",
                    "5": "pointer"
                },
                "uVar1": {
                    "1": "err_msg",
                    "15": "error_message",
                    "2": "error_string",
                    "5": "result",
                    "6": "message"
                },
                "uVar3": {
                    "1": "iteration_count",
                    "2": "i",
                    "21": "index",
                    "4": "counter"
                }
            },
            "called": [
                "xmalloc",
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 record_debug_line_0010bf86(long record,undefined8 line_number,undefined8 unit)\n\n{\n  undefined8 error_message;\n  undefined8 *current_unit;\n  ulong index;\n  undefined4 *new_record;\n  long counter;\n  undefined4 *pointer;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(record + 8) == 0) {\n    error_message = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(error_output,\"%s\\n\",error_message);\n    error_message = 0;\n  }\n  else {\n    counter = *(long *)(record + 0x28);\n    if ((counter != 0) && (*(long *)(counter + 8) == *(long *)(record + 0x10))) {\n      index = 0;\n      do {\n        if (*(long *)(counter + 0x10 + index * 8) == -1) {\n          current_unit = (undefined8 *)(index & 0xffffffff);\n          *(undefined8 *)(counter + 0x10 + (long)current_unit * 8) = line_number;\n          *(undefined8 *)(counter + 0x60 + (long)current_unit * 8) = unit;\n          goto LAB_0010c056;\n        }\n        index = index + 1;\n      } while (index != 10);\n    }\n    new_record = (undefined4 *)xmalloc(0xb0);\n    pointer = new_record;\n    for (counter = 0x2c; counter != 0; counter = counter + -1) {\n      *pointer = 0;\n      pointer = pointer + (ulong)flag * -2 + 1;\n    }\n    error_message = *(undefined8 *)(record + 0x10);\n    *(undefined8 *)(new_record + 4) = line_number;\n    *(undefined8 *)(new_record + 2) = error_message;\n    *(undefined8 *)(new_record + 0x18) = unit;\n    pointer = new_record + 6;\n    for (counter = 0x48; counter != 0; counter = counter + -1) {\n      *(undefined *)pointer = 0xff;\n      pointer = (undefined4 *)((long)pointer + (ulong)flag * -2 + 1);\n    }\n    current_unit = *(undefined8 **)(record + 0x28);\n    if (current_unit == (undefined8 *)0x0) {\n      current_unit = *(undefined8 **)(record + 8);\n      current_unit[2] = new_record;\n    }\n    else {\n      *current_unit = new_record;\n    }\n    *(undefined4 **)(record + 0x28) = new_record;\nLAB_0010c056:\n    error_message = CONCAT71((int7)((ulong)current_unit >> 8),1);\n  }\n  return error_message;\n}\n\n",
            "current_name": "record_debug_line_0010bf86",
            "entrypoint": "0x0010bf86",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bf86": "record_debug_line_0010bf86",
                "_stderr": "error_output",
                "bVar7": "flag",
                "lVar5": "counter",
                "param_1": "record",
                "param_2": "line_number",
                "param_3": "unit",
                "puVar2": "current_unit",
                "puVar4": "new_record",
                "puVar6": "pointer",
                "uVar1": "error_message",
                "uVar3": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c05d": {
            "additional_data": {
                "FUN_0010c05d": {
                    "1": "initialize_variable_memory",
                    "2": "record_variable_debug_info",
                    "5": "record_variable_debug",
                    "8": "debug_record_variable",
                    "9": "record_variable"
                },
                "_stderr": {
                    "1": "stderr_file"
                },
                "auVar1": {
                    "1": "temp_variable_1",
                    "2": "record",
                    "3": "result_variable",
                    "9": "result"
                },
                "auVar9": {
                    "1": "output_status",
                    "2": "result",
                    "9": "return_value"
                },
                "bVar8": {
                    "1": "bit_flag",
                    "2": "byte_value",
                    "3": "byte_var",
                    "4": "flag"
                },
                "cVar4": {
                    "1": "is_global",
                    "14": "flag",
                    "2": "condition"
                },
                "lVar5": {
                    "1": "loop_index",
                    "23": "loop_counter",
                    "3": "counter"
                },
                "lVar6": {
                    "1": "current",
                    "2": "memory_ptr",
                    "3": "memory_location",
                    "4": "current_file"
                },
                "param_1": {
                    "1": "file_ctx",
                    "11": "file_ptr",
                    "2": "file_structure",
                    "3": "file_data"
                },
                "param_2": {
                    "1": "input2",
                    "3": "variable_id",
                    "4": "size",
                    "5": "variable_address"
                },
                "param_3": {
                    "1": "record_length",
                    "2": "current_file",
                    "3": "variable_address",
                    "4": "variable_value"
                },
                "param_4": {
                    "1": "index",
                    "11": "variable_type",
                    "2": "var_type",
                    "3": "type",
                    "6": "record_type"
                },
                "param_5": {
                    "1": "data",
                    "10": "param_5",
                    "2": "unknown_param",
                    "3": "param5",
                    "4": "message"
                },
                "param_6": {
                    "1": "parameter_6",
                    "16": "result",
                    "2": "return_address",
                    "8": "param_6"
                },
                "piVar3": {
                    "1": "dynamic_array",
                    "2": "var_ptr",
                    "3": "record_ptr",
                    "4": "variable_info"
                },
                "piVar7": {
                    "1": "temp_array_ptr",
                    "2": "loop_ptr",
                    "3": "pointer"
                },
                "stdout": {
                    "1": "standard_output"
                },
                "uVar2": {
                    "1": "success_flag",
                    "4": "success",
                    "5": "result",
                    "7": "status"
                }
            },
            "called": [
                "xmalloc",
                "FUN_00112925",
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_00112a33",
                "FUN_0010c1c6",
                "FUN_0010c139",
                "FUN_0011173a"
            ],
            "code": "\n\n\nundefined  [16]\nrecord_variable_0010c05d(long file_ptr,long variable_size,ulong variable_value,int variable_type,undefined8 param_5,\n            undefined8 result)\n\n{\n  undefined result [16];\n  undefined8 status;\n  int *variable_info;\n  char flag;\n  long loop_counter;\n  long current_file;\n  int *pointer;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  if (variable_size == 0) {\n    result._8_8_ = 0;\n    result._0_8_ = variable_value;\n    return result << 0x40;\n  }\n  if (variable_value != 0) {\n    if ((*(long *)(file_ptr + 8) == 0) || (current_file = *(long *)(file_ptr + 0x10), current_file == 0)) {\n      status = dcgettext(0,\"debug_record_variable_0010c05d: no current file\",5);\n      fprintf(stderr,\"%s\\n\",status);\n    }\n    else {\n      if (variable_type - 1U < 2) {\n        current_file = current_file + 0x10;\n        flag = (variable_type == 1) + '\\x01';\n      }\n      else if (*(long *)(file_ptr + 0x20) == 0) {\n        current_file = current_file + 0x10;\n        flag = '\\0';\n      }\n      else {\n        current_file = *(long *)(file_ptr + 0x20) + 0x28;\n        flag = '\\0';\n      }\n      current_file = initialize_memory_00112925(current_file,variable_size,2,flag);\n      if (current_file != 0) {\n        variable_info = (int *)xmalloc(0x18);\n        pointer = variable_info + 1;\n        for (loop_counter = 5; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *pointer = 0;\n          pointer = pointer + (ulong)flag * -2 + 1;\n        }\n        *variable_info = variable_type;\n        status = 1;\n        *(ulong *)(variable_info + 2) = variable_value;\n        *(undefined8 *)(variable_info + 4) = param_5;\n        *(int **)(current_file + 0x20) = variable_info;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  status = 0;\nLAB_0010c12e:\n  return_value._8_8_ = result;\n  return_value._0_8_ = status;\n  return return_value;\n}\n\n",
            "current_name": "record_variable_0010c05d",
            "entrypoint": "0x0010c05d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c05d": "record_variable_0010c05d",
                "_stderr": "stderr",
                "auVar1": "result",
                "auVar9": "return_value",
                "bVar8": "flag",
                "cVar4": "flag",
                "lVar5": "loop_counter",
                "lVar6": "current_file",
                "param_1": "file_ptr",
                "param_2": "variable_size",
                "param_3": "variable_value",
                "param_4": "variable_type",
                "param_6": "result",
                "piVar3": "variable_info",
                "piVar7": "pointer",
                "uVar2": "status"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c139": {
            "additional_data": {
                "FUN_0010c139": {
                    "1": "allocate_or_update_memory",
                    "2": "manage_variable",
                    "3": "process_data"
                },
                "cVar2": {
                    "1": "flag_value",
                    "2": "flag_char",
                    "3": "record_flag",
                    "6": "flag",
                    "9": "char_value"
                },
                "in_R10": {
                    "1": "unaff_r10",
                    "2": "temp_2",
                    "3": "register10",
                    "4": "in_r10"
                },
                "param_1": {
                    "1": "buffer",
                    "2": "param",
                    "3": "data",
                    "5": "param_1",
                    "7": "param1"
                },
                "param_2": {
                    "1": "record_info",
                    "2": "struct_ptr",
                    "3": "record_ptr",
                    "4": "data",
                    "6": "param2"
                },
                "param_3": {
                    "1": "param_address",
                    "2": "new_param1",
                    "7": "param_3",
                    "8": "param3"
                },
                "param_4": {
                    "1": "param_d",
                    "2": "param_b",
                    "6": "param_4",
                    "9": "param4"
                },
                "param_5": {
                    "1": "arg5",
                    "2": "param_c",
                    "3": "flag",
                    "6": "param_5",
                    "9": "param5"
                },
                "param_6": {
                    "1": "parameter_4",
                    "2": "param_d",
                    "6": "param_6",
                    "9": "param6"
                },
                "param_7": {
                    "1": "unaff_r15"
                },
                "puVar4": {
                    "1": "new_ptr",
                    "2": "allocated_variable",
                    "3": "record_ptr",
                    "4": "new_record",
                    "6": "allocated_memory"
                },
                "record_variable_0010c05d": {
                    "1": "record_variable"
                },
                "uVar1": {
                    "1": "old_field_value",
                    "2": "previous_value",
                    "5": "old_value"
                },
                "uVar3": {
                    "1": "return_val",
                    "19": "result",
                    "9": "return_value"
                },
                "unaff_R15": {
                    "1": "register_r15",
                    "2": "temp_3",
                    "3": "register15",
                    "5": "unaff_r15"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "xmalloc",
                "FUN_0010c05d"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\nulong update_record_0010c139(undefined8 param1,long param2,undefined8 param3,undefined8 param4,\n                  undefined4 param5,undefined8 param6)\n\n{\n  undefined8 old_value;\n  char char_value;\n  ulong result;\n  undefined8 *allocated_memory;\n  undefined8 in_r10;\n  undefined8 unaff_r15;\n  \n  char_value = *(char *)(param2 + 0x60);\n  if ((char_value != '\\0') && ((*(int *)(param2 + 0x40) != 0 || (*(char *)(param2 + 0x44) == '\\0')))) {\n    allocated_memory = (undefined8 *)xmalloc(0x28);\n    old_value = *(undefined8 *)(param2 + 0x78);\n    *(undefined8 *)((long)allocated_memory + 0x1c) = 0;\n    allocated_memory[2] = param4;\n    *(undefined4 *)(allocated_memory + 3) = param5;\n    allocated_memory[4] = param6;\n    *(undefined8 **)(param2 + 0x78) = allocated_memory;\n    *allocated_memory = old_value;\n    allocated_memory[1] = param3;\n    return CONCAT71((int7)((ulong)unaff_r15 >> 8),char_value) & 0xffffffff;\n  }\n  result = record_variable(param1,param3,param4,param5,param6,in_r10);\n  return result;\n}\n\n",
            "current_name": "update_record_0010c139",
            "entrypoint": "0x0010c139",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c139": "update_record_0010c139",
                "cVar2": "char_value",
                "in_R10": "in_r10",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "puVar4": "allocated_memory",
                "record_variable_0010c05d": "record_variable",
                "uVar1": "old_value",
                "uVar3": "result",
                "unaff_R15": "unaff_r15",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c1c6": {
            "additional_data": {
                "*(undefined4 *)(__ptr + 3)": {
                    "1": "record_arg3"
                },
                "FUN_0010c1c6": {
                    "1": "extract_and_record_variables",
                    "14": "process_records",
                    "2": "deallocate_records",
                    "3": "update_records",
                    "4": "reverse_records"
                },
                "__ptr": {
                    "1": "current_node",
                    "17": "current_record",
                    "2": "current_record_ptr",
                    "4": "record_ptr"
                },
                "__ptr[1]": {
                    "1": "record1"
                },
                "__ptr[2]": {
                    "1": "record_arg2"
                },
                "__ptr[4]": {
                    "1": "record4"
                },
                "cVar2": {
                    "1": "record_status",
                    "14": "result",
                    "2": "flag",
                    "3": "return_value"
                },
                "param_1": {
                    "1": "param_record",
                    "2": "record_handler",
                    "3": "data",
                    "4": "param"
                },
                "param_2": {
                    "1": "param_second",
                    "2": "records",
                    "3": "record",
                    "4": "record_ptr",
                    "5": "data"
                },
                "param_3": {
                    "1": "unused_1",
                    "2": "param1",
                    "3": "unused_param",
                    "5": "param_3",
                    "6": "param3"
                },
                "param_4": {
                    "1": "unknown_2",
                    "2": "arg4",
                    "5": "param_4",
                    "6": "param4"
                },
                "param_5": {
                    "1": "unused_param_3",
                    "2": "arg5",
                    "6": "param_5",
                    "8": "param5"
                },
                "param_6": {
                    "1": "param_unk4",
                    "2": "param4",
                    "6": "param_6",
                    "8": "param6"
                },
                "puVar1": {
                    "1": "next_node",
                    "12": "next_record",
                    "6": "next_ptr",
                    "8": "next_record_ptr"
                },
                "record_variable_0010c05d": {
                    "1": "process_record"
                }
            },
            "called": [
                "FUN_0010c05d",
                "free"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010c892"
            ],
            "code": "\nundefined process_records_0010c1c6(undefined8 param,long data,undefined8 param3,undefined8 param4,\n                      undefined8 param5,undefined8 param6)\n\n{\n  undefined8 *next_record;\n  char result;\n  undefined8 *current_record;\n  \n  current_record = *(undefined8 **)(data + 0x78);\n  while( true ) {\n    if (current_record == (undefined8 *)0x0) {\n      *(undefined8 *)(data + 0x78) = 0;\n      return 1;\n    }\n    result = process_record(param,record_arg1,record_arg2,*(undefined4 *)(current_record + 3),record_arg4,param6,\n                         param5);\n    if (result == '\\0') break;\n    next_record = (undefined8 *)*current_record;\n    free(current_record);\n    current_record = next_record;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_records_0010c1c6",
            "entrypoint": "0x0010c1c6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c1c6": "process_records_0010c1c6",
                "__ptr": "current_record",
                "__ptr[1]": "record_arg1",
                "__ptr[2]": "record_arg2",
                "__ptr[4]": "record_arg4",
                "cVar2": "result",
                "param_1": "param",
                "param_2": "data",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "puVar1": "next_record",
                "record_variable_0010c05d": "process_record"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c218": {
            "additional_data": {
                "FUN_0010c218": {
                    "1": "initialize_memory_and_return_handle",
                    "2": "initialize_memory_from_file",
                    "8": "initialize_debug_name_type"
                },
                "_stderr": {
                    "1": "file_descriptor"
                },
                "lVar2": {
                    "1": "memory_block_ptr",
                    "4": "memory_address",
                    "6": "memory",
                    "8": "memory_ptr",
                    "9": "memory_block"
                },
                "lVar4": {
                    "1": "result_ptr",
                    "2": "initialized_memory_ptr",
                    "3": "current_file",
                    "4": "result",
                    "6": "initialized_memory"
                },
                "param_1": {
                    "1": "file_struct",
                    "2": "file_struct_ptr",
                    "4": "file_ptr",
                    "8": "file_info"
                },
                "param_2": {
                    "1": "debug_type",
                    "2": "file_pointer",
                    "3": "type",
                    "4": "debug_name_type",
                    "6": "name_type"
                },
                "param_3": {
                    "1": "arg3",
                    "2": "debug_type",
                    "3": "debug_name_type",
                    "4": "name_type",
                    "8": "current_file"
                },
                "pauVar3": {
                    "1": "allocated_memory",
                    "2": "ptr_array",
                    "3": "memory_array_ptr",
                    "4": "memory_block",
                    "5": "memory_pointer"
                },
                "uVar1": {
                    "1": "translated_debug_name",
                    "2": "debug_message",
                    "24": "error_message"
                }
            },
            "called": [
                "FUN_00112904",
                "xmalloc",
                "FUN_00112925",
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_00112a33",
                "FUN_0011173a",
                "FUN_0010dac0",
                "FUN_0010c2d2"
            ],
            "code": "\n\n\nlong initialize_debug_name_type_0010c218(long file_info,long name_type,long current_file)\n\n{\n  undefined8 error_message;\n  long memory_block;\n  undefined (*memory_pointer) [16];\n  long initialized_memory;\n  \n  if ((name_type != 0) && (current_file != 0)) {\n    if ((*(long *)(file_info + 8) == 0) || (*(long *)(file_info + 0x10) == 0)) {\n      error_message = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(standard_error,\"%s\\n\",error_message);\n    }\n    else {\n      memory_block = initialize_memory_00112904(0x16,0);\n      if (memory_block != 0) {\n        memory_pointer = (undefined (*) [16])xmalloc(0x10);\n        initialized_memory = *(long *)(file_info + 0x10);\n        *memory_pointer = ZEXT816(0);\n        *(long *)(*memory_pointer + 8) = current_file;\n        *(undefined (**) [16])(memory_block + 0x10) = memory_pointer;\n        initialized_memory = initialize_memory_00112925(initialized_memory + 0x10,name_type,0,3);\n        if (initialized_memory != 0) {\n          *(long *)(initialized_memory + 0x20) = memory_block;\n          *(long *)*memory_pointer = initialized_memory;\n          return memory_block;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_debug_name_type_0010c218",
            "entrypoint": "0x0010c218",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c218": "initialize_debug_name_type_0010c218",
                "_stderr": "standard_error",
                "lVar2": "memory_block",
                "lVar4": "initialized_memory",
                "param_1": "file_info",
                "param_2": "name_type",
                "param_3": "current_file",
                "pauVar3": "memory_pointer",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c2d2": {
            "additional_data": {
                "FUN_0010c2d2": {
                    "1": "initialize_data_types",
                    "10": "initialize_data_type",
                    "2": "get_data_type",
                    "3": "initialize_debug_name_type",
                    "7": "initialize_type"
                },
                "lVar4": {
                    "1": "debug_name_type",
                    "13": "result",
                    "2": "type_address",
                    "4": "data_type",
                    "5": "data_type_address"
                },
                "param_1": {
                    "1": "debugger",
                    "4": "param",
                    "8": "param_1",
                    "9": "param1"
                },
                "param_2": {
                    "1": "data",
                    "4": "arg2",
                    "5": "param_2",
                    "9": "param2"
                },
                "param_3": {
                    "1": "type",
                    "4": "arg3",
                    "5": "type_info",
                    "8": "param3"
                },
                "pcVar2": {
                    "1": "data_type_str",
                    "12": "type_name",
                    "4": "data_type_string",
                    "5": "data_type",
                    "6": "type_string"
                },
                "plVar5": {
                    "1": "file_data_ptr",
                    "10": "file_data",
                    "2": "memory_pointer",
                    "5": "file_result"
                },
                "uVar1": {
                    "1": "identifier",
                    "2": "type_value",
                    "7": "type",
                    "8": "type_index"
                },
                "uVar3": {
                    "1": "val3",
                    "16": "memory_value",
                    "2": "type_value",
                    "3": "data_type_value",
                    "4": "value"
                },
                "uVar6": {
                    "1": "abs_type_code",
                    "2": "negative_type",
                    "4": "neg_type_index",
                    "7": "index"
                }
            },
            "called": [
                "FUN_00113df2",
                "FUN_00113dfe",
                "FUN_00112904",
                "FUN_0010c218",
                "FUN_00113e17",
                "FUN_00113e23",
                "dcgettext",
                "fprintf",
                "FUN_00109022"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nlong initialize_data_type_0010c2d2(undefined8 param1,long param2,int *param3)\n\n{\n  uint type_index;\n  char *type_name;\n  undefined8 memory_value;\n  long result;\n  long *file_data;\n  uint index;\n  \n  if ((*param3 == 0) && (type_index = param3[1], (int)type_index < 0)) {\n    index = ~type_index;\n    if (index < 0x22) {\n      result = *(long *)(param2 + 0x90 + (ulong)index * 8);\n      if (result == 0) {\n        switch(index) {\n        case 1:\n          memory_value = set_memory_value_00113dfe(1,0);\n          type_name = \"char\";\n          break;\n        case 2:\n          memory_value = set_memory_value_00113dfe(2,0);\n          type_name = \"short\";\n          break;\n        case 3:\n          memory_value = set_memory_value_00113dfe(4,0);\n          type_name = \"long\";\n          break;\n        case 4:\n          memory_value = set_memory_value_00113dfe(1,1);\n          type_name = \"unsigned char\";\n          break;\n        case 5:\n          memory_value = set_memory_value_00113dfe(1,0);\n          type_name = \"signed char\";\n          break;\n        case 6:\n          memory_value = set_memory_value_00113dfe(2,1);\n          type_name = \"unsigned short\";\n          break;\n        case 7:\n          memory_value = set_memory_value_00113dfe(4,1);\n          type_name = \"unsigned int\";\n          break;\n        case 8:\n          memory_value = set_memory_value_00113dfe(4,1);\n          type_name = \"unsigned\";\n          break;\n        case 9:\n          memory_value = set_memory_value_00113dfe(4,1);\n          type_name = \"unsigned long\";\n          break;\n        case 10:\n          memory_value = initialize_memory_00113e17();\n          type_name = \"void\";\n          break;\n        case 0xb:\n          memory_value = initialize_memory_00113df2(4);\n          type_name = \"float\";\n          break;\n        case 0xc:\n          memory_value = initialize_memory_00113df2(8);\n          type_name = \"double\";\n          break;\n        case 0xd:\n          memory_value = initialize_memory_00113df2(8);\n          type_name = \"long double\";\n          break;\n        case 0xe:\n          memory_value = set_memory_value_00113dfe(4,0);\n          type_name = \"integer\";\n          break;\n        case 0xf:\n          memory_value = initialize_memory_00112904(6,4);\n          type_name = \"boolean\";\n          break;\n        case 0x10:\n          memory_value = initialize_memory_00113df2(4);\n          type_name = \"short real\";\n          break;\n        case 0x11:\n          memory_value = initialize_memory_00113df2(8);\n          type_name = \"real\";\n          break;\n        case 0x12:\n          type_name = \"stringptr\";\n          memory_value = 0;\n          break;\n        case 0x13:\n          memory_value = set_memory_value_00113dfe(1,1);\n          type_name = \"character\";\n          break;\n        case 0x14:\n          memory_value = initialize_memory_00112904(6,1);\n          type_name = \"logical*1\";\n          break;\n        case 0x15:\n          memory_value = initialize_memory_00112904(6,2);\n          type_name = \"logical*2\";\n          break;\n        case 0x16:\n          memory_value = initialize_memory_00112904(6,4);\n          type_name = \"logical*4\";\n          break;\n        case 0x17:\n          memory_value = initialize_memory_00112904(6,4);\n          type_name = \"logical\";\n          break;\n        case 0x18:\n          memory_value = initialize_memory_00112904(5,8);\n          type_name = \"complex\";\n          break;\n        case 0x19:\n          memory_value = initialize_memory_00112904(5,0x10);\n          type_name = \"double complex\";\n          break;\n        case 0x1a:\n          memory_value = set_memory_value_00113dfe(1,0);\n          type_name = \"integer*1\";\n          break;\n        case 0x1b:\n          memory_value = set_memory_value_00113dfe(2,0);\n          type_name = \"integer*2\";\n          break;\n        case 0x1c:\n          memory_value = set_memory_value_00113dfe(4,0);\n          type_name = \"integer*4\";\n          break;\n        case 0x1d:\n          memory_value = set_memory_value_00113dfe(2,0);\n          type_name = \"wchar\";\n          break;\n        case 0x1e:\n          memory_value = set_memory_value_00113dfe(8,0);\n          type_name = \"long long\";\n          break;\n        case 0x1f:\n          memory_value = set_memory_value_00113dfe(8,1);\n          type_name = \"unsigned long long\";\n          break;\n        case 0x20:\n          memory_value = initialize_memory_00112904(6,8);\n          type_name = \"logical*8\";\n          break;\n        case 0x21:\n          memory_value = set_memory_value_00113dfe(8,0);\n          type_name = \"integer*8\";\n          break;\n        default:\n          memory_value = set_memory_value_00113dfe(4,0);\n          type_name = \"int\";\n        }\n        result = initialize_debug_name_type_0010c218(param1,type_name,memory_value);\n        *(long *)(param2 + 0x90 + (ulong)index * 8) = result;\n        return result;\n      }\n      return result;\n    }\n    type_name = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(_stderr,type_name,(ulong)type_index);\n  }\n  else {\n    file_data = (long *)process_file_00109022(param2);\n    if (file_data != (long *)0x0) {\n      if (*file_data == 0) {\n        result = initialize_memory_00113e23(file_data,0);\n        return result;\n      }\n      return *file_data;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_data_type_0010c2d2",
            "entrypoint": "0x0010c2d2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c2d2": "initialize_data_type_0010c2d2",
                "lVar4": "result",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "pcVar2": "type_name",
                "plVar5": "file_data",
                "uVar1": "type_index",
                "uVar3": "memory_value",
                "uVar6": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c6be": {
            "additional_data": {
                "FUN_0010c6be": {
                    "1": "parse_debug_tag",
                    "10": "debug_tag_type",
                    "11": "process_debug_tag",
                    "2": "process_debug_tag_type"
                },
                "ZEXT816": {
                    "1": "initialize_struct_value"
                },
                "_stderr": {
                    "1": "stderr",
                    "3": "error_output_stream"
                },
                "_stdout": {
                    "1": "standard_output_stream"
                },
                "dcgettext": {
                    "1": "get_translated_message"
                },
                "fprintf": {
                    "1": "print_error_message"
                },
                "iVar1": {
                    "1": "string_cmp_result",
                    "2": "strcmp_result",
                    "21": "comparison_result"
                },
                "initialize_memory_00112904": {
                    "1": "allocate_memory",
                    "4": "initialize_memory"
                },
                "initialize_memory_00112925": {
                    "1": "initialize_memory2"
                },
                "lVar5": {
                    "1": "file_offset_temp",
                    "10": "file_offset",
                    "2": "memory_address",
                    "3": "memory_offset"
                },
                "param_1": {
                    "1": "param",
                    "3": "file_offset",
                    "4": "file_info",
                    "6": "file_address"
                },
                "param_2": {
                    "1": "filename",
                    "17": "tag_name",
                    "2": "debug_tag",
                    "3": "tag",
                    "4": "file_name"
                },
                "param_3": {
                    "1": "tag_idx",
                    "2": "tag_type_ptr",
                    "6": "tag_data"
                },
                "pauVar4": {
                    "1": "tag_array_ptr",
                    "2": "tag_pointer",
                    "3": "tag_data",
                    "4": "tag_info"
                },
                "pcVar6": {
                    "27": "error_message",
                    "4": "error_msg"
                },
                "piVar3": {
                    "1": "memory_pointer",
                    "2": "new_tag_info",
                    "4": "new_tag_data",
                    "5": "new_tag",
                    "6": "new_tag_ptr"
                },
                "uVar2": {
                    "1": "localized_error",
                    "2": "translated_string",
                    "3": "translated_error_message",
                    "6": "translated_message"
                },
                "xmalloc": {
                    "1": "allocate_struct_memory",
                    "4": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00112925",
                "xmalloc",
                "dcgettext",
                "strcmp",
                "fprintf"
            ],
            "calling": [
                "FUN_00112a33",
                "FUN_0011173a",
                "FUN_0010c892"
            ],
            "code": "\n\n\nint * process_debug_tag_0010c6be(long file_address,char *tag_name,int *tag_ptr)\n\n{\n  int comparison_result;\n  undefined8 translated_message;\n  int *new_tag_ptr;\n  undefined (*tag_memory) [16];\n  long file_offset;\n  char *error_message;\n  \n  if ((tag_name != (char *)0x0) && (tag_ptr != (int *)0x0)) {\n    if (*(long *)(file_address + 0x10) == 0) {\n      error_message = \"debug_tag_type: no current file\";\n    }\n    else {\n      if (*tag_ptr != 0x17) {\n        new_tag_ptr = (int *)initialize_memory(0x17,0);\n        if (new_tag_ptr == (int *)0x0) {\n          return (int *)0x0;\n        }\n        tag_memory = (undefined (*) [16])xmalloc(0x10);\n        file_offset = *(long *)(file_address + 0x10);\n        *tag_memory = initialize_struct_value(0);\n        *(int **)(*tag_memory + 8) = tag_ptr;\n        *(undefined (**) [16])(new_tag_ptr + 4) = tag_memory;\n        file_offset = initialize_memory_extra(file_offset + 0x10,tag_name,1,3);\n        if (file_offset == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(file_offset + 0x20) = new_tag_ptr;\n        *(long *)*tag_memory = file_offset;\n        return new_tag_ptr;\n      }\n      comparison_result = strcmp(*(char **)(**(long **)(tag_ptr + 4) + 8),tag_name);\n      error_message = \"debug_tag_type: extra tag attempted\";\n      if (comparison_result == 0) {\n        return tag_ptr;\n      }\n    }\n    translated_message = dcgettext(0,error_message,5);\n    fprintf(error_output_stream,\"%s\\n\",translated_message);\n  }\n  return (int *)0x0;\n}\n\n",
            "current_name": "process_debug_tag_0010c6be",
            "entrypoint": "0x0010c6be",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c6be": "process_debug_tag_0010c6be",
                "ZEXT816": "initialize_struct_value",
                "_stderr": "error_output_stream",
                "dcgettext": "get_debug_message",
                "fprintf": "print_error_message",
                "iVar1": "comparison_result",
                "initialize_memory_00112904": "initialize_memory",
                "initialize_memory_00112925": "initialize_memory_extra",
                "lVar5": "file_offset",
                "param_1": "file_address",
                "param_2": "tag_name",
                "param_3": "tag_ptr",
                "pauVar4": "tag_memory",
                "pcVar6": "error_message",
                "piVar3": "new_tag_ptr",
                "uVar2": "translated_message",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c7a0": {
            "additional_data": {
                "FUN_0010c7a0": {
                    "11": "debug_set_class_id",
                    "17": "set_class_id",
                    "3": "set_debug_class_id"
                },
                "__s1": {
                    "1": "current_class_name",
                    "11": "existing_class_name",
                    "2": "existing_name",
                    "6": "type_name"
                },
                "auVar8": {
                    "1": "return_val",
                    "24": "return_value",
                    "3": "result"
                },
                "cVar5": {
                    "1": "equality_check",
                    "13": "is_equal",
                    "3": "result",
                    "6": "equality_result"
                },
                "check_equality_0010922b": {
                    "1": "check_equality_function"
                },
                "iVar6": {
                    "1": "new_id",
                    "13": "counter",
                    "2": "index",
                    "3": "incremented_value",
                    "6": "count"
                },
                "lVar3": {
                    "1": "data",
                    "12": "type_info",
                    "2": "temp",
                    "3": "type_data"
                },
                "param_1": {
                    "1": "id",
                    "2": "class_id",
                    "7": "object"
                },
                "param_2": {
                    "1": "str_param",
                    "2": "param_name",
                    "23": "class_name",
                    "4": "name"
                },
                "param_3": {
                    "1": "param_type",
                    "17": "type",
                    "2": "class_type",
                    "4": "type_kind"
                },
                "param_4": {
                    "1": "param_unknown",
                    "14": "param_4",
                    "6": "param",
                    "7": "param4"
                },
                "piVar4": {
                    "1": "type_info_ptr",
                    "10": "type_ptr",
                    "2": "type_pointer",
                    "5": "type_kind"
                },
                "puVar7": {
                    "1": "new_object",
                    "2": "current_node",
                    "3": "entry",
                    "4": "node",
                    "7": "new_node"
                },
                "uVar1": {
                    "1": "temp",
                    "24": "result",
                    "4": "return_value"
                },
                "uVar2": {
                    "1": "new_type",
                    "2": "index",
                    "3": "class_id",
                    "5": "type_id",
                    "6": "new_class_id"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "xmalloc",
                "strcmp",
                "__assert_fail",
                "FUN_0010922b"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] set_class_id_0010c7a0(long object,char *class_name,int *type,undefined8 param_4)\n\n{\n  undefined8 result;\n  uint new_class_id;\n  long type_info;\n  int *type_ptr;\n  char *existing_class_name;\n  char is_equal;\n  int counter;\n  undefined8 *new_node;\n  undefined return_value [16];\n  \n  if (3 < *type - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id_0010c7a0\");\n  }\n  type_info = *(long *)(type + 4);\n  new_node = (undefined8 *)(ulong)*(uint *)(type_info + 0xc);\n  if (*(uint *)(type_info + 0xc) <= *(uint *)(object + 0x38)) {\n    for (new_node = *(undefined8 **)(object + 0x50); new_node != (undefined8 *)0x0;\n        new_node = (undefined8 *)*new_node) {\n      type_ptr = (int *)new_node[1];\n      if (*type_ptr == *type) {\n        existing_class_name = (char *)new_node[2];\n        if (class_name == (char *)0x0) {\n          if (existing_class_name == (char *)0x0) {\nLAB_0010c82c:\n            is_equal = check_equality_function(object,type_ptr,type);\n            if (is_equal != '\\0') {\n              new_class_id = *(uint *)(*(long *)(new_node[1] + 0x10) + 0xc);\n              new_node = (undefined8 *)(ulong)new_class_id;\n              *(uint *)(type_info + 0xc) = new_class_id;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((existing_class_name != (char *)0x0) && (*existing_class_name == *class_name)) &&\n                (counter = strcmp(existing_class_name,class_name), counter == 0)) goto LAB_0010c82c;\n      }\n    }\n    counter = *(int *)(object + 0x34) + 1;\n    *(int *)(object + 0x34) = counter;\n    *(int *)(type_info + 0xc) = counter;\n    new_node = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(object + 0x50);\n    new_node[2] = class_name;\n    *(undefined8 **)(object + 0x50) = new_node;\n    *new_node = result;\n    new_node[1] = type;\n  }\nLAB_0010c884:\n  return_value._1_7_ = (undefined7)((ulong)new_node >> 8);\n  return_value[0] = 1;\n  return_value._8_8_ = param_4;\n  return return_value;\n}\n\n",
            "current_name": "set_class_id_0010c7a0",
            "entrypoint": "0x0010c7a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c7a0": "set_class_id_0010c7a0",
                "__s1": "existing_class_name",
                "auVar8": "return_value",
                "cVar5": "is_equal",
                "check_equality_0010922b": "check_equality_function",
                "iVar6": "counter",
                "lVar3": "type_info",
                "param_1": "object",
                "param_2": "class_name",
                "param_3": "type",
                "piVar4": "type_ptr",
                "puVar7": "new_node",
                "uVar1": "result",
                "uVar2": "new_class_id",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c892": {
            "additional_data": {
                "*puVar5": {
                    "1": "ptr_var5"
                },
                "FUN_0010c892": {
                    "1": "process_debugging",
                    "2": "process_debugging_records",
                    "3": "process_debug_records",
                    "5": "process_debug_function",
                    "6": "process_debug_info"
                },
                "cVar1": {
                    "1": "temp_char",
                    "16": "result",
                    "5": "flag"
                },
                "iVar6": {
                    "1": "int_value",
                    "18": "kind",
                    "2": "record_type",
                    "3": "record_kind"
                },
                "lVar2": {
                    "1": "memory_initialize_result",
                    "2": "memory_initialized",
                    "3": "memory_address",
                    "4": "memory_ptr",
                    "5": "initialized_memory",
                    "7": "memory"
                },
                "lVar3": {
                    "1": "temp_long3",
                    "13": "debug_tag",
                    "2": "debug_tag_result",
                    "7": "tag"
                },
                "param_1": {
                    "1": "data",
                    "2": "input_data",
                    "3": "debug_info",
                    "4": "param1"
                },
                "param_2": {
                    "1": "data",
                    "2": "debug_data",
                    "3": "record_data",
                    "4": "param2"
                },
                "puVar5": {
                    "1": "current_debug_info",
                    "2": "debug_entry",
                    "3": "node",
                    "7": "current_record"
                },
                "uVar4": {
                    "1": "output_variable",
                    "14": "return_value",
                    "3": "return_val",
                    "4": "status",
                    "8": "result"
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_0010c1c6",
                "dcgettext",
                "FUN_0010c6be",
                "FUN_0010be1a",
                "fprintf"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 process_debug_info_0010c892(undefined8 arg1,long arg2)\n\n{\n  char result;\n  long memory;\n  long debug_tag;\n  undefined8 return_value;\n  undefined8 *current_record;\n  int kind;\n  \n  if (*(char *)(arg2 + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (current_record = *(undefined8 **)(arg2 + 0x1a0); current_record != (undefined8 *)0x0;\n        current_record = (undefined8 *)*current_record) {\n      kind = *(int *)(current_record + 2);\n      debug_tag = current_record[1];\n      if (kind != 0) {\n        if (debug_tag != 0) {\n          if (kind - 7U < 5) goto LAB_0010c8d5;\n          return_value = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(_stderr,\"%s\\n\",return_value);\n        }\nLAB_0010c910:\n        current_record[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (debug_tag == 0) goto LAB_0010c910;\n      kind = 7;\nLAB_0010c8d5:\n      memory = initialize_memory_00112904(kind,0);\n      if (memory == 0) goto LAB_0010c910;\n      debug_tag = process_debug_tag_0010c6be(arg1,debug_tag,memory);\n      current_record[3] = debug_tag;\n      if (debug_tag == 0) goto LAB_0010c916;\n    }\n    return_value = 1;\n  }\n  else {\n    result = process_records_0010c1c6();\n    if (result != '\\0') {\n      result = debug_end_function_0010be1a(arg1,*(undefined8 *)(arg2 + 0x68));\n      if (result != '\\0') {\n        *(undefined *)(arg2 + 0x60) = 0;\n        *(undefined8 *)(arg2 + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_debug_info_0010c892",
            "entrypoint": "0x0010c892",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c892": "process_debug_info_0010c892",
                "cVar1": "result",
                "iVar6": "kind",
                "lVar2": "memory",
                "lVar3": "debug_tag",
                "param_1": "arg1",
                "param_2": "arg2",
                "puVar5": "current_record",
                "uVar4": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c95e": {
            "additional_data": {
                "FUN_0010c95e": {
                    "1": "decode_and_initialize",
                    "2": "process_data"
                },
                "__ptr": {
                    "1": "ptr_val",
                    "2": "copied_string",
                    "8": "type_string"
                },
                "bVar1": {
                    "1": "byte_val1",
                    "15": "current_byte",
                    "3": "byte_var1",
                    "4": "byte_value"
                },
                "bVar2": {
                    "1": "byte_val2",
                    "19": "next_byte",
                    "3": "byte_var2"
                },
                "bVar4": {
                    "1": "bool_variable_1",
                    "15": "is_signed",
                    "2": "flag1",
                    "3": "bool_var1"
                },
                "bVar5": {
                    "1": "bool_var_2",
                    "2": "flag2",
                    "3": "bool_var2",
                    "8": "is_char"
                },
                "bVar6": {
                    "1": "bool_3",
                    "2": "flag3",
                    "3": "is_float",
                    "4": "is_void",
                    "7": "is_unsigned"
                },
                "cVar7": {
                    "1": "char_val",
                    "13": "result",
                    "2": "status",
                    "4": "error_code"
                },
                "lVar10": {
                    "1": "type_offset",
                    "2": "long_var",
                    "3": "type"
                },
                "lVar10_NamedType": {
                    "1": "named_type_address"
                },
                "lVar15": {
                    "1": "long_value_2",
                    "2": "memory_block",
                    "3": "result_ptr",
                    "6": "memory_address"
                },
                "lVar15_Memory": {
                    "1": "memory_address"
                },
                "lVar15_NamedType": {
                    "1": "named_type_address"
                },
                "lVar16": {
                    "1": "temp_result"
                },
                "local_40": {
                    "1": "input_array",
                    "3": "char_array",
                    "6": "local_string_array",
                    "8": "string_array"
                },
                "local_40 ": {
                    "1": "local_string_array"
                },
                "local_40[0]": {
                    "1": "input_string"
                },
                "local_48": {
                    "1": "ulong_var_3",
                    "2": "local_variable_48",
                    "3": "ulong_var2"
                },
                "local_49": {
                    "1": "undefined_1",
                    "2": "local_flag",
                    "3": "undefined_var"
                },
                "local_4c": {
                    "1": "type_size"
                },
                "param_1": {
                    "1": "input1",
                    "2": "input_data",
                    "3": "function_params",
                    "4": "param_array"
                },
                "param_2": {
                    "1": "input_data",
                    "2": "data",
                    "9": "byte_array"
                },
                "param_3": {
                    "1": "memory_pointer",
                    "2": "parameter_3",
                    "3": "output"
                },
                "pbVar20": {
                    "1": "byte_ptr4",
                    "3": "current_byte"
                },
                "pbVar3": {
                    "1": "pointer_byte_variable_1",
                    "2": "byte_pointer",
                    "3": "current_position",
                    "4": "current_byte_ptr",
                    "5": "byte_ptr"
                },
                "pbVar9": {
                    "1": "next_byte_address",
                    "2": "next_byte_pointer",
                    "3": "next_position",
                    "5": "next_ptr",
                    "8": "next_byte_ptr"
                },
                "pcVar12": {
                    "1": "str_temp",
                    "2": "char_ptr",
                    "3": "type_name",
                    "4": "signed_type"
                },
                "pcVar19": {
                    "1": "string_type_2",
                    "2": "data_type",
                    "3": "type_string",
                    "4": "char_ptr2",
                    "6": "type_name"
                },
                "pcVar20": {
                    "1": "byte_ptr"
                },
                "ppcVar18": {
                    "1": "string_array_ptr",
                    "2": "char_pointer_pointer",
                    "3": "string_ptr",
                    "5": "char_ptr_ptr",
                    "6": "string_array"
                },
                "puVar16": {
                    "1": "ulong_ptr1",
                    "2": "ulong_pointer",
                    "6": "ulong_ptr"
                },
                "puVar17": {
                    "1": "unsigned_val",
                    "2": "undefined_pointer",
                    "5": "undefined_ptr"
                },
                "sVar13": {
                    "1": "size1",
                    "19": "string_length",
                    "2": "size_var",
                    "3": "str_length"
                },
                "uVar11": {
                    "1": "unsigned_long_value",
                    "11": "return_value",
                    "2": "uint_var2",
                    "3": "function_result",
                    "4": "result"
                },
                "uVar14": {
                    "1": "unsigned_variable_3",
                    "2": "ulong_var1",
                    "3": "number_length"
                },
                "uVar8": {
                    "1": "num_chars",
                    "11": "number",
                    "2": "uint_var1",
                    "6": "extracted_number"
                }
            },
            "called": [
                "FUN_0010914e",
                "FUN_00113df2",
                "FUN_00112904",
                "FUN_00108ea1",
                "FUN_00113bfa",
                "free",
                "FUN_00109a0b",
                "FUN_00113d3a",
                "FUN_00113ce0",
                "FUN_00113b4a",
                "strlen",
                "FUN_00113dfe",
                "FUN_0010911f",
                "FUN_00113b71",
                "FUN_00113cb9",
                "FUN_00113c43",
                "FUN_0010afd5",
                "FUN_0010d21c",
                "FUN_0010c95e",
                "FUN_0010d559",
                "FUN_00113e17",
                "FUN_00108e76",
                "FUN_0010d882",
                "FUN_00113b98"
            ],
            "calling": [
                "FUN_0010d21c",
                "FUN_0010c95e",
                "FUN_00113e5e",
                "FUN_0010d7d4"
            ],
            "code": "\nundefined8 process_data_0010c95e(undefined8 *param_array,byte **byte_array,long *output)\n\n{\n  byte current_byte;\n  byte next_byte;\n  byte *byte_ptr;\n  bool is_signed;\n  bool is_char;\n  bool is_unsigned;\n  char result;\n  uint number;\n  byte *next_byte_ptr;\n  long type_value;\n  undefined8 return_value;\n  char *signed_type;\n  size_t string_length;\n  ulong number_length;\n  void *type_string;\n  long memory_address;\n  ulong *ulong_ptr;\n  undefined *undefined_ptr;\n  char **string_array;\n  char *type_name;\n  byte *current_byte;\n  undefined undefined_var;\n  ulong ulong_var2;\n  char *string_array [2];\n  \n  while( true ) {\n    current_byte = *byte_array;\n    current_byte = *current_byte;\n    if ('T' < (char)current_byte) break;\n    if ((char)current_byte < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(current_byte) {\n    case 0x41:\n      memory_address = 0;\n      byte_ptr = current_byte;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *byte_array = current_byte + 1;\n      result = process_data_0010c95e(param_array,byte_array,output);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (output == (long *)0x0) {\n        return 1;\n      }\n      memory_address = initialize_memory_00113b71(*output);\n      *output = memory_address;\n      return 1;\n    case 0x46:\n      *byte_array = current_byte + 1;\n      if (output == (long *)0x0) {\n        ulong_ptr = (ulong *)0x0;\n        string_array = (char **)0x0;\n      }\n      else {\n        ulong_ptr = &ulong_var2;\n        string_array = string_array;\n      }\n      result = process_data_0010c95e_0010d882(param_array,byte_array,string_array,ulong_ptr);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (**byte_array == 0x5f) {\n        *byte_array = *byte_array + 1;\n        result = process_data_0010c95e(param_array,byte_array,output);\n        if (result == '\\0') {\n          return 0;\n        }\n        if (output == (long *)0x0) {\n          return 1;\n        }\n        memory_address = initialize_memory_00113ce0(*output,input_string,ulong_var2 & 0xff);\n        *output = memory_address;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *byte_array = current_byte + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      undefined_var = 0;\n      input_string = (char *)0x0;\n      ulong_var2 = 0;\n      *byte_array = current_byte + 1;\n      if (((&_sch_istable)[(ulong)current_byte[1] * 2] & 4) == 0) {\n        if (current_byte[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        string_array = string_array;\n        if (output == (long *)0x0) {\n          string_array = (char **)0x0;\n        }\n        result = parse_and_validate_input_0010d559(param_array,byte_array,string_array);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        number = extract_number_from_string_00108e76(byte_array);\n        byte_ptr = *byte_array;\n        string_length = strlen((char *)byte_ptr);\n        if (string_length < number) goto switchD_0010cdf9_caseD_60;\n        *byte_array = byte_ptr + number;\n        if ((output != (long *)0x0) &&\n           (input_string = (char *)find_string_in_memory_0010afd5(*param_array,param_array[1],byte_ptr,number,9),\n           input_string == (char *)0x0)) {\n          return 0;\n        }\n      }\n      next_byte = **byte_array;\n      if (current_byte == 0x4d) {\n        if ((next_byte == 0x43) || (next_byte == 0x56)) {\n          *byte_array = *byte_array + 1;\n        }\n        if (**byte_array != 0x46) goto switchD_0010cdf9_caseD_60;\n        *byte_array = *byte_array + 1;\n        if (output == (long *)0x0) {\n          undefined_ptr = (undefined *)0x0;\n          ulong_ptr = (ulong *)0x0;\n        }\n        else {\n          undefined_ptr = &undefined_var;\n          ulong_ptr = &ulong_var2;\n        }\n        result = process_data_0010c95e_0010d882(param_array,byte_array,ulong_ptr,undefined_ptr);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      if (**byte_array == 0x5f) {\n        *byte_array = *byte_array + 1;\n        result = process_data_0010c95e(param_array,byte_array,output);\n        if (result == '\\0') {\n          return 0;\n        }\n        if (output == (long *)0x0) {\n          return 1;\n        }\n        if (current_byte != 0x4d) {\n          memory_address = initialize_memory_00113bfa(input_string,*output);\n          *output = memory_address;\n          return 1;\n        }\n        memory_address = initialize_memory_00113b98(*output,input_string,ulong_var2,undefined_var);\n        *output = memory_address;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      return_value = parse_and_validate_input_0010d559(param_array,byte_array,output);\n      return return_value;\n    case 0x52:\n      *byte_array = current_byte + 1;\n      result = process_data_0010c95e(param_array,byte_array,output);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (output == (long *)0x0) {\n        return 1;\n      }\n      memory_address = initialize_memory_00113cb9(*output);\n      *output = memory_address;\n      return 1;\n    case 0x54:\n      *byte_array = current_byte + 1;\n      result = parse_number_00108ea1(byte_array,&ulong_var2);\n      if (result != '\\0') {\n        if ((uint)ulong_var2 < *(uint *)(param_array + 5)) {\n          input_string = *(char **)((ulong_var2 & 0xffffffff) * 0x10 + param_array[4]);\n          result = process_data_0010c95e(param_array,string_array,output);\n          if (result == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (current_byte == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *byte_array = current_byte + 1;\n    result = process_data_0010c95e(param_array,byte_array,output);\n    if (result == '\\0') {\n      return 0;\n    }\n    if (output == (long *)0x0) {\n      return 1;\n    }\n    memory_address = initialize_or_get_memory_block_00113d3a(*output);\n    *output = memory_address;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  is_unsigned = false;\n  is_signed = false;\n  result = '\\0';\n  is_char = false;\n  do {\n    byte_ptr = *byte_array;\n    current_byte = *byte_ptr;\n    if (current_byte == 0x55) {\n      result = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)current_byte) {\n      if (current_byte == 0x56) {\n        is_unsigned = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)current_byte) goto switchD_0010cdf9_caseD_60;\n      if ((char)current_byte < '_') goto LAB_0010cdfb;\n      switch(current_byte) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (output == (long *)0x0) {\nLAB_0010d0aa:\n          *byte_array = byte_ptr + 1;\n          return 1;\n        }\n        memory_address = find_named_type_0010914e(*param_array,&DAT_00120436);\n        *output = memory_address;\n        if (memory_address == 0) {\n          memory_address = initialize_memory_00112904(6,4);\n          *output = memory_address;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (output == (long *)0x0) goto LAB_0010d0aa;\n        type_name = \"unsigned char\";\n        if ((result == '\\0') && (type_name = \"char\", is_signed)) {\n          type_name = \"signed char\";\n        }\n        memory_address = find_named_type_0010914e(*param_array,type_name);\n        *output = memory_address;\n        if (memory_address == 0) {\n          memory_address = set_memory_value_00113dfe(1,result);\n          *output = memory_address;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (output == (long *)0x0) goto LAB_0010d0aa;\n        type_name = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (output == (long *)0x0) goto LAB_0010d0aa;\n        memory_address = find_named_type_0010914e(*param_array,\"float\");\n        *output = memory_address;\n        if (memory_address == 0) {\n          memory_address = initialize_memory_00113df2(4);\n          *output = memory_address;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (output == (long *)0x0) goto LAB_0010d0aa;\n        type_name = \"unsigned int\";\n        signed_type = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (output == (long *)0x0) goto LAB_0010d0aa;\n        type_name = \"long unsigned int\";\n        signed_type = \"long int\";\nLAB_0010ced2:\n        if (result == '\\0') {\n          type_name = signed_type;\n        }\n        memory_address = find_named_type_0010914e(*param_array,type_name);\n        *output = memory_address;\n        if (memory_address == 0) {\n          memory_address = set_memory_value_00113dfe(4,result);\n          *output = memory_address;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        type_name = \"long double\";\n        if (output == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        memory_address = find_named_type_0010914e(*param_array,type_name);\n        *output = memory_address;\n        if (memory_address == 0) {\n          memory_address = initialize_memory_00113df2(8);\n          *output = memory_address;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (output == (long *)0x0) goto LAB_0010d0aa;\n        type_name = \"short unsigned int\";\n        if (result == '\\0') {\n          type_name = \"short int\";\n        }\n        memory_address = find_named_type_0010914e(*param_array,type_name);\n        *output = memory_address;\n        if (memory_address == 0) {\n          memory_address = set_memory_value_00113dfe(2,result);\n          *output = memory_address;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        string_array = string_array;\n        if (output == (long *)0x0) {\n          string_array = (char **)0x0;\n        }\n        result = parse_and_validate_input_0010d21c(param_array,byte_array,string_array);\n        if (result == '\\0') {\n          return 0;\n        }\n        if (output == (long *)0x0) {\n          return 1;\n        }\n        string_length = strlen(input_string);\n        memory_address = find_string_in_memory_0010afd5(*param_array,param_array[1],input_string,string_length & 0xffffffff,9);\n        *output = memory_address;\n        free(input_string);\n        memory_address = *output;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (output == (long *)0x0) goto LAB_0010d0aa;\n        memory_address = find_named_type_0010914e(*param_array,&DAT_00120495);\n        *output = memory_address;\n        if (memory_address == 0) {\n          memory_address = initialize_memory_00113e17();\n          *output = memory_address;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (output == (long *)0x0) goto LAB_0010d0aa;\n        memory_address = find_named_type_0010914e(*param_array,\"__wchar_t\");\n        *output = memory_address;\n        if (memory_address == 0) {\n          memory_address = set_memory_value_00113dfe(2,1);\n          *output = memory_address;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (output == (long *)0x0) goto LAB_0010d0aa;\n        type_name = \"long long unsigned int\";\n        if (result == '\\0') {\n          type_name = \"long long int\";\n        }\n        memory_address = find_named_type_0010914e(*param_array,type_name);\n        *output = memory_address;\n        if (memory_address == 0) {\n          memory_address = set_memory_value_00113dfe(8,result);\n          *output = memory_address;\n        }\n      }\n      *byte_array = *byte_array + 1;\n      goto LAB_0010d1de;\n    }\n    if (current_byte == 0x43) {\n      is_char = true;\n      goto LAB_0010cd84;\n    }\n    if (current_byte != 0x53) goto LAB_0010cdc5;\n    is_signed = true;\nLAB_0010cd84:\n    *byte_array = byte_ptr + 1;\n  } while( true );\nLAB_0010ca26:\n  next_byte_ptr = byte_ptr + 1;\n  *byte_array = next_byte_ptr;\n  current_byte = *next_byte_ptr;\n  if (current_byte == 0) goto switchD_0010cdf9_caseD_60;\n  if (current_byte == 0x5f) {\n    *byte_array = byte_ptr + 2;\n    result = process_data_0010c95e(param_array,byte_array,output);\n    if (result == '\\0') {\n      return 0;\n    }\n    if (output == (long *)0x0) {\n      return 1;\n    }\n    type_value = find_named_type_0010914e(*param_array,\"int\");\n    if (type_value == 0) {\n      type_value = set_memory_value_00113dfe(4,0);\n    }\n    memory_address = initialize_and_allocate_memory_00113c43(*output,type_value,0,memory_address,0);\n    *output = memory_address;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)current_byte * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  memory_address = memory_address * 10 + (long)((char)current_byte + -0x30);\n  byte_ptr = next_byte_ptr;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)current_byte < ':') {\n    if ((char)current_byte < '0') {\n      if (current_byte != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      print_error_message_0010911f(current_byte);\n      if (output == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((current_byte != 0x47) || (*byte_array = byte_ptr + 1, ((&_sch_istable)[(ulong)byte_ptr[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  current_byte = *byte_array;\n  number = extract_number_from_string_00108e76(byte_array);\n  byte_ptr = *byte_array;\n  string_length = strlen((char *)byte_ptr);\n  number_length = (ulong)number;\n  if (number_length <= string_length) {\n    *byte_array = byte_ptr + number_length;\n    if (output == (long *)0x0) {\n      return 1;\n    }\n    type_string = (void *)copy_and_null_terminate_00109a0b(byte_ptr,number_length);\n    memory_address = find_named_type_0010914e(*param_array,type_string);\n    *output = memory_address;\n    free(type_string);\n    if (*output == 0) {\n      memory_address = find_string_in_memory_0010afd5(*param_array,param_array[1],byte_ptr,(int)*byte_array - (int)byte_ptr,0);\n      *output = memory_address;\njoined_r0x0010d1d8:\n      if (memory_address == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (is_char) {\n      memory_address = initialize_memory_00113b71(*output);\n      *output = memory_address;\n    }\n    if (is_unsigned) {\n      memory_address = initialize_memory_00113b4a(*output);\n      *output = memory_address;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  print_error_message_0010911f(current_byte);\n  return 0;\n}\n\n",
            "current_name": "process_data_0010c95e",
            "entrypoint": "0x0010c95e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c95e": "process_data_0010c95e",
                "__ptr": "type_string",
                "bVar1": "current_byte",
                "bVar2": "next_byte",
                "bVar4": "is_signed",
                "bVar5": "is_char",
                "bVar6": "is_unsigned",
                "cVar7": "result",
                "lVar10": "type_value",
                "lVar15": "memory_address",
                "local_40": "string_array",
                "local_40[0]": "input_string",
                "local_48": "ulong_var2",
                "local_49": "undefined_var",
                "param_1": "param_array",
                "param_2": "byte_array",
                "param_3": "output",
                "pbVar20": "current_byte",
                "pbVar3": "byte_ptr",
                "pbVar9": "next_byte_ptr",
                "pcVar12": "signed_type",
                "pcVar19": "type_name",
                "ppcVar18": "string_array",
                "puVar16": "ulong_ptr",
                "puVar17": "undefined_ptr",
                "sVar13": "string_length",
                "uVar11": "return_value",
                "uVar14": "number_length",
                "uVar8": "number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d21c": {
            "additional_data": {
                "FUN_0010d21c": {
                    "1": "parse_and_validate_string",
                    "2": "extract_number_from_string",
                    "3": "extract_string",
                    "4": "extract_and_parse_string",
                    "7": "parse_and_validate_input"
                },
                "__haystack": {
                    "1": "haystack_string",
                    "16": "haystack",
                    "2": "temp_haystack",
                    "4": "demangled_string"
                },
                "__ptr": {
                    "1": "buffer_ptr",
                    "2": "temp_ptr3",
                    "3": "copied_string",
                    "4": "temp_ptr1",
                    "6": "ptr1",
                    "7": "temp_ptr"
                },
                "__ptr_00": {
                    "1": "ptr_00",
                    "2": "temp_ptr4",
                    "4": "temp_ptr_2",
                    "7": "ptr2",
                    "8": "temp_ptr2"
                },
                "bVar1": {
                    "1": "char1",
                    "10": "current_byte",
                    "2": "temp_byte1",
                    "7": "current_char",
                    "8": "byte1"
                },
                "bVar14": {
                    "1": "index",
                    "2": "var14",
                    "3": "temp_byte1",
                    "5": "byte4"
                },
                "bVar16": {
                    "1": "temp_byte",
                    "2": "var16",
                    "3": "byte16",
                    "5": "byte5"
                },
                "bVar17": {
                    "1": "temp_var12",
                    "2": "temp_byte6",
                    "3": "byte17",
                    "5": "temp_byte5"
                },
                "bVar18": {
                    "1": "temp_flag3",
                    "2": "temp_byte7",
                    "3": "temp_byte4",
                    "5": "temp_byte6"
                },
                "bVar19": {
                    "1": "byte_var10",
                    "2": "var19",
                    "3": "byte19",
                    "5": "byte8"
                },
                "bVar3": {
                    "1": "begin_byte",
                    "2": "temp_byte2",
                    "3": "byte3",
                    "4": "temp_byte1",
                    "5": "byte2",
                    "6": "temp_byte"
                },
                "bVar5": {
                    "1": "extracted_byte",
                    "2": "temp_byte",
                    "3": "byte5",
                    "4": "temp_byte2",
                    "5": "byte3"
                },
                "cVar4": {
                    "1": "var4",
                    "10": "temp_char",
                    "4": "char_var",
                    "5": "char1"
                },
                "iVar7": {
                    "1": "int_value",
                    "2": "int_var7",
                    "4": "index",
                    "8": "temp_int"
                },
                "local_3c": {
                    "1": "data",
                    "4": "local_array",
                    "6": "numbers",
                    "7": "number_array"
                },
                "param_1": {
                    "1": "unused_param",
                    "13": "param1",
                    "2": "input_data",
                    "9": "param_1"
                },
                "param_2": {
                    "1": "string_array_ptr",
                    "11": "param2",
                    "2": "string_pointer",
                    "6": "string_ptr",
                    "7": "input_string"
                },
                "param_3": {
                    "1": "param_3",
                    "10": "output_string",
                    "11": "param3",
                    "4": "output_string_ptr"
                },
                "pbVar10": {
                    "1": "temp_byte2",
                    "2": "current_ptr",
                    "3": "byte_ptr2"
                },
                "pbVar2": {
                    "1": "ptr_byte",
                    "2": "byte_ptr2",
                    "3": "current_ptr",
                    "4": "byte_ptr"
                },
                "pcVar11": {
                    "1": "temp_var6",
                    "2": "var_11",
                    "4": "temp_ptr3",
                    "7": "var11"
                },
                "pcVar13": {
                    "1": "temp_char_pointer3",
                    "2": "temp_ptr6",
                    "4": "temp_ptr4",
                    "7": "var13"
                },
                "pcVar15": {
                    "1": "temp_string_4",
                    "2": "temp_ptr7",
                    "4": "temp_ptr5",
                    "7": "var15"
                },
                "sVar9": {
                    "1": "length",
                    "18": "string_length",
                    "2": "size_var",
                    "6": "str_length"
                },
                "uVar12": {
                    "1": "result2",
                    "2": "temp_result",
                    "3": "temp_u_int2"
                },
                "uVar20": {
                    "1": "loop_index",
                    "17": "counter",
                    "5": "count"
                },
                "uVar21": {
                    "1": "length_value",
                    "2": "local_var1",
                    "3": "converted_value",
                    "4": "converted_number",
                    "5": "ulong_var"
                },
                "uVar6": {
                    "1": "return_val",
                    "16": "result",
                    "9": "return_value"
                },
                "uVar8": {
                    "1": "extracted_value",
                    "2": "uint_var",
                    "3": "number",
                    "6": "temp_uint",
                    "7": "extracted_number"
                }
            },
            "called": [
                "strlen",
                "FUN_0010911f",
                "concat",
                "strstr",
                "FUN_0010c95e",
                "abort",
                "FUN_00108ea1",
                "free",
                "FUN_00108e76",
                "FUN_00109a0b",
                "cplus_demangle"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010d559",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined4 parse_and_validate_input_0010d21c(undefined8 param1,byte **param2,undefined8 *param3)\n\n{\n  byte current_byte;\n  byte *byte_ptr;\n  byte temp_byte;\n  char temp_char;\n  byte byte3;\n  undefined4 result;\n  int temp_int;\n  uint extracted_number;\n  size_t string_length;\n  byte *temp_string_ptr;\n  void *temp_ptr;\n  void *temp_ptr2;\n  char *haystack;\n  char *var11;\n  undefined8 temp_u_int2;\n  char *var13;\n  byte temp_byte3;\n  char *var15;\n  byte temp_byte4;\n  byte temp_byte5;\n  byte temp_byte6;\n  byte temp_byte7;\n  uint counter;\n  ulong ulong_var;\n  uint number_array [3];\n  \n  byte_ptr = *param2;\n  *param2 = byte_ptr + 1;\n  number_array[0] = extract_number_from_string_00108e76(param2);\n  ulong_var = (ulong)number_array[0];\n  if (number_array[0] != 0) {\n    temp_string_ptr = *param2;\n    string_length = strlen((char *)temp_string_ptr);\n    if (ulong_var <= string_length) {\n      *param2 = temp_string_ptr + ulong_var;\n      counter = 0;\n      result = parse_number_00108ea1(param2,number_array);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (number_array[0] <= counter) {\n          if (param3 == (undefined8 *)0x0) {\n            return result;\n          }\n          temp_ptr = (void *)copy_and_null_terminate_00109a0b(byte_ptr,(int)*param2 - (int)byte_ptr);\n          temp_ptr2 = (void *)concat(\"NoSuchStrinG__\",temp_ptr,0);\n          free(temp_ptr);\n          haystack = (char *)cplus_demangle(temp_ptr2,2);\n          free(temp_ptr2);\n          if ((haystack != (char *)0x0) &&\n             (var11 = strstr(haystack,\"::NoSuchStrinG\"), var13 = haystack,\n             var15 = haystack, var11 != (char *)0x0)) {\n            for (; var13 != var11; var13 = var13 + 1) {\n              if ((*var13 != ' ') ||\n                 (((var13[1] == '>' && (haystack < var13)) && (var13[-1] == '>')))) {\n                *var15 = *var13;\n                var15 = var15 + 1;\n              }\n            }\n            temp_u_int2 = copy_and_null_terminate_00109a0b(haystack,(int)var15 - (int)haystack);\n            *param3 = temp_u_int2;\n            free(haystack);\n            return result;\n          }\n          print_error_message_0010911f(byte_ptr);\n          free(haystack);\n          return 0;\n        }\n        temp_string_ptr = *param2;\n        if (*temp_string_ptr != 0x5a) {\n          byte3 = process_data_0010c95e(param1,param2,0);\n          if (byte3 == 0) {\n            return 0;\n          }\n          temp_byte = 0;\n          temp_byte3 = 0;\n          temp_byte6 = 0;\n          temp_byte5 = 0;\n          temp_byte7 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              temp_byte4 = temp_byte;\n              current_byte = *temp_string_ptr;\n              if ((temp_byte3 | current_byte == 0) != 0) {\n                byte3 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              temp_byte = byte3;\n              temp_byte3 = byte3;\n            } while ('v' < (char)current_byte);\n            if ((char)current_byte < 'b') {\n              if ((char)current_byte < 'U') {\n                if ((char)current_byte < 'C') goto LAB_0010d2e9;\n                ulong_var = 1L << (current_byte + 0xbd & 0x3f);\n                if ((ulong_var & 0x11409) == 0) {\n                  if ((ulong_var & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (current_byte == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(current_byte + 0xab)) goto LAB_0010d2e9;\n              temp_string_ptr = temp_string_ptr + 1;\n              temp_byte = temp_byte4;\n              temp_byte3 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(current_byte) {\n            case 0x62:\n              temp_byte = temp_byte4;\n              temp_byte6 = byte3;\n              break;\n            case 99:\n              temp_byte = temp_byte4;\n              temp_byte7 = byte3;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              temp_byte = temp_byte4;\n              temp_byte5 = byte3;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *param2 = temp_string_ptr + 1;\n        temp_char = process_data_0010c95e(param1,param2,0);\n        if (temp_char == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  print_error_message_0010911f(byte_ptr);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (temp_byte4 == 0) {\n    if (temp_byte7 == 0) {\n      if (temp_byte6 == 0) {\n        if (temp_byte5 == 0) {\n          if (byte3 != 0) {\n            extracted_number = extract_number_from_string_00108e76(param2);\n            if (extracted_number == 0) goto LAB_0010d280;\n            *param2 = *param2 + extracted_number;\n          }\n        }\n        else {\n          if (**param2 == 0x6d) {\n            *param2 = *param2 + 1;\n          }\n          while( true ) {\n            temp_string_ptr = *param2;\n            if (((&_sch_istable)[(ulong)*temp_string_ptr * 2] & 4) == 0) break;\n            *param2 = temp_string_ptr + 1;\n          }\n          if (*temp_string_ptr == 0x2e) {\n            do {\n              temp_string_ptr = temp_string_ptr + 1;\n              *param2 = temp_string_ptr;\n            } while (((&_sch_istable)[(ulong)*temp_string_ptr * 2] & 4) != 0);\n          }\n          temp_string_ptr = *param2;\n          if (*temp_string_ptr == 0x65) {\n            do {\n              temp_string_ptr = temp_string_ptr + 1;\n              *param2 = temp_string_ptr;\n            } while (((&_sch_istable)[(ulong)*temp_string_ptr * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        extracted_number = extract_number_from_string_00108e76(param2);\n        if (1 < extracted_number) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param2 == 0x6d) {\n        *param2 = *param2 + 1;\n      }\n      temp_int = extract_number_from_string_00108e76(param2);\n      if (temp_int == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param2 == 0x6d) {\n      *param2 = *param2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**param2 * 2] & 4) != 0) {\n      *param2 = *param2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  counter = counter + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "code_backup": "\nundefined4 FUN_0010d21c(undefined8 param_1,byte **param_2,undefined8 *param_3)\n\n{\n  byte bVar1;\n  byte *pbVar2;\n  byte bVar3;\n  char cVar4;\n  byte bVar5;\n  undefined4 uVar6;\n  int iVar7;\n  uint uVar8;\n  size_t sVar9;\n  byte *pbVar10;\n  void *__ptr;\n  void *__ptr_00;\n  char *__haystack;\n  char *pcVar11;\n  undefined8 uVar12;\n  char *pcVar13;\n  byte bVar14;\n  char *pcVar15;\n  byte bVar16;\n  byte bVar17;\n  byte bVar18;\n  byte bVar19;\n  uint uVar20;\n  ulong uVar21;\n  uint local_3c [3];\n  \n  pbVar2 = *param_2;\n  *param_2 = pbVar2 + 1;\n  local_3c[0] = extract_number_from_string_00108e76(param_2);\n  uVar21 = (ulong)local_3c[0];\n  if (local_3c[0] != 0) {\n    pbVar10 = *param_2;\n    sVar9 = strlen((char *)pbVar10);\n    if (uVar21 <= sVar9) {\n      *param_2 = pbVar10 + uVar21;\n      uVar20 = 0;\n      uVar6 = parse_number_00108ea1(param_2,local_3c);\n      if ((char)uVar6 != '\\0') {\nLAB_0010d2b4:\n        if (local_3c[0] <= uVar20) {\n          if (param_3 == (undefined8 *)0x0) {\n            return uVar6;\n          }\n          __ptr = (void *)copy_and_null_terminate_00109a0b(pbVar2,(int)*param_2 - (int)pbVar2);\n          __ptr_00 = (void *)concat(\"NoSuchStrinG__\",__ptr,0);\n          free(__ptr);\n          __haystack = (char *)cplus_demangle(__ptr_00,2);\n          free(__ptr_00);\n          if ((__haystack != (char *)0x0) &&\n             (pcVar11 = strstr(__haystack,\"::NoSuchStrinG\"), pcVar13 = __haystack,\n             pcVar15 = __haystack, pcVar11 != (char *)0x0)) {\n            for (; pcVar13 != pcVar11; pcVar13 = pcVar13 + 1) {\n              if ((*pcVar13 != ' ') ||\n                 (((pcVar13[1] == '>' && (__haystack < pcVar13)) && (pcVar13[-1] == '>')))) {\n                *pcVar15 = *pcVar13;\n                pcVar15 = pcVar15 + 1;\n              }\n            }\n            uVar12 = copy_and_null_terminate_00109a0b(__haystack,(int)pcVar15 - (int)__haystack);\n            *param_3 = uVar12;\n            free(__haystack);\n            return uVar6;\n          }\n          print_error_message_0010911f(pbVar2);\n          free(__haystack);\n          return 0;\n        }\n        pbVar10 = *param_2;\n        if (*pbVar10 != 0x5a) {\n          bVar5 = FUNC_0010c95e(param_1,param_2,0);\n          if (bVar5 == 0) {\n            return 0;\n          }\n          bVar3 = 0;\n          bVar14 = 0;\n          bVar18 = 0;\n          bVar17 = 0;\n          bVar19 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              bVar16 = bVar3;\n              bVar1 = *pbVar10;\n              if ((bVar14 | bVar1 == 0) != 0) {\n                bVar5 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              bVar3 = bVar5;\n              bVar14 = bVar5;\n            } while ('v' < (char)bVar1);\n            if ((char)bVar1 < 'b') {\n              if ((char)bVar1 < 'U') {\n                if ((char)bVar1 < 'C') goto LAB_0010d2e9;\n                uVar21 = 1L << (bVar1 + 0xbd & 0x3f);\n                if ((uVar21 & 0x11409) == 0) {\n                  if ((uVar21 & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (bVar1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(bVar1 + 0xab)) goto LAB_0010d2e9;\n              pbVar10 = pbVar10 + 1;\n              bVar3 = bVar16;\n              bVar14 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(bVar1) {\n            case 0x62:\n              bVar3 = bVar16;\n              bVar18 = bVar5;\n              break;\n            case 99:\n              bVar3 = bVar16;\n              bVar19 = bVar5;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              bVar3 = bVar16;\n              bVar17 = bVar5;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *param_2 = pbVar10 + 1;\n        cVar4 = FUNC_0010c95e(param_1,param_2,0);\n        if (cVar4 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  print_error_message_0010911f(pbVar2);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (bVar16 == 0) {\n    if (bVar19 == 0) {\n      if (bVar18 == 0) {\n        if (bVar17 == 0) {\n          if (bVar5 != 0) {\n            uVar8 = extract_number_from_string_00108e76(param_2);\n            if (uVar8 == 0) goto LAB_0010d280;\n            *param_2 = *param_2 + uVar8;\n          }\n        }\n        else {\n          if (**param_2 == 0x6d) {\n            *param_2 = *param_2 + 1;\n          }\n          while( true ) {\n            pbVar10 = *param_2;\n            if (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) == 0) break;\n            *param_2 = pbVar10 + 1;\n          }\n          if (*pbVar10 == 0x2e) {\n            do {\n              pbVar10 = pbVar10 + 1;\n              *param_2 = pbVar10;\n            } while (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) != 0);\n          }\n          pbVar10 = *param_2;\n          if (*pbVar10 == 0x65) {\n            do {\n              pbVar10 = pbVar10 + 1;\n              *param_2 = pbVar10;\n            } while (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uVar8 = extract_number_from_string_00108e76(param_2);\n        if (1 < uVar8) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param_2 == 0x6d) {\n        *param_2 = *param_2 + 1;\n      }\n      iVar7 = extract_number_from_string_00108e76(param_2);\n      if (iVar7 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param_2 == 0x6d) {\n      *param_2 = *param_2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**param_2 * 2] & 4) != 0) {\n      *param_2 = *param_2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  uVar20 = uVar20 + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "current_name": "parse_and_validate_input_0010d21c",
            "entrypoint": "0x0010d21c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010d21c": "parse_and_validate_input_0010d21c",
                "__haystack": "haystack",
                "__ptr": "temp_ptr",
                "__ptr_00": "temp_ptr2",
                "bVar1": "current_byte",
                "bVar14": "temp_byte3",
                "bVar16": "temp_byte4",
                "bVar17": "temp_byte5",
                "bVar18": "temp_byte6",
                "bVar19": "temp_byte7",
                "bVar3": "temp_byte",
                "bVar5": "byte3",
                "cVar4": "temp_char",
                "iVar7": "temp_int",
                "local_3c": "number_array",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "pbVar10": "temp_string_ptr",
                "pbVar2": "byte_ptr",
                "pcVar11": "var11",
                "pcVar13": "var13",
                "pcVar15": "var15",
                "sVar9": "string_length",
                "uVar12": "temp_u_int2",
                "uVar20": "counter",
                "uVar21": "ulong_var",
                "uVar6": "result",
                "uVar8": "extracted_number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d559": {
            "additional_data": {
                "FUN_0010d559": {
                    "1": "validate_and_extract_data",
                    "2": "process_input",
                    "3": "validate_and_extract",
                    "4": "parse_input",
                    "8": "parse_and_validate_input"
                },
                "__nptr": {
                    "1": "byte_ptr_3"
                },
                "__ptr": {
                    "1": "temp_pointer_2",
                    "2": "temporary_string",
                    "3": "temp_buffer",
                    "4": "temp_ptr"
                },
                "__s1": {
                    "1": "data",
                    "11": "extracted_string",
                    "2": "string",
                    "3": "extracted_data"
                },
                "bVar1": {
                    "1": "byte_var",
                    "10": "first_char",
                    "2": "first_byte",
                    "3": "second_char",
                    "4": "second_byte",
                    "7": "byte_value"
                },
                "cVar3": {
                    "1": "char_val",
                    "3": "is_valid",
                    "4": "result",
                    "7": "char_value",
                    "9": "validation_result"
                },
                "iVar5": {
                    "1": "int_val",
                    "2": "int_value",
                    "20": "comparison_result",
                    "4": "string_comparison_result"
                },
                "lVar8": {
                    "1": "memory_address",
                    "14": "result",
                    "2": "temp_value",
                    "5": "search_result"
                },
                "local_40": {
                    "1": "local_string_array",
                    "2": "result_string_array",
                    "3": "temporary_string_array",
                    "5": "string_array"
                },
                "local_64": {
                    "1": "iteration_count",
                    "3": "remaining_iterations",
                    "4": "loop_counter",
                    "5": "count",
                    "8": "counter"
                },
                "param_1": {
                    "1": "data",
                    "12": "input_array",
                    "2": "input_data"
                },
                "param_2": {
                    "1": "string_pointer",
                    "10": "input_string",
                    "2": "input_data",
                    "3": "byte_array_ptr",
                    "4": "byte_array"
                },
                "param_3": {
                    "1": "input_length",
                    "14": "output_length",
                    "2": "length",
                    "3": "result_ptr",
                    "4": "string_length"
                },
                "pbVar11": {
                    "1": "updated_input_string",
                    "2": "new_string_ptr",
                    "3": "updated_char"
                },
                "pbVar2": {
                    "1": "second_byte_ptr",
                    "2": "data_ptr",
                    "3": "current_byte",
                    "4": "current_char",
                    "5": "byte_ptr"
                },
                "pcVar10": {
                    "1": "str",
                    "15": "temp_string",
                    "2": "string_to_find"
                },
                "plVar9": {
                    "1": "ptr_array_ptr",
                    "2": "data_array",
                    "3": "pointer_list",
                    "8": "pointer_array"
                },
                "ppcVar6": {
                    "1": "ptr_string",
                    "2": "local_strings",
                    "3": "string_array_ptr"
                },
                "sVar7": {
                    "1": "len",
                    "23": "string_length"
                },
                "uVar12": {
                    "1": "comparison_flag",
                    "2": "type_length",
                    "3": "type_value"
                },
                "uVar4": {
                    "1": "num_chars",
                    "15": "extracted_number",
                    "2": "string_length",
                    "3": "number"
                }
            },
            "called": [
                "strlen",
                "FUN_0010914e",
                "FUN_0010911f",
                "FUN_0010afd5",
                "FUN_0010d21c",
                "FUN_001129f4",
                "FUN_00113b1e",
                "free",
                "FUN_00108e76",
                "strcmp",
                "FUN_00109a0b",
                "strtol"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 parse_and_validate_input_0010d559(undefined8 *input_array,byte **input_string,long *output_length)\n\n{\n  byte first_char;\n  byte *byte_ptr;\n  char validation_result;\n  uint extracted_number;\n  int comparison_result;\n  char **local_array;\n  size_t string_length;\n  long result;\n  long *pointer_array;\n  char *temp_string;\n  char *extracted_string;\n  void *temp_ptr;\n  byte *updated_byte_ptr;\n  undefined8 type_value;\n  byte *byte_ptr_3;\n  int counter;\n  char *string_array [2];\n  \n  byte_ptr = *input_string;\n  first_char = byte_ptr[1];\n  if ((char)first_char < ':') {\n    if ((char)first_char < '1') goto LAB_0010d5d8;\n    counter = (char)first_char + -0x30;\n    if (byte_ptr[2] == 0x5f) {\n      *input_string = byte_ptr + 1;\n    }\n    updated_byte_ptr = *input_string + 2;\n  }\n  else {\n    if (((first_char != 0x5f) || (((&_sch_istable)[(ulong)byte_ptr[2] * 2] & 4) == 0)) ||\n       (byte_ptr[2] == 0x30)) goto LAB_0010d5d8;\n    byte_ptr_3 = byte_ptr + 2;\n    result = strtol((char *)byte_ptr_3,(char **)0x0,10);\n    counter = (int)result;\n    while (((&_sch_istable)[(ulong)*byte_ptr_3 * 2] & 4) != 0) {\n      byte_ptr_3 = byte_ptr_3 + 1;\n    }\n    updated_byte_ptr = byte_ptr_3 + 1;\n    if (*byte_ptr_3 != 0x5f) goto LAB_0010d5d8;\n  }\n  *input_string = updated_byte_ptr;\n  local_array = (char **)0x0;\n  if (output_length != (long *)0x0) {\n    local_array = string_array;\n  }\n  result = 0;\n  while( true ) {\n    while( true ) {\n      counter = counter + -1;\n      if (counter == -1) {\n        if (output_length != (long *)0x0) {\n          *output_length = result;\n        }\n        return 1;\n      }\n      if (**input_string == 0x5f) {\n        *input_string = *input_string + 1;\n      }\n      if (**input_string != 0x74) break;\n      validation_result = parse_and_validate_input_0010d559_0010d21c(input_array,input_string,local_array);\n      temp_string = string_array[0];\n      if (validation_result == '\\0') {\n        return 0;\n      }\n      if (output_length != (long *)0x0) {\n        string_length = strlen(string_array[0]);\n        result = find_string_in_memory_0010afd5(*input_array,input_array[1],temp_string,string_length & 0xffffffff,9);\n        free(temp_string);\n        if (result == 0) {\n          return 0;\n        }\n      }\n    }\n    extracted_number = extract_number_from_string_00108e76(input_string);\n    string_length = strlen((char *)*input_string);\n    if (string_length < extracted_number) break;\n    if (output_length != (long *)0x0) {\n      if ((result != 0) && (pointer_array = (long *)extract_real_value_00113b1e(result), pointer_array != (long *)0x0)) {\n        temp_string = (char *)copy_and_null_terminate_00109a0b(*input_string,extracted_number);\n        for (; result = *pointer_array, result != 0; pointer_array = pointer_array + 1) {\n          result = *(long *)(result + 8);\n          if (result == 0) {\n            free(temp_string);\n            return 0;\n          }\n          extracted_string = (char *)extract_data_001129f4(result);\n          if ((extracted_string != (char *)0x0) && (comparison_result = strcmp(extracted_string,temp_string), comparison_result == 0)) break;\n        }\n        free(temp_string);\n        if (result != 0) goto LAB_0010d7ad;\n      }\n      type_value = 9;\n      if (counter == 0) {\n        temp_ptr = (void *)copy_and_null_terminate_00109a0b(*input_string,extracted_number);\n        result = find_named_type_0010914e(*input_array,temp_ptr);\n        free(temp_ptr);\n        if (result != 0) goto LAB_0010d7ad;\n        type_value = 0;\n      }\n      result = find_string_in_memory_0010afd5(*input_array,input_array[1],*input_string,extracted_number,type_value);\n      if (result == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *input_string = *input_string + extracted_number;\n  }\nLAB_0010d5d8:\n  print_error_message_0010911f(byte_ptr);\n  return 0;\n}\n\n",
            "current_name": "parse_and_validate_input_0010d559",
            "entrypoint": "0x0010d559",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010d559": "parse_and_validate_input_0010d559",
                "__nptr": "byte_ptr_3",
                "__ptr": "temp_ptr",
                "__s1": "extracted_string",
                "bVar1": "first_char",
                "cVar3": "validation_result",
                "iVar5": "comparison_result",
                "lVar8": "result",
                "local_40": "string_array",
                "local_64": "counter",
                "param_1": "input_array",
                "param_2": "input_string",
                "param_3": "output_length",
                "pbVar11": "updated_byte_ptr",
                "pbVar2": "byte_ptr",
                "pcVar10": "temp_string",
                "plVar9": "pointer_array",
                "ppcVar6": "local_array",
                "sVar7": "string_length",
                "uVar12": "type_value",
                "uVar4": "extracted_number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d7d4": {
            "additional_data": {
                "FUNC_0010c95e": {
                    "1": "function_check"
                },
                "FUN_0010d7d4": {
                    "1": "expand_and_store_data",
                    "19": "process_data",
                    "2": "store_data",
                    "3": "store_and_expand_data",
                    "4": "store_expanded_data"
                },
                "cVar2": {
                    "1": "check_result",
                    "2": "success_flag",
                    "24": "result"
                },
                "expand_and_store_data_00109be3": {
                    "2": "expand_and_store_data"
                },
                "lVar4": {
                    "1": "data_length",
                    "2": "temp_variable",
                    "3": "temp"
                },
                "local_40": {
                    "1": "temp_output_data_buffer",
                    "2": "expanded_data",
                    "3": "temp_array",
                    "4": "local_data"
                },
                "param_1": {
                    "1": "data",
                    "2": "data_address",
                    "4": "input_value",
                    "7": "input_data"
                },
                "param_2": {
                    "1": "output_data",
                    "2": "data_pointer",
                    "4": "input_array",
                    "7": "data_ptr"
                },
                "param_3": {
                    "1": "dst_len",
                    "2": "arg3",
                    "4": "output_ptr",
                    "5": "output_array",
                    "6": "output_data"
                },
                "param_4": {
                    "1": "counter_ptr",
                    "2": "output_count",
                    "4": "current_index"
                },
                "param_5": {
                    "1": "max_num_output_elements",
                    "2": "size_ptr",
                    "3": "max_index"
                },
                "plVar5": {
                    "1": "local_array_1",
                    "2": "local_data_ptr",
                    "3": "temp_output_data",
                    "4": "temp_ptr"
                },
                "uVar1": {
                    "1": "data",
                    "2": "start_value",
                    "3": "start_address",
                    "4": "first_element",
                    "6": "input_value"
                },
                "uVar3": {
                    "1": "expansion_result",
                    "2": "expanded_data_result",
                    "4": "expanded_result",
                    "5": "expanded_value",
                    "8": "status"
                },
                "uVar6": {
                    "1": "current_data_count",
                    "2": "count",
                    "3": "index"
                },
                "xrealloc": {
                    "1": "reallocate_memory"
                }
            },
            "called": [
                "FUN_00109be3",
                "FUN_0010c95e",
                "xrealloc"
            ],
            "calling": [
                "FUN_0010d882"
            ],
            "code": "\nundefined4\nprocess_data_0010d7d4(undefined8 input_data,undefined8 *data_ptr,long *output_data,uint *current_index,uint *max_index)\n\n{\n  undefined8 input_value;\n  char result;\n  undefined4 status;\n  long output_data;\n  long *temp_ptr;\n  uint index;\n  long local_data [2];\n  \n  input_value = *data_ptr;\n  temp_ptr = local_data;\n  if (output_data == (long *)0x0) {\n    temp_ptr = (long *)0x0;\n  }\n  result = process_data_0010c95e(input_data,data_ptr,temp_ptr);\n  if ((result != '\\0') &&\n     (status = expand_and_store_data(input_data,input_value,(int)*data_ptr - (int)input_value), (char)status != '\\0')) {\n    if (output_data == (long *)0x0) {\n      return status;\n    }\n    if (local_data[0] != 0) {\n      if (*max_index <= *current_index + 1) {\n        index = *max_index + 10;\n        output_data = *output_data;\n        *max_index = index;\n        output_data = xrealloc(output_data,(ulong)index << 3);\n        *output_data = output_data;\n      }\n      index = *current_index;\n      *(long *)(*output_data + (ulong)index * 8) = local_data[0];\n      *current_index = index + 1;\n      return status;\n    }\n  }\n  return 0;\n}\n\n",
            "code_backup": "\nundefined4\nFUN_0010d7d4(undefined8 param_1,undefined8 *param_2,long *param_3,uint *param_4,uint *param_5)\n\n{\n  undefined8 uVar1;\n  char cVar2;\n  undefined4 uVar3;\n  long lVar4;\n  long *plVar5;\n  uint uVar6;\n  long local_40 [2];\n  \n  uVar1 = *param_2;\n  plVar5 = local_40;\n  if (param_3 == (long *)0x0) {\n    plVar5 = (long *)0x0;\n  }\n  cVar2 = FUNC_0010c95e(param_1,param_2,plVar5);\n  if ((cVar2 != '\\0') &&\n     (uVar3 = expand_and_store_data_00109be3(param_1,uVar1,(int)*param_2 - (int)uVar1), (char)uVar3 != '\\0')) {\n    if (param_3 == (long *)0x0) {\n      return uVar3;\n    }\n    if (local_40[0] != 0) {\n      if (*param_5 <= *param_4 + 1) {\n        uVar6 = *param_5 + 10;\n        lVar4 = *param_3;\n        *param_5 = uVar6;\n        lVar4 = xrealloc(lVar4,(ulong)uVar6 << 3);\n        *param_3 = lVar4;\n      }\n      uVar6 = *param_4;\n      *(long *)(*param_3 + (ulong)uVar6 * 8) = local_40[0];\n      *param_4 = uVar6 + 1;\n      return uVar3;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_0010d7d4",
            "entrypoint": "0x0010d7d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010d7d4": "process_data_0010d7d4",
                "cVar2": "result",
                "expand_and_store_data_00109be3": "expand_and_store_data",
                "lVar4": "output_data",
                "local_40": "local_data",
                "param_1": "input_data",
                "param_2": "data_ptr",
                "param_3": "output_data",
                "param_4": "current_index",
                "param_5": "max_index",
                "plVar5": "temp_ptr",
                "uVar1": "input_value",
                "uVar3": "status",
                "uVar6": "index",
                "xrealloc": "resize_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d882": {
            "additional_data": {
                "FUN_0010d882": {
                    "1": "process_and_parse_data",
                    "11": "process_data",
                    "5": "parse_data",
                    "8": "parse_and_process_data"
                },
                "bVar7": {
                    "1": "is_zero",
                    "2": "is_iteration_remaining",
                    "3": "flag",
                    "5": "loop_condition",
                    "7": "is_not_zero"
                },
                "cVar3": {
                    "1": "ch",
                    "19": "current_char",
                    "2": "current_character"
                },
                "iVar1": {
                    "1": "iterations",
                    "10": "iteration_count",
                    "2": "iteration",
                    "4": "loop_counter",
                    "5": "counter"
                },
                "lVar4": {
                    "1": "allocation",
                    "27": "allocated_memory",
                    "3": "allocated_mem"
                },
                "local_40": {
                    "1": "temp_variable",
                    "2": "data",
                    "3": "data_buffer",
                    "4": "temp_array",
                    "6": "data_array"
                },
                "local_40 [2]": {
                    "1": "temp_buffer"
                },
                "local_44": {
                    "1": "loop_counter",
                    "2": "counter_2",
                    "6": "count"
                },
                "local_48": {
                    "1": "index2",
                    "2": "local_var_2",
                    "3": "number",
                    "5": "value",
                    "6": "index_2"
                },
                "local_4c": {
                    "1": "counter2",
                    "2": "constant_10",
                    "3": "constant_1",
                    "8": "constant"
                },
                "local_50": {
                    "1": "counter1",
                    "2": "total_iterations",
                    "5": "index",
                    "6": "index_1",
                    "7": "counter"
                },
                "param_1": {
                    "1": "data_processing_param",
                    "2": "data",
                    "3": "input_param",
                    "5": "input_data",
                    "7": "input"
                },
                "param_2": {
                    "1": "data",
                    "2": "input_array",
                    "3": "str_array",
                    "4": "input_string",
                    "6": "input_strings"
                },
                "param_3": {
                    "1": "output_buffer",
                    "2": "result_ptr",
                    "7": "output_data",
                    "9": "output_ptr"
                },
                "param_4": {
                    "1": "is_exception",
                    "14": "error_flag",
                    "3": "is_error",
                    "6": "flag_ptr"
                },
                "parse_number_00108ea1": {
                    "2": "parse_number"
                },
                "pcVar2": {
                    "1": "str",
                    "10": "current_string",
                    "12": "current_char",
                    "2": "current_str"
                },
                "pcVar5": {
                    "1": "current_string_ptr",
                    "2": "current_data_ptr",
                    "3": "current_data",
                    "4": "current_ptr",
                    "6": "current_string",
                    "7": "current_position"
                },
                "print_error_message_0010911f": {
                    "2": "print_error_message"
                },
                "process_data_0010d7d4": {
                    "2": "process_data"
                },
                "uVar6": {
                    "1": "local_var",
                    "2": "unsigned_value",
                    "21": "index"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_0010911f",
                "xmalloc",
                "FUN_00108ea1",
                "FUN_0010d7d4"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 process_data_0010d882(long input,char **input_strings,long *output_ptr,undefined *error_flag)\n\n{\n  int iteration_count;\n  char *current_char;\n  char current_char;\n  long allocated_memory;\n  char *current_position;\n  ulong index;\n  bool is_not_zero;\n  uint counter;\n  undefined4 constant;\n  uint index_2;\n  int count;\n  undefined8 data_array [2];\n  \n  current_char = *input_strings;\n  constant = 10;\n  if (output_ptr != (long *)0x0) {\n    allocated_memory = xmalloc();\n    *output_ptr = allocated_memory;\n    *error_flag = 0;\n  }\n  counter = 0;\n  while( true ) {\n    current_position = *input_strings;\n    current_char = *current_position;\n    if ((current_char == '_' || current_char == '\\0') || (current_char == 'e')) break;\n    if ((current_char == 'N') || (current_char == 'T')) {\n      *input_strings = current_position + 1;\n      if (current_char == 'T') {\n        count = 1;\n      }\n      else {\n        current_char = parse_number(input_strings,&count);\n        if (current_char == '\\0') goto LAB_0010d958;\n      }\n      current_char = parse_number(input_strings,&index_2);\n      if ((current_char == '\\0') || (*(uint *)(input + 0x28) <= index_2)) {\nLAB_0010d958:\n        print_error_message(current_char);\n        return 0;\n      }\n      index = (ulong)index_2;\n      while (iteration_count = count + -1, is_not_zero = count != 0, count = iteration_count, is_not_zero) {\n        data_array[0] = *(undefined8 *)(*(long *)(input + 0x20) + index * 0x10);\n        current_char = process_data_0010d882(input,data_array,output_ptr,&counter,&constant);\n        if (current_char == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      current_char = process_data_0010d882(input,input_strings,output_ptr,&counter,&constant);\n      if (current_char == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (output_ptr == (long *)0x0) {\n    if (current_char != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*output_ptr + (ulong)counter * 8) = 0;\n    if (*current_position != 'e') goto LAB_0010d9fa;\n    *error_flag = 1;\n  }\n  current_position = current_position + 1;\n  *input_strings = current_position;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)current_position >> 8),1);\n}\n\n",
            "current_name": "process_data_0010d882",
            "entrypoint": "0x0010d882",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010d882": "process_data_0010d882",
                "bVar7": "is_not_zero",
                "cVar3": "current_char",
                "iVar1": "iteration_count",
                "lVar4": "allocated_memory",
                "local_40": "data_array",
                "local_44": "count",
                "local_48": "index_2",
                "local_4c": "constant",
                "local_50": "counter",
                "param_1": "input",
                "param_2": "input_strings",
                "param_3": "output_ptr",
                "param_4": "error_flag",
                "parse_number_00108ea1": "parse_number",
                "pcVar2": "current_char",
                "pcVar5": "current_position",
                "print_error_message_0010911f": "print_error_message",
                "process_data_0010d7d4": "process_data",
                "uVar6": "index",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010da0b": {
            "additional_data": {
                "FUN_0010da0b": {
                    "1": "allocate_slot",
                    "12": "allocate_and_initialize_slots",
                    "2": "allocate_and_initialize",
                    "4": "allocate_and_initialize_array",
                    "6": "allocate_and_initialize_slot"
                },
                "auVar7": {
                    "1": "output",
                    "19": "result",
                    "7": "return_value"
                },
                "bVar6": {
                    "1": "byte_value",
                    "2": "zero",
                    "3": "byte_var",
                    "4": "temp_byte",
                    "6": "flag"
                },
                "lVar3": {
                    "1": "slot_size",
                    "15": "offset",
                    "8": "slot_offset"
                },
                "lVar4": {
                    "1": "index",
                    "2": "init_loop",
                    "4": "counter",
                    "8": "loop_counter"
                },
                "param_1": {
                    "1": "memory_pointer",
                    "2": "pointer_to_pointer",
                    "3": "array_ptr",
                    "6": "slot_pointer"
                },
                "param_2": {
                    "1": "size",
                    "28": "slot_index"
                },
                "param_3": {
                    "1": "unused_param_3",
                    "2": "arg3",
                    "4": "arg1",
                    "7": "param3",
                    "9": "param_3"
                },
                "param_4": {
                    "1": "data",
                    "2": "arg_2",
                    "4": "arg2",
                    "7": "param4",
                    "9": "param_4"
                },
                "plVar2": {
                    "1": "new_array_ptr",
                    "12": "new_slot",
                    "2": "slot",
                    "4": "allocated_memory"
                },
                "uVar1": {
                    "19": "error_message",
                    "2": "err_msg",
                    "6": "error_msg"
                },
                "uVar5": {
                    "1": "temp_value",
                    "17": "remaining_slots",
                    "2": "temp_index",
                    "3": "temp_var"
                }
            },
            "called": [
                "xmalloc",
                "dcgettext",
                "FUN_00119dd0"
            ],
            "calling": [
                "FUN_00112a33",
                "FUN_0010dac0"
            ],
            "code": "\nundefined  [16] allocate_and_initialize_slots_0010da0b(long **slot_ptr,ulong slot_index,undefined8 param_3,undefined8 param_4)\n\n{\n  undefined8 error_message;\n  long *new_slot;\n  long offset;\n  long loop_counter;\n  ulong remaining_slots;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  remaining_slots = slot_index;\n  if ((long)slot_index < 0x3e90) {\n    for (; 0xf < (long)remaining_slots; remaining_slots = remaining_slots - 0x10) {\n      if (*slot_ptr == (long *)0x0) {\n        new_slot = (long *)xmalloc(0x88);\n        *slot_ptr = new_slot;\n        for (offset = 0x22; offset != 0; offset = offset + -1) {\n          *(undefined4 *)new_slot = 0;\n          new_slot = (long *)((long)new_slot + (ulong)flag * -8 + 4);\n        }\n      }\n      slot_ptr = (long **)*slot_ptr;\n    }\n    offset = (slot_index >> 4) * -0x10;\n    if ((long)slot_index < 0) {\n      offset = 0;\n    }\n    if (*slot_ptr == (long *)0x0) {\n      new_slot = (long *)xmalloc(0x88);\n      *slot_ptr = new_slot;\n      for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *(undefined4 *)new_slot = 0;\n        new_slot = (long *)((long)new_slot + (ulong)flag * -8 + 4);\n      }\n    }\n    result._8_8_ = param_4;\n    result._0_8_ = *slot_ptr + slot_index + offset + 1;\n    return result;\n  }\n  error_message = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  print_error_and_exit_00119dd0(error_message,slot_index);\n}\n\n",
            "current_name": "allocate_and_initialize_slots_0010da0b",
            "entrypoint": "0x0010da0b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_slots_0010da0b",
                "auVar7": "result",
                "bVar6": "flag",
                "lVar3": "offset",
                "lVar4": "loop_counter",
                "param_1": "slot_ptr",
                "param_2": "slot_index",
                "plVar2": "new_slot",
                "uVar1": "error_message",
                "uVar5": "remaining_slots"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010dac0": {
            "additional_data": {
                "F.UNK_0010dac0": {
                    "1": "parse_coff_type"
                },
                "FUN_0010dac0": {
                    "1": "improve_coff_type_parsing",
                    "15": "parse_coff_type",
                    "2": "parse_type"
                },
                "_": {
                    "1": "anonymous_variable"
                },
                "__ptr": {
                    "1": "temp_ptr1",
                    "12": "ptr1",
                    "2": "pointer1",
                    "4": "ptr_1"
                },
                "__ptr_00": {
                    "1": "local_variable_9",
                    "12": "ptr2",
                    "2": "temp_ptr_2",
                    "4": "ptr_2"
                },
                "bVar8": {
                    "1": "temp_byte",
                    "10": "byte_var",
                    "2": "type_shift",
                    "4": "byte_value"
                },
                "cVar2": {
                    "1": "result2",
                    "2": "success",
                    "3": "status",
                    "7": "char_var"
                },
                "iVar9": {
                    "1": "iteration_count",
                    "3": "loop_counter",
                    "4": "counter",
                    "6": "index",
                    "8": "int_var"
                },
                "lVar1": {
                    "1": "result1",
                    "10": "result"
                },
                "lVar12": {
                    "1": "iter_value",
                    "3": "index",
                    "4": "loop_var",
                    "5": "long_var"
                },
                "lVar5": {
                    "1": "memory_address",
                    "12": "result",
                    "3": "output",
                    "4": "memory_block"
                },
                "local_47": {
                    "1": "counter",
                    "13": "local_byte",
                    "2": "symbol_size",
                    "3": "byte_var"
                },
                "local_48": {
                    "1": "local_var_2",
                    "12": "local_char",
                    "2": "symbol_type",
                    "3": "char_var"
                },
                "local_68": {
                    "1": "local_variable_18",
                    "10": "local_buffer",
                    "2": "local_array_1",
                    "3": "local_array",
                    "7": "buffer"
                },
                "param_1": {
                    "1": "input1",
                    "5": "input_param",
                    "6": "input"
                },
                "param_2": {
                    "1": "symbols",
                    "2": "array_param",
                    "4": "symbol_table",
                    "5": "coff_data"
                },
                "param_3": {
                    "1": "ptr3",
                    "2": "memory_param",
                    "3": "output_param",
                    "4": "debug_data",
                    "5": "debug_info"
                },
                "param_4": {
                    "1": "coff_version",
                    "2": "undefined_param",
                    "3": "config_param",
                    "9": "param_4"
                },
                "param_5": {
                    "1": "arg5",
                    "17": "type_code",
                    "2": "type",
                    "3": "flags"
                },
                "param_6": {
                    "1": "type_name",
                    "2": "data"
                },
                "param_7": {
                    "1": "input_parameter_7",
                    "2": "is_signed",
                    "5": "is_unsigned",
                    "8": "flag"
                },
                "param_8": {
                    "1": "debug_symbol",
                    "2": "debug_param",
                    "5": "param_8"
                },
                "pcVar10": {
                    "1": "temp_var10",
                    "2": "char_pointer",
                    "3": "type_string",
                    "4": "str_var",
                    "6": "type_name"
                },
                "plVar7": {
                    "1": "param_ptr",
                    "2": "ptr",
                    "3": "slots",
                    "4": "pointer_array"
                },
                "uVar11": {
                    "1": "temp_var11",
                    "2": "mask",
                    "9": "ulong_var"
                },
                "uVar13": {
                    "1": "uint_var_2",
                    "2": "param_mask",
                    "3": "shifted_type_code"
                },
                "uVar14": {
                    "1": "uint_var3",
                    "2": "uint_var_2",
                    "3": "ushort_value"
                },
                "uVar15": {
                    "1": "temp3",
                    "2": "var15"
                },
                "uVar3": {
                    "1": "bfd_error_code",
                    "10": "error_code",
                    "2": "var3",
                    "3": "uint_var",
                    "4": "error"
                },
                "uVar4": {
                    "1": "result_var",
                    "2": "value",
                    "3": "memory_value",
                    "6": "result"
                },
                "uVar6": {
                    "1": "temp_var6",
                    "2": "debug_name_type"
                }
            },
            "called": [
                "FUN_00113df2",
                "xmalloc",
                "FUN_00119ed0",
                "FUN_00113e23",
                "FUN_0010dac0",
                "dcgettext",
                "free",
                "bfd_errmsg",
                "FUN_00113d3a",
                "bfd_coff_get_syment",
                "FUN_00113ce0",
                "bfd_get_error",
                "FUN_00113dfe",
                "FUN_00113c43",
                "FUN_0010c218",
                "FUN_00113e17",
                "FUN_00113d6e",
                "FUN_0010da0b",
                "FUN_0010e07c",
                "xrealloc",
                "FUN_00113da9"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "code": "\nlong parse_coff_type_0010dac0(long input,long *coff_data,long debug_info,undefined8 paramanonymous_variable4,uint type_code,\n                 long *data,char flag,undefined8 debug_name)\n\n{\n  long result;\n  char char_var;\n  undefined4 error_code;\n  undefined8 result;\n  long result;\n  undefined8 debug_name_type;\n  long *pointer_array;\n  void *ptr1;\n  void *ptr2;\n  byte byte_var;\n  int int_var;\n  char *type_name;\n  ulong ulong_var;\n  long long_var;\n  uint shifted_type_code;\n  uint ushort_value;\n  undefined8 initial_value;\n  undefined local_buffer [32];\n  char local_char;\n  byte local_byte;\n  \n  result = *(long *)(input + 0x110);\n  if ((~*(uint *)(result + 0x38) & type_code) != 0) {\n    shifted_type_code = (int)type_code >> ((byte)*(undefined4 *)(result + 0x44) & 0x1f);\n    ulong_var = (ulong)(type_code & *(uint *)(result + 0x40));\n    byte_var = (byte)*(undefined4 *)(result + 0x3c);\n    shifted_type_code = (shifted_type_code ^ type_code) & *(uint *)(result + 0x38) ^ shifted_type_code;\n    if (ulong_var == 1L << (byte_var & 0x3f)) {\n      result = parse_coff_type_0010dac0(input,coff_data,debug_info,paramanonymous_variable4,shifted_type_code,data,flag,debug_name);\n      result = initializeanonymous_variableoranonymous_variablegetanonymous_variablememoryanonymous_variableblockanonymous_variable00113d3a(result);\n      return result;\n    }\n    if (ulong_var != 2L << (byte_var & 0x3f)) {\n      if (ulong_var != 3L << (byte_var & 0x3f)) {\n        result = dcgettext(0,\"parseanonymous_variablecoffanonymous_variabletype: Bad type code 0x%x\",5,*(undefined4 *)(result + 0x3c),\n                          shifted_type_code);\n        printanonymous_variableerroranonymous_variablemessageanonymous_variable00119ed0(result,type_code);\n        return 0;\n      }\n      ushort_value = 0;\n      if (data != (long *)0x0) {\n        ushort_value = (uint)*(ushort *)(data + 2);\n        pointer_array = data + 2;\n        for (int_var = 0; (*(short *)pointer_array != 0 && (int_var != 3)); int_var = int_var + 1) {\n          *(short *)pointer_array = *(short *)((long)pointer_array + 2);\n          pointer_array = (long *)((long)pointer_array + 2);\n        }\n        *(short *)pointer_array = 0;\n      }\n      initial_value = 0;\n      result = debug_name;\n      debug_name_type = parse_coff_type_0010dac0(input,coff_data,debug_info,paramanonymous_variable4,shifted_type_code,data,0);\n      result = *(long *)(debug_info + 0x28);\n      if (result == 0) {\n        result = setanonymous_variablememoryanonymous_variablevalueanonymous_variable00113dfe(4,0,initial_value,result);\n        result = initializeanonymous_variabledebuganonymous_variablenameanonymous_variabletypeanonymous_variable0010c218(debug_name,\"int\",result);\n        *(long *)(debug_info + 0x28) = result;\n      }\n      result = initializeanonymous_variableandanonymous_variableallocateanonymous_variablememoryanonymous_variable00113c43(debug_name_type,result,0,(long)(int)(ushort_value - 1),0);\n      return result;\n    }\n    result = parse_coff_type_0010dac0(input,coff_data,debug_info,paramanonymous_variable4,shifted_type_code,data,flag,debug_name);\n    result = initializeanonymous_variablememoryanonymous_variable00113ce0(result,0,0);\n    return result;\n  }\n  if ((data != (long *)0x0) && (0 < *data)) {\n    pointer_array = (long *)allocateanonymous_variableandanonymous_variableinitializeanonymous_variableslotsanonymous_variable0010da0b(debug_info);\n    if (*pointer_array != 0) {\n      return *pointer_array;\n    }\n    result = initializeanonymous_variablememoryanonymous_variable00113e23(pointer_array,0);\n    return result;\n  }\n  if (flag == '\\0') {\n    data = (long *)0x0;\n  }\n  if (0x10 < type_code) {\n    result = initializeanonymous_variablememoryanonymous_variable00113e17();\n    return result;\n  }\n  result = *(long *)(debug_info + 8 + (long)(int)type_code * 8);\n  if (result != 0) {\n    return result;\n  }\n  switch(type_code) {\n  default:\n    result = initializeanonymous_variablememoryanonymous_variable00113e17();\n    type_name = \"void\";\n    break;\n  case 2:\n    result = setanonymous_variablememoryanonymous_variablevalueanonymous_variable00113dfe(1,0);\n    type_name = \"char\";\n    break;\n  case 3:\n    result = setanonymous_variablememoryanonymous_variablevalueanonymous_variable00113dfe(2,0);\n    type_name = \"short\";\n    break;\n  case 4:\n    result = setanonymous_variablememoryanonymous_variablevalueanonymous_variable00113dfe(4,0);\n    type_name = \"int\";\n    break;\n  case 5:\n    result = setanonymous_variablememoryanonymous_variablevalueanonymous_variable00113dfe(4,0);\n    type_name = \"long\";\n    break;\n  case 6:\n    result = initializeanonymous_variablememoryanonymous_variable00113df2(4);\n    type_name = \"float\";\n    break;\n  case 7:\n    result = initializeanonymous_variablememoryanonymous_variable00113df2(8);\n    type_name = \"double\";\n    break;\n  case 8:\n    if (data == (long *)0x0) {\n      result = initializeanonymous_variablememoryanonymous_variable00113da9(1,0,0);\n      goto LABanonymous_variable0010e046;\n    }\n    result = 8;\n    goto LABanonymous_variable0010de7a;\n  case 9:\n    if (data == (long *)0x0) {\n      result = initializeanonymous_variablememoryanonymous_variable00113da9(0,0,0);\n      goto LABanonymous_variable0010e046;\n    }\n    result = 9;\nLABanonymous_variable0010de7a:\n    result = processanonymous_variablebinaryanonymous_variabledataanonymous_variable0010e07c(input,coff_data,debug_info,result,data,debug_name);\nLABanonymous_variable0010e046:\n    pointer_array = (long *)allocateanonymous_variableandanonymous_variableinitializeanonymous_variableslotsanonymous_variable0010da0b(debug_info,paramanonymous_variable4);\n    *pointer_array = result;\n    return result;\n  case 10:\n    if (data == (long *)0x0) {\n      result = initializeanonymous_variableandanonymous_variablestoreanonymous_variabledataanonymous_variable00113d6e(0,0);\n    }\n    else {\n      result = data[3];\n      ptr1 = (void *)xmalloc(0x50);\n      ptr2 = (void *)xmalloc(0x50);\n      long_var = 0;\n      do {\n        while( true ) {\n          if ((result <= coff_data[3]) || (coff_data[1] <= coff_data[2])) goto LABanonymous_variable0010e032;\n          int_var = (int)long_var;\n          result = *(long *)(*coff_data + coff_data[2] * 8);\n          char_var = bfdanonymous_variablecoffanonymous_variablegetanonymous_variablesyment(input,result,local_buffer);\n          long_var = (long)int_var;\n          if (char_var == '\\0') {\n            error_code = bfdanonymous_variablegetanonymous_variableerror();\n            result = bfdanonymous_variableerrmsg(error_code);\n            debug_name_type = dcgettext(0,\"bfdanonymous_variablecoffanonymous_variablegetanonymous_variablesyment failed: %s\",5);\n            printanonymous_variableerroranonymous_variablemessageanonymous_variable00119ed0(debug_name_type,result);\n            free(ptr1);\n            free(ptr2);\n            result = 0;\n            goto LABanonymous_variable0010e046;\n          }\n          coff_data[2] = coff_data[2] + 1;\n          coff_data[3] = (ulong)local_byte + 1 + coff_data[3];\n          if (local_char != '\\x10') break;\n          if ((int)type_code <= int_var + 1) {\n            type_code = type_code + 10;\n            ptr1 = (void *)xrealloc(ptr1);\n            ptr2 = (void *)xrealloc(ptr2,(long)(int)type_code << 3);\n          }\n          long_var = *(long *)(result + 0x20);\n          *(undefined8 *)((long)ptr1 + (long)int_var * 8) = *(undefined8 *)(result + 8);\n          *(long *)((long)ptr2 + (long)int_var * 8) =\n               *(long *)(result + 0x10) + *(long *)(long_var + 0x30);\n          long_var = (long)(int_var + 1);\n        }\n      } while (local_char != 'f');\nLABanonymous_variable0010e032:\n      *(undefined8 *)((long)ptr1 + long_var * 8) = 0;\n      result = initializeanonymous_variableandanonymous_variablestoreanonymous_variabledataanonymous_variable00113d6e(ptr1,ptr2);\n    }\n    goto LABanonymous_variable0010e046;\n  case 0xb:\n    result = initializeanonymous_variablememoryanonymous_variable00113e17();\n    goto LABanonymous_variable0010e065;\n  case 0xc:\n    result = setanonymous_variablememoryanonymous_variablevalueanonymous_variable00113dfe(1,1);\n    type_name = \"unsigned char\";\n    break;\n  case 0xd:\n    result = setanonymous_variablememoryanonymous_variablevalueanonymous_variable00113dfe(2,1);\n    type_name = \"unsigned short\";\n    break;\n  case 0xe:\n    result = setanonymous_variablememoryanonymous_variablevalueanonymous_variable00113dfe(4,1);\n    type_name = \"unsigned int\";\n    break;\n  case 0xf:\n    result = setanonymous_variablememoryanonymous_variablevalueanonymous_variable00113dfe(4,1);\n    type_name = \"unsigned long\";\n    break;\n  case 0x10:\n    result = initializeanonymous_variablememoryanonymous_variable00113df2(0xc);\n    type_name = \"long double\";\n  }\n  result = initializeanonymous_variabledebuganonymous_variablenameanonymous_variabletypeanonymous_variable0010c218(debug_name,type_name,result);\nLABanonymous_variable0010e065:\n  *(long *)(debug_info + 8 + (long)(int)type_code * 8) = result;\n  return result;\n}\n\n",
            "current_name": "parse_coff_type_0010dac0",
            "entrypoint": "0x0010dac0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_0010dac0",
                "_": "anonymous_variable",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "bVar8": "byte_var",
                "cVar2": "char_var",
                "iVar9": "int_var",
                "lVar1": "result",
                "lVar12": "long_var",
                "lVar5": "result",
                "local_47": "local_byte",
                "local_48": "local_char",
                "local_68": "local_buffer",
                "param_1": "input",
                "param_2": "coff_data",
                "param_3": "debug_info",
                "param_5": "type_code",
                "param_6": "data",
                "param_7": "flag",
                "param_8": "debug_name",
                "pcVar10": "type_name",
                "plVar7": "pointer_array",
                "uVar11": "ulong_var",
                "uVar13": "shifted_type_code",
                "uVar14": "ushort_value",
                "uVar15": "initial_value",
                "uVar3": "error_code",
                "uVar4": "result",
                "uVar6": "debug_name_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e07c": {
            "additional_data": {
                "FUN_0010e07c": {
                    "1": "reverse_binary_extraction",
                    "2": "parse_coff_symbols",
                    "5": "process_binary_data"
                },
                "__ptr": {
                    "1": "symbol_information",
                    "2": "symbol_table",
                    "4": "symbol_data",
                    "6": "allocated_memory"
                },
                "cVar4": {
                    "1": "symbol_error",
                    "14": "result",
                    "2": "symbol_result",
                    "6": "char_var"
                },
                "iVar13": {
                    "1": "var13",
                    "2": "temp_var",
                    "3": "symbol_offset",
                    "6": "offset"
                },
                "iVar14": {
                    "1": "size_var",
                    "2": "array_size",
                    "3": "initial_value"
                },
                "lVar1": {
                    "1": "record_length",
                    "2": "var1",
                    "3": "length",
                    "5": "symbol_table_size"
                },
                "lVar12": {
                    "1": "counter",
                    "2": "var_2",
                    "3": "symbol_index",
                    "8": "index"
                },
                "lVar2": {
                    "1": "section_address",
                    "2": "var2",
                    "3": "symbol",
                    "4": "symbol_address"
                },
                "lVar3": {
                    "1": "lineno",
                    "2": "counter",
                    "3": "symbol_index",
                    "4": "symbol_count"
                },
                "local_56": {
                    "1": "aux_value2",
                    "2": "ushort_var",
                    "3": "local_var_56"
                },
                "local_60": {
                    "1": "local_buffer3",
                    "2": "local_array2",
                    "4": "aux_data_buffer",
                    "5": "aux_buffer"
                },
                "local_67": {
                    "1": "aux_present",
                    "2": "byte_2",
                    "3": "local_byte2"
                },
                "local_68": {
                    "1": "flag1",
                    "2": "byte_1",
                    "3": "local_byte1"
                },
                "local_6a": {
                    "1": "symbol_info",
                    "2": "symbol_flags",
                    "3": "local_var5",
                    "5": "symbol_type"
                },
                "local_88": {
                    "1": "aux_data_buffer",
                    "10": "symbol_name",
                    "2": "local_array",
                    "4": "buffer"
                },
                "local_a8": {
                    "1": "local_value_1",
                    "2": "symbol_name",
                    "4": "local_var_a8",
                    "5": "local_var1"
                },
                "param_1": {
                    "1": "param_address",
                    "2": "binary_data",
                    "4": "input_param",
                    "6": "param1",
                    "8": "param_1"
                },
                "param_2": {
                    "1": "counter",
                    "11": "symbol_table",
                    "2": "array",
                    "3": "data_array",
                    "4": "param2"
                },
                "param_3": {
                    "1": "input_param3",
                    "11": "param_3",
                    "2": "param",
                    "6": "param3"
                },
                "param_4": {
                    "1": "size_param",
                    "2": "symbol_count",
                    "5": "flag",
                    "6": "param4",
                    "9": "param_4"
                },
                "param_5": {
                    "1": "header",
                    "4": "coff_header",
                    "6": "param5",
                    "9": "param_5"
                },
                "param_6": {
                    "1": "input_param6",
                    "13": "param_6",
                    "2": "error_message",
                    "6": "param6"
                },
                "pcVar9": {
                    "1": "error_message_format",
                    "2": "format",
                    "3": "error_string",
                    "5": "error_msg",
                    "6": "error_format",
                    "9": "error_message"
                },
                "puVar10": {
                    "1": "auxent_var",
                    "16": "aux_data",
                    "2": "aux_info",
                    "6": "auxiliary_data"
                },
                "puVar8": {
                    "1": "new_symbol_entry",
                    "2": "new_entry",
                    "3": "symbol_info",
                    "7": "symbol_entry"
                },
                "uStack_9c": {
                    "1": "var_8",
                    "2": "local_value4",
                    "4": "local_var4"
                },
                "uStack_a0": {
                    "1": "local_value_3",
                    "2": "local_var_a0",
                    "4": "local_var3"
                },
                "uStack_a4": {
                    "1": "u_stack_var_a4",
                    "2": "symbol_name_high",
                    "4": "local_var2"
                },
                "uVar11": {
                    "1": "aux_var",
                    "2": "var_1",
                    "3": "aux_value",
                    "4": "auxiliary_value",
                    "6": "value"
                },
                "uVar5": {
                    "1": "undefined4_var",
                    "19": "error_code",
                    "3": "error",
                    "4": "error_var"
                },
                "uVar6": {
                    "1": "symbol_address",
                    "2": "result1",
                    "3": "result_1"
                },
                "uVar7": {
                    "1": "file_name",
                    "2": "result2",
                    "3": "result_var2",
                    "8": "error_message"
                }
            },
            "called": [
                "bfd_get_error",
                "xmalloc",
                "FUN_00119ed0",
                "dcgettext",
                "free",
                "FUN_0010dac0",
                "xrealloc",
                "bfd_errmsg",
                "bfd_coff_get_syment",
                "FUN_00113da9",
                "bfd_coff_get_auxent"
            ],
            "calling": [
                "FUN_0010dac0"
            ],
            "code": "\nundefined8\nprocess_binary_data_0010e07c(undefined8 param_1,long *symbol_table,undefined8 param_3,int param_4,long param_5,\n            undefined8 param_6)\n\n{\n  long symbol_table_size;\n  long symbol_address;\n  long symbol_count;\n  char result;\n  undefined4 error_code;\n  void *allocated_memory;\n  undefined8 result_var1;\n  undefined8 error_message;\n  undefined4 *symbol_entry;\n  char *error_message;\n  undefined *aux_data;\n  uint value;\n  long index;\n  int offset;\n  int initial_value;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined4 local_var3;\n  undefined4 local_var4;\n  undefined symbol_name [30];\n  undefined2 symbol_type;\n  byte local_byte1;\n  byte local_byte2;\n  undefined aux_buffer [10];\n  ushort local_short;\n  \n  initial_value = 10;\n  index = 0;\n  symbol_table_size = *(long *)(param_5 + 0x18);\n  allocated_memory = (void *)xmalloc(0x50);\n  while ((symbol_table[3] < symbol_table_size && (symbol_table[2] < symbol_table[1]))) {\n    symbol_address = *(long *)(*symbol_table + symbol_table[2] * 8);\n    result = bfd_coff_get_syment(param_1,symbol_address,symbol_name);\n    if (result == '\\0') {\n      error_code = bfd_get_error();\n      result_var1 = bfd_errmsg(error_code);\n      error_message = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      error_message = dcgettext(0,error_message,5);\n      print_error_message_00119ed0(error_message,result_var1);\n      free(allocated_memory);\n      return 0;\n    }\n    symbol_count = symbol_table[3];\n    aux_data = (undefined *)0x0;\n    symbol_table[2] = symbol_table[2] + 1;\n    symbol_table[3] = symbol_count + 1 + (ulong)local_byte2;\n    if (local_byte2 != 0) {\n      aux_data = aux_buffer;\n      result = bfd_coff_get_auxent(param_1,symbol_address,0,aux_data);\n      if (result == '\\0') {\n        error_code = bfd_get_error();\n        result_var1 = bfd_errmsg(error_code);\n        error_message = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (local_byte1 == 0x12) {\n      value = (uint)local_short;\n      offset = (int)*(undefined8 *)(symbol_address + 0x10) +\n               (int)*(undefined8 *)(*(long *)(symbol_address + 0x20) + 0x30);\n    }\n    else {\n      if (local_byte1 < 0x13) {\n        if ((local_byte1 == 8) || (local_byte1 == 0xb)) {\n          value = 0;\n          offset = ((int)*(undefined8 *)(symbol_address + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(symbol_address + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (local_byte1 == 0x66) break;\n      value = 0;\n      offset = 0;\n    }\nLAB_0010e214:\n    error_message = parse_coff_type_0010dac0(param_1,symbol_table,param_3,symbol_count,symbol_type,aux_data,1);\n    result_var1 = *(undefined8 *)(symbol_address + 8);\n    symbol_entry = (undefined4 *)xmalloc(0x20);\n    local_var1 = (undefined4)result_var1;\n    local_var2 = (undefined4)((ulong)result_var1 >> 0x20);\n    local_var3 = (undefined4)error_message;\n    local_var4 = (undefined4)((ulong)error_message >> 0x20);\n    *(undefined8 *)(symbol_entry + 5) = 0;\n    symbol_entry[6] = offset;\n    symbol_entry[7] = value;\n    symbol_entry[4] = 0;\n    *symbol_entry = local_var1;\n    symbol_entry[1] = local_var2;\n    symbol_entry[2] = local_var3;\n    symbol_entry[3] = local_var4;\n    if (initial_value <= (int)index + 1) {\n      initial_value = initial_value + 10;\n      allocated_memory = (void *)xrealloc(allocated_memory,(long)initial_value << 3,symbol_entry,0,param_6);\n    }\n    *(undefined4 **)((long)allocated_memory + index * 8) = symbol_entry;\n    index = index + 1;\n  }\n  *(undefined8 *)((long)allocated_memory + (long)(int)index * 8) = 0;\n  result_var1 = initialize_memory_00113da9(param_4 == 8,*(undefined2 *)(param_5 + 10),allocated_memory);\n  return result_var1;\n}\n\n",
            "code_backup": "\nundefined8\nFUN_0010e07c(undefined8 param_1,long *param_2,undefined8 param_3,int param_4,long param_5,\n            undefined8 param_6)\n\n{\n  long lVar1;\n  long lVar2;\n  long lVar3;\n  char cVar4;\n  undefined4 uVar5;\n  void *__ptr;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  undefined4 *puVar8;\n  char *pcVar9;\n  undefined *puVar10;\n  uint uVar11;\n  long lVar12;\n  int iVar13;\n  int iVar14;\n  undefined4 local_a8;\n  undefined4 uStack_a4;\n  undefined4 uStack_a0;\n  undefined4 uStack_9c;\n  undefined local_88 [30];\n  undefined2 local_6a;\n  byte local_68;\n  byte local_67;\n  undefined local_60 [10];\n  ushort local_56;\n  \n  iVar14 = 10;\n  lVar12 = 0;\n  lVar1 = *(long *)(param_5 + 0x18);\n  __ptr = (void *)xmalloc(0x50);\n  while ((param_2[3] < lVar1 && (param_2[2] < param_2[1]))) {\n    lVar2 = *(long *)(*param_2 + param_2[2] * 8);\n    cVar4 = bfd_coff_get_syment(param_1,lVar2,local_88);\n    if (cVar4 == '\\0') {\n      uVar5 = bfd_get_error();\n      uVar6 = bfd_errmsg(uVar5);\n      pcVar9 = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      uVar7 = dcgettext(0,pcVar9,5);\n      print_error_message_00119ed0(uVar7,uVar6);\n      free(__ptr);\n      return 0;\n    }\n    lVar3 = param_2[3];\n    puVar10 = (undefined *)0x0;\n    param_2[2] = param_2[2] + 1;\n    param_2[3] = lVar3 + 1 + (ulong)local_67;\n    if (local_67 != 0) {\n      puVar10 = local_60;\n      cVar4 = bfd_coff_get_auxent(param_1,lVar2,0,puVar10);\n      if (cVar4 == '\\0') {\n        uVar5 = bfd_get_error();\n        uVar6 = bfd_errmsg(uVar5);\n        pcVar9 = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (local_68 == 0x12) {\n      uVar11 = (uint)local_56;\n      iVar13 = (int)*(undefined8 *)(lVar2 + 0x10) +\n               (int)*(undefined8 *)(*(long *)(lVar2 + 0x20) + 0x30);\n    }\n    else {\n      if (local_68 < 0x13) {\n        if ((local_68 == 8) || (local_68 == 0xb)) {\n          uVar11 = 0;\n          iVar13 = ((int)*(undefined8 *)(lVar2 + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(lVar2 + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (local_68 == 0x66) break;\n      uVar11 = 0;\n      iVar13 = 0;\n    }\nLAB_0010e214:\n    uVar7 = FUNC_0010dac0(param_1,param_2,param_3,lVar3,local_6a,puVar10,1);\n    uVar6 = *(undefined8 *)(lVar2 + 8);\n    puVar8 = (undefined4 *)xmalloc(0x20);\n    local_a8 = (undefined4)uVar6;\n    uStack_a4 = (undefined4)((ulong)uVar6 >> 0x20);\n    uStack_a0 = (undefined4)uVar7;\n    uStack_9c = (undefined4)((ulong)uVar7 >> 0x20);\n    *(undefined8 *)(puVar8 + 5) = 0;\n    puVar8[6] = iVar13;\n    puVar8[7] = uVar11;\n    puVar8[4] = 0;\n    *puVar8 = local_a8;\n    puVar8[1] = uStack_a4;\n    puVar8[2] = uStack_a0;\n    puVar8[3] = uStack_9c;\n    if (iVar14 <= (int)lVar12 + 1) {\n      iVar14 = iVar14 + 10;\n      __ptr = (void *)xrealloc(__ptr,(long)iVar14 << 3,puVar8,0,param_6);\n    }\n    *(undefined4 **)((long)__ptr + lVar12 * 8) = puVar8;\n    lVar12 = lVar12 + 1;\n  }\n  *(undefined8 *)((long)__ptr + (long)(int)lVar12 * 8) = 0;\n  uVar6 = initialize_memory_00113da9(param_4 == 8,*(undefined2 *)(param_5 + 10),__ptr);\n  return uVar6;\n}\n\n",
            "current_name": "process_binary_data_0010e07c",
            "entrypoint": "0x0010e07c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e07c": "process_binary_data_0010e07c",
                "__ptr": "allocated_memory",
                "cVar4": "result",
                "iVar13": "offset",
                "iVar14": "initial_value",
                "lVar1": "symbol_table_size",
                "lVar12": "index",
                "lVar2": "symbol_address",
                "lVar3": "symbol_count",
                "local_56": "local_short",
                "local_60": "aux_buffer",
                "local_67": "local_byte2",
                "local_68": "local_byte1",
                "local_6a": "symbol_type",
                "local_88": "symbol_name",
                "local_a8": "local_var1",
                "param_2": "symbol_table",
                "pcVar9": "error_message",
                "puVar10": "aux_data",
                "puVar8": "symbol_entry",
                "uStack_9c": "local_var4",
                "uStack_a0": "local_var3",
                "uStack_a4": "local_var2",
                "uVar11": "value",
                "uVar5": "error_code",
                "uVar6": "result_var1",
                "uVar7": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e2f0": {
            "additional_data": {
                "(**(code **)(*(long *)(*param_1 + 8) + 0x50))": {
                    "1": "hash_table_function1"
                },
                "(**(code **)(*(long *)(*param_1 + 8) + 0x68))": {
                    "1": "hash_table_function2"
                },
                "*(long *)(lVar1 + 0x18)": {
                    "1": "previous_node.next"
                },
                "*(long *)(lVar3 + 0x20)": {
                    "1": "current_location"
                },
                "**(code **)(*(long *)(*param_1 + 8) + 0x50)": {
                    "1": "hash_table.function1"
                },
                "**(code **)(*(long *)(*param_1 + 8) + 0x68)": {
                    "1": "hash_table.function2"
                },
                "CONCAT26(uStack_3e,CONCAT15(uStack_3f,CONCAT14(uStack_40,local_44)))": {
                    "1": "concatenated_value"
                },
                "FUN_0010e2f0": {
                    "1": "lookup_and_print_string",
                    "16": "process_string",
                    "2": "extract_string"
                },
                "lVar1": {
                    "1": "current_hash_entry",
                    "2": "hash_entry",
                    "7": "temp_var1"
                },
                "lVar3": {
                    "1": "temp_long_var3",
                    "2": "hash_lookup_result",
                    "3": "hash_result",
                    "4": "lookup_result",
                    "5": "temp_var2"
                },
                "lVar3 + 0x20": {
                    "1": "current_node.next"
                },
                "lVar7": {
                    "1": "hash_entry",
                    "2": "temp3",
                    "3": "offset",
                    "4": "temp_var3"
                },
                "lVar7 + 1 + sVar6": {
                    "1": "hash_table.tail_new_value"
                },
                "lVar7 + lVar3": {
                    "1": "buffer_position"
                },
                "local_3c": {
                    "1": "some_array",
                    "2": "var2",
                    "4": "temp_array",
                    "8": "local_array"
                },
                "local_3c[0]": {
                    "1": "temp_value"
                },
                "local_44": {
                    "1": "data",
                    "2": "local_variable1",
                    "5": "local_var1",
                    "6": "result"
                },
                "param_1": {
                    "1": "symbol_table",
                    "17": "hash_table",
                    "4": "param_array"
                },
                "param_1[1]": {
                    "1": "buffer"
                },
                "param_1[2]": {
                    "1": "current_position"
                },
                "param_1[3]": {
                    "1": "hash_table.index"
                },
                "param_1[4]": {
                    "1": "hash_table.head"
                },
                "param_1[5]": {
                    "1": "previous_location"
                },
                "param_1[6]": {
                    "1": "hash_table.tail"
                },
                "param_2": {
                    "1": "unknown",
                    "2": "param_2",
                    "3": "param",
                    "5": "param_flag",
                    "8": "flag"
                },
                "param_3": {
                    "1": "param_length",
                    "2": "param_3",
                    "3": "param_int",
                    "6": "param_size"
                },
                "param_4": {
                    "1": "input_string",
                    "2": "buffer",
                    "3": "data",
                    "4": "param_data",
                    "5": "param_value"
                },
                "param_5": {
                    "1": "lookup_string",
                    "2": "key",
                    "4": "string_param",
                    "8": "string",
                    "9": "input_string"
                },
                "sVar6": {
                    "1": "input_length",
                    "2": "str_length",
                    "22": "string_length"
                },
                "uStack_3e": {
                    "1": "stack_param",
                    "2": "u_stack_3e",
                    "3": "flag3",
                    "5": "stack_var3"
                },
                "uStack_3f": {
                    "1": "stack_var_2",
                    "2": "flag2",
                    "3": "stack_var2"
                },
                "uStack_40": {
                    "1": "u_stack_param1",
                    "2": "flag1",
                    "3": "stack_var1"
                },
                "uVar2": {
                    "1": "error_var",
                    "10": "error_code",
                    "3": "bfd_error_code",
                    "5": "error",
                    "8": "bfd_error"
                },
                "uVar4": {
                    "1": "var4",
                    "11": "error_message",
                    "3": "error_msg",
                    "6": "bfd_error_message"
                },
                "uVar5": {
                    "1": "temp_var6",
                    "2": "error_format",
                    "4": "error_msg",
                    "7": "error_message"
                },
                "xrealloc(param_1[1])": {
                    "1": "realloc_memory"
                }
            },
            "called": [
                "strlen",
                "bfd_get_error",
                "bfd_hash_lookup",
                "FUN_00119ed0",
                "dcgettext",
                "xrealloc",
                "bfd_errmsg"
            ],
            "calling": [
                "FUN_0010ebb0",
                "FUN_0010e8a9",
                "FUN_0010e842",
                "FUN_0010e9a0",
                "FUN_0010eafe",
                "FUN_0010e439",
                "FUN_0010e5db",
                "FUN_0010ec73",
                "FUN_0010edb4",
                "FUN_0010ed2c",
                "FUN_0010e7c2",
                "FUN_0010e918",
                "FUN_0010e6a8",
                "FUN_0011378f",
                "FUN_0010e453"
            ],
            "code": "\nundefined8\nprocess_string_0010e2f0(long *hash_table,undefined flag,int param_size,undefined8 param_value,char *input_string)\n\n{\n  long temp_var1;\n  undefined4 error_code;\n  long temp_var2;\n  undefined8 error_message;\n  undefined8 error_message;\n  size_t string_length;\n  long temp_var3;\n  undefined4 result;\n  undefined stack_var1;\n  undefined stack_var2;\n  undefined2 stack_var3;\n  undefined4 local_array [3];\n  \n  if (input_string == (char *)0x0) {\n    temp_var3 = 0;\n  }\n  else {\n    temp_var2 = bfd_hash_lookup(hash_table + 7,input_string,1,1);\n    if (temp_var2 == 0) {\n      error_code = bfd_get_error();\n      error_message = bfd_errmsg(error_code);\n      error_message = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      print_error_message_00119ed0(error_message,error_message);\n      return 0;\n    }\n    temp_var3 = *(long *)(temp_var2 + 0x20);\n    if (temp_var3 == -1) {\n      temp_var3 = default_location;\n      temp_var1 = previous_location;\n      *(long *)(temp_var2 + 0x20) = temp_var3;\n      if (temp_var1 == 0) {\n        hash_table.head = temp_var2;\n      }\n      else {\n        *(long *)(temp_var1 + 0x18) = temp_var2;\n      }\n      previous_location = temp_var2;\n      string_length = strlen(input_string);\n      default_location = temp_var3 + 1 + string_length;\n    }\n  }\n  (**(code **)(*(long *)(*hash_table + 8) + 0x50))(temp_var3,&result);\n  stack_var2 = 0;\n  stack_var1 = flag;\n  (**(code **)(*(long *)(*hash_table + 8) + 0x68))((long)param_size,&stack_var3);\n  (**(code **)(*(long *)(*hash_table + 8) + 0x50))(param_value,local_array);\n  if ((ulong)current_size < current_position + 0xcU) {\n    current_size = current_size * 2;\n    temp_var3 = realloc_memory;\n    buffer = temp_var3;\n  }\n  temp_var3 = current_position;\n  temp_var2 = buffer;\n  *(ulong *)(temp_var2 + temp_var3) = concatenated_value;\n  *(undefined4 *)(temp_var2 + 8 + temp_var3) = temp_value;\n  current_position = current_position + 0xc;\n  return CONCAT71((int7)((ulong)temp_var3 >> 8),1);\n}\n\n",
            "current_name": "process_string_0010e2f0",
            "entrypoint": "0x0010e2f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT26(uStack_3e,CONCAT15(uStack_3f,CONCAT14(uStack_40,local_44)))": "concatenated_value",
                "FUN_0010e2f0": "process_string_0010e2f0",
                "lVar1": "temp_var1",
                "lVar3": "temp_var2",
                "lVar7": "temp_var3",
                "local_3c": "local_array",
                "local_3c[0]": "temp_value",
                "local_44": "result",
                "param_1": "hash_table",
                "param_1[1]": "buffer",
                "param_1[2]": "current_position",
                "param_1[3]": "current_size",
                "param_1[4]": "hash_table.head",
                "param_1[5]": "previous_location",
                "param_1[6]": "default_location",
                "param_2": "flag",
                "param_3": "param_size",
                "param_4": "param_value",
                "param_5": "input_string",
                "sVar6": "string_length",
                "uStack_3e": "stack_var3",
                "uStack_3f": "stack_var2",
                "uStack_40": "stack_var1",
                "uVar2": "error_code",
                "uVar4": "error_message",
                "uVar5": "error_message",
                "xrealloc(param_1[1])": "realloc_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e439": {
            "additional_data": {
                "0x210": {
                    "1": "string_address",
                    "2": "string_offset",
                    "4": "offset"
                },
                "0x84": {
                    "1": "length",
                    "7": "string_length"
                },
                "FUN_0010e439": {
                    "1": "set_param_2_in_memory",
                    "2": "store_string_in_memory",
                    "3": "set_parameter_and_process_string",
                    "7": "set_param_and_process_string"
                },
                "param_1": {
                    "1": "string_data",
                    "11": "base_address",
                    "2": "memory_address",
                    "3": "target_address"
                },
                "param_1 + 0x210": {
                    "1": "address_to_update"
                },
                "param_1+0x210": {
                    "1": "string_data_address"
                },
                "param_2": {
                    "1": "string_to_store",
                    "2": "string",
                    "3": "new_string",
                    "6": "value",
                    "9": "new_value"
                },
                "process_string_0010e2f0": {
                    "19": "process_string"
                },
                "string_address": {
                    "1": "new_string_address"
                }
            },
            "called": [
                "FUN_0010e2f0"
            ],
            "calling": [
                "thunk_FUN_0010e439",
                "FUN_0011378f"
            ],
            "code": "\nvoid set_param_and_process_string_0010e439(long base_address,undefined8 new_value)\n\n{\n  *(undefined8 *)(base_address + 0x210) = new_value;\n  process_string(base_address,0x84,0,0,new_value);\n  return;\n}\n\n",
            "current_name": "set_param_and_process_string_0010e439",
            "entrypoint": "0x0010e439",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e439": "set_param_and_process_string_0010e439",
                "param_1": "base_address",
                "param_2": "new_value",
                "process_string_0010e2f0": "process_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e453": {
            "additional_data": {
                "FUN_0010e453": {
                    "1": "reverse_and_initialize_data_structure",
                    "12": "initialize_and_process_data",
                    "3": "initialize_structure",
                    "6": "initialize_data",
                    "8": "initialize_data_structure"
                },
                "LAB_0010e475": {
                    "1": "exit_point"
                },
                "LAB_0010e578": {
                    "1": "set_dynamic_str"
                },
                "LAB_0010e58b": {
                    "1": "free_memory"
                },
                "__s": {
                    "1": "formatted_str",
                    "25": "formatted_string"
                },
                "cVar2": {
                    "1": "char_value",
                    "19": "result",
                    "9": "status"
                },
                "lVar1": {
                    "1": "current_array_string",
                    "2": "current_string_ptr",
                    "3": "string_length",
                    "4": "current_string",
                    "5": "array_element"
                },
                "lVar2": {
                    "1": "increment"
                },
                "lVar5": {
                    "1": "counter",
                    "16": "total_length",
                    "2": "count",
                    "3": "length"
                },
                "lVar7": {
                    "1": "ptr_increment",
                    "17": "offset",
                    "4": "array_index"
                },
                "param_1": {
                    "1": "ptr_data_structure",
                    "13": "data_structure",
                    "2": "param",
                    "3": "data",
                    "4": "data_structure_param"
                },
                "param_2": {
                    "1": "param_b",
                    "2": "string",
                    "21": "input_string"
                },
                "param_3": {
                    "1": "param_c",
                    "14": "string_array",
                    "2": "str_list",
                    "3": "input_strings",
                    "4": "additional_strings"
                },
                "ppcVar6": {
                    "1": "current_input_ptr",
                    "13": "current_string",
                    "2": "current_string_ptr",
                    "3": "string_ptr"
                },
                "sVar3": {
                    "1": "input_length",
                    "2": "str_length",
                    "23": "string_length"
                },
                "uVar4": {
                    "1": "success_status",
                    "11": "result",
                    "2": "success_indicator",
                    "4": "success_flag",
                    "6": "success",
                    "7": "return_value"
                }
            },
            "called": [
                "strlen",
                "FUN_0010e2f0",
                "FUN_00109cf4",
                "xmalloc",
                "free",
                "sprintf",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 initialize_and_process_data_0010e453(long data_structure,char *input_string,char **string_array)\n\n{\n  long array_element;\n  char result;\n  size_t string_length;\n  undefined2 *formatted_string;\n  undefined8 result;\n  long total_length;\n  char **current_string;\n  long offset;\n  \n  if (string_array == (char **)0x0) {\n    if (input_string != (char *)0x0) {\n      string_length = strlen(input_string);\n      formatted_string = (undefined2 *)xmalloc(string_length + 10);\n      sprintf((char *)formatted_string,\"xe%s:\",input_string);\nset_dynamic_str:\n      result = initialize_data_structure_00109b52(data_structure,formatted_string,0,0,4);\n      if (result != '\\0') goto free_memory;\n    }\nexit_point:\n    result = 0;\n  }\n  else {\n    total_length = 10;\n    current_string = string_array;\n    if (input_string != (char *)0x0) {\n      string_length = strlen(input_string);\n      total_length = string_length + 10;\n    }\n    for (; *current_string != (char *)0x0; current_string = current_string + 1) {\n      string_length = strlen(*current_string);\n      total_length = total_length + 0x14 + string_length;\n    }\n    formatted_string = (undefined2 *)xmalloc(total_length);\n    if (input_string == (char *)0x0) {\n      *formatted_string = 0x65;\n      total_length = 0;\n    }\n    else {\n      total_length = *(long *)(data_structure + 0x68);\n      *(long *)(data_structure + 0x68) = total_length + 1;\n      sprintf((char *)formatted_string,\"%s:T%ld=e\",input_string,total_length);\n    }\n    offset = 0;\n    while( true ) {\n      array_element = *(long *)((long)string_array + offset);\n      string_length = strlen((char *)formatted_string);\n      if (array_element == 0) break;\n      offset = offset + 8;\n      sprintf((char *)(undefined2 *)((long)formatted_string + string_length),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formatted_string + string_length) = 0x3b;\n    if (input_string == (char *)0x0) goto set_dynamic_str;\n    result = process_string_0010e2f0(data_structure,0x80,0,0,formatted_string);\n    if ((result == '\\0') || (result = initialize_data_structure_00109cf4(data_structure,total_length,4), result == '\\0'))\n    goto exit_point;\nfree_memory:\n    free(formatted_string);\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "initialize_and_process_data_0010e453",
            "entrypoint": "0x0010e453",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e453": "initialize_and_process_data_0010e453",
                "LAB_0010e475": "exit_point",
                "LAB_0010e578": "set_dynamic_str",
                "LAB_0010e58b": "free_memory",
                "__s": "formatted_string",
                "cVar2": "result",
                "lVar1": "array_element",
                "lVar5": "total_length",
                "lVar7": "offset",
                "param_1": "data_structure",
                "param_2": "input_string",
                "param_3": "string_array",
                "ppcVar6": "current_string",
                "sVar3": "string_length",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e5db": {
            "additional_data": {
                "FUN_0010e5db": {
                    "1": "extract_and_process_data",
                    "2": "reverse_and_process_data",
                    "3": "process_and_extract_data",
                    "8": "process_data"
                },
                "__ptr": {
                    "1": "extracted_data",
                    "18": "extracted_ptr",
                    "2": "extracted_data_ptr",
                    "3": "extracted_pointer",
                    "4": "ptr"
                },
                "__s": {
                    "1": "str",
                    "2": "string",
                    "25": "extracted_string"
                },
                "__s_00": {
                    "1": "str2",
                    "2": "new_string",
                    "24": "modified_string"
                },
                "auVar4": {
                    "1": "function_result",
                    "11": "result",
                    "2": "output"
                },
                "cVar1": {
                    "1": "is_string_processed",
                    "2": "processed_char",
                    "3": "result_char",
                    "7": "result"
                },
                "iVar3": {
                    "1": "count",
                    "13": "iteration_count",
                    "2": "counter",
                    "4": "iteration",
                    "5": "iteration_counter"
                },
                "in_R10": {
                    "1": "some_constant",
                    "3": "constant_value",
                    "7": "additional_data"
                },
                "param_1": {
                    "15": "data_ptr",
                    "2": "input_data",
                    "3": "data",
                    "4": "data_address",
                    "5": "data_pointer"
                },
                "param_2": {
                    "1": "data_length",
                    "14": "num_iterations",
                    "3": "iterations",
                    "4": "iteration_limit",
                    "5": "max_iterations"
                },
                "sVar2": {
                    "1": "extracted_string_length",
                    "27": "string_length"
                }
            },
            "called": [
                "FUN_00109b2f",
                "strlen",
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "sprintf",
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] process_data_0010e5db(long data_ptr,int num_iterations)\n\n{\n  char result;\n  void *extracted_ptr;\n  char *extracted_string;\n  size_t string_length;\n  char *modified_string;\n  ulong additional_data;\n  int iteration_count;\n  undefined result [16];\n  \n  iteration_count = 0;\n  do {\n    if (num_iterations <= iteration_count) {\n      result = process_data_0010e5db_00109ed3(data_ptr,0x66,0,data_ptr + 0x188,data_ptr + 400,additional_data);\n      return result;\n    }\n    if (*(char *)(*(long *)(data_ptr + 0x60) + 0x1c) == '\\0') {\n      extracted_ptr = (void *)extract_and_free_ptr_00109b2f(data_ptr);\n      free(extracted_ptr);\n    }\n    else {\n      extracted_string = (char *)extract_and_free_ptr_00109b2f(data_ptr);\n      string_length = strlen(extracted_string);\n      modified_string = (char *)xmalloc(string_length + 3);\n      sprintf(modified_string,\":t%s\",extracted_string);\n      free(extracted_string);\n      result = process_string_0010e2f0(data_ptr,0x80,0,0,modified_string);\n      if (result == '\\0') {\n        result._8_8_ = 0;\n        result._0_8_ = additional_data;\n        return result << 0x40;\n      }\n      free(modified_string);\n    }\n    iteration_count = iteration_count + 1;\n  } while( true );\n}\n\n",
            "current_name": "process_data_0010e5db",
            "entrypoint": "0x0010e5db",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e5db": "process_data_0010e5db",
                "__ptr": "extracted_ptr",
                "__s": "extracted_string",
                "__s_00": "modified_string",
                "auVar4": "result",
                "cVar1": "result",
                "iVar3": "iteration_count",
                "in_R10": "additional_data",
                "param_1": "data_ptr",
                "param_2": "num_iterations",
                "sVar2": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e6a8": {
            "additional_data": {
                "FUN_0010e6a8": {
                    "1": "extract_and_process_string_hash",
                    "2": "process_string_and_hash",
                    "20": "process_and_store_string",
                    "3": "process_string"
                },
                "__s": {
                    "1": "extracted_str",
                    "29": "extracted_string"
                },
                "__s_00": {
                    "1": "formatted_str",
                    "10": "formatted_string",
                    "2": "allocated_string",
                    "3": "combined_string",
                    "5": "new_string",
                    "6": "processed_string"
                },
                "auVar10": {
                    "1": "result_container",
                    "10": "return_value",
                    "2": "return_val",
                    "3": "result"
                },
                "lVar5": {
                    "1": "string_lookup_result",
                    "16": "lookup_result",
                    "2": "hash_result",
                    "9": "hash_lookup_result"
                },
                "lVar8": {
                    "1": "num_strings",
                    "17": "counter",
                    "8": "count"
                },
                "param_1": {
                    "1": "binary_structure",
                    "2": "binary",
                    "3": "data",
                    "4": "input_data"
                },
                "param_2": {
                    "1": "file_name",
                    "18": "input_string",
                    "2": "key"
                },
                "param_3": {
                    "1": "unknown_param_1",
                    "14": "param_3",
                    "2": "var_1",
                    "4": "param3"
                },
                "param_4": {
                    "1": "arg_4",
                    "14": "param_4",
                    "2": "var_2",
                    "4": "param4"
                },
                "sVar3": {
                    "1": "file_name_length",
                    "13": "input_string_length",
                    "2": "input_length"
                },
                "sVar4": {
                    "1": "extracted_str_len",
                    "2": "extracted_string_len",
                    "22": "extracted_string_length"
                },
                "uVar1": {
                    "1": "processing_result",
                    "10": "result",
                    "3": "string_processing_result",
                    "4": "process_result"
                },
                "uVar2": {
                    "1": "string_process_error",
                    "15": "extracted_value",
                    "2": "extracted_data",
                    "4": "error_code"
                },
                "uVar6": {
                    "1": "error_string",
                    "14": "error_message",
                    "2": "errmsg_result",
                    "3": "error_msg"
                },
                "uVar7": {
                    "1": "errmsg_format",
                    "2": "dcgettext_result",
                    "4": "error_message",
                    "7": "error_format"
                },
                "uVar9": {
                    "1": "processing_result",
                    "13": "return_value",
                    "2": "process_result",
                    "6": "result"
                }
            },
            "called": [
                "FUN_00109b2f",
                "strlen",
                "bfd_get_error",
                "FUN_0010e2f0",
                "bfd_hash_lookup",
                "xmalloc",
                "FUN_00119ed0",
                "free",
                "dcgettext",
                "bfd_errmsg",
                "sprintf"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined  [16] process_and_store_string_0010e6a8(long input_data,char *input_string,undefined8 param_3,undefined8 param_4)\n\n{\n  uint result;\n  undefined4 extracted_value;\n  char *extracted_string;\n  size_t input_string_length;\n  size_t extracted_string_length;\n  char *formatted_string;\n  long lookup_result;\n  undefined8 error_message;\n  undefined8 error_format;\n  long counter;\n  ulong return_value;\n  undefined return_value [16];\n  \n  counter = *(long *)(*(long *)(input_data + 0x60) + 0x10);\n  extracted_value = *(undefined4 *)(*(long *)(input_data + 0x60) + 0x18);\n  extracted_string = (char *)extract_and_free_ptr_00109b2f();\n  input_string_length = strlen(input_string);\n  extracted_string_length = strlen(extracted_string);\n  formatted_string = (char *)xmalloc(input_string_length + 0x14 + extracted_string_length);\n  if (counter < 1) {\n    counter = *(long *)(input_data + 0x68);\n    *(long *)(input_data + 0x68) = counter + 1;\n    sprintf(formatted_string,\"%s:t%ld=%s\",input_string,counter,extracted_string);\n  }\n  else {\n    sprintf(formatted_string,\"%s:t%s\",input_string,extracted_string);\n  }\n  free(extracted_string);\n  result = process_string_0010e2f0(input_data,0x80,0,0,formatted_string);\n  return_value = (ulong)result;\n  if ((char)result != '\\0') {\n    free(formatted_string);\n    lookup_result = bfd_hash_lookup(input_data + 0x1b8,input_string,1,0);\n    if (lookup_result != 0) {\n      *(long *)(lookup_result + 0x20) = counter;\n      *(undefined4 *)(lookup_result + 0x28) = extracted_value;\n      goto LAB_0010e7b3;\n    }\n    extracted_value = bfd_get_error();\n    error_message = bfd_errmsg(extracted_value);\n    error_format = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    print_error_message_00119ed0(error_format,error_message);\n  }\n  return_value = 0;\nLAB_0010e7b3:\n  return_value._8_8_ = param_4;\n  return_value._0_8_ = return_value;\n  return return_value;\n}\n\n",
            "current_name": "process_and_store_string_0010e6a8",
            "entrypoint": "0x0010e6a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e6a8": "process_and_store_string_0010e6a8",
                "__s": "extracted_string",
                "__s_00": "formatted_string",
                "auVar10": "return_value",
                "lVar5": "lookup_result",
                "lVar8": "counter",
                "param_1": "input_data",
                "param_2": "input_string",
                "sVar3": "input_string_length",
                "sVar4": "extracted_string_length",
                "uVar1": "result",
                "uVar2": "extracted_value",
                "uVar6": "error_message",
                "uVar7": "error_format",
                "uVar9": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e7c2": {
            "additional_data": {
                "FUN_0010e7c2": {
                    "1": "combine_strings",
                    "2": "process_and_free_string",
                    "3": "format_and_process_string",
                    "4": "process_and_format_string",
                    "5": "reverse_and_process_string"
                },
                "__s": {
                    "2": "extracted_data",
                    "29": "extracted_string"
                },
                "__s_00": {
                    "1": "formatted_string_ptr",
                    "2": "new_string",
                    "4": "modified_string",
                    "5": "processed_string",
                    "7": "combined_string"
                },
                "auVar3": {
                    "1": "result_data",
                    "2": "result_variable",
                    "21": "result"
                },
                "param_1": {
                    "1": "data",
                    "2": "input1",
                    "3": "param1",
                    "4": "input_data",
                    "9": "input_param"
                },
                "param_2": {
                    "1": "input2",
                    "10": "prefix",
                    "2": "original_string",
                    "7": "input_string"
                },
                "param_3": {
                    "1": "input2",
                    "10": "unused_param",
                    "2": "param_3",
                    "3": "param3"
                },
                "param_4": {
                    "1": "output_ptr",
                    "2": "unused_param_2",
                    "5": "output",
                    "7": "output_param"
                },
                "sVar1": {
                    "1": "prefix_len",
                    "11": "prefix_length",
                    "2": "string_param_length",
                    "3": "input_length"
                },
                "sVar2": {
                    "1": "extracted_string_len",
                    "2": "extracted_length",
                    "20": "extracted_string_length"
                }
            },
            "called": [
                "FUN_00109b2f",
                "strlen",
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "sprintf"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined  [16] reverse_and_process_string_0010e7c2(undefined8 input_param,char *prefix,undefined8 unused_param,undefined8 output_param)\n\n{\n  char *extracted_string;\n  size_t prefix_length;\n  size_t extracted_string_length;\n  char *combined_string;\n  undefined result [16];\n  \n  extracted_string = (char *)extract_and_free_ptr_00109b2f();\n  prefix_length = strlen(prefix);\n  extracted_string_length = strlen(extracted_string);\n  combined_string = (char *)xmalloc(prefix_length + 3 + extracted_string_length);\n  sprintf(combined_string,\"%s:T%s\",prefix,extracted_string);\n  free(extracted_string);\n  result._0_4_ = process_string_0010e2f0(input_param,0x80,0,0,combined_string);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(combined_string);\n  }\n  result._8_8_ = output_param;\n  return result;\n}\n\n",
            "current_name": "reverse_and_process_string_0010e7c2",
            "entrypoint": "0x0010e7c2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e7c2": "reverse_and_process_string_0010e7c2",
                "__s": "extracted_string",
                "__s_00": "combined_string",
                "auVar3": "result",
                "param_1": "input_param",
                "param_2": "prefix",
                "param_3": "unused_param",
                "param_4": "output_param",
                "sVar1": "prefix_length",
                "sVar2": "extracted_string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e842": {
            "additional_data": {
                "FUN_0010e842": {
                    "1": "process_and_validate_input",
                    "2": "process_and_return_result",
                    "3": "process_and_free_string",
                    "8": "process_and_format_string",
                    "9": "format_and_process_string"
                },
                "__s": {
                    "1": "string",
                    "18": "formatted_string",
                    "2": "new_string",
                    "3": "allocated_string",
                    "5": "processed_string"
                },
                "auVar2": {
                    "1": "result_variable",
                    "29": "result"
                },
                "param_1": {
                    "1": "input1",
                    "2": "data",
                    "4": "input",
                    "8": "input_data"
                },
                "param_2": {
                    "1": "input2",
                    "14": "input_string",
                    "2": "text",
                    "5": "original_string"
                },
                "param_3": {
                    "1": "counter",
                    "10": "integer_value",
                    "2": "integer_input",
                    "3": "index"
                },
                "param_4": {
                    "1": "data",
                    "2": "additional_parameter",
                    "3": "param_4",
                    "6": "output_value"
                },
                "sVar1": {
                    "1": "message_length",
                    "2": "input_string_length",
                    "23": "string_length"
                }
            },
            "called": [
                "strlen",
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "sprintf"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined  [16] format_and_process_string_0010e842(undefined8 input_data,char *input_string,undefined8 integer_value,undefined8 output_value)\n\n{\n  size_t string_length;\n  char *formatted_string;\n  undefined result [16];\n  \n  string_length = strlen(input_string);\n  formatted_string = (char *)xmalloc(string_length + 0x14);\n  sprintf(formatted_string,\"%s:c=i%ld\",input_string,integer_value);\n  result._0_4_ = process_string_0010e2f0(input_data,0x80,0,0,formatted_string);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formatted_string);\n  }\n  result._8_8_ = output_value;\n  return result;\n}\n\n",
            "current_name": "format_and_process_string_0010e842",
            "entrypoint": "0x0010e842",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e842": "format_and_process_string_0010e842",
                "__s": "formatted_string",
                "auVar2": "result",
                "param_1": "input_data",
                "param_2": "input_string",
                "param_3": "integer_value",
                "param_4": "output_value",
                "sVar1": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e8a9": {
            "additional_data": {
                "FUN_0010e35f": {
                    "1": "decompile_and_improve"
                },
                "FUN_0010e8a9": {
                    "1": "format_and_process_string",
                    "2": "process_and_send_string",
                    "20": "process_and_free_string",
                    "3": "process_and_send_data"
                },
                "__s": {
                    "1": "allocated_memory",
                    "10": "formatted_string",
                    "3": "dynamic_string",
                    "4": "combined_string",
                    "5": "processed_string"
                },
                "param_1": {
                    "1": "data",
                    "11": "input_string",
                    "2": "prefix",
                    "3": "input1",
                    "4": "input_string_1"
                },
                "param_2": {
                    "1": "input_data",
                    "3": "input2",
                    "4": "input_string_2",
                    "5": "output_string"
                },
                "param_3": {
                    "1": "extra_data",
                    "2": "string_to_process",
                    "3": "additional_info",
                    "7": "input_string"
                },
                "sVar2": {
                    "1": "suffix_length",
                    "2": "data_length",
                    "3": "length",
                    "5": "input_length",
                    "7": "string_length"
                },
                "uVar1": {
                    "25": "result",
                    "4": "return_value"
                }
            },
            "called": [
                "strlen",
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "sprintf"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 process_and_free_string_0010e8a9(undefined8 input_string,undefined8 output_string,char *additional_string)\n\n{\n  undefined4 result;\n  size_t string_length;\n  char *formatted_string;\n  \n  string_length = strlen(additional_string);\n  formatted_string = (char *)xmalloc(string_length + 0x14);\n  sprintf(formatted_string,\"%s:c=f%g\",input_string,additional_string);\n  result = process_string_0010e2f0(output_string,0x80,0,0,formatted_string);\n  if ((char)result != '\\0') {\n    free(formatted_string);\n  }\n  return result;\n}\n\n",
            "current_name": "process_and_free_string_0010e8a9",
            "entrypoint": "0x0010e8a9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e8a9": "process_and_free_string_0010e8a9",
                "__s": "formatted_string",
                "param_1": "input_string",
                "param_2": "output_string",
                "param_3": "additional_string",
                "sVar2": "string_length",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e918": {
            "additional_data": {
                "FUN_0010e918": {
                    "1": "create_and_process_string",
                    "11": "process_and_send_data",
                    "2": "process_and_free_string",
                    "3": "format_and_process_string"
                },
                "__s": {
                    "24": "extracted_string",
                    "7": "extracted_data"
                },
                "__s_00": {
                    "1": "constructed_string",
                    "2": "final_string",
                    "3": "formatted_data",
                    "4": "combined_string",
                    "5": "processed_string",
                    "8": "formatted_string"
                },
                "param_1": {
                    "1": "input1",
                    "2": "extracted_value",
                    "3": "data",
                    "4": "socket"
                },
                "param_2": {
                    "1": "input2",
                    "12": "input_string",
                    "2": "string1",
                    "3": "prefix",
                    "4": "message"
                },
                "param_3": {
                    "1": "data_length",
                    "2": "string_length",
                    "3": "length",
                    "4": "number"
                },
                "sVar2": {
                    "1": "message_size",
                    "2": "username_length",
                    "3": "input_length",
                    "7": "input_string_length"
                },
                "sVar3": {
                    "1": "data_length",
                    "18": "extracted_string_length",
                    "2": "extracted_len",
                    "3": "extracted_length",
                    "5": "extracted_data_length"
                },
                "uVar1": {
                    "1": "return_value",
                    "19": "result"
                }
            },
            "called": [
                "strlen",
                "FUN_00109b2f",
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "sprintf"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 process_and_send_data_0010e918(undefined8 socket,char *input_string,undefined8 number)\n\n{\n  undefined4 result;\n  char *extracted_string;\n  size_t input_string_length;\n  size_t extracted_string_length;\n  char *formatted_string;\n  \n  extracted_string = (char *)extract_and_free_ptr_00109b2f();\n  input_string_length = strlen(input_string);\n  extracted_string_length = strlen(extracted_string);\n  formatted_string = (char *)xmalloc(input_string_length + 0x14 + extracted_string_length);\n  sprintf(formatted_string,\"%s:c=e%s,%ld\",input_string,extracted_string,number);\n  free(extracted_string);\n  result = process_string_0010e2f0(socket,0x80,0,0,formatted_string);\n  if ((char)result != '\\0') {\n    free(formatted_string);\n  }\n  return result;\n}\n\n",
            "current_name": "process_and_send_data_0010e918",
            "entrypoint": "0x0010e918",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e918": "process_and_send_data_0010e918",
                "__s": "extracted_string",
                "__s_00": "formatted_string",
                "param_1": "socket",
                "param_2": "input_string",
                "param_3": "number",
                "sVar2": "input_string_length",
                "sVar3": "extracted_string_length",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e9a0": {
            "additional_data": {
                "<__s>": {
                    "1": "extracted_string"
                },
                "<__s_00>": {
                    "1": "modified_string"
                },
                "<__s_01>": {
                    "1": "final_string"
                },
                "<lVar1>": {
                    "1": "counter"
                },
                "<original_function_name>": {
                    "1": "process_string"
                },
                "<param_1>": {
                    "1": "data"
                },
                "<param_2>": {
                    "1": "prefix"
                },
                "<param_3>": {
                    "1": "option"
                },
                "<param_4>": {
                    "1": "arg"
                },
                "<pcVar5>": {
                    "1": "type_prefix"
                },
                "<sVar3>": {
                    "1": "prefix_length"
                },
                "<sVar4>": {
                    "1": "extracted_string_length"
                },
                "<uVar6>": {
                    "1": "status"
                },
                "FUN_0010e9a0": {
                    "1": "process_and_free_string",
                    "2": "parse_and_process_string",
                    "3": "process_data",
                    "5": "format_and_process_string",
                    "6": "process_string"
                },
                "__s": {
                    "1": "extracted_text",
                    "2": "extracted_str",
                    "24": "extracted_string",
                    "3": "extracted_data"
                },
                "__s_00": {
                    "1": "new_string1",
                    "11": "formatted_string",
                    "2": "new_data",
                    "5": "new_string",
                    "7": "modified_string"
                },
                "__s_01": {
                    "1": "composed_message",
                    "19": "final_string",
                    "2": "result_string"
                },
                "_sch_istable": {
                    "1": "character_table"
                },
                "lVar1": {
                    "1": "index",
                    "21": "counter",
                    "6": "count"
                },
                "param_1": {
                    "1": "input_1",
                    "2": "base_address",
                    "3": "data",
                    "4": "input_ptr",
                    "7": "input"
                },
                "param_2": {
                    "1": "format_specifier",
                    "16": "prefix",
                    "2": "prefix_string",
                    "5": "input_string"
                },
                "param_3": {
                    "1": "string_type",
                    "10": "type",
                    "5": "option",
                    "6": "mode"
                },
                "param_4": {
                    "1": "extra_param",
                    "2": "data",
                    "4": "param_4",
                    "6": "param"
                },
                "pcVar5": {
                    "1": "letter",
                    "2": "mode_string",
                    "6": "type_symbol"
                },
                "process_string_0010e2f0": {
                    "1": "process_string"
                },
                "sVar3": {
                    "1": "message_length",
                    "12": "prefix_length",
                    "2": "input_len",
                    "9": "input_length"
                },
                "sVar4": {
                    "1": "data_length",
                    "10": "extracted_string_length",
                    "2": "modified_string_length",
                    "8": "extracted_length"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "strlen": {
                    "1": "string_length"
                },
                "uVar2": {
                    "22": "result",
                    "7": "return_value"
                },
                "uVar6": {
                    "1": "format_specifier",
                    "11": "flag",
                    "2": "data_type_value"
                }
            },
            "called": [
                "strlen",
                "FUN_00109b2f",
                "FUN_0010e2f0",
                "xmalloc",
                "abort",
                "free",
                "sprintf"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 process_string_0010e9a0(long input,char *prefix,undefined4 type,undefined8 param)\n\n{\n  long counter;\n  undefined4 result;\n  byte *extracted_string;\n  byte *formatted_string;\n  size_t prefix_length;\n  size_t extracted_strlen;\n  char *final_string;\n  char *type_symbol;\n  undefined8 flag;\n  \n  extracted_string = (byte *)extract_and_free_ptr_00109b2f();\n  switch(type) {\n  case 1:\n    type_symbol = \"G\";\n    flag = 0x20;\n    break;\n  case 2:\n    type_symbol = \"S\";\n    flag = 0x26;\n    break;\n  case 3:\n    type_symbol = \"V\";\n    flag = 0x26;\n    break;\n  case 4:\n    type_symbol = \"\";\n    flag = 0x80;\n    if (((&character_table)[(ulong)*extracted_string * 2] & 4) == 0) {\n      counter = *(long *)(input + 0x68);\n      *(long *)(input + 0x68) = counter + 1;\n      prefix_length = strlen((char *)extracted_string);\n      formatted_string = (byte *)xmalloc(prefix_length + 0x14);\n      sprintf((char *)formatted_string,\"%ld=%s\",counter,extracted_string);\n      free(extracted_string);\n      extracted_string = formatted_string;\n    }\n    break;\n  case 5:\n    type_symbol = \"r\";\n    flag = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  prefix_length = strlen(prefix);\n  extracted_strlen = strlen((char *)extracted_string);\n  final_string = (char *)xmalloc(prefix_length + 3 + extracted_strlen);\n  sprintf(final_string,\"%s:%s%s\",prefix,type_symbol,extracted_string);\n  free(extracted_string);\n  result = process_string_0010e9a0(input,flag,0,param,final_string);\n  if ((char)result != '\\0') {\n    free(final_string);\n  }\n  return result;\n}\n\n",
            "current_name": "process_string_0010e9a0",
            "entrypoint": "0x0010e9a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e9a0": "process_string_0010e9a0",
                "__s": "extracted_string",
                "__s_00": "formatted_string",
                "__s_01": "final_string",
                "_sch_istable": "character_table",
                "lVar1": "counter",
                "param_1": "input",
                "param_2": "prefix",
                "param_3": "type",
                "param_4": "param",
                "pcVar5": "type_symbol",
                "process_string_0010e2f0": "process_string",
                "sVar3": "prefix_length",
                "sVar4": "extracted_string_length",
                "sprintf": "format_string",
                "strlen": "string_length",
                "uVar2": "result",
                "uVar6": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010eafe": {
            "additional_data": {
                "FUN_0010eafe": {
                    "1": "process_data",
                    "12": "process_string",
                    "2": "process_and_update_string",
                    "3": "process_extracted_data",
                    "4": "process_and_free_string"
                },
                "__s": {
                    "2": "extracted_str",
                    "29": "extracted_string"
                },
                "__s_00": {
                    "1": "final_string",
                    "11": "processed_string",
                    "3": "new_string",
                    "4": "result_string"
                },
                "param_1": {
                    "1": "binary_offset",
                    "3": "context",
                    "5": "data"
                },
                "param_2": {
                    "1": "source_string",
                    "2": "input_str",
                    "25": "input_string",
                    "3": "string1"
                },
                "param_3": {
                    "1": "special_char",
                    "2": "character",
                    "26": "flag"
                },
                "process_string_0010e2f0": {
                    "1": "process_string_helper"
                },
                "sVar2": {
                    "1": "source_length",
                    "14": "input_length",
                    "2": "input_str_len",
                    "3": "input_len",
                    "6": "input_string_length"
                },
                "sVar3": {
                    "1": "extracted_string_len",
                    "11": "extracted_string_length",
                    "2": "extracted_str_len",
                    "3": "extracted_len"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "uVar1": {
                    "18": "result",
                    "8": "return_value"
                }
            },
            "called": [
                "strlen",
                "FUN_00109b2f",
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "sprintf"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 process_string_0010eafe(long data,char *input_string,char flag)\n\n{\n  undefined4 result;\n  char *extracted_string;\n  size_t input_length;\n  size_t extracted_string_length;\n  char *processed_string;\n  \n  if ((*(int *)(data + 0x1f8) == 0) && (*(long *)(data + 0x1e8) == -1)) {\n    extracted_string = (char *)extract_and_free_ptr_00109b2f();\n    input_length = strlen(input_string);\n    extracted_string_length = strlen(extracted_string);\n    processed_string = (char *)xmalloc(input_length + 3 + extracted_string_length);\n    sprintf(processed_string,\"%s:%c%s\",input_string,(ulong)((-(uint)(flag == '\\0') & 0x20) + 0x46),extracted_string);\n    *(undefined8 *)(data + 0x1e8) = *(undefined8 *)(data + 0x10);\n    result = process_string_0010eafe_helper(data,0x24,0,0,processed_string);\n    if ((char)result != '\\0') {\n      free(processed_string);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_string_0010eafe",
            "entrypoint": "0x0010eafe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010eafe": "process_string_0010eafe",
                "__s": "extracted_string",
                "__s_00": "processed_string",
                "param_1": "data",
                "param_2": "input_string",
                "param_3": "flag",
                "process_string_0010e2f0": "process_string_helper",
                "sVar2": "input_length",
                "sVar3": "extracted_string_length",
                "sprintf": "format_string",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ebb0": {
            "additional_data": {
                "FUN_0010ebb0": {
                    "1": "process_and_print",
                    "2": "process_data",
                    "5": "process_and_print_string",
                    "9": "process_and_free_string"
                },
                "__s": {
                    "1": "extracted_data",
                    "29": "extracted_string"
                },
                "__s_00": {
                    "1": "final_string",
                    "3": "new_string",
                    "4": "concatenated_string",
                    "7": "formatted_string",
                    "8": "combined_string"
                },
                "abort": {
                    "1": "abort_program"
                },
                "cVar1": {
                    "1": "char_constant",
                    "16": "character",
                    "5": "char_value"
                },
                "free": {
                    "1": "free_memory"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "input_data",
                    "3": "input_ptr",
                    "4": "input1",
                    "9": "input_param"
                },
                "param_2": {
                    "1": "string1",
                    "10": "input_string",
                    "2": "string_param",
                    "4": "input2",
                    "7": "prefix"
                },
                "param_3": {
                    "1": "input_3",
                    "2": "length_param",
                    "3": "prefix_length",
                    "6": "input_length",
                    "9": "length"
                },
                "param_4": {
                    "1": "input_4",
                    "2": "output_param",
                    "3": "input4",
                    "5": "additional_param"
                },
                "process_string_0010e2f0": {
                    "2": "process_string"
                },
                "sVar4": {
                    "1": "input_str_len",
                    "2": "input_length",
                    "3": "input2_length",
                    "8": "prefix_length"
                },
                "sVar5": {
                    "1": "length2",
                    "17": "extracted_string_length",
                    "2": "string_length2",
                    "3": "extracted_str_length"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "uVar2": {
                    "1": "temp_variable",
                    "2": "length_minus_1",
                    "3": "modified_length",
                    "4": "remaining_length",
                    "5": "adjusted_length"
                },
                "uVar3": {
                    "23": "result",
                    "5": "return_value"
                }
            },
            "called": [
                "FUN_00109b2f",
                "strlen",
                "FUN_0010e2f0",
                "xmalloc",
                "abort",
                "free",
                "sprintf"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 process_and_free_string_0010ebb0(undefined8 input_param,char *input_string,int length,undefined8 additional_param)\n\n{\n  char character;\n  uint adjusted_length;\n  undefined4 result;\n  char *extracted_string;\n  size_t prefix_length;\n  size_t extracted_string_length;\n  char *combined_string;\n  \n  extracted_string = (char *)extract_and_free_memory_ptr_00109b2f();\n  adjusted_length = length - 1;\n  if (adjusted_length < 4) {\n    result = *(undefined4 *)(&DAT_00121340 + (ulong)adjusted_length * 4);\n    character = (&DAT_00121334)[adjusted_length];\n    prefix_length = strlen(input_string);\n    extracted_string_length = strlen(extracted_string);\n    combined_string = (char *)xmalloc(prefix_length + 3 + extracted_string_length);\n    sprintf(combined_string,\"%s:%c%s\",input_string,(ulong)(uint)(int)character,extracted_string);\n    free_memory(extracted_string);\n    result = process_string(input_param,result,0,additional_param,combined_string);\n    if ((char)result != '\\0') {\n      free_memory(combined_string);\n    }\n    return result;\n  }\n                    \n  abort_program();\n}\n\n",
            "current_name": "process_and_free_string_0010ebb0",
            "entrypoint": "0x0010ebb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ebb0": "process_and_free_string_0010ebb0",
                "__s": "extracted_string",
                "__s_00": "combined_string",
                "abort": "abort_program",
                "cVar1": "character",
                "free": "free_memory",
                "param_1": "input_param",
                "param_2": "input_string",
                "param_3": "length",
                "param_4": "additional_param",
                "process_string_0010e2f0": "process_string",
                "sVar4": "prefix_length",
                "sVar5": "extracted_string_length",
                "sprintf": "format_string",
                "uVar2": "adjusted_length",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ec73": {
            "additional_data": {
                "FUN_0010ec73": {
                    "1": "process_and_update",
                    "18": "process_data",
                    "2": "process_param1",
                    "3": "process_function"
                },
                "array[0x3c]": {
                    "1": "element_1"
                },
                "array[0x3d]": {
                    "1": "element_2"
                },
                "array[0x3f]": {
                    "1": "counter"
                },
                "array[0x40]": {
                    "1": "default_value"
                },
                "array[0x41]": {
                    "1": "offset"
                },
                "cVar2": {
                    "1": "status",
                    "29": "result"
                },
                "iVar1": {
                    "1": "increment_variable",
                    "22": "counter",
                    "7": "count"
                },
                "param_1": {
                    "1": "data_pointer",
                    "15": "data",
                    "2": "param_array",
                    "4": "data_array",
                    "5": "array"
                },
                "param_2": {
                    "1": "input_data",
                    "24": "value",
                    "3": "param_value"
                },
                "param_3": {
                    "1": "unused_param",
                    "2": "unused_param_1",
                    "4": "param3",
                    "7": "param_3",
                    "8": "arg1"
                },
                "param_4": {
                    "1": "unused_param",
                    "2": "unused_param_2",
                    "4": "arg4",
                    "7": "param_4",
                    "8": "arg2"
                },
                "param_5": {
                    "1": "unused3",
                    "2": "unused_param_3",
                    "4": "arg5",
                    "7": "param_5",
                    "8": "arg3"
                },
                "param_6": {
                    "1": "param_6_value",
                    "2": "unused_param_4",
                    "4": "arg6",
                    "8": "arg4"
                },
                "process_string_0010e2f0": {
                    "3": "process_string"
                }
            },
            "called": [
                "FUN_0010e2f0"
            ],
            "calling": [
                "FUN_00113a4d"
            ],
            "code": "\nundefined process_data_0010ec73(long *data,long value,undefined8 arg1,undefined8 arg2,\n                      undefined8 arg3,undefined8 arg4)\n\n{\n  int counter;\n  char result;\n  \n  if (data[0x3c] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3c]);\n    data[0x3c] = -1;\n  }\n  if (data[0x3d] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3d]);\n    data[0x3d] = -1;\n  }\n  counter = *(int *)(data + 0x3f);\n  *(int *)(data + 0x3f) = counter + 1;\n  if (counter == 0) {\n    data[0x40] = value;\n  }\n  else {\n    if ((data[0x41] != -1) &&\n       (result = process_string(data,0xc0,0,data[0x41],0,arg4,arg2), result == '\\0')) {\n      return 0;\n    }\n    data[0x41] = value - data[0x40];\n  }\n  return 1;\n}\n\n",
            "current_name": "process_data_0010ec73",
            "entrypoint": "0x0010ec73",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ec73": "process_data_0010ec73",
                "cVar2": "result",
                "iVar1": "counter",
                "param_1": "data",
                "param_2": "value",
                "param_3": "arg1",
                "param_4": "arg2",
                "param_5": "arg3",
                "param_6": "arg4",
                "process_string_0010e2f0": "process_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ed2c": {
            "additional_data": {
                "FUN_0010ed2c": {
                    "1": "update_and_process_string",
                    "2": "update_maximum",
                    "3": "process_data"
                },
                "auVar4": {
                    "1": "result_data",
                    "2": "processed_data",
                    "3": "result_array",
                    "5": "output",
                    "6": "result",
                    "8": "return_value"
                },
                "cVar1": {
                    "1": "is_string_processed",
                    "14": "result",
                    "4": "success",
                    "6": "success_flag"
                },
                "extraout_RDX": {
                    "1": "unused_variable"
                },
                "iVar2": {
                    "1": "iteration",
                    "11": "counter",
                    "12": "count",
                    "2": "remaining_iterations",
                    "3": "iteration_count"
                },
                "in_R10": {
                    "1": "input_data",
                    "2": "additional_param",
                    "3": "extra_data",
                    "4": "extra_param",
                    "5": "additional_data"
                },
                "param_1": {
                    "1": "string_data",
                    "2": "param",
                    "3": "buffer",
                    "6": "data_ptr",
                    "9": "data"
                },
                "param_2": {
                    "1": "new_length",
                    "12": "new_value",
                    "2": "new_max",
                    "4": "size",
                    "7": "new_size"
                },
                "param_3": {
                    "1": "previous_value",
                    "2": "input_value",
                    "3": "flag"
                },
                "uVar3": {
                    "1": "flags",
                    "2": "processed_value",
                    "3": "flag",
                    "4": "updated_value",
                    "7": "result"
                }
            },
            "called": [
                "FUN_0010e2f0"
            ],
            "calling": [
                "FUN_00113a4d"
            ],
            "code": "\nundefined  [16] update_max_and_process_string_0010ed2c(long data,ulong new_value,undefined8 flag)\n\n{\n  char result;\n  int count;\n  undefined8 extra_output;\n  ulong result;\n  undefined8 additional_data;\n  undefined return_value [16];\n  \n  if (*(ulong *)(data + 0x1f0) < new_value) {\n    *(ulong *)(data + 0x1f0) = new_value;\n  }\n  if (*(long *)(data + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(data + 0x1f8) != 0) {\n      count = *(int *)(data + 0x1f8) + -1;\n      result = CONCAT71((int7)((ulong)flag >> 8),1);\n      *(int *)(data + 0x1f8) = count;\n      if (count != 0) {\n        return_value = process_string_0010e2f0(data,0xe0,0,new_value - *(long *)(data + 0x200),0,additional_data);\n        return return_value;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    result = process_string_0010e2f0(data,0xc0,0,*(long *)(data + 0x208),0);\n    if (result != '\\0') {\n      *(undefined8 *)(data + 0x208) = 0xffffffffffffffff;\n      flag = extra_output;\n      goto LAB_0010ed78;\n    }\n  }\n  result = 0;\nLAB_0010edae:\n  return_value._0_8_ = result & 0xffffffff;\n  return_value._8_8_ = additional_data;\n  return return_value;\n}\n\n",
            "current_name": "update_max_and_process_string_0010ed2c",
            "entrypoint": "0x0010ed2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ed2c": "update_max_and_process_string_0010ed2c",
                "auVar4": "return_value",
                "cVar1": "result",
                "extraout_RDX": "extra_output",
                "iVar2": "count",
                "in_R10": "additional_data",
                "param_1": "data",
                "param_2": "new_value",
                "param_3": "flag",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010edb4": {
            "additional_data": {
                "(param_4 - *(long *)(param_1 + 0x200))": {
                    "1": "remaining_size"
                },
                "*(long *)(param_1 + 0x210)": {
                    "1": "file_info.filename"
                },
                "*(ulong *)(param_1 + 0x1f0)": {
                    "1": "file_info.max_filesize"
                },
                "DAT_0010e2f0": {
                    "1": "constant1"
                },
                "DAT_0010e2f0_1": {
                    "1": "constant2"
                },
                "FUN_0010edb4": {
                    "1": "updated_function",
                    "2": "process_data",
                    "21": "process_file"
                },
                "PTR_FUN_0010e2f0": {
                    "1": "process_string"
                },
                "cVar1": {
                    "1": "processing_result",
                    "2": "is_valid",
                    "4": "success_flag",
                    "5": "result"
                },
                "iVar2": {
                    "1": "filename_compare_result",
                    "3": "result",
                    "4": "filename_comparison_result",
                    "6": "comparison_result",
                    "7": "cmp_result",
                    "9": "filename_comparison"
                },
                "in_R10": {
                    "1": "unused_register_value",
                    "2": "unused_param",
                    "3": "additional_info"
                },
                "param_1": {
                    "1": "data",
                    "10": "file_data",
                    "3": "file_structure",
                    "4": "file_ptr",
                    "8": "file_info"
                },
                "param_2": {
                    "1": "new_file_name",
                    "16": "filename",
                    "6": "file_name"
                },
                "param_3": {
                    "1": "param",
                    "13": "flag",
                    "3": "flags",
                    "5": "file_type"
                },
                "param_4": {
                    "1": "filesize",
                    "2": "file_length",
                    "22": "file_size",
                    "3": "new_size"
                },
                "process_string_0010e2f0": {
                    "1": "process_string"
                },
                "uVar3": {
                    "1": "processing_result",
                    "15": "result",
                    "2": "string_result",
                    "3": "string_process_result"
                }
            },
            "called": [
                "filename_cmp",
                "FUN_0010e2f0"
            ],
            "calling": [
                "FUN_00112502"
            ],
            "code": "\nundefined8 process_file_0010edb4(long file_data,undefined8 filename,undefined4 flag,ulong file_size)\n\n{\n  char result;\n  int filename_comparison;\n  undefined8 result;\n  undefined8 additional_info;\n  \n  if (*(long *)(file_data + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(file_data + 0x1f0) < file_size) {\n    *(ulong *)(file_data + 0x1f0) = file_size;\n  }\n  filename_comparison = filename_cmp(filename);\n  if (filename_comparison != 0) {\n    result = process_string(file_data,0x84,0,file_size,filename);\n    if (result == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(file_data + 0x210) = filename;\n  }\n  result = process_string(file_data,0x44,flag,file_size - *(long *)(file_data + 0x200),0,additional_info);\n  return result;\n}\n\n",
            "current_name": "process_file_0010edb4",
            "entrypoint": "0x0010edb4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010edb4": "process_file_0010edb4",
                "cVar1": "result",
                "iVar2": "filename_comparison",
                "in_R10": "additional_info",
                "param_1": "file_data",
                "param_2": "filename",
                "param_3": "flag",
                "param_4": "file_size",
                "process_string_0010e2f0": "process_string",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ee3f": {
            "called": [
                "FUN_00109be3",
                "FUN_00109a32",
                "FUN_001129f4",
                "strtol",
                "FUN_00113d3a",
                "FUN_0010c2d2",
                "FUN_00109ab1",
                "FUN_00113ce0",
                "FUN_0010911f",
                "FUN_0010afd5",
                "strchr",
                "FUN_0010d559",
                "strncmp",
                "xrealloc",
                "FUN_00108fb9",
                "FUN_00113b98",
                "FUN_00109022",
                "FUN_00113df2",
                "concat",
                "xmalloc",
                "FUN_00113e5e",
                "malloc",
                "FUN_00108fe8",
                "FUN_00109a0b",
                "strcpy",
                "strlen",
                "FUN_00113cb9",
                "FUN_00113c43",
                "FUN_00112b6e",
                "FUN_0010d882",
                "FUN_00113da9",
                "strstr",
                "FUN_00113bfa",
                "free",
                "dcgettext",
                "strcmp",
                "strcat",
                "fprintf",
                "FUN_00113b4a",
                "FUN_00113b71",
                "cplus_demangle_init_info",
                "cplus_demangle_mangled_name",
                "strspn",
                "FUN_0010b6ea",
                "sprintf",
                "FUN_0010ee3f",
                "FUN_00113fb0",
                "FUN_0010914e",
                "FUN_00112904",
                "FUN_00113dfe",
                "FUN_0010d21c",
                "FUN_00113e17",
                "FUN_00113d6e",
                "FUN_00108e76"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = parse_function_arguments_00109ab1(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)initialize_data_type_0010c2d2(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = process_file_00109022(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)initialize_memory_00113bfa(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = parse_function_arguments_00109ab1(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)initialize_memory_00113e17();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)process_file_00109022(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)process_file_00109022(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)initialize_memory_00113b98(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              print_error_message_00108fb9(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)get_real_type_00112b6e(lVar4,0,0x3b,1), piVar21 == (int *)0x0)) ||\n               (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)initialize_memory_00113b98(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)initialize_memory_00113cb9(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)initialize_or_get_memory_block_00113d3a(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = parse_numeric_string_00109a32(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = parse_numeric_string_00109a32(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)initialize_memory_00112904(5);\n      }\n      else {\n        pvVar17 = (void *)initialize_memory_00113df2(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)initialize_memory_00112904(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_memory_00113b4a(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = parse_function_arguments_00109ab1(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = find_named_type_0010914e(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = set_memory_value_00113dfe(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        print_error_message_00108fb9(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = parse_numeric_string_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = parse_numeric_string_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)initialize_and_allocate_memory_00113c43(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      parse_numeric_string_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      parse_numeric_string_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = parse_numeric_string_00109a32(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)set_memory_value_00113dfe(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)initialize_memory_00113e17();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            print_error_message_00108fb9(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)copy_and_null_terminate_00109a0b(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = parse_numeric_string_00109a32(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          print_error_message_00108fb9(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)initialize_and_store_data_00113d6e(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_memory_00113ce0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_memory_00113b71(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = parse_function_arguments_00109ab1(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = parse_numeric_string_00109a32(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = parse_numeric_string_00109a32(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)set_memory_value_00113dfe(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)set_memory_value_00113dfe(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)initialize_memory_00113df2(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                print_error_message_00108fb9(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = initialize_data_type_0010c2d2(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                print_warning_00108fe8(pbVar27,uVar15);\n                lVar38 = set_memory_value_00113dfe(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)initialize_memory_00112904(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)set_memory_value_00113dfe(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)initialize_memory_00112904(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)set_memory_value_00113dfe(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)set_memory_value_00113dfe(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)set_memory_value_00113dfe(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)set_memory_value_00113dfe(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)set_memory_value_00113dfe(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          print_warning_00108fe8(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = compare_strings_00113fb0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = compare_strings_00113fb0(pbVar50,\"0777777777777777777777;\"), cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = compare_strings_00113fb0(pbVar50,\"01777777777777777777777;\"), cVar6 == '\\0'))))\n          goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)set_memory_value_00113dfe(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)set_memory_value_00113dfe(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = parse_numeric_string_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = parse_numeric_string_00109a32(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            print_error_message_00108fb9(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  print_warning_00108fe8(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                print_warning_00108fe8(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = parse_numeric_string_00109a32(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)extract_data_001129f4();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        print_warning_00108fe8(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        print_warning_00108fe8(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = parse_numeric_string_00109a32(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                print_error_message_00108fb9(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              print_error_message_00108fb9(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)copy_and_null_terminate_00109a0b(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  print_error_message_00108fb9(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  print_warning_00108fe8(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = parse_numeric_string_00109a32(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = parse_numeric_string_00109a32(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              print_error_message_00108fb9(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)copy_and_null_terminate_00109a0b(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)copy_and_null_terminate_00109a0b(pbVar28);\n            }\n            else {\n              local_150 = (char *)copy_and_null_terminate_00109a0b(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)get_real_type_00112b6e(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)get_real_type_00112b6e(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)copy_and_null_terminate_00109a0b(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              print_warning_00108fe8(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = initialize_data_type_0010c2d2(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)get_real_type_00112b6e(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = compare_strings_00113fb0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = demangle_arglist_0010b6ea(param_1,param_2,\n                                                  *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                  &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    print_error_message_0010911f(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          print_error_message_0010911f(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = parse_and_validate_input_0010d559(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = expand_and_store_data_00109be3(&local_98,pbVar42,(int)local_a0 - (int)pbVar42)\n                                ;\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                print_error_message_0010911f(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = parse_and_validate_input_0010d21c(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = expand_and_store_data_00109be3(&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = extract_number_from_string_00108e76(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = expand_and_store_data_00109be3(&local_98,pbVar28,\n                                                         (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  print_error_message_0010911f(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = process_data_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = process_data_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = process_data_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = process_data_0010d882(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)initialize_memory_00113b98(lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = validate_and_execute_operation_00113e5e(&local_98,&local_a0,pcVar40);\n                        goto LAB_00110d7e;\n                      }\n                      print_error_message_0010911f(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      print_error_message_0010911f(local_a0);\n                    }\n                    else {\n                      cVar6 = validate_and_execute_operation_00113e5e(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = compare_strings_00113fb0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = compare_strings_00113fb0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)initialize_memory_00113b98(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                print_warning_00108fe8(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = parse_numeric_string_00109a32(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = parse_function_arguments_00109ab1(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  print_error_message_00108fb9(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)initialize_memory_00113da9(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)initialize_memory_00112904((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          print_warning_00108fe8(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        print_error_message_00108fb9(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)find_string_in_memory_0010afd5(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)process_file_00109022(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  print_error_message_00108fb9(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "current_name": "FUNC_0010ee3f",
            "entrypoint": "0x0010ee3f",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0011173a": {
            "additional_data": {
                "FUNC_0010ee3f": {
                    "1": "custom_function_0010ee3f"
                },
                "FUN_0011173a": {
                    "1": "parse_debug_records",
                    "2": "process_debug_record",
                    "4": "process_debug_records",
                    "7": "process_debug_info"
                },
                "__ptr": {
                    "1": "ptr_variable",
                    "14": "ptr",
                    "2": "pointer",
                    "3": "temp_ptr",
                    "5": "ptr_var"
                },
                "_stderr": {
                    "1": "standard_error_output"
                },
                "add_source_file_00108f08": {
                    "1": "add_source_file"
                },
                "bVar2": {
                    "1": "byte_var",
                    "17": "byte_var2",
                    "2": "temp_byte"
                },
                "cVar1": {
                    "1": "temp_char",
                    "15": "char_var1",
                    "2": "character_var1"
                },
                "cVar3": {
                    "1": "char_variable_3",
                    "2": "char2",
                    "3": "result",
                    "5": "char_var2",
                    "9": "char_var3"
                },
                "concat": {
                    "3": "concatenate_strings"
                },
                "dVar19": {
                    "1": "double_variable_19",
                    "2": "double1",
                    "9": "double_var"
                },
                "dcgettext": {
                    "1": "gettext"
                },
                "debug_end_block_0010bf20": {
                    "2": "end_debug_block"
                },
                "debug_end_function": {
                    "1": "end_function_debugging"
                },
                "debug_end_function_0010be1a": {
                    "2": "end_debug_function"
                },
                "fprintf": {
                    "1": "print_to_file"
                },
                "free": {
                    "1": "free_memory",
                    "2": "deallocate_memory"
                },
                "iVar5": {
                    "1": "int_variable_5",
                    "2": "int1",
                    "8": "int_var",
                    "9": "int_var5"
                },
                "initialize_debug_info_0010bbd3": {
                    "1": "initialize_debug_info"
                },
                "initialize_debug_name_type_0010c218": {
                    "2": "initialize_debug_name_type"
                },
                "initialize_memory_00112996": {
                    "2": "initialize_memory"
                },
                "initialize_or_get_memory_block_00113d3a": {
                    "2": "initialize_or_get_memory_block"
                },
                "lVar10": {
                    "1": "long_variable_10",
                    "2": "long_variable1",
                    "3": "long_var2",
                    "5": "long_var1",
                    "9": "long_var10"
                },
                "lVar11": {
                    "1": "long_2",
                    "2": "long_var5",
                    "5": "long_var2",
                    "9": "long_var11"
                },
                "lVar12": {
                    "1": "long_var_3",
                    "2": "temp_long3",
                    "3": "long_var4",
                    "5": "long_var3",
                    "9": "long_var12"
                },
                "lVar13": {
                    "1": "long_variable_13",
                    "4": "long_var13"
                },
                "lVar15": {
                    "1": "long_var4"
                },
                "lVar16": {
                    "1": "new_long_variable2"
                },
                "lVar19": {
                    "1": "long_var6"
                },
                "local_40": {
                    "1": "temp_local_long_ptr_ptr",
                    "2": "long_ptr_array",
                    "3": "local_ptr_array",
                    "4": "local_long_ptr_ptr"
                },
                "local_40 ": {
                    "1": "local_ptr_array"
                },
                "local_48": {
                    "1": "char_ptr_3",
                    "2": "local_char_var48",
                    "3": "local_char_ptr"
                },
                "malloc": {
                    "1": "allocate_memory"
                },
                "param_1": {
                    "1": "param_name",
                    "10": "param1",
                    "2": "function_id",
                    "7": "param"
                },
                "param_2": {
                    "1": "param_b",
                    "12": "debug_info",
                    "7": "param2"
                },
                "param_3": {
                    "1": "param_c",
                    "13": "record_type",
                    "2": "code",
                    "3": "opcode",
                    "7": "param3"
                },
                "param_4": {
                    "1": "param_d",
                    "2": "block_count",
                    "7": "param4"
                },
                "param_5": {
                    "1": "value_param",
                    "11": "address",
                    "4": "record_offset",
                    "7": "param5"
                },
                "param_6": {
                    "1": "source_file",
                    "2": "record_name",
                    "3": "file_name",
                    "4": "record_data",
                    "5": "name",
                    "6": "param6"
                },
                "pcVar16": {
                    "1": "current_char",
                    "2": "ptr_char_var16",
                    "4": "char_ptr2",
                    "5": "ptr_var16"
                },
                "pcVar8": {
                    "1": "character_pointer",
                    "2": "char_ptr_1",
                    "4": "char_ptr_var",
                    "5": "ptr_var8"
                },
                "plVar7": {
                    "1": "pointer_var2",
                    "2": "temp_long_ptr",
                    "5": "long_var",
                    "6": "ptr_var7"
                },
                "pplVar13": {
                    "1": "pointer_to_pointer_to_long_variable",
                    "2": "long_ptr_ptr",
                    "4": "ptr_ptr_var13"
                },
                "pplVar18": {
                    "1": "temp_long_ptr_ptr2",
                    "3": "ptr_ptr_var18"
                },
                "print_error_message": {
                    "1": "print_error_message"
                },
                "print_error_message_00108fb9": {
                    "2": "print_error_message"
                },
                "print_warning": {
                    "1": "print_warning_message"
                },
                "print_warning_00108fe8": {
                    "1": "print_warning_message"
                },
                "process_debug_tag_0010c6be": {
                    "1": "process_debug_tag"
                },
                "process_records_0010c1c6": {
                    "2": "process_records"
                },
                "puVar6": {
                    "1": "ptr2",
                    "2": "ptr_var2",
                    "8": "ptr_var6"
                },
                "record_debug_line_0010bf86": {
                    "1": "record_debug_line"
                },
                "record_parameter": {
                    "1": "record_function_parameter"
                },
                "record_parameter_0010bd62": {
                    "1": "record_parameter"
                },
                "record_variable": {
                    "1": "record_variable_declaration"
                },
                "record_variable_0010c05d": {
                    "2": "record_variable"
                },
                "start_debug_block_0010be88": {
                    "2": "start_debug_block"
                },
                "strchr": {
                    "1": "find_character"
                },
                "strcmp": {
                    "1": "compare_string",
                    "2": "compare_strings"
                },
                "strcpy": {
                    "2": "copy_string"
                },
                "strlen": {
                    "1": "calculate_length",
                    "2": "get_string_length"
                },
                "strtod": {
                    "1": "convert_string_to_double"
                },
                "strtol": {
                    "1": "convert_string_to_long"
                },
                "uVar14": {
                    "1": "temp_ulong_var14",
                    "2": "ulong1",
                    "4": "ulong_var",
                    "5": "ulong_var1",
                    "9": "ulong_var14"
                },
                "uVar15": {
                    "1": "ulong_var_2",
                    "2": "ulong2",
                    "9": "ulong_var2"
                },
                "uVar16": {
                    "1": "ulong_var3"
                },
                "uVar17": {
                    "1": "uint_var1",
                    "2": "uint1",
                    "9": "uint_var"
                },
                "uVar4": {
                    "1": "temp_var",
                    "10": "undefined_var4",
                    "2": "undefined1",
                    "8": "undefined_var"
                },
                "uVar9": {
                    "1": "undefined_variable_9",
                    "10": "undefined_var9",
                    "2": "undefined2",
                    "3": "undefined8_var",
                    "5": "undefined_var2"
                },
                "update_record": {
                    "1": "update_debug_record"
                },
                "update_record_0010c139": {
                    "2": "update_record"
                },
                "xmalloc": {
                    "1": "allocate_memory_with_check",
                    "2": "allocate_memory"
                },
                "xstrdup": {
                    "1": "duplicate_string_with_check",
                    "2": "duplicate_string"
                }
            },
            "called": [
                "FUN_0010bd62",
                "FUN_0010bf20",
                "dcgettext",
                "free",
                "strcmp",
                "strtol",
                "FUN_00113d3a",
                "fprintf",
                "FUN_00113ce0",
                "FUN_0010bbd3",
                "strchr",
                "FUN_0010c6be",
                "xrealloc",
                "FUN_00108fb9",
                "FUN_0010ee3f",
                "FUN_0010be88",
                "concat",
                "FUN_0010c1c6",
                "xmalloc",
                "FUN_0010c05d",
                "xstrdup",
                "FUN_00108fe8",
                "FUN_0010be1a",
                "FUN_00109a0b",
                "strtod",
                "FUN_0010bc80",
                "strlen",
                "FUN_0010bf86",
                "FUN_0010c218",
                "FUN_00108f08",
                "FUN_0010c139",
                "FUN_00112996"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined process_debug_info_0011173a(undefined8 param1,long *debug_info,int record_type,int param4,ulong address,\n                      char *param6)\n\n{\n  char char_var1;\n  byte byte_var2;\n  void *ptr;\n  char char_var3;\n  undefined undefined_var4;\n  int int_var5;\n  undefined8 *ptr_var6;\n  long *ptr_var7;\n  char *ptr_var8;\n  undefined8 undefined_var9;\n  long long_var10;\n  long long_var11;\n  long long_var12;\n  long **ptr_ptr_var13;\n  ulong ulong_var14;\n  ulong ulong_var15;\n  char *ptr_var16;\n  uint uint_var17;\n  long **ptr_ptr_var18;\n  double double_var19;\n  char *local_ptr;\n  long **local_long_ptr_ptr [2];\n  \n  if (debug_info[4] != 0) {\n    if (((record_type == 100) && (*param6 != '\\0')) && (debug_info[5] == address)) goto LAB_00111a06;\n    char_var3 = initialize_debug_info(param1);\n    if (char_var3 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)debug_info + 0x44) = 0;\n    *(undefined4 *)(debug_info + 8) = 0;\n    debug_info[9] = debug_info[4];\n    if (*(char *)(debug_info + 1) == '\\0') {\n      debug_info[6] = debug_info[5];\n    }\n    *(undefined4 *)(debug_info + 0x10) = 1;\n    ptr_var6 = (undefined8 *)xmalloc(8);\n    debug_info[0x11] = (long)ptr_var6;\n    *ptr_var6 = 0;\n    debug_info[4] = 0;\n  }\n  strlen(param6);\n  if (record_type == 0x84) {\nLAB_00111ab7:\n    undefined_var4 = add_source_file(param1,param6);\n    return undefined_var4;\n  }\n  if (record_type < 0x85) {\n    if (record_type == 0x3c) {\n      int_var5 = strcmp(param6,\"gcc2_compiled.\");\n      if (int_var5 == 0) {\n        *(undefined4 *)(debug_info + 8) = 2;\n        return 1;\n      }\n      int_var5 = strcmp(param6,\"gcc_compiled.\");\n      if (int_var5 == 0) {\n        *(undefined4 *)(debug_info + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)debug_info + 0x44) = 1;\n      return 1;\n    }\n    if (record_type < 0x3d) {\n      if (record_type == 0x24) {\n        if (*param6 == '\\0') {\n          if (*(char *)(debug_info + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(debug_info + 1) != '\\0') {\n            address = address + debug_info[7];\n          }\n          char_var3 = process_records(param1,debug_info);\n          if (char_var3 != '\\0') {\n            char_var3 = end_debug_function(param1,address);\n            if (char_var3 != '\\0') {\n              *(undefined *)(debug_info + 0xc) = 0;\n              debug_info[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(debug_info + 0xc) != '\\0') &&\n           ((address < (ulong)debug_info[0xd] || (debug_info[0xd] == 0xffffffffffffffff)))) {\n          debug_info[0xd] = address;\n        }\n      }\n      else if (record_type < 0x25) {\n        if (record_type == 0xc) {\n          return 1;\n        }\n        if (record_type - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (record_type == 0x2a) {\n          return 1;\n        }\n        if (record_type == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (record_type == 100) {\nLAB_00111a06:\n        if (*(char *)(debug_info + 0xc) != '\\0') {\n          ulong_var14 = address;\n          if (((*param6 != '\\0') && (ulong_var15 = debug_info[0xd], ulong_var15 != 0xffffffffffffffff)) &&\n             (ulong_var14 = ulong_var15, address < ulong_var15)) {\n            ulong_var14 = address;\n          }\n          char_var3 = process_records(param1,debug_info);\n          if (char_var3 == '\\0') {\n            return 0;\n          }\n          char_var3 = end_debug_function(param1,ulong_var14);\n          if (char_var3 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(debug_info + 0xc) = 0;\n          debug_info[0xd] = -1;\n        }\n        if (*param6 == '\\0') {\n          return 1;\n        }\n        ptr = (void *)debug_info[4];\n        if (ptr == (void *)0x0) {\n          long_var12 = xstrdup(param6);\n          debug_info[4] = long_var12;\n        }\n        else {\n          if (*param6 == '/') {\n            long_var12 = xstrdup(param6);\n          }\n          else {\n            long_var12 = concatenate_strings(ptr,param6,0);\n          }\n          debug_info[4] = long_var12;\n          free(ptr);\n        }\n        debug_info[5] = address;\n        return 1;\n      }\n      if (record_type < 0x65) {\n        if (record_type == 0x44) {\n          long_var12 = 0;\n          if (*(char *)(debug_info + 0xc) != '\\0') {\n            long_var12 = debug_info[7];\n          }\n          undefined_var4 = record_debug_line(param1,(long)param4,long_var12 + address);\n          return undefined_var4;\n        }\n        if (record_type == 0x62) {\n          return 1;\n        }\n      }\n      else if (record_type == 0x82) {\n        ptr_var7 = (long *)malloc();\n        int_var5 = *(int *)(debug_info + 0x10);\n        long_var10 = debug_info[10];\n        long_var11 = debug_info[0xb];\n        ptr_var7[5] = 0;\n        long_var12 = debug_info[0x11];\n        *(int *)(ptr_var7 + 4) = int_var5;\n        uint_var17 = int_var5 + 1;\n        *(uint *)(debug_info + 0x10) = uint_var17;\n        *ptr_var7 = long_var11;\n        ptr_var7[1] = long_var10;\n        ptr_var7[2] = (long)param6;\n        ptr_var7[3] = address;\n        debug_info[10] = (long)ptr_var7;\n        debug_info[0xb] = (long)ptr_var7;\n        long_var12 = xrealloc(long_var12,(ulong)uint_var17 << 3);\n        uint_var17 = *(uint *)(ptr_var7 + 4);\n        debug_info[0x11] = long_var12;\n        *(undefined8 *)(long_var12 + (ulong)uint_var17 * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    ptr_var8 = strchr(param6,0x3a);\n    if ((ptr_var8 != (char *)0x0) && ((ptr_var8[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(debug_info + 0xc) != '\\0') {\n        ulong_var14 = debug_info[0xd];\n        ulong_var15 = address;\n        if ((ulong_var14 != 0xffffffffffffffff) && (ulong_var15 = ulong_var14, address < ulong_var14)) {\n          ulong_var15 = address;\n        }\n        char_var3 = process_records(param1,debug_info);\n        if (char_var3 == '\\0') {\n          return 0;\n        }\n        char_var3 = end_debug_function(param1,ulong_var15);\n        if (char_var3 == '\\0') {\n          return 0;\n        }\n        debug_info[0xd] = -1;\n      }\n      if (*(char *)(debug_info + 1) != '\\0') {\n        debug_info[7] = address;\n      }\n      *(undefined *)(debug_info + 0xc) = 1;\n    }\n    local_ptr = strchr(param6,0x3a);\n    if (local_ptr == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (local_ptr[1] == ':') goto code_r0x00111cc7;\n    if (*param6 == '$') {\n      char_var3 = param6[1];\n      ptr_var16 = \"eh_throw\";\n      if (char_var3 != 'e') {\n        if (char_var3 < 'f') {\n          if ((char_var3 != 'X') && (char_var3 != '_')) {\nLAB_00111d1a:\n            undefined_var9 = dcgettext(0,\"unknown C++ encoded name\",5);\n            print_warning(param6,undefined_var9);\n          }\n        }\n        else {\n          ptr_var16 = \"this\";\n          if (char_var3 == 't') goto LAB_00111d62;\n          if (char_var3 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      ptr_var16 = (char *)0x0;\n      if ((param6 != local_ptr) && ((*param6 != ' ' || (local_ptr != param6 + 1)))) {\n        ptr_var16 = (char *)copy_and_null_terminate_00109a0b(param6,(int)local_ptr - (int)param6);\n      }\n    }\nLAB_00111d62:\n    byte_var2 = local_ptr[1];\n    ptr_var8 = local_ptr + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)byte_var2 * 2) >> 2) & 1 |\n        (byte_var2 == 0x2d || byte_var2 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      local_ptr = ptr_var8;\n      long_var12 = FUNC_0010ee3f(param1,debug_info,0,&local_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 4;\n      goto LAB_001123e8;\n    }\n    if (byte_var2 == 0) goto switchD_00111de5_caseD_44;\n    ptr_var8 = local_ptr + 2;\n    char_var3 = local_ptr[1];\n    switch(char_var3) {\n    case 'C':\n      local_ptr = ptr_var8;\n      long_var12 = FUNC_0010ee3f(param1,debug_info,0,&local_ptr,0);\n      ptr_var8 = \"debug_record_label: not implemented\";\n      if (long_var12 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      local_ptr = ptr_var8;\n      long_var12 = FUNC_0010ee3f(param1,debug_info,0,&local_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      char_var3 = debug_record_function_0010bc80(param1,ptr_var16,long_var12,char_var3 == 'F',address);\n      if (char_var3 != '\\0') {\n        do {\n          if (*local_ptr != ';') {\n            return 1;\n          }\n          local_ptr = local_ptr + 1;\n          long_var12 = FUNC_0010ee3f(param1,debug_info,0,&local_ptr,0);\n        } while (long_var12 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      local_ptr = ptr_var8;\n      long_var12 = FUNC_0010ee3f(param1,debug_info,0,&local_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      if (ptr_var16 == (char *)0x0) goto LAB_0011208f;\n      long_var10 = debug_info[3];\n      ptr_var7 = (long *)debug_info[2];\n      char_var3 = *(char *)(*(long *)(*debug_info + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (record_type == 0x24) {\n        local_ptr = ptr_var8;\n        do {\n          if (*local_ptr != ';') {\n            return 1;\n          }\n          local_ptr = local_ptr + 1;\n          long_var12 = FUNC_0010ee3f(param1,debug_info,0,&local_ptr,0);\n        } while (long_var12 != 0);\n        return 0;\n      }\n    case 'R':\n      local_ptr = ptr_var8;\n      long_var12 = FUNC_0010ee3f(param1,debug_info,0,&local_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 2;\n      break;\n    case 'S':\n      local_ptr = ptr_var8;\n      long_var12 = FUNC_0010ee3f(param1,debug_info,0,&local_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      char_var3 = local_ptr[2];\n      if (char_var3 == 't') {\n        ptr_var8 = local_ptr + 3;\n      }\n      local_ptr = ptr_var8;\n      long_var12 = FUNC_0010ee3f(param1,debug_info,ptr_var16,&local_ptr,local_long_ptr_ptr);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      if (ptr_var16 == (char *)0x0) {\n        return 1;\n      }\n      char_var1 = *(char *)(debug_info + 0x35);\n      ptr_var7 = (long *)process_debug_tag(param1,ptr_var16,long_var12);\n      if (ptr_var7 == (long *)0x0) {\n        return 0;\n      }\n      if (local_long_ptr_ptr[0] != (long **)0x0) {\n        *local_long_ptr_ptr[0] = ptr_var7;\n      }\n      if (char_var1 != '\\0') goto LAB_001122f0;\n      ptr_ptr_var13 = (long **)(debug_info + 0x34);\n      ptr_ptr_var18 = (long **)debug_info[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      local_ptr = ptr_var8;\n      long_var12 = FUNC_0010ee3f(param1,debug_info,0,&local_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      ptr_var8 = local_ptr + 3;\n      if (((local_ptr[2] != '\\0') && (ptr_var8 = local_ptr + 4, local_ptr[3] == 'n')) &&\n         (ptr_var8 = local_ptr + 5, ptr_var16 = local_ptr + 4, local_ptr = ptr_var8, *ptr_var16 == '0')) {\n        for (; ptr_var8 = local_ptr, *local_ptr != '\\0'; local_ptr = local_ptr + 1) {\n          if (*local_ptr == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      local_ptr = ptr_var8;\n      long_var12 = FUNC_0010ee3f(param1,debug_info,0,&local_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 4;\n      break;\n    case 'c':\n      if (local_ptr[2] == '=') {\n        ptr_var8 = local_ptr + 4;\n        char_var3 = local_ptr[3];\n        local_ptr = ptr_var8;\n        if (char_var3 == 'i') {\n          long_var12 = strtol(ptr_var8,(char **)0x0,10);\n          if (ptr_var16 == (char *)0x0) {\n            return 0;\n          }\n          long_var10 = initialize_memory(param1,ptr_var16,4);\n          if (long_var10 != 0) {\n            *(long *)(long_var10 + 0x20) = (long)(int)long_var12;\n            return 1;\n          }\n          return 0;\n        }\n        if (char_var3 == 'r') {\n          double_var19 = strtod(ptr_var8,(char **)0x0);\n          if (ptr_var16 == (char *)0x0) {\n            return 0;\n          }\n          long_var12 = initialize_memory(param1,ptr_var16,5);\n          if (long_var12 != 0) {\n            *(double *)(long_var12 + 0x20) = double_var19;\n            return 1;\n          }\n          return 0;\n        }\n        if (char_var3 == 'e') {\n          long_var12 = FUNC_0010ee3f(param1,debug_info,0,&local_ptr,0);\n          if (long_var12 == 0) {\n            return 0;\n          }\n          ptr_var8 = local_ptr;\n          if (*local_ptr == ',') {\n            long_var10 = strtol(local_ptr,(char **)0x0,10);\n            if (ptr_var16 == (char *)0x0) {\n              return 0;\n            }\n            long_var11 = initialize_memory(param1,ptr_var16,6);\n            if (long_var11 != 0) {\n              ptr_var7 = (long *)allocate_memory(0x10);\n              *ptr_var7 = long_var12;\n              ptr_var7[1] = (long)(int)long_var10;\n              *(long **)(long_var11 + 0x20) = ptr_var7;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (local_ptr[2] == 'F') {\n        local_ptr = local_ptr + 3;\n        long_var12 = FUNC_0010ee3f(param1,debug_info,0,&local_ptr,0);\n        if (long_var12 == 0) {\n          return 0;\n        }\n        undefined_var9 = initialize_memory_00113ce0(long_var12,0,0);\n        long_var12 = initialize_or_get_memory_block(undefined_var9);\n      }\n      else {\n        local_ptr = ptr_var8;\n        long_var12 = FUNC_0010ee3f(param1,debug_info,0,&local_ptr,0);\n      }\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 1;\n      break;\n    case 'r':\n      local_ptr = ptr_var8;\n      long_var12 = FUNC_0010ee3f(param1,debug_info,0,&local_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 5;\nLAB_001123e8:\n      char_var3 = update_record(param1,debug_info,ptr_var16,long_var12,undefined_var9,address);\n      goto joined_r0x001123f8;\n    case 't':\n      local_ptr = ptr_var8;\n      long_var12 = FUNC_0010ee3f(param1,debug_info,ptr_var16,&local_ptr,local_long_ptr_ptr);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      if (ptr_var16 == (char *)0x0) {\n        return 1;\n      }\n      ptr_var7 = (long *)initialize_debug_name_type(param1,ptr_var16,long_var12);\n      if (ptr_var7 == (long *)0x0) {\n        return 0;\n      }\n      if (local_long_ptr_ptr[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_long_ptr_ptr[0] = ptr_var7;\n      return 1;\n    case 'v':\n      local_ptr = ptr_var8;\n      long_var12 = FUNC_0010ee3f(param1,debug_info,0,&local_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 3;\n    }\n    char_var3 = record_parameter(param1,ptr_var16,long_var12,undefined_var9,address);\n    goto joined_r0x001123f8;\n  }\n  if (record_type == 0xe0) {\n    if ((*(char *)((long)debug_info + 0x44) != '\\0') && (param4 == 1)) {\n      return 1;\n    }\n    char_var3 = process_records(param1,debug_info);\n    if (char_var3 == '\\0') {\n      return 0;\n    }\n    char_var3 = end_debug_block(param1,debug_info[7] + debug_info[6] + address);\n    if (char_var3 == '\\0') {\n      return 0;\n    }\n    debug_info = debug_info + 0xe;\n    *(int *)debug_info = *(int *)debug_info + -1;\n    ptr_var8 = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)debug_info) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < record_type) {\n      if (record_type == 0xe2) {\n        ptr_var8 = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        ptr_var8 = \"debug_end_common_block: not implemented\";\n        if (record_type != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      undefined_var9 = dcgettext(0,ptr_var8,5);\n      fprintf(standard_error_output,\"%s\\n\",undefined_var9);\n      return 0;\n    }\n    if (record_type != 0xc0) {\n      if (record_type == 0xc2) {\n        int_var5 = *(int *)(debug_info + 0x10);\n        *(uint *)(debug_info + 0x10) = int_var5 + 1U;\n        long_var12 = xrealloc(debug_info[0x11],(ulong)(int_var5 + 1U) << 3);\n        ptr_var6 = (undefined8 *)debug_info[0xb];\n        debug_info[0x11] = long_var12;\n        while( true ) {\n          if (ptr_var6 == (undefined8 *)0x0) {\n            undefined_var9 = dcgettext(0,\"Undefined N_EXCL\",5);\n            print_warning(param6,undefined_var9);\n            *(undefined8 *)(debug_info[0x11] + (ulong)(*(int *)(debug_info + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((address == ptr_var6[3]) && (int_var5 = strcmp((char *)ptr_var6[2],param6), int_var5 == 0))\n          break;\n          ptr_var6 = (undefined8 *)*ptr_var6;\n        }\n        *(undefined8 *)(long_var12 + (ulong)(*(int *)(debug_info + 0x10) - 1) * 8) = ptr_var6[5];\n        return 1;\n      }\n      if (record_type == 0xa2) {\n        long_var12 = debug_info[10];\n        if (long_var12 != 0) {\n          long_var10 = *(long *)(long_var12 + 8);\n          uint_var17 = *(uint *)(long_var12 + 0x20);\n          debug_info[10] = long_var10;\n          if ((uint_var17 < *(uint *)(debug_info + 0x10)) &&\n             (*(undefined8 *)(long_var12 + 0x28) = *(undefined8 *)(debug_info[0x11] + (ulong)uint_var17 * 8),\n             long_var10 != 0)) {\n            param6 = *(char **)(long_var10 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        param6 = (char *)debug_info[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)debug_info + 0x44) != '\\0') && (param4 == 1)) {\n      return 1;\n    }\n    if (*(char *)(debug_info + 0xc) != '\\0') {\n      char_var3 = start_debug_block(param1,debug_info[7] + debug_info[6] + address);\n      if (char_var3 == '\\0') {\n        return 0;\n      }\n      char_var3 = process_records(param1,debug_info);\n      if (char_var3 != '\\0') {\n        *(int *)(debug_info + 0xe) = *(int *)(debug_info + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    ptr_var8 = \"N_LBRAC not within function\\n\";\n  }\n  ptr_var8 = (char *)dcgettext(0,ptr_var8,5);\n  fprintf(standard_error_output,ptr_var8);\n  return 0;\ncode_r0x00111cc7:\n  local_ptr = local_ptr + 2;\n  local_ptr = strchr(local_ptr,0x3a);\n  if (local_ptr == (char *)0x0) {\n    ptr_var8 = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    local_ptr = ptr_var8;\n    print_error_message(param6);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (ptr_ptr_var18 == (long **)0x0) {\nLAB_001122f0:\n    if (char_var3 != 't') {\n      return 1;\n    }\n    ptr_var7 = (long *)initialize_debug_name_type(param1,ptr_var16,ptr_var7);\n    if (ptr_var7 != (long *)0x0) {\n      if (local_long_ptr_ptr[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_long_ptr_ptr[0] = ptr_var7;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)ptr_ptr_var18[1] == *ptr_var16) &&\n     (int_var5 = strcmp((char *)ptr_ptr_var18[1],ptr_var16), int_var5 == 0)) {\n    ptr_ptr_var18[3] = ptr_var7;\n    *ptr_ptr_var13 = *ptr_ptr_var18;\n    goto LAB_001122f0;\n  }\n  ptr_ptr_var13 = ptr_ptr_var18;\n  ptr_ptr_var18 = (long **)*ptr_ptr_var18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (long_var10 < 1) {\nLAB_0011208f:\n    undefined_var9 = 1;\nLAB_001121c4:\n    char_var3 = record_variable(param1,ptr_var16,long_var12,undefined_var9,address);\njoined_r0x001123f8:\n    if (char_var3 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  ptr_var8 = *(char **)(*ptr_var7 + 8);\n  if ((char_var3 != '\\0') && (char_var3 == *ptr_var8)) {\n    ptr_var8 = ptr_var8 + 1;\n  }\n  if ((*ptr_var8 == *ptr_var16) && (int_var5 = strcmp(ptr_var8,ptr_var16), int_var5 == 0)) {\n    address = *(long *)(*ptr_var7 + 0x10) + *(long *)(*(long *)(*ptr_var7 + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  long_var10 = long_var10 + -1;\n  ptr_var7 = ptr_var7 + 1;\n  goto LAB_00112045;\n}\n\n",
            "current_name": "process_debug_info_0011173a",
            "entrypoint": "0x0011173a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011173a": "process_debug_info_0011173a",
                "__ptr": "ptr",
                "_stderr": "standard_error_output",
                "add_source_file_00108f08": "add_source_file",
                "bVar2": "byte_var2",
                "cVar1": "char_var1",
                "cVar3": "char_var3",
                "concat": "concatenate_strings",
                "dVar19": "double_var19",
                "dcgettext": "get_translated_string",
                "debug_end_block_0010bf20": "end_debug_block",
                "debug_end_function": "end_function_debugging",
                "debug_end_function_0010be1a": "end_debug_function",
                "fprintf": "print_to_file",
                "free": "deallocate_memory",
                "iVar5": "int_var5",
                "initialize_debug_info_0010bbd3": "initialize_debug_info",
                "initialize_debug_name_type_0010c218": "initialize_debug_name_type",
                "initialize_memory_00112996": "initialize_memory",
                "initialize_or_get_memory_block_00113d3a": "initialize_or_get_memory_block",
                "lVar10": "long_var10",
                "lVar11": "long_var11",
                "lVar12": "long_var12",
                "lVar13": "long_var13",
                "local_40": "local_long_ptr_ptr",
                "local_48": "local_ptr",
                "malloc": "allocate_memory",
                "param_1": "param1",
                "param_2": "debug_info",
                "param_3": "record_type",
                "param_4": "param4",
                "param_5": "address",
                "param_6": "param6",
                "pcVar16": "ptr_var16",
                "pcVar8": "ptr_var8",
                "plVar7": "ptr_var7",
                "pplVar13": "ptr_ptr_var13",
                "pplVar18": "ptr_ptr_var18",
                "print_error_message_00108fb9": "print_error_message",
                "print_warning": "print_warning_message",
                "print_warning_00108fe8": "print_warning",
                "process_debug_tag_0010c6be": "process_debug_tag",
                "process_records_0010c1c6": "process_records",
                "puVar6": "ptr_var6",
                "record_debug_line_0010bf86": "record_debug_line",
                "record_parameter": "record_function_parameter",
                "record_parameter_0010bd62": "record_parameter",
                "record_variable": "record_variable_declaration",
                "record_variable_0010c05d": "record_variable",
                "start_debug_block_0010be88": "start_debug_block",
                "strchr": "find_character_in_string",
                "strcmp": "compare_strings",
                "strlen": "get_string_length",
                "strtod": "convert_string_to_double",
                "strtol": "convert_string_to_long",
                "uVar14": "ulong_var14",
                "uVar15": "ulong_var15",
                "uVar17": "uint_var17",
                "uVar4": "undefined_var4",
                "uVar9": "undefined_var9",
                "update_record": "update_debug_record",
                "update_record_0010c139": "update_record",
                "xmalloc": "allocate_memory",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112502": {
            "additional_data": {
                "FUN_00112502": {
                    "1": "check_files_for_errors",
                    "10": "process_files",
                    "3": "check_file_access",
                    "4": "process_file",
                    "5": "process_and_check_files"
                },
                "cVar4": {
                    "1": "result_code",
                    "19": "result",
                    "2": "file_status",
                    "3": "file_result"
                },
                "param_1": {
                    "1": "file_struct",
                    "15": "file_data",
                    "3": "file_manager",
                    "5": "file_info"
                },
                "param_2": {
                    "1": "file_size",
                    "11": "file_handle",
                    "2": "file_context",
                    "3": "file_pointer",
                    "5": "file_data"
                },
                "param_3": {
                    "1": "max_size",
                    "27": "file_size"
                },
                "puVar2": {
                    "1": "resource_array",
                    "14": "file_array",
                    "2": "file_list"
                },
                "uVar1": {
                    "1": "file_count",
                    "18": "index",
                    "4": "counter"
                },
                "uVar3": {
                    "1": "temp_variable",
                    "11": "current_file",
                    "2": "next_file_ptr",
                    "3": "next_file"
                }
            },
            "called": [
                "FUN_0010edb4"
            ],
            "calling": [
                "FUN_00113a4d",
                "FUN_001135a5",
                "FUN_0011378f"
            ],
            "code": "\nundefined process_files_00112502(long file_data,undefined8 file_handle,ulong file_size)\n\n{\n  uint index;\n  undefined8 *file_array;\n  undefined8 current_file;\n  char result;\n  \n  do {\n    file_array = *(undefined8 **)(file_data + 0x40);\n    if (file_array == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((index = *(uint *)(file_data + 0x48), index < 10 && (file_array[(ulong)index + 2] != -1))) {\n      if (file_size <= (ulong)file_array[(ulong)index + 0xc]) {\n        return 1;\n      }\n      result = process_file_0010edb4(file_handle,*(undefined8 *)(file_array[1] + 8));\n      if (result == '\\0') {\n        return 0;\n      }\n      *(int *)(file_data + 0x48) = *(int *)(file_data + 0x48) + 1;\n    }\n    current_file = *file_array;\n    *(undefined4 *)(file_data + 0x48) = 0;\n    *(undefined8 *)(file_data + 0x40) = current_file;\n  } while( true );\n}\n\n",
            "current_name": "process_files_00112502",
            "entrypoint": "0x00112502",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112502": "process_files_00112502",
                "cVar4": "result",
                "param_1": "file_data",
                "param_2": "file_handle",
                "param_3": "file_size",
                "puVar2": "file_array",
                "uVar1": "index",
                "uVar3": "current_file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011256b": {
            "additional_data": {
                "FAT_PRINT": {
                    "1": "print_matching_formats"
                },
                "FUN_0011256b": {
                    "30": "print_matching_formats"
                },
                "PTR_param_1": {
                    "1": "formatted_values"
                },
                "__format": {
                    "1": "translated_format",
                    "17": "format_string",
                    "5": "format_message"
                },
                "_stderr": {
                    "1": "error_output",
                    "3": "stderr",
                    "4": "standard_error"
                },
                "_stdout": {
                    "3": "stdout",
                    "4": "standard_output"
                },
                "dcgettext": {
                    "1": "get_translated_string"
                },
                "fflush": {
                    "1": "flush_standard_output"
                },
                "fprintf": {
                    "1": "print_formatted"
                },
                "fputc": {
                    "1": "put_character"
                },
                "free": {
                    "1": "release_memory"
                },
                "param_1": {
                    "1": "format_array",
                    "15": "formats",
                    "2": "matching_formats",
                    "4": "format_list",
                    "8": "format_strings"
                },
                "plVar2": {
                    "1": "format_pointer",
                    "19": "current_format",
                    "2": "format_ptr",
                    "3": "current_format_string"
                },
                "uVar1": {
                    "1": "current_locale",
                    "11": "default_format",
                    "3": "format_string"
                }
            },
            "called": [
                "fputc",
                "fflush",
                "dcgettext",
                "free",
                "fprintf"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\n\n\nvoid print_matching_formats_0011256b(long *formats)\n\n{\n  undefined8 default_format;\n  char *format_string;\n  long *current_format;\n  \n  fflush(standard_output);\n  default_format = DAT_00127600;\n  format_string = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(standard_error,format_string,default_format);\n  for (current_format = formats; *current_format != 0; current_format = current_format + 1) {\n    fprintf(standard_error,\" %s\");\n  }\n  free(formats);\n  fputc(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_matching_formats_0011256b",
            "entrypoint": "0x0011256b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "__format": "format_string",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "dcgettext": "get_translated_string",
                "fflush": "flush_standard_output",
                "fprintf": "print_formatted",
                "fputc": "put_character",
                "free": "release_memory",
                "param_1": "formats",
                "plVar2": "current_format",
                "uVar1": "default_format"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001125fa": {
            "additional_data": {
                "*param_1": {
                    "1": "input_params"
                },
                "DAT_00127a50": {
                    "1": "formatted_string"
                },
                "DAT_00127a58": {
                    "1": "max_string_length"
                },
                "FUN_001125fa": {
                    "1": "get_formatted_file_name",
                    "2": "get_modified_file_name",
                    "3": "get_concatenated_string",
                    "4": "get_modified_filename"
                },
                "__assert_fail": {
                    "2": "assert_failure"
                },
                "__s": {
                    "1": "original_string",
                    "2": "final_string",
                    "3": "output_string",
                    "4": "original_filename",
                    "5": "filename"
                },
                "param_1": {
                    "1": "param",
                    "3": "args",
                    "4": "input_strings",
                    "6": "input_params",
                    "9": "arguments"
                },
                "ppcVar2": {
                    "1": "second_argument",
                    "2": "archive_path",
                    "6": "archive_filename"
                },
                "sVar3": {
                    "1": "file1_length",
                    "2": "archive_path_length",
                    "3": "length1"
                },
                "sVar4": {
                    "1": "input_length",
                    "2": "original_filename_length",
                    "3": "length2",
                    "4": "input_string_length",
                    "5": "filename_length"
                },
                "uVar1": {
                    "1": "total_string_length",
                    "10": "total_length",
                    "2": "modified_string_length"
                }
            },
            "called": [
                "strlen",
                "xmalloc",
                "free",
                "sprintf",
                "__assert_fail"
            ],
            "calling": [
                "FUN_00114e50",
                "FUN_001126c0",
                "FUN_00107976",
                "FUN_001152b6",
                "FUN_00105828",
                "FUN_00104ea2"
            ],
            "code": "\nchar * get_formatted_string_001125fa(char **arguments)\n\n{\n  ulong total_length;\n  char **archive_filename;\n  size_t length1;\n  size_t filename_length;\n  char *input_string;\n  \n  if (arguments == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  archive_filename = (char **)arguments[0x1d];\n  input_string = *arguments;\n  if ((archive_filename != (char **)0x0) && ((*(byte *)((long)archive_filename + 0x49) & 0x10) == 0)) {\n    length1 = strlen(*archive_filename);\n    filename_length = strlen(input_string);\n    total_length = length1 + 3 + filename_length;\n    if (DAT_00127a58 < total_length) {\n      if (DAT_00127a58 != 0) {\n        free(DAT_00127a50);\n      }\n      DAT_00127a58 = (total_length >> 1) + total_length;\n      DAT_00127a50 = (char *)xmalloc();\n    }\n    sprintf(DAT_00127a50,\"%s(%s)\",*(undefined8 *)arguments[0x1d],*arguments);\n    input_string = DAT_00127a50;\n  }\n  return input_string;\n}\n\n",
            "current_name": "get_formatted_string_001125fa",
            "entrypoint": "0x001125fa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001125fa": "get_formatted_string_001125fa",
                "__assert_fail": "assert_failure",
                "__s": "input_string",
                "param_1": "arguments",
                "ppcVar2": "archive_filename",
                "sVar3": "length1",
                "sVar4": "filename_length",
                "uVar1": "total_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001126c0": {
            "additional_data": {
                "DAT_0011b4a0": {
                    "1": "separator"
                },
                "DAT_00127600": {
                    "1": "default_error_message"
                },
                "FUN_001126c0": {
                    "1": "print_bfd_error_message",
                    "10": "print_error",
                    "17": "print_error_message",
                    "2": "print_error_details"
                },
                "_stderr": {
                    "1": "stderr_ptr"
                },
                "_stdout": {
                    "1": "stdout"
                },
                "iVar1": {
                    "1": "bfd_error_code",
                    "10": "bfd_error",
                    "2": "error_value",
                    "5": "error"
                },
                "in_AL": {
                    "1": "should_copy_params",
                    "3": "is_error_set",
                    "5": "condition",
                    "8": "flag"
                },
                "local_100": {
                    "1": "print_width",
                    "2": "string_size",
                    "5": "buffer_size",
                    "7": "buffer_size1"
                },
                "local_48": {
                    "1": "backup_param8",
                    "2": "param8",
                    "5": "error_code8_copy"
                },
                "local_54": {
                    "1": "temp_buffer_size"
                },
                "local_58": {
                    "1": "local_var9",
                    "2": "param7",
                    "5": "error_code7_copy"
                },
                "local_5c": {
                    "1": "error_message_ptr"
                },
                "local_68": {
                    "1": "local_param7",
                    "2": "param6_copy",
                    "5": "error_code6_copy"
                },
                "local_78": {
                    "1": "local_78",
                    "2": "param5_copy",
                    "5": "error_code5_copy"
                },
                "local_88": {
                    "1": "backup_param4",
                    "2": "error_code4",
                    "5": "error_code4_copy"
                },
                "local_98": {
                    "1": "real_param3",
                    "2": "param3",
                    "5": "error_code3_copy"
                },
                "local_a8": {
                    "1": "local_var4",
                    "2": "error_code2",
                    "5": "error_code2_copy"
                },
                "local_b4": {
                    "1": "unknown1"
                },
                "local_b8": {
                    "1": "saved_bfd_handle",
                    "2": "error_code1",
                    "5": "error_code1_copy"
                },
                "local_c0": {
                    "1": "param2_local",
                    "2": "param14",
                    "4": "param2",
                    "5": "param14_copy"
                },
                "local_c8": {
                    "1": "unknown_cause1_copy",
                    "2": "param13",
                    "4": "param1",
                    "5": "param13_copy"
                },
                "local_e8": {
                    "1": "buffer_array",
                    "2": "error_buffer",
                    "4": "buffer",
                    "7": "local_buffer"
                },
                "local_f0": {
                    "1": "local_var4",
                    "3": "ptr2",
                    "6": "local_buffer"
                },
                "local_f8": {
                    "1": "internal_buffer_ptr",
                    "2": "stack_ptr",
                    "3": "ptr1",
                    "4": "pointer1"
                },
                "local_fc": {
                    "1": "array_length2",
                    "2": "string_length2",
                    "7": "buffer_size2"
                },
                "param_1": {
                    "1": "bfd_handle",
                    "11": "error_code1",
                    "2": "error_type",
                    "3": "arg1",
                    "8": "error_code"
                },
                "param_10": {
                    "1": "error_string_max_length",
                    "2": "formatted_str_length",
                    "3": "error_message_length",
                    "4": "error_code"
                },
                "param_11": {
                    "1": "param11",
                    "2": "buffer",
                    "3": "error_array"
                },
                "param_12": {
                    "1": "error_format_string",
                    "14": "format_string",
                    "2": "additional_error_message",
                    "3": "format"
                },
                "param_13": {
                    "1": "param7",
                    "10": "param13",
                    "2": "unknown_param1",
                    "3": "param1"
                },
                "param_14": {
                    "1": "additional_param2",
                    "10": "param14",
                    "2": "param_14",
                    "3": "param2"
                },
                "param_2": {
                    "1": "file_type",
                    "11": "error_code2",
                    "2": "error_code",
                    "3": "error2",
                    "7": "param2"
                },
                "param_3": {
                    "1": "param1",
                    "11": "error_code3",
                    "3": "arg3",
                    "8": "param3"
                },
                "param_4": {
                    "1": "error_cause",
                    "11": "error_code4",
                    "3": "arg4",
                    "8": "param4"
                },
                "param_5": {
                    "1": "local_78",
                    "11": "error_code5",
                    "2": "param_5",
                    "3": "arg5",
                    "8": "param5"
                },
                "param_6": {
                    "1": "section_handling",
                    "11": "error_code6",
                    "2": "param_6",
                    "3": "error6",
                    "8": "param6"
                },
                "param_7": {
                    "1": "dynamic_handling",
                    "11": "error_code7",
                    "2": "param_7",
                    "3": "error7",
                    "8": "param7"
                },
                "param_8": {
                    "1": "local_48",
                    "11": "error_code8",
                    "2": "param_8",
                    "3": "error8",
                    "8": "param8"
                },
                "param_9": {
                    "1": "error_message_format",
                    "18": "error_message",
                    "2": "formatted_string",
                    "3": "error_code"
                },
                "uVar2": {
                    "1": "error_message2",
                    "10": "error_message",
                    "2": "error_msg"
                }
            },
            "called": [
                "bfd_get_error",
                "vfprintf",
                "dcgettext",
                "fflush",
                "fwrite",
                "FUN_001125fa",
                "bfd_errmsg",
                "fputs",
                "fprintf"
            ],
            "calling": [
                "FUN_00115dc0",
                "FUN_00116b90",
                "FUN_00107880",
                "FUN_0010551d",
                "FUN_0010554f",
                "FUN_0010808f",
                "FUN_00114e50",
                "FUN_00114690",
                "FUN_001086af",
                "FUN_00108466",
                "FUN_00104d25",
                "FUN_00104ea2",
                "FUN_00116110"
            ],
            "code": "\n\n\nvoid print_error_message_001126c0(undefined4 error_code1,undefined4 error_code2,undefined4 error_code3,undefined4 error_code4,\n                 undefined4 error_code5,undefined4 error_code6,undefined4 error_code7,undefined4 error_code8,\n                 long error_message,long error_length,long *error_code_array,char *format_string,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char flag;\n  int bfd_error;\n  undefined8 error_message;\n  undefined4 buffer_size1;\n  undefined4 buffer_size2;\n  undefined *pointer1;\n  undefined *local_buffer;\n  undefined local_buffer [32];\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 error_code1_copy;\n  undefined4 error_code2_copy;\n  undefined4 error_code3_copy;\n  undefined4 error_code4_copy;\n  undefined4 error_code5_copy;\n  undefined4 error_code6_copy;\n  undefined4 error_code7_copy;\n  undefined4 error_code8_copy;\n  \n  if (flag != '\\0') {\n    error_code1_copy = error_code1;\n    error_code2_copy = error_code2;\n    error_code3_copy = error_code3;\n    error_code4_copy = error_code4;\n    error_code5_copy = error_code5;\n    error_code6_copy = error_code6;\n    error_code7_copy = error_code7;\n    error_code8_copy = error_code8;\n  }\n  param13_copy = param13;\n  param14_copy = param14;\n  bfd_error = bfd_get_error();\n  if (bfd_error == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg();\n  }\n  fflush(stdout);\n  fputs(DAT_00127600,stderr);\n  if (error_length != 0) {\n    if (error_message == 0) {\n      error_message = get_formatted_string_001125fa(error_length);\n    }\n    if ((error_code_array != (long *)0x0) && (*error_code_array != 0)) {\n      fprintf(stderr,\": %s[%s]\",error_message);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(stderr,\": %s\",error_message);\nLAB_001127c1:\n  if (format_string != (char *)0x0) {\n    pointer1 = &stack0x00000008;\n    local_buffer = local_buffer;\n    buffer_size1 = 0x20;\n    buffer_size2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,stderr);\n    vfprintf(stderr,format_string,&buffer_size1);\n  }\n  fprintf(stderr,\": %s\\n\",error_message);\n  return;\n}\n\n",
            "current_name": "print_error_message_001126c0",
            "entrypoint": "0x001126c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001126c0": "print_error_message_001126c0",
                "_stderr": "stderr",
                "_stdout": "stdout",
                "iVar1": "bfd_error",
                "in_AL": "flag",
                "local_100": "buffer_size1",
                "local_48": "error_code8_copy",
                "local_58": "error_code7_copy",
                "local_68": "error_code6_copy",
                "local_78": "error_code5_copy",
                "local_88": "error_code4_copy",
                "local_98": "error_code3_copy",
                "local_a8": "error_code2_copy",
                "local_b8": "error_code1_copy",
                "local_c0": "param14_copy",
                "local_c8": "param13_copy",
                "local_e8": "local_buffer",
                "local_f0": "local_buffer",
                "local_f8": "pointer1",
                "local_fc": "buffer_size2",
                "param_1": "error_code1",
                "param_10": "error_length",
                "param_11": "error_code_array",
                "param_12": "format_string",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "error_code2",
                "param_3": "error_code3",
                "param_4": "error_code4",
                "param_5": "error_code5",
                "param_6": "error_code6",
                "param_7": "error_code7",
                "param_8": "error_code8",
                "param_9": "error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011283f": {
            "additional_data": {
                "FUN_0011283f": {
                    "1": "find_directory_path",
                    "2": "check_directory",
                    "3": "check_directory_access",
                    "4": "find_directory",
                    "9": "check_directory_permission"
                },
                "iVar1": {
                    "1": "access_permission",
                    "18": "access_result"
                },
                "param_1": {
                    "1": "filename",
                    "10": "path",
                    "11": "directory_path",
                    "7": "file_path"
                },
                "param_2": {
                    "1": "target_directory",
                    "4": "default_path",
                    "5": "directory_path",
                    "6": "directory",
                    "7": "default_directory"
                },
                "sStack_a8": {
                    "1": "file_stat_data",
                    "10": "file_stat",
                    "2": "stat_info",
                    "5": "file_info",
                    "9": "file_stats"
                }
            },
            "called": [
                "stat",
                "access"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\nchar * check_directory_permission_0011283f(char *directory_path,char *default_directory)\n\n{\n  int access_result;\n  stat file_stat;\n  \n  if ((default_directory == (char *)0x0) && (directory_path != (char *)0x0)) {\n    access_result = access(directory_path,7);\n    if (access_result == 0) {\n      access_result = stat(directory_path,&file_stat);\n      if ((access_result == 0) && ((file_stat.st_mode & 0xf000) == 0x4000)) {\n        default_directory = directory_path;\n      }\n    }\n  }\n  return default_directory;\n}\n\n",
            "current_name": "check_directory_permission_0011283f",
            "entrypoint": "0x0011283f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011283f": "check_directory_permission_0011283f",
                "iVar1": "access_result",
                "param_1": "directory_path",
                "param_2": "default_directory",
                "sStack_a8": "file_stat"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112894": {
            "additional_data": {
                "FUN_00112894": {
                    "1": "initialize_data",
                    "3": "create_data_structure",
                    "5": "create_memory_block",
                    "6": "initialize_memory",
                    "9": "initialize_data_structure"
                },
                "bVar4": {
                    "1": "zero_byte",
                    "2": "initial_value",
                    "7": "offset",
                    "9": "byte_value"
                },
                "lVar3": {
                    "1": "index",
                    "16": "loop_counter",
                    "3": "loop_count",
                    "6": "counter"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "input_value",
                    "3": "initial_value",
                    "5": "input1"
                },
                "param_2": {
                    "1": "byte_param",
                    "3": "byte_value",
                    "5": "input2",
                    "9": "flag"
                },
                "param_3": {
                    "1": "input_value1",
                    "2": "data1",
                    "4": "param3",
                    "5": "input3"
                },
                "param_4": {
                    "1": "data4",
                    "2": "data2",
                    "4": "param4",
                    "5": "input4"
                },
                "puVar1": {
                    "1": "improved_array",
                    "10": "memory_block",
                    "2": "allocated_memory",
                    "9": "data_structure"
                },
                "puVar2": {
                    "1": "pt_memory",
                    "2": "current_position",
                    "3": "temp_pointer",
                    "4": "pointer",
                    "5": "temp_ptr"
                },
                "xmalloc": {
                    "4": "allocate_memory"
                }
            },
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nundefined8 *\ninitialize_data_structure_00112894(undefined8 value1,undefined flag,undefined8 value3,undefined8 value4)\n\n{\n  undefined8 *memory_block;\n  undefined8 *temp_ptr;\n  long loop_counter;\n  byte byte_value;\n  \n  byte_value = 0;\n  memory_block = (undefined8 *)xmalloc(0x1b0);\n  temp_ptr = memory_block;\n  for (loop_counter = 0x6c; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *(undefined4 *)temp_ptr = 0;\n    temp_ptr = (undefined8 *)((long)temp_ptr + (ulong)byte_value * -8 + 4);\n  }\n  *memory_block = value1;\n  *(undefined *)(memory_block + 1) = flag;\n  memory_block[2] = value3;\n  memory_block[3] = value4;\n  *(undefined4 *)(memory_block + 0x10) = 1;\n  temp_ptr = (undefined8 *)xmalloc(8);\n  memory_block[0xd] = 0xffffffffffffffff;\n  memory_block[0x11] = temp_ptr;\n  *temp_ptr = 0;\n  return memory_block;\n}\n\n",
            "current_name": "initialize_data_structure_00112894",
            "entrypoint": "0x00112894",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112894": "initialize_data_structure_00112894",
                "bVar4": "byte_value",
                "lVar3": "loop_counter",
                "param_1": "value1",
                "param_2": "flag",
                "param_3": "value3",
                "param_4": "value4",
                "puVar1": "memory_block",
                "puVar2": "temp_ptr",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112904": {
            "additional_data": {
                "FUN_00112904": {
                    "1": "allocate_and_initialize_data",
                    "4": "initialize_data",
                    "7": "initialize_data_structure",
                    "8": "initialize_memory"
                },
                "param_1": {
                    "1": "initial_value",
                    "10": "value1",
                    "2": "data1",
                    "4": "input1"
                },
                "param_2": {
                    "1": "initial_value",
                    "10": "value2",
                    "2": "input_param2",
                    "4": "input2"
                },
                "puVar1": {
                    "1": "data_struct",
                    "12": "allocated_memory",
                    "2": "data_ptr",
                    "3": "data_structure",
                    "7": "memory_block"
                }
            },
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_00113df2",
                "FUN_00113e23",
                "FUN_00113bfa",
                "FUN_00113d3a",
                "FUN_00113ce0",
                "FUN_00113b4a",
                "FUN_0010c2d2",
                "FUN_0010c892",
                "FUN_00113dfe",
                "FUN_00113b71",
                "FUN_00113c43",
                "FUN_00113cb9",
                "FUN_0010c95e",
                "FUN_0010c218",
                "FUN_0010b0fa",
                "FUN_00113d6e",
                "FUN_00113e17",
                "FUN_0010c6be",
                "FUN_00113b98",
                "FUN_0010ee3f",
                "FUN_00113da9"
            ],
            "code": "\nvoid initialize_memory_00112904(undefined4 value1,undefined4 value2)\n\n{\n  undefined4 *allocated_memory;\n  \n  allocated_memory = (undefined4 *)xmalloc(0x18);\n  *allocated_memory = value1;\n  allocated_memory[1] = value2;\n  *(undefined (*) [16])(allocated_memory + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "current_name": "initialize_memory_00112904",
            "entrypoint": "0x00112904",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112904": "initialize_memory_00112904",
                "param_1": "value1",
                "param_2": "value2",
                "puVar1": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112925": {
            "additional_data": {
                "*param_1": {
                    "1": "mem_block"
                },
                "FUN_00112925": {
                    "1": "allocate_and_initialize_data",
                    "11": "initialize_data_structure",
                    "12": "initialize_memory",
                    "2": "initialize_array",
                    "4": "initialize_data"
                },
                "ZEXT816": {
                    "1": "initialize_zero"
                },
                "bVar5": {
                    "1": "is_zero",
                    "2": "counter",
                    "3": "byte_var",
                    "6": "flag",
                    "9": "byte_value"
                },
                "lVar3": {
                    "1": "index",
                    "2": "counter",
                    "23": "loop_counter",
                    "3": "loop_count"
                },
                "param_1": {
                    "1": "data",
                    "2": "array_ptr",
                    "3": "memory_array",
                    "4": "memory",
                    "6": "data_structure"
                },
                "param_2": {
                    "1": "param1_value",
                    "17": "value",
                    "2": "param_2",
                    "4": "param_value"
                },
                "param_3": {
                    "1": "size1",
                    "17": "param3",
                    "2": "param_3",
                    "3": "value1"
                },
                "param_4": {
                    "1": "param_b",
                    "17": "param4",
                    "2": "param_4",
                    "3": "value2"
                },
                "pauVar2": {
                    "1": "temp_array_ptr",
                    "2": "existing_data_structure",
                    "4": "existing_data",
                    "5": "existing_memory",
                    "7": "existing_array"
                },
                "puVar1": {
                    "1": "new_block",
                    "2": "memory_address",
                    "3": "data_pointer",
                    "4": "memory_ptr",
                    "7": "allocated_memory"
                },
                "puVar4": {
                    "1": "current_item_ptr",
                    "2": "current_data_pointer",
                    "3": "current_pointer",
                    "4": "current_element"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_0010c218",
                "FUN_0010c05d",
                "FUN_0010c6be",
                "FUN_00112996",
                "FUN_0010bc80"
            ],
            "code": "\nundefined4 *\ninitialize_memory_00112925(undefined (**data_structure) [16],undefined8 value,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 *allocated_memory;\n  undefined (*existing_array) [16];\n  long loop_counter;\n  undefined4 *current_element;\n  byte byte_value;\n  \n  byte_value = 0;\n  allocated_memory = (undefined4 *)xmalloc(0x28);\n  current_element = allocated_memory;\n  for (loop_counter = 10; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *current_element = 0;\n    current_element = current_element + (ulong)byte_value * -2 + 1;\n  }\n  existing_array = *data_structure;\n  *(undefined8 *)(allocated_memory + 2) = value;\n  allocated_memory[5] = param3;\n  allocated_memory[6] = param4;\n  if (existing_array == (undefined (*) [16])0x0) {\n    existing_array = (undefined (*) [16])xmalloc(0x10);\n    *existing_array = initialize_zero(0);\n    *data_structure = existing_array;\n    *(undefined (**) [16])(*existing_array + 8) = existing_array;\n  }\n  **(undefined8 **)(*existing_array + 8) = allocated_memory;\n  *(undefined4 **)(*existing_array + 8) = allocated_memory;\n  return allocated_memory;\n}\n\n",
            "current_name": "initialize_memory_00112925",
            "entrypoint": "0x00112925",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112925": "initialize_memory_00112925",
                "ZEXT816": "initialize_zero",
                "bVar5": "byte_value",
                "lVar3": "loop_counter",
                "param_1": "data_structure",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "pauVar2": "existing_array",
                "puVar1": "allocated_memory",
                "puVar4": "current_element",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112996": {
            "additional_data": {
                "FUN_00112996": {
                    "1": "initialize_or_print_debug",
                    "19": "initialize_memory",
                    "2": "initialize_memory_if_valid",
                    "4": "initialize_or_print_error"
                },
                "lVar2": {
                    "1": "memory_location",
                    "13": "offset",
                    "2": "data_address",
                    "3": "new_address",
                    "4": "pointer_offset"
                },
                "param_1": {
                    "1": "input_address",
                    "14": "memory_address",
                    "2": "input_data"
                },
                "param_2": {
                    "1": "mem_param",
                    "12": "param2",
                    "15": "param_2"
                },
                "param_3": {
                    "1": "alignment",
                    "12": "param3",
                    "15": "param_3"
                },
                "uVar1": {
                    "1": "translation",
                    "2": "error_message",
                    "24": "result"
                }
            },
            "called": [
                "FUN_00112925",
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\n\n\nundefined8 initialize_memory_00112996(long memory_address,undefined8 param_2,undefined8 param_3)\n\n{\n  undefined8 result;\n  long offset;\n  \n  if ((*(long *)(memory_address + 8) != 0) && (*(long *)(memory_address + 0x10) != 0)) {\n    offset = *(long *)(memory_address + 0x10) + 0x10;\n    if (*(long *)(memory_address + 0x20) != 0) {\n      offset = *(long *)(memory_address + 0x20) + 0x28;\n    }\n    result = initialize_memory_00112996_00112925(offset,param_2,param_3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace: no current file\",5);\n  fprintf(_stderr,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "current_name": "initialize_memory_00112996",
            "entrypoint": "0x00112996",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112996": "initialize_memory_00112996",
                "lVar2": "offset",
                "param_1": "memory_address",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001129f4": {
            "additional_data": {
                "((undefined8 *)*puVar1)[1]": {
                    "1": "relevant_value"
                },
                "(int *)0x0": {
                    "1": "null_ptr"
                },
                "(param_1 != piVar2) && (param_1 = piVar2, piVar2 != (int *)0x0)": {
                    "1": "check_loop_condition"
                },
                "*(long **)(param_1 + 4)": {
                    "1": "nested_array_ptr"
                },
                "**(int ***)(undefined8 *)*puVar1": {
                    "1": "triple_pointer"
                },
                "**(long **)(param_1 + 4)": {
                    "1": "double_pointer"
                },
                "*param_1": {
                    "1": "value"
                },
                "*puVar1": {
                    "1": "ptr_value"
                },
                "FUN_001129f4": {
                    "1": "get_data",
                    "2": "extract_value",
                    "7": "extract_data"
                },
                "param_1": {
                    "1": "input_data",
                    "16": "input_array",
                    "2": "data_array",
                    "4": "data"
                },
                "param_1 + 4": {
                    "1": "temp_array_ptr"
                },
                "piVar2": {
                    "1": "temp_array",
                    "2": "pointer2",
                    "4": "current_element",
                    "6": "current_ptr",
                    "7": "current_pointer"
                },
                "puVar1": {
                    "1": "next_element_ptr",
                    "2": "pointer1",
                    "3": "array_ptr",
                    "4": "pointer",
                    "5": "data_ptr"
                }
            },
            "called": [
                "FUN_001129f4"
            ],
            "calling": [
                "FUN_001129f4",
                "FUN_0010b0fa",
                "FUN_0010d559",
                "FUN_00112b6e",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 extract_data_001129f4(int *input_array)\n\n{\n  undefined8 *data_ptr;\n  int *current_pointer;\n  \n  do {\n    if (*input_array != 1) {\n      if (1 < *input_array - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(input_array + 4) + 8);\n    }\n    data_ptr = (undefined8 *)(input_array + 4);\n    current_pointer = **(int ***)(undefined8 *)*data_ptr;\n  } while ((input_array != current_pointer) && (input_array = current_pointer, current_pointer != (int *)0x0));\n  return ((undefined8 *)*data_ptr)[1];\n}\n\n",
            "current_name": "extract_data_001129f4",
            "entrypoint": "0x001129f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001129f4": "extract_data_001129f4",
                "param_1": "input_array",
                "piVar2": "current_pointer",
                "puVar1": "data_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112a33": {
            "additional_data": {
                "FUN_00112a33": {
                    "1": "record_variable_or_parameter",
                    "2": "process_function",
                    "3": "process_parameter",
                    "4": "process_tag",
                    "9": "process_record"
                },
                "allocate_and_initialize_slots_0010da0b": {
                    "7": "allocate_and_initialize_slots"
                },
                "initialize_debug_name_type_0010c218": {
                    "7": "initialize_debug_name_type"
                },
                "lVar2": {
                    "1": "result_code",
                    "2": "temp_var",
                    "6": "return_value",
                    "7": "result",
                    "8": "value"
                },
                "param_1": {
                    "1": "record_index",
                    "10": "param1",
                    "2": "arg1",
                    "3": "param_1"
                },
                "param_2": {
                    "1": "buffer",
                    "2": "data",
                    "8": "param2"
                },
                "param_3": {
                    "1": "param_c",
                    "11": "param3",
                    "2": "data",
                    "3": "param_3"
                },
                "param_4": {
                    "1": "param_d",
                    "2": "byte_value",
                    "6": "record_type",
                    "9": "tag"
                },
                "param_5": {
                    "1": "arg",
                    "12": "param5",
                    "2": "arg5",
                    "3": "param_5"
                },
                "param_6": {
                    "1": "buffer",
                    "12": "param6",
                    "2": "arg6",
                    "3": "size"
                },
                "param_7": {
                    "1": "param_7_val",
                    "11": "param7",
                    "2": "record_flag",
                    "5": "flags"
                },
                "plVar3": {
                    "1": "record_slot_pointer",
                    "2": "slot_pointer",
                    "4": "slot",
                    "8": "allocated_slots"
                },
                "process_debug_tag_0010c6be": {
                    "7": "process_debug_tag"
                },
                "record_parameter_0010bd62": {
                    "7": "record_parameter"
                },
                "record_variable_0010c05d": {
                    "7": "record_variable"
                },
                "uVar1": {
                    "1": "success",
                    "20": "result",
                    "3": "record_result",
                    "5": "return_value"
                }
            },
            "called": [
                "FUN_0010bd62",
                "FUN_0010c218",
                "FUN_0010da0b",
                "FUN_0010c05d",
                "FUN_0010c6be"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nbool process_record_00112a33(undefined8 param1,long param2,undefined8 param3,byte tag,undefined8 param5\n                 ,undefined8 param6,uint param7)\n\n{\n  undefined result;\n  long value;\n  long *allocated_slots;\n  \n  if (tag < 0x12) {\n    if (tag != 0) {\n      switch(tag) {\n      case 1:\n        result = record_variable(param5,*(undefined8 *)(param2 + 8),param6,4,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        result = record_variable(param5,*(undefined8 *)(param2 + 8),param6,(param7 & 0xff) + 2,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 4:\n        result = record_variable(param5,*(undefined8 *)(param2 + 8),param6,5,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 9:\n        result = record_parameter(param5,*(undefined8 *)(param2 + 8),param6,1,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        value = process_debug_tag(param5,*(undefined8 *)(param2 + 8));\n        if (value == 0) {\n          return false;\n        }\n        allocated_slots = (long *)allocate_and_initialize_slots(param1,param3);\n        *allocated_slots = value;\n        break;\n      case 0xd:\n        value = initialize_debug_name_type(param5,*(undefined8 *)(param2 + 8));\n        return value != 0;\n      case 0x11:\n        result = record_parameter(param5,*(undefined8 *)(param2 + 8),param6,2,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      }\n    }\n  }\n  else if (tag == 0x7f) {\nswitchD_00112a73_caseD_2:\n    result = record_variable(param5,*(undefined8 *)(param2 + 8),param6,1,\n                         *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "current_name": "process_record_00112a33",
            "entrypoint": "0x00112a33",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112a33": "process_record_00112a33",
                "allocate_and_initialize_slots_0010da0b": "allocate_and_initialize_slots",
                "initialize_debug_name_type_0010c218": "initialize_debug_name_type",
                "lVar2": "value",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "tag",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "plVar3": "allocated_slots",
                "process_debug_tag_0010c6be": "process_debug_tag",
                "record_parameter_0010bd62": "record_parameter",
                "record_variable_0010c05d": "record_variable",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112b6e": {
            "additional_data": {
                "FUN_00112b6e": {
                    "1": "extract_real_type_debug_information",
                    "11": "get_real_type",
                    "4": "extract_real_type",
                    "7": "find_real_type"
                },
                "__format": {
                    "1": "error_format",
                    "19": "format_string",
                    "2": "format_str",
                    "3": "error_message",
                    "4": "error_message_format"
                },
                "_stderr": {
                    "1": "standard_error"
                },
                "bVar5": {
                    "1": "circular_flag",
                    "27": "is_circular"
                },
                "iVar1": {
                    "1": "type_info_value",
                    "3": "input_value",
                    "4": "value",
                    "5": "array_size"
                },
                "local_10": {
                    "1": "new_input_data",
                    "2": "current_input_array",
                    "4": "local_input_array"
                },
                "local_18": {
                    "1": "local_debug_info_list",
                    "2": "debug_info_stack",
                    "3": "current_debug_info"
                },
                "param_1": {
                    "1": "input_array_1",
                    "18": "input_array",
                    "2": "type_info"
                },
                "param_2": {
                    "1": "input_array_2",
                    "16": "debug_info",
                    "4": "debug_info_list",
                    "7": "debug_info_array"
                },
                "piVar3": {
                    "1": "recursive_result",
                    "12": "result_array",
                    "14": "result",
                    "2": "result_ptr"
                },
                "plVar4": {
                    "1": "debug_ptr",
                    "15": "current_debug_info",
                    "2": "debug_info_ptr",
                    "3": "current_element"
                },
                "uVar2": {
                    "1": "real_type",
                    "10": "extracted_data"
                }
            },
            "called": [
                "FUN_001129f4",
                "FUN_00112b6e",
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_00113b1e",
                "FUN_00112b6e",
                "FUN_00112c1f",
                "FUN_0010922b",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nint * get_real_type_00112b6e(int *input_array,long *debug_info)\n\n{\n  int array_size;\n  undefined8 extracted_data;\n  char *format_string;\n  int *result;\n  long *current_debug_info;\n  bool is_circular;\n  long *local_debug_info;\n  int *local_input_array;\n  \n  array_size = *input_array;\n  if ((array_size != 1) && (1 < array_size - 0x16U)) {\n    return input_array;\n  }\n  current_debug_info = debug_info;\n  while (current_debug_info != (long *)0x0) {\n    if ((input_array == (int *)current_debug_info[1]) ||\n       (is_circular = current_debug_info == (long *)*current_debug_info, current_debug_info = (long *)*current_debug_info, is_circular)) {\n      extracted_data = extract_data_001129f4(input_array,\"debug_get_real_type_00112b6e: circular debug information for %s\\n\");\n      format_string = (char *)dcgettext(0);\n      fprintf(standard_error,format_string,extracted_data);\n      return (int *)0x0;\n    }\n  }\n  local_debug_info = debug_info;\n  local_input_array = input_array;\n  if (array_size - 0x16U < 2) {\n    result = (int *)get_real_type_00112b6e((*(undefined8 **)(input_array + 4))[1],&local_debug_info);\n    return result;\n  }\n  result = *(int **)**(undefined8 **)(input_array + 4);\n  if (input_array == result) {\n    return input_array;\n  }\n  if (result == (int *)0x0) {\n    return input_array;\n  }\n  result = (int *)get_real_type_00112b6e(result,&local_debug_info);\n  return result;\n}\n\n",
            "current_name": "get_real_type_00112b6e",
            "entrypoint": "0x00112b6e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112b6e": "get_real_type_00112b6e",
                "__format": "format_string",
                "_stderr": "standard_error",
                "bVar5": "is_circular",
                "iVar1": "array_size",
                "local_10": "local_input_array",
                "local_18": "local_debug_info",
                "param_1": "input_array",
                "param_2": "debug_info",
                "piVar3": "result",
                "plVar4": "current_debug_info",
                "uVar2": "extracted_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112c1f": {
            "additional_data": {
                "FUN_00112c1f": {
                    "1": "process_debug_function",
                    "2": "process_data"
                },
                "abort": {
                    "1": "abort_function"
                },
                "append_semicolon_to_string_00109bbb": {
                    "1": "append_semicolon_to_string"
                },
                "append_string_to_buffer_0010ab4d": {
                    "1": "append_string_to_buffer"
                },
                "bVar14": {
                    "1": "is_equal",
                    "2": "flag2",
                    "3": "bool_value",
                    "4": "bool_var14",
                    "8": "bool_var"
                },
                "cVar5": {
                    "1": "character_variable",
                    "12": "char_var",
                    "2": "char_var5",
                    "7": "flag"
                },
                "dcgettext": {
                    "1": "get_translated_string"
                },
                "extract_strings_0010ae0e": {
                    "1": "extract_strings"
                },
                "format_and_store_data_0010aa53": {
                    "1": "format_and_store_data"
                },
                "fprintf": {
                    "1": "print_to_file"
                },
                "generate_warning_message_0010ba08": {
                    "1": "generate_warning_message"
                },
                "get_real_type_00112b6e": {
                    "1": "get_real_type"
                },
                "iVar9": {
                    "1": "type_code",
                    "3": "int_var9"
                },
                "initialize_and_process_data_0010e453": {
                    "1": "initialize_and_process_data"
                },
                "initialize_and_resize_array_00109d5c": {
                    "1": "initialize_and_resize_array"
                },
                "initialize_data_structure_00109d3e": {
                    "1": "initialize_data_structure"
                },
                "initialize_data_structure_0010a69a": {
                    "1": "initialize_data_structure"
                },
                "initialize_data_structure_0010b800": {
                    "1": "initialize_data_structure"
                },
                "initialize_data_structure_0010b948": {
                    "1": "initialize_data_structure"
                },
                "initialize_or_increment_00109dfe": {
                    "1": "initialize_or_increment"
                },
                "lVar2": {
                    "1": "ptr2",
                    "2": "var2",
                    "3": "long_var",
                    "6": "long_var2"
                },
                "local_3c": {
                    "1": "local_variable_2",
                    "10": "local_var",
                    "2": "local_value",
                    "4": "local_variable",
                    "5": "local_var3c"
                },
                "lookup_and_initialize_data_structure_0010bba1": {
                    "1": "initialize_data_structure"
                },
                "param_1": {
                    "1": "data",
                    "2": "param",
                    "3": "param_address",
                    "4": "param1"
                },
                "param_2": {
                    "1": "input2",
                    "3": "output_param",
                    "7": "param2"
                },
                "param_3": {
                    "1": "param_three",
                    "2": "input_array",
                    "5": "type_list",
                    "7": "param3"
                },
                "param_4": {
                    "1": "param_four",
                    "2": "data_structure",
                    "3": "base_type",
                    "7": "param4"
                },
                "piVar6": {
                    "1": "int_var6",
                    "2": "real_type",
                    "3": "int_pointer",
                    "4": "int_var"
                },
                "plVar1": {
                    "1": "pointer_variable1",
                    "2": "pointer_1",
                    "3": "pointer1",
                    "4": "ptr_var1",
                    "5": "pointer_var1"
                },
                "process_data_0010a083": {
                    "1": "process_data"
                },
                "process_data_0010a0a0": {
                    "1": "process_data"
                },
                "process_data_0010a0bd": {
                    "1": "process_data"
                },
                "process_data_0010a0d3": {
                    "1": "process_data"
                },
                "process_data_0010a0e9": {
                    "1": "process_data"
                },
                "process_data_0010a181": {
                    "1": "process_data"
                },
                "process_data_0010a2b9": {
                    "1": "process_data"
                },
                "process_data_0010a377": {
                    "1": "process_data"
                },
                "process_data_0010a424": {
                    "1": "process_data"
                },
                "process_data_0010a77a": {
                    "1": "process_data"
                },
                "process_data_0010a83e": {
                    "1": "process_data"
                },
                "process_data_0010add5": {
                    "1": "process_data"
                },
                "process_data_0010adf2": {
                    "1": "process_data"
                },
                "puVar3": {
                    "1": "ptr2",
                    "2": "ptr3",
                    "3": "pointer2",
                    "4": "ptr_var3",
                    "5": "pointer_var3"
                },
                "puVar4": {
                    "1": "ptr2",
                    "2": "ptr4",
                    "3": "pointer3",
                    "4": "ptr_var4",
                    "5": "pointer_var4"
                },
                "set_class_id_0010c7a0": {
                    "1": "set_class_id"
                },
                "uVar10": {
                    "1": "var_10",
                    "4": "var10"
                },
                "uVar11": {
                    "1": "var_11",
                    "4": "var11"
                },
                "uVar12": {
                    "1": "index_var",
                    "2": "counter",
                    "3": "var12",
                    "4": "u_var12"
                },
                "uVar13": {
                    "1": "val6",
                    "2": "index",
                    "3": "var13",
                    "4": "u_var13"
                },
                "uVar7": {
                    "1": "result1",
                    "17": "result",
                    "2": "return_var",
                    "6": "return_value"
                },
                "uVar8": {
                    "1": "data1",
                    "4": "u_var8"
                },
                "uVar9": {
                    "1": "result3"
                },
                "update_data_structure_00109e76": {
                    "1": "update_data_structure"
                }
            },
            "called": [
                "FUN_00109dfe",
                "FUN_0010a377",
                "FUN_00109d3e",
                "FUN_0010a0bd",
                "abort",
                "FUN_0010e5db",
                "dcgettext",
                "FUN_0010ae0e",
                "FUN_0010a083",
                "FUN_0010ba08",
                "FUN_0010adf2",
                "fprintf",
                "FUN_0010a424",
                "FUN_00109d5c",
                "FUN_00109e76",
                "FUN_0010b948",
                "FUN_0010bba1",
                "__assert_fail",
                "FUN_00112c1f",
                "FUN_0010c7a0",
                "FUN_0010a83e",
                "FUN_00109d97",
                "FUN_0010a0e9",
                "FUN_0010a94e",
                "FUN_0010add5",
                "FUN_0010b800",
                "FUN_0010a0d3",
                "FUN_0010aa53",
                "FUN_0010a181",
                "FUN_0010a77a",
                "FUN_0010a2b9",
                "FUN_00112b6e",
                "FUN_0010e453",
                "FUN_0010a69a",
                "FUN_00109bbb",
                "FUN_0010ab4d",
                "FUN_0010a0a0"
            ],
            "calling": [
                "FUN_001135a5",
                "FUN_00112c1f"
            ],
            "code": "\n\n\nundefined8 process_data_00112c1f(ulong param1,undefined8 param2,int *param3,long param4)\n\n{\n  long *pointer_var1;\n  long long_var2;\n  undefined8 *pointer_var3;\n  undefined8 *pointer_var4;\n  char char_var;\n  int *int_var;\n  undefined8 result;\n  undefined8 var8;\n  int var9;\n  undefined4 var10;\n  undefined8 var11;\n  ulong u_var12;\n  uint uint_var;\n  bool bool_var;\n  uint local_var;\n  \n  u_var12 = param1;\nLAB_00112c39:\n  if (param3 != (int *)0x0) {\n    var9 = *param3;\n    if (var9 - 0x16U < 2) {\n      do {\n        pointer_var1 = *(long **)(param3 + 4);\n        uint_var = *(uint *)(param1 + 0x30);\n        u_var12 = (ulong)uint_var;\n        long_var2 = *pointer_var1;\n        if (*(uint *)(long_var2 + 0x10) == uint_var) {\n          if (var9 == 0x16) {\n            result = initialize_data_structure(param2,*(undefined8 *)(long_var2 + 8));\n            return result;\n          }\nLAB_00112c94:\n          int_var = (int *)get_real_type(param3,0);\n          if (int_var == (int *)0x0) goto LAB_00112dd6;\n          if ((*int_var - 7U < 4) && (*(long *)(int_var + 4) != 0)) {\n            if ((*(uint *)(*(long *)(int_var + 4) + 0xc) <= *(uint *)(param1 + 0x38)) &&\n               (char_var = set_class_id(param1,*(undefined8 *)(**(long **)(param3 + 4) + 8),int_var),\n               char_var == '\\0')) {\n              return 0;\n            }\n            uint_var = *(uint *)(*(long *)(int_var + 4) + 0xc);\n          }\n          else {\n            uint_var = 0;\n          }\n          var9 = *int_var;\n          result = *(undefined8 *)(**(long **)(param3 + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (var9 == 0x17) {\n          if (long_var2 != param4) goto LAB_00112c94;\n          *(uint *)(param4 + 0x10) = uint_var;\n          param4 = *pointer_var1;\n          param3 = (int *)pointer_var1[1];\n          goto LAB_00112c39;\n        }\n        if (param4 != 0) {\n          *(uint *)(param4 + 0x10) = uint_var;\n        }\n        param3 = (int *)pointer_var1[1];\n        if (param3 == (int *)0x0) goto LAB_00112dd6;\n        var9 = *param3;\n        param4 = 0;\n      } while (var9 - 0x16U < 2);\nLAB_00112d74:\n      result = 0;\n    }\n    else {\n      if (param4 == 0) goto LAB_00112d74;\n      *(undefined4 *)(param4 + 0x10) = *(undefined4 *)(param1 + 0x30);\n      if (*(int *)(param4 + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      result = *(undefined8 *)(param4 + 8);\n    }\n    switch(var9) {\n    case 0:\n      result = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      result = initialize_or_increment(param2);\n      return result;\n    case 3:\n      result = initialize_data_structure(param2,param3[1],*(undefined *)(param3 + 4));\n      return result;\n    case 4:\n      result = initialize_data_structure(param2,param3[1]);\n      return result;\n    case 5:\n      result = update_data_structure(param2,param3[1]);\n      return result;\n    case 6:\n      result = initialize_data_structure(param2,param3[1]);\n      return result;\n    case 7:\n    case 8:\n      if (*(long *)(param3 + 4) != 0) {\n        if ((*(uint *)(*(long *)(param3 + 4) + 0xc) <= *(uint *)(param1 + 0x38)) &&\n           (char_var = set_class_id(param1,result,param3), char_var == '\\0')) {\n          return 0;\n        }\n        long_var2 = *(long *)(param3 + 4);\n        if (*(int *)(param1 + 0x30) == *(int *)(long_var2 + 8)) {\n          uint_var = *(uint *)(long_var2 + 0xc);\n          if (uint_var <= *(uint *)(param1 + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          var9 = *param3;\nLAB_00112ed2:\n          result = initialize_and_resize_array(param2,result,uint_var,var9);\n          return result;\n        }\n        *(int *)(long_var2 + 8) = *(int *)(param1 + 0x30);\n      }\n      var10 = 0;\n      if (*(long *)(param3 + 4) != 0) {\n        var10 = *(undefined4 *)(*(long *)(param3 + 4) + 0xc);\n      }\n      char_var = initialize_data_structure(param2,result,var10,*param3 == 7,param3[1]);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(param3 + 4) != (long *)0x0) && (u_var12 = 0, **(long **)(param3 + 4) != 0)) {\n        while( true ) {\n          pointer_var4 = *(undefined8 **)(**(long **)(param3 + 4) + u_var12 * 8);\n          if (pointer_var4 == (undefined8 *)0x0) break;\n          char_var = process_data_00112c1f(param1,param2,pointer_var4[1],0);\n          if (char_var == '\\0') {\n            return 0;\n          }\n          char_var = generate_warning_message(param2,*pointer_var4,*(undefined4 *)(pointer_var4 + 3),\n                               *(undefined4 *)((long)pointer_var4 + 0x1c),*(undefined4 *)(pointer_var4 + 2));\n          if (char_var == '\\0') {\n            return 0;\n          }\n          u_var12 = (ulong)((int)u_var12 + 1);\n        }\n      }\n      result = process_data_00112c1f(param2);\n      return result;\n    case 9:\n    case 10:\n      if (*(long *)(param3 + 4) == 0) {\n        uint_var = 0;\n        int_var = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(param3 + 4) + 0xc) <= *(uint *)(param1 + 0x38)) &&\n           (u_var12 = param1, char_var = set_class_id(param1,result,param3), char_var == '\\0')) {\n          return 0;\n        }\n        long_var2 = *(long *)(param3 + 4);\n        uint_var = *(uint *)(long_var2 + 0xc);\n        if (*(int *)(param1 + 0x30) == *(int *)(long_var2 + 8)) {\n          if (uint_var <= *(uint *)(param1 + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          var9 = *param3;\n          goto LAB_00112ed2;\n        }\n        int_var = *(int **)(long_var2 + 0x20);\n        *(int *)(long_var2 + 8) = *(int *)(param1 + 0x30);\n        if (((int_var != (int *)0x0) && (param3 != int_var)) &&\n           (u_var12 = param1, char_var = process_data_00112c1f(param1,param2,int_var,0), char_var == '\\0')) {\n          return 0;\n        }\n      }\n      char_var = process_data_00112c1f(param2,result,uint_var,*param3 == 9,param3[1],int_var != (int *)0x0,\n                           param3 == int_var,u_var12);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      if (*(long **)(param3 + 4) != (long *)0x0) {\n        uint_var = 0;\n        if (**(long **)(param3 + 4) != 0) {\n          while (pointer_var4 = *(undefined8 **)(**(long **)(param3 + 4) + (ulong)uint_var * 8),\n                pointer_var4 != (undefined8 *)0x0) {\n            char_var = process_data_00112c1f(param1,param2,pointer_var4[1],0);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)pointer_var4 + 0x14) == '\\0') {\n              char_var = generate_warning_message(param2,*pointer_var4,*(undefined4 *)(pointer_var4 + 3));\n            }\n            else {\n              char_var = generate_formatted_string_0010a94e(param2,*pointer_var4,pointer_var4[3]);\n            }\n            if (char_var == '\\0') {\n              return 0;\n            }\n            uint_var = uint_var + 1;\n          }\n        }\n        uint_var = 0;\n        if (*(long *)(*(long *)(param3 + 4) + 0x10) != 0) {\n          while (pointer_var4 = *(undefined8 **)\n                           (*(long *)(*(long *)(param3 + 4) + 0x10) + (ulong)uint_var * 8),\n                pointer_var4 != (undefined8 *)0x0) {\n            char_var = process_data_00112c1f(param1,param2,*pointer_var4,0);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            char_var = format_and_store_data(param2,*(undefined4 *)(pointer_var4 + 1),\n                                 *(undefined *)((long)pointer_var4 + 0xc));\n            if (char_var == '\\0') {\n              return 0;\n            }\n            uint_var = uint_var + 1;\n          }\n        }\n        local_var = 0;\n        if (*(long *)(*(long *)(param3 + 4) + 0x18) != 0) {\n          while (pointer_var4 = *(undefined8 **)\n                           (*(long *)(*(long *)(param3 + 4) + 0x18) + (ulong)local_var * 8),\n                pointer_var4 != (undefined8 *)0x0) {\n            char_var = append_string_to_buffer(param2,*pointer_var4);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            uint_var = 0;\n            while (pointer_var3 = *(undefined8 **)(pointer_var4[1] + (ulong)uint_var * 8),\n                  pointer_var3 != (undefined8 *)0x0) {\n              if ((pointer_var3[4] != 0) &&\n                 (char_var = process_data_00112c1f(param1,param2,pointer_var3[4],0), char_var == '\\0')) {\n                return 0;\n              }\n              char_var = process_data_00112c1f(param1,param2,pointer_var3[1],0);\n              if (char_var == '\\0') {\n                return 0;\n              }\n              if (pointer_var3[3] == -1) {\n                char_var = process_data_00112c1f(param2,*pointer_var3,*(undefined4 *)(pointer_var3 + 2),\n                                     *(undefined *)((long)pointer_var3 + 0x14),\n                                     *(undefined *)((long)pointer_var3 + 0x15));\n              }\n              else {\n                char_var = process_data_00112c1f(param2);\n              }\n              if (char_var == '\\0') {\n                return 0;\n              }\n              uint_var = uint_var + 1;\n            }\n            char_var = append_semicolon_to_string(param2);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            local_var = local_var + 1;\n          }\n        }\n      }\n      result = extract_strings(param2);\n      return result;\n    case 0xb:\n      pointer_var4 = *(undefined8 **)(param3 + 4);\n      if (pointer_var4 == (undefined8 *)0x0) {\n        var8 = 0;\n        var11 = 0;\n      }\n      else {\n        var8 = pointer_var4[1];\n        var11 = *pointer_var4;\n      }\n      result = initialize_and_process_data_00112c1f(param2,result,var11,var8);\n      return result;\n    case 0xc:\n      char_var = process_data_00112c1f(param1,param2,*(undefined8 *)(param3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = process_data_00112c1f(param2);\n      return result;\n    case 0xd:\n      char_var = process_data_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      u_var12 = 0;\n      if (*(long *)(*(long *)(param3 + 4) + 8) == 0) {\n        u_var12 = 0xffffffff;\n      }\n      else {\n        while (long_var2 = *(long *)(*(long *)(*(long *)(param3 + 4) + 8) + u_var12 * 8), long_var2 != 0) {\n          u_var12 = u_var12 + 1;\n          char_var = process_data_00112c1f(param1,param2,long_var2,0);\n          if (char_var == '\\0') {\n            return 0;\n          }\n        }\n        u_var12 = u_var12 & 0xffffffff;\n      }\n      result = process_data_00112c1f_0010e5db(param2,u_var12,*(undefined *)(*(long *)(param3 + 4) + 0x10));\n      return result;\n    case 0xe:\n      char_var = process_data_00112c1f(param1,param2,*(undefined8 *)(param3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = process_data_00112c1f(param2);\n      return result;\n    case 0xf:\n      char_var = process_data_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = process_data_00112c1f(param2,*(undefined8 *)(*(long *)(param3 + 4) + 8),\n                           *(undefined8 *)(*(long *)(param3 + 4) + 0x10));\n      return result;\n    case 0x10:\n      char_var = process_data_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      char_var = process_data_00112c1f(param1,param2,*(undefined8 *)(*(long *)(param3 + 4) + 8),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      long_var2 = *(long *)(param3 + 4);\n      result = process_data_00112c1f(param2,*(undefined8 *)(long_var2 + 0x10),*(undefined8 *)(long_var2 + 0x18),\n                           *(undefined *)(long_var2 + 0x20));\n      return result;\n    case 0x11:\n      char_var = process_data_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = process_data_00112c1f(param2,*(undefined *)(*(long *)(param3 + 4) + 8));\n      return result;\n    case 0x12:\n      char_var = process_data_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      char_var = process_data_00112c1f(param1,param2,*(undefined8 *)(*(long *)(param3 + 4) + 8),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = process_data_00112c1f(param2);\n      return result;\n    case 0x13:\n      char_var = process_data_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      u_var12 = 0;\n      if (*(long *)(*(long *)(param3 + 4) + 0x10) == 0) {\n        u_var12 = 0xffffffff;\n      }\n      else {\n        while (long_var2 = *(long *)(*(long *)(*(long *)(param3 + 4) + 0x10) + u_var12 * 8), long_var2 != 0)\n        {\n          u_var12 = u_var12 + 1;\n          char_var = process_data_00112c1f(param1,param2,long_var2,0);\n          if (char_var == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(param3 + 4) + 8) != 0) &&\n         (char_var = process_data_00112c1f(param1,param2,*(long *)(*(long *)(param3 + 4) + 8),0),\n         char_var == '\\0')) {\n        return 0;\n      }\n      result = process_data_00112c1f(param2,*(long *)(*(long *)(param3 + 4) + 8) != 0,u_var12 & 0xffffffff,\n                           *(undefined *)(*(long *)(param3 + 4) + 0x18));\n      return result;\n    case 0x14:\n      char_var = process_data_00112c1f(param1,param2,*(undefined8 *)(param3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = process_data_00112c1f(param2);\n      return result;\n    case 0x15:\n      char_var = process_data_00112c1f(param1,param2,*(undefined8 *)(param3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = process_data_00112c1f(param2);\n      return result;\n    default:\n                    \n      abort_function();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  bool_var = *(int **)**(undefined8 **)(param3 + 4) == param3;\n  param3 = *(int **)**(undefined8 **)(param3 + 4);\n  if (bool_var) {\nLAB_00112dd6:\n    result = initialize_or_increment_00109d97(param2);\n    return result;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "current_name": "process_data_00112c1f",
            "entrypoint": "0x00112c1f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112c1f": "process_data_00112c1f",
                "abort": "abort_function",
                "append_semicolon_to_string_00109bbb": "append_semicolon_to_string",
                "append_string_to_buffer_0010ab4d": "append_string_to_buffer",
                "bVar14": "bool_var",
                "cVar5": "char_var",
                "dcgettext": "get_translated_string",
                "extract_strings_0010ae0e": "extract_strings",
                "format_and_store_data_0010aa53": "format_and_store_data",
                "fprintf": "print_to_file",
                "generate_warning_message_0010ba08": "generate_warning_message",
                "get_real_type_00112b6e": "get_real_type",
                "iVar9": "var9",
                "initialize_and_process_data_0010e453": "initialize_and_process_data",
                "initialize_and_resize_array_00109d5c": "initialize_and_resize_array",
                "initialize_data_structure_00109d3e": "initialize_data_structure",
                "initialize_data_structure_0010a69a": "initialize_data_structure",
                "initialize_data_structure_0010b800": "initialize_data_structure",
                "initialize_data_structure_0010b948": "initialize_data_structure",
                "initialize_or_increment_00109dfe": "initialize_or_increment",
                "lVar2": "long_var2",
                "local_3c": "local_var",
                "lookup_and_initialize_data_structure_0010bba1": "initialize_data_structure",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "piVar6": "int_var",
                "plVar1": "pointer_var1",
                "process_data_0010a083": "process_data",
                "process_data_0010a0a0": "process_data",
                "process_data_0010a0bd": "process_data",
                "process_data_0010a0d3": "process_data",
                "process_data_0010a0e9": "process_data",
                "process_data_0010a181": "process_data",
                "process_data_0010a2b9": "process_data",
                "process_data_0010a377": "process_data",
                "process_data_0010a424": "process_data",
                "process_data_0010a77a": "process_data",
                "process_data_0010a83e": "process_data",
                "process_data_0010add5": "process_data",
                "process_data_0010adf2": "process_data",
                "puVar3": "pointer_var3",
                "puVar4": "pointer_var4",
                "set_class_id_0010c7a0": "set_class_id",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "u_var12",
                "uVar13": "uint_var",
                "uVar7": "result",
                "uVar8": "var8",
                "update_data_structure_00109e76": "update_data_structure"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001135a5": {
            "additional_data": {
                "FUNC_00113a4d": {
                    "1": "custom_func",
                    "2": "check_function"
                },
                "FUN_001135a5": {
                    "1": "process_operation",
                    "2": "process_and_return_result",
                    "21": "process_data",
                    "6": "process_function"
                },
                "PROCESS_DATA": {
                    "1": "max_data_size"
                },
                "abort": {
                    "1": "abort"
                },
                "cVar2": {
                    "1": "char_val",
                    "16": "result",
                    "2": "condition",
                    "7": "is_valid"
                },
                "format_and_process_string_0010e842": {
                    "7": "format_and_process_string"
                },
                "get_one_00108f05": {
                    "7": "get_one"
                },
                "iVar1": {
                    "1": "file_count",
                    "17": "index",
                    "2": "int_var",
                    "4": "count"
                },
                "param_1": {
                    "1": "param1",
                    "2": "input_1",
                    "20": "input1"
                },
                "param_2": {
                    "1": "input_data2",
                    "2": "input_param2",
                    "20": "input2"
                },
                "param_3": {
                    "1": "input_param3",
                    "2": "arg3",
                    "22": "data"
                },
                "process_and_free_string_0010e8a9": {
                    "2": "process_and_free_string2",
                    "5": "process_and_free_string"
                },
                "process_and_free_string_0010ebb0": {
                    "1": "process_and_free_string_with_options",
                    "6": "process_and_free_string"
                },
                "process_and_send_data_0010e918": {
                    "7": "process_and_send_data"
                },
                "process_and_store_string_0010e6a8": {
                    "7": "process_and_store_string"
                },
                "process_data_00112c1f": {
                    "1": "process_data_item",
                    "2": "process_data_function"
                },
                "process_files_00112502": {
                    "7": "process_files"
                },
                "process_string_0010e9a0": {
                    "7": "process_string"
                },
                "process_string_0010eafe": {
                    "1": "process_string_func2",
                    "2": "process_string"
                },
                "puVar4": {
                    "1": "next_node",
                    "10": "ptr1",
                    "2": "list_ptr",
                    "3": "current_ptr",
                    "4": "current_node"
                },
                "puVar5": {
                    "1": "pointer_var2",
                    "10": "ptr2",
                    "3": "ptr_var2",
                    "4": "data_ptr"
                },
                "reverse_and_process_string_0010e7c2": {
                    "7": "reverse_and_process_string"
                },
                "uVar3": {
                    "13": "result",
                    "15": "output",
                    "3": "return_value"
                }
            },
            "called": [
                "FUN_0010ebb0",
                "FUN_0010e8a9",
                "FUN_0010e842",
                "FUN_0010e9a0",
                "FUN_0010eafe",
                "FUN_00113a4d",
                "abort",
                "FUN_00112502",
                "FUN_00108f05",
                "FUN_0010e7c2",
                "FUN_0010e918",
                "FUN_0010e6a8",
                "FUN_00112c1f"
            ],
            "calling": [
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "code": "\nundefined8 process_data_001135a5(undefined8 input1,undefined8 input2,long data)\n\n{\n  int index;\n  char result;\n  undefined8 output;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  \n  if (6 < *(uint *)(data + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(data + 0x14)) {\n  case 0:\n    result = process_data_001135a5_function(input1,input2,*(undefined8 *)(data + 0x20),data);\n    if (result != '\\0') {\n      output = process_and_store_string(input2,*(undefined8 *)(data + 8));\n      return output;\n    }\n    break;\n  case 1:\n    result = process_data_001135a5_function(input1,input2,*(undefined8 *)(data + 0x20),data);\n    if (result != '\\0') {\n      output = reverse_and_process_string(input2,*(undefined8 *)(data + 8));\n      return output;\n    }\n    break;\n  case 2:\n    result = process_data_001135a5_function(input1,input2,*(undefined8 *)(*(long *)(data + 0x20) + 8),0);\n    if (result != '\\0') {\n      output = process_string(input2,*(undefined8 *)(data + 8),**(undefined4 **)(data + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(data + 0x20) + 4));\n      return output;\n    }\n    break;\n  case 3:\n    ptr2 = *(undefined8 **)(data + 0x20);\n    index = *(int *)(data + 0x18);\n    output = *(undefined8 *)(data + 8);\n    result = process_files(input1,input2,*(undefined8 *)(ptr2[2] + 0x18));\n    if (((result != '\\0') && (result = process_data_001135a5_function(input1,input2,*ptr2,0), result != '\\0')) &&\n       (result = process_string(input2,output,index == 2), result != '\\0')) {\n      for (ptr1 = (undefined8 *)ptr2[1]; ptr1 != (undefined8 *)0x0;\n          ptr1 = (undefined8 *)*ptr1) {\n        result = process_data_001135a5_function(input1,input2,ptr1[2],0);\n        if (result == '\\0') {\n          return 0;\n        }\n        result = process_and_free_string(input2,ptr1[1],*(undefined4 *)(ptr1 + 3));\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      ptr2 = (undefined8 *)ptr2[2];\n      while( true ) {\n        if (ptr2 == (undefined8 *)0x0) {\n          output = get_one(input2);\n          return output;\n        }\n        result = process_files_and_data_00113a4d(input1,input2,ptr2);\n        if (result == '\\0') break;\n        ptr2 = (undefined8 *)*ptr2;\n      }\n    }\n    break;\n  case 4:\n    output = format_and_process_string(input2,*(undefined8 *)(data + 8),*(undefined8 *)(data + 0x20));\n    return output;\n  case 5:\n    output = process_and_free_string(*(undefined8 *)(data + 0x20),input2,*(undefined8 *)(data + 8));\n    return output;\n  case 6:\n    result = process_data_001135a5_function(input1,input2,**(undefined8 **)(data + 0x20),0);\n    if (result != '\\0') {\n      output = process_and_send_data(input2,*(undefined8 *)(data + 8),\n                           *(undefined8 *)(*(long *)(data + 0x20) + 8));\n      return output;\n    }\n  }\n  return 0;\n}\n\n",
            "code_backup": "\nundefined8 FUN_001135a5(undefined8 param_1,undefined8 param_2,long param_3)\n\n{\n  int iVar1;\n  char cVar2;\n  undefined8 uVar3;\n  undefined8 *puVar4;\n  undefined8 *puVar5;\n  \n  if (6 < *(uint *)(param_3 + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(param_3 + 0x14)) {\n  case 0:\n    cVar2 = process_data_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 0x20),param_3);\n    if (cVar2 != '\\0') {\n      uVar3 = process_and_store_string_0010e6a8(param_2,*(undefined8 *)(param_3 + 8));\n      return uVar3;\n    }\n    break;\n  case 1:\n    cVar2 = process_data_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 0x20),param_3);\n    if (cVar2 != '\\0') {\n      uVar3 = reverse_and_process_string_0010e7c2(param_2,*(undefined8 *)(param_3 + 8));\n      return uVar3;\n    }\n    break;\n  case 2:\n    cVar2 = process_data_00112c1f(param_1,param_2,*(undefined8 *)(*(long *)(param_3 + 0x20) + 8),0);\n    if (cVar2 != '\\0') {\n      uVar3 = process_string_0010e9a0(param_2,*(undefined8 *)(param_3 + 8),**(undefined4 **)(param_3 + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(param_3 + 0x20) + 4));\n      return uVar3;\n    }\n    break;\n  case 3:\n    puVar5 = *(undefined8 **)(param_3 + 0x20);\n    iVar1 = *(int *)(param_3 + 0x18);\n    uVar3 = *(undefined8 *)(param_3 + 8);\n    cVar2 = process_files_00112502(param_1,param_2,*(undefined8 *)(puVar5[2] + 0x18));\n    if (((cVar2 != '\\0') && (cVar2 = process_data_00112c1f(param_1,param_2,*puVar5,0), cVar2 != '\\0')) &&\n       (cVar2 = process_string_0010eafe(param_2,uVar3,iVar1 == 2), cVar2 != '\\0')) {\n      for (puVar4 = (undefined8 *)puVar5[1]; puVar4 != (undefined8 *)0x0;\n          puVar4 = (undefined8 *)*puVar4) {\n        cVar2 = process_data_00112c1f(param_1,param_2,puVar4[2],0);\n        if (cVar2 == '\\0') {\n          return 0;\n        }\n        cVar2 = process_and_free_string_0010ebb0(param_2,puVar4[1],*(undefined4 *)(puVar4 + 3));\n        if (cVar2 == '\\0') {\n          return 0;\n        }\n      }\n      puVar5 = (undefined8 *)puVar5[2];\n      while( true ) {\n        if (puVar5 == (undefined8 *)0x0) {\n          uVar3 = get_one_00108f05(param_2);\n          return uVar3;\n        }\n        cVar2 = FUNC_00113a4d(param_1,param_2,puVar5);\n        if (cVar2 == '\\0') break;\n        puVar5 = (undefined8 *)*puVar5;\n      }\n    }\n    break;\n  case 4:\n    uVar3 = format_and_process_string_0010e842(param_2,*(undefined8 *)(param_3 + 8),*(undefined8 *)(param_3 + 0x20));\n    return uVar3;\n  case 5:\n    uVar3 = process_and_free_string_0010e8a9(*(undefined8 *)(param_3 + 0x20),param_2,*(undefined8 *)(param_3 + 8));\n    return uVar3;\n  case 6:\n    cVar2 = process_data_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 0x20),0);\n    if (cVar2 != '\\0') {\n      uVar3 = process_and_send_data_0010e918(param_2,*(undefined8 *)(param_3 + 8),\n                           *(undefined8 *)(*(long *)(param_3 + 0x20) + 8));\n      return uVar3;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_001135a5",
            "entrypoint": "0x001135a5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001135a5": "process_data_001135a5",
                "cVar2": "result",
                "format_and_process_string_0010e842": "format_and_process_string",
                "get_one_00108f05": "get_one",
                "iVar1": "index",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "process_and_free_string_0010e8a9": "process_and_free_string",
                "process_and_free_string_0010ebb0": "process_and_free_string",
                "process_and_send_data_0010e918": "process_and_send_data",
                "process_and_store_string_0010e6a8": "process_and_store_string",
                "process_data_00112c1f": "process_data_function",
                "process_files_00112502": "process_files",
                "process_string_0010e9a0": "process_string",
                "process_string_0010eafe": "process_string",
                "puVar4": "ptr1",
                "puVar5": "ptr2",
                "reverse_and_process_string_0010e7c2": "reverse_and_process_string",
                "uVar3": "output"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011378f": {
            "additional_data": {
                "FUN_0011378f": {
                    "1": "extract_bfd_files",
                    "2": "parse_binary"
                },
                "__dest": {
                    "1": "destination_str",
                    "12": "destination",
                    "2": "destination_ptr",
                    "7": "destination_string"
                },
                "_local_78": {
                    "1": "temp_variable_5"
                },
                "auVar1": {
                    "1": "temp_buffer",
                    "2": "temp_var1",
                    "3": "temp_variable",
                    "9": "temp_array"
                },
                "bVar12": {
                    "1": "temp_byte",
                    "14": "flag",
                    "2": "byte_value",
                    "3": "byte_var"
                },
                "cVar2": {
                    "1": "temp_char",
                    "10": "result",
                    "2": "char_result",
                    "9": "status"
                },
                "lVar7": {
                    "1": "long_variable1",
                    "16": "loop_counter",
                    "2": "counter",
                    "3": "loop_index",
                    "4": "loop_variable"
                },
                "local_1e8": {
                    "1": "var_8",
                    "2": "array_variable",
                    "4": "array1"
                },
                "local_1f0": {
                    "1": "value7",
                    "2": "var_7",
                    "6": "var7"
                },
                "local_1f8": {
                    "1": "var_8",
                    "2": "var_6",
                    "6": "var6"
                },
                "local_220": {
                    "1": "temp_variable_array_2",
                    "10": "hash_table1",
                    "2": "hash_table_1"
                },
                "local_228": {
                    "1": "temp_variable_1",
                    "2": "var_6",
                    "6": "var5"
                },
                "local_238": {
                    "1": "local_undefined_1",
                    "2": "temp_buffer"
                },
                "local_248": {
                    "1": "value1",
                    "3": "var_1",
                    "8": "var1"
                },
                "local_250": {
                    "1": "allocated_size",
                    "3": "buffer",
                    "5": "buffer_size"
                },
                "local_258": {
                    "1": "temp_variable_1",
                    "2": "input_files_ptr",
                    "4": "input"
                },
                "local_58": {
                    "1": "temp_variable_13",
                    "2": "var10",
                    "4": "var12"
                },
                "local_60": {
                    "1": "temp_variable_12",
                    "2": "var_13",
                    "4": "var11"
                },
                "local_68": {
                    "1": "var_10",
                    "2": "var_12",
                    "4": "var10"
                },
                "local_78": {
                    "1": "var_10",
                    "4": "var8"
                },
                "local_a0": {
                    "1": "temp_array3",
                    "4": "hash_table2"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "input_list",
                    "3": "input_param1",
                    "6": "input_files"
                },
                "param_2": {
                    "1": "output_records",
                    "2": "output_array",
                    "3": "input_param2"
                },
                "param_3": {
                    "1": "length_ptr",
                    "2": "result_ptr",
                    "3": "output_param1"
                },
                "param_4": {
                    "1": "length_ptr",
                    "2": "hash_value",
                    "3": "output_param2"
                },
                "param_5": {
                    "1": "strings_list_ptr",
                    "2": "string_list",
                    "3": "file_names",
                    "5": "output_strings"
                },
                "param_6": {
                    "1": "output_flag",
                    "2": "output_status",
                    "3": "output_param4"
                },
                "plVar11": {
                    "1": "nested_ptr2",
                    "2": "linked_list_ptr",
                    "4": "ptr5"
                },
                "process_files_00112502": {
                    "1": "process_files"
                },
                "process_string_0010e2f0": {
                    "1": "process_string"
                },
                "puVar10": {
                    "1": "current_file",
                    "2": "linked_list_ptr",
                    "4": "ptr4"
                },
                "puVar5": {
                    "1": "pointer_variable1",
                    "2": "string_pointer",
                    "3": "dest_ptr",
                    "4": "temp_ptr"
                },
                "puVar8": {
                    "1": "loop_ptr",
                    "2": "ptr",
                    "3": "loop_variable",
                    "4": "ptr2"
                },
                "puVar9": {
                    "1": "temp_array_ptr",
                    "2": "array_pointer",
                    "4": "ptr3",
                    "7": "array_ptr"
                },
                "sVar6": {
                    "1": "size_variable",
                    "22": "string_length",
                    "4": "length"
                },
                "set_param_and_process_string_0010e439": {
                    "1": "set_param_and_process_string"
                },
                "strcpy": {
                    "1": "string_copy"
                },
                "thunk_set_param_and_process_string_0010e439": {
                    "1": "thunk_set_param_and_process_string"
                },
                "uStack_23c": {
                    "1": "constant_variable_2",
                    "3": "var_4",
                    "8": "var4"
                },
                "uStack_240": {
                    "1": "temp_data_3",
                    "3": "var_3",
                    "8": "var3"
                },
                "uStack_244": {
                    "1": "temp_variable_1",
                    "3": "var_2",
                    "8": "var2"
                },
                "uStack_4c": {
                    "1": "temp_variable_13",
                    "2": "var13",
                    "4": "var15"
                },
                "uStack_50": {
                    "1": "temp_variable_12",
                    "2": "var_16",
                    "4": "var14"
                },
                "uStack_54": {
                    "1": "temp_variable_11",
                    "2": "var_15",
                    "4": "var13"
                },
                "uStack_70": {
                    "1": "stack_var",
                    "2": "var_11",
                    "4": "var9"
                },
                "uVar3": {
                    "1": "undefined4_result",
                    "26": "error_code"
                },
                "uVar4": {
                    "1": "temp_variable3",
                    "27": "error_message"
                },
                "unique0x100000e9": {
                    "1": "temp_variable_6"
                },
                "unique0x100000ed": {
                    "1": "temp_variable_7"
                }
            },
            "called": [
                "xmalloc",
                "FUN_00119ed0",
                "FUN_0010e439",
                "FUN_00112502",
                "bfd_errmsg",
                "strcpy",
                "bfd_get_error",
                "strlen",
                "FUN_0010e2f0",
                "thunk_FUN_0010e439",
                "bfd_hash_table_init",
                "FUN_0010bb52",
                "FUN_001135a5"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nundefined4\nparse_binary_0011378f(undefined8 *input_files,undefined8 *input_param2,long *output_param1,undefined8 *output_param2,\n            undefined8 *output_strings,undefined8 *output_param4)\n\n{\n  undefined temp_array [16];\n  char result;\n  undefined4 error_code;\n  undefined8 error_message;\n  undefined *temp_ptr;\n  size_t string_length;\n  long loop_counter;\n  undefined8 *ptr2;\n  undefined4 *array_ptr;\n  char *destination;\n  undefined8 *ptr4;\n  long *ptr5;\n  byte flag;\n  undefined8 *input;\n  long allocated_memory;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined local_array [16];\n  undefined8 var5;\n  undefined hash_table1 [40];\n  undefined8 var6;\n  undefined8 var7;\n  undefined4 array1 [82];\n  undefined hash_table2 [40];\n  undefined var8 [8];\n  undefined8 var9;\n  undefined8 var10;\n  undefined4 var11;\n  undefined4 var12;\n  undefined4 var13;\n  undefined4 var14;\n  undefined4 var15;\n  \n  flag = 0;\n  var1 = 0;\n  var2 = 0;\n  var3 = 500;\n  var4 = 0;\n  input = input_files;\n  allocated_memory = xmalloc(500);\n  var5 = 1;\n  local_array = ZEXT816(0);\n  result = bfd_hash_table_init(hash_table1,allocate_and_initialize_hash_0010bb52,0x30);\n  if ((result == '\\0') || (result = bfd_hash_table_init(hash_table2,allocate_and_initialize_hash_0010bb52,0x30), result == '\\0')) {\n    error_code = bfd_get_error();\n    error_message = bfd_errmsg(error_code);\n    print_error_message_00119ed0(\"bfd_hash_table_init_failed: %s\",error_message);\n  }\n  else {\n    var6 = 0;\n    temp_variable_6 = 0xffffffff;\n    var8 = (undefined  [8])0xffffffffffffffff;\n    temp_variable_7 = 0xffffffff;\n    array_ptr = array1;\n    for (loop_counter = 0x52; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *array_ptr = 0;\n      array_ptr = array_ptr + (ulong)flag * -2 + 1;\n    }\n    var10 = 0;\n    var11 = 0;\n    var7 = 1;\n    var12 = 0;\n    var13 = 0;\n    var14 = 0xffffffff;\n    var15 = 0xffffffff;\n    result = process_string(&input,0,0,0,0);\n    temp_array = temp_variable_5;\n    if (result != '\\0') {\n      var8._4_4_ = var2;\n      var8._0_4_ = var1;\n      var9 = temp_array._8_8_;\n      result = process_string(&input,100,0,0,*input_files);\n      if (result != '\\0') {\n        *(int *)(input_param2 + 6) = *(int *)(input_param2 + 6) + 1;\n        input_param2[10] = 0;\n        ptr4 = (undefined8 *)*input_param2;\n        *(undefined4 *)(input_param2 + 7) = *(undefined4 *)((long)input_param2 + 0x34);\n        for (; ptr4 != (undefined8 *)0x0; ptr4 = (undefined8 *)*ptr4) {\n          input_param2[8] = ptr4[2];\n          *(undefined4 *)(input_param2 + 9) = 0;\n          result = thunk_set_param_and_process_string(&input,*(undefined8 *)(ptr4[1] + 8));\n          if (result == '\\0') {\n            return 0;\n          }\n          ptr5 = (long *)ptr4[1];\n          if (ptr5 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)ptr5[2] != (undefined8 *)0x0) {\n                for (ptr2 = *(undefined8 **)(undefined8 *)ptr5[2]; ptr2 != (undefined8 *)0x0;\n                    ptr2 = (undefined8 *)*ptr2) {\n                  result = process_data_001135a5(input_param2,&input);\n                  if (result == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              ptr5 = (long *)*ptr5;\n              if (ptr5 == (long *)0x0) break;\n              result = set_param_and_process_string(&input,ptr5[1]);\n              if (result == '\\0') {\n                return 0;\n              }\n            }\n          }\n          result = process_files(input_param2,&input,0xffffffffffffffff);\n          if (result == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(var15,var14) == -1) &&\n           (error_code = process_string(&input,100,0,var10,0), (char)error_code != '\\0')) {\n          (**(code **)(input_files[1] + 0x50))(var5,allocated_memory + 8);\n          *output_param1 = allocated_memory;\n          *output_param2 = CONCAT44(var2,var1);\n          *output_param4 = var5;\n          temp_ptr = (undefined *)xmalloc();\n          *temp_ptr = 0;\n          destination = temp_ptr + 1;\n          *output_strings = temp_ptr;\n          for (loop_counter = local_array._0_8_; loop_counter != 0; loop_counter = *(long *)(loop_counter + 0x18)) {\n            strcpy(destination,*(char **)(loop_counter + 8));\n            string_length = strlen(destination);\n            destination = destination + string_length + 1;\n          }\n          return error_code;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "code_backup": "\nundefined4\nFUN_0011378f(undefined8 *param_1,undefined8 *param_2,long *param_3,undefined8 *param_4,\n            undefined8 *param_5,undefined8 *param_6)\n\n{\n  undefined auVar1 [16];\n  char cVar2;\n  undefined4 uVar3;\n  undefined8 uVar4;\n  undefined *puVar5;\n  size_t sVar6;\n  long lVar7;\n  undefined8 *puVar8;\n  undefined4 *puVar9;\n  char *__dest;\n  undefined8 *puVar10;\n  long *plVar11;\n  byte bVar12;\n  undefined8 *local_258;\n  long local_250;\n  undefined4 local_248;\n  undefined4 uStack_244;\n  undefined4 uStack_240;\n  undefined4 uStack_23c;\n  undefined local_238 [16];\n  undefined8 local_228;\n  undefined local_220 [40];\n  undefined8 local_1f8;\n  undefined8 local_1f0;\n  undefined4 local_1e8 [82];\n  undefined local_a0 [40];\n  undefined local_78 [8];\n  undefined8 uStack_70;\n  undefined8 local_68;\n  undefined4 local_60;\n  undefined4 local_58;\n  undefined4 uStack_54;\n  undefined4 uStack_50;\n  undefined4 uStack_4c;\n  \n  bVar12 = 0;\n  local_248 = 0;\n  uStack_244 = 0;\n  uStack_240 = 500;\n  uStack_23c = 0;\n  local_258 = param_1;\n  local_250 = xmalloc(500);\n  local_228 = 1;\n  local_238 = ZEXT816(0);\n  cVar2 = bfd_hash_table_init(local_220,allocate_and_initialize_hash_0010bb52,0x30);\n  if ((cVar2 == '\\0') || (cVar2 = bfd_hash_table_init(local_a0,allocate_and_initialize_hash_0010bb52,0x30), cVar2 == '\\0')) {\n    uVar3 = bfd_get_error();\n    uVar4 = bfd_errmsg(uVar3);\n    print_error_message_00119ed0(\"bfd_hash_table_init_failed: %s\",uVar4);\n  }\n  else {\n    local_1f8 = 0;\n    unique0x100000e9 = 0xffffffff;\n    local_78 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    puVar9 = local_1e8;\n    for (lVar7 = 0x52; lVar7 != 0; lVar7 = lVar7 + -1) {\n      *puVar9 = 0;\n      puVar9 = puVar9 + (ulong)bVar12 * -2 + 1;\n    }\n    local_68 = 0;\n    local_60 = 0;\n    local_1f0 = 1;\n    local_58 = 0;\n    uStack_54 = 0;\n    uStack_50 = 0xffffffff;\n    uStack_4c = 0xffffffff;\n    cVar2 = process_string_0010e2f0(&local_258,0,0,0,0);\n    auVar1 = _local_78;\n    if (cVar2 != '\\0') {\n      local_78._4_4_ = uStack_244;\n      local_78._0_4_ = local_248;\n      uStack_70 = auVar1._8_8_;\n      cVar2 = process_string_0010e2f0(&local_258,100,0,0,*param_1);\n      if (cVar2 != '\\0') {\n        *(int *)(param_2 + 6) = *(int *)(param_2 + 6) + 1;\n        param_2[10] = 0;\n        puVar10 = (undefined8 *)*param_2;\n        *(undefined4 *)(param_2 + 7) = *(undefined4 *)((long)param_2 + 0x34);\n        for (; puVar10 != (undefined8 *)0x0; puVar10 = (undefined8 *)*puVar10) {\n          param_2[8] = puVar10[2];\n          *(undefined4 *)(param_2 + 9) = 0;\n          cVar2 = thunk_set_param_and_process_string_0010e439(&local_258,*(undefined8 *)(puVar10[1] + 8));\n          if (cVar2 == '\\0') {\n            return 0;\n          }\n          plVar11 = (long *)puVar10[1];\n          if (plVar11 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)plVar11[2] != (undefined8 *)0x0) {\n                for (puVar8 = *(undefined8 **)(undefined8 *)plVar11[2]; puVar8 != (undefined8 *)0x0;\n                    puVar8 = (undefined8 *)*puVar8) {\n                  cVar2 = FUNC_001135a5(param_2,&local_258);\n                  if (cVar2 == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              plVar11 = (long *)*plVar11;\n              if (plVar11 == (long *)0x0) break;\n              cVar2 = set_param_and_process_string_0010e439(&local_258,plVar11[1]);\n              if (cVar2 == '\\0') {\n                return 0;\n              }\n            }\n          }\n          cVar2 = process_files_00112502(param_2,&local_258,0xffffffffffffffff);\n          if (cVar2 == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(uStack_4c,uStack_50) == -1) &&\n           (uVar3 = process_string_0010e2f0(&local_258,100,0,local_68,0), (char)uVar3 != '\\0')) {\n          (**(code **)(param_1[1] + 0x50))(local_228,local_250 + 8);\n          *param_3 = local_250;\n          *param_4 = CONCAT44(uStack_244,local_248);\n          *param_6 = local_228;\n          puVar5 = (undefined *)xmalloc();\n          *puVar5 = 0;\n          __dest = puVar5 + 1;\n          *param_5 = puVar5;\n          for (lVar7 = local_238._0_8_; lVar7 != 0; lVar7 = *(long *)(lVar7 + 0x18)) {\n            strcpy(__dest,*(char **)(lVar7 + 8));\n            sVar6 = strlen(__dest);\n            __dest = __dest + sVar6 + 1;\n          }\n          return uVar3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "parse_binary_0011378f",
            "entrypoint": "0x0011378f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011378f": "parse_binary_0011378f",
                "__dest": "destination",
                "_local_78": "temp_variable_5",
                "auVar1": "temp_array",
                "bVar12": "flag",
                "cVar2": "result",
                "lVar7": "loop_counter",
                "local_1e8": "array1",
                "local_1f0": "var7",
                "local_1f8": "var6",
                "local_220": "hash_table1",
                "local_228": "var5",
                "local_238": "local_array",
                "local_248": "var1",
                "local_250": "allocated_memory",
                "local_258": "input",
                "local_58": "var12",
                "local_60": "var11",
                "local_68": "var10",
                "local_78": "var8",
                "local_a0": "hash_table2",
                "param_1": "input_files",
                "param_2": "input_param2",
                "param_3": "output_param1",
                "param_4": "output_param2",
                "param_5": "output_strings",
                "param_6": "output_param4",
                "plVar11": "ptr5",
                "process_files_00112502": "process_files",
                "process_string_0010e2f0": "process_string",
                "puVar10": "ptr4",
                "puVar5": "temp_ptr",
                "puVar8": "ptr2",
                "puVar9": "array_ptr",
                "sVar6": "string_length",
                "set_param_and_process_string_0010e439": "set_param_and_process_string",
                "strcpy": "string_copy",
                "thunk_set_param_and_process_string_0010e439": "thunk_set_param_and_process_string",
                "uStack_23c": "var4",
                "uStack_240": "var3",
                "uStack_244": "var2",
                "uStack_4c": "var15",
                "uStack_50": "var14",
                "uStack_54": "var13",
                "uStack_70": "var9",
                "uVar3": "error_code",
                "uVar4": "error_message",
                "unique0x100000e9": "temp_variable_6",
                "unique0x100000ed": "temp_variable_7"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113a4d": {
            "additional_data": {
                "FUN_00113a4d": {
                    "1": "recursive_file_processing",
                    "2": "process_and_update_data",
                    "3": "process_recursive_files",
                    "4": "process_recursive",
                    "5": "process_files_recursive",
                    "7": "process_files_and_data"
                },
                "auVar4": {
                    "1": "file_data_result_array",
                    "2": "temp_data",
                    "3": "file_processing_result",
                    "4": "file_status",
                    "7": "file_result"
                },
                "cVar1": {
                    "1": "success",
                    "17": "result",
                    "2": "file_process_result",
                    "3": "file_result",
                    "4": "status"
                },
                "param_1": {
                    "1": "input1",
                    "2": "input_param_1",
                    "3": "file_param",
                    "4": "arg1",
                    "5": "file_path"
                },
                "param_2": {
                    "1": "input2",
                    "2": "input_param_2",
                    "3": "file_2",
                    "4": "file_name"
                },
                "param_3": {
                    "1": "file_data_param",
                    "2": "file_data",
                    "3": "data_ptr"
                },
                "param_4": {
                    "1": "unknown_param4",
                    "2": "input_param_4",
                    "4": "arg4",
                    "7": "param_4"
                },
                "param_5": {
                    "1": "result_ptr",
                    "2": "input_param_5",
                    "4": "arg5",
                    "7": "param_5"
                },
                "process_data_0010ec73": {
                    "1": "process_data"
                },
                "process_data_001135a5": {
                    "1": "process_file_data"
                },
                "process_files_00112502": {
                    "1": "process_files"
                },
                "puVar3": {
                    "1": "iter_ptr",
                    "2": "file_ptr",
                    "3": "current_file",
                    "6": "current_ptr",
                    "8": "ptr"
                },
                "uVar2": {
                    "1": "updated_max",
                    "4": "updated_value",
                    "5": "update_result",
                    "6": "result",
                    "7": "updated_result"
                },
                "update_max_and_process_string_0010ed2c": {
                    "1": "update_and_process_string"
                }
            },
            "called": [
                "FUN_0010ed2c",
                "FUN_00113a4d",
                "FUN_00112502",
                "FUN_001135a5",
                "FUN_0010ec73"
            ],
            "calling": [
                "FUN_00113a4d",
                "FUN_001135a5"
            ],
            "code": "\nundefined8\nprocess_files_and_data_00113a4d(undefined8 file_path,undefined8 arg2,long data_ptr,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  char result;\n  undefined8 updated_result;\n  undefined8 *ptr;\n  undefined file_result [16];\n  \n  result = process_files(file_path,arg2,*(undefined8 *)(data_ptr + 0x18));\n  if ((result != '\\0') &&\n     (((*(long *)(data_ptr + 0x28) == 0 && (*(long *)(data_ptr + 8) != 0)) ||\n      (result = process_data(arg2,*(undefined8 *)(data_ptr + 0x18)), result != '\\0')))) {\n    if (*(undefined8 **)(data_ptr + 0x28) != (undefined8 *)0x0) {\n      for (ptr = (undefined8 *)**(undefined8 **)(data_ptr + 0x28); ptr != (undefined8 *)0x0;\n          ptr = (undefined8 *)*ptr) {\n        result = process_file_data(file_path,arg2,ptr);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (ptr = *(undefined8 **)(data_ptr + 0x10); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      result = process_files_and_data_00113a4d(file_path,arg2,ptr);\n      if (result == '\\0') {\n        return 0;\n      }\n    }\n    file_result = process_files(file_path,arg2,*(undefined8 *)(data_ptr + 0x20));\n    if (file_result[0] != '\\0') {\n      if ((*(long *)(data_ptr + 0x28) == 0) && (*(long *)(data_ptr + 8) != 0)) {\n        return file_result._0_8_;\n      }\n      updated_result = update_and_process_string(arg2,*(undefined8 *)(data_ptr + 0x20),file_result._8_8_,param_5);\n      return updated_result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_files_and_data_00113a4d",
            "entrypoint": "0x00113a4d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113a4d": "process_files_and_data_00113a4d",
                "auVar4": "file_result",
                "cVar1": "result",
                "param_1": "file_path",
                "param_2": "arg2",
                "param_3": "data_ptr",
                "process_data_0010ec73": "process_data",
                "process_data_001135a5": "process_file_data",
                "process_files_00112502": "process_files",
                "puVar3": "ptr",
                "uVar2": "updated_result",
                "update_max_and_process_string_0010ed2c": "update_and_process_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b1e": {
            "additional_data": {
                "FUN_00113b1e": {
                    "1": "reverse_and_get_value",
                    "2": "process_data",
                    "3": "get_real_type",
                    "7": "extract_real_value"
                },
                "auVar1": {
                    "1": "output1",
                    "2": "output_1",
                    "3": "output_data",
                    "4": "result_1"
                },
                "auVar1._0_8_": {
                    "1": "default_return_low"
                },
                "auVar1._8_8_": {
                    "1": "default_return_high"
                },
                "auVar4": {
                    "1": "result_with_optional",
                    "2": "output_2",
                    "3": "result_2",
                    "9": "result"
                },
                "param_1": {
                    "1": "data_address",
                    "11": "input_param",
                    "2": "input_data",
                    "4": "binary_address",
                    "8": "input_value"
                },
                "param_2": {
                    "1": "temp_var",
                    "12": "unused_param",
                    "2": "size",
                    "3": "unused",
                    "5": "unused_parameter"
                },
                "param_3": {
                    "1": "param_value_1",
                    "4": "output_param",
                    "7": "default_value"
                },
                "param_4": {
                    "1": "unused_2",
                    "2": "result_param",
                    "3": "output_param"
                },
                "piVar2": {
                    "1": "type_info_ptr",
                    "11": "type_info",
                    "2": "real_type_info",
                    "4": "real_type",
                    "5": "real_type_ptr"
                },
                "uVar3": {
                    "1": "extracted_data",
                    "4": "extracted_value",
                    "7": "real_value",
                    "9": "result"
                }
            },
            "called": [
                "FUN_00112b6e"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010d559"
            ],
            "code": "\nundefined  [16] extract_real_value_00113b1e(long input_param,undefined8 unused_param,ulong default_value,undefined8 output_value)\n\n{\n  undefined result_1 [16];\n  int *type_info;\n  undefined8 result;\n  undefined result [16];\n  \n  if (input_param != 0) {\n    type_info = (int *)get_real_type_00112b6e(input_param,0);\n    if ((type_info == (int *)0x0) || (3 < *type_info - 7U)) {\n      result = 0;\n    }\n    else {\n      result = **(undefined8 **)(type_info + 4);\n    }\n    result._8_8_ = output_value;\n    result._0_8_ = result;\n    return result;\n  }\n  default_return_high = 0;\n  default_return_low = default_value;\n  return result_1 << 0x40;\n}\n\n",
            "current_name": "extract_real_value_00113b1e",
            "entrypoint": "0x00113b1e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b1e": "extract_real_value_00113b1e",
                "auVar1": "result_1",
                "auVar1._0_8_": "default_return_low",
                "auVar1._8_8_": "default_return_high",
                "auVar4": "result",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "default_value",
                "param_4": "output_value",
                "piVar2": "type_info",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b4a": {
            "additional_data": {
                "0": {
                    "1": "initial_value"
                },
                "0x10": {
                    "1": "offset"
                },
                "0x15": {
                    "1": "memory_size"
                },
                "FUN_00113b4a": {
                    "1": "initialize_memory_or_zero",
                    "13": "initialize_memory",
                    "2": "initialize_memory_for_param",
                    "4": "initialize_memory_if_not_zero",
                    "5": "initialize_memory_with_param"
                },
                "initialize_memory_00112904": {
                    "2": "allocate_memory"
                },
                "lVar1": {
                    "1": "memory_allocation",
                    "12": "memory_address",
                    "2": "allocated_memory",
                    "3": "memory_block",
                    "9": "memory_ptr"
                },
                "param_1": {
                    "1": "input_val",
                    "22": "input_value",
                    "4": "input_param"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_memory_00113b4a(long input_value)\n\n{\n  long memory_address;\n  \n  if (input_value != 0) {\n    memory_address = allocate_memory(0x15,0);\n    if (memory_address == 0) {\n      memory_address = 0;\n    }\n    else {\n      *(long *)(memory_address + 0x10) = input_value;\n    }\n    return memory_address;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_memory_00113b4a",
            "entrypoint": "0x00113b4a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b4a": "initialize_memory_00113b4a",
                "initialize_memory_00112904": "allocate_memory",
                "lVar1": "memory_address",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b71": {
            "additional_data": {
                "0": {
                    "1": "initial_value"
                },
                "0x10": {
                    "1": "offset"
                },
                "0x14": {
                    "1": "size"
                },
                "FUN_00113b71": {
                    "1": "initialize_memory_with_param",
                    "2": "initialize_memory_for_param",
                    "3": "initialize_memory_if_nonzero",
                    "9": "initialize_memory"
                },
                "initialize_memory_00112904": {
                    "1": "initialize_memory"
                },
                "lVar1": {
                    "1": "memory_block_address",
                    "2": "memory_pointer",
                    "6": "memory_block",
                    "8": "memory_address",
                    "9": "memory_ptr"
                },
                "param_1": {
                    "1": "input_parameter",
                    "19": "input_value",
                    "2": "memory_size",
                    "3": "size",
                    "4": "input_param"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_memory_00113b71(long input_value)\n\n{\n  long memory_ptr;\n  \n  if (input_value != 0) {\n    memory_ptr = initialize_memory_00113b71(0x14,0);\n    if (memory_ptr == 0) {\n      memory_ptr = 0;\n    }\n    else {\n      *(long *)(memory_ptr + 0x10) = input_value;\n    }\n    return memory_ptr;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_memory_00113b71",
            "entrypoint": "0x00113b71",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b71": "initialize_memory_00113b71",
                "initialize_memory_00112904": "initialize_memory",
                "lVar1": "memory_ptr",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b98": {
            "additional_data": {
                "FUN_00113b98": {
                    "1": "initialize_memory_allocation",
                    "18": "initialize_memory",
                    "2": "initialize_memory_and_return_pointer",
                    "3": "initialize_and_allocate_memory"
                },
                "lVar1": {
                    "1": "memory_location",
                    "10": "memory_address",
                    "2": "allocated_memory",
                    "3": "memory_pointer",
                    "5": "memory_ptr"
                },
                "param_1": {
                    "1": "input_param1",
                    "2": "input_1",
                    "3": "memory_size",
                    "6": "input1"
                },
                "param_2": {
                    "1": "size_param",
                    "2": "input_2",
                    "3": "value1",
                    "4": "value_1",
                    "5": "param_2",
                    "6": "input2"
                },
                "param_3": {
                    "1": "input_param3",
                    "2": "input_3",
                    "3": "param3",
                    "4": "value_2",
                    "5": "param_3",
                    "6": "input3"
                },
                "param_4": {
                    "1": "param_4_value",
                    "2": "input_4",
                    "3": "input_param_4",
                    "4": "undefined_param",
                    "5": "param_4",
                    "6": "input4"
                },
                "plVar2": {
                    "1": "new_block",
                    "2": "new_pointer",
                    "3": "memory_block",
                    "8": "allocated_memory"
                },
                "xmalloc": {
                    "3": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_memory_00113b98(long input1,long input2,long input3,undefined input4)\n\n{\n  long memory_address;\n  long *allocated_memory;\n  \n  if ((input1 != 0) && (memory_address = initialize_memory_00113b98_00112904(0x13,0), memory_address != 0)) {\n    allocated_memory = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)allocated_memory + 0x19) = 0;\n    *allocated_memory = input1;\n    *(undefined4 *)((long)allocated_memory + 0x1c) = 0;\n    allocated_memory[1] = input2;\n    allocated_memory[2] = input3;\n    *(undefined *)(allocated_memory + 3) = input4;\n    *(long **)(memory_address + 0x10) = allocated_memory;\n    return memory_address;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_memory_00113b98",
            "entrypoint": "0x00113b98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b98": "initialize_memory_00113b98",
                "lVar1": "memory_address",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "plVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113bfa": {
            "additional_data": {
                "FUN_00113bfa": {
                    "1": "initialize_memory_and_allocate",
                    "2": "initialize_memory_with_params",
                    "6": "initialize_memory_and_store_params",
                    "9": "initialize_memory"
                },
                "initialize_memory_00112904": {
                    "1": "initialize_memory"
                },
                "lVar1": {
                    "1": "mem_initialized",
                    "3": "allocated_memory",
                    "4": "memory_block",
                    "5": "memory_ptr",
                    "7": "memory_address"
                },
                "param_1": {
                    "1": "size1",
                    "2": "data_1",
                    "4": "input_value_1",
                    "6": "input_param_1",
                    "7": "input_1"
                },
                "param_2": {
                    "1": "input_value2",
                    "2": "initial_value",
                    "4": "input_value_2",
                    "6": "input_param_2",
                    "7": "input_2"
                },
                "plVar2": {
                    "1": "memory_location",
                    "2": "memory_block",
                    "3": "data_ptr",
                    "9": "allocated_memory"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_memory_00113bfa(long input_1,long input_2)\n\n{\n  long memory_address;\n  long *allocated_memory;\n  \n  if (((input_1 != 0) && (input_2 != 0)) && (memory_address = initialize_memory_00113bfa(0x12,0), memory_address != 0)) {\n    allocated_memory = (long *)xmalloc(0x10);\n    *allocated_memory = input_1;\n    allocated_memory[1] = input_2;\n    *(long **)(memory_address + 0x10) = allocated_memory;\n    return memory_address;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_memory_00113bfa",
            "entrypoint": "0x00113bfa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113bfa": "initialize_memory_00113bfa",
                "initialize_memory_00112904": "initialize_memory",
                "lVar1": "memory_address",
                "param_1": "input_1",
                "param_2": "input_2",
                "plVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113c43": {
            "additional_data": {
                "FUN_00113c43": {
                    "1": "initialize_memory_and_allocate",
                    "3": "initialize_data_structure",
                    "7": "initialize_memory",
                    "9": "initialize_and_allocate_memory"
                },
                "auVar3": {
                    "14": "result",
                    "7": "return_value"
                },
                "initialize_memory_00112904": {
                    "1": "initialize_memory"
                },
                "lVar1": {
                    "1": "memory_buffer",
                    "2": "memory_initialized",
                    "3": "memory_pointer",
                    "4": "memory",
                    "6": "memory_ptr",
                    "9": "memory_address"
                },
                "param_1": {
                    "1": "memory_pointer",
                    "2": "memory_address",
                    "3": "input_1",
                    "4": "input1"
                },
                "param_2": {
                    "1": "data_address",
                    "2": "input_value_2",
                    "3": "input_param2",
                    "4": "input2"
                },
                "param_3": {
                    "1": "input_data3",
                    "2": "input_value_3",
                    "3": "input_3",
                    "4": "input3",
                    "6": "param_3"
                },
                "param_4": {
                    "1": "input_data4",
                    "2": "param_4_value",
                    "3": "input_4",
                    "4": "input4",
                    "6": "param_4"
                },
                "param_5": {
                    "1": "data",
                    "2": "input_parameter_5",
                    "3": "input_5",
                    "4": "input5",
                    "6": "param_5"
                },
                "param_6": {
                    "1": "output_data",
                    "2": "input_parameter_6",
                    "3": "input_param6",
                    "4": "input6",
                    "6": "param_6"
                },
                "plVar2": {
                    "1": "data",
                    "2": "memory_block",
                    "3": "data_ptr",
                    "8": "allocated_memory"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16]\ninitialize_and_allocate_memory_00113c43(long input1,long input2,long param_3,long param_4,undefined param_5,\n            undefined8 param_6)\n\n{\n  long memory_address;\n  long *allocated_memory;\n  undefined result [16];\n  \n  if ((input1 != 0) && (input2 != 0)) {\n    memory_address = initialize_memory(0x10,0);\n    if (memory_address != 0) {\n      allocated_memory = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)allocated_memory + 0x21) = 0;\n      *allocated_memory = input1;\n      *(undefined4 *)((long)allocated_memory + 0x24) = 0;\n      allocated_memory[1] = input2;\n      allocated_memory[2] = param_3;\n      allocated_memory[3] = param_4;\n      *(undefined *)(allocated_memory + 4) = param_5;\n      *(long **)(memory_address + 0x10) = allocated_memory;\n      goto LAB_00113caa;\n    }\n  }\n  memory_address = 0;\nLAB_00113caa:\n  result._8_8_ = param_6;\n  result._0_8_ = memory_address;\n  return result;\n}\n\n",
            "current_name": "initialize_and_allocate_memory_00113c43",
            "entrypoint": "0x00113c43",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113c43": "initialize_and_allocate_memory_00113c43",
                "auVar3": "result",
                "initialize_memory_00112904": "initialize_memory",
                "lVar1": "memory_address",
                "param_1": "input1",
                "param_2": "input2",
                "plVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113cb9": {
            "additional_data": {
                "0x10": {
                    "1": "offset"
                },
                "0xe": {
                    "1": "memory_size"
                },
                "FUN_00113cb9": {
                    "1": "initialize_memory_and_return",
                    "14": "initialize_memory",
                    "3": "initialize_memory_if_not_zero",
                    "5": "initialize_memory_with_param"
                },
                "initialize_memory_00112904": {
                    "1": "allocate_memory"
                },
                "lVar1": {
                    "1": "allocated_memory",
                    "10": "memory_address",
                    "3": "memory_pointer"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "input_param",
                    "22": "input_value",
                    "4": "input"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_memory_00113cb9(long input_value)\n\n{\n  long memory_address;\n  \n  if (input_value != 0) {\n    memory_address = allocate_memory(0xe,0);\n    if (memory_address == 0) {\n      memory_address = 0;\n    }\n    else {\n      *(long *)(memory_address + 0x10) = input_value;\n    }\n    return memory_address;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_memory_00113cb9",
            "entrypoint": "0x00113cb9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113cb9": "initialize_memory_00113cb9",
                "initialize_memory_00112904": "allocate_memory",
                "lVar1": "memory_address",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113ce0": {
            "additional_data": {
                "FUN_00113ce0": {
                    "1": "initialize_memory_and_create_struct",
                    "2": "initialize_memory_and_store_params",
                    "3": "initialize_data_structure",
                    "8": "initialize_and_allocate_memory",
                    "9": "initialize_memory"
                },
                "auVar3": {
                    "10": "result",
                    "14": "return_value",
                    "2": "return_val"
                },
                "lVar1": {
                    "1": "memory_allocation_result",
                    "2": "memory_pointer",
                    "3": "memory_initialized",
                    "4": "memory_address",
                    "5": "memory_ptr"
                },
                "param_1": {
                    "1": "input_1",
                    "2": "input_value",
                    "3": "input_param",
                    "5": "memory_address"
                },
                "param_2": {
                    "1": "data_value",
                    "2": "secondary_param",
                    "3": "value",
                    "4": "param_2",
                    "5": "input_value_2"
                },
                "param_3": {
                    "1": "input_3",
                    "3": "param3",
                    "4": "undefined_param",
                    "5": "param_3"
                },
                "param_4": {
                    "1": "unused_param_4",
                    "3": "unused_param",
                    "4": "input_value_4",
                    "5": "param_4"
                },
                "param_5": {
                    "1": "unused_param5",
                    "2": "output_param",
                    "3": "param_5",
                    "4": "input_value_5",
                    "5": "input_param_5"
                },
                "plVar2": {
                    "1": "object_ptr",
                    "2": "allocated_structure",
                    "4": "memory_block",
                    "9": "allocated_memory"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0011173a",
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16]\ninitialize_memory_00113ce0(long memory_address,long input_param_2,undefined input_param_3,undefined8 input_param_4,undefined8 input_param_5)\n\n{\n  long memory_ptr;\n  long *allocated_memory;\n  undefined return_value [16];\n  \n  if (memory_address != 0) {\n    memory_ptr = initialize_memory_00113ce0_00112904(0xd,0);\n    if (memory_ptr != 0) {\n      allocated_memory = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)allocated_memory + 0x11) = 0;\n      *allocated_memory = memory_address;\n      *(undefined4 *)((long)allocated_memory + 0x14) = 0;\n      allocated_memory[1] = input_param_2;\n      *(undefined *)(allocated_memory + 2) = input_param_3;\n      *(long **)(memory_ptr + 0x10) = allocated_memory;\n      goto LAB_00113d2f;\n    }\n  }\n  memory_ptr = 0;\nLAB_00113d2f:\n  return_value._8_8_ = input_param_5;\n  return_value._0_8_ = memory_ptr;\n  return return_value;\n}\n\n",
            "current_name": "initialize_memory_00113ce0",
            "entrypoint": "0x00113ce0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113ce0": "initialize_memory_00113ce0",
                "auVar3": "return_value",
                "lVar1": "memory_ptr",
                "param_1": "memory_address",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "param_5": "input_param_5",
                "plVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113d3a": {
            "additional_data": {
                "FUN_00113d3a": {
                    "1": "initialize_memory_or_get_existing",
                    "2": "initialize_or_retrieve_memory",
                    "3": "initialize_memory_if_null",
                    "4": "get_initialized_memory",
                    "5": "initialize_or_get_memory",
                    "7": "initialize_or_get_memory_block"
                },
                "lVar1": {
                    "1": "initialized_pointer",
                    "2": "memory_pointer",
                    "3": "memory_address",
                    "4": "initialized_memory",
                    "6": "memory_block"
                },
                "param_1": {
                    "1": "memory_block_address",
                    "10": "input",
                    "3": "memory_address",
                    "5": "input_value"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0011173a",
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_or_get_memory_block_00113d3a(long input)\n\n{\n  long memory_block;\n  \n  if (input != 0) {\n    memory_block = *(long *)(input + 8);\n    if (memory_block == 0) {\n      memory_block = initialize_memory_00112904(0xc,0);\n      if (memory_block == 0) {\n        memory_block = 0;\n      }\n      else {\n        *(long *)(memory_block + 0x10) = input;\n        *(long *)(input + 8) = memory_block;\n      }\n    }\n    return memory_block;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_or_get_memory_block_00113d3a",
            "entrypoint": "0x00113d3a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113d3a": "initialize_or_get_memory_block_00113d3a",
                "lVar1": "memory_block",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113d6e": {
            "additional_data": {
                "FUN_00113d6e": {
                    "1": "initialize_memory_and_store_data",
                    "2": "initialize_and_allocate",
                    "3": "initialize_and_allocate_memory",
                    "5": "initialize_memory"
                },
                "lVar1": {
                    "1": "memory_block_address",
                    "16": "memory_address",
                    "2": "memory_ptr",
                    "3": "memory_block"
                },
                "param_1": {
                    "1": "initial_value",
                    "3": "value_1",
                    "4": "input_value_1",
                    "5": "data_1"
                },
                "param_2": {
                    "1": "data_param_2",
                    "3": "input2",
                    "4": "input_value_2",
                    "5": "data_2"
                },
                "puVar2": {
                    "1": "memory_pointer",
                    "17": "allocated_memory",
                    "2": "allocated_memory_pointer"
                }
            },
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_and_store_data_00113d6e(undefined8 data_1,undefined8 data_2)\n\n{\n  long memory_address;\n  undefined8 *allocated_memory;\n  \n  memory_address = initialize_memory_00112904(0xb,0);\n  if (memory_address != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x10);\n    *allocated_memory = data_1;\n    allocated_memory[1] = data_2;\n    *(undefined8 **)(memory_address + 0x10) = allocated_memory;\n  }\n  return memory_address;\n}\n\n",
            "current_name": "initialize_and_store_data_00113d6e",
            "entrypoint": "0x00113d6e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113d6e": "initialize_and_store_data_00113d6e",
                "lVar1": "memory_address",
                "param_1": "data_1",
                "param_2": "data_2",
                "puVar2": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113da9": {
            "additional_data": {
                "FUN_00113da9": {
                    "1": "initialize_data_structure",
                    "15": "initialize_memory",
                    "2": "initialize_memory_and_set_param",
                    "4": "initialize_and_allocate_memory"
                },
                "auVar5": {
                    "1": "result_struct",
                    "26": "result"
                },
                "auVar5._0_8_": {
                    "1": "memory_block"
                },
                "auVar5._8_8_": {
                    "1": "result"
                },
                "bVar4": {
                    "1": "constant",
                    "2": "increment",
                    "3": "byte_var",
                    "4": "temp_byte"
                },
                "initialize_memory_00112904": {
                    "1": "initialize_memory_internal"
                },
                "lVar2": {
                    "1": "iteration_count",
                    "2": "loop_count",
                    "24": "loop_counter",
                    "3": "counter"
                },
                "param_1": {
                    "1": "byte_shift",
                    "11": "byte_count",
                    "2": "byte_value",
                    "3": "byte_param",
                    "5": "input_byte"
                },
                "param_2": {
                    "1": "input_param1",
                    "12": "param_2",
                    "2": "arg2",
                    "6": "unused_param"
                },
                "param_3": {
                    "1": "ptr2",
                    "2": "param_b",
                    "3": "initial_value",
                    "5": "input_param",
                    "7": "param_3"
                },
                "param_4": {
                    "1": "data",
                    "11": "param_4",
                    "2": "param_c",
                    "5": "output_param"
                },
                "puVar1": {
                    "1": "memory_block_ptr",
                    "10": "memory_block",
                    "2": "mem_ptr",
                    "4": "memory_ptr",
                    "8": "allocated_memory"
                },
                "puVar3": {
                    "1": "loop_ptr",
                    "2": "current_position",
                    "3": "temp_ptr",
                    "4": "ptr",
                    "9": "current_ptr"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "calling": [
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16] initialize_memory_00113da9(byte byte_count,undefined8 param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  undefined8 *memory_block;\n  long loop_counter;\n  undefined8 *current_ptr;\n  byte temp_byte;\n  undefined result [16];\n  \n  temp_byte = 0;\n  memory_block = initialize_memory_00113da9_internal(8 - (uint)byte_count);\n  if (memory_block != 0) {\n    memory_block = (undefined8 *)xmalloc(0x28);\n    current_ptr = memory_block + 1;\n    for (loop_counter = 8; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)current_ptr = 0;\n      current_ptr = (undefined8 *)((long)current_ptr + (ulong)temp_byte * -8 + 4);\n    }\n    *memory_block = param_3;\n    *(undefined8 **)(memory_block + 0x10) = memory_block;\n  }\n  result = param_4;\n  return result;\n}\n\n",
            "current_name": "initialize_memory_00113da9",
            "entrypoint": "0x00113da9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113da9": "initialize_memory_00113da9",
                "auVar5": "result",
                "auVar5._0_8_": "memory_block",
                "auVar5._8_8_": "result",
                "bVar4": "temp_byte",
                "initialize_memory_00112904": "initialize_memory_internal",
                "lVar2": "loop_counter",
                "param_1": "byte_count",
                "puVar1": "memory_block",
                "puVar3": "current_ptr",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113df2": {
            "additional_data": {
                "DAT_": {
                    "1": "dat_"
                },
                "FUN_00113df2": {
                    "1": "initialize_four_byte_memory",
                    "30": "initialize_memory"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "initialize_memory_00112904": {
                    "1": "init_memory",
                    "13": "initialize_memory",
                    "2": "initialize_memory_block"
                },
                "param_1": {
                    "1": "initialize_size",
                    "18": "size",
                    "2": "size_in_bytes",
                    "4": "param",
                    "5": "memory_size"
                },
                "param_2": {
                    "1": "param_2"
                },
                "undefined4": {
                    "1": "unused"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010dac0",
                "FUN_0010ee3f",
                "FUN_0010c2d2"
            ],
            "code": "\nvoid initialize_memory_00113df2(unused size)\n\n{\n  initialize_memory_00113df2(4,size);\n  return;\n}\n\n",
            "current_name": "initialize_memory_00113df2",
            "entrypoint": "0x00113df2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113df2": "initialize_memory_00113df2",
                "initialize_memory_00112904": "initialize_memory",
                "param_1": "size",
                "undefined4": "unused"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113dfe": {
            "additional_data": {
                "FUN_00113dfe": {
                    "1": "update_memory_and_set_value",
                    "10": "set_memory_value",
                    "2": "initialize_memory",
                    "3": "initialize_memory_with_param"
                },
                "lVar1": {
                    "1": "memory_pointer",
                    "25": "memory_address",
                    "3": "allocated_memory"
                },
                "param_1": {
                    "1": "num_1",
                    "2": "memory_address",
                    "4": "param1",
                    "5": "memory_size",
                    "7": "size"
                },
                "param_2": {
                    "1": "data",
                    "19": "value",
                    "2": "value_to_set",
                    "4": "param2"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010dac0",
                "FUN_0010c2d2",
                "FUN_0010ee3f"
            ],
            "code": "\nvoid set_memory_value_00113dfe(undefined4 size,undefined value)\n\n{\n  long memory_address;\n  \n  memory_address = initialize_memory_00112904(3,size);\n  if (memory_address != 0) {\n    *(undefined *)(memory_address + 0x10) = value;\n  }\n  return;\n}\n\n",
            "current_name": "set_memory_value_00113dfe",
            "entrypoint": "0x00113dfe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113dfe": "set_memory_value_00113dfe",
                "lVar1": "memory_address",
                "param_1": "size",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113e17": {
            "additional_data": {
                "0": {
                    "1": "block_size",
                    "3": "initial_value"
                },
                "2": {
                    "1": "param1",
                    "2": "size",
                    "3": "num_blocks"
                },
                "FUN_00113e17": {
                    "31": "initialize_memory"
                },
                "initialize_memory_00112904": {
                    "11": "initialize_memory_helper",
                    "14": "initialize_memory"
                },
                "void": {
                    "1": ""
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010dac0",
                "FUN_0010ee3f",
                "FUN_0010c2d2"
            ],
            "code": "\nvoid initialize_memory_00113e17(void)\n\n{\n  initialize_memory_00113e17(2,0);\n  return;\n}\n\n",
            "current_name": "initialize_memory_00113e17",
            "entrypoint": "0x00113e17",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113e17": "initialize_memory_00113e17",
                "initialize_memory_00112904": "initialize_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113e23": {
            "additional_data": {
                "FUN_00113e23": {
                    "1": "initialize_memory_and_store_data",
                    "2": "initialize_memory_and_store_params",
                    "4": "initialize_and_store_memory",
                    "5": "initialize_and_allocate_memory",
                    "9": "initialize_memory"
                },
                "lVar1": {
                    "1": "result",
                    "12": "memory_address",
                    "2": "allocated_memory",
                    "3": "memory_location",
                    "4": "memory_block"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "data1",
                    "3": "first_parameter",
                    "4": "data_1",
                    "9": "value1"
                },
                "param_2": {
                    "1": "input_param2",
                    "2": "input_value_2",
                    "3": "second_parameter",
                    "4": "data_2",
                    "9": "value2"
                },
                "puVar2": {
                    "1": "new_memory_ptr",
                    "14": "allocated_memory",
                    "2": "new_block",
                    "4": "memory_block"
                }
            },
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "calling": [
                "FUN_0010afd5",
                "FUN_0010dac0",
                "FUN_0010c2d2"
            ],
            "code": "\nlong initialize_memory_00113e23(undefined8 value1,undefined8 value2)\n\n{\n  long memory_address;\n  undefined8 *allocated_memory;\n  \n  memory_address = initialize_memory_00113e23_00112904(1,0);\n  if (memory_address != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x10);\n    *allocated_memory = value1;\n    allocated_memory[1] = value2;\n    *(undefined8 **)(memory_address + 0x10) = allocated_memory;\n  }\n  return memory_address;\n}\n\n",
            "current_name": "initialize_memory_00113e23",
            "entrypoint": "0x00113e23",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113e23": "initialize_memory_00113e23",
                "lVar1": "memory_address",
                "param_1": "value1",
                "param_2": "value2",
                "puVar2": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113e5e": {
            "additional_data": {
                "FUN_00113e5e": {
                    "1": "validate_and_adjust_type_param",
                    "2": "validate_input",
                    "3": "validate_and_execute_operation"
                },
                "cVar1": {
                    "1": "comparision_result",
                    "10": "comparison_result"
                },
                "local_20": {
                    "1": "saved_str",
                    "2": "input_string",
                    "3": "original_string"
                },
                "local_20[0]": {
                    "1": "input_string",
                    "2": "current_string"
                },
                "param_1": {
                    "1": "data",
                    "2": "input_value",
                    "3": "param1",
                    "4": "output",
                    "6": "param"
                },
                "param_2": {
                    "1": "input_data_ptr_ptr",
                    "2": "string_array",
                    "3": "argv",
                    "4": "string_ptr",
                    "5": "input"
                },
                "param_3": {
                    "1": "argc",
                    "3": "param3",
                    "4": "input_length",
                    "6": "length",
                    "7": "string_length"
                }
            },
            "called": [
                "FUN_0010c95e",
                "FUN_00113fb0"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 validate_and_execute_operation_00113e5e(undefined8 param,char **input,long string_length)\n\n{\n  char comparison_result;\n  char *original_string [2];\n  \n  current_string = *input;\n  *input = (char *)(string_length + 2);\n  if ((((long)(char *)(string_length + 2) - (long)current_string < 5) ||\n      (comparison_result = compare_strings_00113fb0(current_string,\"type\"), comparison_result == '\\0')) ||\n     ((current_string[4] != '$' && (current_string[4] != '.')))) {\n    if (*current_string != '_') {\n      return 1;\n    }\n    if (current_string[1] != '_') {\n      return 1;\n    }\n    if (current_string[2] != 'o') {\n      return 1;\n    }\n    if (current_string[3] != 'p') {\n      return 1;\n    }\n    current_string = current_string + 4;\n  }\n  else {\n    current_string = current_string + 5;\n  }\n  comparison_result = process_data_0010c95e(param,original_string,0);\n  if (comparison_result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "code_backup": "\nundefined8 FUN_00113e5e(undefined8 param_1,char **param_2,long param_3)\n\n{\n  char cVar1;\n  char *local_20 [2];\n  \n  local_20[0] = *param_2;\n  *param_2 = (char *)(param_3 + 2);\n  if ((((long)(char *)(param_3 + 2) - (long)local_20[0] < 5) ||\n      (cVar1 = compare_strings_00113fb0(local_20[0],\"type\"), cVar1 == '\\0')) ||\n     ((local_20[0][4] != '$' && (local_20[0][4] != '.')))) {\n    if (*local_20[0] != '_') {\n      return 1;\n    }\n    if (local_20[0][1] != '_') {\n      return 1;\n    }\n    if (local_20[0][2] != 'o') {\n      return 1;\n    }\n    if (local_20[0][3] != 'p') {\n      return 1;\n    }\n    local_20[0] = local_20[0] + 4;\n  }\n  else {\n    local_20[0] = local_20[0] + 5;\n  }\n  cVar1 = FUNC_0010c95e(param_1,local_20,0);\n  if (cVar1 != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "current_name": "validate_and_execute_operation_00113e5e",
            "entrypoint": "0x00113e5e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113e5e": "validate_and_execute_operation_00113e5e",
                "cVar1": "comparison_result",
                "local_20": "original_string",
                "local_20[0]": "current_string",
                "param_1": "param",
                "param_2": "input",
                "param_3": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113ede": {
            "additional_data": {
                "&DAT_0012142b": {
                    "1": "comparison_string"
                },
                "*param_1": {
                    "1": "string_array"
                },
                "FUN_00113ede": {
                    "1": "check_suffix",
                    "2": "check_last_chars",
                    "22": "check_string_length"
                },
                "__s": {
                    "11": "current_string",
                    "13": "string",
                    "2": "str",
                    "5": "input_string"
                },
                "param_1": {
                    "1": "args",
                    "11": "strings",
                    "2": "string_ptr",
                    "3": "string_list",
                    "5": "string_array",
                    "8": "input_strings"
                },
                "sVar1": {
                    "1": "suffix_length",
                    "26": "string_length",
                    "3": "length"
                },
                "uVar2": {
                    "23": "comparison_result",
                    "8": "result"
                }
            },
            "called": [
                "strlen",
                "FUN_00113fb0"
            ],
            "calling": [
                "FUN_001082b3",
                "FUN_0010829e"
            ],
            "code": "\nundefined8 check_string_length_00113ede(char **strings)\n\n{\n  char *string;\n  size_t string_length;\n  undefined8 comparison_result;\n  \n  if (strings == (char **)0x0) {\n    return 0;\n  }\n  string = *strings;\n  if (string != (char *)0x0) {\n    string_length = strlen(string);\n    if (4 < (int)string_length) {\n      comparison_result = compare_strings_00113fb0(string + (long)(int)string_length + -4,&DAT_0012142b);\n      return comparison_result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "check_string_length_00113ede",
            "entrypoint": "0x00113ede",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113ede": "check_string_length_00113ede",
                "__s": "string",
                "param_1": "strings",
                "sVar1": "string_length",
                "uVar2": "comparison_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113f20": {
            "additional_data": {
                "FUN_00113f20": {
                    "1": "create_symbol_table",
                    "11": "create_hash_table",
                    "2": "create_hashtable",
                    "4": "initialize_hashtable",
                    "8": "initialize_hash_table"
                },
                "free": {
                    "1": "free_memory",
                    "11": "deallocate_memory",
                    "19": "release_memory"
                },
                "htab_create_alloc": {
                    "1": "create_hash_table_with_alloc",
                    "2": "allocate_hashtable",
                    "3": "create_hashtable",
                    "7": "allocate_hash_table",
                    "8": "create_hash_table"
                },
                "htab_eq_string": {
                    "1": "compare_string",
                    "14": "compare_strings",
                    "2": "compare_strings_in_hash_table",
                    "9": "is_equal_string"
                },
                "htab_hash_string": {
                    "1": "hash_string_for_hashtable",
                    "2": "hash_string_in_hash_table",
                    "27": "hash_string"
                },
                "xcalloc": {
                    "1": "allocate_memory_with_zero",
                    "30": "allocate_memory"
                }
            },
            "called": [
                "htab_hash_string",
                "htab_create_alloc",
                "free",
                "htab_eq_string",
                "xcalloc"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid create_hash_table_00113f20(void)\n\n{\n  create_hash_table_00113f20(0x10,htab_hash_string,compare_strings,0,xcalloc,free);\n  return;\n}\n\n",
            "current_name": "create_hash_table_00113f20",
            "entrypoint": "0x00113f20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113f20": "create_hash_table_00113f20",
                "free": "release_memory",
                "htab_create_alloc": "create_hash_table",
                "htab_eq_string": "compare_strings",
                "htab_hash_string": "hash_string",
                "xcalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113f50": {
            "additional_data": {
                "FUN_00113f50": {
                    "1": "check_file_properties",
                    "2": "get_file_info",
                    "3": "check_file_status",
                    "4": "get_file_size",
                    "6": "check_file",
                    "7": "get_file_information"
                },
                "iVar1": {
                    "1": "return_value",
                    "10": "result",
                    "17": "status",
                    "3": "stat_result"
                },
                "param_1": {
                    "1": "filepath",
                    "27": "file_path",
                    "3": "filename"
                },
                "pcVar4": {
                    "1": "str_error_message",
                    "18": "error_reason",
                    "3": "error_string",
                    "7": "reason"
                },
                "piVar2": {
                    "1": "errno",
                    "11": "errno_ptr",
                    "2": "error_ptr",
                    "4": "errno_location",
                    "5": "error_code"
                },
                "sStack_a8": {
                    "10": "file_stat",
                    "16": "file_stats",
                    "5": "file_info"
                },
                "uVar3": {
                    "2": "error_msg",
                    "27": "error_message"
                }
            },
            "called": [
                "FUN_00119ed0",
                "dcgettext",
                "FUN_00104966",
                "stat"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00114460",
                "FUN_00116b90"
            ],
            "code": "\nlong get_file_information_00113f50(char *file_path)\n\n{\n  int status;\n  int *errno_ptr;\n  undefined8 error_message;\n  char *error_reason;\n  stat file_stats;\n  \n  if (file_path != (char *)0x0) {\n    status = stat(file_path,&file_stats);\n    if (status < 0) {\n      errno_ptr = __errno_location();\n      if (*errno_ptr == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_error_message_00119ed0(error_message,file_path);\n      }\n      else {\n        error_reason = strerror(*errno_ptr);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_message_00119ed0(error_message,file_path,error_reason);\n      }\n    }\n    else if ((file_stats.st_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_error_message_00119ed0(error_message,file_path);\n    }\n    else if ((file_stats.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_stats.st_size) {\n        return file_stats.st_size;\n      }\n      error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      print_error_message_00119ed0(error_message,file_path);\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_error_message_00119ed0(error_message,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "current_name": "get_file_information_00113f50",
            "entrypoint": "0x00113f50",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113f50": "get_file_information_00113f50",
                "iVar1": "status",
                "param_1": "file_path",
                "pcVar4": "error_reason",
                "piVar2": "errno_ptr",
                "sStack_a8": "file_stats",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113fb0": {
            "additional_data": {
                "FUN_00113fb0": {
                    "1": "compare_and_return_result",
                    "13": "string_comparison",
                    "16": "compare_strings"
                },
                "__n": {
                    "1": "target_string_length",
                    "14": "length",
                    "2": "string_length",
                    "8": "string2_length"
                },
                "auVar2": {
                    "1": "comparison_result_array",
                    "21": "result",
                    "3": "comparison_result"
                },
                "extraout_var": {
                    "1": "extra_variable",
                    "2": "extra_output",
                    "3": "extra_var"
                },
                "iVar1": {
                    "1": "string_difference",
                    "2": "string_comparison",
                    "25": "comparison_result"
                },
                "in_RAX": {
                    "1": "return_val"
                },
                "param_1": {
                    "1": "input_string1",
                    "2": "input_string",
                    "21": "string1",
                    "3": "str1"
                },
                "param_2": {
                    "1": "input_string2",
                    "2": "second_string",
                    "21": "string2",
                    "3": "str2"
                }
            },
            "called": [
                "strlen",
                "strncmp"
            ],
            "calling": [
                "FUN_00108c86",
                "FUN_00113ede",
                "FUN_00114c20",
                "FUN_00115f50",
                "FUN_00113e5e",
                "FUN_00116b90",
                "FUN_00107880",
                "FUN_0010ee3f",
                "FUN_0010554f"
            ],
            "code": "\nundefined  [16] compare_strings_00113fb0(char *string1,char *string2)\n\n{\n  int comparison_result;\n  undefined8 return_address;\n  size_t length;\n  undefined4 extra_var;\n  undefined result [16];\n  \n  length = strlen(string2);\n  comparison_result = strncmp(string1,string2,length);\n  result._1_7_ = (undefined7)(CONCAT44(extra_var,comparison_result) >> 8);\n  result[0] = comparison_result == 0;\n  result._8_8_ = return_address;\n  return result;\n}\n\n",
            "current_name": "compare_strings_00113fb0",
            "entrypoint": "0x00113fb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113fb0": "compare_strings_00113fb0",
                "__n": "length",
                "auVar2": "result",
                "extraout_var": "extra_var",
                "iVar1": "comparison_result",
                "in_RAX": "return_address",
                "param_1": "string1",
                "param_2": "string2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113fe0": {
            "additional_data": {
                "FUN_00113fe0": {
                    "1": "extract_section_flags",
                    "27": "parse_section_flags"
                },
                "FUN_00119dd0": {
                    "1": "print_supported_flags"
                },
                "FUN_00119ed0": {
                    "1": "show_error_message"
                },
                "auVar8": {
                    "1": "parsed_flags",
                    "14": "result",
                    "2": "return_val",
                    "3": "return_value",
                    "4": "result_struct"
                },
                "auVar8._0_4_": {
                    "1": "result_bottom_part"
                },
                "auVar8._4_4_": {
                    "1": "result_top_part"
                },
                "auVar8._8_8_": {
                    "1": "result_param4"
                },
                "dcgettext": {
                    "1": "get_translated_string"
                },
                "iVar1": {
                    "1": "str_compare_result",
                    "12": "result",
                    "15": "comparison_result"
                },
                "iVar6": {
                    "1": "sub_string_index",
                    "2": "section_flag_length",
                    "5": "flag_index"
                },
                "param_1": {
                    "1": "section_flag",
                    "13": "section_flags",
                    "2": "flags_string",
                    "3": "flag_string",
                    "8": "input_string"
                },
                "param_2": {
                    "1": "param1",
                    "14": "param_2",
                    "16": "param2"
                },
                "param_3": {
                    "1": "param2",
                    "14": "param_3",
                    "16": "param3"
                },
                "param_4": {
                    "1": "flags",
                    "15": "param4",
                    "7": "param_4"
                },
                "pcVar3": {
                    "1": "delimiter_pos",
                    "11": "comma_position",
                    "2": "delimiter",
                    "5": "comma_ptr"
                },
                "pcVar4": {
                    "1": "next_position",
                    "2": "next_pos",
                    "3": "next_flag_string",
                    "7": "next_flag",
                    "9": "next_section_flag"
                },
                "sVar5": {
                    "1": "input_length",
                    "10": "flag_length",
                    "2": "string_length",
                    "3": "length",
                    "5": "section_flag_length"
                },
                "strncpy": {
                    "1": "copy_string"
                },
                "uVar2": {
                    "1": "flag_string_error",
                    "2": "error_msg",
                    "4": "message",
                    "8": "error_message"
                },
                "uVar7": {
                    "1": "flag_value",
                    "12": "section_flags",
                    "2": "flags",
                    "8": "parsed_flags"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16] parse_section_flags_00113fe0(char *section_flags,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  int comparison_result;\n  undefined8 error_message;\n  char *comma_position;\n  char *next_section_flag;\n  size_t flag_length;\n  int flag_index;\n  uint section_flags;\n  undefined result [16];\n  \n  section_flags = 0;\n  do {\n    comma_position = strchr(section_flags,0x2c);\n    if (comma_position == (char *)0x0) {\n      flag_length = strlen(section_flags);\n      flag_index = (int)flag_length;\n      next_section_flag = (char *)0x0;\n    }\n    else {\n      next_section_flag = comma_position + 1;\n      flag_index = (int)comma_position - (int)section_flags;\n    }\n    flag_length = (size_t)flag_index;\n    comparison_result = strncasecmp(\"alloc\",section_flags,flag_length);\n    if (comparison_result == 0) {\n      section_flags = section_flags | 1;\n    }\n    else {\n      comparison_result = strncasecmp(\"load\",section_flags,flag_length);\n      if (comparison_result == 0) {\n        section_flags = section_flags | 2;\n      }\n      else {\n        comparison_result = strncasecmp(\"noload\",section_flags,flag_length);\n        if (comparison_result == 0) {\n          section_flags = section_flags | 0x200;\n        }\n        else {\n          comparison_result = strncasecmp(\"readonly\",section_flags,flag_length);\n          if (comparison_result == 0) {\n            section_flags = section_flags | 8;\n          }\n          else {\n            comparison_result = strncasecmp(\"debug\",section_flags,flag_length);\n            if (comparison_result == 0) {\n              section_flags = section_flags | 0x2000;\n            }\n            else {\n              comparison_result = strncasecmp(\"code\",section_flags,flag_length);\n              if (comparison_result == 0) {\n                section_flags = section_flags | 0x10;\n              }\n              else {\n                comparison_result = strncasecmp(\"data\",section_flags,flag_length);\n                if (comparison_result == 0) {\n                  section_flags = section_flags | 0x20;\n                }\n                else {\n                  comparison_result = strncasecmp(\"rom\",section_flags,flag_length);\n                  if (comparison_result == 0) {\n                    section_flags = section_flags | 0x40;\n                  }\n                  else {\n                    comparison_result = strncasecmp(\"exclude\",section_flags,flag_length);\n                    if (comparison_result == 0) {\n                      section_flags = section_flags | 0x8000;\n                    }\n                    else {\n                      comparison_result = strncasecmp(\"share\",section_flags,flag_length);\n                      if (comparison_result == 0) {\n                        section_flags = section_flags | 0x8000000;\n                      }\n                      else {\n                        comparison_result = strncasecmp(\"contents\",section_flags,flag_length);\n                        if (comparison_result == 0) {\n                          section_flags = section_flags | 0x100;\n                        }\n                        else {\n                          comparison_result = strncasecmp(\"merge\",section_flags,flag_length);\n                          if (comparison_result == 0) {\n                            section_flags = section_flags | 0x800000;\n                          }\n                          else {\n                            comparison_result = strncasecmp(\"strings\",section_flags,flag_length);\n                            if (comparison_result != 0) {\n                              comma_position = (char *)xmalloc((long)(flag_index + 1));\n                              strncpy(comma_position,section_flags,flag_length);\n                              comma_position[flag_length] = '\\0';\n                              error_message = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              print_error_message_00119ed0(error_message,comma_position);\n                              error_message = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              print_error_and_exit_00119dd0(error_message,\n                                           \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                          );\n                            }\n                            section_flags = section_flags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    section_flags = next_section_flag;\n  } while (next_section_flag != (char *)0x0);\n  result_top_part = 0;\n  result_bottom_part = section_flags;\n  result_param4 = param4;\n  return result;\n}\n\n",
            "current_name": "parse_section_flags_00113fe0",
            "entrypoint": "0x00113fe0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "auVar8": "result",
                "auVar8._0_4_": "result_bottom_part",
                "auVar8._4_4_": "result_top_part",
                "auVar8._8_8_": "result_param4",
                "dcgettext": "get_translated_string",
                "iVar1": "comparison_result",
                "iVar6": "flag_index",
                "param_1": "section_flags",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "pcVar3": "comma_position",
                "pcVar4": "next_section_flag",
                "sVar5": "flag_length",
                "strncpy": "copy_string",
                "uVar2": "error_message",
                "uVar7": "section_flags",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114190": {
            "additional_data": {
                "(char *)((long)plVar2 + 1)": {
                    "1": "char_ptr_offset_1"
                },
                "(char *)param_1": {
                    "1": "input_char_ptr"
                },
                "(char *)plVar2": {
                    "1": "char_ptr"
                },
                "(long *)0x0": {
                    "1": "null_ptr"
                },
                "(long *)DAT_00127900": {
                    "1": "initial_ptr"
                },
                "*(char *)plVar2": {
                    "1": "temp_char_ptr"
                },
                "*(long *)((long)pplVar6 + 0x20)": {
                    "1": "next"
                },
                "*(uint *)((long)pplVar6 + 0x14)": {
                    "1": "temp_updated_flags"
                },
                "*(uint *)((long)pplVar7 + 0x14)": {
                    "1": "flags_current_ptr"
                },
                "*(uint *)((long)pplVar7 + 0x14) | param_3": {
                    "1": "updated_flags"
                },
                "*(undefined (*) [16])(pplVar6 + 3)": {
                    "1": "temp_undefined_array"
                },
                "*(undefined *)(pplVar6 + 2)": {
                    "1": "temp_undefined_value"
                },
                "*pplVar6": {
                    "1": "next"
                },
                "*pplVar7": {
                    "1": "current"
                },
                "FUN_00114190": {
                    "1": "decode_function",
                    "5": "process_data"
                },
                "LAB_001141e5": {
                    "1": "traverse_nodes"
                },
                "LAB_00114245": {
                    "1": "exit_node"
                },
                "LAB_00114288": {
                    "1": "traverse_nodes"
                },
                "LAB_001142a1": {
                    "1": "exit_node"
                },
                "LAB_001142a9": {
                    "1": "add_new_node"
                },
                "LAB_0011438e": {
                    "1": "set_flag_and_exit"
                },
                "LAB_001143cd": {
                    "1": "compare_and_exit"
                },
                "iVar4": {
                    "1": "temp_variable",
                    "14": "comparison_result",
                    "2": "index",
                    "3": "index_var"
                },
                "param_1": {
                    "1": "entry_list",
                    "15": "input_array",
                    "2": "param_array",
                    "5": "input_data"
                },
                "param_2": {
                    "1": "is_optional",
                    "17": "flag",
                    "2": "is_exact_match",
                    "5": "is_flag_set"
                },
                "param_3": {
                    "1": "permission",
                    "10": "flags",
                    "3": "mask",
                    "4": "permissions",
                    "9": "options"
                },
                "plVar2": {
                    "1": "sub_pattern",
                    "2": "match_pattern",
                    "3": "temp_pointer",
                    "5": "temp_var2",
                    "6": "pattern"
                },
                "pplVar3": {
                    "1": "temp_ptr_2",
                    "2": "next_node",
                    "5": "result_pointer"
                },
                "pplVar6": {
                    "1": "temp_var6",
                    "2": "current_result",
                    "3": "current",
                    "4": "current_node"
                },
                "pplVar6[5]": {
                    "1": "next_ptr"
                },
                "pplVar7": {
                    "1": "next_pointer",
                    "2": "previous_result",
                    "3": "previous"
                },
                "pplVar8": {
                    "1": "temp_entry",
                    "2": "next_pointer_pointer",
                    "3": "next_pointer",
                    "4": "next_node"
                },
                "temp_array_1": {
                    "1": "temp_array_1"
                },
                "uVar1": {
                    "1": "option_check",
                    "2": "flags",
                    "4": "var1",
                    "6": "temp_var1"
                },
                "uVar5": {
                    "1": "temp_var_3",
                    "17": "error_message",
                    "2": "error_msg",
                    "3": "temp_var5"
                }
            },
            "called": [
                "xmalloc",
                "dcgettext",
                "strcmp",
                "FUN_00119dd0",
                "FUN_00104bba",
                "fnmatch"
            ],
            "calling": [
                "FUN_00115530",
                "FUN_00114c20",
                "FUN_00108072",
                "FUN_00115dc0",
                "FUN_00116b90",
                "FUN_00107880",
                "FUN_00115b70",
                "FUN_00116110"
            ],
            "code": "\nlong ** process_data_00114190(long *input_array,char flag,uint flags)\n\n{\n  uint temp_var1;\n  long *pattern;\n  long **result_pointer;\n  int comparison_result;\n  undefined8 error_message;\n  long **current_pointer;\n  long **previous_pointer;\n  long **next_node;\n  \n  previous_pointer = DAT_00127900;\n  if (DAT_00127900 == (long **)0x0) {\n    if (flag == '\\0') {\n      return (long **)0x0;\n    }\n    goto add_new_node;\n  }\n  if (flag == '\\0') {\n    if ((flags & *(uint *)((long)DAT_00127900 + 0x14)) == 0) {\ntraverse_nodes:\n      current_pointer = (long **)*previous_pointer;\n      if (current_pointer == (long **)0x0) {\n        return (long **)0x0;\n      }\n      previous_pointer = (long **)0x0;\n    }\n    else {\n      pattern = DAT_00127900[1];\n      if (*(char *)pattern == '!') {\n        comparison_result = fnmatch((char *)((long)pattern + 1),(char *)input_array,0);\n        current_pointer = previous_pointer;\n        if (comparison_result == 0) goto set_flag_and_exit;\n        goto traverse_nodes;\n      }\n      comparison_result = fnmatch((char *)pattern,(char *)input_array,0);\n      if (comparison_result != 0) goto traverse_nodes;\n      current_pointer = (long **)*previous_pointer;\n      if (current_pointer == (long **)0x0) goto exit_node;\n    }\n    if ((flags & *(uint *)((long)current_pointer + 0x14)) != 0) {\n      pattern = current_pointer[1];\n      if (*(char *)pattern == '!') {\n        comparison_result = fnmatch((char *)((long)pattern + 1),(char *)input_array,0);\n        if (comparison_result == 0) {\nset_flag_and_exit:\n          *(undefined *)(current_pointer + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        comparison_result = fnmatch((char *)pattern,(char *)input_array,0);\n        if ((previous_pointer == (long **)0x0) && (comparison_result == 0)) {\n          next_node = (long **)*current_pointer;\n          previous_pointer = current_pointer;\n          if (next_node == (long **)0x0) goto exit_node;\n          goto traverse_nodes;\n        }\n      }\n    }\n    next_node = (long **)*current_pointer;\n    current_pointer = previous_pointer;\n    if (next_node != (long **)0x0) goto traverse_nodes;\n  }\n  else {\n    comparison_result = strcmp((char *)DAT_00127900[1],(char *)input_array);\n    if (comparison_result == 0) {\ncompare_and_exit:\n      temp_var1 = *(uint *)((long)previous_pointer + 0x14);\n      if ((((temp_var1 & 1) != 0) && ((flags & 2) != 0)) ||\n         (((flags & 1) != 0 && ((temp_var1 & 2) != 0)))) {\n        error_message = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        print_error_and_exit_00119dd0(error_message,input_array);\n      }\n      if ((((temp_var1 & 8) != 0) && ((flags & 0x10) != 0)) || ((flags & 0x18) == 0x18)) {\n        error_message = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        print_error_and_exit_00119dd0(error_message,input_array);\n      }\n      if ((((temp_var1 & 0x20) == 0) || ((flags & 0x40) == 0)) && ((flags & 0x60) != 0x60)) {\n        *(uint *)((long)previous_pointer + 0x14) = temp_var1 | flags;\n        return previous_pointer;\n      }\n      error_message = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      print_error_and_exit_00119dd0(error_message,input_array);\n    }\n    previous_pointer = (long **)*previous_pointer;\n    if (previous_pointer == (long **)0x0) goto add_new_node;\n    comparison_result = strcmp((char *)previous_pointer[1],(char *)input_array);\n    if (comparison_result == 0) goto compare_and_exit;\n    next_node = (long **)*previous_pointer;\n    current_pointer = (long **)0x0;\n    if (next_node == (long **)0x0) goto add_new_node;\ntraverse_nodes:\n    do {\n      previous_pointer = current_pointer;\n      if (flag == '\\0') {\n        while (current_pointer = next_node, result_pointer = previous_pointer, next_node = current_pointer,\n              (flags & *(uint *)((long)current_pointer + 0x14)) != 0) {\n          pattern = current_pointer[1];\n          if (*(char *)pattern == '!') {\n            comparison_result = fnmatch((char *)((long)pattern + 1),(char *)input_array,0);\n            if (comparison_result == 0) goto set_flag_and_exit;\n            next_node = (long **)*current_pointer;\n            if ((long **)*current_pointer == (long **)0x0) goto exit_node;\n          }\n          else {\n            comparison_result = fnmatch((char *)pattern,(char *)input_array,0);\n            if ((previous_pointer == (long **)0x0) && (comparison_result == 0)) {\n              previous_pointer = current_pointer;\n              next_node = (long **)*current_pointer;\n              if ((long **)*current_pointer == (long **)0x0) goto exit_node;\n            }\n            else {\n              next_node = (long **)*current_pointer;\n              if ((long **)*current_pointer == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        comparison_result = strcmp((char *)next_node[1],(char *)input_array);\n        result_pointer = current_pointer;\n        previous_pointer = next_node;\n        if (comparison_result == 0) goto compare_and_exit;\n      }\n      current_pointer = result_pointer;\n      next_node = (long **)*next_node;\n      previous_pointer = current_pointer;\n    } while (next_node != (long **)0x0);\nexit_node:\n    if (flag != '\\0') {\nadd_new_node:\n      current_pointer = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(current_pointer + 3) = (undefined  [16])0x0;\n      *(undefined *)(current_pointer + 2) = 0;\n      *(uint *)((long)current_pointer + 0x14) = flags;\n      next_ptr = (long *)0x0;\n      previous_pointer = current_pointer;\n      *current_pointer = (long *)DAT_00127900;\n      DAT_00127900 = previous_pointer;\n      current_pointer[1] = input_array;\n      return current_pointer;\n    }\n  }\nLAB_00114212:\n  if (previous_pointer == (long **)0x0) {\n    return (long **)0x0;\n  }\nexit_node:\n  *(undefined *)(previous_pointer + 2) = 1;\n  return previous_pointer;\n}\n\n",
            "current_name": "process_data_00114190",
            "entrypoint": "0x00114190",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114190": "process_data_00114190",
                "LAB_001141e5": "traverse_nodes",
                "LAB_00114245": "exit_node",
                "LAB_00114288": "traverse_nodes",
                "LAB_001142a1": "exit_node",
                "LAB_001142a9": "add_new_node",
                "LAB_0011438e": "set_flag_and_exit",
                "LAB_001143cd": "compare_and_exit",
                "iVar4": "comparison_result",
                "param_1": "input_array",
                "param_2": "flag",
                "param_3": "flags",
                "plVar2": "pattern",
                "pplVar3": "result_pointer",
                "pplVar6": "current_pointer",
                "pplVar6[5]": "next_ptr",
                "pplVar7": "previous_pointer",
                "pplVar8": "next_node",
                "uVar1": "temp_var1",
                "uVar5": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114460": {
            "additional_data": {
                "FUN_00114460": {
                    "1": "parse_file_and_store_lines",
                    "15": "read_and_process_file",
                    "2": "load_file_and_process_lines",
                    "7": "read_file_and_process_lines"
                },
                "__errnum": {
                    "1": "error_number"
                },
                "__n": {
                    "31": "file_size"
                },
                "__ptr": {
                    "1": "file_content",
                    "14": "file_buffer",
                    "16": "buffer"
                },
                "__stream": {
                    "1": "file_ptr",
                    "14": "file_stream",
                    "15": "file"
                },
                "bVar13": {
                    "1": "current_byte"
                },
                "bVar8": {
                    "1": "byte",
                    "2": "byte_var",
                    "20": "current_byte"
                },
                "ferror(__stream)": {
                    "1": "file_error"
                },
                "iVar1": {
                    "1": "line_index",
                    "19": "line_number",
                    "3": "line_counter",
                    "4": "line_count"
                },
                "iVar14": {
                    "1": "line_index"
                },
                "param_1": {
                    "1": "filepath",
                    "2": "file_name",
                    "22": "filename",
                    "6": "file_path"
                },
                "param_2": {
                    "1": "line_hash_table",
                    "2": "hashtable",
                    "22": "hash_table"
                },
                "param_3": {
                    "1": "lines",
                    "12": "file_content",
                    "15": "file_data",
                    "2": "file_data_ptr"
                },
                "pbVar10": {
                    "1": "current_char",
                    "2": "iterator",
                    "3": "current_pos",
                    "4": "current_line",
                    "8": "current_position"
                },
                "pbVar11": {
                    "1": "temp_char",
                    "2": "line_ptr",
                    "3": "next_position"
                },
                "pbVar12": {
                    "1": "start_line_ptr",
                    "10": "line_start",
                    "3": "start_position"
                },
                "pbVar7": {
                    "1": "line_start",
                    "17": "current_char",
                    "2": "current_position",
                    "3": "line_ptr"
                },
                "pbVar8": {
                    "1": "current_byte",
                    "3": "next_char"
                },
                "pbVar9": {
                    "1": "next_char_ptr",
                    "11": "next_char",
                    "2": "next_position",
                    "4": "next_line",
                    "7": "next_byte"
                },
                "pcVar3": {
                    "1": "err_msg",
                    "13": "error_message",
                    "2": "error_msg",
                    "6": "error_string"
                },
                "piVar2": {
                    "1": "error_no_ptr",
                    "2": "errno_ptr",
                    "4": "errno_location",
                    "6": "error_number"
                },
                "ppbVar6": {
                    "1": "hash_entry",
                    "13": "slot",
                    "2": "hash_table_slot_ptr",
                    "8": "hash_table_slot"
                },
                "sVar5": {
                    "1": "read_result",
                    "26": "bytes_read",
                    "4": "read_size"
                },
                "uVar4": {
                    "1": "translation",
                    "2": "translated_error_message",
                    "3": "translated_message",
                    "5": "error_message"
                }
            },
            "called": [
                "strerror",
                "fread",
                "xmalloc",
                "__errno_location",
                "fopen",
                "dcgettext",
                "fclose",
                "FUN_00119dd0",
                "FUN_00113f50",
                "ferror"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid read_and_process_file_00114460(char *filename,undefined8 hash_table,byte **file_data)\n\n{\n  int line_number;\n  int *error_number;\n  char *error_message;\n  undefined8 error_message;\n  size_t file_size;\n  byte *buffer;\n  FILE *file;\n  size_t bytes_read;\n  byte **slot;\n  byte *current_char;\n  byte current_byte;\n  byte *next_char;\n  byte *current_position;\n  byte *previous_position;\n  byte *line_start;\n  \n  file_size = get_file_information_00113f50();\n  if (file_size == 0) {\n    DAT_00127a40 = 1;\n  }\n  else {\n    buffer = (byte *)xmalloc(file_size + 2);\n    file = fopen(filename,\"r\");\n    if (file == (FILE *)0x0) {\n      error_number = __errno_location();\n      error_message = strerror(*error_number);\n      error_message = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      print_error_and_exit_00119dd0(error_message,filename,error_message);\n    }\n    bytes_read = fread(buffer,1,file_size,file);\n    if ((bytes_read == 0) || (line_number = file_error, line_number != 0)) {\n      error_message = dcgettext(0,\"%s: fread failed\",5);\n                    \n      print_error_and_exit_00119dd0(error_message,filename);\n    }\n    line_number = 1;\n    fclose(file);\n    *(undefined2 *)(buffer + file_size) = 10;\n    current_byte = *buffer;\n    line_start = buffer;\n    while (current_position = line_start, current_byte != 0) {\n      for (; current_byte = *current_position, previous_position = current_position, current_byte != 10; current_position = current_position + 1) {\n        if ((char)current_byte < '\\v') {\n          if (current_byte == 0) {\n            next_char = current_position + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (current_byte == 0xd) {\n            *current_position = 0;\n            next_char = current_position + 1;\n            if (current_position[1] == 10) {\n              next_char = current_position + 2;\n              previous_position = current_position + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (current_byte == 0x23) {\n            process_lines_00104d1c();\n            return;\n          }\n        }\n      }\n      *current_position = 0;\n      if (current_position[1] == 0xd) {\n        previous_position = current_position + 1;\n        next_char = current_position + 2;\n      }\n      else {\n        next_char = current_position + 1;\n      }\nLAB_00114553:\n      current_byte = *line_start;\n      while ((current_byte == 0x20 || (current_position = line_start, current_byte == 9))) {\n        current_position = line_start + 1;\n        line_start = line_start + 1;\n        current_byte = *current_position;\n      }\n      do {\n        if ((current_byte == 10) || (current_byte == 0xd)) goto LAB_00114676;\n        if (current_byte == 0) goto LAB_00114599;\n        current_byte = current_position[1];\n        current_position = current_position + 1;\n      } while ((current_byte != 0x20) && (current_byte != 9));\n      if ((char)current_byte < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        current_byte = current_position[1];\n        if ((((((current_byte == 9) || (current_byte == 0x20)) &&\n              ((current_byte = current_position[2], current_byte == 9 || (current_byte == 0x20)))) &&\n             ((current_byte = current_position[3], current_byte == 9 || (current_byte == 0x20)))) &&\n            ((current_byte = current_position[4], current_byte == 9 || (current_byte == 0x20)))) &&\n           ((current_byte = current_position[5], current_byte == 9 || (current_byte == 0x20)))) {\n          current_byte = current_position[6];\n          current_char = current_position + 6;\n          if ((current_byte == 9) || (current_byte == 0x20)) {\n            do {\n              do {\n                current_byte = current_char[1];\n                current_char = current_char + 1;\n              } while (current_byte == 0x20);\n            } while (current_byte == 9);\n          }\n        }\n        if ((0xd < current_byte) || ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0)) {\n          error_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          print_error_message_00119ed0(error_message,filename,line_number);\n        }\n      }\nLAB_00114599:\n      *current_position = 0;\n      if (line_start < current_position) {\n        slot = (byte **)htab_find_slot(hash_table,line_start,1);\n        *slot = line_start;\n      }\n      line_number = line_number + 1;\n      line_start = next_char;\n      current_byte = previous_position[1];\n    }\n    *file_data = buffer;\n  }\n  return;\n}\n\n",
            "current_name": "read_and_process_file_00114460",
            "entrypoint": "0x00114460",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114460": "read_and_process_file_00114460",
                "__n": "file_size",
                "__ptr": "buffer",
                "__stream": "file",
                "bVar8": "current_byte",
                "ferror(__stream)": "file_error",
                "iVar1": "line_number",
                "param_1": "filename",
                "param_2": "hash_table",
                "param_3": "file_data",
                "pbVar10": "current_position",
                "pbVar11": "previous_position",
                "pbVar12": "line_start",
                "pbVar7": "current_char",
                "pbVar9": "next_char",
                "pcVar3": "error_message",
                "piVar2": "error_number",
                "ppbVar6": "slot",
                "sVar5": "bytes_read",
                "uVar4": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114690": {
            "additional_data": {
                "FUN_00114690": {
                    "1": "parse_and_copy_archive",
                    "2": "process_input_file",
                    "4": "process_file",
                    "5": "extract_and_copy_archive",
                    "6": "process_binary_file"
                },
                "__ptr": {
                    "1": "linked_files"
                },
                "bVar1": {
                    "1": "flags",
                    "12": "byte_var1",
                    "2": "byte_variable",
                    "4": "byte_var",
                    "5": "byte_value"
                },
                "bVar25": {
                    "1": "boolean_var2",
                    "2": "boolean_value",
                    "4": "bool_var25",
                    "5": "bool_var",
                    "6": "bool_var1"
                },
                "bVar26": {
                    "1": "byte_value",
                    "2": "temp_flag",
                    "4": "byte_var26",
                    "8": "byte_var2"
                },
                "cVar2": {
                    "1": "format_matched",
                    "2": "char_value",
                    "3": "char_value1",
                    "4": "char_var2",
                    "9": "char_var1"
                },
                "cVar3": {
                    "1": "format_flag2",
                    "2": "format_check_result",
                    "4": "char_value2",
                    "9": "char_var2"
                },
                "iVar4": {
                    "1": "integer_variable1",
                    "2": "format_error1",
                    "3": "int_var4",
                    "6": "int_var1"
                },
                "iVar5": {
                    "1": "file_stat_result",
                    "2": "format_error2",
                    "3": "int_var5",
                    "4": "stat_result",
                    "7": "int_var2"
                },
                "lStack_98": {
                    "1": "long_stack_var1",
                    "2": "long_stack_var98",
                    "3": "long_var4",
                    "8": "file_size"
                },
                "lVar13": {
                    "1": "temp_dir_path",
                    "2": "file_info_result",
                    "3": "long_var13",
                    "8": "long_var2"
                },
                "lVar21": {
                    "1": "bytes_remaining",
                    "2": "long_var_3",
                    "8": "long_var3"
                },
                "lVar8": {
                    "1": "read_result",
                    "2": "long_var_1",
                    "3": "long_var8",
                    "5": "bytes_read",
                    "7": "long_var1"
                },
                "local_158": {
                    "1": "output_stat_buffer",
                    "2": "local_stat_var158",
                    "3": "stat_struct",
                    "4": "local_stat_struct"
                },
                "local_198": {
                    "1": "local_pointer_to_long_variable",
                    "2": "local_pointer2",
                    "3": "local_pointer_to_long",
                    "4": "local_variable2"
                },
                "local_1a0": {
                    "1": "output_bfd_object",
                    "2": "output_file_ptr",
                    "4": "local_variable1"
                },
                "local_c8": {
                    "1": "temp_dir_path_buffers",
                    "2": "local_array"
                },
                "local_c8[3]": {
                    "1": "temp_directory_paths"
                },
                "param_1": {
                    "1": "file_path",
                    "11": "input_file_path",
                    "13": "input_file",
                    "3": "input_file_name"
                },
                "param_2": {
                    "1": "temp_filepath",
                    "11": "output_file_path",
                    "14": "output_file",
                    "3": "output_file_name"
                },
                "param_3": {
                    "1": "fd",
                    "29": "file_descriptor"
                },
                "param_4": {
                    "1": "file_permissions",
                    "2": "stat_buf",
                    "6": "file_stat",
                    "7": "stat_buffer"
                },
                "param_5": {
                    "1": "open_flags",
                    "11": "target_format",
                    "2": "flags",
                    "4": "target",
                    "6": "file_format"
                },
                "param_6": {
                    "1": "temp_file_path",
                    "2": "file_access_mode",
                    "6": "file_mode",
                    "8": "file_size"
                },
                "param_7": {
                    "1": "flags",
                    "2": "copy_options"
                },
                "pcVar15": {
                    "1": "pointer_to_char_1",
                    "2": "pointer_to_char1",
                    "3": "temp_directory_path",
                    "4": "temp_dir"
                },
                "pcVar16": {
                    "1": "char_ptr2"
                },
                "pcVar17": {
                    "1": "pointer_char2",
                    "2": "path_segment",
                    "3": "pointer_to_char2"
                },
                "pcVar18": {
                    "1": "char_pointer_var18",
                    "2": "path",
                    "3": "temp_file_path"
                },
                "pcVar19": {
                    "1": "archive_file"
                },
                "pcVar20": {
                    "1": "pointer_to_code_function",
                    "2": "pointer_to_code",
                    "3": "close_function"
                },
                "pcVar23": {
                    "1": "temp_path",
                    "2": "path",
                    "3": "pointer_to_char4"
                },
                "pcVar26": {
                    "1": "temp_path"
                },
                "piVar10": {
                    "1": "ptr_to_int",
                    "2": "int_pointer_var10",
                    "3": "int_pointer",
                    "5": "errno_location"
                },
                "ppcVar16": {
                    "1": "pointer_to_pointer_to_char",
                    "2": "pointer_to_pointer_char2"
                },
                "ppcVar19": {
                    "1": "new_archive_file_pointer",
                    "2": "pointer_to_pointer_char3"
                },
                "ppcVar20": {
                    "1": "pointer_to_code_function",
                    "4": "close_function"
                },
                "ppcVar23": {
                    "1": "pc_var23"
                },
                "ppcVar24": {
                    "1": "stat_function"
                },
                "ppcVar6": {
                    "1": "double_pointer_char_var6",
                    "2": "pointer_to_pointer_char1",
                    "4": "pointer_to_char_pointer"
                },
                "psVar24": {
                    "1": "pointer_to_stat_struct1",
                    "2": "pointer_to_stat_var24",
                    "3": "stat_ptr",
                    "4": "pointer_to_stat"
                },
                "psVar27": {
                    "1": "temp_file_info"
                },
                "puVar14": {
                    "1": "input_file_pointer",
                    "2": "pointer_to_bfd",
                    "6": "bfd_handle"
                },
                "puVar19": {
                    "1": "ppc_var19"
                },
                "puVar20": {
                    "1": "pointer_to_code"
                },
                "puVar9": {
                    "1": "undefined_pointer",
                    "2": "temp_var",
                    "3": "temp_directory"
                },
                "pvVar7": {
                    "1": "buffer_ptr",
                    "11": "buffer",
                    "2": "void_pointer_var7",
                    "4": "void_pointer"
                },
                "uStack_b0": {
                    "1": "unsigned_stack_varb0",
                    "2": "uint_stack_b0",
                    "4": "file_permissions"
                },
                "uVar11": {
                    "1": "auxiliary_var1",
                    "2": "undefined8_var1",
                    "4": "uint64_var1",
                    "5": "error_message"
                },
                "uVar12": {
                    "1": "uint64_variable2",
                    "2": "ulong_var12",
                    "4": "uint64_var2",
                    "7": "error_message"
                },
                "uVar22": {
                    "1": "uint32_var1",
                    "2": "flag_value",
                    "3": "uint_var22",
                    "4": "uint_var1"
                },
                "uVar25": {
                    "1": "is_thin_archive"
                }
            },
            "called": [
                "strerror",
                "FUN_001126c0",
                "dcgettext",
                "free",
                "FUN_00119dd0",
                "FUN_00114d50",
                "close",
                "FUN_0011256b",
                "__errno_location",
                "FUN_0011a0e0",
                "bfd_openr_next_archived_file",
                "bfd_set_error",
                "bfd_close_all_done",
                "bfd_stat",
                "bfd_openr",
                "FUN_00119ed0",
                "bfd_openw",
                "bfd_set_format",
                "FUN_00113f50",
                "bfd_get_error",
                "bfd_check_format_matches",
                "FUN_00114e50",
                "bfd_close",
                "bfd_fdopenw",
                "bfd_check_format",
                "FUN_00104d25"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nvoid process_binary_file_00114690(undefined8 input_file,undefined8 output_file,int file_descriptor,undefined8 stat_buffer,\n                 undefined8 target_format,long file_size,undefined8 function_parameter)\n\n{\n  byte byte_var1;\n  char char_var1;\n  char char_var2;\n  int int_var1;\n  int int_var2;\n  char **pointer_to_char_pointer;\n  void *buffer;\n  long long_var1;\n  undefined8 *temp_directory;\n  int *errno_location;\n  undefined8 error_message;\n  undefined8 error_message;\n  long long_var2;\n  undefined8 *bfd_handle;\n  char *temp_dir;\n  char **pointer_to_pointer_char2;\n  char *pointer_to_char2;\n  char *temp_file_path;\n  undefined8 *temp_dir_list;\n  char **pointer_to_pointer_char3;\n  code *close_function;\n  long long_var3;\n  uint flag;\n  char *pointer_to_char4;\n  stat *pointer_to_stat;\n  bool bool_var1;\n  byte byte_var2;\n  undefined8 *local_variable1;\n  long *local_variable2;\n  stat local_stat;\n  void *local_array [3];\n  uint file_permission;\n  long file_size;\n  \n  byte_var2 = 0;\n  long_var2 = get_file_information_00113f50();\n  if (long_var2 < 1) {\n    if (long_var2 == 0) {\n      error_message = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      print_error_message_00119ed0(error_message,input_file);\n    }\n    DAT_00127a40 = 1;\n    return;\n  }\n  bfd_handle = (undefined8 *)bfd_openr(input_file,target_format);\n  if ((bfd_handle == (undefined8 *)0x0) || (int_var2 = bfd_stat(bfd_handle,stat_buffer), int_var2 != 0)) {\n    print_error_message_001126c0(input_file,0,0,0);\n    DAT_00127a40 = 1;\n    return;\n  }\n  switch(DAT_001279a4) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x8000;\n  }\n  if (DAT_0012799c == 1) {\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0xc0000;\n  }\n  else if (DAT_0012799c == 2) {\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x40000;\n  }\n  char_var1 = bfd_check_format(bfd_handle,2);\n  if (char_var1 != '\\0') {\n    if (file_size == 0) {\n      char_var1 = '\\0';\n      file_size = *(long *)bfd_handle[1];\n    }\n    if (file_descriptor < 0) {\n      local_variable1 = (undefined8 *)bfd_openw(output_file,file_size);\n    }\n    else {\n      local_variable1 = (undefined8 *)bfd_fdopenw(output_file,file_size,file_descriptor);\n    }\n    if (local_variable1 != (undefined8 *)0x0) {\n      if (DAT_00127a30 != 0) {\n        error_message = *bfd_handle;\n        error_message = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        print_error_message_00119ed0(error_message,error_message);\n        DAT_00127a30 = 0;\n      }\n      execute_function_00114d50(local_variable1,bfd_handle,DAT_001264b4);\n      local_variable2 = local_variable1 + 0x1f;\n      if ((*(byte *)((long)bfd_handle + 0x49) & 0x10) != 0) {\n        DAT_00127a40 = 1;\n        bfd_set_error(5);\n        error_message = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        print_error_message_001126c0(0,bfd_handle,0,error_message);\n        return;\n      }\n      temp_dir = (char *)create_temp_directory_0011a0e0(*local_variable1);\n      if (temp_dir == (char *)0x0) {\n        errno_location = __errno_location();\n        temp_dir = strerror(*errno_location);\n        error_message = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        print_error_and_exit_00119dd0(error_message,temp_dir);\n      }\n      if (DAT_00127a48 == 7) {\n        byte_var1 = *(byte *)((long)bfd_handle + 0x49);\n        flag = 0;\n      }\n      else {\n        byte_var1 = *(byte *)((long)bfd_handle + 0x49);\n        flag = byte_var1 >> 3 & 1;\n      }\n      bool_var1 = _DAT_001264b0 != 0;\n      *(byte *)((long)local_variable1 + 0x49) =\n           byte_var1 & 0x10 | (byte)(flag << 3) | *(byte *)((long)local_variable1 + 0x49) & 0xe7;\n      if (bool_var1) {\n        *(uint *)((long)local_variable1 + 0x44) = *(uint *)((long)local_variable1 + 0x44) | 0x2000;\n      }\n      temp_dir_list = (undefined8 *)0x0;\n      pointer_to_pointer_char2 = (char **)bfd_openr_next_archived_file(bfd_handle,0);\n      char_var2 = bfd_set_format(local_variable1,*(byte *)(bfd_handle + 9) & 7);\n      if (char_var2 == '\\0') {\n        DAT_00127a40 = 1;\n        print_error_message_001126c0(0,local_variable1,0,0);\n        remove_directory_00114b84();\n        return;\n      }\n      while ((DAT_00127a40 == 0 && (pointer_to_pointer_char2 != (char **)0x0))) {\n        temp_file_path = *pointer_to_pointer_char2;\n        pointer_to_char2 = temp_file_path;\n        if (*temp_file_path == '/') {\nLAB_0010527d:\n          error_message = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          print_error_message_00119ed0(error_message,temp_file_path);\nLAB_00104e93:\n          DAT_00127a40 = 1;\n          goto LAB_00114b4b;\n        }\n        while (*pointer_to_char2 != '\\0') {\n          pointer_to_char4 = pointer_to_char2;\n          if ((*pointer_to_char2 == '.') && (pointer_to_char4 = pointer_to_char2 + 1, pointer_to_char2[1] == '.')) {\n            pointer_to_char4 = pointer_to_char2 + 2;\n            if ((pointer_to_char2[2] == '\\0') || (pointer_to_char2[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*pointer_to_char4 != '\\0' && (*pointer_to_char4 != '/')); pointer_to_char4 = pointer_to_char4 + 1) {\n          }\n          pointer_to_char2 = pointer_to_char4;\n          if (*pointer_to_char4 == '/') {\n            extract_and_copy_archive_001052a2();\n            return;\n          }\n        }\n        temp_file_path = (char *)concat(temp_dir,&DAT_0011b47d);\n        int_var2 = stat(temp_file_path,&local_stat);\n        temp_directory = temp_dir_list;\n        if (-1 < int_var2) {\n          long_var2 = create_temp_directory_0011a0e0(temp_file_path);\n          free(temp_file_path);\n          if (long_var2 == 0) {\n            errno_location = __errno_location();\n            temp_file_path = strerror(*errno_location);\n            error_message = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            print_error_message_00119ed0(error_message,temp_file_path);\n            goto LAB_00104e93;\n          }\n          temp_directory = (undefined8 *)xmalloc(0x18);\n          temp_file_path = *pointer_to_pointer_char2;\n          *temp_directory = temp_dir_list;\n          temp_directory[2] = 0;\n          temp_directory[1] = long_var2;\n          temp_file_path = (char *)concat(long_var2,&DAT_0011b47d,temp_file_path);\n        }\n        int_var2 = 0;\n        if (DAT_001279eb != '\\0') {\n          pointer_to_stat = &local_stat;\n          for (long_var2 = 0x24; long_var2 != 0; long_var2 = long_var2 + -1) {\n            *(undefined4 *)&pointer_to_stat->st_dev = 0;\n            pointer_to_stat = (stat *)((long)pointer_to_stat + (ulong)byte_var2 * -8 + 4);\n          }\n          pointer_to_pointer_char3 = (char **)pointer_to_pointer_char2[0x1d];\n          if ((char **)pointer_to_pointer_char2[0x1d] == (char **)0x0) {\n            pointer_to_pointer_char3 = pointer_to_pointer_char2;\n          }\n          int_var2 = (**(code **)(pointer_to_pointer_char3[1] + 0x1e8))(pointer_to_pointer_char2,&local_stat);\n          if (int_var2 != 0) {\n            pointer_to_char2 = *pointer_to_pointer_char2;\n            error_message = dcgettext(0,\"internal stat error on %s\",5);\n            print_error_message_00119ed0(error_message,pointer_to_char2);\n          }\n        }\n        temp_dir_list = (undefined8 *)xmalloc(0x18);\n        temp_dir_list[1] = temp_file_path;\n        *temp_dir_list = temp_directory;\n        temp_dir_list[2] = 0;\n        char_var2 = bfd_check_format(pointer_to_pointer_char2,1);\n        if (char_var2 == '\\0') {\n          error_message = dcgettext(0,\"Unable to recognise the format of file\",5);\n          print_error_message_001126c0(0,pointer_to_pointer_char2,0,error_message);\n          pointer_to_pointer_char3 = (char **)bfd_openw(temp_file_path,file_size);\n          if (pointer_to_pointer_char3 == (char **)0x0) {\nLAB_00104e80:\n            print_error_message_001126c0(temp_file_path,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          pointer_to_char_pointer = (char **)pointer_to_pointer_char2[0x1d];\n          if ((char **)pointer_to_pointer_char2[0x1d] == (char **)0x0) {\n            pointer_to_char_pointer = pointer_to_pointer_char2;\n          }\n          int_var1 = (**(code **)(pointer_to_char_pointer[1] + 0x1e8))(pointer_to_pointer_char2);\n          long_var2 = file_size;\n          if (int_var1 == 0) {\n            if (file_size < 0) {\n              get_formatted_string_001125fa(pointer_to_pointer_char2);\n              error_message = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              print_error_message_00119ed0(error_message);\n            }\n            else {\n              int_var1 = bfd_seek(pointer_to_pointer_char2,0,0);\n              if (int_var1 == 0) {\n                if (DAT_001279e9 != '\\0') {\n                  pointer_to_char2 = *pointer_to_pointer_char3;\n                  error_message = get_formatted_string_001125fa(pointer_to_pointer_char2);\n                  pointer_to_char4 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(pointer_to_char4,error_message,pointer_to_char2);\n                }\n                buffer = (void *)xmalloc(0x2000);\n                for (; long_var2 != 0; long_var2 = long_var2 - long_var3) {\n                  long_var3 = 0x2000;\n                  if (long_var2 < 0x2001) {\n                    long_var3 = long_var2;\n                  }\n                  long_var1 = bfd_bread(buffer,long_var3,pointer_to_pointer_char2);\n                  pointer_to_char_pointer = pointer_to_pointer_char2;\n                  if ((long_var3 != long_var1) ||\n                     (long_var1 = bfd_bwrite(buffer,long_var3,pointer_to_pointer_char3), pointer_to_char_pointer = pointer_to_pointer_char3,\n                     long_var3 != long_var1)) {\n                    print_error_message_001126c0(0,pointer_to_char_pointer,0,0);\n                    free(buffer);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*pointer_to_pointer_char3,file_permission | 0x100);\n                free(buffer);\n                char_var2 = bfd_close_all_done(pointer_to_pointer_char3);\n                if (char_var2 == '\\0') {\n                  print_error_message_001126c0(temp_file_path,0,0,0);\n                  DAT_00127a40 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              error_message = get_formatted_string_001125fa(pointer_to_pointer_char2);\n              print_error_message_0011a110(error_message);\n            }\n          }\n          else {\n            print_error_message_001126c0(0,pointer_to_pointer_char2,0,0);\n          }\nLAB_00104f00:\n          char_var2 = bfd_close_all_done(pointer_to_pointer_char3);\n          if (char_var2 == '\\0') {\n            print_error_message_001126c0(temp_file_path,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(temp_file_path);\n          DAT_00127a40 = 1;\n        }\n        else {\n          if (char_var1 == '\\0') {\n            pointer_to_pointer_char3 = (char **)bfd_openw(temp_file_path,*(undefined8 *)pointer_to_pointer_char2[1]);\n          }\n          else {\n            pointer_to_pointer_char3 = (char **)bfd_openw(temp_file_path,file_size);\n          }\n          if (pointer_to_pointer_char3 == (char **)0x0) goto LAB_00104e80;\n          char_var2 = FUNC_00114e50(pointer_to_pointer_char2,pointer_to_pointer_char3,function_parameter);\n          if (char_var2 == '\\0') {\n            int_var1 = bfd_get_arch(pointer_to_pointer_char2);\n            if (int_var1 == 0) goto LAB_00104d75;\n            char_var2 = bfd_close_all_done(pointer_to_pointer_char3);\n            if (char_var2 == '\\0') {\n              print_error_message_001126c0(temp_file_path,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          char_var2 = bfd_close(pointer_to_pointer_char3);\n          if (char_var2 == '\\0') {\n            print_error_message_001126c0(temp_file_path,0,0,0);\n            DAT_00127a40 = 1;\n          }\nLAB_00114a86:\n          if ((DAT_001279eb != '\\0') && (int_var2 == 0)) {\n            set_file_time_0011a350(temp_file_path,&local_stat);\n          }\n          long_var2 = bfd_openr(temp_file_path,file_size);\n          temp_dir_list[2] = long_var2;\n          *local_variable2 = long_var2;\n          local_variable2 = (long *)(long_var2 + 0xf0);\n          pointer_to_pointer_char3 = (char **)bfd_openr_next_archived_file(bfd_handle);\n          bfd_close(pointer_to_pointer_char2);\n          pointer_to_pointer_char2 = pointer_to_pointer_char3;\n        }\n      }\n      *local_variable2 = 0;\n      buffer = (void *)xstrdup(*local_variable1);\n      if (DAT_00127a40 == 0) {\n        close_function = bfd_close;\n      }\n      else {\n        close_function = bfd_close_all_done;\n      }\n      char_var1 = (*close_function)(local_variable1);\n      if (char_var1 == '\\0') {\n        DAT_00127a40 = 1;\n        print_error_message_001126c0(buffer,0,0,0);\n      }\n      free(buffer);\n      buffer = (void *)xstrdup(*bfd_handle);\n      char_var1 = bfd_close(bfd_handle);\n      if (char_var1 == '\\0') {\n        DAT_00127a40 = 1;\n        print_error_message_001126c0(buffer,0,0,0);\n      }\n      free(buffer);\nLAB_00114b4b:\n      while (temp_dir_list != (undefined8 *)0x0) {\n        if (temp_dir_list[2] == 0) {\n          rmdir((char *)temp_dir_list[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)temp_dir_list[1]);\n        }\n        free((void *)temp_dir_list[1]);\n        bfd_handle = (undefined8 *)*temp_dir_list;\n        free(temp_dir_list);\n        temp_dir_list = bfd_handle;\n      }\n      rmdir(temp_dir);\n      free(temp_dir);\n      return;\n    }\nLAB_00105231:\n    close(file_descriptor);\n    print_error_message_001126c0(output_file,0,0,0);\n    DAT_00127a40 = 1;\n    return;\n  }\n  char_var1 = bfd_check_format_matches(bfd_handle,1,local_array);\n  if (char_var1 == '\\0') {\n    int_var2 = bfd_get_error();\n    char_var1 = bfd_check_format_matches(bfd_handle,3,&local_stat);\n    if (char_var1 == '\\0') {\n      int_var1 = bfd_get_error();\n      if (int_var2 != int_var1) {\n        bfd_set_error(int_var2);\n      }\n      print_error_message_001126c0(input_file,0,0,0);\n      if (int_var2 == 0xd) {\n        print_matching_formats_0011256b(local_array[0]);\n      }\n      if (int_var1 != 0xd) {\n        DAT_00127a40 = 1;\n        return;\n      }\n      print_matching_formats_0011256b(local_stat.st_dev);\n      DAT_00127a40 = 1;\n      return;\n    }\n    if (int_var2 == 0xd) {\n      free(local_array[0]);\n    }\n  }\n  if (file_size == 0) {\n    file_size = *(long *)bfd_handle[1];\n  }\n  if (file_descriptor < 0) {\n    long_var2 = bfd_openw(output_file,file_size);\n  }\n  else {\n    long_var2 = bfd_fdopenw(output_file,file_size,file_descriptor);\n  }\n  if (long_var2 == 0) goto LAB_00105231;\n  execute_function_00114d50(long_var2,bfd_handle,DAT_001264b4);\n  char_var1 = FUNC_00114e50(bfd_handle,long_var2,function_parameter);\n  if (char_var1 == '\\0') {\n    DAT_00127a40 = 1;\n  }\n  else if (DAT_00127a40 == 0) {\n    char_var1 = bfd_close(long_var2);\n    goto LAB_001147d5;\n  }\n  char_var1 = bfd_close_all_done(long_var2);\nLAB_001147d5:\n  if (char_var1 != '\\x01') {\n    DAT_00127a40 = 1;\n    print_error_message_001126c0(output_file,0,0,0);\n    return;\n  }\n  char_var1 = bfd_close(bfd_handle);\n  if (char_var1 == '\\0') {\n    DAT_00127a40 = 1;\n    print_error_message_001126c0(input_file,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_binary_file_00114690",
            "entrypoint": "0x00114690",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114690": "process_binary_file_00114690",
                "__ptr": "temp_dir_list",
                "bVar1": "byte_var1",
                "bVar25": "bool_var1",
                "bVar26": "byte_var2",
                "cVar2": "char_var1",
                "cVar3": "char_var2",
                "iVar4": "int_var1",
                "iVar5": "int_var2",
                "lStack_98": "file_size",
                "lVar13": "long_var2",
                "lVar21": "long_var3",
                "lVar8": "long_var1",
                "local_158": "local_stat",
                "local_198": "local_variable2",
                "local_1a0": "local_variable1",
                "local_c8": "local_array",
                "param_1": "input_file",
                "param_2": "output_file",
                "param_3": "file_descriptor",
                "param_4": "stat_buffer",
                "param_5": "target_format",
                "param_6": "file_size",
                "param_7": "function_parameter",
                "pcVar15": "temp_dir",
                "pcVar16": "current_file",
                "pcVar17": "pointer_to_char2",
                "pcVar18": "temp_file_path",
                "pcVar19": "current_file",
                "pcVar20": "close_function",
                "pcVar23": "pointer_to_char4",
                "piVar10": "errno_location",
                "ppcVar16": "pointer_to_pointer_char2",
                "ppcVar19": "pointer_to_pointer_char3",
                "ppcVar6": "pointer_to_char_pointer",
                "psVar24": "pointer_to_stat",
                "puVar14": "bfd_handle",
                "puVar9": "temp_directory",
                "pvVar7": "buffer",
                "uStack_b0": "file_permission",
                "uVar11": "error_message",
                "uVar12": "error_message",
                "uVar22": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114b84": {
            "additional_data": {
                "FUN_00114b84": {
                    "1": "delete_directory",
                    "19": "remove_directory",
                    "2": "remove_directory_and_free_memory",
                    "7": "remove_and_free_directory"
                },
                "param_9": {
                    "31": "directory_path"
                }
            },
            "called": [
                "free",
                "rmdir"
            ],
            "calling": [
                "FUN_00104d25",
                "FUN_00104ea2"
            ],
            "code": "\nvoid remove_directory_00114b84(void)\n\n{\n  char *directory_path;\n  \n  rmdir(directory_path);\n  free(directory_path);\n  return;\n}\n\n",
            "current_name": "remove_directory_00114b84",
            "entrypoint": "0x00114b84",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114b84": "remove_directory_00114b84",
                "param_9": "directory_path"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114c20": {
            "additional_data": {
                "&DAT_0011b499": {
                    "1": "comparison_string"
                },
                "DAT_0011b499": {
                    "1": "reference_string",
                    "12": "comparison_string",
                    "3": "string_to_compare"
                },
                "DAT_001278d8": {
                    "1": "constant",
                    "13": "flag"
                },
                "FUN_00114c20": {
                    "1": "process_and_update",
                    "10": "process_data",
                    "16": "process_and_compare_data",
                    "2": "process_data_and_compare"
                },
                "cVar1": {
                    "22": "comparison_result",
                    "3": "string_comparison_result",
                    "6": "result"
                },
                "compare_strings_00113fb0": {
                    "13": "compare_strings"
                },
                "param_1": {
                    "1": "data_pointer",
                    "19": "data",
                    "4": "data_ptr",
                    "6": "input_data"
                },
                "pcVar2": {
                    "1": "selected_data",
                    "2": "pointer_to_data",
                    "3": "pointer",
                    "4": "char_ptr"
                },
                "process_data_00114190": {
                    "11": "process_data"
                }
            },
            "called": [
                "FUN_00113fb0",
                "FUN_00114190"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid process_and_compare_data_00114c20(long data)\n\n{\n  char comparison_result;\n  char *char_ptr;\n  \n  process_data(data,1,1);\n  comparison_result = compare_strings(data,&DAT_0011b499);\n  if (comparison_result != '\\0') {\n    char_ptr = (char *)(data + 5);\n    if (*(char *)(data + 4) != 'a') {\n      char_ptr = (char *)(data + 4);\n    }\n    if (*char_ptr != '\\0') {\n      process_data(char_ptr,1,0x100);\n    }\n  }\n  DAT_001278d8 = 1;\n  return;\n}\n\n",
            "current_name": "process_and_compare_data_00114c20",
            "entrypoint": "0x00114c20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114c20": "process_and_compare_data_00114c20",
                "cVar1": "comparison_result",
                "compare_strings_00113fb0": "compare_strings",
                "param_1": "data",
                "pcVar2": "char_ptr",
                "process_data_00114190": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114c80": {
            "additional_data": {
                "FUN_00114c80": {
                    "1": "extract_parameter",
                    "10": "parse_parameter",
                    "3": "parse_query_string",
                    "4": "parse_assignment"
                },
                "auVar3": {
                    "1": "extracted_data",
                    "2": "parsed_assignment",
                    "3": "result_struct",
                    "4": "result",
                    "5": "parsed_data"
                },
                "auVar3._0_8_": {
                    "1": "extracted_param_array"
                },
                "auVar3._0_8_[1]": {
                    "1": "param_value"
                },
                "auVar3._0_8_[2]": {
                    "1": "param_name"
                },
                "auVar3._8_8_": {
                    "1": "param_data"
                },
                "copy_string_0011a480": {
                    "2": "copy_substring",
                    "5": "copy_string"
                },
                "dcgettext": {
                    "1": "get_string",
                    "5": "get_error_message"
                },
                "param_1": {
                    "1": "argument_string",
                    "2": "parameter_string",
                    "22": "input_string",
                    "4": "query_string"
                },
                "param_2": {
                    "1": "param_2_value",
                    "2": "initial_value",
                    "3": "param_2",
                    "5": "value",
                    "6": "value_1",
                    "7": "default_value"
                },
                "param_3": {
                    "1": "param3_val",
                    "2": "param_3",
                    "27": "error_message"
                },
                "param_4": {
                    "1": "exit_status",
                    "2": "param4",
                    "3": "extra_data",
                    "4": "user_data",
                    "6": "value_2"
                },
                "pcVar1": {
                    "1": "equals_sign_ptr",
                    "2": "equals_sign_position",
                    "7": "equal_sign_ptr",
                    "8": "equal_sign_position"
                },
                "print_error_and_exit_00119dd0": {
                    "8": "print_error_and_exit"
                },
                "strchr": {
                    "1": "find_equal_sign"
                },
                "strcpy": {
                    "1": "copy_string"
                },
                "uVar2": {
                    "1": "translation",
                    "2": "error_message_ptr",
                    "3": "copy_result",
                    "5": "error_message"
                },
                "xmalloc": {
                    "7": "allocate_memory"
                }
            },
            "called": [
                "FUN_0011a480",
                "xmalloc",
                "strchr",
                "FUN_001053b5"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16] parse_parameter_00114c80(char *input_string,undefined8 default_value,undefined8 error_message,undefined8 value_2)\n\n{\n  char *equal_sign_position;\n  undefined8 error_message;\n  undefined parsed_data [16];\n  \n  equal_sign_position = strchr(input_string,0x3d);\n  if (equal_sign_position != (char *)0x0) {\n    extracted_param_array = (undefined8 *)xmalloc(0x30);\n    error_message = copy_string(input_string,(long)equal_sign_position - (long)input_string);\n    param_name = equal_sign_position + 1;\n    param_value = error_message;\n    extracted_param_array[4] = 0;\n    extracted_param_array[3] = 0;\n    *extracted_param_array = default_value;\n    param_data = value_2;\n    return parsed_data;\n  }\n  error_message = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_and_exit(error_message,error_message);\n}\n\n",
            "current_name": "parse_parameter_00114c80",
            "entrypoint": "0x00114c80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114c80": "parse_parameter_00114c80",
                "auVar3": "parsed_data",
                "auVar3._0_8_": "extracted_param_array",
                "auVar3._0_8_[1]": "param_value",
                "auVar3._0_8_[2]": "param_name",
                "auVar3._8_8_": "param_data",
                "copy_string_0011a480": "copy_string",
                "dcgettext": "get_error_message",
                "param_1": "input_string",
                "param_2": "default_value",
                "param_3": "error_message",
                "param_4": "value_2",
                "pcVar1": "equal_sign_position",
                "print_error_and_exit_00119dd0": "print_error_and_exit",
                "strchr": "find_delimiter",
                "uVar2": "error_message",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114cf0": {
            "additional_data": {
                "0x2f": {
                    "1": "slash_character"
                },
                "0x5858585858587473": {
                    "1": "termination_value"
                },
                "0xb": {
                    "1": "allocation_size"
                },
                "9": {
                    "1": "prefix_length_fixed"
                },
                "FUN_00114cf0": {
                    "1": "allocate_memory_and_set_values",
                    "3": "extract_file_name",
                    "4": "create_directory_path",
                    "5": "create_file_path",
                    "6": "allocate_file_path"
                },
                "bVar6": {
                    "1": "is_relative",
                    "2": "is_null",
                    "5": "is_slash_present",
                    "7": "is_slash",
                    "9": "found_slash"
                },
                "lVar2": {
                    "1": "num_chars",
                    "10": "index",
                    "3": "count",
                    "5": "path_length"
                },
                "lVar3": {
                    "1": "directory_length",
                    "10": "offset",
                    "2": "start_index",
                    "3": "file_name_length",
                    "4": "prefix_length"
                },
                "lVar4": {
                    "1": "prefix_length",
                    "2": "last_slash_index",
                    "3": "slash_position",
                    "7": "slash_offset",
                    "8": "slash_index"
                },
                "param_1": {
                    "1": "input_path",
                    "17": "file_path",
                    "2": "input_string",
                    "9": "path"
                },
                "pcVar1": {
                    "1": "filename",
                    "2": "last_slash_position",
                    "27": "last_slash"
                },
                "pcVar5": {
                    "1": "substring_destination",
                    "2": "new_string",
                    "3": "new_file_name",
                    "8": "new_path"
                },
                "xmalloc": {
                    "3": "allocate_memory"
                }
            },
            "called": [
                "strrchr",
                "xmalloc"
            ],
            "calling": [
                "FUN_0011a0e0",
                "FUN_00116b90"
            ],
            "code": "\nvoid allocate_file_path_00114cf0(char *file_path)\n\n{\n  char *last_slash;\n  long index;\n  long offset;\n  long slash_index;\n  char *new_path;\n  byte found_slash;\n  \n  found_slash = 0;\n  last_slash = strrchr(file_path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    offset = 0;\n  }\n  else {\n    slash_index = (long)last_slash - (long)file_path;\n    last_slash = (char *)xmalloc(slash_index + 0xb);\n    offset = slash_index + 1;\n    new_path = last_slash;\n    for (index = slash_index; index != 0; index = index + -1) {\n      *new_path = *file_path;\n      file_path = file_path + (ulong)found_slash * -2 + 1;\n      new_path = new_path + (ulong)found_slash * -2 + 1;\n    }\n    last_slash[slash_index] = '/';\n  }\n  *(undefined8 *)(last_slash + offset) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + offset) + 8) = 0;\n  return;\n}\n\n",
            "current_name": "allocate_file_path_00114cf0",
            "entrypoint": "0x00114cf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114cf0": "allocate_file_path_00114cf0",
                "bVar6": "found_slash",
                "lVar2": "index",
                "lVar3": "offset",
                "lVar4": "slash_index",
                "param_1": "file_path",
                "pcVar1": "last_slash",
                "pcVar5": "new_path",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114d50": {
            "additional_data": {
                "(**(code **)(*(long *)(*(long *)(dataPointer1 + 8) + 0x380) + 0x78))": {
                    "1": "callback_function"
                },
                "(**(code **)(*(long *)(*(long *)(param_1 + 8) + 0x380) + 0x78))": {
                    "1": "function_to_execute"
                },
                "(**(code **)(*(long *)(*(long *)(param_1 + 8) + 0x380) + 0x78))(param_1,param_3 != 0)": {
                    "1": "call_function"
                },
                "(byte *)(*(*(data + 8) + 0x380) + 0x71)": {
                    "1": "callback_byte"
                },
                "(code **)(*(*(callbackData + 8) + 0x380) + 0x78)": {
                    "1": "callback_function"
                },
                "(code **)(*(long *)(*(long *)(sourceParam + 8) + 0x380) + 0x78)": {
                    "1": "function_ptr"
                },
                "(int *)(*(long *)(arg1 + 8) + 8)": {
                    "1": "ptr1"
                },
                "(int *)(*(long *)(arg2 + 8) + 8)": {
                    "1": "ptr2"
                },
                "(int *)(*(long *)(sourceParam + 8) + 8)": {
                    "1": "source_data"
                },
                "(int *)(*(long *)(targetParam + 8) + 8)": {
                    "1": "target_data"
                },
                "(param_3 == 2) && (*(int *)(*(long *)(param_2 + 8) + 8) == 2)": {
                    "1": "are_equal"
                },
                "(uint)*(byte *)(*(long *)(*(long *)(arg2 + 8) + 0x380) + 0x71)": {
                    "1": "byte_value"
                },
                "(uint)*(byte *)(*(long *)(*(long *)(dataPointer2 + 8) + 0x380) + 0x71)": {
                    "1": "new_flag"
                },
                "(uint)*(byte *)(*(long *)(*(long *)(functionPointer2 + 8) + 0x380) + 0x71)": {
                    "1": "byte_value"
                },
                "(uint)*(byte *)(*(long *)(*(long *)(param_2 + 8) + 0x380) + 0x71)": {
                    "1": "modified_condition"
                },
                "*(*(long *)(dataPointer1 + 8) + 8)": {
                    "1": "var1"
                },
                "*(*(long *)(dataPointer2 + 8) + 8)": {
                    "1": "var2"
                },
                "*(*(param_1 + 8) + 8)": {
                    "1": "callback_flag"
                },
                "*(*(param_2 + 8) + 8)": {
                    "1": "data_flag"
                },
                "*(byte *)(*(long *)(*(long *)(targetParam + 8) + 0x380) + 0x71)": {
                    "1": "byte_value"
                },
                "*(code **)(*(long *)(arg1_ptr + 8) + 0x380) + 0x78)": {
                    "1": "func_ptr"
                },
                "*(int *)(*(long *)(param_1 + 8) + 8)": {
                    "1": "value1"
                },
                "*(int *)(*(long *)(param_2 + 8) + 8)": {
                    "1": "value2"
                },
                "*(int *)(arg1_ptr + 8)": {
                    "1": "arg1_value"
                },
                "*(int *)(arg2_ptr + 8)": {
                    "1": "arg2_value"
                },
                "*(long *)(*(long *)(param_2 + 8) + 0x380) + 0x71": {
                    "1": "byte_ptr"
                },
                "*(long *)(arg2_ptr + 8) + 0x380": {
                    "1": "arg2_value_ptr"
                },
                "*(long *)(arg2_value_ptr + 0x380) + 0x71": {
                    "1": "arg2_value_offset"
                },
                "*(long *)(param_1 + 8)": {
                    "1": "input1_ptr_value"
                },
                "*(long *)(param_2 + 8)": {
                    "1": "input2_ptr_value"
                },
                "**(code **)": {
                    "1": "function_pointer"
                },
                "**(code **)(*(long *)(*(long *)(functionPointer1 + 8) + 0x380) + 0x78)": {
                    "1": "function_to_execute"
                },
                "0x00105422": {
                    "1": "jump_table_address"
                },
                "0x380": {
                    "1": "offset_address",
                    "2": "offset"
                },
                "0x71": {
                    "3": "byte_offset"
                },
                "0x78": {
                    "3": "function_offset"
                },
                "FUN_00114d50": {
                    "1": "execute_task",
                    "13": "execute_function",
                    "2": "execute_command",
                    "3": "execute_conditional_function",
                    "6": "process_data"
                },
                "byte": {
                    "1": "data_byte",
                    "2": "condition_byte",
                    "5": "byte_value"
                },
                "byte_ptr": {
                    "1": "byte_pointer"
                },
                "byte_value": {
                    "1": "value"
                },
                "byte_variable_1": {
                    "1": "byte_value"
                },
                "byte_variable_2": {
                    "1": "byte_offset"
                },
                "code": {
                    "1": "function_to_execute",
                    "6": "function_pointer"
                },
                "param_1": {
                    "1": "argument1",
                    "2": "function_pointer1",
                    "3": "arg1",
                    "4": "input1"
                },
                "param_1 + 8": {
                    "1": "data_pointer1",
                    "2": "input1_ptr"
                },
                "param_2": {
                    "1": "data_pointer2",
                    "2": "input_2",
                    "3": "data2",
                    "4": "input2"
                },
                "param_2 + 8": {
                    "1": "arg2_ptr",
                    "2": "input2_ptr"
                },
                "param_3": {
                    "1": "third_param",
                    "12": "condition"
                },
                "param_3 != 0": {
                    "1": "param3_not_zero",
                    "3": "is_flag_set"
                },
                "param_3 == 2": {
                    "1": "is_param3_two"
                }
            },
            "called": [
                "FUN_0010540e"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid execute_function_00114d50(long input1,long input2,uint condition)\n\n{\n  if (*(int *)(*(long *)(input1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((condition == 2) && (*(int *)(*(long *)(input2 + 8) + 8) == 2)) {\n    condition = (uint)*(byte_value *)(*(long *)(*(long *)(input2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(function_pointer **)(*(long *)(*(long *)(input1 + 8) + 0x380) + 0x78))(input1,condition != 0);\n  return;\n}\n\n",
            "current_name": "execute_function_00114d50",
            "entrypoint": "0x00114d50",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114d50": "execute_function_00114d50",
                "byte": "byte_value",
                "code": "function_pointer",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "condition"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114d60": {
            "additional_data": {
                "FUN_00114d60": {
                    "1": "read_and_store_data_from_file",
                    "2": "read_file_and_store",
                    "3": "read_and_store_file_content",
                    "4": "read_file_and_store_data",
                    "7": "read_and_store_file_contents"
                },
                "__errno_location": {
                    "1": "get_errno_location"
                },
                "__stream": {
                    "2": "file_ptr",
                    "20": "file_stream",
                    "4": "file_pointer",
                    "5": "file"
                },
                "dcgettext": {
                    "1": "get_localized_string"
                },
                "fclose": {
                    "1": "close_file"
                },
                "feof": {
                    "1": "end_of_file"
                },
                "ferror": {
                    "1": "file_error"
                },
                "fopen": {
                    "1": "open_file"
                },
                "fread": {
                    "1": "read_from_file"
                },
                "fwrite": {
                    "1": "write_to_file"
                },
                "iVar1": {
                    "1": "indicator",
                    "12": "end_of_file",
                    "2": "is_eof",
                    "7": "eof_indicator"
                },
                "lVar7": {
                    "1": "current_offset",
                    "10": "current_position",
                    "5": "current_size"
                },
                "lVar8": {
                    "1": "content_size",
                    "16": "buffer_size",
                    "3": "max_size",
                    "8": "allocated_size"
                },
                "param_1": {
                    "1": "file_path_pointer",
                    "2": "file_pointer",
                    "22": "file_path",
                    "5": "file_info"
                },
                "pcVar3": {
                    "1": "error_msg",
                    "21": "error_message",
                    "7": "error_string"
                },
                "piVar2": {
                    "1": "error_code_pointer",
                    "2": "error_number_ptr",
                    "3": "error_number",
                    "5": "error_location",
                    "6": "errno_ptr",
                    "9": "errno_location"
                },
                "print_error_and_exit_00119dd0": {
                    "3": "print_error_and_exit"
                },
                "sVar6": {
                    "1": "read_bytes",
                    "22": "bytes_read",
                    "6": "read_size"
                },
                "strerror": {
                    "1": "get_error_message"
                },
                "uVar4": {
                    "1": "error_msg_fmt",
                    "2": "format_string",
                    "4": "error_message_format",
                    "7": "error_format"
                },
                "uVar5": {
                    "1": "memory_buffer",
                    "13": "allocated_memory",
                    "2": "buffer",
                    "5": "dynamic_memory"
                }
            },
            "called": [
                "xmalloc",
                "fopen",
                "FUN_0010543c"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid read_and_store_file_contents_00114d60(long file_path)\n\n{\n  int feof;\n  int *errno_location;\n  char *error_message;\n  undefined8 error_format;\n  FILE *file_stream;\n  undefined8 allocated_memory;\n  size_t bytes_read;\n  long total_bytes_read;\n  long buffer_size;\n  \n  file_stream = fopen(*(char **)(file_path + 0x10),\"r\");\n  if (file_stream == (FILE *)0x0) {\n    errno_location = __errno_location();\n    error_message = strerror(*errno_location);\n    allocated_memory = *(undefined8 *)(file_path + 0x10);\n    error_format = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    print_error_and_exit(error_format,allocated_memory,error_message);\n  }\n  buffer_size = 0x1000;\n  total_bytes_read = 0;\n  allocated_memory = xmalloc(0x1000);\n  *(undefined8 *)(file_path + 0x20) = allocated_memory;\n  while( true ) {\n    end_of_file = end_of_file(file_stream);\n    if (end_of_file != 0) {\n      *(long *)(file_path + 0x18) = total_bytes_read;\n      fclose(file_stream);\n      return;\n    }\n    if (total_bytes_read == buffer_size) {\n      buffer_size = total_bytes_read * 2;\n      allocated_memory = xrealloc(*(undefined8 *)(file_path + 0x20),buffer_size);\n      *(undefined8 *)(file_path + 0x20) = allocated_memory;\n    }\n    bytes_read = fread((void *)(*(long *)(file_path + 0x20) + total_bytes_read),1,buffer_size - total_bytes_read,file_stream);\n    end_of_file = ferror(file_stream);\n    if (end_of_file != 0) break;\n    total_bytes_read = total_bytes_read + bytes_read;\n  }\n  allocated_memory = *(undefined8 *)(file_path + 0x10);\n  error_format = dcgettext(0,\"%s: fread failed\",5);\n                    \n  print_error_and_exit(error_format,allocated_memory);\n}\n\n",
            "current_name": "read_and_store_file_contents_00114d60",
            "entrypoint": "0x00114d60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114d60": "read_and_store_file_contents_00114d60",
                "__errno_location": "get_error_location",
                "__stream": "file_stream",
                "dcgettext": "get_localized_string",
                "fclose": "close_file",
                "feof": "end_of_file",
                "ferror": "file_error",
                "fopen": "open_file",
                "fread": "read_from_file",
                "iVar1": "end_of_file",
                "lVar7": "total_bytes_read",
                "lVar8": "buffer_size",
                "param_1": "file_path",
                "pcVar3": "error_message",
                "piVar2": "errno_location",
                "print_error_and_exit_00119dd0": "print_error_and_exit",
                "sVar6": "bytes_read",
                "strerror": "get_error_message",
                "uVar4": "error_format",
                "uVar5": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114dc7": {
            "additional_data": {
                " iVar1 ": {
                    "1": "error_flag"
                },
                "FUN_00114dc7": {
                    "1": "read_and_allocate_file_data",
                    "10": "read_and_resize_buffer",
                    "2": "read_and_expand_data",
                    "4": "read_and_process_file",
                    "5": "read_and_expand_buffer"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "feof": {
                    "1": "check_end_of_file"
                },
                "ferror": {
                    "1": "check_for_error"
                },
                "fread": {
                    "1": "read_from_file"
                },
                "iVar1": {
                    "1": "file_error",
                    "13": "error",
                    "4": "error_status",
                    "7": "error_flag"
                },
                "print_error_and_exit_00119dd0": {
                    "1": "print_and_exit_on_error"
                },
                "sVar4": {
                    "1": "num_read_bytes",
                    "2": "read_size",
                    "23": "bytes_read",
                    "3": "read_bytes"
                },
                "uVar2": {
                    "1": "error_message_format",
                    "20": "error_message",
                    "3": "error_msg"
                },
                "uVar3": {
                    "1": "localized_error_msg",
                    "2": "error_context",
                    "3": "translated_message",
                    "4": "localized_error_message",
                    "6": "translated_error_message"
                },
                "unaff_R12": {
                    "1": "read_position",
                    "2": "current_offset",
                    "3": "start_position",
                    "6": "current_position"
                },
                "unaff_R14": {
                    "1": "read_end_index",
                    "2": "end",
                    "5": "end_position",
                    "7": "end_offset"
                },
                "unaff_RBP": {
                    "1": "buffer_base",
                    "5": "buffer_info",
                    "7": "buffer_pointer",
                    "9": "buffer"
                },
                "unaff_RBX": {
                    "1": "file_handle",
                    "11": "file_pointer",
                    "15": "file",
                    "2": "file_stream"
                },
                "xrealloc": {
                    "1": "resize_memory"
                }
            },
            "called": [
                "fread",
                "dcgettext",
                "xrealloc",
                "feof",
                "fclose",
                "FUN_00114dc7",
                "FUN_00119dd0",
                "ferror"
            ],
            "calling": [
                "FUN_00114dc7"
            ],
            "code": "\nvoid read_and_resize_buffer_00114dc7(void)\n\n{\n  int error;\n  undefined8 error_message;\n  undefined8 translated_error_message;\n  size_t bytes_read;\n  FILE *file;\n  long buffer;\n  long start_offset;\n  long end_offset;\n  \n  while( true ) {\n    bytes_read = fread((void *)(*(long *)(buffer + 0x20) + start_offset),1,end_offset - start_offset,\n                  file);\n    error = ferror(file);\n    if (error != 0) {\n      translated_error_message = *(undefined8 *)(buffer + 0x10);\n      error_message = dcgettext(0,\"%s: fread failed\",5);\n                    \n      print_and_exit_on_error(error_message,translated_error_message);\n    }\n    start_offset = start_offset + bytes_read;\n    error = feof(file);\n    if (error != 0) break;\n    if (start_offset == end_offset) {\n      end_offset = start_offset * 2;\n      translated_error_message = xrealloc(*(undefined8 *)(buffer + 0x20),end_offset);\n      *(undefined8 *)(buffer + 0x20) = translated_error_message;\n    }\n  }\n  *(long *)(buffer + 0x18) = start_offset;\n  fclose(file);\n  return;\n}\n\n",
            "current_name": "read_and_resize_buffer_00114dc7",
            "entrypoint": "0x00114dc7",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114dc7": "read_and_resize_buffer_00114dc7",
                "dcgettext": "get_error_message",
                "feof": "check_end_of_file",
                "ferror": "check_for_error",
                "fread": "read_from_file",
                "iVar1": "error",
                "print_error_and_exit_00119dd0": "print_and_exit_on_error",
                "sVar4": "bytes_read",
                "uVar2": "error_message",
                "uVar3": "translated_error_message",
                "unaff_R12": "start_offset",
                "unaff_R14": "end_offset",
                "unaff_RBP": "buffer",
                "unaff_RBX": "file",
                "xrealloc": "resize_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114e00": {
            "additional_data": {
                "0": {
                    "2": "domain"
                },
                "5": {
                    "1": "num_translations",
                    "2": "category"
                },
                "FUN_00114e00": {
                    "1": "identify_endianness",
                    "11": "print_endianness",
                    "12": "get_endianness",
                    "4": "get_endianness_string"
                },
                "big endian": {
                    "1": "big_endian"
                },
                "dcgettext": {
                    "1": "get_endianness_message",
                    "2": "translate_endianness",
                    "3": "translate_text",
                    "4": "print_endianness",
                    "7": "translate"
                },
                "endianness unknown": {
                    "1": "unknown_endianness"
                },
                "little endian": {
                    "1": "little_endian"
                },
                "param_1": {
                    "2": "endianness_code",
                    "22": "endianness",
                    "3": "endianness_type"
                },
                "param_2": {
                    "1": "result"
                }
            },
            "called": [
                "dcgettext"
            ],
            "calling": [
                "FUN_00119f70"
            ],
            "code": "\nvoid get_endianness_00114e00(int endianness)\n\n{\n  if (endianness == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endianness == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "current_name": "get_endianness_00114e00",
            "entrypoint": "0x00114e00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114e00": "get_endianness_00114e00",
                "dcgettext": "translate",
                "param_1": "endianness"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114e50": {
            "called": [
                "FUN_001126c0",
                "FUN_00119ed0",
                "dcgettext",
                "FUN_001125fa",
                "bfd_set_format",
                "FUN_00107976"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = get_formatted_string_001125fa();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = get_formatted_string_001125fa();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    print_error_message_001126c0(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = get_formatted_string_001125fa(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (DAT_001279e9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((DAT_001279a4 != 1) && ((DAT_001279a4 & 1) != 0)) {\n      uVar18 = get_formatted_string_001125fa(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_0012799c != 0) {\n      uVar18 = get_formatted_string_001125fa(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_001279e9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (DAT_0012790c == '\\0') {\n    if (DAT_00127978 == '\\0') {\n      lVar35 = DAT_001279b8 + param_1[0x17];\n    }\n    else {\n      lVar35 = DAT_001279b8 + _DAT_00127980;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~DAT_00127910 & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (DAT_00127914 | *(uint *)((long)param_1 + 0x44));\n  if (DAT_00127a48 == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = get_formatted_string_001125fa(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = get_formatted_string_001125fa(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = check_file_architecture_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = compare_strings_00113fb0(**(undefined8 **)(param_2 + 8),&DAT_0011b503), cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = compare_strings_00113fb0(*(undefined8 *)param_1[1],&DAT_0011b503), cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = DAT_001279eb == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar35 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar35 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar35 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar35 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,DAT_001278c8);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,process_binary_00115530,param_2);\n  puVar30 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = DAT_001279e0,\n     cVar11 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0,param_1,0);\n    puVar30 = DAT_001279e0;\n  }\n  for (; puVar38 = DAT_001279d8, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    uVar28 = 0x128;\n    lVar35 = process_data_00114190(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = drop_share_flag_if_not_coff_00115f30(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      print_error_message_001126c0(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = process_data_00114190(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = process_data_00114190(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        print_error_message_001126c0(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      print_error_message_001126c0(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar18);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = DAT_00127a30;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = process_debug_info_0010554f();\n    return uVar26;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &PTR_s__stab_00125c60;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)initialize_data_structure_00112894(param_1,1,plVar6), pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_001088ae((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = process_debug_info_0011173a(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      print_stab_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = process_debug_info_0010c892(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = initialize_data_structure_00112894(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          update_data_001088ae(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = process_debug_info_0011173a(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            print_stab_entries_00108b3e();\n            free_memory_blocks_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_memory_blocks_00108863();\n      if ((lVar35 != 0) && (cVar11 = process_debug_info_0010c892(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = initialize_debug_info_0010bbd3(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = initialize_debug_info_0010bbd3(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_0010dac0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = process_record_00112a33(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = start_debug_block_0010be88(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = debug_end_block_0010bf20(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = parse_coff_type_0010dac0(param_1,&plStack_148,&pcStack_c8,lVar16,\n                                        uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38)\n                                        ,puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = debug_record_function_0010bc80(puStack_1e8), cVar11 == '\\0'))\n                  goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = record_debug_line_0010bf86(puStack_1e8,iVar13 + iVar32,\n                                            *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = debug_end_function_0010be1a(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              print_error_message_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        print_error_message_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = DAT_001278d0 + uStack_1f8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      DAT_001278c8 = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = DAT_001279c0;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = DAT_001279c8;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = extract_section_info_0011a2e0(puVar30);\n                  uVar18 = DAT_001278f0;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(DAT_001278f0);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(DAT_001278f0);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = DAT_001278f8, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0')) {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = DAT_00127928;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = DAT_00127928;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127928);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(DAT_00127a18,pattern_match_0011a170,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar18);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(DAT_00127a18,pattern_match_0011a170,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a10,pattern_match_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a28,pattern_match_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = process_section_001159d0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = check_pattern_match_00115d70(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(DAT_001279f8), lVar35 == 0 ||\n                      (cVar11 = check_pattern_match_00115d70(pcVar29), cVar11 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = check_pattern_match_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar11 = check_pattern_match_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar30 = DAT_001279c8;\n        iVar13 = DAT_001279c0;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = extract_section_info_0011a2e0(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279c0;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = DAT_001279a0 == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = parse_binary_0011378f(param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          print_error_message_001126c0(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,process_relocation_00116030,DAT_001278d0);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(DAT_00127a18);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(DAT_00127a28), lVar35 != 0 ||\n              (lVar35 = htab_elements(DAT_00127a08), lVar35 != 0)) ||\n             (lVar35 = htab_elements(DAT_00127a00), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(DAT_001279f8), lVar35 != 0 ||\n             (lVar35 = htab_elements(DAT_001279f0), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(DAT_001278f0), lVar35 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,DAT_001278c8,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,process_section_00115dc0,param_2);\n    bfd_map_over_sections(param_1,process_section_00116110,param_2);\n    for (puVar30 = DAT_001279e0; puVar38 = DAT_001279d8, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        print_error_message_001126c0(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        print_error_message_001126c0(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = compare_strings_00113fb0(*puVar30,\".gnu.build.attributes\"), cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          print_error_message_001126c0(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190), lVar35 = DAT_00127a30,\n       cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,DAT_00127930 & 0xffffffff);\n        uVar22 = DAT_00127930;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = compare_strings_00113fb0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)process_build_attribute_notes_001163d0(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = DAT_001279d0;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_00114e50",
            "entrypoint": "0x00114e50",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_001152b6": {
            "called": [
                "FUN_00119ed0",
                "dcgettext",
                "FUN_001125fa",
                "FUN_00107880"
            ],
            "calling": [
                "FUN_00107976"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = get_formatted_string_001125fa();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = get_formatted_string_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_file_architecture_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = compare_strings_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = compare_strings_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279eb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279e0,\n     cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0);\n    puVar31 = DAT_001279e0;\n  }\n  for (; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = process_data_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = drop_share_flag_if_not_coff_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = process_data_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = process_data_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        print_error_message_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar19);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = process_debug_info_0010554f();\n    return uVar28;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_data_structure_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = process_debug_info_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_stab_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_info_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = initialize_data_structure_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          update_data_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30)\n          ;\n          in_stack_00000018 = process_debug_info_0011173a(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            print_stab_entries_00108b3e();\n            free_memory_blocks_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_memory_blocks_00108863();\n      if ((lVar27 != 0) && (cVar10 = process_debug_info_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = process_record_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = start_debug_block_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_0010dac0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = debug_record_function_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = record_debug_line_0010bf86(puStack0000000000000020,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              print_error_message_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        print_error_message_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = DAT_001278d0 + uStack0000000000000010;\n        plVar16 = DAT_001278d0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279c8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = extract_section_info_0011a2e0(puVar31);\n                  uVar19 = DAT_001278f0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278f0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(DAT_001278f0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278f8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127928;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127928;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127928);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar19);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a10,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a28,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = process_section_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = check_pattern_match_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                      (cVar10 = check_pattern_match_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = check_pattern_match_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = check_pattern_match_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279c8;\n        iVar12 = DAT_001279c0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = extract_section_info_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279c0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_001279a0 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = parse_binary_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_00127a18);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a28), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_00127a08), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_00127a00), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279f8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279f0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278f0), lVar27 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_section_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,process_section_00116110,param_7);\n    for (puVar31 = DAT_001279e0; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = compare_strings_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = DAT_00127a30, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar23 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = compare_strings_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)process_build_attribute_notes_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279d0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_001152b6",
            "entrypoint": "0x001152b6",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00115530": {
            "additional_data": {
                "FUN_00115530": {
                    "1": "process_code",
                    "2": "process_section_and_data",
                    "3": "process_output_section",
                    "7": "process_section",
                    "8": "process_binary"
                },
                "bVar14": {
                    "1": "bool_flag",
                    "2": "bool_var",
                    "3": "temp_var14",
                    "4": "is_flag_set"
                },
                "cVar4": {
                    "1": "temp_char",
                    "12": "result",
                    "2": "result_char",
                    "6": "temp_var4"
                },
                "iVar5": {
                    "1": "var_index",
                    "10": "comparison_result",
                    "2": "index",
                    "6": "temp_var5"
                },
                "lVar1": {
                    "1": "temp_long_var",
                    "14": "temp_var1",
                    "2": "var1",
                    "3": "length"
                },
                "lVar9": {
                    "1": "data_offset",
                    "2": "temp_var6",
                    "4": "data",
                    "7": "temp_var9"
                },
                "local_40": {
                    "1": "temp_long_array",
                    "2": "local_var3",
                    "3": "temp_array",
                    "4": "size_array"
                },
                "local_40 [2]": {
                    "1": "temp_arr"
                },
                "local_48": {
                    "1": "temp_var6",
                    "2": "local_var48",
                    "3": "current_section_name",
                    "5": "local_var2",
                    "6": "section_name"
                },
                "local_50": {
                    "1": "temp_long_var_3",
                    "14": "error_message",
                    "2": "error_var",
                    "3": "error",
                    "5": "local_var1"
                },
                "param_1": {
                    "1": "binary",
                    "2": "input_address",
                    "4": "binary_data"
                },
                "param_2": {
                    "1": "input2",
                    "2": "section_data",
                    "3": "arguments",
                    "4": "param2"
                },
                "param_3": {
                    "1": "binary",
                    "2": "size_param",
                    "4": "param3"
                },
                "pcVar10": {
                    "1": "some_pointer_var",
                    "2": "pointer_var10",
                    "3": "temp_var10"
                },
                "pcVar11": {
                    "1": "temp_var6",
                    "2": "pointer_var11",
                    "3": "str2",
                    "5": "temp_var11"
                },
                "pcVar12": {
                    "1": "temp_var6",
                    "2": "temp_var9",
                    "3": "str3",
                    "5": "temp_var12"
                },
                "pcVar15": {
                    "1": "new_section"
                },
                "pcVar2": {
                    "1": "ptr2",
                    "14": "temp_var2",
                    "2": "pointer_var2"
                },
                "ppcVar3": {
                    "1": "temp_char_double_ptr_var",
                    "12": "temp_var3",
                    "2": "pointer_pointer_var3",
                    "4": "section_list"
                },
                "sVar7": {
                    "1": "length_string1",
                    "2": "len1",
                    "4": "size_var1",
                    "5": "size1",
                    "6": "temp_var7"
                },
                "sVar8": {
                    "1": "size_var8",
                    "2": "len2",
                    "4": "size_var2",
                    "5": "size2",
                    "6": "length2"
                },
                "uVar13": {
                    "1": "flags2",
                    "2": "share_flag",
                    "3": "temp_var13",
                    "4": "section_flags",
                    "6": "flags"
                },
                "uVar6": {
                    "1": "mask",
                    "2": "uint_var",
                    "4": "flag",
                    "7": "temp_var6"
                }
            },
            "called": [
                "FUN_001159d0",
                "xmalloc",
                "bfd_set_section_size",
                "dcgettext",
                "strcmp",
                "strcat",
                "strcpy",
                "FUN_00114190",
                "strlen",
                "FUN_00115f30",
                "FUN_00108072",
                "bfd_convert_section_setup",
                "bfd_make_section_anyway_with_flags"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nvoid process_binary_00115530(long input_param,char **param2,long param3)\n\n{\n  long temp_var1;\n  char *temp_var2;\n  char **temp_var3;\n  char result;\n  int comparison_result;\n  uint temp_var6;\n  size_t temp_var7;\n  size_t temp_var8;\n  long temp_var9;\n  char *temp_var10;\n  char *temp_var11;\n  char *temp_var12;\n  uint flags;\n  bool is_flag_set;\n  long error_message;\n  char *section_name;\n  long section_size [2];\n  \n  result = process_section_001159d0(param2);\n  if (result != '\\0') {\n    return;\n  }\n  temp_var10 = *param2;\n  flags = *(uint *)((long)param2 + 0x24);\n  section_name = temp_var10;\n  temp_var3 = DAT_001278f8;\n  if (*(int *)(*(long *)(input_param + 8) + 8) != *(int *)(*(long *)(param3 + 8) + 8)) {\n    flags = flags & *(uint *)(*(long *)(input_param + 8) + 0x18) &\n             *(uint *)(*(long *)(param3 + 8) + 0x18);\n  }\n  for (; temp_var3 != (char **)0x0; temp_var3 = (char **)temp_var3[3]) {\n    comparison_result = strcmp(*temp_var3,temp_var10);\n    if (comparison_result == 0) {\n      if (*(uint *)(temp_var3 + 2) != 0xffffffff) {\n        flags = *(uint *)(temp_var3 + 2);\n      }\n      if (temp_var10 != temp_var3[1]) {\n        section_name = temp_var3[1];\n        flags = drop_share_flag_if_not_coff_00115f30(flags,param3);\n      }\n      break;\n    }\n  }\n  if (((DAT_00127918 != (char *)0x0) &&\n      (temp_var10 = DAT_00127918, (*(byte *)((long)param2 + 0x24) & 1) != 0)) ||\n     (temp_var10 = DAT_00127920, DAT_00127920 != (char *)0x0)) {\n    temp_var7 = strlen(temp_var10);\n    temp_var8 = strlen(section_name);\n    temp_var12 = (char *)xmalloc(temp_var7 + 1 + temp_var8);\n    temp_var10 = strcpy(temp_var12,temp_var10);\n    section_name = strcat(temp_var10,section_name);\n  }\n  temp_var9 = process_data_00114190(*param2,0,0x80);\n  is_flag_set = false;\n  if (temp_var9 == 0) {\n    if ((DAT_00127a48 == 4) && ((flags & 0x2000001) != 0)) {\n      comparison_result = *(int *)(*(long *)(input_param + 8) + 8);\n      if (comparison_result == 5) {\n        if (*(int *)(param2[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(param3 + 8) + 8) == 5) {\n            is_flag_set = (flags & 0x2000000) == 0;\n            temp_var6 = ~((-(uint)((flags & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)param2 + 0x24) = *(uint *)((long)param2 + 0x24) & temp_var6;\n          }\n          else {\n            temp_var6 = 0xfdfffefd;\n          }\n          flags = flags & temp_var6;\n        }\n      }\n      else if ((comparison_result != 2) || (comparison_result = strcmp(*param2,\".buildid\"), comparison_result != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    flags = drop_share_flag_if_not_coff_00115f30(flags & 0x104 | *(uint *)(temp_var9 + 0x28),param3,*param2);\n  }\n  result = bfd_convert_section_setup(input_param,param2,param3,&section_name,section_size);\n  if (result == '\\0') {\n    temp_var10 = (char *)0x0;\n    error_message = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  temp_var10 = (char *)bfd_make_section_anyway_with_flags(param3,section_name,flags);\n  if (temp_var10 == (char *)0x0) {\n    error_message = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (DAT_001264bc < 0) {\n    if (DAT_0012790c != '\\0') {\n      section_size[0] = 0;\n      goto LAB_001158e7;\n    }\n    result = bfd_set_section_size(temp_var10,section_size[0]);\n    if (result == '\\0') {\n      set_size_and_alignment_00108072();\n      return;\n    }\n  }\n  else {\n    section_size[0] = ((((long)DAT_00127a3c - 1U) + section_size[0]) / (ulong)(long)DAT_00127a3c) *\n                  (long)DAT_001264b8;\nLAB_001158e7:\n    result = bfd_set_section_size(temp_var10);\n    if (result == '\\0') {\n      set_size_and_alignment_00108072();\n      return;\n    }\n  }\n  error_message = 0;\n  temp_var12 = param2[6];\n  temp_var9 = process_data_00114190(*param2,0,0x18);\n  if (temp_var9 == 0) {\n    temp_var10[0x28] = temp_var10[0x28] | 1;\n    temp_var11 = *param2;\n    temp_var12 = temp_var12 + _DAT_001279b0;\n    *(char **)(temp_var10 + 0x30) = temp_var12;\n    *(char **)(temp_var10 + 0x38) = temp_var12;\n    temp_var12 = param2[7];\n    temp_var9 = process_data_00114190(temp_var11,0,0x60);\n    if (temp_var9 == 0) goto LAB_00115695;\nLAB_00115860:\n    temp_var11 = *(char **)(temp_var9 + 0x20);\n    if ((*(byte *)(temp_var9 + 0x14) & 0x40) != 0) {\n      temp_var11 = temp_var11 + (long)temp_var12;\n    }\n    *(char **)(temp_var10 + 0x38) = temp_var11;\n    temp_var9 = process_data_00114190(*param2,0,0x200);\n    if (temp_var9 != 0) goto LAB_00115889;\nLAB_001156b8:\n    flags = *(uint *)((long)param2 + 0x7c);\n    if (flags < 0x3f) goto LAB_001156c4;\n    error_message = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(temp_var10 + 0xb4) = *(undefined4 *)((long)param2 + 0xb4);\n    temp_var10[0x28] = temp_var10[0x28] & 0xcfU | *(byte *)(param2 + 5) & 0x30;\n    param2[0xc] = temp_var10;\n    param2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param2 + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    result = (**(code **)(*(long *)(param3 + 8) + 0x158))(input_param,param2,param3,temp_var10);\n    if (result == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  else {\n    temp_var11 = *(char **)(temp_var9 + 0x18);\n    if ((*(byte *)(temp_var9 + 0x14) & 8) == 0) {\n      temp_var11 = temp_var11 + (long)temp_var12;\n    }\n    temp_var10[0x28] = temp_var10[0x28] | 1;\n    temp_var2 = *param2;\n    *(char **)(temp_var10 + 0x30) = temp_var11;\n    *(char **)(temp_var10 + 0x38) = temp_var11;\n    temp_var12 = param2[7];\n    temp_var9 = process_data_00114190(temp_var2,0,0x60);\n    if (temp_var9 != 0) goto LAB_00115860;\nLAB_00115695:\n    temp_var11 = *param2;\n    *(char **)(temp_var10 + 0x38) = temp_var12 + _DAT_001279b0;\n    temp_var9 = process_data_00114190(temp_var11,0,0x200);\n    if (temp_var9 == 0) goto LAB_001156b8;\nLAB_00115889:\n    flags = *(uint *)(temp_var9 + 0x2c);\n    if (0x3e < flags) {\n      set_alignment_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(temp_var10 + 0x7c) = flags;\n    *(undefined4 *)(temp_var10 + 0xb4) = *(undefined4 *)((long)param2 + 0xb4);\n    temp_var10[0x28] = temp_var10[0x28] & 0xcfU | *(byte *)(param2 + 5) & 0x30;\n    param2[0xc] = temp_var10;\n    param2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param2 + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    temp_var12 = param2[0x1a];\n    temp_var9 = find_matching_value_00115d00(temp_var12,param2[0x1c]);\n    if ((temp_var9 == 0) ||\n       (temp_var1 = *(long *)(input_param + 8), *(uint *)(temp_var9 + 0x18) = *(uint *)(temp_var9 + 0x18) | 0x20,\n       *(int *)(temp_var1 + 8) != 5)) goto LAB_00115700;\n    *(long *)(temp_var12 + 0xb0) = temp_var9;\n    result = (**(code **)(*(long *)(param3 + 8) + 0x158))(input_param,param2,param3,temp_var10);\n    if (result == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  if (is_flag_set) {\n    *(undefined4 *)(*(long *)(temp_var10 + 0xd0) + 4) = 8;\n  }\n  if (error_message == 0) {\n    return;\n  }\nLAB_001080d1:\n  DAT_00127a40 = 1;\n  print_error_message_001126c0(0,param3,temp_var10,error_message);\n  return;\n}\n\n",
            "current_name": "process_binary_00115530",
            "entrypoint": "0x00115530",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115530": "process_binary_00115530",
                "bVar14": "is_flag_set",
                "cVar4": "result",
                "iVar5": "comparison_result",
                "lVar1": "temp_var1",
                "lVar9": "temp_var9",
                "local_40": "section_size",
                "local_48": "section_name",
                "local_50": "error_message",
                "param_1": "input_param",
                "param_2": "param2",
                "param_3": "param3",
                "pcVar10": "temp_var10",
                "pcVar11": "temp_var11",
                "pcVar12": "temp_var12",
                "pcVar2": "temp_var2",
                "ppcVar3": "temp_var3",
                "sVar7": "temp_var7",
                "sVar8": "temp_var8",
                "uVar13": "flags",
                "uVar6": "temp_var6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115970": {
            "additional_data": {
                "FUN_00115970": {
                    "1": "copy_and_print_error_message",
                    "16": "copy_and_delete_file",
                    "2": "copy_and_print_file",
                    "4": "copy_and_remove_file"
                },
                "auVar6": {
                    "1": "result_data",
                    "12": "return_value",
                    "2": "return_val",
                    "3": "return_data",
                    "7": "result"
                },
                "param_1": {
                    "1": "src_file_path",
                    "21": "source_file_path",
                    "4": "source_file"
                },
                "param_2": {
                    "1": "destination_filepath",
                    "21": "destination_file_path",
                    "4": "destination_path"
                },
                "param_3": {
                    "1": "copy_mode",
                    "14": "file_permissions",
                    "2": "file_mode",
                    "3": "flags",
                    "4": "file_permission"
                },
                "param_4": {
                    "1": "file_metadata",
                    "13": "file_size",
                    "3": "file_attributes",
                    "4": "file_timestamp",
                    "5": "file_mode"
                },
                "param_5": {
                    "1": "preserve_file_time",
                    "11": "should_set_file_time",
                    "3": "set_time_flag",
                    "4": "set_file_time_flag",
                    "5": "set_file_time"
                },
                "param_6": {
                    "1": "user_data",
                    "2": "original_return_value",
                    "3": "result",
                    "5": "error_code",
                    "6": "return_value"
                },
                "pcVar3": {
                    "1": "error_str",
                    "11": "error_string",
                    "17": "error_message"
                },
                "piVar2": {
                    "1": "error_location_ptr",
                    "11": "errno_location",
                    "2": "errno_location_ptr",
                    "3": "errno_pointer",
                    "4": "errno_ptr"
                },
                "uVar1": {
                    "30": "copy_result"
                },
                "uVar4": {
                    "1": "localized_error_msg",
                    "2": "translated_error",
                    "3": "translated_error_msg",
                    "6": "translated_error_message",
                    "8": "localized_error_message"
                },
                "uVar5": {
                    "1": "copy_result_as_u_int",
                    "2": "result",
                    "3": "copy_error_code",
                    "5": "copy_size"
                }
            },
            "called": [
                "FUN_00108200",
                "FUN_00115a90"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16]\ncopy_and_delete_file_00115970(char *source_file_path,char *destination_file_path,undefined4 file_permissions,undefined8 file_size,char should_set_file_time,\n            undefined8 return_value)\n\n{\n  uint copy_result;\n  int *errno_location;\n  char *error_message;\n  undefined8 localized_error_message;\n  ulong copy_size;\n  undefined return_value [16];\n  \n  if (destination_file_path == source_file_path) {\n    copy_size = 0;\n  }\n  else {\n    copy_result = copy_file_00115a90(file_permissions,destination_file_path,file_size);\n    copy_size = (ulong)copy_result;\n    if (copy_result != 0) {\n      errno_location = __errno_location();\n      error_message = strerror(*errno_location);\n      localized_error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      print_error_message_00119ed0(localized_error_message,destination_file_path,error_message);\n    }\n    unlink(source_file_path);\n  }\n  if (should_set_file_time != '\\0') {\n    set_file_time_0011a350(destination_file_path,file_size);\n  }\n  return_value._8_8_ = return_value;\n  return_value._0_8_ = copy_size;\n  return return_value;\n}\n\n",
            "current_name": "copy_and_delete_file_00115970",
            "entrypoint": "0x00115970",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115970": "copy_and_delete_file_00115970",
                "auVar6": "return_value",
                "param_1": "source_file_path",
                "param_2": "destination_file_path",
                "param_3": "file_permissions",
                "param_4": "file_size",
                "param_5": "should_set_file_time",
                "param_6": "return_value",
                "pcVar3": "error_message",
                "piVar2": "errno_location",
                "uVar1": "copy_result",
                "uVar4": "localized_error_message",
                "uVar5": "copy_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001159d0": {
            "additional_data": {
                "0x2": {
                    "1": "key"
                },
                "0x27": {
                    "1": "mask"
                },
                "0xd0": {
                    "1": "offset_1"
                },
                "0xe0": {
                    "1": "offset_2"
                },
                "DAT_00127a18": {
                    "1": "pattern_2"
                },
                "DAT_00127a28": {
                    "1": "constant_value2"
                },
                "DAT_00127a48": {
                    "1": "constant_value1"
                },
                "FUN_001159d0": {
                    "1": "process_data_section",
                    "17": "process_section",
                    "2": "process_function",
                    "5": "process_binary_section"
                },
                "cVar2": {
                    "1": "match_flag",
                    "11": "pattern_match_result",
                    "2": "is_match",
                    "5": "match_result",
                    "9": "pattern_match"
                },
                "check_pattern_match_00115d70": {
                    "1": "is_pattern_matched"
                },
                "find_matching_value_00115d00": {
                    "2": "find_matching_value"
                },
                "lVar4": {
                    "1": "found_value",
                    "16": "matching_value",
                    "3": "matching_address",
                    "7": "matching_value_address"
                },
                "lVar5": {
                    "1": "next_matching_value_addr",
                    "14": "current_value",
                    "2": "temp_value",
                    "3": "current_value_address",
                    "5": "current_address"
                },
                "lVar6": {
                    "1": "starting_section"
                },
                "param_1": {
                    "1": "param",
                    "11": "section_address",
                    "2": "binary_address",
                    "3": "input",
                    "5": "input_param"
                },
                "process_section_00115b70": {
                    "1": "is_section_processed"
                },
                "uVar1": {
                    "1": "result1",
                    "16": "matching_value",
                    "3": "result",
                    "7": "value"
                },
                "uVar3": {
                    "1": "section_processing_result",
                    "10": "result",
                    "12": "section_result",
                    "2": "section_status",
                    "4": "section_process_result"
                }
            },
            "called": [
                "FUN_00115d00",
                "FUN_00115b70",
                "FUN_00115d70"
            ],
            "calling": [
                "FUN_00115530",
                "FUN_00115f50",
                "FUN_0010554f"
            ],
            "code": "\nundefined4 process_section_001159d0(long section_address)\n\n{\n  undefined8 matching_value;\n  char pattern_match_result;\n  undefined4 section_result;\n  long matching_value;\n  long current_value;\n  \n  section_result = is_section_processed();\n  if ((char)section_result == '\\0') {\n    if ((*(byte *)(section_address + 0x27) & 2) == 0) {\n      return section_result;\n    }\n    matching_value = find_matching_value(*(undefined8 *)(section_address + 0xd0),*(undefined8 *)(section_address + 0xe0));\n    if ((matching_value != 0) &&\n       (((matching_value = *(undefined8 *)(matching_value + 8), DAT_00127a48 != 7 ||\n         (pattern_match_result = is_pattern_matched(matching_value,DAT_00127a28), pattern_match_result != '\\0')) &&\n        (pattern_match_result = is_pattern_matched(matching_value,DAT_00127a18), pattern_match_result == '\\0')))) {\n      matching_value = *(long *)(*(long *)(section_address + 0xd0) + 0xc0);\n      current_value = matching_value;\n      do {\n        if (current_value == 0) {\n          return 1;\n        }\n        pattern_match_result = is_section_processed(current_value);\n        if (pattern_match_result == '\\0') {\n          return section_result;\n        }\n        current_value = *(long *)(*(long *)(current_value + 0xd0) + 0xc0);\n      } while (matching_value != current_value);\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "process_section_001159d0",
            "entrypoint": "0x001159d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001159d0": "process_section_001159d0",
                "cVar2": "pattern_match_result",
                "check_pattern_match_00115d70": "is_pattern_matched",
                "find_matching_value_00115d00": "find_matching_value",
                "lVar4": "matching_value",
                "lVar5": "current_value",
                "param_1": "section_address",
                "process_section_00115b70": "is_section_processed",
                "uVar1": "matching_value",
                "uVar3": "section_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115a90": {
            "additional_data": {
                "FUN_00115a90": {
                    "1": "copy_data_to_file",
                    "18": "copy_file",
                    "2": "copy_file_contents"
                },
                "_Var3": {
                    "1": "current_file_pos",
                    "2": "current_offset",
                    "4": "current_position",
                    "5": "seek_result",
                    "6": "file_offset"
                },
                "__fd": {
                    "1": "dest_file_desc",
                    "26": "destination_file_descriptor",
                    "3": "output_file_descriptor"
                },
                "__off_t": {
                    "1": "file_offset_type"
                },
                "_offset": {
                    "1": "initial_file_position"
                },
                "iVar1": {
                    "1": "error",
                    "17": "original_errno",
                    "2": "errno_value",
                    "3": "original_error"
                },
                "iVar2": {
                    "1": "temp_value",
                    "10": "read_result",
                    "2": "read_bytes",
                    "4": "bytes_read"
                },
                "local_2038": {
                    "31": "buffer"
                },
                "param_1": {
                    "1": "source_file_desc",
                    "26": "source_file_descriptor",
                    "3": "file_descriptor"
                },
                "param_2": {
                    "1": "output_file_path",
                    "2": "file_path",
                    "22": "destination_file_path",
                    "4": "destination_file_name"
                },
                "param_3": {
                    "1": "file_stat_structure_address",
                    "2": "file_stats"
                },
                "piVar6": {
                    "1": "errno_location_pointer",
                    "10": "errno_location",
                    "2": "error_location",
                    "6": "errno_pointer",
                    "7": "errno_ptr"
                },
                "sVar5": {
                    "1": "num_bytes_written",
                    "23": "bytes_written",
                    "5": "write_result"
                },
                "uVar4": {
                    "1": "num_bytes_read",
                    "19": "bytes_read",
                    "2": "read_result",
                    "5": "return_value"
                }
            },
            "called": [
                "FUN_00108237",
                "close",
                "fchmod",
                "__errno_location",
                "lseek",
                "read",
                "write",
                "open"
            ],
            "calling": [
                "FUN_00115970"
            ],
            "code": "\nulong copy_file_00115a90(int source_file_descriptor,char *destination_file_path,long permissions)\n\n{\n  int original_errno;\n  int destination_file_descriptor;\n  int read_result;\n  file_offset_type file_offset;\n  ulong bytes_read;\n  size_t bytes_written;\n  int *errno_location;\n  undefined buffer [8200];\n  \n  if ((-1 < source_file_descriptor) && (file_offset = lseek(source_file_descriptor,0,0), file_offset == 0)) {\n    destination_file_descriptor = open(destination_file_path,0x201);\n    if (destination_file_descriptor < 0) {\n      bytes_read = close_file_and_set_errno_00108237();\n      return bytes_read;\n    }\n    do {\n      bytes_read = read(source_file_descriptor,buffer,0x2000);\n      read_result = (int)bytes_read;\n      if (read_result < 1) {\n        errno_location = __errno_location();\n        original_errno = *errno_location;\n        fchmod(destination_file_descriptor,*(__mode_t *)(permissions + 0x18));\n        close(source_file_descriptor);\n        close(destination_file_descriptor);\n        if (read_result != 0) {\n          *errno_location = original_errno;\n          return 0xffffffff;\n        }\n        return bytes_read & 0xffffffff;\n      }\n      bytes_written = write(destination_file_descriptor,buffer,(long)read_result);\n    } while (bytes_written == (long)read_result);\n    errno_location = __errno_location();\n    read_result = *errno_location;\n    close(source_file_descriptor);\n    close(destination_file_descriptor);\n    *errno_location = read_result;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "copy_file_00115a90",
            "entrypoint": "0x00115a90",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115a90": "copy_file_00115a90",
                "_Var3": "file_offset",
                "__fd": "destination_file_descriptor",
                "__off_t": "file_offset_type",
                "iVar1": "original_errno",
                "iVar2": "read_result",
                "local_2038": "buffer",
                "param_1": "source_file_descriptor",
                "param_2": "destination_file_path",
                "param_3": "permissions",
                "piVar6": "errno_location",
                "sVar5": "bytes_written",
                "uVar4": "bytes_read"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115b70": {
            "additional_data": {
                "FUN_00115b70": {
                    "1": "process_section_match",
                    "24": "process_section",
                    "3": "check_section_options"
                },
                "iVar2": {
                    "1": "strcmp_result",
                    "16": "comparison_result",
                    "2": "section_name_comparison",
                    "6": "section_comparison_result"
                },
                "iVar3": {
                    "1": "section_flag",
                    "2": "section_option",
                    "20": "section_type",
                    "4": "section_index"
                },
                "lVar4": {
                    "1": "section_match1",
                    "13": "result1",
                    "2": "process_result1",
                    "3": "data_result1"
                },
                "lVar5": {
                    "1": "section_process_result2",
                    "13": "result2",
                    "2": "process_result_2",
                    "3": "data_result2"
                },
                "param_1": {
                    "14": "section_names",
                    "3": "section",
                    "5": "sections",
                    "6": "section_name"
                },
                "pcVar1": {
                    "10": "section_name",
                    "16": "current_section",
                    "5": "current_section_name"
                },
                "plVar7": {
                    "1": "current_node",
                    "2": "section_list_iterator",
                    "22": "section_list"
                },
                "uVar6": {
                    "1": "error_message_result",
                    "12": "return_value",
                    "3": "result",
                    "7": "error_code"
                }
            },
            "called": [
                "FUN_0010827b",
                "dcgettext",
                "strcmp",
                "FUN_00119dd0",
                "FUN_0010829e",
                "FUN_00114190"
            ],
            "calling": [
                "FUN_001159d0"
            ],
            "code": "\nundefined8 process_section_00115b70(char **section_names)\n\n{\n  char *current_section;\n  int comparison_result;\n  int section_type;\n  long result1;\n  long result2;\n  undefined8 return_value;\n  long *section_list;\n  \n  result1 = process_data_00114190(*section_names,0,4);\n  if (result1 == 0) {\n    if ((DAT_001278d8 != '\\0') || (DAT_00127a39 != '\\0')) {\n      result1 = process_data_00114190(*section_names,0,1);\n      result2 = process_data_00114190(*section_names,0,2);\n      if (result1 != 0) {\n        if (result2 != 0) {\n          current_section = *section_names;\n          return_value = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          print_error_and_exit_00119dd0(return_value,current_section);\n        }\n        if (result1 != 0) {\n          if (DAT_001279d8 == (long *)0x0) {\n            return 1;\n          }\n          current_section = *section_names;\n          section_list = DAT_001279d8;\n          do {\n            section_type = strcmp(current_section,(char *)section_list[1]);\n            if (section_type == 0) {\n              return_value = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              print_error_and_exit_00119dd0(return_value,current_section);\n            }\n            section_list = (long *)*section_list;\n          } while (section_list != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((DAT_00127a39 != '\\0') && (result2 == 0)) {\n        return 1;\n      }\n    }\n    section_type = DAT_00127a48;\n    if ((*(byte *)((long)section_names + 0x25) & 0x20) != 0) {\n      if ((((DAT_00127a48 - 2U < 2) || (DAT_00127a48 == 7)) || (DAT_00127a44 == 2)) ||\n         (DAT_001279a0 != '\\0')) {\n        current_section = *section_names;\n        comparison_result = strcmp(current_section,\".gnu_debugaltlink\");\n        if ((comparison_result != 0) && (comparison_result = strcmp(current_section,\".gnu_debuglink\"), comparison_result != 0)) {\n          section_type = strcmp(current_section,\".reloc\");\n          if (section_type != 0) {\n            return 1;\n          }\n          return_value = process_input_0010829e();\n          return return_value;\n        }\n      }\n      if (section_type == 5) {\n        return_value = check_string_length_00113ede(section_names);\n        return return_value;\n      }\n      if (section_type == 4) {\n        return 0;\n      }\n    }\n    if (section_type == 6) {\n      return_value = calculate_inverted_result_001082b3();\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_section_00115b70",
            "entrypoint": "0x00115b70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115b70": "process_section_00115b70",
                "iVar2": "comparison_result",
                "iVar3": "section_type",
                "lVar4": "result1",
                "lVar5": "result2",
                "param_1": "section_names",
                "pcVar1": "current_section",
                "plVar7": "section_list",
                "uVar6": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115d00": {
            "additional_data": {
                "*(byte *)(*(long *)(*(long *)(*(long *)(param_2 + 8) + 0x380) + 0x340) + 5)": {
                    "1": "data_divisor"
                },
                "*(int *)(*(long *)(binary_param + 0x110) + 0xd40)": {
                    "1": "value_at_offset3"
                },
                "*(int *)(*(long *)(binary_param + 8) + 8)": {
                    "1": "value_at_offset"
                },
                "*(int *)(*(long *)(param_2 + 0x110) + 0xd40)": {
                    "1": "binary_value1"
                },
                "*(int *)(*(long *)(param_2 + 8) + 8)": {
                    "1": "binary_header_value"
                },
                "*(int *)(input_param + 0x28)": {
                    "1": "value_at_offset2"
                },
                "*(int *)(param_1 + 0x28)": {
                    "1": "input_value1"
                },
                "*(long *)(DAT_001278d0 + (ulong)(count - 1) * 8)": {
                    "1": "reversed_value"
                },
                "*(long *)(DAT_001278d0 + (ulong)(uVar1 - 1) * 8)": {
                    "1": "result1"
                },
                "*(uint *)(input_param + 0x2c)": {
                    "1": "value_at_offset4"
                },
                "*(uint *)(param_1 + 0x2c)": {
                    "1": "condition4"
                },
                "*(ulong *)(*(long *)(binary_param + 0x110) + 0x88) / (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(binary_param + 8) + 0x380) + 0x340) + 5)": {
                    "1": "calculation"
                },
                "*(ulong *)(*(long *)(param_2 + 0x110) + 0x88)": {
                    "1": "data_array_size"
                },
                "*(ulong *)(*(long *)(param_2 + 0x110) + 0x88) / (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(param_2 + 8) + 0x380) + 0x340) + 5)": {
                    "1": "condition5"
                },
                "DAT_001278d0": {
                    "1": "data_value"
                },
                "FUN_00115d00": {
                    "1": "reverse_lookup",
                    "2": "retrieve_value",
                    "4": "get_matching_value",
                    "5": "find_matching_value"
                },
                "lVar2": {
                    "1": "desired_value",
                    "16": "result",
                    "7": "matching_value"
                },
                "param_1": {
                    "1": "input_value1",
                    "11": "input_value",
                    "2": "value_to_compare",
                    "4": "input_param"
                },
                "param_2": {
                    "1": "data_object",
                    "10": "data_structure",
                    "2": "binary_param",
                    "3": "binary_data",
                    "4": "data_struct"
                },
                "uVar1": {
                    "1": "input_length",
                    "2": "item_count",
                    "3": "value",
                    "4": "count"
                }
            },
            "called": [
                "FUN_001082c3"
            ],
            "calling": [
                "FUN_001159d0",
                "FUN_00108179"
            ],
            "code": "\nlong find_matching_value_00115d00(long input_value,long data_structure)\n\n{\n  uint count;\n  long result;\n  \n  result = DAT_001278d0;\n  if (DAT_001278d0 != 0) {\n    if (*(int *)(*(long *)(data_structure + 8) + 8) == 5) {\n      if (*(int *)(input_value + 0x28) == *(int *)(*(long *)(data_structure + 0x110) + 0xd40)) {\n        count = *(uint *)(input_value + 0x2c);\n        if (count == 0) {\n          result = 0;\n        }\n        else if ((ulong)count <\n                 *(ulong *)(*(long *)(data_structure + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(data_structure + 8) + 0x380) + 0x340) + 5))\n        {\n          result = *(long *)(DAT_001278d0 + (ulong)(count - 1) * 8);\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "find_matching_value_00115d00",
            "entrypoint": "0x00115d00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115d00": "find_matching_value_00115d00",
                "lVar2": "result",
                "param_1": "input_value",
                "param_2": "data_structure",
                "uVar1": "count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115d70": {
            "additional_data": {
                "FUN_00115d70": {
                    "1": "check_param",
                    "2": "check_and_traverse",
                    "3": "find_or_traverse",
                    "8": "check_pattern_match"
                },
                "lVar1": {
                    "1": "hash_value",
                    "2": "found_value",
                    "4": "pattern_result",
                    "9": "result"
                },
                "local_10": {
                    "1": "found_value",
                    "2": "found",
                    "3": "match_found",
                    "4": "is_found",
                    "6": "result"
                },
                "local_18": {
                    "1": "found_value",
                    "2": "current_pattern",
                    "3": "target"
                },
                "param_1": {
                    "1": "data",
                    "2": "value",
                    "3": "input_pattern",
                    "8": "input_value"
                },
                "param_2": {
                    "1": "input2",
                    "5": "pattern_table",
                    "8": "table",
                    "9": "hash_table"
                }
            },
            "called": [
                "htab_traverse",
                "FUN_0011a170",
                "htab_find"
            ],
            "calling": [
                "FUN_001159d0",
                "FUN_001082df",
                "FUN_0010554f"
            ],
            "code": "\nundefined check_pattern_match_00115d70(undefined8 input_value,undefined8 hash_table)\n\n{\n  long result;\n  undefined8 pattern;\n  undefined is_match;\n  \n  if (DAT_001279ea == '\\0') {\n    result = htab_find(hash_table,input_value);\n    is_match = result != 0;\n  }\n  else {\n    is_match = 0;\n    pattern = input_value;\n    htab_traverse(hash_table,pattern_match_0011a170,&pattern);\n  }\n  return is_match;\n}\n\n",
            "current_name": "check_pattern_match_00115d70",
            "entrypoint": "0x00115d70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115d70": "check_pattern_match_00115d70",
                "lVar1": "result",
                "local_10": "is_match",
                "local_18": "pattern",
                "param_1": "input_value",
                "param_2": "hash_table"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115dc0": {
            "additional_data": {
                "DAT_001278d0": {
                    "1": "reloc_type"
                },
                "DAT_00127a28": {
                    "1": "pattern_to_match"
                },
                "DAT_00127a40": {
                    "1": "is_error"
                },
                "DAT_00127a48": {
                    "1": "section_status"
                },
                "FUN_00115dc0": {
                    "1": "process_and_print",
                    "13": "process_section",
                    "2": "process_section_data",
                    "3": "process_binary_data",
                    "4": "process_data"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "jump_table_function",
                    "16": "jump_table",
                    "2": "jmp_table",
                    "9": "jumptable"
                },
                "bfd_alloc": {
                    "1": "allocate_memory",
                    "3": "allocate_bfd"
                },
                "bfd_canonicalize_reloc": {
                    "4": "canonicalize_reloc"
                },
                "bfd_get_error": {
                    "1": "get_error",
                    "3": "get_bfd_error"
                },
                "bfd_get_reloc_upper_bound": {
                    "4": "get_reloc_upper_bound"
                },
                "cVar1": {
                    "1": "duplicate_found",
                    "12": "is_duplicate_section",
                    "16": "is_duplicate",
                    "2": "duplicate_section"
                },
                "check_duplicate_section_00115f50": {
                    "4": "check_duplicate_section"
                },
                "check_pattern_match_00115d70": {
                    "4": "check_pattern_match"
                },
                "dcgettext": {
                    "1": "translate_error",
                    "2": "get_translation"
                },
                "iVar2": {
                    "1": "error_status",
                    "10": "error_code",
                    "17": "error",
                    "3": "bfd_error"
                },
                "lVar4": {
                    "1": "reloc_result",
                    "12": "reloc_upper_bound",
                    "2": "reloc_bound",
                    "4": "result",
                    "5": "upper_bound"
                },
                "param_1": {
                    "1": "data",
                    "11": "param1",
                    "2": "param_1",
                    "3": "param"
                },
                "param_2": {
                    "1": "data",
                    "11": "param2",
                    "3": "parameters",
                    "5": "section_data"
                },
                "param_3": {
                    "1": "section_data_size",
                    "11": "param3",
                    "2": "data"
                },
                "print_error_message_001126c0": {
                    "4": "print_error_message"
                },
                "print_error_message_0011a110": {
                    "1": "print_error_message",
                    "2": "print_error_message2"
                },
                "process_data_00114190": {
                    "4": "process_data"
                },
                "puVar5": {
                    "1": "allocated_mem",
                    "10": "reloc_data",
                    "3": "relocated_data",
                    "7": "reloc_table"
                },
                "puVar7": {
                    "1": "filtered_table",
                    "2": "pu_var7",
                    "3": "new_reloc_table"
                },
                "puVar8": {
                    "1": "current_dest",
                    "2": "pu_var8",
                    "3": "next_reloc"
                },
                "uStack_38": {
                    "1": "error_flag",
                    "2": "stack_variable",
                    "3": "stack_value",
                    "5": "stack_var"
                },
                "uVar3": {
                    "1": "reloc_error",
                    "3": "reloc_count",
                    "4": "reloc_size",
                    "5": "result"
                },
                "uVar6": {
                    "1": "reloc_count_updated",
                    "25": "reloc_count",
                    "3": "relocation_count"
                },
                "uVar9": {
                    "1": "counter",
                    "2": "iteration_count",
                    "4": "loop_counter",
                    "8": "index"
                },
                "xexit": {
                    "1": "terminate_program",
                    "2": "exit"
                }
            },
            "called": [
                "bfd_get_error",
                "FUN_001126c0",
                "FUN_0011a110",
                "FUN_00115f50",
                "bfd_alloc",
                "dcgettext",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound",
                "FUN_001082df",
                "FUN_00114190",
                "xexit"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid process_section_00115dc0(undefined8 param1,undefined8 *param2,long param3)\n\n{\n  char is_duplicate;\n  int error;\n  undefined8 result;\n  long reloc_upper_bound;\n  undefined8 *reloc_data;\n  ulong reloc_count;\n  code *jump_table;\n  undefined8 *new_reloc_table;\n  undefined8 *next_reloc;\n  ulong index;\n  undefined8 stack_var;\n  \n  is_duplicate = check_duplicate_section(param1,param2,0);\n  if (is_duplicate != '\\0') {\n    return;\n  }\n  result = param2[0xc];\n  if ((((*(byte *)(param3 + 0x48) & 7) != 3) && (DAT_00127a48 != 6)) &&\n     (reloc_upper_bound = process_data(*param2,0,0x100), reloc_upper_bound == 0)) {\n    reloc_upper_bound = bfd_get_reloc_upper_bound(param1,param2);\n    if (reloc_upper_bound < 0) {\n      if ((reloc_upper_bound != -1) || (error = bfd_get_error(), error != 5)) {\n        DAT_00127a40 = 1;\n        result = 0;\nLAB_00108315:\n        print_error_message(0,param1,param2,result,stack_var);\n        return;\n      }\n    }\n    else if (reloc_upper_bound != 0) {\n      reloc_data = (undefined8 *)param2[0xe];\n      if (reloc_data == (undefined8 *)0x0) {\n        reloc_data = (undefined8 *)bfd_alloc(param3);\n        if (reloc_data == (undefined8 *)0x0) {\n          print_error_message2(0);\n                    \n          xexit(1);\n        }\n        reloc_count = bfd_canonicalize_reloc(param1,param2,reloc_data,DAT_001278d0);\n        if ((long)reloc_count < 0) {\n          DAT_00127a40 = 1;\n          result = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        reloc_count = (ulong)*(uint *)(param2 + 0xf);\n      }\n      if (DAT_00127a48 == 7) {\n        new_reloc_table = reloc_data;\n        for (index = 0; index != reloc_count; index = index + 1) {\n          next_reloc = new_reloc_table;\n          if (((*(long **)reloc_data[index] != (long *)0x0) &&\n              (reloc_upper_bound = **(long **)reloc_data[index], reloc_upper_bound != 0)) &&\n             (is_duplicate = check_pattern_match(*(undefined8 *)(reloc_upper_bound + 8),DAT_00127a28), is_duplicate != '\\0')) {\n            next_reloc = new_reloc_table + 1;\n            *new_reloc_table = reloc_data[index];\n          }\n          new_reloc_table = next_reloc;\n        }\n        *new_reloc_table = 0;\n        reloc_count = (long)new_reloc_table - (long)reloc_data >> 3;\n      }\n      jump_table = *(code **)(*(long *)(param3 + 8) + 0x288);\n      if (reloc_count == 0) {\n        reloc_count = 0;\n        reloc_data = (undefined8 *)0x0;\n      }\n      else {\n        reloc_count = reloc_count & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  reloc_count = 0;\n  reloc_data = (undefined8 *)0x0;\n  jump_table = *(code **)(*(long *)(param3 + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(param3,result,reloc_data,reloc_count);\n  return;\n}\n\n",
            "current_name": "process_section_00115dc0",
            "entrypoint": "0x00115dc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115dc0": "process_section_00115dc0",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "bfd_alloc": "allocate_bfd",
                "bfd_canonicalize_reloc": "canonicalize_reloc",
                "bfd_get_error": "get_bfd_error",
                "bfd_get_reloc_upper_bound": "get_reloc_upper_bound",
                "cVar1": "is_duplicate",
                "check_duplicate_section_00115f50": "check_duplicate_section",
                "check_pattern_match_00115d70": "check_pattern_match",
                "dcgettext": "get_translation",
                "iVar2": "error",
                "lVar4": "reloc_upper_bound",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "print_error_message_001126c0": "print_error_message",
                "print_error_message_0011a110": "print_error_message2",
                "process_data_00114190": "process_data",
                "puVar5": "reloc_data",
                "puVar7": "new_reloc_table",
                "puVar8": "next_reloc",
                "uStack_38": "stack_var",
                "uVar3": "result",
                "uVar6": "reloc_count",
                "uVar9": "index",
                "xexit": "exit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115f30": {
            "additional_data": {
                "FUN_00115f30": {
                    "1": "remove_share_flag_if_not_coff",
                    "2": "remove_share_flag",
                    "22": "drop_share_flag_if_not_coff",
                    "3": "drop_share_flag"
                },
                "param_1": {
                    "1": "original_value",
                    "21": "flags",
                    "4": "input_flag",
                    "5": "input_flags"
                },
                "param_2": {
                    "1": "input_array",
                    "2": "function_params",
                    "5": "arguments",
                    "6": "pointers",
                    "8": "parameters"
                },
                "param_3": {
                    "1": "format_specifier",
                    "16": "output_format",
                    "3": "output",
                    "5": "data"
                },
                "print_error_message_00119ed0": {
                    "2": "print_error_message"
                },
                "uVar1": {
                    "1": "param_1_copy",
                    "2": "first_pointer",
                    "3": "flag_value"
                },
                "uVar2": {
                    "1": "val2",
                    "17": "error_message",
                    "2": "value2",
                    "3": "var2"
                }
            },
            "called": [
                "FUN_00108375"
            ],
            "calling": [
                "FUN_00115530",
                "FUN_00107880"
            ],
            "code": "\nuint drop_share_flag_if_not_coff_00115f30(uint flags,undefined8 *parameters,undefined8 output_format)\n\n{\n  undefined8 first_argument;\n  undefined8 error_message;\n  \n  if (((flags & 0x8000000) != 0) && (*(int *)(parameters[1] + 8) != 2)) {\n    first_argument = *parameters;\n    flags = flags & 0xf7ffffff;\n    error_message = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    print_error_message(error_message,first_argument,output_format);\n  }\n  return flags;\n}\n\n",
            "current_name": "drop_share_flag_if_not_coff_00115f30",
            "entrypoint": "0x00115f30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115f30": "drop_share_flag_if_not_coff_00115f30",
                "param_1": "flags",
                "param_2": "parameters",
                "param_3": "output_format",
                "print_error_message_00119ed0": "print_error_message",
                "uVar1": "first_argument",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115f50": {
            "additional_data": {
                ".gnu.build.attributes": {
                    "1": "build_attributes"
                },
                "DAT_0012790c": {
                    "1": "some_data2",
                    "2": "flag2"
                },
                "DAT_001279d8": {
                    "1": "linked_list_head",
                    "2": "section_names_list"
                },
                "DAT_00127a20": {
                    "1": "is_windows_format",
                    "2": "flag3"
                },
                "DAT_00127a20 + param_1": {
                    "1": "third_data"
                },
                "DAT_00127a40": {
                    "1": "is_decompiled"
                },
                "FUN_00115f50": {
                    "1": "check_section_and_parameters",
                    "2": "check_section_and_compare",
                    "8": "check_duplicate_section"
                },
                "__s1": {
                    "1": "string_to_check",
                    "2": "string1",
                    "4": "current_string",
                    "5": "current_section",
                    "7": "section_name"
                },
                "auVar4": {
                    "1": "temp_array",
                    "2": "processing_result",
                    "3": "result_array",
                    "4": "result",
                    "6": "comparison_result"
                },
                "compare_strings_00113fb0": {
                    "8": "compare_strings"
                },
                "extraout_EDX": {
                    "1": "extra_out_value"
                },
                "param_1": {
                    "1": "section_header",
                    "10": "section_address",
                    "2": "address",
                    "3": "section_index"
                },
                "param_1 + 8": {
                    "1": "second_data"
                },
                "param_2": {
                    "1": "param_section_names",
                    "2": "strings_array",
                    "3": "arguments",
                    "4": "section_headers",
                    "6": "section_data"
                },
                "param_3": {
                    "1": "is_shared_library",
                    "13": "flag",
                    "2": "is_flag_set"
                },
                "plVar3": {
                    "1": "linked_data",
                    "11": "section_list",
                    "2": "section_entry",
                    "3": "section_pointer"
                },
                "process_section_001159d0": {
                    "1": "process_section_names",
                    "8": "process_section"
                },
                "uVar1": {
                    "1": "string_compare_result",
                    "14": "comparison_result",
                    "2": "result",
                    "6": "strcmp_result",
                    "7": "string_comparison_result"
                },
                "uVar2": {
                    "1": "extra_flag",
                    "2": "extra_info",
                    "5": "result",
                    "6": "extra_value"
                }
            },
            "called": [
                "FUN_001159d0",
                "strcmp",
                "FUN_00113fb0"
            ],
            "calling": [
                "FUN_00115dc0",
                "FUN_00116110"
            ],
            "code": "\nuint check_duplicate_section_00115f50(long section_address,char **section_data,char flag)\n\n{\n  char *section_name;\n  uint comparison_result;\n  undefined4 extra_value;\n  undefined4 extra_out_value;\n  long *section_list;\n  undefined comparison_result [12];\n  \n  if ((DAT_00127a40 != 0) || (DAT_0012790c != '\\0')) {\n    return 1;\n  }\n  comparison_result = process_section(section_data);\n  if (comparison_result[0] == '\\0') {\n    if (DAT_001279d8 != (long *)0x0) {\n      section_name = *section_data;\n      section_list = DAT_001279d8;\n      do {\n        comparison_result = strcmp(section_name,(char *)section_list[1]);\n        comparison_result._4_4_ = 0;\n        comparison_result._0_4_ = comparison_result;\n        comparison_result._8_4_ = extra_out_value;\n        if (comparison_result == 0) {\n          return 1;\n        }\n        section_list = (long *)*section_list;\n      } while (section_list != (long *)0x0);\n    }\n    extra_value = comparison_result._8_4_;\n    if (((((flag == '\\0') || (DAT_00127a20 == '\\0')) ||\n         (comparison_result._8_4_ = extra_value, comparison_result._0_8_ = *(long *)(section_address + 8),\n         *(int *)(*(long *)(section_address + 8) + 8) != 5)) ||\n        ((comparison_result._0_8_ = (ulong)section_data[0x1a], *(int *)(section_data[0x1a] + 4) != 7 ||\n         (comparison_result = compare_strings(*section_data,\"build_attributes\"), comparison_result[0] == '\\0')))) &&\n       ((*(byte *)((long)section_data + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(comparison_result._1_7_,section_data[8] == (char *)0x0) |\n             CONCAT31(comparison_result._9_3_,section_data[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_duplicate_section_00115f50",
            "entrypoint": "0x00115f50",
            "imported": false,
            "improved": true,
            "renaming": {
                ".gnu.build.attributes": "build_attributes",
                "FUN_00115f50": "check_duplicate_section_00115f50",
                "__s1": "section_name",
                "auVar4": "comparison_result",
                "compare_strings_00113fb0": "compare_strings",
                "extraout_EDX": "extra_out_value",
                "param_1": "section_address",
                "param_2": "section_data",
                "param_3": "flag",
                "plVar3": "section_list",
                "process_section_001159d0": "process_section",
                "uVar1": "comparison_result",
                "uVar2": "extra_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116030": {
            "additional_data": {
                "*param_1": {
                    "1": "buffer"
                },
                "FUN_00116030": {
                    "1": "process_reloc",
                    "10": "process_relocation",
                    "2": "process_reloc_info",
                    "4": "process_relocs"
                },
                "__ptr": {
                    "1": "relocation_buffer",
                    "19": "reloc_buffer",
                    "2": "reloc_ptr",
                    "3": "reloc_entries"
                },
                "extraout_RAX": {
                    "1": "exit_code",
                    "3": "extra_return_value",
                    "5": "return_value"
                },
                "iVar3": {
                    "1": "get_error"
                },
                "iVar5": {
                    "1": "error_var",
                    "19": "error_code",
                    "2": "bfd_error_code",
                    "7": "bfd_error"
                },
                "in_RAX": {
                    "1": "return_value_1",
                    "11": "return_value",
                    "13": "result",
                    "2": "return_val"
                },
                "lVar1": {
                    "1": "upper_bound"
                },
                "lVar2": {
                    "1": "reloc_val",
                    "2": "reloc_entry_value",
                    "6": "reloc_entry",
                    "8": "reloc_value"
                },
                "lVar3": {
                    "1": "prev_reloc_value",
                    "2": "constant_1"
                },
                "lVar4": {
                    "1": "base_value_2",
                    "2": "constant_2"
                },
                "lVar5": {
                    "1": "fwrite"
                },
                "lVar6": {
                    "1": "reloc_capacity",
                    "10": "upper_bound",
                    "2": "reloc_bound",
                    "4": "fwrite_func"
                },
                "lVar7": {
                    "1": "canonicalize_reloc_result",
                    "2": "reloc_result",
                    "3": "num_reloc_entries",
                    "9": "reloc_count"
                },
                "lVar8": {
                    "1": "relocation_index",
                    "2": "iteration_count",
                    "4": "loop_counter",
                    "5": "i",
                    "6": "reloc_index",
                    "7": "index"
                },
                "param_1": {
                    "1": "config_files",
                    "2": "parameters",
                    "3": "arguments",
                    "4": "file_path"
                },
                "param_2": {
                    "1": "data_length",
                    "2": "relocation_info",
                    "3": "data"
                },
                "plVar1": {
                    "1": "pointer_variable1",
                    "3": "reloc_ptr",
                    "7": "reloc_entry"
                },
                "plVar9": {
                    "1": "reloc_entry"
                },
                "uStack_28": {
                    "1": "zeroed_pointer",
                    "2": "return_value_3",
                    "3": "error_result",
                    "4": "stack_variable"
                }
            },
            "called": [
                "FUN_0011a110",
                "xmalloc",
                "free",
                "fwrite",
                "FUN_001083b7",
                "bfd_get_reloc_upper_bound",
                "bfd_canonicalize_reloc",
                "xexit"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 process_relocation_00116030(undefined8 *file_path,long data)\n\n{\n  long *reloc_entry;\n  long reloc_value;\n  long constant_1;\n  long constant_2;\n  int error_code;\n  undefined8 result;\n  long upper_bound;\n  void *reloc_buffer;\n  long reloc_count;\n  undefined8 return_value_2;\n  long index;\n  undefined8 stack_variable;\n  \n  if (*(long *)(data + 0x60) == 0) {\n    return result;\n  }\n  upper_bound = bfd_get_reloc_upper_bound();\n  if (upper_bound < 0) {\n    if ((upper_bound != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n      print_error_message_0011a110(*file_path);\n                    \n      xexit(1);\n    }\n  }\n  else if (upper_bound != 0) {\n    reloc_buffer = (void *)xmalloc();\n    reloc_count = bfd_canonicalize_reloc(file_path,data,reloc_buffer);\n    constant_2 = _DAT_00128680;\n    constant_1 = _DAT_00128568;\n    upper_bound = _fwrite;\n    if (reloc_count < 0) {\n      print_error_message_0011a110(*file_path);\n                    \n      xexit(1);\n    }\n    if (reloc_count != 0) {\n      index = 0;\n      do {\n        reloc_entry = **(long ***)((long)reloc_buffer + index * 8);\n        if ((((reloc_entry != (long *)0x0) && (reloc_value = *reloc_entry, reloc_value != 0)) && (reloc_value != upper_bound)) &&\n           ((reloc_value != constant_2 && (reloc_value != constant_1)))) {\n          *(uint *)(reloc_value + 0x18) = *(uint *)(reloc_value + 0x18) | 0x20;\n        }\n        index = index + 1;\n      } while (reloc_count != index);\n    }\n    free(reloc_buffer);\n    return return_value_2;\n  }\n  return stack_variable;\n}\n\n",
            "current_name": "process_relocation_00116030",
            "entrypoint": "0x00116030",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116030": "process_relocation_00116030",
                "__ptr": "reloc_buffer",
                "extraout_RAX": "return_value_2",
                "iVar5": "error_code",
                "in_RAX": "result",
                "lVar1": "reloc_upper_bound",
                "lVar2": "reloc_value",
                "lVar3": "constant_1",
                "lVar4": "constant_2",
                "lVar6": "upper_bound",
                "lVar7": "reloc_count",
                "lVar8": "index",
                "param_1": "file_path",
                "param_2": "data",
                "plVar1": "reloc_entry",
                "uStack_28": "stack_variable"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116110": {
            "additional_data": {
                "FUN_00116110": {
                    "1": "reverse_section_contents",
                    "26": "process_section"
                },
                "__ptr": {
                    "1": "buffer_ptr",
                    "10": "allocated_memory",
                    "11": "buffer",
                    "2": "ptr_var1",
                    "3": "section_contents"
                },
                "bVar20": {
                    "1": "temp_byte",
                    "2": "temp_flag",
                    "3": "temp_byte2",
                    "6": "flag"
                },
                "byte bVar20": {
                    "1": "flag"
                },
                "cVar6": {
                    "1": "check_duplicate",
                    "2": "char_var1",
                    "3": "temp_char",
                    "6": "check_result",
                    "7": "result"
                },
                "char cVar6": {
                    "1": "return_value"
                },
                "iVar10": {
                    "1": "loop_condition2",
                    "2": "var10"
                },
                "iVar4": {
                    "1": "temp1",
                    "2": "var1",
                    "3": "temp_var4",
                    "4": "var4"
                },
                "iVar5": {
                    "1": "stride",
                    "2": "var2",
                    "3": "temp_var5",
                    "4": "var5"
                },
                "int iVar10": {
                    "1": "divisor"
                },
                "int iVar4": {
                    "1": "loop_counter1"
                },
                "int iVar5": {
                    "1": "loop_counter2"
                },
                "lVar13": {
                    "1": "temp13",
                    "2": "var13",
                    "3": "remaining_length",
                    "5": "remaining_bytes"
                },
                "lVar3": {
                    "1": "index",
                    "2": "section_header",
                    "4": "section_size",
                    "5": "section_index"
                },
                "lVar8": {
                    "1": "length",
                    "2": "loop_index"
                },
                "local_30": {
                    "1": "local_memory",
                    "2": "full_section_contents",
                    "3": "local_var2",
                    "4": "section_data",
                    "6": "section_contents"
                },
                "local_38": {
                    "1": "size",
                    "2": "section_length",
                    "21": "section_size",
                    "3": "local_var1"
                },
                "long lVar13": {
                    "1": "length1"
                },
                "long lVar3": {
                    "1": "section_size"
                },
                "long lVar8": {
                    "1": "copy_counter"
                },
                "param_1": {
                    "1": "input_param1",
                    "2": "binary_file",
                    "4": "binary",
                    "6": "input_file",
                    "7": "param1"
                },
                "param_2": {
                    "1": "section_params",
                    "2": "section_info",
                    "3": "section_data",
                    "5": "section_header",
                    "7": "param2",
                    "8": "section_headers"
                },
                "param_3": {
                    "1": "section3",
                    "3": "output_bfd",
                    "6": "output_section",
                    "7": "param3",
                    "8": "output_file"
                },
                "puVar12": {
                    "1": "temp_array_ptr",
                    "2": "ptr_var2",
                    "3": "pointer_var",
                    "6": "temp_ptr",
                    "7": "temp_pointer"
                },
                "puVar14": {
                    "1": "ptr2",
                    "2": "aligned_ptr",
                    "3": "pointer_var2"
                },
                "puVar15": {
                    "1": "buffer_ptr2",
                    "2": "ptr2",
                    "3": "pointer_var3"
                },
                "pvVar16": {
                    "1": "current_dest",
                    "2": "ptr_var5",
                    "3": "pointer_var4",
                    "4": "void_pointer"
                },
                "uVar1": {
                    "1": "temp_u_var",
                    "2": "undefined_var1",
                    "3": "byte_value",
                    "7": "temp1",
                    "9": "temp_byte"
                },
                "uVar11": {
                    "1": "temp_ulong2",
                    "2": "temp3",
                    "3": "offset"
                },
                "uVar17": {
                    "1": "temp_ulong3",
                    "2": "var17",
                    "3": "temp_var17"
                },
                "uVar18": {
                    "1": "stride_size",
                    "2": "var18",
                    "3": "temp_var18",
                    "5": "alignment"
                },
                "uVar19": {
                    "1": "temp_offset",
                    "2": "temp_var3",
                    "3": "temp_var19"
                },
                "uVar2": {
                    "1": "temp_var",
                    "2": "temp_value1",
                    "3": "var2",
                    "5": "temp_var2",
                    "8": "temp2"
                },
                "uVar7": {
                    "1": "temp_handle2",
                    "13": "error_message",
                    "2": "undefined_var3",
                    "3": "error_msg"
                },
                "uVar9": {
                    "1": "outer_loop_counter",
                    "2": "temp_var9",
                    "5": "loop_index"
                },
                "ulong local_38": {
                    "1": "section_length"
                },
                "ulong uVar11": {
                    "1": "u_var"
                },
                "ulong uVar17": {
                    "1": "temp4"
                },
                "ulong uVar18": {
                    "1": "temp5"
                },
                "ulong uVar19": {
                    "1": "temp6"
                },
                "ulong uVar9": {
                    "1": "buffer_counter"
                },
                "undefined *puVar12": {
                    "1": "temp3"
                },
                "undefined uVar1": {
                    "1": "temp"
                },
                "undefined8 *__ptr": {
                    "1": "buffer"
                },
                "undefined8 *param_2": {
                    "1": "section_header"
                },
                "undefined8 *puVar14": {
                    "1": "ptr1"
                },
                "undefined8 *puVar15": {
                    "1": "ptr2"
                },
                "undefined8 param_1": {
                    "1": "fd"
                },
                "undefined8 param_3": {
                    "1": "bfd"
                },
                "undefined8 uVar2": {
                    "1": "temp1"
                },
                "undefined8 uVar7": {
                    "1": "temp2"
                },
                "void *local_30": {
                    "1": "section_data"
                },
                "void *pvVar16": {
                    "1": "ptr3"
                }
            },
            "called": [
                "FUN_001126c0",
                "xmalloc",
                "FUN_00115f50",
                "bfd_set_section_contents",
                "FUN_00108466",
                "bfd_set_section_size",
                "free",
                "FUN_001083de",
                "bfd_get_full_section_contents",
                "bfd_convert_section_contents",
                "FUN_00114190"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid process_section_00116110(undefined8 param1,undefined8 *section_headers,undefined8 output_file)\n\n{\n  undefined temp_byte;\n  undefined8 temp2;\n  long section_index;\n  int var4;\n  int var5;\n  char result;\n  undefined8 error_message;\n  undefined8 *buffer;\n  long loop_index;\n  ulong loop_index;\n  int divisor;\n  ulong temp_var11;\n  undefined *temp_pointer;\n  long remaining_bytes;\n  undefined8 *pointer_var2;\n  undefined8 *pointer_var3;\n  void *void_pointer;\n  ulong temp_offset;\n  ulong alignment;\n  ulong temp_var19;\n  byte flag;\n  ulong section_size;\n  void *section_contents;\n  \n  flag = 0;\n  result = check_duplicate_section_00115f50(param1,section_headers,1);\n  if (result != '\\0') {\n    return;\n  }\n  section_size = section_headers[8];\n  section_index = section_headers[0xc];\n  if (((*(byte *)((long)section_headers + 0x25) & 1) == 0) || ((*(byte *)(section_index + 0x25) & 1) == 0)) {\n    remaining_bytes = process_data_00114190(*section_headers,0,0x80);\n    if (remaining_bytes == 0) {\n      return;\n    }\n    if ((*(byte *)(remaining_bytes + 0x29) & 1) == 0) {\n      return;\n    }\n    buffer = (undefined8 *)xmalloc(section_size);\n    pointer_var3 = buffer;\n    if (7 < section_size) {\n      for (alignment = section_size >> 3; alignment != 0; alignment = alignment - 1) {\n        *pointer_var3 = 0;\n        pointer_var3 = pointer_var3 + (ulong)flag * -2 + 1;\n      }\n    }\n    pointer_var2 = pointer_var3;\n    if ((section_size & 4) != 0) {\n      pointer_var2 = (undefined8 *)((long)pointer_var3 + (ulong)flag * -8 + 4);\n      *(undefined4 *)pointer_var3 = 0;\n    }\n    pointer_var3 = pointer_var2;\n    if ((section_size & 2) != 0) {\n      pointer_var3 = (undefined8 *)((long)pointer_var2 + (ulong)flag * -4 + 2);\n      *(undefined2 *)pointer_var2 = 0;\n    }\n    if ((section_size & 1) != 0) {\n      *(undefined *)pointer_var3 = 0;\n    }\n    result = bfd_set_section_contents(output_file,section_index,buffer,0);\n    if (result != '\\0') {\n      free(buffer);\n      return;\n    }\n    DAT_00127a40 = 1;\n    print_error_message_001126c0(0,output_file,section_index,0);\n    free(buffer);\n    return;\n  }\n  section_contents = (void *)0x0;\n  result = bfd_get_full_section_contents(param1,section_headers,&section_contents);\n  if ((result == '\\0') ||\n     (result = bfd_convert_section_contents(param1,section_headers,output_file,&section_contents,&section_size),\n     divisor = DAT_00127908, result == '\\0')) {\n    bfd_set_section_size(section_index,0);\n    DAT_00127a40 = 1;\n    print_error_message_001126c0(0,param1,section_headers,0);\n    free(section_contents);\n    return;\n  }\n  var4 = DAT_001264b8;\n  var5 = DAT_001264bc;\n  if (DAT_00127908 != 0) {\n    alignment = (ulong)DAT_00127908;\n    if (section_size % alignment != 0) {\n      temp2 = *section_headers;\n      error_message = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      print_error_and_exit_00119dd0(error_message,temp2,divisor);\n    }\n    divisor = DAT_00127908 / 2;\n    temp_var11 = 0;\n    while (temp_var19 = temp_var11, var4 = DAT_001264b8, var5 = DAT_001264bc, temp_var19 < section_size) {\n      temp_var11 = alignment + temp_var19;\n      temp_offset = temp_var11;\n      for (loop_index = 0; loop_index < (ulong)(long)divisor; loop_index = loop_index + 1) {\n        temp_offset = temp_offset - 1;\n        temp_pointer = (undefined *)(temp_var19 + loop_index + (long)section_contents);\n        temp_byte = *temp_pointer;\n        *temp_pointer = *(undefined *)((long)section_contents + temp_offset);\n        *(undefined *)((long)section_contents + temp_offset) = temp_byte;\n      }\n    }\n  }\n  DAT_001264b8 = var4;\n  DAT_001264bc = var5;\n  if (-1 < var5) {\n    alignment = (ulong)DAT_00127a3c;\n    divisor = (int)((ulong)section_headers[7] % alignment);\n    temp_var11 = ((long)var5 - (long)divisor) + (long)section_contents;\n    if (var5 < divisor) {\n      temp_var11 = temp_var11 + alignment;\n    }\n    remaining_bytes = (section_size + (long)section_contents) - temp_var11;\n    void_pointer = section_contents;\n    for (; temp_var11 < section_size + (long)section_contents; temp_var11 = temp_var11 + alignment) {\n      for (loop_index = 0; ((int)loop_index < var4 && (loop_index != remaining_bytes)); loop_index = loop_index + 1) {\n        *(undefined *)((long)void_pointer + loop_index) = *(undefined *)(temp_var11 + loop_index);\n      }\n      void_pointer = (void *)((long)void_pointer + loop_index);\n      remaining_bytes = remaining_bytes - alignment;\n    }\n    section_size = ((((alignment - 1) + section_size) - (long)var5) / alignment) * (long)var4;\n    alignment = *(ulong *)(section_index + 0x38) / alignment;\n    *(ulong *)(section_index + 0x38) = alignment;\n    if (var5 < divisor) {\n      *(ulong *)(section_index + 0x38) = alignment + 1;\n      result = bfd_set_section_contents(output_file,section_index,section_contents,0,section_size);\n      if (result == '\\0') {\n        free_and_print_error_message_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  result = bfd_set_section_contents(output_file,section_index,section_contents,0,section_size);\n  if (result == '\\0') {\n    free_and_print_error_message_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(section_contents);\n  return;\n}\n\n",
            "current_name": "process_section_00116110",
            "entrypoint": "0x00116110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116110": "process_section_00116110",
                "__ptr": "buffer",
                "bVar20": "flag",
                "cVar6": "result",
                "iVar10": "divisor",
                "iVar4": "var4",
                "iVar5": "var5",
                "lVar13": "remaining_bytes",
                "lVar3": "section_index",
                "lVar8": "loop_index",
                "local_30": "section_contents",
                "local_38": "section_size",
                "param_1": "param1",
                "param_2": "section_headers",
                "param_3": "output_file",
                "puVar12": "temp_pointer",
                "puVar14": "pointer_var2",
                "puVar15": "pointer_var3",
                "pvVar16": "void_pointer",
                "uVar1": "temp_byte",
                "uVar11": "temp_var11",
                "uVar17": "temp_offset",
                "uVar18": "alignment",
                "uVar19": "temp_var19",
                "uVar2": "temp2",
                "uVar7": "error_message",
                "uVar9": "loop_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001163d0": {
            "additional_data": {
                "FUN_001163d0": {
                    "1": "merge_build_attribute_notes",
                    "2": "process_gnu_build_attribute_notes",
                    "25": "process_build_attribute_notes"
                },
                "__nmemb": {
                    "1": "num_notes",
                    "3": "num_elements",
                    "5": "record_count"
                },
                "__ptr": {
                    "1": "ptr_mem",
                    "12": "reloc_buffer",
                    "2": "temp_buffer",
                    "3": "buffer"
                },
                "__ptr_00": {
                    "1": "temp_buffer"
                },
                "bVar26": {
                    "1": "temp_bool",
                    "2": "temp_byte",
                    "3": "flag",
                    "6": "byte_var"
                },
                "bVar27": {
                    "1": "empty_buffer"
                },
                "bVar4": {
                    "1": "found_match",
                    "2": "is_match",
                    "3": "condition",
                    "5": "flag"
                },
                "bfd_canonicalize_reloc": {
                    "1": "canonicalize_reloc"
                },
                "bfd_get_reloc_upper_bound": {
                    "1": "get_reloc_upper_bound"
                },
                "bfd_set_error": {
                    "1": "set_bfd_error"
                },
                "cVar19": {
                    "1": "temp_var17",
                    "2": "char1",
                    "3": "temp_char",
                    "5": "char_var"
                },
                "cVar26": {
                    "1": "format_character"
                },
                "compare_memory_0011a1b0": {
                    "1": "compare_records_by_memory"
                },
                "compare_records_0011a250": {
                    "2": "compare_records"
                },
                "dcgettext": {
                    "1": "get_text"
                },
                "iVar21": {
                    "1": "temp_index",
                    "2": "counter",
                    "3": "var21",
                    "8": "loop_counter"
                },
                "iVar28": {
                    "1": "error_code"
                },
                "iVar5": {
                    "1": "iteration_variable"
                },
                "iVar6": {
                    "1": "temp_var6",
                    "2": "cmp_result",
                    "3": "memcmp_result",
                    "5": "comparison_result"
                },
                "lVar8": {
                    "1": "temp_var",
                    "3": "error_message_length",
                    "4": "message_length",
                    "7": "length"
                },
                "local_60": {
                    "1": "note_entry_array",
                    "2": "record_array",
                    "3": "local_array",
                    "4": "records_array"
                },
                "local_68": {
                    "1": "local_variable4",
                    "2": "local_var_68",
                    "3": "local_var4",
                    "7": "result_size"
                },
                "local_70": {
                    "1": "section_size",
                    "2": "local_var_70",
                    "3": "local_var3"
                },
                "local_88": {
                    "1": "version_2_offset",
                    "2": "version_1",
                    "4": "local_var1"
                },
                "memcmp": {
                    "1": "compare_memory"
                },
                "memcpy_0011a260": {
                    "1": "memcpy"
                },
                "pVar18": {
                    "1": "name_ptr_1"
                },
                "pVar19": {
                    "1": "name_ptr_2"
                },
                "pVar20": {
                    "1": "ptr1"
                },
                "pVar21": {
                    "1": "ptr2"
                },
                "pVar22": {
                    "1": "ptr3"
                },
                "param_1": {
                    "1": "param_sections",
                    "2": "input1"
                },
                "param_2": {
                    "1": "param_section_header2",
                    "2": "input2"
                },
                "param_3": {
                    "1": "total_notes_size",
                    "2": "param_section_size",
                    "3": "input_size",
                    "4": "note_size",
                    "5": "size"
                },
                "param_4": {
                    "1": "buffer",
                    "11": "output_buffer",
                    "2": "output_data",
                    "3": "data",
                    "4": "output"
                },
                "print_error_message_001126c0": {
                    "1": "print_bfd_error_message"
                },
                "print_error_message_00119ed0": {
                    "1": "print_error_message"
                },
                "process_build_attribute_notes_001086af": {
                    "1": "process_build_attribute_notes_v1"
                },
                "process_build_attribute_notes_00116490": {
                    "1": "process_build_attribute_notes_v2"
                },
                "puVar17": {
                    "1": "records_ptr",
                    "2": "records_start",
                    "3": "ptr2"
                },
                "puVar18": {
                    "1": "description_ptr",
                    "2": "ptr18",
                    "3": "ptr3"
                },
                "puVar19": {
                    "1": "output_buffer_iterator"
                },
                "puVar20": {
                    "1": "ptr2",
                    "2": "ptr20",
                    "3": "ptr4"
                },
                "puVar21": {
                    "1": "comparison_buffer_iterator"
                },
                "puVar22": {
                    "1": "temp_var_22",
                    "2": "note_data_ptr"
                },
                "puVar23": {
                    "1": "note_entries",
                    "2": "record_ptr"
                },
                "puVar24": {
                    "1": "record"
                },
                "puVar25": {
                    "1": "loop_ptr",
                    "2": "ptr25"
                },
                "puVar5": {
                    "1": "ptr_var",
                    "2": "ptr5",
                    "3": "current_record"
                },
                "qsort": {
                    "1": "sort"
                },
                "uStack_80": {
                    "1": "stack_var80",
                    "2": "stack_var",
                    "3": "version_2"
                },
                "uVar1": {
                    "1": "temp_var_1",
                    "25": "result"
                },
                "uVar10": {
                    "1": "record_size_2",
                    "2": "name_size",
                    "3": "temp_var2",
                    "5": "var10"
                },
                "uVar11": {
                    "1": "temp_var11",
                    "2": "temp_var_11",
                    "3": "temp3",
                    "4": "note_type",
                    "5": "var11"
                },
                "uVar12": {
                    "1": "calculated_size",
                    "2": "temp_var_12",
                    "3": "temp4",
                    "5": "var12"
                },
                "uVar13": {
                    "1": "alignment",
                    "2": "aligned_name_size",
                    "4": "aligned_size",
                    "5": "var13"
                },
                "uVar14": {
                    "1": "temp_var6",
                    "2": "temp_var_14",
                    "5": "var14"
                },
                "uVar15": {
                    "1": "temp_var6",
                    "2": "temp_var_15",
                    "5": "var15"
                },
                "uVar16": {
                    "1": "temp_var16",
                    "11": "remaining_size",
                    "2": "remaining_note_size",
                    "5": "var16"
                },
                "uVar17": {
                    "1": "record_index"
                },
                "uVar2": {
                    "1": "section_start",
                    "2": "var2",
                    "6": "var1"
                },
                "uVar24": {
                    "1": "temp_var6",
                    "2": "temp_var_24",
                    "3": "temp9",
                    "5": "var24"
                },
                "uVar26": {
                    "1": "temp_var_26"
                },
                "uVar3": {
                    "1": "temp_var3",
                    "2": "section",
                    "6": "var2"
                },
                "uVar4": {
                    "1": "is_error"
                },
                "uVar6": {
                    "1": "temp_value"
                },
                "uVar7": {
                    "1": "var4",
                    "19": "error_message",
                    "2": "message",
                    "3": "var7"
                },
                "uVar9": {
                    "1": "temp_var9",
                    "3": "temp1",
                    "5": "var9"
                },
                "ulong": {
                    "1": "unsigned_long"
                },
                "xcalloc": {
                    "1": "safe_allocate_memory"
                },
                "xfree": {
                    "1": "free_memory"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "xmalloc",
                "FUN_00119ed0",
                "free",
                "dcgettext",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound",
                "xcalloc"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\n\nunsigned_long process_build_attribute_notes_001163d0(undefined8 *param_elf_header,undefined8 *section2,unsigned_long size,undefined *output_buffer)\n\n{\n  unsigned_long result;\n  undefined8 var1;\n  undefined8 var2;\n  bool flag;\n  unsigned_long *current_record;\n  int comparison_result;\n  undefined8 error_message;\n  long length;\n  void *reloc_buffer;\n  unsigned_long var9;\n  unsigned_long var10;\n  unsigned_long var11;\n  unsigned_long var12;\n  undefined *output_buffer_temp;\n  unsigned_long var13;\n  unsigned_long var14;\n  unsigned_long var15;\n  unsigned_long remaining_size;\n  unsigned_long *record;\n  undefined *ptr3;\n  char char_var;\n  undefined *ptr4;\n  int loop_counter;\n  undefined *ptr22;\n  unsigned_long *ptr23;\n  unsigned_long var24;\n  size_t num_records;\n  unsigned_long *ptr25;\n  byte byte_var;\n  unsigned_long local_var1;\n  unsigned_long version_2;\n  unsigned_long local_var3;\n  unsigned_long result_size;\n  unsigned_long *records_array;\n  \n  byte_var = 0;\n  length = bfd_get_reloc_upper_bound();\n  result_size = size;\n  if (0 < length) {\n    reloc_buffer = (void *)xmalloc(length);\n    length = bfd_canonicalize_reloc(param_elf_header,section2,reloc_buffer,DAT_001278d0);\n    free(reloc_buffer);\n    if (length != 0) {\n      if (_DAT_001264c0 == 0) {\n        var1 = *param_elf_header;\n        var2 = *section2;\n        error_message = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        print_error_message(error_message,var1,var2);\n      }\n      records_array = (unsigned_long *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  records_array = (unsigned_long *)xcalloc(size / 0xc,0x48,size % 0xc);\n  local_var1 = 0;\n  local_var3 = 0;\n  remaining_size = size;\n  var15 = 0;\n  ptr23 = records_array;\n  var14 = 0;\n  ptr22 = output_buffer;\n  while (0xb < remaining_size) {\n    var10 = (**(code **)(param_elf_header[1] + 0x40))(ptr22);\n    *ptr23 = var10;\n    var10 = (**(code **)(param_elf_header[1] + 0x40))(ptr22 + 4);\n    ptr23[1] = var10;\n    var11 = (**(code **)(param_elf_header[1] + 0x40))(ptr22 + 8);\n    var10 = *ptr23;\n    ptr23[2] = var11;\n    var12 = ptr23[1];\n    var13 = var10 + 3 & 0xfffffffffffffffc;\n    ptr23[6] = var13;\n    if (var12 != (var12 + 3 & 0xfffffffffffffffc)) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < var11 - 0x100) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = var13 + var12 + 0xc;\n    if (remaining_size < result) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (var10 < 2) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    ptr23[3] = (unsigned_long)(ptr22 + 0xc);\n    ptr23[4] = (unsigned_long)(ptr22 + var13 + 0xc);\n    remaining_size = remaining_size + (-0xc - (var13 + var12));\n    if (var10 != 2) {\n      if (ptr22[0xc] == '$') {\n        if ((ptr22[0xd] == '\\x01') && (ptr22[0xe] == '1')) {\n          remaining_size = process_build_attribute_notes_001163d0_v2();\n          return remaining_size;\n        }\n      }\n      else if ((((4 < var10) && (ptr22[0xc] == 'G')) && (ptr22[0xd] == 'A')) &&\n              ((ptr22[0xe] == '$' && (ptr22[0xf] == '\\x01')))) {\n        if (ptr22[0x10] == '2') {\n          remaining_size = process_build_attribute_notes_001163d0_v2();\n          return remaining_size;\n        }\n        if (ptr22[0x10] == '3') {\n          remaining_size = process_build_attribute_notes_001163d0_v2();\n          return remaining_size;\n        }\n        length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    var9 = var15;\n    var24 = var14;\n    if (var12 == 0) {\n      if (var11 == 0x100) {\n        ptr23[7] = local_var1;\nLAB_001164af:\n        var12 = var14;\n        var24 = var14;\n      }\n      else {\n        ptr23[7] = local_var3;\nLAB_0011669e:\n        var9 = var15;\n        var12 = var15;\n      }\n    }\n    else {\n      if (var12 != 0x10) {\n        if (var12 < 0x11) {\n          if (var12 == 4) {\n            var11 = (**(code **)(param_elf_header[1] + 0x40))();\n            var12 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (var12 == 8) {\n            remaining_size = process_build_attribute_notes_001163d0_v1();\n            return remaining_size;\n          }\n        }\n        length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      var11 = (**(code **)(param_elf_header[1] + 0x28))(ptr22 + var13 + 0xc);\n      var12 = (**(code **)(param_elf_header[1] + 0x28))();\n      if (var12 < var11) {\n        var11 = var12;\n      }\nLAB_00116631:\n      if (ptr23[2] == 0x100) {\n        if (var11 == 0) {\n          var11 = local_var1;\n        }\n        var10 = *ptr23;\n        ptr23[7] = var11;\n        var24 = var12;\n        local_var1 = var11;\n        if (var12 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var11 == 0) {\n          var11 = local_var3;\n        }\n        var10 = *ptr23;\n        ptr23[7] = var11;\n        var9 = var12;\n        local_var3 = var11;\n        if (var12 == 0) goto LAB_0011669e;\n      }\n    }\n    ptr23[8] = var12;\n    if (*(char *)((ptr23[3] - 1) + var10) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptr23 = ptr23 + 9;\n    var15 = var9;\n    var14 = var24;\n    ptr22 = ptr22 + result;\n  }\n  if (remaining_size == 0) {\n    var1 = *param_elf_header;\n    var2 = *section2;\n    error_message = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    print_error_message(error_message,var1,var2);\n    num_records = ((long)ptr23 - (long)records_array >> 3) * -0x71c71c71c71c71c7;\n    qsort(records_array,num_records,0x48,memcmp);\n    for (record = records_array; record < ptr23; record = record + 9) {\n      remaining_size = record[2];\n      if (remaining_size != 0) {\n        var15 = record[7];\n        var14 = record[8];\n        ptr25 = record;\n        loop_counter = 0;\n        if (var15 == var14) {\n          record[2] = 0;\n        }\n        else {\n          do {\n            do {\n              current_record = ptr25;\n              ptr25 = current_record + -9;\n              if (ptr25 < records_array) goto LAB_001167f5;\n              var10 = current_record[-7];\n            } while (var10 == 0);\n            if ((*ptr25 != *record) ||\n               (comparison_result = compare_memory((void *)current_record[-6],(void *)record[3],*record), comparison_result != 0)) break;\n            var12 = current_record[-2];\n            var11 = current_record[-1];\n            if (var15 == var12) {\n              if (var14 == var11) {\n                record[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (var14 <= var11) {\n                record[2] = 0;\n                break;\n              }\n              if (var11 < var15) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < var11) || (var15 <= (var11 + 0xf & 0xfffffffffffffff0))\n                   ) goto process_records_00116852;\n              }\nLAB_001167b8:\n              if ((remaining_size == 0x101) == (var10 == 0x101)) {\n                if (var11 <= var14) {\n                  var11 = var14;\n                }\n                if (var12 < var15) {\n                  var15 = var12;\n                }\n                current_record[-1] = var11;\n                current_record[-2] = var15;\n                record[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (var12 <= var15) goto LAB_001167a6;\n              if (var11 < var15) goto LAB_0010852c;\n              if (var14 < var15) {\n                if ((0xfffffffffffffff0 < var14) || (var12 <= (var14 + 0xf & 0xfffffffffffffff0))\n                   ) goto process_records_00116852;\n                goto LAB_001167b8;\n              }\n              if (var14 != var11) goto LAB_001167b8;\n            }\nprocess_records_00116852:\n            flag = loop_counter < 0x11;\n            loop_counter = loop_counter + 1;\n          } while (flag);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(records_array,num_records,0x48,compare_records);\n    output_buffer_temp = (undefined *)xmalloc(size * 2);\n    version_2 = 0;\n    local_var3 = 0;\n    ptr22 = output_buffer_temp;\n    for (record = records_array; record < ptr23; record = record + 9) {\n      if (record[2] != 0) {\n        ptr3 = ptr22 + 0xc;\n        if ((record[7] == local_var3) && (record[8] == version_2)) {\n          (**(code **)(param_elf_header[1] + 0x50))(*record,ptr22);\n          (**(code **)(param_elf_header[1] + 0x50))(0,ptr22 + 4);\n          (**(code **)(param_elf_header[1] + 0x50))(record[2],ptr22 + 8);\n          var15 = record[6];\n          remaining_size = *record;\n          ptr22 = (undefined *)record[3];\n          ptr4 = ptr3;\n          for (var14 = remaining_size; var14 != 0; var14 = var14 - 1) {\n            *ptr4 = *ptr22;\n            ptr22 = ptr22 + (unsigned_long)byte_var * -2 + 1;\n            ptr4 = ptr4 + (unsigned_long)byte_var * -2 + 1;\n          }\n          if (remaining_size < var15) {\n            for (length = var15 - remaining_size; length != 0; length = length + -1) {\n              *ptr4 = 0;\n              ptr4 = ptr4 + (unsigned_long)byte_var * -2 + 1;\n            }\n          }\n          ptr22 = ptr3 + var15;\n        }\n        else {\n          (**(code **)(param_elf_header[1] + 0x50))();\n          if (*(int *)(param_elf_header[1] + 8) == 5) {\n            char_var = (*(char *)(param_elf_header[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            char_var = '\\b';\n          }\n          (**(code **)(param_elf_header[1] + 0x50))(char_var,ptr22 + 4);\n          (**(code **)(param_elf_header[1] + 0x50))(record[2],ptr22 + 8);\n          remaining_size = *record;\n          ptr22 = (undefined *)record[3];\n          ptr4 = ptr3;\n          for (var15 = remaining_size; var15 != 0; var15 = var15 - 1) {\n            *ptr4 = *ptr22;\n            ptr22 = ptr22 + (unsigned_long)byte_var * -2 + 1;\n            ptr4 = ptr4 + (unsigned_long)byte_var * -2 + 1;\n          }\n          var15 = record[6];\n          if (remaining_size < var15) {\n            for (length = var15 - remaining_size; length != 0; length = length + -1) {\n              *ptr4 = 0;\n              ptr4 = ptr4 + (unsigned_long)byte_var * -2 + 1;\n            }\n          }\n          length = param_elf_header[1];\n          ptr3 = ptr3 + var15;\n          ptr22 = ptr3 + 8;\n          if ((*(int *)(length + 8) == 5) && (*(char *)(param_elf_header[0x22] + 4) == '\\x02')) {\n            (**(code **)(length + 0x38))(record[7],ptr3);\n            (**(code **)(param_elf_header[1] + 0x38))(record[8],ptr22);\n            ptr22 = ptr3 + 0x10;\n          }\n          else {\n            (**(code **)(length + 0x50))(record[7],ptr3);\n            (**(code **)(param_elf_header[1] + 0x50))(record[8],ptr3 + 4);\n          }\n          local_var3 = record[7];\n          version_2 = record[8];\n        }\n      }\n    }\n    var15 = (long)ptr22 - (long)output_buffer_temp;\n    remaining_size = var15;\n    ptr22 = output_buffer_temp;\n    result_size = size;\n    if (var15 < size) {\n      for (; result_size = var15, remaining_size != 0; remaining_size = remaining_size - 1) {\n        *output_buffer = *ptr22;\n        ptr22 = ptr22 + (unsigned_long)byte_var * -2 + 1;\n        output_buffer = output_buffer + (unsigned_long)byte_var * -2 + 1;\n      }\n    }\n    free(output_buffer_temp);\n  }\n  else {\n    length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (length != 0) {\n      bfd_set_error(0x11);\n      print_bfd_error_message(0,param_elf_header,section2,length);\n      DAT_00127a40 = 1;\n    }\n  }\nLAB_001166f8:\n  free(records_array);\n  return result_size;\n}\n\n",
            "current_name": "process_build_attribute_notes_001163d0",
            "entrypoint": "0x001163d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001163d0": "process_build_attribute_notes_001163d0",
                "__nmemb": "num_records",
                "__ptr": "reloc_buffer",
                "__ptr_00": "output_buffer_temp",
                "bVar26": "byte_var",
                "bVar4": "flag",
                "bfd_canonicalize_reloc": "canonicalize_reloc",
                "bfd_get_reloc_upper_bound": "get_reloc_upper_bound",
                "bfd_set_error": "set_bfd_error",
                "cVar19": "char_var",
                "compare_memory_0011a1b0": "compare_memory",
                "compare_records_0011a250": "compare_records",
                "dcgettext": "get_text",
                "iVar21": "loop_counter",
                "iVar6": "comparison_result",
                "lVar8": "length",
                "local_60": "records_array",
                "local_68": "result_size",
                "local_70": "local_var3",
                "local_88": "local_var1",
                "memcmp": "compare_memory",
                "param_1": "param_elf_header",
                "param_2": "section2",
                "param_3": "size",
                "param_4": "output_buffer",
                "print_error_message_001126c0": "print_bfd_error_message",
                "print_error_message_00119ed0": "print_error_message",
                "process_build_attribute_notes_001086af": "process_build_attribute_notes_v1",
                "process_build_attribute_notes_00116490": "process_build_attribute_notes_v2",
                "puVar17": "record",
                "puVar18": "ptr3",
                "puVar20": "ptr4",
                "puVar22": "ptr22",
                "puVar23": "ptr23",
                "puVar25": "ptr25",
                "puVar5": "current_record",
                "qsort": "sort",
                "uStack_80": "version_2",
                "uVar1": "result",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "uVar13": "var13",
                "uVar14": "var14",
                "uVar15": "var15",
                "uVar16": "remaining_size",
                "uVar17": "record_index",
                "uVar2": "var1",
                "uVar24": "var24",
                "uVar3": "var2",
                "uVar7": "error_message",
                "uVar9": "var9",
                "ulong": "unsigned_long",
                "xcalloc": "safe_allocate_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116490": {
            "additional_data": {
                "FUN_00116490": {
                    "1": "extract_build_attribute_note",
                    "2": "process_build_attribute_notes"
                },
                "PuVar14": {
                    "1": "ptr_var1"
                },
                "__nmemb": {
                    "1": "size1",
                    "2": "size_var",
                    "5": "size"
                },
                "__ptr": {
                    "1": "ptr2",
                    "2": "ptr",
                    "3": "dynamic_memory",
                    "4": "buffer"
                },
                "bVar21": {
                    "1": "is_name_null_terminated",
                    "11": "byte_var",
                    "2": "byte_flag",
                    "3": "byte_value"
                },
                "bVar4": {
                    "1": "is_match",
                    "12": "flag",
                    "2": "bool_flag",
                    "4": "bool_var"
                },
                "cVar16": {
                    "1": "temp_char",
                    "16": "char_var",
                    "2": "character"
                },
                "iVar22": {
                    "1": "loop_counter_3",
                    "2": "counter",
                    "3": "var22",
                    "5": "int_var2"
                },
                "iVar6": {
                    "1": "compare_result",
                    "2": "counter",
                    "3": "var6",
                    "7": "index"
                },
                "in_R11": {
                    "1": "value7",
                    "2": "description",
                    "3": "in_register_r11"
                },
                "in_RAX": {
                    "1": "in_register_ax",
                    "2": "value1",
                    "9": "note_type"
                },
                "in_stack_00000020": {
                    "1": "record_data_size",
                    "2": "total_size",
                    "3": "result_size",
                    "7": "stack_var1"
                },
                "in_stack_00000028": {
                    "1": "temp_array3",
                    "2": "ptr10",
                    "3": "records",
                    "6": "stack_var2"
                },
                "in_stack_00000030": {
                    "1": "temp_buffer",
                    "2": "data_ptr",
                    "6": "stack_var3"
                },
                "in_stack_00000038": {
                    "1": "missing_note_version",
                    "2": "flag3",
                    "3": "flag1",
                    "4": "has_version_note",
                    "6": "stack_var4"
                },
                "in_stack_00000040": {
                    "1": "excess_data",
                    "2": "flag4",
                    "3": "flag2",
                    "6": "stack_var5"
                },
                "in_stack_00000048": {
                    "1": "local_ptr_2",
                    "2": "ptr12",
                    "5": "error_message",
                    "6": "stack_var6"
                },
                "lVar7": {
                    "1": "temp_var",
                    "2": "long_var",
                    "3": "index",
                    "6": "length"
                },
                "numAttributeNotes": {
                    "1": "attribute_note_count"
                },
                "param_1": {
                    "1": "data",
                    "10": "param1",
                    "2": "input1",
                    "4": "arg1",
                    "5": "input_param"
                },
                "param_2": {
                    "1": "attribute_count",
                    "2": "size_param",
                    "3": "arg2",
                    "5": "param2",
                    "7": "size"
                },
                "param_3": {
                    "1": "buffer",
                    "2": "attribute_name",
                    "3": "data",
                    "5": "param3"
                },
                "param_4": {
                    "1": "note_description_offset",
                    "2": "data",
                    "3": "arg4",
                    "5": "param4",
                    "7": "length"
                },
                "param_7": {
                    "1": "result_count",
                    "2": "arg5",
                    "4": "param_7",
                    "9": "param7"
                },
                "param_8": {
                    "1": "arg_8",
                    "2": "flag2",
                    "4": "param_8",
                    "9": "param8"
                },
                "param_9": {
                    "1": "val6",
                    "2": "arg7",
                    "4": "param_9",
                    "9": "param9"
                },
                "puVar14": {
                    "1": "pointer1",
                    "2": "ptr2"
                },
                "puVar15": {
                    "1": "ptr2",
                    "2": "ptr3",
                    "3": "pointer3"
                },
                "puVar17": {
                    "1": "ptr_1",
                    "2": "ptr4",
                    "3": "pointer4"
                },
                "puVar18": {
                    "1": "ptr2",
                    "2": "ptr_var5",
                    "3": "pointer5"
                },
                "puVar19": {
                    "1": "temp_array_ptr",
                    "2": "pointer_var6",
                    "3": "pointer6"
                },
                "puVar20": {
                    "1": "ptr9",
                    "2": "pointer_var7",
                    "3": "pointer7"
                },
                "puVar5": {
                    "1": "previous_attribute",
                    "2": "ptr_var",
                    "3": "ptr1",
                    "4": "pointer_var"
                },
                "pvVar5": {
                    "1": "var5"
                },
                "uVar1": {
                    "1": "result_var1",
                    "10": "var1",
                    "2": "temp1",
                    "3": "temp_var1",
                    "4": "result1"
                },
                "uVar10": {
                    "1": "val2",
                    "2": "temp_var10",
                    "8": "var10"
                },
                "uVar11": {
                    "1": "temp_var6",
                    "2": "temp_var11",
                    "8": "var11"
                },
                "uVar12": {
                    "1": "result_var8",
                    "2": "value5",
                    "8": "var12"
                },
                "uVar13": {
                    "1": "temp_var10",
                    "2": "temp9",
                    "7": "var13"
                },
                "uVar2": {
                    "1": "temp_var",
                    "10": "var2",
                    "2": "temp2",
                    "3": "temp_var2",
                    "4": "result2"
                },
                "uVar3": {
                    "1": "temp_var_3",
                    "10": "var3",
                    "2": "temp3",
                    "3": "temp_var3",
                    "4": "result3"
                },
                "uVar4": {
                    "1": "temp_var2"
                },
                "uVar5": {
                    "1": "temp_var3"
                },
                "uVar6": {
                    "1": "temp_var4"
                },
                "uVar7": {
                    "1": "temp_var5"
                },
                "uVar8": {
                    "1": "temp_var6",
                    "2": "temp_var8",
                    "4": "result4",
                    "8": "var8"
                },
                "uVar9": {
                    "1": "temp_var6",
                    "2": "temp_var9",
                    "8": "var9"
                },
                "unaf_R12": {
                    "1": "build_attribute"
                },
                "unaff_R11": {
                    "1": "var11"
                },
                "unaff_R12": {
                    "1": "register3",
                    "2": "register_r12",
                    "4": "attribute_note"
                },
                "unaff_R13": {
                    "1": "var13",
                    "2": "unaffected_register_r13",
                    "3": "unaff_r13"
                },
                "unaff_R14": {
                    "1": "pointer_var14_2",
                    "2": "unaffected_register_r14"
                },
                "unaff_RBP": {
                    "1": "unaff_reg2",
                    "2": "base_pointer"
                },
                "unaff_RBX": {
                    "1": "input2",
                    "2": "unaffected_register_rbx",
                    "3": "note_size",
                    "4": "remaining_size"
                },
                "unaff_retaddr": {
                    "1": "temp_address",
                    "10": "return_address",
                    "2": "register_return_addr"
                }
            },
            "called": [
                "FUN_001086af",
                "dcgettext"
            ],
            "calling": [
                "FUN_001086af",
                "FUN_0010847a"
            ],
            "code": "\nulong process_build_attribute_notes_00116490(undefined8 param1,ulong size,ulong name,long length)\n\n{\n  undefined8 var1;\n  undefined8 var2;\n  ulong var3;\n  bool flag;\n  ulong *pointer_var;\n  int int_var;\n  long length;\n  undefined8 var8;\n  ulong note_type;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  ulong var12;\n  undefined *buffer;\n  ulong var13;\n  ulong remaining_size;\n  ulong base_pointer;\n  ulong *pointer_var14;\n  undefined *pointer3;\n  char char_var;\n  undefined *pointer4;\n  undefined *pointer5;\n  ulong in_register_r11;\n  ulong *attribute_note;\n  ulong *pointer6;\n  ulong unaff_r13;\n  size_t size;\n  undefined8 *error_messages;\n  ulong *pointer7;\n  byte byte_var;\n  int int_var2;\n  ulong return_address;\n  ulong param7;\n  uint param8;\n  ulong param9;\n  ulong stack_var1;\n  ulong *stack_var2;\n  undefined *stack_var3;\n  uint stack_var4;\n  uint stack_var5;\n  undefined8 *stack_var6;\n  \n  byte_var = 0;\ncode_r0x00116490:\n  length = length;\n  var10 = base_pointer;\n  var13 = unaff_r13;\n  if (note_type == 0) {\n    if (size == 0x100) {\n      attribute_note[7] = return_address;\n      var11 = return_address;\nLAB_001164af:\n      var9 = unaff_r13;\n      var13 = unaff_r13;\n      return_address = var11;\n    }\n    else {\n      attribute_note[7] = param9;\nLAB_0011669e:\n      var10 = base_pointer;\n      var9 = base_pointer;\n    }\nLAB_001164bb:\n    attribute_note[8] = var9;\n    if (*(char *)((attribute_note[3] - 1) + name) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    pointer6 = attribute_note + 9;\n    if (0xb < remaining_size) {\n      var9 = (**(code **)(error_messages[1] + 0x40))(length);\n      *pointer6 = var9;\n      var9 = (**(code **)(error_messages[1] + 0x40))(length + 4);\n      attribute_note[10] = var9;\n      size = (**(code **)(error_messages[1] + 0x40))(length + 8);\n      name = *pointer6;\n      attribute_note[0xb] = size;\n      note_type = attribute_note[10];\n      var9 = name + 3 & 0xfffffffffffffffc;\n      attribute_note[0xf] = var9;\n      if (note_type != (note_type + 3 & 0xfffffffffffffffc)) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < size - 0x100) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      var11 = var9 + note_type + 0xc;\n      if (remaining_size < var11) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (name < 2) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      attribute_note[0xc] = length + 0xc;\n      in_register_r11 = length + 0xc + var9;\n      attribute_note[0xd] = in_register_r11;\n      remaining_size = remaining_size + (-0xc - (var9 + note_type));\n      length = length + var11;\n      base_pointer = var10;\n      attribute_note = pointer6;\n      unaff_r13 = var13;\n      if (name != 2) {\n        if (*(char *)(length + 0xc) == '$') {\n          if ((*(char *)(length + 0xd) == '\\x01') && (*(char *)(length + 0xe) == '1')) {\n            var10 = process_build_attribute_notes_00116490();\n            return var10;\n          }\n        }\n        else if ((((4 < name) && (*(char *)(length + 0xc) == 'G')) &&\n                 (*(char *)(length + 0xd) == 'A')) &&\n                ((*(char *)(length + 0xe) == '$' && (*(char *)(length + 0xf) == '\\x01')))) {\n          if (*(char *)(length + 0x10) == '2') {\n            var10 = process_build_attribute_notes_00116490();\n            return var10;\n          }\n          if (*(char *)(length + 0x10) == '3') {\n            var10 = process_build_attribute_notes_00116490();\n            return var10;\n          }\n          length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (remaining_size != 0) {\n      length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((stack_var4 | stack_var5 | param8) == 0) {\n      var1 = *error_messages;\n      var2 = *stack_var6;\n      var8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(var8,var1,var2);\nLAB_0011671b:\n      size = ((long)pointer6 - (long)stack_var2 >> 3) * -0x71c71c71c71c71c7;\n      qsort(stack_var2,size,0x48,compare_memory_0011a1b0);\n      for (pointer_var14 = stack_var2; pointer_var14 < pointer6; pointer_var14 = pointer_var14 + 9) {\n        var10 = pointer_var14[2];\n        if (var10 != 0) {\n          var13 = pointer_var14[7];\n          var9 = pointer_var14[8];\n          pointer7 = pointer_var14;\n          int_var2 = 0;\n          if (var13 == var9) {\n            pointer_var14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                pointer_var = pointer7;\n                pointer7 = pointer_var + -9;\n                if (pointer7 < stack_var2) goto LAB_001167f5;\n                var11 = pointer_var[-7];\n              } while (var11 == 0);\n              if ((*pointer7 != *pointer_var14) ||\n                 (int_var = memcmp((void *)pointer_var[-6],(void *)pointer_var14[3],*pointer_var14), int_var != 0))\n              break;\n              var3 = pointer_var[-2];\n              var12 = pointer_var[-1];\n              if (var13 == var3) {\n                if (var9 == var12) {\n                  pointer_var14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (var9 <= var12) {\n                  pointer_var14[2] = 0;\n                  break;\n                }\n                if (var12 < var13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < var12) ||\n                     (var13 <= (var12 + 0xf & 0xfffffffffffffff0))) goto process_records_00116852;\n                }\nLAB_001167b8:\n                if ((var10 == 0x101) == (var11 == 0x101)) {\n                  if (var12 <= var9) {\n                    var12 = var9;\n                  }\n                  if (var3 < var13) {\n                    var13 = var3;\n                  }\n                  pointer_var[-1] = var12;\n                  pointer_var[-2] = var13;\n                  pointer_var14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (var3 <= var13) goto LAB_001167a6;\n                if (var12 < var13) goto LAB_0010852c;\n                if (var9 < var13) {\n                  if ((0xfffffffffffffff0 < var9) || (var3 <= (var9 + 0xf & 0xfffffffffffffff0)))\n                  goto process_records_00116852;\n                  goto LAB_001167b8;\n                }\n                if (var9 != var12) goto LAB_001167b8;\n              }\nprocess_records_00116852:\n              flag = int_var2 < 0x11;\n              int_var2 = int_var2 + 1;\n            } while (flag);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(stack_var2,size,0x48,compare_records_0011a250);\n      buffer = (undefined *)xmalloc(stack_var1 * 2);\n      param7 = 0;\n      param9 = 0;\n      pointer5 = buffer;\n      for (pointer_var14 = stack_var2; pointer_var14 < pointer6; pointer_var14 = pointer_var14 + 9) {\n        if (pointer_var14[2] != 0) {\n          pointer4 = pointer5 + 4;\n          pointer3 = pointer5 + 0xc;\n          if ((pointer_var14[7] == param9) && (pointer_var14[8] == param7)) {\n            (**(code **)(error_messages[1] + 0x50))(*pointer_var14,pointer5);\n            (**(code **)(error_messages[1] + 0x50))(0,pointer4);\n            (**(code **)(error_messages[1] + 0x50))(pointer_var14[2],pointer5 + 8);\n            var13 = pointer_var14[6];\n            var10 = *pointer_var14;\n            pointer5 = (undefined *)pointer_var14[3];\n            pointer4 = pointer3;\n            for (var9 = var10; var9 != 0; var9 = var9 - 1) {\n              *pointer4 = *pointer5;\n              pointer5 = pointer5 + (ulong)byte_var * -2 + 1;\n              pointer4 = pointer4 + (ulong)byte_var * -2 + 1;\n            }\n            if (var10 < var13) {\n              for (length = var13 - var10; length != 0; length = length + -1) {\n                *pointer4 = 0;\n                pointer4 = pointer4 + (ulong)byte_var * -2 + 1;\n              }\n            }\n            pointer5 = pointer3 + var13;\n          }\n          else {\n            (**(code **)(error_messages[1] + 0x50))();\n            if (*(int *)(error_messages[1] + 8) == 5) {\n              char_var = (*(char *)(error_messages[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              char_var = '\\b';\n            }\n            (**(code **)(error_messages[1] + 0x50))(char_var,pointer4);\n            (**(code **)(error_messages[1] + 0x50))(pointer_var14[2],pointer5 + 8);\n            var10 = *pointer_var14;\n            pointer5 = (undefined *)pointer_var14[3];\n            pointer4 = pointer3;\n            for (var13 = var10; var13 != 0; var13 = var13 - 1) {\n              *pointer4 = *pointer5;\n              pointer5 = pointer5 + (ulong)byte_var * -2 + 1;\n              pointer4 = pointer4 + (ulong)byte_var * -2 + 1;\n            }\n            var13 = pointer_var14[6];\n            if (var10 < var13) {\n              for (length = var13 - var10; length != 0; length = length + -1) {\n                *pointer4 = 0;\n                pointer4 = pointer4 + (ulong)byte_var * -2 + 1;\n              }\n            }\n            length = error_messages[1];\n            pointer3 = pointer3 + var13;\n            pointer5 = pointer3 + 8;\n            if ((*(int *)(length + 8) == 5) && (*(char *)(error_messages[0x22] + 4) == '\\x02')) {\n              (**(code **)(length + 0x38))(pointer_var14[7],pointer3);\n              (**(code **)(error_messages[1] + 0x38))(pointer_var14[8],pointer5);\n              pointer5 = pointer3 + 0x10;\n            }\n            else {\n              (**(code **)(length + 0x50))(pointer_var14[7],pointer3);\n              (**(code **)(error_messages[1] + 0x50))(pointer_var14[8],pointer3 + 4);\n            }\n            param9 = pointer_var14[7];\n            param7 = pointer_var14[8];\n          }\n        }\n      }\n      var13 = (long)pointer5 - (long)buffer;\n      var10 = var13;\n      pointer5 = buffer;\n      if (var13 < stack_var1) {\n        for (; stack_var1 = var13, var10 != 0; var10 = var10 - 1) {\n          *stack_var3 = *pointer5;\n          pointer5 = pointer5 + (ulong)byte_var * -2 + 1;\n          stack_var3 = stack_var3 + (ulong)byte_var * -2 + 1;\n        }\n      }\n      free(buffer);\nLAB_001166f8:\n      free(stack_var2);\n      return stack_var1;\n    }\n    if (((stack_var5 | param8) == 0) || (stack_var4 == 0)) {\n      if (stack_var5 == 0) {\n        if (param8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param8 == 0) goto LAB_001166f8;\n    }\n    length = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (note_type == 0x10) {\n      var11 = (**(code **)(error_messages[1] + 0x28))(in_register_r11);\n      var9 = (**(code **)(error_messages[1] + 0x28))(attribute_note[4] + 8);\n      if (var9 < var11) {\n        var11 = var9;\n      }\nLAB_00116631:\n      if (attribute_note[2] == 0x100) {\n        if (var11 == 0) {\n          var11 = return_address;\n        }\n        name = *attribute_note;\n        attribute_note[7] = var11;\n        var13 = var9;\n        return_address = var11;\n        if (var9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var11 == 0) {\n          var11 = param9;\n        }\n        name = *attribute_note;\n        attribute_note[7] = var11;\n        var10 = var9;\n        param9 = var11;\n        if (var9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (note_type < 0x11) {\n      if (note_type == 4) {\n        var11 = (**(code **)(error_messages[1] + 0x40))(in_register_r11);\n        var9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (note_type == 8) {\n        var10 = process_build_attribute_notes_001086af();\n        return var10;\n      }\n    }\n    length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (length != 0) {\n    bfd_set_error(0x11);\n    print_error_message_001126c0(0,error_messages,stack_var6,length);\n    DAT_00127a40 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "code_backup": "\nulong FUN_00116490(undefined8 param_1,ulong param_2,ulong param_3,long param_4)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  ulong uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong in_RAX;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  ulong uVar12;\n  undefined *__ptr;\n  ulong uVar13;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar14;\n  undefined *puVar15;\n  char cVar16;\n  undefined *puVar17;\n  undefined *puVar18;\n  ulong in_R11;\n  ulong *unaff_R12;\n  ulong *puVar19;\n  ulong unaff_R13;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar20;\n  byte bVar21;\n  int iVar22;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong in_stack_00000020;\n  ulong *in_stack_00000028;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint in_stack_00000040;\n  undefined8 *in_stack_00000048;\n  \n  bVar21 = 0;\ncode_r0x00116490:\n  lVar7 = param_4;\n  uVar10 = unaff_RBP;\n  uVar13 = unaff_R13;\n  if (in_RAX == 0) {\n    if (param_2 == 0x100) {\n      unaff_R12[7] = unaff_retaddr;\n      uVar11 = unaff_retaddr;\nLAB_001164af:\n      uVar9 = unaff_R13;\n      uVar13 = unaff_R13;\n      unaff_retaddr = uVar11;\n    }\n    else {\n      unaff_R12[7] = param_9;\nLAB_0011669e:\n      uVar10 = unaff_RBP;\n      uVar9 = unaff_RBP;\n    }\nLAB_001164bb:\n    unaff_R12[8] = uVar9;\n    if (*(char *)((unaff_R12[3] - 1) + param_3) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    puVar19 = unaff_R12 + 9;\n    if (0xb < unaff_RBX) {\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7);\n      *puVar19 = uVar9;\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 4);\n      unaff_R12[10] = uVar9;\n      param_2 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 8);\n      param_3 = *puVar19;\n      unaff_R12[0xb] = param_2;\n      in_RAX = unaff_R12[10];\n      uVar9 = param_3 + 3 & 0xfffffffffffffffc;\n      unaff_R12[0xf] = uVar9;\n      if (in_RAX != (in_RAX + 3 & 0xfffffffffffffffc)) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param_2 - 0x100) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      uVar11 = uVar9 + in_RAX + 0xc;\n      if (unaff_RBX < uVar11) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param_3 < 2) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_R12[0xc] = lVar7 + 0xc;\n      in_R11 = lVar7 + 0xc + uVar9;\n      unaff_R12[0xd] = in_R11;\n      unaff_RBX = unaff_RBX + (-0xc - (uVar9 + in_RAX));\n      param_4 = lVar7 + uVar11;\n      unaff_RBP = uVar10;\n      unaff_R12 = puVar19;\n      unaff_R13 = uVar13;\n      if (param_3 != 2) {\n        if (*(char *)(lVar7 + 0xc) == '$') {\n          if ((*(char *)(lVar7 + 0xd) == '\\x01') && (*(char *)(lVar7 + 0xe) == '1')) {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n        }\n        else if ((((4 < param_3) && (*(char *)(lVar7 + 0xc) == 'G')) &&\n                 (*(char *)(lVar7 + 0xd) == 'A')) &&\n                ((*(char *)(lVar7 + 0xe) == '$' && (*(char *)(lVar7 + 0xf) == '\\x01')))) {\n          if (*(char *)(lVar7 + 0x10) == '2') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          if (*(char *)(lVar7 + 0x10) == '3') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaff_RBX != 0) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((in_stack_00000038 | in_stack_00000040 | param_8) == 0) {\n      uVar1 = *unaff_R14;\n      uVar2 = *in_stack_00000048;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(uVar8,uVar1,uVar2);\nLAB_0011671b:\n      __nmemb = ((long)puVar19 - (long)in_stack_00000028 >> 3) * -0x71c71c71c71c71c7;\n      qsort(in_stack_00000028,__nmemb,0x48,compare_memory_0011a1b0);\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        uVar10 = puVar14[2];\n        if (uVar10 != 0) {\n          uVar13 = puVar14[7];\n          uVar9 = puVar14[8];\n          puVar20 = puVar14;\n          iVar22 = 0;\n          if (uVar13 == uVar9) {\n            puVar14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                puVar5 = puVar20;\n                puVar20 = puVar5 + -9;\n                if (puVar20 < in_stack_00000028) goto LAB_001167f5;\n                uVar11 = puVar5[-7];\n              } while (uVar11 == 0);\n              if ((*puVar20 != *puVar14) ||\n                 (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar14[3],*puVar14), iVar6 != 0))\n              break;\n              uVar3 = puVar5[-2];\n              uVar12 = puVar5[-1];\n              if (uVar13 == uVar3) {\n                if (uVar9 == uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (uVar9 <= uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\n                if (uVar12 < uVar13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < uVar12) ||\n                     (uVar13 <= (uVar12 + 0xf & 0xfffffffffffffff0))) goto process_records_00116852;\n                }\nLAB_001167b8:\n                if ((uVar10 == 0x101) == (uVar11 == 0x101)) {\n                  if (uVar12 <= uVar9) {\n                    uVar12 = uVar9;\n                  }\n                  if (uVar3 < uVar13) {\n                    uVar13 = uVar3;\n                  }\n                  puVar5[-1] = uVar12;\n                  puVar5[-2] = uVar13;\n                  puVar14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (uVar3 <= uVar13) goto LAB_001167a6;\n                if (uVar12 < uVar13) goto LAB_0010852c;\n                if (uVar9 < uVar13) {\n                  if ((0xfffffffffffffff0 < uVar9) || (uVar3 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n                  goto process_records_00116852;\n                  goto LAB_001167b8;\n                }\n                if (uVar9 != uVar12) goto LAB_001167b8;\n              }\nprocess_records_00116852:\n              bVar4 = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (bVar4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(in_stack_00000028,__nmemb,0x48,compare_records_0011a250);\n      __ptr = (undefined *)xmalloc(in_stack_00000020 * 2);\n      param_7 = 0;\n      param_9 = 0;\n      puVar18 = __ptr;\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        if (puVar14[2] != 0) {\n          puVar17 = puVar18 + 4;\n          puVar15 = puVar18 + 0xc;\n          if ((puVar14[7] == param_9) && (puVar14[8] == param_7)) {\n            (**(code **)(unaff_R14[1] + 0x50))(*puVar14,puVar18);\n            (**(code **)(unaff_R14[1] + 0x50))(0,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar13 = puVar14[6];\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            puVar18 = puVar15 + uVar13;\n          }\n          else {\n            (**(code **)(unaff_R14[1] + 0x50))();\n            if (*(int *)(unaff_R14[1] + 8) == 5) {\n              cVar16 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              cVar16 = '\\b';\n            }\n            (**(code **)(unaff_R14[1] + 0x50))(cVar16,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            uVar13 = puVar14[6];\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            lVar7 = unaff_R14[1];\n            puVar15 = puVar15 + uVar13;\n            puVar18 = puVar15 + 8;\n            if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n              (**(code **)(lVar7 + 0x38))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x38))(puVar14[8],puVar18);\n              puVar18 = puVar15 + 0x10;\n            }\n            else {\n              (**(code **)(lVar7 + 0x50))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x50))(puVar14[8],puVar15 + 4);\n            }\n            param_9 = puVar14[7];\n            param_7 = puVar14[8];\n          }\n        }\n      }\n      uVar13 = (long)puVar18 - (long)__ptr;\n      uVar10 = uVar13;\n      puVar18 = __ptr;\n      if (uVar13 < in_stack_00000020) {\n        for (; in_stack_00000020 = uVar13, uVar10 != 0; uVar10 = uVar10 - 1) {\n          *in_stack_00000030 = *puVar18;\n          puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n          in_stack_00000030 = in_stack_00000030 + (ulong)bVar21 * -2 + 1;\n        }\n      }\n      free(__ptr);\nLAB_001166f8:\n      free(in_stack_00000028);\n      return in_stack_00000020;\n    }\n    if (((in_stack_00000040 | param_8) == 0) || (in_stack_00000038 == 0)) {\n      if (in_stack_00000040 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (in_RAX == 0x10) {\n      uVar11 = (**(code **)(unaff_R14[1] + 0x28))(in_R11);\n      uVar9 = (**(code **)(unaff_R14[1] + 0x28))(unaff_R12[4] + 8);\n      if (uVar9 < uVar11) {\n        uVar11 = uVar9;\n      }\nLAB_00116631:\n      if (unaff_R12[2] == 0x100) {\n        if (uVar11 == 0) {\n          uVar11 = unaff_retaddr;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar13 = uVar9;\n        unaff_retaddr = uVar11;\n        if (uVar9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (uVar11 == 0) {\n          uVar11 = param_9;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar10 = uVar9;\n        param_9 = uVar11;\n        if (uVar9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (in_RAX < 0x11) {\n      if (in_RAX == 4) {\n        uVar11 = (**(code **)(unaff_R14[1] + 0x40))(in_R11);\n        uVar9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (in_RAX == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n    }\n    lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (lVar7 != 0) {\n    bfd_set_error(0x11);\n    print_error_message_001126c0(0,unaff_R14,in_stack_00000048,lVar7);\n    DAT_00127a40 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "current_name": "process_build_attribute_notes_00116490",
            "entrypoint": "0x00116490",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116490": "process_build_attribute_notes_00116490",
                "__nmemb": "size",
                "__ptr": "buffer",
                "bVar21": "byte_var",
                "bVar4": "flag",
                "cVar16": "char_var",
                "iVar22": "int_var2",
                "iVar6": "int_var",
                "in_R11": "in_register_r11",
                "in_RAX": "note_type",
                "in_stack_00000020": "stack_var1",
                "in_stack_00000028": "stack_var2",
                "in_stack_00000030": "stack_var3",
                "in_stack_00000038": "stack_var4",
                "in_stack_00000040": "stack_var5",
                "in_stack_00000048": "stack_var6",
                "lVar7": "length",
                "param_1": "param1",
                "param_2": "size",
                "param_3": "name",
                "param_4": "length",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "puVar14": "pointer_var14",
                "puVar15": "pointer3",
                "puVar17": "pointer4",
                "puVar18": "pointer5",
                "puVar19": "pointer6",
                "puVar20": "pointer7",
                "puVar5": "pointer_var",
                "uVar1": "var1",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "uVar13": "var13",
                "uVar2": "var2",
                "uVar3": "var3",
                "uVar5": "temp_var3",
                "uVar8": "var8",
                "uVar9": "var9",
                "unaff_R12": "attribute_note",
                "unaff_R13": "unaff_r13",
                "unaff_R14": "error_messages",
                "unaff_RBP": "base_pointer",
                "unaff_RBX": "remaining_size",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116852": {
            "additional_data": {
                "FUN_00116852": {
                    "1": "extract_data_and_process",
                    "2": "find_and_process_records",
                    "23": "process_records"
                },
                "__ptr": {
                    "1": "output_ptr",
                    "2": "temp_buffer",
                    "3": "dynamic_array"
                },
                "bVar14": {
                    "1": "counter",
                    "2": "byte_flag",
                    "3": "temp_byte",
                    "4": "byte_var"
                },
                "cVar10": {
                    "1": "record_flag",
                    "2": "comparison_result",
                    "3": "temp_char",
                    "5": "char_var"
                },
                "iVar3": {
                    "1": "temp_int",
                    "2": "memcmp_result",
                    "3": "result",
                    "6": "compare_result",
                    "9": "comparison_result"
                },
                "in_R10": {
                    "1": "in_counter",
                    "11": "record_index",
                    "2": "counter",
                    "7": "record_count"
                },
                "in_R11": {
                    "1": "in_flag",
                    "2": "record_size",
                    "4": "record_type"
                },
                "in_R13": {
                    "1": "records"
                },
                "in_R14": {
                    "1": "record_ptr"
                },
                "in_R15": {
                    "1": "max_record_size"
                },
                "in_RBP": {
                    "1": "sorted_records"
                },
                "in_RBX": {
                    "1": "total_records",
                    "2": "record_count"
                },
                "in_RCX": {
                    "1": "end",
                    "14": "record_array",
                    "4": "record_count"
                },
                "lVar7": {
                    "1": "loop_count",
                    "2": "num_padding_bytes",
                    "5": "loop_counter",
                    "8": "loop_var"
                },
                "param_10": {
                    "1": "record_count",
                    "10": "param10",
                    "2": "result",
                    "3": "param_10",
                    "5": "param3",
                    "7": "output_size"
                },
                "param_11": {
                    "1": "record_array",
                    "2": "temp_array",
                    "3": "input_array",
                    "4": "records",
                    "8": "param11"
                },
                "param_12": {
                    "1": "output_records",
                    "2": "output_data",
                    "3": "output_array",
                    "4": "param5",
                    "6": "param12",
                    "8": "output_buffer"
                },
                "param_13": {
                    "1": "param12",
                    "2": "some_param",
                    "4": "param_13",
                    "6": "param13"
                },
                "param_14": {
                    "1": "param_count",
                    "2": "record_array_size",
                    "3": "param7",
                    "5": "input_size",
                    "7": "param14"
                },
                "param_15": {
                    "1": "initial_capacity"
                },
                "param_16": {
                    "1": "comparison_function"
                },
                "param_7": {
                    "1": "record_field1",
                    "15": "param7",
                    "4": "param_7",
                    "7": "param1"
                },
                "param_9": {
                    "1": "specific_value",
                    "15": "param9",
                    "4": "param_9",
                    "7": "param2"
                },
                "pcVar2": {
                    "1": "callback_function",
                    "2": "record_processing_function"
                },
                "psVar13": {
                    "1": "record_pointer",
                    "3": "record_ptr",
                    "4": "current_record"
                },
                "psVar13[2]": {
                    "1": "next_record_type"
                },
                "psVar13[3]": {
                    "1": "next_record_data"
                },
                "psVar13[6]": {
                    "1": "next_record_size"
                },
                "psVar13[7]": {
                    "1": "next_record_type_value"
                },
                "psVar13[8]": {
                    "1": "next_record_value"
                },
                "puVar11": {
                    "1": "record_name",
                    "2": "ptr2"
                },
                "puVar12": {
                    "1": "copy_source2",
                    "2": "record_data_ptr"
                },
                "puVar9": {
                    "1": "output_ptr",
                    "2": "dest_ptr"
                },
                "sVar1": {
                    "1": "size1",
                    "2": "size",
                    "7": "record_size"
                },
                "uVar4": {
                    "1": "loop_index",
                    "2": "i",
                    "5": "counter"
                },
                "uVar5": {
                    "1": "new_max_size",
                    "2": "temp_var1",
                    "3": "min_size"
                },
                "uVar6": {
                    "1": "size3",
                    "2": "temp_var2",
                    "3": "max_size"
                },
                "uVar8": {
                    "1": "current_record_size",
                    "2": "record_length"
                },
                "un_RCX": {
                    "1": "total_records"
                },
                "unaff_R10": {
                    "1": "record_comparison"
                },
                "unaff_R11": {
                    "1": "record_flag"
                },
                "unaff_R13": {
                    "1": "tmp_ptr",
                    "2": "end_of_records",
                    "4": "record_end"
                },
                "unaff_R14": {
                    "1": "comparing_record_ptr",
                    "14": "current_record",
                    "2": "current",
                    "3": "current_record_ptr"
                },
                "unaff_R14[0x10]": {
                    "1": "current_max_record_type2"
                },
                "unaff_R14[0x11]": {
                    "1": "current_max_record_value2"
                },
                "unaff_R14[0xb]": {
                    "1": "current_record_type3"
                },
                "unaff_R14[2]": {
                    "1": "current_record_type2"
                },
                "unaff_R14[3]": {
                    "1": "current_record_data2"
                },
                "unaff_R14[7]": {
                    "1": "current_record_size2"
                },
                "unaff_R14[8]": {
                    "1": "current_record_value2"
                },
                "unaff_R15": {
                    "1": "min_end_record",
                    "2": "max_size",
                    "3": "max_value",
                    "6": "max_record_size"
                },
                "unaff_RBP": {
                    "1": "next_record",
                    "2": "previous_record",
                    "3": "records",
                    "4": "record_pointer",
                    "6": "current_record"
                },
                "unaff_RBP[0x10]": {
                    "1": "current_max_record_type"
                },
                "unaff_RBP[0x11]": {
                    "1": "current_max_record_value"
                },
                "unaff_RBP[0xb]": {
                    "1": "current_record_type"
                },
                "unaff_RBP[2]": {
                    "1": "reset_flag"
                },
                "unaff_RBP[3]": {
                    "1": "current_record_data"
                },
                "unaff_RBP[7]": {
                    "1": "current_record_size"
                },
                "unaff_RBP[8]": {
                    "1": "current_max_size"
                },
                "unaff_RBX": {
                    "1": "current_record_size",
                    "2": "max_size",
                    "3": "min_value",
                    "6": "min_record_size"
                },
                "unaff_RCX": {
                    "1": "last_record"
                }
            },
            "called": [
                "qsort",
                "FUN_00116852",
                "xmalloc",
                "FUN_0011a250",
                "free",
                "memcmp"
            ],
            "calling": [
                "FUN_00116852"
            ],
            "code": "\nulong process_records_00116852(void)\n\n{\n  size_t record_size;\n  code *record_processing_function;\n  int comparison_result;\n  uint counter;\n  undefined *dynamic_array;\n  size_t *record_array;\n  ulong min_size;\n  ulong max_size;\n  long loop_var;\n  ulong record_size;\n  size_t min_record_size;\n  size_t *current_record;\n  undefined *output_buffer_ptr;\n  char char_var;\n  undefined *temp_ptr1;\n  ulong record_index;\n  undefined *temp_ptr2;\n  size_t record_type;\n  size_t *record_end;\n  size_t *current_record;\n  size_t max_record_size;\n  size_t *current_record;\n  byte byte_var;\n  size_t param7;\n  size_t param9;\n  ulong param10;\n  size_t *param11;\n  undefined *output_buffer;\n  long context;\n  size_t param14;\n  \n  byte_var = 0;\ncode_r0x00116852:\n  counter = (int)record_index + 1;\n  if (0x10 < (int)record_index) goto LAB_001167f5;\nLAB_00116863:\n  current_record = current_record + -9;\n  do {\n    if (record_end <= current_record) {\n      record_size = current_record_type2;\n      if (record_size == 0) goto LAB_00116863;\n      record_size = (ulong)counter;\n      if ((*current_record == *current_record) &&\n         (comparison_result = memcmp((void *)current_record_data2,(void *)current_record_data,*current_record), comparison_result == 0)) {\n        max_size = current_record_size2;\n        min_size = current_record_value2;\n        record_index = record_size & 0xffffffff;\n        if (max_record_size == max_size) {\n          if (min_record_size != min_size) goto LAB_001167a6;\n          matching_records_found = 0;\n        }\n        else {\n          if (max_record_size < max_size) {\n            if (min_size < max_record_size) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < min_size) || (max_record_size <= (min_size + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (min_record_size < max_record_size) {\n              if ((0xfffffffffffffff0 < min_record_size) ||\n                 (max_size <= (min_record_size + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (min_record_size == min_size) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (min_record_size <= min_size) {\n              matching_records_found = 0;\n              goto LAB_001167f5;\n            }\n            if (min_size < max_record_size) goto LAB_0010852c;\n          }\n          if ((record_type == 0x101) != (record_size == 0x101)) goto code_r0x00116852;\n          if (min_size <= min_record_size) {\n            min_size = min_record_size;\n          }\n          if (max_size < max_record_size) {\n            max_record_size = max_size;\n          }\n          current_record_value2 = min_size;\n          current_record_size2 = max_record_size;\n          matching_records_found = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        current_record = current_record;\n        current_record = current_record + 9;\n        if (record_array <= current_record) {\n          qsort(param11,param14,0x48,compare_records_0011a250);\n          dynamic_array = (undefined *)xmalloc(param10 * 2);\n          param7 = 0;\n          temp_ptr2 = dynamic_array;\n          for (current_record = param11; current_record < record_array; current_record = current_record + 9) {\n            if (next_record_type != 0) {\n              temp_ptr1 = temp_ptr2 + 4;\n              output_buffer_ptr = temp_ptr2 + 0xc;\n              record_processing_function = *(code **)(*(long *)(context + 8) + 0x50);\n              if ((next_record_type_value == param9) && (next_record_value == param7)) {\n                (*record_processing_function)(*current_record,temp_ptr2);\n                (**(code **)(*(long *)(context + 8) + 0x50))(0,temp_ptr1);\n                (**(code **)(*(long *)(context + 8) + 0x50))(next_record_type,temp_ptr2 + 8);\n                max_size = next_record_size;\n                record_size = *current_record;\n                temp_ptr2 = (undefined *)next_record_data;\n                temp_ptr1 = output_buffer_ptr;\n                for (min_size = record_size; min_size != 0; min_size = min_size - 1) {\n                  *temp_ptr1 = *temp_ptr2;\n                  temp_ptr2 = temp_ptr2 + (ulong)byte_var * -2 + 1;\n                  temp_ptr1 = temp_ptr1 + (ulong)byte_var * -2 + 1;\n                }\n                if (record_size < max_size) {\n                  for (loop_var = max_size - record_size; loop_var != 0; loop_var = loop_var + -1) {\n                    *temp_ptr1 = 0;\n                    temp_ptr1 = temp_ptr1 + (ulong)byte_var * -2 + 1;\n                  }\n                }\n                temp_ptr2 = output_buffer_ptr + max_size;\n              }\n              else {\n                (*record_processing_function)();\n                if (*(int *)(*(long *)(context + 8) + 8) == 5) {\n                  char_var = (*(char *)(*(long *)(context + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  char_var = '\\b';\n                }\n                (**(code **)(*(long *)(context + 8) + 0x50))(char_var,temp_ptr1);\n                (**(code **)(*(long *)(context + 8) + 0x50))(next_record_type,temp_ptr2 + 8);\n                record_size = *current_record;\n                temp_ptr2 = (undefined *)next_record_data;\n                temp_ptr1 = output_buffer_ptr;\n                for (max_size = record_size; max_size != 0; max_size = max_size - 1) {\n                  *temp_ptr1 = *temp_ptr2;\n                  temp_ptr2 = temp_ptr2 + (ulong)byte_var * -2 + 1;\n                  temp_ptr1 = temp_ptr1 + (ulong)byte_var * -2 + 1;\n                }\n                max_size = next_record_size;\n                if (record_size < max_size) {\n                  for (loop_var = max_size - record_size; loop_var != 0; loop_var = loop_var + -1) {\n                    *temp_ptr1 = 0;\n                    temp_ptr1 = temp_ptr1 + (ulong)byte_var * -2 + 1;\n                  }\n                }\n                loop_var = *(long *)(context + 8);\n                output_buffer_ptr = output_buffer_ptr + max_size;\n                temp_ptr2 = output_buffer_ptr + 8;\n                if ((*(int *)(loop_var + 8) == 5) &&\n                   (*(char *)(*(long *)(context + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(loop_var + 0x38))(next_record_type_value,output_buffer_ptr);\n                  (**(code **)(*(long *)(context + 8) + 0x38))(next_record_value,temp_ptr2);\n                  temp_ptr2 = output_buffer_ptr + 0x10;\n                }\n                else {\n                  (**(code **)(loop_var + 0x50))(next_record_type_value,output_buffer_ptr);\n                  (**(code **)(*(long *)(context + 8) + 0x50))(next_record_value,output_buffer_ptr + 4);\n                }\n                param9 = next_record_type_value;\n                param7 = next_record_value;\n              }\n            }\n          }\n          max_size = (long)temp_ptr2 - (long)dynamic_array;\n          record_size = max_size;\n          temp_ptr2 = dynamic_array;\n          if (max_size < param10) {\n            for (; param10 = max_size, record_size != 0; record_size = record_size - 1) {\n              *output_buffer = *temp_ptr2;\n              temp_ptr2 = temp_ptr2 + (ulong)byte_var * -2 + 1;\n              output_buffer = output_buffer + (ulong)byte_var * -2 + 1;\n            }\n          }\n          free(dynamic_array);\n          free(param11);\n          return param10;\n        }\n        record_type = current_record_type3;\n      } while (record_type == 0);\n      max_record_size = current_max_record_type2;\n      min_record_size = current_max_record_value2;\n      counter = 0;\n      if (max_record_size != min_record_size) break;\n      current_record_type3 = 0;\n    }\n  } while( true );\n}\n\n",
            "current_name": "process_records_00116852",
            "entrypoint": "0x00116852",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116852": "process_records_00116852",
                "__ptr": "dynamic_array",
                "bVar14": "byte_var",
                "cVar10": "char_var",
                "iVar3": "comparison_result",
                "in_R10": "record_index",
                "in_R11": "record_type",
                "in_RCX": "record_array",
                "lVar7": "loop_var",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "output_buffer",
                "param_13": "context",
                "param_14": "param14",
                "param_7": "param7",
                "param_9": "param9",
                "pcVar2": "record_processing_function",
                "psVar13": "current_record",
                "psVar13[2]": "next_record_type",
                "psVar13[3]": "next_record_data",
                "psVar13[6]": "next_record_size",
                "psVar13[7]": "next_record_type_value",
                "psVar13[8]": "next_record_value",
                "puVar11": "temp_ptr1",
                "puVar12": "temp_ptr2",
                "puVar9": "output_buffer_ptr",
                "sVar1": "record_size",
                "uVar4": "counter",
                "uVar5": "min_size",
                "uVar6": "max_size",
                "uVar8": "record_size",
                "unaff_R13": "record_end",
                "unaff_R14": "current_record",
                "unaff_R14[0x10]": "current_max_record_type2",
                "unaff_R14[0x11]": "current_max_record_value2",
                "unaff_R14[0xb]": "current_record_type3",
                "unaff_R14[2]": "current_record_type2",
                "unaff_R14[3]": "current_record_data2",
                "unaff_R14[7]": "current_record_size2",
                "unaff_R14[8]": "current_record_value2",
                "unaff_R15": "max_record_size",
                "unaff_RBP": "current_record",
                "unaff_RBP[2]": "matching_records_found",
                "unaff_RBP[3]": "current_record_data",
                "unaff_RBX": "min_record_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116ad0": {
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00116ad0",
            "entrypoint": "0x00116ad0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00116b00": {
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "calling": [
                "_INIT_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00116b00",
            "entrypoint": "0x00116b00",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00116b90": {
            "called": [
                "memmove",
                "bindtextdomain",
                "fseek",
                "FUN_00114460",
                "fclose",
                "FUN_00119dd0",
                "strtol",
                "mkstemp",
                "stat",
                "FUN_00114190",
                "xexit",
                "FUN_001199d0",
                "FUN_00108800",
                "__errno_location",
                "unlink_if_ordinary",
                "strchr",
                "xrealloc",
                "FUN_00113fe0",
                "bfd_init",
                "bfd_set_error_program_name",
                "xmalloc",
                "free",
                "malloc",
                "FUN_00119ed0",
                "strncpy",
                "strtoul",
                "strcpy",
                "ferror",
                "xmalloc_set_program_name",
                "FUN_00108916",
                "strlen",
                "bfd_get_error",
                "FUN_00114690",
                "strcasecmp",
                "FUN_00108d9a",
                "fopen",
                "FUN_00115970",
                "setlocale",
                "dup",
                "strerror",
                "FUN_001126c0",
                "FUN_00114cf0",
                "FUN_00119940",
                "FUN_001054af",
                "htab_elements",
                "dcgettext",
                "free",
                "strcmp",
                "FUN_00113f20",
                "bfd_errmsg",
                "fprintf",
                "FUN_00108898",
                "getc",
                "close",
                "FUN_00114d60",
                "fread",
                "FUN_0011a480",
                "FUN_00108a2a",
                "bfd_scan_arch",
                "bfd_set_default_target",
                "memcpy",
                "ftell",
                "FUN_00113fb0",
                "textdomain",
                "filename_cmp",
                "htab_create_alloc",
                "xstrdup",
                "FUN_00113f50",
                "FUN_00119970",
                "strncasecmp",
                "getopt_long",
                "FUN_00108c86",
                "FUN_00114c20",
                "FUN_00114c80",
                "xcalloc",
                "htab_find_slot",
                "FUN_0011a390"
            ],
            "calling": [
                "entry"
            ],
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_00127600 = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  DAT_00127a48 = 0;\n  DAT_00127a44 = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    print_error_and_exit_00119dd0(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = DAT_00127600;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    print_error_and_exit_00119dd0(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = _DAT_001264c0;\n  if ((int)_DAT_001264c0 < 0) {\n    sVar15 = strlen(DAT_00127600);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  _DAT_001264c0 = uVar10;\n  DAT_00127a18 = create_hash_table_00113f20();\n  DAT_00127a10 = create_hash_table_00113f20();\n  DAT_00127a28 = create_hash_table_00113f20();\n  DAT_00127a08 = create_hash_table_00113f20();\n  DAT_00127a00 = create_hash_table_00113f20();\n  DAT_001279f8 = create_hash_table_00113f20();\n  DAT_001279f0 = create_hash_table_00113f20();\n  DAT_001278f0 = htab_create_alloc(0x10,hash_string_00108800,compare_strings_00108898);\n  DAT_001278e8 = create_hash_table_00113f20();\n  puVar6 = PTR_DAT_001264e0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = execute_functions_0011a390;\n  }\n  if (0x1f < *(int *)(PTR_DAT_001264e0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    PTR_DAT_001264e0 = (undefined *)puVar20;\n  }\n  puVar6 = PTR_DAT_001264e0;\n  iVar11 = *(int *)(PTR_DAT_001264e0 + 8);\n  *(int *)(PTR_DAT_001264e0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = cleanup_hash_table_001054af;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (_DAT_001264c0 != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",\n                           &PTR_s_disable_deterministic_archives_00126500);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        _DAT_001264b0 = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        print_usage_00108a2a(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a28,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        DAT_00127a20 = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a18,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        process_and_compare_data_00114c20(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        DAT_00127a48 = 2;\n        break;\n      case 0x55:\n        _DAT_001264b0 = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        DAT_00127a44 = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        DAT_001279eb = 1;\n        break;\n      case 0x73:\n        DAT_00127a48 = 7;\n        break;\n      case 0x76:\n        DAT_001279e9 = 1;\n        break;\n      case 0x77:\n        DAT_001279ea = 1;\n        break;\n      case 0x78:\n        DAT_00127a44 = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        DAT_00127a38 = 1;\n        break;\n      case 0xb3:\n        process_data_00114190(_optarg,1,4);\n        break;\n      case 0xb5:\n        DAT_00127959 = 1;\n        break;\n      case 0xba:\n        DAT_00127a20 = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        DAT_00127a48 = 4;\n        break;\n      case 0xc6:\n        process_data_00114190(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        DAT_00127a48 = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (DAT_00127a48 < 8)) &&\n           ((-0xdaL >> ((byte)DAT_00127a48 & 0x3f) & 1U) == 0)) {\n          DAT_00127a20 = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          print_version_info_00119970(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (_DAT_001264b0 < 0) {\n          _DAT_001264b0 = 1;\n        }\n        if (((DAT_00127a48 | DAT_00127a44) == 0) &&\n           (lVar30 = htab_elements(DAT_00127a18), lVar30 == 0)) {\n          DAT_00127a48 = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        print_usage_00108a2a(_stderr,1);\n        unaff_R13 = (char *)&PTR_s_disable_deterministic_archives_00126500;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",\n                       &PTR_s_add_gnu_debuglink_00126900);\n  pFVar14 = _optarg;\n  uVar10 = DAT_00127908;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    print_bfd_header_info_001199d0();\n    return DAT_00127a40;\n  }\n  if ((char)local_110 != '\\0') {\n    print_version_info_00119970(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((DAT_00127a3c != 0) && (DAT_001264bc == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (DAT_00127a3c <= DAT_001264bc) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (DAT_00127a3c - DAT_001264bc < DAT_001264b8) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (_DAT_001264b0 < 0) {\n    _DAT_001264b0 = 1;\n  }\n  if ((DAT_00127a48 | DAT_00127a44) == 0) {\n    DAT_00127a48 = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = compare_strings_00113fb0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = extract_info_from_binary_00108c86(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = compare_strings_00113fb0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = extract_info_from_binary_00108c86(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (DAT_00126474 == -1) {\n        DAT_00126474 = (short)iVar11;\n      }\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)allocate_file_path_00114cf0(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  process_binary_file_00114690(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (DAT_00127a40 == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = copy_and_delete_file_00115970(__template,pcVar32,pcVar26,local_c8,DAT_001279eb);\n    DAT_00127a40 = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = DAT_00127900;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          print_error_message_00119ed0(uVar22,\"--change-section-vma\",uVar3,\n                       (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          print_error_message_00119ed0(uVar22,\"--change-section-lma\",uVar3,\n                       (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(DAT_00127970);\n  free(DAT_00127968);\n  free(DAT_00127960);\n  free(DAT_00127950);\n  free(DAT_00127948);\n  free(DAT_00127940);\n  free(DAT_00127938);\n  return DAT_00127a40;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = DAT_00127a40;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return DAT_00127a40;\n  }\n  lVar30 = get_file_information_00113f50(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    DAT_00127a40 = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)allocate_file_path_00114cf0(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        print_error_message_001126c0(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    DAT_00127a40 = 0;\n    process_binary_file_00114690(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (DAT_00127a40 == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = copy_and_delete_file_00115970(pFVar21,pFVar33,iVar13,local_c8,DAT_001279eb);\n      DAT_00127a40 = uVar10;\n      if (iVar11 != 0) {\n        DAT_00127a40 = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  DAT_00127a48 = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        check_symbol_redefinition_00108d9a(pFVar14,unaff_R13,\n                     (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      print_error_and_exit_00119dd0(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    check_symbol_redefinition_00108d9a(pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13))\n    ;\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = parse_section_flags_00113fe0(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)DAT_001278f8;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_and_exit_00119dd0(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    print_usage_00108916(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          print_error_and_exit_00119dd0(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)DAT_001278f8;\n    DAT_001278f8 = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    _DAT_001264b0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    print_usage_00108916(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a28,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    DAT_00127a20 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a18,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    process_and_compare_data_00114c20(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    DAT_00127a48 = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    _DAT_001264b0 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    DAT_00127a44 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264bc = (int)lVar30;\n    if (DAT_001264bc < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    DAT_00127a48 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      DAT_00127a3c = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      DAT_00127a3c = (int)lVar30;\n      if (DAT_00127a3c < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    process_data_00114190(_optarg,1,2);\n    DAT_00127a39 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    DAT_001279eb = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    DAT_001279e9 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    DAT_001279ea = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    DAT_00127a44 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    DAT_001279e0 = parse_parameter_00114c80(_optarg,DAT_001279e0,\"--add-section\");\n    read_and_store_file_contents_00114d60(DAT_001279e0);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    DAT_001264b4 = 1;\n    DAT_00127a30 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = copy_string_0011a480(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = copy_string_0011a480(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            print_error_message_00119ed0(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            print_error_and_exit_00119dd0(uVar24,\n                         \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                        );\n          }\n          uVar24 = copy_string_0011a480(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = DAT_001279c8;\n        bVar39 = DAT_001279c8 == (undefined8 *)0x0;\n        DAT_001279c8 = puVar20;\n        if (bVar39) {\n          PTR_DAT_001275c0 = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)PTR_DAT_001275c0 = puVar20;\n    PTR_DAT_001275c0 = (undefined *)puVar20;\nLAB_00117e65:\n    DAT_001279c0 = DAT_001279c0 + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    DAT_00127930 = strtoul((char *)_optarg,(char **)0x0,0);\n    if (DAT_00127930 == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    _DAT_001279b0 = check_and_print_error_00119940(_optarg,\"--change-addresses\");\n    DAT_001279b8 = _DAT_001279b0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    DAT_001279a8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = process_data_00114190(pcVar32,1,uVar12);\n    lVar17 = check_and_print_error_00119940((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    DAT_001279b8 = check_and_print_error_00119940(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      DAT_001279a4 = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    DAT_001279a0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    DAT_001279a4 = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    DAT_001279d0 = parse_parameter_00114c80(_optarg,DAT_001279d0,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      DAT_0012799c = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      DAT_0012799c = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    DAT_00127a48 = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    DAT_0012790c = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    DAT_001264a8 = check_and_print_error_00119940(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)check_and_print_error_00119940(_optarg,\"--gap-fill\");\n    DAT_00127999 = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      print_error_message_00119ed0(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    DAT_00127998 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a00,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    read_and_process_file_00114460(_optarg,DAT_00127a00,&DAT_00127948);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    DAT_001264a0 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126498 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          print_error_message_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    print_error_message_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    DAT_00126490 = check_and_print_error_00119940(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    DAT_00127910 = DAT_00127910 | 0x100;\n    DAT_00127914 = DAT_00127914 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264b8 = (int)lVar30;\n    if (DAT_001264b8 < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    read_and_process_file_00114460(_optarg,DAT_001279f8,&DAT_00127940);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    DAT_00127a38 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    process_data_00114190(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    read_and_process_file_00114460(_optarg,DAT_00127a28,&DAT_00127960);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    DAT_00127959 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    DAT_00127958 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    read_and_process_file_00114460(_optarg,DAT_00127a08,&DAT_00127950);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    DAT_00127a20 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    DAT_00127a48 = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    DAT_00127990 = check_and_print_error_00119940(_optarg,\"--pad-to\");\n    DAT_00127989 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    DAT_00127918 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    DAT_00127920 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    DAT_00127928 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    DAT_00127914 = DAT_00127914 | 0x100;\n    DAT_00127910 = DAT_00127910 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    DAT_00127914 = DAT_00127914 | 0x80;\n    DAT_00127910 = DAT_00127910 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    check_symbol_redefinition_00108d9a(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    DAT_00127988 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    process_data_00114190(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)DAT_00127908;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_00127908 = (uint)uVar27;\n    if (((int)DAT_00127908 < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != DAT_00127908) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      print_error_message_00119ed0(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    DAT_00126488 = check_and_print_error_00119940(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)process_data_00114190(pcVar32,1,0x80);\n    uVar12 = parse_section_flags_00113fe0((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = process_data_00114190(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    _DAT_00127980 = check_and_print_error_00119940(_optarg,\"--set-start\");\n    DAT_00127978 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = check_and_print_error_00119940(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    DAT_00126480 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126478 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          print_error_message_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    print_error_message_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    DAT_00127a48 = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    read_and_process_file_00114460(_optarg,DAT_00127a18,&DAT_00127970);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    DAT_00127a48 = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a10,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    read_and_process_file_00114460(_optarg,DAT_00127a10,&DAT_00127968);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      DAT_00126472 = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        DAT_00126470 = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        print_error_message_00119ed0(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      DAT_00126474 = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&PTR_s_native_00125ca0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0 + (long)unaff_R13 * 2;\n      DAT_00126474 = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    DAT_001279d8 = parse_parameter_00114c80(_optarg,DAT_001279d8,\"--update-section\");\n    read_and_store_file_contents_00114d60(DAT_001279d8);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = check_and_print_error_00119940(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    DAT_001279e8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    read_and_process_file_00114460(_optarg,DAT_001279f0,&DAT_00127938);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    DAT_00127910 = DAT_00127910 | 0x80;\n    DAT_00127914 = DAT_00127914 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  print_error_and_exit_00119dd0(uVar24,pFVar14);\n}\n\n",
            "current_name": "FUNC_00116b90",
            "entrypoint": "0x00116b90",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00119940": {
            "additional_data": {
                "FUN_00119940": {
                    "1": "verify_and_print_error",
                    "13": "validate_and_print_error",
                    "14": "check_and_print_error"
                },
                "local_20": {
                    "1": "scanned_results",
                    "2": "scanned_result",
                    "3": "scanned_values",
                    "5": "scanned_address",
                    "8": "scan_result"
                },
                "param_1": {
                    "1": "input_number",
                    "13": "address",
                    "2": "vma",
                    "4": "input_value",
                    "6": "input_param"
                },
                "param_2": {
                    "1": "data",
                    "10": "message",
                    "2": "filename",
                    "9": "error_message"
                },
                "uVar1": {
                    "1": "localized_error",
                    "14": "error_message",
                    "2": "translated_error_message",
                    "3": "translated_error"
                }
            },
            "called": [
                "FUN_00104920",
                "bfd_scan_vma"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid check_and_print_error_00119940(undefined8 address,undefined8 message)\n\n{\n  undefined8 error_message;\n  char *scan_result [2];\n  \n  bfd_scan_vma(address,scan_result,0);\n  if (*scan_result[0] == '\\0') {\n    return;\n  }\n  error_message = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  print_error_and_exit_00119dd0(error_message,message,address);\n}\n\n",
            "current_name": "check_and_print_error_00119940",
            "entrypoint": "0x00119940",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119940": "check_and_print_error_00119940",
                "local_20": "scan_result",
                "param_1": "address",
                "param_2": "message",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119970": {
            "additional_data": {
                "FUN_00119970": {
                    "1": "print_version_information",
                    "18": "print_version_info",
                    "2": "print_binutils_version",
                    "4": "print_binutils_info"
                },
                "param_1": {
                    "1": "compiler_name",
                    "16": "version",
                    "2": "tool_name",
                    "3": "program_name",
                    "9": "version_string"
                },
                "pcVar1": {
                    "1": "copyright_string",
                    "2": "copyright_text",
                    "3": "license_text",
                    "5": "copyright_msg",
                    "6": "copyright_message",
                    "7": "message"
                }
            },
            "called": [
                "printf",
                "dcgettext",
                "exit"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid print_version_info_00119970(undefined8 version)\n\n{\n  char *message;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  message = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(message);\n  message = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(message);\n                    \n  exit(0);\n}\n\n",
            "current_name": "print_version_info_00119970",
            "entrypoint": "0x00119970",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119970": "print_version_info_00119970",
                "param_1": "version",
                "pcVar1": "message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001199d0": {
            "additional_data": {
                "DAT_001278e0": {
                    "1": "tmp_directory_cache"
                },
                "FUN_001199d0": {
                    "1": "print_binary_information",
                    "2": "print_binary_header_info",
                    "4": "print_bfd_header_version",
                    "6": "print_bfd_header_info"
                },
                "__errno_location": {
                    "1": "get_error_number_location"
                },
                "_stderr": {
                    "1": "stderr_stream"
                },
                "_stdout": {
                    "1": "stdout_stream"
                },
                "abort": {
                    "1": "terminate_program"
                },
                "bfd_iterate_over_targets": {
                    "1": "iterate_over_bfd_targets"
                },
                "close": {
                    "1": "close_file_descriptor"
                },
                "fprintf": {
                    "1": "print_to_error_file"
                },
                "fputs": {
                    "1": "write_string_to_file"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "getenv": {
                    "1": "get_environment_variable"
                },
                "iVar1": {
                    "1": "min_column_count",
                    "2": "screen_width",
                    "3": "num_columns",
                    "4": "column_width",
                    "5": "max_columns",
                    "6": "columns"
                },
                "iVar10": {
                    "1": "length_architecture"
                },
                "iVar11": {
                    "1": "temp_file_descriptor"
                },
                "iVar13": {
                    "1": "max_length"
                },
                "iVar14": {
                    "1": "close_result"
                },
                "iVar2": {
                    "1": "arch_index2",
                    "2": "index",
                    "4": "arch_index",
                    "5": "target_index"
                },
                "iVar3": {
                    "1": "arch_compare_result",
                    "2": "arch_index",
                    "3": "strcmp_result",
                    "4": "comparison_result"
                },
                "iVar9": {
                    "1": "target_iterator",
                    "2": "arch_mach_index",
                    "7": "arch_index"
                },
                "lVar10": {
                    "1": "counter1",
                    "2": "target_index"
                },
                "lVar11": {
                    "1": "current_arch",
                    "2": "start_index"
                },
                "local_70": {
                    "1": "loop_index",
                    "2": "arch_mach_counter",
                    "3": "arch_index"
                },
                "mkstemps": {
                    "1": "create_temp_file"
                },
                "pcVar4": {
                    "1": "header_msg",
                    "12": "header_format",
                    "2": "header_message",
                    "3": "header_format_string"
                },
                "pcVar6": {
                    "1": "temporary_dir",
                    "2": "temp_path",
                    "3": "temporary_directory",
                    "4": "temp_directory",
                    "8": "temp_file_path"
                },
                "piVar8": {
                    "1": "error_num",
                    "14": "error_number",
                    "2": "error_pointer",
                    "3": "error_location",
                    "4": "error_code"
                },
                "ppcVar12": {
                    "1": "arch_info",
                    "2": "architectures",
                    "3": "arch_mach_strings",
                    "6": "arch_mach_array"
                },
                "putc": {
                    "1": "write_character_to_file"
                },
                "sVar5": {
                    "1": "header_msg_length",
                    "2": "header_format_length",
                    "3": "header_version_length",
                    "4": "string_length",
                    "5": "header_length"
                },
                "sVar6": {
                    "1": "temp_path_length"
                },
                "strcmp": {
                    "1": "compare_strings"
                },
                "strcpy": {
                    "1": "copy_string"
                },
                "strerror": {
                    "1": "get_error_message"
                },
                "strtol": {
                    "1": "string_to_long"
                },
                "uVar13": {
                    "1": "maximum_string_length",
                    "10": "max_arch_length",
                    "3": "max_length",
                    "7": "max_arch_mach_length"
                },
                "uVar14": {
                    "1": "current_arch_length",
                    "2": "arch_name_length",
                    "5": "arch_length",
                    "7": "string_length"
                },
                "uVar7": {
                    "1": "permission_check",
                    "3": "permission",
                    "5": "permission_status",
                    "6": "permission_check_result",
                    "8": "permission_result"
                },
                "unlink": {
                    "1": "delete_file"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "strerror",
                "FUN_00119f70",
                "xmalloc",
                "unlink",
                "abort",
                "printf",
                "free",
                "dcgettext",
                "fprintf",
                "bfd_printable_arch_mach",
                "strcpy",
                "strlen",
                "close",
                "__errno_location",
                "FUN_0011283f",
                "bfd_iterate_over_targets",
                "getenv",
                "FUN_00104943",
                "mkstemps"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nvoid print_bfd_header_info_001199d0(void)\n\n{\n  int columns;\n  int target_index;\n  int comparison_result;\n  char *header_format;\n  size_t header_length;\n  char *temp_file_path;\n  undefined8 permission_result;\n  int *error_number;\n  int arch_index;\n  long directory_length;\n  long arch_mach_index;\n  char **arch_mach_array;\n  uint max_arch_length;\n  ulong string_length;\n  int arch_index;\n  \n  header_format = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(header_format,\"(GNU Binutils for Debian) 2.40\");\n  if (DAT_001278e0 == (char *)0x0) {\n    header_format = getenv(\"TMPDIR\");\n    permission_result = check_directory_permission_0011283f(header_format,0);\n    header_format = getenv(\"TMP\");\n    permission_result = check_directory_permission_0011283f(header_format,permission_result);\n    header_format = getenv(\"TEMP\");\n    permission_result = check_directory_permission_0011283f(header_format,permission_result);\n    permission_result = check_directory_permission_0011283f(&DAT_0011b39a,permission_result);\n    permission_result = check_directory_permission_0011283f(\"/var/tmp\",permission_result);\n    header_format = (char *)check_directory_permission_0011283f(&DAT_00120324,permission_result);\n    if (header_format == (char *)0x0) {\n      header_format = \".\";\n    }\n    header_length = strlen(header_format);\n    temp_file_path = (char *)xmalloc((int)header_length + 2);\n    DAT_001278e0 = strcpy(temp_file_path,header_format);\n    DAT_001278e0[header_length & 0xffffffff] = '/';\n    DAT_001278e0[(int)header_length + 1] = '\\0';\n  }\n  header_format = DAT_001278e0;\n  header_length = strlen(DAT_001278e0);\n  directory_length = (long)(int)header_length;\n  temp_file_path = (char *)xmalloc(directory_length + 9);\n  strcpy(temp_file_path,header_format);\n  *(undefined2 *)(temp_file_path + directory_length) = 0x6363;\n  *(undefined4 *)(temp_file_path + directory_length + 2) = 0x58585858;\n  *(undefined4 *)((long)(temp_file_path + directory_length + 2) + 3) = 0x585858;\n  temp_file_path[directory_length + 8] = '\\0';\n  target_index = mkstemps(temp_file_path,0);\n  if (target_index == -1) {\n    error_number = __errno_location();\n    temp_file_path = strerror(*error_number);\n    fprintf(error_file,\"Cannot create temporary file in %s: %s\\n\",header_format,temp_file_path);\n                    \n    abort();\n  }\n  target_index = close_file_descriptor(target_index);\n  if (target_index != 0) {\n                    \n    abort();\n  }\n  max_arch_length = 0;\n  target_index = 2;\n  bfd_iterate_over_targets(process_header_00119f70);\n  unlink(temp_file_path);\n  free(temp_file_path);\n  arch_index = 0;\n  do {\n    header_format = (char *)bfd_printable_arch_mach(target_index);\n    header_length = strlen(header_format);\n    if ((int)max_arch_length < (int)(uint)header_length) {\n      max_arch_length = (uint)header_length;\n    }\n    target_index = target_index + 1;\n  } while (target_index != 0x57);\n  header_format = getenv(\"COLUMNS\");\n  target_index = arch_index;\n  if (header_format != (char *)0x0) {\n    directory_length = strtol(header_format,(char **)0x0,10);\n    columns = (int)directory_length;\n    if (columns != 0) goto LAB_00119b11;\n  }\n  columns = 0x50;\nLAB_00119b11:\n  do {\n    arch_index = target_index;\n    if (-1 < arch_index) {\n      return;\n    }\n    arch_mach_index = (long)arch_index;\n    arch_index = (columns - max_arch_length) + -1;\n    directory_length = arch_mach_index;\n    do {\n      target_index = (int)directory_length;\n      if (-1 < target_index) break;\n      header_length = strlen(*(char **)(directory_length * 0x60));\n      directory_length = directory_length + 1;\n      arch_index = (arch_index - (int)header_length) + -1;\n    } while (-1 < arch_index);\n    printf(\"\\n%*s\",(ulong)(max_arch_length + 1),&DAT_0011b4a1);\n    for (arch_mach_array = (char **)(arch_mach_index * 0x60);\n        ((ulong)(uint)(target_index - arch_index) + arch_mach_index) * 0x60 - (long)arch_mach_array != 0;\n        arch_mach_array = arch_mach_array + 0xc) {\n      printf(\"%s \",*arch_mach_array);\n    }\n    arch_index = 2;\n    putc(10,standard_output_file);\n    do {\n      header_format = (char *)bfd_printable_arch_mach(arch_index,0);\n      comparison_result = strcmp(header_format,\"UNKNOWN!\");\n      if (comparison_result != 0) {\n        permission_result = bfd_printable_arch_mach(arch_index,0);\n        printf(\"%*s \",(ulong)max_arch_length,permission_result);\n        arch_mach_array = (char **)(arch_mach_index * 0x60);\n        comparison_result = arch_index;\n        while (target_index != comparison_result) {\n          if (*(char *)((long)arch_mach_array + (ulong)(arch_index - 2) + 8) == '\\0') {\n            header_length = strlen(*arch_mach_array);\n            for (string_length = header_length & 0xffffffff; (int)string_length != 0; string_length = (ulong)((int)string_length - 1)) {\n              putc(0x2d,standard_output_file);\n            }\n          }\n          else {\n            fputs(*arch_mach_array,standard_output_file);\n          }\n          comparison_result = comparison_result + 1;\n          if (target_index != comparison_result) {\n            putc(0x20,standard_output_file);\n          }\n          arch_mach_array = arch_mach_array + 0xc;\n        }\n        putc(10,standard_output_file);\n      }\n      arch_index = arch_index + 1;\n    } while (arch_index != 0x57);\n  } while( true );\n}\n\n",
            "current_name": "print_bfd_header_info_001199d0",
            "entrypoint": "0x001199d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001199d0": "print_bfd_header_info_001199d0",
                "__errno_location": "get_error_number_location",
                "_stderr": "error_file",
                "_stdout": "standard_output_file",
                "abort": "terminate_program",
                "bfd_iterate_over_targets": "iterate_over_bfd_targets",
                "close": "close_file_descriptor",
                "fprintf": "print_to_error_file",
                "fputs": "write_string_to_file",
                "free": "deallocate_memory",
                "getenv": "get_environment_variable",
                "iVar1": "columns",
                "iVar2": "target_index",
                "iVar3": "comparison_result",
                "iVar9": "arch_index",
                "lVar10": "directory_length",
                "lVar11": "arch_mach_index",
                "local_70": "arch_index",
                "mkstemps": "create_temp_file",
                "pcVar4": "header_format",
                "pcVar6": "temp_file_path",
                "piVar8": "error_number",
                "ppcVar12": "arch_mach_array",
                "putc": "write_character_to_file",
                "sVar5": "header_length",
                "strcmp": "compare_strings",
                "strcpy": "copy_string",
                "strerror": "get_error_message",
                "strtol": "string_to_long",
                "uVar13": "max_arch_length",
                "uVar14": "string_length",
                "uVar7": "permission_result",
                "unlink": "delete_file",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119dd0": {
            "additional_data": {
                "FUN_00119dd0": {
                    "1": "print_exit_error",
                    "16": "print_error_and_exit",
                    "2": "print_and_exit_on_error",
                    "3": "print_and_exit",
                    "9": "print_error_message_and_exit"
                },
                "in_AL": {
                    "1": "check_error",
                    "10": "flag",
                    "4": "is_error",
                    "6": "condition"
                },
                "local_18": {
                    "1": "local_param_8",
                    "2": "local_18",
                    "3": "param8",
                    "4": "param_8_copy",
                    "6": "param8_copy"
                },
                "local_28": {
                    "1": "error_code7_cpy",
                    "2": "local_28",
                    "3": "param7",
                    "4": "param_7",
                    "6": "param7_copy"
                },
                "local_38": {
                    "1": "local_6",
                    "2": "error_code_6",
                    "3": "local_param6",
                    "4": "param_6_copy",
                    "6": "param6_copy"
                },
                "local_48": {
                    "1": "error_code5_cpy",
                    "2": "local_48",
                    "3": "local_param5",
                    "4": "param_5",
                    "6": "param5_copy"
                },
                "local_58": {
                    "1": "local_param_4",
                    "2": "local_58",
                    "3": "param4",
                    "4": "param_4_copy",
                    "6": "param4_copy"
                },
                "local_68": {
                    "1": "message2_copy",
                    "2": "error_code_3",
                    "3": "param3",
                    "4": "param_3",
                    "6": "param3_copy"
                },
                "local_78": {
                    "1": "local_2",
                    "2": "local_78",
                    "3": "param2",
                    "4": "param_2_copy",
                    "5": "param2_copy"
                },
                "local_88": {
                    "1": "error_code_local",
                    "2": "local_error_code",
                    "3": "param_1_copy",
                    "4": "param_1",
                    "7": "error_code_copy"
                },
                "local_90": {
                    "1": "param_10",
                    "2": "local_param14",
                    "5": "param_14_copy",
                    "7": "param_14"
                },
                "local_98": {
                    "1": "param14",
                    "2": "param13",
                    "5": "param_13_copy",
                    "7": "param13_copy"
                },
                "local_a0": {
                    "1": "param_12_new",
                    "2": "param12",
                    "5": "param_12_copy",
                    "7": "param12_copy"
                },
                "local_a8": {
                    "1": "buffer_param11",
                    "2": "local_param11",
                    "5": "param_11_copy",
                    "7": "param11_copy"
                },
                "local_b0": {
                    "1": "param_10_new",
                    "2": "local_param10",
                    "5": "param_10_copy",
                    "7": "param_10"
                },
                "local_b8": {
                    "1": "temp_buffer",
                    "4": "local_buffer",
                    "5": "error_buffer",
                    "6": "local_array"
                },
                "local_c8": {
                    "1": "temp_buffer",
                    "20": "local_buffer",
                    "4": "buffer"
                },
                "local_d0": {
                    "1": "local_pointer1",
                    "13": "buffer",
                    "2": "stack_pointer",
                    "3": "buffer_pointer",
                    "5": "buffer_ptr"
                },
                "local_d4": {
                    "1": "local_var",
                    "2": "length",
                    "3": "buffer_size",
                    "4": "buffer_length"
                },
                "local_d8": {
                    "1": "local_size",
                    "14": "buffer_size",
                    "2": "num_bytes",
                    "3": "stack_size",
                    "5": "size"
                },
                "param_1": {
                    "1": "error_code1",
                    "2": "error_code_1",
                    "26": "error_code"
                },
                "param_10": {
                    "1": "param_10_new",
                    "10": "param_10",
                    "15": "param10",
                    "2": "value1"
                },
                "param_11": {
                    "1": "param_11_new",
                    "11": "param_11",
                    "15": "param11",
                    "2": "value2"
                },
                "param_12": {
                    "1": "param_12_new",
                    "11": "param_12",
                    "15": "param12",
                    "2": "value3"
                },
                "param_13": {
                    "1": "param_13_new",
                    "11": "param_13",
                    "15": "param13",
                    "2": "value4"
                },
                "param_14": {
                    "1": "param_14_new",
                    "11": "param_14",
                    "15": "param14",
                    "2": "value5"
                },
                "param_2": {
                    "1": "error_code2",
                    "12": "param2",
                    "2": "error_code_2",
                    "8": "param_2"
                },
                "param_3": {
                    "1": "message2",
                    "14": "param3",
                    "2": "error_code_3",
                    "8": "param_3"
                },
                "param_4": {
                    "1": "error_code4",
                    "14": "param4",
                    "2": "error_code_4",
                    "8": "param_4"
                },
                "param_5": {
                    "1": "arg5",
                    "14": "param5",
                    "2": "error_code_5",
                    "8": "param_5"
                },
                "param_6": {
                    "1": "param_5",
                    "14": "param6",
                    "2": "error_code_6",
                    "8": "param_6"
                },
                "param_7": {
                    "1": "error_code7",
                    "14": "param7",
                    "2": "error_code_7",
                    "8": "param_7"
                },
                "param_8": {
                    "1": "data_6",
                    "14": "param8",
                    "2": "error_code_8",
                    "8": "param_8"
                },
                "param_9": {
                    "1": "error_message_ptr",
                    "2": "param_9",
                    "23": "error_message",
                    "3": "message"
                },
                "print_error_message_00119e70": {
                    "2": "print_error_message"
                },
                "xexit": {
                    "1": "exit_program"
                }
            },
            "called": [
                "FUN_00119e70",
                "xexit"
            ],
            "calling": [
                "FUN_00104920",
                "FUN_0010827b",
                "FUN_00114460",
                "FUN_00114dc7",
                "FUN_00116b90",
                "FUN_0010543c",
                "FUN_00114190",
                "FUN_0010554f",
                "FUN_00104ad6",
                "FUN_00114690",
                "FUN_00108d9a",
                "FUN_0010da0b",
                "FUN_001053b5",
                "FUN_00108808",
                "FUN_001083de",
                "FUN_00115b70"
            ],
            "code": "\nvoid print_error_and_exit_00119dd0(undefined4 error_code,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 error_message,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 buffer_size;\n  undefined4 buffer_length;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_array [8];\n  undefined8 param_10;\n  undefined8 param_11;\n  undefined8 param_12;\n  undefined8 param_13;\n  undefined8 param_14;\n  undefined4 error_code_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 param5_copy;\n  undefined4 param6_copy;\n  undefined4 param7_copy;\n  undefined4 param8_copy;\n  \n  if (flag != '\\0') {\n    error_code_copy = error_code;\n    param2_copy = param2;\n    param3_copy = param3;\n    param4_copy = param4;\n    param5_copy = param5;\n    param6_copy = param6;\n    param7_copy = param7;\n    param8_copy = param8;\n  }\n  buffer = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer = local_array;\n  buffer_length = 0x30;\n  param_10 = param10;\n  param_11 = param11;\n  param_12 = param12;\n  param_13 = param13;\n  param_14 = param14;\n  print_error_message(error_message,&buffer_size);\n                    \n  xexit(1);\n}\n\n",
            "current_name": "print_error_and_exit_00119dd0",
            "entrypoint": "0x00119dd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119dd0": "print_error_and_exit_00119dd0",
                "in_AL": "flag",
                "local_18": "param8_copy",
                "local_28": "param7_copy",
                "local_38": "param6_copy",
                "local_48": "param5_copy",
                "local_58": "param4_copy",
                "local_68": "param3_copy",
                "local_78": "param2_copy",
                "local_88": "error_code_copy",
                "local_90": "param_14",
                "local_98": "param_13",
                "local_a0": "param_12",
                "local_a8": "param_11",
                "local_b0": "param_10",
                "local_b8": "local_array",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "buffer_length",
                "local_d8": "buffer_size",
                "param_1": "error_code",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "error_message",
                "print_error_message_00119e70": "print_error_message",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119e70": {
            "additional_data": {
                "10": {
                    "1": "line_break"
                },
                "DAT_00127600": {
                    "1": "error_message_string"
                },
                "FUN_00119e70": {
                    "1": "print_formatted_message",
                    "28": "print_error_message"
                },
                "__gnuc_va_list": {
                    "1": "variadic_arguments",
                    "2": "variable_arguments"
                },
                "__gnuc_va_list param_2": {
                    "1": "additional_arguments"
                },
                "_stderr": {
                    "1": "error_stream",
                    "17": "standard_error",
                    "2": "stderr",
                    "3": "error_output"
                },
                "_stdout": {
                    "1": "stdlib_stdout",
                    "18": "standard_output",
                    "2": "stdout_stream"
                },
                "fflush": {
                    "1": "clear_standard_output_buffer",
                    "2": "flush_standard_output"
                },
                "fprintf": {
                    "1": "print_to_error",
                    "2": "print_to_standard_error"
                },
                "param_1": {
                    "1": "message_format",
                    "10": "message",
                    "15": "error_message",
                    "5": "format_string"
                },
                "param_2": {
                    "1": "va_arguments",
                    "11": "args",
                    "12": "arguments"
                },
                "putc": {
                    "1": "put_character"
                },
                "stderr": {
                    "1": "error_stream"
                },
                "stdout": {
                    "1": "standard_output"
                },
                "vfprintf": {
                    "1": "print_formatted_to_standard_error"
                }
            },
            "called": [
                "vfprintf",
                "fflush",
                "putc",
                "fprintf"
            ],
            "calling": [
                "FUN_00119ed0",
                "FUN_00119dd0"
            ],
            "code": "\n\n\nvoid print_error_message_00119e70(char *error_message,variable_arguments arguments)\n\n{\n  fflush(standard_output);\n  fprintf(standard_error,\"%s: \",DAT_00127600);\n  vfprintf(standard_error,error_message,arguments);\n  putc(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_error_message_00119e70",
            "entrypoint": "0x00119e70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "__gnuc_va_list": "variable_arguments",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "fflush": "flush_standard_output",
                "fprintf": "print_to_standard_error",
                "param_1": "error_message",
                "param_2": "arguments",
                "putc": "put_character",
                "stderr": "standard_error",
                "stdout": "standard_output",
                "vfprintf": "print_formatted_to_standard_error"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119ed0": {
            "additional_data": {
                "FUN_00119ed0": {
                    "1": "print_error_and_set_parameters",
                    "25": "print_error_message",
                    "4": "print_error"
                },
                "in_AL": {
                    "1": "some_flag",
                    "16": "flag",
                    "2": "input_flag",
                    "3": "is_error",
                    "4": "condition"
                },
                "local_18": {
                    "1": "local_param_8",
                    "2": "param_8",
                    "3": "param_8_copy",
                    "7": "param8",
                    "8": "local_param8"
                },
                "local_28": {
                    "1": "stored_param7",
                    "2": "param_7",
                    "3": "param_7_copy",
                    "7": "param7",
                    "8": "local_param7"
                },
                "local_38": {
                    "1": "stored_param6",
                    "2": "param_6",
                    "3": "param_6_copy",
                    "7": "param6_copy",
                    "8": "local_param6"
                },
                "local_48": {
                    "1": "stored_param5",
                    "2": "param_5",
                    "3": "param_5_copy",
                    "7": "param5_copy",
                    "8": "local_param5"
                },
                "local_58": {
                    "1": "local_param_4",
                    "2": "param_4",
                    "3": "param_4_copy",
                    "7": "param4_copy",
                    "8": "local_param4"
                },
                "local_68": {
                    "1": "assigned_error_data2",
                    "2": "param_3",
                    "3": "param_3_copy",
                    "7": "param3",
                    "8": "local_param3"
                },
                "local_78": {
                    "1": "message_code",
                    "2": "param_2",
                    "3": "param_2_copy",
                    "6": "param2",
                    "7": "param2_copy",
                    "8": "local_param2"
                },
                "local_88": {
                    "1": "param1",
                    "2": "local_error_code",
                    "3": "param_1_copy",
                    "6": "error_code",
                    "7": "error_code_copy"
                },
                "local_90": {
                    "1": "arg5_output",
                    "2": "param_14",
                    "3": "param_14_copy",
                    "5": "param14",
                    "7": "param14_copy"
                },
                "local_98": {
                    "1": "local13",
                    "2": "param_13",
                    "3": "param_13_copy",
                    "5": "param13",
                    "7": "param13_copy"
                },
                "local_a0": {
                    "1": "local_param_12",
                    "2": "param_12",
                    "3": "param_12_copy",
                    "5": "param12",
                    "7": "param12_copy"
                },
                "local_a8": {
                    "1": "local_variable5",
                    "2": "param_11",
                    "3": "param_11_copy",
                    "5": "local_param11",
                    "7": "param11_copy"
                },
                "local_b0": {
                    "1": "local_data1",
                    "2": "param_10",
                    "3": "param_10_copy",
                    "5": "local_param10",
                    "7": "param10_copy"
                },
                "local_b8": {
                    "1": "local_array_data",
                    "2": "temporary_buffer",
                    "3": "temp_buffer",
                    "5": "error_buffer",
                    "7": "local_buffer"
                },
                "local_c8": {
                    "1": "local_variable3",
                    "21": "local_buffer",
                    "4": "buffer"
                },
                "local_d0": {
                    "1": "pointer_to_error",
                    "14": "buffer",
                    "2": "buffer_pointer",
                    "4": "buffer_ptr"
                },
                "local_d4": {
                    "1": "buffer_length",
                    "2": "local_variable1",
                    "6": "length"
                },
                "local_d8": {
                    "1": "local_size",
                    "16": "buffer_size",
                    "2": "length",
                    "8": "size"
                },
                "param_1": {
                    "1": "error_message_1",
                    "30": "error_code"
                },
                "param_10": {
                    "1": "data1",
                    "19": "param10",
                    "6": "param_10"
                },
                "param_11": {
                    "1": "param9",
                    "19": "param11",
                    "6": "param_11"
                },
                "param_12": {
                    "1": "local12",
                    "19": "param12",
                    "6": "param_12"
                },
                "param_13": {
                    "1": "data4",
                    "19": "param13",
                    "6": "param_13"
                },
                "param_14": {
                    "1": "arg5",
                    "19": "param14",
                    "6": "param_14"
                },
                "param_2": {
                    "1": "message_code",
                    "22": "param2",
                    "5": "param_2"
                },
                "param_3": {
                    "1": "error_message_3",
                    "23": "param3",
                    "5": "param_3"
                },
                "param_4": {
                    "1": "param3",
                    "23": "param4",
                    "5": "param_4"
                },
                "param_5": {
                    "1": "error_message_5",
                    "23": "param5",
                    "5": "param_5"
                },
                "param_6": {
                    "1": "error_message_6",
                    "23": "param6",
                    "5": "param_6"
                },
                "param_7": {
                    "1": "error_data6",
                    "23": "param7",
                    "5": "param_7"
                },
                "param_8": {
                    "1": "param7",
                    "23": "param8",
                    "5": "param_8"
                },
                "param_9": {
                    "1": "error_code",
                    "20": "error_message",
                    "4": "param9",
                    "5": "message"
                },
                "print_error_message_00119e70": {
                    "1": "print_error_message_helper"
                }
            },
            "called": [
                "FUN_00119e70"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ba08",
                "FUN_00108200",
                "FUN_0010b800",
                "FUN_00116b90",
                "FUN_00107880",
                "FUN_00113f50",
                "FUN_00105828",
                "FUN_0010554f",
                "FUN_0010e2f0",
                "FUN_00114e50",
                "FUN_00104ad6",
                "FUN_00104cc1",
                "FUN_0010882c",
                "FUN_00114690",
                "FUN_001086af",
                "FUN_001163d0",
                "FUN_0010e07c",
                "FUN_0010e6a8",
                "FUN_00104966",
                "FUN_0011378f",
                "FUN_001152b6",
                "FUN_00108375",
                "FUN_00104ea2"
            ],
            "code": "\nvoid print_error_message_00119ed0(undefined4 error_code,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 error_message,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 buffer_size;\n  undefined4 length;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_buffer [8];\n  undefined8 param10_copy;\n  undefined8 param11_copy;\n  undefined8 param12_copy;\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 error_code_copy;\n  undefined4 local_param2;\n  undefined4 local_param3;\n  undefined4 local_param4;\n  undefined4 local_param5;\n  undefined4 local_param6;\n  undefined4 local_param7;\n  undefined4 local_param8;\n  \n  if (flag != '\\0') {\n    error_code_copy = error_code;\n    local_param2 = param2;\n    local_param3 = param3;\n    local_param4 = param4;\n    local_param5 = param5;\n    local_param6 = param6;\n    local_param7 = param7;\n    local_param8 = param8;\n  }\n  buffer = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer = local_buffer;\n  length = 0x30;\n  param10_copy = param10;\n  param11_copy = param11;\n  param12_copy = param12;\n  param13_copy = param13;\n  param14_copy = param14;\n  print_error_message_00119ed0_helper(error_message,&buffer_size);\n  return;\n}\n\n",
            "current_name": "print_error_message_00119ed0",
            "entrypoint": "0x00119ed0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119ed0": "print_error_message_00119ed0",
                "in_AL": "flag",
                "local_18": "local_param8",
                "local_28": "local_param7",
                "local_38": "local_param6",
                "local_48": "local_param5",
                "local_58": "local_param4",
                "local_68": "local_param3",
                "local_78": "local_param2",
                "local_88": "error_code_copy",
                "local_90": "param14_copy",
                "local_98": "param13_copy",
                "local_a0": "param12_copy",
                "local_a8": "param11_copy",
                "local_b0": "param10_copy",
                "local_b8": "local_buffer",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "length",
                "local_d8": "buffer_size",
                "param_1": "error_code",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "error_message",
                "print_error_message_00119e70": "print_error_message_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119f70": {
            "additional_data": {
                "FUN_00119f70": {
                    "1": "reverse_and_print_header",
                    "2": "process_binary",
                    "3": "process_header"
                },
                "__format": {
                    "1": "header_fmt",
                    "2": "format_str",
                    "25": "format_string"
                },
                "bfd_close_all_done": {
                    "1": "close_all_done",
                    "3": "close_file"
                },
                "bfd_get_error": {
                    "1": "get_bfd_error",
                    "2": "get_error_code"
                },
                "bfd_openw": {
                    "1": "open_file_write",
                    "2": "open_file"
                },
                "bfd_printable_arch_mach": {
                    "1": "get_arch_mach"
                },
                "bfd_set_format": {
                    "1": "set_output_format",
                    "4": "set_file_format"
                },
                "cVar2": {
                    "1": "char_val",
                    "2": "error_flag",
                    "3": "result",
                    "4": "success",
                    "6": "flag"
                },
                "dcgettext": {
                    "1": "translate_format"
                },
                "get_endianness_00114e00": {
                    "3": "get_endianness"
                },
                "iVar3": {
                    "1": "iteration_count",
                    "16": "index",
                    "2": "iteration",
                    "3": "counter"
                },
                "lVar6": {
                    "1": "size_1",
                    "2": "size1",
                    "4": "size",
                    "7": "allocated_size",
                    "9": "buffer_size"
                },
                "lVar8": {
                    "1": "buffer_ptr",
                    "2": "size2",
                    "3": "new_buffer",
                    "5": "allocated_memory",
                    "8": "realloc_result"
                },
                "param_1": {
                    "1": "data_header",
                    "10": "header",
                    "2": "header_info"
                },
                "param_2": {
                    "1": "file_info",
                    "2": "output_params",
                    "6": "output_data",
                    "7": "data"
                },
                "print_error_message_0011a110": {
                    "7": "print_error_message"
                },
                "printf": {
                    "1": "print_formatted"
                },
                "uVar1": {
                    "1": "endian_flag",
                    "2": "endianess_header",
                    "3": "header_value",
                    "4": "header_size",
                    "5": "status"
                },
                "uVar4": {
                    "1": "input_endianness",
                    "10": "endianness_header",
                    "2": "endian1",
                    "3": "header_endianness",
                    "7": "endianness_1"
                },
                "uVar5": {
                    "1": "header_endianness",
                    "10": "endianness_data",
                    "2": "endian2",
                    "3": "endianness2",
                    "7": "endianness_2"
                },
                "uVar7": {
                    "1": "input_data",
                    "2": "data",
                    "4": "header_data",
                    "6": "header",
                    "7": "header_value"
                }
            },
            "called": [
                "memset",
                "FUN_00114e00",
                "bfd_get_error",
                "FUN_001053d5",
                "FUN_0011a110",
                "printf",
                "dcgettext",
                "xrealloc",
                "bfd_set_format",
                "bfd_openw",
                "bfd_printable_arch_mach",
                "bfd_close_all_done"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\nundefined4 process_header_00119f70(undefined8 *header_data,undefined8 *data)\n\n{\n  undefined4 status;\n  char flag;\n  int index;\n  undefined8 endianness_header;\n  undefined8 endianness_data;\n  char *format_string;\n  long buffer_size;\n  undefined8 header_value;\n  long realloc_result;\n  \n  index = *(int *)((long)data + 0xc) + 1;\n  *(int *)((long)data + 0xc) = index;\n  if ((ulong)data[2] < (ulong)((long)index * 0x60)) {\n    buffer_size = 0x3000;\n    if (0x3f < index) {\n      buffer_size = (long)index * 0xc0;\n    }\n    realloc_result = xrealloc(data[3]);\n    data[3] = realloc_result;\n    memset((void *)(realloc_result + data[2]),0,buffer_size - data[2]);\n    data[2] = buffer_size;\n  }\n  status = *(undefined4 *)((long)header_data + 0xc);\n  *(undefined8 *)((long)*(int *)((long)data + 0xc) * 0x60 + data[3] + -0x60) = *header_data;\n  endianness_header = get_endianness(status);\n  endianness_data = get_endianness(*(undefined4 *)(header_data + 2));\n  header_value = *header_data;\n  format_string = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(format_string,header_value,endianness_data,endianness_header);\n  buffer_size = bfd_openw(*data,*header_data);\n  if (buffer_size == 0) {\n    print_error_message(*data);\n    *(undefined4 *)(data + 1) = 1;\n  }\n  else {\n    index = 2;\n    flag = bfd_set_format(buffer_size,1);\n    if (flag == '\\0') {\n      index = bfd_get_error();\n      if (index != 5) {\n        print_error_message(*header_data);\n        *(undefined4 *)(data + 1) = 1;\n      }\n    }\n    else {\n      do {\n        flag = (**(code **)(*(long *)(buffer_size + 8) + 0x2a0))(buffer_size,index,0);\n        if (flag != '\\0') {\n          header_value = bfd_printable_arch_mach(index,0);\n          printf(\"  %s\\n\",header_value);\n          *(undefined *)\n           ((long)*(int *)((long)data + 0xc) * 0x60 + data[3] + -0x58 + (ulong)(index - 2)) =\n               1;\n        }\n        index = index + 1;\n      } while (index != 0x57);\n    }\n    bfd_close_all_done(buffer_size);\n  }\n  return *(undefined4 *)(data + 1);\n}\n\n",
            "current_name": "process_header_00119f70",
            "entrypoint": "0x00119f70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119f70": "process_header_00119f70",
                "__format": "format_string",
                "bfd_close_all_done": "close_file",
                "bfd_get_error": "get_file_error",
                "bfd_openw": "open_output_file",
                "bfd_printable_arch_mach": "get_architecture",
                "bfd_set_format": "set_file_format",
                "cVar2": "flag",
                "dcgettext": "translate_format",
                "get_endianness_00114e00": "get_endianness",
                "iVar3": "index",
                "lVar6": "buffer_size",
                "lVar8": "realloc_result",
                "param_1": "header_data",
                "param_2": "data",
                "print_error_message_0011a110": "print_error_message",
                "printf": "print_formatted",
                "uVar1": "status",
                "uVar4": "endianness_header",
                "uVar5": "endianness_data",
                "uVar7": "header_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a0e0": {
            "additional_data": {
                "FUN_0011a0e0": {
                    "1": "get_temporary_directory",
                    "2": "generate_temporary_directory",
                    "22": "create_temp_directory",
                    "5": "create_temporary_directory"
                },
                "__template": {
                    "1": "directory_path",
                    "13": "file_path",
                    "2": "file_path_template",
                    "3": "temporary_directory_path",
                    "5": "temp_directory_path"
                },
                "pcVar1": {
                    "1": "generated_directory_path",
                    "2": "temp_directory_path",
                    "20": "result",
                    "5": "temp_directory"
                }
            },
            "called": [
                "FUN_00114cf0",
                "FUN_001081e9",
                "mkdtemp"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "code": "\nchar * create_temp_directory_0011a0e0(void)\n\n{\n  char *file_path;\n  char *result;\n  \n  file_path = (char *)allocate_file_path_00114cf0();\n  result = mkdtemp(file_path);\n  if (result == (char *)0x0) {\n    free(file_path);\n  }\n  return result;\n}\n\n",
            "current_name": "create_temp_directory_0011a0e0",
            "entrypoint": "0x0011a0e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a0e0": "create_temp_directory_0011a0e0",
                "__template": "file_path",
                "pcVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a110": {
            "additional_data": {
                "FUN_0011a110": {
                    "1": "print_bfd_error_message",
                    "2": "print_error_info",
                    "25": "print_error_message",
                    "3": "print_error"
                },
                "_stderr": {
                    "1": "standard_error_stream",
                    "2": "stderr",
                    "3": "standard_error"
                },
                "_stdout": {
                    "1": "standard_output_stream",
                    "2": "stdout",
                    "3": "standard_output"
                },
                "bfd_errmsg": {
                    "1": "get_error_message"
                },
                "bfd_get_error": {
                    "1": "get_bfd_error"
                },
                "dcgettext": {
                    "1": "get_description"
                },
                "fflush": {
                    "1": "flush_buffer"
                },
                "fprintf": {
                    "1": "print_formatted"
                },
                "iVar1": {
                    "1": "error_type",
                    "16": "error",
                    "2": "error_status",
                    "9": "error_code"
                },
                "in_R10": {
                    "1": "unknown_value",
                    "2": "additional_info",
                    "3": "unknown"
                },
                "param_1": {
                    "1": "file_name",
                    "11": "error_type",
                    "2": "file",
                    "6": "error_description",
                    "9": "error_message"
                },
                "uVar2": {
                    "1": "error_description",
                    "2": "error_string",
                    "21": "error_message",
                    "3": "error_message_text"
                }
            },
            "called": [
                "bfd_get_error",
                "bfd_errmsg",
                "FUN_0010871c"
            ],
            "calling": [
                "FUN_001053d5",
                "FUN_00119f70",
                "FUN_001083b7",
                "FUN_00115dc0",
                "FUN_00116030",
                "FUN_00104ea2"
            ],
            "code": "\n\n\nvoid print_error_message_0011a110(long error_type)\n\n{\n  int error;\n  undefined8 error_message;\n  undefined8 unknown;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg(error);\n  }\n  fflush(standard_output);\n  if (error_type != 0) {\n    fprintf(standard_error,\"%s: %s: %s\\n\",DAT_00127600,error_type,error_message,unknown);\n    return;\n  }\n  fprintf(standard_error,\"%s: %s\\n\",DAT_00127600,error_message,unknown);\n  return;\n}\n\n",
            "current_name": "print_error_message_0011a110",
            "entrypoint": "0x0011a110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a110": "print_error_message_0011a110",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "bfd_errmsg": "get_error_message",
                "bfd_get_error": "get_bfd_error",
                "dcgettext": "get_description",
                "fflush": "flush_output",
                "fprintf": "print_formatted",
                "iVar1": "error",
                "in_R10": "unknown",
                "param_1": "error_type",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a170": {
            "additional_data": {
                "FUN_0011a170": {
                    "1": "fnmatch_and_modify",
                    "15": "pattern_match",
                    "3": "check_fnmatch",
                    "9": "match_pattern"
                },
                "__pattern": {
                    "1": "pattern_pointer",
                    "14": "current_pattern",
                    "2": "pattern_start",
                    "5": "pattern"
                },
                "iVar1": {
                    "10": "result",
                    "20": "match_result"
                },
                "param_1": {
                    "1": "pattern_ptr",
                    "29": "pattern"
                },
                "param_2": {
                    "1": "pattern_2",
                    "10": "string",
                    "4": "text",
                    "5": "input",
                    "9": "input_string"
                }
            },
            "called": [
                "fnmatch"
            ],
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "code": "\nint pattern_match_0011a170(char **pattern,char **string)\n\n{\n  char *current_pattern;\n  int match_result;\n  \n  current_pattern = *pattern;\n  if (*current_pattern == '!') {\n    match_result = fnmatch(current_pattern + 1,*string,0);\n    if (match_result == 0) {\n      *(undefined *)(string + 1) = 0;\n      return match_result;\n    }\n  }\n  else {\n    match_result = fnmatch(current_pattern,*string,0);\n    if (match_result == 0) {\n      *(undefined *)(string + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "pattern_match_0011a170",
            "entrypoint": "0x0011a170",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a170": "pattern_match_0011a170",
                "__pattern": "current_pattern",
                "iVar1": "match_result",
                "param_1": "pattern",
                "param_2": "string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a1b0": {
            "additional_data": {
                "FUN_0011a1b0": {
                    "1": "compare_buffers",
                    "15": "compare_memory",
                    "2": "compare_records",
                    "3": "compare_memory_blocks",
                    "4": "compare_memory_regions"
                },
                "auVar5": {
                    "1": "return_val",
                    "11": "result",
                    "4": "return_value",
                    "6": "output"
                },
                "extraout_var": {
                    "1": "extra_result",
                    "2": "extra_output",
                    "6": "extra_var"
                },
                "iVar3": {
                    "1": "memory_comparison",
                    "19": "comparison_result",
                    "3": "result",
                    "7": "memcmp_result"
                },
                "param_1": {
                    "1": "record_1",
                    "2": "first_array",
                    "3": "data1",
                    "5": "array1"
                },
                "param_2": {
                    "1": "record2",
                    "2": "second_array",
                    "3": "buffer2",
                    "5": "array2"
                },
                "param_3": {
                    "1": "size_block1",
                    "2": "value_1",
                    "3": "param_3",
                    "4": "size1",
                    "6": "param3",
                    "7": "param1"
                },
                "param_4": {
                    "1": "val_2",
                    "2": "value_2",
                    "3": "param_4",
                    "4": "size2",
                    "6": "param4",
                    "7": "param2"
                },
                "uVar1": {
                    "1": "size1",
                    "2": "source_size",
                    "3": "data1_size"
                },
                "uVar2": {
                    "1": "second_array_last_element",
                    "2": "array2_size",
                    "3": "block2_size"
                },
                "uVar4": {
                    "11": "combined_result",
                    "2": "result",
                    "4": "comparison_result",
                    "6": "return_value",
                    "8": "final_result"
                }
            },
            "called": [
                "memcmp",
                "FUN_001087da"
            ],
            "calling": [
                "FUN_001086af"
            ],
            "code": "\nundefined  [16] compare_memory_0011a1b0(ulong *array1,ulong *array2,undefined8 param1,undefined8 param2)\n\n{\n  ulong block1_size;\n  ulong block2_size;\n  int comparison_result;\n  undefined4 extra_var;\n  ulong combined_result;\n  undefined result [16];\n  \n  combined_result = *array1;\n  if (*array2 <= *array1) {\n    combined_result = *array2;\n  }\n  comparison_result = memcmp((void *)(array1[3] + 3),(void *)(array2[3] + 3),combined_result - 3);\n  combined_result = CONCAT44(extra_var,comparison_result);\n  if (comparison_result == 0) {\n    block1_size = array1[8];\n    if (block1_size < array2[7]) {\n      combined_result = 0xffffffff;\n    }\n    else {\n      block2_size = array2[8];\n      if (block2_size < array1[7]) {\n        combined_result = 1;\n      }\n      else {\n        combined_result = 0xffffffff;\n        if (array2[7] <= array1[7]) {\n          if (block2_size < block1_size) {\n            combined_result = 1;\n          }\n          else {\n            combined_result = 0xffffffff;\n            if (block2_size <= block1_size) {\n              if (array1[2] == 0x100) {\n                combined_result = (ulong)-(uint)(array2[2] != 0x100);\n              }\n              else {\n                combined_result = (ulong)(array2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  result._8_8_ = param2;\n  result._0_8_ = combined_result;\n  return result;\n}\n\n",
            "current_name": "compare_memory_0011a1b0",
            "entrypoint": "0x0011a1b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a1b0": "compare_memory_0011a1b0",
                "auVar5": "result",
                "extraout_var": "extra_var",
                "iVar3": "comparison_result",
                "param_1": "array1",
                "param_2": "array2",
                "param_3": "param1",
                "param_4": "param2",
                "uVar1": "block1_size",
                "uVar2": "block2_size",
                "uVar4": "combined_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a250": {
            "additional_data": {
                "*(char *)(param_1[3] + 3)": {
                    "1": "record1_char"
                },
                "*(char *)(param_2[3] + 3)": {
                    "1": "char_value2"
                },
                "*(char *)(record_1[3] + 3)": {
                    "1": "record_1_data"
                },
                "*(char *)(record_2[3] + 3)": {
                    "1": "record_2_data"
                },
                "*param_1": {
                    "1": "record1_value0",
                    "4": "record1_type"
                },
                "*param_1[0]": {
                    "1": "record1_field0"
                },
                "*param_1[3]": {
                    "1": "record1_field3"
                },
                "*param_2": {
                    "1": "record2_length",
                    "4": "record2_type"
                },
                "*param_2[0]": {
                    "1": "record2_field0"
                },
                "*param_2[3]": {
                    "1": "record2_third_char"
                },
                "3": {
                    "1": "record_data"
                },
                "4": {
                    "1": "record_size"
                },
                "4 < *param_1": {
                    "1": "is_first_param_value_greater_than4"
                },
                "4 < *param_2": {
                    "1": "check2"
                },
                "FUN_0011a250": {
                    "1": "compare_and_sort",
                    "25": "compare_records"
                },
                "Return value": {
                    "1": "result"
                },
                "compareRecords": {
                    "1": "compare_records"
                },
                "param_1": {
                    "1": "first_param",
                    "16": "record1",
                    "7": "record_1"
                },
                "param_1[2]": {
                    "1": "record1_size_value",
                    "3": "record1_flag_value"
                },
                "param_1[3]": {
                    "1": "metadata_1_val_3",
                    "2": "record1_data_ptr",
                    "3": "record1_data"
                },
                "param_1[7]": {
                    "1": "record1_value7",
                    "3": "record1_size",
                    "4": "record1_timestamp"
                },
                "param_1[8]": {
                    "1": "record1_val2",
                    "2": "record1_size"
                },
                "param_2": {
                    "1": "second_value",
                    "16": "record2",
                    "7": "record_2"
                },
                "param_2[2]": {
                    "1": "value2_2",
                    "3": "record2_flag_value"
                },
                "param_2[3]": {
                    "1": "record2_value3",
                    "2": "record2_data_ptr",
                    "3": "record2_data"
                },
                "param_2[7]": {
                    "1": "record2_field7",
                    "3": "record2_size",
                    "4": "record2_timestamp"
                },
                "param_2[8]": {
                    "1": "record2_data",
                    "2": "record2_value"
                },
                "record1": {
                    "2": "record1"
                },
                "record1[2]": {
                    "2": "record1_timestamp"
                },
                "record1[7]": {
                    "2": "record1_size"
                },
                "record1[8]": {
                    "1": "record1_offset"
                },
                "record1_field2": {
                    "1": "record1_field2"
                },
                "record2": {
                    "2": "record2"
                },
                "record2[2]": {
                    "2": "record2_timestamp"
                },
                "record2[7]": {
                    "2": "record2_size"
                },
                "record2[8]": {
                    "1": "record2_value"
                },
                "record_1": {
                    "1": "record_1_data"
                },
                "record_1[2]": {
                    "1": "record_1_field2"
                },
                "record_1[7]": {
                    "1": "record_1_timestamp"
                },
                "record_1[8]": {
                    "1": "record_1_length"
                },
                "record_2": {
                    "1": "record_2_data"
                },
                "record_2[2]": {
                    "1": "record_2_property"
                },
                "record_2[7]": {
                    "1": "record_2_timestamp"
                },
                "record_2[8]": {
                    "1": "record_2_value"
                },
                "return": {
                    "1": "comparison_result"
                },
                "uVar1": {
                    "1": "id1",
                    "2": "record1_field2",
                    "4": "record1_flag"
                }
            },
            "called": [
                "FUN_001087fd"
            ],
            "calling": [
                "FUN_00116852"
            ],
            "code": "\nint compare_records_0011a250(ulong *record1,ulong *record2)\n\n{\n  ulong record1_flag;\n  \n  record1_flag = record1_flag_value;\n  if (record1_flag == record2_flag_value) {\n    if (record2_timestamp <= record1_timestamp) {\n      if (record1_timestamp <= record2_timestamp) {\n        if (record2_size < record1_size) {\n          comparison_result -1;\n        }\n        if (record2_size <= record1_size) {\n          if ((4 < *record1) && (4 < *record2)) {\n            if (*(char *)(record1_data + 3) != *(char *)(record2_data + 3)) {\n              comparison_result (int)*(char *)(record1_data + 3) - (int)*(char *)(record2_data + 3);\n            }\n          }\n          comparison_result 0;\n        }\n      }\n      comparison_result 1;\n    }\n  }\n  else if ((record1_flag == 0) || ((record1_flag != 0x100 && (record2_flag_value != 0)))) {\n    comparison_result 1;\n  }\n  comparison_result -1;\n}\n\n",
            "current_name": "compare_records_0011a250",
            "entrypoint": "0x0011a250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record1",
                "param_1[2]": "record1_flag_value",
                "param_1[3]": "record1_data",
                "param_1[7]": "record1_timestamp",
                "param_1[8]": "record1_size",
                "param_2": "record2",
                "param_2[2]": "record2_flag_value",
                "param_2[3]": "record2_data",
                "param_2[7]": "record2_timestamp",
                "param_2[8]": "record2_size",
                "return": "comparison_result",
                "uVar1": "record1_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a2e0": {
            "additional_data": {
                "FUN_0011a2e0": {
                    "1": "decompiled_function",
                    "2": "copy_section_data",
                    "3": "extract_section_from_binary",
                    "5": "extract_section",
                    "8": "extract_section_info"
                },
                "bfd_get_section_by_name": {
                    "1": "get_section_by_name"
                },
                "lVar3": {
                    "1": "target_section_address",
                    "2": "section_data_ptr",
                    "3": "section_header",
                    "4": "section_data"
                },
                "lVar4": {
                    "1": "section_found",
                    "2": "section_pointer",
                    "3": "section_offset",
                    "4": "section_name_ptr",
                    "5": "section_name",
                    "8": "section_ptr"
                },
                "param_1": {
                    "1": "old_section_info",
                    "2": "input_data",
                    "3": "binary_header",
                    "6": "section_info"
                },
                "param_2": {
                    "1": "bfd_handle",
                    "4": "binary_data",
                    "5": "binary",
                    "7": "binary_file"
                },
                "print_error_and_exit_00119dd0": {
                    "1": "print_section_error_and_exit",
                    "3": "print_error_and_exit"
                },
                "uVar1": {
                    "1": "original_section_address",
                    "2": "section_name_ptr",
                    "5": "section_name"
                },
                "uVar2": {
                    "1": "var2",
                    "3": "error_msg",
                    "6": "error_message"
                }
            },
            "called": [
                "bfd_get_section_by_name",
                "FUN_00108808"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nlong extract_section_info_0011a2e0(long section_info,long binary_file)\n\n{\n  undefined8 section_name;\n  undefined8 error_message;\n  long section;\n  long section_ptr;\n  \n  section = (**(code **)(*(long *)(binary_file + 8) + 0x208))(binary_file);\n  section_ptr = *(long *)(section_info + 0x20);\n  *(undefined8 *)(section + 8) = *(undefined8 *)(section_info + 8);\n  *(undefined8 *)(section + 0x10) = *(undefined8 *)(section_info + 0x10);\n  *(undefined4 *)(section + 0x18) = *(undefined4 *)(section_info + 0x18);\n  if (section_ptr == 0) {\n    section_ptr = 0x128598;\n  }\n  else {\n    section_ptr = bfd_get_section_by_name(binary_file);\n    if (section_ptr == 0) {\n      section_name = *(undefined8 *)(section_info + 0x20);\n      error_message = dcgettext(0,\"Section %s not found\",5);\n                    \n      print_error_and_exit(error_message,section_name);\n    }\n  }\n  *(long *)(section + 0x20) = section_ptr;\n  return section;\n}\n\n",
            "current_name": "extract_section_info_0011a2e0",
            "entrypoint": "0x0011a2e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a2e0": "extract_section_info_0011a2e0",
                "bfd_get_section_by_name": "find_section_by_name",
                "lVar3": "section",
                "lVar4": "section_ptr",
                "param_1": "section_info",
                "param_2": "binary_file",
                "print_error_and_exit_00119dd0": "print_error_and_exit",
                "uVar1": "section_name",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a350": {
            "additional_data": {
                "FUN_0011a350": {
                    "1": "set_file_date_time",
                    "2": "set_time",
                    "20": "set_file_time",
                    "3": "set_file_timestamp"
                },
                "iVar1": {
                    "29": "result"
                },
                "local_28": {
                    "1": "new_time_spec",
                    "4": "modification_time"
                },
                "local_38": {
                    "1": "time_spec1",
                    "14": "access_time",
                    "2": "timestamp"
                },
                "param_1": {
                    "2": "filename",
                    "29": "file_path"
                },
                "param_2": {
                    "1": "struct_addr",
                    "2": "file_info_ptr",
                    "22": "file_info"
                },
                "pcVar3": {
                    "1": "error_str",
                    "16": "error_message",
                    "2": "err_msg",
                    "5": "error_msg"
                },
                "piVar2": {
                    "1": "errno_location_ptr",
                    "11": "errno_ptr",
                    "2": "errno",
                    "3": "error_ptr"
                },
                "print_error_message_00119ed0": {
                    "2": "print_error_message"
                },
                "uStack_1c": {
                    "1": "file_open_flags"
                },
                "uStack_20": {
                    "1": "address3"
                },
                "uStack_24": {
                    "1": "file_mode"
                },
                "uStack_2c": {
                    "1": "timestamp_nsec_reserved2",
                    "2": "backup_time",
                    "4": "creation_time"
                },
                "uStack_30": {
                    "1": "file_time3",
                    "7": "change_time"
                },
                "uStack_34": {
                    "1": "timestamp_nsec",
                    "9": "modification_time"
                },
                "uVar4": {
                    "1": "localized_error_msg",
                    "2": "translated_error_msg",
                    "3": "localized_error_message",
                    "5": "translated_error_message"
                }
            },
            "called": [
                "FUN_0010882c",
                "utimensat"
            ],
            "calling": [
                "FUN_00108200",
                "FUN_00104ea2"
            ],
            "code": "\nvoid set_file_time_0011a350(char *file_path,long file_info)\n\n{\n  int result;\n  int *errno_ptr;\n  char *error_message;\n  undefined8 error_message;\n  undefined4 access_time;\n  undefined4 modification_time;\n  undefined4 change_time;\n  undefined4 creation_time;\n  undefined4 modification_time;\n  undefined4 address2;\n  undefined4 address3;\n  undefined4 address4;\n  \n  modification_time = *(undefined4 *)(file_info + 0x58);\n  address2 = *(undefined4 *)(file_info + 0x5c);\n  address3 = *(undefined4 *)(file_info + 0x60);\n  address4 = *(undefined4 *)(file_info + 100);\n  access_time = *(undefined4 *)(file_info + 0x48);\n  modification_time = *(undefined4 *)(file_info + 0x4c);\n  change_time = *(undefined4 *)(file_info + 0x50);\n  creation_time = *(undefined4 *)(file_info + 0x54);\n  result = utimensat(-100,file_path,(timespec *)&access_time,0);\n  if (result != 0) {\n    errno_ptr = __errno_location();\n    error_message = strerror(*errno_ptr);\n    error_message = dcgettext(0,\"%s: cannot set time: %s\",5);\n    print_error_message(error_message,file_path,error_message);\n  }\n  return;\n}\n\n",
            "current_name": "set_file_time_0011a350",
            "entrypoint": "0x0011a350",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a350": "set_file_time_0011a350",
                "iVar1": "result",
                "local_28": "modification_time",
                "local_38": "access_time",
                "param_1": "file_path",
                "param_2": "file_info",
                "pcVar3": "error_message",
                "piVar2": "errno_ptr",
                "print_error_message_00119ed0": "print_error_message",
                "uStack_1c": "address4",
                "uStack_20": "address3",
                "uStack_24": "address2",
                "uStack_2c": "creation_time",
                "uStack_30": "change_time",
                "uStack_34": "modification_time",
                "uVar4": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a390": {
            "additional_data": {
                "(*(code *)plVar4[lVar1 + 2])()": {
                    "1": "execute_function"
                },
                "(code *)plVar4[lVar1 + 1])()": {
                    "1": "execute_function"
                },
                "(code*)plVar4[lVar1])()": {
                    "1": "execute_function"
                },
                "(code*)plVar4[lVar2 + 1])()": {
                    "1": "execute_function"
                },
                "(code*)plVar4[lVar2 + 2])()": {
                    "1": "execute_function"
                },
                "(code*)plVar4[lVar2])()": {
                    "1": "execute_function"
                },
                "(code*)plVar4[lVar3 + -2])()": {
                    "1": "execute_function"
                },
                "(code*)plVar4[lVar3 + -3])()": {
                    "1": "execute_function"
                },
                "(code*)plVar4[lVar3 + -4])()": {
                    "1": "execute_function"
                },
                "(code*)plVar4[lVar3 + -5])()": {
                    "1": "execute_function"
                },
                "(code*)plVar4[lVar3 + 2])()": {
                    "1": "execute_function"
                },
                "(code*)plVar4[lVar3 +1])()": {
                    "1": "execute_function"
                },
                "(code*)plVar4[lVar3])()": {
                    "1": "execute_function"
                },
                "*(int *)(plVar4 + 1)": {
                    "1": "function_count"
                },
                "*plVar4": {
                    "1": "next_function_pointer"
                },
                "<original_variable_name_1>": {
                    "1": "current_function_ptr"
                },
                "<original_variable_name_2>": {
                    "1": "num_functions"
                },
                "<original_variable_name_3>": {
                    "1": "function_idx"
                },
                "<original_variable_name_4>": {
                    "1": "remaining_iterations"
                },
                "FUN_0011a390": {
                    "1": "execute_all_functions",
                    "3": "execute_callbacks",
                    "4": "execute_function_chain",
                    "9": "execute_functions"
                },
                "lVar1": {
                    "1": "current_func_index",
                    "10": "index",
                    "4": "index1",
                    "6": "current_index"
                },
                "lVar2": {
                    "1": "nested_index",
                    "2": "temp_index",
                    "3": "current_index",
                    "4": "previous_index",
                    "5": "index2",
                    "9": "prev_index"
                },
                "lVar3": {
                    "1": "current_index",
                    "11": "temp_index",
                    "2": "loop_index",
                    "5": "index3"
                },
                "lVar4": {
                    "1": "temp_index"
                },
                "plVar4": {
                    "1": "callback_table",
                    "2": "function_ptr",
                    "3": "function_chain",
                    "4": "function_pointer",
                    "5": "function_pointers",
                    "6": "function_list"
                },
                "uVar5": {
                    "1": "callback_count",
                    "2": "num_functions",
                    "3": "counter",
                    "4": "index"
                }
            },
            "called": [],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid execute_functions_0011a390(void)\n\n{\n  long index;\n  long prev_index;\n  long temp_index;\n  long *function_list;\n  uint function_index;\n  \n  function_list = (long *)PTR_DAT_001264e0;\n  if (PTR_DAT_001264e0 != (undefined *)0x0) {\n    do {\n      function_index = *(int *)(function_list + 1) - 1;\n      if (-1 < (int)function_index) {\n        index = (long)(int)function_index;\n        function_index = function_index & 7;\n        (*(code *)function_list[index + 2])();\n        prev_index = index + -1;\n        if (-1 < (int)prev_index) {\n          temp_index = prev_index;\n          if (function_index != 0) {\n            if (function_index != 1) {\n              if (function_index != 2) {\n                if (function_index != 3) {\n                  if (function_index != 4) {\n                    if (function_index != 5) {\n                      if (function_index != 6) {\n                        (*(code *)function_list[index + 1])();\n                        prev_index = index + -2;\n                      }\n                      (*(code *)function_list[prev_index + 2])();\n                      prev_index = prev_index + -1;\n                    }\n                    (*(code *)function_list[prev_index + 2])();\n                    prev_index = prev_index + -1;\n                  }\n                  (*(code *)function_list[prev_index + 2])();\n                  prev_index = prev_index + -1;\n                }\n                (*(code *)function_list[prev_index + 2])();\n                prev_index = prev_index + -1;\n              }\n              (*(code *)function_list[prev_index + 2])();\n              prev_index = prev_index + -1;\n            }\n            (*(code *)function_list[prev_index + 2])();\n            temp_index = prev_index + -1;\n            if ((int)(prev_index + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)function_list[temp_index + 2])();\n            index = temp_index + -1;\n            (*(code *)function_list[temp_index + 1])();\n            (*(code *)function_list[temp_index])();\n            (*(code *)function_list[index])();\n            (*(code *)function_list[temp_index + -2])();\n            (*(code *)function_list[temp_index + -3])();\n            (*(code *)function_list[temp_index + -4])();\n            (*(code *)function_list[temp_index + -5])();\n            temp_index = temp_index + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_0011a466:\n      function_list = (long *)*function_list;\n    } while (function_list != (long *)0x0);\n  }\n  return;\n}\n\n",
            "current_name": "execute_functions_0011a390",
            "entrypoint": "0x0011a390",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a390": "execute_functions_0011a390",
                "lVar1": "index",
                "lVar2": "prev_index",
                "lVar3": "temp_index",
                "lVar4": "temp_index",
                "plVar4": "function_list",
                "uVar5": "function_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a480": {
            "additional_data": {
                "FUN_0011a480": {
                    "1": "copy_string_and_terminate",
                    "2": "copy_and_null_terminate_string",
                    "24": "copy_string"
                },
                "__dest": {
                    "1": "new_str",
                    "2": "new_string",
                    "7": "copied_string",
                    "9": "destination"
                },
                "__n": {
                    "1": "input_length",
                    "11": "length",
                    "15": "string_length",
                    "2": "source_length"
                },
                "param_1": {
                    "1": "string_to_copy",
                    "12": "source_string",
                    "2": "str",
                    "7": "source",
                    "8": "input_string"
                },
                "param_2": {
                    "1": "string_length",
                    "2": "length",
                    "25": "max_length",
                    "3": "max_size"
                }
            },
            "called": [
                "xmalloc",
                "memcpy",
                "strnlen"
            ],
            "calling": [
                "FUN_00114c80",
                "FUN_00116b90"
            ],
            "code": "\nvoid copy_string_0011a480(char *source_string,size_t max_length)\n\n{\n  size_t string_length;\n  void *destination_string;\n  \n  string_length = strnlen(source_string,max_length);\n  destination_string = (void *)xmalloc(string_length + 1);\n  *(undefined *)((long)destination_string + string_length) = 0;\n  memcpy(destination_string,source_string,string_length);\n  return;\n}\n\n",
            "current_name": "copy_string_0011a480",
            "entrypoint": "0x0011a480",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a480": "copy_string_0011a480",
                "__dest": "destination_string",
                "__n": "string_length",
                "param_1": "source_string",
                "param_2": "max_length"
            },
            "skipped": false,
            "tags": []
        },
        "_DT_FINI": {
            "called": [],
            "calling": [],
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "current_name": "_DT_FINI",
            "entrypoint": "0x0011a4b4",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_DT_INIT": {
            "called": [
                "__gmon_start__"
            ],
            "calling": [],
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "current_name": "_DT_INIT",
            "entrypoint": "0x00104000",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_FINI_0": {
            "called": [
                "FUN_00116ad0",
                "__cxa_finalize"
            ],
            "calling": [],
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001275e0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00126468);\n  FUNC_00116ad0();\n  DAT_001275e0 = 1;\n  return;\n}\n\n",
            "current_name": "_FINI_0",
            "entrypoint": "0x00116b40",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_INIT_0": {
            "called": [
                "FUN_00116b00"
            ],
            "calling": [],
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00116b00();\n  return;\n}\n\n",
            "current_name": "_INIT_0",
            "entrypoint": "0x00116b80",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__assert_fail": {
            "called": [
                "__assert_fail"
            ],
            "calling": [
                "FUN_001125fa",
                "FUN_00112c1f",
                "FUN_0010bbd3",
                "FUN_0010c7a0"
            ],
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "current_name": "__assert_fail",
            "entrypoint": "0x00104300",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__cxa_finalize": {
            "called": [
                "__cxa_finalize"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "current_name": "__cxa_finalize",
            "entrypoint": "0x00104910",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__errno_location": {
            "called": [
                "__errno_location"
            ],
            "calling": [
                "FUN_00109a32",
                "FUN_00114460",
                "FUN_00108200",
                "FUN_00116b90",
                "FUN_0010543c",
                "FUN_00107880",
                "FUN_00115a90",
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_0010882c",
                "FUN_00114690",
                "FUN_00104966",
                "FUN_00104ea2"
            ],
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "current_name": "__errno_location",
            "entrypoint": "0x001040b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "abort": {
            "called": [
                "abort"
            ],
            "calling": [
                "FUN_0010ebb0",
                "FUN_001199d0",
                "FUN_0010aa53",
                "FUN_0010abdd",
                "FUN_0010d21c",
                "FUN_0010e9a0",
                "FUN_0010b0fa",
                "FUN_0010a94e",
                "FUN_001135a5",
                "FUN_0010ba08",
                "FUN_0010922b",
                "FUN_00112c1f"
            ],
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "current_name": "abort",
            "entrypoint": "0x001040a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "access": {
            "called": [
                "access"
            ],
            "calling": [
                "FUN_0011283f"
            ],
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "current_name": "access",
            "entrypoint": "0x00104740",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_alloc": {
            "called": [
                "bfd_alloc"
            ],
            "calling": [
                "FUN_00115dc0"
            ],
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "current_name": "bfd_alloc",
            "entrypoint": "0x00104250",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_alt_mach_code": {
            "called": [
                "bfd_alt_mach_code"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "current_name": "bfd_alt_mach_code",
            "entrypoint": "0x00104590",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_bread": {
            "called": [
                "bfd_bread"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "current_name": "bfd_bread",
            "entrypoint": "0x00104870",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_bwrite": {
            "called": [
                "bfd_bwrite"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "current_name": "bfd_bwrite",
            "entrypoint": "0x00104530",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_canonicalize_reloc": {
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "calling": [
                "FUN_001163d0",
                "FUN_00115dc0",
                "FUN_00116030"
            ],
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "current_name": "bfd_canonicalize_reloc",
            "entrypoint": "0x001047b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_check_format": {
            "called": [
                "bfd_check_format"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "current_name": "bfd_check_format",
            "entrypoint": "0x00104810",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_check_format_matches": {
            "called": [
                "bfd_check_format_matches"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "current_name": "bfd_check_format_matches",
            "entrypoint": "0x00104780",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_close": {
            "called": [
                "bfd_close"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "current_name": "bfd_close",
            "entrypoint": "0x00104908",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_close_all_done": {
            "called": [
                "bfd_close_all_done"
            ],
            "calling": [
                "FUN_00119f70",
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "current_name": "bfd_close_all_done",
            "entrypoint": "0x00104900",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_coff_get_auxent": {
            "called": [
                "bfd_coff_get_auxent"
            ],
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "current_name": "bfd_coff_get_auxent",
            "entrypoint": "0x001045b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_coff_get_syment": {
            "called": [
                "bfd_coff_get_syment"
            ],
            "calling": [
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "current_name": "bfd_coff_get_syment",
            "entrypoint": "0x001046a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_convert_section_contents": {
            "called": [
                "bfd_convert_section_contents"
            ],
            "calling": [
                "FUN_00116110"
            ],
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "current_name": "bfd_convert_section_contents",
            "entrypoint": "0x001042f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_convert_section_setup": {
            "called": [
                "bfd_convert_section_setup"
            ],
            "calling": [
                "FUN_00115530"
            ],
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "current_name": "bfd_convert_section_setup",
            "entrypoint": "0x001040f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_create_gnu_debuglink_section": {
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "current_name": "bfd_create_gnu_debuglink_section",
            "entrypoint": "0x00104180",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_decode_symclass": {
            "called": [
                "bfd_decode_symclass"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "current_name": "bfd_decode_symclass",
            "entrypoint": "0x00104490",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_errmsg": {
            "called": [
                "bfd_errmsg"
            ],
            "calling": [
                "FUN_0010e2f0",
                "FUN_001126c0",
                "FUN_0011a110",
                "FUN_0010e07c",
                "FUN_0010e6a8",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_00116b90",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "current_name": "bfd_errmsg",
            "entrypoint": "0x001047a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_fdopenw": {
            "called": [
                "bfd_fdopenw"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "current_name": "bfd_fdopenw",
            "entrypoint": "0x001048d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_fill_in_gnu_debuglink_section": {
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "current_name": "bfd_fill_in_gnu_debuglink_section",
            "entrypoint": "0x00104600",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_arch": {
            "called": [
                "bfd_get_arch"
            ],
            "calling": [
                "FUN_00107976",
                "FUN_00107880",
                "FUN_00105828",
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "current_name": "bfd_get_arch",
            "entrypoint": "0x00104570",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_error": {
            "called": [
                "bfd_get_error"
            ],
            "calling": [
                "FUN_001126c0",
                "FUN_0011a110",
                "FUN_00119f70",
                "FUN_0010dac0",
                "FUN_001083b7",
                "FUN_00115dc0",
                "FUN_00116b90",
                "FUN_0010554f",
                "FUN_0010e2f0",
                "FUN_00114690",
                "FUN_0010e07c",
                "FUN_0010e6a8",
                "FUN_0011378f"
            ],
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "current_name": "bfd_get_error",
            "entrypoint": "0x00104370",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_full_section_contents": {
            "called": [
                "bfd_get_full_section_contents"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_00116110"
            ],
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "current_name": "bfd_get_full_section_contents",
            "entrypoint": "0x00104440",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_mach": {
            "called": [
                "bfd_get_mach"
            ],
            "calling": [
                "FUN_00107976",
                "FUN_00105828"
            ],
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "current_name": "bfd_get_mach",
            "entrypoint": "0x00104650",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_reloc_upper_bound": {
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "calling": [
                "FUN_001163d0",
                "FUN_00115dc0",
                "FUN_00116030"
            ],
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "current_name": "bfd_get_reloc_upper_bound",
            "entrypoint": "0x00104840",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_section_by_name": {
            "called": [
                "bfd_get_section_by_name"
            ],
            "calling": [
                "FUN_0011a2e0",
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "current_name": "bfd_get_section_by_name",
            "entrypoint": "0x00104400",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_section_contents": {
            "called": [
                "bfd_get_section_contents"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "current_name": "bfd_get_section_contents",
            "entrypoint": "0x00104260",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_stab_name": {
            "called": [
                "bfd_get_stab_name"
            ],
            "calling": [
                "FUN_00108b3e"
            ],
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "current_name": "bfd_get_stab_name",
            "entrypoint": "0x00104110",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_hash_allocate": {
            "called": [
                "bfd_hash_allocate"
            ],
            "calling": [
                "FUN_0010bb52"
            ],
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "current_name": "bfd_hash_allocate",
            "entrypoint": "0x00104450",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_hash_lookup": {
            "called": [
                "bfd_hash_lookup"
            ],
            "calling": [
                "FUN_0010e2f0",
                "FUN_0010bba1",
                "FUN_0010e6a8"
            ],
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "current_name": "bfd_hash_lookup",
            "entrypoint": "0x00104560",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_hash_newfunc": {
            "called": [
                "bfd_hash_newfunc"
            ],
            "calling": [
                "FUN_0010bb52"
            ],
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "current_name": "bfd_hash_newfunc",
            "entrypoint": "0x00104200",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_hash_table_init": {
            "called": [
                "bfd_hash_table_init"
            ],
            "calling": [
                "FUN_0011378f"
            ],
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "current_name": "bfd_hash_table_init",
            "entrypoint": "0x00104830",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_init": {
            "called": [
                "bfd_init"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "current_name": "bfd_init",
            "entrypoint": "0x00104430",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_is_local_label": {
            "called": [
                "bfd_is_local_label"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "current_name": "bfd_is_local_label",
            "entrypoint": "0x001048a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_iterate_over_targets": {
            "called": [
                "bfd_iterate_over_targets"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "current_name": "bfd_iterate_over_targets",
            "entrypoint": "0x00104620",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_make_section_anyway_with_flags": {
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "calling": [
                "FUN_00115530"
            ],
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "current_name": "bfd_make_section_anyway_with_flags",
            "entrypoint": "0x00104190",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_make_section_with_flags": {
            "called": [
                "bfd_make_section_with_flags"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "current_name": "bfd_make_section_with_flags",
            "entrypoint": "0x00104120",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_malloc_and_get_section": {
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "current_name": "bfd_malloc_and_get_section",
            "entrypoint": "0x001041e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_map_over_sections": {
            "called": [
                "bfd_map_over_sections"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "current_name": "bfd_map_over_sections",
            "entrypoint": "0x00104850",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_octets_per_byte": {
            "called": [
                "bfd_octets_per_byte"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "current_name": "bfd_octets_per_byte",
            "entrypoint": "0x00104520",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openr": {
            "called": [
                "bfd_openr"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "current_name": "bfd_openr",
            "entrypoint": "0x001041f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openr_next_archived_file": {
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "current_name": "bfd_openr_next_archived_file",
            "entrypoint": "0x00104820",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openw": {
            "called": [
                "bfd_openw"
            ],
            "calling": [
                "FUN_00119f70",
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "current_name": "bfd_openw",
            "entrypoint": "0x00104690",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_printable_arch_mach": {
            "called": [
                "bfd_printable_arch_mach"
            ],
            "calling": [
                "FUN_001199d0",
                "FUN_00119f70",
                "FUN_00104943",
                "FUN_00105828"
            ],
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "current_name": "bfd_printable_arch_mach",
            "entrypoint": "0x001045a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_scan_arch": {
            "called": [
                "bfd_scan_arch"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "current_name": "bfd_scan_arch",
            "entrypoint": "0x00104710",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_scan_vma": {
            "called": [
                "bfd_scan_vma"
            ],
            "calling": [
                "FUN_00119940"
            ],
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "current_name": "bfd_scan_vma",
            "entrypoint": "0x00104070",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_seek": {
            "called": [
                "bfd_seek"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "current_name": "bfd_seek",
            "entrypoint": "0x001048e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_default_target": {
            "called": [
                "bfd_set_default_target"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "current_name": "bfd_set_default_target",
            "entrypoint": "0x00104150",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_error": {
            "called": [
                "bfd_set_error"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_001086af",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "current_name": "bfd_set_error",
            "entrypoint": "0x001043a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_error_program_name": {
            "called": [
                "bfd_set_error_program_name"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "current_name": "bfd_set_error_program_name",
            "entrypoint": "0x001046e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_file_flags": {
            "called": [
                "bfd_set_file_flags"
            ],
            "calling": [
                "FUN_00107976"
            ],
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "current_name": "bfd_set_file_flags",
            "entrypoint": "0x00104630",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_format": {
            "called": [
                "bfd_set_format"
            ],
            "calling": [
                "FUN_00114e50",
                "FUN_00119f70",
                "FUN_00114690",
                "FUN_00107880"
            ],
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "current_name": "bfd_set_format",
            "entrypoint": "0x00104500",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_section_contents": {
            "called": [
                "bfd_set_section_contents"
            ],
            "calling": [
                "FUN_0010554f",
                "FUN_00116110"
            ],
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "current_name": "bfd_set_section_contents",
            "entrypoint": "0x00104330",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_section_size": {
            "called": [
                "bfd_set_section_size"
            ],
            "calling": [
                "FUN_00115530",
                "FUN_00107880",
                "FUN_0010554f",
                "FUN_00116110"
            ],
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "current_name": "bfd_set_section_size",
            "entrypoint": "0x001045f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_start_address": {
            "called": [
                "bfd_set_start_address"
            ],
            "calling": [
                "FUN_00107976"
            ],
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "current_name": "bfd_set_start_address",
            "entrypoint": "0x00104860",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_symtab": {
            "called": [
                "bfd_set_symtab"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "current_name": "bfd_set_symtab",
            "entrypoint": "0x00104460",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_stat": {
            "called": [
                "bfd_stat"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "current_name": "bfd_stat",
            "entrypoint": "0x001041b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_target_list": {
            "called": [
                "bfd_target_list"
            ],
            "calling": [
                "FUN_00104a35"
            ],
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "current_name": "bfd_target_list",
            "entrypoint": "0x00104350",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bindtextdomain": {
            "called": [
                "bindtextdomain"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "current_name": "bindtextdomain",
            "entrypoint": "0x00104220",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "chmod": {
            "called": [
                "chmod"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "current_name": "chmod",
            "entrypoint": "0x001046d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "close": {
            "called": [
                "close"
            ],
            "calling": [
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_00114690",
                "FUN_00116b90",
                "FUN_00115a90"
            ],
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "close",
            "entrypoint": "0x001043c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "concat": {
            "called": [
                "concat"
            ],
            "calling": [
                "FUN_0010d21c",
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_0010554f",
                "FUN_00104ea2"
            ],
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "current_name": "concat",
            "entrypoint": "0x00104320",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "cplus_demangle": {
            "called": [
                "cplus_demangle"
            ],
            "calling": [
                "FUN_0010d21c"
            ],
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "current_name": "cplus_demangle",
            "entrypoint": "0x001046b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "cplus_demangle_init_info": {
            "called": [
                "cplus_demangle_init_info"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "current_name": "cplus_demangle_init_info",
            "entrypoint": "0x00104550",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "cplus_demangle_mangled_name": {
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "current_name": "cplus_demangle_mangled_name",
            "entrypoint": "0x00104700",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "cplus_demangle_print": {
            "called": [
                "cplus_demangle_print"
            ],
            "calling": [
                "FUN_0010b0fa"
            ],
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "current_name": "cplus_demangle_print",
            "entrypoint": "0x00104050",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "dcgettext": {
            "called": [
                "dcgettext"
            ],
            "calling": [
                "FUN_00104a35",
                "FUN_00119f70",
                "FUN_00109a32",
                "FUN_0010bd62",
                "FUN_0010827b",
                "FUN_00114460",
                "FUN_0010dac0",
                "FUN_00108179",
                "FUN_0010ba08",
                "FUN_00107880",
                "FUN_0010c2d2",
                "FUN_00114190",
                "FUN_0010551d",
                "FUN_0010c892",
                "FUN_0010808f",
                "FUN_00115530",
                "FUN_00114e00",
                "FUN_001199d0",
                "FUN_0010911f",
                "FUN_00104cc1",
                "FUN_001086af",
                "FUN_0010e07c",
                "FUN_001053b5",
                "FUN_00108808",
                "FUN_00108fb9",
                "FUN_00108375",
                "FUN_00112c1f",
                "FUN_0010be88",
                "FUN_00109022",
                "FUN_00104ea2",
                "FUN_0010c05d",
                "FUN_0011173a",
                "FUN_00108fe8",
                "FUN_0010be1a",
                "FUN_0010bc80",
                "FUN_0010554f",
                "FUN_00108916",
                "FUN_00104ad6",
                "FUN_00114690",
                "FUN_00108b3e",
                "FUN_00108d9a",
                "FUN_0010c218",
                "FUN_0010b0fa",
                "FUN_0010da0b",
                "FUN_00112b6e",
                "FUN_0010e6a8",
                "FUN_00112996",
                "FUN_00115b70",
                "FUN_001126c0",
                "FUN_0010bf20",
                "FUN_00115dc0",
                "FUN_00114dc7",
                "FUN_0010543c",
                "FUN_0010e2f0",
                "FUN_0011256b",
                "FUN_0010882c",
                "FUN_00108a2a",
                "FUN_001163d0",
                "FUN_00116490",
                "FUN_0010b6ea",
                "FUN_0010c6be",
                "FUN_00107976",
                "FUN_0010ee3f",
                "FUN_0010914e",
                "FUN_00104920",
                "FUN_00108200",
                "FUN_0010b800",
                "FUN_00116b90",
                "FUN_00113f50",
                "FUN_00119970",
                "FUN_00105828",
                "FUN_00114e50",
                "FUN_0010bf86",
                "FUN_00108f08",
                "FUN_00104966",
                "FUN_00108072",
                "FUN_001083de",
                "FUN_001152b6",
                "FUN_0010871c"
            ],
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "current_name": "dcgettext",
            "entrypoint": "0x00104240",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "dup": {
            "called": [
                "dup"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "dup",
            "entrypoint": "0x001042d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "entry": {
            "called": [
                "__libc_start_main",
                "FUN_00116b90"
            ],
            "calling": [],
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUNC_00116b90,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x00116aa0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "exit": {
            "called": [
                "exit"
            ],
            "calling": [
                "FUN_00108916",
                "FUN_00108a2a",
                "FUN_00119970"
            ],
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "current_name": "exit",
            "entrypoint": "0x001047f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fchmod": {
            "called": [
                "fchmod"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "current_name": "fchmod",
            "entrypoint": "0x001046c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fclose": {
            "called": [
                "fclose"
            ],
            "calling": [
                "FUN_00114460",
                "FUN_00116b90",
                "FUN_00114dc7",
                "FUN_00107880"
            ],
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fclose",
            "entrypoint": "0x00104210",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "feof": {
            "called": [
                "feof"
            ],
            "calling": [
                "FUN_00114dc7"
            ],
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "feof",
            "entrypoint": "0x001044d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ferror": {
            "called": [
                "ferror"
            ],
            "calling": [
                "FUN_00114460",
                "FUN_00114dc7",
                "FUN_00116b90"
            ],
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "ferror",
            "entrypoint": "0x00104130",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fflush": {
            "called": [
                "fflush"
            ],
            "calling": [
                "FUN_00119e70",
                "FUN_0011256b",
                "FUN_001126c0",
                "FUN_0010871c"
            ],
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fflush",
            "entrypoint": "0x001045e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "filename_cmp": {
            "called": [
                "filename_cmp"
            ],
            "calling": [
                "FUN_00108f08",
                "FUN_00116b90",
                "FUN_0010edb4"
            ],
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "current_name": "filename_cmp",
            "entrypoint": "0x001041a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fnmatch": {
            "called": [
                "fnmatch"
            ],
            "calling": [
                "FUN_00114190",
                "FUN_0011a170"
            ],
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "current_name": "fnmatch",
            "entrypoint": "0x00104340",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fopen": {
            "called": [
                "fopen"
            ],
            "calling": [
                "FUN_00114d60",
                "FUN_00114460",
                "FUN_00116b90",
                "FUN_00107880"
            ],
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "current_name": "fopen",
            "entrypoint": "0x00104750",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fprintf": {
            "called": [
                "fprintf"
            ],
            "calling": [
                "FUN_00104a35",
                "FUN_001126c0",
                "FUN_0010bf20",
                "FUN_0010bd62",
                "FUN_0010c2d2",
                "FUN_0010c892",
                "FUN_001199d0",
                "FUN_0011256b",
                "FUN_0010911f",
                "FUN_00108a2a",
                "FUN_0010b6ea",
                "FUN_0010c6be",
                "FUN_00108fb9",
                "FUN_0010ee3f",
                "FUN_00112c1f",
                "FUN_0010be88",
                "FUN_00109022",
                "FUN_0010914e",
                "FUN_0010c05d",
                "FUN_0011173a",
                "FUN_00108fe8",
                "FUN_0010be1a",
                "FUN_00116b90",
                "FUN_0010bc80",
                "FUN_0010554f",
                "FUN_00108916",
                "FUN_00119e70",
                "FUN_0010bf86",
                "FUN_00108b3e",
                "FUN_0010c218",
                "FUN_00108f08",
                "FUN_0010b0fa",
                "FUN_00112b6e",
                "FUN_00112996",
                "FUN_0010871c"
            ],
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "current_name": "fprintf",
            "entrypoint": "0x001044b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fputc": {
            "called": [
                "fputc"
            ],
            "calling": [
                "FUN_0011256b",
                "FUN_00104a35",
                "FUN_00108b3e"
            ],
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fputc",
            "entrypoint": "0x001043f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fputs": {
            "called": [
                "fputs"
            ],
            "calling": [
                "FUN_001126c0",
                "FUN_00104943"
            ],
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fputs",
            "entrypoint": "0x00104310",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fread": {
            "called": [
                "fread"
            ],
            "calling": [
                "FUN_00114460",
                "FUN_00114dc7",
                "FUN_00116b90"
            ],
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "current_name": "fread",
            "entrypoint": "0x00104160",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "free": {
            "called": [
                "free"
            ],
            "calling": [
                "FUN_0010e8a9",
                "FUN_0010a377",
                "FUN_00104a35",
                "FUN_0010eafe",
                "FUN_001081e9",
                "FUN_0010e5db",
                "FUN_0010dac0",
                "FUN_0010ba08",
                "FUN_00107880",
                "FUN_0010551d",
                "FUN_00109b2f",
                "FUN_001199d0",
                "FUN_0010abdd",
                "FUN_0010afd5",
                "FUN_0010b948",
                "FUN_0010d559",
                "FUN_0010e07c",
                "FUN_00109ed3",
                "FUN_00104ea2",
                "FUN_00116110",
                "FUN_0010a83e",
                "FUN_0010c1c6",
                "FUN_0010e9a0",
                "FUN_0010a0e9",
                "FUN_0011173a",
                "FUN_0010a94e",
                "FUN_0010554f",
                "FUN_00116852",
                "FUN_0010e7c2",
                "FUN_0010a181",
                "FUN_00114690",
                "FUN_0010a77a",
                "FUN_0010b0fa",
                "FUN_0010e6a8",
                "FUN_0010ebb0",
                "FUN_001088ae",
                "FUN_0010ae0e",
                "FUN_0010a424",
                "FUN_0011256b",
                "FUN_00114b84",
                "FUN_00108466",
                "FUN_0010c95e",
                "FUN_0010e918",
                "FUN_001163d0",
                "FUN_0010b6ea",
                "FUN_0010ee3f",
                "FUN_0010e842",
                "FUN_00116b90",
                "FUN_0010aa53",
                "FUN_0010d21c",
                "FUN_00108863",
                "FUN_0010a2b9",
                "FUN_001125fa",
                "FUN_0010e453",
                "FUN_00116030"
            ],
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "current_name": "free",
            "entrypoint": "0x001048f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fseek": {
            "called": [
                "fseek"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "current_name": "fseek",
            "entrypoint": "0x00104660",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ftell": {
            "called": [
                "ftell"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "current_name": "ftell",
            "entrypoint": "0x001044c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fwrite": {
            "called": [
                "fwrite"
            ],
            "calling": [
                "FUN_001126c0",
                "FUN_00108b3e",
                "FUN_00107880"
            ],
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "current_name": "fwrite",
            "entrypoint": "0x00104800",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getc": {
            "called": [
                "getc"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "getc",
            "entrypoint": "0x001048b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getenv": {
            "called": [
                "getenv"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "current_name": "getenv",
            "entrypoint": "0x00104040",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getopt_long": {
            "called": [
                "getopt_long"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "current_name": "getopt_long",
            "entrypoint": "0x00104280",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_create_alloc": {
            "called": [
                "htab_create_alloc"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00113f20"
            ],
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "current_name": "htab_create_alloc",
            "entrypoint": "0x00104720",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_delete": {
            "called": [
                "htab_delete"
            ],
            "calling": [
                "FUN_001054af"
            ],
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "current_name": "htab_delete",
            "entrypoint": "0x00104090",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_elements": {
            "called": [
                "htab_elements"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0010554f"
            ],
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "current_name": "htab_elements",
            "entrypoint": "0x001044e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_find": {
            "called": [
                "htab_find"
            ],
            "calling": [
                "FUN_00108d9a",
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "current_name": "htab_find",
            "entrypoint": "0x001047d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_find_slot": {
            "called": [
                "htab_find_slot"
            ],
            "calling": [
                "FUN_00104cc1",
                "FUN_00108d9a",
                "FUN_00116b90"
            ],
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "current_name": "htab_find_slot",
            "entrypoint": "0x001044a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_hash_string": {
            "called": [
                "htab_hash_string"
            ],
            "calling": [
                "FUN_00108800"
            ],
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "current_name": "htab_hash_string",
            "entrypoint": "0x001048f8",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_traverse": {
            "called": [
                "htab_traverse"
            ],
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "current_name": "htab_traverse",
            "entrypoint": "0x00104580",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "lseek": {
            "called": [
                "lseek"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "current_name": "lseek",
            "entrypoint": "0x001042e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "malloc": {
            "called": [
                "malloc"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "current_name": "malloc",
            "entrypoint": "0x001045c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memcmp": {
            "called": [
                "memcmp"
            ],
            "calling": [
                "FUN_00116852",
                "FUN_0011a1b0"
            ],
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "current_name": "memcmp",
            "entrypoint": "0x00104420",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memcpy": {
            "called": [
                "memcpy"
            ],
            "calling": [
                "FUN_0011a480",
                "FUN_00116b90"
            ],
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memcpy",
            "entrypoint": "0x00104540",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memmove": {
            "called": [
                "memmove"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memmove",
            "entrypoint": "0x001046f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memset": {
            "called": [
                "memset"
            ],
            "calling": [
                "FUN_00119f70"
            ],
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memset",
            "entrypoint": "0x00104360",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "mkdtemp": {
            "called": [
                "mkdtemp"
            ],
            "calling": [
                "FUN_0011a0e0"
            ],
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "current_name": "mkdtemp",
            "entrypoint": "0x00104670",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "mkstemp": {
            "called": [
                "mkstemp"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "current_name": "mkstemp",
            "entrypoint": "0x00104640",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "mkstemps": {
            "called": [
                "mkstemps"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "current_name": "mkstemps",
            "entrypoint": "0x00104030",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "open": {
            "called": [
                "open"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "current_name": "open",
            "entrypoint": "0x00104730",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "printf": {
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_001199d0",
                "FUN_00119f70",
                "FUN_00104943",
                "FUN_00107976",
                "FUN_00119970",
                "FUN_00104ea2"
            ],
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "current_name": "printf",
            "entrypoint": "0x001042a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "putc": {
            "called": [
                "putc"
            ],
            "calling": [
                "FUN_00119e70",
                "FUN_00104943"
            ],
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "putc",
            "entrypoint": "0x00104480",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "qsort": {
            "called": [
                "qsort"
            ],
            "calling": [
                "FUN_00116852",
                "FUN_001086af",
                "FUN_0010554f"
            ],
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "current_name": "qsort",
            "entrypoint": "0x00104140",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "read": {
            "called": [
                "read"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "current_name": "read",
            "entrypoint": "0x00104410",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "rmdir": {
            "called": [
                "rmdir"
            ],
            "calling": [
                "FUN_00114b84",
                "FUN_00104ea2"
            ],
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "current_name": "rmdir",
            "entrypoint": "0x00104230",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "setlocale": {
            "called": [
                "setlocale"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "current_name": "setlocale",
            "entrypoint": "0x00104680",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "sprintf": {
            "called": [
                "sprintf"
            ],
            "calling": [
                "FUN_00109dfe",
                "FUN_0010ebb0",
                "FUN_0010e8a9",
                "FUN_0010a377",
                "FUN_0010eafe",
                "FUN_0010e5db",
                "FUN_0010ae0e",
                "FUN_0010ba08",
                "FUN_0010a424",
                "FUN_0010abdd",
                "FUN_00109e76",
                "FUN_0010b948",
                "FUN_0010e918",
                "FUN_0010ee3f",
                "FUN_00109ed3",
                "FUN_0010a83e",
                "FUN_00109d97",
                "FUN_0010e842",
                "FUN_0010e9a0",
                "FUN_0010a0e9",
                "FUN_0010a94e",
                "FUN_0010b800",
                "FUN_00109cf4",
                "FUN_0010aa53",
                "FUN_0010e7c2",
                "FUN_0010a181",
                "FUN_0010a77a",
                "FUN_0010a2b9",
                "FUN_0010e6a8",
                "FUN_001125fa",
                "FUN_0010a69a",
                "FUN_0010e453",
                "FUN_0010ab4d"
            ],
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "current_name": "sprintf",
            "entrypoint": "0x001047e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "stat": {
            "called": [
                "stat"
            ],
            "calling": [
                "FUN_0011283f",
                "FUN_00116b90",
                "FUN_00113f50",
                "FUN_00104ea2"
            ],
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "stat",
            "entrypoint": "0x001044f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcasecmp": {
            "called": [
                "strcasecmp"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "strcasecmp",
            "entrypoint": "0x00104080",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcat": {
            "called": [
                "strcat"
            ],
            "calling": [
                "FUN_00115530",
                "FUN_0010ae0e",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "current_name": "strcat",
            "entrypoint": "0x001047c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strchr": {
            "called": [
                "strchr"
            ],
            "calling": [
                "FUN_00104ad6",
                "FUN_00114c80",
                "FUN_0011173a",
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "current_name": "strchr",
            "entrypoint": "0x00104290",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcmp": {
            "called": [
                "strcmp"
            ],
            "calling": [
                "FUN_0010914e",
                "FUN_00115f50",
                "FUN_0011173a",
                "FUN_00116b90",
                "FUN_00108898",
                "FUN_0010554f",
                "FUN_00114190",
                "FUN_00115530",
                "FUN_00108c86",
                "FUN_0010afd5",
                "FUN_0010d559",
                "FUN_0010b0fa",
                "FUN_00104943",
                "FUN_0010c6be",
                "FUN_0010922b",
                "FUN_0010ee3f",
                "FUN_0010c7a0",
                "FUN_00115b70"
            ],
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "strcmp",
            "entrypoint": "0x00104470",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcpy": {
            "called": [
                "strcpy"
            ],
            "calling": [
                "FUN_0010a424",
                "FUN_00115530",
                "FUN_001199d0",
                "FUN_0010ae0e",
                "FUN_0011378f",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_0010554f"
            ],
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "current_name": "strcpy",
            "entrypoint": "0x00104100",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strdup": {
            "called": [
                "strdup"
            ],
            "calling": [
                "FUN_00108d9a"
            ],
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "current_name": "strdup",
            "entrypoint": "0x00104880",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strerror": {
            "called": [
                "strerror"
            ],
            "calling": [
                "FUN_001199d0",
                "FUN_0010882c",
                "FUN_00114690",
                "FUN_00114460",
                "FUN_00104966",
                "FUN_00108200",
                "FUN_00116b90",
                "FUN_0010543c",
                "FUN_00107880",
                "FUN_00104ea2"
            ],
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "current_name": "strerror",
            "entrypoint": "0x00104890",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strlen": {
            "called": [
                "strlen"
            ],
            "calling": [
                "FUN_0010ebb0",
                "FUN_00113ede",
                "FUN_0010e8a9",
                "FUN_0010a377",
                "FUN_0010eafe",
                "FUN_0010e5db",
                "FUN_0010ae0e",
                "FUN_0010ba08",
                "FUN_0010a424",
                "FUN_00115530",
                "FUN_0010e2f0",
                "FUN_001199d0",
                "FUN_0010abdd",
                "FUN_0010c95e",
                "FUN_0010e918",
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_00113fb0",
                "FUN_00109ed3",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010e9a0",
                "FUN_0010a0e9",
                "FUN_0011173a",
                "FUN_0010a94e",
                "FUN_0010b800",
                "FUN_00116b90",
                "FUN_0010554f",
                "FUN_00108c86",
                "FUN_00104ad6",
                "FUN_0010aa53",
                "FUN_0010e7c2",
                "FUN_0010a181",
                "FUN_0010d21c",
                "FUN_0010a77a",
                "FUN_0010b0fa",
                "FUN_00104943",
                "FUN_0010a2b9",
                "FUN_0010e6a8",
                "FUN_001125fa",
                "FUN_0011378f",
                "FUN_0010a69a",
                "FUN_0010e453",
                "FUN_00109bbb",
                "FUN_0010ab4d"
            ],
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "current_name": "strlen",
            "entrypoint": "0x00104270",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strncasecmp": {
            "called": [
                "strncasecmp"
            ],
            "calling": [
                "FUN_00104ad6",
                "FUN_00116b90"
            ],
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "current_name": "strncasecmp",
            "entrypoint": "0x001045d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strncmp": {
            "called": [
                "strncmp"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010ee3f",
                "FUN_00113fb0"
            ],
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "current_name": "strncmp",
            "entrypoint": "0x001040e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strncpy": {
            "called": [
                "strncpy"
            ],
            "calling": [
                "FUN_00104ad6",
                "FUN_00116b90"
            ],
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "current_name": "strncpy",
            "entrypoint": "0x001040d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strnlen": {
            "called": [
                "strnlen"
            ],
            "calling": [
                "FUN_0011a480"
            ],
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "current_name": "strnlen",
            "entrypoint": "0x00104380",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strrchr": {
            "called": [
                "strrchr"
            ],
            "calling": [
                "FUN_00114cf0"
            ],
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "current_name": "strrchr",
            "entrypoint": "0x001042c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strspn": {
            "called": [
                "strspn"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "current_name": "strspn",
            "entrypoint": "0x001043e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strstr": {
            "called": [
                "strstr"
            ],
            "calling": [
                "FUN_0010d21c",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "current_name": "strstr",
            "entrypoint": "0x001048c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strtod": {
            "called": [
                "strtod"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "current_name": "strtod",
            "entrypoint": "0x00104170",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strtol": {
            "called": [
                "strtol"
            ],
            "calling": [
                "FUN_0010d559",
                "FUN_00104943",
                "FUN_0011173a",
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "current_name": "strtol",
            "entrypoint": "0x00104510",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strtoul": {
            "called": [
                "strtoul"
            ],
            "calling": [
                "FUN_00109a32",
                "FUN_00116b90"
            ],
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "current_name": "strtoul",
            "entrypoint": "0x00104790",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "textdomain": {
            "called": [
                "textdomain"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "current_name": "textdomain",
            "entrypoint": "0x001041d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_0010e439": {
            "additional_data": {
                "0x210": {
                    "1": "string_offset"
                },
                "0x84": {
                    "1": "string_length"
                },
                "param_1": {
                    "1": "data_address",
                    "14": "base_address",
                    "2": "data",
                    "3": "memory_address"
                },
                "param_1 + 0x210": {
                    "1": "address_offset"
                },
                "param_2": {
                    "1": "new_string",
                    "10": "new_value",
                    "2": "new_data",
                    "6": "data"
                },
                "process_string_0010e2f0": {
                    "1": "process_updated_string",
                    "16": "process_string"
                },
                "thunk_FUN_0010e439": {
                    "1": "update_string_value",
                    "2": "assign_and_process_string",
                    "3": "set_param_value",
                    "8": "set_param_and_process_string"
                }
            },
            "called": [
                "FUN_0010e439"
            ],
            "calling": [
                "FUN_0011378f"
            ],
            "code": "\nvoid set_param_and_process_string_thunk_0010e439(long base_address,undefined8 new_value)\n\n{\n  *(undefined8 *)(base_address + 0x210) = new_value;\n  process_string(base_address,0x84,0,0,new_value);\n  return;\n}\n\n",
            "current_name": "set_param_and_process_string_thunk_0010e439",
            "entrypoint": "0x0010e451",
            "imported": false,
            "improved": true,
            "renaming": {
                "param_1": "base_address",
                "param_2": "new_value",
                "process_string_0010e2f0": "process_string",
                "thunk_FUN_0010e439": "set_param_and_process_string_thunk_0010e439"
            },
            "skipped": false,
            "tags": []
        },
        "unlink": {
            "called": [
                "unlink"
            ],
            "calling": [
                "FUN_001199d0",
                "FUN_00108200",
                "FUN_00104ea2"
            ],
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "current_name": "unlink",
            "entrypoint": "0x001040c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "unlink_if_ordinary": {
            "called": [
                "unlink_if_ordinary"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "current_name": "unlink_if_ordinary",
            "entrypoint": "0x00104610",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "utimensat": {
            "called": [
                "utimensat"
            ],
            "calling": [
                "FUN_0011a350"
            ],
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "current_name": "utimensat",
            "entrypoint": "0x00104060",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "vfprintf": {
            "called": [
                "vfprintf"
            ],
            "calling": [
                "FUN_00119e70",
                "FUN_001126c0"
            ],
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "current_name": "vfprintf",
            "entrypoint": "0x00104770",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "write": {
            "called": [
                "write"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "current_name": "write",
            "entrypoint": "0x001041c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xcalloc": {
            "called": [
                "xcalloc"
            ],
            "calling": [
                "FUN_001163d0"
            ],
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "current_name": "xcalloc",
            "entrypoint": "0x00104918",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xexit": {
            "called": [
                "xexit"
            ],
            "calling": [
                "FUN_001083b7",
                "FUN_00115dc0",
                "FUN_00119dd0",
                "FUN_00116b90",
                "FUN_00116030"
            ],
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "current_name": "xexit",
            "entrypoint": "0x00104760",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc": {
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_0010e8a9",
                "FUN_0010a377",
                "FUN_00112925",
                "FUN_0010bd62",
                "FUN_0010eafe",
                "FUN_00114460",
                "FUN_0010e5db",
                "FUN_0010dac0",
                "FUN_0010ba08",
                "FUN_00107880",
                "FUN_00113ce0",
                "FUN_0010bbd3",
                "FUN_00114190",
                "FUN_00115530",
                "FUN_001199d0",
                "FUN_0010afd5",
                "FUN_0010e07c",
                "FUN_00113b98",
                "FUN_0010c7a0",
                "FUN_0010be88",
                "FUN_00109022",
                "FUN_00109ed3",
                "FUN_00104ea2",
                "FUN_00116110",
                "FUN_0010a83e",
                "FUN_0010e9a0",
                "FUN_0010a0e9",
                "FUN_0010c05d",
                "FUN_0011173a",
                "FUN_0010a94e",
                "FUN_00109a0b",
                "FUN_00109b52",
                "FUN_0010bc80",
                "FUN_0010554f",
                "FUN_00116852",
                "FUN_00104ad6",
                "FUN_00113c43",
                "FUN_0010e7c2",
                "FUN_0010a181",
                "FUN_00108d9a",
                "FUN_0010a77a",
                "FUN_0010c218",
                "FUN_0010c139",
                "FUN_0010da0b",
                "FUN_0010e6a8",
                "FUN_0011378f",
                "FUN_0010d882",
                "FUN_0010a69a",
                "FUN_00113da9",
                "FUN_0010ab4d",
                "FUN_0010ebb0",
                "FUN_00114cf0",
                "FUN_00113e23",
                "FUN_00113bfa",
                "FUN_0010ae0e",
                "FUN_00112894",
                "FUN_0010a424",
                "FUN_0011a480",
                "FUN_00114d60",
                "FUN_0010e918",
                "FUN_001163d0",
                "FUN_0010b6ea",
                "FUN_0010c6be",
                "FUN_0010ee3f",
                "FUN_00112904",
                "FUN_0010e842",
                "FUN_00116b90",
                "FUN_00108c86",
                "FUN_0010bf86",
                "FUN_0010aa53",
                "FUN_00114c80",
                "FUN_00108f08",
                "FUN_0010a2b9",
                "FUN_00113d6e",
                "FUN_001125fa",
                "FUN_0010e453",
                "FUN_00116030"
            ],
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "current_name": "xmalloc",
            "entrypoint": "0x00104390",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc_set_program_name": {
            "called": [
                "xmalloc_set_program_name"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "current_name": "xmalloc_set_program_name",
            "entrypoint": "0x001043b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xrealloc": {
            "called": [
                "xrealloc"
            ],
            "calling": [
                "FUN_00109be3",
                "FUN_00119f70",
                "FUN_00109c2e",
                "FUN_0011173a",
                "FUN_0010dac0",
                "FUN_00114dc7",
                "FUN_0010d7d4",
                "FUN_00116b90",
                "FUN_0010e2f0",
                "FUN_0010aa53",
                "FUN_0010abdd",
                "FUN_0010b6ea",
                "FUN_0010e07c",
                "FUN_0010ee3f",
                "FUN_0010ab4d",
                "FUN_00109ed3"
            ],
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "current_name": "xrealloc",
            "entrypoint": "0x001042b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xstrdup": {
            "called": [
                "xstrdup"
            ],
            "calling": [
                "FUN_001088ae",
                "FUN_0011173a",
                "FUN_00116b90",
                "FUN_00109b52",
                "FUN_0010554f",
                "FUN_00104ea2"
            ],
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "current_name": "xstrdup",
            "entrypoint": "0x001043d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_00104020",
            "FUN_00104943",
            "FUN_00104a35",
            "FUN_00104bba",
            "FUN_00104c36",
            "FUN_00104d1c",
            "FUN_001052a2",
            "FUN_0010540e",
            "FUN_001054af",
            "FUN_001081e9",
            "FUN_00108237",
            "FUN_001082c3",
            "FUN_0010870e",
            "FUN_0010871c",
            "FUN_0010875d",
            "FUN_001087da",
            "FUN_001087fd",
            "FUN_00108800",
            "FUN_00108863",
            "FUN_00108898",
            "FUN_001088ae",
            "FUN_00108b3e",
            "FUN_00108e76",
            "FUN_00108ea1",
            "FUN_00108f05",
            "FUN_00108f08",
            "FUN_00108fb9",
            "FUN_00108fe8",
            "FUN_00109022",
            "FUN_0010911f",
            "FUN_0010914e",
            "FUN_00109a0b",
            "FUN_00109b2f",
            "FUN_00109b52",
            "FUN_00109bbb",
            "FUN_00109be3",
            "FUN_00109c2e",
            "FUN_0010ab4d",
            "FUN_0010ae0e",
            "FUN_0010bb52",
            "FUN_0010bbd3",
            "FUN_0010bd62",
            "FUN_0010be1a",
            "FUN_0010be88",
            "FUN_0010bf20",
            "FUN_0010bf86",
            "FUN_0011256b",
            "FUN_001125fa",
            "FUN_0011283f",
            "FUN_00112894",
            "FUN_00112904",
            "FUN_00112925",
            "FUN_001129f4",
            "FUN_00113f20",
            "FUN_00113fb0",
            "FUN_00113fe0",
            "FUN_00114b84",
            "FUN_00114cf0",
            "FUN_00114d50",
            "FUN_00114e00",
            "FUN_00115d00",
            "FUN_00119970",
            "FUN_00119e70",
            "FUN_0011a110",
            "FUN_0011a170",
            "FUN_0011a1b0",
            "FUN_0011a250",
            "FUN_0011a390",
            "FUN_0011a480"
        ],
        [
            "FUN_001053d5",
            "FUN_001083b7",
            "FUN_00108916",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_00109a32",
            "FUN_00109cf4",
            "FUN_00109e76",
            "FUN_0010a0e9",
            "FUN_0010a181",
            "FUN_0010a2b9",
            "FUN_0010a377",
            "FUN_0010a69a",
            "FUN_0010a77a",
            "FUN_0010a94e",
            "FUN_0010aa53",
            "FUN_0010abdd",
            "FUN_0010bc80",
            "FUN_0010c05d",
            "FUN_0010c218",
            "FUN_0010c6be",
            "FUN_001126c0",
            "FUN_00112996",
            "FUN_00113b4a",
            "FUN_00113b71",
            "FUN_00113b98",
            "FUN_00113bfa",
            "FUN_00113c43",
            "FUN_00113cb9",
            "FUN_00113ce0",
            "FUN_00113d3a",
            "FUN_00113d6e",
            "FUN_00113da9",
            "FUN_00113df2",
            "FUN_00113dfe",
            "FUN_00113e17",
            "FUN_00113e23",
            "FUN_00113ede",
            "FUN_00115a90",
            "FUN_00115d70",
            "FUN_00116030",
            "FUN_00116852",
            "FUN_00119dd0",
            "FUN_00119ed0",
            "FUN_00119f70",
            "FUN_0011a0e0"
        ],
        [
            "FUN_00104920",
            "FUN_00104966",
            "FUN_00104ad6",
            "FUN_00104cc1",
            "FUN_00104d25",
            "FUN_001053b5",
            "FUN_0010543c",
            "FUN_00105828",
            "FUN_0010808f",
            "FUN_0010827b",
            "FUN_001082b3",
            "FUN_001082df",
            "FUN_00108375",
            "FUN_001083de",
            "FUN_00108466",
            "FUN_00108808",
            "FUN_0010882c",
            "FUN_00108d9a",
            "FUN_00109ab1",
            "FUN_00109d3e",
            "FUN_00109d5c",
            "FUN_00109d97",
            "FUN_00109dfe",
            "FUN_00109ed3",
            "FUN_0010a83e",
            "FUN_0010add5",
            "FUN_0010adf2",
            "FUN_0010afd5",
            "FUN_0010b800",
            "FUN_0010ba08",
            "FUN_0010bba1",
            "FUN_0010c139",
            "FUN_0010c1c6",
            "FUN_0010c2d2",
            "FUN_0010da0b",
            "FUN_0010e2f0",
            "FUN_00113f50",
            "FUN_00114190",
            "FUN_00114c80",
            "FUN_00114d60",
            "FUN_00114dc7",
            "FUN_00115f30",
            "FUN_00119940",
            "FUN_001199d0",
            "FUN_0011a2e0",
            "FUN_0011a350"
        ],
        [
            "FUN_00104ea2",
            "FUN_00108179",
            "FUN_00108200",
            "FUN_0010829e",
            "FUN_0010a083",
            "FUN_0010a0a0",
            "FUN_0010a0bd",
            "FUN_0010a0d3",
            "FUN_0010a424",
            "FUN_0010b948",
            "FUN_0010c892",
            "FUN_0010e439",
            "thunk_FUN_0010e439",
            "FUN_0010e453",
            "FUN_0010e5db",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_0010e842",
            "FUN_0010e8a9",
            "FUN_0010e918",
            "FUN_0010e9a0",
            "FUN_0010eafe",
            "FUN_0010ebb0",
            "FUN_0010ec73",
            "FUN_0010ed2c",
            "FUN_0010edb4",
            "FUN_0011173a",
            "FUN_00112a33",
            "FUN_00114460",
            "FUN_00114690",
            "FUN_00114c20",
            "FUN_00115970"
        ],
        [
            "FUN_00108072",
            "FUN_00112502",
            "FUN_00115b70"
        ],
        [
            "FUN_001159d0"
        ],
        [
            "FUN_00115530",
            "FUN_00115f50"
        ],
        [
            "FUN_00115dc0",
            "FUN_00116110"
        ],
        [
            "FUN_00112b6e"
        ],
        [
            "FUN_00113b1e"
        ],
        [
            "FUN_0010922b"
        ],
        [
            "FUN_0010c7a0"
        ],
        [
            "FUN_00112c1f"
        ],
        [
            "FUN_0010d21c",
            "FUN_0010d7d4",
            "FUN_00113e5e"
        ],
        [
            "FUN_0010d559",
            "FUN_0010d882"
        ],
        [
            "FUN_0010c95e"
        ],
        [
            "FUN_0010e07c"
        ],
        [
            "FUN_0010dac0"
        ],
        [
            "FUN_0011378f"
        ],
        [
            "FUN_0010554f"
        ],
        [
            "FUN_0010847a"
        ],
        [
            "FUN_0010b6ea"
        ],
        [
            "FUN_0010b0fa"
        ],
        [
            "FUN_001135a5"
        ],
        [
            "FUN_00113a4d"
        ],
        [
            "FUN_00116490"
        ],
        [
            "FUN_001086af"
        ],
        [
            "FUN_001163d0"
        ],
        [
            "FUN_0010551d"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 1167761
}