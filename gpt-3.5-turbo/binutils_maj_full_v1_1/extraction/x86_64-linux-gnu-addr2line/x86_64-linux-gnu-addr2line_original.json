{
  "functions": {
    "_init": {
      "entrypoint": "0x00102000",
      "current_name": "_init",
      "code": "\nint _init(EVP_PKEY_CTX *ctx)\n\n{\n  int iVar1;\n  \n  iVar1 \u003d __gmon_start__();\n  return iVar1;\n}\n\n",
      "renaming": {},
      "calling": [],
      "called": [
        "__gmon_start__"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "FUN_00102020": {
      "entrypoint": "0x00102020",
      "current_name": "FUN_00102020",
      "code": "\nvoid FUN_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [],
      "called": [],
      "improved": false,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "cplus_demangle_name_to_style": {
      "entrypoint": "0x00102030",
      "current_name": "cplus_demangle_name_to_style",
      "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "cplus_demangle_name_to_style"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "free": {
      "entrypoint": "0x00107008",
      "current_name": "free",
      "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "free"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_scan_vma": {
      "entrypoint": "0x00102050",
      "current_name": "bfd_scan_vma",
      "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_scan_vma"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "putchar": {
      "entrypoint": "0x00107018",
      "current_name": "putchar",
      "code": "\n\n\n\nint putchar(int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putchar@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "putchar"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "__errno_location": {
      "entrypoint": "0x00107028",
      "current_name": "__errno_location",
      "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "__errno_location"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "puts": {
      "entrypoint": "0x00107040",
      "current_name": "puts",
      "code": "\n\n\n\nint puts(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* puts@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "puts"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "ferror": {
      "entrypoint": "0x00107048",
      "current_name": "ferror",
      "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "ferror"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_set_default_target": {
      "entrypoint": "0x001020a0",
      "current_name": "bfd_set_default_target",
      "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_set_default_target"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fread": {
      "entrypoint": "0x00107058",
      "current_name": "fread",
      "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fread"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "cplus_demangle_set_style": {
      "entrypoint": "0x001020c0",
      "current_name": "cplus_demangle_set_style",
      "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "cplus_demangle_set_style"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "textdomain": {
      "entrypoint": "0x00107070",
      "current_name": "textdomain",
      "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "textdomain"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_openr": {
      "entrypoint": "0x001020e0",
      "current_name": "bfd_openr",
      "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_openr"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fclose": {
      "entrypoint": "0x00107080",
      "current_name": "fclose",
      "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fclose"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bindtextdomain": {
      "entrypoint": "0x00107090",
      "current_name": "bindtextdomain",
      "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "bindtextdomain"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "dcgettext": {
      "entrypoint": "0x00107098",
      "current_name": "dcgettext",
      "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "dcgettext"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "strlen": {
      "entrypoint": "0x001070a0",
      "current_name": "strlen",
      "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "strlen"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "getopt_long": {
      "entrypoint": "0x001070a8",
      "current_name": "getopt_long",
      "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "getopt_long"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "strchr": {
      "entrypoint": "0x001070b0",
      "current_name": "strchr",
      "code": "\n\n\n\nchar * strchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "strchr"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "printf": {
      "entrypoint": "0x001070b8",
      "current_name": "printf",
      "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "printf"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "xrealloc": {
      "entrypoint": "0x00102160",
      "current_name": "xrealloc",
      "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "xrealloc"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "strrchr": {
      "entrypoint": "0x001070c8",
      "current_name": "strrchr",
      "code": "\n\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strrchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "strrchr"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_target_list": {
      "entrypoint": "0x00102180",
      "current_name": "bfd_target_list",
      "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "usage"
      ],
      "called": [
        "bfd_target_list"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_get_error": {
      "entrypoint": "0x00102190",
      "current_name": "bfd_get_error",
      "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "bfd_nonfatal",
        "main"
      ],
      "called": [
        "bfd_get_error"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "xmalloc": {
      "entrypoint": "0x001021a0",
      "current_name": "xmalloc",
      "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "xmalloc"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "xmalloc_set_program_name": {
      "entrypoint": "0x001021b0",
      "current_name": "xmalloc_set_program_name",
      "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "xmalloc_set_program_name"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "xstrdup": {
      "entrypoint": "0x001021c0",
      "current_name": "xstrdup",
      "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "xstrdup"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fputc": {
      "entrypoint": "0x00107100",
      "current_name": "fputc",
      "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fputc"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_get_section_by_name": {
      "entrypoint": "0x001021e0",
      "current_name": "bfd_get_section_by_name",
      "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_get_section_by_name"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fgets": {
      "entrypoint": "0x00107110",
      "current_name": "fgets",
      "code": "\n\n\n\nchar * fgets(char *__s,int __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fgets@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fgets"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_init": {
      "entrypoint": "0x00102200",
      "current_name": "bfd_init",
      "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_init"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "strcmp": {
      "entrypoint": "0x00107120",
      "current_name": "strcmp",
      "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "strcmp"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "putc": {
      "entrypoint": "0x00107128",
      "current_name": "putc",
      "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "putc"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fprintf": {
      "entrypoint": "0x00107138",
      "current_name": "fprintf",
      "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fprintf"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "ftell": {
      "entrypoint": "0x00107140",
      "current_name": "ftell",
      "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "ftell"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "stat": {
      "entrypoint": "0x00107150",
      "current_name": "stat",
      "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "stat"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "memcpy": {
      "entrypoint": "0x00107158",
      "current_name": "memcpy",
      "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "memcpy"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fflush": {
      "entrypoint": "0x00107160",
      "current_name": "fflush",
      "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fflush"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fseek": {
      "entrypoint": "0x00107168",
      "current_name": "fseek",
      "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fseek"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "setlocale": {
      "entrypoint": "0x00107170",
      "current_name": "setlocale",
      "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "setlocale"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_set_error_program_name": {
      "entrypoint": "0x001022a0",
      "current_name": "bfd_set_error_program_name",
      "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_set_error_program_name"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "memmove": {
      "entrypoint": "0x00107180",
      "current_name": "memmove",
      "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "memmove"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_demangle": {
      "entrypoint": "0x001022c0",
      "current_name": "bfd_demangle",
      "code": "\nvoid bfd_demangle(void)\n\n{\n  bfd_demangle();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_demangle"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fopen": {
      "entrypoint": "0x00107190",
      "current_name": "fopen",
      "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fopen"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "xexit": {
      "entrypoint": "0x001022e0",
      "current_name": "xexit",
      "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "fatal",
        "main"
      ],
      "called": [
        "xexit"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_close": {
      "entrypoint": "0x001022f0",
      "current_name": "bfd_close",
      "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_close"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "vfprintf": {
      "entrypoint": "0x001071a8",
      "current_name": "vfprintf",
      "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "vfprintf"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_check_format_matches": {
      "entrypoint": "0x00102310",
      "current_name": "bfd_check_format_matches",
      "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_check_format_matches"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "strtoul": {
      "entrypoint": "0x001071b8",
      "current_name": "strtoul",
      "code": "\n\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtoul@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "strtoul"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_errmsg": {
      "entrypoint": "0x00102330",
      "current_name": "bfd_errmsg",
      "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "bfd_nonfatal",
        "main"
      ],
      "called": [
        "bfd_errmsg"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "exit": {
      "entrypoint": "0x001071c8",
      "current_name": "exit",
      "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "exit"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_check_format": {
      "entrypoint": "0x00102350",
      "current_name": "bfd_check_format",
      "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_check_format"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_fprintf_vma": {
      "entrypoint": "0x00102360",
      "current_name": "bfd_fprintf_vma",
      "code": "\nvoid bfd_fprintf_vma(void)\n\n{\n  bfd_fprintf_vma();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_fprintf_vma"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_map_over_sections": {
      "entrypoint": "0x00102370",
      "current_name": "bfd_map_over_sections",
      "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_map_over_sections"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "strerror": {
      "entrypoint": "0x001071f8",
      "current_name": "strerror",
      "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "strerror"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "__cxa_finalize": {
      "entrypoint": "0x00107208",
      "current_name": "__cxa_finalize",
      "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "__cxa_finalize"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_nonfatal.cold": {
      "entrypoint": "0x001023a0",
      "current_name": "bfd_nonfatal.cold",
      "code": "\n\n\nvoid bfd_nonfatal_cold(void)\n\n{\n  undefined8 uVar1;\n  long unaff_RBX;\n  undefined8 unaff_retaddr;\n  \n  uVar1 \u003d dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (unaff_RBX !\u003d 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,uVar1,unaff_retaddr);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "bfd_nonfatal"
      ],
      "called": [
        "fflush",
        "fprintf",
        "dcgettext"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "usage": {
      "entrypoint": "0x001023e1",
      "current_name": "usage",
      "code": "\nvoid usage(FILE *param_1,int param_2)\n\n{\n  long lVar1;\n  char *pcVar2;\n  long *__ptr;\n  long *plVar3;\n  \n  lVar1 \u003d program_name;\n  pcVar2 \u003d (char *)dcgettext(0,\"Usage: %s [option(s)] [addr(s)]\\n\",5);\n  fprintf(param_1,pcVar2,lVar1);\n  pcVar2 \u003d (char *)dcgettext(0,\" Convert addresses into line number/file name pairs.\\n\",5);\n  fprintf(param_1,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\n                             \" If no addresses are specified on the command line, they will be read from stdin\\n\"\n                             ,5);\n  fprintf(param_1,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\n                             \" The options are:\\n  @\u003cfile\u003e                Read options from \u003cfile\u003e\\n  -a --addresses         Show addresses\\n  -b --target\u003d\u003cbfdname\u003e  Set the binary file format\\n  -e --exe\u003d\u003cexecutable\u003e  Set the input file name (default is a.out)\\n  -i --inlines           Unwind inlined functions\\n  -j --section\u003d\u003cname\u003e    Read section-relative offsets instead of addresses\\n  -p --pretty-print      Make the output easier to read for humans\\n  -s --basenames         Strip directory names\\n  -f --functions         Show function names\\n  -C --demangle[\u003dstyle]  Demangle function names\\n  -R --recurse-limit     Enable a limit on recursion whilst demangling.  [Default]\\n  -r --no-recurse-limit  Disable a limit on recursion whilst demangling\\n  -h --help              Display this information\\n  -v --version           Display the program\\\u0027s version\\n\\n\"\n                             ,5);\n  fprintf(param_1,pcVar2);\n  lVar1 \u003d program_name;\n  if (program_name \u003d\u003d 0) {\n    pcVar2 \u003d (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(param_1,pcVar2);\n  }\n  else {\n    pcVar2 \u003d (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(param_1,pcVar2,lVar1);\n  }\n  __ptr \u003d (long *)bfd_target_list();\n  plVar3 \u003d __ptr;\n  while( true ) {\n    lVar1 \u003d *plVar3;\n    plVar3 \u003d plVar3 + 1;\n    if (lVar1 \u003d\u003d 0) break;\n    fprintf(param_1,\" %s\");\n  }\n  fputc(10,param_1);\n  free(__ptr);\n  if (param_2 \u003d\u003d 0) {\n    pcVar2 \u003d (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(param_1,pcVar2,\"\u003chttps://sourceware.org/bugzilla/\u003e\");\n  }\n                    \n  exit(param_2);\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "free",
        "bfd_target_list",
        "exit",
        "fprintf",
        "fputc",
        "dcgettext"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "find_address_in_section": {
      "entrypoint": "0x00102540",
      "current_name": "find_address_in_section",
      "code": "\nvoid find_address_in_section(long param_1,long param_2)\n\n{\n  ulong uVar1;\n  \n  if ((found \u003d\u003d \u0027\\0\u0027) \u0026\u0026 ((*(byte *)(param_2 + 0x24) \u0026 1) !\u003d 0)) {\n    uVar1 \u003d *(ulong *)(param_2 + 0x30);\n    if ((uVar1 \u003c\u003d pc) \u0026\u0026 (pc \u003c *(long *)(param_2 + 0x40) + uVar1)) {\n      found \u003d (**(code **)(*(long *)(param_1 + 8) + 0x240))\n                        (param_1,syms,param_2,pc - uVar1,\u0026filename,\u0026functionname,\u0026line,\n                         \u0026discriminator);\n      return;\n    }\n  }\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "report": {
      "entrypoint": "0x001025c0",
      "current_name": "report",
      "code": "\n\n\nvoid report(char *param_1,__gnuc_va_list param_2)\n\n{\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",program_name);\n  vfprintf(_stderr,param_1,param_2);\n  putc(10,_stderr);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "fatal",
        "non_fatal"
      ],
      "called": [
        "fflush",
        "putc",
        "vfprintf",
        "fprintf"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "non_fatal": {
      "entrypoint": "0x00102620",
      "current_name": "non_fatal",
      "code": "\nvoid non_fatal(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n              undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n              undefined8 param_9,undefined8 param_10,undefined8 param_11,undefined8 param_12,\n              undefined8 param_13,undefined8 param_14)\n\n{\n  char in_AL;\n  undefined4 local_d8;\n  undefined4 local_d4;\n  undefined *local_d0;\n  undefined *local_c8;\n  undefined local_b8 [8];\n  undefined8 local_b0;\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined8 local_98;\n  undefined8 local_90;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  undefined4 local_18;\n  \n  if (in_AL !\u003d \u0027\\0\u0027) {\n    local_88 \u003d param_1;\n    local_78 \u003d param_2;\n    local_68 \u003d param_3;\n    local_58 \u003d param_4;\n    local_48 \u003d param_5;\n    local_38 \u003d param_6;\n    local_28 \u003d param_7;\n    local_18 \u003d param_8;\n  }\n  local_d0 \u003d \u0026stack0x00000008;\n  local_d8 \u003d 8;\n  local_c8 \u003d local_b8;\n  local_d4 \u003d 0x30;\n  local_b0 \u003d param_10;\n  local_a8 \u003d param_11;\n  local_a0 \u003d param_12;\n  local_98 \u003d param_13;\n  local_90 \u003d param_14;\n  report(param_9,\u0026local_d8);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "report"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "_start": {
      "entrypoint": "0x001026c0",
      "current_name": "_start",
      "code": "\nvoid processEntry _start(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(main,param_2,\u0026stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
      "renaming": {},
      "calling": [],
      "called": [
        "__libc_start_main",
        "main"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "deregister_tm_clones": {
      "entrypoint": "0x001026f0",
      "current_name": "deregister_tm_clones",
      "code": "\n/* WARNING: Removing unreachable block (ram,0x00102703) */\n/* WARNING: Removing unreachable block (ram,0x0010270f) */\n\nvoid deregister_tm_clones(void)\n\n{\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "__do_global_dtors_aux"
      ],
      "called": [
        "_ITM_deregisterTMCloneTable"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "register_tm_clones": {
      "entrypoint": "0x00102720",
      "current_name": "register_tm_clones",
      "code": "\n/* WARNING: Removing unreachable block (ram,0x00102744) */\n/* WARNING: Removing unreachable block (ram,0x00102750) */\n\nvoid register_tm_clones(void)\n\n{\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "frame_dummy"
      ],
      "called": [
        "_ITM_registerTMCloneTable"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "__do_global_dtors_aux": {
      "entrypoint": "0x00102760",
      "current_name": "__do_global_dtors_aux",
      "code": "\nvoid __do_global_dtors_aux(void)\n\n{\n  if (completed_0 !\u003d \u0027\\0\u0027) {\n    return;\n  }\n  __cxa_finalize(__dso_handle);\n  deregister_tm_clones();\n  completed_0 \u003d 1;\n  return;\n}\n\n",
      "renaming": {},
      "calling": [],
      "called": [
        "__cxa_finalize",
        "deregister_tm_clones"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "frame_dummy": {
      "entrypoint": "0x001027a0",
      "current_name": "frame_dummy",
      "code": "\nvoid frame_dummy(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [],
      "called": [
        "register_tm_clones"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "main": {
      "entrypoint": "0x001027b0",
      "current_name": "main",
      "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined8 main(uint param_1,FILE *param_2)\n\n{\n  byte *pbVar1;\n  uint *puVar2;\n  byte bVar3;\n  ushort uVar4;\n  long lVar5;\n  bool bVar6;\n  bool bVar7;\n  bool bVar8;\n  void *pvVar9;\n  byte bVar10;\n  char cVar11;\n  int iVar12;\n  uint uVar13;\n  int iVar14;\n  undefined4 uVar15;\n  FILE *__stream;\n  byte *__s;\n  long *plVar16;\n  size_t sVar17;\n  byte *__ptr;\n  long lVar18;\n  FILE *pFVar19;\n  stat *psVar20;\n  undefined8 uVar21;\n  int *piVar22;\n  long *plVar23;\n  stat *__s_00;\n  ulong uVar24;\n  FILE *pFVar25;\n  char *pcVar26;\n  byte *pbVar27;\n  char *unaff_RBP;\n  long lVar28;\n  byte *pbVar29;\n  char *pcVar30;\n  long *plVar31;\n  int iVar32;\n  undefined1 *unaff_R12;\n  stat *psVar33;\n  int iVar34;\n  uint uVar35;\n  long *local_148;\n  long *local_140;\n  size_t local_120;\n  long local_118;\n  long *local_d0;\n  stat local_c8;\n  \n  pFVar25 \u003d (FILE *)(ulong)param_1;\n  setlocale(5,\"\");\n  pcVar26 \u003d \"binutils\";\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name \u003d *(long **)param_2;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(program_name);\n  pFVar19 \u003d param_2;\n  __stream \u003d param_2;\n  if (1 \u003c (int)param_1) {\n    iVar14 \u003d 2000;\n    unaff_R12 \u003d (undefined1 *)0x1;\n    local_140 \u003d (long *)0x0;\n    do {\n      iVar32 \u003d (int)unaff_R12;\n      unaff_RBP \u003d (char *)(long)iVar32;\n      local_148 \u003d (long *)((long)unaff_RBP * 8);\n      iVar34 \u003d (int)pFVar25;\n      if (**(char **)(\u0026pFVar19-\u003e_flags + (long)unaff_RBP * 2) \u003d\u003d \u0027@\u0027) {\n        iVar14 \u003d iVar14 + -1;\n        if (iVar14 \u003d\u003d 0) {\n          plVar16 \u003d *(long **)pFVar19;\n          pcVar26 \u003d \"%s: error: too many @-files encountered\\n\";\n          goto LAB_00103239;\n        }\n        pcVar26 \u003d *(char **)(\u0026pFVar19-\u003e_flags + (long)unaff_RBP * 2) + 1;\n        iVar12 \u003d stat(pcVar26,\u0026local_c8);\n        if (iVar12 \u003c 0) goto LAB_00102c30;\n        if ((local_c8.st_mode \u0026 0xf000) \u003d\u003d 0x4000) {\n          do {\n            plVar16 \u003d *(long **)pFVar19;\n            pcVar26 \u003d \"%s: error: @-file refers to a directory\\n\";\nLAB_00103239:\n            fprintf(_stderr,pcVar26,plVar16);\n            xexit(1);\n          } while( true );\n        }\n        __stream \u003d fopen(pcVar26,\"r\");\n        if (__stream \u003d\u003d (FILE *)0x0) goto LAB_00102c30;\n        iVar12 \u003d fseek(__stream,0,2);\n        if (((iVar12 \u003d\u003d -1) ||\n            (pcVar26 \u003d (char *)ftell(__stream), (long *)pcVar26 \u003d\u003d (long *)0xffffffffffffffff)) ||\n           (iVar12 \u003d fseek(__stream,0,0), iVar12 \u003d\u003d -1)) {\nLAB_00102c90:\n          fclose(__stream);\n          if (iVar32 + 1 \u003c iVar34) goto LAB_00102c3a;\n          break;\n        }\n        __s \u003d (byte *)xmalloc((long)pcVar26 + 1);\n        plVar16 \u003d (long *)fread(__s,1,(size_t)pcVar26,__stream);\n        if (((long *)pcVar26 !\u003d plVar16) \u0026\u0026 (iVar12 \u003d ferror(__stream), iVar12 !\u003d 0)) {\n          free(__s);\n          goto LAB_00102c90;\n        }\n        __s[(long)plVar16] \u003d 0;\n        bVar10 \u003d *__s;\n        pbVar27 \u003d __s;\n        if (bVar10 !\u003d 0) {\nLAB_00102980:\n          if (((\u0026_sch_istable)[(ulong)bVar10 * 2] \u0026 0x40) !\u003d 0) goto LAB_00102970;\n          sVar17 \u003d strlen((char *)__s);\n          __ptr \u003d (byte *)xmalloc(sVar17 + 1);\n          plVar16 \u003d (long *)0x0;\n          iVar12 \u003d 0;\n          bVar6 \u003d false;\n          bVar7 \u003d false;\n          bVar8 \u003d false;\n          local_118 \u003d 0;\n          pbVar27 \u003d __s;\n          do {\n            while (((\u0026_sch_istable)[(ulong)*pbVar27 * 2] \u0026 0x40) !\u003d 0) {\n              pbVar27 \u003d pbVar27 + 1;\n            }\n            if ((iVar12 \u003d\u003d 0) || (plVar23 \u003d plVar16 + local_118, iVar12 + -1 \u003c\u003d (int)local_118)) {\n              if (plVar16 \u003d\u003d (long *)0x0) {\n                plVar16 \u003d (long *)xmalloc(0x40);\n                iVar12 \u003d 8;\n                plVar23 \u003d plVar16 + local_118;\n                *plVar23 \u003d 0;\n              }\n              else {\n                iVar12 \u003d iVar12 * 2;\n                plVar16 \u003d (long *)xrealloc(plVar16,(long)iVar12 \u003c\u003c 3);\n                plVar23 \u003d plVar16 + local_118;\n                *plVar23 \u003d 0;\n              }\n            }\n            bVar10 \u003d *pbVar27;\n            pbVar29 \u003d __ptr;\n            while (bVar10 !\u003d 0) {\n              while( true ) {\n                if ((((\u0026_sch_istable)[(ulong)bVar10 * 2] \u0026 0x40) !\u003d 0) \u0026\u0026\n                   (!(bool)(bVar8 | bVar7 | bVar6))) {\n                  bVar8 \u003d false;\n                  bVar6 \u003d false;\n                  bVar7 \u003d false;\n                  goto LAB_00102a9e;\n                }\n                if (!bVar8) break;\n                pbVar27 \u003d pbVar27 + 1;\n                *pbVar29 \u003d bVar10;\n                pbVar29 \u003d pbVar29 + 1;\n                bVar8 \u003d false;\n                bVar10 \u003d *pbVar27;\n                if (bVar10 \u003d\u003d 0) goto LAB_00102a9e;\n              }\n              if (bVar10 \u003d\u003d 0x5c) {\n                bVar8 \u003d true;\n              }\n              else if (bVar7) {\n                if (bVar10 \u003d\u003d 0x27) {\n                  bVar7 \u003d false;\n                }\n                else {\nLAB_00102c0d:\n                  *pbVar29 \u003d bVar10;\n                  pbVar29 \u003d pbVar29 + 1;\n                }\n              }\n              else if (bVar6) {\n                if (bVar10 !\u003d 0x22) goto LAB_00102c0d;\n                bVar6 \u003d false;\n              }\n              else if (bVar10 \u003d\u003d 0x27) {\n                bVar7 \u003d true;\n              }\n              else {\n                if (bVar10 !\u003d 0x22) goto LAB_00102c0d;\n                bVar6 \u003d true;\n              }\n              pbVar1 \u003d pbVar27 + 1;\n              pbVar27 \u003d pbVar27 + 1;\n              bVar10 \u003d *pbVar1;\n            }\nLAB_00102a9e:\n            *pbVar29 \u003d 0;\n            lVar18 \u003d xstrdup(__ptr);\n            *plVar23 \u003d lVar18;\n            plVar16[local_118 + 1] \u003d 0;\n            bVar10 \u003d *pbVar27;\n            bVar3 \u003d (\u0026_sch_istable)[(ulong)bVar10 * 2];\n            while ((bVar3 \u0026 0x40) !\u003d 0) {\n              bVar10 \u003d pbVar27[1];\n              pbVar27 \u003d pbVar27 + 1;\n              bVar3 \u003d (\u0026_sch_istable)[(ulong)bVar10 * 2];\n            }\n            local_118 \u003d local_118 + 1;\n          } while (bVar10 !\u003d 0);\n          free(__ptr);\n          pFVar25 \u003d pFVar19;\n          if (param_2 \u003d\u003d pFVar19) goto LAB_001030d9;\n          goto LAB_00102b38;\n        }\nLAB_001030bb:\n        plVar16 \u003d (long *)xmalloc(8);\n        *plVar16 \u003d 0;\n        if (param_2 \u003d\u003d pFVar19) {\nLAB_001030d9:\n          if (*(long **)pFVar19 \u003d\u003d (long *)0x0) {\n            iVar12 \u003d 0;\n          }\n          else {\n            lVar18 \u003d 1;\n            do {\n              iVar12 \u003d (int)lVar18;\n              lVar28 \u003d lVar18 * 2;\n              lVar18 \u003d lVar18 + 1;\n            } while (*(long *)(\u0026pFVar19-\u003e_flags + lVar28) !\u003d 0);\n          }\n          pFVar25 \u003d (FILE *)xmalloc((long)(iVar12 + 1) \u003c\u003c 3);\n          plVar23 \u003d *(long **)pFVar19;\n          lVar18 \u003d 0;\n          while (plVar23 !\u003d (long *)0x0) {\n            uVar21 \u003d xstrdup();\n            *(undefined8 *)((long)\u0026pFVar25-\u003e_flags + lVar18) \u003d uVar21;\n            plVar23 \u003d *(long **)(pFVar19-\u003e_shortbuf + lVar18 + -0x7b);\n            lVar18 \u003d lVar18 + 8;\n          }\n          *(undefined8 *)((long)\u0026pFVar25-\u003e_flags + lVar18) \u003d 0;\nLAB_00102b38:\n          pFVar19 \u003d pFVar25;\n          if (*plVar16 \u003d\u003d 0) goto LAB_0010318e;\n          pcVar26 \u003d (char *)0x0;\n          do {\n            pcVar26 \u003d (char *)((long)pcVar26 + 1);\n          } while (plVar16[(long)pcVar26] !\u003d 0);\n          local_120 \u003d (long)pcVar26 * 8;\n        }\n        else {\nLAB_0010318e:\n          pcVar26 \u003d (char *)0x0;\n          local_120 \u003d 0;\n        }\n        free(*(void **)(\u0026pFVar19-\u003e_flags + (long)unaff_RBP * 2));\n        pFVar19 \u003d (FILE *)xrealloc(pFVar19,((long)pcVar26 + (long)iVar34 + 1) * 8);\n        uVar35 \u003d iVar34 + -1 + (int)pcVar26;\n        pFVar25 \u003d (FILE *)(ulong)uVar35;\n        memmove(\u0026pFVar19-\u003e_flags + (long)(FILE **)((long)unaff_RBP + (long)pcVar26) * 2,\n                \u0026pFVar19-\u003e_IO_read_ptr + (long)unaff_RBP,(long)(iVar34 - iVar32) \u003c\u003c 3);\n        memcpy(\u0026pFVar19-\u003e_flags + (long)unaff_RBP * 2,plVar16,local_120);\n        free(plVar16);\n        free(__s);\n        fclose(__stream);\n        uVar13 \u003d (int)local_140 + 1;\n        unaff_RBP \u003d (char *)(FILE **)((long)unaff_RBP + (long)pcVar26);\n        unaff_R12 \u003d (undefined1 *)local_148;\n        local_148 \u003d plVar16;\n        if ((int)uVar35 \u003c\u003d (int)uVar13) break;\n      }\n      else {\nLAB_00102c30:\n        if (iVar34 \u003c\u003d iVar32 + 1) break;\nLAB_00102c3a:\n        uVar13 \u003d iVar32 + 1;\n        local_140 \u003d (long *)unaff_R12;\n      }\n      unaff_R12 \u003d (undefined1 *)(ulong)uVar13;\n    } while( true );\n  }\n  iVar14 \u003d bfd_init();\n  if (iVar14 !\u003d 0x118) {\n    uVar21 \u003d dcgettext(0,\"fatal error: libbfd ABI mismatch\",5);\n    fatal(uVar21);\n    goto switchD_00102d16_caseD_43;\n  }\n  pcVar26 \u003d \"x86_64-pc-linux-gnu\";\n  cVar11 \u003d bfd_set_default_target();\n  if (cVar11 \u003d\u003d \u0027\\0\u0027) {\n    uVar15 \u003d bfd_get_error();\n    unaff_RBP \u003d (char *)bfd_errmsg(uVar15);\n    uVar21 \u003d dcgettext(0,\"can\\\u0027t set BFD default target to `%s\\\u0027: %s\",5);\n    fatal(uVar21,\"x86_64-pc-linux-gnu\",unaff_RBP);\n    goto switchD_00102d16_caseD_61;\n  }\n  unaff_R12 \u003d long_options;\n  local_140 \u003d (long *)0x0;\n  unaff_RBP \u003d \"ab:Ce:rRsfHhij:pVv\";\n  local_148 \u003d (long *)0x0;\n  pcVar26 \u003d (char *)(long *)0x0;\nswitchD_00102d16_caseD_0:\n  do {\n    uVar15 \u003d getopt_long(pFVar25,pFVar19,unaff_RBP,unaff_R12,0);\n    switch(uVar15) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 0xb:\n    case 0xc:\n    case 0xd:\n    case 0xe:\n    case 0xf:\n    case 0x10:\n    case 0x11:\n    case 0x12:\n    case 0x13:\n    case 0x14:\n    case 0x15:\n    case 0x16:\n    case 0x17:\n    case 0x18:\n    case 0x19:\n    case 0x1a:\n    case 0x1b:\n    case 0x1c:\n    case 0x1d:\n    case 0x1e:\n    case 0x1f:\n    case 0x20:\n    case 0x21:\n    case 0x22:\n    case 0x23:\n    case 0x24:\n    case 0x25:\n    case 0x26:\n    case 0x27:\n    case 0x28:\n    case 0x29:\n    case 0x2a:\n    case 0x2b:\n    case 0x2c:\n    case 0x2d:\n    case 0x2e:\n    case 0x2f:\n    case 0x30:\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x41:\n    case 0x42:\n    case 0x44:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x49:\n    case 0x4a:\n    case 0x4b:\n    case 0x4c:\n    case 0x4d:\n    case 0x4e:\n    case 0x4f:\n    case 0x50:\n    case 0x51:\n    case 0x53:\n    case 0x54:\n    case 0x55:\n    case 0x57:\n    case 0x58:\n    case 0x59:\n    case 0x5a:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x5e:\n    case 0x5f:\n    case 0x60:\n    case 99:\n    case 100:\n    case 0x67:\n    case 0x6b:\n    case 0x6c:\n    case 0x6d:\n    case 0x6e:\n    case 0x6f:\n    case 0x71:\n    case 0x74:\n    case 0x75:\n      usage(_stderr,1);\n    case 0x6a:\n      local_148 \u003d _optarg;\n      break;\n    case 0x43:\nswitchD_00102d16_caseD_43:\n      __stream \u003d (FILE *)\u0026optarg;\n      do_demangle \u003d \u0027\\x01\u0027;\n      if (_optarg !\u003d (long *)0x0) {\n        iVar14 \u003d cplus_demangle_name_to_style();\n        if (iVar14 \u003d\u003d 0) goto LAB_0010339f;\n        cplus_demangle_set_style();\n      }\n      break;\n    case 0x48:\n    case 0x68:\n      usage(_stdout,0);\nLAB_0010339f:\n      pcVar26 \u003d *(char **)__stream;\n      pcVar30 \u003d \"unknown demangling style `%s\\\u0027\";\nLAB_001033ae:\n      uVar21 \u003d dcgettext(0,pcVar30,5);\n      fatal(uVar21,pcVar26);\nswitchD_00102d16_caseD_72:\n      demangle_flags \u003d demangle_flags | 0x40000;\n      break;\n    case 0x52:\n      demangle_flags \u003d demangle_flags \u0026 0xfffbffff;\n      break;\n    case 0x56:\n    case 0x76:\n      printf(\"GNU %s %s\\n\",\"addr2line\",\"(GNU Binutils for Debian) 2.40\");\n      pcVar26 \u003d (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n      printf(pcVar26);\n      pcVar26 \u003d (char *)dcgettext(0,\n                                  \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                  ,5);\n      printf(pcVar26);\n                    \n      exit(0);\n    case 0x61:\nswitchD_00102d16_caseD_61:\n      with_addresses \u003d \u0027\\x01\u0027;\n      break;\n    case 0x62:\n      local_140 \u003d _optarg;\n      break;\n    case 0x65:\n      pcVar26 \u003d (char *)_optarg;\n      break;\n    case 0x66:\n      with_functions \u003d \u0027\\x01\u0027;\n      break;\n    case 0x69:\n      unwind_inlines \u003d \u0027\\x01\u0027;\n      break;\n    case 0x70:\n      pretty_print \u003d \u0027\\x01\u0027;\n      break;\n    case 0x72:\n      goto switchD_00102d16_caseD_72;\n    case 0x73:\n      goto switchD_00102d16_caseD_73;\n    default:\n      addr \u003d (char **)(\u0026pFVar19-\u003e_flags + (long)_optind * 2);\n      naddr \u003d (int)pFVar25 - _optind;\n      if ((long *)pcVar26 \u003d\u003d (long *)0x0) {\n        pcVar26 \u003d \"a.out\";\n      }\n      iVar14 \u003d stat(pcVar26,\u0026local_c8);\n      if (iVar14 \u003c 0) {\n        piVar22 \u003d __errno_location();\n        pcVar30 \u003d \"\\\u0027%s\\\u0027: No such file\";\n        if (*piVar22 !\u003d 2) {\n          pcVar30 \u003d strerror(*piVar22);\n          uVar21 \u003d dcgettext(0,\"Warning: could not locate \\\u0027%s\\\u0027.  reason: %s\",5);\n          non_fatal(uVar21,pcVar26,pcVar30);\n          return 1;\n        }\nLAB_001039cd:\n        uVar21 \u003d dcgettext(0,pcVar30,5);\n        non_fatal(uVar21,pcVar26);\n        return 1;\n      }\n      if ((local_c8.st_mode \u0026 0xf000) \u003d\u003d 0x4000) {\n        pcVar30 \u003d \"Warning: \\\u0027%s\\\u0027 is a directory\";\n        goto LAB_001039cd;\n      }\n      pcVar30 \u003d \"Warning: \\\u0027%s\\\u0027 is not an ordinary file\";\n      if ((local_c8.st_mode \u0026 0xf000) !\u003d 0x8000) goto LAB_001039cd;\n      pcVar30 \u003d \"Warning: \\\u0027%s\\\u0027 has negative size, probably it is too large\";\n      if (local_c8.st_size \u003c 0) goto LAB_001039cd;\n      if (local_c8.st_size \u003d\u003d 0) {\n        return 1;\n      }\n      pFVar19 \u003d (FILE *)bfd_openr(pcVar26,local_140);\n      if (pFVar19 \u003d\u003d (FILE *)0x0) {\n        bfd_nonfatal(pcVar26);\n        xexit(1);\n        goto LAB_00103a85;\n      }\n      puVar2 \u003d (uint *)((long)\u0026pFVar19-\u003e_IO_buf_end + 4);\n      *puVar2 \u003d *puVar2 | 0x8000;\n      cVar11 \u003d bfd_check_format(pFVar19,2);\n      if (cVar11 !\u003d \u0027\\0\u0027) {\n        pcVar30 \u003d \"%s: cannot get addresses from archive\";\n        goto LAB_001033ae;\n      }\n      cVar11 \u003d bfd_check_format_matches(pFVar19,1,\u0026local_d0);\n      if (cVar11 \u003d\u003d \u0027\\0\u0027) {\n        bfd_nonfatal(*(long **)pFVar19);\n        iVar14 \u003d bfd_get_error();\n        if (iVar14 \u003d\u003d 0xd) {\n          pFVar19 \u003d (FILE *)0x1040e1;\n          fflush(_stdout);\n          plVar16 \u003d program_name;\n          pcVar26 \u003d (char *)dcgettext(0,\"%s: Matching formats:\",5);\n          fprintf(_stderr,pcVar26,plVar16);\n          for (plVar16 \u003d local_d0; *plVar16 !\u003d 0; plVar16 \u003d plVar16 + 1) {\n            fprintf(_stderr,\" %s\");\n          }\n          free(local_d0);\n          fputc(10,_stderr);\n        }\n        goto LAB_00103801;\n      }\n      plVar16 \u003d local_148;\n      if ((local_148 !\u003d (long *)0x0) \u0026\u0026\n         (plVar16 \u003d (long *)bfd_get_section_by_name(pFVar19), plVar16 \u003d\u003d (long *)0x0)) {\n        uVar21 \u003d dcgettext(0,\"%s: cannot find section %s\",5);\n        fatal(uVar21,pcVar26,local_148);\n        goto LAB_0010399c;\n      }\n      local_148 \u003d plVar16;\n      if ((*(byte *)((long)\u0026pFVar19-\u003e_IO_buf_end + 4) \u0026 0x10) \u003d\u003d 0) goto LAB_00102ecd;\n      lVar18 \u003d (**(code **)(pFVar19-\u003e_IO_read_ptr + 0x1f8))(pFVar19);\n      if (lVar18 \u003d\u003d 0) {\n        lVar18 \u003d (**(code **)(pFVar19-\u003e_IO_read_ptr + 0x350))(pFVar19);\n        if (-1 \u003c lVar18) {\n          syms \u003d (void *)xmalloc(lVar18);\n          symcount \u003d (**(code **)(pFVar19-\u003e_IO_read_ptr + 0x358))(pFVar19);\n          if (-1 \u003c symcount) goto LAB_00102ebf;\n        }\n      }\n      else if (-1 \u003c lVar18) {\n        syms \u003d (void *)xmalloc(lVar18);\n        symcount \u003d (**(code **)(pFVar19-\u003e_IO_read_ptr + 0x200))(pFVar19);\n        if (-1 \u003c symcount) {\n          if (symcount \u003d\u003d 0) goto LAB_0010380b;\n          goto LAB_00102ebf;\n        }\n      }\n      bfd_nonfatal(*(long **)pFVar19);\nLAB_00103801:\n      xexit(1);\nLAB_0010380b:\n      lVar18 \u003d (**(code **)(pFVar19-\u003e_IO_read_ptr + 0x350))(pFVar19);\n      if (0 \u003c lVar18) {\n        free(syms);\n        syms \u003d (void *)xmalloc(lVar18);\n        symcount \u003d (**(code **)(pFVar19-\u003e_IO_read_ptr + 0x358))(pFVar19);\n      }\nLAB_00102ebf:\n      if (symcount \u003c 1) {\n        free(syms);\n        syms \u003d (void *)0x0;\n      }\nLAB_00102ecd:\n      unaff_R12 \u003d (undefined1 *)(ulong)naddr;\n      __stream \u003d (FILE *)\u0026DAT_0010400a;\n      if (naddr \u003d\u003d 0) goto LAB_00103065;\nLAB_00102ee7:\n      if ((int)naddr \u003c 1) {\nLAB_0010308a:\n        free(syms);\n        syms \u003d (void *)0x0;\n        bfd_close(pFVar19);\n        return 0;\n      }\n      naddr \u003d naddr - 1;\n      psVar20 \u003d (stat *)*addr;\n      addr \u003d addr + 1;\n      do {\n        bVar10 \u003d *(byte *)\u0026psVar20-\u003est_dev;\n        uVar24 \u003d (ulong)bVar10;\n        uVar4 \u003d *(ushort *)(\u0026_sch_istable + uVar24 * 2);\n        __s_00 \u003d psVar20;\n        while ((uVar4 \u0026 0x40) !\u003d 0) {\n          bVar10 \u003d *(byte *)((long)\u0026__s_00-\u003est_dev + 1);\n          uVar24 \u003d (ulong)bVar10;\n          __s_00 \u003d (stat *)((long)\u0026__s_00-\u003est_dev + 1);\n          uVar4 \u003d *(ushort *)(\u0026_sch_istable + uVar24 * 2);\n        }\n        if ((((uVar4 \u0026 4) \u003d\u003d 0) \u0026\u0026 (bVar10 !\u003d 0)) \u0026\u0026\n           ((psVar33 \u003d __s_00, 5 \u003c (byte)((\u0026_sch_toupper)[uVar24] + 0xbf) ||\n            (pcVar26 \u003d strchr((char *)__s_00,0x2b), pcVar26 !\u003d (char *)0x0)))) {\n          while( true ) {\n            bVar10 \u003d *(byte *)\u0026psVar33-\u003est_dev;\n            psVar20 \u003d psVar33;\n            if (((bVar10 \u003d\u003d 0) || ((*(ushort *)(\u0026_sch_istable + (ulong)bVar10 * 2) \u0026 0x40) !\u003d 0)) ||\n               (bVar10 \u003d\u003d 0x2b)) break;\n            psVar33 \u003d (stat *)((long)\u0026psVar33-\u003est_dev + 1);\n          }\n          while (((\u0026_sch_istable)[(ulong)*(byte *)\u0026psVar20-\u003est_dev * 2] \u0026 0x40) !\u003d 0) {\n            psVar20 \u003d (stat *)((long)\u0026psVar20-\u003est_dev + 1);\n          }\n          uVar24 \u003d 0;\n          if (*(byte *)\u0026psVar20-\u003est_dev \u003d\u003d 0x2b) {\n            uVar24 \u003d strtoul((char *)((long)\u0026psVar20-\u003est_dev + 1),(char **)0x0,0);\n          }\n          pvVar9 \u003d syms;\n          lVar18 \u003d symcount;\n          *(undefined *)\u0026psVar33-\u003est_dev \u003d 0;\n          for (lVar28 \u003d 0; lVar28 \u003c lVar18; lVar28 \u003d lVar28 + 1) {\n            lVar5 \u003d *(long *)((long)pvVar9 + lVar28 * 8);\n            iVar14 \u003d strcmp(*(char **)(lVar5 + 8),(char *)__s_00);\n            if (iVar14 \u003d\u003d 0) {\n              unaff_R12 \u003d (undefined1 *)((ulong)unaff_R12 \u0026 0xffffffff);\n              pc \u003d uVar24 + *(long *)(lVar5 + 0x10) + *(long *)(*(long *)(lVar5 + 0x20) + 0x30);\n              goto LAB_00102f4b;\n            }\n          }\n          unaff_R12 \u003d (undefined1 *)((ulong)unaff_R12 \u0026 0xffffffff);\n          for (lVar18 \u003d 0; lVar18 \u003c symcount; lVar18 \u003d lVar18 + 1) {\n            pcVar26 \u003d (char *)bfd_demangle(pFVar19,*(undefined8 *)\n                                                    (*(long *)((long)syms + lVar18 * 8) + 8),\n                                           demangle_flags);\n            if ((pcVar26 !\u003d (char *)0x0) \u0026\u0026 (iVar14 \u003d strcmp(pcVar26,(char *)__s_00), iVar14 \u003d\u003d 0))\n            {\n              free(pcVar26);\n              lVar18 \u003d *(long *)((long)syms + lVar18 * 8);\n              pc \u003d *(long *)(lVar18 + 0x10) + uVar24 + *(long *)(*(long *)(lVar18 + 0x20) + 0x30);\n              goto LAB_00102f4b;\n            }\n            free(pcVar26);\n          }\n          pc \u003d 0;\n        }\n        else {\n          pc \u003d bfd_scan_vma(psVar20,0,0x10);\n        }\nLAB_00102f4b:\n        if (*(int *)(pFVar19-\u003e_IO_read_ptr + 8) \u003d\u003d 5) {\n          lVar18 \u003d *(long *)(pFVar19-\u003e_IO_read_ptr + 0x380);\n          uVar24 \u003d 1L \u003c\u003c (*(char *)(*(long *)(lVar18 + 0x340) + 10) - 1U \u0026 0x3f);\n          pc \u003d pc \u0026 uVar24 * 2 - 1;\n          if ((*(byte *)(lVar18 + 0x3f1) \u0026 1) !\u003d 0) {\n            pc \u003d (pc ^ uVar24) - uVar24;\n          }\n        }\n        if (with_addresses !\u003d \u0027\\0\u0027) {\n          printf(\"0x\");\n          bfd_fprintf_vma(pFVar19,_stdout,pc);\n          if (pretty_print \u003d\u003d \u0027\\0\u0027) {\n            putchar(10);\n          }\n          else {\n            printf(\": \");\n          }\n        }\n        unaff_RBP \u003d \u0026stdout;\n        found \u003d \u0027\\0\u0027;\n        if (local_148 \u003d\u003d (long *)0x0) {\n          bfd_map_over_sections(pFVar19,find_address_in_section,0);\nLAB_00102fcf:\n          if (found !\u003d \u0027\\0\u0027) {\n            do {\n              if (with_functions !\u003d \u0027\\0\u0027) {\n                plVar16 \u003d functionname;\n                if (functionname \u003d\u003d (long *)0x0) {\nLAB_00103a4a:\n                  plVar23 \u003d (long *)\u0026DAT_0010400a;\n                }\n                else {\n                  if (*(char *)functionname \u003d\u003d \u0027\\0\u0027) {\n                    plVar16 \u003d (long *)0x0;\n                    goto LAB_00103a4a;\n                  }\n                  pcVar26 \u003d (char *)functionname;\n                  pFVar25 \u003d pFVar19;\n                  if (do_demangle \u003d\u003d \u0027\\0\u0027) {\nLAB_001031f4:\n                    plVar16 \u003d (long *)0x0;\n                    plVar23 \u003d (long *)pcVar26;\n                    pFVar19 \u003d pFVar25;\n                  }\n                  else {\nLAB_0010399c:\n                    plVar16 \u003d (long *)bfd_demangle(pFVar25,pcVar26,demangle_flags);\n                    plVar23 \u003d plVar16;\n                    pFVar19 \u003d pFVar25;\n                    if (plVar16 \u003d\u003d (long *)0x0) goto LAB_001031f4;\n                  }\n                }\n                printf(\"%s\",plVar23);\n                if (pretty_print \u003d\u003d \u0027\\0\u0027) {\n                  putchar(10);\n                }\n                else {\n                  pcVar26 \u003d (char *)dcgettext(0,\u0026DAT_001040f1,5);\n                  printf(pcVar26);\n                }\n                free(plVar16);\n              }\n              pFVar25 \u003d filename;\n              if (base_names \u003d\u003d \u0027\\0\u0027) {\n                if (filename \u003d\u003d (FILE *)0x0) {\n                  pFVar25 \u003d __stream;\n                }\n              }\n              else if (filename \u003d\u003d (FILE *)0x0) {\n                pFVar25 \u003d (FILE *)\u0026DAT_0010400a;\n              }\n              else {\n                pcVar26 \u003d strrchr((char *)filename,0x2f);\n                if (pcVar26 !\u003d (char *)0x0) {\n                  pFVar25 \u003d (FILE *)(pcVar26 + 1);\n                  filename \u003d pFVar25;\n                }\n              }\n              printf(\"%s:\",pFVar25);\n              pFVar25 \u003d pFVar19;\n              if (line \u003d\u003d 0) {\nLAB_00103a85:\n                puts(\"?\");\n                pFVar19 \u003d pFVar25;\n              }\n              else if (discriminator \u003d\u003d 0) {\n                printf(\"%u\\n\");\n              }\n              else {\n                printf(\"%u (discriminator %u)\\n\");\n              }\n              if (unwind_inlines \u003d\u003d \u0027\\0\u0027) {\nLAB_0010304c:\n                found \u003d \u0027\\0\u0027;\n                goto LAB_00103053;\n              }\n              found \u003d (**(code **)(pFVar19-\u003e_IO_read_ptr + 600))\n                                (pFVar19,\u0026filename,\u0026functionname,\u0026line);\n              plVar16 \u003d functionname;\n              if (found \u003d\u003d \u0027\\0\u0027) goto LAB_00103053;\n              while (functionname \u003d plVar16, pretty_print \u003d\u003d \u0027\\0\u0027) {\n                if (with_functions !\u003d \u0027\\0\u0027) {\n                  plVar23 \u003d plVar16;\n                  if (plVar16 \u003d\u003d (long *)0x0) {\nLAB_00103b7b:\n                    plVar31 \u003d (long *)\u0026DAT_0010400a;\n                  }\n                  else {\n                    if (*(char *)plVar16 \u003d\u003d \u0027\\0\u0027) {\n                      plVar23 \u003d (long *)0x0;\n                      goto LAB_00103b7b;\n                    }\n                    if ((do_demangle \u003d\u003d \u0027\\0\u0027) ||\n                       (plVar23 \u003d (long *)bfd_demangle(pFVar19,plVar16,demangle_flags),\n                       plVar31 \u003d plVar23, plVar23 \u003d\u003d (long *)0x0)) {\n                      plVar23 \u003d (long *)0x0;\n                      plVar31 \u003d plVar16;\n                    }\n                  }\n                  printf(\"%s\",plVar31);\n                  if (pretty_print \u003d\u003d \u0027\\0\u0027) {\n                    putchar(10);\n                  }\n                  else {\n                    pcVar26 \u003d (char *)dcgettext(0,\u0026DAT_001040f1,5);\n                    printf(pcVar26);\n                  }\n                  free(plVar23);\n                }\n                pFVar25 \u003d filename;\n                if (base_names \u003d\u003d \u0027\\0\u0027) {\n                  if (filename \u003d\u003d (FILE *)0x0) {\n                    pFVar25 \u003d (FILE *)\u0026DAT_0010400a;\n                  }\n                }\n                else if (filename \u003d\u003d (FILE *)0x0) {\n                  pFVar25 \u003d (FILE *)\u0026DAT_0010400a;\n                }\n                else {\n                  pcVar26 \u003d strrchr((char *)filename,0x2f);\n                  if (pcVar26 !\u003d (char *)0x0) {\n                    pFVar25 \u003d (FILE *)(pcVar26 + 1);\n                    filename \u003d pFVar25;\n                  }\n                }\n                printf(\"%s:\",pFVar25);\n                if (line \u003d\u003d 0) {\n                  puts(\"?\");\n                }\n                else if (discriminator \u003d\u003d 0) {\n                  printf(\"%u\\n\");\n                }\n                else {\n                  printf(\"%u (discriminator %u)\\n\");\n                }\n                if (unwind_inlines \u003d\u003d \u0027\\0\u0027) goto LAB_0010304c;\n                found \u003d (**(code **)(pFVar19-\u003e_IO_read_ptr + 600))\n                                  (pFVar19,\u0026filename,\u0026functionname,\u0026line);\n                plVar16 \u003d functionname;\n                if (found \u003d\u003d \u0027\\0\u0027) {\n                  found \u003d \u0027\\0\u0027;\n                  goto LAB_00103053;\n                }\n              }\n              pcVar26 \u003d (char *)dcgettext(0,\" (inlined by) \",5);\n              printf(pcVar26);\n            } while( true );\n          }\n        }\n        else if (((*(byte *)((long)local_148 + 0x24) \u0026 1) !\u003d 0) \u0026\u0026 (pc \u003c (ulong)local_148[8])) {\n          found \u003d (**(code **)(pFVar19-\u003e_IO_read_ptr + 0x240))\n                            (pFVar19,syms,local_148,pc,\u0026filename,\u0026functionname,\u0026line,\u0026discriminator)\n          ;\n          goto LAB_00102fcf;\n        }\n        if (with_functions !\u003d \u0027\\0\u0027) {\n          if (pretty_print \u003d\u003d \u0027\\0\u0027) {\n            puts(\"??\");\n          }\n          else {\n            printf(\"?? \");\n          }\n        }\n        puts(\"??:0\");\nLAB_00103053:\n        fflush(*(FILE **)unaff_RBP);\n        if ((int)unaff_R12 !\u003d 0) goto LAB_00102ee7;\nLAB_00103065:\n        pcVar26 \u003d fgets((char *)\u0026local_c8,100,_stdin);\n        psVar20 \u003d \u0026local_c8;\n        if (pcVar26 \u003d\u003d (char *)0x0) goto LAB_0010308a;\n      } while( true );\n    }\n  } while( true );\nLAB_00102970:\n  bVar10 \u003d pbVar27[1];\n  pbVar27 \u003d pbVar27 + 1;\n  if (bVar10 \u003d\u003d 0) goto LAB_001030bb;\n  goto LAB_00102980;\nswitchD_00102d16_caseD_73:\n  base_names \u003d \u0027\\x01\u0027;\n  goto switchD_00102d16_caseD_0;\n}\n\n",
      "renaming": {},
      "calling": [
        "_start"
      ],
      "called": [
        "getopt_long",
        "fclose",
        "strerror",
        "memmove",
        "non_fatal",
        "bfd_scan_vma",
        "free",
        "bfd_openr",
        "bfd_set_default_target",
        "bfd_nonfatal",
        "fread",
        "ftell",
        "fgets",
        "bfd_errmsg",
        "strchr",
        "putchar",
        "printf",
        "bfd_set_error_program_name",
        "setlocale",
        "bfd_get_section_by_name",
        "xmalloc_set_program_name",
        "fprintf",
        "strrchr",
        "dcgettext",
        "strtoul",
        "exit",
        "cplus_demangle_set_style",
        "xstrdup",
        "stat",
        "fflush",
        "ferror",
        "bindtextdomain",
        "xmalloc",
        "cplus_demangle_name_to_style",
        "strlen",
        "bfd_init",
        "memcpy",
        "fatal",
        "bfd_map_over_sections",
        "find_address_in_section",
        "puts",
        "bfd_get_error",
        "textdomain",
        "fputc",
        "usage",
        "bfd_fprintf_vma",
        "__errno_location",
        "bfd_check_format",
        "fseek",
        "bfd_check_format_matches",
        "bfd_close",
        "fopen",
        "xrealloc",
        "strcmp",
        "xexit",
        "bfd_demangle"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fatal": {
      "entrypoint": "0x00103bd0",
      "current_name": "fatal",
      "code": "\n\n\nvoid fatal(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n          undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n          undefined8 param_9,undefined8 param_10,undefined8 param_11,undefined8 param_12,\n          undefined8 param_13,undefined8 param_14)\n\n{\n  char in_AL;\n  int iVar1;\n  undefined8 uVar2;\n  long lVar3;\n  undefined8 in_R10;\n  undefined4 local_d8;\n  undefined4 local_d4;\n  undefined *local_d0;\n  undefined *local_c8;\n  undefined local_b8 [8];\n  undefined8 local_b0;\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined8 local_98;\n  undefined8 local_90;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  undefined4 local_18;\n  \n  if (in_AL !\u003d \u0027\\0\u0027) {\n    local_88 \u003d param_1;\n    local_78 \u003d param_2;\n    local_68 \u003d param_3;\n    local_58 \u003d param_4;\n    local_48 \u003d param_5;\n    local_38 \u003d param_6;\n    local_28 \u003d param_7;\n    local_18 \u003d param_8;\n  }\n  local_d0 \u003d \u0026stack0x00000008;\n  local_d8 \u003d 8;\n  local_c8 \u003d local_b8;\n  local_d4 \u003d 0x30;\n  local_b0 \u003d param_10;\n  local_a8 \u003d param_11;\n  local_a0 \u003d param_12;\n  local_98 \u003d param_13;\n  local_90 \u003d param_14;\n  report(param_9,\u0026local_d8);\n  lVar3 \u003d 1;\n  xexit();\n  iVar1 \u003d bfd_get_error();\n  if (iVar1 \u003d\u003d 0) {\n    uVar2 \u003d dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    uVar2 \u003d bfd_errmsg(iVar1);\n  }\n  fflush(_stdout);\n  if (lVar3 !\u003d 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name,lVar3,uVar2,in_R10);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,uVar2,in_R10);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "xexit",
        "report"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_nonfatal": {
      "entrypoint": "0x00103c70",
      "current_name": "bfd_nonfatal",
      "code": "\n\n\nvoid bfd_nonfatal(long param_1)\n\n{\n  int iVar1;\n  undefined8 uVar2;\n  undefined8 in_R10;\n  \n  iVar1 \u003d bfd_get_error();\n  if (iVar1 \u003d\u003d 0) {\n    uVar2 \u003d dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    uVar2 \u003d bfd_errmsg(iVar1);\n  }\n  fflush(_stdout);\n  if (param_1 !\u003d 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name,param_1,uVar2,in_R10);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,uVar2,in_R10);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_errmsg",
        "bfd_nonfatal.cold",
        "bfd_get_error"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "_fini": {
      "entrypoint": "0x00103cd0",
      "current_name": "_fini",
      "code": "\nvoid _fini(void)\n\n{\n  return;\n}\n\n",
      "renaming": {},
      "calling": [],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "__libc_start_main": {
      "entrypoint": "0x00107020",
      "current_name": "__libc_start_main",
      "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "_start"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    }
  },
  "layers": [],
  "locked_functions": [],
  "used_tokens": 0
}