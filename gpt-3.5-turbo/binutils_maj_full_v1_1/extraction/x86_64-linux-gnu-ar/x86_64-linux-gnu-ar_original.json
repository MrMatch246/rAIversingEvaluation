{
  "functions": {
    "_init": {
      "entrypoint": "0x00102000",
      "current_name": "_init",
      "code": "\nint _init(EVP_PKEY_CTX *ctx)\n\n{\n  int iVar1;\n  \n  iVar1 \u003d __gmon_start__();\n  return iVar1;\n}\n\n",
      "renaming": {},
      "calling": [],
      "called": [
        "__gmon_start__"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "FUN_00102020": {
      "entrypoint": "0x00102020",
      "current_name": "FUN_00102020",
      "code": "\nvoid FUN_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [],
      "called": [],
      "improved": false,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "free": {
      "entrypoint": "0x0010e000",
      "current_name": "free",
      "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "free"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "utimensat": {
      "entrypoint": "0x0010e008",
      "current_name": "utimensat",
      "code": "\n\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* utimensat@GLIBC_2.6 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "utimensat"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_cache_close": {
      "entrypoint": "0x00102050",
      "current_name": "bfd_cache_close",
      "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "remove_output.cold",
        "yyparse.isra.0"
      ],
      "called": [
        "bfd_cache_close"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "__errno_location": {
      "entrypoint": "0x0010e020",
      "current_name": "__errno_location",
      "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "__errno_location"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "unlink": {
      "entrypoint": "0x0010e028",
      "current_name": "unlink",
      "code": "\n\n\n\nint unlink(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* unlink@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "unlink"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_make_writable": {
      "entrypoint": "0x00102080",
      "current_name": "bfd_make_writable",
      "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_make_writable"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_plugin_set_plugin": {
      "entrypoint": "0x00102090",
      "current_name": "bfd_plugin_set_plugin",
      "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_plugin_set_plugin"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_make_readable": {
      "entrypoint": "0x001020a0",
      "current_name": "bfd_make_readable",
      "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_make_readable"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "ferror": {
      "entrypoint": "0x0010e058",
      "current_name": "ferror",
      "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "ferror"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "isatty": {
      "entrypoint": "0x0010e060",
      "current_name": "isatty",
      "code": "\n\n\n\nint isatty(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* isatty@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "isatty"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_set_default_target": {
      "entrypoint": "0x001020d0",
      "current_name": "bfd_set_default_target",
      "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_set_default_target"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fread": {
      "entrypoint": "0x0010e070",
      "current_name": "fread",
      "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fread"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_set_archive_head": {
      "entrypoint": "0x001020f0",
      "current_name": "bfd_set_archive_head",
      "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "write_archive.cold"
      ],
      "called": [
        "bfd_set_archive_head"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "filename_cmp": {
      "entrypoint": "0x00102100",
      "current_name": "filename_cmp",
      "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "map_over_members",
        "map_over_list",
        "main",
        "replace_members.cold",
        "get_pos_bfd.cold",
        "yyparse.isra.0"
      ],
      "called": [
        "filename_cmp"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "write": {
      "entrypoint": "0x0010e090",
      "current_name": "write",
      "code": "\n\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* write@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "write"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "textdomain": {
      "entrypoint": "0x0010e098",
      "current_name": "textdomain",
      "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "textdomain"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_openr": {
      "entrypoint": "0x00102130",
      "current_name": "bfd_openr",
      "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "ar_open",
        "replace_members.cold",
        "yyparse.isra.0",
        "open_inarch.cold",
        "open_inarch"
      ],
      "called": [
        "bfd_openr"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fclose": {
      "entrypoint": "0x0010e0a8",
      "current_name": "fclose",
      "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fclose"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "ctime": {
      "entrypoint": "0x0010e0b8",
      "current_name": "ctime",
      "code": "\n\n\n\nchar * ctime(time_t *__timer)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ctime@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "ctime"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bindtextdomain": {
      "entrypoint": "0x0010e0c0",
      "current_name": "bindtextdomain",
      "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "bindtextdomain"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "dcgettext": {
      "entrypoint": "0x0010e0c8",
      "current_name": "dcgettext",
      "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "dcgettext"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "strlen": {
      "entrypoint": "0x0010e0d0",
      "current_name": "strlen",
      "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "strlen"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "getopt_long": {
      "entrypoint": "0x0010e0d8",
      "current_name": "getopt_long",
      "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "getopt_long"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "printf": {
      "entrypoint": "0x0010e0e0",
      "current_name": "printf",
      "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "printf"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "xrealloc": {
      "entrypoint": "0x001021b0",
      "current_name": "xrealloc",
      "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "xrealloc"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "strrchr": {
      "entrypoint": "0x0010e0f0",
      "current_name": "strrchr",
      "code": "\n\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strrchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "strrchr"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "dup": {
      "entrypoint": "0x0010e0f8",
      "current_name": "dup",
      "code": "\n\n\n\nint dup(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dup@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "dup"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "lseek": {
      "entrypoint": "0x0010e100",
      "current_name": "lseek",
      "code": "\n\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* lseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "lseek"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fputs": {
      "entrypoint": "0x0010e108",
      "current_name": "fputs",
      "code": "\n\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputs@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fputs"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "concat": {
      "entrypoint": "0x00102200",
      "current_name": "concat",
      "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "FUN_00105a68",
        "open_output_file.isra.0.cold"
      ],
      "called": [
        "concat"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_target_list": {
      "entrypoint": "0x00102210",
      "current_name": "bfd_target_list",
      "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "list_supported_targets"
      ],
      "called": [
        "bfd_target_list"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_get_error": {
      "entrypoint": "0x00102220",
      "current_name": "bfd_get_error",
      "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "bfd_nonfatal",
        "main",
        "open_inarch"
      ],
      "called": [
        "bfd_get_error"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "xmalloc": {
      "entrypoint": "0x00102230",
      "current_name": "xmalloc",
      "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "normalize.cold",
        "make_tempname",
        "main",
        "print_contents",
        "replace_members.cold",
        "extract_file.cold"
      ],
      "called": [
        "xmalloc"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_set_error": {
      "entrypoint": "0x00102240",
      "current_name": "bfd_set_error",
      "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main",
        "open_inarch"
      ],
      "called": [
        "bfd_set_error"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "xmalloc_set_program_name": {
      "entrypoint": "0x00102250",
      "current_name": "xmalloc_set_program_name",
      "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "xmalloc_set_program_name"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "close": {
      "entrypoint": "0x0010e148",
      "current_name": "close",
      "code": "\n\n\n\nint close(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* close@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "close"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "xstrdup": {
      "entrypoint": "0x00102270",
      "current_name": "xstrdup",
      "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "write_archive",
        "ar_open",
        "main",
        "yyparse.isra.0"
      ],
      "called": [
        "xstrdup"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fputc": {
      "entrypoint": "0x0010e158",
      "current_name": "fputc",
      "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fputc"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "read": {
      "entrypoint": "0x0010e160",
      "current_name": "read",
      "code": "\n\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* read@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "read"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_create": {
      "entrypoint": "0x001022a0",
      "current_name": "bfd_create",
      "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_create"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_init": {
      "entrypoint": "0x001022b0",
      "current_name": "bfd_init",
      "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_init"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "lbasename": {
      "entrypoint": "0x001022c0",
      "current_name": "lbasename",
      "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main",
        "normalize",
        "replace_members.cold",
        "FUN_00102e6f"
      ],
      "called": [
        "lbasename"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "calloc": {
      "entrypoint": "0x0010e180",
      "current_name": "calloc",
      "code": "\n\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* calloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "calloc"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "strcmp": {
      "entrypoint": "0x0010e188",
      "current_name": "strcmp",
      "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "strcmp"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "putc": {
      "entrypoint": "0x0010e190",
      "current_name": "putc",
      "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "putc"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_fdopenr": {
      "entrypoint": "0x00102300",
      "current_name": "bfd_fdopenr",
      "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_fdopenr"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fprintf": {
      "entrypoint": "0x0010e1a8",
      "current_name": "fprintf",
      "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fprintf"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "ftell": {
      "entrypoint": "0x0010e1b0",
      "current_name": "ftell",
      "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "ftell"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "stat": {
      "entrypoint": "0x0010e1c0",
      "current_name": "stat",
      "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "stat"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_set_format": {
      "entrypoint": "0x00102340",
      "current_name": "bfd_set_format",
      "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "write_archive",
        "ar_open",
        "main",
        "yyparse.isra.0",
        "open_inarch"
      ],
      "called": [
        "bfd_set_format"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "strtol": {
      "entrypoint": "0x0010e1d0",
      "current_name": "strtol",
      "code": "\n\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtol@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "strtol"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "clearerr": {
      "entrypoint": "0x0010e1d8",
      "current_name": "clearerr",
      "code": "\n\n\n\nvoid clearerr(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* clearerr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "clearerr"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_bwrite": {
      "entrypoint": "0x00102370",
      "current_name": "bfd_bwrite",
      "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_bwrite"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "memcpy": {
      "entrypoint": "0x0010e1e8",
      "current_name": "memcpy",
      "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "memcpy"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fileno": {
      "entrypoint": "0x0010e1f0",
      "current_name": "fileno",
      "code": "\n\n\n\nint fileno(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fileno@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fileno"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_plugin_set_program_name": {
      "entrypoint": "0x001023a0",
      "current_name": "bfd_plugin_set_program_name",
      "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_plugin_set_program_name"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "malloc": {
      "entrypoint": "0x0010e200",
      "current_name": "malloc",
      "code": "\n\n\n\nvoid * malloc(size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* malloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "malloc"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fflush": {
      "entrypoint": "0x0010e208",
      "current_name": "fflush",
      "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fflush"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "unlink_if_ordinary": {
      "entrypoint": "0x001023d0",
      "current_name": "unlink_if_ordinary",
      "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "remove_output.cold"
      ],
      "called": [
        "unlink_if_ordinary"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "mkstemp": {
      "entrypoint": "0x0010e218",
      "current_name": "mkstemp",
      "code": "\n\n\n\nint mkstemp(char *__template)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkstemp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "mkstemp"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fseek": {
      "entrypoint": "0x0010e220",
      "current_name": "fseek",
      "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fseek"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "realloc": {
      "entrypoint": "0x0010e228",
      "current_name": "realloc",
      "code": "\n\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* realloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "realloc"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "setlocale": {
      "entrypoint": "0x0010e238",
      "current_name": "setlocale",
      "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "setlocale"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_openw": {
      "entrypoint": "0x00102420",
      "current_name": "bfd_openw",
      "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "yyparse.isra.0",
        "open_inarch"
      ],
      "called": [
        "bfd_openw"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "chmod": {
      "entrypoint": "0x0010e248",
      "current_name": "chmod",
      "code": "\n\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* chmod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "chmod"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_set_error_program_name": {
      "entrypoint": "0x00102440",
      "current_name": "bfd_set_error_program_name",
      "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_set_error_program_name"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "memmove": {
      "entrypoint": "0x0010e258",
      "current_name": "memmove",
      "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "memmove"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "open": {
      "entrypoint": "0x0010e260",
      "current_name": "open",
      "code": "\n\n\n\nint open(char *__file,int __oflag,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* open@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "open"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fopen": {
      "entrypoint": "0x0010e268",
      "current_name": "fopen",
      "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fopen"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "xexit": {
      "entrypoint": "0x00102480",
      "current_name": "xexit",
      "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
      "renaming": {},
      "calling": [
        "write_archive.cold",
        "maybequit",
        "bfd_fatal",
        "main",
        "ranlib_only",
        "fatal",
        "ranlib_usage",
        "FUN_00105a68",
        "usage",
        "open_inarch"
      ],
      "called": [
        "xexit"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_close": {
      "entrypoint": "0x00102490",
      "current_name": "bfd_close",
      "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "write_archive.cold",
        "main",
        "yyparse.isra.0",
        "open_inarch.cold",
        "open_inarch"
      ],
      "called": [
        "bfd_close"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "perror": {
      "entrypoint": "0x0010e280",
      "current_name": "perror",
      "code": "\n\n\n\nvoid perror(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* perror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "perror"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "vfprintf": {
      "entrypoint": "0x0010e288",
      "current_name": "vfprintf",
      "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "vfprintf"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_check_format_matches": {
      "entrypoint": "0x001024c0",
      "current_name": "bfd_check_format_matches",
      "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main",
        "open_inarch"
      ],
      "called": [
        "bfd_check_format_matches"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_errmsg": {
      "entrypoint": "0x001024d0",
      "current_name": "bfd_errmsg",
      "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "bfd_nonfatal",
        "main"
      ],
      "called": [
        "bfd_errmsg"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_find_target": {
      "entrypoint": "0x001024e0",
      "current_name": "bfd_find_target",
      "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_find_target"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "sprintf": {
      "entrypoint": "0x0010e2a8",
      "current_name": "sprintf",
      "code": "\n\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* sprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "sprintf"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "exit": {
      "entrypoint": "0x0010e2b0",
      "current_name": "exit",
      "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "exit"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fwrite": {
      "entrypoint": "0x0010e2b8",
      "current_name": "fwrite",
      "code": "\n\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fwrite"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_check_format": {
      "entrypoint": "0x00102520",
      "current_name": "bfd_check_format",
      "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "ar_open",
        "do_ar_emul_append.constprop.0",
        "open_inarch.cold"
      ],
      "called": [
        "bfd_check_format"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_openr_next_archived_file": {
      "entrypoint": "0x00102530",
      "current_name": "bfd_openr_next_archived_file",
      "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "ar_open",
        "do_ar_emul_append.constprop.0",
        "open_inarch"
      ],
      "called": [
        "bfd_openr_next_archived_file"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_bread": {
      "entrypoint": "0x00102540",
      "current_name": "bfd_bread",
      "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "print_contents",
        "extract_file.cold"
      ],
      "called": [
        "bfd_bread"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "strerror": {
      "entrypoint": "0x0010e2e0",
      "current_name": "strerror",
      "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "strerror"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "getc": {
      "entrypoint": "0x0010e2e8",
      "current_name": "getc",
      "code": "\n\n\n\nint getc(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "getc"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_fdopenw": {
      "entrypoint": "0x00102570",
      "current_name": "bfd_fdopenw",
      "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "write_archive",
        "ar_open"
      ],
      "called": [
        "bfd_fdopenw"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_seek": {
      "entrypoint": "0x00102580",
      "current_name": "bfd_seek",
      "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "print_contents",
        "extract_file.cold"
      ],
      "called": [
        "bfd_seek"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "__cxa_finalize": {
      "entrypoint": "0x0010e308",
      "current_name": "__cxa_finalize",
      "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "__cxa_finalize"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "get_file_size.cold": {
      "entrypoint": "0x001025a0",
      "current_name": "get_file_size.cold",
      "code": "\nundefined8 get_file_size_cold(void)\n\n{\n  int *piVar1;\n  undefined8 uVar2;\n  \n  piVar1 \u003d __errno_location();\n  if (*piVar1 \u003d\u003d 2) {\n    uVar2 \u003d dcgettext(0,\"\\\u0027%s\\\u0027: No such file\",5);\n    non_fatal(uVar2);\n  }\n  else {\n    strerror(*piVar1);\n    uVar2 \u003d dcgettext(0,\"Warning: could not locate \\\u0027%s\\\u0027.  reason: %s\",5);\n    non_fatal(uVar2);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
      "renaming": {},
      "calling": [
        "get_file_size"
      ],
      "called": [
        "__errno_location",
        "strerror",
        "dcgettext",
        "non_fatal"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "list_supported_targets": {
      "entrypoint": "0x0010266f",
      "current_name": "list_supported_targets",
      "code": "\nvoid list_supported_targets(long param_1,FILE *param_2)\n\n{\n  long lVar1;\n  char *pcVar2;\n  long *__ptr;\n  long *plVar3;\n  \n  if (param_1 \u003d\u003d 0) {\n    pcVar2 \u003d (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(param_2,pcVar2);\n  }\n  else {\n    pcVar2 \u003d (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(param_2,pcVar2,param_1);\n  }\n  __ptr \u003d (long *)bfd_target_list();\n  plVar3 \u003d __ptr;\n  while( true ) {\n    lVar1 \u003d *plVar3;\n    plVar3 \u003d plVar3 + 1;\n    if (lVar1 \u003d\u003d 0) break;\n    fprintf(param_2,\" %s\");\n  }\n  fputc(10,param_2);\n  free(__ptr);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "ranlib_usage",
        "usage"
      ],
      "called": [
        "fprintf",
        "fputc",
        "bfd_target_list",
        "free",
        "dcgettext"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "open_inarch.cold": {
      "entrypoint": "0x00102710",
      "current_name": "open_inarch.cold",
      "code": "\nundefined8 * open_inarch_cold(void)\n\n{\n  long *plVar1;\n  char cVar2;\n  byte bVar3;\n  int iVar4;\n  long lVar5;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  undefined8 *puVar8;\n  undefined8 unaff_RBP;\n  undefined8 in_stack_00000008;\n  \n  lVar5 \u003d bfd_openr();\n  if (lVar5 !\u003d 0) {\n    cVar2 \u003d bfd_check_format(lVar5,1);\n    if (cVar2 !\u003d \u0027\\0\u0027) {\n      target \u003d **(undefined8 **)(lVar5 + 8);\n    }\n    bfd_close(lVar5);\n  }\n  puVar8 \u003d (undefined8 *)bfd_openw();\n  if (((puVar8 !\u003d (undefined8 *)0x0) \u0026\u0026 (cVar2 \u003d bfd_set_format(puVar8,2), cVar2 !\u003d \u0027\\0\u0027)) \u0026\u0026\n     (cVar2 \u003d bfd_close(puVar8), cVar2 !\u003d \u0027\\0\u0027)) {\n    if (silent_create \u003d\u003d 0) goto LAB_00102826;\n    goto LAB_001053b7;\n  }\n  bfd_fatal();\n  do {\n    bVar3 \u003d *(byte *)((long)puVar8 + 0x49) \u003e\u003e 4 \u0026 1;\n    if (make_thin_archive \u003d\u003d \u0027\\0\u0027) {\n      if (bVar3 !\u003d 0) {\n        uVar7 \u003d *puVar8;\n        uVar6 \u003d dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        fatal(uVar6,uVar7);\n        goto LAB_00102812;\n      }\n    }\n    else if (bVar3 \u003d\u003d 0) {\n      uVar7 \u003d *puVar8;\n      uVar6 \u003d dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      fatal(uVar6,uVar7);\nLAB_001027cb:\n      bfd_nonfatal();\n      iVar4 \u003d bfd_get_error();\n      if (iVar4 \u003d\u003d 0xd) {\nLAB_00102812:\n        list_matching_formats(in_stack_00000008);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      plVar1 \u003d puVar8 + 0x1e;\n      for (lVar5 \u003d bfd_openr_next_archived_file(puVar8,0); lVar5 !\u003d 0;\n          lVar5 \u003d bfd_openr_next_archived_file(puVar8,lVar5)) {\n        *plVar1 \u003d lVar5;\n        plVar1 \u003d (long *)(lVar5 + 0xf0);\n      }\n      *plVar1 \u003d 0;\n      iVar4 \u003d bfd_get_error();\n      if (iVar4 \u003d\u003d 9) {\n        return puVar8;\n      }\n      do {\n        bfd_fatal();\nLAB_00102826:\n        uVar7 \u003d dcgettext(0,\"creating %s\",5);\n        non_fatal(uVar7);\nLAB_001053b7:\n        output_filename \u003d unaff_RBP;\n        puVar8 \u003d (undefined8 *)bfd_openr();\n      } while (puVar8 \u003d\u003d (undefined8 *)0x0);\n      cVar2 \u003d bfd_check_format_matches(puVar8,2,\u0026stack0x00000008);\n      if (cVar2 \u003d\u003d \u0027\\0\u0027) goto LAB_001027cb;\n    } while (((operation !\u003d 2) \u0026\u0026 (operation !\u003d 7)) ||\n            (lVar5 \u003d bfd_openr_next_archived_file(puVar8,0), lVar5 \u003d\u003d 0));\n  } while( true );\n}\n\n",
      "renaming": {},
      "calling": [
        "open_inarch"
      ],
      "called": [
        "bfd_openr",
        "bfd_check_format",
        "bfd_close"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "ranlib_only.cold": {
      "entrypoint": "0x0010284b",
      "current_name": "ranlib_only.cold",
      "code": "\nundefined8 ranlib_only_cold(void)\n\n{\n  return 1;\n}\n\n",
      "renaming": {},
      "calling": [
        "ranlib_only"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "map_over_members.cold": {
      "entrypoint": "0x0010285f",
      "current_name": "map_over_members.cold",
      "code": "\n\n\nvoid map_over_members_cold(void)\n\n{\n  int iVar1;\n  char *__format;\n  long lVar2;\n  long *plVar3;\n  undefined8 uVar4;\n  long *plVar5;\n  code *unaff_RBP;\n  long unaff_R12;\n  int unaff_R13D;\n  undefined8 *unaff_R14;\n  int iStack000000000000000c;\n  \ncode_r0x0010285f:\n  uVar4 \u003d *unaff_R14;\n  __format \u003d (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(_stderr,__format,uVar4);\nLAB_0010553e:\n  unaff_R14 \u003d unaff_R14 + 1;\n  unaff_R13D \u003d unaff_R13D + -1;\n  if (unaff_R13D \u003d\u003d 0) {\n    return;\n  }\n  plVar5 \u003d *(long **)(unaff_R12 + 0xf0);\n  iStack000000000000000c \u003d 0;\n  do {\n    if (plVar5 \u003d\u003d (long *)0x0) goto code_r0x0010285f;\n    if (*(int *)((long)plVar5 + 0xac) \u003d\u003d 0) {\n      lVar2 \u003d *plVar5;\n      if (lVar2 \u003d\u003d 0) {\n        plVar3 \u003d (long *)plVar5[0x1d];\n        if ((long *)plVar5[0x1d] \u003d\u003d (long *)0x0) {\n          plVar3 \u003d plVar5;\n        }\n        (**(code **)(plVar3[1] + 0x1e8))(plVar5,\u0026stack0x00000010);\n      }\n      else if (((*(byte *)(unaff_R12 + 0x49) \u0026 0x10) \u003d\u003d 0) || (lVar2 \u003d normalize(), lVar2 !\u003d 0)) {\n        uVar4 \u003d normalize(*unaff_R14);\n        iVar1 \u003d filename_cmp(uVar4,lVar2);\n        if ((iVar1 \u003d\u003d 0) \u0026\u0026\n           ((counted_name_mode \u003d\u003d \u0027\\0\u0027 ||\n            (iStack000000000000000c \u003d iStack000000000000000c + 1,\n            iStack000000000000000c \u003d\u003d counted_name_counter)))) break;\n      }\n    }\n    plVar5 \u003d (long *)plVar5[0x1e];\n  } while( true );\n  (*unaff_RBP)();\n  *(undefined4 *)((long)plVar5 + 0xac) \u003d 1;\n  goto LAB_0010553e;\n}\n\n",
      "renaming": {},
      "calling": [
        "map_over_members"
      ],
      "called": [
        "fprintf",
        "dcgettext"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "replace_members.cold": {
      "entrypoint": "0x001028ed",
      "current_name": "replace_members.cold",
      "code": "\nundefined8 replace_members_cold(undefined8 param_1,long param_2)\n\n{\n  undefined uVar1;\n  byte bVar2;\n  int iVar3;\n  size_t sVar4;\n  int *piVar5;\n  char *pcVar6;\n  char *pcVar7;\n  char **ppcVar8;\n  undefined8 uVar9;\n  long lVar10;\n  char *__s;\n  char *__s_00;\n  long lVar11;\n  undefined8 uVar12;\n  ulong uVar13;\n  char *unaff_RBX;\n  char **ppcVar14;\n  char **unaff_RBP;\n  char **unaff_R12;\n  uint unaff_R13D;\n  char **ppcVar15;\n  long unaff_R14;\n  bool bVar16;\n  byte bVar17;\n  char **param_7;\n  undefined8 param_9;\n  long in_stack_00000078;\n  long in_stack_00000108;\n  \n  bVar17 \u003d 0;\ncode_r0x001028ed:\n  bfd_fatal(unaff_RBX,param_2);\nLAB_001028f5:\n  uVar12 \u003d posname;\n  if (unaff_R13D !\u003d 3) {\n    while( true ) {\n      if ((undefined8 *)*unaff_R12 \u003d\u003d (undefined8 *)0x0) goto LAB_0010571f;\n      iVar3 \u003d filename_cmp(*(undefined8 *)*unaff_R12,uVar12);\n      if (iVar3 \u003d\u003d 0) break;\n      unaff_R12 \u003d (char **)(*unaff_R12 + 0xf0);\n    }\n    if (unaff_R13D !\u003d 2) goto LAB_0010571f;\n    unaff_R12 \u003d (char **)(*unaff_R12 + 0xf0);\n    goto LAB_0010571f;\n  }\n  lVar10 \u003d *(long *)(unaff_R14 + 0xf0);\n  if (*(long *)(unaff_R14 + 0xf0) \u003d\u003d 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    lVar11 \u003d lVar10;\n    lVar10 \u003d *(long *)(lVar11 + 0xf0);\n  } while (lVar10 !\u003d 0);\n  unaff_R12 \u003d (char **)(lVar11 + 0xf0);\n  unaff_RBX \u003d *unaff_RBP;\n  if (libdeps_bfd !\u003d 0) goto LAB_00105731;\nLAB_00105698:\n  uVar1 \u003d make_thin_archive;\n  unaff_R13D \u003d (uint)(verbose !\u003d 0);\n  param_2 \u003d bfd_openr(unaff_RBX,target);\n  if (param_2 !\u003d 0) {\n    unaff_RBP \u003d unaff_RBP + 1;\n    bVar2 \u003d do_ar_emul_append_constprop_0(unaff_R12,param_2,unaff_R13D,uVar1);\n    param_9._6_1_ \u003d param_9._6_1_ | bVar2;\n    pcVar6 \u003d *unaff_RBP;\n    do {\n      if (pcVar6 \u003d\u003d (char *)0x0) {\n        if (param_9._6_1_ \u003d\u003d 0) {\n          output_filename \u003d 0;\n          return 0;\n        }\n        uVar12 \u003d write_archive();\n        return uVar12;\n      }\n      ppcVar14 \u003d *(char ***)(unaff_R14 + 0xf0);\n      unaff_R12 \u003d param_7;\n      if (param_9._7_1_ \u003d\u003d \u0027\\0\u0027) {\n        ppcVar15 \u003d param_7;\n        if (ppcVar14 !\u003d (char **)0x0) {\n          do {\n            if (full_pathname \u003d\u003d \u0027\\0\u0027) {\n              __s \u003d (char *)lbasename(*ppcVar14);\n              pcVar7 \u003d __s;\n              if (ar_truncate !\u003d \u0027\\0\u0027) {\n                sVar4 \u003d strlen(__s);\n                uVar13 \u003d (ulong)*(byte *)(*(long *)(unaff_R14 + 8) + 0x1e);\n                if (uVar13 \u003c sVar4) {\n                  pcVar7 \u003d (char *)xmalloc(uVar13 + 1);\n                  lVar10 \u003d *(long *)(unaff_R14 + 8);\n                  pcVar6 \u003d pcVar7;\n                  for (uVar13 \u003d (ulong)*(byte *)(lVar10 + 0x1e); uVar13 !\u003d 0; uVar13 \u003d uVar13 - 1) {\n                    *pcVar6 \u003d *__s;\n                    __s \u003d __s + (ulong)bVar17 * -2 + 1;\n                    pcVar6 \u003d pcVar6 + (ulong)bVar17 * -2 + 1;\n                  }\n                  pcVar7[*(byte *)(lVar10 + 0x1e)] \u003d \u0027\\0\u0027;\n                }\n                pcVar6 \u003d *unaff_RBP;\n                __s \u003d pcVar7;\n                if (full_pathname \u003d\u003d \u0027\\0\u0027) goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              pcVar6 \u003d *unaff_RBP;\n              if (full_pathname !\u003d \u0027\\0\u0027) goto LAB_00102980;\nLAB_00105611:\n              __s_00 \u003d (char *)lbasename(pcVar6);\n              if (ar_truncate !\u003d \u0027\\0\u0027) {\n                sVar4 \u003d strlen(__s_00);\n                uVar13 \u003d (ulong)*(byte *)(*(long *)(unaff_R14 + 8) + 0x1e);\n                pcVar6 \u003d __s_00;\n                __s \u003d pcVar7;\n                if (uVar13 \u003c sVar4) {\n                  pcVar6 \u003d (char *)xmalloc(uVar13 + 1);\n                  lVar10 \u003d *(long *)(unaff_R14 + 8);\n                  pcVar7 \u003d pcVar6;\n                  for (uVar13 \u003d (ulong)*(byte *)(lVar10 + 0x1e); uVar13 !\u003d 0; uVar13 \u003d uVar13 - 1) {\n                    *pcVar7 \u003d *__s_00;\n                    __s_00 \u003d __s_00 + (ulong)bVar17 * -2 + 1;\n                    pcVar7 \u003d pcVar7 + (ulong)bVar17 * -2 + 1;\n                  }\n                  pcVar6[*(byte *)(lVar10 + 0x1e)] \u003d \u0027\\0\u0027;\n                }\n                goto LAB_00102980;\n              }\n              iVar3 \u003d filename_cmp(__s_00,pcVar7);\n            }\n            else {\n              pcVar6 \u003d *unaff_RBP;\n              __s \u003d *ppcVar14;\nLAB_00102980:\n              iVar3 \u003d filename_cmp(pcVar6,__s);\n            }\n            if ((iVar3 \u003d\u003d 0) \u0026\u0026 (ppcVar14[0x1c] !\u003d (char *)0x0)) {\n              if (newer_only !\u003d 0) {\n                iVar3 \u003d stat(*unaff_RBP,(stat *)\u0026stack0x000000b0);\n                if (iVar3 !\u003d 0) {\n                  piVar5 \u003d __errno_location();\n                  if (*piVar5 !\u003d 2) {\n                    bfd_fatal(*unaff_RBP);\nLAB_00102b7e:\n                    pcVar6 \u003d *ppcVar14;\n                    uVar12 \u003d dcgettext(0,\"internal stat error on %s\",5);\n                    fatal(uVar12,pcVar6);\n                    free(unaff_RBP);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                ppcVar8 \u003d (char **)ppcVar14[0x1d];\n                if ((char **)ppcVar14[0x1d] \u003d\u003d (char **)0x0) {\n                  ppcVar8 \u003d ppcVar14;\n                }\n                iVar3 \u003d (**(code **)(ppcVar8[1] + 0x1e8))(ppcVar14,\u0026stack0x00000020);\n                if (iVar3 !\u003d 0) goto LAB_00102b7e;\n                if (in_stack_00000108 \u003c\u003d in_stack_00000078) goto LAB_0010577e;\n              }\n              uVar12 \u003d get_pos_bfd(param_7,2,*ppcVar14);\n              if (libdeps_bfd \u003d\u003d 0) {\nLAB_00102ae2:\n                pcVar6 \u003d *unaff_RBP;\n                bVar16 \u003d verbose !\u003d 0;\n                lVar10 \u003d bfd_openr(pcVar6,target);\n                if (lVar10 \u003d\u003d 0) {\n                  bfd_fatal(pcVar6,0);\n                  goto LAB_00102b3e;\n                }\n                bVar2 \u003d ar_emul_default_replace(uVar12,lVar10,bVar16);\n              }\n              else {\n                uVar9 \u003d normalize(*unaff_RBP);\n                iVar3 \u003d filename_cmp(uVar9,\"__.LIBDEP\");\n                if (iVar3 !\u003d 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                bVar2 \u003d ar_emul_default_replace(uVar12,libdeps_bfd,verbose !\u003d 0);\n              }\n              if (bVar2 !\u003d 0) {\n                *ppcVar15 \u003d *(char **)(*ppcVar15 + 0xf0);\n                param_9._6_1_ \u003d bVar2;\n              }\n              goto LAB_0010577e;\n            }\n            ppcVar15 \u003d ppcVar14 + 0x1e;\n            ppcVar14 \u003d (char **)ppcVar14[0x1e];\n          } while (ppcVar14 !\u003d (char **)0x0);\n          goto LAB_0010564c;\n        }\n        unaff_R13D \u003d postype;\n        if (postype !\u003d 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        unaff_R13D \u003d postype;\n        if (postype !\u003d 0) goto LAB_001028f5;\n        lVar10 \u003d *(long *)(unaff_R14 + 0xf0);\n        if (*(long *)(unaff_R14 + 0xf0) !\u003d 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      unaff_RBX \u003d *unaff_RBP;\n      if (libdeps_bfd \u003d\u003d 0) goto LAB_00105698;\nLAB_00105731:\n      uVar12 \u003d normalize(unaff_RBX);\n      iVar3 \u003d filename_cmp(uVar12,\"__.LIBDEP\");\n      if (iVar3 !\u003d 0) goto code_r0x0010574f;\n      bVar2 \u003d ar_emul_default_append(unaff_R12,libdeps_bfd,verbose !\u003d 0,make_thin_archive);\n      param_9._6_1_ \u003d bVar2 | param_9._6_1_;\nLAB_0010577e:\n      unaff_RBP \u003d unaff_RBP + 1;\n      pcVar6 \u003d *unaff_RBP;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  unaff_RBX \u003d *unaff_RBP;\n  goto LAB_00105698;\n}\n\n",
      "renaming": {},
      "calling": [
        "replace_members.cold"
      ],
      "called": [
        "filename_cmp",
        "bfd_openr",
        "strlen",
        "get_pos_bfd",
        "lbasename",
        "xmalloc",
        "FUN_00102943",
        "__errno_location",
        "ar_emul_default_append",
        "ar_emul_default_replace",
        "write_archive",
        "stat",
        "bfd_fatal",
        "normalize",
        "do_ar_emul_append.constprop.0",
        "replace_members.cold",
        "fatal",
        "dcgettext"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "FUN_00102943": {
      "entrypoint": "0x00102943",
      "current_name": "FUN_00102943",
      "code": "\nvoid FUN_00102943(void)\n\n{\n  output_filename \u003d 0;\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "replace_members",
        "replace_members.cold"
      ],
      "called": [],
      "improved": false,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "make_tempname.cold": {
      "entrypoint": "0x00102ba1",
      "current_name": "make_tempname.cold",
      "code": "\nundefined  [16] make_tempname_cold(void)\n\n{\n  undefined auVar1 [16];\n  void *unaff_RBP;\n  ulong unaff_retaddr;\n  \n  free(unaff_RBP);\n  auVar1._8_8_ \u003d 0;\n  auVar1._0_8_ \u003d unaff_retaddr;\n  return auVar1 \u003c\u003c 0x40;\n}\n\n",
      "renaming": {},
      "calling": [
        "make_tempname"
      ],
      "called": [
        "free"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "normalize.cold": {
      "entrypoint": "0x00102bb0",
      "current_name": "normalize.cold",
      "code": "\nundefined  [16] normalize_cold(void)\n\n{\n  long lVar1;\n  char *in_RAX;\n  size_t sVar2;\n  undefined *puVar3;\n  ulong uVar4;\n  undefined *unaff_RBX;\n  long unaff_RBP;\n  undefined *puVar5;\n  byte bVar6;\n  undefined auVar7 [16];\n  undefined8 unaff_retaddr;\n  \n  bVar6 \u003d 0;\n  sVar2 \u003d strlen(in_RAX);\n  uVar4 \u003d (ulong)*(byte *)(*(long *)(unaff_RBP + 8) + 0x1e);\n  puVar3 \u003d unaff_RBX;\n  if (uVar4 \u003c sVar2) {\n    puVar3 \u003d (undefined *)xmalloc(uVar4 + 1);\n    lVar1 \u003d *(long *)(unaff_RBP + 8);\n    puVar5 \u003d puVar3;\n    for (uVar4 \u003d (ulong)*(byte *)(lVar1 + 0x1e); uVar4 !\u003d 0; uVar4 \u003d uVar4 - 1) {\n      *puVar5 \u003d *unaff_RBX;\n      unaff_RBX \u003d unaff_RBX + (ulong)bVar6 * -2 + 1;\n      puVar5 \u003d puVar5 + (ulong)bVar6 * -2 + 1;\n    }\n    puVar3[*(byte *)(lVar1 + 0x1e)] \u003d 0;\n  }\n  auVar7._8_8_ \u003d unaff_retaddr;\n  auVar7._0_8_ \u003d puVar3;\n  return auVar7;\n}\n\n",
      "renaming": {},
      "calling": [
        "normalize"
      ],
      "called": [
        "strlen",
        "xmalloc"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "remove_output.cold": {
      "entrypoint": "0x00102bf5",
      "current_name": "remove_output.cold",
      "code": "\nvoid remove_output_cold(void)\n\n{\n  if (output_bfd !\u003d 0) {\n    bfd_cache_close();\n  }\n  if (output_file !\u003d (FILE *)0x0) {\n    fclose(output_file);\n  }\n  unlink_if_ordinary(output_filename);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "remove_output"
      ],
      "called": [
        "bfd_cache_close",
        "fclose",
        "unlink_if_ordinary"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "extract_file.cold": {
      "entrypoint": "0x00102c25",
      "current_name": "extract_file.cold",
      "code": "\nlong * extract_file_cold(void)\n\n{\n  int iVar1;\n  int iVar2;\n  int *piVar3;\n  char *pcVar4;\n  undefined8 uVar5;\n  long **pplVar6;\n  void *__ptr;\n  size_t __n;\n  long lVar7;\n  long **unaff_RBX;\n  long *plVar8;\n  undefined4 *puVar9;\n  ulong uVar10;\n  size_t sVar11;\n  undefined4 *param_7;\n  __mode_t param_11;\n  ulong param_12;\n  \n  puVar9 \u003d param_7;\n  for (lVar7 \u003d 0x24; lVar7 !\u003d 0; lVar7 \u003d lVar7 + -1) {\n    *puVar9 \u003d 0;\n    puVar9 \u003d puVar9 + 1;\n  }\n  pplVar6 \u003d (long **)unaff_RBX[0x1d];\n  if ((long **)unaff_RBX[0x1d] \u003d\u003d (long **)0x0) {\n    pplVar6 \u003d unaff_RBX;\n  }\n  iVar2 \u003d (*(code *)pplVar6[1][0x3d])();\n  if (iVar2 !\u003d 0) {\n    plVar8 \u003d *unaff_RBX;\n    uVar5 \u003d dcgettext(0,\"internal stat error on %s\",5);\n    iVar2 \u003d fatal(uVar5,plVar8);\n    uVar5 \u003d posname;\n    if (iVar2 \u003d\u003d 3) {\n      for (; *plVar8 !\u003d 0; plVar8 \u003d (long *)(*plVar8 + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*plVar8 !\u003d (undefined8 *)0x0; plVar8 \u003d (long *)(*plVar8 + 0xf0)) {\n        iVar1 \u003d filename_cmp(*(undefined8 *)*plVar8,uVar5);\n        if (iVar1 \u003d\u003d 0) {\n          if (iVar2 !\u003d 2) {\n            return plVar8;\n          }\n          return (long *)(*plVar8 + 0xf0);\n        }\n      }\n    }\n    return plVar8;\n  }\n  bfd_seek();\n  output_file \u003d (FILE *)0x0;\n  if (param_12 \u003d\u003d 0) {\nLAB_00102ca2:\n    output_file \u003d (FILE *)open_output_file_isra_0(*unaff_RBX);\n  }\n  else {\n    uVar10 \u003d 0;\n    __ptr \u003d (void *)xmalloc(0x2000);\n    do {\n      sVar11 \u003d param_12 - uVar10;\n      if (0x2000 \u003c sVar11) {\n        sVar11 \u003d 0x2000;\n      }\n      __n \u003d bfd_bread(__ptr,sVar11);\n      if (sVar11 !\u003d __n) {\nLAB_00102c78:\n        unaff_RBX \u003d (long **)*unaff_RBX[0x1d];\n        uVar5 \u003d dcgettext(0,\"%s is not a valid archive\",5);\n        fatal(uVar5,unaff_RBX);\n        goto LAB_00102ca2;\n      }\n      if (output_file \u003d\u003d (FILE *)0x0) {\n        output_file \u003d (FILE *)open_output_file_isra_0(*unaff_RBX);\n      }\n      sVar11 \u003d fwrite(__ptr,1,__n,output_file);\n      if (sVar11 !\u003d __n) {\n        piVar3 \u003d __errno_location();\n        pcVar4 \u003d strerror(*piVar3);\n        fatal(\"%s: %s\",output_filename,pcVar4);\n        goto LAB_00102c78;\n      }\n      uVar10 \u003d uVar10 + __n;\n    } while (uVar10 \u003c param_12);\n    free(__ptr);\n  }\n  fclose(output_file);\n  pcVar4 \u003d output_filename;\n  output_file \u003d (FILE *)0x0;\n  chmod(output_filename,param_11);\n  if (preserve_dates !\u003d 0) {\n    set_times(pcVar4,param_7);\n  }\n  output_filename \u003d (char *)0x0;\n  return (long *)0x0;\n}\n\n",
      "renaming": {},
      "calling": [
        "extract_file"
      ],
      "called": [
        "chmod",
        "xmalloc",
        "fclose",
        "__errno_location",
        "fwrite",
        "bfd_seek",
        "free",
        "fatal",
        "open_output_file.isra.0",
        "strerror",
        "dcgettext",
        "set_times",
        "bfd_bread"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "get_pos_bfd.cold": {
      "entrypoint": "0x00102cd9",
      "current_name": "get_pos_bfd.cold",
      "code": "\nlong * get_pos_bfd_cold(void)\n\n{\n  int in_EAX;\n  int iVar1;\n  long *unaff_RBX;\n  undefined8 param_7;\n  \n  param_7 \u003d posname;\n  if (in_EAX \u003d\u003d 3) {\n    for (; *unaff_RBX !\u003d 0; unaff_RBX \u003d (long *)(*unaff_RBX + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*unaff_RBX !\u003d (undefined8 *)0x0; unaff_RBX \u003d (long *)(*unaff_RBX + 0xf0)) {\n      iVar1 \u003d filename_cmp(*(undefined8 *)*unaff_RBX,param_7);\n      if (iVar1 \u003d\u003d 0) {\n        if (in_EAX !\u003d 2) {\n          return unaff_RBX;\n        }\n        return (long *)(*unaff_RBX + 0xf0);\n      }\n    }\n  }\n  return unaff_RBX;\n}\n\n",
      "renaming": {},
      "calling": [
        "get_pos_bfd"
      ],
      "called": [
        "filename_cmp"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "write_archive.cold": {
      "entrypoint": "0x00102d2f",
      "current_name": "write_archive.cold",
      "code": "\nvoid write_archive_cold(void)\n\n{\n  byte bVar1;\n  char cVar2;\n  int iVar3;\n  char *__format;\n  uint uVar4;\n  char **unaff_RBX;\n  FILE *unaff_RBP;\n  long unaff_R12;\n  void *unaff_R13;\n  int unaff_R14D;\n  undefined uStack0000000000000015;\n  char cStack0000000000000016;\n  char cStack0000000000000017;\n  char in_stack_00000018;\n  char cStack0000000000000019;\n  char cStack000000000000001a;\n  char cStack000000000000001b;\n  char cStack000000000000001c;\n  char cStack000000000000001d;\n  char cStack000000000000001e;\n  undefined uStack000000000000001f;\n  uint uStack0000000000000068;\n  uint uStack000000000000006c;\n  uint in_stack_00000070;\n  undefined8 in_stack_00000080;\n  \n  do {\n    bVar1 \u003d bfd_fatal();\n    *(uint *)((long)unaff_RBX + 0x44) \u003d *(uint *)((long)unaff_RBX + 0x44) | 0x100000;\n    if ((make_thin_archive !\u003d \u0027\\0\u0027) || ((*(byte *)(unaff_R12 + 0x49) \u0026 0x10) !\u003d 0)) {\n      *(byte *)((long)unaff_RBX + 0x49) \u003d bVar1 | 0x10;\n    }\n    cVar2 \u003d bfd_set_archive_head();\n  } while (cVar2 \u003d\u003d \u0027\\0\u0027);\n  dup(unaff_R14D);\n  cVar2 \u003d bfd_close();\n  if (cVar2 !\u003d \u0027\\0\u0027) {\n    output_bfd \u003d 0;\n    output_filename \u003d 0;\n    bfd_close();\n    iVar3 \u003d smart_rename_constprop_0();\n    if (iVar3 \u003d\u003d 0) {\n      free(unaff_R13);\n      free(unaff_RBP);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  bfd_fatal();\n  __format \u003d (char *)dcgettext(0,\"\u003ctime data corrupt\u003e\",5);\n  sprintf(\u0026stack0x00000020,__format);\n  uVar4 \u003d uStack0000000000000068 \u0026 0xf000;\n  if (uVar4 \u003d\u003d 0x4000) {\n    uStack0000000000000015 \u003d 100;\n  }\n  else if (uVar4 \u003d\u003d 0xa000) {\n    uStack0000000000000015 \u003d 0x6c;\n  }\n  else if (uVar4 \u003d\u003d 0x6000) {\n    uStack0000000000000015 \u003d 0x62;\n  }\n  else if (uVar4 \u003d\u003d 0x2000) {\n    uStack0000000000000015 \u003d 99;\n  }\n  else if (uVar4 \u003d\u003d 0xc000) {\n    uStack0000000000000015 \u003d 0x73;\n  }\n  else {\n    uStack0000000000000015 \u003d 0x70;\n    if (uVar4 !\u003d 0x1000) {\n      uStack0000000000000015 \u003d 0x2d;\n    }\n  }\n  cStack0000000000000016 \u003d (-((uStack0000000000000068 \u0026 0x100) \u003d\u003d 0) \u0026 0xbbU) + 0x72;\n  cStack0000000000000017 \u003d (-((uStack0000000000000068 \u0026 0x80) \u003d\u003d 0) \u0026 0xb6U) + 0x77;\n  in_stack_00000018 \u003d (-((uStack0000000000000068 \u0026 0x40) \u003d\u003d 0) \u0026 0xb5U) + 0x78;\n  cStack0000000000000019 \u003d (-((uStack0000000000000068 \u0026 0x20) \u003d\u003d 0) \u0026 0xbbU) + 0x72;\n  cStack000000000000001a \u003d (-((uStack0000000000000068 \u0026 0x10) \u003d\u003d 0) \u0026 0xb6U) + 0x77;\n  cStack000000000000001b \u003d (-((uStack0000000000000068 \u0026 8) \u003d\u003d 0) \u0026 0xb5U) + 0x78;\n  cStack000000000000001c \u003d (-((uStack0000000000000068 \u0026 4) \u003d\u003d 0) \u0026 0xbbU) + 0x72;\n  cStack000000000000001d \u003d (-((uStack0000000000000068 \u0026 2) \u003d\u003d 0) \u0026 0xb6U) + 0x77;\n  cStack000000000000001e \u003d (-((uStack0000000000000068 \u0026 1) \u003d\u003d 0) \u0026 0xb5U) + 0x78;\n  if ((uStack0000000000000068 \u0026 0x800) !\u003d 0) {\n    if (in_stack_00000018 \u003d\u003d \u0027x\u0027) {\n      in_stack_00000018 \u003d \u0027s\u0027;\n    }\n    else {\n      in_stack_00000018 \u003d \u0027S\u0027;\n    }\n  }\n  if ((uStack0000000000000068 \u0026 0x400) !\u003d 0) {\n    if (cStack000000000000001b \u003d\u003d \u0027x\u0027) {\n      cStack000000000000001b \u003d \u0027s\u0027;\n    }\n    else {\n      cStack000000000000001b \u003d \u0027S\u0027;\n    }\n  }\n  if ((uStack0000000000000068 \u0026 0x200) !\u003d 0) {\n    if (cStack000000000000001e \u003d\u003d \u0027x\u0027) {\n      cStack000000000000001e \u003d \u0027t\u0027;\n    }\n    else {\n      cStack000000000000001e \u003d \u0027T\u0027;\n    }\n  }\n  uStack000000000000001f \u003d 0;\n  fprintf(unaff_RBP,\"%s %ld/%ld %6lu %s \",\u0026stack0x00000016,(ulong)uStack000000000000006c,\n          (ulong)in_stack_00000070,in_stack_00000080,\u0026stack0x00000020,(ulong)uStack0000000000000068)\n  ;\n  fputs(*unaff_RBX,unaff_RBP);\n  if ((char)unaff_R12 !\u003d \u0027\\0\u0027) {\n    if ((*(byte *)((long)unaff_RBX + 0x49) \u0026 0x10) \u003d\u003d 0) {\n      if (unaff_RBX[0xb] !\u003d (char *)0x0) {\n        fprintf(unaff_RBP,\" 0x%lx\");\n      }\n    }\n    else if (unaff_RBX[0xc] !\u003d (char *)0x0) {\n      fprintf(unaff_RBP,\" 0x%lx\");\n    }\n  }\n  fputc(10,unaff_RBP);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "write_archive.cold"
      ],
      "called": [
        "write_archive.cold",
        "xexit",
        "dup",
        "bfd_fatal",
        "free",
        "bfd_close",
        "smart_rename.constprop.0",
        "bfd_set_archive_head"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "print_arelt_descr.cold": {
      "entrypoint": "0x00102d8c",
      "current_name": "print_arelt_descr.cold",
      "code": "\nvoid print_arelt_descr_cold(void)\n\n{\n  char *__format;\n  uint uVar1;\n  char **unaff_RBX;\n  FILE *unaff_RBP;\n  char unaff_R12B;\n  undefined uStack0000000000000015;\n  char cStack0000000000000016;\n  char cStack0000000000000017;\n  char param_9;\n  char cStack0000000000000019;\n  char cStack000000000000001a;\n  char cStack000000000000001b;\n  char cStack000000000000001c;\n  char cStack000000000000001d;\n  char cStack000000000000001e;\n  undefined uStack000000000000001f;\n  uint param_19;\n  uint uStack000000000000006c;\n  uint param_20;\n  undefined8 param_22;\n  \n  __format \u003d (char *)dcgettext(0,\"\u003ctime data corrupt\u003e\",5);\n  sprintf(\u0026stack0x00000020,__format);\n  uVar1 \u003d param_19 \u0026 0xf000;\n  if (uVar1 \u003d\u003d 0x4000) {\n    uStack0000000000000015 \u003d 100;\n  }\n  else if (uVar1 \u003d\u003d 0xa000) {\n    uStack0000000000000015 \u003d 0x6c;\n  }\n  else if (uVar1 \u003d\u003d 0x6000) {\n    uStack0000000000000015 \u003d 0x62;\n  }\n  else if (uVar1 \u003d\u003d 0x2000) {\n    uStack0000000000000015 \u003d 99;\n  }\n  else if (uVar1 \u003d\u003d 0xc000) {\n    uStack0000000000000015 \u003d 0x73;\n  }\n  else {\n    uStack0000000000000015 \u003d 0x70;\n    if (uVar1 !\u003d 0x1000) {\n      uStack0000000000000015 \u003d 0x2d;\n    }\n  }\n  cStack0000000000000016 \u003d (-((param_19 \u0026 0x100) \u003d\u003d 0) \u0026 0xbbU) + 0x72;\n  cStack0000000000000017 \u003d (-((param_19 \u0026 0x80) \u003d\u003d 0) \u0026 0xb6U) + 0x77;\n  param_9 \u003d (-((param_19 \u0026 0x40) \u003d\u003d 0) \u0026 0xb5U) + 0x78;\n  cStack0000000000000019 \u003d (-((param_19 \u0026 0x20) \u003d\u003d 0) \u0026 0xbbU) + 0x72;\n  cStack000000000000001a \u003d (-((param_19 \u0026 0x10) \u003d\u003d 0) \u0026 0xb6U) + 0x77;\n  cStack000000000000001b \u003d (-((param_19 \u0026 8) \u003d\u003d 0) \u0026 0xb5U) + 0x78;\n  cStack000000000000001c \u003d (-((param_19 \u0026 4) \u003d\u003d 0) \u0026 0xbbU) + 0x72;\n  cStack000000000000001d \u003d (-((param_19 \u0026 2) \u003d\u003d 0) \u0026 0xb6U) + 0x77;\n  cStack000000000000001e \u003d (-((param_19 \u0026 1) \u003d\u003d 0) \u0026 0xb5U) + 0x78;\n  if ((param_19 \u0026 0x800) !\u003d 0) {\n    if (param_9 \u003d\u003d \u0027x\u0027) {\n      param_9 \u003d \u0027s\u0027;\n    }\n    else {\n      param_9 \u003d \u0027S\u0027;\n    }\n  }\n  if ((param_19 \u0026 0x400) !\u003d 0) {\n    if (cStack000000000000001b \u003d\u003d \u0027x\u0027) {\n      cStack000000000000001b \u003d \u0027s\u0027;\n    }\n    else {\n      cStack000000000000001b \u003d \u0027S\u0027;\n    }\n  }\n  if ((param_19 \u0026 0x200) !\u003d 0) {\n    if (cStack000000000000001e \u003d\u003d \u0027x\u0027) {\n      cStack000000000000001e \u003d \u0027t\u0027;\n    }\n    else {\n      cStack000000000000001e \u003d \u0027T\u0027;\n    }\n  }\n  uStack000000000000001f \u003d 0;\n  fprintf(unaff_RBP,\"%s %ld/%ld %6lu %s \",\u0026stack0x00000016,(ulong)uStack000000000000006c,\n          (ulong)param_20,param_22,\u0026stack0x00000020,(ulong)param_19);\n  fputs(*unaff_RBX,unaff_RBP);\n  if (unaff_R12B !\u003d \u0027\\0\u0027) {\n    if ((*(byte *)((long)unaff_RBX + 0x49) \u0026 0x10) \u003d\u003d 0) {\n      if (unaff_RBX[0xb] !\u003d (char *)0x0) {\n        fprintf(unaff_RBP,\" 0x%lx\");\n      }\n    }\n    else if (unaff_RBX[0xc] !\u003d (char *)0x0) {\n      fprintf(unaff_RBP,\" 0x%lx\");\n    }\n  }\n  fputc(10,unaff_RBP);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "print_arelt_descr"
      ],
      "called": [
        "fprintf",
        "fputc",
        "sprintf",
        "fputs",
        "dcgettext"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "open_output_file.isra.0.cold": {
      "entrypoint": "0x00102e57",
      "current_name": "open_output_file.isra.0.cold",
      "code": "\nvoid open_output_file_isra_0_cold(void)\n\n{\n  FILE *pFVar1;\n  \n  output_filename \u003d (char *)concat();\n  if (verbose !\u003d 0) {\n    printf(\"x - %s\\n\",output_filename);\n  }\n  pFVar1 \u003d fopen(output_filename,\"w\");\n  if (pFVar1 !\u003d (FILE *)0x0) {\n    return;\n  }\n  perror(output_filename);\n                    \n  xexit(1);\n}\n\n",
      "renaming": {},
      "calling": [
        "FUN_00105a68"
      ],
      "called": [
        "concat"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "FUN_00102e6f": {
      "entrypoint": "0x00102e6f",
      "current_name": "FUN_00102e6f",
      "code": "\nvoid FUN_00102e6f(void)\n\n{\n  char *pcVar1;\n  char *in_RAX;\n  undefined8 uVar2;\n  undefined8 uVar3;\n  FILE *pFVar4;\n  size_t sVar5;\n  char *pcVar6;\n  \n  pcVar1 \u003d output_dir;\n  do {\n    in_RAX \u003d in_RAX + 1;\n    while (*in_RAX !\u003d \u0027/\u0027) {\n      if (*in_RAX \u003d\u003d \u0027\\0\u0027) {\n        if ((output_dir !\u003d (char *)0x0) \u0026\u0026 (sVar5 \u003d strlen(output_dir), sVar5 !\u003d 0)) {\n          if (pcVar1[sVar5 - 1] \u003d\u003d \u0027/\u0027) {\n            output_filename \u003d (char *)concat(pcVar1,output_filename,0);\n          }\n          else {\n            output_filename \u003d (char *)concat(pcVar1,\u0026DAT_00108260,output_filename,0);\n          }\n        }\n        if (verbose !\u003d 0) {\n          printf(\"x - %s\\n\",output_filename);\n        }\n        pFVar4 \u003d fopen(output_filename,\"w\");\n        if (pFVar4 \u003d\u003d (FILE *)0x0) {\n          perror(output_filename);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      pcVar6 \u003d in_RAX;\n      if ((*in_RAX \u003d\u003d \u0027.\u0027) \u0026\u0026 (pcVar6 \u003d in_RAX + 1, in_RAX[1] \u003d\u003d \u0027.\u0027)) {\n        pcVar6 \u003d in_RAX + 2;\n        if ((in_RAX[2] \u003d\u003d \u0027/\u0027) || (in_RAX[2] \u003d\u003d \u0027\\0\u0027)) {\n          uVar2 \u003d lbasename();\n          pcVar1 \u003d output_filename;\n          uVar3 \u003d dcgettext(0,\"illegal output pathname for archive member: %s, using \\\u0027%s\\\u0027 instead\"\n                            ,5);\n          non_fatal(uVar3,pcVar1,uVar2);\n          output_filename \u003d (char *)uVar2;\n          FUN_00105a68();\n          return;\n        }\n      }\n      for (; (in_RAX \u003d pcVar6, *pcVar6 !\u003d \u0027\\0\u0027 \u0026\u0026 (*pcVar6 !\u003d \u0027/\u0027)); pcVar6 \u003d pcVar6 + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
      "renaming": {},
      "calling": [
        "FUN_00102e6f"
      ],
      "called": [
        "lbasename",
        "non_fatal",
        "dcgettext",
        "FUN_00105a68",
        "FUN_00102e6f"
      ],
      "improved": false,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "do_ar_emul_append.constprop.0.cold": {
      "entrypoint": "0x00102f08",
      "current_name": "do_ar_emul_append.constprop.0.cold",
      "code": "\nundefined8 do_ar_emul_append_constprop_0_cold(void)\n\n{\n  undefined8 *unaff_RBX;\n  undefined8 *unaff_R12;\n  \n  printf(\"a - %s\\n\",*unaff_RBX);\n  unaff_RBX[0x1e] \u003d *unaff_R12;\n  *unaff_R12 \u003d unaff_RBX;\n  return 1;\n}\n\n",
      "renaming": {},
      "calling": [
        "do_ar_emul_append.constprop.0"
      ],
      "called": [
        "printf"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "smart_rename.constprop.0.cold": {
      "entrypoint": "0x00102f1e",
      "current_name": "smart_rename.constprop.0.cold",
      "code": "\nundefined  [16] smart_rename_constprop_0_cold(void)\n\n{\n  int *piVar1;\n  undefined8 uVar2;\n  ulong unaff_RBP;\n  char *unaff_R12;\n  undefined auVar3 [16];\n  undefined8 unaff_retaddr;\n  \n  piVar1 \u003d __errno_location();\n  strerror(*piVar1);\n  uVar2 \u003d dcgettext(0,\"unable to copy file \\\u0027%s\\\u0027; reason: %s\",5);\n  non_fatal(uVar2);\n  unlink(unaff_R12);\n  auVar3._0_8_ \u003d unaff_RBP \u0026 0xffffffff;\n  auVar3._8_8_ \u003d unaff_retaddr;\n  return auVar3;\n}\n\n",
      "renaming": {},
      "calling": [
        "smart_rename.constprop.0"
      ],
      "called": [
        "unlink",
        "__errno_location",
        "strerror",
        "dcgettext",
        "non_fatal"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "simple_copy.constprop.0.cold": {
      "entrypoint": "0x00102f55",
      "current_name": "simple_copy.constprop.0.cold",
      "code": "\nundefined8 simple_copy_constprop_0_cold(void)\n\n{\n  int iVar1;\n  int *piVar2;\n  int unaff_R12D;\n  \n  piVar2 \u003d __errno_location();\n  iVar1 \u003d *piVar2;\n  close(unaff_R12D);\n  *piVar2 \u003d iVar1;\n  return 0xffffffff;\n}\n\n",
      "renaming": {},
      "calling": [
        "simple_copy.constprop.0"
      ],
      "called": [
        "__errno_location",
        "close"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_nonfatal.cold": {
      "entrypoint": "0x00102f96",
      "current_name": "bfd_nonfatal.cold",
      "code": "\n\n\nvoid bfd_nonfatal_cold(void)\n\n{\n  undefined8 uVar1;\n  long unaff_RBX;\n  undefined8 unaff_retaddr;\n  \n  uVar1 \u003d dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (unaff_RBX !\u003d 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,uVar1,unaff_retaddr);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "bfd_nonfatal"
      ],
      "called": [
        "fprintf",
        "dcgettext",
        "fflush"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "set_times.cold": {
      "entrypoint": "0x00102fd7",
      "current_name": "set_times.cold",
      "code": "\nvoid set_times_cold(void)\n\n{\n  int *piVar1;\n  undefined8 uVar2;\n  \n  piVar1 \u003d __errno_location();\n  strerror(*piVar1);\n  uVar2 \u003d dcgettext(0,\"%s: cannot set time: %s\",5);\n  non_fatal(uVar2);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "set_times"
      ],
      "called": [
        "__errno_location",
        "strerror",
        "dcgettext",
        "non_fatal"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "yy_get_previous_state": {
      "entrypoint": "0x0010300e",
      "current_name": "yy_get_previous_state",
      "code": "\nvoid yy_get_previous_state(void)\n\n{\n  bool bVar1;\n  int iVar2;\n  long lVar3;\n  byte bVar4;\n  byte *pbVar5;\n  byte *in_R9;\n  int in_R10D;\n  \n  bVar1 \u003d false;\n  iVar2 \u003d yy_start;\n  for (pbVar5 \u003d yytext; pbVar5 \u003c yy_c_buf_p; pbVar5 \u003d pbVar5 + 1) {\n    bVar4 \u003d 1;\n    if (*pbVar5 !\u003d 0) {\n      bVar4 \u003d yy_ec[*pbVar5];\n    }\n    if (*(short *)(yy_accept + (long)iVar2 * 2) !\u003d 0) {\n      bVar1 \u003d true;\n      in_R9 \u003d pbVar5;\n      in_R10D \u003d iVar2;\n    }\n    while( true ) {\n      lVar3 \u003d (long)(int)((int)*(short *)(yy_base + (long)iVar2 * 2) + (uint)bVar4);\n      if (*(short *)(yy_chk + lVar3 * 2) \u003d\u003d iVar2) break;\n      iVar2 \u003d (int)*(short *)(yy_def + (long)iVar2 * 2);\n      if (0xb0 \u003c iVar2) {\n        bVar4 \u003d yy_meta[(int)(uint)bVar4];\n      }\n    }\n    iVar2 \u003d (int)*(short *)(yy_nxt + lVar3 * 2);\n  }\n  if (bVar1) {\n    yy_last_accepting_cpos \u003d in_R9;\n    yy_last_accepting_state \u003d in_R10D;\n  }\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "yyparse.isra.0"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "yy_load_buffer_state": {
      "entrypoint": "0x001030ed",
      "current_name": "yy_load_buffer_state",
      "code": "\nvoid yy_load_buffer_state(void)\n\n{\n  undefined8 *puVar1;\n  \n  puVar1 \u003d *(undefined8 **)(yy_buffer_stack + yy_buffer_stack_top * 8);\n  yy_n_chars \u003d *(undefined4 *)((long)puVar1 + 0x1c);\n  yy_c_buf_p \u003d (undefined *)puVar1[2];\n  yytext \u003d yy_c_buf_p;\n  yyin \u003d *puVar1;\n  yy_hold_char \u003d *yy_c_buf_p;\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "yy_init_buffer",
        "yyparse.isra.0"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "ar_addlib_doer": {
      "entrypoint": "0x0010312d",
      "current_name": "ar_addlib_doer",
      "code": "\nvoid ar_addlib_doer(long param_1,long param_2)\n\n{\n  long lVar1;\n  \n  if (param_2 !\u003d 0) {\n    *(undefined8 *)(param_2 + 0xf0) \u003d *(undefined8 *)(param_1 + 0xf0);\n  }\n  lVar1 \u003d obfd;\n  *(undefined8 *)(param_1 + 0xf0) \u003d *(undefined8 *)(obfd + 0xf8);\n  *(long *)(lVar1 + 0xf8) \u003d param_1;\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "yyparse.isra.0"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "maybequit": {
      "entrypoint": "0x0010315d",
      "current_name": "maybequit",
      "code": "\nvoid maybequit(void)\n\n{\n  if (interactive \u003d\u003d 0) {\n                    \n    xexit(9);\n  }\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "ar_open",
        "yyparse.isra.0",
        "open_inarch"
      ],
      "called": [
        "xexit"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "ar_emul_default_replace": {
      "entrypoint": "0x00103172",
      "current_name": "ar_emul_default_replace",
      "code": "\nundefined  [16]\nar_emul_default_replace(undefined8 *param_1,undefined8 *param_2,char param_3,undefined8 param_4)\n\n{\n  undefined8 uVar1;\n  undefined auVar2 [16];\n  \n  if (param_3 !\u003d \u0027\\0\u0027) {\n    printf(\"r - %s\\n\",*param_2);\n  }\n  uVar1 \u003d *param_1;\n  param_2[0x1e] \u003d uVar1;\n  auVar2._1_7_ \u003d (undefined7)((ulong)uVar1 \u003e\u003e 8);\n  auVar2[0] \u003d 1;\n  *param_1 \u003d param_2;\n  auVar2._8_8_ \u003d param_4;\n  return auVar2;\n}\n\n",
      "renaming": {},
      "calling": [
        "replace_members.cold"
      ],
      "called": [
        "printf"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "yyerror.constprop.0": {
      "entrypoint": "0x001031a5",
      "current_name": "yyerror.constprop.0",
      "code": "\nvoid yyerror_constprop_0(void)\n\n{\n  uint uVar1;\n  char *__format;\n  \n  uVar1 \u003d linenumber + 1;\n  __format \u003d (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(__format,(ulong)uVar1);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "yyparse.isra.0"
      ],
      "called": [
        "dcgettext",
        "printf"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "yy_init_buffer": {
      "entrypoint": "0x001031cf",
      "current_name": "yy_init_buffer",
      "code": "\n\n\nundefined8\nyy_init_buffer(FILE **param_1,FILE *param_2,undefined8 param_3,undefined8 param_4,undefined8 param_5\n              )\n\n{\n  int iVar1;\n  uint uVar2;\n  int iVar3;\n  int *piVar4;\n  long lVar5;\n  \n  piVar4 \u003d __errno_location();\n  lVar5 \u003d yy_buffer_stack;\n  iVar1 \u003d *piVar4;\n  if (param_1 \u003d\u003d (FILE **)0x0) {\n    _DAT_00000034 \u003d 1;\n    _DAT_00000000 \u003d param_2;\n    if (yy_buffer_stack !\u003d 0) {\nLAB_00103263:\n      if (param_1 \u003d\u003d *(FILE ***)(lVar5 + yy_buffer_stack_top * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4 *)((long)param_1 + 0x1c) \u003d 0;\n    *(undefined *)\u0026param_1[1]-\u003e_flags \u003d 0;\n    *(undefined *)((long)\u0026param_1[1]-\u003e_flags + 1) \u003d 0;\n    *(undefined4 *)(param_1 + 5) \u003d 1;\n    param_1[2] \u003d param_1[1];\n    *(undefined4 *)(param_1 + 7) \u003d 0;\n    if (lVar5 !\u003d 0) {\n      if (param_1 \u003d\u003d *(FILE ***)(lVar5 + yy_buffer_stack_top * 8)) {\n        yy_load_buffer_state();\n      }\n      *param_1 \u003d param_2;\n      *(undefined4 *)((long)param_1 + 0x34) \u003d 1;\n      goto LAB_00103263;\n    }\n    *param_1 \u003d param_2;\n    *(undefined4 *)((long)param_1 + 0x34) \u003d 1;\n  }\n  *(undefined8 *)((long)param_1 + 0x2c) \u003d 1;\nLAB_0010327b:\n  uVar2 \u003d 0;\n  if (param_2 !\u003d (FILE *)0x0) {\n    iVar3 \u003d fileno(param_2);\n    iVar3 \u003d isatty(iVar3);\n    uVar2 \u003d (uint)(0 \u003c iVar3);\n  }\n  *(uint *)((long)param_1 + 0x24) \u003d uVar2;\n  *piVar4 \u003d iVar1;\n  return param_5;\n}\n\n",
      "renaming": {},
      "calling": [
        "yy_create_buffer.constprop.0",
        "yyparse.isra.0"
      ],
      "called": [
        "__errno_location",
        "yy_load_buffer_state",
        "isatty",
        "fileno"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "map_over_list": {
      "entrypoint": "0x001032a8",
      "current_name": "map_over_list",
      "code": "\n\n\nundefined8 map_over_list(long *param_1,code *param_2,undefined8 *param_3,undefined8 param_4)\n\n{\n  long lVar1;\n  undefined8 uVar2;\n  bool bVar3;\n  long *plVar4;\n  int iVar5;\n  char *__format;\n  long *plVar6;\n  long lVar7;\n  long *plVar8;\n  \n  lVar7 \u003d param_1[0x1e];\n  if (param_3 \u003d\u003d (undefined8 *)0x0) {\n    while (lVar7 !\u003d 0) {\n      lVar1 \u003d *(long *)(lVar7 + 0xf0);\n      (*param_2)(lVar7,0);\n      lVar7 \u003d lVar1;\n    }\n  }\n  else {\n    do {\n      bVar3 \u003d false;\n      plVar4 \u003d (long *)param_1[0x1e];\n      plVar8 \u003d param_1;\n      while (plVar6 \u003d plVar4, plVar6 !\u003d (long *)0x0) {\n        if (*plVar6 !\u003d 0) {\n          iVar5 \u003d filename_cmp(*param_3);\n          if (iVar5 \u003d\u003d 0) {\n            bVar3 \u003d true;\n            (*param_2)(plVar6,plVar8);\n          }\n        }\n        plVar8 \u003d plVar6;\n        plVar4 \u003d (long *)plVar6[0x1e];\n      }\n      if (!bVar3) {\n        uVar2 \u003d *param_3;\n        __format \u003d (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,__format,uVar2);\n      }\n      param_3 \u003d (undefined8 *)param_3[1];\n    } while (param_3 !\u003d (undefined8 *)0x0);\n  }\n  return param_4;\n}\n\n",
      "renaming": {},
      "calling": [
        "yyparse.isra.0"
      ],
      "called": [
        "filename_cmp",
        "fprintf",
        "dcgettext"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "ar_emul_default_usage": {
      "entrypoint": "0x0010336b",
      "current_name": "ar_emul_default_usage",
      "code": "\nvoid ar_emul_default_usage(FILE *param_1)\n\n{\n  char *pcVar1;\n  \n  pcVar1 \u003d (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(param_1,pcVar1);\n  pcVar1 \u003d (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(param_1,pcVar1);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "usage"
      ],
      "called": [
        "fprintf",
        "dcgettext"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "yy_fatal_error": {
      "entrypoint": "0x001033b0",
      "current_name": "yy_fatal_error",
      "code": "\n\n\nvoid yy_fatal_error(undefined8 param_1)\n\n{\n  fprintf(_stderr,\"%s\\n\",param_1);\n                    \n  exit(2);\n}\n\n",
      "renaming": {},
      "calling": [
        "yy_create_buffer.constprop.0",
        "yyparse.isra.0",
        "yyensure_buffer_stack"
      ],
      "called": [
        "fprintf",
        "exit"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "yy_create_buffer.constprop.0": {
      "entrypoint": "0x001033d6",
      "current_name": "yy_create_buffer.constprop.0",
      "code": "\nundefined  [16]\nyy_create_buffer_constprop_0\n          (undefined8 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  void *pvVar1;\n  void *pvVar2;\n  undefined auVar3 [16];\n  \n  pvVar1 \u003d malloc(0x40);\n  if (pvVar1 !\u003d (void *)0x0) goto LAB_001033f7;\n  do {\n    pvVar1 \u003d (void *)yy_fatal_error(\"out of dynamic memory in yy_create_buffer()\");\nLAB_001033f7:\n    *(undefined4 *)((long)pvVar1 + 0x18) \u003d 0x4000;\n    pvVar2 \u003d malloc(0x4002);\n    *(void **)((long)pvVar1 + 8) \u003d pvVar2;\n  } while (pvVar2 \u003d\u003d (void *)0x0);\n  *(undefined4 *)((long)pvVar1 + 0x20) \u003d 1;\n  yy_init_buffer(pvVar1,param_1);\n  auVar3._8_8_ \u003d param_4;\n  auVar3._0_8_ \u003d pvVar1;\n  return auVar3;\n}\n\n",
      "renaming": {},
      "calling": [
        "yyparse.isra.0"
      ],
      "called": [
        "yy_fatal_error",
        "malloc",
        "yy_init_buffer"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "usage": {
      "entrypoint": "0x0010342d",
      "current_name": "usage",
      "code": "\n\n\nvoid usage(uint param_1)\n\n{\n  undefined8 uVar1;\n  char *pcVar2;\n  FILE *__stream;\n  \n  pcVar2 \u003d (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin \u003cname\u003e] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  __stream \u003d _stderr;\n  if (param_1 !\u003d 0) {\n    __stream \u003d _stdout;\n  }\n  fprintf(__stream,pcVar2,program_name);\n  uVar1 \u003d program_name;\n  pcVar2 \u003d (char *)dcgettext(0,\"       %s -M [\u003cmri-script]\\n\",5);\n  fprintf(__stream,pcVar2,uVar1);\n  pcVar2 \u003d (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  [l \u003ctext\u003e ]  - specify the dependencies of this library\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  @\u003cfile\u003e      - read options from \u003cfile\u003e\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  --target\u003dBFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\n                             \"  --output\u003dDIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\n                             \"  --record-libdeps\u003d\u003ctext\u003e - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  --plugin \u003cp\u003e - load the specified plugin\\n\",5);\n  fprintf(__stream,pcVar2);\n  ar_emul_default_usage(__stream);\n  list_supported_targets(program_name,__stream);\n  if (param_1 !\u003d 0) {\n    pcVar2 \u003d (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(__stream,pcVar2,\"\u003chttps://sourceware.org/bugzilla/\u003e\");\n  }\n                    \n  xexit(param_1 ^ 1);\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "list_supported_targets",
        "xexit",
        "fprintf",
        "ar_emul_default_usage",
        "dcgettext"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "ranlib_usage": {
      "entrypoint": "0x0010394a",
      "current_name": "ranlib_usage",
      "code": "\n\n\nvoid ranlib_usage(uint param_1)\n\n{\n  undefined8 uVar1;\n  char *pcVar2;\n  FILE *__stream;\n  \n  uVar1 \u003d program_name;\n  __stream \u003d _stderr;\n  if (param_1 !\u003d 0) {\n    __stream \u003d _stdout;\n  }\n  pcVar2 \u003d (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(__stream,pcVar2,uVar1);\n  pcVar2 \u003d (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\n                             \" The options are:\\n  @\u003cfile\u003e                      Read options from \u003cfile\u003e\\n\"\n                             ,5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\"  --plugin \u003cname\u003e              Load the specified plugin\\n\",5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(__stream,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\\u0027s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(__stream,pcVar2);\n  list_supported_targets(program_name,__stream);\n  if (param_1 !\u003d 0) {\n    pcVar2 \u003d (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(__stream,pcVar2,\"\u003chttps://sourceware.org/bugzilla/\u003e\");\n  }\n                    \n  xexit(param_1 ^ 1);\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "list_supported_targets",
        "xexit",
        "fprintf",
        "dcgettext"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "print_contents": {
      "entrypoint": "0x00103a78",
      "current_name": "print_contents",
      "code": "\n\n\nvoid print_contents(undefined8 *param_1)\n\n{\n  int iVar1;\n  void *__ptr;\n  undefined8 *puVar2;\n  ulong uVar3;\n  undefined8 uVar4;\n  size_t sVar5;\n  int *piVar6;\n  size_t unaff_RBP;\n  char *pcVar7;\n  ulong unaff_R13;\n  ulong unaff_R14;\n  undefined auStack_b8 [48];\n  ulong local_88;\n  \n  __ptr \u003d (void *)xmalloc(0x2000);\n  puVar2 \u003d (undefined8 *)param_1[0x1d];\n  if ((undefined8 *)param_1[0x1d] \u003d\u003d (undefined8 *)0x0) {\n    puVar2 \u003d param_1;\n  }\n  iVar1 \u003d (**(code **)(puVar2[1] + 0x1e8))(param_1,auStack_b8);\n  if (iVar1 \u003d\u003d 0) {\n    if (verbose !\u003d 0) {\n      printf(\"\\n\u003c%s\u003e\\n\\n\",*param_1);\n    }\n    unaff_R13 \u003d 0;\n    bfd_seek(param_1,0,0);\n    goto LAB_00103afd;\n  }\n  param_1 \u003d (undefined8 *)*param_1;\n  pcVar7 \u003d \"internal stat error on %s\";\n  do {\n    uVar4 \u003d dcgettext(0,pcVar7,5);\n    fatal(uVar4,param_1);\n    local_88 \u003d unaff_R14;\n    do {\n      sVar5 \u003d fwrite(__ptr,1,unaff_RBP,_stdout);\n      if (sVar5 !\u003d unaff_RBP) {\n        piVar6 \u003d __errno_location();\n        pcVar7 \u003d strerror(*piVar6);\n        fatal(\"stdout: %s\",pcVar7);\nLAB_00103b91:\n        free(__ptr);\n        return;\n      }\n      unaff_R13 \u003d unaff_R13 + sVar5;\nLAB_00103afd:\n      if (local_88 \u003c\u003d unaff_R13) goto LAB_00103b91;\n      unaff_RBP \u003d local_88 - unaff_R13;\n      if (0x2000 \u003c unaff_RBP) {\n        unaff_RBP \u003d 0x2000;\n      }\n      uVar3 \u003d bfd_bread(__ptr,unaff_RBP,param_1);\n    } while (unaff_RBP \u003d\u003d uVar3);\n    pcVar7 \u003d \"%s is not a valid archive\";\n    param_1 \u003d *(undefined8 **)param_1[0x1d];\n    unaff_R14 \u003d local_88;\n  } while( true );\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "xmalloc",
        "free",
        "fatal",
        "__errno_location",
        "fwrite",
        "strerror",
        "bfd_seek",
        "dcgettext",
        "printf",
        "bfd_bread"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "prompt": {
      "entrypoint": "0x00103ba8",
      "current_name": "prompt",
      "code": "\n\n\nvoid prompt(void)\n\n{\n  if (interactive !\u003d 0) {\n    printf(\"AR \u003e\");\n    fflush(_stdout);\n    return;\n  }\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "yyparse.isra.0"
      ],
      "called": [
        "printf",
        "fflush"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "list_matching_formats": {
      "entrypoint": "0x00103bd1",
      "current_name": "list_matching_formats",
      "code": "\n\n\nvoid list_matching_formats(long *param_1)\n\n{\n  undefined8 uVar1;\n  char *__format;\n  long *plVar2;\n  \n  fflush(_stdout);\n  uVar1 \u003d program_name;\n  __format \u003d (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,__format,uVar1);\n  for (plVar2 \u003d param_1; *plVar2 !\u003d 0; plVar2 \u003d plVar2 + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(param_1);\n  fputc(10,_stderr);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main",
        "open_inarch"
      ],
      "called": [
        "fprintf",
        "fputc",
        "free",
        "dcgettext",
        "fflush"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "ar_open": {
      "entrypoint": "0x00103c60",
      "current_name": "ar_open",
      "code": "\n\n\nvoid ar_open(char *param_1,int param_2)\n\n{\n  char cVar1;\n  int *piVar2;\n  char *pcVar3;\n  long lVar4;\n  long lVar5;\n  undefined8 uVar6;\n  long *plVar7;\n  \n  real_name \u003d xstrdup();\n  temp_name \u003d (char *)make_tempname(real_name,\u0026temp_fd);\n  if (temp_name \u003d\u003d (char *)0x0) {\n    piVar2 \u003d __errno_location();\n    param_1 \u003d strerror(*piVar2);\n    uVar6 \u003d program_name;\n    pcVar3 \u003d (char *)dcgettext(0,\"%s: Can\\\u0027t open temporary file (%s)\\n\",5);\n  }\n  else {\n    obfd \u003d bfd_fdopenw(temp_name,0,temp_fd);\n    if (obfd \u003d\u003d 0) {\n      pcVar3 \u003d \"%s: Can\\\u0027t open output archive %s\\n\";\n      param_1 \u003d temp_name;\n    }\n    else {\n      if (param_2 !\u003d 0) {\nLAB_00103d02:\n        bfd_set_format(obfd,2);\n        *(byte *)(obfd + 0x49) \u003d *(byte *)(obfd + 0x49) \u0026 0xe7 | 8;\n        return;\n      }\n      lVar4 \u003d bfd_openr(param_1,\"plugin\");\n      if (lVar4 \u003d\u003d 0) {\n        pcVar3 \u003d \"%s: Can\\\u0027t open input archive %s\\n\";\n      }\n      else {\n        cVar1 \u003d bfd_check_format(lVar4,2);\n        if (cVar1 !\u003d \u0027\\0\u0027) {\n          plVar7 \u003d (long *)(obfd + 0xf8);\n          for (lVar5 \u003d bfd_openr_next_archived_file(lVar4,0); lVar5 !\u003d 0;\n              lVar5 \u003d bfd_openr_next_archived_file(lVar4,lVar5)) {\n            *plVar7 \u003d lVar5;\n            plVar7 \u003d (long *)(lVar5 + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        pcVar3 \u003d \"%s: file %s is not an archive\\n\";\n      }\n    }\n    uVar6 \u003d program_name;\n    pcVar3 \u003d (char *)dcgettext(0,pcVar3,5);\n  }\n  fprintf(_stderr,pcVar3,uVar6,param_1);\n  maybequit();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "yyparse.isra.0"
      ],
      "called": [
        "bfd_openr",
        "maybequit",
        "fprintf",
        "make_tempname",
        "xstrdup",
        "bfd_check_format",
        "__errno_location",
        "strerror",
        "bfd_fdopenw",
        "dcgettext",
        "bfd_set_format",
        "bfd_openr_next_archived_file"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "ar_directory_doer": {
      "entrypoint": "0x00103ddc",
      "current_name": "ar_directory_doer",
      "code": "\nvoid ar_directory_doer(undefined8 param_1)\n\n{\n  print_arelt_descr(outfile,param_1,verbose !\u003d 0,0);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "yyparse.isra.0"
      ],
      "called": [
        "print_arelt_descr"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "yyensure_buffer_stack": {
      "entrypoint": "0x00103df9",
      "current_name": "yyensure_buffer_stack",
      "code": "\nundefined8 yyensure_buffer_stack(void)\n\n{\n  size_t __size;\n  undefined8 in_RCX;\n  long lVar1;\n  long lVar2;\n  undefined4 *puVar3;\n  byte bVar4;\n  \n  bVar4 \u003d 0;\n  if (yy_buffer_stack \u003d\u003d (void *)0x0) {\n    yy_buffer_stack \u003d calloc(8,1);\n    if (yy_buffer_stack !\u003d (void *)0x0) {\n      yy_buffer_stack_max \u003d 1;\n      yy_buffer_stack_top \u003d 0;\n      return in_RCX;\n    }\n  }\n  else {\n    if (yy_buffer_stack_top \u003c yy_buffer_stack_max - 1U) {\n      return in_RCX;\n    }\n    lVar2 \u003d yy_buffer_stack_max + 8;\n    __size \u003d lVar2 * 8;\n    yy_buffer_stack \u003d realloc(yy_buffer_stack,__size);\n    if (yy_buffer_stack !\u003d (void *)0x0) {\n      puVar3 \u003d (undefined4 *)((long)yy_buffer_stack + (__size - 0x40));\n      yy_buffer_stack_max \u003d lVar2;\n      for (lVar1 \u003d 0x10; lVar1 !\u003d 0; lVar1 \u003d lVar1 + -1) {\n        *puVar3 \u003d 0;\n        puVar3 \u003d puVar3 + (ulong)bVar4 * -2 + 1;\n      }\n      return in_RCX;\n    }\n  }\n  yy_fatal_error(\"out of dynamic memory in yyensure_buffer_stack()\");\n  yy_buffer_stack_top \u003d 0;\n  yy_buffer_stack_max \u003d 1;\n  return in_RCX;\n}\n\n",
      "renaming": {},
      "calling": [
        "yyparse.isra.0"
      ],
      "called": [
        "yy_fatal_error",
        "realloc",
        "calloc"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "yyparse.isra.0": {
      "entrypoint": "0x00103e95",
      "current_name": "yyparse.isra.0",
      "code": "\n\n\nvoid yyparse_isra_0(void)\n\n{\n  long **pplVar1;\n  char cVar2;\n  FILE **ppFVar3;\n  FILE *pFVar4;\n  long *plVar5;\n  undefined8 uVar6;\n  byte *pbVar7;\n  int iVar8;\n  char *pcVar10;\n  undefined8 uVar11;\n  int iVar9;\n  long *plVar12;\n  size_t sVar13;\n  void *pvVar14;\n  char *pcVar15;\n  char *pcVar16;\n  long lVar17;\n  long lVar18;\n  ulong uVar19;\n  uint uVar20;\n  long lVar21;\n  undefined8 *puVar22;\n  undefined8 *puVar23;\n  uint uVar24;\n  int iVar25;\n  ulong uVar26;\n  char **ppcVar27;\n  bool bVar28;\n  char **ppcVar29;\n  byte bVar30;\n  long lVar31;\n  byte *pbVar32;\n  byte *pbVar33;\n  int *piVar34;\n  byte *pbVar35;\n  uint uVar36;\n  int iVar37;\n  char **ppcVar38;\n  byte bVar39;\n  undefined auVar40 [16];\n  undefined auVar41 [16];\n  char *local_828;\n  char *local_820;\n  long local_818;\n  char **local_810;\n  int local_800;\n  uint local_7fc;\n  byte *local_7f8;\n  stat local_7d0;\n  char local_740 [200];\n  char *local_678 [201];\n  \n  bVar39 \u003d 0;\n  lVar18 \u003d 0;\n  yychar \u003d -2;\n  ppcVar29 \u003d local_678;\n  local_800 \u003d 0;\n  local_828 \u003d local_740;\n  local_818 \u003d 200;\n  local_820 \u003d local_828;\n  local_810 \u003d ppcVar29;\nLAB_00103ee9:\n  *local_828 \u003d (char)lVar18;\n  if (local_820 + local_818 + -1 \u003c\u003d local_828) {\n    lVar21 \u003d (long)local_828 - (long)local_820;\n    lVar17 \u003d lVar21 + 1;\n    if (local_818 \u003c 10000) {\n      lVar31 \u003d local_818 * 2;\n      local_818 \u003d 10000;\n      if (lVar31 \u003c 0x2711) {\n        local_818 \u003d lVar31;\n      }\n      pcVar10 \u003d (char *)malloc(local_818 * 9 + 7);\n      if (pcVar10 !\u003d (char *)0x0) {\n        lVar31 \u003d lVar17 * 8;\n        pcVar15 \u003d local_820;\n        pcVar16 \u003d pcVar10;\n        for (; lVar17 !\u003d 0; lVar17 \u003d lVar17 + -1) {\n          *pcVar16 \u003d *pcVar15;\n          pcVar15 \u003d pcVar15 + (ulong)bVar39 * -2 + 1;\n          pcVar16 \u003d pcVar16 + (ulong)bVar39 * -2 + 1;\n        }\n        ppcVar38 \u003d (char **)(pcVar10 + local_818);\n        ppcVar29 \u003d ppcVar38;\n        for (; lVar31 !\u003d 0; lVar31 \u003d lVar31 + -1) {\n          *(undefined *)ppcVar29 \u003d *(undefined *)local_810;\n          local_810 \u003d (char **)((long)local_810 + (ulong)bVar39 * -2 + 1);\n          ppcVar29 \u003d (char **)((long)ppcVar29 + (ulong)bVar39 * -2 + 1);\n        }\n        if (local_820 !\u003d local_740) {\n          free(local_820);\n        }\n        local_828 \u003d pcVar10 + lVar21;\n        ppcVar29 \u003d ppcVar38 + lVar21;\n        local_820 \u003d pcVar10;\n        local_810 \u003d ppcVar38;\n        if (pcVar10 + local_818 + -1 \u003c\u003d local_828) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    yyerror_constprop_0();\nLAB_0010524c:\n    pcVar10 \u003d local_820;\n    if (local_820 \u003d\u003d local_740) {\n      return;\n    }\nLAB_00105265:\n    free(pcVar10);\n    return;\n  }\nLAB_00103fd8:\n  iVar37 \u003d (int)lVar18;\n  if (iVar37 \u003d\u003d 3) goto LAB_0010524c;\n  cVar2 \u003d (\u0026yypact)[iVar37];\n  if (cVar2 !\u003d -0xe) {\n    if (yychar \u003d\u003d -2) {\n      if (yy_init \u003d\u003d 0) {\n        yy_init \u003d 1;\n        if (yy_start \u003d\u003d 0) {\n          yy_start \u003d 1;\n        }\n        if (yyin \u003d\u003d (FILE *)0x0) {\n          yyin \u003d _stdin;\n        }\n        if (yyout \u003d\u003d (FILE *)0x0) {\n          yyout \u003d _stdout;\n        }\n        if ((yy_buffer_stack \u003d\u003d 0) || (*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) \u003d\u003d 0)) {\n          yyensure_buffer_stack();\n          puVar22 \u003d (undefined8 *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n          uVar11 \u003d yy_create_buffer_constprop_0(yyin);\n          *puVar22 \u003d uVar11;\n        }\n        yy_load_buffer_state();\n      }\nLAB_001040b1:\n      *yy_c_buf_p \u003d yy_hold_char;\n      pbVar32 \u003d yy_c_buf_p;\n      pbVar35 \u003d yy_c_buf_p;\n      uVar20 \u003d yy_start;\nLAB_001040d4:\n      uVar19 \u003d (ulong)uVar20;\n      uVar26 \u003d (ulong)local_7fc;\n      bVar28 \u003d false;\n      do {\n        bVar30 \u003d yy_ec[*pbVar35];\n        if (*(short *)(yy_accept + (long)(int)uVar19 * 2) !\u003d 0) {\n          bVar28 \u003d true;\n          uVar26 \u003d uVar19 \u0026 0xffffffff;\n          local_7f8 \u003d pbVar35;\n        }\n        while( true ) {\n          iVar8 \u003d (int)uVar19;\n          lVar18 \u003d (long)(int)((int)*(short *)(yy_base + (long)iVar8 * 2) + (uint)bVar30);\n          if (iVar8 \u003d\u003d *(short *)(yy_chk + lVar18 * 2)) break;\n          uVar19 \u003d (ulong)(uint)(int)*(short *)(yy_def + (long)iVar8 * 2);\n          if (0xb0 \u003c *(short *)(yy_def + (long)iVar8 * 2)) {\n            bVar30 \u003d yy_meta[(int)(uint)bVar30];\n          }\n        }\n        pbVar35 \u003d pbVar35 + 1;\n        uVar19 \u003d (ulong)*(short *)(yy_nxt + lVar18 * 2);\n      } while (*(short *)(yy_base + uVar19 * 2) !\u003d 0xc2);\n      local_7fc \u003d (uint)uVar26;\n      pbVar33 \u003d pbVar32;\n      if (bVar28) {\n        yy_last_accepting_cpos \u003d local_7f8;\n        yy_last_accepting_state \u003d local_7fc;\n      }\nLAB_0010419f:\n      iVar8 \u003d (int)*(short *)(yy_accept + (long)(int)uVar19 * 2);\n      if (iVar8 \u003d\u003d 0) {\n        iVar8 \u003d (int)*(short *)(yy_accept + (long)(int)yy_last_accepting_state * 2);\n        pbVar35 \u003d yy_last_accepting_cpos;\n      }\n      yyleng \u003d (int)pbVar35 - (int)pbVar33;\n      yy_hold_char \u003d *pbVar35;\n      yy_c_buf_p \u003d pbVar35;\n      yytext \u003d pbVar33;\n      *pbVar35 \u003d 0;\nLAB_001041f0:\n      pbVar32 \u003d yytext;\n      lVar18 \u003d yy_buffer_stack_top;\n      switch(iVar8) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        yychar \u003d 0x105;\n        break;\n      case 2:\n      case 0x11:\n        yychar \u003d 0x107;\n        break;\n      case 3:\n      case 0x12:\n        yychar \u003d 0x108;\n        break;\n      case 4:\n      case 0x13:\n        yychar \u003d 0x109;\n        break;\n      case 5:\n      case 0x14:\n        yychar \u003d 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        yychar \u003d 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        yychar \u003d 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        yychar \u003d 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        yychar \u003d 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        yychar \u003d 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        yychar \u003d 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        yychar \u003d 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        yychar \u003d 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        yychar \u003d 0x103;\n        break;\n      case 0x1f:\n        linenumber \u003d linenumber + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        yychar \u003d 0x28;\n        break;\n      case 0x21:\n        yychar \u003d 0x29;\n        break;\n      case 0x22:\n        yychar \u003d 0x2c;\n        break;\n      case 0x23:\n        yylval \u003d (char *)xstrdup(yytext);\n        yychar \u003d 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        linenumber \u003d linenumber + 1;\n        yychar \u003d 0x102;\n        break;\n      case 0x28:\n        fwrite(yytext,(long)yyleng,1,yyout);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        yychar \u003d 0;\n        break;\n      default:\n        yy_fatal_error(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        yychar \u003d 0x112;\n      }\n      lVar18 \u003d (long)iVar37;\n    }\n    if (0 \u003c yychar) {\n      if (yychar !\u003d 0x100) {\n        iVar37 \u003d 2;\n        if (yychar \u003c 0x114) {\n          iVar37 \u003d (int)(char)yytranslate[yychar];\n        }\n        goto LAB_0010497d;\n      }\n      yychar \u003d 0x101;\n      goto LAB_001051f0;\n    }\n    iVar37 \u003d 0;\n    yychar \u003d 0;\nLAB_0010497d:\n    uVar20 \u003d cVar2 + iVar37;\n    if ((0x22 \u003c uVar20) || (iVar37 !\u003d (char)yycheck[(int)uVar20])) goto LAB_001049db;\n    cVar2 \u003d yytable[(int)uVar20];\n    lVar18 \u003d (long)cVar2;\n    if (cVar2 \u003c \u0027\\x01\u0027) {\n      iVar37 \u003d -(int)cVar2;\n      goto LAB_00104a0a;\n    }\n    yychar \u003d -2;\n    local_800 \u003d local_800 + -1 + (uint)(local_800 \u003d\u003d 0);\n    ppcVar29 \u003d ppcVar29 + 1;\n    *ppcVar29 \u003d yylval;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  iVar37 \u003d (int)(char)(\u0026yydefact)[(int)lVar18];\n  if ((\u0026yydefact)[(int)lVar18] \u003d\u003d \u0027\\0\u0027) {\n    if (local_800 \u003d\u003d 0) {\n      yynerrs \u003d yynerrs + 1;\n      yyerror_constprop_0();\nLAB_001051f0:\n      do {\n        if (((((char)(\u0026yypact)[lVar18] !\u003d -0xe) \u0026\u0026\n             (uVar20 \u003d (int)(char)(\u0026yypact)[lVar18] + 1, uVar20 \u003c 0x23)) \u0026\u0026\n            (yycheck[(int)uVar20] \u003d\u003d \u0027\\x01\u0027)) \u0026\u0026\n           (lVar18 \u003d (long)(char)yytable[(int)uVar20], \u0027\\0\u0027 \u003c (char)yytable[(int)uVar20]))\n        goto LAB_00105227;\n        if (local_820 \u003d\u003d local_828) goto LAB_0010524c;\n        local_828 \u003d local_828 + -1;\n        ppcVar29 \u003d ppcVar29 + -1;\n        lVar18 \u003d (long)*local_828;\n      } while( true );\n    }\n    if (local_800 !\u003d 3) goto LAB_001051f0;\n    if (0 \u003c yychar) {\n      yychar \u003d -2;\n      goto LAB_001051f0;\n    }\n    if (yychar !\u003d 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  uVar11 \u003d program_name;\n  ppcVar27 \u003d obfd;\n  cVar2 \u003d yyr2[iVar37];\n  ppcVar38 \u003d (char **)ppcVar29[1 - cVar2];\n  switch(iVar37) {\n  case 2:\n  case 6:\n    prompt();\n    break;\n  case 0x13:\n    if (obfd \u003d\u003d (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*obfd);\n    return;\n  case 0x15:\n    yyerror_constprop_0();\n    break;\n  case 0x17:\n    puVar22 \u003d (undefined8 *)*ppcVar29;\n    if (obfd \u003d\u003d (char **)0x0) {\n      pcVar10 \u003d \"%s: no open archive\\n\";\nLAB_00104b62:\n      pcVar10 \u003d (char *)dcgettext(0,pcVar10,5);\n      fprintf(_stderr,pcVar10,uVar11);\n      maybequit();\n    }\n    else {\n      for (; puVar22 !\u003d (undefined8 *)0x0; puVar22 \u003d (undefined8 *)puVar22[1]) {\n        for (puVar23 \u003d (undefined8 *)obfd[0x1f]; puVar23 !\u003d (undefined8 *)0x0;\n            puVar23 \u003d (undefined8 *)puVar23[0x1e]) {\n          iVar8 \u003d filename_cmp(*puVar23);\n          if (iVar8 \u003d\u003d 0) {\n            extract_file();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*puVar22,0);\n        uVar6 \u003d program_name;\n        uVar11 \u003d *puVar22;\n        pcVar10 \u003d (char *)dcgettext(0,\"%s: can\\\u0027t find module file %s\\n\",5);\n        fprintf(_stderr,pcVar10,uVar6,uVar11);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    puVar22 \u003d (undefined8 *)*ppcVar29;\n    if (obfd \u003d\u003d (char **)0x0) {\nLAB_00104b4f:\n      pcVar10 \u003d \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; puVar22 !\u003d (undefined8 *)0x0; puVar22 \u003d (undefined8 *)puVar22[1]) {\n      bVar28 \u003d false;\n      ppcVar27 \u003d obfd + 0x1f;\n      for (pcVar10 \u003d obfd[0x1f]; pcVar10 !\u003d (char *)0x0; pcVar10 \u003d *(char **)(pcVar10 + 0xf0)) {\n        iVar8 \u003d filename_cmp();\n        if (iVar8 \u003d\u003d 0) {\n          pcVar15 \u003d (char *)bfd_openr(*puVar22,0);\n          uVar11 \u003d program_name;\n          if (pcVar15 \u003d\u003d (char *)0x0) {\n            uVar6 \u003d *puVar22;\n            pcVar15 \u003d (char *)dcgettext(0,\"%s: can\\\u0027t open file %s\\n\",5);\n            fprintf(_stderr,pcVar15,uVar11,uVar6);\n            maybequit();\n          }\n          else {\n            *ppcVar27 \u003d pcVar15;\n            bVar28 \u003d true;\n            *(undefined8 *)(pcVar15 + 0xf0) \u003d *(undefined8 *)(pcVar10 + 0xf0);\n          }\n        }\n        else {\n          ppcVar27 \u003d (char **)(pcVar10 + 0xf0);\n        }\n      }\n      if (!bVar28) {\n        pcVar10 \u003d (char *)bfd_openr(*puVar22,0);\n        uVar6 \u003d program_name;\n        uVar11 \u003d *puVar22;\n        pcVar15 \u003d (char *)dcgettext(0,\"%s: can\\\u0027t find module file %s\\n\",5);\n        fprintf(_stderr,pcVar15,uVar6,uVar11);\n        uVar11 \u003d program_name;\n        if (pcVar10 \u003d\u003d (char *)0x0) {\n          uVar6 \u003d *puVar22;\n          pcVar10 \u003d (char *)dcgettext(0,\"%s: can\\\u0027t open file %s\\n\",5);\n          fprintf(_stderr,pcVar10,uVar11,uVar6);\n          maybequit();\n        }\n        else {\n          *ppcVar27 \u003d pcVar10;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (obfd !\u003d (char **)0x0) {\n      obfd[0x1f] \u003d (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    puVar22 \u003d (undefined8 *)*ppcVar29;\n    if (obfd \u003d\u003d (char **)0x0) goto LAB_00104b4f;\n    for (; puVar22 !\u003d (undefined8 *)0x0; puVar22 \u003d (undefined8 *)puVar22[1]) {\n      bVar28 \u003d false;\n      ppcVar27 \u003d obfd + 0x1f;\n      for (puVar23 \u003d (undefined8 *)obfd[0x1f]; uVar11 \u003d program_name, puVar23 !\u003d (undefined8 *)0x0;\n          puVar23 \u003d (undefined8 *)puVar23[0x1e]) {\n        iVar8 \u003d filename_cmp(*puVar23,*puVar22);\n        if (iVar8 \u003d\u003d 0) {\n          bVar28 \u003d true;\n          *ppcVar27 \u003d (char *)puVar23[0x1e];\n        }\n        else {\n          ppcVar27 \u003d (char **)(puVar23 + 0x1e);\n        }\n      }\n      if (!bVar28) {\n        uVar6 \u003d *puVar22;\n        pcVar10 \u003d (char *)dcgettext(0,\"%s: can\\\u0027t find module file %s\\n\",5);\n        fprintf(_stderr,pcVar10,uVar11,uVar6);\n        maybequit();\n      }\n    }\n    break;\n  case 0x1b:\n    puVar22 \u003d (undefined8 *)*ppcVar29;\n    if (obfd \u003d\u003d (char **)0x0) goto LAB_00104b4f;\n    for (; puVar22 !\u003d (undefined8 *)0x0; puVar22 \u003d (undefined8 *)puVar22[1]) {\n      pcVar10 \u003d (char *)bfd_openr(*puVar22,\"plugin\");\n      uVar11 \u003d program_name;\n      ppcVar27 \u003d obfd;\n      if (pcVar10 \u003d\u003d (char *)0x0) {\n        uVar6 \u003d *puVar22;\n        pcVar10 \u003d (char *)dcgettext(0,\"%s: can\\\u0027t open file %s\\n\",5);\n        fprintf(_stderr,pcVar10,uVar11,uVar6);\n        maybequit();\n      }\n      else {\n        *(char **)(pcVar10 + 0xf0) \u003d obfd[0x1f];\n        ppcVar27[0x1f] \u003d pcVar10;\n      }\n    }\n    break;\n  case 0x1c:\n    if (obfd \u003d\u003d (char **)0x0) goto LAB_00104b4f;\n    pcVar10 \u003d *obfd;\n    verbose \u003d 1;\n    outfile \u003d _stdout;\n    pcVar15 \u003d (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(pcVar15,pcVar10);\n    for (pcVar10 \u003d obfd[0x1f]; pcVar10 !\u003d (char *)0x0; pcVar10 \u003d *(char **)(pcVar10 + 0xf0)) {\n      ar_directory_doer(pcVar10,0);\n    }\n    break;\n  case 0x1d:\n    if (obfd \u003d\u003d (char **)0x0) goto LAB_00104b4f;\n    if (0 \u003c deterministic) {\n      *(uint *)((long)obfd + 0x44) \u003d *(uint *)((long)obfd + 0x44) | 0x2000;\n    }\n    temp_fd \u003d dup(temp_fd);\n    bfd_close(ppcVar27);\n    pcVar10 \u003d real_name;\n    iVar8 \u003d stat(real_name,\u0026local_7d0);\n    if ((iVar8 !\u003d 0) \u0026\u0026 (obfd \u003d (char **)bfd_openw(pcVar10,0), obfd !\u003d (char **)0x0)) {\n      bfd_set_format(obfd,2);\n      bfd_close(obfd);\n    }\n    smart_rename_constprop_0(temp_name,real_name,temp_fd);\n    obfd \u003d (char **)0x0;\n    free(temp_name);\n    free(real_name);\n    break;\n  case 0x1e:\n    ar_open(*ppcVar29,0);\n    break;\n  case 0x1f:\n    ar_open(*ppcVar29,1);\n    break;\n  case 0x20:\n    pcVar10 \u003d *ppcVar29;\n    if (obfd \u003d\u003d (char **)0x0) {\n      pcVar10 \u003d \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    lVar18 \u003d open_inarch(ppcVar29[-1],0);\n    if (lVar18 !\u003d 0) {\n      map_over_list(lVar18,ar_addlib_doer,pcVar10);\n    }\n    break;\n  case 0x21:\n    pcVar10 \u003d *ppcVar29;\n    pcVar15 \u003d ppcVar29[-1];\n    uVar11 \u003d open_inarch(ppcVar29[-2],0);\n    if (pcVar10 \u003d\u003d (char *)0x0) {\n      outfile \u003d _stdout;\n    }\n    else {\n      outfile \u003d fopen(pcVar10,\"w\");\n      if (outfile !\u003d (FILE *)0x0) {\n        map_over_list(uVar11,ar_directory_doer,pcVar15);\n        bfd_close(uVar11);\n        fclose(outfile);\n        break;\n      }\n      outfile \u003d _stdout;\n      pcVar16 \u003d (char *)dcgettext(0,\"Can\\\u0027t open file %s\\n\",5);\n      fprintf(_stderr,pcVar16,pcVar10);\n    }\n    map_over_list(uVar11,ar_directory_doer,pcVar15);\n    bfd_close(uVar11);\n    break;\n  case 0x22:\n    ppcVar38 \u003d (char **)*ppcVar29;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    ppcVar38 \u003d (char **)0x0;\n    break;\n  case 0x24:\n    ppcVar38 \u003d (char **)ppcVar29[-1];\n    break;\n  case 0x26:\n    ppcVar38 \u003d (char **)malloc(0x10);\n    pcVar10 \u003d ppcVar29[-2];\n    *ppcVar38 \u003d *ppcVar29;\n    ppcVar38[1] \u003d pcVar10;\n    break;\n  case 0x2a:\n    verbose \u003d (uint)(verbose \u003d\u003d 0);\n  }\n  lVar18 \u003d (long)cVar2;\n  local_828 \u003d local_828 + -lVar18;\n  ppcVar29[1 - lVar18] \u003d (char *)ppcVar38;\n  ppcVar29 \u003d ppcVar29 + (1 - lVar18);\n  uVar20 \u003d (int)(char)yypgoto[(char)yyr1[iVar37] + -0x18] + (int)*local_828;\n  if ((uVar20 \u003c 0x23) \u0026\u0026 (*local_828 \u003d\u003d yycheck[(int)uVar20])) {\n    lVar18 \u003d (long)(char)yytable[(int)uVar20];\n  }\n  else {\n    lVar18 \u003d (long)(char)yydefgoto[(char)yyr1[iVar37] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  iVar8 \u003d ((int)pbVar35 - (int)yytext) + -1;\n  *pbVar35 \u003d yy_hold_char;\n  pplVar1 \u003d (long **)(yy_buffer_stack + lVar18 * 8);\n  ppFVar3 \u003d (FILE **)*pplVar1;\n  if (*(int *)(ppFVar3 + 7) \u003d\u003d 0) {\n    yy_n_chars \u003d *(uint *)((long)ppFVar3 + 0x1c);\n    *(undefined4 *)(ppFVar3 + 7) \u003d 1;\n    *ppFVar3 \u003d yyin;\n  }\n  pbVar7 \u003d yy_c_buf_p;\n  pFVar4 \u003d ppFVar3[1];\n  auVar40._8_8_ \u003d pFVar4;\n  auVar40._0_8_ \u003d ppFVar3;\n  if ((byte *)((long)\u0026pFVar4-\u003e_flags + (long)(int)yy_n_chars) \u003c yy_c_buf_p) {\n    if ((byte *)((long)\u0026pFVar4-\u003e_flags + (long)(int)yy_n_chars + 1) \u003c yy_c_buf_p) {\n      auVar40 \u003d yy_fatal_error();\n    }\n    if (*(int *)(auVar40._0_8_ + 0x34) !\u003d 0) {\n      uVar20 \u003d (int)((long)pbVar7 - (long)pbVar32) - 1;\n      for (lVar18 \u003d 0; (int)lVar18 \u003c (int)uVar20; lVar18 \u003d lVar18 + 1) {\n        *(byte *)(auVar40._8_8_ + lVar18) \u003d pbVar32[lVar18];\n      }\n      plVar12 \u003d *pplVar1;\n      if (*(int *)(plVar12 + 7) \u003d\u003d 2) {\n        yy_n_chars \u003d 0;\n        *(undefined4 *)((long)plVar12 + 0x1c) \u003d 0;\nLAB_0010475e:\n        pFVar4 \u003d yyin;\n        if (uVar20 \u003d\u003d 0) {\n          if ((yy_buffer_stack \u003d\u003d 0) || (*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) \u003d\u003d 0))\n          {\n            yyensure_buffer_stack();\n            puVar22 \u003d (undefined8 *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n            uVar11 \u003d yy_create_buffer_constprop_0(pFVar4);\n            *puVar22 \u003d uVar11;\n          }\n          lVar18 \u003d yy_buffer_stack;\n          if (yy_buffer_stack !\u003d 0) {\n            lVar18 \u003d *(long *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n          }\n          iVar9 \u003d 1;\n          yy_init_buffer(lVar18);\n          yy_load_buffer_state();\n        }\n        else {\n          iVar9 \u003d 2;\n          *(undefined4 *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 0x38) \u003d 2;\n        }\n      }\n      else {\n        while( true ) {\n          plVar5 \u003d *pplVar1;\n          uVar24 \u003d ~uVar20 + *(int *)(plVar12 + 3);\n          if (0 \u003c (int)uVar24) break;\n          uVar24 \u003d (int)yy_c_buf_p - (int)(void *)plVar5[1];\n          if (*(int *)(plVar5 + 4) \u003d\u003d 0) {\n            plVar5[1] \u003d 0;\nLAB_00104626:\n            yy_fatal_error();\n            break;\n          }\n          iVar9 \u003d *(int *)(plVar5 + 3);\n          iVar25 \u003d iVar9;\n          if (iVar9 \u003c 1) {\n            iVar25 \u003d iVar9 / 8;\n          }\n          *(int *)(plVar5 + 3) \u003d iVar25 + iVar9;\n          pvVar14 \u003d realloc((void *)plVar5[1],(long)(iVar25 + iVar9 + 2));\n          plVar5[1] \u003d (long)pvVar14;\n          if (pvVar14 \u003d\u003d (void *)0x0) goto LAB_00104626;\n          yy_c_buf_p \u003d (byte *)((long)pvVar14 + (long)(int)uVar24);\n          plVar12 \u003d *pplVar1;\n        }\n        if (0x2000 \u003c (int)uVar24) {\n          uVar24 \u003d 0x2000;\n        }\n        uVar26 \u003d (ulong)uVar24;\n        if (*(int *)((long)plVar5 + 0x24) \u003d\u003d 0) {\n          piVar34 \u003d __errno_location();\n          uVar26 \u003d (ulong)(int)uVar24;\n          uVar19 \u003d (ulong)(int)uVar20;\n          *piVar34 \u003d 0;\n          goto LAB_001046c7;\n        }\n        uVar19 \u003d 0;\n        piVar34 \u003d (int *)(long)(int)uVar20;\n        do {\n          iVar9 \u003d getc(yyin);\n          uVar36 \u003d (uint)uVar19;\n          if (iVar9 \u003d\u003d -1) {\n            iVar9 \u003d ferror(yyin);\n            uVar24 \u003d uVar36;\n            if (iVar9 !\u003d 0) {\n              do {\n                pcVar10 \u003d \"input in flex scanner failed\";\n                yy_fatal_error();\n                do {\n                  *piVar34 \u003d 0;\n                  clearerr((FILE *)pcVar10);\nLAB_001046c7:\n                  sVar13 \u003d fread((void *)(*(long *)(*(long *)(yy_buffer_stack +\n                                                             yy_buffer_stack_top * 8) + 8) + uVar19)\n                                 ,1,uVar26,yyin);\n                  pcVar10 \u003d (char *)yyin;\n                  yy_n_chars \u003d (uint)sVar13;\n                  uVar24 \u003d yy_n_chars;\n                  if ((yy_n_chars !\u003d 0) || (iVar9 \u003d ferror(yyin), uVar24 \u003d yy_n_chars, iVar9 \u003d\u003d 0))\n                  goto LAB_00104738;\n                } while (*piVar34 \u003d\u003d 4);\n              } while( true );\n            }\n            break;\n          }\n          if (iVar9 \u003d\u003d 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)uVar20 +\n             (long)(int)uVar36 + *(long *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 8)\n             ) \u003d 10;\n            uVar24 \u003d uVar36 + 1;\n            break;\n          }\n          uVar19 \u003d (ulong)(uVar36 + 1);\n          *(char *)(*(long *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 8) +\n                   (long)piVar34) \u003d (char)iVar9;\n          piVar34 \u003d (int *)((long)piVar34 + 1);\n        } while (uVar24 !\u003d uVar36 + 1);\nLAB_00104738:\n        yy_n_chars \u003d uVar24;\n        uVar24 \u003d yy_n_chars;\n        iVar9 \u003d 0;\n        *(uint *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 0x1c) \u003d yy_n_chars;\n        if (uVar24 \u003d\u003d 0) goto LAB_0010475e;\n      }\n      plVar12 \u003d (long *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n      lVar18 \u003d *plVar12;\n      uVar20 \u003d uVar20 + yy_n_chars;\n      if (*(int *)(lVar18 + 0x18) \u003c (int)uVar20) {\n        iVar25 \u003d ((int)yy_n_chars \u003e\u003e 1) + uVar20;\n        pvVar14 \u003d realloc(*(void **)(lVar18 + 8),(long)iVar25);\n        *(void **)(lVar18 + 8) \u003d pvVar14;\n        auVar41._8_8_ \u003d plVar12;\n        auVar41._0_8_ \u003d *plVar12;\n        if (*(long *)(*plVar12 + 8) \u003d\u003d 0) {\n          auVar41 \u003d yy_fatal_error();\n        }\n        plVar12 \u003d auVar41._8_8_;\n        *(int *)(auVar41._0_8_ + 0x18) \u003d iVar25 + -2;\n      }\n      yy_n_chars \u003d uVar20;\n      *(undefined *)(*(long *)(*plVar12 + 8) + (long)(int)uVar20) \u003d 0;\n      *(undefined *)(*(long *)(*plVar12 + 8) + 1 + (long)(int)uVar20) \u003d 0;\n      pbVar32 \u003d *(byte **)(*plVar12 + 8);\n      yytext \u003d pbVar32;\n      if (iVar9 \u003d\u003d 1) goto LAB_001048a4;\n      if (iVar9 \u003d\u003d 2) goto LAB_001048ca;\n      pbVar35 \u003d pbVar32 + iVar8;\n      yy_c_buf_p \u003d pbVar35;\n      uVar20 \u003d yy_get_previous_state();\n      goto LAB_001040d4;\n    }\n    if ((long)pbVar7 - (long)pbVar32 \u003d\u003d 1) goto LAB_001048a4;\nLAB_001048ca:\n    pbVar35 \u003d (byte *)((long)(int)yy_n_chars +\n                      *(long *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 8));\n    yy_c_buf_p \u003d pbVar35;\n    uVar19 \u003d yy_get_previous_state();\n    pbVar33 \u003d yytext;\n    goto LAB_0010419f;\n  }\n  pbVar35 \u003d pbVar32 + iVar8;\n  yy_c_buf_p \u003d pbVar35;\n  uVar19 \u003d yy_get_previous_state();\n  if (*(short *)(yy_accept + (long)(int)(uint)uVar19 * 2) !\u003d 0) {\n    yy_last_accepting_cpos \u003d pbVar35;\n    yy_last_accepting_state \u003d (uint)uVar19;\n  }\n  uVar26 \u003d uVar19 \u0026 0xffffffff;\n  while( true ) {\n    iVar8 \u003d (int)uVar26;\n    if (iVar8 \u003d\u003d *(short *)(yy_chk + (long)(*(short *)(yy_base + (long)iVar8 * 2) + 1) * 2)) break;\n    uVar26 \u003d (ulong)(uint)(int)*(short *)(yy_def + (long)iVar8 * 2);\n  }\n  uVar20 \u003d (uint)*(short *)(yy_nxt + (long)(*(short *)(yy_base + (long)iVar8 * 2) + 1) * 2);\n  pbVar33 \u003d pbVar32;\n  if ((*(short *)(yy_nxt + (long)(*(short *)(yy_base + (long)iVar8 * 2) + 1) * 2) \u003d\u003d 0) ||\n     (uVar20 \u003d\u003d 0xb0)) goto LAB_0010419f;\n  pbVar35 \u003d pbVar35 + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  yy_c_buf_p \u003d yytext;\n  iVar8 \u003d (int)(yy_start - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *pbVar35 \u003d yy_hold_char;\n  uVar19 \u003d (ulong)yy_last_accepting_state;\n  pbVar35 \u003d yy_last_accepting_cpos;\n  goto LAB_0010419f;\nLAB_00105227:\n  ppcVar29 \u003d ppcVar29 + 1;\n  local_800 \u003d 3;\n  *ppcVar29 \u003d yylval;\nLAB_001049d1:\n  local_828 \u003d local_828 + 1;\n  goto LAB_00103ee9;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "yy_fatal_error",
        "filename_cmp",
        "bfd_openr",
        "maybequit",
        "fopen",
        "dup",
        "fread",
        "fclose",
        "__errno_location",
        "fwrite",
        "yy_load_buffer_state",
        "bfd_close",
        "bfd_set_format",
        "yyensure_buffer_stack",
        "yy_create_buffer.constprop.0",
        "ferror",
        "bfd_cache_close",
        "extract_file",
        "xstrdup",
        "prompt",
        "smart_rename.constprop.0",
        "dcgettext",
        "fprintf",
        "unlink",
        "yy_get_previous_state",
        "clearerr",
        "yy_init_buffer",
        "ar_addlib_doer",
        "open_inarch",
        "map_over_list",
        "ar_directory_doer",
        "getc",
        "stat",
        "malloc",
        "ar_open",
        "realloc",
        "bfd_openw",
        "free",
        "printf",
        "yyerror.constprop.0"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "get_file_size": {
      "entrypoint": "0x001052a0",
      "current_name": "get_file_size",
      "code": "\nlong get_file_size(char *param_1)\n\n{\n  int iVar1;\n  int *piVar2;\n  undefined8 uVar3;\n  char *pcVar4;\n  stat sStack_a8;\n  \n  if (param_1 !\u003d (char *)0x0) {\n    iVar1 \u003d stat(param_1,\u0026sStack_a8);\n    if (iVar1 \u003c 0) {\n      piVar2 \u003d __errno_location();\n      if (*piVar2 \u003d\u003d 2) {\n        uVar3 \u003d dcgettext(0,\"\\\u0027%s\\\u0027: No such file\",5);\n        non_fatal(uVar3,param_1);\n      }\n      else {\n        pcVar4 \u003d strerror(*piVar2);\n        uVar3 \u003d dcgettext(0,\"Warning: could not locate \\\u0027%s\\\u0027.  reason: %s\",5);\n        non_fatal(uVar3,param_1,pcVar4);\n      }\n    }\n    else if ((sStack_a8.st_mode \u0026 0xf000) \u003d\u003d 0x4000) {\n      uVar3 \u003d dcgettext(0,\"Warning: \\\u0027%s\\\u0027 is a directory\",5);\n      non_fatal(uVar3,param_1);\n    }\n    else if ((sStack_a8.st_mode \u0026 0xf000) \u003d\u003d 0x8000) {\n      if (-1 \u003c sStack_a8.st_size) {\n        return sStack_a8.st_size;\n      }\n      uVar3 \u003d dcgettext(0,\"Warning: \\\u0027%s\\\u0027 has negative size, probably it is too large\",5);\n      non_fatal(uVar3,param_1);\n    }\n    else {\n      uVar3 \u003d dcgettext(0,\"Warning: \\\u0027%s\\\u0027 is not an ordinary file\",5);\n      non_fatal(uVar3,param_1);\n    }\n  }\n  return -1;\n}\n\n",
      "renaming": {},
      "calling": [
        "main",
        "ranlib_only"
      ],
      "called": [
        "stat",
        "get_file_size.cold",
        "dcgettext",
        "non_fatal"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "open_inarch": {
      "entrypoint": "0x00105300",
      "current_name": "open_inarch",
      "code": "\n\n\nundefined8 * open_inarch(char *param_1,undefined8 *param_2)\n\n{\n  long *plVar1;\n  char *pcVar2;\n  byte bVar3;\n  char cVar4;\n  int iVar5;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  int *piVar8;\n  long lVar9;\n  undefined8 *puVar10;\n  undefined8 local_b0;\n  stat local_a8;\n  \n  bfd_set_error(0);\n  if (target \u003d\u003d (char *)0x0) {\n    target \u003d \"plugin\";\n  }\n  iVar5 \u003d stat(param_1,\u0026local_a8);\n  pcVar2 \u003d output_filename;\n  if (iVar5 \u003d\u003d 0) goto LAB_001053be;\n  piVar8 \u003d __errno_location();\n  if (*piVar8 \u003d\u003d 2) {\n    if (operation_alters_arch \u003d\u003d \u0027\\0\u0027) {\n      fprintf(_stderr,\"%s: \",program_name);\n      perror(param_1);\n      maybequit();\n      return (undefined8 *)0x0;\n    }\n    if ((target \u003d\u003d (char *)0x0) \u0026\u0026 (param_2 !\u003d (undefined8 *)0x0)) {\n      puVar10 \u003d (undefined8 *)open_inarch_cold();\n      return puVar10;\n    }\n    param_2 \u003d (undefined8 *)bfd_openw(param_1,target);\n    if (((param_2 !\u003d (undefined8 *)0x0) \u0026\u0026 (cVar4 \u003d bfd_set_format(param_2,2), cVar4 !\u003d \u0027\\0\u0027)) \u0026\u0026\n       (cVar4 \u003d bfd_close(param_2), cVar4 !\u003d \u0027\\0\u0027)) {\n      pcVar2 \u003d param_1;\n      if (silent_create \u003d\u003d 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  bfd_fatal(param_1);\n  do {\n    bVar3 \u003d *(byte *)((long)param_2 + 0x49) \u003e\u003e 4 \u0026 1;\n    if (make_thin_archive \u003d\u003d \u0027\\0\u0027) {\n      if (bVar3 !\u003d 0) {\n        uVar7 \u003d *param_2;\n        uVar6 \u003d dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        fatal(uVar6,uVar7);\n        goto LAB_00102812;\n      }\n    }\n    else if (bVar3 \u003d\u003d 0) {\n      uVar7 \u003d *param_2;\n      uVar6 \u003d dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      fatal(uVar6,uVar7);\nLAB_001027cb:\n      bfd_nonfatal(param_1);\n      iVar5 \u003d bfd_get_error();\n      if (iVar5 \u003d\u003d 0xd) {\nLAB_00102812:\n        list_matching_formats(local_b0);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      plVar1 \u003d param_2 + 0x1e;\n      for (lVar9 \u003d bfd_openr_next_archived_file(param_2,0); lVar9 !\u003d 0;\n          lVar9 \u003d bfd_openr_next_archived_file(param_2,lVar9)) {\n        *plVar1 \u003d lVar9;\n        plVar1 \u003d (long *)(lVar9 + 0xf0);\n      }\n      *plVar1 \u003d 0;\n      iVar5 \u003d bfd_get_error();\n      if (iVar5 \u003d\u003d 9) {\n        return param_2;\n      }\n      do {\n        bfd_fatal(param_1);\nLAB_00102826:\n        uVar7 \u003d dcgettext(0,\"creating %s\",5);\n        non_fatal(uVar7,param_1);\n        pcVar2 \u003d param_1;\nLAB_001053be:\n        output_filename \u003d pcVar2;\n        param_2 \u003d (undefined8 *)bfd_openr(param_1,target);\n      } while (param_2 \u003d\u003d (undefined8 *)0x0);\n      cVar4 \u003d bfd_check_format_matches(param_2,2,\u0026local_b0);\n      if (cVar4 \u003d\u003d \u0027\\0\u0027) goto LAB_001027cb;\n    } while (((operation !\u003d 2) \u0026\u0026 (operation !\u003d 7)) ||\n            (lVar9 \u003d bfd_openr_next_archived_file(param_2,0), lVar9 \u003d\u003d 0));\n  } while( true );\n}\n\n",
      "renaming": {},
      "calling": [
        "main",
        "ranlib_only",
        "yyparse.isra.0"
      ],
      "called": [
        "bfd_openr",
        "xexit",
        "maybequit",
        "fprintf",
        "list_matching_formats",
        "bfd_set_error",
        "__errno_location",
        "bfd_close",
        "non_fatal",
        "bfd_set_format",
        "open_inarch.cold",
        "bfd_get_error",
        "stat",
        "bfd_fatal",
        "bfd_nonfatal",
        "bfd_openw",
        "bfd_check_format_matches",
        "fatal",
        "dcgettext",
        "bfd_openr_next_archived_file",
        "perror"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "map_over_members": {
      "entrypoint": "0x00105480",
      "current_name": "map_over_members",
      "code": "\n\n\nvoid map_over_members(long param_1,code *param_2,undefined8 *param_3,int param_4)\n\n{\n  int iVar1;\n  char *__format;\n  long lVar2;\n  long *plVar3;\n  undefined8 uVar4;\n  long *plVar5;\n  int local_cc;\n  undefined local_c8 [152];\n  \n  lVar2 \u003d *(long *)(param_1 + 0xf0);\n  if (param_4 \u003d\u003d 0) {\n    for (; lVar2 !\u003d 0; lVar2 \u003d *(long *)(lVar2 + 0xf0)) {\n      (*param_2)(lVar2);\n    }\n  }\n  else {\n    for (; lVar2 !\u003d 0; lVar2 \u003d *(long *)(lVar2 + 0xf0)) {\n      *(undefined4 *)(lVar2 + 0xac) \u003d 0;\n    }\n    do {\n      plVar5 \u003d *(long **)(param_1 + 0xf0);\n      local_cc \u003d 0;\n      for (; plVar5 !\u003d (long *)0x0; plVar5 \u003d (long *)plVar5[0x1e]) {\n        if (*(int *)((long)plVar5 + 0xac) \u003d\u003d 0) {\n          lVar2 \u003d *plVar5;\n          if (lVar2 \u003d\u003d 0) {\n            plVar3 \u003d (long *)plVar5[0x1d];\n            if ((long *)plVar5[0x1d] \u003d\u003d (long *)0x0) {\n              plVar3 \u003d plVar5;\n            }\n            (**(code **)(plVar3[1] + 0x1e8))(plVar5,local_c8);\n          }\n          else if (((*(byte *)(param_1 + 0x49) \u0026 0x10) \u003d\u003d 0) ||\n                  (lVar2 \u003d normalize(lVar2,param_1), lVar2 !\u003d 0)) {\n            uVar4 \u003d normalize(*param_3,param_1);\n            iVar1 \u003d filename_cmp(uVar4,lVar2);\n            if ((iVar1 \u003d\u003d 0) \u0026\u0026\n               ((counted_name_mode \u003d\u003d \u0027\\0\u0027 ||\n                (local_cc \u003d local_cc + 1, local_cc \u003d\u003d counted_name_counter)))) {\n              (*param_2)();\n              *(undefined4 *)((long)plVar5 + 0xac) \u003d 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      uVar4 \u003d *param_3;\n      __format \u003d (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(_stderr,__format,uVar4);\nLAB_0010553e:\n      param_3 \u003d param_3 + 1;\n      param_4 \u003d param_4 + -1;\n    } while (param_4 !\u003d 0);\n  }\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "filename_cmp",
        "map_over_members.cold",
        "normalize"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "replace_members": {
      "entrypoint": "0x00105570",
      "current_name": "replace_members",
      "code": "\nundefined8 replace_members(long param_1,char **param_2,char param_3)\n\n{\n  char **ppcVar1;\n  undefined uVar2;\n  byte bVar3;\n  int iVar4;\n  size_t sVar5;\n  int *piVar6;\n  char *pcVar7;\n  char *pcVar8;\n  undefined8 uVar9;\n  char *pcVar10;\n  char *__s;\n  long lVar11;\n  long lVar12;\n  undefined8 uVar13;\n  ulong uVar14;\n  char **ppcVar15;\n  char **ppcVar16;\n  uint uVar17;\n  char **ppcVar18;\n  bool bVar19;\n  byte bVar20;\n  byte local_15a;\n  undefined auStack_158 [88];\n  long lStack_100;\n  stat sStack_c8;\n  \n  bVar20 \u003d 0;\n  ppcVar1 \u003d (char **)(param_1 + 0xf0);\n  local_15a \u003d 0;\n  if (param_2 \u003d\u003d (char **)0x0) {\n    uVar13 \u003d FUN_00102943();\n    return uVar13;\n  }\n  do {\n    pcVar10 \u003d *param_2;\njoined_r0x001055aa:\n    if (pcVar10 \u003d\u003d (char *)0x0) {\n      if (local_15a !\u003d 0) {\n        uVar13 \u003d write_archive(param_1);\n        return uVar13;\n      }\n      output_filename \u003d 0;\n      return 0;\n    }\n    ppcVar15 \u003d *(char ***)(param_1 + 0xf0);\n    ppcVar16 \u003d ppcVar1;\n    if (param_3 !\u003d \u0027\\0\u0027) {\nLAB_0010564c:\n      uVar17 \u003d postype;\n      if (postype !\u003d 0) goto LAB_001028f5;\n      lVar12 \u003d *(long *)(param_1 + 0xf0);\n      if (*(long *)(param_1 + 0xf0) \u003d\u003d 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        lVar11 \u003d lVar12;\n        lVar12 \u003d *(long *)(lVar11 + 0xf0);\n      } while (lVar12 !\u003d 0);\n      ppcVar16 \u003d (char **)(lVar11 + 0xf0);\n      pcVar10 \u003d *param_2;\n      do {\n        if (libdeps_bfd !\u003d 0) {\n          uVar13 \u003d normalize(pcVar10,param_1);\n          iVar4 \u003d filename_cmp(uVar13,\"__.LIBDEP\");\n          if (iVar4 \u003d\u003d 0) {\n            bVar3 \u003d ar_emul_default_append(ppcVar16,libdeps_bfd,verbose !\u003d 0,make_thin_archive);\n            local_15a \u003d bVar3 | local_15a;\n            goto LAB_0010577e;\n          }\n          pcVar10 \u003d *param_2;\n        }\n        uVar2 \u003d make_thin_archive;\n        bVar19 \u003d verbose !\u003d 0;\n        lVar12 \u003d bfd_openr(pcVar10,target);\n        if (lVar12 !\u003d 0) {\n          param_2 \u003d param_2 + 1;\n          bVar3 \u003d do_ar_emul_append_constprop_0(ppcVar16,lVar12,(uint)bVar19,uVar2);\n          local_15a \u003d local_15a | bVar3;\n          pcVar10 \u003d *param_2;\n          goto joined_r0x001055aa;\n        }\n        bfd_fatal(pcVar10,0);\n        uVar17 \u003d (uint)bVar19;\nLAB_001028f5:\n        uVar13 \u003d posname;\n        if (uVar17 \u003d\u003d 3) {\n          lVar12 \u003d *(long *)(param_1 + 0xf0);\n          if (*(long *)(param_1 + 0xf0) !\u003d 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*ppcVar16 !\u003d (undefined8 *)0x0;\n              ppcVar16 \u003d (char **)(*ppcVar16 + 0xf0)) {\n            iVar4 \u003d filename_cmp(*(undefined8 *)*ppcVar16,uVar13);\n            if (iVar4 \u003d\u003d 0) {\n              if (uVar17 \u003d\u003d 2) {\n                ppcVar16 \u003d (char **)(*ppcVar16 + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        pcVar10 \u003d *param_2;\n      } while( true );\n    }\n    ppcVar18 \u003d ppcVar1;\n    if (ppcVar15 \u003d\u003d (char **)0x0) {\n      uVar17 \u003d postype;\n      if (postype \u003d\u003d 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (full_pathname \u003d\u003d \u0027\\0\u0027) {\n      pcVar10 \u003d (char *)lbasename(*ppcVar15);\n      pcVar8 \u003d pcVar10;\n      if (ar_truncate !\u003d \u0027\\0\u0027) {\n        sVar5 \u003d strlen(pcVar10);\n        uVar14 \u003d (ulong)*(byte *)(*(long *)(param_1 + 8) + 0x1e);\n        if (uVar14 \u003c sVar5) {\n          pcVar8 \u003d (char *)xmalloc(uVar14 + 1);\n          lVar12 \u003d *(long *)(param_1 + 8);\n          pcVar7 \u003d pcVar8;\n          for (uVar14 \u003d (ulong)*(byte *)(lVar12 + 0x1e); uVar14 !\u003d 0; uVar14 \u003d uVar14 - 1) {\n            *pcVar7 \u003d *pcVar10;\n            pcVar10 \u003d pcVar10 + (ulong)bVar20 * -2 + 1;\n            pcVar7 \u003d pcVar7 + (ulong)bVar20 * -2 + 1;\n          }\n          pcVar8[*(byte *)(lVar12 + 0x1e)] \u003d \u0027\\0\u0027;\n        }\n        pcVar7 \u003d *param_2;\n        pcVar10 \u003d pcVar8;\n        if (full_pathname \u003d\u003d \u0027\\0\u0027) goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      pcVar7 \u003d *param_2;\n      if (full_pathname !\u003d \u0027\\0\u0027) goto LAB_00102980;\nLAB_00105611:\n      __s \u003d (char *)lbasename(pcVar7);\n      if (ar_truncate !\u003d \u0027\\0\u0027) {\n        sVar5 \u003d strlen(__s);\n        uVar14 \u003d (ulong)*(byte *)(*(long *)(param_1 + 8) + 0x1e);\n        pcVar7 \u003d __s;\n        pcVar10 \u003d pcVar8;\n        if (uVar14 \u003c sVar5) {\n          pcVar7 \u003d (char *)xmalloc(uVar14 + 1);\n          lVar12 \u003d *(long *)(param_1 + 8);\n          pcVar8 \u003d pcVar7;\n          for (uVar14 \u003d (ulong)*(byte *)(lVar12 + 0x1e); uVar14 !\u003d 0; uVar14 \u003d uVar14 - 1) {\n            *pcVar8 \u003d *__s;\n            __s \u003d __s + (ulong)bVar20 * -2 + 1;\n            pcVar8 \u003d pcVar8 + (ulong)bVar20 * -2 + 1;\n          }\n          pcVar7[*(byte *)(lVar12 + 0x1e)] \u003d \u0027\\0\u0027;\n        }\n        goto LAB_00102980;\n      }\n      iVar4 \u003d filename_cmp(__s,pcVar8);\n      if (iVar4 \u003d\u003d 0) goto LAB_00102993;\nLAB_00105639:\n      ppcVar18 \u003d ppcVar15 + 0x1e;\n      ppcVar15 \u003d (char **)ppcVar15[0x1e];\n      if (ppcVar15 \u003d\u003d (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    pcVar7 \u003d *param_2;\n    pcVar10 \u003d *ppcVar15;\nLAB_00102980:\n    iVar4 \u003d filename_cmp(pcVar7,pcVar10);\n    if (iVar4 !\u003d 0) goto LAB_00105639;\nLAB_00102993:\n    if (ppcVar15[0x1c] \u003d\u003d (char *)0x0) goto LAB_00105639;\n    if (newer_only !\u003d 0) {\n      iVar4 \u003d stat(*param_2,\u0026sStack_c8);\n      if (iVar4 !\u003d 0) {\n        piVar6 \u003d __errno_location();\n        if (*piVar6 !\u003d 2) {\n          bfd_fatal(*param_2);\nLAB_00102b7e:\n          pcVar10 \u003d *ppcVar15;\n          uVar13 \u003d dcgettext(0,\"internal stat error on %s\",5);\n          fatal(uVar13,pcVar10);\n          free(param_2);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      ppcVar16 \u003d (char **)ppcVar15[0x1d];\n      if ((char **)ppcVar15[0x1d] \u003d\u003d (char **)0x0) {\n        ppcVar16 \u003d ppcVar15;\n      }\n      iVar4 \u003d (**(code **)(ppcVar16[1] + 0x1e8))(ppcVar15,auStack_158);\n      if (iVar4 !\u003d 0) goto LAB_00102b7e;\n      if (sStack_c8.st_mtim.tv_sec \u003c\u003d lStack_100) goto LAB_0010577e;\n    }\n    uVar13 \u003d get_pos_bfd(ppcVar1,2,*ppcVar15);\n    if (libdeps_bfd \u003d\u003d 0) {\nLAB_00102ae2:\n      pcVar10 \u003d *param_2;\n      bVar19 \u003d verbose !\u003d 0;\n      lVar12 \u003d bfd_openr(pcVar10,target);\n      if (lVar12 \u003d\u003d 0) {\n        bfd_fatal(pcVar10,0);\n        goto LAB_00102b3e;\n      }\n      bVar3 \u003d ar_emul_default_replace(uVar13,lVar12,bVar19);\n    }\n    else {\n      uVar9 \u003d normalize(*param_2,param_1);\n      iVar4 \u003d filename_cmp(uVar9,\"__.LIBDEP\");\n      if (iVar4 !\u003d 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      bVar3 \u003d ar_emul_default_replace(uVar13,libdeps_bfd,verbose !\u003d 0);\n    }\n    if (bVar3 !\u003d 0) {\n      *ppcVar18 \u003d *(char **)(*ppcVar18 + 0xf0);\n      local_15a \u003d bVar3;\n    }\nLAB_0010577e:\n    param_2 \u003d param_2 + 1;\n  } while( true );\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "FUN_00102943"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "make_tempname": {
      "entrypoint": "0x001057a0",
      "current_name": "make_tempname",
      "code": "\nundefined  [16] make_tempname(char *param_1,int *param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  int iVar1;\n  char *pcVar2;\n  long lVar3;\n  long lVar4;\n  long lVar5;\n  char *pcVar6;\n  byte bVar7;\n  undefined auVar8 [16];\n  \n  bVar7 \u003d 0;\n  pcVar2 \u003d strrchr(param_1,0x2f);\n  if (pcVar2 \u003d\u003d (char *)0x0) {\n    pcVar2 \u003d (char *)xmalloc(9);\n    lVar3 \u003d 0;\n  }\n  else {\n    lVar5 \u003d (long)pcVar2 - (long)param_1;\n    pcVar2 \u003d (char *)xmalloc(lVar5 + 0xb);\n    lVar3 \u003d lVar5 + 1;\n    pcVar6 \u003d pcVar2;\n    for (lVar4 \u003d lVar5; lVar4 !\u003d 0; lVar4 \u003d lVar4 + -1) {\n      *pcVar6 \u003d *param_1;\n      param_1 \u003d param_1 + (ulong)bVar7 * -2 + 1;\n      pcVar6 \u003d pcVar6 + (ulong)bVar7 * -2 + 1;\n    }\n    pcVar2[lVar5] \u003d \u0027/\u0027;\n  }\n  *(undefined8 *)(pcVar2 + lVar3) \u003d 0x5858585858587473;\n  *(undefined *)((long)(pcVar2 + lVar3) + 8) \u003d 0;\n  iVar1 \u003d mkstemp(pcVar2);\n  if (iVar1 \u003d\u003d -1) {\n    pcVar6 \u003d (char *)0x0;\n    free(pcVar2);\n  }\n  else {\n    *param_2 \u003d iVar1;\n    pcVar6 \u003d pcVar2;\n  }\n  auVar8._8_8_ \u003d param_4;\n  auVar8._0_8_ \u003d pcVar6;\n  return auVar8;\n}\n\n",
      "renaming": {},
      "calling": [
        "write_archive",
        "ar_open"
      ],
      "called": [
        "make_tempname.cold",
        "xmalloc",
        "strrchr",
        "mkstemp"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "normalize": {
      "entrypoint": "0x00105830",
      "current_name": "normalize",
      "code": "\nundefined  [16] normalize(char *param_1,long param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  long lVar1;\n  size_t sVar2;\n  char *__s;\n  ulong uVar3;\n  char *pcVar4;\n  byte bVar5;\n  undefined auVar6 [16];\n  \n  bVar5 \u003d 0;\n  if (full_pathname \u003d\u003d \u0027\\0\u0027) {\n    __s \u003d (char *)lbasename();\n    param_1 \u003d __s;\n    if ((ar_truncate !\u003d \u0027\\0\u0027) \u0026\u0026 (param_2 !\u003d 0)) {\n      sVar2 \u003d strlen(__s);\n      uVar3 \u003d (ulong)*(byte *)(*(long *)(param_2 + 8) + 0x1e);\n      if (uVar3 \u003c sVar2) {\n        param_1 \u003d (char *)xmalloc(uVar3 + 1);\n        lVar1 \u003d *(long *)(param_2 + 8);\n        pcVar4 \u003d param_1;\n        for (uVar3 \u003d (ulong)*(byte *)(lVar1 + 0x1e); uVar3 !\u003d 0; uVar3 \u003d uVar3 - 1) {\n          *pcVar4 \u003d *__s;\n          __s \u003d __s + (ulong)bVar5 * -2 + 1;\n          pcVar4 \u003d pcVar4 + (ulong)bVar5 * -2 + 1;\n        }\n        param_1[*(byte *)(lVar1 + 0x1e)] \u003d \u0027\\0\u0027;\n      }\n    }\n  }\n  auVar6._8_8_ \u003d param_4;\n  auVar6._0_8_ \u003d param_1;\n  return auVar6;\n}\n\n",
      "renaming": {},
      "calling": [
        "map_over_members",
        "main",
        "replace_members.cold"
      ],
      "called": [
        "normalize.cold",
        "lbasename"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "get_pos_bfd": {
      "entrypoint": "0x00105870",
      "current_name": "get_pos_bfd",
      "code": "\nlong * get_pos_bfd(long *param_1,int param_2,undefined8 param_3)\n\n{\n  int iVar1;\n  undefined8 uVar2;\n  int iVar3;\n  \n  uVar2 \u003d posname;\n  iVar3 \u003d postype;\n  if (postype \u003d\u003d 0) {\n    uVar2 \u003d param_3;\n    iVar3 \u003d param_2;\n  }\n  if (iVar3 \u003d\u003d 3) {\n    for (; *param_1 !\u003d 0; param_1 \u003d (long *)(*param_1 + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*param_1 !\u003d (undefined8 *)0x0; param_1 \u003d (long *)(*param_1 + 0xf0)) {\n      iVar1 \u003d filename_cmp(*(undefined8 *)*param_1,uVar2);\n      if (iVar1 \u003d\u003d 0) {\n        if (iVar3 !\u003d 2) {\n          return param_1;\n        }\n        return (long *)(*param_1 + 0xf0);\n      }\n    }\n  }\n  return param_1;\n}\n\n",
      "renaming": {},
      "calling": [
        "main",
        "replace_members.cold"
      ],
      "called": [
        "get_pos_bfd.cold"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "write_archive": {
      "entrypoint": "0x001058b0",
      "current_name": "write_archive",
      "code": "\nvoid write_archive(undefined8 *param_1)\n\n{\n  char cVar1;\n  uint uVar2;\n  int iVar3;\n  undefined8 uVar4;\n  char *__format;\n  void *__ptr;\n  FILE *__stream;\n  char **ppcVar5;\n  uint uStack0000000000000020;\n  uint in_stack_00000028;\n  undefined8 in_stack_00000038;\n  int local_3c [2];\n  undefined uStack_33;\n  char cStack_32;\n  char cStack_31;\n  \n  uVar4 \u003d param_1[0x1e];\n  local_3c[0] \u003d -1;\n  __ptr \u003d (void *)xstrdup(*param_1);\n  __stream \u003d (FILE *)make_tempname(__ptr,local_3c);\n  iVar3 \u003d local_3c[0];\n  if (__stream !\u003d (FILE *)0x0) {\n    output_filename \u003d __stream;\n    ppcVar5 \u003d (char **)bfd_fdopenw(__stream,*(undefined8 *)param_1[1],local_3c[0]);\n    if (ppcVar5 !\u003d (char **)0x0) {\n      output_bfd \u003d ppcVar5;\n      bfd_set_format(ppcVar5,2);\n      uVar2 \u003d (~write_armap \u003e\u003e 0x1f) \u003c\u003c 3 | *(byte *)((long)ppcVar5 + 0x49) \u0026 0xfffffff7;\n      *(char *)((long)ppcVar5 + 0x49) \u003d (char)uVar2;\n      if (ar_truncate !\u003d \u0027\\0\u0027) {\n        *(uint *)((long)ppcVar5 + 0x44) \u003d *(uint *)((long)ppcVar5 + 0x44) | 0x400;\n      }\n      if (deterministic !\u003d 0) {\n        *(uint *)((long)ppcVar5 + 0x44) \u003d *(uint *)((long)ppcVar5 + 0x44) | 0x2000;\n      }\n      if (full_pathname !\u003d \u0027\\0\u0027) goto LAB_00102d37;\n      while( true ) {\n        if ((make_thin_archive !\u003d \u0027\\0\u0027) || ((*(byte *)((long)param_1 + 0x49) \u0026 0x10) !\u003d 0)) {\n          *(byte *)((long)ppcVar5 + 0x49) \u003d (byte)uVar2 | 0x10;\n        }\n        cVar1 \u003d bfd_set_archive_head(ppcVar5,uVar4);\n        if (cVar1 !\u003d \u0027\\0\u0027) break;\n        uVar2 \u003d bfd_fatal(__ptr);\nLAB_00102d37:\n        *(uint *)((long)ppcVar5 + 0x44) \u003d *(uint *)((long)ppcVar5 + 0x44) | 0x100000;\n      }\n      iVar3 \u003d dup(iVar3);\n      cVar1 \u003d bfd_close(ppcVar5);\n      if (cVar1 \u003d\u003d \u0027\\0\u0027) {\n        bfd_fatal(__ptr);\n        __format \u003d (char *)dcgettext(0,\"\u003ctime data corrupt\u003e\",5);\n        sprintf(\u0026stack0xffffffffffffffd8,__format);\n        uVar2 \u003d uStack0000000000000020 \u0026 0xf000;\n        if (uVar2 \u003d\u003d 0x4000) {\n          uStack_33 \u003d 100;\n        }\n        else if (uVar2 \u003d\u003d 0xa000) {\n          uStack_33 \u003d 0x6c;\n        }\n        else if (uVar2 \u003d\u003d 0x6000) {\n          uStack_33 \u003d 0x62;\n        }\n        else if (uVar2 \u003d\u003d 0x2000) {\n          uStack_33 \u003d 99;\n        }\n        else if (uVar2 \u003d\u003d 0xc000) {\n          uStack_33 \u003d 0x73;\n        }\n        else {\n          uStack_33 \u003d 0x70;\n          if (uVar2 !\u003d 0x1000) {\n            uStack_33 \u003d 0x2d;\n          }\n        }\n        cStack_32 \u003d (-((_uStack0000000000000020 \u0026 0x100) \u003d\u003d 0) \u0026 0xbbU) + 0x72;\n        cStack_31 \u003d (-((_uStack0000000000000020 \u0026 0x80) \u003d\u003d 0) \u0026 0xb6U) + 0x77;\n        fprintf(__stream,\"%s %ld/%ld %6lu %s \",\u0026cStack_32,_uStack0000000000000020 \u003e\u003e 0x20,\n                (ulong)in_stack_00000028,in_stack_00000038,\u0026stack0xffffffffffffffd8,\n                _uStack0000000000000020 \u0026 0xffffffff);\n        fputs(*ppcVar5,__stream);\n        if ((char)param_1 !\u003d \u0027\\0\u0027) {\n          if ((*(byte *)((long)ppcVar5 + 0x49) \u0026 0x10) \u003d\u003d 0) {\n            if (ppcVar5[0xb] !\u003d (char *)0x0) {\n              fprintf(__stream,\" 0x%lx\");\n            }\n          }\n          else if (ppcVar5[0xc] !\u003d (char *)0x0) {\n            fprintf(__stream,\" 0x%lx\");\n          }\n        }\n        fputc(10,__stream);\n        return;\n      }\n      output_bfd \u003d (char **)0x0;\n      output_filename \u003d (FILE *)0x0;\n      bfd_close(param_1);\n      iVar3 \u003d smart_rename_constprop_0(__stream,__ptr,iVar3);\n      if (iVar3 \u003d\u003d 0) {\n        free(__ptr);\n        free(__stream);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(iVar3);\n    bfd_fatal(__ptr);\n  }\n  uVar4 \u003d dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  bfd_fatal(uVar4);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
      "renaming": {},
      "calling": [
        "main",
        "ranlib_only",
        "replace_members.cold"
      ],
      "called": [
        "make_tempname",
        "bfd_fatal",
        "xstrdup",
        "bfd_fdopenw",
        "close",
        "dcgettext",
        "bfd_set_format"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "open_output_file.isra.0": {
      "entrypoint": "0x00105a20",
      "current_name": "open_output_file.isra.0",
      "code": "\nvoid open_output_file_isra_0(char *param_1)\n\n{\n  char *pcVar1;\n  char *pcVar2;\n  undefined8 uVar3;\n  undefined8 uVar4;\n  FILE *pFVar5;\n  size_t sVar6;\n  \n  pcVar1 \u003d output_dir;\n  output_filename \u003d param_1;\n  if (*param_1 \u003d\u003d \u0027/\u0027) {\nLAB_00102e9a:\n    uVar3 \u003d lbasename();\n    pcVar1 \u003d output_filename;\n    uVar4 \u003d dcgettext(0,\"illegal output pathname for archive member: %s, using \\\u0027%s\\\u0027 instead\",5);\n    non_fatal(uVar4,pcVar1,uVar3);\n    output_filename \u003d (char *)uVar3;\n    FUN_00105a68();\n    return;\n  }\n  do {\n    if (*param_1 \u003d\u003d \u0027\\0\u0027) {\n      if ((output_dir !\u003d (char *)0x0) \u0026\u0026 (sVar6 \u003d strlen(output_dir), sVar6 !\u003d 0)) {\n        if (pcVar1[sVar6 - 1] \u003d\u003d \u0027/\u0027) {\n          output_filename \u003d (char *)concat(pcVar1,output_filename,0);\n        }\n        else {\n          output_filename \u003d (char *)concat(pcVar1,\u0026DAT_00108260,output_filename,0);\n        }\n      }\n      if (verbose !\u003d 0) {\n        printf(\"x - %s\\n\",output_filename);\n      }\n      pFVar5 \u003d fopen(output_filename,\"w\");\n      if (pFVar5 \u003d\u003d (FILE *)0x0) {\n        perror(output_filename);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    pcVar2 \u003d param_1;\n    if ((*param_1 \u003d\u003d \u0027.\u0027) \u0026\u0026 (pcVar2 \u003d param_1 + 1, param_1[1] \u003d\u003d \u0027.\u0027)) {\n      pcVar2 \u003d param_1 + 2;\n      if ((param_1[2] \u003d\u003d \u0027/\u0027) || (param_1[2] \u003d\u003d \u0027\\0\u0027)) goto LAB_00102e9a;\n    }\n    for (; (*pcVar2 !\u003d \u0027\\0\u0027 \u0026\u0026 (*pcVar2 !\u003d \u0027/\u0027)); pcVar2 \u003d pcVar2 + 1) {\n    }\n    for (; param_1 \u003d pcVar2, *pcVar2 \u003d\u003d \u0027/\u0027; pcVar2 \u003d pcVar2 + 1) {\n    }\n  } while( true );\n}\n\n",
      "renaming": {},
      "calling": [
        "extract_file.cold"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "FUN_00105a68": {
      "entrypoint": "0x00105a68",
      "current_name": "FUN_00105a68",
      "code": "\nvoid FUN_00105a68(void)\n\n{\n  char *pcVar1;\n  FILE *pFVar2;\n  size_t sVar3;\n  \n  pcVar1 \u003d output_dir;\n  if (output_dir !\u003d (char *)0x0) {\n    sVar3 \u003d strlen(output_dir);\n    if (sVar3 !\u003d 0) {\n      if (pcVar1[sVar3 - 1] \u003d\u003d \u0027/\u0027) {\n        output_filename \u003d (char *)concat(pcVar1,output_filename,0);\n      }\n      else {\n        output_filename \u003d (char *)concat(pcVar1,\u0026DAT_00108260,output_filename,0);\n      }\n    }\n  }\n  if (verbose !\u003d 0) {\n    printf(\"x - %s\\n\",output_filename);\n  }\n  pFVar2 \u003d fopen(output_filename,\"w\");\n  if (pFVar2 !\u003d (FILE *)0x0) {\n    return;\n  }\n  perror(output_filename);\n                    \n  xexit(1);\n}\n\n",
      "renaming": {},
      "calling": [
        "FUN_00102e6f"
      ],
      "called": [
        "strlen",
        "xexit",
        "fopen",
        "concat",
        "printf",
        "open_output_file.isra.0.cold",
        "perror"
      ],
      "improved": false,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "ar_emul_default_append": {
      "entrypoint": "0x00105ae0",
      "current_name": "ar_emul_default_append",
      "code": "\nvoid ar_emul_default_append\n               (undefined8 param_1,undefined8 param_2,undefined param_3,undefined param_4)\n\n{\n  do_ar_emul_append_constprop_0(param_1,param_2,param_3,param_4);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "replace_members.cold"
      ],
      "called": [
        "do_ar_emul_append.constprop.0"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "do_ar_emul_append.constprop.0": {
      "entrypoint": "0x00105af0",
      "current_name": "do_ar_emul_append.constprop.0",
      "code": "\nulong do_ar_emul_append_constprop_0(long *param_1,long param_2,char param_3,char param_4)\n\n{\n  char cVar1;\n  uint uVar2;\n  long lVar3;\n  ulong uVar4;\n  \n  if (param_4 \u003d\u003d \u0027\\0\u0027) {\n    if (param_3 !\u003d \u0027\\0\u0027) {\n      uVar4 \u003d do_ar_emul_append_constprop_0_cold();\n      return uVar4;\n    }\n  }\n  else {\n    cVar1 \u003d bfd_check_format(param_2,2);\n    if (cVar1 !\u003d \u0027\\0\u0027) {\n      uVar4 \u003d 0;\n      for (lVar3 \u003d bfd_openr_next_archived_file(param_2,0); lVar3 !\u003d 0;\n          lVar3 \u003d bfd_openr_next_archived_file(param_2,lVar3)) {\n        uVar2 \u003d do_ar_emul_append_constprop_0(param_1,lVar3,param_3,1);\n        if ((char)uVar2 !\u003d \u0027\\0\u0027) {\n          uVar4 \u003d (ulong)uVar2;\n          param_1 \u003d (long *)(*param_1 + 0xf0);\n        }\n      }\n      return uVar4;\n    }\n    if (param_3 !\u003d \u0027\\0\u0027) {\n      uVar4 \u003d do_ar_emul_append_constprop_0_cold();\n      return uVar4;\n    }\n  }\n  *(long *)(param_2 + 0xf0) \u003d *param_1;\n  *param_1 \u003d param_2;\n  return 1;\n}\n\n",
      "renaming": {},
      "calling": [
        "do_ar_emul_append.constprop.0",
        "replace_members.cold",
        "ar_emul_default_append"
      ],
      "called": [
        "do_ar_emul_append.constprop.0.cold",
        "do_ar_emul_append.constprop.0",
        "bfd_check_format",
        "bfd_openr_next_archived_file"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "any_ok": {
      "entrypoint": "0x00105bb0",
      "current_name": "any_ok",
      "code": "\nundefined8 any_ok(void)\n\n{\n  return 1;\n}\n\n",
      "renaming": {},
      "calling": [],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "smart_rename.constprop.0": {
      "entrypoint": "0x00105bc0",
      "current_name": "smart_rename.constprop.0",
      "code": "\nundefined  [16]\nsmart_rename_constprop_0(char *param_1,char *param_2,undefined4 param_3,undefined8 param_4)\n\n{\n  uint uVar1;\n  int *piVar2;\n  char *pcVar3;\n  undefined8 uVar4;\n  ulong uVar5;\n  undefined auVar6 [16];\n  \n  if (param_2 \u003d\u003d param_1) {\n    uVar5 \u003d 0;\n  }\n  else {\n    uVar1 \u003d simple_copy_constprop_0(param_3);\n    uVar5 \u003d (ulong)uVar1;\n    if (uVar1 !\u003d 0) {\n      piVar2 \u003d __errno_location();\n      pcVar3 \u003d strerror(*piVar2);\n      uVar4 \u003d dcgettext(0,\"unable to copy file \\\u0027%s\\\u0027; reason: %s\",5);\n      non_fatal(uVar4,param_2,pcVar3);\n    }\n    unlink(param_1);\n  }\n  auVar6._8_8_ \u003d param_4;\n  auVar6._0_8_ \u003d uVar5;\n  return auVar6;\n}\n\n",
      "renaming": {},
      "calling": [
        "write_archive.cold",
        "yyparse.isra.0"
      ],
      "called": [
        "simple_copy.constprop.0",
        "smart_rename.constprop.0.cold"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "simple_copy.constprop.0": {
      "entrypoint": "0x00105c00",
      "current_name": "simple_copy.constprop.0",
      "code": "\nulong simple_copy_constprop_0(int param_1,char *param_2)\n\n{\n  int iVar1;\n  int __fd;\n  int iVar2;\n  __off_t _Var3;\n  ulong uVar4;\n  size_t sVar5;\n  int *piVar6;\n  undefined auStack_2038 [8200];\n  \n  if ((-1 \u003c param_1) \u0026\u0026 (_Var3 \u003d lseek(param_1,0,0), _Var3 \u003d\u003d 0)) {\n    __fd \u003d open(param_2,0x201);\n    if (__fd \u003c 0) {\n      uVar4 \u003d simple_copy_constprop_0_cold();\n      return uVar4;\n    }\n    do {\n      uVar4 \u003d read(param_1,auStack_2038,0x2000);\n      iVar2 \u003d (int)uVar4;\n      if (iVar2 \u003c 1) {\n        piVar6 \u003d __errno_location();\n        iVar1 \u003d *piVar6;\n        close(param_1);\n        close(__fd);\n        if (iVar2 !\u003d 0) {\n          *piVar6 \u003d iVar1;\n          return 0xffffffff;\n        }\n        return uVar4 \u0026 0xffffffff;\n      }\n      sVar5 \u003d write(__fd,auStack_2038,(long)iVar2);\n    } while (sVar5 \u003d\u003d (long)iVar2);\n    piVar6 \u003d __errno_location();\n    iVar2 \u003d *piVar6;\n    close(param_1);\n    close(__fd);\n    *piVar6 \u003d iVar2;\n  }\n  return 0xffffffff;\n}\n\n",
      "renaming": {},
      "calling": [
        "smart_rename.constprop.0"
      ],
      "called": [
        "lseek",
        "simple_copy.constprop.0.cold",
        "read",
        "__errno_location",
        "close",
        "open",
        "write"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "_start": {
      "entrypoint": "0x00105cc0",
      "current_name": "_start",
      "code": "\nvoid processEntry _start(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(main,param_2,\u0026stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
      "renaming": {},
      "calling": [],
      "called": [
        "main",
        "__libc_start_main"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "deregister_tm_clones": {
      "entrypoint": "0x00105cf0",
      "current_name": "deregister_tm_clones",
      "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid deregister_tm_clones(void)\n\n{\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "__do_global_dtors_aux"
      ],
      "called": [
        "_ITM_deregisterTMCloneTable"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "register_tm_clones": {
      "entrypoint": "0x00105d20",
      "current_name": "register_tm_clones",
      "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid register_tm_clones(void)\n\n{\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "frame_dummy"
      ],
      "called": [
        "_ITM_registerTMCloneTable"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "__do_global_dtors_aux": {
      "entrypoint": "0x00105d60",
      "current_name": "__do_global_dtors_aux",
      "code": "\nvoid __do_global_dtors_aux(void)\n\n{\n  if (completed_0 !\u003d \u0027\\0\u0027) {\n    return;\n  }\n  __cxa_finalize(__dso_handle);\n  deregister_tm_clones();\n  completed_0 \u003d 1;\n  return;\n}\n\n",
      "renaming": {},
      "calling": [],
      "called": [
        "deregister_tm_clones",
        "__cxa_finalize"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "frame_dummy": {
      "entrypoint": "0x00105da0",
      "current_name": "frame_dummy",
      "code": "\nvoid frame_dummy(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [],
      "called": [
        "register_tm_clones"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "main": {
      "entrypoint": "0x00105db0",
      "current_name": "main",
      "code": "\n\n\nvoid main(uint param_1,FILE *param_2)\n\n{\n  byte *pbVar1;\n  uint *puVar2;\n  byte bVar3;\n  long *plVar4;\n  undefined8 *puVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  bool bVar8;\n  bool bVar9;\n  char **ppcVar10;\n  int *piVar11;\n  undefined *puVar12;\n  byte bVar13;\n  char cVar14;\n  int iVar15;\n  uint uVar16;\n  undefined4 uVar17;\n  FILE *pFVar18;\n  size_t sVar19;\n  size_t sVar20;\n  byte *__ptr;\n  long *plVar21;\n  FILE *pFVar22;\n  char *pcVar23;\n  long lVar24;\n  ulong uVar25;\n  undefined8 *puVar26;\n  undefined8 uVar27;\n  FILE *pFVar28;\n  long **pplVar29;\n  undefined8 uVar30;\n  char **ppcVar31;\n  uint extraout_EDX;\n  char **ppcVar32;\n  byte *pbVar33;\n  long lVar34;\n  long lVar35;\n  undefined1 *puVar36;\n  uint uVar37;\n  char *unaff_RBP;\n  byte *pbVar38;\n  char *pcVar39;\n  ulong uVar40;\n  ulong uVar41;\n  ulong uVar42;\n  FILE *unaff_R12;\n  char *pcVar43;\n  uint uVar44;\n  int iVar45;\n  char *pcVar46;\n  bool bVar47;\n  byte bVar48;\n  undefined8 local_130;\n  FILE *local_128;\n  byte *local_118;\n  char **local_110;\n  size_t local_108;\n  long local_100;\n  undefined local_c8 [2];\n  undefined uStack_c6;\n  undefined5 uStack_c5;\n  uint local_b0;\n  \n  bVar48 \u003d 0;\n  pcVar46 \u003d (char *)(ulong)param_1;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name \u003d *(long **)param_2;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(program_name);\n  bfd_plugin_set_program_name(program_name);\n  pcVar43 \u003d (char *)param_2;\n  pFVar18 \u003d param_2;\n  if ((int)param_1 \u003c 2) goto LAB_001062c6;\n  local_110 \u003d (char **)0x7d0;\n  unaff_R12 \u003d (FILE *)0x1;\n  local_128 \u003d (FILE *)0x0;\n  pFVar22 \u003d param_2;\n  do {\n    uVar16 \u003d (uint)unaff_R12;\n    unaff_RBP \u003d (char *)(long)(int)uVar16;\n    local_130 \u003d (FILE *)((long)unaff_RBP * 8);\n    pcVar43 \u003d (char *)pFVar22;\n    if (**(char **)(\u0026pFVar22-\u003e_flags + (long)unaff_RBP * 2) \u003d\u003d \u0027@\u0027) {\n      uVar44 \u003d (int)local_110 - 1;\n      local_110 \u003d (char **)(ulong)uVar44;\n      if (uVar44 \u003d\u003d 0) {\n        plVar21 \u003d *(long **)pFVar22;\n        pcVar46 \u003d \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(_stderr,pcVar46,plVar21);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      pcVar39 \u003d *(char **)(\u0026pFVar22-\u003e_flags + (long)unaff_RBP * 2) + 1;\n      iVar15 \u003d stat(pcVar39,(stat *)local_c8);\n      if (-1 \u003c iVar15) {\n        if ((local_b0 \u0026 0xf000) \u003d\u003d 0x4000) {\n          plVar21 \u003d *(long **)pFVar22;\n          pcVar46 \u003d \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        pFVar18 \u003d fopen(pcVar39,\"r\");\n        if (pFVar18 !\u003d (FILE *)0x0) {\n          iVar15 \u003d fseek(pFVar18,0,2);\n          if (((iVar15 !\u003d -1) \u0026\u0026 (sVar19 \u003d ftell(pFVar18), sVar19 !\u003d 0xffffffffffffffff)) \u0026\u0026\n             (iVar15 \u003d fseek(pFVar18,0,0), iVar15 !\u003d -1)) {\n            local_118 \u003d (byte *)xmalloc(sVar19 + 1);\n            sVar20 \u003d fread(local_118,1,sVar19,pFVar18);\n            if ((sVar19 \u003d\u003d sVar20) || (iVar15 \u003d ferror(pFVar18), iVar15 \u003d\u003d 0)) {\n              local_118[sVar20] \u003d 0;\n              bVar13 \u003d *local_118;\n              pbVar33 \u003d local_118;\n              while( true ) {\n                if (bVar13 \u003d\u003d 0) goto LAB_00106814;\n                if (((\u0026_sch_istable)[(ulong)bVar13 * 2] \u0026 0x40) \u003d\u003d 0) break;\n                bVar13 \u003d pbVar33[1];\n                pbVar33 \u003d pbVar33 + 1;\n              }\n              sVar19 \u003d strlen((char *)local_118);\n              __ptr \u003d (byte *)xmalloc(sVar19 + 1);\n              pFVar28 \u003d (FILE *)0x0;\n              iVar15 \u003d 0;\n              bVar9 \u003d false;\n              bVar47 \u003d false;\n              bVar8 \u003d false;\n              local_100 \u003d 0;\n              pbVar33 \u003d local_118;\n              do {\n                while (((\u0026_sch_istable)[(ulong)*pbVar33 * 2] \u0026 0x40) !\u003d 0) {\n                  pbVar33 \u003d pbVar33 + 1;\n                }\n                if ((iVar15 \u003d\u003d 0) || (iVar15 + -1 \u003c\u003d (int)local_100)) {\n                  if (pFVar28 \u003d\u003d (FILE *)0x0) {\n                    iVar15 \u003d 8;\n                    pFVar28 \u003d (FILE *)xmalloc(0x40);\n                    ppcVar31 \u003d (char **)((long)\u0026pFVar28-\u003e_flags + local_100 * 8);\n                    *ppcVar31 \u003d (char *)0x0;\n                  }\n                  else {\n                    iVar15 \u003d iVar15 * 2;\n                    pFVar28 \u003d (FILE *)xrealloc(pFVar28,(long)iVar15 \u003c\u003c 3);\n                    ppcVar31 \u003d (char **)((long)\u0026pFVar28-\u003e_flags + local_100 * 8);\n                    *ppcVar31 \u003d (char *)0x0;\n                  }\n                }\n                else {\n                  ppcVar31 \u003d (char **)((long)\u0026pFVar28-\u003e_flags + local_100 * 8);\n                }\n                bVar13 \u003d *pbVar33;\n                pbVar38 \u003d __ptr;\n                while (bVar13 !\u003d 0) {\n                  while( true ) {\n                    if ((((\u0026_sch_istable)[(ulong)bVar13 * 2] \u0026 0x40) !\u003d 0) \u0026\u0026\n                       (!(bool)(bVar9 | bVar8 | bVar47))) {\n                      bVar8 \u003d false;\n                      bVar9 \u003d false;\n                      bVar47 \u003d false;\n                      goto LAB_0010606f;\n                    }\n                    if (!bVar8) break;\n                    pbVar33 \u003d pbVar33 + 1;\n                    *pbVar38 \u003d bVar13;\n                    pbVar38 \u003d pbVar38 + 1;\n                    bVar8 \u003d false;\n                    bVar13 \u003d *pbVar33;\n                    if (bVar13 \u003d\u003d 0) goto LAB_0010606f;\n                  }\n                  if (bVar13 \u003d\u003d 0x5c) {\n                    bVar8 \u003d true;\n                  }\n                  else if (bVar47) {\n                    if (bVar13 \u003d\u003d 0x27) {\n                      bVar47 \u003d false;\n                    }\n                    else {\nLAB_001061f1:\n                      *pbVar38 \u003d bVar13;\n                      pbVar38 \u003d pbVar38 + 1;\n                    }\n                  }\n                  else if (bVar9) {\n                    if (bVar13 !\u003d 0x22) goto LAB_001061f1;\n                    bVar9 \u003d false;\n                  }\n                  else if (bVar13 \u003d\u003d 0x27) {\n                    bVar47 \u003d true;\n                  }\n                  else {\n                    if (bVar13 !\u003d 0x22) goto LAB_001061f1;\n                    bVar9 \u003d true;\n                  }\n                  pbVar1 \u003d pbVar33 + 1;\n                  pbVar33 \u003d pbVar33 + 1;\n                  bVar13 \u003d *pbVar1;\n                }\nLAB_0010606f:\n                *pbVar38 \u003d 0;\n                plVar21 \u003d (long *)xstrdup(__ptr);\n                *ppcVar31 \u003d (char *)plVar21;\n                *(undefined8 *)(pFVar28-\u003e_shortbuf + local_100 * 8 + -0x7b) \u003d 0;\n                bVar13 \u003d *pbVar33;\n                bVar3 \u003d (\u0026_sch_istable)[(ulong)bVar13 * 2];\n                while ((bVar3 \u0026 0x40) !\u003d 0) {\n                  bVar13 \u003d pbVar33[1];\n                  pbVar33 \u003d pbVar33 + 1;\n                  bVar3 \u003d (\u0026_sch_istable)[(ulong)bVar13 * 2];\n                }\n                local_100 \u003d local_100 + 1;\n                if (bVar13 \u003d\u003d 0) {\n                  free(__ptr);\n                  if (pFVar22 \u003d\u003d param_2) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(local_118);\n          }\n          fclose(pFVar18);\n        }\n      }\n    }\n    if ((int)pcVar46 \u003c\u003d (int)(uVar16 + 1)) {\nLAB_001062c6:\n      do {\n        if (is_ranlib \u003c 0) goto LAB_001073cc;\nLAB_001062d3:\n        uVar16 \u003d (uint)unaff_R12;\n        iVar15 \u003d bfd_init();\n        pcVar39 \u003d \"fatal error: libbfd ABI mismatch\";\n        if (iVar15 !\u003d 0x118) goto LAB_00106803;\n        pcVar39 \u003d \"x86_64-pc-linux-gnu\";\n        uVar16 \u003d bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        puVar12 \u003d xatexit_head;\n        unaff_R12 \u003d (FILE *)(ulong)uVar16;\n        if ((char)uVar16 !\u003d \u0027\\0\u0027) {\n          if (__xexit_cleanup \u003d\u003d (code *)0x0) {\n            __xexit_cleanup \u003d xatexit_cleanup;\n          }\n          if (*(int *)(xatexit_head + 8) \u003c 0x20) {\nLAB_0010632b:\n            puVar12 \u003d xatexit_head;\n            iVar15 \u003d *(int *)(xatexit_head + 8);\n            *(int *)(xatexit_head + 8) \u003d iVar15 + 1;\n            *(code **)(puVar12 + (long)iVar15 * 8 + 0x10) \u003d remove_output;\n          }\n          else {\n            puVar26 \u003d (undefined8 *)malloc(0x110);\n            if (puVar26 !\u003d (undefined8 *)0x0) {\n              *puVar26 \u003d puVar12;\n              *(undefined4 *)(puVar26 + 1) \u003d 0;\n              xatexit_head \u003d (undefined *)puVar26;\n              goto LAB_0010632b;\n            }\n          }\n          lVar24 \u003d 1;\n          do {\n            lVar35 \u003d lVar24;\n            iVar15 \u003d (int)pcVar46;\n            if (iVar15 \u003c\u003d (int)lVar35) break;\n            cVar14 \u003d ar_emul_default_parse_arg(*(undefined8 *)((int *)pcVar43 + lVar35 * 2));\n            lVar24 \u003d lVar35 + 1;\n          } while (cVar14 !\u003d \u0027\\0\u0027);\n          pcVar46 \u003d (char *)((long)pcVar43 + lVar35 * 8 + -8);\n          uVar44 \u003d iVar15 - ((int)lVar35 + -1);\n          pFVar18 \u003d (FILE *)(ulong)uVar44;\n          if (is_ranlib !\u003d 0) {\n            pcVar43 \u003d \"DhHUvVt\";\n            uVar37 \u003d 0;\n            while (iVar15 \u003d getopt_long(pFVar18,pcVar46,\"DhHUvVt\",long_options), iVar15 !\u003d -1) {\n              if (iVar15 \u003c 0x77) {\n                if (0x43 \u003c iVar15) {\n                  switch(iVar15) {\n                  case 0x44:\n                    deterministic \u003d 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    show_help \u003d 1;\n                    break;\n                  case 0x55:\n                    deterministic \u003d 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    show_version \u003d 1;\n                    break;\n                  case 0x74:\n                    uVar37 \u003d uVar16;\n                  }\n                }\n              }\n              else if (iVar15 \u003d\u003d 0xc9) {\n                bfd_plugin_set_plugin(_optarg);\n              }\n            }\n            if ((int)uVar44 \u003c 2) {\nLAB_00107125:\n              pcVar39 \u003d (char *)0x0;\n              ranlib_usage();\n            }\n            else {\n              if (show_help !\u003d 0) {\nLAB_0010711b:\n                ranlib_usage();\n                goto LAB_00107125;\n              }\n              if (show_version !\u003d 0) {\n                print_version(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (deterministic \u003c 0) {\n                deterministic \u003d 1;\n              }\n              unaff_R12 \u003d (FILE *)0x0;\n              pcVar43 \u003d (char *)(long)_optind;\n              while( true ) {\n                if ((int)uVar44 \u003c\u003d (int)pcVar43) goto LAB_00106f8b;\n                pcVar39 \u003d *(char **)((int *)pcVar46 + (long)pcVar43 * 2);\n                if ((char)uVar37 !\u003d \u0027\\0\u0027) break;\n                uVar16 \u003d ranlib_only();\n                pcVar43 \u003d (char *)((long)(int *)pcVar43 + 1);\n                unaff_R12 \u003d (FILE *)(ulong)((uint)unaff_R12 | uVar16);\n              }\n            }\n            while (lVar24 \u003d get_file_size(pcVar39), lVar24 \u003c 1) {\n              uVar16 \u003d 1;\nLAB_001071c4:\n              piVar11 \u003d (int *)pcVar43;\n              pcVar43 \u003d (char *)((long)piVar11 + 1);\n              unaff_R12 \u003d (FILE *)(ulong)((uint)unaff_R12 | uVar16);\n              if ((int)uVar44 \u003c\u003d (int)pcVar43) {\nLAB_00106f8b:\n                    \n                xexit(unaff_R12);\n              }\n              pcVar39 \u003d *(char **)((char *)((long)pcVar46 + 0x83) + (long)piVar11 * 8 + -0x7b);\n            }\n            iVar15 \u003d open(pcVar39,2,0);\n            if (iVar15 \u003c 0) {\n              bfd_set_error(1);\n              bfd_fatal(pcVar39);\nLAB_0010737f:\n              bfd_fatal(pcVar39);\nLAB_00107387:\n              bfd_nonfatal(pcVar39);\n              iVar15 \u003d bfd_get_error();\n              if (iVar15 \u003d\u003d 0xd) {\n                list_matching_formats\n                          (CONCAT53(uStack_c5,CONCAT12(uStack_c6,CONCAT11(local_c8[1],local_c8[0])))\n                          );\n              }\n              goto LAB_0010700f;\n            }\n            unaff_RBP \u003d (char *)bfd_fdopenr(pcVar39,0);\n            if ((FILE *)unaff_RBP \u003d\u003d (FILE *)0x0) goto LAB_0010737f;\n            cVar14 \u003d bfd_check_format_matches(unaff_RBP,2,local_c8);\n            if (cVar14 \u003d\u003d \u0027\\0\u0027) goto LAB_00107387;\n            if ((*(byte *)((long)((long)unaff_RBP + 0x48) + 1) \u0026 8) !\u003d 0) {\n              if (deterministic !\u003d 0) {\n                puVar2 \u003d (uint *)((long)((long)unaff_RBP + 0x40) + 4);\n                *puVar2 \u003d *puVar2 | 0x2000;\n              }\n              (**(code **)(*(char **)((long)unaff_RBP + 8) + 0x1f0))(unaff_RBP);\n              cVar14 \u003d bfd_close(unaff_RBP);\n              if (cVar14 !\u003d \u0027\\0\u0027) {\n                uVar16 \u003d 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            uVar27 \u003d dcgettext(0,\"%s: no archive map to update\",5);\n            fatal(uVar27,pcVar39);\nLAB_001073cc:\n            pcVar39 \u003d (char *)lbasename(program_name);\n            sVar19 \u003d strlen(pcVar39);\n            if ((sVar19 \u003c 6) ||\n               (iVar15 \u003d filename_cmp(pcVar39 + (sVar19 - 6),\"ranlib\"), iVar15 !\u003d 0)) {\n              is_ranlib \u003d 0;\n            }\n            else {\n              is_ranlib \u003d 1;\n            }\n            goto LAB_001062d3;\n          }\n          puVar36 \u003d long_options;\n          unaff_RBP \u003d \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          pcVar43 \u003d (char *)\u0026DAT_001096a0;\n          pFVar22 \u003d (FILE *)unaff_RBP;\n          pFVar28 \u003d pFVar18;\n          if ((int)uVar44 \u003c 2) goto switchD_00107462_caseD_1;\n          local_130 \u003d (FILE *)CONCAT71(local_130._1_7_,(char)uVar16);\nLAB_001063a3:\n          pFVar22 \u003d (FILE *)unaff_RBP;\n          if (**(char **)((long)pcVar46 + 8) !\u003d \u0027-\u0027) {\n            local_c8[0] \u003d 0x2d;\n            uStack_c6 \u003d 0;\n            sVar19 \u003d strlen(*(char **)((long)pcVar46 + 8));\n            iVar15 \u003d (int)sVar19 + (int)pFVar18;\n            unaff_R12 \u003d (FILE *)xmalloc((long)iVar15 * 8);\n            uVar17 \u003d *(undefined4 *)((long)pcVar46 + 4);\n            unaff_R12-\u003e_flags \u003d *(int *)pcVar46;\n            *(undefined4 *)\u0026unaff_R12-\u003efield_0x4 \u003d uVar17;\n            ppcVar31 \u003d *(char ***)((long)pcVar46 + 8);\n            local_128 \u003d (FILE *)((long)pcVar46 + 0x10);\n            local_110 \u003d ppcVar31;\n            if (*(char *)ppcVar31 \u003d\u003d \u0027\\0\u0027) {\n              ppcVar32 \u003d \u0026unaff_R12-\u003e_IO_read_ptr;\n            }\n            else {\n              local_118 \u003d local_c8;\n              local_c8[1] \u003d *(char *)ppcVar31;\n              pcVar39 \u003d (char *)xstrdup();\n              ppcVar32 \u003d \u0026unaff_R12-\u003e_IO_read_end;\n              unaff_R12-\u003e_IO_read_ptr \u003d pcVar39;\n              if (*(char *)((long)ppcVar31 + 1) !\u003d \u0027\\0\u0027) {\n                local_c8[1] \u003d *(char *)((long)ppcVar31 + 1);\n                pcVar39 \u003d (char *)xstrdup(local_118);\n                ppcVar32 \u003d \u0026unaff_R12-\u003e_IO_read_base;\n                unaff_R12-\u003e_IO_read_end \u003d pcVar39;\n                if (*(char *)((long)ppcVar31 + 2) !\u003d \u0027\\0\u0027) {\n                  local_c8[1] \u003d *(char *)((long)ppcVar31 + 2);\n                  pcVar39 \u003d (char *)xstrdup(local_118);\n                  ppcVar32 \u003d \u0026unaff_R12-\u003e_IO_write_base;\n                  unaff_R12-\u003e_IO_read_base \u003d pcVar39;\n                  if (*(char *)((long)ppcVar31 + 3) !\u003d \u0027\\0\u0027) {\n                    ppcVar32 \u003d \u0026unaff_R12-\u003e_IO_write_ptr;\n                    local_c8[1] \u003d *(char *)((long)ppcVar31 + 3);\n                    pcVar39 \u003d (char *)xstrdup(local_118);\n                    unaff_R12-\u003e_IO_write_base \u003d pcVar39;\n                    cVar14 \u003d *(char *)((long)ppcVar31 + 4);\n                    local_110 \u003d ppcVar32;\n                    if (cVar14 !\u003d \u0027\\0\u0027) {\n                      pcVar39 \u003d (char *)((long)ppcVar31 + 4);\n                      ppcVar31 \u003d ppcVar32;\n                      do {\n                        ppcVar32 \u003d ppcVar31 + 1;\n                        local_c8[1] \u003d cVar14;\n                        pcVar23 \u003d (char *)xstrdup(local_118);\n                        pcVar39 \u003d pcVar39 + 1;\n                        *ppcVar31 \u003d pcVar23;\n                        cVar14 \u003d *pcVar39;\n                        ppcVar31 \u003d ppcVar32;\n                        local_110 \u003d ppcVar32;\n                      } while (cVar14 !\u003d \u0027\\0\u0027);\n                    }\n                  }\n                }\n              }\n            }\n            lVar24 \u003d (long)(int)pFVar18;\n            piVar11 \u003d (int *)pcVar46 + lVar24 * 2;\n            if (local_128 \u003c piVar11) {\n              uVar25 \u003d lVar24 * 8 - 0x11;\n              if ((uVar25 \u003c 0x18) || (ppcVar32 \u003d\u003d (char **)((long)pcVar46 + 0x18))) {\n                *ppcVar32 \u003d *(char **)((long)pcVar46 + 0x10);\n                if (((char **)((long)pcVar46 + 0x18) \u003c piVar11) \u0026\u0026\n                   ((((ppcVar32[1] \u003d *(char **)((long)pcVar46 + 0x18),\n                      (char **)((long)pcVar46 + 0x20) \u003c piVar11 \u0026\u0026\n                      (ppcVar32[2] \u003d *(char **)((long)pcVar46 + 0x20),\n                      (char **)((long)pcVar46 + 0x28) \u003c piVar11)) \u0026\u0026\n                     (ppcVar32[3] \u003d *(char **)((long)pcVar46 + 0x28),\n                     (char **)((long)pcVar46 + 0x30) \u003c piVar11)) \u0026\u0026\n                    (ppcVar32[4] \u003d *(char **)((long)pcVar46 + 0x30),\n                    (char **)((long)pcVar46 + 0x38) \u003c piVar11)))) {\n                  ppcVar32[5] \u003d *(char **)((long)pcVar46 + 0x38);\n                  ppcVar10 \u003d ppcVar32 + 6;\n                  for (ppcVar31 \u003d (char **)((long)pcVar46 + 0x40); ppcVar31 \u003c piVar11;\n                      ppcVar31 \u003d ppcVar31 + (ulong)bVar48 * -2 + 1) {\n                    *ppcVar10 \u003d *ppcVar31;\n                    ppcVar10 \u003d ppcVar10 + (ulong)bVar48 * -2 + 1;\n                  }\n                }\n              }\n              else {\n                uVar17 \u003d *(undefined4 *)((long)((long)pcVar46 + 0x10) + 4);\n                uVar6 \u003d *(undefined4 *)((long)pcVar46 + 0x18);\n                uVar7 \u003d *(undefined4 *)((long)((long)pcVar46 + 0x18) + 4);\n                uVar40 \u003d (uVar25 \u003e\u003e 3) + 1;\n                *(undefined4 *)ppcVar32 \u003d *(undefined4 *)((long)pcVar46 + 0x10);\n                *(undefined4 *)((long)ppcVar32 + 4) \u003d uVar17;\n                *(undefined4 *)(ppcVar32 + 1) \u003d uVar6;\n                *(undefined4 *)((long)ppcVar32 + 0xc) \u003d uVar7;\n                uVar17 \u003d *(undefined4 *)((long)((long)pcVar46 + 0x20) + 4);\n                uVar6 \u003d *(undefined4 *)((long)pcVar46 + 0x28);\n                uVar7 \u003d *(undefined4 *)((long)((long)pcVar46 + 0x28) + 4);\n                uVar25 \u003d uVar40 \u003e\u003e 1;\n                *(undefined4 *)(ppcVar32 + 2) \u003d *(undefined4 *)((long)pcVar46 + 0x20);\n                *(undefined4 *)((long)ppcVar32 + 0x14) \u003d uVar17;\n                *(undefined4 *)(ppcVar32 + 3) \u003d uVar6;\n                *(undefined4 *)((long)ppcVar32 + 0x1c) \u003d uVar7;\n                if (uVar25 !\u003d 2) {\n                  uVar17 \u003d *(undefined4 *)((long)((long)pcVar46 + 0x30) + 4);\n                  uVar6 \u003d *(undefined4 *)((long)pcVar46 + 0x38);\n                  uVar7 \u003d *(undefined4 *)((long)((long)pcVar46 + 0x38) + 4);\n                  *(undefined4 *)(ppcVar32 + 4) \u003d *(undefined4 *)((long)pcVar46 + 0x30);\n                  *(undefined4 *)((long)ppcVar32 + 0x24) \u003d uVar17;\n                  *(undefined4 *)(ppcVar32 + 5) \u003d uVar6;\n                  *(undefined4 *)((long)ppcVar32 + 0x2c) \u003d uVar7;\n                  if (uVar25 !\u003d 3) {\n                    uVar41 \u003d 3;\n                    do {\n                      uVar42 \u003d uVar41 + 1;\n                      pcVar39 \u003d (char *)((long)pcVar46 + 0x83) + uVar41 * 0x10 + -0x73;\n                      uVar17 \u003d *(undefined4 *)(pcVar39 + 4);\n                      uVar6 \u003d *(undefined4 *)(pcVar39 + 8);\n                      uVar7 \u003d *(undefined4 *)(pcVar39 + 0xc);\n                      ppcVar31 \u003d ppcVar32 + uVar41 * 2;\n                      *(undefined4 *)ppcVar31 \u003d *(undefined4 *)pcVar39;\n                      *(undefined4 *)((long)ppcVar31 + 4) \u003d uVar17;\n                      *(undefined4 *)(ppcVar31 + 1) \u003d uVar6;\n                      *(undefined4 *)((long)ppcVar31 + 0xc) \u003d uVar7;\n                      uVar41 \u003d uVar42;\n                    } while (uVar42 !\u003d uVar25);\n                  }\n                }\n                if ((uVar40 \u0026 1) !\u003d 0) {\n                  ppcVar32[uVar40 \u0026 0xfffffffffffffffe] \u003d\n                       *(char **)((long)local_128 + (uVar40 \u0026 0xfffffffffffffffe) * 8);\n                }\n              }\n              ppcVar32 \u003d ppcVar32 + lVar24 + -2;\n            }\n            pFVar18 \u003d (FILE *)(ulong)(iVar15 - 1);\n            *ppcVar32 \u003d (char *)0x0;\n            pcVar46 \u003d (char *)unaff_R12;\n          }\nLAB_001065a2:\n          while( true ) {\n            uVar16 \u003d (uint)unaff_R12;\n            uVar44 \u003d getopt_long((ulong)pFVar18 \u0026 0xffffffff,pcVar46,pFVar22,puVar36,0);\n            unaff_RBP \u003d (char *)pFVar22;\n            if (uVar44 \u003d\u003d 0xffffffff) break;\n            if (((uVar44 - 100 \u003c 0x15) \u0026\u0026 ((0x117201UL \u003e\u003e ((ulong)(uVar44 - 100) \u0026 0x3f) \u0026 1) !\u003d 0))\n               \u0026\u0026 (operation !\u003d 0)) goto LAB_001067f7;\n            pFVar28 \u003d (FILE *)pcVar46;\n            if (uVar44 \u003c 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)pcVar43 + (long)((int *)pcVar43)[uVar44]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            usage(0);\n            pcVar46 \u003d (char *)pFVar28;\nswitchD_00107462_caseD_68:\n            show_help \u003d 1;\n          }\nLAB_00106680:\n          uVar44 \u003d operation;\n          pFVar22 \u003d (FILE *)unaff_RBP;\n          if (operation \u003d\u003d 0) {\n            if (((write_armap \u003d\u003d 1) || (mri_mode !\u003d 0)) ||\n               (((int)pFVar18 \u003c\u003d _optind || (_optind \u003c 1)))) {\n              uVar44 \u003d 0;\n              goto LAB_001066aa;\n            }\n            pcVar46 \u003d (char *)((long)pcVar46 + (long)_optind * 8 + -8);\n            uVar16 \u003d (int)pFVar18 - (_optind + -1);\n            pFVar18 \u003d (FILE *)(ulong)uVar16;\n            _optind \u003d 0;\n            if (1 \u003c (int)uVar16) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          unaff_R12 \u003d (FILE *)((ulong)local_130 \u0026 0xff);\n          uVar16 \u003d (uint)unaff_R12;\n          puVar36 \u003d (undefined1 *)((int *)pcVar46 + (long)_optind * 2);\n          if (show_help \u003d\u003d 0) {\n            if (show_version !\u003d 0) {\n              print_version(\u0026DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (mri_mode \u003d\u003d 0) {\n              pFVar28 \u003d (FILE *)pcVar46;\n              if (*(long *)puVar36 \u003d\u003d 0) goto switchD_00107462_caseD_1;\n              if (operation \u003d\u003d 7) {\n                if (write_armap \u003d\u003d 0) {\n                  if (uVar44 \u003d\u003d 3) goto LAB_00106abc;\n                  if (uVar44 !\u003d 0) goto LAB_00106700;\nLAB_00106eff:\n                  pcVar39 \u003d \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                operation \u003d 2;\n                if (newer_only !\u003d 0) goto LAB_0010704f;\n              }\n              else if ((uVar44 \u003d\u003d 3) || (uVar44 \u003d\u003d 0)) {\n                if (write_armap \u003d\u003d 1) {\n                  uVar17 \u003d ranlib_only();\n                    \n                  xexit(uVar17);\n                }\nLAB_00106abc:\n                if (uVar44 \u003d\u003d 0) goto LAB_00106eff;\n                if (newer_only !\u003d 0) {\nLAB_00106ad1:\n                  pcVar39 \u003d \"`u\\\u0027 is only meaningful with the `r\\\u0027 option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (newer_only !\u003d 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (deterministic \u003c 0) {\n                deterministic \u003d 1;\n              }\nLAB_00106720:\n              unaff_RBP \u003d (char *)0x0;\n              if (postype !\u003d 0) {\n                posname \u003d *(long *)puVar36;\n                unaff_RBP \u003d (char *)0x1;\n                pcVar39 \u003d \"missing position arg.\";\n                if (posname \u003d\u003d 0) goto LAB_00106803;\n              }\n              if (counted_name_mode !\u003d \u0027\\0\u0027) {\n                pcVar39 \u003d \"`N\\\u0027 is only meaningful with the `x\\\u0027 and `d\\\u0027 options.\";\n                if ((operation \u0026 0xfffffffb) \u003d\u003d 1) {\n                  iVar15 \u003d (int)unaff_RBP;\n                  if (*(char **)((long)puVar36 + (long)iVar15 * 2 * 4) \u003d\u003d (char *)0x0) {\n                    uVar27 \u003d dcgettext(0,\"`N\\\u0027 missing value.\",5);\n                    fatal(uVar27);\n                    uVar44 \u003d extraout_EDX;\nLAB_00107548:\n                    if (uVar44 \u003d\u003d 2) {\nLAB_0010704f:\n                      pcVar39 \u003d \"`u\\\u0027 is not meaningful with the `D\\\u0027 option.\";\n                      if (deterministic \u003c 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  unaff_RBP \u003d (char *)(ulong)(iVar15 + 1);\n                  lVar24 \u003d strtol(*(char **)((long)puVar36 + (long)iVar15 * 2 * 4),(char **)0x0,10);\n                  pcVar39 \u003d \"Value for `N\\\u0027 must be positive.\";\n                  counted_name_counter \u003d (int)lVar24;\n                  if (0 \u003c counted_name_counter) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              lVar24 \u003d (long)(int)unaff_RBP;\n              pFVar22 \u003d (FILE *)unaff_RBP;\n              if (*(long *)(int *)((long)puVar36 + lVar24 * 2 * 4) \u003d\u003d 0)\n              goto switchD_00107462_caseD_1;\n              pFVar22 \u003d (FILE *)((long)puVar36 + (lVar24 + 1) * 2 * 4);\n              if (*(FILE **)pFVar22 \u003d\u003d (FILE *)0x0) {\n                pcVar43 \u003d (char *)0x0;\n                pFVar22 \u003d (FILE *)0x0;\n              }\n              else if (*(long *)((long)puVar36 + (lVar24 + 2) * 2 * 4) \u003d\u003d 0) {\n                pcVar43 \u003d (char *)0x1;\n              }\n              else if (*(long *)((long)puVar36 + (lVar24 + 3) * 2 * 4) \u003d\u003d 0) {\n                pcVar43 \u003d (char *)0x2;\n              }\n              else if (*(long *)((long)puVar36 + (lVar24 + 4) * 2 * 4) \u003d\u003d 0) {\n                pcVar43 \u003d (char *)0x3;\n              }\n              else if (*(long *)((long)puVar36 + (lVar24 + 5) * 2 * 4) \u003d\u003d 0) {\n                pcVar43 \u003d (char *)0x4;\n              }\n              else {\n                pFVar18 \u003d (FILE *)0x5;\n                do {\n                  pcVar43 \u003d (char *)pFVar18;\n                  pFVar18 \u003d (FILE *)((long)(int *)pcVar43 + 1);\n                } while (*(long *)((int *)((long)puVar36 + lVar24 * 2 * 4) + (long)pFVar18 * 2) !\u003d 0\n                        );\n              }\n              puVar26 \u003d (undefined8 *)open_inarch();\n              pFVar18 \u003d pFVar22;\n              if (operation \u003d\u003d 5) {\n                pcVar39 \u003d \"`x\\\u0027 cannot be used on thin archives.\";\n                if ((*(byte *)((long)puVar26 + 0x49) \u0026 0x10) \u003d\u003d 0) {\n                  unaff_RBP \u003d (char *)pFVar22;\n                  if (libdeps !\u003d (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  map_over_members(puVar26,extract_file,unaff_RBP,(ulong)pcVar43 \u0026 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (libdeps !\u003d (char *)0x0) {\nLAB_00106d5c:\n                sVar19 \u003d strlen(libdeps);\n                pcVar46 \u003d \"__.LIBDEP\";\n                unaff_RBP \u003d (char *)(sVar19 + 1);\n                libdeps_bfd \u003d bfd_create(\"__.LIBDEP\",puVar26);\n                if (libdeps_bfd \u003d\u003d 0) {\n                  pcVar39 \u003d \"Cannot create libdeps record.\";\n                }\n                else {\n                  lVar24 \u003d bfd_find_target(\"binary\",libdeps_bfd);\n                  pcVar39 \u003d \"Cannot set libdeps record type to binary.\";\n                  if (lVar24 !\u003d 0) {\n                    cVar14 \u003d bfd_set_format(libdeps_bfd,1,5);\n                    pcVar39 \u003d \"Cannot set libdeps object format.\";\n                    if (cVar14 \u003d\u003d \u0027\\0\u0027) goto LAB_00106803;\n                    cVar14 \u003d bfd_make_writable(libdeps_bfd,\"Cannot set libdeps object format.\",5);\n                    pcVar39 \u003d \"Cannot make libdeps object writable.\";\n                    if (cVar14 \u003d\u003d \u0027\\0\u0027) goto LAB_00106803;\n                    pFVar28 \u003d (FILE *)bfd_bwrite(libdeps,unaff_RBP,libdeps_bfd);\n                    pcVar39 \u003d \"Cannot write libdeps record.\";\n                    if (pFVar28 !\u003d (FILE *)unaff_RBP) goto LAB_00106803;\n                    cVar14 \u003d bfd_make_readable(libdeps_bfd,\"Cannot write libdeps record.\",5);\n                    pcVar39 \u003d \"Cannot make libdeps object readable.\";\n                    if (cVar14 \u003d\u003d \u0027\\0\u0027) goto LAB_00106803;\n                    lVar24 \u003d bfd_find_target(\"plugin\",libdeps_bfd,5);\n                    pcVar39 \u003d \"Cannot reset libdeps record type.\";\n                    if (lVar24 \u003d\u003d 0) goto LAB_00106803;\n                    iVar15 \u003d (int)pcVar43;\n                    local_130 \u003d (FILE *)((long)(iVar15 + 2) * 8);\n                    unaff_RBP \u003d (char *)xmalloc(local_130,\"Cannot reset libdeps record type.\");\n                    if (iVar15 \u003d\u003d 0) {\n                      lVar24 \u003d 0;\n                    }\n                    else {\n                      uVar17 \u003d *(undefined4 *)\u0026pFVar22-\u003efield_0x4;\n                      *(int *)unaff_RBP \u003d pFVar22-\u003e_flags;\n                      *(undefined4 *)((long)unaff_RBP + 4) \u003d uVar17;\n                      lVar24 \u003d 8;\n                      ppcVar31 \u003d (char **)((long)unaff_RBP + 8);\n                      for (pcVar43 \u003d local_130[-1]._unused2 + 4; pcVar43 !\u003d (char *)0x0;\n                          pcVar43 \u003d pcVar43 + -1) {\n                        *(undefined *)ppcVar31 \u003d *(undefined *)\u0026pFVar22-\u003e_flags;\n                        pFVar22 \u003d (FILE *)((long)pFVar22 + (ulong)bVar48 * -2 + 1);\n                        ppcVar31 \u003d (char **)((long)ppcVar31 + (ulong)bVar48 * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)unaff_RBP + lVar24) \u003d \"__.LIBDEP\";\n                    pcVar43 \u003d (char *)(ulong)(iVar15 + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)unaff_RBP + -0xd8))-\u003e_unused2 + 0xc + (long)local_130) \u003d 0;\n                    switch(operation) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      pFVar22 \u003d (FILE *)unaff_RBP;\n                      if (silent_create \u003d\u003d 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(operation) {\n              case 1:\n                unaff_RBP \u003d (char *)pFVar22;\n                if (pFVar22 \u003d\u003d (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                pFVar18 \u003d (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                unaff_RBP \u003d (char *)pFVar22;\n                if ((pFVar22 !\u003d (FILE *)0x0) || (0 \u003c write_armap)) {\nswitchD_00106ed8_caseD_2:\n                  replace_members(puVar26,unaff_RBP,operation \u003d\u003d 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                unaff_RBP \u003d (char *)pFVar22;\nswitchD_00106ed8_caseD_3:\n                map_over_members(puVar26,print_descr,unaff_RBP,(ulong)pcVar43 \u0026 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                unaff_RBP \u003d (char *)pFVar22;\nswitchD_00106ed8_caseD_4:\n                map_over_members(puVar26,print_contents,unaff_RBP,(ulong)pcVar43 \u0026 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                pcVar39 \u003d \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (silent_create !\u003d 0) goto switchD_001067e8_caseD_2;\n                if (pFVar22 \u003d\u003d (FILE *)0x0) break;\nLAB_00106afb:\n                pFVar18 \u003d (FILE *)(puVar26 + 0x1e);\n                do {\n                  unaff_R12 \u003d pFVar18;\n                  if (*(FILE **)pFVar22 \u003d\u003d (FILE *)0x0) {\nLAB_00106b9f:\n                    write_archive(puVar26);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    plVar21 \u003d *(long **)unaff_R12;\n                    pcVar46 \u003d *(char **)pFVar22;\n                    if (plVar21 \u003d\u003d (long *)0x0) {\n                      uVar27 \u003d *puVar26;\n                      uVar30 \u003d dcgettext(0,\"no entry %s in archive %s!\",5);\n                      fatal(uVar30,pcVar46,uVar27);\n                      pcVar43 \u003d (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    lVar24 \u003d *plVar21;\n                    uVar27 \u003d normalize(pcVar46,puVar26);\n                    iVar15 \u003d filename_cmp(uVar27,lVar24);\n                    if (iVar15 \u003d\u003d 0) break;\n                    unaff_R12 \u003d (FILE *)(*(long **)unaff_R12 + 0x1e);\n                  }\n                  *(long **)unaff_R12 \u003d (long *)plVar21[0x1e];\n                  pplVar29 \u003d (long **)get_pos_bfd(pFVar18,3,0);\n                  bVar47 \u003d verbose !\u003d 0;\n                  plVar4 \u003d *pplVar29;\n                  *pplVar29 \u003d plVar21;\n                  plVar21[0x1e] \u003d (long)plVar4;\n                  if (bVar47) {\n                    printf(\"m - %s\\n\",*(FILE **)pFVar22);\n                  }\n                  pFVar22 \u003d (FILE *)\u0026pFVar22-\u003e_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 \u003c deterministic) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            usage(1);\n          }\n          deterministic \u003d 1;\nLAB_0010755f:\n          iVar15 \u003d fileno(_stdin);\n          interactive \u003d isatty(iVar15);\n          yyparse_isra_0();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        uVar17 \u003d bfd_get_error();\n        pFVar22 \u003d (FILE *)bfd_errmsg(uVar17);\n        uVar27 \u003d dcgettext(0,\"can\\\u0027t set BFD default target to `%s\\\u0027: %s\",5);\n        iVar15 \u003d fatal(uVar27,\"x86_64-pc-linux-gnu\",pFVar22);\nLAB_0010751b:\n        if (operation \u003d\u003d 0) {\nLAB_00107447:\n          puVar36 \u003d pcVar39;\n          pFVar28 \u003d (FILE *)pcVar46;\n          switch(iVar15) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            deterministic \u003d 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            mri_mode \u003d 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            counted_name_mode \u003d \u0027\\x01\u0027;\n            goto LAB_001065a2;\n          case 0x4f:\n            display_offsets \u003d 1;\n            goto LAB_001065a2;\n          case 0x50:\n            full_pathname \u003d 1;\n            goto LAB_001065a2;\n          case 0x53:\n            write_armap \u003d -1;\n            goto LAB_001065a2;\n          case 0x54:\n            make_thin_archive \u003d 1;\n            goto LAB_001065a2;\n          case 0x55:\n            deterministic \u003d 0;\n            goto LAB_001065a2;\n          case 0x56:\n            show_version \u003d 1;\n            goto LAB_001065a2;\n          case 0x61:\n            postype \u003d 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            postype \u003d 1;\n            goto LAB_001065a2;\n          case 99:\n            silent_create \u003d 1;\n            goto LAB_001065a2;\n          case 100:\n            operation \u003d 1;\n            operation_alters_arch \u003d 1;\n            goto LAB_001065a2;\n          case 0x66:\n            ar_truncate \u003d 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (libdeps \u003d\u003d (char *)0x0) {\n              libdeps \u003d _optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            uVar16 \u003d (uint)unaff_R12;\n            pcVar39 \u003d \"libdeps specified more than once\";\n            unaff_RBP \u003d (char *)pFVar22;\n            break;\n          case 0x6d:\n            operation \u003d 6;\n            operation_alters_arch \u003d 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            preserve_dates \u003d 1;\n            goto LAB_001065a2;\n          case 0x70:\n            operation \u003d 4;\n            goto LAB_001065a2;\n          case 0x71:\n            operation \u003d 7;\n            operation_alters_arch \u003d 1;\n            goto LAB_001065a2;\n          case 0x72:\n            operation \u003d 2;\n            operation_alters_arch \u003d 1;\n            goto LAB_001065a2;\n          case 0x73:\n            write_armap \u003d 1;\n            goto LAB_001065a2;\n          case 0x74:\n            operation \u003d 3;\n            goto LAB_001065a2;\n          case 0x75:\n            newer_only \u003d 1;\n            goto LAB_001065a2;\n          case 0x76:\n            verbose \u003d 1;\n            goto LAB_001065a2;\n          case 0x78:\n            operation \u003d 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(_optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            target \u003d _optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            output_dir \u003d _optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        pcVar39 \u003d \"two different operation options specified\";\n        unaff_RBP \u003d (char *)pFVar22;\nLAB_00106803:\n        uVar27 \u003d dcgettext(0,pcVar39,5);\n        fatal(uVar27);\nLAB_00106814:\n        iVar15 \u003d (int)pcVar46;\n        pFVar28 \u003d (FILE *)xmalloc(8);\n        *(long **)pFVar28 \u003d (long *)0x0;\n        if ((FILE *)pcVar43 \u003d\u003d param_2) {\nLAB_00106834:\n          if (*(long **)pcVar43 \u003d\u003d (long *)0x0) {\n            iVar15 \u003d 0;\n          }\n          else {\n            lVar24 \u003d 1;\n            do {\n              iVar15 \u003d (int)lVar24;\n              lVar35 \u003d lVar24 * 2;\n              lVar24 \u003d lVar24 + 1;\n            } while (*(long *)((int *)pcVar43 + lVar35) !\u003d 0);\n          }\n          pFVar22 \u003d (FILE *)xmalloc((long)(iVar15 + 1) \u003c\u003c 3);\n          plVar21 \u003d *(long **)pcVar43;\n          lVar24 \u003d 0;\n          while (plVar21 !\u003d (long *)0x0) {\n            uVar27 \u003d xstrdup();\n            *(undefined8 *)((long)\u0026pFVar22-\u003e_flags + lVar24) \u003d uVar27;\n            plVar21 \u003d *(long **)((char *)((long)pcVar43 + 0x83) + lVar24 + -0x7b);\n            lVar24 \u003d lVar24 + 8;\n          }\n          *(undefined8 *)((long)\u0026pFVar22-\u003e_flags + lVar24) \u003d 0;\nLAB_0010610a:\n          iVar15 \u003d (int)pcVar46;\n          pcVar43 \u003d (char *)pFVar22;\n          if (*(long **)pFVar28 \u003d\u003d (long *)0x0) goto LAB_00106a80;\n          lVar24 \u003d 0;\n          do {\n            lVar34 \u003d lVar24 + 1;\n            lVar35 \u003d lVar24 * 8;\n            lVar24 \u003d lVar34;\n          } while (*(long *)(pFVar28-\u003e_shortbuf + lVar35 + -0x7b) !\u003d 0);\n          local_108 \u003d lVar34 * 8;\n        }\n        else {\nLAB_00106a80:\n          lVar34 \u003d 0;\n          local_108 \u003d 0;\n        }\n        lVar24 \u003d (long)unaff_RBP * 2;\n        unaff_RBP \u003d (char *)((long)(char **)unaff_RBP + lVar34);\n        free(*(void **)((int *)pcVar43 + lVar24));\n        pFVar22 \u003d (FILE *)xrealloc(pcVar43,(lVar34 + 1 + (long)iVar15) * 8);\n        uVar44 \u003d iVar15 + -1 + (int)lVar34;\n        pcVar46 \u003d (char *)(ulong)uVar44;\n        memmove(\u0026pFVar22-\u003e_flags + (long)unaff_RBP * 2,\n                (void *)((long)\u0026pFVar22-\u003e_IO_read_ptr + (long)local_130),\n                (long)(int)(iVar15 - uVar16) \u003c\u003c 3);\n        memcpy((void *)((long)\u0026local_130-\u003e_flags + (long)\u0026pFVar22-\u003e_flags),pFVar28,local_108);\n        free(pFVar28);\n        free(local_118);\n        fclose(pFVar18);\n        uVar16 \u003d (int)local_128 + 1;\n        unaff_R12 \u003d local_130;\n        pcVar43 \u003d (char *)pFVar22;\n        local_130 \u003d pFVar28;\n        if ((int)uVar16 \u003c (int)uVar44) goto LAB_001061ce;\n      } while( true );\n    }\n    uVar16 \u003d uVar16 + 1;\n    local_128 \u003d unaff_R12;\nLAB_001061ce:\n    unaff_R12 \u003d (FILE *)(ulong)uVar16;\n  } while( true );\nswitchD_00107462_caseD_0:\n  iVar15 \u003d getopt_long((ulong)pFVar18 \u0026 0xffffffff,pcVar46,pFVar22,\"x86_64-pc-linux-gnu\");\n  unaff_RBP \u003d (char *)pFVar22;\n  if (iVar15 \u003d\u003d -1) goto LAB_00106680;\n  if ((0x14 \u003c iVar15 - 100U) || ((0x117201UL \u003e\u003e ((byte)(iVar15 - 100U) \u0026 0x3f) \u0026 1) \u003d\u003d 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (deterministic !\u003d 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  uVar27 \u003d dcgettext(0,\"`u\\\u0027 modifier ignored since `D\\\u0027 is the default (see `U\\\u0027)\",5);\n  non_fatal(uVar27);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)unaff_RBP \u003d\u003d (FILE *)0x0) {\n    if ((char)pFVar18 !\u003d \u0027\\0\u0027) goto LAB_00106b9f;\nLAB_00106d4e:\n    output_filename \u003d 0;\n    goto LAB_0010696c;\n  }\n  iVar45 \u003d 0;\n  iVar15 \u003d strcmp((char *)*(FILE **)unaff_RBP,\"__.SYMDEF\");\n  puVar5 \u003d puVar26;\n  if (iVar15 \u003d\u003d 0) {\n    *(byte *)((long)puVar26 + 0x49) \u003d *(byte *)((long)puVar26 + 0x49) \u0026 0xf7;\n    write_armap \u003d -1;\n  }\n  else {\n    while( true ) {\n      plVar21 \u003d puVar5 + 0x1e;\n      if ((undefined8 *)*plVar21 \u003d\u003d (undefined8 *)0x0) break;\n      uVar27 \u003d *(undefined8 *)*plVar21;\n      uVar30 \u003d normalize(*(FILE **)unaff_RBP,puVar26);\n      iVar15 \u003d filename_cmp(uVar30,uVar27);\n      if ((iVar15 \u003d\u003d 0) \u0026\u0026\n         ((counted_name_mode \u003d\u003d \u0027\\0\u0027 || (iVar45 \u003d iVar45 + 1, iVar45 \u003d\u003d counted_name_counter)))) {\n        if (verbose !\u003d 0) {\n          printf(\"d - %s\\n\",*(FILE **)unaff_RBP);\n        }\n        *plVar21 \u003d *(long *)(*plVar21 + 0xf0);\n        pFVar18 \u003d unaff_R12;\n        goto LAB_00106d38;\n      }\n      puVar5 \u003d (undefined8 *)*plVar21;\n    }\n    if (verbose !\u003d 0) {\n      pFVar22 \u003d *(FILE **)unaff_RBP;\n      pcVar46 \u003d (char *)dcgettext(0,\"No member named `%s\\\u0027\\n\",5);\n      printf(pcVar46,pFVar22);\n    }\n  }\nLAB_00106d38:\n  unaff_RBP \u003d (char *)((long)unaff_RBP + 8);\n  goto LAB_00106b89;\n}\n\n",
      "renaming": {},
      "calling": [
        "_start"
      ],
      "called": [
        "filename_cmp",
        "bfd_make_writable",
        "fopen",
        "getopt_long",
        "remove_output",
        "xatexit_cleanup",
        "fclose",
        "bfd_plugin_set_plugin",
        "bfd_init",
        "memmove",
        "fseek",
        "bfd_nonfatal",
        "extract_file",
        "bfd_make_readable",
        "bfd_check_format_matches",
        "fatal",
        "bfd_create",
        "dcgettext",
        "yyparse.isra.0",
        "textdomain",
        "map_over_members",
        "ar_emul_default_parse_arg",
        "strlen",
        "bfd_bwrite",
        "fprintf",
        "list_matching_formats",
        "xmalloc_set_program_name",
        "print_descr",
        "print_contents",
        "bfd_set_error",
        "non_fatal",
        "isatty",
        "open_inarch",
        "bindtextdomain",
        "ftell",
        "stat",
        "write_archive",
        "normalize",
        "free",
        "ranlib_usage",
        "setlocale",
        "strtol",
        "printf",
        "bfd_find_target",
        "replace_members",
        "xexit",
        "get_pos_bfd",
        "xmalloc",
        "xrealloc",
        "fread",
        "bfd_close",
        "memcpy",
        "usage",
        "bfd_set_format",
        "open",
        "fileno",
        "ferror",
        "bfd_get_error",
        "xstrdup",
        "get_file_size",
        "bfd_set_default_target",
        "bfd_fdopenr",
        "bfd_errmsg",
        "lbasename",
        "bfd_plugin_set_program_name",
        "bfd_set_error_program_name",
        "ranlib_only",
        "malloc",
        "bfd_fatal",
        "print_version",
        "strcmp"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "print_version": {
      "entrypoint": "0x001075e0",
      "current_name": "print_version",
      "code": "\nvoid print_version(undefined8 param_1)\n\n{\n  char *pcVar1;\n  \n  printf(\"GNU %s %s\\n\",param_1,\"(GNU Binutils for Debian) 2.40\");\n  pcVar1 \u003d (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(pcVar1);\n  pcVar1 \u003d (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(pcVar1);\n                    \n  exit(0);\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "exit",
        "dcgettext",
        "printf"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "ar_emul_default_parse_arg": {
      "entrypoint": "0x00107640",
      "current_name": "ar_emul_default_parse_arg",
      "code": "\nundefined8 ar_emul_default_parse_arg(void)\n\n{\n  return 0;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "ranlib_only": {
      "entrypoint": "0x00107650",
      "current_name": "ranlib_only",
      "code": "\nundefined8 ranlib_only(undefined8 param_1)\n\n{\n  undefined8 uVar1;\n  long lVar2;\n  \n  lVar2 \u003d get_file_size();\n  if (lVar2 \u003c 1) {\n    uVar1 \u003d 1;\n  }\n  else {\n    write_armap \u003d 1;\n    lVar2 \u003d open_inarch(param_1,0);\n    if (lVar2 \u003d\u003d 0) {\n                    \n      xexit(1);\n    }\n    write_archive(lVar2);\n    uVar1 \u003d 0;\n  }\n  return uVar1;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "xexit",
        "write_archive",
        "get_file_size",
        "ranlib_only.cold",
        "open_inarch"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fatal": {
      "entrypoint": "0x00107690",
      "current_name": "fatal",
      "code": "\nvoid fatal(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n          undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n          undefined8 param_9,undefined8 param_10,undefined8 param_11,undefined8 param_12,\n          undefined8 param_13,undefined8 param_14)\n\n{\n  char in_AL;\n  undefined4 local_d8;\n  undefined4 local_d4;\n  undefined *local_d0;\n  undefined *local_c8;\n  undefined local_b8 [8];\n  undefined8 local_b0;\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined8 local_98;\n  undefined8 local_90;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  undefined4 local_18;\n  \n  if (in_AL !\u003d \u0027\\0\u0027) {\n    local_88 \u003d param_1;\n    local_78 \u003d param_2;\n    local_68 \u003d param_3;\n    local_58 \u003d param_4;\n    local_48 \u003d param_5;\n    local_38 \u003d param_6;\n    local_28 \u003d param_7;\n    local_18 \u003d param_8;\n  }\n  local_d0 \u003d \u0026stack0x00000008;\n  local_d8 \u003d 8;\n  local_c8 \u003d local_b8;\n  local_d4 \u003d 0x30;\n  local_b0 \u003d param_10;\n  local_a8 \u003d param_11;\n  local_a0 \u003d param_12;\n  local_98 \u003d param_13;\n  local_90 \u003d param_14;\n  report(param_9,\u0026local_d8);\n                    \n  xexit(1);\n}\n\n",
      "renaming": {},
      "calling": [
        "main",
        "print_contents",
        "replace_members.cold",
        "extract_file.cold",
        "open_inarch"
      ],
      "called": [
        "xexit",
        "report"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "remove_output": {
      "entrypoint": "0x00107730",
      "current_name": "remove_output",
      "code": "\nvoid remove_output(void)\n\n{\n  if (output_filename \u003d\u003d 0) {\n    return;\n  }\n  if (output_bfd !\u003d 0) {\n    bfd_cache_close();\n  }\n  if (output_file !\u003d (FILE *)0x0) {\n    fclose(output_file);\n  }\n  unlink_if_ordinary(output_filename);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "remove_output.cold"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "extract_file": {
      "entrypoint": "0x00107740",
      "current_name": "extract_file",
      "code": "\nlong * extract_file(long **param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int *piVar3;\n  char *pcVar4;\n  undefined8 uVar5;\n  long **pplVar6;\n  void *__ptr;\n  size_t __n;\n  long lVar7;\n  long *plVar8;\n  undefined4 *puVar9;\n  ulong uVar10;\n  size_t sVar11;\n  undefined4 local_c8 [6];\n  __mode_t _Stack_b0;\n  ulong uStack_98;\n  undefined8 uStack_80;\n  undefined8 uStack_70;\n  \n  if (preserve_dates !\u003d 0) {\n    puVar9 \u003d local_c8;\n    for (lVar7 \u003d 0x24; lVar7 !\u003d 0; lVar7 \u003d lVar7 + -1) {\n      *puVar9 \u003d 0;\n      puVar9 \u003d puVar9 + 1;\n    }\n  }\n  pplVar6 \u003d (long **)param_1[0x1d];\n  if ((long **)param_1[0x1d] \u003d\u003d (long **)0x0) {\n    pplVar6 \u003d param_1;\n  }\n  iVar2 \u003d (*(code *)pplVar6[1][0x3d])(param_1,local_c8);\n  if (iVar2 !\u003d 0) {\n    plVar8 \u003d *param_1;\n    uVar5 \u003d dcgettext(0,\"internal stat error on %s\",5);\n    iVar2 \u003d fatal(uVar5,plVar8);\n    uVar5 \u003d posname;\n    if (iVar2 \u003d\u003d 3) {\n      for (; *plVar8 !\u003d 0; plVar8 \u003d (long *)(*plVar8 + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*plVar8 !\u003d (undefined8 *)0x0; plVar8 \u003d (long *)(*plVar8 + 0xf0)) {\n        iVar1 \u003d filename_cmp(*(undefined8 *)*plVar8,uVar5);\n        if (iVar1 \u003d\u003d 0) {\n          if (iVar2 !\u003d 2) {\n            return plVar8;\n          }\n          return (long *)(*plVar8 + 0xf0);\n        }\n      }\n    }\n    return plVar8;\n  }\n  bfd_seek(param_1,0,0);\n  output_file \u003d (FILE *)0x0;\n  if (uStack_98 \u003d\u003d 0) {\nLAB_00102ca2:\n    output_file \u003d (FILE *)open_output_file_isra_0(*param_1);\n  }\n  else {\n    uVar10 \u003d 0;\n    __ptr \u003d (void *)xmalloc(0x2000);\n    do {\n      sVar11 \u003d uStack_98 - uVar10;\n      if (0x2000 \u003c sVar11) {\n        sVar11 \u003d 0x2000;\n      }\n      __n \u003d bfd_bread(__ptr,sVar11,param_1);\n      if (sVar11 !\u003d __n) {\nLAB_00102c78:\n        param_1 \u003d (long **)*param_1[0x1d];\n        uVar5 \u003d dcgettext(0,\"%s is not a valid archive\",5);\n        fatal(uVar5,param_1);\n        goto LAB_00102ca2;\n      }\n      if (output_file \u003d\u003d (FILE *)0x0) {\n        output_file \u003d (FILE *)open_output_file_isra_0(*param_1);\n      }\n      sVar11 \u003d fwrite(__ptr,1,__n,output_file);\n      if (sVar11 !\u003d __n) {\n        piVar3 \u003d __errno_location();\n        pcVar4 \u003d strerror(*piVar3);\n        fatal(\"%s: %s\",output_filename,pcVar4);\n        goto LAB_00102c78;\n      }\n      uVar10 \u003d uVar10 + __n;\n    } while (uVar10 \u003c uStack_98);\n    free(__ptr);\n  }\n  fclose(output_file);\n  pcVar4 \u003d output_filename;\n  output_file \u003d (FILE *)0x0;\n  chmod(output_filename,_Stack_b0);\n  if (preserve_dates !\u003d 0) {\n    uStack_80 \u003d uStack_70;\n    set_times(pcVar4,local_c8);\n  }\n  output_filename \u003d (char *)0x0;\n  return (long *)0x0;\n}\n\n",
      "renaming": {},
      "calling": [
        "main",
        "yyparse.isra.0"
      ],
      "called": [
        "extract_file.cold"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "print_descr": {
      "entrypoint": "0x00107890",
      "current_name": "print_descr",
      "code": "\n\n\nvoid print_descr(undefined8 param_1)\n\n{\n  print_arelt_descr(_stdout,param_1,verbose !\u003d 0,display_offsets !\u003d 0);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "print_arelt_descr"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "report": {
      "entrypoint": "0x001078c0",
      "current_name": "report",
      "code": "\n\n\nvoid report(char *param_1,__gnuc_va_list param_2)\n\n{\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",program_name);\n  vfprintf(_stderr,param_1,param_2);\n  putc(10,_stderr);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "fatal",
        "non_fatal"
      ],
      "called": [
        "vfprintf",
        "fprintf",
        "putc",
        "fflush"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "non_fatal": {
      "entrypoint": "0x00107920",
      "current_name": "non_fatal",
      "code": "\nvoid non_fatal(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n              undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n              undefined8 param_9,undefined8 param_10,undefined8 param_11,undefined8 param_12,\n              undefined8 param_13,undefined8 param_14)\n\n{\n  char in_AL;\n  undefined4 local_d8;\n  undefined4 local_d4;\n  undefined *local_d0;\n  undefined *local_c8;\n  undefined local_b8 [8];\n  undefined8 local_b0;\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined8 local_98;\n  undefined8 local_90;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  undefined4 local_18;\n  \n  if (in_AL !\u003d \u0027\\0\u0027) {\n    local_88 \u003d param_1;\n    local_78 \u003d param_2;\n    local_68 \u003d param_3;\n    local_58 \u003d param_4;\n    local_48 \u003d param_5;\n    local_38 \u003d param_6;\n    local_28 \u003d param_7;\n    local_18 \u003d param_8;\n  }\n  local_d0 \u003d \u0026stack0x00000008;\n  local_d8 \u003d 8;\n  local_c8 \u003d local_b8;\n  local_d4 \u003d 0x30;\n  local_b0 \u003d param_10;\n  local_a8 \u003d param_11;\n  local_a0 \u003d param_12;\n  local_98 \u003d param_13;\n  local_90 \u003d param_14;\n  report(param_9,\u0026local_d8);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "set_times.cold",
        "main",
        "get_file_size.cold",
        "smart_rename.constprop.0.cold",
        "get_file_size",
        "open_inarch",
        "FUN_00102e6f"
      ],
      "called": [
        "report"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "print_arelt_descr": {
      "entrypoint": "0x001079c0",
      "current_name": "print_arelt_descr",
      "code": "\nvoid print_arelt_descr(FILE *param_1,char **param_2,char param_3,char param_4)\n\n{\n  int iVar1;\n  char **ppcVar2;\n  char *pcVar3;\n  uint uVar4;\n  time_t local_100;\n  undefined uStack_f3;\n  char cStack_f2;\n  char cStack_f1;\n  char cStack_f0;\n  char cStack_ef;\n  char cStack_ee;\n  char cStack_ed;\n  char cStack_ec;\n  char cStack_eb;\n  char cStack_ea;\n  undefined uStack_e9;\n  char local_e8 [48];\n  undefined local_b8 [24];\n  uint uStack_a0;\n  uint uStack_9c;\n  uint uStack_98;\n  undefined8 uStack_88;\n  time_t local_60;\n  \n  if (param_3 !\u003d \u0027\\0\u0027) {\n    ppcVar2 \u003d (char **)param_2[0x1d];\n    if ((char **)param_2[0x1d] \u003d\u003d (char **)0x0) {\n      ppcVar2 \u003d param_2;\n    }\n    iVar1 \u003d (**(code **)(ppcVar2[1] + 0x1e8))(param_2,local_b8);\n    if (iVar1 \u003d\u003d 0) {\n      local_100 \u003d local_60;\n      pcVar3 \u003d ctime(\u0026local_100);\n      if (pcVar3 \u003d\u003d (char *)0x0) {\n        pcVar3 \u003d (char *)dcgettext(0,\"\u003ctime data corrupt\u003e\",5);\n        sprintf(local_e8,pcVar3);\n      }\n      else {\n        sprintf(local_e8,\"%.12s %.4s\",pcVar3 + 4);\n      }\n      uVar4 \u003d uStack_a0 \u0026 0xf000;\n      if (uVar4 \u003d\u003d 0x4000) {\n        uStack_f3 \u003d 100;\n      }\n      else if (uVar4 \u003d\u003d 0xa000) {\n        uStack_f3 \u003d 0x6c;\n      }\n      else if (uVar4 \u003d\u003d 0x6000) {\n        uStack_f3 \u003d 0x62;\n      }\n      else if (uVar4 \u003d\u003d 0x2000) {\n        uStack_f3 \u003d 99;\n      }\n      else if (uVar4 \u003d\u003d 0xc000) {\n        uStack_f3 \u003d 0x73;\n      }\n      else {\n        uStack_f3 \u003d 0x70;\n        if (uVar4 !\u003d 0x1000) {\n          uStack_f3 \u003d 0x2d;\n        }\n      }\n      cStack_f2 \u003d (-((uStack_a0 \u0026 0x100) \u003d\u003d 0) \u0026 0xbbU) + 0x72;\n      cStack_f1 \u003d (-((uStack_a0 \u0026 0x80) \u003d\u003d 0) \u0026 0xb6U) + 0x77;\n      cStack_f0 \u003d (-((uStack_a0 \u0026 0x40) \u003d\u003d 0) \u0026 0xb5U) + 0x78;\n      cStack_ef \u003d (-((uStack_a0 \u0026 0x20) \u003d\u003d 0) \u0026 0xbbU) + 0x72;\n      cStack_ee \u003d (-((uStack_a0 \u0026 0x10) \u003d\u003d 0) \u0026 0xb6U) + 0x77;\n      cStack_ed \u003d (-((uStack_a0 \u0026 8) \u003d\u003d 0) \u0026 0xb5U) + 0x78;\n      cStack_ec \u003d (-((uStack_a0 \u0026 4) \u003d\u003d 0) \u0026 0xbbU) + 0x72;\n      cStack_eb \u003d (-((uStack_a0 \u0026 2) \u003d\u003d 0) \u0026 0xb6U) + 0x77;\n      cStack_ea \u003d (-((uStack_a0 \u0026 1) \u003d\u003d 0) \u0026 0xb5U) + 0x78;\n      if ((uStack_a0 \u0026 0x800) !\u003d 0) {\n        if (cStack_f0 \u003d\u003d \u0027x\u0027) {\n          cStack_f0 \u003d \u0027s\u0027;\n        }\n        else {\n          cStack_f0 \u003d \u0027S\u0027;\n        }\n      }\n      if ((uStack_a0 \u0026 0x400) !\u003d 0) {\n        if (cStack_ed \u003d\u003d \u0027x\u0027) {\n          cStack_ed \u003d \u0027s\u0027;\n        }\n        else {\n          cStack_ed \u003d \u0027S\u0027;\n        }\n      }\n      if ((uStack_a0 \u0026 0x200) !\u003d 0) {\n        if (cStack_ea \u003d\u003d \u0027x\u0027) {\n          cStack_ea \u003d \u0027t\u0027;\n        }\n        else {\n          cStack_ea \u003d \u0027T\u0027;\n        }\n      }\n      uStack_e9 \u003d 0;\n      fprintf(param_1,\"%s %ld/%ld %6lu %s \",\u0026cStack_f2,(ulong)uStack_9c,(ulong)uStack_98,uStack_88,\n              local_e8,(ulong)uStack_a0);\n    }\n  }\n  fputs(*param_2,param_1);\n  if (param_4 !\u003d \u0027\\0\u0027) {\n    if ((*(byte *)((long)param_2 + 0x49) \u0026 0x10) \u003d\u003d 0) {\n      if (param_2[0xb] !\u003d (char *)0x0) {\n        fprintf(param_1,\" 0x%lx\");\n      }\n    }\n    else if (param_2[0xc] !\u003d (char *)0x0) {\n      fprintf(param_1,\" 0x%lx\");\n    }\n  }\n  fputc(10,param_1);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "ar_directory_doer",
        "print_descr"
      ],
      "called": [
        "ctime",
        "sprintf",
        "print_arelt_descr.cold"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_fatal": {
      "entrypoint": "0x00107c10",
      "current_name": "bfd_fatal",
      "code": "\nvoid bfd_fatal(void)\n\n{\n  bfd_nonfatal();\n                    \n  xexit(1);\n}\n\n",
      "renaming": {},
      "calling": [
        "write_archive.cold",
        "write_archive",
        "main",
        "replace_members.cold",
        "open_inarch"
      ],
      "called": [
        "xexit",
        "bfd_nonfatal"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_nonfatal": {
      "entrypoint": "0x00107c20",
      "current_name": "bfd_nonfatal",
      "code": "\n\n\nvoid bfd_nonfatal(long param_1)\n\n{\n  int iVar1;\n  undefined8 uVar2;\n  undefined8 in_R10;\n  \n  iVar1 \u003d bfd_get_error();\n  if (iVar1 \u003d\u003d 0) {\n    uVar2 \u003d dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    uVar2 \u003d bfd_errmsg(iVar1);\n  }\n  fflush(_stdout);\n  if (param_1 !\u003d 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name,param_1,uVar2,in_R10);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,uVar2,in_R10);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "bfd_fatal",
        "main",
        "open_inarch"
      ],
      "called": [
        "bfd_get_error",
        "bfd_errmsg",
        "bfd_nonfatal.cold"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "set_times": {
      "entrypoint": "0x00107c80",
      "current_name": "set_times",
      "code": "\nvoid set_times(char *param_1,long param_2)\n\n{\n  int iVar1;\n  int *piVar2;\n  char *pcVar3;\n  undefined8 uVar4;\n  undefined4 local_38;\n  undefined4 uStack_34;\n  undefined4 uStack_30;\n  undefined4 uStack_2c;\n  undefined4 local_28;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  local_28 \u003d *(undefined4 *)(param_2 + 0x58);\n  uStack_24 \u003d *(undefined4 *)(param_2 + 0x5c);\n  uStack_20 \u003d *(undefined4 *)(param_2 + 0x60);\n  uStack_1c \u003d *(undefined4 *)(param_2 + 100);\n  local_38 \u003d *(undefined4 *)(param_2 + 0x48);\n  uStack_34 \u003d *(undefined4 *)(param_2 + 0x4c);\n  uStack_30 \u003d *(undefined4 *)(param_2 + 0x50);\n  uStack_2c \u003d *(undefined4 *)(param_2 + 0x54);\n  iVar1 \u003d utimensat(-100,param_1,(timespec *)\u0026local_38,0);\n  if (iVar1 !\u003d 0) {\n    piVar2 \u003d __errno_location();\n    pcVar3 \u003d strerror(*piVar2);\n    uVar4 \u003d dcgettext(0,\"%s: cannot set time: %s\",5);\n    non_fatal(uVar4,param_1,pcVar3);\n  }\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "extract_file.cold"
      ],
      "called": [
        "set_times.cold",
        "utimensat"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "xatexit_cleanup": {
      "entrypoint": "0x00107cc0",
      "current_name": "xatexit_cleanup",
      "code": "\nvoid xatexit_cleanup(void)\n\n{\n  long lVar1;\n  long lVar2;\n  long lVar3;\n  long *plVar4;\n  uint uVar5;\n  \n  plVar4 \u003d (long *)xatexit_head;\n  if (xatexit_head !\u003d (undefined *)0x0) {\n    do {\n      uVar5 \u003d *(int *)(plVar4 + 1) - 1;\n      if (-1 \u003c (int)uVar5) {\n        lVar1 \u003d (long)(int)uVar5;\n        uVar5 \u003d uVar5 \u0026 7;\n        (*(code *)plVar4[lVar1 + 2])();\n        lVar2 \u003d lVar1 + -1;\n        if (-1 \u003c (int)lVar2) {\n          lVar3 \u003d lVar2;\n          if (uVar5 !\u003d 0) {\n            if (uVar5 !\u003d 1) {\n              if (uVar5 !\u003d 2) {\n                if (uVar5 !\u003d 3) {\n                  if (uVar5 !\u003d 4) {\n                    if (uVar5 !\u003d 5) {\n                      if (uVar5 !\u003d 6) {\n                        (*(code *)plVar4[lVar1 + 1])();\n                        lVar2 \u003d lVar1 + -2;\n                      }\n                      (*(code *)plVar4[lVar2 + 2])();\n                      lVar2 \u003d lVar2 + -1;\n                    }\n                    (*(code *)plVar4[lVar2 + 2])();\n                    lVar2 \u003d lVar2 + -1;\n                  }\n                  (*(code *)plVar4[lVar2 + 2])();\n                  lVar2 \u003d lVar2 + -1;\n                }\n                (*(code *)plVar4[lVar2 + 2])();\n                lVar2 \u003d lVar2 + -1;\n              }\n              (*(code *)plVar4[lVar2 + 2])();\n              lVar2 \u003d lVar2 + -1;\n            }\n            (*(code *)plVar4[lVar2 + 2])();\n            lVar3 \u003d lVar2 + -1;\n            if ((int)(lVar2 + -1) \u003c 0) goto LAB_00107d96;\n          }\n          do {\n            (*(code *)plVar4[lVar3 + 2])();\n            lVar1 \u003d lVar3 + -1;\n            (*(code *)plVar4[lVar3 + 1])();\n            (*(code *)plVar4[lVar3])();\n            (*(code *)plVar4[lVar1])();\n            (*(code *)plVar4[lVar3 + -2])();\n            (*(code *)plVar4[lVar3 + -3])();\n            (*(code *)plVar4[lVar3 + -4])();\n            (*(code *)plVar4[lVar3 + -5])();\n            lVar3 \u003d lVar3 + -8;\n          } while (-1 \u003c (int)lVar1 + -7);\n        }\n      }\nLAB_00107d96:\n      plVar4 \u003d (long *)*plVar4;\n    } while (plVar4 !\u003d (long *)0x0);\n  }\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "_fini": {
      "entrypoint": "0x00107da8",
      "current_name": "_fini",
      "code": "\nvoid _fini(void)\n\n{\n  return;\n}\n\n",
      "renaming": {},
      "calling": [],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "__libc_start_main": {
      "entrypoint": "0x0010e018",
      "current_name": "__libc_start_main",
      "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "_start"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    }
  },
  "layers": [],
  "locked_functions": [],
  "used_tokens": 0
}