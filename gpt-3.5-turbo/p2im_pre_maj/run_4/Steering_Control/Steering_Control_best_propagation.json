{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "set_flag_if_not_set_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 setFlagIfNotSet_000800f4(undefined4 input)\n\n{\n  if ((char)DAT_200708a0 == '\\0') {\n    DAT_200708a0._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "set_flag_if_not_set_000800f4",
                "param_1": "input"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_data_00080164",
            "code": "\nvoid initializeData_00080164(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  FUNC_000806f8(&DAT_200708e8,0x5a);\n  FUNC_000806f8(&DAT_200708d4,0x5a,param3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_data_00080164",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "setup",
                "loop"
            ],
            "called": [
                "FUN_000806f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801e0": {
            "entrypoint": "0x000801e0",
            "current_name": "initialize_and_attach_peripherals_000801e0",
            "code": "\nundefined8 initialize_and_attach_peripherals_000801e0(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  initialize_peripheral_000813dc(&DAT_20070be8,0xe100,param_3,param_4,param_4);\n  configurePinMode(0xd,1);\n  configurePinMode(6,1);\n  configurePinMode(0x39,0);\n  configurePinMode(4,0);\n  configurePinMode(3,0);\n  configurePinMode(2,0);\n  attachInterrupt(&DAT_200708d4,5);\n  attachInterrupt(&DAT_200708e8,6);\n  moveStraightAndStop();\n  delayMilliseconds(1000);\n  if (DAT_200708bc == 0) {\n    triggerSoftwareInterrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000801e0": "initialize_and_attach_peripherals_000801e0",
                "pinMode": "configurePinMode",
                "attach": "attachInterrupt",
                "straightAndStop": "moveStraightAndStop",
                "delay": "delayMilliseconds",
                "software_interrupt": "triggerSoftwareInterrupt"
            },
            "calling": [
                "main"
            ],
            "called": [
                "pinMode",
                "attach",
                "straightAndStop",
                "delay",
                "FUN_000813dc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080250": {
            "entrypoint": "0x00080250",
            "current_name": "control_mode_switch_00080250",
            "code": "\nvoid controlModeSwitch_00080250(void)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  undefined *puVar3;\n  undefined auStack_1c [12];\n  \n  DAT_200708c0 = getSensorReading(4,1,20000);\n  pause(10);\n  DAT_200708c4 = DAT_200708c4 ^ 1;\n  setOutputPin(0xd);\n  if (DAT_200708c0 < 0x641) {\n    if (DAT_200708c0 - 0x385U < 299) {\n      if (DAT_200708eb != '\\0') {\n        stopMoving();\n        displayMessage(&DAT_20070be8,\"Entered manual control mode.\");\n        DAT_200708eb = '\\0';\n      }\n      pause(10);\n      uVar1 = getSensorReading(3,1,20000);\n      DAT_200708d8 = scaleValue(0,1000,2000,0x28,0x96);\n      DAT_200708ec = scaleValue(uVar1,1000,2000,0x28,0x96);\n      while (iVar2 = dataAvailable(&DAT_20070be8), 0 < iVar2) {\n        readData(&DAT_20070be8);\n        printData(&DAT_20070be8,DAT_200708d8,10);\n        performExternalAction(&DAT_20070be8,&DAT_00084b13);\n        printDataLine(&DAT_20070be8,DAT_200708ec,10);\n      }\n      FUNC_000806f8(&DAT_200708e8,DAT_200708ec);\n      FUNC_000806f8(&DAT_200708d4,DAT_200708d8);\n    }\n    else {\n      if (DAT_200708eb == '\\0') {\n        stopMoving();\n        displayMessage(&DAT_20070be8,\"Entered autonomous control mode.\");\n      }\n      DAT_200708eb = '\\x01';\nLAB_00080346:\n      iVar2 = dataAvailable(&DAT_20070be8);\n      if (0 < iVar2) {\n        readDataUntil(auStack_1c,&DAT_20070be8,0x2c);\n        assignValue(&DAT_200708dc,auStack_1c);\n        clearString(auStack_1c);\n        readDataUntil(auStack_1c,&DAT_20070be8,10);\n        assignValue(&DAT_200708c8,auStack_1c);\n        clearString(auStack_1c);\n        readData(&DAT_20070be8);\n        iVar2 = compareValues(&DAT_200708dc,\"steer\");\n        if (iVar2 == 0) goto LAB_0008039c;\n        uVar1 = convertToInt(&DAT_200708c8);\n        puVar3 = &DAT_200708d4;\n        goto LAB_000803b2;\n      }\n    }\n  }\n  else {\n    stopMoving();\n    displayMessage(&DAT_20070be8,\"error\");\n  }\n  return;\nLAB_0008039c:\n  iVar2 = compareValues(&DAT_200708dc,\"motor\");\n  if (iVar2 != 0) {\n    uVar1 = convertToInt(&DAT_200708c8);\n    puVar3 = &DAT_200708e8;\nLAB_000803b2:\n    FUNC_000806f8(puVar3,uVar1);\n  }\n  goto LAB_00080346;\n}\n\n",
            "renaming": {
                "FUN_00080250": "control_mode_switch_00080250",
                "pulseIn": "getSensorReading",
                "delay": "pause",
                "digitalWrite": "setOutputPin",
                "straightAndStop": "stopMoving",
                "calculate_sum_000810e8": "displayMessage",
                "map": "scaleValue",
                "available": "dataAvailable",
                "read": "readData",
                "print": "printData",
                "execute_external_function_000810c4": "performExternalAction",
                "println": "printDataLine",
                "readStringUntil": "readDataUntil",
                "operator=": "assignValue",
                "~String": "clearString",
                "equals": "compareValues",
                "toInt": "convertToInt"
            },
            "calling": [
                "main"
            ],
            "called": [
                "digitalWrite",
                "FUN_000806f8",
                "~String",
                "delay",
                "FUN_000810c4",
                "operator=",
                "pulseIn",
                "read",
                "toInt",
                "map",
                "print",
                "readStringUntil",
                "straightAndStop",
                "available",
                "FUN_000810e8",
                "equals",
                "println"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803fc": {
            "entrypoint": "0x000803fc",
            "current_name": "initialize_timer_000803fc",
            "code": "\nvoid initializeTimer_000803fc(int timerPeripheral,uint timerChannel,undefined4 peripheralClock,uint bitIndex)\n\n{\n  undefined4 reserved1;\n  undefined4 reserved2;\n  undefined8 combinedParams;\n  \n  combinedParams = CONCAT44(timerChannel,timerPeripheral);\n  pmc_enable_periph_clk(peripheralClock);\n  TC_Configure(timerPeripheral,timerChannel,0xc002);\n  TC_SetRA(timerPeripheral,timerChannel,0xa41);\n  *(int *)((bitIndex >> 5) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  *(undefined4 *)(timerPeripheral + timerChannel * 0x40 + 0x24) = 4;\n  if (2 < timerChannel) {\n    combinedParams = __assert_func(\"../source/tc.c\",0x5c,\"TC_Start\",\n                          \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\",\n                          reserved1,reserved2);\n  }\n  *(undefined4 *)((int)combinedParams + (int)((ulonglong)combinedParams >> 0x20) * 0x40) = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000803fc": "initialize_timer_000803fc",
                "param_1": "timerPeripheral",
                "param_2": "timerChannel",
                "param_3": "peripheralClock",
                "param_4": "bitIndex",
                "unaff_r4": "reserved1",
                "in_lr": "reserved2",
                "uVar1": "combinedParams"
            },
            "calling": [
                "attach"
            ],
            "called": [
                "pmc_enable_periph_clk",
                "__assert_func",
                "TC_Configure",
                "TC_SetRA"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008044c": {
            "entrypoint": "0x0008044c",
            "current_name": "update_data_0008044c",
            "code": "\nvoid updateData_0008044c(int index,int data,int offset)\n\n{\n  uint limit;\n  int offsetMultiplier;\n  \n  offset = offset * 0x40;\n  if (((&DAT_200708f1)[index] & 0x80) == 0) {\n    offsetMultiplier = index * 0xc;\n    if (((char)(&DAT_200708f1)[index] + offsetMultiplier < (int)(uint)DAT_200708f0) &&\n       ((int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + offsetMultiplier) * 8] << 0x19) < 0\n       )) {\n      digitalWrite((&DAT_200708f8)[(offsetMultiplier + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,0);\n    }\n  }\n  else {\n    *(uint *)(data + offset) = *(uint *)(data + offset) | 4;\n  }\n  limit = (uint)DAT_200708f0;\n  (&DAT_200708f1)[index] = (&DAT_200708f1)[index] + '\\x01';\n  offsetMultiplier = index * 0xc;\n  if (((char)(&DAT_200708f1)[index] + offsetMultiplier < (int)limit) &&\n     ((char)(&DAT_200708f1)[index] < '\\f')) {\n    *(int *)(data + offset + 0x14) =\n         *(int *)(data + offset + 0x10) +\n         *(int *)(&DAT_200708fc + ((char)(&DAT_200708f1)[index] + offsetMultiplier) * 8);\n    if (-1 < (int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + offsetMultiplier) * 8] << 0x19\n                  )) {\n      return;\n    }\n    digitalWrite((&DAT_200708f8)[(offsetMultiplier + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,1);\n    return;\n  }\n  data = data + offset;\n  limit = (Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * 20000 >> 5;\n  if (limit <= *(int *)(data + 0x10) + 4U) {\n    limit = *(int *)(data + 0x10) + 4;\n  }\n  *(uint *)(data + 0x14) = limit;\n  (&DAT_200708f1)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008044c": "update_data_0008044c",
                "param_1": "index",
                "param_2": "data",
                "param_3": "offset",
                "uVar1": "limit",
                "iVar2": "offsetMultiplier"
            },
            "calling": [],
            "called": [
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805a8": {
            "entrypoint": "0x000805a8",
            "current_name": "update_value_range_000805a8",
            "code": "\nvoid updateValueRange_000805a8(byte *outputArray)\n\n{\n  char newCharacter;\n  uint currentValue;\n  \n  currentValue = (uint)DAT_200708f0;\n  if (currentValue < 0x3c) {\n    newCharacter = DAT_200708f0 + 1;\n    *outputArray = DAT_200708f0;\n    DAT_200708f0 = newCharacter;\n    *(uint *)(&DAT_200708fc + currentValue * 8) =\n         (someArray[6].r_offset / 1000000) * 0x5dc >> 5;\n    return;\n  }\n  *outputArray = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805a8": "update_value_range_000805a8",
                "param_1": "outputArray",
                "cVar1": "newCharacter",
                "uVar2": "currentValue",
                "Elf32_Rel_ARRAY_20070000": "someArray"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806a0": {
            "entrypoint": "0x000806a0",
            "current_name": "set_pin_mode_000806a0",
            "code": "\nbyte setPinMode_000806a0(byte *data,undefined4 pinNum)\n\n{\n  byte tempVar1;\n  undefined4 isrBaseAddr;\n  uint dataDivBy12;\n  undefined4 isrVectorNum;\n  int loopVar;\n  uint dataVal;\n  \n  if (0x3b < *data) goto LAB_00080660;\n  pinMode(pinNum,1,0x220,*data,0x960);\n  dataVal = (uint)*data;\n  tempVar1 = (&DAT_200708f8)[dataVal * 8];\n  data[2] = 0;\n  dataDivBy12 = dataVal / 0xc;\n  (&DAT_200708f8)[dataVal * 8] = tempVar1 & 0xc0 | (byte)pinNum & 0x3f;\n  data[1] = 0;\n  loopVar = 0;\n  do {\n    if ((int)((uint)(byte)(&DAT_200708f8)[(loopVar + dataDivBy12 * 0xc) * 8] << 0x19) < 0)\n    goto LAB_00080652;\n    loopVar = loopVar + 1;\n  } while (loopVar != 0xc);\n  if (dataDivBy12 == 0) {\n    isrBaseAddr = 0x40084000;\n    isrVectorNum = 0x1e;\nLAB_0008064c:\n    _initISR(isrBaseAddr,dataDivBy12,isrVectorNum,isrVectorNum);\n  }\n  else {\n    if (dataDivBy12 == 1) {\n      isrBaseAddr = 0x40084000;\n      isrVectorNum = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (dataDivBy12 == 2) {\n      isrBaseAddr = 0x40084000;\n      isrVectorNum = 0x20;\n      goto LAB_0008064c;\n    }\n    if (dataDivBy12 == 3) {\n      isrBaseAddr = 0x40080000;\n      dataDivBy12 = 2;\n      isrVectorNum = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (dataDivBy12 == 4) {\n      isrBaseAddr = 0x40080000;\n      dataDivBy12 = 0;\n      isrVectorNum = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  (&DAT_200708f8)[(uint)*data * 8] = (&DAT_200708f8)[(uint)*data * 8] | 0x40;\nLAB_00080660:\n  return *data;\n}\n\n",
            "renaming": {
                "FUN_000806a0": "set_pin_mode_000806a0",
                "param_1": "data",
                "param_2": "pinNum",
                "bVar1": "tempVar1",
                "uVar2": "isrBaseAddr",
                "uVar3": "dataDivBy12",
                "uVar4": "isrVectorNum",
                "iVar5": "loopVar",
                "uVar6": "dataVal"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "pinMode",
                "_initISR"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806f8": {
            "entrypoint": "0x000806f8",
            "current_name": "FUNC_000806f8",
            "code": "\nvoid FUNC_000806f8(byte *param_1,uint param_2)\n\n{\n  uint uVar1;\n  \n  if ((int)param_2 < 0x220) {\n    uVar1 = param_2;\n    if (0xb3 < (int)param_2) {\n      uVar1 = 0xb4;\n    }\n    param_2 = map(uVar1 & ~((int)uVar1 >> 0x1f),0,0xb4,(0x88 - (char)param_1[1]) * 4,\n                  (600 - (char)param_1[2]) * 4,param_2);\n  }\n  if (*param_1 < 0x3c) {\n    uVar1 = (0x88 - (char)param_1[1]) * 4;\n    if (((int)(param_2 + (0x88 - (char)param_1[1]) * -4) < 0 == SBORROW4(param_2,uVar1)) &&\n       (uVar1 = (600 - (char)param_1[2]) * 4, (int)param_2 <= (int)uVar1)) {\n      uVar1 = param_2;\n    }\n    *(uint *)(&DAT_200708fc + (uint)*param_1 * 8) =\n         (Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * (uVar1 - 2) >> 5;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000806f8": "FUNC_000806f8"
            },
            "calling": [
                "straightAndStop",
                "loop"
            ],
            "called": [
                "map"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008073a": {
            "entrypoint": "0x0008073a",
            "current_name": "FUNC_0008073a",
            "code": "\nvoid FUNC_0008073a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008073a": "FUNC_0008073a"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080748": {
            "entrypoint": "0x00080748",
            "current_name": "FUNC_00080748",
            "code": "\nvoid FUNC_00080748(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080748": "FUNC_00080748"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074a": {
            "entrypoint": "0x0008074a",
            "current_name": "FUNC_0008074a",
            "code": "\nvoid FUNC_0008074a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074a": "FUNC_0008074a"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074c": {
            "entrypoint": "0x0008074c",
            "current_name": "FUNC_0008074c",
            "code": "\nvoid FUNC_0008074c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074c": "FUNC_0008074c"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080774": {
            "entrypoint": "0x00080774",
            "current_name": "initialize_system_00080774",
            "code": "\n\n\nvoid initializeSystem_00080774(void)\n\n{\n  int loopIndex;\n  int nextIndex;\n  \n  SystemInit();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  __libc_init_array();\n  loopIndex = 0;\n  do {\n    nextIndex = loopIndex + 1;\n    digitalWrite(loopIndex,0);\n    loopIndex = nextIndex;\n  } while (nextIndex != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  PIO_Configure(0x400e0e00,1,0x300,0);\n  digitalWrite(0,1);\n  PIO_Configure(0x400e0e00,1,0xc00,0);\n  PIO_Configure(0x400e0e00,1,0x3000,0);\n  PIO_Configure(0x400e1400,2,0x30,0);\n  PIO_Configure(0x400e1000,1,0xc00,0);\n  PIO_Configure(0x400e0e00,1,3,0);\n  PIO_Configure(0x400e1000,1,0xc000,0);\n  pmc_enable_periph_clk(0x25);\n  adc_init(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  adc_configure_timing(0x400c0000,0,0x300000,1);\n  adc_configure_trigger(0x400c0000,0,0);\n  adc_disable_interrupt(0x400c0000,0xffffffff);\n  adc_disable_all_channel(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080774": "initialize_system_00080774",
                "iVar1": "loopIndex",
                "iVar2": "nextIndex"
            },
            "calling": [
                "main"
            ],
            "called": [
                "digitalWrite",
                "adc_disable_all_channel",
                "adc_init",
                "adc_disable_interrupt",
                "pmc_enable_periph_clk",
                "PIO_Configure",
                "adc_configure_timing",
                "__libc_init_array",
                "adc_configure_trigger",
                "SystemInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008089c": {
            "entrypoint": "0x0008089c",
            "current_name": "initialize_serial_connections_0008089c",
            "code": "\nvoid initializeSerialConnections_0008089c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  initializeRingBuffer(&DAT_20070c0c);\n  initializeRingBuffer(&DAT_20070b60);\n  initializeUART(&DAT_20070be8,0x400e0800,8,8,&DAT_20070c0c,&DAT_20070b60,param3);\n  initializeRingBuffer(&DAT_20070e6c);\n  initializeRingBuffer(&DAT_20070ef4);\n  initializeRingBuffer(&DAT_20070f7c);\n  initializeRingBuffer(&DAT_20070ad8);\n  initializeRingBuffer(&DAT_20070d0c);\n  initializeRingBuffer(&DAT_20070d94);\n  initializeUSART(&DAT_20070c94,0x40098000,0x11,0x11,&DAT_20070e6c,&DAT_20070ad8);\n  initializeUSART(&DAT_20070cbc,0x4009c000,0x12,0x12,&DAT_20070ef4,&DAT_20070d0c);\n  initializeUSART(&DAT_20070ce4,0x400a4000,0x14,0x14,&DAT_20070f7c,&DAT_20070d94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008089c": "initialize_serial_connections_0008089c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "RingBuffer": "initializeRingBuffer",
                "UARTClass": "initializeUART",
                "USARTClass": "initializeUSART"
            },
            "calling": [],
            "called": [
                "USARTClass",
                "UARTClass",
                "RingBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080970": {
            "entrypoint": "0x00080970",
            "current_name": "process_serial_events_00080970",
            "code": "\nvoid processSerialEvents_00080970(void)\n\n{\n  int isAvailable;\n  \n  isAvailable = available(&DAT_20070be8);\n  if (isAvailable != 0) {\n    serialEvent();\n  }\n  isAvailable = available(&DAT_20070c94);\n  if (isAvailable != 0) {\n    serialEvent1();\n  }\n  isAvailable = available(&DAT_20070cbc);\n  if (isAvailable != 0) {\n    serialEvent2();\n  }\n  isAvailable = available(&DAT_20070ce4);\n  if (isAvailable != 0) {\n    serialEvent3();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080970": "process_serial_events_00080970",
                "iVar1": "isAvailable"
            },
            "calling": [
                "main"
            ],
            "called": [
                "serialEvent3",
                "available",
                "serialEvent2",
                "serialEvent1",
                "serialEvent"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809be": {
            "entrypoint": "0x000809be",
            "current_name": "update_memory_value_000809be",
            "code": "\nvoid updateMemoryValue_000809be(int memoryAddress,undefined4 operationType,uint value)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(memoryAddress + 0x44) = value;\n  switch(operationType) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(memoryAddress + 0x70) & *(uint *)(memoryAddress + 0x70) & ~value;\n    break;\n  case 2:\n    updatedValue = *(uint *)(memoryAddress + 0x70) | value;\n    break;\n  default:\n    goto switchD_000809c4_caseD_6;\n  }\n  *(uint *)(memoryAddress + 0x70) = updatedValue;\nswitchD_000809c4_caseD_6:\n  *(uint *)(memoryAddress + 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809be": "update_memory_value_000809be",
                "param_1": "memoryAddress",
                "param_2": "operationType",
                "param_3": "value",
                "uVar1": "updatedValue"
            },
            "calling": [
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809e4": {
            "entrypoint": "0x000809e4",
            "current_name": "update_params_000809e4",
            "code": "\nvoid updateParams_000809e4(undefined4 *appliedParams,undefined4 newValue,uint flags)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(flags << 0x1f) < 0;\n  appliedParams[0x11] = newValue;\n  if (isNegative) {\n    appliedParams[0x19] = newValue;\n  }\n  if (!isNegative) {\n    appliedParams[0x18] = newValue;\n  }\n  isNegative = (flags & 10) != 0;\n  if (isNegative) {\n    appliedParams[8] = newValue;\n  }\n  if (!isNegative) {\n    appliedParams[9] = newValue;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    appliedParams[0x20] = newValue;\n  }\n  appliedParams[5] = newValue;\n  *appliedParams = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809e4": "update_params_000809e4",
                "param_1": "appliedParams",
                "param_2": "newValue",
                "param_3": "flags",
                "bVar1": "isNegative"
            },
            "calling": [
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a0a": {
            "entrypoint": "0x00080a0a",
            "current_name": "set_param_values_00080a0a",
            "code": "\nvoid setParamValues_00080a0a(undefined4 *paramArray,undefined4 paramValue,int isParam3Zero,int isParam4Zero,int isParam5Zero)\n\n{\n  paramArray[0x11] = paramValue;\n  if (isParam5Zero == 0) {\n    paramArray[0x18] = paramValue;\n  }\n  else {\n    paramArray[0x19] = paramValue;\n  }\n  if (isParam4Zero == 0) {\n    paramArray[0x15] = paramValue;\n  }\n  else {\n    paramArray[0x14] = paramValue;\n  }\n  if (isParam3Zero == 0) {\n    paramArray[0xd] = paramValue;\n  }\n  else {\n    paramArray[0xc] = paramValue;\n  }\n  paramArray[4] = paramValue;\n  *paramArray = paramValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a0a": "set_param_values_00080a0a",
                "param_1": "paramArray",
                "param_2": "paramValue",
                "param_3": "isParam3Zero",
                "param_4": "isParam4Zero",
                "param_5": "isParam5Zero"
            },
            "calling": [
                "digitalWrite",
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a30": {
            "entrypoint": "0x00080a30",
            "current_name": "configure_peripheral_00080a30",
            "code": "\nundefined4 configurePeripheral_00080a30(int deviceAddress,int peripheralType,undefined4 configValue,uint flags)\n\n{\n  bool isNegativeFlag;\n  \n  switch(peripheralType) {\n  case 1:\n  case 2:\n    setPeripheral(deviceAddress,peripheralType,configValue);\n    isNegativeFlag = (int)(flags << 0x1f) < 0;\n    *(undefined4 *)(deviceAddress + 0x44) = configValue;\n    if (isNegativeFlag) {\n      *(undefined4 *)(deviceAddress + 100) = configValue;\n    }\n    if (!isNegativeFlag) {\n      *(undefined4 *)(deviceAddress + 0x60) = configValue;\n    }\n    break;\n  case 3:\n    setInput(deviceAddress,configValue,flags,0x809e5,deviceAddress);\n    break;\n  case 4:\n  case 5:\n    setOutput(deviceAddress,configValue,peripheralType == 5,(flags << 0x1d) >> 0x1f,flags & 1,peripheralType,configValue\n                 );\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080a30": "configure_peripheral_00080a30",
                "param_1": "deviceAddress",
                "param_2": "peripheralType",
                "param_3": "configValue",
                "param_4": "flags",
                "bVar1": "isNegativeFlag",
                "PIO_SetPeripheral": "setPeripheral",
                "PIO_SetInput": "setInput",
                "PIO_SetOutput": "setOutput"
            },
            "calling": [
                "pinMode",
                "FUN_00080774"
            ],
            "called": [
                "PIO_SetOutput",
                "PIO_SetInput",
                "PIO_SetPeripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a94": {
            "entrypoint": "0x00080a94",
            "current_name": "check_bitwise_00080a94",
            "code": "\nuint checkBitwise_00080a94(int inputValue,uint maskValue)\n\n{\n  uint result;\n  \n  result = *(uint *)(inputValue + 8) & maskValue;\n  if (result != 0) {\n    if ((maskValue & *(uint *)(inputValue + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080a94": "check_bitwise_00080a94",
                "param_1": "inputValue",
                "param_2": "maskValue",
                "uVar1": "result"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "check_bit_and_set_00080aa8",
            "code": "\n\n\nundefined4 checkBitAndSet_00080aa8(uint input)\n\n{\n  uint bitMask;\n  \n  if (input < 0x2d) {\n    if (input < 0x20) {\n      bitMask = 1 << (input & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (input - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "check_bit_and_set_00080aa8",
                "param_1": "input",
                "uVar1": "bitMask"
            },
            "calling": [
                "pinMode",
                "_initISR",
                "FUN_00080774",
                "FUN_000813dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b2c": {
            "entrypoint": "0x00080b2c",
            "current_name": "configure_tc_channel_00080b2c",
            "code": "\nvoid configureTcChannel_00080b2c(undefined4 channelIndex,uint dwChannel,char *message)\n\n{\n  int offset;\n  int address;\n  undefined8 combinedParams;\n  \n  combinedParams = CONCAT44(dwChannel,channelIndex);\n  if (2 < dwChannel) {\n    message = \"TC_Configure\";\n    combinedParams = __assert_func(\"../source/tc.c\",0x40,\"TC_Configure\",\n                          \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  offset = (int)((ulonglong)combinedParams >> 0x20) * 0x40;\n  address = (int)combinedParams + offset;\n  *(undefined4 *)((int)combinedParams + offset) = 2;\n  *(undefined4 *)(address + 0x28) = 0xffffffff;\n  *(char **)(address + 4) = message;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b2c": "configure_tc_channel_00080b2c",
                "param_1": "channelIndex",
                "param_2": "dwChannel",
                "param_3": "message",
                "iVar1": "offset",
                "iVar2": "address",
                "uVar3": "combinedParams"
            },
            "calling": [
                "_initISR"
            ],
            "called": [
                "__assert_func"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b90": {
            "entrypoint": "0x00080b90",
            "current_name": "set_param_value_00080b90",
            "code": "\nvoid set_param_value_00080b90(int base_address,int offset,undefined4 value)\n\n{\n  *(undefined4 *)(base_address + offset * 0x40 + 0x14) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b90": "set_param_value_00080b90",
                "param_1": "base_address",
                "param_2": "offset",
                "param_3": "value"
            },
            "calling": [
                "_initISR"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b98": {
            "entrypoint": "0x00080b98",
            "current_name": "initialize_memory_00080b98",
            "code": "\n\n\nvoid initializeMemory_00080b98(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  relocationTable[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b98": "initialize_memory_00080b98",
                "Elf32_Rel_ARRAY_20070000": "relocationTable"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c20": {
            "entrypoint": "0x00080c20",
            "current_name": "initialize_binary_data_00080c20",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080c6a) */\n\n\nvoid initializeBinaryData_00080c20(void)\n\n{\n  int offset;\n  undefined4 *currentAddress;\n  \n  for (offset = 0; (undefined4 *)((int)binaryDataAddress + offset) < &DAT_200708a0\n      ; offset = offset + 4) {\n    *(undefined4 *)((int)binaryDataAddress + offset) =\n         *(undefined4 *)(&DAT_00085878 + offset);\n  }\n  for (currentAddress = &DAT_200708a0; currentAddress < (undefined4 *)0x20071248; currentAddress = currentAddress + 1) {\n    *currentAddress = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  main();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080c20": "initialize_binary_data_00080c20",
                "iVar1": "offset",
                "puVar2": "currentAddress",
                "&Elf32_Rel_ARRAY_20070000[0].r_offset": "binaryDataAddress"
            },
            "calling": [],
            "called": [
                "main"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c98": {
            "entrypoint": "0x00080c98",
            "current_name": "calculate_offset_00080c98",
            "code": "\nundefined4 calculateOffset_00080c98(undefined4 *output,uint totalSize,int numBlocks,int blockSize)\n\n{\n  uint numIterations;\n  uint index;\n  uint offsets [16];\n  \n  offsets[0] = 0;\n  offsets[1] = 8;\n  offsets[2] = 0x10;\n  offsets[3] = 0x18;\n  offsets[4] = 0x40;\n  offsets[5] = 0x50;\n  offsets[6] = 0x60;\n  offsets[7] = 0x70;\n  offsets[8] = 0x200;\n  offsets[9] = 0x240;\n  offsets[10] = 0x280;\n  offsets[11] = 0x2c0;\n  offsets[12] = 0x300;\n  offsets[13] = 0x340;\n  offsets[14] = 0x380;\n  offsets[15] = 0x3c0;\n  *output = 1;\n  output[1] = 0;\n  output[0x48] = 0x202;\n  output[0x41] = 0;\n  output[0x45] = 0;\n  numIterations = totalSize / (uint)(numBlocks * 2);\n  if (totalSize == numBlocks * 2 * numIterations) {\n    numIterations = numIterations - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(blockSize * (int)(((ulonglong)totalSize / (ulonglong)((numIterations + 1) * 2)) / 1000000)) <=\n        offsets[index]) {\n      output[1] = (index & 0xf) << 0x10 | (numIterations & 0xff) << 8 | output[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080c98": "calculate_offset_00080c98",
                "param_1": "output",
                "param_2": "totalSize",
                "param_3": "numBlocks",
                "param_4": "blockSize",
                "local_58": "offsets",
                "uVar1": "numIterations",
                "uVar2": "index"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d30": {
            "entrypoint": "0x00080d30",
            "current_name": "update_value_with_flags_00080d30",
            "code": "\nvoid updateValueWithFlags_00080d30(int dataAddress,uint value,uint flag)\n\n{\n  *(uint *)(dataAddress + 4) = value | *(uint *)(dataAddress + 4) | (flag & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d30": "update_value_with_flags_00080d30",
                "param_1": "dataAddress",
                "param_2": "value",
                "param_3": "flag"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d3e": {
            "entrypoint": "0x00080d3e",
            "current_name": "update_flags_00080d3e",
            "code": "\nvoid updateFlags_00080d3e(int pFlags,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(pFlags + 4) =\n       value2 | *(uint *)(pFlags + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d3e": "update_flags_00080d3e",
                "param_1": "pFlags",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d58": {
            "entrypoint": "0x00080d58",
            "current_name": "set_bit_00080d58",
            "code": "\nvoid setBit_00080d58(int baseAddress,uint bitPosition)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d58": "set_bit_00080d58",
                "param_1": "baseAddress",
                "param_2": "bitPosition"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d62": {
            "entrypoint": "0x00080d62",
            "current_name": "initialize_param_00080d62",
            "code": "\nvoid initializeParam_00080d62(int param)\n\n{\n  *(undefined4 *)(param + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d62": "initialize_param_00080d62",
                "param_1": "param"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d6a": {
            "entrypoint": "0x00080d6a",
            "current_name": "set_param_value_00080d6a",
            "code": "\nvoid set_param_value_00080d6a(int object_address,undefined4 new_value)\n\n{\n  *(undefined4 *)(object_address + 0x28) = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d6a": "set_param_value_00080d6a",
                "param_1": "object_address",
                "param_2": "new_value"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e80": {
            "entrypoint": "0x00080e80",
            "current_name": "initialize_system_00080e80",
            "code": "\nundefined4 initializeSystem_00080e80(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080e80": "initialize_system_00080e80"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e88": {
            "entrypoint": "0x00080e88",
            "current_name": "add_param_to_var_return_00080e88",
            "code": "\nint addParamToVarReturn_00080e88(int input)\n\n{\n  int previousValue;\n  \n  if (DAT_20071208 == 0) {\n    DAT_20071208 = 0x20071248;\n  }\n  previousValue = DAT_20071208;\n  DAT_20071208 = input + DAT_20071208;\n  return previousValue;\n}\n\n",
            "renaming": {
                "FUN_00080e88": "add_param_to_var_return_00080e88",
                "param_1": "input",
                "iVar1": "previousValue"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eaa": {
            "entrypoint": "0x00080eaa",
            "current_name": "get_error_code_00080eaa",
            "code": "\nundefined4 get_error_code_00080eaa(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080eaa": "get_error_code_00080eaa"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eb0": {
            "entrypoint": "0x00080eb0",
            "current_name": "set_memory_value_00080eb0",
            "code": "\nundefined4 setMemoryValue_00080eb0(undefined4 value,int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080eb0": "set_memory_value_00080eb0",
                "param_1": "value",
                "param_2": "memoryAddress"
            },
            "calling": [
                "_fstat_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eba": {
            "entrypoint": "0x00080eba",
            "current_name": "determine_success_00080eba",
            "code": "\nbool determineSuccess_00080eba(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080eba": "determine_success_00080eba",
                "undefined4": "bool"
            },
            "calling": [
                "_isatty_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ebe": {
            "entrypoint": "0x00080ebe",
            "current_name": "get_return_value_00080ebe",
            "code": "\nundefined4 getReturnValue_00080ebe(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ebe": "get_return_value_00080ebe"
            },
            "calling": [
                "_lseek_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec2": {
            "entrypoint": "0x00080ec2",
            "current_name": "initialize_00080ec2",
            "code": "\nundefined4 initialize_00080ec2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ec2": "initialize_00080ec2"
            },
            "calling": [
                "_read_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec8": {
            "entrypoint": "0x00080ec8",
            "current_name": "copy_bytes_00080ec8",
            "code": "\n\n\nuint copyBytes_00080ec8(undefined4 dest,int src,uint length)\n\n{\n  int i;\n  \n  for (i = 0; i < (int)length; i = i + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(src + i);\n  }\n  return length & ~((int)length >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_00080ec8": "copy_bytes_00080ec8",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "iVar1": "i"
            },
            "calling": [
                "__swrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eec": {
            "entrypoint": "0x00080eec",
            "current_name": "exit_with_status_00080eec",
            "code": "\nvoid exitWithStatus_00080eec(undefined4 status,undefined4 unused_param,undefined4 unused_param_2,undefined4 unused_param_3)\n\n{\n  iprintf(\"Exiting with status %d.\\n\",status,unused_param_2,unused_param_3,unused_param_3);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "param_1": "status",
                "param_2": "unused_param",
                "param_3": "unused_param_2",
                "param_4": "unused_param_3"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080efc": {
            "entrypoint": "0x00080efc",
            "current_name": "FUNC_00080efc",
            "code": "\nvoid FUNC_00080efc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080efc": "FUNC_00080efc"
            },
            "calling": [
                "raise"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080efe": {
            "entrypoint": "0x00080efe",
            "current_name": "get_return_value_00080efe",
            "code": "\nundefined4 getReturnValue_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080efe": "get_return_value_00080efe"
            },
            "calling": [
                "_getpid_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f04": {
            "entrypoint": "0x00080f04",
            "current_name": "FUN_00080f04",
            "code": "\nundefined4 GetTickCount(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {},
            "calling": [
                "timedRead"
            ],
            "called": [
                "GetTickCount"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f08": {
            "entrypoint": "0x00080f08",
            "current_name": "FUNC_00080f08",
            "code": "\nvoid FUNC_00080f08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f08": "FUNC_00080f08"
            },
            "calling": [
                "setup",
                "loop",
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080f0c": {
            "entrypoint": "0x00080f0c",
            "current_name": "initialize_peripheral_00080f0c",
            "code": "\n\n\nint initializePeripheral_00080f0c(int channelIndex,int configurationMode)\n\n{\n  int returnValue;\n  uint channelMask;\n  undefined4 configuration;\n  uint pinMask;\n  byte mode;\n  byte pinConfig;\n  int configIndex;\n  int pioConfig;\n  \n  returnValue = channelIndex;\n  if ((&DAT_00084b50)[channelIndex * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[channelIndex] & 0xf) == 4) {\n      returnValue = adc_disable_channel(0x400c0000,(&DAT_00084b5d)[channelIndex * 0x1c]);\n    }\n    pinConfig = (&DAT_20070e1c)[channelIndex];\n    mode = pinConfig & 0xf;\n    if ((mode < 3) && (pinConfig != 0)) {\n      if (mode == 2) {\n        if (configurationMode == 0) {\n          return returnValue;\n        }\n      }\n      else if (mode == 1) {\n        if (configurationMode == 2) {\n          return returnValue;\n        }\n      }\n      else if (mode == 3) {\n        if (configurationMode == 1) {\n          return returnValue;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (configurationMode != 1) {\nLAB_00080f68:\n      if (configurationMode == 0) {\n        returnValue = channelIndex * 0x1c;\n        enablePeripheralClock(*(undefined4 *)(&DAT_00084b4c + returnValue));\n        returnValue = configurePIO(*(undefined4 *)(&DAT_00084b44 + returnValue),3,\n                              *(undefined4 *)(&DAT_00084b48 + returnValue),0);\n        pinConfig = (&DAT_20070e1c)[channelIndex] & 0xf0 | 2;\n      }\n      else {\n        if (configurationMode != 2) {\n          return returnValue;\n        }\n        returnValue = channelIndex * 0x1c;\n        enablePeripheralClock(*(undefined4 *)(&DAT_00084b4c + returnValue));\n        returnValue = configurePIO(*(undefined4 *)(&DAT_00084b44 + returnValue),3,\n                              *(undefined4 *)(&DAT_00084b48 + returnValue),1);\n        pinConfig = (&DAT_20070e1c)[channelIndex] & 0xf0 | 1;\n      }\n      (&DAT_20070e1c)[channelIndex] = pinConfig;\n      return returnValue;\n    }\n    configIndex = channelIndex * 0x1c;\n    pioConfig = *(int *)(&DAT_00084b44 + configIndex);\n    if (pinConfig >> 4 == 0) {\n      configuration = 4;\n    }\n    else {\n      configuration = 5;\n    }\n    returnValue = configurePIO(pioConfig,configuration,*(undefined4 *)(&DAT_00084b48 + configIndex),\n                          *(undefined4 *)(&DAT_00084b54 + configIndex));\n    (&DAT_20070e1c)[channelIndex] = (&DAT_20070e1c)[channelIndex] & 0xf0 | 3;\n    if (*(int *)(pioConfig + 0x18) == -1) {\n      channelMask = *(uint *)(&DAT_00084b4c + configIndex);\n      if (0x2c < channelMask) {\n        return 1;\n      }\n      if (channelMask < 0x20) {\n        channelMask = 1 << (channelMask & 0xff);\n        pinMask = _DAT_400e0618 & channelMask;\n        if (pinMask == channelMask) {\n          _DAT_400e0614 = pinMask;\n        }\n      }\n      else {\n        channelMask = 1 << (channelMask - 0x20 & 0xff);\n        pinMask = _DAT_400e0708 & channelMask;\n        if (pinMask == channelMask) {\n          _DAT_400e0704 = pinMask;\n        }\n      }\n      return 0;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00080f0c": "initialize_peripheral_00080f0c",
                "param_1": "channelIndex",
                "param_2": "configurationMode",
                "iVar1": "returnValue",
                "uVar2": "channelMask",
                "uVar3": "configuration",
                "uVar4": "pinMask",
                "bVar5": "mode",
                "bVar6": "pinConfig",
                "iVar7": "configIndex",
                "iVar8": "pioConfig",
                "pmc_enable_periph_clk": "enablePeripheralClock",
                "PIO_Configure": "configurePIO"
            },
            "calling": [
                "attach",
                "digitalWrite",
                "setup"
            ],
            "called": [
                "pmc_enable_periph_clk",
                "PIO_Configure",
                "adc_disable_channel"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081014": {
            "entrypoint": "0x00081014",
            "current_name": "set_pin_mode_and_update_output_data_00081014",
            "code": "\nvoid setPinModeAndUpdateOutputData_00081014(int pinNumber,int value,undefined4 param)\n\n{\n  int outputDataStatus;\n  undefined4 outputValue;\n  int pioAddress;\n  \n  if ((&DAT_00084b50)[pinNumber * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[pinNumber] & 0xf) == 5) {\n      pinMode(pinNumber,1,param,5,pinNumber,value,param);\n    }\n    (&DAT_20070e1c)[pinNumber] = (&DAT_20070e1c)[pinNumber] & 0xf | (byte)(value << 4);\n    pioAddress = *(int *)(&DAT_00084b44 + pinNumber * 0x1c);\n    outputValue = *(undefined4 *)(&DAT_00084b48 + pinNumber * 0x1c);\n    outputDataStatus = PIO_GetOutputDataStatus(pioAddress,outputValue);\n    if (outputDataStatus == 0) {\n      if (value != 0) {\n        *(undefined4 *)(pioAddress + 100) = outputValue;\n        return;\n      }\n      *(undefined4 *)(pioAddress + 0x60) = outputValue;\n      return;\n    }\n    PIO_SetOutput(pioAddress,outputValue,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081014": "set_pin_mode_and_update_output_data_00081014",
                "param_1": "pinNumber",
                "param_2": "value",
                "param_3": "param",
                "iVar1": "outputDataStatus",
                "uVar2": "outputValue",
                "iVar3": "pioAddress"
            },
            "calling": [
                "Servo_Handler",
                "loop",
                "FUN_00080774"
            ],
            "called": [
                "PIO_SetOutput",
                "pinMode",
                "PIO_GetOutputDataStatus"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810a6": {
            "entrypoint": "0x000810a6",
            "current_name": "call_external_function_000810a6",
            "code": "\nvoid callExternalFunction_000810a6(int *functionPtr,int string,undefined4 param1,undefined4 param2)\n\n{\n  undefined4 stringLength;\n  \n  if (string != 0) {\n    stringLength = strlen(string);\n    (**(code **)(*functionPtr + 4))(functionPtr,string,stringLength,*(code **)(*functionPtr + 4),param2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810a6": "call_external_function_000810a6",
                "param_1": "functionPtr",
                "param_2": "string",
                "param_3": "param1",
                "param_4": "param2",
                "uVar1": "stringLength"
            },
            "calling": [
                "FUN_000810d8",
                "printNumber",
                "FUN_000810c4",
                "FUN_000810e8"
            ],
            "called": [
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810c4": {
            "entrypoint": "0x000810c4",
            "current_name": "execute_external_function_000810c4",
            "code": "\nvoid executeExternalFunction_000810c4(void)\n\n{\n  callExternalFunction();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810c4": "execute_external_function_000810c4",
                "call_external_function_000810a6": "callExternalFunction"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810cc": {
            "entrypoint": "0x000810cc",
            "current_name": "execute_function_000810cc",
            "code": "\nvoid executeFunction_000810cc(undefined4 *functionPointer)\n\n{\n  (**(code **)*functionPointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810cc": "execute_function_000810cc",
                "param_1": "functionPointer"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810d8": {
            "entrypoint": "0x000810d8",
            "current_name": "call_external_function_000810d8",
            "code": "\nvoid callExternalFunction_000810d8(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  call_external_function_000810a6(arg1,&DAT_00085635,arg3,arg4,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810d8": "call_external_function_000810d8",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [
                "FUN_000810e8",
                "println"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810e8": {
            "entrypoint": "0x000810e8",
            "current_name": "calculate_sum_000810e8",
            "code": "\nint calculateSum_000810e8(undefined4 input)\n\n{\n  int externalResult1;\n  int externalResult2;\n  \n  externalResult1 = call_external_function_000810a6();\n  externalResult2 = call_external_function_000810d8(input);\n  return externalResult2 + externalResult1;\n}\n\n",
            "renaming": {
                "FUN_000810e8": "calculate_sum_000810e8",
                "param_1": "input",
                "iVar1": "externalResult1",
                "iVar2": "externalResult2"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810fc": {
            "entrypoint": "0x000810fc",
            "current_name": "convert_to_base_000810fc",
            "code": "\nvoid convertToBase_000810fc(undefined4 base,uint number,uint baseOD)\n\n{\n  char *result;\n  uint quotient;\n  char *currentDigit;\n  char convertedDigit;\n  uint remainder;\n  char convertedNumber [5];\n  \n  convertedNumber[1] = 0;\n  if (baseOD < 2) {\n    baseOD = 10;\n  }\n  result = convertedNumber;\n  do {\n    currentDigit = result;\n    quotient = number / baseOD;\n    remainder = number - baseOD * quotient & 0xff;\n    convertedDigit = (char)remainder;\n    if (remainder < 10) {\n      convertedDigit = convertedDigit + '0';\n    }\n    else {\n      convertedDigit = convertedDigit + '7';\n    }\n    *currentDigit = convertedDigit;\n    number = quotient;\n    result = currentDigit + -1;\n  } while (quotient != 0);\n  call_external_function_000810a6(base,currentDigit);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810fc": "convert_to_base_000810fc",
                "param_1": "base",
                "param_2": "number",
                "param_3": "baseOD",
                "pcVar1": "result",
                "uVar2": "quotient",
                "pcVar3": "currentDigit",
                "cVar4": "convertedDigit",
                "uVar5": "remainder",
                "local_15": "convertedNumber"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008113a": {
            "entrypoint": "0x0008113a",
            "current_name": "print_number_or_execute_function_0008113a",
            "code": "\nint printNumberOrExecuteFunction_0008113a(undefined4 *functionPointer,uint number,uint base,undefined4 param4)\n\n{\n  int result;\n  int printResult;\n  \n  if (base == 0) {\n    result = (**(code **)*functionPointer)(functionPointer,number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)number < 0) {\n      result = execute_function_000810cc(functionPointer,0x2d);\n      printResult = printNumber(functionPointer,-number,10);\n      return printResult + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = printNumber(functionPointer,number,base,param4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008113a": "print_number_or_execute_function_0008113a",
                "param_1": "functionPointer",
                "param_2": "number",
                "param_3": "base",
                "param_4": "param4",
                "iVar1": "result",
                "iVar2": "printResult"
            },
            "calling": [
                "print",
                "println"
            ],
            "called": [
                "printNumber",
                "FUN_000810cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081176": {
            "entrypoint": "0x00081176",
            "current_name": "FUN_00081176",
            "code": "\nint thunk_print_number_or_execute_function_0008113a(undefined4 *param_1,uint param_2,uint param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  if (param_3 == 0) {\n    iVar1 = (**(code **)*param_1)(param_1,param_2 & 0xff);\n    return iVar1;\n  }\n  if (param_3 == 10) {\n    param_3 = 10;\n    if ((int)param_2 < 0) {\n      iVar1 = execute_function_000810cc(param_1,0x2d);\n      iVar2 = printNumber(param_1,-param_2,10);\n      return iVar2 + iVar1;\n    }\n  }\n  else {\n    param_3 = param_3 & 0xff;\n  }\n  iVar1 = printNumber(param_1,param_2,param_3,param_4);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "loop"
            ],
            "called": [
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008117a": {
            "entrypoint": "0x0008117a",
            "current_name": "calculate_sum_0008117a",
            "code": "\nint calculate_sum_0008117a(undefined4 input_value)\n\n{\n  int result_1;\n  int result_2;\n  \n  result_1 = print_number_or_execute_function_0008113a();\n  result_2 = call_external_function_000810d8(input_value);\n  return result_2 + result_1;\n}\n\n",
            "renaming": {
                "FUN_0008117a": "calculate_sum_0008117a",
                "param_1": "input_value",
                "iVar1": "result_1",
                "iVar2": "result_2"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081190": {
            "entrypoint": "0x00081190",
            "current_name": "execute_if_info_valid_00081190",
            "code": "\nvoid execute_if_info_valid_00081190(void)\n\n{\n  if ((link_info != 0xffffffff) &&\n     (link_info = link_info - 1,\n     link_info == 0)) {\n    (*(function_pointer *)((int)&first_offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081190": "execute_if_info_valid_00081190",
                "Elf32_Rel_ARRAY_20070000[6].r_info": "link_info",
                "Elf32_Rel_ARRAY_20070000[0].r_offset": "first_offset",
                "code": "function_pointer"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b0": {
            "entrypoint": "0x000811b0",
            "current_name": "initialize_memory_000811b0",
            "code": "\nint initializeMemory_000811b0(int buffer)\n\n{\n  clearMemory(buffer,0,0x80);\n  *(undefined4 *)(buffer + 0x80) = 0;\n  *(undefined4 *)(buffer + 0x84) = 0;\n  return buffer;\n}\n\n",
            "renaming": {
                "FUN_000811b0": "initialize_memory_000811b0",
                "param_1": "buffer",
                "memset": "clearMemory"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ca": {
            "entrypoint": "0x000811ca",
            "current_name": "update_parameter_000811ca",
            "code": "\nvoid updateParameter_000811ca(int baseAddress,undefined newValue)\n\n{\n  uint currentIndex;\n  \n  currentIndex = *(int *)(baseAddress + 0x80) + 1U & 0x7f;\n  if (currentIndex != *(uint *)(baseAddress + 0x84)) {\n    *(undefined *)(baseAddress + *(int *)(baseAddress + 0x80)) = newValue;\n    *(uint *)(baseAddress + 0x80) = currentIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000811ca": "update_parameter_000811ca",
                "param_1": "baseAddress",
                "param_2": "newValue",
                "uVar1": "currentIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811e8": {
            "entrypoint": "0x000811e8",
            "current_name": "wait_for_time_elapsed_000811e8",
            "code": "\nint waitForTimeElapsed_000811e8(int *parameterArray)\n\n{\n  int returnValue;\n  \n  returnValue = getCurrentTime();\n  startTime = returnValue;\n  do {\n    returnValue = (**(code **)(*parameterArray + 0xc))(parameterArray);\n    if (-1 < returnValue) {\n      return returnValue;\n    }\n    returnValue = getCurrentTime();\n  } while ((uint)(returnValue - startTime) < (uint)parameterArray[2]);\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_000811e8": "wait_for_time_elapsed_000811e8",
                "param_1": "parameterArray",
                "iVar1": "returnValue",
                "millis": "getCurrentTime",
                "param_1[3]": "startTime"
            },
            "calling": [
                "readStringUntil"
            ],
            "called": [
                "millis"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081214": {
            "entrypoint": "0x00081214",
            "current_name": "read_and_concatenate_00081214",
            "code": "\nvoid readAndConcatenate_00081214(undefined4 outputBuffer,undefined4 inputStream,uint endByte)\n\n{\n  uint readByte;\n  \n  initializeOutputBuffer(outputBuffer,&DAT_00085637);\n  while ((readByte = readByteFromStream(inputStream), -1 < (int)readByte && (readByte != endByte))) {\n    appendByteToBuffer(outputBuffer,readByte & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081214": "read_and_concatenate_00081214",
                "param_1": "outputBuffer",
                "param_2": "inputStream",
                "param_3": "endByte",
                "uVar1": "readByte",
                "String": "initializeOutputBuffer",
                "timedRead": "readByteFromStream",
                "concat": "appendByteToBuffer"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "String",
                "timedRead",
                "concat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081248": {
            "entrypoint": "0x00081248",
            "current_name": "calculate_difference_00081248",
            "code": "\nuint calculateDifference_00081248(int inputValue)\n\n{\n  return *(int *)(*(int *)(inputValue + 0x10) + 0x80) - *(int *)(*(int *)(inputValue + 0x10) + 0x84) bitwiseAnd\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_00081248": "calculate_difference_00081248",
                "param_1": "inputValue",
                "&": "bitwiseAnd"
            },
            "calling": [
                "serialEventRun",
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081276": {
            "entrypoint": "0x00081276",
            "current_name": "get_byte_from_buffer_00081276",
            "code": "\nuint getByteFromBuffer_00081276(int bufferAddress)\n\n{\n  byte byteVal;\n  int bufferPtr;\n  \n  bufferPtr = *(int *)(bufferAddress + 0x10);\n  if (*(int *)(bufferPtr + 0x80) != *(int *)(bufferPtr + 0x84)) {\n    byteVal = *(byte *)(bufferPtr + *(int *)(bufferPtr + 0x84));\n    *(uint *)(bufferPtr + 0x84) = *(int *)(bufferPtr + 0x84) + 1U & 0x7f;\n    return (uint)byteVal;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081276": "get_byte_from_buffer_00081276",
                "param_1": "bufferAddress",
                "iVar2": "bufferPtr",
                "bVar1": "byteVal"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000812b8": {
            "entrypoint": "0x000812b8",
            "current_name": "process_data_000812b8",
            "code": "\nundefined4 processData_000812b8(int dataStruct,undefined4 newValue)\n\n{\n  int ptrData;\n  uint updatedValue;\n  \n  ptrData = *(int *)(dataStruct + 0x14);\n  if ((*(int *)(*(int *)(dataStruct + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(ptrData + 0x84) == *(int *)(ptrData + 0x80))) {\n    *(undefined4 *)(*(int *)(dataStruct + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    updatedValue = *(int *)(ptrData + 0x80) + 1U & 0x8000007f;\n    if ((int)updatedValue < 0) {\n      updatedValue = (updatedValue - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(ptrData + 0x84) == updatedValue);\n    *(char *)(ptrData + *(int *)(ptrData + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataStruct + 0x14) + 0x80) = updatedValue;\n    *(undefined4 *)(*(int *)(dataStruct + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000812b8": "process_data_000812b8",
                "param_1": "dataStruct",
                "param_2": "newValue",
                "iVar1": "ptrData",
                "uVar2": "updatedValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081348": {
            "entrypoint": "0x00081348",
            "current_name": "initialize_function_parameters_00081348",
            "code": "\nvoid initializeFunctionParameters_00081348(undefined4 *functionParams,undefined4 param2,undefined param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6)\n\n{\n  functionParams[1] = 0;\n  functionParams[2] = 1000;\n  functionParams[6] = param2;\n  *functionParams = &PTR_write_1_00085650;\n  *(undefined *)(functionParams + 7) = param3;\n  functionParams[4] = param5;\n  functionParams[8] = param4;\n  functionParams[5] = param6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081348": "initialize_function_parameters_00081348",
                "param_1": "functionParams",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6"
            },
            "calling": [
                "USARTClass",
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813dc": {
            "entrypoint": "0x000813dc",
            "current_name": "initialize_peripheral_000813dc",
            "code": "\nvoid initializePeripheral_000813dc(int parameter1,uint parameter2)\n\n{\n  int tempVariable1;\n  undefined4 *pointerVariable;\n  \n  pmc_enable_periph_clk(*(undefined4 *)(parameter1 + 0x20));\n  pointerVariable = *(undefined4 **)(parameter1 + 0x18);\n  pointerVariable[0x48] = 0x202;\n  *pointerVariable = 0xac;\n  pointerVariable[1] = 0x800;\n  pointerVariable[8] = elfArray[6].offset / parameter2 >> 4;\n  pointerVariable[3] = 0xffffffff;\n  pointerVariable[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(parameter1 + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(parameter1 + 0x1c) & 0x1f);\n  tempVariable1 = *(int *)(parameter1 + 0x10);\n  *(undefined4 *)(tempVariable1 + 0x84) = 0;\n  *(undefined4 *)(tempVariable1 + 0x80) = 0;\n  tempVariable1 = *(int *)(parameter1 + 0x14);\n  *(undefined4 *)(tempVariable1 + 0x84) = 0;\n  *(undefined4 *)(tempVariable1 + 0x80) = 0;\n  *pointerVariable = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813dc": "initialize_peripheral_000813dc",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "iVar1": "tempVariable1",
                "puVar2": "pointerVariable",
                "Elf32_Rel_ARRAY_20070000": "elfArray",
                "r_offset": "offset"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "pmc_enable_periph_clk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081438": {
            "entrypoint": "0x00081438",
            "current_name": "initialize_uart_00081438",
            "code": "\nundefined4 * initializeUART_00081438(undefined4 *outputBuffer,undefined4 inputData)\n\n{\n  UARTClass();\n  *outputBuffer = &PTR_write_1_00085680;\n  inputDataIndex = inputData;\n  return outputBuffer;\n}\n\n",
            "renaming": {
                "FUN_00081438": "initialize_uart_00081438",
                "param_1": "outputBuffer",
                "param_2": "inputData",
                "param_1[9]": "inputDataIndex"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [
                "UARTClass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008145c": {
            "entrypoint": "0x0008145c",
            "current_name": "calculate_weighted_average_0008145c",
            "code": "\nint calculateWeightedAverage_0008145c(int firstNumber,int secondNumber,int thirdNumber,int fourthNumber,int fifthNumber)\n\n{\n  result (unsignedInteger)((firstNumber - secondNumber) * (fifthNumber - fourthNumber)) / (unsignedInteger)(thirdNumber - secondNumber) + fourthNumber;\n}\n\n",
            "renaming": {
                "FUN_0008145c": "calculate_weighted_average_0008145c",
                "param_1": "firstNumber",
                "param_2": "secondNumber",
                "param_3": "thirdNumber",
                "param_4": "fourthNumber",
                "param_5": "fifthNumber",
                "uint": "unsignedInteger",
                "return": "result"
            },
            "calling": [
                "FUN_000806f8",
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081472": {
            "entrypoint": "0x00081472",
            "current_name": "free_memory_00081472",
            "code": "\nundefined4 * freeMemory_00081472(undefined4 *memoryPointer)\n\n{\n  free(*memoryPointer);\n  return memoryPointer;\n}\n\n",
            "renaming": {
                "FUN_00081472": "free_memory_00081472",
                "param_1": "memoryPointer"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081480": {
            "entrypoint": "0x00081480",
            "current_name": "reset_param_00081480",
            "code": "\nvoid resetParam_00081480(int *param)\n\n{\n  if (*param != 0) {\n    free();\n  }\n  *param = 0;\n  param[2] = 0;\n  param[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081480": "reset_param_00081480",
                "param_1": "param",
                "param_1[2]": "param[2]",
                "param_1[1]": "param[1]"
            },
            "calling": [
                "copy"
            ],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081496": {
            "entrypoint": "0x00081496",
            "current_name": "resize_and_copy_array_00081496",
            "code": "\nint resizeAndCopyArray_00081496(int *arrayPointer,int arrayLength,undefined4 elementSize,undefined4 copyLength)\n\n{\n  int newArrayPointer;\n  \n  newArrayPointer = realloc(*arrayPointer,arrayLength + 1,elementSize,copyLength,copyLength);\n  if (newArrayPointer != 0) {\n    *arrayPointer = newArrayPointer;\n    arrayPointer[1] = arrayLength;\n    newArrayPointer = 1;\n  }\n  return newArrayPointer;\n}\n\n",
            "renaming": {
                "FUN_00081496": "resize_and_copy_array_00081496",
                "param_1": "arrayPointer",
                "param_2": "arrayLength",
                "param_3": "elementSize",
                "param_4": "copyLength",
                "iVar1": "newArrayPointer"
            },
            "calling": [
                "reserve"
            ],
            "called": [
                "realloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814ae": {
            "entrypoint": "0x000814ae",
            "current_name": "check_and_update_buffer_000814ae",
            "code": "\nundefined4 checkAndUpdateBuffer_000814ae(int *buffer,uint bufferSize)\n\n{\n  int result;\n  \n  if ((*buffer == 0) || ((uint)buffer[1] < bufferSize)) {\n    result = changeBuffer(buffer);\n    if (result == 0) {\n      return 0;\n    }\n    if (buffer[2] == 0) {\n      *(undefined *)*buffer = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000814ae": "check_and_update_buffer_000814ae",
                "param_1": "buffer",
                "param_2": "bufferSize",
                "iVar1": "result"
            },
            "calling": [
                "copy",
                "FUN_00081570"
            ],
            "called": [
                "changeBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814d0": {
            "entrypoint": "0x000814d0",
            "current_name": "update_buffer_000814d0",
            "code": "\nundefined4 * updateBuffer_000814d0(undefined4 *buffer,undefined4 source,undefined4 size)\n\n{\n  int status;\n  \n  status = reserve(buffer,size);\n  if (status == 0) {\n    invalidate(buffer);\n  }\n  else {\n    buffer[2] = size;\n    strcpy(*buffer,source);\n  }\n  return buffer;\n}\n\n",
            "renaming": {
                "FUN_000814d0": "update_buffer_000814d0",
                "param_1": "buffer",
                "param_2": "source",
                "param_3": "size",
                "iVar1": "status"
            },
            "calling": [
                "String"
            ],
            "called": [
                "reserve",
                "invalidate",
                "strcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814f6": {
            "entrypoint": "0x000814f6",
            "current_name": "initialize_param_array_000814f6",
            "code": "\nundefined4 * initializeParamArray_000814f6(undefined4 *paramArray,int sourceString)\n\n{\n  undefined4 stringLength;\n  \n  *paramArray = 0;\n  paramArray[1] = 0;\n  paramArray[2] = 0;\n  if (sourceString != 0) {\n    stringLength = strlen(sourceString);\n    copy(paramArray,sourceString,stringLength);\n  }\n  return paramArray;\n}\n\n",
            "renaming": {
                "FUN_000814f6": "initialize_param_array_000814f6",
                "param_1": "paramArray",
                "param_2": "sourceString",
                "uVar1": "stringLength"
            },
            "calling": [
                "readStringUntil"
            ],
            "called": [
                "strlen",
                "copy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008151c": {
            "entrypoint": "0x0008151c",
            "current_name": "copy_and_reset_parameters_0008151c",
            "code": "\nvoid copyAndResetParameters_0008151c(int *sourceParams,int *destinationParams)\n\n{\n  if (*sourceParams != 0) {\n    if ((*destinationParams != 0) && ((uint)destinationParams[2] <= (uint)sourceParams[1])) {\n      strcpy();\n      sourceParams[2] = destinationParams[2];\n      goto LAB_00081558;\n    }\n    free();\n  }\n  *sourceParams = *destinationParams;\n  sourceParams[1] = destinationParams[1];\n  sourceParams[2] = destinationParams[2];\n  *destinationParams = 0;\n  destinationParams[1] = 0;\nLAB_00081558:\n  destinationParams[2] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008151c": "copy_and_reset_parameters_0008151c",
                "param_1": "sourceParams",
                "param_2": "destinationParams",
                "param_1[1]": "sourceParams[1]",
                "param_2[2]": "destinationParams[2]",
                "param_1[2]": "sourceParams[2]",
                "param_2[1]": "destinationParams[1]"
            },
            "calling": [
                "operator="
            ],
            "called": [
                "free",
                "strcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081560": {
            "entrypoint": "0x00081560",
            "current_name": "check_and_move_if_not_equal_00081560",
            "code": "\nint check_and_move_if_not_equal_00081560(int input1,int input2)\n\n{\n  if (input1 != input2) {\n    move();\n  }\n  return input1;\n}\n\n",
            "renaming": {
                "FUN_00081560": "check_and_move_if_not_equal_00081560",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "move"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081570": {
            "entrypoint": "0x00081570",
            "current_name": "update_and_resize_array_00081570",
            "code": "\nundefined4 updateAndResizeArray_00081570(int *array,int data,int size)\n\n{\n  int result;\n  int currentSize;\n  \n  currentSize = array[2];\n  if (data == 0) {\n    return 0;\n  }\n  if (size != 0) {\n    result = reserve(array,currentSize + size);\n    if (result == 0) {\n      return 0;\n    }\n    strcpy(*array + array[2],data);\n    array[2] = currentSize + size;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081570": "update_and_resize_array_00081570",
                "param_1": "array",
                "param_2": "data",
                "param_3": "size",
                "iVar1": "result",
                "iVar2": "currentSize"
            },
            "calling": [
                "concat"
            ],
            "called": [
                "reserve",
                "strcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008159e": {
            "entrypoint": "0x0008159e",
            "current_name": "update_and_resize_array_0008159e",
            "code": "\nvoid updateAndResizeArray_0008159e(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 arraySize;\n  undefined4 param3Copy;\n  \n  param3Copy = input3;\n  update_and_resize_array_00081570(input1,&arraySize,1,0,input1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008159e": "update_and_resize_array_0008159e",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "local_c": "arraySize",
                "uStack_8": "param3Copy"
            },
            "calling": [
                "readStringUntil"
            ],
            "called": [
                "FUN_00081570"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815b8": {
            "entrypoint": "0x000815b8",
            "current_name": "is_valid_comparison_000815b8",
            "code": "\nint isValidComparison_000815b8(byte **inputArray,byte *inputByte)\n\n{\n  uint comparisonResult;\n  int isValid;\n  \n  if (inputArray[2] == (byte *)0x0) {\n    if (inputByte == (byte *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    if (inputByte != (byte *)0x0) {\n      comparisonResult = strcmp(*inputArray);\n      goto LAB_000815d4;\n    }\n    inputByte = *inputArray;\n  }\n  comparisonResult = (uint)*inputByte;\nLAB_000815d4:\n  isValid = 1 - comparisonResult;\n  if (1 < comparisonResult) {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_000815b8": "is_valid_comparison_000815b8",
                "param_1": "inputArray",
                "param_2": "inputByte",
                "uVar1": "comparisonResult",
                "iVar2": "isValid"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "strcmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815de": {
            "entrypoint": "0x000815de",
            "current_name": "parse_number_000815de",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000827e8) */\n/* WARNING: Removing unreachable block (ram,0x000827a8) */\n/* WARNING: Removing unreachable block (ram,0x000827a0) */\n/* WARNING: Removing unreachable block (ram,0x000827da) */\n/* WARNING: Removing unreachable block (ram,0x000827ec) */\n/* WARNING: Removing unreachable block (ram,0x000827e4) */\n/* WARNING: Removing unreachable block (ram,0x000827a4) */\n/* WARNING: Removing unreachable block (ram,0x0008278a) */\n/* WARNING: Removing unreachable block (ram,0x000827c8) */\n/* WARNING: Removing unreachable block (ram,0x0008278c) */\n\nuint parse_number_000815de(byte **input_string)\n\n{\n  byte flag1;\n  byte flag2;\n  uint result;\n  byte *current_char;\n  uint char_value;\n  byte *next_char;\n  int var1;\n  int var2;\n  uint division_limit;\n  uint limit;\n  \n  current_char = *input_string;\n  if (*input_string == (byte *)0x0) {\n    return 0;\n  }\n  do {\n    next_char = current_char;\n    current_char = next_char + 1;\n    char_value = (uint)*next_char;\n    flag1 = *(byte *)(offset_array + char_value + 1);\n    flag2 = flag1 & 8;\n  } while ((flag1 & 8) != 0);\n  if (char_value == 0x2d) {\n    current_char = next_char + 2;\n    char_value = (uint)next_char[1];\n    flag2 = 1;\n  }\n  else if (char_value == 0x2b) {\n    char_value = (uint)next_char[1];\n    current_char = next_char + 2;\n  }\n  if (flag2 == 0) {\n    limit = 0x7fffffff;\n  }\n  else {\n    limit = 0x80000000;\n  }\n  division_limit = limit / 10;\n  var2 = 0;\n  result = 0;\n  do {\n    flag1 = *(byte *)(offset_array + char_value + 1);\n    if ((flag1 & 4) == 0) {\n      if ((flag1 & 3) == 0) {\nLAB_0008277e:\n        if (var2 == -1) {\n          if (flag2 == 0) {\n            result = 0x7fffffff;\n          }\n          else {\n            result = 0x80000000;\n          }\n          *(undefined4 *)output_variable = 0x22;\n        }\n        else if (flag2 != 0) {\n          result = -result;\n        }\n        return result;\n      }\n      if ((flag1 & 3) == 1) {\n        var1 = 0x37;\n      }\n      else {\n        var1 = 0x57;\n      }\n      var1 = char_value - var1;\n    }\n    else {\n      var1 = char_value - 0x30;\n    }\n    if (9 < var1) goto LAB_0008277e;\n    if (var2 != -1) {\n      if ((division_limit <= result && result != division_limit) || ((result == division_limit && ((int)(limit % 10) < var1))))\n      {\n        var2 = -1;\n      }\n      else {\n        result = result * 10 + var1;\n        var2 = 1;\n      }\n    }\n    char_value = (uint)*current_char;\n    current_char = current_char + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815de": "parse_number_000815de",
                "param_1": "input_string",
                "bVar1": "flag1",
                "bVar2": "flag2",
                "uVar3": "result",
                "pbVar4": "current_char",
                "uVar5": "char_value",
                "pbVar6": "next_char",
                "iVar7": "var1",
                "iVar8": "var2",
                "uVar9": "division_limit",
                "uVar10": "limit",
                "Elf32_Rel_ARRAY_20070000[270].r_info": "offset_array",
                "Elf32_Rel_ARRAY_20070000[140].r_offset": "output_variable"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815e8": {
            "entrypoint": "0x000815e8",
            "current_name": "FUNC_000815e8",
            "code": "\nvoid FUNC_000815e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000815e8": "FUNC_000815e8"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000815ec": {
            "entrypoint": "0x000815ec",
            "current_name": "run_system_000815ec",
            "code": "\nvoid runSystem_000815ec(void)\n\n{\n  setWatchdogDefault();\n  initializeSystem();\n  initializeVariant();\n  delayOneMillisecond(1);\n  systemSetup();\n  do {\n    systemLoop();\n    runSerialEvent();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815ec": "run_system_000815ec",
                "_watchdogDefaultSetup": "setWatchdogDefault",
                "initialize_system_00080774": "initializeSystem",
                "initVariant": "initializeVariant",
                "delay": "delayOneMillisecond",
                "setup": "systemSetup",
                "loop": "systemLoop",
                "serialEventRun": "runSerialEvent"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "_watchdogDefaultSetup",
                "serialEventRun",
                "setup",
                "delay",
                "loop",
                "initVariant",
                "FUN_00080774"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081618": {
            "entrypoint": "0x00081618",
            "current_name": "initialize_memory_00081618",
            "code": "\n\n\nvoid initializeMemory_00081618(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081618": "initialize_memory_00081618"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081624": {
            "entrypoint": "0x00081624",
            "current_name": "calculate_pulse_duration_00081624",
            "code": "\nint calculatePulseDuration_00081624(int index,int flag,int multiplier,undefined4 param)\n\n{\n  int result;\n  undefined4 offset;\n  \n  offset = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n  if (flag == 0) {\n    offset = 0;\n  }\n  result = countPulse(*(int *)(&DAT_00084b44 + index * 0x1c) + 0x3c,\n                        *(undefined4 *)(&DAT_00084b48 + index * 0x1c),offset,\n                        ((relArray[6].r_offset / 1000000) * multiplier) / 0x12,param)\n  ;\n  if (result != 0) {\n    result = (int)((ulonglong)(result * 18000 + 16000) /\n                 ((ulonglong)relArray[6].r_offset / 1000));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081624": "calculate_pulse_duration_00081624",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "multiplier",
                "param_4": "param",
                "iVar1": "result",
                "uVar2": "offset",
                "countPulseASM": "countPulse",
                "Elf32_Rel_ARRAY_20070000": "relArray"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "countPulseASM"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081684": {
            "entrypoint": "0x00081684",
            "current_name": "check_and_count_bits_00081684",
            "code": "\nint check_and_count_bits_00081684(uint *bit_array,uint bit_mask,uint expected_value,int max_iterations)\n\n{\n  int count;\n  \n  do {\n    if ((*bit_array & bit_mask) != expected_value) {\n      do {\n        if ((*bit_array & bit_mask) == expected_value) {\n          count = 0;\n          do {\n            if ((*bit_array & bit_mask) != expected_value) {\n              return count;\n            }\n            count = count + 1;\n          } while (max_iterations != count);\n          return 0;\n        }\n        max_iterations = max_iterations + -1;\n      } while (max_iterations != 0);\n      return 0;\n    }\n    max_iterations = max_iterations + -1;\n  } while (max_iterations != 0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081684": "check_and_count_bits_00081684",
                "param_1": "bit_array",
                "param_2": "bit_mask",
                "param_3": "expected_value",
                "param_4": "max_iterations",
                "iVar1": "count"
            },
            "calling": [
                "pulseIn"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d8": {
            "entrypoint": "0x000816d8",
            "current_name": "get_dat_value_000816d8",
            "code": "\nundefined4 get_dat_value_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "FUN_000816d8": "get_dat_value_000816d8"
            },
            "calling": [
                "millis"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816ec": {
            "entrypoint": "0x000816ec",
            "current_name": "update_relocation_entry_000816ec",
            "code": "\nvoid updateRelocationEntry_000816ec(dword address,dword data,dword value)\n\n{\n  dword *relocationEntry;\n  uint entryIndex;\n  uint bitMask;\n  code *jmpTableFunction;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  entryIndex = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  relocationEntry = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)entryIndex) {\n    relocationEntry = (dword *)malloc(400);\n    if (relocationEntry == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jmpTableFunction)(0xffffffff);\n      return;\n    }\n    *relocationEntry = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    relocationEntry[1] = 0;\n    entryIndex = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)relocationEntry;\n    relocationEntry[0x62] = 0;\n    relocationEntry[99] = 0;\n  }\n  bitMask = 1 << (entryIndex & 0xff);\n  relocationEntry[entryIndex + 0x22] = address;\n  relocationEntry[0x62] = relocationEntry[0x62] | bitMask;\n  relocationEntry[entryIndex + 0x42] = value;\n  relocationEntry[99] = bitMask | relocationEntry[99];\n  relocationEntry[1] = entryIndex + 1;\n  relocationEntry[entryIndex + 2] = data;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jmpTableFunction)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816ec": "update_relocation_entry_000816ec",
                "param_1": "address",
                "param_2": "data",
                "param_3": "value",
                "pdVar1": "relocationEntry",
                "uVar2": "entryIndex",
                "uVar3": "bitMask",
                "UNRECOVERED_JUMPTABLE_00": "jmpTableFunction"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816f8": {
            "entrypoint": "0x000816f8",
            "current_name": "print_assertion_failed_message_000816f8",
            "code": "\nvoid printAssertionFailedMessage_000816f8(undefined4 file,undefined4 lineNumber,char *assertion,undefined4 function)\n\n{\n  undefined4 filePointer;\n  undefined4 functionPointer;\n  char *additionalText;\n  undefined8 abortResult;\n  \n  filePointer = *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0xc);\n  if (assertion == (char *)0x0) goto LAB_0008171c;\n  functionPointer = function;\n  additionalText = \", function: \";\n  do {\n    function = file;\n    fiprintf(filePointer,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",functionPointer,file,lineNumber,\n             additionalText,assertion);\n    abortResult = abort();\n    lineNumber = (undefined4)((ulonglong)abortResult >> 0x20);\n    filePointer = (undefined4)abortResult;\nLAB_0008171c:\n    assertion = \"\";\n    functionPointer = function;\n    additionalText = assertion;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816f8": "print_assertion_failed_message_000816f8",
                "param_1": "file",
                "param_2": "lineNumber",
                "param_3": "assertion",
                "param_4": "function",
                "uVar1": "filePointer",
                "uVar2": "functionPointer",
                "pcVar3": "additionalText",
                "uVar4": "abortResult"
            },
            "calling": [
                "_initISR",
                "TC_Configure"
            ],
            "called": [
                "abort",
                "fiprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081750": {
            "entrypoint": "0x00081750",
            "current_name": "print_formatted_value_00081750",
            "code": "\nvoid printFormattedValue_00081750(undefined4 formatString,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 arg2Copy;\n  undefined4 arg3Copy;\n  \n  arg2Copy = arg2;\n  arg3Copy = arg3;\n  _vfiprintf_r(Elf32_Rel_ARRAY_20070000[140].r_offset,formatString,arg1,&arg2Copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081750": "print_formatted_value_00081750",
                "param_1": "formatString",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uStack_8": "arg2Copy",
                "uStack_4": "arg3Copy"
            },
            "calling": [
                "__assert_func"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081778": {
            "entrypoint": "0x00081778",
            "current_name": "execute_function_set_00081778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081784) */\n/* WARNING: Removing unreachable block (ram,0x00081788) */\n/* WARNING: Removing unreachable block (ram,0x000817b4) */\n\nvoid executeFunctionSet_00081778(void)\n\n{\n  int iterationCount;\n  code **functionPointerArray;\n  \n  _init();\n  functionPointerArray = (code **)0x8584c;\n  iterationCount = 0;\n  do {\n    iterationCount = iterationCount + 1;\n    functionPointerArray = functionPointerArray + 1;\n    (**functionPointerArray)();\n  } while (iterationCount != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081778": "execute_function_set_00081778",
                "iVar1": "iterationCount",
                "ppcVar2": "functionPointerArray"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [
                "register_fini",
                "frame_dummy",
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817c8": {
            "entrypoint": "0x000817c8",
            "current_name": "print_formatted_message_000817c8",
            "code": "\nvoid printFormattedMessage_000817c8(undefined4 message,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 stackParam2;\n  undefined4 stackParam3;\n  undefined4 stackParam4;\n  \n  stackParam2 = param2;\n  stackParam3 = param3;\n  stackParam4 = param4;\n  _vfiprintf_r(Elf32_Rel_ARRAY_20070000[140].r_offset,\n               *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 8),message,&stackParam2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817c8": "print_formatted_message_000817c8",
                "param_1": "message",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uStack_c": "stackParam2",
                "uStack_8": "stackParam3",
                "uStack_4": "stackParam4"
            },
            "calling": [
                "_exit"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817f0": {
            "entrypoint": "0x000817f0",
            "current_name": "allocate_memory_000817f0",
            "code": "\nvoid allocateMemory_000817f0(undefined4 size)\n\n{\n  customMalloc(relocationTable[140].offset,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817f0": "allocate_memory_000817f0",
                "param_1": "size",
                "_malloc_r": "customMalloc",
                "Elf32_Rel_ARRAY_20070000": "relocationTable",
                "r_offset": "offset"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081800": {
            "entrypoint": "0x00081800",
            "current_name": "free_elf32_rel_entry_00081800",
            "code": "\nvoid freeElf32RelEntry_00081800(undefined4 ptr)\n\n{\n  _free_r(relEntries[140].r_offset,ptr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081800": "free_elf32_rel_entry_00081800",
                "param_1": "ptr",
                "Elf32_Rel_ARRAY_20070000": "relEntries"
            },
            "calling": [
                "invalidate",
                "~String",
                "move"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081810": {
            "entrypoint": "0x00081810",
            "current_name": "allocate_memory_00081810",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocateMemory_00081810(undefined4 *lock,uint size)\n\n{\n  dword info;\n  int curr;\n  uint var3;\n  uint var4;\n  int prev;\n  uint var6;\n  dword offset;\n  uint var8;\n  int next;\n  undefined *ptr;\n  dword prevOffset;\n  dword currOffset;\n  int start;\n  dword *ptrArray;\n  uint alignedSize;\n  undefined *alignedPtr;\n  dword *infoArray;\n  uint index;\n  \n  if (size + 0xb < 0x17) {\n    alignedSize = 0x10;\n    if (0x10 < size) goto LAB_00081876;\n  }\n  else {\n    alignedSize = size + 0xb & 0xfffffff8;\n    if (((int)alignedSize < 0) || (alignedSize < size)) {\nLAB_00081876:\n      *lock = 0xc;\n      return (int *)0x0;\n    }\n  }\n  __malloc_lock(lock);\n  info = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (alignedSize < 0x1f8) {\n    start = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + alignedSize);\n    if ((start != alignedSize + 0x20070464) ||\n       (curr = start + 8, start = *(int *)(start + 0x14), curr != start)) {\n      prev = *(int *)(start + 0xc);\n      next = (*(uint *)(start + 4) & 0xfffffffc) + start;\n      alignedSize = *(uint *)(next + 4);\n      curr = *(int *)(start + 8);\n      *(int *)(curr + 0xc) = prev;\n      *(int *)(prev + 8) = curr;\n      *(uint *)(next + 4) = alignedSize | 1;\n      __malloc_unlock(lock);\n      return (int *)(start + 8);\n    }\n    index = (alignedSize >> 3) + 2;\n  }\n  else {\n    index = alignedSize >> 9;\n    if (index == 0) {\n      curr = 0x7e;\n      start = 0x3f;\n    }\n    else if (index < 5) {\n      start = (alignedSize >> 6) + 0x38;\n      curr = start * 2;\n    }\n    else if (index < 0x15) {\n      start = index + 0x5b;\n      curr = start * 2;\n    }\n    else if (index < 0x55) {\n      start = (alignedSize >> 0xc) + 0x6e;\n      curr = start * 2;\n    }\n    else if (index < 0x155) {\n      start = (alignedSize >> 0xf) + 0x77;\n      curr = start * 2;\n    }\n    else if (index < 0x555) {\n      start = (alignedSize >> 0x12) + 0x7c;\n      curr = start * 2;\n    }\n    else {\n      curr = 0xfc;\n      start = 0x7e;\n    }\n    for (offset = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[curr]; curr * 4 + 0x20070464U != offset\n        ; offset = *(dword *)(offset + 0xc)) {\n      index = *(uint *)(offset + 4) & 0xfffffffc;\n      prev = index - alignedSize;\n      if (0xf < prev) {\n        start = start + -1;\n        break;\n      }\n      if (-1 < prev) {\n        curr = index + offset;\n        alignedSize = *(uint *)(curr + 4);\n        prev = *(int *)(offset + 0xc);\n        start = *(int *)(offset + 8);\n        *(int *)(start + 0xc) = prev;\n        *(int *)(prev + 8) = start;\n        *(uint *)(curr + 4) = alignedSize | 1;\n        __malloc_unlock(lock);\n        return (int *)(offset + 8);\n      }\n    }\n    index = start + 1;\n  }\n  offset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    var3 = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    var4 = var3 & 0xfffffffc;\n    var6 = var4 - alignedSize;\n    if (0xf < (int)var6) {\n      offset = alignedSize + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = alignedSize | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = offset;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = offset;\n      *(undefined4 *)(offset + 0xc) = 0x2007046c;\n      *(undefined4 *)(offset + 8) = 0x2007046c;\n      *(uint *)(offset + 4) = var6 | 1;\n      *(uint *)(offset + var6) = var6;\n      __malloc_unlock(lock);\n      return (int *)(info + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)var6) {\n      *(uint *)(var4 + info + 4) = *(uint *)(var4 + info + 4) | 1;\n      __malloc_unlock(lock);\n      return (int *)(info + 8);\n    }\n    if (var4 < 0x200) {\n      var4 = var3 & 0xfffffff8;\n      start = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + var4);\n      offset = 1 << ((int)(var3 >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(info + 8) = start;\n      *(uint *)(info + 0xc) = var4 + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = offset;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + var4) = info;\n      *(dword *)(start + 0xc) = info;\n    }\n    else {\n      var6 = var3 >> 9;\n      if (var6 < 5) {\n        curr = (var3 >> 6) + 0x38;\n        start = curr * 2;\n      }\n      else if (var6 < 0x15) {\n        curr = var6 + 0x5b;\n        start = curr * 2;\n      }\n      else if (var6 < 0x55) {\n        curr = (var3 >> 0xc) + 0x6e;\n        start = curr * 2;\n      }\n      else if (var6 < 0x155) {\n        curr = (var3 >> 0xf) + 0x77;\n        start = curr * 2;\n      }\n      else if (var6 < 0x555) {\n        curr = (var3 >> 0x12) + 0x7c;\n        start = curr * 2;\n      }\n      else {\n        start = 0xfc;\n        curr = 0x7e;\n      }\n      offset = start * 4 + 0x20070464;\n      prevOffset = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[start];\n      if (prevOffset == offset) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (curr >> 2 & 0xffU);\n        currOffset = prevOffset;\n      }\n      else {\n        do {\n          currOffset = prevOffset;\n          if ((*(uint *)(prevOffset + 4) & 0xfffffffc) <= var4) break;\n          prevOffset = *(dword *)(prevOffset + 8);\n          currOffset = prevOffset;\n        } while (offset != prevOffset);\n        prevOffset = *(dword *)(currOffset + 0xc);\n      }\n      offset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(info + 0xc) = prevOffset;\n      *(dword *)(info + 8) = currOffset;\n      *(dword *)(prevOffset + 8) = info;\n      *(dword *)(currOffset + 0xc) = info;\n    }\n  }\n  info = Elf32_Rel_ARRAY_20070000[141].r_info;\n  var3 = 1 << ((int)index >> 2 & 0xffU);\n  if (var3 <= offset) {\n    if ((offset & var3) == 0) {\n      index = index & 0xfffffffc;\n      do {\n        var3 = var3 << 1;\n        index = index + 4;\n      } while ((offset & var3) == 0);\n    }\n    do {\n      infoArray = &Elf32_Rel_ARRAY_20070000[index + 0x8c].r_info;\n      ptrArray = infoArray;\n      var4 = index;\n      do {\n        for (ptr = (undefined *)ptrArray[3]; ptrArray != (dword *)ptr;\n            ptr = *(undefined **)(ptr + 0xc)) {\n          var6 = *(uint *)(ptr + 4) & 0xfffffffc;\n          var8 = var6 - alignedSize;\n          if (0xf < (int)var8) {\n            curr = *(int *)(ptr + 8);\n            start = *(int *)(ptr + 0xc);\n            alignedPtr = ptr + alignedSize;\n            *(uint *)(ptr + 4) = alignedSize | 1;\n            *(int *)(curr + 0xc) = start;\n            *(int *)(start + 8) = curr;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)alignedPtr;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)alignedPtr;\n            *(undefined4 *)(alignedPtr + 0xc) = 0x2007046c;\n            *(undefined4 *)(alignedPtr + 8) = 0x2007046c;\n            *(uint *)(alignedPtr + 4) = var8 | 1;\n            *(uint *)(alignedPtr + var8) = var8;\n            __malloc_unlock(lock);\n            return (int *)(ptr + 8);\n          }\n          if (-1 < (int)var8) {\n            start = *(int *)(ptr + 8);\n            curr = *(int *)(ptr + 0xc);\n            *(uint *)(ptr + var6 + 4) = *(uint *)(ptr + var6 + 4) | 1;\n            *(int *)(start + 0xc) = curr;\n            *(int *)(curr + 8) = start;\n            __malloc_unlock(lock);\n            return (int *)(ptr + 8);\n          }\n        }\n        var4 = var4 + 1;\n        ptrArray = ptrArray + 2;\n      } while ((var4 & 3) != 0);\n      do {\n        var6 = index & 3;\n        ptr = (undefined *)(infoArray + -2);\n        index = index - 1;\n        if (var6 == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~var3;\n          break;\n        }\n        infoArray = (dword *)*infoArray;\n      } while (infoArray == (dword *)ptr);\n      var3 = var3 * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= var3 &&\n           var3 - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (index = var4, var3 == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & var3) == 0; var3 = var3 << 1) {\n        index = index + 4;\n      }\n    } while( true );\n  }\n  index = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((alignedSize <= index) &&\n     (var3 = index - alignedSize, offset = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)var3))\n  goto LAB_00081b1a;\n  var3 = Elf32_Rel_ARRAY_20070000[141].r_info + index;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    var4 = alignedSize + DAT_20071218 + 0x10;\n  }\n  else {\n    var4 = alignedSize + DAT_20071218 + 0x100f & 0xfffff000;\n  }\n  offset = _sbrk_r(lock,var4);\n  if ((offset == 0xffffffff) || ((offset < var3 && (info != 0x20070464)))) {\n    index = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    offset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    var6 = DAT_2007121c + var4;\n    DAT_2007121c = var6;\n    if ((var3 == offset) && ((var3 & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = var4 + index | 1;\n    }\n    else {\n      prevOffset = offset;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        prevOffset = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_2007121c = var6 + (offset - var3);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = prevOffset;\n      var3 = offset & 7;\n      if (var3 == 0) {\n        start = 0x1000;\n      }\n      else {\n        offset = offset + (8 - var3);\n        start = 0x1008 - var3;\n      }\n      start = start - (var4 + offset & 0xfff);\n      curr = _sbrk_r(lock,start);\n      if (curr == -1) {\n        var3 = 1;\n        start = 0;\n      }\n      else {\n        var3 = (curr - offset) + start | 1;\n      }\n      var6 = DAT_2007121c + start;\n      Elf32_Rel_ARRAY_20070000[141].r_info = offset;\n      DAT_2007121c = var6;\n      *(uint *)(offset + 4) = var3;\n      if (info != 0x20070464) {\n        if (index < 0x10) {\n          *(undefined4 *)(offset + 4) = 1;\n          index = 0;\n          goto LAB_00081b04;\n        }\n        index = index - 0xc & 0xfffffff8;\n        *(uint *)(info + 4) = index | *(uint *)(info + 4) & 1;\n        *(undefined4 *)(info + index + 4) = 5;\n        *(undefined4 *)(info + index + 8) = 5;\n        if (0xf < index) {\n          _free_r(lock,info + 8);\n          var6 = DAT_2007121c;\n        }\n      }\n    }\n    if (DAT_20071214 < var6) {\n      DAT_20071214 = var6;\n    }\n    if (DAT_20071210 < var6) {\n      DAT_20071210 = var6;\n    }\n    index = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    offset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00081b04:\n  var3 = index - alignedSize;\n  if ((index < alignedSize) || ((int)var3 < 0x10)) {\n    __malloc_unlock(lock);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  Elf32_Rel_ARRAY_20070000[141].r_info = alignedSize + offset;\n  *(uint *)(offset + 4) = alignedSize | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = var3 | 1;\n  __malloc_unlock(lock);\n  return (int *)(offset + 8);\n}\n\n",
            "renaming": {
                "FUN_00081810": "allocate_memory_00081810",
                "param_1": "lock",
                "param_2": "size",
                "dVar1": "info",
                "iVar2": "curr",
                "uVar3": "var3",
                "uVar4": "var4",
                "iVar5": "prev",
                "uVar6": "var6",
                "dVar7": "offset",
                "uVar8": "var8",
                "iVar9": "next",
                "puVar10": "ptr",
                "dVar11": "prevOffset",
                "dVar12": "currOffset",
                "iVar13": "start",
                "pdVar14": "ptrArray",
                "uVar15": "alignedSize",
                "puVar16": "alignedPtr",
                "pdVar17": "infoArray",
                "uVar18": "index"
            },
            "calling": [
                "__sfvwrite_r",
                "_realloc_r",
                "__smakebuf_r",
                "malloc"
            ],
            "called": [
                "_sbrk_r",
                "__malloc_unlock",
                "_free_r",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d48": {
            "entrypoint": "0x00081d48",
            "current_name": "copy_memory_00081d48",
            "code": "\nundefined4 * copyMemory_00081d48(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *destPtrNext;\n  undefined4 *srcPtr;\n  uint remainingSize;\n  uint count;\n  bool isCountGreaterThanZero;\n  \n  destPtrNext = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      count = size - 4;\n      if (3 < size) {\n        do {\n          destPtr = source;\n          srcPtr = destPtrNext;\n          isCountGreaterThanZero = count != 0;\n          count = count - 1;\n          *(undefined *)srcPtr = *(undefined *)destPtr;\n          destPtrNext = (undefined4 *)((int)srcPtr + 1);\n          source = (undefined4 *)((int)destPtr + 1);\n        } while (isCountGreaterThanZero);\n        *(undefined *)(undefined4 *)((int)srcPtr + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)srcPtr + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)srcPtr + 3) = *(undefined *)((int)destPtr + 3);\n        return destination;\n      }\n      goto LAB_00081dcc;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      count = 4 - ((uint)destination & 3);\n      size = size - count;\n      destPtr = destination;\n      srcPtr = source;\n      if (((uint)destination & 1) != 0) {\n        srcPtr = (undefined4 *)((int)source + 1);\n        destPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      destPtrNext = destPtr;\n      source = srcPtr;\n      if ((count & 2) != 0) {\n        source = (undefined4 *)((int)srcPtr + 2);\n        destPtrNext = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *destPtrNext = *source;\n    destPtrNext[1] = source[1];\n    destPtrNext[2] = source[2];\n    destPtrNext[3] = source[3];\n    destPtrNext[4] = source[4];\n    destPtrNext[5] = source[5];\n    destPtrNext[6] = source[6];\n    destPtrNext[7] = source[7];\n    destPtrNext[8] = source[8];\n    destPtrNext[9] = source[9];\n    destPtrNext[10] = source[10];\n    destPtrNext[0xb] = source[0xb];\n    destPtrNext[0xc] = source[0xc];\n    destPtrNext[0xd] = source[0xd];\n    destPtrNext[0xe] = source[0xe];\n    destPtrNext[0xf] = source[0xf];\n    destPtrNext = destPtrNext + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remainingSize = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *destPtrNext = *source;\n      destPtrNext[1] = source[1];\n      destPtrNext[2] = source[2];\n      destPtrNext[3] = source[3];\n      destPtrNext = destPtrNext + 4;\n      source = source + 4;\n      isCountGreaterThanZero = 0xf < remainingSize;\n      remainingSize = remainingSize - 0x10;\n    } while (isCountGreaterThanZero);\n  }\n  count = remainingSize + 0xc;\n  srcPtr = destPtrNext;\n  destPtr = source;\n  if (0xfffffff3 < remainingSize) {\n    do {\n      source = destPtr + 1;\n      *srcPtr = *destPtr;\n      isCountGreaterThanZero = 3 < count;\n      count = count - 4;\n      destPtrNext = srcPtr + 1;\n      srcPtr = srcPtr + 1;\n      destPtr = source;\n    } while (isCountGreaterThanZero);\n  }\nLAB_00081dcc:\n  if (count + 4 != 0) {\n    destPtr = destPtrNext;\n    srcPtr = source;\n    if ((count & 1) != 0) {\n      srcPtr = (undefined4 *)((int)source + 1);\n      destPtr = (undefined4 *)((int)destPtrNext + 1);\n      *(undefined *)destPtrNext = *(undefined *)source;\n    }\n    if ((count + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00081d48": "copy_memory_00081d48",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "destPtrNext",
                "puVar3": "srcPtr",
                "uVar4": "remainingSize",
                "uVar5": "count",
                "bVar6": "isCountGreaterThanZero"
            },
            "calling": [
                "__sfvwrite_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e34": {
            "entrypoint": "0x00081e34",
            "current_name": "copy_memory_00081e34",
            "code": "\nvoid copyMemory_00081e34(undefined4 *destination,undefined4 *source,uint length)\n\n{\n  int index;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *destEndPtr;\n  uint tempLength;\n  undefined *destBytePtr;\n  uint remainingLength;\n  \n  if ((source < destination) && (destEndPtr = (undefined4 *)((int)source + length), destination < destEndPtr)) {\n    destBytePtr = (undefined *)((int)destination + length);\n    index = length - 1;\n    if (length != 0) {\n      do {\n        destEndPtr = (undefined4 *)((int)destEndPtr + -1);\n        index = index + -1;\n        destBytePtr = destBytePtr + -1;\n        *destBytePtr = *(undefined *)destEndPtr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (length < 0x10) {\n    if (length == 0) {\n      return;\n    }\n  }\n  else if ((((uint)destination | (uint)source) & 3) == 0) {\n    destEndPtr = destination;\n    srcPtr = source;\n    do {\n      destPtr = destEndPtr + 4;\n      *destEndPtr = *srcPtr;\n      destEndPtr[1] = srcPtr[1];\n      destEndPtr[2] = srcPtr[2];\n      destEndPtr[3] = srcPtr[3];\n      destEndPtr = destPtr;\n      srcPtr = srcPtr + 4;\n    } while (destPtr != (undefined4 *)((int)destination + (length - 0x10 & 0xfffffff0) + 0x10));\n    index = (length - 0x10 >> 4) + 1;\n    remainingLength = length & 0xf;\n    source = source + index * 4;\n    destination = destination + index * 4;\n    tempLength = remainingLength;\n    destEndPtr = destination;\n    srcPtr = source;\n    if (3 < remainingLength) {\n      do {\n        tempLength = tempLength - 4;\n        *destEndPtr = *srcPtr;\n        destEndPtr = destEndPtr + 1;\n        srcPtr = srcPtr + 1;\n      } while (3 < tempLength);\n      index = (remainingLength - 4 & 0xfffffffc) + 4;\n      destination = (undefined4 *)((int)destination + index);\n      source = (undefined4 *)((int)source + index);\n      remainingLength = length & 3;\n    }\n    length = remainingLength;\n    if (length == 0) {\n      return;\n    }\n  }\n  destEndPtr = destination;\n  do {\n    srcPtr = (undefined4 *)((int)destEndPtr + 1);\n    *(undefined *)destEndPtr = *(undefined *)source;\n    source = (undefined4 *)((int)source + 1);\n    destEndPtr = srcPtr;\n  } while (srcPtr != (undefined4 *)(length + (int)destination));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e34": "copy_memory_00081e34",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "iVar1": "index",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "puVar4": "destEndPtr",
                "uVar5": "tempLength",
                "puVar6": "destBytePtr",
                "uVar7": "remainingLength"
            },
            "calling": [
                "__sfvwrite_r",
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f00": {
            "entrypoint": "0x00081f00",
            "current_name": "memset_uint32_00081f00",
            "code": "\nvoid memset_uint32_00081f00(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_dest_ptr;\n  undefined4 value_copy;\n  uint remaining_size;\n  bool is_empty;\n  \n  if (((uint)dest & 3) != 0) {\n    is_empty = size == 0;\n    dest_ptr = dest;\n    size = size - 1;\n    if (is_empty) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      if (((uint)dest & 3) == 0) break;\n      is_empty = size == 0;\n      dest_ptr = dest;\n      size = size - 1;\n      if (is_empty) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    value_copy = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining_size = size;\n    dest_ptr = dest;\n    if (0xf < size) {\n      remaining_size = size - 0x10;\n      do {\n        *dest_ptr = value_copy;\n        dest_ptr[1] = value_copy;\n        dest_ptr[2] = value_copy;\n        dest_ptr[3] = value_copy;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (remaining_size & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      dest = dest + ((remaining_size >> 4) + 1) * 4;\n      remaining_size = size;\n      dest_ptr = dest;\n      if (size < 4) goto LAB_00081f7c;\n    }\n    do {\n      size = size - 4;\n      *dest = value_copy;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)dest_ptr + (remaining_size - 4 & 0xfffffffc) + 4);\n    size = remaining_size & 3;\n  }\nLAB_00081f7c:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      next_dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_dest_ptr;\n    } while (next_dest_ptr != (undefined4 *)(size + (int)dest));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f00": "memset_uint32_00081f00",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "next_dest_ptr",
                "uVar3": "value_copy",
                "uVar4": "remaining_size",
                "bVar5": "is_empty"
            },
            "calling": [
                "__sinit",
                "RingBuffer"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f94": {
            "entrypoint": "0x00081f94",
            "current_name": "FUNC_00081f94",
            "code": "\nvoid FUNC_00081f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f94": "FUNC_00081f94"
            },
            "calling": [
                "_realloc_r",
                "_free_r",
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f98": {
            "entrypoint": "0x00081f98",
            "current_name": "FUNC_00081f98",
            "code": "\nvoid FUNC_00081f98(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f98": "FUNC_00081f98"
            },
            "calling": [
                "_realloc_r",
                "_free_r",
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f9c": {
            "entrypoint": "0x00081f9c",
            "current_name": "resize_relocation_array_00081f9c",
            "code": "\nvoid resizeRelocationArray_00081f9c(undefined4 relocationArray,undefined4 newSize)\n\n{\n  _realloc_r(relocationArray[140].offset,relocationArray,newSize);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f9c": "resize_relocation_array_00081f9c",
                "param_1": "relocationArray",
                "param_2": "newSize",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "r_offset": "offset"
            },
            "calling": [
                "changeBuffer"
            ],
            "called": [
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081fac": {
            "entrypoint": "0x00081fac",
            "current_name": "allocate_memory_00081fac",
            "code": "\nint * allocateMemory_00081fac(undefined4 *memoryContext,int *existingMemory,uint size)\n\n{\n  dword temp1;\n  int *newMemory;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  int temp5;\n  int *temp6;\n  uint temp7;\n  uint alignedSize;\n  int *allocatedMemory;\n  \n  if (existingMemory == (int *)0x0) {\n    newMemory = (int *)_malloc_r(memoryContext,size);\n    return newMemory;\n  }\n  __malloc_lock();\n  temp4 = existingMemory[-1];\n  temp7 = temp4 & 0xfffffffc;\n  newMemory = existingMemory + -2;\n  if (size + 0xb < 0x17) {\n    alignedSize = 0x10;\n  }\n  else {\n    alignedSize = size + 0xb & 0xfffffff8;\n    if ((int)alignedSize < 0) goto LAB_00082078;\n  }\n  if (alignedSize < size) {\nLAB_00082078:\n    *memoryContext = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)temp7 < (int)alignedSize) {\n    temp1 = (int)newMemory + temp7;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == temp1) {\n      temp2 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      temp1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(alignedSize + 0x10) <= (int)(temp2 + temp7)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)newMemory + alignedSize;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp2 + temp7) - alignedSize | 1;\n        existingMemory[-1] = alignedSize | existingMemory[-1] & 1U;\n        __malloc_unlock(memoryContext);\n        return existingMemory;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp1 + 4) & 0xfffffffe) + temp1 + 4) & 1) == 0) {\n      temp2 = *(uint *)(temp1 + 4) & 0xfffffffc;\n      if ((int)alignedSize <= (int)(temp2 + temp7)) {\n        temp5 = *(int *)(temp1 + 0xc);\n        temp3 = *(int *)(temp1 + 8);\n        *(int *)(temp3 + 0xc) = temp5;\n        *(int *)(temp5 + 8) = temp3;\n        temp7 = temp2 + temp7;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      temp2 = 0;\n      temp1 = 0;\n    }\n    if (-1 < (int)(temp4 << 0x1f)) {\n      allocatedMemory = (int *)((int)newMemory - existingMemory[-2]);\n      temp4 = (allocatedMemory[1] & 0xfffffffcU) + temp7;\n      if (temp1 != 0) {\n        if (temp1 == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(alignedSize + 0x10) <= (int)(temp2 + temp4)) {\n            newMemory = allocatedMemory + 2;\n            temp3 = *newMemory;\n            temp5 = allocatedMemory[3];\n            temp7 = temp7 - 4;\n            *(int *)(temp3 + 0xc) = temp5;\n            *(int *)(temp5 + 8) = temp3;\n            if (temp7 < 0x25) {\n              temp6 = newMemory;\n              if (0x13 < temp7) {\n                allocatedMemory[2] = *existingMemory;\n                allocatedMemory[3] = existingMemory[1];\n                if (temp7 < 0x1c) {\n                  existingMemory = existingMemory + 2;\n                  temp6 = allocatedMemory + 4;\n                }\n                else {\n                  allocatedMemory[4] = existingMemory[2];\n                  allocatedMemory[5] = existingMemory[3];\n                  if (temp7 == 0x24) {\n                    allocatedMemory[6] = existingMemory[4];\n                    temp6 = existingMemory + 5;\n                    existingMemory = existingMemory + 6;\n                    allocatedMemory[7] = *temp6;\n                    temp6 = allocatedMemory + 8;\n                  }\n                  else {\n                    existingMemory = existingMemory + 4;\n                    temp6 = allocatedMemory + 6;\n                  }\n                }\n              }\n              *temp6 = *existingMemory;\n              temp6[1] = existingMemory[1];\n              temp6[2] = existingMemory[2];\n            }\n            else {\n              memmove(newMemory,existingMemory);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)allocatedMemory + alignedSize;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp2 + temp4) - alignedSize | 1;\n            allocatedMemory[1] = alignedSize | allocatedMemory[1] & 1U;\n            __malloc_unlock(memoryContext);\n            return newMemory;\n          }\n        }\n        else {\n          temp2 = temp2 + temp4;\n          if ((int)alignedSize <= (int)temp2) {\n            temp5 = *(int *)(temp1 + 0xc);\n            temp3 = *(int *)(temp1 + 8);\n            *(int *)(temp3 + 0xc) = temp5;\n            *(int *)(temp5 + 8) = temp3;\n            temp6 = allocatedMemory + 2;\n            temp3 = *temp6;\n            temp5 = allocatedMemory[3];\n            temp4 = temp7 - 4;\n            *(int *)(temp3 + 0xc) = temp5;\n            *(int *)(temp5 + 8) = temp3;\n            temp7 = temp2;\n            if (temp4 < 0x25) {\n              newMemory = temp6;\n              if (0x13 < temp4) {\n                allocatedMemory[2] = *existingMemory;\n                allocatedMemory[3] = existingMemory[1];\n                if (temp4 < 0x1c) {\n                  existingMemory = existingMemory + 2;\n                  newMemory = allocatedMemory + 4;\n                }\n                else {\n                  allocatedMemory[4] = existingMemory[2];\n                  allocatedMemory[5] = existingMemory[3];\n                  if (temp4 == 0x24) {\n                    allocatedMemory[6] = existingMemory[4];\n                    newMemory = existingMemory + 5;\n                    existingMemory = existingMemory + 6;\n                    allocatedMemory[7] = *newMemory;\n                    newMemory = allocatedMemory + 8;\n                  }\n                  else {\n                    existingMemory = existingMemory + 4;\n                    newMemory = allocatedMemory + 6;\n                  }\n                }\n              }\n              *newMemory = *existingMemory;\n              newMemory[1] = existingMemory[1];\n              newMemory[2] = existingMemory[2];\n              temp4 = allocatedMemory[1];\n              newMemory = allocatedMemory;\n              existingMemory = temp6;\n            }\n            else {\n              memmove(temp6,existingMemory);\n              temp4 = allocatedMemory[1];\n              newMemory = allocatedMemory;\n              existingMemory = temp6;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)alignedSize <= (int)temp4) {\n        temp6 = allocatedMemory + 2;\n        temp3 = *temp6;\n        temp5 = allocatedMemory[3];\n        temp2 = temp7 - 4;\n        *(int *)(temp3 + 0xc) = temp5;\n        *(int *)(temp5 + 8) = temp3;\n        temp7 = temp4;\n        if (temp2 < 0x25) {\n          newMemory = temp6;\n          if (0x13 < temp2) {\n            allocatedMemory[2] = *existingMemory;\n            allocatedMemory[3] = existingMemory[1];\n            if (temp2 < 0x1c) {\n              existingMemory = existingMemory + 2;\n              newMemory = allocatedMemory + 4;\n            }\n            else {\n              allocatedMemory[4] = existingMemory[2];\n              allocatedMemory[5] = existingMemory[3];\n              if (temp2 == 0x24) {\n                allocatedMemory[6] = existingMemory[4];\n                newMemory = existingMemory + 5;\n                existingMemory = existingMemory + 6;\n                allocatedMemory[7] = *newMemory;\n                newMemory = allocatedMemory + 8;\n              }\n              else {\n                existingMemory = existingMemory + 4;\n                newMemory = allocatedMemory + 6;\n              }\n            }\n          }\n          *newMemory = *existingMemory;\n          newMemory[1] = existingMemory[1];\n          newMemory[2] = existingMemory[2];\n          temp4 = allocatedMemory[1];\n          newMemory = allocatedMemory;\n          existingMemory = temp6;\n        }\n        else {\n          memmove(temp6,existingMemory);\n          temp4 = allocatedMemory[1];\n          newMemory = allocatedMemory;\n          existingMemory = temp6;\n        }\n        goto LAB_00082088;\n      }\n    }\n    allocatedMemory = (int *)_malloc_r(memoryContext,size);\n    if (allocatedMemory == (int *)0x0) goto LAB_000820a0;\n    temp4 = existingMemory[-1];\n    if (allocatedMemory + -2 != (int *)((temp4 & 0xfffffffe) + (int)newMemory)) {\n      temp7 = temp7 - 4;\n      if (temp7 < 0x25) {\n        newMemory = existingMemory;\n        temp6 = allocatedMemory;\n        if (0x13 < temp7) {\n          *allocatedMemory = *existingMemory;\n          allocatedMemory[1] = existingMemory[1];\n          if (temp7 < 0x1c) {\n            newMemory = existingMemory + 2;\n            temp6 = allocatedMemory + 2;\n          }\n          else {\n            allocatedMemory[2] = existingMemory[2];\n            allocatedMemory[3] = existingMemory[3];\n            if (temp7 == 0x24) {\n              allocatedMemory[4] = existingMemory[4];\n              allocatedMemory[5] = existingMemory[5];\n              newMemory = existingMemory + 6;\n              temp6 = allocatedMemory + 6;\n            }\n            else {\n              newMemory = existingMemory + 4;\n              temp6 = allocatedMemory + 4;\n            }\n          }\n        }\n        *temp6 = *newMemory;\n        temp6[1] = newMemory[1];\n        temp6[2] = newMemory[2];\n      }\n      else {\n        memmove(allocatedMemory,existingMemory);\n      }\n      _free_r(memoryContext,existingMemory);\n      goto LAB_000820a0;\n    }\n    temp7 = temp7 + (allocatedMemory[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  temp2 = temp7 - alignedSize;\n  allocatedMemory = existingMemory;\n  if (temp2 < 0x10) {\n    newMemory[1] = temp4 & 1 | temp7;\n    *(uint *)((int)newMemory + temp7 + 4) = *(uint *)((int)newMemory + temp7 + 4) | 1;\n  }\n  else {\n    newMemory[1] = temp4 & 1 | alignedSize;\n    *(uint *)((int)newMemory + alignedSize + 4) = temp2 | 1;\n    *(uint *)((int)newMemory + temp2 + alignedSize + 4) = *(uint *)((int)newMemory + temp2 + alignedSize + 4) | 1;\n    _free_r(memoryContext,(int)newMemory + alignedSize + 8);\n  }\nLAB_000820a0:\n  __malloc_unlock(memoryContext);\n  return allocatedMemory;\n}\n\n",
            "renaming": {
                "FUN_00081fac": "allocate_memory_00081fac",
                "param_1": "memoryContext",
                "param_2": "existingMemory",
                "param_3": "size",
                "dVar1": "temp1",
                "piVar2": "newMemory",
                "uVar3": "temp2",
                "iVar4": "temp3",
                "uVar5": "temp4",
                "iVar6": "temp5",
                "piVar7": "temp6",
                "uVar8": "temp7",
                "uVar9": "alignedSize",
                "piVar10": "allocatedMemory"
            },
            "calling": [
                "__sfvwrite_r",
                "realloc"
            ],
            "called": [
                "__malloc_unlock",
                "_free_r",
                "_malloc_r",
                "memmove",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008236c": {
            "entrypoint": "0x0008236c",
            "current_name": "allocate_memory_0008236c",
            "code": "\nvoid allocateMemory_0008236c(int *outputPointer,undefined4 numBytes)\n\n{\n  int memoryAllocationResult;\n  \n  DAT_20071244 = 0;\n  memoryAllocationResult = _sbrk(numBytes);\n  if ((memoryAllocationResult == -1) && (DAT_20071244 != 0)) {\n    *outputPointer = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008236c": "allocate_memory_0008236c",
                "param_1": "outputPointer",
                "param_2": "numBytes",
                "iVar1": "memoryAllocationResult"
            },
            "calling": [
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082390": {
            "entrypoint": "0x00082390",
            "current_name": "compare_uint_arrays_00082390",
            "code": "\nint compareUintArrays_00082390(uint *array1,uint *array2)\n\n{\n  uint *ptr1;\n  int result;\n  uint *ptr2;\n  uint *ptr3;\n  uint val1;\n  uint val2;\n  uint val3;\n  uint val4;\n  uint val5;\n  \n  if ((((uint)array1 | (uint)array2) & 7) != 0) {\n    ptr1 = array1;\n    if (((uint)array1 & 3) != 0) {\n      ptr1 = (uint *)((uint)array1 & 0xfffffffc) + 1;\n      val1 = *(uint *)((uint)array1 & 0xfffffffc);\n      ptr2 = array2;\n      if (((uint)array1 & 1) == 0) {\nLAB_00082410:\n        ptr3 = (uint *)((int)ptr2 + 1);\n        val2 = val1 >> 0x10 & 0xff;\n        result = val2 - *(byte *)ptr2;\n        if (result != 0) {\n          return result;\n        }\n        if (val2 == 0) {\n          return 0;\n        }\n      }\n      else {\n        ptr3 = array2;\n        if (((uint)array1 & 2) == 0) {\n          ptr2 = (uint *)((int)array2 + 1);\n          val2 = val1 >> 8 & 0xff;\n          result = val2 - *(byte *)array2;\n          if (result != 0) {\n            return result;\n          }\n          if (val2 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      array2 = (uint *)((int)ptr3 + 1);\n      result = (val1 >> 0x18) - (uint)*(byte *)ptr3;\n      if ((result != 0) || (val1 >> 0x18 == 0)) {\n        return result;\n      }\n    }\n    val1 = (uint)array2 & 3;\n    if (val1 != 0) {\n      array2 = (uint *)((uint)array2 & 0xfffffffc);\n      if (val1 == 2) {\n        val1 = *array2;\n        do {\n          array2 = array2 + 1;\n          val3 = *ptr1;\n          val1 = val1 >> 0x10;\n          val4 = val3 + 0xfefefeff & ~val3;\n          val5 = val4 & 0x80808080;\n          val2 = val3 & 0xffff;\n          if ((val4 & 0x8080) != 0 || val2 != val1) goto LAB_0008258e;\n          val1 = *array2;\n          val2 = val2 ^ val3;\n          val3 = val1 * 0x10000;\n          ptr1 = ptr1 + 1;\n        } while (val5 == 0 && val2 == val3);\n      }\n      else if (val1 < 2) {\n        val1 = *array2;\n        do {\n          array2 = array2 + 1;\n          val3 = *ptr1;\n          val1 = val1 >> 8;\n          val4 = val3 + 0xfefefeff & ~val3;\n          val5 = val4 & 0x80808080;\n          val2 = val3 & 0xffffff;\n          if ((val4 & 0x808080) != 0 || val2 != val1) goto LAB_0008258e;\n          val1 = *array2;\n          val2 = val2 ^ val3;\n          val3 = val1 * 0x1000000;\n          ptr1 = ptr1 + 1;\n        } while (val5 == 0 && val2 == val3);\n      }\n      else {\n        val1 = *array2;\n        do {\n          array2 = array2 + 1;\n          val3 = *ptr1;\n          val1 = val1 >> 0x18;\n          val4 = val3 + 0xfefefeff & ~val3;\n          val5 = val4 & 0x80808080;\n          val2 = val3 & 0xff;\n          if ((val4 & 0x80) != 0 || val2 != val1) goto LAB_0008258e;\n          val1 = *array2;\n          val2 = val2 ^ val3;\n          val3 = val1 * 0x100;\n          ptr1 = ptr1 + 1;\n        } while (val5 == 0 && val2 == val3);\n      }\n      val2 = val2 << 0x18 | (val2 >> 8 & 0xff) << 0x10 | (val2 >> 0x10 & 0xff) << 8 |\n              val2 >> 0x18;\n      val1 = (val3 >> 8 & 0xff) << 0x10 | (val3 >> 0x10 & 0xff) << 8 | val3 >> 0x18;\n      goto LAB_0008259e;\n    }\n    array1 = ptr1;\n    ptr2 = array2;\n    if (((uint)ptr1 & 4) != 0) {\n      array1 = ptr1 + 1;\n      val1 = *ptr1;\n      ptr2 = array2 + 1;\n      val3 = *array2;\n      val5 = val1 + 0xfefefeff & ~val1 & 0x80808080;\n      if (val1 != val3 || val5 != 0) {\nLAB_0008259a:\n        val2 = val1 << 0x18 | (val1 >> 8 & 0xff) << 0x10 | (val1 >> 0x10 & 0xff) << 8 |\n                val1 >> 0x18;\n        val1 = val3 << 0x18 | (val3 >> 8 & 0xff) << 0x10 | (val3 >> 0x10 & 0xff) << 8 |\n                val3 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    array2 = ptr2;\n    if (((uint)ptr2 & 4) != 0) {\n      val1 = *ptr2;\n      ptr1 = ptr2 + 1;\n      do {\n        val2 = *array1;\n        val3 = array1[1];\n        val5 = val2 + 0xfefefeff & ~val2 & 0x80808080;\n        if (val2 != val1 || val5 != 0) goto LAB_0008258e;\n        val4 = *ptr1;\n        val1 = ptr1[1];\n        val5 = val3 + 0xfefefeff & ~val3 & 0x80808080;\n        array1 = array1 + 2;\n        ptr1 = ptr1 + 2;\n      } while (val3 == val4 && val5 == 0);\n      val2 = val3 << 0x18 | (val3 >> 8 & 0xff) << 0x10 | (val3 >> 0x10 & 0xff) << 8 |\n              val3 >> 0x18;\n      val1 = val4 << 0x18 | (val4 >> 8 & 0xff) << 0x10 | (val4 >> 0x10 & 0xff) << 8 |\n              val4 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    val1 = *array1;\n    val2 = array1[1];\n    val3 = *array2;\n    val4 = array2[1];\n    val5 = val1 + 0xfefefeff & ~val1 & 0x80808080;\n    if (val1 != val3 || val5 != 0) goto LAB_0008259a;\n    val5 = val2 + 0xfefefeff & ~val2 & 0x80808080;\n    array1 = array1 + 2;\n    array2 = array2 + 2;\n  } while (val2 == val4 && val5 == 0);\n  val2 = val2 << 0x18 | (val2 >> 8 & 0xff) << 0x10 | (val2 >> 0x10 & 0xff) << 8 | val2 >> 0x18;\n  val1 = val4 << 0x18 | (val4 >> 8 & 0xff) << 0x10 | (val4 >> 0x10 & 0xff) << 8 | val4 >> 0x18;\nLAB_0008259e:\n  val3 = val5 << 0x18 | (val5 >> 8 & 0xff) << 0x10 | (val5 >> 0x10 & 0xff) << 8 | val5 >> 0x18;\n  if (val3 != 0) {\n    val3 = 0x18 - LZCOUNT(val3);\n    val2 = val2 >> (val3 & 0xff);\n    val1 = val1 >> (val3 & 0xff);\n  }\n  result = 1;\n  if (val2 <= val1) {\n    result = -(uint)(val2 < val1);\n  }\n  return result;\nLAB_0008258e:\n  val2 = val2 << 0x18 | (val2 >> 8 & 0xff) << 0x10 | (val2 >> 0x10 & 0xff) << 8 | val2 >> 0x18;\n  val1 = val1 << 0x18 | (val1 >> 8 & 0xff) << 0x10 | (val1 >> 0x10 & 0xff) << 8 | val1 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "renaming": {
                "FUN_00082390": "compare_uint_arrays_00082390",
                "param_1": "array1",
                "param_2": "array2",
                "puVar1": "ptr1",
                "iVar2": "result",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "uVar5": "val1",
                "uVar6": "val2",
                "uVar7": "val3",
                "uVar8": "val4",
                "uVar9": "val5"
            },
            "calling": [
                "equals"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825cc": {
            "entrypoint": "0x000825cc",
            "current_name": "copy_string_with_alignment_000825cc",
            "code": "\nvoid copyStringWithAlignment_000825cc(uint *destination,uint *source)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *nextPointer;\n  uint *currentPointer;\n  uint currentValue;\n  uint tempValue;\n  uint *destinationPointer;\n  bool isZeroByte;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    currentPointer = source;\n    if (((uint)source & 1) != 0) {\n      currentPointer = (uint *)((int)source + 1);\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      destination = (uint *)((int)destination + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    source = currentPointer;\n    if (((uint)currentPointer & 2) != 0) {\n      source = (uint *)((int)currentPointer + 2);\n      currentShort = *(ushort *)currentPointer;\n      isZeroByte = (currentShort & 0xff) == 0;\n      if (isZeroByte) {\n        *(char *)destination = (char)currentShort;\n      }\n      else {\n        *(ushort *)destination = currentShort;\n        isZeroByte = (currentShort & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (isZeroByte) {\n        return;\n      }\n    }\n  }\n  currentValue = *source;\n  currentPointer = source + 1;\n  destinationPointer = destination;\n  if (((uint)source & 4) != 0) {\n    if ((currentValue + 0xfefefeff & ~currentValue & 0x80808080) != 0) goto LAB_00082630;\n    destinationPointer = destination + 1;\n    *destination = currentValue;\n    currentPointer = source + 2;\n    currentValue = source[1];\n  }\n  while( true ) {\n    nextPointer = currentPointer + 1;\n    tempValue = *currentPointer;\n    destination = destinationPointer;\n    if ((currentValue + 0xfefefeff & ~currentValue & 0x80808080) != 0) break;\n    destination = destinationPointer + 1;\n    *destinationPointer = currentValue;\n    currentValue = tempValue;\n    if ((tempValue + 0xfefefeff & ~tempValue & 0x80808080) != 0) break;\n    currentPointer = currentPointer + 2;\n    currentValue = *nextPointer;\n    destinationPointer = destinationPointer + 2;\n    *destination = tempValue;\n  }\nLAB_00082630:\n  do {\n    *(char *)destination = (char)currentValue;\n    tempValue = currentValue & 0xff;\n    currentValue = currentValue >> 8 | currentValue << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (tempValue != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825cc": "copy_string_with_alignment_000825cc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "nextPointer",
                "puVar4": "currentPointer",
                "uVar5": "currentValue",
                "uVar6": "tempValue",
                "puVar7": "destinationPointer",
                "bVar8": "isZeroByte"
            },
            "calling": [
                "move",
                "copy",
                "FUN_00081570"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082688": {
            "entrypoint": "0x00082688",
            "current_name": "count_trailing_zeros_00082688",
            "code": "\nint countTrailingZeros_00082688(uint input)\n\n{\n  int count;\n  uint *ptr;\n  uint value;\n  bool isZero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  count = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((count + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    count = count + 4;\n    value = *ptr;\n  }\n  isZero = (value & 0xff) == 0;\n  if (!isZero) {\n    count = count + 1;\n    isZero = (value & 0xff00) == 0;\n  }\n  if (!isZero) {\n    count = count + 1;\n    isZero = (value & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    count = count + 1;\n  }\n  return count;\n}\n\n",
            "renaming": {
                "FUN_00082688": "count_trailing_zeros_00082688",
                "param_1": "input",
                "iVar1": "count",
                "puVar2": "ptr",
                "uVar3": "value",
                "bVar4": "isZero"
            },
            "calling": [
                "String",
                "FUN_000810a6",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082824": {
            "entrypoint": "0x00082824",
            "current_name": "write_to_stream_00082824",
            "code": "\nint write_to_stream_00082824(undefined4 stream,int buffer_size,int **data)\n\n{\n  int *current_data_ptr;\n  int result;\n  int *remaining_data_ptr;\n  uint iteration_counter;\n  undefined4 *current_item_ptr;\n  uint item_size;\n  uint item_count;\n  \n  if (-1 < *(int *)(buffer_size + 100) << 0x12) {\n    result = __sfvwrite_r();\n    data[2] = (int *)0x0;\n    data[1] = (int *)0x0;\n    return result;\n  }\n  remaining_data_ptr = data[2];\n  current_data_ptr = *data;\n  while (remaining_data_ptr != (int *)0x0) {\n    item_size = current_data_ptr[1];\n    item_count = item_size >> 2;\n    if (item_count != 0) {\n      current_item_ptr = (undefined4 *)(*current_data_ptr + -4);\n      iteration_counter = 0;\n      do {\n        current_item_ptr = current_item_ptr + 1;\n        result = _fputwc_r(stream,*current_item_ptr,buffer_size);\n        iteration_counter = iteration_counter + 1;\n        if (result == -1) goto LAB_00082864;\n      } while (item_count != iteration_counter);\n      remaining_data_ptr = data[2];\n    }\n    remaining_data_ptr = (int *)((int)remaining_data_ptr - (item_size & 0xfffffffc));\n    data[2] = remaining_data_ptr;\n    current_data_ptr = current_data_ptr + 2;\n  }\n  result = 0;\nLAB_00082864:\n  data[2] = (int *)0x0;\n  data[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082824": "write_to_stream_00082824",
                "param_1": "stream",
                "param_2": "buffer_size",
                "param_3": "data",
                "piVar1": "current_data_ptr",
                "iVar2": "result",
                "piVar3": "remaining_data_ptr",
                "uVar4": "iteration_counter",
                "puVar5": "current_item_ptr",
                "uVar6": "item_size",
                "uVar7": "item_count"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__sfvwrite_r",
                "_fputwc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008289c": {
            "entrypoint": "0x0008289c",
            "current_name": "format_string_0008289c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint formatString_0008289c(int fmtStr,int args,int *******format,int **argList)\n\n{\n  bool formatLenFlag;\n  bool formatFlag;\n  bool formatSignFlag;\n  char signChar;\n  bool leadingZeroFlag;\n  int ********pformatArgs;\n  int *argPtr;\n  int index;\n  char formatSpecifier;\n  int *******currFormat;\n  uint digit;\n  int **nextFormat;\n  uint formatFlagMask;\n  uint currChar;\n  int formatIndex;\n  int ********pformatPtr;\n  int formatCount;\n  int *******remainingFormat;\n  int *argVal;\n  int *******widthArg;\n  uint decimalArg;\n  int *piVar22;\n  int *******remainingFormat;\n  undefined4 highVal;\n  int ********ppppppppiVar25;\n  bool formatFlag6;\n  longlong lVar27;\n  int *******width;\n  int *******precision;\n  int **argListPtr;\n  int result;\n  char *hexCharSet;\n  char signChar;\n  undefined paddingChar;\n  undefined hexPrefixFlag;\n  int ********nextArgFormat;\n  int formatIndex;\n  int *******remainingFormat;\n  undefined hexPrefixChar;\n  char zeroChar;\n  undefined boolFlag;\n  undefined argBuffer [4];\n  int *******formatArgsArr [16];\n  \n  if ((fmtStr != 0) && (*(int *)(fmtStr + 0x38) == 0)) {\n    __sinit();\n  }\n  formatFlagMask = (uint)*(ushort *)(args + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(args + 0xc) << 0x12)) {\n    formatFlagMask = formatFlagMask | 0x2000;\n    *(short *)(args + 0xc) = (short)formatFlagMask;\n    *(uint *)(args + 100) = *(uint *)(args + 100) & 0xffffdfff;\n  }\n  if (((int)(formatFlagMask << 0x1c) < 0) && (*(int *)(args + 0x10) != 0)) {\n    if ((formatFlagMask & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    index = __swsetup_r(fmtStr,args);\n    if (index != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(args + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(args + 0xe)) {\n    index = __sbprintf(fmtStr,args,format,argList);\n    return index;\n  }\nLAB_000828ee:\n  hexCharSet = (char *)0x0;\n  remainingFormat = (int *******)0x0;\n  formatIndex = 0;\n  result = 0;\n  pformatArgs = (int ********)argBuffer;\n  argListPtr = argList;\n  nextArgFormat = (int ********)argBuffer;\nLAB_00082902:\n  currFormat = format;\n  if ((*(char *)format != '\\0') && (*(char *)format != '%')) {\n    do {\n      currFormat = (int *******)((int)currFormat + 1);\n      if (*(char *)currFormat == '\\0') break;\n    } while (*(char *)currFormat != '%');\n    widthArg = (int *******)((int)currFormat - (int)format);\n    if (widthArg != (int *******)0x0) {\n      formatIndex = formatIndex + 1;\n      remainingFormat = (int *******)((int)remainingFormat + (int)widthArg);\n      *pformatArgs = format;\n      pformatArgs[1] = widthArg;\n      if (formatIndex < 8) {\n        pformatArgs = pformatArgs + 2;\n      }\n      else {\n        if (remainingFormat == (int *******)0x0) {\n          result = result + (int)widthArg;\n          formatIndex = 0;\n          pformatArgs = (int ********)argBuffer;\n          goto LAB_00082952;\n        }\n        index = __sprint_r_part_0(fmtStr,args,&nextArgFormat);\n        pformatArgs = (int ********)argBuffer;\n        if (index != 0) goto LAB_00083142;\n      }\n      result = result + (int)widthArg;\n    }\n  }\nLAB_00082952:\n  if (*(char *)currFormat != '\\0') {\n    signChar = '\\0';\n    currChar = (uint)*(byte *)((int)currFormat + 1);\n    formatFlagMask = 0;\n    leadingZeroFlag = false;\n    formatFlag = false;\n    formatLenFlag = false;\n    formatSignFlag = false;\n    formatFlag6 = false;\n    widthArg = (int *******)0x0;\n    precision = (int *******)0xffffffff;\n    format = (int *******)((int)currFormat + 1);\nLAB_00082976:\n    format = (int *******)((int)format + 1);\nLAB_0008297a:\n    switch(currChar) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (currChar != 0) {\n        width = (int *******)0x1;\n        precision = (int *******)0x1;\n        ppppppppiVar25 = (int ********)&hexPrefixChar;\n        hexPrefixChar = (char)currChar;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      formatSignFlag = true;\n      currChar = (uint)*(byte *)format;\n      goto LAB_00082976;\n    case 0x2a:\n      widthArg = (int *******)*argListPtr;\n      argListPtr = argListPtr + 1;\n      if ((int)widthArg < 0) {\n        widthArg = (int *******)-(int)widthArg;\n        goto switchD_00082984_caseD_2d;\n      }\n      currChar = (uint)*(byte *)format;\n      goto LAB_00082976;\n    case 0x2b:\n      currChar = (uint)*(byte *)format;\n      signChar = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      formatFlagMask = formatFlagMask | 4;\n      currChar = (uint)*(byte *)format;\n      goto LAB_00082976;\n    case 0x2e:\n      currChar = (uint)*(byte *)format;\n      currFormat = (int *******)((int)format + 1);\n      if (currChar == 0x2a) {\n        currChar = (uint)*(byte *)((int)format + 1);\n        precision = (int *******)*argListPtr;\n        argListPtr = argListPtr + 1;\n        format = currFormat;\n        if ((int)precision < 0) {\n          precision = (int *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      digit = currChar - 0x30;\n      if (digit < 10) {\n        decimalArg = 0;\n        do {\n          format = (int *******)((int)currFormat + 1);\n          currChar = (uint)*(byte *)currFormat;\n          decimalArg = digit + decimalArg * 10;\n          digit = currChar - 0x30;\n          currFormat = format;\n        } while (digit < 10);\n        precision = (int *******)(decimalArg | (int)decimalArg >> 0x1f);\n      }\n      else {\n        precision = (int *******)0x0;\n        format = currFormat;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      formatFlagMask = formatFlagMask | 0x80;\n      currChar = (uint)*(byte *)format;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      formatFlag = true;\n      if (formatLenFlag == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      argListPtr = (int **)((int)argListPtr + 7U & 0xfffffff8);\n      argVal = *argListPtr;\n      piVar22 = argListPtr[1];\n      argListPtr = argListPtr + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      formatFlag = true;\n      if (formatLenFlag != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      index = (uint)formatFlag << 4;\n      formatIndex = (uint)formatLenFlag << 5;\n      if ((formatFlag == 0) && (formatIndex = (uint)formatFlag6 << 6, formatFlag6 != 0)) {\n        argVal = (int *)(uint)*(ushort *)argListPtr;\n        argListPtr = argListPtr + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        index = formatIndex;\n        argVal = *argListPtr;\n        argListPtr = argListPtr + 1;\n        piVar22 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      formatFlag = true;\n      if (formatLenFlag != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((formatFlag) || (formatFlag6 == false)) {\n        index = 1;\n        argVal = *argListPtr;\n        argListPtr = argListPtr + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        piVar22 = (int *)0x0;\n        argVal = (int *)(uint)*(ushort *)argListPtr;\n        argListPtr = argListPtr + 1;\n        index = 1;\n      }\n      break;\n    case 0x58:\n      hexCharSet = \"0123456789ABCDEF\";\n      if (formatLenFlag == false) goto LAB_00082efa;\nLAB_00082d1a:\n      nextFormat = (int **)((int)argListPtr + 7U & 0xfffffff8);\n      argListPtr = nextFormat + 2;\n      argVal = *nextFormat;\n      piVar22 = nextFormat[1];\n      goto LAB_00082d2e;\n    case 99:\n      argVal = *argListPtr;\n      argListPtr = argListPtr + 1;\n      width = (int *******)0x1;\n      hexPrefixChar = SUB41(argVal,0);\n      precision = (int *******)0x1;\n      ppppppppiVar25 = (int ********)&hexPrefixChar;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (formatLenFlag != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((formatFlag == false) && (formatFlag6 != false)) {\n        argVal = (int *)(int)*(short *)argListPtr;\n        argListPtr = argListPtr + 1;\n        piVar22 = (int *)((int)argVal >> 0x1f);\n      }\n      else {\n        argVal = *argListPtr;\n        argListPtr = argListPtr + 1;\n        piVar22 = (int *)((int)argVal >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)piVar22 < 0) {\n        formatFlag6 = argVal != (int *)0x0;\n        argVal = (int *)-(int)argVal;\n        piVar22 = (int *)(-(int)piVar22 - (uint)formatFlag6);\n        signChar = '-';\n        signChar = '-';\n        index = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)precision) {\n        formatFlagMask = formatFlagMask & 0xffffff7f;\n      }\n      leadingZeroFlag = false;\n      currChar = (uint)argVal | (uint)piVar22;\n      index = 1;\n      signChar = signChar;\n      goto joined_r0x00082adc;\n    case 0x68:\n      formatFlag6 = true;\n      currChar = (uint)*(byte *)format;\n      goto LAB_00082976;\n    case 0x6c:\n      currChar = (uint)*(byte *)format;\n      if (currChar == 0x6c) {\n        formatLenFlag = true;\n        currChar = (uint)*(byte *)((int)format + 1);\n        format = (int *******)((int)format + 1);\n      }\n      else {\n        formatFlag = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (formatLenFlag == false) {\n        if (formatFlag == false) {\n          if (formatFlag6) {\n            argVal = *argListPtr;\n            argListPtr = argListPtr + 1;\n            *(short *)argVal = (short)result;\n          }\n          else {\n            argVal = *argListPtr;\n            argListPtr = argListPtr + 1;\n            *argVal = result;\n          }\n        }\n        else {\n          argVal = *argListPtr;\n          argListPtr = argListPtr + 1;\n          *argVal = result;\n        }\n      }\n      else {\n        argVal = *argListPtr;\n        argListPtr = argListPtr + 1;\n        *argVal = result;\n        argVal[1] = result >> 0x1f;\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (formatLenFlag == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      nextFormat = (int **)((int)argListPtr + 7U & 0xfffffff8);\n      argListPtr = nextFormat + 2;\n      argVal = *nextFormat;\n      piVar22 = nextFormat[1];\n      index = 0;\n      break;\n    case 0x70:\n      argVal = *argListPtr;\n      argListPtr = argListPtr + 1;\n      hexPrefixFlag = 0x78;\n      leadingZeroFlag = true;\n      piVar22 = (int *)0x0;\n      paddingChar = 0x30;\n      hexCharSet = \"0123456789abcdef\";\n      index = 2;\n      break;\n    case 0x71:\n      formatLenFlag = true;\n      currChar = (uint)*(byte *)format;\n      goto LAB_00082976;\n    case 0x73:\n      ppppppppiVar25 = (int ********)*argListPtr;\n      signChar = '\\0';\n      argListPtr = argListPtr + 1;\n      if (ppppppppiVar25 != (int ********)0x0) {\n        if ((int)precision < 0) {\n          precision = (int *******)strlen(ppppppppiVar25);\n          currFormat = (int *******)0x0;\n          signChar = signChar;\n        }\n        else {\n          index = memchr(ppppppppiVar25,0,precision);\n          signChar = signChar;\n          if (index == 0) {\n            currFormat = (int *******)0x0;\n          }\n          else {\n            remainingFormat = (int *******)(index - (int)ppppppppiVar25);\n            if ((int)precision <= (int)(int *******)(index - (int)ppppppppiVar25)) {\n              remainingFormat = precision;\n            }\n            currFormat = (int *******)0x0;\n            precision = remainingFormat;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((int *******)0x5 < precision) {\n        precision = (int *******)0x6;\n      }\n      width = (int *******)((uint)precision & ~((int)precision >> 0x1f));\n      ppppppppiVar25 = (int ********)&UNK_00085728;\nLAB_00082d76:\n      signChar = '\\0';\n      currFormat = (int *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!formatLenFlag) goto LAB_00082ce0;\nLAB_00082bc6:\n      nextFormat = (int **)((int)argListPtr + 7U & 0xfffffff8);\n      argListPtr = nextFormat + 2;\n      argVal = *nextFormat;\n      piVar22 = nextFormat[1];\n      index = 1;\n      break;\n    case 0x78:\n      hexCharSet = \"0123456789abcdef\";\n      if (formatLenFlag != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((formatFlag == false) && (formatFlag6 != false)) {\n        piVar22 = (int *)0x0;\n        argVal = (int *)(uint)*(ushort *)argListPtr;\n        argListPtr = argListPtr + 1;\n      }\n      else {\n        argVal = *argListPtr;\n        argListPtr = argListPtr + 1;\n        piVar22 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((formatSignFlag) && (((uint)argVal | (uint)piVar22) != 0)) {\n        leadingZeroFlag = true;\n        paddingChar = 0x30;\n        index = 2;\n        hexPrefixFlag = (char)currChar;\n      }\n      else {\n        index = 2;\n      }\n    }\n    signChar = '\\0';\n    signChar = '\\0';\nLAB_00082ace:\n    if (-1 < (int)precision) {\n      formatFlagMask = formatFlagMask & 0xffffff7f;\n    }\n    currChar = (uint)argVal | (uint)piVar22;\njoined_r0x00082adc:\n    lVar27 = CONCAT44(piVar22,argVal);\n    currFormat = precision;\n    if ((currChar == 0) && (precision == (int *******)0x0)) {\n      ppppppppiVar25 = (int ********)argBuffer;\n      if ((index != 0) || (!formatSignFlag)) goto LAB_00082b04;\n      ppppppppiVar25 = (int ********)(&zeroChar + 1);\n      boolFlag = '0';\n      goto LAB_00082afe;\n    }\n    if (index == 1) {\n      if (piVar22 != (int *)0x0 || (int *)0x9 < argVal) {\n        pformatPtr = (int ********)(&zeroChar + 1);\n        do {\n          ppppppppiVar25 = pformatPtr;\n          highVal = (undefined4)((ulonglong)lVar27 >> 0x20);\n          formatSpecifier = '\\n';\n          __aeabi_uldivmod((int)lVar27,highVal,10,0);\n          *(char *)ppppppppiVar25 = formatSpecifier + '0';\n          lVar27 = __aeabi_uldivmod((int)lVar27,highVal,10,0);\n          pformatPtr = (int ********)((int)ppppppppiVar25 + -1);\n        } while (lVar27 != 0);\n        precision = (int *******)((int)argBuffer - (int)ppppppppiVar25);\n        goto LAB_00082b04;\n      }\n      boolFlag = (char)argVal + '0';\n      ppppppppiVar25 = (int ********)(&zeroChar + 1);\n      goto LAB_00083282;\n    }\n    pformatPtr = (int ********)(&zeroChar + 1);\n    if (index != 2) goto LAB_000830e2;\n    do {\n      ppppppppiVar25 = pformatPtr;\n      currChar = (uint)argVal & 0xf;\n      argVal = (int *)((uint)argVal >> 4 | (int)piVar22 << 0x1c);\n      piVar22 = (int *)((uint)piVar22 >> 4);\n      *(char *)ppppppppiVar25 = hexCharSet[currChar];\n      pformatPtr = (int ********)((int)ppppppppiVar25 + -1);\n    } while (((uint)argVal | (uint)piVar22) != 0);\n    precision = (int *******)((int)argBuffer - (int)ppppppppiVar25);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (remainingFormat != (int *******)0x0) {\n    __sprint_r_part_0(fmtStr,args,&nextArgFormat);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(args + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return result;\nLAB_000830e2:\n  do {\n    ppppppppiVar25 = pformatPtr;\n    argPtr = (int *)((uint)argVal >> 3 | (int)piVar22 << 0x1d);\n    piVar22 = (int *)((uint)piVar22 >> 3);\n    index = ((uint)argVal & 7) + 0x30;\n    *(char *)ppppppppiVar25 = (char)index;\n    pformatPtr = (int ********)((int)ppppppppiVar25 + -1);\n    argVal = argPtr;\n  } while (((uint)argPtr | (uint)piVar22) != 0);\n  if (formatSignFlag) {\n    if (index == 0x30) {\nLAB_00082afe:\n      precision = (int *******)((int)argBuffer - (int)ppppppppiVar25);\n    }\n    else {\n      *(undefined *)((int)ppppppppiVar25 + -1) = 0x30;\n      ppppppppiVar25 = pformatPtr;\n      precision = (int *******)((int)argBuffer - (int)pformatPtr);\n    }\n  }\n  else {\nLAB_00083282:\n    precision = (int *******)((int)argBuffer - (int)ppppppppiVar25);\n  }\nLAB_00082b04:\n  width = precision;\n  if ((int)precision < (int)currFormat) {\n    width = currFormat;\n  }\n  if (signChar != '\\0') {\n    width = (int *******)((int)width + 1);\n  }\nLAB_00082b1e:\n  if (leadingZeroFlag) {\n    width = (int *******)((int)width + 2);\n  }\n  if ((formatFlagMask == 0) &&\n     (remainingFormat = (int *******)((int)widthArg - (int)width), 0 < (int)remainingFormat)) {\n    if ((int)remainingFormat < 0x11) {\n      formatIndex = formatIndex + 1;\n    }\n    else {\n      do {\n        remainingFormat = remainingFormat;\n        index = formatIndex + 1;\n        remainingFormat = remainingFormat + 4;\n        *pformatArgs = (int *******)0x856f0;\n        pformatArgs[1] = (int *******)0x10;\n        if (index < 8) {\n          formatIndex = formatIndex + 2;\n          pformatArgs = pformatArgs + 2;\n          formatIndex = index;\n        }\n        else if (remainingFormat == (int *******)0x0) {\n          formatIndex = 1;\n          pformatArgs = (int ********)argBuffer;\n          formatIndex = 0;\n        }\n        else {\n          formatIndex = index;\n          index = __sprint_r_part_0(fmtStr,args,&nextArgFormat);\n          if (index != 0) goto LAB_00083142;\n          formatIndex = formatIndex + 1;\n          pformatArgs = (int ********)argBuffer;\n        }\n        remainingFormat = remainingFormat + -4;\n      } while (0x10 < (int)remainingFormat);\n      remainingFormat = remainingFormat + -4;\n      formatIndex = formatIndex;\n    }\n    remainingFormat = (int *******)((int)remainingFormat + (int)remainingFormat);\n    *pformatArgs = (int *******)0x856f0;\n    pformatArgs[1] = remainingFormat;\n    if (formatIndex < 8) {\n      index = formatIndex + 1;\n      pformatArgs = pformatArgs + 2;\n    }\n    else if (remainingFormat == (int *******)0x0) {\n      index = 1;\n      formatIndex = 0;\n      pformatArgs = (int ********)argBuffer;\n    }\n    else {\n      index = __sprint_r_part_0(fmtStr,args,&nextArgFormat);\n      if (index != 0) goto LAB_00083142;\n      index = formatIndex + 1;\n      pformatArgs = (int ********)argBuffer;\n    }\n  }\n  else {\n    index = formatIndex + 1;\n  }\n  formatIndex = index;\n  if (signChar != '\\0') {\n    remainingFormat = (int *******)((int)remainingFormat + 1);\n    formatIndex = 1;\n    *pformatArgs = (int *******)&signChar;\n    pformatArgs[1] = (int *******)0x1;\n    formatIndex = index;\n    if (index < 8) {\n      formatIndex = index + 1;\n      pformatArgs = pformatArgs + 2;\n    }\n    else if (remainingFormat == (int *******)0x0) {\n      formatIndex = 0;\n      pformatArgs = (int ********)argBuffer;\n    }\n    else {\n      index = __sprint_r_part_0(fmtStr,args,&nextArgFormat);\n      if (index != 0) goto LAB_00083142;\n      formatIndex = formatIndex + 1;\n      pformatArgs = (int ********)argBuffer;\n    }\n  }\n  index = formatIndex;\n  formatCount = formatIndex;\n  if (leadingZeroFlag) {\n    remainingFormat = (int *******)((int)remainingFormat + 2);\n    *pformatArgs = (int *******)&paddingChar;\n    pformatArgs[1] = (int *******)0x2;\n    if (formatIndex < 8) {\n      index = formatIndex + 1;\n      formatCount = formatIndex;\n      pformatArgs = pformatArgs + 2;\n    }\n    else if (remainingFormat == (int *******)0x0) {\n      index = 1;\n      formatCount = 0;\n      pformatArgs = (int ********)argBuffer;\n    }\n    else {\n      formatIndex = formatIndex;\n      index = __sprint_r_part_0(fmtStr,args,&nextArgFormat);\n      if (index != 0) goto LAB_00083142;\n      index = formatIndex + 1;\n      formatCount = formatIndex;\n      pformatArgs = (int ********)argBuffer;\n    }\n  }\n  formatIndex = formatCount;\n  if ((formatFlagMask == 0x80) &&\n     (remainingFormat = (int *******)((int)widthArg - (int)width), 0 < (int)remainingFormat)) {\n    if (0x10 < (int)remainingFormat) {\n      do {\n        while( true ) {\n          remainingFormat = remainingFormat;\n          formatIndex = formatCount + 1;\n          remainingFormat = remainingFormat + 4;\n          *pformatArgs = (int *******)\"0000000000000000\";\n          pformatArgs[1] = (int *******)0x10;\n          if (7 < formatIndex) break;\n          index = formatCount + 2;\n          pformatArgs = pformatArgs + 2;\nLAB_000831f2:\n          formatCount = formatIndex;\n          remainingFormat = remainingFormat + -4;\n          if ((int)(remainingFormat + -4) < 0x11) goto LAB_00083218;\n        }\n        if (remainingFormat != (int *******)0x0) {\n          index = __sprint_r_part_0(fmtStr,args,&nextArgFormat);\n          if (index == 0) {\n            index = formatIndex + 1;\n            pformatArgs = (int ********)argBuffer;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        index = 1;\n        formatCount = 0;\n        remainingFormat = remainingFormat + -4;\n        pformatArgs = (int ********)argBuffer;\n      } while (0x10 < (int)(remainingFormat + -4));\nLAB_00083218:\n      remainingFormat = remainingFormat + -4;\n    }\n    remainingFormat = (int *******)((int)remainingFormat + (int)remainingFormat);\n    *pformatArgs = (int *******)\"0000000000000000\";\n    pformatArgs[1] = remainingFormat;\n    formatIndex = index;\n    if (index < 8) {\n      index = index + 1;\n      pformatArgs = pformatArgs + 2;\n    }\n    else if (remainingFormat == (int *******)0x0) {\n      index = 1;\n      formatIndex = 0;\n      pformatArgs = (int ********)argBuffer;\n    }\n    else {\n      index = __sprint_r_part_0(fmtStr,args,&nextArgFormat);\n      if (index != 0) goto LAB_00083142;\n      index = formatIndex + 1;\n      pformatArgs = (int ********)argBuffer;\n    }\n  }\n  currFormat = (int *******)((int)currFormat - (int)precision);\n  pformatPtr = (int ********)argBuffer;\n  if ((int)currFormat < 1) {\nLAB_0008302a:\n    remainingFormat = (int *******)((int)remainingFormat + (int)precision);\n    *pformatArgs = (int *******)ppppppppiVar25;\n    pformatArgs[1] = precision;\n    precision = remainingFormat;\n    formatIndex = index;\n    if (index < 8) goto LAB_000831be;\n    if (remainingFormat == (int *******)0x0) {\n      formatIndex = 0;\n    }\n    else {\n      index = __sprint_r_part_0(fmtStr,args,&nextArgFormat);\n      if (index != 0) goto LAB_00083142;\n    }\n  }\n  else {\n    formatIndex = formatIndex;\n    if (0x10 < (int)currFormat) {\n      do {\n        while( true ) {\n          remainingFormat = currFormat;\n          formatIndex = formatIndex + 1;\n          remainingFormat = remainingFormat + 4;\n          *pformatArgs = (int *******)\"0000000000000000\";\n          pformatArgs[1] = (int *******)0x10;\n          if (7 < formatIndex) break;\n          index = formatIndex + 2;\n          pformatArgs = pformatArgs + 2;\nLAB_00082fe6:\n          formatIndex = formatIndex;\n          currFormat = remainingFormat + -4;\n          if ((int)(remainingFormat + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (remainingFormat != (int *******)0x0) {\n          index = __sprint_r_part_0(fmtStr,args,&nextArgFormat);\n          if (index == 0) {\n            index = formatIndex + 1;\n            pformatArgs = (int ********)argBuffer;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        index = 1;\n        pformatArgs = (int ********)argBuffer;\n        formatIndex = 0;\n        currFormat = remainingFormat + -4;\n      } while (0x10 < (int)(remainingFormat + -4));\nLAB_0008300e:\n      currFormat = remainingFormat + -4;\n    }\n    remainingFormat = (int *******)((int)remainingFormat + (int)currFormat);\n    *pformatArgs = (int *******)\"0000000000000000\";\n    pformatArgs[1] = currFormat;\n    if (index < 8) {\n      index = index + 1;\n      pformatArgs = pformatArgs + 2;\n      goto LAB_0008302a;\n    }\n    if (remainingFormat != (int *******)0x0) {\n      formatIndex = index;\n      index = __sprint_r_part_0(fmtStr,args,&nextArgFormat);\n      if (index != 0) goto LAB_00083142;\n      index = formatIndex + 1;\n      pformatArgs = (int ********)argBuffer;\n      goto LAB_0008302a;\n    }\n    formatArgsArr[0] = precision;\n    formatIndex = 1;\n    pformatArgs = (int ********)argBuffer;\n    argBuffer = (undefined  [4])ppppppppiVar25;\nLAB_000831be:\n    pformatPtr = pformatArgs + 2;\n    remainingFormat = precision;\n  }\n  if (((formatFlagMask & 4) != 0) &&\n     (currFormat = (int *******)((int)widthArg - (int)width), 0 < (int)currFormat)) {\n    index = formatIndex;\n    if ((int)currFormat < 0x11) {\n      formatIndex = formatIndex + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          formatIndex = index + 1;\n          remainingFormat = remainingFormat + 4;\n          *pformatPtr = (int *******)0x856f0;\n          pformatPtr[1] = (int *******)0x10;\n          if (7 < formatIndex) break;\n          formatIndex = index + 2;\n          pformatPtr = pformatPtr + 2;\nLAB_0008307a:\n          currFormat = currFormat + -4;\n          index = formatIndex;\n          if ((int)currFormat < 0x11) goto LAB_000830a2;\n        }\n        if (remainingFormat != (int *******)0x0) {\n          index = __sprint_r_part_0(fmtStr,args,&nextArgFormat);\n          if (index == 0) {\n            formatIndex = formatIndex + 1;\n            pformatPtr = (int ********)argBuffer;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        currFormat = currFormat + -4;\n        formatIndex = 1;\n        index = 0;\n        pformatPtr = (int ********)argBuffer;\n      } while (0x10 < (int)currFormat);\n    }\nLAB_000830a2:\n    remainingFormat = (int *******)((int)remainingFormat + (int)currFormat);\n    *pformatPtr = (int *******)0x856f0;\n    pformatPtr[1] = currFormat;\n    formatIndex = formatIndex;\n    if (7 < formatIndex) {\n      if (remainingFormat == (int *******)0x0) {\n        if ((int)width < (int)widthArg) {\n          width = widthArg;\n        }\n        result = result + (int)width;\n        goto LAB_00083186;\n      }\n      index = __sprint_r_part_0(fmtStr,args,&nextArgFormat);\n      if (index != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)width < (int)widthArg) {\n    width = widthArg;\n  }\n  result = result + (int)width;\n  if ((remainingFormat != (int *******)0x0) &&\n     (index = __sprint_r_part_0(fmtStr,args,&nextArgFormat), index != 0)) goto LAB_00083142;\nLAB_00083186:\n  formatIndex = 0;\n  pformatArgs = (int ********)argBuffer;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  digit = currChar - 0x30;\n  widthArg = (int *******)0x0;\n  currFormat = format;\n  do {\n    format = (int *******)((int)currFormat + 1);\n    currChar = (uint)*(byte *)currFormat;\n    widthArg = (int *******)(digit + (int)widthArg * 10);\n    digit = currChar - 0x30;\n    currFormat = format;\n  } while (digit < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  currChar = (uint)*(byte *)format;\n  if (signChar == '\\0') {\n    signChar = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "renaming": {
                "FUN_0008289c": "format_string_0008289c",
                "param_1": "fmtStr",
                "param_2": "args",
                "param_3": "format",
                "param_4": "argList",
                "bVar1": "formatLenFlag",
                "bVar2": "formatFlag",
                "bVar3": "formatSignFlag",
                "cVar4": "signChar",
                "bVar5": "leadingZeroFlag",
                "pppppppiVar6": "formatArgs",
                "piVar7": "argPtr",
                "iVar8": "index",
                "cVar9": "formatSpecifier",
                "pppppppiVar10": "currFormat",
                "uVar11": "digit",
                "ppiVar12": "nextFormat",
                "uVar13": "formatFlagMask",
                "uVar14": "currChar",
                "uVar21": "decimalArg",
                "iVar15": "formatIndex",
                "pppppppiVar16": "formatPtr",
                "iVar17": "formatCount",
                "pppppppiVar18": "remainingFormat",
                "piVar19": "argVal",
                "pppppppiVar20": "widthArg",
                "uVar24": "highVal",
                "pppppppiVar23": "remainingFormat",
                "local_dc": "width",
                "local_d4": "precision",
                "local_c8": "argListPtr",
                "local_c4": "result",
                "local_c0": "hexCharSet",
                "local_a1": "signChar",
                "local_a0": "paddingChar",
                "local_9f": "hexPrefixFlag",
                "local_9c": "nextArgFormat",
                "local_98": "formatIndex",
                "local_94": "remainingFormat",
                "local_90": "hexPrefixChar",
                "cStack_6a": "zeroChar",
                "local_69": "boolFlag",
                "local_68": "argBuffer",
                "local_64": "formatArgsArr"
            },
            "calling": [
                "__sbprintf",
                "iprintf",
                "fiprintf"
            ],
            "called": [
                "__aeabi_uldivmod",
                "__sbprintf",
                "strlen",
                "__swsetup_r",
                "__sinit",
                "__sprint_r.part.0",
                "memchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000834f0": {
            "entrypoint": "0x000834f0",
            "current_name": "print_and_flush_data_000834f0",
            "code": "\nint print_and_flush_data_000834f0(undefined4 file_pointer,int data_pointer)\n\n{\n  int print_result;\n  int flush_result;\n  undefined *format_string [2];\n  undefined4 format_string_size;\n  ushort masked_value;\n  undefined2 value;\n  undefined *buffer;\n  undefined4 flushed_size;\n  undefined4 offset;\n  undefined4 offset2;\n  undefined4 address;\n  undefined4 temp_variable;\n  undefined data_buffer [1024];\n  \n  temp_variable = *(undefined4 *)(data_pointer + 100);\n  offset2 = *(undefined4 *)(data_pointer + 0x1c);\n  value = *(undefined2 *)(data_pointer + 0xe);\n  address = *(undefined4 *)(data_pointer + 0x24);\n  format_string[0] = data_buffer;\n  masked_value = *(ushort *)(data_pointer + 0xc) & 0xfffd;\n  format_string_size = 0x400;\n  flushed_size = 0x400;\n  offset = 0;\n  buffer = format_string[0];\n  print_result = _vfiprintf_r(file_pointer,format_string);\n  if ((-1 < print_result) && (flush_result = _fflush_r(file_pointer,format_string), flush_result != 0)) {\n    print_result = -1;\n  }\n  if ((int)((uint)masked_value << 0x19) < 0) {\n    *(ushort *)(data_pointer + 0xc) = *(ushort *)(data_pointer + 0xc) | 0x40;\n  }\n  return print_result;\n}\n\n",
            "renaming": {
                "FUN_000834f0": "print_and_flush_data_000834f0",
                "param_1": "file_pointer",
                "param_2": "data_pointer",
                "iVar1": "print_result",
                "iVar2": "flush_result",
                "local_488": "format_string",
                "local_480": "format_string_size",
                "local_47c": "masked_value",
                "local_47a": "value",
                "local_478": "buffer",
                "local_474": "flushed_size",
                "local_470": "offset",
                "local_46c": "offset2",
                "local_464": "address",
                "local_424": "temp_variable",
                "auStack_420": "data_buffer"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "_fflush_r",
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008356c": {
            "entrypoint": "0x0008356c",
            "current_name": "initialize_buffer_0008356c",
            "code": "\nundefined4 initializeBuffer_0008356c(undefined4 *outputStatus,int *inputBuffer)\n\n{\n  int tempVar1;\n  int tempVar2;\n  uint tempVar3;\n  ushort tempVar4;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    __sinit();\n  }\n  tempVar4 = *(ushort *)(inputBuffer + 3);\n  tempVar3 = (uint)tempVar4;\n  if ((int)(tempVar3 << 0x1c) < 0) {\n    tempVar2 = inputBuffer[4];\n  }\n  else {\n    if (-1 < (int)(tempVar3 << 0x1b)) {\n      *outputStatus = 9;\n      *(ushort *)(inputBuffer + 3) = tempVar4 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(tempVar3 << 0x1d) < 0) {\n      if ((int *)inputBuffer[0xc] != (int *)0x0) {\n        if ((int *)inputBuffer[0xc] != inputBuffer + 0x10) {\n          _free_r(outputStatus);\n          tempVar4 = *(ushort *)(inputBuffer + 3);\n        }\n        inputBuffer[0xc] = 0;\n      }\n      tempVar2 = inputBuffer[4];\n      tempVar4 = tempVar4 & 0xffdb;\n      *inputBuffer = tempVar2;\n      inputBuffer[1] = 0;\n    }\n    else {\n      tempVar2 = inputBuffer[4];\n    }\n    *(ushort *)(inputBuffer + 3) = tempVar4 | 8;\n    tempVar3 = (uint)(tempVar4 | 8);\n  }\n  if ((tempVar2 == 0) && ((tempVar3 & 0x280) != 0x200)) {\n    __smakebuf_r(outputStatus,inputBuffer);\n    tempVar3 = (uint)*(ushort *)(inputBuffer + 3);\n    tempVar2 = inputBuffer[4];\n  }\n  if ((tempVar3 & 1) == 0) {\n    tempVar1 = 0;\n    if (-1 < (int)(tempVar3 << 0x1e)) {\n      tempVar1 = inputBuffer[5];\n    }\n    inputBuffer[2] = tempVar1;\n  }\n  else {\n    inputBuffer[6] = -inputBuffer[5];\n    inputBuffer[2] = 0;\n  }\n  if ((tempVar2 == 0) && ((int)((uint)*(ushort *)(inputBuffer + 3) << 0x18) < 0)) {\n    *(ushort *)(inputBuffer + 3) = *(ushort *)(inputBuffer + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0008356c": "initialize_buffer_0008356c",
                "param_1": "outputStatus",
                "param_2": "inputBuffer",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4"
            },
            "calling": [
                "__sfvwrite_r",
                "__swbuf_r",
                "_vfiprintf_r"
            ],
            "called": [
                "_free_r",
                "__smakebuf_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000836d8": {
            "entrypoint": "0x000836d8",
            "current_name": "FUNC_000836d8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x00083630) */\n/* WARNING: Removing unreachable block (ram,0x000836c4) */\n/* WARNING: Removing unreachable block (ram,0x00083642) */\n/* WARNING: Removing unreachable block (ram,0x00083648) */\n/* WARNING: Removing unreachable block (ram,0x00083654) */\n/* WARNING: Removing unreachable block (ram,0x0008366e) */\n/* WARNING: Removing unreachable block (ram,0x0008364c) */\n/* WARNING: Removing unreachable block (ram,0x00083686) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n/* WARNING: Removing unreachable block (ram,0x00083688) */\n\nvoid FUNC_000836d8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836d8": "FUNC_000836d8"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000836ec": {
            "entrypoint": "0x000836ec",
            "current_name": "raise_and_exit_000836ec",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n\nvoid raise_and_exit_000836ec(void)\n\n{\n  dword *destination_array;\n  dword exit_code;\n  int index;\n  code *jump_table;\n  \n  raise(6);\n  jump_table = (code *)0x836fb;\n  exit_code = _exit(1);\n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  index = *(int *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  destination_array = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < index) {\n    destination_array = (dword *)malloc(400);\n    if (destination_array == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    *destination_array = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    destination_array[1] = 0;\n    index = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)destination_array;\n    destination_array[0x62] = 0;\n    destination_array[99] = 0;\n  }\n  destination_array[1] = index + 1;\n  destination_array[index + 2] = exit_code;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836ec": "raise_and_exit_000836ec",
                "pdVar1": "destination_array",
                "dVar2": "exit_code",
                "iVar3": "index",
                "UNRECOVERED_JUMPTABLE_00": "jump_table"
            },
            "calling": [
                "__assert_func"
            ],
            "called": [
                "_exit",
                "raise",
                "malloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083850": {
            "entrypoint": "0x00083850",
            "current_name": "process_data_00083850",
            "code": "\nundefined4 processData_00083850(int *input,int *output)\n\n{\n  int *tempPtr1;\n  int tempVar1;\n  ushort tempVar2;\n  uint tempVar3;\n  int tempVar4;\n  code *funcPtr;\n  undefined4 returnValue;\n  int tempVar5;\n  \n  if ((input != (int *)0x0) && (input[0xe] == 0)) {\n    __sinit();\n  }\n  if (*(short *)(output + 3) == 0) {\n    return 0;\n  }\n  tempVar2 = *(ushort *)(output + 3);\n  if ((int)((uint)tempVar2 << 0x1c) < 0) {\n    tempVar5 = output[4];\n    if (tempVar5 == 0) {\n      return 0;\n    }\n    tempVar1 = *output;\n    if ((tempVar2 & 3) == 0) {\n      tempVar4 = output[5];\n    }\n    else {\n      tempVar4 = 0;\n    }\n    *output = tempVar5;\n    tempVar1 = tempVar1 - tempVar5;\n    output[2] = tempVar4;\n    do {\n      if (tempVar1 < 1) {\n        return 0;\n      }\n      tempVar4 = (*(code *)output[9])(input,output[7],tempVar5,tempVar1,returnValue);\n      tempVar1 = tempVar1 - tempVar4;\n      tempVar5 = tempVar5 + tempVar4;\n    } while (0 < tempVar4);\nLAB_000837c8:\n    *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(output + 3) = tempVar2 | 0x800;\n  if ((output[1] < 1) && (output[0xf] < 1)) {\n    return 0;\n  }\n  funcPtr = (code *)output[10];\n  if (funcPtr == (code *)0x0) {\n    return 0;\n  }\n  tempVar3 = (uint)(tempVar2 | 0x800);\n  tempVar5 = *input;\n  *input = 0;\n  if ((tempVar2 & 0x1000) == 0) {\n    tempVar1 = (*funcPtr)(input,output[7],tempVar3 & 0x1000,1);\n    if ((tempVar1 == -1) && (tempVar4 = *input, tempVar4 != 0)) {\n      if ((tempVar4 == 0x1d) || (tempVar4 == 0x16)) {\n        *input = tempVar5;\n        return 0;\n      }\n      goto LAB_000837c8;\n    }\n    tempVar3 = (uint)*(ushort *)(output + 3);\n    funcPtr = (code *)output[10];\n  }\n  else {\n    tempVar1 = output[0x14];\n  }\n  if (((int)(tempVar3 << 0x1d) < 0) && (tempVar1 = tempVar1 - output[1], output[0xc] != 0)) {\n    tempVar1 = tempVar1 - output[0xf];\n  }\n  tempVar1 = (*funcPtr)(input,output[7],tempVar1,0);\n  if (tempVar1 == -1) {\n    tempVar4 = *input;\n    if (tempVar4 != 0) {\n      if ((tempVar4 != 0x1d) && (tempVar4 != 0x16)) {\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(output + 3) = *(ushort *)(output + 3) & 0xf7ff;\n      *output = output[4];\n      output[1] = 0;\n      goto LAB_00083774;\n    }\n    tempVar2 = *(ushort *)(output + 3) & 0xf7ff;\n    output[1] = 0;\n    *(ushort *)(output + 3) = tempVar2;\n    *output = output[4];\n  }\n  else {\n    tempVar2 = *(ushort *)(output + 3) & 0xf7ff;\n    *output = output[4];\n    *(ushort *)(output + 3) = tempVar2;\n    output[1] = 0;\n  }\n  if ((int)((uint)tempVar2 << 0x13) < 0) {\n    output[0x14] = tempVar1;\n  }\nLAB_00083774:\n  tempPtr1 = (int *)output[0xc];\n  *input = tempVar5;\n  if (tempPtr1 == (int *)0x0) {\n    return 0;\n  }\n  if (tempPtr1 != output + 0x10) {\n    _free_r(input);\n  }\n  output[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083850": "process_data_00083850",
                "param_1": "input",
                "param_2": "output",
                "piVar1": "tempPtr1",
                "iVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "tempVar3",
                "iVar5": "tempVar4",
                "pcVar6": "funcPtr",
                "unaff_r4": "returnValue",
                "iVar7": "tempVar5"
            },
            "calling": [
                "__sfvwrite_r",
                "__sbprintf",
                "fclose",
                "__swbuf_r"
            ],
            "called": [
                "_free_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083888": {
            "entrypoint": "0x00083888",
            "current_name": "initialize_data_structures_00083888",
            "code": "\nvoid initializeDataStructures_00083888(int dataStructAddress)\n\n{\n  undefined4 *dataStruct1;\n  undefined4 *dataStruct2;\n  \n  if (*(int *)(dataStructAddress + 0x38) == 0) {\n    dataStruct1 = *(undefined4 **)(dataStructAddress + 4);\n    *(undefined **)(dataStructAddress + 0x3c) = &LAB_0008387c_1;\n    *(undefined4 *)(dataStructAddress + 0x2e4) = 3;\n    *(int *)(dataStructAddress + 0x2e8) = dataStructAddress + 0x2ec;\n    *(undefined4 *)(dataStructAddress + 0x2e0) = 0;\n    *(undefined2 *)(dataStruct1 + 3) = 4;\n    *dataStruct1 = 0;\n    dataStruct1[1] = 0;\n    dataStruct1[2] = 0;\n    dataStruct1[0x19] = 0;\n    *(undefined2 *)((int)dataStruct1 + 0xe) = 0;\n    dataStruct1[4] = 0;\n    dataStruct1[5] = 0;\n    dataStruct1[6] = 0;\n    memset(dataStruct1 + 0x17,0,8);\n    dataStruct2 = *(undefined4 **)(dataStructAddress + 8);\n    dataStruct1[7] = dataStruct1;\n    dataStruct1[8] = 0x84221;\n    dataStruct1[9] = 0x84245;\n    dataStruct1[10] = 0x8427d;\n    dataStruct1[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)((int)dataStruct2 + 0xe) = 1;\n    *(undefined2 *)(dataStruct2 + 3) = 9;\n    *dataStruct2 = 0;\n    dataStruct2[1] = 0;\n    dataStruct2[2] = 0;\n    dataStruct2[0x19] = 0;\n    dataStruct2[4] = 0;\n    dataStruct2[5] = 0;\n    dataStruct2[6] = 0;\n    memset(dataStruct2 + 0x17,0,8);\n    dataStruct1 = *(undefined4 **)(dataStructAddress + 0xc);\n    dataStruct2[7] = dataStruct2;\n    dataStruct2[8] = 0x84221;\n    dataStruct2[9] = 0x84245;\n    dataStruct2[10] = 0x8427d;\n    dataStruct2[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)(dataStruct1 + 3) = 0x12;\n    *(undefined2 *)((int)dataStruct1 + 0xe) = 2;\n    *dataStruct1 = 0;\n    dataStruct1[1] = 0;\n    dataStruct1[2] = 0;\n    dataStruct1[0x19] = 0;\n    dataStruct1[4] = 0;\n    dataStruct1[5] = 0;\n    dataStruct1[6] = 0;\n    memset(dataStruct1 + 0x17,0,8);\n    dataStruct1[7] = dataStruct1;\n    dataStruct1[8] = 0x84221;\n    dataStruct1[9] = 0x84245;\n    dataStruct1[10] = 0x8427d;\n    dataStruct1[0xb] = &LAB_0008429c_1;\n    *(undefined4 *)(dataStructAddress + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "dataStructAddress",
                "puVar1": "dataStruct1",
                "puVar2": "dataStruct2"
            },
            "calling": [
                "fclose",
                "__swsetup_r",
                "__swbuf_r",
                "_fflush_r",
                "_vfiprintf_r"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008397c": {
            "entrypoint": "0x0008397c",
            "current_name": "FUNC_0008397c",
            "code": "\nvoid FUNC_0008397c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008397c": "FUNC_0008397c"
            },
            "calling": [
                "fclose"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083980": {
            "entrypoint": "0x00083980",
            "current_name": "FUNC_00083980",
            "code": "\nvoid FUNC_00083980(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083980": "FUNC_00083980"
            },
            "calling": [
                "fclose"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000839b4": {
            "entrypoint": "0x000839b4",
            "current_name": "convert_and_print_000839b4",
            "code": "\nuint convertAndPrint_000839b4(undefined4 param1,uint size,byte **outputBuffer)\n\n{\n  int max_mb_len;\n  uint convertResult;\n  uint convertedChar;\n  byte *bufferEnd;\n  uint index;\n  byte ch;\n  byte charBuffer [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(outputBuffer + 3) << 0x12)) {\n    *(ushort *)(outputBuffer + 3) = *(ushort *)(outputBuffer + 3) | 0x2000;\n    outputBuffer[0x19] = (byte *)((uint)outputBuffer[0x19] | 0x2000);\n  }\n  max_mb_len = __locale_mb_cur_max();\n  if ((max_mb_len == 1) && (size - 1 < 0xff)) {\n    convertedChar = size & 0xff;\n    ch = (byte)convertedChar;\n    convertResult = 1;\n  }\n  else {\n    convertResult = _wcrtomb_r(param1,&ch,size,outputBuffer + 0x17);\n    if (convertResult == 0xffffffff) {\n      *(ushort *)(outputBuffer + 3) = *(ushort *)(outputBuffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (convertResult == 0) {\n      return size;\n    }\n    convertedChar = (uint)ch;\n  }\n  index = 0;\n  do {\n    bufferEnd = outputBuffer[2] + -1;\n    outputBuffer[2] = bufferEnd;\n    if ((int)bufferEnd < 0) {\n      if ((int)outputBuffer[6] <= (int)bufferEnd) {\n        **outputBuffer = (byte)convertedChar;\n        bufferEnd = *outputBuffer;\n        convertedChar = (uint)*bufferEnd;\n        if (convertedChar != 10) goto LAB_00083a04;\n      }\n      max_mb_len = __swbuf_r(param1,convertedChar,outputBuffer);\n      if (max_mb_len == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **outputBuffer = (byte)convertedChar;\n      bufferEnd = *outputBuffer;\nLAB_00083a04:\n      *outputBuffer = bufferEnd + 1;\n    }\n    if (convertResult <= index + 1) {\n      return size;\n    }\n    convertedChar = (uint)charBuffer[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000839b4": "convert_and_print_000839b4",
                "param_1": "param1",
                "param_2": "size",
                "param_3": "outputBuffer",
                "iVar1": "max_mb_len",
                "uVar2": "convertResult",
                "uVar3": "convertedChar",
                "pbVar4": "bufferEnd",
                "uVar5": "index",
                "local_1c": "ch",
                "abStack_1b": "charBuffer"
            },
            "calling": [
                "__sprint_r.part.0"
            ],
            "called": [
                "__locale_mb_cur_max",
                "_wcrtomb_r",
                "__swbuf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083a74": {
            "entrypoint": "0x00083a74",
            "current_name": "resize_memory_block_00083a74",
            "code": "\nundefined4 resizeMemoryBlock_00083a74(undefined4 heapLock,int currentBlockSize)\n\n{\n  int newBlockOffset;\n  uint originalBlockSize;\n  int newBlockSize;\n  \n  __malloc_lock();\n  originalBlockSize = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  newBlockSize = ((originalBlockSize - currentBlockSize) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < newBlockSize) {\n    newBlockOffset = _sbrk_r(heapLock,0);\n    if (newBlockOffset == Elf32_Rel_ARRAY_20070000[141].r_info + originalBlockSize) {\n      newBlockOffset = _sbrk_r(heapLock,-newBlockSize);\n      if (newBlockOffset != -1) {\n        DAT_2007121c = DAT_2007121c - newBlockSize;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = originalBlockSize - newBlockSize | 1;\n        __malloc_unlock(heapLock);\n        return 1;\n      }\n      newBlockSize = _sbrk_r(heapLock,0);\n      if (0xf < (int)(newBlockSize - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_2007121c = newBlockSize - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             newBlockSize - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  __malloc_unlock(heapLock);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083a74": "resize_memory_block_00083a74",
                "param_1": "heapLock",
                "param_2": "currentBlockSize",
                "iVar1": "newBlockOffset",
                "uVar2": "originalBlockSize",
                "iVar3": "newBlockSize"
            },
            "calling": [
                "_free_r"
            ],
            "called": [
                "_sbrk_r",
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b10": {
            "entrypoint": "0x00083b10",
            "current_name": "restructure_function_00083b10",
            "code": "\nvoid restructureFunction_00083b10(undefined4 lock,int pointer)\n\n{\n  int index;\n  bool flag;\n  uint value;\n  dword address;\n  int tempIndex;\n  uint size;\n  dword tempAddress;\n  uint modifiedSize;\n  dword nextAddress;\n  \n  if (pointer == 0) {\n    return;\n  }\n  __malloc_lock();\n  value = *(uint *)(pointer + -4);\n  tempAddress = pointer - 8;\n  size = value & 0xfffffffe;\n  address = tempAddress + size;\n  modifiedSize = *(uint *)(address + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == address) {\n    modifiedSize = modifiedSize + size;\n    if (-1 < (int)(value << 0x1f)) {\n      tempAddress = tempAddress - *(int *)(pointer + -8);\n      tempIndex = *(int *)(tempAddress + 0xc);\n      index = *(int *)(tempAddress + 8);\n      modifiedSize = modifiedSize + *(int *)(pointer + -8);\n      *(int *)(index + 0xc) = tempIndex;\n      *(int *)(tempIndex + 8) = index;\n    }\n    address = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(tempAddress + 4) = modifiedSize | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = tempAddress;\n    if (address <= modifiedSize) {\n      _malloc_trim_r(lock,DAT_20071218);\n    }\n  }\n  else {\n    *(uint *)(address + 4) = modifiedSize;\n    if ((value & 1) == 0) {\n      tempAddress = tempAddress - *(int *)(pointer + -8);\n      index = *(int *)(tempAddress + 8);\n      size = size + *(int *)(pointer + -8);\n      if (index == 0x2007046c) {\n        flag = true;\n      }\n      else {\n        tempIndex = *(int *)(tempAddress + 0xc);\n        *(int *)(index + 0xc) = tempIndex;\n        *(int *)(tempIndex + 8) = index;\n        flag = false;\n      }\n    }\n    else {\n      flag = false;\n    }\n    if (-1 < *(int *)(address + modifiedSize + 4) << 0x1f) {\n      size = size + modifiedSize;\n      index = *(int *)(address + 8);\n      if ((!flag) && (index == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = tempAddress;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = tempAddress;\n        *(undefined4 *)(tempAddress + 0xc) = 0x2007046c;\n        *(undefined4 *)(tempAddress + 8) = 0x2007046c;\n        *(uint *)(tempAddress + 4) = size | 1;\n        *(uint *)(tempAddress + size) = size;\n        goto LAB_00083ba4;\n      }\n      tempIndex = *(int *)(address + 0xc);\n      *(int *)(index + 0xc) = tempIndex;\n      *(int *)(tempIndex + 8) = index;\n    }\n    *(uint *)(tempAddress + 4) = size | 1;\n    *(uint *)(tempAddress + size) = size;\n    if (!flag) {\n      if (size < 0x200) {\n        value = size & 0xfffffff8;\n        index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + value);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(size >> 3) >> 2 & 0xffU);\n        *(int *)(tempAddress + 8) = index;\n        *(uint *)(tempAddress + 0xc) = value + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + value) = tempAddress;\n        *(dword *)(index + 0xc) = tempAddress;\n        __malloc_unlock(lock);\n        return;\n      }\n      value = size >> 9;\n      if (value < 5) {\n        index = (size >> 6) + 0x38;\n        tempIndex = index * 2;\n      }\n      else if (value < 0x15) {\n        index = value + 0x5b;\n        tempIndex = index * 2;\n      }\n      else if (value < 0x55) {\n        index = (size >> 0xc) + 0x6e;\n        tempIndex = index * 2;\n      }\n      else if (value < 0x155) {\n        index = (size >> 0xf) + 0x77;\n        tempIndex = index * 2;\n      }\n      else if (value < 0x555) {\n        index = (size >> 0x12) + 0x7c;\n        tempIndex = index * 2;\n      }\n      else {\n        tempIndex = 0xfc;\n        index = 0x7e;\n      }\n      nextAddress = tempIndex * 4 + 0x20070464;\n      address = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[tempIndex];\n      if (address == nextAddress) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (index >> 2 & 0xffU);\n        nextAddress = address;\n      }\n      else {\n        do {\n          if ((*(uint *)(address + 4) & 0xfffffffc) <= size) break;\n          address = *(dword *)(address + 8);\n        } while (nextAddress != address);\n        nextAddress = *(dword *)(address + 0xc);\n      }\n      *(dword *)(tempAddress + 0xc) = nextAddress;\n      *(dword *)(tempAddress + 8) = address;\n      *(dword *)(nextAddress + 8) = tempAddress;\n      *(dword *)(address + 0xc) = tempAddress;\n    }\n  }\nLAB_00083ba4:\n  __malloc_unlock(lock);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b10": "restructure_function_00083b10",
                "param_1": "lock",
                "param_2": "pointer",
                "iVar1": "index",
                "bVar2": "flag",
                "uVar3": "value",
                "dVar4": "address",
                "iVar5": "tempIndex",
                "uVar6": "size",
                "dVar7": "tempAddress",
                "uVar8": "modifiedSize",
                "dVar9": "nextAddress"
            },
            "calling": [
                "__sfvwrite_r",
                "_realloc_r",
                "fclose",
                "__swsetup_r",
                "_malloc_r",
                "free",
                "_fflush_r"
            ],
            "called": [
                "__malloc_unlock",
                "_malloc_trim_r",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083ca8": {
            "entrypoint": "0x00083ca8",
            "current_name": "process_data_00083ca8",
            "code": "\nundefined4 processData_00083ca8(undefined4 *errorCode,uint *inputData,uint **outputData)\n\n{\n  int result;\n  uint length;\n  uint tmp;\n  ushort flag;\n  uint originalLength;\n  uint *ptr1;\n  uint *ptr2;\n  uint copyLength;\n  uint tmp2;\n  uint loopVar1;\n  uint loopVar2;\n  uint flag2;\n  \n  if (outputData[2] != (uint *)0x0) {\n    flag = *(ushort *)(inputData + 3);\n    originalLength = (uint)flag;\n    if (((int)(originalLength << 0x1c) < 0) && (inputData[4] != 0)) {\n      ptr2 = *outputData;\n    }\n    else {\n      result = __swsetup_r(errorCode,inputData);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(inputData + 3);\n      originalLength = (uint)flag;\n      ptr2 = *outputData;\n    }\n    if ((flag & 2) == 0) {\n      length = originalLength & 2;\n      loopVar1 = length;\n      copyLength = length;\n      flag2 = length;\n      if ((originalLength & 1) == 0) {\n        length = 0;\n        loopVar1 = 0;\n        while( true ) {\n          while (length == 0) {\n            loopVar1 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            length = *ptr1;\n          }\n          copyLength = inputData[2];\n          if ((int)(originalLength << 0x16) < 0) {\n            if (length < copyLength) {\n              originalLength = *inputData;\n              copyLength = length;\n            }\n            else if ((originalLength & 0x480) == 0) {\n              originalLength = *inputData;\n            }\n            else {\n              result = *inputData - inputData[4];\n              copyLength = result + 1 + length;\n              tmp2 = (int)(inputData[5] * 3) / 2;\n              if (copyLength <= tmp2) {\n                copyLength = tmp2;\n              }\n              if ((int)(originalLength << 0x15) < 0) {\n                tmp2 = _malloc_r(errorCode,copyLength);\n                if (tmp2 == 0) {\n                  *errorCode = 0xc;\n                  flag = *(ushort *)(inputData + 3);\n                  goto LAB_00083da4;\n                }\n                memcpy(tmp2,inputData[4],result);\n                *(ushort *)(inputData + 3) = *(ushort *)(inputData + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                tmp2 = _realloc_r(errorCode);\n                if (tmp2 == 0) {\n                  _free_r(errorCode,inputData[4]);\n                  flag = *(ushort *)(inputData + 3) & 0xff7f;\n                  *errorCode = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              originalLength = tmp2 + result;\n              inputData[4] = tmp2;\n              inputData[5] = copyLength;\n              *inputData = originalLength;\n              inputData[2] = copyLength - result;\n              copyLength = length;\n            }\n            memmove(originalLength,loopVar1,copyLength);\n            inputData[2] = inputData[2] - copyLength;\n            *inputData = *inputData + copyLength;\n            copyLength = length;\n          }\n          else if ((inputData[4] < *inputData) || (originalLength = inputData[5], length < originalLength)) {\n            if (length < copyLength) {\n              copyLength = length;\n            }\n            memmove(*inputData,loopVar1,copyLength);\n            originalLength = inputData[2];\n            inputData[2] = originalLength - copyLength;\n            *inputData = *inputData + copyLength;\n            if ((originalLength - copyLength == 0) && (result = _fflush_r(errorCode,inputData), result != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            copyLength = 0x7fffffff;\n            if (length < 0x7fffffff) {\n              copyLength = length;\n            }\n            copyLength = (*(code *)inputData[9])(errorCode,inputData[7],loopVar1,(copyLength / originalLength) * originalLength);\n            if ((int)copyLength < 1) goto LAB_00083da2;\n          }\n          ptr1 = outputData[2];\n          loopVar1 = loopVar1 + copyLength;\n          length = length - copyLength;\n          outputData[2] = (uint *)((int)ptr1 - copyLength);\n          if ((uint *)((int)ptr1 - copyLength) == (uint *)0x0) break;\n          originalLength = (uint)*(ushort *)(inputData + 3);\n        }\n      }\n      else {\n        do {\n          while (length == 0) {\n            copyLength = *ptr2;\n            length = ptr2[1];\n            flag2 = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (flag2 == 0) {\n            result = memchr(copyLength,10,length);\n            if (result == 0) {\n              loopVar1 = length + 1;\n              flag2 = 1;\n            }\n            else {\n              loopVar1 = (result + 1) - copyLength;\n              flag2 = 1;\n            }\n          }\n          tmp2 = *inputData;\n          originalLength = loopVar1;\n          if (length <= loopVar1) {\n            originalLength = length;\n          }\n          tmp = inputData[5];\n          if ((inputData[4] < tmp2) && (loopVar2 = inputData[2] + tmp, (int)loopVar2 < (int)originalLength)) {\n            memmove(tmp2,copyLength,loopVar2);\n            *inputData = *inputData + loopVar2;\n            result = _fflush_r(errorCode,inputData);\n            if (result != 0) goto LAB_00083da2;\n          }\n          else if ((int)originalLength < (int)tmp) {\n            memmove(tmp2,copyLength,originalLength);\n            inputData[2] = inputData[2] - originalLength;\n            *inputData = originalLength + *inputData;\n            loopVar2 = originalLength;\n          }\n          else {\n            loopVar2 = (*(code *)inputData[9])(errorCode,inputData[7],copyLength,tmp);\n            if ((int)loopVar2 < 1) goto LAB_00083da2;\n          }\n          loopVar1 = loopVar1 - loopVar2;\n          if (loopVar1 == 0) {\n            result = _fflush_r(errorCode,inputData);\n            if (result != 0) goto LAB_00083da2;\n            flag2 = 0;\n          }\n          ptr1 = outputData[2];\n          copyLength = copyLength + loopVar2;\n          length = length - loopVar2;\n          outputData[2] = (uint *)((int)ptr1 - loopVar2);\n        } while ((uint *)((int)ptr1 - loopVar2) != (uint *)0x0);\n      }\n    }\n    else {\n      length = 0;\n      originalLength = 0;\n      do {\n        while( true ) {\n          loopVar1 = originalLength;\n          if (0x7ffffbff < originalLength) {\n            loopVar1 = 0x7ffffc00;\n          }\n          if (originalLength != 0) break;\n          length = *ptr2;\n          originalLength = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)inputData[9])(errorCode,inputData[7],length,loopVar1);\n        if (result < 1) {\nLAB_00083da2:\n          flag = *(ushort *)(inputData + 3);\nLAB_00083da4:\n          *(ushort *)(inputData + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = outputData[2];\n        length = length + result;\n        originalLength = originalLength - result;\n        outputData[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083ca8": "process_data_00083ca8",
                "param_1": "errorCode",
                "param_2": "inputData",
                "param_3": "outputData",
                "iVar1": "result",
                "uVar2": "length",
                "uVar3": "tmp",
                "uVar4": "flag",
                "uVar5": "originalLength",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "copyLength",
                "uVar9": "tmp2",
                "uVar10": "loopVar1",
                "uVar11": "loopVar2",
                "local_2c": "flag2"
            },
            "calling": [
                "__sprint_r.part.0"
            ],
            "called": [
                "memcpy",
                "_realloc_r",
                "_free_r",
                "__swsetup_r",
                "_malloc_r",
                "_fflush_r",
                "memchr",
                "memmove"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084004": {
            "entrypoint": "0x00084004",
            "current_name": "get_memory_address_00084004",
            "code": "\nundefined4 getMemoryAddress_00084004(void)\n\n{\n  return 0x20070878;\n}\n\n",
            "renaming": {
                "FUN_00084004": "get_memory_address_00084004"
            },
            "calling": [
                "_wcrtomb_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008400c": {
            "entrypoint": "0x0008400c",
            "current_name": "get_relocation_offset_0008400c",
            "code": "\ndword get_relocation_offset_0008400c(void)\n\n{\n  return relocation_array[275].r_offset;\n}\n\n",
            "renaming": {
                "FUN_0008400c": "get_relocation_offset_0008400c",
                "Elf32_Rel_ARRAY_20070000": "relocation_array"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084018": {
            "entrypoint": "0x00084018",
            "current_name": "initialize_file_parameters_00084018",
            "code": "\nvoid initializeFileParameters_00084018(int fileDescriptor,int *fileParams)\n\n{\n  ushort filePermission;\n  int status;\n  int memoryStatus;\n  uint fileFlags;\n  bool isRegularFile;\n  undefined statResult [4];\n  uint fileMode;\n  \n  filePermission = *(ushort *)(fileParams + 3);\n  fileFlags = (uint)filePermission;\n  if ((int)(fileFlags << 0x1e) < 0) {\n    *fileParams = (int)fileParams + 0x43;\n    fileParams[4] = (int)fileParams + 0x43;\n    fileParams[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)fileParams + 0xe)) {\n    status = _fstat_r(fileDescriptor,(int)*(short *)((int)fileParams + 0xe),statResult);\n    if (-1 < status) {\n      isRegularFile = (fileMode & 0xf000) == 0x2000;\n      if (((fileMode & 0xf000) == 0x8000) && (fileParams[10] == 0x8427d)) {\n        status = 0x400;\n        *(ushort *)(fileParams + 3) = *(ushort *)(fileParams + 3) | 0x400;\n        fileParams[0x13] = 0x400;\n      }\n      else {\n        status = 0x400;\n        *(ushort *)(fileParams + 3) = *(ushort *)(fileParams + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    filePermission = *(ushort *)(fileParams + 3);\n    fileFlags = (uint)filePermission;\n  }\n  *(ushort *)(fileParams + 3) = filePermission | 0x800;\n  if ((fileFlags & 0x80) == 0) {\n    status = 0x400;\n  }\n  else {\n    status = 0x40;\n  }\n  isRegularFile = false;\nLAB_00084074:\n  memoryStatus = _malloc_r(fileDescriptor,status);\n  filePermission = *(ushort *)(fileParams + 3);\n  if (memoryStatus == 0) {\n    if (-1 < (int)((uint)filePermission << 0x16)) {\n      *(ushort *)(fileParams + 3) = filePermission | 2;\n      *fileParams = (int)fileParams + 0x43;\n      fileParams[4] = (int)fileParams + 0x43;\n      fileParams[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(fileDescriptor + 0x3c) = &LAB_0008387c_1;\n    *(ushort *)(fileParams + 3) = filePermission | 0x80;\n    *fileParams = memoryStatus;\n    fileParams[4] = memoryStatus;\n    fileParams[5] = status;\n    if ((isRegularFile) && (status = _isatty_r(fileDescriptor,(int)*(short *)((int)fileParams + 0xe)), status != 0)) {\n      *(ushort *)(fileParams + 3) = *(ushort *)(fileParams + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084018": "initialize_file_parameters_00084018",
                "param_1": "fileDescriptor",
                "param_2": "fileParams",
                "uVar1": "filePermission",
                "iVar2": "status",
                "iVar3": "memoryStatus",
                "uVar4": "fileFlags",
                "bVar5": "isRegularFile",
                "auStack_54": "statResult",
                "local_50": "fileMode"
            },
            "calling": [
                "__swsetup_r"
            ],
            "called": [
                "_isatty_r",
                "_fstat_r",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000840f8": {
            "entrypoint": "0x000840f8",
            "current_name": "find_char_in_array_000840f8",
            "code": "\nuint * find_char_in_array_000840f8(uint *array,char search_char,uint array_length)\n\n{\n  uint temp_value;\n  int index;\n  uint *current_ptr;\n  bool is_last_index;\n  \n  if (((uint)array & 3) == 0) {\nLAB_00084128:\n    if (3 < array_length) {\n      current_ptr = array;\n      do {\n        temp_value = *current_ptr ^ CONCAT22(CONCAT11(search_char,search_char),CONCAT11(search_char,search_char));\n        array = current_ptr;\n        if ((temp_value + 0xfefefeff & ~temp_value & 0x80808080) != 0) break;\n        array_length = array_length - 4;\n        array = current_ptr + 1;\n        current_ptr = current_ptr + 1;\n      } while (3 < array_length);\n    }\n    if (array_length == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != search_char) {\n      index = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        is_last_index = index == array_length - 1;\n        index = index + 1;\n        if (is_last_index) goto LAB_00084150;\n      } while (*(char *)array != search_char);\n    }\n  }\n  else if (array_length == 0) {\nLAB_00084150:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != search_char) {\n    current_ptr = (uint *)((int)array + 1);\n    array_length = array_length - 1;\n    do {\n      array = current_ptr;\n      if (((uint)array & 3) == 0) goto LAB_00084128;\n      if (array_length == 0) goto LAB_00084150;\n      current_ptr = (uint *)((int)array + 1);\n      array_length = array_length - 1;\n    } while (*(char *)array != search_char);\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_000840f8": "find_char_in_array_000840f8",
                "param_1": "array",
                "param_2": "search_char",
                "param_3": "array_length",
                "uVar1": "temp_value",
                "iVar2": "index",
                "puVar3": "current_ptr",
                "bVar4": "is_last_index"
            },
            "calling": [
                "__sfvwrite_r",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000841e4": {
            "entrypoint": "0x000841e4",
            "current_name": "execute_process_control_000841e4",
            "code": "\nint executeProcessControl_000841e4(uint processId)\n\n{\n  dword offset;\n  undefined4 pid;\n  int targetProcess;\n  code *functionPtr;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 constant1;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  constant1 = 0x20070460;\n  if (0x1f < processId) {\n    *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n    return -1;\n  }\n  targetProcess = *(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x2dc);\n  if ((targetProcess == 0) || (functionPtr = *(code **)(targetProcess + processId * 4), functionPtr == (code *)0x0)) {\n    pid = _getpid_r(Elf32_Rel_ARRAY_20070000[140].r_offset);\n    DAT_20071244 = 0;\n    targetProcess = _kill(pid,processId,processId,0,constant1,unused1,unused2,unused3);\n    if ((targetProcess == -1) && (DAT_20071244 != 0)) {\n      *(int *)offset = DAT_20071244;\n      return -1;\n    }\n    return targetProcess;\n  }\n  if (functionPtr == (code *)0x1) {\n    return 0;\n  }\n  if (functionPtr != (code *)0xffffffff) {\n    *(undefined4 *)(targetProcess + processId * 4) = 0;\n    (*functionPtr)(processId);\n    return 0;\n  }\n  *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000841e4": "execute_process_control_000841e4",
                "param_1": "processId",
                "dVar1": "offset",
                "uVar2": "pid",
                "iVar3": "targetProcess",
                "pcVar4": "functionPtr",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "in_lr": "unused3",
                "uVar5": "constant1"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "_getpid_r",
                "_kill"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008421c": {
            "entrypoint": "0x0008421c",
            "current_name": "FUN_0008421c",
            "code": "\nundefined4 _getpid(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {},
            "calling": [
                "raise"
            ],
            "called": [
                "_getpid"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084220": {
            "entrypoint": "0x00084220",
            "current_name": "update_file_pointer_00084220",
            "code": "\nvoid updateFilePointer_00084220(undefined4 filePointer,int bufferPointer)\n\n{\n  int readResult;\n  \n  readResult = _read_r(filePointer,(int)*(short *)(bufferPointer + 0xe));\n  if (-1 < readResult) {\n    *(int *)(bufferPointer + 0x50) = *(int *)(bufferPointer + 0x50) + readResult;\n    return;\n  }\n  *(ushort *)(bufferPointer + 0xc) = *(ushort *)(bufferPointer + 0xc) & 0xefff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084220": "update_file_pointer_00084220",
                "param_1": "filePointer",
                "param_2": "bufferPointer",
                "iVar1": "readResult"
            },
            "calling": [],
            "called": [
                "_read_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084244": {
            "entrypoint": "0x00084244",
            "current_name": "write_to_file_00084244",
            "code": "\nvoid writeToFile_00084244(int *fileHandle,int bufferAddress,undefined4 dataAddress,undefined4 dataSize)\n\n{\n  int writeResult;\n  ushort bufferValue;\n  undefined4 unused_r4;\n  undefined4 unused_r5;\n  undefined4 unused_r6;\n  undefined4 unused_lr;\n  \n  bufferValue = *(ushort *)(bufferAddress + 0xc);\n  if ((int)((uint)bufferValue << 0x17) < 0) {\n    _lseek_r(fileHandle,(int)*(short *)(bufferAddress + 0xe),0,2);\n    bufferValue = *(ushort *)(bufferAddress + 0xc);\n  }\n  *(ushort *)(bufferAddress + 0xc) = bufferValue & 0xefff;\n  DAT_20071244 = 0;\n  writeResult = _write((int)*(short *)(bufferAddress + 0xe),dataAddress,dataSize,dataSize,unused_r4,unused_r5,unused_r6,\n                 unused_lr);\n  if ((writeResult == -1) && (DAT_20071244 != 0)) {\n    *fileHandle = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084244": "write_to_file_00084244",
                "param_1": "fileHandle",
                "param_2": "bufferAddress",
                "param_3": "dataAddress",
                "param_4": "dataSize",
                "iVar1": "writeResult",
                "uVar2": "bufferValue",
                "unaff_r4": "unused_r4",
                "unaff_r5": "unused_r5",
                "unaff_r6": "unused_r6",
                "in_lr": "unused_lr"
            },
            "calling": [],
            "called": [
                "_lseek_r",
                "_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008427c": {
            "entrypoint": "0x0008427c",
            "current_name": "update_file_permissions_0008427c",
            "code": "\nvoid updateFilePermissions_0008427c(undefined4 fileDescriptor,int metadataAddress)\n\n{\n  int fileSeekResult;\n  ushort updatedPermissions;\n  \n  fileSeekResult = _lseek_r(fileDescriptor,(int)*(short *)(metadataAddress + 0xe));\n  if (fileSeekResult == -1) {\n    updatedPermissions = *(ushort *)(metadataAddress + 0xc) & 0xefff;\n  }\n  else {\n    updatedPermissions = *(ushort *)(metadataAddress + 0xc) | 0x1000;\n  }\n  if (fileSeekResult != -1) {\n    *(int *)(metadataAddress + 0x50) = fileSeekResult;\n  }\n  *(ushort *)(metadataAddress + 0xc) = updatedPermissions;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008427c": "update_file_permissions_0008427c",
                "param_1": "fileDescriptor",
                "param_2": "metadataAddress",
                "iVar1": "fileSeekResult",
                "uVar2": "updatedPermissions"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_data_000842a4",
            "code": "\nuint processData_000842a4(int inputBuffer,uint character,undefined4 *state,undefined4 length)\n\n{\n  ushort flag;\n  uint flagValue;\n  undefined *nextChar;\n  int count;\n  \n  if ((inputBuffer != 0) && (*(int *)(inputBuffer + 0x38) == 0)) {\n    initializeState;\n  }\n  flag = *(ushort *)(state + 3);\n  flagValue = (uint)flag;\n  state[2] = state[6];\n  if ((-1 < (int)(flagValue << 0x1c)) || (count = state[4], count == 0)) {\n    count = __swsetup_r(inputBuffer,state,flag,flagValue,length);\n    if (count != 0) {\n      return 0xffffffff;\n    }\n    flag = *(ushort *)(state + 3);\n    count = state[4];\n    flagValue = (uint)flag;\n  }\n  character = character & 0xff;\n  if ((int)(flagValue << 0x12) < 0) {\n    nextChar = (undefined *)*state;\n    count = (int)nextChar - count;\n    if (count < (int)state[5]) {\nLAB_000842d6:\n      count = count + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    state[0x19] = state[0x19] & 0xffffdfff;\n    nextChar = (undefined *)*state;\n    *(ushort *)(state + 3) = flag | 0x2000;\n    count = (int)nextChar - count;\n    if (count < (int)state[5]) goto LAB_000842d6;\n  }\n  count = _fflush_r(inputBuffer,state);\n  if (count != 0) {\n    return 0xffffffff;\n  }\n  nextChar = (undefined *)*state;\n  count = 1;\nLAB_000842d8:\n  state[2] = state[2] + -1;\n  *state = nextChar + 1;\n  *nextChar = (char)character;\n  if (((state[5] == count) ||\n      (((int)((uint)*(ushort *)(state + 3) << 0x1f) < 0 && (character == 10)))) &&\n     (count = _fflush_r(inputBuffer,state), count != 0)) {\n    return 0xffffffff;\n  }\n  return character;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "param_1": "inputBuffer",
                "param_2": "character",
                "param_3": "state",
                "param_4": "length",
                "uVar1": "flag",
                "uVar2": "flagValue",
                "puVar3": "nextChar",
                "iVar4": "count",
                "__sinit()": "initializeState"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [
                "__swsetup_r",
                "__sinit",
                "_fflush_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008434c": {
            "entrypoint": "0x0008434c",
            "current_name": "decode_and_process_0008434c",
            "code": "\nvoid decodeAndProcess_0008434c(undefined4 *outputBuffer,int size,undefined4 param3,undefined4 *status)\n\n{\n  dword relocationInfo;\n  undefined4 charset;\n  int result;\n  undefined temporaryBuffer [12];\n  \n  relocationInfo = Elf32_Rel_ARRAY_20070000[275].r_info;\n  if (size == 0) {\n    charset = __locale_charset();\n    result = (*(code *)relocationInfo)(outputBuffer,temporaryBuffer,0,charset,status);\n  }\n  else {\n    charset = __locale_charset();\n    result = (*(code *)relocationInfo)(outputBuffer,size,param3,charset,status);\n  }\n  if (result == -1) {\n    *status = 0;\n    *outputBuffer = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008434c": "decode_and_process_0008434c",
                "param_1": "outputBuffer",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "status",
                "dVar1": "relocationInfo",
                "uVar2": "charset",
                "iVar3": "result",
                "auStack_24": "temporaryBuffer"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [
                "__locale_charset",
                "__ascii_wctomb"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008439c": {
            "entrypoint": "0x0008439c",
            "current_name": "convert_byte_to_char_0008439c",
            "code": "\nundefined4 convertByteToChar_0008439c(undefined4 *outputPointer,undefined *inputPointer,uint inputValue)\n\n{\n  if (inputPointer == (undefined *)0x0) {\n    return 0;\n  }\n  if (inputValue < 0x100) {\n    *inputPointer = (char)inputValue;\n    return 1;\n  }\n  *outputPointer = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0008439c": "convert_byte_to_char_0008439c",
                "param_1": "outputPointer",
                "param_2": "inputPointer",
                "param_3": "inputValue"
            },
            "calling": [
                "_wcrtomb_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084484": {
            "entrypoint": "0x00084484",
            "current_name": "flush_and_free_memory_00084484",
            "code": "\nundefined4 flushAndFreeMemory_00084484(int input)\n\n{\n  dword memoryOffset;\n  undefined4 result;\n  int returnValue;\n  \n  memoryOffset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (input != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      __sinit();\n    }\n    if (*(short *)(input + 0xc) != 0) {\n      result = _fflush_r(memoryOffset,input);\n      if ((*(code **)(input + 0x2c) != (code *)0x0) &&\n         (returnValue = (**(code **)(input + 0x2c))(memoryOffset,*(undefined4 *)(input + 0x1c)), returnValue < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input + 0xc) << 0x18) < 0) {\n        _free_r(memoryOffset,*(undefined4 *)(input + 0x10));\n      }\n      if (*(int *)(input + 0x30) != 0) {\n        if (*(int *)(input + 0x30) != input + 0x40) {\n          _free_r(memoryOffset);\n        }\n        *(undefined4 *)(input + 0x30) = 0;\n      }\n      if (*(int *)(input + 0x44) != 0) {\n        _free_r(memoryOffset);\n        *(undefined4 *)(input + 0x44) = 0;\n      }\n      __sfp_lock_acquire();\n      *(undefined2 *)(input + 0xc) = 0;\n      __sfp_lock_release();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00084484": "flush_and_free_memory_00084484",
                "param_1": "input",
                "dVar1": "memoryOffset",
                "uVar2": "result",
                "iVar3": "returnValue"
            },
            "calling": [],
            "called": [
                "_free_r",
                "__sinit",
                "__sfp_lock_release",
                "__sfp_lock_acquire",
                "_fflush_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084494": {
            "entrypoint": "0x00084494",
            "current_name": "validate_and_set_file_stats_00084494",
            "code": "\nvoid validateAndSetFileStats_00084494(int *result,undefined4 fileDescriptor,undefined4 statBuffer,undefined4 bufferSize)\n\n{\n  int fileStatResult;\n  \n  DAT_20071244 = 0;\n  fileStatResult = _fstat(fileDescriptor,statBuffer,statBuffer,0,bufferSize);\n  if ((fileStatResult == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084494": "validate_and_set_file_stats_00084494",
                "param_1": "result",
                "param_2": "fileDescriptor",
                "param_3": "statBuffer",
                "param_4": "bufferSize",
                "iVar1": "fileStatResult"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844bc": {
            "entrypoint": "0x000844bc",
            "current_name": "check_and_set_terminal_value_000844bc",
            "code": "\nvoid checkAndSetTerminalValue_000844bc(int *result,undefined4 fileDescriptor)\n\n{\n  int isTTY;\n  \n  DAT_20071244 = 0;\n  isTTY = _isatty(fileDescriptor);\n  if ((isTTY == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844bc": "check_and_set_terminal_value_000844bc",
                "param_1": "result",
                "param_2": "fileDescriptor",
                "iVar1": "isTTY"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_isatty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844e0": {
            "entrypoint": "0x000844e0",
            "current_name": "set_file_pointer_000844e0",
            "code": "\nvoid setFilePointer_000844e0(int *fileSize,undefined4 fileHandle,undefined4 distanceToMove,undefined4 moveMethod)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = _lseek(fileHandle,distanceToMove,moveMethod);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *fileSize = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844e0": "set_file_pointer_000844e0",
                "param_1": "fileSize",
                "param_2": "fileHandle",
                "param_3": "distanceToMove",
                "param_4": "moveMethod",
                "iVar1": "result"
            },
            "calling": [
                "__swrite",
                "__sseek"
            ],
            "called": [
                "_lseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084508": {
            "entrypoint": "0x00084508",
            "current_name": "read_and_store_error_00084508",
            "code": "\nvoid readAndStoreError_00084508(int *output,undefined4 fileDescriptor,undefined4 buffer,undefined4 count)\n\n{\n  int readResult;\n  \n  DAT_20071244 = 0;\n  readResult = _read(fileDescriptor,buffer,count);\n  if ((readResult == -1) && (DAT_20071244 != 0)) {\n    *output = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084508": "read_and_store_error_00084508",
                "param_1": "output",
                "param_2": "fileDescriptor",
                "param_3": "buffer",
                "param_4": "count",
                "iVar1": "readResult"
            },
            "calling": [
                "__sread"
            ],
            "called": [
                "_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084530": {
            "entrypoint": "0x00084530",
            "current_name": "calculate_quotient_00084530",
            "code": "\nint calculateQuotient_00084530(int dividend,int divisor,int remainder,int flag)\n\n{\n  int quotient;\n  \n  if ((flag == 0) && (remainder == 0)) {\n    if (divisor != 0 || dividend != 0) {\n      dividend = -1;\n    }\n    return dividend;\n  }\n  quotient = __gnu_uldivmod_helper();\n  return quotient;\n}\n\n",
            "renaming": {
                "FUN_00084530": "calculate_quotient_00084530",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "remainder",
                "param_4": "flag",
                "iVar1": "quotient"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__gnu_uldivmod_helper"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008455c": {
            "entrypoint": "0x0008455c",
            "current_name": "subtract_and_update_0008455c",
            "code": "\nvoid subtract_and_update_0008455c(uint num1,int num2,undefined4 operand1,undefined4 operand2,int *result_array)\n\n{\n  uint product_low;\n  longlong product_high;\n  \n  product_high = __divdi3();\n  product_high = product_high * CONCAT44(operand2,operand1);\n  product_low = (uint)product_high;\n  *result_array = num1 - product_low;\n  result_array[1] = (num2 - (int)((ulonglong)product_high >> 0x20)) - (uint)(num1 < product_low);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008455c": "subtract_and_update_0008455c",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "operand1",
                "param_4": "operand2",
                "param_5": "result_array",
                "uVar1": "product_low",
                "lVar2": "product_high"
            },
            "calling": [],
            "called": [
                "__divdi3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008458c": {
            "entrypoint": "0x0008458c",
            "current_name": "subtract_and_adjust_0008458c",
            "code": "\nvoid subtract_and_adjust_0008458c(uint input_value,int subtract_value,undefined4 lower_part_multiplier,undefined4 upper_part_multiplier,int *result_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = __udivdi3();\n  product = product * CONCAT44(upper_part_multiplier,lower_part_multiplier);\n  result = (uint)product;\n  *result_array = input_value - result;\n  result_array[1] = (subtract_value - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008458c": "subtract_and_adjust_0008458c",
                "param_1": "input_value",
                "param_2": "subtract_value",
                "param_3": "lower_part_multiplier",
                "param_4": "upper_part_multiplier",
                "param_5": "result_array",
                "uVar1": "result",
                "lVar2": "product"
            },
            "calling": [
                "__aeabi_uldivmod"
            ],
            "called": [
                "__udivdi3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845c0": {
            "entrypoint": "0x000845c0",
            "current_name": "divide_with_remainder_000845c0",
            "code": "\nundefined8 divideWithRemainder_000845c0(uint dividend,uint dividendRemainder,uint divisor,uint divisorRemainder)\n\n{\n  longlong product;\n  uint quotientLow;\n  uint quotientHigh;\n  uint temp1;\n  uint temp2;\n  int shiftAmount;\n  uint temp3;\n  uint temp4;\n  uint dividendMask;\n  uint isDivisorNegative;\n  uint temp5;\n  uint temp6;\n  bool hasRemaining;\n  \n  if ((int)dividendRemainder < 0) {\n    hasRemaining = dividend != 0;\n    dividend = -dividend;\n    dividendRemainder = -dividendRemainder - (uint)hasRemaining;\n    dividendMask = 0xffffffff;\n  }\n  else {\n    dividendMask = 0;\n  }\n  if ((int)divisorRemainder < 0) {\n    dividendMask = ~dividendMask;\n    hasRemaining = divisor != 0;\n    divisor = -divisor;\n    divisorRemainder = -divisorRemainder - (uint)hasRemaining;\n  }\n  if (divisorRemainder == 0) {\n    if (dividendRemainder < divisor) {\n      shiftAmount = LZCOUNT(divisor);\n      if (shiftAmount != 0) {\n        quotientHigh = dividend >> (0x20U - shiftAmount & 0xff);\n        divisor = divisor << shiftAmount;\n        dividend = dividend << shiftAmount;\n        dividendRemainder = dividendRemainder << shiftAmount | quotientHigh;\n      }\n      quotientLow = divisor >> 0x10;\n      temp1 = dividendRemainder / quotientLow;\n      temp3 = (divisor & 0xffff) * temp1;\n      isDivisorNegative = dividend >> 0x10 | (dividendRemainder - quotientLow * temp1) * 0x10000;\n      quotientHigh = temp1;\n      if (isDivisorNegative <= temp3 && temp3 - isDivisorNegative != 0) {\n        hasRemaining = CARRY4(isDivisorNegative,divisor);\n        isDivisorNegative = isDivisorNegative + divisor;\n        quotientHigh = temp1 - 1;\n        if ((hasRemaining == false) && (isDivisorNegative <= temp3 && temp3 - isDivisorNegative != 0)) {\n          quotientHigh = temp1 - 2;\n          isDivisorNegative = isDivisorNegative + divisor;\n        }\n      }\n      temp4 = (isDivisorNegative - temp3) / quotientLow;\n      temp1 = (divisor & 0xffff) * temp4;\n      temp3 = dividend & 0xffff | ((isDivisorNegative - temp3) - quotientLow * temp4) * 0x10000;\n      quotientLow = temp4;\n      if (temp3 <= temp1 && temp1 - temp3 != 0) {\n        quotientLow = temp4 - 1;\n        if ((CARRY4(temp3,divisor) == false) &&\n           (temp3 + divisor <= temp1 && temp1 - (temp3 + divisor) != 0)) {\n          quotientLow = temp4 - 2;\n        }\n      }\n      quotientLow = quotientLow | quotientHigh << 0x10;\n      quotientHigh = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shiftAmount = LZCOUNT(divisor);\n      if (shiftAmount == 0) {\n        dividendRemainder = dividendRemainder - divisor;\n        temp1 = divisor >> 0x10;\n        temp6 = divisor & 0xffff;\n        quotientHigh = 1;\n      }\n      else {\n        divisor = divisor << shiftAmount;\n        quotientHigh = dividendRemainder >> (0x20U - shiftAmount & 0xff);\n        temp1 = divisor >> 0x10;\n        isDivisorNegative = quotientHigh / temp1;\n        temp6 = divisor & 0xffff;\n        temp3 = temp6 * isDivisorNegative;\n        temp4 = dividend >> (0x20U - shiftAmount & 0xff) | dividendRemainder << shiftAmount;\n        quotientHigh = temp4 >> 0x10 | (quotientHigh - temp1 * isDivisorNegative) * 0x10000;\n        dividend = dividend << shiftAmount;\n        quotientLow = isDivisorNegative;\n        if (quotientHigh <= temp3 && temp3 - quotientHigh != 0) {\n          hasRemaining = CARRY4(quotientHigh,divisor);\n          quotientHigh = quotientHigh + divisor;\n          quotientLow = isDivisorNegative - 1;\n          if ((hasRemaining == false) && (quotientHigh <= temp3 && temp3 - quotientHigh != 0)) {\n            quotientLow = isDivisorNegative - 2;\n            quotientHigh = quotientHigh + divisor;\n          }\n        }\n        temp2 = (quotientHigh - temp3) / temp1;\n        isDivisorNegative = temp6 * temp2;\n        dividendRemainder = temp4 & 0xffff | ((quotientHigh - temp3) - temp1 * temp2) * 0x10000;\n        quotientHigh = temp2;\n        if (dividendRemainder <= isDivisorNegative && isDivisorNegative - dividendRemainder != 0) {\n          hasRemaining = CARRY4(dividendRemainder,divisor);\n          dividendRemainder = dividendRemainder + divisor;\n          quotientHigh = temp2 - 1;\n          if ((hasRemaining == false) && (dividendRemainder <= isDivisorNegative && isDivisorNegative - dividendRemainder != 0)) {\n            quotientHigh = temp2 - 2;\n            dividendRemainder = dividendRemainder + divisor;\n          }\n        }\n        dividendRemainder = dividendRemainder - isDivisorNegative;\n        quotientHigh = quotientHigh | quotientLow << 0x10;\n      }\n      quotientLow = dividendRemainder / temp1;\n      isDivisorNegative = temp6 * quotientLow;\n      temp4 = dividend >> 0x10 | (dividendRemainder - temp1 * quotientLow) * 0x10000;\n      temp3 = quotientLow;\n      if (temp4 <= isDivisorNegative && isDivisorNegative - temp4 != 0) {\n        hasRemaining = CARRY4(temp4,divisor);\n        temp4 = temp4 + divisor;\n        temp3 = quotientLow - 1;\n        if ((hasRemaining == false) && (temp4 <= isDivisorNegative && isDivisorNegative - temp4 != 0)) {\n          temp3 = quotientLow - 2;\n          temp4 = temp4 + divisor;\n        }\n      }\n      temp2 = (temp4 - isDivisorNegative) / temp1;\n      temp6 = temp6 * temp2;\n      temp1 = dividend & 0xffff | ((temp4 - isDivisorNegative) - temp1 * temp2) * 0x10000;\n      quotientLow = temp2;\n      if (temp1 <= temp6 && temp6 - temp1 != 0) {\n        quotientLow = temp2 - 1;\n        if ((CARRY4(temp1,divisor) == false) &&\n           (temp1 + divisor <= temp6 && temp6 - (temp1 + divisor) != 0)) {\n          quotientLow = temp2 - 2;\n        }\n      }\n      quotientLow = quotientLow | temp3 << 0x10;\n    }\n  }\n  else if (dividendRemainder < divisorRemainder) {\n    quotientHigh = 0;\n    quotientLow = 0;\n  }\n  else {\n    shiftAmount = LZCOUNT(divisorRemainder);\n    if (shiftAmount == 0) {\n      if ((divisorRemainder < dividendRemainder) || (divisor <= dividend)) {\n        quotientHigh = 0;\n        quotientLow = 1;\n      }\n      else {\n        quotientLow = 0;\n        quotientHigh = 0;\n      }\n    }\n    else {\n      quotientHigh = 0x20 - shiftAmount;\n      temp1 = dividendRemainder >> (quotientHigh & 0xff);\n      temp6 = divisor >> (quotientHigh & 0xff) | divisorRemainder << shiftAmount;\n      isDivisorNegative = temp6 >> 0x10;\n      quotientLow = temp1 / isDivisorNegative;\n      temp4 = (temp6 & 0xffff) * quotientLow;\n      temp3 = dividendRemainder << shiftAmount | dividend >> (quotientHigh & 0xff);\n      temp1 = temp3 >> 0x10 | (temp1 - isDivisorNegative * quotientLow) * 0x10000;\n      quotientHigh = quotientLow;\n      if (temp1 <= temp4 && temp4 - temp1 != 0) {\n        hasRemaining = CARRY4(temp1,temp6);\n        temp1 = temp1 + temp6;\n        quotientHigh = quotientLow - 1;\n        if ((hasRemaining == false) && (temp1 <= temp4 && temp4 - temp1 != 0)) {\n          quotientHigh = quotientLow - 2;\n          temp1 = temp1 + temp6;\n        }\n      }\n      temp2 = (temp1 - temp4) / isDivisorNegative;\n      temp5 = (temp6 & 0xffff) * temp2;\n      temp1 = temp3 & 0xffff | ((temp1 - temp4) - isDivisorNegative * temp2) * 0x10000;\n      quotientLow = temp2;\n      if (temp1 <= temp5 && temp5 - temp1 != 0) {\n        hasRemaining = CARRY4(temp1,temp6);\n        temp1 = temp1 + temp6;\n        quotientLow = temp2 - 1;\n        if ((hasRemaining == false) && (temp1 <= temp5 && temp5 - temp1 != 0)) {\n          quotientLow = temp2 - 2;\n          temp1 = temp1 + temp6;\n        }\n      }\n      quotientLow = quotientLow | quotientHigh << 0x10;\n      product = (ulonglong)quotientLow * (ulonglong)(divisor << shiftAmount);\n      temp3 = (uint)((ulonglong)product >> 0x20);\n      quotientHigh = 0;\n      if ((temp1 - temp5 < temp3) ||\n         ((temp1 - temp5 == temp3 && (dividend << shiftAmount < (uint)product)))) {\n        quotientLow = quotientLow - 1;\n        quotientHigh = 0;\n      }\n    }\n  }\n  if (dividendMask != 0) {\n    hasRemaining = quotientLow != 0;\n    quotientLow = -quotientLow;\n    quotientHigh = -quotientHigh - (uint)hasRemaining;\n  }\n  return CONCAT44(quotientHigh,quotientLow);\n}\n\n",
            "renaming": {
                "FUN_000845c0": "divide_with_remainder_000845c0",
                "param_1": "dividend",
                "param_2": "dividendRemainder",
                "param_3": "divisor",
                "param_4": "divisorRemainder",
                "lVar1": "product",
                "uVar2": "quotientLow",
                "uVar3": "quotientHigh",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "iVar6": "shiftAmount",
                "uVar7": "temp3",
                "uVar8": "temp4",
                "uVar9": "dividendMask",
                "uVar10": "isDivisorNegative",
                "uVar11": "temp5",
                "uVar12": "temp6",
                "bVar13": "hasRemaining"
            },
            "calling": [
                "__gnu_ldivmod_helper"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084860": {
            "entrypoint": "0x00084860",
            "current_name": "calculate_quotient_00084860",
            "code": "\nulonglong calculateQuotient_00084860(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong temp;\n  uint result;\n  uint quotient1;\n  uint remainder1;\n  uint product1;\n  uint dividend1;\n  uint quotient2;\n  uint remainder2;\n  uint product2;\n  int shiftCount;\n  bool carry;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shiftCount = LZCOUNT(quotient);\n      if (shiftCount == 0) {\n        divisor = divisor - quotient;\n        quotient1 = quotient >> 0x10;\n        product1 = quotient & 0xffff;\n        result = 1;\n      }\n      else {\n        quotient = quotient << shiftCount;\n        remainder2 = divisor >> (0x20U - shiftCount & 0xff);\n        quotient1 = quotient >> 0x10;\n        product2 = remainder2 / quotient1;\n        product1 = quotient & 0xffff;\n        result = product1 * product2;\n        dividend1 = dividend >> (0x20U - shiftCount & 0xff) | divisor << shiftCount;\n        remainder1 = dividend1 >> 0x10 | (remainder2 - quotient1 * product2) * 0x10000;\n        dividend = dividend << shiftCount;\n        remainder2 = product2;\n        if (remainder1 <= result && result - remainder1 != 0) {\n          carry = CARRY4(remainder1,quotient);\n          remainder1 = remainder1 + quotient;\n          remainder2 = product2 - 1;\n          if ((carry == false) && (remainder1 <= result && result - remainder1 != 0)) {\n            remainder2 = product2 - 2;\n            remainder1 = remainder1 + quotient;\n          }\n        }\n        quotient2 = (remainder1 - result) / quotient1;\n        product2 = product1 * quotient2;\n        divisor = dividend1 & 0xffff | ((remainder1 - result) - quotient1 * quotient2) * 0x10000;\n        result = quotient2;\n        if (divisor <= product2 && product2 - divisor != 0) {\n          carry = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          result = quotient2 - 1;\n          if ((carry == false) && (divisor <= product2 && product2 - divisor != 0)) {\n            result = quotient2 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - product2;\n        result = result | remainder2 << 0x10;\n      }\n      product2 = divisor / quotient1;\n      remainder1 = product1 * product2;\n      dividend1 = dividend >> 0x10 | (divisor - quotient1 * product2) * 0x10000;\n      remainder2 = product2;\n      if (dividend1 <= remainder1 && remainder1 - dividend1 != 0) {\n        carry = CARRY4(dividend1,quotient);\n        dividend1 = dividend1 + quotient;\n        remainder2 = product2 - 1;\n        if ((carry == false) && (dividend1 <= remainder1 && remainder1 - dividend1 != 0)) {\n          remainder2 = product2 - 2;\n          dividend1 = dividend1 + quotient;\n        }\n      }\n      product2 = (dividend1 - remainder1) / quotient1;\n      product1 = product1 * product2;\n      dividend1 = dividend & 0xffff | ((dividend1 - remainder1) - quotient1 * product2) * 0x10000;\n      quotient1 = product2;\n      if (dividend1 <= product1 && product1 - dividend1 != 0) {\n        quotient1 = product2 - 1;\n        if ((CARRY4(dividend1,quotient) == false) &&\n           (dividend1 + quotient <= product1 && product1 - (dividend1 + quotient) != 0)) {\n          quotient1 = product2 - 2;\n        }\n      }\n      return CONCAT44(result,quotient1 | remainder2 << 0x10);\n    }\n    shiftCount = LZCOUNT(quotient);\n    if (shiftCount != 0) {\n      remainder2 = dividend >> (0x20U - shiftCount & 0xff);\n      quotient = quotient << shiftCount;\n      dividend = dividend << shiftCount;\n      divisor = remainder2 | divisor << shiftCount;\n    }\n    result = quotient >> 0x10;\n    quotient1 = divisor / result;\n    product1 = (quotient & 0xffff) * quotient1;\n    product2 = dividend >> 0x10 | (divisor - result * quotient1) * 0x10000;\n    remainder2 = quotient1;\n    if (product2 <= product1 && product1 - product2 != 0) {\n      carry = CARRY4(product2,quotient);\n      product2 = product2 + quotient;\n      remainder2 = quotient1 - 1;\n      if ((carry == false) && (product2 <= product1 && product1 - product2 != 0)) {\n        remainder2 = quotient1 - 2;\n        product2 = product2 + quotient;\n      }\n    }\n    dividend1 = (product2 - product1) / result;\n    quotient1 = (quotient & 0xffff) * dividend1;\n    product1 = dividend & 0xffff | ((product2 - product1) - result * dividend1) * 0x10000;\n    result = dividend1;\n    if (product1 <= quotient1 && quotient1 - product1 != 0) {\n      result = dividend1 - 1;\n      if ((CARRY4(product1,quotient) == false) &&\n         (product1 + quotient <= quotient1 && quotient1 - (product1 + quotient) != 0)) {\n        result = dividend1 - 2;\n      }\n    }\n    result = result | remainder2 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    shiftCount = LZCOUNT(remainder);\n    if (shiftCount == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      result = 0;\n    }\n    else {\n      result = 0x20 - shiftCount;\n      remainder2 = divisor >> (result & 0xff);\n      quotient1 = remainder << shiftCount | quotient >> (result & 0xff);\n      product1 = quotient1 >> 0x10;\n      remainder1 = remainder2 / product1;\n      product2 = (quotient1 & 0xffff) * remainder1;\n      dividend1 = dividend >> (result & 0xff) | divisor << shiftCount;\n      result = dividend1 >> 0x10 | (remainder2 - product1 * remainder1) * 0x10000;\n      remainder2 = remainder1;\n      if (result <= product2 && product2 - result != 0) {\n        carry = CARRY4(result,quotient1);\n        result = result + quotient1;\n        remainder2 = remainder1 - 1;\n        if ((carry == false) && (result <= product2 && product2 - result != 0)) {\n          remainder2 = remainder1 - 2;\n          result = result + quotient1;\n        }\n      }\n      remainder1 = (result - product2) / product1;\n      quotient2 = (quotient1 & 0xffff) * remainder1;\n      product1 = dividend1 & 0xffff | ((result - product2) - product1 * remainder1) * 0x10000;\n      result = remainder1;\n      if (product1 <= quotient2 && quotient2 - product1 != 0) {\n        carry = CARRY4(product1,quotient1);\n        product1 = product1 + quotient1;\n        result = remainder1 - 1;\n        if ((carry == false) && (product1 <= quotient2 && quotient2 - product1 != 0)) {\n          result = remainder1 - 2;\n          product1 = product1 + quotient1;\n        }\n      }\n      result = result | remainder2 << 0x10;\n      temp = (ulonglong)result * (ulonglong)(quotient << shiftCount);\n      remainder2 = (uint)((ulonglong)temp >> 0x20);\n      if ((product1 - quotient2 < remainder2) || ((product1 - quotient2 == remainder2 && (dividend << shiftCount < (uint)temp)))\n         ) {\n        result = result - 1;\n      }\n    }\n  }\n  return (ulonglong)result;\n}\n\n",
            "renaming": {
                "FUN_00084860": "calculate_quotient_00084860",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "temp",
                "uVar2": "result",
                "uVar3": "quotient1",
                "uVar4": "remainder1",
                "uVar5": "product1",
                "uVar6": "dividend1",
                "uVar7": "quotient2",
                "uVar8": "remainder2",
                "uVar9": "product2",
                "iVar10": "shiftCount",
                "bVar11": "carry"
            },
            "calling": [
                "__gnu_uldivmod_helper"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085844": {
            "entrypoint": "0x00085844",
            "current_name": "FUNC_00085844",
            "code": "\nvoid FUNC_00085844(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085844": "FUNC_00085844"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 105362,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_000803fc",
            "FUN_0008044c",
            "FUN_000805a8",
            "FUN_000806a0",
            "FUN_000806f8",
            "FUN_00080774",
            "FUN_0008089c",
            "FUN_00080970",
            "FUN_000809be",
            "FUN_000809e4",
            "FUN_00080a0a",
            "FUN_00080a30",
            "FUN_00080a94",
            "FUN_00080aa8",
            "FUN_00080b2c",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080c20",
            "FUN_00080c98",
            "FUN_00080d30",
            "FUN_00080d3e",
            "FUN_00080d58",
            "FUN_00080d62",
            "FUN_00080d6a",
            "FUN_00080e80",
            "FUN_00080e88",
            "FUN_00080eaa",
            "FUN_00080eb0",
            "FUN_00080eba",
            "FUN_00080ebe",
            "FUN_00080ec2",
            "FUN_00080ec8",
            "FUN_00080eec",
            "FUN_00080efe",
            "FUN_00080f0c",
            "FUN_00081014",
            "FUN_000810a6",
            "FUN_000810cc",
            "FUN_00081190",
            "FUN_000811b0",
            "FUN_000811ca",
            "FUN_000811e8",
            "FUN_00081214",
            "FUN_00081248",
            "FUN_00081276",
            "FUN_000812b8",
            "FUN_00081348",
            "FUN_000813dc",
            "FUN_00081438",
            "FUN_0008145c",
            "FUN_00081472",
            "FUN_00081480",
            "FUN_00081496",
            "FUN_000814ae",
            "FUN_000814d0",
            "FUN_000814f6",
            "FUN_0008151c",
            "FUN_00081560",
            "FUN_00081570",
            "FUN_000815b8",
            "FUN_000815de",
            "FUN_00081618",
            "FUN_00081624",
            "FUN_00081684",
            "FUN_000816d8",
            "FUN_000816ec",
            "FUN_000816f8",
            "FUN_00081750",
            "FUN_00081778",
            "FUN_000817c8",
            "FUN_000817f0",
            "FUN_00081800",
            "FUN_00081810",
            "FUN_00081d48",
            "FUN_00081e34",
            "FUN_00081f00",
            "FUN_00081f9c",
            "FUN_00081fac",
            "FUN_0008236c",
            "FUN_00082390",
            "FUN_000825cc",
            "FUN_00082688",
            "FUN_00082824",
            "FUN_0008289c",
            "FUN_000834f0",
            "FUN_0008356c",
            "FUN_000836ec",
            "FUN_00083850",
            "FUN_00083888",
            "FUN_000839b4",
            "FUN_00083a74",
            "FUN_00083b10",
            "FUN_00083ca8",
            "FUN_00084004",
            "FUN_0008400c",
            "FUN_00084018",
            "FUN_000840f8",
            "FUN_000841e4",
            "FUN_00084220",
            "FUN_00084244",
            "FUN_0008427c",
            "FUN_000842a4",
            "FUN_0008434c",
            "FUN_0008439c",
            "FUN_00084484",
            "FUN_00084494",
            "FUN_000844bc",
            "FUN_000844e0",
            "FUN_00084508",
            "FUN_00084530",
            "FUN_0008455c",
            "FUN_0008458c",
            "FUN_000845c0",
            "FUN_00084860"
        ],
        [
            "FUN_00080164",
            "FUN_000801e0",
            "FUN_000810c4",
            "FUN_000810d8",
            "FUN_000810fc",
            "FUN_0008113a",
            "FUN_0008159e",
            "FUN_000815ec"
        ],
        [
            "FUN_000810e8",
            "FUN_0008117a"
        ],
        [
            "FUN_00080250"
        ]
    ],
    "locked_functions": []
}