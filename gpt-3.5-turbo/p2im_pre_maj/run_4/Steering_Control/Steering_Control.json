{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeFlag_000800f4(undefined4 inputValue)\n\n{\n  if ((char)DAT_200708a0 == '\\0') {\n    DAT_200708a0._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "calculate_interpolation_00080164",
            "code": "\nvoid calculate_interpolation_00080164(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  interpolation_calculation_000806f8(&DAT_200708e8,0x5a);\n  interpolation_calculation_000806f8(&DAT_200708d4,0x5a,param_3,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "calculate_interpolation_00080164"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_000806f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801e0": {
            "entrypoint": "0x000801e0",
            "current_name": "initialize_system_000801e0",
            "code": "\nundefined8 initializeSystem_000801e0(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  updateConfiguration(&DAT_20070be8,0xe100,arg3,arg4,arg4);\n  updateParameter(0xd,1);\n  updateParameter(6,1);\n  updateParameter(0x39,0);\n  updateParameter(4,0);\n  updateParameter(3,0);\n  updateParameter(2,0);\n  updateParameterAndStartTCChannel(&DAT_200708d4,5);\n  updateParameterAndStartTCChannel(&DAT_200708e8,6);\n  calculateInterpolation();\n  FUNC_00080f08(1000);\n  if (DAT_200708bc == 0) {\n    triggerSoftwareInterrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000801e0": "initialize_system_000801e0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "update_configuration_000813dc": "updateConfiguration",
                "update_parameter_00080f0c": "updateParameter",
                "update_parameter_and_start_tc_channel_000806a0": "updateParameterAndStartTCChannel",
                "calculate_interpolation_00080164": "calculateInterpolation",
                "software_interrupt": "triggerSoftwareInterrupt"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00080f0c",
                "FUN_000813dc",
                "FUN_000806a0",
                "FUN_00080164",
                "FUN_00080f08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080250": {
            "entrypoint": "0x00080250",
            "current_name": "control_mode_switch_00080250",
            "code": "\nvoid controlModeSwitch_00080250(void)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  undefined *puVar3;\n  undefined auStack_1c [12];\n  \n  DAT_200708c0 = calculateResult(4,1,20000);\n  FUNC_00080f08(10);\n  DAT_200708c4 = DAT_200708c4 ^ 1;\n  updateParametersIfNeeded(0xd);\n  if (DAT_200708c0 < 0x641) {\n    if (DAT_200708c0 - 0x385U < 299) {\n      if (DAT_200708eb != '\\0') {\n        calculateInterpolation();\n        calculateSum(&DAT_20070be8,\"Entered manual control mode.\");\n        DAT_200708eb = '\\0';\n      }\n      FUNC_00080f08(10);\n      uVar1 = calculateResult(3,1,20000);\n      DAT_200708d8 = calculateInterpolation(0,1000,2000,0x28,0x96);\n      DAT_200708ec = calculateInterpolation(uVar1,1000,2000,0x28,0x96);\n      while (iVar2 = calculateValueDifference(&DAT_20070be8), 0 < iVar2) {\n        extractByteFromBuffer(&DAT_20070be8);\n        convertBase(&DAT_20070be8,DAT_200708d8,10);\n        executeProcessing(&DAT_20070be8,&DAT_00084b13);\n        calculateSum(&DAT_20070be8,DAT_200708ec,10);\n      }\n      interpolationCalculation(&DAT_200708e8,DAT_200708ec);\n      interpolationCalculation(&DAT_200708d4,DAT_200708d8);\n    }\n    else {\n      if (DAT_200708eb == '\\0') {\n        calculateInterpolation();\n        calculateSum(&DAT_20070be8,\"Entered autonomous control mode.\");\n      }\n      DAT_200708eb = '\\x01';\nLAB_00080346:\n      iVar2 = calculateValueDifference(&DAT_20070be8);\n      if (0 < iVar2) {\n        processData(auStack_1c,&DAT_20070be8,0x2c);\n        checkAndResetData(&DAT_200708dc,auStack_1c);\n        processRelocatedFunction(auStack_1c);\n        processData(auStack_1c,&DAT_20070be8,10);\n        checkAndResetData(&DAT_200708c8,auStack_1c);\n        processRelocatedFunction(auStack_1c);\n        extractByteFromBuffer(&DAT_20070be8);\n        iVar2 = checkArraySize(&DAT_200708dc,\"steer\");\n        if (iVar2 == 0) goto LAB_0008039c;\n        uVar1 = parseInteger(&DAT_200708c8);\n        puVar3 = &DAT_200708d4;\n        goto LAB_000803b2;\n      }\n    }\n  }\n  else {\n    calculateInterpolation();\n    calculateSum(&DAT_20070be8,\"error\");\n  }\n  return;\nLAB_0008039c:\n  iVar2 = checkArraySize(&DAT_200708dc,\"motor\");\n  if (iVar2 != 0) {\n    uVar1 = parseInteger(&DAT_200708c8);\n    puVar3 = &DAT_200708e8;\nLAB_000803b2:\n    interpolationCalculation(puVar3,uVar1);\n  }\n  goto LAB_00080346;\n}\n\n",
            "renaming": {
                "FUN_00080250": "control_mode_switch_00080250",
                "calculate_result_00081624": "calculateResult",
                "update_parameters_if_needed_00081014": "updateParametersIfNeeded",
                "calculate_interpolation_00080164": "calculateInterpolation",
                "calculate_sum_000810e8": "calculateSum",
                "calculate_interpolation_0008145c": "calculateInterpolation",
                "calculate_value_difference_00081248": "calculateValueDifference",
                "extract_byte_from_buffer_00081276": "extractByteFromBuffer",
                "convert_base_thunk_0008113a": "convertBase",
                "execute_processing_000810c4": "executeProcessing",
                "calculate_sum_0008117a": "calculateSum",
                "interpolation_calculation_000806f8": "interpolationCalculation",
                "process_data_00081214": "processData",
                "check_and_reset_data_00081560": "checkAndResetData",
                "process_relocated_function_00081472": "processRelocatedFunction",
                "check_array_size_000815b8": "checkArraySize",
                "parse_integer_000815de": "parseInteger"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00081560",
                "FUN_000815b8",
                "FUN_000815de",
                "FUN_00080164",
                "FUN_000806f8",
                "FUN_00081624",
                "FUN_00080f08",
                "FUN_00081248",
                "thunk_FUN_0008113a",
                "FUN_000810e8",
                "FUN_000810c4",
                "FUN_00081214",
                "FUN_00081276",
                "FUN_0008145c",
                "FUN_00081014",
                "FUN_0008117a",
                "FUN_00081472"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803fc": {
            "entrypoint": "0x000803fc",
            "current_name": "start_tc_channel_000803fc",
            "code": "\nvoid start_tc_channel_000803fc(int channel_number,uint param_value,undefined4 flag,uint bit_number)\n\n{\n  undefined4 unused_var_1;\n  undefined4 unused_var_2;\n  undefined8 concatenated_param;\n  \n  concatenated_param = CONCAT44(param_value,channel_number);\n  check_and_update_bit_00080aa8(flag);\n  configure_tc_channel_00080b2c(channel_number,param_value,0xc002);\n  set_param_value_00080b90(channel_number,param_value,0xa41);\n  *(int *)((bit_number >> 5) * 4 + -0x1fff1f00) = 1 << (bit_number & 0x1f);\n  *(undefined4 *)(channel_number + param_value * 0x40 + 0x24) = 4;\n  if (2 < param_value) {\n    concatenated_param = assertion_failed_000816f8(\"../source/tc.c\",0x5c,\"TC_Start\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\",\n                         unused_var_1,unused_var_2);\n  }\n  *(undefined4 *)((int)concatenated_param + (int)((ulonglong)concatenated_param >> 0x20) * 0x40) = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000803fc": "start_tc_channel_000803fc",
                "param_1": "channel_number",
                "param_2": "param_value",
                "param_3": "flag",
                "param_4": "bit_number",
                "unaff_r4": "unused_var_1",
                "in_lr": "unused_var_2",
                "uVar1": "concatenated_param"
            },
            "calling": [
                "FUN_000806a0"
            ],
            "called": [
                "FUN_00080aa8",
                "FUN_00080b90",
                "FUN_00080b2c",
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008044c": {
            "entrypoint": "0x0008044c",
            "current_name": "update_flags_and_parameters_0008044c",
            "code": "\nvoid updateFlagsAndParameters_0008044c(int index,int data,int offset)\n\n{\n  uint maxValue;\n  int tempValue;\n  \n  offset = offset * 0x40;\n  if (((&DAT_200708f1)[index] & 0x80) == 0) {\n    tempValue = index * 0xc;\n    if (((char)(&DAT_200708f1)[index] + tempValue < (int)(uint)DAT_200708f0) &&\n       ((int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + tempValue) * 8] << 0x19) < 0\n       )) {\n      update_parameters_if_needed_00081014((&DAT_200708f8)[(tempValue + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,0);\n    }\n  }\n  else {\n    *(uint *)(data + offset) = *(uint *)(data + offset) | 4;\n  }\n  maxValue = (uint)DAT_200708f0;\n  (&DAT_200708f1)[index] = (&DAT_200708f1)[index] + '\\x01';\n  tempValue = index * 0xc;\n  if (((char)(&DAT_200708f1)[index] + tempValue < (int)maxValue) &&\n     ((char)(&DAT_200708f1)[index] < '\\f')) {\n    *(int *)(data + offset + 0x14) =\n         *(int *)(data + offset + 0x10) +\n         *(int *)(&DAT_200708fc + ((char)(&DAT_200708f1)[index] + tempValue) * 8);\n    if (-1 < (int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + tempValue) * 8] << 0x19\n                  )) {\n      return;\n    }\n    update_parameters_if_needed_00081014((&DAT_200708f8)[(tempValue + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,1);\n    return;\n  }\n  data = data + offset;\n  maxValue = (Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * 20000 >> 5;\n  if (maxValue <= *(int *)(data + 0x10) + 4U) {\n    maxValue = *(int *)(data + 0x10) + 4;\n  }\n  *(uint *)(data + 0x14) = maxValue;\n  (&DAT_200708f1)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008044c": "update_flags_and_parameters_0008044c",
                "param_1": "index",
                "param_2": "data",
                "param_3": "offset",
                "uVar1": "maxValue",
                "iVar2": "tempValue"
            },
            "calling": [],
            "called": [
                "FUN_00081014"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805a8": {
            "entrypoint": "0x000805a8",
            "current_name": "process_data_000805a8",
            "code": "\nvoid processData_000805a8(byte *outputBuffer)\n\n{\n  char nextValue;\n  uint dataCounter;\n  \n  dataCounter = (uint)DAT_200708f0;\n  if (dataCounter < 0x3c) {\n    nextValue = DAT_200708f0 + 1;\n    *outputBuffer = DAT_200708f0;\n    DAT_200708f0 = nextValue;\n    *(uint *)(&DAT_200708fc + dataCounter * 8) =\n         (Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * 0x5dc >> 5;\n    return;\n  }\n  *outputBuffer = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805a8": "process_data_000805a8",
                "param_1": "outputBuffer",
                "cVar1": "nextValue",
                "uVar2": "dataCounter"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806a0": {
            "entrypoint": "0x000806a0",
            "current_name": "update_parameter_and_start_tc_channel_000806a0",
            "code": "\nbyte updateParameterAndStartTCChannel_000806a0(byte *inputData,undefined4 param2)\n\n{\n  byte byteVar;\n  undefined4 startAddress;\n  uint divisionResult;\n  undefined4 byteVar2;\n  int loopVar;\n  uint tempVar;\n  \n  if (0x3b < *inputData) goto LAB_00080660;\n  update_parameter_00080f0c(param2,1,0x220,*inputData,0x960);\n  tempVar = (uint)*inputData;\n  byteVar = (&DAT_200708f8)[tempVar * 8];\n  inputData[2] = 0;\n  divisionResult = tempVar / 0xc;\n  (&DAT_200708f8)[tempVar * 8] = byteVar & 0xc0 | (byte)param2 & 0x3f;\n  inputData[1] = 0;\n  loopVar = 0;\n  do {\n    if ((int)((uint)(byte)(&DAT_200708f8)[(loopVar + divisionResult * 0xc) * 8] << 0x19) < 0)\n    goto LAB_00080652;\n    loopVar = loopVar + 1;\n  } while (loopVar != 0xc);\n  if (divisionResult == 0) {\n    startAddress = 0x40084000;\n    byteVar2 = 0x1e;\nLAB_0008064c:\n    start_tc_channel_000803fc(startAddress,divisionResult,byteVar2,byteVar2);\n  }\n  else {\n    if (divisionResult == 1) {\n      startAddress = 0x40084000;\n      byteVar2 = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (divisionResult == 2) {\n      startAddress = 0x40084000;\n      byteVar2 = 0x20;\n      goto LAB_0008064c;\n    }\n    if (divisionResult == 3) {\n      startAddress = 0x40080000;\n      divisionResult = 2;\n      byteVar2 = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (divisionResult == 4) {\n      startAddress = 0x40080000;\n      divisionResult = 0;\n      byteVar2 = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  (&DAT_200708f8)[(uint)*inputData * 8] = (&DAT_200708f8)[(uint)*inputData * 8] | 0x40;\nLAB_00080660:\n  return *inputData;\n}\n\n",
            "renaming": {
                "FUN_000806a0": "update_parameter_and_start_tc_channel_000806a0",
                "param_1": "inputData",
                "param_2": "param2",
                "bVar1": "byteVar",
                "uVar2": "startAddress",
                "uVar3": "divisionResult",
                "uVar4": "byteVar2",
                "iVar5": "loopVar",
                "uVar6": "tempVar"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_000803fc",
                "FUN_00080f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806f8": {
            "entrypoint": "0x000806f8",
            "current_name": "interpolation_calculation_000806f8",
            "code": "\nvoid interpolationCalculation_000806f8(byte *inputData,uint inputLength)\n\n{\n  uint clippedLength;\n  \n  if ((int)inputLength < 0x220) {\n    clippedLength = inputLength;\n    if (0xb3 < (int)inputLength) {\n      clippedLength = 0xb4;\n    }\n    inputLength = calculateInterpolation(clippedLength & ~((int)clippedLength >> 0x1f),0,0xb4,(0x88 - (char)inputData[1]) * 4,\n                           (600 - (char)inputData[2]) * 4,inputLength);\n  }\n  if (*inputData < 0x3c) {\n    clippedLength = (0x88 - (char)inputData[1]) * 4;\n    if (((int)(inputLength + (0x88 - (char)inputData[1]) * -4) < 0 == SBORROW4(inputLength,clippedLength)) &&\n       (clippedLength = (600 - (char)inputData[2]) * 4, (int)inputLength <= (int)clippedLength)) {\n      clippedLength = inputLength;\n    }\n    *(uint *)(&DAT_200708fc + (uint)*inputData * 8) =\n         (Elf32_Rel_ARRAY_20070000[6].rOffset / 1000000) * (clippedLength - 2) >> 5;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000806f8": "interpolation_calculation_000806f8",
                "param_1": "inputData",
                "param_2": "inputLength",
                "uVar1": "clippedLength",
                "calculate_interpolation_0008145c": "calculateInterpolation",
                "r_offset": "rOffset"
            },
            "calling": [
                "FUN_00080250",
                "FUN_00080164"
            ],
            "called": [
                "FUN_0008145c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008073a": {
            "entrypoint": "0x0008073a",
            "current_name": "FUNC_0008073a",
            "code": "\nvoid FUNC_0008073a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008073a": "FUNC_0008073a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080748": {
            "entrypoint": "0x00080748",
            "current_name": "FUNC_00080748",
            "code": "\nvoid FUNC_00080748(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080748": "FUNC_00080748"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074a": {
            "entrypoint": "0x0008074a",
            "current_name": "FUNC_0008074a",
            "code": "\nvoid FUNC_0008074a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074a": "FUNC_0008074a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074c": {
            "entrypoint": "0x0008074c",
            "current_name": "FUNC_0008074c",
            "code": "\nvoid FUNC_0008074c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074c": "FUNC_0008074c"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080774": {
            "entrypoint": "0x00080774",
            "current_name": "initialize_memory_and_config_00080774",
            "code": "\n\n\nvoid initializeMemoryAndConfig_00080774(void)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  initializeMemory();\n  _DAT_e000e014 = elfRelArray[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  executeFunctions();\n  iVar1 = 0;\n  do {\n    iVar2 = iVar1 + 1;\n    updateParametersIfNeeded(iVar1,0);\n    iVar1 = iVar2;\n  } while (iVar2 != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  updateParameter(0x400e0e00,1,0x300,0);\n  updateParametersIfNeeded(0,1);\n  updateParameter(0x400e0e00,1,0xc00,0);\n  updateParameter(0x400e0e00,1,0x3000,0);\n  updateParameter(0x400e1400,2,0x30,0);\n  updateParameter(0x400e1000,1,0xc00,0);\n  updateParameter(0x400e0e00,1,3,0);\n  updateParameter(0x400e1000,1,0xc000,0);\n  checkAndUpdateBit(0x25);\n  calculateIndex(0x400c0000,elfRelArray[6].r_offset,20000000,0xc);\n  updateConfiguration(0x400c0000,0,0x300000,1);\n  updateFlags(0x400c0000,0,0);\n  setParameterValue(0x400c0000,0xffffffff);\n  initializeValue(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080774": "initialize_memory_and_config_00080774",
                "initialize_memory_00080b98": "initializeMemory",
                "Elf32_Rel_ARRAY_20070000": "elfRelArray",
                "execute_functions_00081778": "executeFunctions",
                "update_parameters_if_needed_00081014": "updateParametersIfNeeded",
                "update_parameter_00080a30": "updateParameter",
                "check_and_update_bit_00080aa8": "checkAndUpdateBit",
                "calculate_index_00080c98": "calculateIndex",
                "update_configuration_00080d3e": "updateConfiguration",
                "update_flags_00080d30": "updateFlags",
                "set_param_value_00080d6a": "setParameterValue",
                "initialize_value_00080d62": "initializeValue"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00081778",
                "FUN_00080a30",
                "FUN_00080b98",
                "FUN_00081014",
                "FUN_00080d30",
                "FUN_00080c98",
                "FUN_00080d62",
                "FUN_00080d3e",
                "FUN_00080d6a",
                "FUN_00080aa8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008089c": {
            "entrypoint": "0x0008089c",
            "current_name": "initialize_memory_and_parameters_0008089c",
            "code": "\nvoid initializeMemoryAndParameters_0008089c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  initialize_memory_000811b0(&DAT_20070c0c);\n  initialize_memory_000811b0(&DAT_20070b60);\n  initialize_parameters_00081348(&DAT_20070be8,0x400e0800,8,8,&DAT_20070c0c,&DAT_20070b60,param3);\n  initialize_memory_000811b0(&DAT_20070e6c);\n  initialize_memory_000811b0(&DAT_20070ef4);\n  initialize_memory_000811b0(&DAT_20070f7c);\n  initialize_memory_000811b0(&DAT_20070ad8);\n  initialize_memory_000811b0(&DAT_20070d0c);\n  initialize_memory_000811b0(&DAT_20070d94);\n  initialize_and_assign_parameters_00081438(&DAT_20070c94,0x40098000,0x11,0x11,&DAT_20070e6c,&DAT_20070ad8);\n  initialize_and_assign_parameters_00081438(&DAT_20070cbc,0x4009c000,0x12,0x12,&DAT_20070ef4,&DAT_20070d0c);\n  initialize_and_assign_parameters_00081438(&DAT_20070ce4,0x400a4000,0x14,0x14,&DAT_20070f7c,&DAT_20070d94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008089c": "initialize_memory_and_parameters_0008089c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [],
            "called": [
                "FUN_000811b0",
                "FUN_00081438",
                "FUN_00081348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080970": {
            "entrypoint": "0x00080970",
            "current_name": "check_and_process_value_differences_00080970",
            "code": "\nvoid checkAndProcessValueDifferences_00080970(void)\n\n{\n  int result;\n  \n  result = calculateValueDifference(&DAT_20070be8);\n  if (result != 0) {\n    FUNC_0008073a();\n  }\n  result = calculateValueDifference(&DAT_20070c94);\n  if (result != 0) {\n    FUNC_00080748();\n  }\n  result = calculateValueDifference(&DAT_20070cbc);\n  if (result != 0) {\n    FUNC_0008074a();\n  }\n  result = calculateValueDifference(&DAT_20070ce4);\n  if (result != 0) {\n    FUNC_0008074c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080970": "check_and_process_value_differences_00080970",
                "iVar1": "result",
                "calculate_value_difference_00081248": "calculateValueDifference"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_0008074c",
                "FUN_0008074a",
                "FUN_0008073a",
                "FUN_00081248",
                "FUN_00080748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809be": {
            "entrypoint": "0x000809be",
            "current_name": "update_parameter_000809be",
            "code": "\nvoid updateParameter_000809be(int baseAddress,undefined4 actionType,uint newValue)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(baseAddress + 0x44) = newValue;\n  switch(actionType) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~newValue;\n    break;\n  case 2:\n    updatedValue = *(uint *)(baseAddress + 0x70) | newValue;\n    break;\n  default:\n    goto caseDefault;\n  }\n  *(uint *)(baseAddress + 0x70) = updatedValue;\ncaseDefault:\n  *(uint *)(baseAddress + 4) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809be": "update_parameter_000809be",
                "param_1": "baseAddress",
                "param_2": "actionType",
                "param_3": "newValue",
                "uVar1": "updatedValue",
                "switchD_000809c4_caseD_6": "caseDefault"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809e4": {
            "entrypoint": "0x000809e4",
            "current_name": "update_parameters_000809e4",
            "code": "\nvoid updateParameters_000809e4(undefined4 *output,undefined4 value,uint flags)\n\n{\n  bool isNegativeFlag;\n  \n  isNegativeFlag = (int)(flags << 0x1f) < 0;\n  output[0x11] = value;\n  if (isNegativeFlag) {\n    output[0x19] = value;\n  }\n  if (!isNegativeFlag) {\n    output[0x18] = value;\n  }\n  isNegativeFlag = (flags & 10) != 0;\n  if (isNegativeFlag) {\n    output[8] = value;\n  }\n  if (!isNegativeFlag) {\n    output[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    output[0x20] = value;\n  }\n  output[5] = value;\n  *output = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809e4": "update_parameters_000809e4",
                "param_1": "output",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "isNegativeFlag"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a0a": {
            "entrypoint": "0x00080a0a",
            "current_name": "update_parameters_00080a0a",
            "code": "\nvoid updateParameters_00080a0a(undefined4 *paramArray,undefined4 paramValue,int condition1,int condition2,int condition3)\n\n{\n  paramArray[17] = paramValue;\n  if (condition3 == 0) {\n    paramArray[24] = paramValue;\n  }\n  else {\n    paramArray[25] = paramValue;\n  }\n  if (condition2 == 0) {\n    paramArray[21] = paramValue;\n  }\n  else {\n    paramArray[20] = paramValue;\n  }\n  if (condition1 == 0) {\n    paramArray[13] = paramValue;\n  }\n  else {\n    paramArray[12] = paramValue;\n  }\n  paramArray[4] = paramValue;\n  *paramArray = paramValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a0a": "update_parameters_00080a0a",
                "param_1": "paramArray",
                "param_2": "paramValue",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3",
                "param_1[0x11]": "paramArray[17]",
                "param_1[0x18]": "paramArray[24]",
                "param_1[0x19]": "paramArray[25]",
                "param_1[0x15]": "paramArray[21]",
                "param_1[0x14]": "paramArray[20]",
                "param_1[0xd]": "paramArray[13]",
                "param_1[0xc]": "paramArray[12]",
                "param_1[4]": "paramArray[4]"
            },
            "calling": [
                "FUN_00080a30",
                "FUN_00081014"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a30": {
            "entrypoint": "0x00080a30",
            "current_name": "update_parameter_00080a30",
            "code": "\nundefined4 updateParameter_00080a30(int device,int paramType,undefined4 newValue,uint mask)\n\n{\n  bool isNegative;\n  \n  switch(paramType) {\n  case 1:\n  case 2:\n    updateParamCase1or2(device,paramType,newValue);\n    isNegative = (int)(mask << 0x1f) < 0;\n    *(undefined4 *)(device + 0x44) = newValue;\n    if (isNegative) {\n      *(undefined4 *)(device + 100) = newValue;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(device + 0x60) = newValue;\n    }\n    break;\n  case 3:\n    updateParamCase3(device,newValue,mask,0x809e5,device);\n    break;\n  case 4:\n  case 5:\n    updateParamCase4or5(device,newValue,paramType == 5,(mask << 0x1d) >> 0x1f,mask & 1,paramType,newValue)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080a30": "update_parameter_00080a30",
                "param_1": "device",
                "param_2": "paramType",
                "param_3": "newValue",
                "param_4": "mask",
                "bVar1": "isNegative",
                "update_parameter_000809be": "updateParamCase1or2",
                "update_parameters_000809e4": "updateParamCase3",
                "update_parameters_00080a0a": "updateParamCase4or5"
            },
            "calling": [
                "FUN_00080f0c",
                "FUN_00080774"
            ],
            "called": [
                "FUN_000809e4",
                "FUN_000809be",
                "FUN_00080a0a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a94": {
            "entrypoint": "0x00080a94",
            "current_name": "check_bitwise_and_00080a94",
            "code": "\nuint checkBitwiseAnd_00080a94(int inputValue,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(inputValue + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(inputValue + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080a94": "check_bitwise_and_00080a94",
                "param_1": "inputValue",
                "param_2": "mask",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081014"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "check_and_update_bit_00080aa8",
            "code": "\n\n\nundefined4 checkAndUpdateBit_00080aa8(uint input)\n\n{\n  uint bitMask;\n  \n  if (input < 0x2d) {\n    if (input < 0x20) {\n      bitMask = 1 << (input & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (input - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "check_and_update_bit_00080aa8",
                "param_1": "input",
                "uVar1": "bitMask"
            },
            "calling": [
                "FUN_00080f0c",
                "FUN_000803fc",
                "FUN_00080774",
                "FUN_000813dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b2c": {
            "entrypoint": "0x00080b2c",
            "current_name": "configure_tc_channel_00080b2c",
            "code": "\nvoid configureTcChannel_00080b2c(undefined4 channelId,uint dwChannel,char *channelName)\n\n{\n  int baseOffset;\n  int channelAddress;\n  undefined8 combinedParams;\n  \n  combinedParams = CONCAT44(dwChannel,channelId);\n  if (2 < dwChannel) {\n    channelName = \"TC_Configure\";\n    combinedParams = assertion_failed_000816f8(\"../source/tc.c\",0x40,\"TC_Configure\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  baseOffset = (int)((ulonglong)combinedParams >> 0x20) * 0x40;\n  channelAddress = (int)combinedParams + baseOffset;\n  *(undefined4 *)((int)combinedParams + baseOffset) = 2;\n  *(undefined4 *)(channelAddress + 0x28) = 0xffffffff;\n  *(char **)(channelAddress + 4) = channelName;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b2c": "configure_tc_channel_00080b2c",
                "param_1": "channelId",
                "param_2": "dwChannel",
                "param_3": "channelName",
                "iVar1": "baseOffset",
                "iVar2": "channelAddress",
                "uVar3": "combinedParams"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b90": {
            "entrypoint": "0x00080b90",
            "current_name": "set_param_value_00080b90",
            "code": "\nvoid set_param_value_00080b90(int ptr_to_data,int index,undefined4 new_value)\n\n{\n  *(undefined4 *)(ptr_to_data + index * 0x40 + 0x14) = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b90": "set_param_value_00080b90",
                "param_1": "ptr_to_data",
                "param_2": "index",
                "param_3": "new_value"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b98": {
            "entrypoint": "0x00080b98",
            "current_name": "initialize_memory_00080b98",
            "code": "\n\n\nvoid initializeMemory_00080b98(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  elfRelocations[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b98": "initialize_memory_00080b98",
                "Elf32_Rel_ARRAY_20070000": "elfRelocations"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080c20",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080c6a) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_200708a0\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_00085878 + iVar1);\n  }\n  for (puVar2 = &DAT_200708a0; puVar2 < (undefined4 *)0x20071248; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  run_system_000815ec();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000815ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c98": {
            "entrypoint": "0x00080c98",
            "current_name": "calculate_index_00080c98",
            "code": "\nundefined4 calculateIndex_00080c98(undefined4 *result,uint inputSize,int multiplier,int divisor)\n\n{\n  uint quotient;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *result = 1;\n  result[1] = 0;\n  result[0x48] = 0x202;\n  result[0x41] = 0;\n  result[0x45] = 0;\n  quotient = inputSize / (uint)(multiplier * 2);\n  if (inputSize == multiplier * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(divisor * (int)(((ulonglong)inputSize / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      result[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | result[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080c98": "calculate_index_00080c98",
                "param_1": "result",
                "param_2": "inputSize",
                "param_3": "multiplier",
                "param_4": "divisor",
                "uVar1": "quotient",
                "uVar2": "index",
                "local_58": "thresholds"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d30": {
            "entrypoint": "0x00080d30",
            "current_name": "update_flags_00080d30",
            "code": "\nvoid updateFlags_00080d30(int ptr,uint val1,uint val2)\n\n{\n  *(uint *)(ptr + 4) = val1 | *(uint *)(ptr + 4) | (val2 & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d30": "update_flags_00080d30",
                "param_1": "ptr",
                "param_2": "val1",
                "param_3": "val2"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d3e": {
            "entrypoint": "0x00080d3e",
            "current_name": "update_configuration_00080d3e",
            "code": "\nvoid updateConfiguration_00080d3e(int configPtr,uint input1,uint input2,uint input3)\n\n{\n  *(uint *)(configPtr + 4) =\n       input2 | *(uint *)(configPtr + 4) | (input1 & 0xf) << 0x18 | (input3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d3e": "update_configuration_00080d3e",
                "param_1": "configPtr",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d58": {
            "entrypoint": "0x00080d58",
            "current_name": "set_bit_00080d58",
            "code": "\nvoid setBit_00080d58(int baseAddress,uint bitIndex)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitIndex & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d58": "set_bit_00080d58",
                "param_1": "baseAddress",
                "param_2": "bitIndex"
            },
            "calling": [
                "FUN_00080f0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d62": {
            "entrypoint": "0x00080d62",
            "current_name": "initialize_value_00080d62",
            "code": "\nvoid initializeValue_00080d62(int baseAddress)\n\n{\n  *(undefined4 *)(baseAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d62": "initialize_value_00080d62",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d6a": {
            "entrypoint": "0x00080d6a",
            "current_name": "set_param_value_00080d6a",
            "code": "\nvoid setParamValue_00080d6a(int baseAddress,undefined4 newValue)\n\n{\n  *(undefined4 *)(baseAddress + 0x28) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d6a": "set_param_value_00080d6a",
                "param_1": "baseAddress",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e80": {
            "entrypoint": "0x00080e80",
            "current_name": "initialize_00080e80",
            "code": "\nundefined4 initialize_00080e80(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080e80": "initialize_00080e80"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e88": {
            "entrypoint": "0x00080e88",
            "current_name": "addition_with_previous_value_00080e88",
            "code": "\nint additionWithPreviousValue_00080e88(int valueToAdd)\n\n{\n  int previousValue;\n  \n  if (DAT_20071208 == 0) {\n    DAT_20071208 = 0x20071248;\n  }\n  previousValue = DAT_20071208;\n  DAT_20071208 = valueToAdd + DAT_20071208;\n  return previousValue;\n}\n\n",
            "renaming": {
                "FUN_00080e88": "addition_with_previous_value_00080e88",
                "param_1": "valueToAdd",
                "iVar1": "previousValue"
            },
            "calling": [
                "FUN_0008236c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eaa": {
            "entrypoint": "0x00080eaa",
            "current_name": "get_error_code_00080eaa",
            "code": "\nErrorCode getErrorCode_00080eaa(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080eaa": "get_error_code_00080eaa",
                "undefined4": "ErrorCode"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eb0": {
            "entrypoint": "0x00080eb0",
            "current_name": "initialize_memory_00080eb0",
            "code": "\nundefined4 initializeMemory_00080eb0(undefined4 param1,int baseAddress)\n\n{\n  *(undefined4 *)(baseAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080eb0": "initialize_memory_00080eb0",
                "param_1": "param1",
                "param_2": "baseAddress"
            },
            "calling": [
                "FUN_00084494"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eba": {
            "entrypoint": "0x00080eba",
            "current_name": "initialize_00080eba",
            "code": "\nresult initialize_00080eba(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080eba": "initialize_00080eba",
                "undefined4": "result"
            },
            "calling": [
                "FUN_000844bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ebe": {
            "entrypoint": "0x00080ebe",
            "current_name": "initialize_program_00080ebe",
            "code": "\nundefined4 initializeProgram_00080ebe(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ebe": "initialize_program_00080ebe"
            },
            "calling": [
                "FUN_000844e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec2": {
            "entrypoint": "0x00080ec2",
            "current_name": "get_zero_00080ec2",
            "code": "\nint getZero_00080ec2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ec2": "get_zero_00080ec2",
                "undefined4": "int"
            },
            "calling": [
                "FUN_00084508"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec8": {
            "entrypoint": "0x00080ec8",
            "current_name": "process_bytes_00080ec8",
            "code": "\n\n\nuint processBytes_00080ec8(undefined4 buffer,int offset,uint length)\n\n{\n  int i;\n  \n  for (i = 0; i < (int)length; i = i + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(offset + i);\n  }\n  return length & ~((int)length >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_00080ec8": "process_bytes_00080ec8",
                "param_1": "buffer",
                "param_2": "offset",
                "param_3": "length",
                "iVar1": "i"
            },
            "calling": [
                "FUN_00084244"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eec": {
            "entrypoint": "0x00080eec",
            "current_name": "exit_with_status_00080eec",
            "code": "\nvoid exitWithStatus_00080eec(undefined4 status,undefined4 UNUSED,undefined4 messageFormat,undefined4 ARGS_UNUSED)\n\n{\n  printMessage(\"Exiting with status %d.\\n\",status,messageFormat,ARGS_UNUSED,ARGS_UNUSED);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "param_1": "status",
                "param_2": "UNUSED",
                "param_3": "messageFormat",
                "param_4": "ARGS_UNUSED",
                "process_data_000817c8": "printMessage"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_000817c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080efc": {
            "entrypoint": "0x00080efc",
            "current_name": "FUNC_00080efc",
            "code": "\nvoid FUNC_00080efc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080efc": "FUNC_00080efc"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080efe": {
            "entrypoint": "0x00080efe",
            "current_name": "initialize_return_value_00080efe",
            "code": "\nundefined4 initializeReturnValue_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080efe": "initialize_return_value_00080efe"
            },
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_000816d8": {
            "entrypoint": "0x00080f04",
            "current_name": "get_global_data_thunk_000816d8",
            "code": "\nundefined4 getGlobalData_thunk_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "thunk_FUN_000816d8": "get_global_data_thunk_000816d8"
            },
            "calling": [
                "FUN_000811e8"
            ],
            "called": [
                "FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f08": {
            "entrypoint": "0x00080f08",
            "current_name": "FUNC_00080f08",
            "code": "\nvoid FUNC_00080f08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f08": "FUNC_00080f08"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000815ec",
                "FUN_000801e0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080f0c": {
            "entrypoint": "0x00080f0c",
            "current_name": "update_parameter_00080f0c",
            "code": "\n\n\nint updateParameter_00080f0c(int input,int mode)\n\n{\n  int result;\n  uint val1;\n  undefined4 val2;\n  uint val3;\n  byte bVar5;\n  byte bVar6;\n  int iVar1;\n  int iVar2;\n  \n  result = input;\n  if ((&DAT_00084b50)[input * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[input] & 0xf) == 4) {\n      result = set_bit_00080d58(0x400c0000,(&DAT_00084b5d)[input * 0x1c]);\n    }\n    bVar6 = (&DAT_20070e1c)[input];\n    bVar5 = bVar6 & 0xf;\n    if ((bVar5 < 3) && (bVar6 != 0)) {\n      if (bVar5 == 2) {\n        if (mode == 0) {\n          return result;\n        }\n      }\n      else if (bVar5 == 1) {\n        if (mode == 2) {\n          return result;\n        }\n      }\n      else if (bVar5 == 3) {\n        if (mode == 1) {\n          return result;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (mode != 1) {\nLAB_00080f68:\n      if (mode == 0) {\n        result = input * 0x1c;\n        check_and_update_bit_00080aa8(*(undefined4 *)(&DAT_00084b4c + result));\n        result = update_parameter_00080a30(*(undefined4 *)(&DAT_00084b44 + result),3,\n                             *(undefined4 *)(&DAT_00084b48 + result),0);\n        bVar6 = (&DAT_20070e1c)[input] & 0xf0 | 2;\n      }\n      else {\n        if (mode != 2) {\n          return result;\n        }\n        result = input * 0x1c;\n        check_and_update_bit_00080aa8(*(undefined4 *)(&DAT_00084b4c + result));\n        result = update_parameter_00080a30(*(undefined4 *)(&DAT_00084b44 + result),3,\n                             *(undefined4 *)(&DAT_00084b48 + result),1);\n        bVar6 = (&DAT_20070e1c)[input] & 0xf0 | 1;\n      }\n      (&DAT_20070e1c)[input] = bVar6;\n      return result;\n    }\n    iVar1 = input * 0x1c;\n    iVar2 = *(int *)(&DAT_00084b44 + iVar1);\n    if (bVar6 >> 4 == 0) {\n      val2 = 4;\n    }\n    else {\n      val2 = 5;\n    }\n    result = update_parameter_00080a30(iVar2,val2,*(undefined4 *)(&DAT_00084b48 + iVar1),\n                         *(undefined4 *)(&DAT_00084b54 + iVar1));\n    (&DAT_20070e1c)[input] = (&DAT_20070e1c)[input] & 0xf0 | 3;\n    if (*(int *)(iVar2 + 0x18) == -1) {\n      val1 = *(uint *)(&DAT_00084b4c + iVar1);\n      if (0x2c < val1) {\n        return 1;\n      }\n      if (val1 < 0x20) {\n        val1 = 1 << (val1 & 0xff);\n        val3 = _DAT_400e0618 & val1;\n        if (val3 == val1) {\n          _DAT_400e0614 = val3;\n        }\n      }\n      else {\n        val1 = 1 << (val1 - 0x20 & 0xff);\n        val3 = _DAT_400e0708 & val1;\n        if (val3 == val1) {\n          _DAT_400e0704 = val3;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080f0c": "update_parameter_00080f0c",
                "param_1": "input",
                "param_2": "mode",
                "iVar1": "result",
                "uVar2": "val1",
                "uVar3": "val2",
                "uVar4": "val3",
                "iVar7": "iVar1",
                "iVar8": "iVar2"
            },
            "calling": [
                "FUN_00081014",
                "FUN_000806a0",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080a30",
                "FUN_00080aa8",
                "FUN_00080d58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081014": {
            "entrypoint": "0x00081014",
            "current_name": "update_parameters_if_needed_00081014",
            "code": "\nvoid updateParametersIfNeeded_00081014(int index,int flag,undefined4 value)\n\n{\n  int result;\n  undefined4 paramValue;\n  int paramAddress;\n  \n  if ((&DAT_00084b50)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[index] & 0xf) == 5) {\n      update_parameter_00080f0c(index,1,value,5,index,flag,value);\n    }\n    (&DAT_20070e1c)[index] = (&DAT_20070e1c)[index] & 0xf | (byte)(flag << 4);\n    paramAddress = *(int *)(&DAT_00084b44 + index * 0x1c);\n    paramValue = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n    result = check_bitwise_and_00080a94(paramAddress,paramValue);\n    if (result == 0) {\n      if (flag != 0) {\n        *(undefined4 *)(paramAddress + 100) = paramValue;\n        return;\n      }\n      *(undefined4 *)(paramAddress + 0x60) = paramValue;\n      return;\n    }\n    update_parameters_00080a0a(paramAddress,paramValue,flag,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081014": "update_parameters_if_needed_00081014",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "value",
                "iVar1": "result",
                "uVar2": "paramValue",
                "iVar3": "paramAddress"
            },
            "calling": [
                "FUN_00080774",
                "FUN_0008044c",
                "FUN_00080250"
            ],
            "called": [
                "FUN_00080f0c",
                "FUN_00080a94",
                "FUN_00080a0a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810a6": {
            "entrypoint": "0x000810a6",
            "current_name": "process_non_zero_param_000810a6",
            "code": "\nvoid processNonZeroParam_000810a6(int *arrayPtr,int value,undefined4 var1,undefined4 var2)\n\n{\n  undefined4 trailingZerosCount;\n  \n  if (value != 0) {\n    trailingZerosCount = count_trailing_zeros_00082688(value);\n    (**(code **)(*arrayPtr + 4))(arrayPtr,value,trailingZerosCount,*(code **)(*arrayPtr + 4),var2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810a6": "process_non_zero_param_000810a6",
                "param_1": "arrayPtr",
                "param_2": "value",
                "param_3": "var1",
                "param_4": "var2",
                "uVar1": "trailingZerosCount"
            },
            "calling": [
                "FUN_000810e8",
                "FUN_000810c4",
                "FUN_000810fc",
                "FUN_000810d8"
            ],
            "called": [
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810c4": {
            "entrypoint": "0x000810c4",
            "current_name": "execute_processing_000810c4",
            "code": "\nvoid executeProcessing_000810c4(void)\n\n{\n  processNonZeroParam();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810c4": "execute_processing_000810c4",
                "process_non_zero_param_000810a6": "processNonZeroParam"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810cc": {
            "entrypoint": "0x000810cc",
            "current_name": "execute_function_000810cc",
            "code": "\nvoid executeFunction_000810cc(undefined4 *functionPointer)\n\n{\n  (**(code **)*functionPointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810cc": "execute_function_000810cc",
                "param_1": "functionPointer"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810d8": {
            "entrypoint": "0x000810d8",
            "current_name": "process_and_return_000810d8",
            "code": "\nvoid process_and_return_000810d8(undefined4 input_param,undefined4 unused_param,undefined4 optional_param1,undefined4 optional_param2)\n\n{\n  process_non_zero(input_param,&DAT_00085635,optional_param1,optional_param2,optional_param2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810d8": "process_and_return_000810d8",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "optional_param1",
                "param_4": "optional_param2",
                "process_non_zero_param_000810a6": "process_non_zero"
            },
            "calling": [
                "FUN_000810e8",
                "FUN_0008117a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810e8": {
            "entrypoint": "0x000810e8",
            "current_name": "calculate_sum_000810e8",
            "code": "\nint calculateSum_000810e8(undefined4 inputValue)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = process_non_zero_param_000810a6();\n  result2 = process_and_return_000810d8(inputValue);\n  return result2 + result1;\n}\n\n",
            "renaming": {
                "FUN_000810e8": "calculate_sum_000810e8",
                "param_1": "inputValue",
                "iVar1": "result1",
                "iVar2": "result2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810fc": {
            "entrypoint": "0x000810fc",
            "current_name": "convert_to_base_000810fc",
            "code": "\nvoid convertToBase_000810fc(undefined4 input,uint number,uint base)\n\n{\n  char *result;\n  uint quotient;\n  char *currentDigit;\n  char digitChar;\n  uint remainder;\n  char digitArray [5];\n  \n  digitArray[1] = 0;\n  if (base < 2) {\n    base = 10;\n  }\n  result = digitArray;\n  do {\n    currentDigit = result;\n    quotient = number / base;\n    remainder = number - base * quotient & 0xff;\n    digitChar = (char)remainder;\n    if (remainder < 10) {\n      digitChar = digitChar + '0';\n    }\n    else {\n      digitChar = digitChar + '7';\n    }\n    *currentDigit = digitChar;\n    number = quotient;\n    result = currentDigit + -1;\n  } while (quotient != 0);\n  process_non_zero_param_000810a6(input,currentDigit);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810fc": "convert_to_base_000810fc",
                "param_1": "input",
                "param_2": "number",
                "param_3": "base",
                "pcVar1": "result",
                "uVar2": "quotient",
                "pcVar3": "currentDigit",
                "cVar4": "digitChar",
                "uVar5": "remainder",
                "local_15": "digitArray"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008113a": {
            "entrypoint": "0x0008113a",
            "current_name": "convert_number_0008113a",
            "code": "\nint convert_number_0008113a(undefined4 *input_ptr,uint number,uint base,undefined4 undefined_param)\n\n{\n  int result;\n  int negative_result;\n  \n  if (base == 0) {\n    result = (**(code **)*input_ptr)(input_ptr,number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)number < 0) {\n      result = execute_function_000810cc(input_ptr,0x2d);\n      negative_result = convert_to_base_000810fc(input_ptr,-number,10);\n      return negative_result + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = convert_to_base_000810fc(input_ptr,number,base,undefined_param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008113a": "convert_number_0008113a",
                "param_1": "input_ptr",
                "param_2": "number",
                "param_3": "base",
                "param_4": "undefined_param",
                "iVar1": "result",
                "iVar2": "negative_result"
            },
            "calling": [
                "thunk_FUN_0008113a",
                "FUN_0008117a"
            ],
            "called": [
                "FUN_000810fc",
                "FUN_000810cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0008113a": {
            "entrypoint": "0x00081176",
            "current_name": "convert_base_thunk_0008113a",
            "code": "\nint convertBase_thunk_0008113a(undefined4 *input,uint value,uint base,undefined4 param)\n\n{\n  int result;\n  int negativeValue;\n  \n  if (base == 0) {\n    result = (**(code **)*input)(input,value & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)value < 0) {\n      result = execute_function_000810cc(input,0x2d);\n      negativeValue = convert_to_base_000810fc(input,-value,10);\n      return negativeValue + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = convert_to_base_000810fc(input,value,base,param);\n  return result;\n}\n\n",
            "renaming": {
                "thunk_FUN_0008113a": "convert_base_thunk_0008113a",
                "param_1": "input",
                "param_2": "value",
                "param_3": "base",
                "param_4": "param",
                "iVar1": "result",
                "iVar2": "negativeValue"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008117a": {
            "entrypoint": "0x0008117a",
            "current_name": "calculate_sum_0008117a",
            "code": "\nint calculateSum_0008117a(undefined4 input)\n\n{\n  int convertedNumber;\n  int processedResult;\n  \n  convertedNumber = convert_number_0008113a();\n  processedResult = process_and_return_000810d8(input);\n  return processedResult + convertedNumber;\n}\n\n",
            "renaming": {
                "FUN_0008117a": "calculate_sum_0008117a",
                "param_1": "input",
                "iVar1": "convertedNumber",
                "iVar2": "processedResult"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081190": {
            "entrypoint": "0x00081190",
            "current_name": "execute_if_r_info_is_zero_00081190",
            "code": "\nvoid execute_if_r_info_is_zero_00081190(void)\n\n{\n  if ((rel_array[6].info != 0xffffffff) &&\n     (rel_array[6].info = rel_array[6].info - 1,\n     rel_array[6].info == 0)) {\n    (*(code *)((int)&rel_array[0].offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081190": "execute_if_r_info_is_zero_00081190",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "r_info": "info",
                "r_offset": "offset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b0": {
            "entrypoint": "0x000811b0",
            "current_name": "initialize_memory_000811b0",
            "code": "\nint initializeMemory_000811b0(int memoryAddress)\n\n{\n  fillMemory(memoryAddress,0,0x80);\n  *(undefined4 *)(memoryAddress + 0x80) = 0;\n  *(undefined4 *)(memoryAddress + 0x84) = 0;\n  return memoryAddress;\n}\n\n",
            "renaming": {
                "FUN_000811b0": "initialize_memory_000811b0",
                "param_1": "memoryAddress",
                "fill_memory_00081f00": "fillMemory"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ca": {
            "entrypoint": "0x000811ca",
            "current_name": "update_parameter_000811ca",
            "code": "\nvoid updateParameter_000811ca(int baseAddress,undefined newValue)\n\n{\n  uint updatedIndex;\n  \n  updatedIndex = *(int *)(baseAddress + 0x80) + 1U & 0x7f;\n  if (updatedIndex != *(uint *)(baseAddress + 0x84)) {\n    *(undefined *)(baseAddress + *(int *)(baseAddress + 0x80)) = newValue;\n    *(uint *)(baseAddress + 0x80) = updatedIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000811ca": "update_parameter_000811ca",
                "param_1": "baseAddress",
                "param_2": "newValue",
                "uVar1": "updatedIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811e8": {
            "entrypoint": "0x000811e8",
            "current_name": "check_and_update_data_000811e8",
            "code": "\nint checkAndUpdateData_000811e8(int *data)\n\n{\n  int globalData;\n  \n  globalData = getGlobalData();\n  data[3] = globalData;\n  do {\n    globalData = (**(code **)(*data + 0xc))(data);\n    if (-1 < globalData) {\n      return globalData;\n    }\n    globalData = getGlobalData();\n  } while ((uint)(globalData - data[3]) < (uint)threshold);\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_000811e8": "check_and_update_data_000811e8",
                "param_1": "data",
                "iVar1": "globalData",
                "get_global_data_thunk_000816d8": "getGlobalData",
                "param_1[3]": "data[3]",
                "param_1[2]": "threshold"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "thunk_FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081214": {
            "entrypoint": "0x00081214",
            "current_name": "process_data_00081214",
            "code": "\nvoid processData_00081214(undefined4 inputData,undefined4 updateData,uint targetData)\n\n{\n  uint result;\n  \n  initializeParameters(inputData,&DAT_00085637);\n  while ((result = checkAndUpdateData(updateData), -1 < (int)result && (result != targetData))) {\n    executeAndCopyStrings(inputData,result & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081214": "process_data_00081214",
                "param_1": "inputData",
                "param_2": "updateData",
                "param_3": "targetData",
                "uVar1": "result",
                "initialize_params_000814f6": "initializeParameters",
                "check_and_update_data_000811e8": "checkAndUpdateData",
                "execute_and_copy_strings_0008159e": "executeAndCopyStrings"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000811e8",
                "FUN_000814f6",
                "FUN_0008159e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081248": {
            "entrypoint": "0x00081248",
            "current_name": "calculate_value_difference_00081248",
            "code": "\nuint calculateValueDifference_00081248(int inputValue)\n\n{\n  return *(int *)(*(int *)(inputValue + 0x10) + 0x80) - *(int *)(*(int *)(inputValue + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_00081248": "calculate_value_difference_00081248",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00080250",
                "FUN_00080970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081276": {
            "entrypoint": "0x00081276",
            "current_name": "extract_byte_from_buffer_00081276",
            "code": "\nuint extractByteFromBuffer_00081276(int bufferAddress)\n\n{\n  byte extractedByte;\n  int bufferPointer;\n  \n  bufferPointer = *(int *)(bufferAddress + 0x10);\n  if (*(int *)(bufferPointer + 0x80) != *(int *)(bufferPointer + 0x84)) {\n    extractedByte = *(byte *)(bufferPointer + *(int *)(bufferPointer + 0x84));\n    *(uint *)(bufferPointer + 0x84) = *(int *)(bufferPointer + 0x84) + 1U & 0x7f;\n    return (uint)extractedByte;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081276": "extract_byte_from_buffer_00081276",
                "param_1": "bufferAddress",
                "iVar2": "bufferPointer",
                "bVar1": "extractedByte"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000812b8": {
            "entrypoint": "0x000812b8",
            "current_name": "update_data_000812b8",
            "code": "\nundefined4 updateData_000812b8(int dataStructPtr,undefined4 newValue)\n\n{\n  int structData;\n  uint updatedValue;\n  \n  structData = *(int *)(dataStructPtr + 0x14);\n  if ((*(int *)(*(int *)(dataStructPtr + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(structData + 0x84) == *(int *)(structData + 0x80))) {\n    *(undefined4 *)(*(int *)(dataStructPtr + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    updatedValue = *(int *)(structData + 0x80) + 1U & 0x8000007f;\n    if ((int)updatedValue < 0) {\n      updatedValue = (updatedValue - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(structData + 0x84) == updatedValue);\n    *(char *)(structData + *(int *)(structData + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataStructPtr + 0x14) + 0x80) = updatedValue;\n    *(undefined4 *)(*(int *)(dataStructPtr + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000812b8": "update_data_000812b8",
                "param_1": "dataStructPtr",
                "param_2": "newValue",
                "iVar1": "structData",
                "uVar2": "updatedValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081348": {
            "entrypoint": "0x00081348",
            "current_name": "initialize_parameters_00081348",
            "code": "\nvoid initializeParameters_00081348(undefined4 *parameters,undefined4 value1,undefined value2,undefined4 value3,\n                 undefined4 value4,undefined4 value5)\n\n{\n  parameters[1] = 0;\n  parameters[2] = 1000;\n  parameters[6] = value1;\n  *parameters = &PTR_FUN_000812b8_1_00085650;\n  *(undefined *)(parameters + 7) = value2;\n  parameters[4] = value4;\n  parameters[8] = value3;\n  parameters[5] = value5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081348": "initialize_parameters_00081348",
                "param_1": "parameters",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4",
                "param_6": "value5"
            },
            "calling": [
                "FUN_0008089c",
                "FUN_00081438"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813dc": {
            "entrypoint": "0x000813dc",
            "current_name": "update_configuration_000813dc",
            "code": "\nvoid updateConfiguration_000813dc(int configPtr,uint divider)\n\n{\n  int var1;\n  undefined4 *structPtr;\n  \n  check_and_update_bit_00080aa8(*(undefined4 *)(configPtr + 0x20));\n  structPtr = *(undefined4 **)(configPtr + 0x18);\n  structPtr[0x48] = 0x202;\n  *structPtr = 0xac;\n  structPtr[1] = 0x800;\n  structPtr[8] = relocationArray[6].offset / divider >> 4;\n  structPtr[3] = 0xffffffff;\n  structPtr[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(configPtr + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(configPtr + 0x1c) & 0x1f);\n  var1 = *(int *)(configPtr + 0x10);\n  *(undefined4 *)(var1 + 0x84) = 0;\n  *(undefined4 *)(var1 + 0x80) = 0;\n  var1 = *(int *)(configPtr + 0x14);\n  *(undefined4 *)(var1 + 0x84) = 0;\n  *(undefined4 *)(var1 + 0x80) = 0;\n  *structPtr = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813dc": "update_configuration_000813dc",
                "param_1": "configPtr",
                "param_2": "divider",
                "iVar1": "var1",
                "puVar2": "structPtr",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080aa8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081438": {
            "entrypoint": "0x00081438",
            "current_name": "initialize_and_assign_parameters_00081438",
            "code": "\nundefined4 * initialize_and_assign_parameters_00081438(undefined4 *output_array,undefined4 input_value)\n\n{\n  initialize_parameters_00081348();\n  *output_array = &PTR_update_data_000812b8_1_00085680;\n  output_array[9] = input_value;\n  return output_array;\n}\n\n",
            "renaming": {
                "FUN_00081438": "initialize_and_assign_parameters_00081438",
                "param_1": "output_array",
                "param_2": "input_value"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008145c": {
            "entrypoint": "0x0008145c",
            "current_name": "calculate_interpolation_0008145c",
            "code": "\nint calculateInterpolation_0008145c(int startValue,int startRange,int endRange,int startDomain,int endDomain)\n\n{\n  return (uint)((startValue - startRange) * (endDomain - startDomain)) / (uint)(endRange - startRange) + startDomain;\n}\n\n",
            "renaming": {
                "FUN_0008145c": "calculate_interpolation_0008145c",
                "param_1": "startValue",
                "param_2": "startRange",
                "param_3": "endRange",
                "param_4": "startDomain",
                "param_5": "endDomain"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081472": {
            "entrypoint": "0x00081472",
            "current_name": "process_relocated_function_00081472",
            "code": "\nundefined4 * process_relocated_function_00081472(undefined4 *relocated_function_param)\n\n{\n  process_relocated_function_00081472_00081800(*relocated_function_param);\n  return relocated_function_param;\n}\n\n",
            "renaming": {
                "FUN_00081472": "process_relocated_function_00081472",
                "param_1": "relocated_function_param"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081480": {
            "entrypoint": "0x00081480",
            "current_name": "reset_params_00081480",
            "code": "\nvoid resetParams_00081480(int *params)\n\n{\n  if (*params != 0) {\n    process_relocated_function_00081800();\n  }\n  *params = 0;\n  params[2] = 0;\n  params[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081480": "reset_params_00081480",
                "param_1": "params",
                "param_1[1]": "params[1]",
                "param_1[2]": "params[2]"
            },
            "calling": [
                "FUN_000814d0"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081496": {
            "entrypoint": "0x00081496",
            "current_name": "execute_and_check_00081496",
            "code": "\nint executeAndCheck_00081496(int *dataArray,int index,undefined4 param1,undefined4 param2)\n\n{\n  int result;\n  \n  result = execute_function_with_offset_00081f9c(*dataArray,index + 1,param1,param2,param2);\n  if (result != 0) {\n    *dataArray = result;\n    dataArray[1] = index;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081496": "execute_and_check_00081496",
                "param_1": "dataArray",
                "param_2": "index",
                "param_3": "param1",
                "param_4": "param2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000814ae"
            ],
            "called": [
                "FUN_00081f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814ae": {
            "entrypoint": "0x000814ae",
            "current_name": "check_and_execute_000814ae",
            "code": "\nundefined4 checkAndExecute_000814ae(int *inputArray,uint threshold)\n\n{\n  int result;\n  \n  if ((*inputArray == 0) || ((uint)inputArray[1] < threshold)) {\n    result = executeAndCheck(inputArray);\n    if (result == 0) {\n      return 0;\n    }\n    if (inputArray[2] == 0) {\n      *(undefined *)*inputArray = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000814ae": "check_and_execute_000814ae",
                "param_1": "inputArray",
                "param_2": "threshold",
                "iVar1": "result",
                "execute_and_check_00081496": "executeAndCheck"
            },
            "calling": [
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "called": [
                "FUN_00081496"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814d0": {
            "entrypoint": "0x000814d0",
            "current_name": "execute_or_reset_params_000814d0",
            "code": "\nundefined4 * execute_or_reset_params_000814d0(undefined4 *params,undefined4 string,undefined4 value)\n\n{\n  int result;\n  \n  result = check_and_execute_000814ae(params,value);\n  if (result == 0) {\n    reset_params_00081480(params);\n  }\n  else {\n    params[2] = value;\n    copy_strings_000825cc(*params,string);\n  }\n  return params;\n}\n\n",
            "renaming": {
                "FUN_000814d0": "execute_or_reset_params_000814d0",
                "param_1": "params",
                "param_2": "string",
                "param_3": "value",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000814f6"
            ],
            "called": [
                "FUN_00081480",
                "FUN_000825cc",
                "FUN_000814ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814f6": {
            "entrypoint": "0x000814f6",
            "current_name": "initialize_params_000814f6",
            "code": "\nundefined4 * initializeParams_000814f6(undefined4 *paramArray,int inputValue)\n\n{\n  undefined4 trailingZerosCount;\n  \n  *paramArray = 0;\n  paramArray[1] = 0;\n  paramArray[2] = 0;\n  if (inputValue != 0) {\n    trailingZerosCount = count_trailing_zeros_00082688(inputValue);\n    execute_or_reset_params_000814d0(paramArray,inputValue,trailingZerosCount);\n  }\n  return paramArray;\n}\n\n",
            "renaming": {
                "FUN_000814f6": "initialize_params_000814f6",
                "param_1": "paramArray",
                "param_2": "inputValue",
                "uVar1": "trailingZerosCount"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_000814d0",
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008151c": {
            "entrypoint": "0x0008151c",
            "current_name": "copy_data_and_reset_0008151c",
            "code": "\nvoid copyDataAndReset_0008151c(int *destinationData,int *sourceData)\n\n{\n  if (*destinationData != 0) {\n    if ((*sourceData != 0) && ((uint)sourceData[2] <= (uint)destinationData[1])) {\n      copyStrings();\n      destinationData[2] = sourceData[2];\n      goto postProcessing;\n    }\n    processRelocatedFunction();\n  }\n  *destinationData = *sourceData;\n  destinationData[1] = sourceData[1];\n  destinationData[2] = sourceData[2];\n  *sourceData = 0;\n  sourceData[1] = 0;\npostProcessing:\n  sourceData[2] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008151c": "copy_data_and_reset_0008151c",
                "param_1": "destinationData",
                "param_2": "sourceData",
                "copy_strings_000825cc": "copyStrings",
                "process_relocated_function_00081800": "processRelocatedFunction",
                "LAB_00081558": "postProcessing"
            },
            "calling": [
                "FUN_00081560"
            ],
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081560": {
            "entrypoint": "0x00081560",
            "current_name": "check_and_reset_data_00081560",
            "code": "\nint check_and_reset_data_00081560(int input_1,int input_2)\n\n{\n  if (input_1 != input_2) {\n    copy_and_reset_data();\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_00081560": "check_and_reset_data_00081560",
                "param_1": "input_1",
                "param_2": "input_2",
                "copy_data_and_reset_0008151c": "copy_and_reset_data"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008151c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081570": {
            "entrypoint": "0x00081570",
            "current_name": "execute_and_copy_strings_00081570",
            "code": "\nundefined4 executeAndCopyStrings_00081570(int *array,int size,int offset)\n\n{\n  int result;\n  int currentOffset;\n  \n  currentOffset = array[2];\n  if (size == 0) {\n    return 0;\n  }\n  if (offset != 0) {\n    result = check_and_execute_000814ae(array,currentOffset + offset);\n    if (result == 0) {\n      return 0;\n    }\n    copy_strings_000825cc(*array + array[2],size);\n    array[2] = currentOffset + offset;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081570": "execute_and_copy_strings_00081570",
                "param_1": "array",
                "param_2": "size",
                "param_3": "offset",
                "iVar1": "result",
                "iVar2": "currentOffset"
            },
            "calling": [
                "FUN_0008159e"
            ],
            "called": [
                "FUN_000825cc",
                "FUN_000814ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008159e": {
            "entrypoint": "0x0008159e",
            "current_name": "execute_and_copy_strings_0008159e",
            "code": "\nvoid executeAndCopyStrings_0008159e(undefined4 sourceString,undefined4 destinationString,undefined4 copyLength)\n\n{\n  undefined4 destinationAddress;\n  undefined4 copyLengthArg;\n  \n  copyLengthArg = copyLength;\n  execute_and_copy_strings_00081570(sourceString,&destinationAddress,1,0,sourceString);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008159e": "execute_and_copy_strings_0008159e",
                "param_1": "sourceString",
                "param_2": "destinationString",
                "param_3": "copyLength",
                "local_c": "destinationAddress",
                "uStack_8": "copyLengthArg"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_00081570"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815b8": {
            "entrypoint": "0x000815b8",
            "current_name": "check_array_size_000815b8",
            "code": "\nint check_array_size_000815b8(byte **array,byte *target)\n\n{\n  uint array_size;\n  int result;\n  \n  if (array[2] == (byte *)0x0) {\n    if (target == (byte *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    if (target != (byte *)0x0) {\n      array_size = compare_byte_arrays_00082390(*array);\n      goto LAB_000815d4;\n    }\n    target = *array;\n  }\n  array_size = (uint)*target;\nLAB_000815d4:\n  result = 1 - array_size;\n  if (1 < array_size) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000815b8": "check_array_size_000815b8",
                "param_1": "array",
                "param_2": "target",
                "uVar1": "array_size",
                "iVar2": "result"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00082390"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815de": {
            "entrypoint": "0x000815de",
            "current_name": "parse_integer_000815de",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000827e8) */\n/* WARNING: Removing unreachable block (ram,0x000827a8) */\n/* WARNING: Removing unreachable block (ram,0x000827a0) */\n/* WARNING: Removing unreachable block (ram,0x000827da) */\n/* WARNING: Removing unreachable block (ram,0x000827ec) */\n/* WARNING: Removing unreachable block (ram,0x000827e4) */\n/* WARNING: Removing unreachable block (ram,0x000827a4) */\n/* WARNING: Removing unreachable block (ram,0x0008278a) */\n/* WARNING: Removing unreachable block (ram,0x000827c8) */\n/* WARNING: Removing unreachable block (ram,0x0008278c) */\n\nuint parseInteger_000815de(byte **input)\n\n{\n  byte currentByte;\n  byte isNegative;\n  uint parsedValue;\n  byte *bytePtr;\n  uint byteValue;\n  byte *nextBytePtr;\n  int digitOffset;\n  int isValueSet;\n  uint maxValue;\n  uint minValue;\n  \n  bytePtr = *input;\n  if (*input == (byte *)0x0) {\n    return 0;\n  }\n  do {\n    nextBytePtr = bytePtr;\n    bytePtr = nextBytePtr + 1;\n    byteValue = (uint)*nextBytePtr;\n    currentByte = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + byteValue + 1);\n    isNegative = currentByte & 8;\n  } while ((currentByte & 8) != 0);\n  if (byteValue == 0x2d) {\n    bytePtr = nextBytePtr + 2;\n    byteValue = (uint)nextBytePtr[1];\n    isNegative = 1;\n  }\n  else if (byteValue == 0x2b) {\n    byteValue = (uint)nextBytePtr[1];\n    bytePtr = nextBytePtr + 2;\n  }\n  if (isNegative == 0) {\n    minValue = 0x7fffffff;\n  }\n  else {\n    minValue = 0x80000000;\n  }\n  maxValue = minValue / 10;\n  isValueSet = 0;\n  parsedValue = 0;\n  do {\n    currentByte = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + byteValue + 1);\n    if ((currentByte & 4) == 0) {\n      if ((currentByte & 3) == 0) {\nLAB_0008277e:\n        if (isValueSet == -1) {\n          if (isNegative == 0) {\n            parsedValue = 0x7fffffff;\n          }\n          else {\n            parsedValue = 0x80000000;\n          }\n          *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x22;\n        }\n        else if (isNegative != 0) {\n          parsedValue = -parsedValue;\n        }\n        return parsedValue;\n      }\n      if ((currentByte & 3) == 1) {\n        digitOffset = 0x37;\n      }\n      else {\n        digitOffset = 0x57;\n      }\n      digitOffset = byteValue - digitOffset;\n    }\n    else {\n      digitOffset = byteValue - 0x30;\n    }\n    if (9 < digitOffset) goto LAB_0008277e;\n    if (isValueSet != -1) {\n      if ((maxValue <= parsedValue && parsedValue != maxValue) || ((parsedValue == maxValue && ((int)(minValue % 10) < digitOffset))))\n      {\n        isValueSet = -1;\n      }\n      else {\n        parsedValue = parsedValue * 10 + digitOffset;\n        isValueSet = 1;\n      }\n    }\n    byteValue = (uint)*bytePtr;\n    bytePtr = bytePtr + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815de": "parse_integer_000815de",
                "param_1": "input",
                "bVar1": "currentByte",
                "bVar2": "isNegative",
                "uVar3": "parsedValue",
                "pbVar4": "bytePtr",
                "uVar5": "byteValue",
                "pbVar6": "nextBytePtr",
                "iVar7": "digitOffset",
                "iVar8": "isValueSet",
                "uVar9": "maxValue",
                "uVar10": "minValue"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815e8": {
            "entrypoint": "0x000815e8",
            "current_name": "FUNC_000815e8",
            "code": "\nvoid FUNC_000815e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000815e8": "FUNC_000815e8"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000815ec": {
            "entrypoint": "0x000815ec",
            "current_name": "run_system_000815ec",
            "code": "\nvoid runSystem_000815ec(void)\n\n{\n  setInitialValue();\n  initializeMemoryAndConfig();\n  FUNC_000815e8();\n  FUNC_00080f08(1);\n  initializeSystem();\n  do {\n    switchControlMode();\n    checkAndProcessValueDifferences();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815ec": "run_system_000815ec",
                "set_initial_value_00081618": "setInitialValue",
                "initialize_memory_and_config_00080774": "initializeMemoryAndConfig",
                "initialize_system_000801e0": "initializeSystem",
                "control_mode_switch_00080250": "switchControlMode",
                "check_and_process_value_differences_00080970": "checkAndProcessValueDifferences"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_000815e8",
                "FUN_00080774",
                "FUN_00080250",
                "FUN_00080970",
                "FUN_00081618",
                "FUN_00080f08",
                "FUN_000801e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081618": {
            "entrypoint": "0x00081618",
            "current_name": "set_initial_value_00081618",
            "code": "\n\n\nvoid setInitialValue_00081618(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081618": "set_initial_value_00081618"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081624": {
            "entrypoint": "0x00081624",
            "current_name": "calculate_result_00081624",
            "code": "\nint calculateResult_00081624(int index,int flag,int multiplier,undefined4 constant)\n\n{\n  int result;\n  undefined4 pattern;\n  \n  pattern = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n  if (flag == 0) {\n    pattern = 0;\n  }\n  result = check_pattern_occurrence_00081684(*(int *)(&DAT_00084b44 + index * 0x1c) + 0x3c,\n                       *(undefined4 *)(&DAT_00084b48 + index * 0x1c),pattern,\n                       ((rel_array[6].r_offset / 1000000) * multiplier) / 0x12,constant);\n  if (result != 0) {\n    result = (int)((ulonglong)(result * 18000 + 16000) /\n                 ((ulonglong)rel_array[6].r_offset / 1000));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081624": "calculate_result_00081624",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "multiplier",
                "param_4": "constant",
                "iVar1": "result",
                "uVar2": "pattern",
                "Elf32_Rel_ARRAY_20070000": "rel_array"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081684"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081684": {
            "entrypoint": "0x00081684",
            "current_name": "check_pattern_occurrence_00081684",
            "code": "\nint check_pattern_occurrence_00081684(uint *data_array,uint bit_mask,uint expected_value,int max_iterations)\n\n{\n  int occurrence_count;\n  \n  do {\n    if ((*data_array & bit_mask) != expected_value) {\n      do {\n        if ((*data_array & bit_mask) == expected_value) {\n          occurrence_count = 0;\n          do {\n            if ((*data_array & bit_mask) != expected_value) {\n              return occurrence_count;\n            }\n            occurrence_count = occurrence_count + 1;\n          } while (max_iterations != occurrence_count);\n          return 0;\n        }\n        max_iterations = max_iterations + -1;\n      } while (max_iterations != 0);\n      return 0;\n    }\n    max_iterations = max_iterations + -1;\n  } while (max_iterations != 0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081684": "check_pattern_occurrence_00081684",
                "param_1": "data_array",
                "param_2": "bit_mask",
                "param_3": "expected_value",
                "param_4": "max_iterations",
                "iVar1": "occurrence_count"
            },
            "calling": [
                "FUN_00081624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d8": {
            "entrypoint": "0x000816d8",
            "current_name": "get_global_value_000816d8",
            "code": "\nundefined4 getGlobalValue_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "FUN_000816d8": "get_global_value_000816d8"
            },
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816ec": {
            "entrypoint": "0x000816ec",
            "current_name": "update_memory_data_000816ec",
            "code": "\nvoid updateMemoryData_000816ec(dword data_1,dword data_2,dword data_3)\n\n{\n  dword *memoryDataPtr;\n  uint index;\n  uint bitMask;\n  code *jumpTableFunction;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  memoryDataPtr = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)index) {\n    memoryDataPtr = (dword *)relocated_data_segment_function_000817f0(400);\n    if (memoryDataPtr == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTableFunction)(0xffffffff);\n      return;\n    }\n    *memoryDataPtr = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    memoryDataPtr[1] = 0;\n    index = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)memoryDataPtr;\n    memoryDataPtr[0x62] = 0;\n    memoryDataPtr[99] = 0;\n  }\n  bitMask = 1 << (index & 0xff);\n  memoryDataPtr[index + 0x22] = data_1;\n  memoryDataPtr[0x62] = memoryDataPtr[0x62] | bitMask;\n  memoryDataPtr[index + 0x42] = data_3;\n  memoryDataPtr[99] = bitMask | memoryDataPtr[99];\n  memoryDataPtr[1] = index + 1;\n  memoryDataPtr[index + 2] = data_2;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTableFunction)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816ec": "update_memory_data_000816ec",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "pdVar1": "memoryDataPtr",
                "uVar2": "index",
                "uVar3": "bitMask",
                "UNRECOVERED_JUMPTABLE_00": "jumpTableFunction"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816f8": {
            "entrypoint": "0x000816f8",
            "current_name": "assertion_failed_000816f8",
            "code": "\nvoid assertion_failed_000816f8(undefined4 assertion,undefined4 file,char *line_info,undefined4 function)\n\n{\n  undefined4 line;\n  undefined4 function_arg;\n  char *message;\n  undefined8 result;\n  \n  line = *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0xc);\n  if (line_info == (char *)0x0) goto LAB_0008171c;\n  function_arg = function;\n  message = \", function: \";\n  do {\n    function = assertion;\n    process_relocation_00081750(line,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",function_arg,assertion,file,\n                 message,line_info);\n    result = process_and_exit_000836ec();\n    file = (undefined4)((ulonglong)result >> 0x20);\n    line = (undefined4)result;\nLAB_0008171c:\n    line_info = \"\";\n    function_arg = function;\n    message = line_info;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816f8": "assertion_failed_000816f8",
                "param_1": "assertion",
                "param_2": "file",
                "param_3": "line_info",
                "param_4": "function",
                "uVar1": "line",
                "uVar2": "function_arg",
                "pcVar3": "message",
                "uVar4": "result"
            },
            "calling": [
                "FUN_000803fc",
                "FUN_00080b2c"
            ],
            "called": [
                "FUN_000836ec",
                "FUN_00081750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081750": {
            "entrypoint": "0x00081750",
            "current_name": "process_relocation_00081750",
            "code": "\nvoid processRelocation_00081750(undefined4 offset,undefined4 param_2,undefined4 data,undefined4 size)\n\n{\n  undefined4 dataOffset;\n  undefined4 sizeOffset;\n  \n  dataOffset = data;\n  sizeOffset = size;\n  process_param_string_0008289c(relocationTable[140].r_offset,offset,param_2,&dataOffset);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081750": "process_relocation_00081750",
                "param_1": "offset",
                "param_3": "data",
                "param_4": "size",
                "uStack_8": "dataOffset",
                "uStack_4": "sizeOffset",
                "Elf32_Rel_ARRAY_20070000": "relocationTable"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_00081750(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  FUNC_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,param_1,param_2,&uStack_8);\n  return;\n}\n\n"
        },
        "FUN_00081778": {
            "entrypoint": "0x00081778",
            "current_name": "execute_functions_00081778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081784) */\n/* WARNING: Removing unreachable block (ram,0x00081788) */\n/* WARNING: Removing unreachable block (ram,0x000817b4) */\n\nvoid executeFunctions_00081778(void)\n\n{\n  int iteration;\n  code **functionArray;\n  \n  FUNC_00085844();\n  functionArray = (code **)0x8584c;\n  iteration = 0;\n  do {\n    iteration = iteration + 1;\n    functionArray = functionArray + 1;\n    (**functionArray)();\n  } while (iteration != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081778": "execute_functions_00081778",
                "iVar1": "iteration",
                "ppcVar2": "functionArray"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [
                "FUN_000836d8",
                "FUN_00080118",
                "FUN_00085844"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817c8": {
            "entrypoint": "0x000817c8",
            "current_name": "process_data_000817c8",
            "code": "\nvoid processData_000817c8(undefined4 inputVal1,undefined4 inputVal2,undefined4 inputVal3,undefined4 inputVal4)\n\n{\n  undefined4 processedVal1;\n  undefined4 processedVal2;\n  undefined4 processedVal3;\n  \n  processedVal1 = inputVal2;\n  processedVal2 = inputVal3;\n  processedVal3 = inputVal4;\n  process_param_string_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,\n               *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 8),inputVal1,&processedVal1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817c8": "process_data_000817c8",
                "param_1": "inputVal1",
                "param_2": "inputVal2",
                "param_3": "inputVal3",
                "param_4": "inputVal4",
                "uStack_c": "processedVal1",
                "uStack_8": "processedVal2",
                "uStack_4": "processedVal3"
            },
            "calling": [
                "FUN_00080eec"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_000817c8(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  FUNC_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,\n               *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 8),param_1,&uStack_c);\n  return;\n}\n\n"
        },
        "FUN_000817f0": {
            "entrypoint": "0x000817f0",
            "current_name": "relocated_data_segment_function_000817f0",
            "code": "\nvoid relocatedDataSegmentFunction_000817f0(undefined4 input)\n\n{\n  relocated_data_segment_00081810(relocationTable[140]offset,input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817f0": "relocated_data_segment_function_000817f0",
                "param_1": "input",
                "Elf32_Rel_ARRAY_20070000": "relocationTable",
                ".r_offset": "offset"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081800": {
            "entrypoint": "0x00081800",
            "current_name": "process_relocated_function_00081800",
            "code": "\nvoid process_relocated_function_00081800(undefined4 data)\n\n{\n  process_relocations_00083b10(relocation_table[140].offset,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081800": "process_relocated_function_00081800",
                "param_1": "data",
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_0008151c",
                "FUN_00081480",
                "FUN_00081472"
            ],
            "called": [
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081810": {
            "entrypoint": "0x00081810",
            "current_name": "relocated_data_segment_00081810",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * relocatedDataSegment_00081810(undefined4 *result,uint size)\n\n{\n  dword dataSegmentInfo;\n  int offset;\n  uint flags;\n  uint adjustedSize;\n  int nextIndex;\n  uint adjustedOffset;\n  dword curSegment;\n  uint curSize;\n  int curOffset;\n  undefined *curPtr;\n  dword prevIndex;\n  dword prevSegment;\n  int segmentIndex;\n  dword *segmentInfoPtr;\n  uint alignedSize;\n  undefined *newSegment;\n  dword *prevSegmentPtr;\n  uint segmentCount;\n  \n  if (size + 0xb < 0x17) {\n    alignedSize = 0x10;\n    if (0x10 < size) goto LAB_00081876;\n  }\n  else {\n    alignedSize = size + 0xb & 0xfffffff8;\n    if (((int)alignedSize < 0) || (alignedSize < size)) {\nLAB_00081876:\n      *result = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00081f94(result);\n  dataSegmentInfo = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (alignedSize < 0x1f8) {\n    segmentIndex = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + alignedSize);\n    if ((segmentIndex != alignedSize + 0x20070464) ||\n       (offset = segmentIndex + 8, segmentIndex = *(int *)(segmentIndex + 0x14), offset != segmentIndex)) {\n      nextIndex = *(int *)(segmentIndex + 0xc);\n      curOffset = (*(uint *)(segmentIndex + 4) & 0xfffffffc) + segmentIndex;\n      alignedSize = *(uint *)(curOffset + 4);\n      offset = *(int *)(segmentIndex + 8);\n      *(int *)(offset + 0xc) = nextIndex;\n      *(int *)(nextIndex + 8) = offset;\n      *(uint *)(curOffset + 4) = alignedSize | 1;\n      FUNC_00081f98(result);\n      return (int *)(segmentIndex + 8);\n    }\n    segmentCount = (alignedSize >> 3) + 2;\n  }\n  else {\n    segmentCount = alignedSize >> 9;\n    if (segmentCount == 0) {\n      offset = 0x7e;\n      segmentIndex = 0x3f;\n    }\n    else if (segmentCount < 5) {\n      segmentIndex = (alignedSize >> 6) + 0x38;\n      offset = segmentIndex * 2;\n    }\n    else if (segmentCount < 0x15) {\n      segmentIndex = segmentCount + 0x5b;\n      offset = segmentIndex * 2;\n    }\n    else if (segmentCount < 0x55) {\n      segmentIndex = (alignedSize >> 0xc) + 0x6e;\n      offset = segmentIndex * 2;\n    }\n    else if (segmentCount < 0x155) {\n      segmentIndex = (alignedSize >> 0xf) + 0x77;\n      offset = segmentIndex * 2;\n    }\n    else if (segmentCount < 0x555) {\n      segmentIndex = (alignedSize >> 0x12) + 0x7c;\n      offset = segmentIndex * 2;\n    }\n    else {\n      offset = 0xfc;\n      segmentIndex = 0x7e;\n    }\n    for (curSegment = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[offset]; offset * 4 + 0x20070464U != curSegment\n        ; curSegment = *(dword *)(curSegment + 0xc)) {\n      segmentCount = *(uint *)(curSegment + 4) & 0xfffffffc;\n      nextIndex = segmentCount - alignedSize;\n      if (0xf < nextIndex) {\n        segmentIndex = segmentIndex + -1;\n        break;\n      }\n      if (-1 < nextIndex) {\n        offset = segmentCount + curSegment;\n        alignedSize = *(uint *)(offset + 4);\n        nextIndex = *(int *)(curSegment + 0xc);\n        segmentIndex = *(int *)(curSegment + 8);\n        *(int *)(segmentIndex + 0xc) = nextIndex;\n        *(int *)(nextIndex + 8) = segmentIndex;\n        *(uint *)(offset + 4) = alignedSize | 1;\n        FUNC_00081f98(result);\n        return (int *)(curSegment + 8);\n      }\n    }\n    segmentCount = segmentIndex + 1;\n  }\n  curSegment = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    flags = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    adjustedSize = flags & 0xfffffffc;\n    adjustedOffset = adjustedSize - alignedSize;\n    if (0xf < (int)adjustedOffset) {\n      curSegment = alignedSize + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = alignedSize | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = curSegment;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = curSegment;\n      *(undefined4 *)(curSegment + 0xc) = 0x2007046c;\n      *(undefined4 *)(curSegment + 8) = 0x2007046c;\n      *(uint *)(curSegment + 4) = adjustedOffset | 1;\n      *(uint *)(curSegment + adjustedOffset) = adjustedOffset;\n      FUNC_00081f98(result);\n      return (int *)(dataSegmentInfo + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)adjustedOffset) {\n      *(uint *)(adjustedSize + dataSegmentInfo + 4) = *(uint *)(adjustedSize + dataSegmentInfo + 4) | 1;\n      FUNC_00081f98(result);\n      return (int *)(dataSegmentInfo + 8);\n    }\n    if (adjustedSize < 0x200) {\n      adjustedSize = flags & 0xfffffff8;\n      segmentIndex = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + adjustedSize);\n      curSegment = 1 << ((int)(flags >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(dataSegmentInfo + 8) = segmentIndex;\n      *(uint *)(dataSegmentInfo + 0xc) = adjustedSize + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = curSegment;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + adjustedSize) = dataSegmentInfo;\n      *(dword *)(segmentIndex + 0xc) = dataSegmentInfo;\n    }\n    else {\n      adjustedOffset = flags >> 9;\n      if (adjustedOffset < 5) {\n        offset = (flags >> 6) + 0x38;\n        segmentIndex = offset * 2;\n      }\n      else if (adjustedOffset < 0x15) {\n        offset = adjustedOffset + 0x5b;\n        segmentIndex = offset * 2;\n      }\n      else if (adjustedOffset < 0x55) {\n        offset = (flags >> 0xc) + 0x6e;\n        segmentIndex = offset * 2;\n      }\n      else if (adjustedOffset < 0x155) {\n        offset = (flags >> 0xf) + 0x77;\n        segmentIndex = offset * 2;\n      }\n      else if (adjustedOffset < 0x555) {\n        offset = (flags >> 0x12) + 0x7c;\n        segmentIndex = offset * 2;\n      }\n      else {\n        segmentIndex = 0xfc;\n        offset = 0x7e;\n      }\n      curSegment = segmentIndex * 4 + 0x20070464;\n      prevIndex = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[segmentIndex];\n      if (prevIndex == curSegment) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (offset >> 2 & 0xffU);\n        prevSegment = prevIndex;\n      }\n      else {\n        do {\n          prevSegment = prevIndex;\n          if ((*(uint *)(prevIndex + 4) & 0xfffffffc) <= adjustedSize) break;\n          prevIndex = *(dword *)(prevIndex + 8);\n          prevSegment = prevIndex;\n        } while (curSegment != prevIndex);\n        prevIndex = *(dword *)(prevSegment + 0xc);\n      }\n      curSegment = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(dataSegmentInfo + 0xc) = prevIndex;\n      *(dword *)(dataSegmentInfo + 8) = prevSegment;\n      *(dword *)(prevIndex + 8) = dataSegmentInfo;\n      *(dword *)(prevSegment + 0xc) = dataSegmentInfo;\n    }\n  }\n  dataSegmentInfo = Elf32_Rel_ARRAY_20070000[141].r_info;\n  flags = 1 << ((int)segmentCount >> 2 & 0xffU);\n  if (flags <= curSegment) {\n    if ((curSegment & flags) == 0) {\n      segmentCount = segmentCount & 0xfffffffc;\n      do {\n        flags = flags << 1;\n        segmentCount = segmentCount + 4;\n      } while ((curSegment & flags) == 0);\n    }\n    do {\n      prevSegmentPtr = &Elf32_Rel_ARRAY_20070000[segmentCount + 0x8c].r_info;\n      segmentInfoPtr = prevSegmentPtr;\n      adjustedSize = segmentCount;\n      do {\n        for (curPtr = (undefined *)segmentInfoPtr[3]; segmentInfoPtr != (dword *)curPtr;\n            curPtr = *(undefined **)(curPtr + 0xc)) {\n          adjustedOffset = *(uint *)(curPtr + 4) & 0xfffffffc;\n          curSize = adjustedOffset - alignedSize;\n          if (0xf < (int)curSize) {\n            offset = *(int *)(curPtr + 8);\n            segmentIndex = *(int *)(curPtr + 0xc);\n            newSegment = curPtr + alignedSize;\n            *(uint *)(curPtr + 4) = alignedSize | 1;\n            *(int *)(offset + 0xc) = segmentIndex;\n            *(int *)(segmentIndex + 8) = offset;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)newSegment;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)newSegment;\n            *(undefined4 *)(newSegment + 0xc) = 0x2007046c;\n            *(undefined4 *)(newSegment + 8) = 0x2007046c;\n            *(uint *)(newSegment + 4) = curSize | 1;\n            *(uint *)(newSegment + curSize) = curSize;\n            FUNC_00081f98(result);\n            return (int *)(curPtr + 8);\n          }\n          if (-1 < (int)curSize) {\n            segmentIndex = *(int *)(curPtr + 8);\n            offset = *(int *)(curPtr + 0xc);\n            *(uint *)(curPtr + adjustedOffset + 4) = *(uint *)(curPtr + adjustedOffset + 4) | 1;\n            *(int *)(segmentIndex + 0xc) = offset;\n            *(int *)(offset + 8) = segmentIndex;\n            FUNC_00081f98(result);\n            return (int *)(curPtr + 8);\n          }\n        }\n        adjustedSize = adjustedSize + 1;\n        segmentInfoPtr = segmentInfoPtr + 2;\n      } while ((adjustedSize & 3) != 0);\n      do {\n        adjustedOffset = segmentCount & 3;\n        curPtr = (undefined *)(prevSegmentPtr + -2);\n        segmentCount = segmentCount - 1;\n        if (adjustedOffset == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~flags;\n          break;\n        }\n        prevSegmentPtr = (dword *)*prevSegmentPtr;\n      } while (prevSegmentPtr == (dword *)curPtr);\n      flags = flags * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= flags &&\n           flags - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (segmentCount = adjustedSize, flags == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & flags) == 0; flags = flags << 1) {\n        segmentCount = segmentCount + 4;\n      }\n    } while( true );\n  }\n  segmentCount = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((alignedSize <= segmentCount) &&\n     (flags = segmentCount - alignedSize, curSegment = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)flags))\n  goto LAB_00081b1a;\n  flags = Elf32_Rel_ARRAY_20070000[141].r_info + segmentCount;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    adjustedSize = alignedSize + DAT_20071218 + 0x10;\n  }\n  else {\n    adjustedSize = alignedSize + DAT_20071218 + 0x100f & 0xfffff000;\n  }\n  curSegment = process_result_0008236c(result,adjustedSize);\n  if ((curSegment == 0xffffffff) || ((curSegment < flags && (dataSegmentInfo != 0x20070464)))) {\n    segmentCount = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    curSegment = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    adjustedOffset = DAT_2007121c + adjustedSize;\n    DAT_2007121c = adjustedOffset;\n    if ((flags == curSegment) && ((flags & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = adjustedSize + segmentCount | 1;\n    }\n    else {\n      prevIndex = curSegment;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        prevIndex = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_2007121c = adjustedOffset + (curSegment - flags);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = prevIndex;\n      flags = curSegment & 7;\n      if (flags == 0) {\n        segmentIndex = 0x1000;\n      }\n      else {\n        curSegment = curSegment + (8 - flags);\n        segmentIndex = 0x1008 - flags;\n      }\n      segmentIndex = segmentIndex - (adjustedSize + curSegment & 0xfff);\n      offset = process_result_0008236c(result,segmentIndex);\n      if (offset == -1) {\n        flags = 1;\n        segmentIndex = 0;\n      }\n      else {\n        flags = (offset - curSegment) + segmentIndex | 1;\n      }\n      adjustedOffset = DAT_2007121c + segmentIndex;\n      Elf32_Rel_ARRAY_20070000[141].r_info = curSegment;\n      DAT_2007121c = adjustedOffset;\n      *(uint *)(curSegment + 4) = flags;\n      if (dataSegmentInfo != 0x20070464) {\n        if (segmentCount < 0x10) {\n          *(undefined4 *)(curSegment + 4) = 1;\n          segmentCount = 0;\n          goto LAB_00081b04;\n        }\n        segmentCount = segmentCount - 0xc & 0xfffffff8;\n        *(uint *)(dataSegmentInfo + 4) = segmentCount | *(uint *)(dataSegmentInfo + 4) & 1;\n        *(undefined4 *)(dataSegmentInfo + segmentCount + 4) = 5;\n        *(undefined4 *)(dataSegmentInfo + segmentCount + 8) = 5;\n        if (0xf < segmentCount) {\n          process_relocations_00083b10(result,dataSegmentInfo + 8);\n          adjustedOffset = DAT_2007121c;\n        }\n      }\n    }\n    if (DAT_20071214 < adjustedOffset) {\n      DAT_20071214 = adjustedOffset;\n    }\n    if (DAT_20071210 < adjustedOffset) {\n      DAT_20071210 = adjustedOffset;\n    }\n    segmentCount = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    curSegment = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00081b04:\n  flags = segmentCount - alignedSize;\n  if ((segmentCount < alignedSize) || ((int)flags < 0x10)) {\n    FUNC_00081f98(result);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  Elf32_Rel_ARRAY_20070000[141].r_info = alignedSize + curSegment;\n  *(uint *)(curSegment + 4) = alignedSize | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = flags | 1;\n  FUNC_00081f98(result);\n  return (int *)(curSegment + 8);\n}\n\n",
            "renaming": {
                "FUN_00081810": "relocated_data_segment_00081810",
                "param_1": "result",
                "param_2": "size",
                "dVar1": "dataSegmentInfo",
                "iVar2": "offset",
                "uVar3": "flags",
                "uVar4": "adjustedSize",
                "iVar5": "nextIndex",
                "uVar6": "adjustedOffset",
                "dVar7": "curSegment",
                "uVar8": "curSize",
                "iVar9": "curOffset",
                "puVar10": "curPtr",
                "dVar11": "prevIndex",
                "dVar12": "prevSegment",
                "iVar13": "segmentIndex",
                "pdVar14": "segmentInfoPtr",
                "uVar15": "alignedSize",
                "puVar16": "newSegment",
                "pdVar17": "prevSegmentPtr",
                "uVar18": "segmentCount"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00084018",
                "FUN_000817f0",
                "FUN_00081fac"
            ],
            "called": [
                "FUN_0008236c",
                "FUN_00081f94",
                "FUN_00081f98",
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d48": {
            "entrypoint": "0x00081d48",
            "current_name": "memcpy_word_aligned_00081d48",
            "code": "\nundefined4 * memcpy_word_aligned_00081d48(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *temp_ptr;\n  uint remaining_size;\n  uint unrolled_size;\n  bool is_remaining;\n  \n  src_ptr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      unrolled_size = size - 4;\n      if (3 < size) {\n        do {\n          dest_ptr = source;\n          temp_ptr = src_ptr;\n          is_remaining = unrolled_size != 0;\n          unrolled_size = unrolled_size - 1;\n          *(undefined *)temp_ptr = *(undefined *)dest_ptr;\n          src_ptr = (undefined4 *)((int)temp_ptr + 1);\n          source = (undefined4 *)((int)dest_ptr + 1);\n        } while (is_remaining);\n        *(undefined *)(undefined4 *)((int)temp_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)dest_ptr + 1);\n        *(undefined *)((int)temp_ptr + 2) = *(undefined *)((int)dest_ptr + 2);\n        *(undefined *)((int)temp_ptr + 3) = *(undefined *)((int)dest_ptr + 3);\n        return destination;\n      }\n      goto handle_remaining_bytes;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      unrolled_size = 4 - ((uint)destination & 3);\n      size = size - unrolled_size;\n      dest_ptr = destination;\n      temp_ptr = source;\n      if (((uint)destination & 1) != 0) {\n        temp_ptr = (undefined4 *)((int)source + 1);\n        dest_ptr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      src_ptr = dest_ptr;\n      source = temp_ptr;\n      if ((unrolled_size & 2) != 0) {\n        source = (undefined4 *)((int)temp_ptr + 2);\n        src_ptr = (undefined4 *)((int)dest_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)temp_ptr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *src_ptr = *source;\n    src_ptr[1] = source[1];\n    src_ptr[2] = source[2];\n    src_ptr[3] = source[3];\n    src_ptr[4] = source[4];\n    src_ptr[5] = source[5];\n    src_ptr[6] = source[6];\n    src_ptr[7] = source[7];\n    src_ptr[8] = source[8];\n    src_ptr[9] = source[9];\n    src_ptr[10] = source[10];\n    src_ptr[0xb] = source[0xb];\n    src_ptr[0xc] = source[0xc];\n    src_ptr[0xd] = source[0xd];\n    src_ptr[0xe] = source[0xe];\n    src_ptr[0xf] = source[0xf];\n    src_ptr = src_ptr + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remaining_size = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *src_ptr = *source;\n      src_ptr[1] = source[1];\n      src_ptr[2] = source[2];\n      src_ptr[3] = source[3];\n      src_ptr = src_ptr + 4;\n      source = source + 4;\n      is_remaining = 0xf < remaining_size;\n      remaining_size = remaining_size - 0x10;\n    } while (is_remaining);\n  }\n  unrolled_size = remaining_size + 0xc;\n  temp_ptr = src_ptr;\n  dest_ptr = source;\n  if (0xfffffff3 < remaining_size) {\n    do {\n      source = dest_ptr + 1;\n      *temp_ptr = *dest_ptr;\n      is_remaining = 3 < unrolled_size;\n      unrolled_size = unrolled_size - 4;\n      src_ptr = temp_ptr + 1;\n      temp_ptr = temp_ptr + 1;\n      dest_ptr = source;\n    } while (is_remaining);\n  }\nhandle_remaining_bytes:\n  if (unrolled_size + 4 != 0) {\n    dest_ptr = src_ptr;\n    temp_ptr = source;\n    if ((unrolled_size & 1) != 0) {\n      temp_ptr = (undefined4 *)((int)source + 1);\n      dest_ptr = (undefined4 *)((int)src_ptr + 1);\n      *(undefined *)src_ptr = *(undefined *)source;\n    }\n    if ((unrolled_size + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)temp_ptr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00081d48": "memcpy_word_aligned_00081d48",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "puVar3": "temp_ptr",
                "uVar4": "remaining_size",
                "uVar5": "unrolled_size",
                "bVar6": "is_remaining",
                "LAB_00081dcc": "handle_remaining_bytes"
            },
            "calling": [
                "FUN_00083ca8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e34": {
            "entrypoint": "0x00081e34",
            "current_name": "copy_memory_00081e34",
            "code": "\nvoid copyMemory_00081e34(undefined4 *source,undefined4 *destination,uint size)\n\n{\n  int remainingSize;\n  undefined4 *srcPtr;\n  undefined4 *destPtr;\n  undefined4 *destEndPtr;\n  uint tempSize;\n  undefined *tempPtr;\n  uint temp;\n  \n  if ((destination < source) && (destEndPtr = (undefined4 *)((int)destination + size), source < destEndPtr)) {\n    tempPtr = (undefined *)((int)source + size);\n    remainingSize = size - 1;\n    if (size != 0) {\n      do {\n        destEndPtr = (undefined4 *)((int)destEndPtr + -1);\n        remainingSize = remainingSize + -1;\n        tempPtr = tempPtr + -1;\n        *tempPtr = *(undefined *)destEndPtr;\n      } while (remainingSize != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)source | (uint)destination) & 3) == 0) {\n    destEndPtr = source;\n    destPtr = destination;\n    do {\n      srcPtr = destEndPtr + 4;\n      *destEndPtr = *destPtr;\n      destEndPtr[1] = destPtr[1];\n      destEndPtr[2] = destPtr[2];\n      destEndPtr[3] = destPtr[3];\n      destEndPtr = srcPtr;\n      destPtr = destPtr + 4;\n    } while (srcPtr != (undefined4 *)((int)source + (size - 0x10 & 0xfffffff0) + 0x10));\n    remainingSize = (size - 0x10 >> 4) + 1;\n    temp = size & 0xf;\n    destination = destination + remainingSize * 4;\n    source = source + remainingSize * 4;\n    tempSize = temp;\n    destEndPtr = source;\n    destPtr = destination;\n    if (3 < temp) {\n      do {\n        tempSize = tempSize - 4;\n        *destEndPtr = *destPtr;\n        destEndPtr = destEndPtr + 1;\n        destPtr = destPtr + 1;\n      } while (3 < tempSize);\n      remainingSize = (temp - 4 & 0xfffffffc) + 4;\n      source = (undefined4 *)((int)source + remainingSize);\n      destination = (undefined4 *)((int)destination + remainingSize);\n      temp = size & 3;\n    }\n    size = temp;\n    if (size == 0) {\n      return;\n    }\n  }\n  destEndPtr = source;\n  do {\n    destPtr = (undefined4 *)((int)destEndPtr + 1);\n    *(undefined *)destEndPtr = *(undefined *)destination;\n    destination = (undefined4 *)((int)destination + 1);\n    destEndPtr = destPtr;\n  } while (destPtr != (undefined4 *)(size + (int)source));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e34": "copy_memory_00081e34",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "size",
                "iVar1": "remainingSize",
                "puVar2": "srcPtr",
                "puVar3": "destPtr",
                "puVar4": "destEndPtr",
                "uVar5": "tempSize",
                "puVar6": "tempPtr",
                "uVar7": "temp"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00081fac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f00": {
            "entrypoint": "0x00081f00",
            "current_name": "fill_memory_00081f00",
            "code": "\nvoid fillMemory_00081f00(undefined4 *buffer,undefined value,uint length)\n\n{\n  undefined4 *bufferPtr;\n  undefined4 *nextPtr;\n  undefined4 fillValue;\n  uint remainingLength;\n  bool isZero;\n  \n  if (((uint)buffer & 3) != 0) {\n    isZero = length == 0;\n    bufferPtr = buffer;\n    length = length - 1;\n    if (isZero) {\n      return;\n    }\n    while( true ) {\n      buffer = (undefined4 *)((int)bufferPtr + 1);\n      *(undefined *)bufferPtr = value;\n      if (((uint)buffer & 3) == 0) break;\n      isZero = length == 0;\n      bufferPtr = buffer;\n      length = length - 1;\n      if (isZero) {\n        return;\n      }\n    }\n  }\n  if (3 < length) {\n    fillValue = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remainingLength = length;\n    bufferPtr = buffer;\n    if (0xf < length) {\n      remainingLength = length - 0x10;\n      do {\n        *bufferPtr = fillValue;\n        bufferPtr[1] = fillValue;\n        bufferPtr[2] = fillValue;\n        bufferPtr[3] = fillValue;\n        bufferPtr = bufferPtr + 4;\n      } while (bufferPtr != (undefined4 *)((int)buffer + (remainingLength & 0xfffffff0) + 0x10));\n      length = length & 0xf;\n      buffer = buffer + ((remainingLength >> 4) + 1) * 4;\n      remainingLength = length;\n      bufferPtr = buffer;\n      if (length < 4) goto LAB_00081f7c;\n    }\n    do {\n      length = length - 4;\n      *buffer = fillValue;\n      buffer = buffer + 1;\n    } while (3 < length);\n    buffer = (undefined4 *)((int)bufferPtr + (remainingLength - 4 & 0xfffffffc) + 4);\n    length = remainingLength & 3;\n  }\nLAB_00081f7c:\n  if (length != 0) {\n    bufferPtr = buffer;\n    do {\n      nextPtr = (undefined4 *)((int)bufferPtr + 1);\n      *(undefined *)bufferPtr = value;\n      bufferPtr = nextPtr;\n    } while (nextPtr != (undefined4 *)(length + (int)buffer));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f00": "fill_memory_00081f00",
                "param_1": "buffer",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "bufferPtr",
                "puVar2": "nextPtr",
                "uVar3": "fillValue",
                "uVar4": "remainingLength",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_00083888",
                "FUN_000811b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f94": {
            "entrypoint": "0x00081f94",
            "current_name": "FUNC_00081f94",
            "code": "\nvoid FUNC_00081f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f94": "FUNC_00081f94"
            },
            "calling": [
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f98": {
            "entrypoint": "0x00081f98",
            "current_name": "FUNC_00081f98",
            "code": "\nvoid FUNC_00081f98(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f98": "FUNC_00081f98"
            },
            "calling": [
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f9c": {
            "entrypoint": "0x00081f9c",
            "current_name": "execute_function_with_offset_00081f9c",
            "code": "\nvoid executeFunctionWithOffset_00081f9c(undefined4 inputParam1,undefined4 inputParam2)\n\n{\n  FUNC_00081fac(Elf32_Rel_ARRAY_20070000[140].r_offset,inputParam1,inputParam2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f9c": "execute_function_with_offset_00081f9c",
                "param_1": "inputParam1",
                "param_2": "inputParam2"
            },
            "calling": [
                "FUN_00081496"
            ],
            "called": [
                "FUN_00081fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081fac": {
            "entrypoint": "0x00081fac",
            "current_name": "FUNC_00081fac",
            "code": "\nint * FUNC_00081fac(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  dword dVar1;\n  int *piVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  int iVar6;\n  int *piVar7;\n  uint uVar8;\n  uint uVar9;\n  int *piVar10;\n  \n  if (param_2 == (int *)0x0) {\n    piVar2 = (int *)relocated_data_segment_00081810(param_1,param_3);\n    return piVar2;\n  }\n  FUNC_00081f94();\n  uVar5 = param_2[-1];\n  uVar8 = uVar5 & 0xfffffffc;\n  piVar2 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar9 = 0x10;\n  }\n  else {\n    uVar9 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar9 < 0) goto LAB_00082078;\n  }\n  if (uVar9 < param_3) {\nLAB_00082078:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar8 < (int)uVar9) {\n    dVar1 = (int)piVar2 + uVar8;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == dVar1) {\n      uVar3 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      dVar1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(uVar9 + 0x10) <= (int)(uVar3 + uVar8)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)piVar2 + uVar9;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (uVar3 + uVar8) - uVar9 | 1;\n        param_2[-1] = uVar9 | param_2[-1] & 1U;\n        FUNC_00081f98(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(dVar1 + 4) & 0xfffffffe) + dVar1 + 4) & 1) == 0) {\n      uVar3 = *(uint *)(dVar1 + 4) & 0xfffffffc;\n      if ((int)uVar9 <= (int)(uVar3 + uVar8)) {\n        iVar6 = *(int *)(dVar1 + 0xc);\n        iVar4 = *(int *)(dVar1 + 8);\n        *(int *)(iVar4 + 0xc) = iVar6;\n        *(int *)(iVar6 + 8) = iVar4;\n        uVar8 = uVar3 + uVar8;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      uVar3 = 0;\n      dVar1 = 0;\n    }\n    if (-1 < (int)(uVar5 << 0x1f)) {\n      piVar10 = (int *)((int)piVar2 - param_2[-2]);\n      uVar5 = (piVar10[1] & 0xfffffffcU) + uVar8;\n      if (dVar1 != 0) {\n        if (dVar1 == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(uVar9 + 0x10) <= (int)(uVar3 + uVar5)) {\n            piVar2 = piVar10 + 2;\n            iVar4 = *piVar2;\n            iVar6 = piVar10[3];\n            uVar8 = uVar8 - 4;\n            *(int *)(iVar4 + 0xc) = iVar6;\n            *(int *)(iVar6 + 8) = iVar4;\n            if (uVar8 < 0x25) {\n              piVar7 = piVar2;\n              if (0x13 < uVar8) {\n                piVar10[2] = *param_2;\n                piVar10[3] = param_2[1];\n                if (uVar8 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar7 = piVar10 + 4;\n                }\n                else {\n                  piVar10[4] = param_2[2];\n                  piVar10[5] = param_2[3];\n                  if (uVar8 == 0x24) {\n                    piVar10[6] = param_2[4];\n                    piVar7 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar10[7] = *piVar7;\n                    piVar7 = piVar10 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar7 = piVar10 + 6;\n                  }\n                }\n              }\n              *piVar7 = *param_2;\n              piVar7[1] = param_2[1];\n              piVar7[2] = param_2[2];\n            }\n            else {\n              copy_memory_00081e34(piVar2,param_2);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)piVar10 + uVar9;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (uVar3 + uVar5) - uVar9 | 1;\n            piVar10[1] = uVar9 | piVar10[1] & 1U;\n            FUNC_00081f98(param_1);\n            return piVar2;\n          }\n        }\n        else {\n          uVar3 = uVar3 + uVar5;\n          if ((int)uVar9 <= (int)uVar3) {\n            iVar6 = *(int *)(dVar1 + 0xc);\n            iVar4 = *(int *)(dVar1 + 8);\n            *(int *)(iVar4 + 0xc) = iVar6;\n            *(int *)(iVar6 + 8) = iVar4;\n            piVar7 = piVar10 + 2;\n            iVar4 = *piVar7;\n            iVar6 = piVar10[3];\n            uVar5 = uVar8 - 4;\n            *(int *)(iVar4 + 0xc) = iVar6;\n            *(int *)(iVar6 + 8) = iVar4;\n            uVar8 = uVar3;\n            if (uVar5 < 0x25) {\n              piVar2 = piVar7;\n              if (0x13 < uVar5) {\n                piVar10[2] = *param_2;\n                piVar10[3] = param_2[1];\n                if (uVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar2 = piVar10 + 4;\n                }\n                else {\n                  piVar10[4] = param_2[2];\n                  piVar10[5] = param_2[3];\n                  if (uVar5 == 0x24) {\n                    piVar10[6] = param_2[4];\n                    piVar2 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar10[7] = *piVar2;\n                    piVar2 = piVar10 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar2 = piVar10 + 6;\n                  }\n                }\n              }\n              *piVar2 = *param_2;\n              piVar2[1] = param_2[1];\n              piVar2[2] = param_2[2];\n              uVar5 = piVar10[1];\n              piVar2 = piVar10;\n              param_2 = piVar7;\n            }\n            else {\n              copy_memory_00081e34(piVar7,param_2);\n              uVar5 = piVar10[1];\n              piVar2 = piVar10;\n              param_2 = piVar7;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)uVar9 <= (int)uVar5) {\n        piVar7 = piVar10 + 2;\n        iVar4 = *piVar7;\n        iVar6 = piVar10[3];\n        uVar3 = uVar8 - 4;\n        *(int *)(iVar4 + 0xc) = iVar6;\n        *(int *)(iVar6 + 8) = iVar4;\n        uVar8 = uVar5;\n        if (uVar3 < 0x25) {\n          piVar2 = piVar7;\n          if (0x13 < uVar3) {\n            piVar10[2] = *param_2;\n            piVar10[3] = param_2[1];\n            if (uVar3 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar10 + 4;\n            }\n            else {\n              piVar10[4] = param_2[2];\n              piVar10[5] = param_2[3];\n              if (uVar3 == 0x24) {\n                piVar10[6] = param_2[4];\n                piVar2 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar10[7] = *piVar2;\n                piVar2 = piVar10 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar10 + 6;\n              }\n            }\n          }\n          *piVar2 = *param_2;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          uVar5 = piVar10[1];\n          piVar2 = piVar10;\n          param_2 = piVar7;\n        }\n        else {\n          copy_memory_00081e34(piVar7,param_2);\n          uVar5 = piVar10[1];\n          piVar2 = piVar10;\n          param_2 = piVar7;\n        }\n        goto LAB_00082088;\n      }\n    }\n    piVar10 = (int *)relocated_data_segment_00081810(param_1,param_3);\n    if (piVar10 == (int *)0x0) goto LAB_000820a0;\n    uVar5 = param_2[-1];\n    if (piVar10 + -2 != (int *)((uVar5 & 0xfffffffe) + (int)piVar2)) {\n      uVar8 = uVar8 - 4;\n      if (uVar8 < 0x25) {\n        piVar2 = param_2;\n        piVar7 = piVar10;\n        if (0x13 < uVar8) {\n          *piVar10 = *param_2;\n          piVar10[1] = param_2[1];\n          if (uVar8 < 0x1c) {\n            piVar2 = param_2 + 2;\n            piVar7 = piVar10 + 2;\n          }\n          else {\n            piVar10[2] = param_2[2];\n            piVar10[3] = param_2[3];\n            if (uVar8 == 0x24) {\n              piVar10[4] = param_2[4];\n              piVar10[5] = param_2[5];\n              piVar2 = param_2 + 6;\n              piVar7 = piVar10 + 6;\n            }\n            else {\n              piVar2 = param_2 + 4;\n              piVar7 = piVar10 + 4;\n            }\n          }\n        }\n        *piVar7 = *piVar2;\n        piVar7[1] = piVar2[1];\n        piVar7[2] = piVar2[2];\n      }\n      else {\n        copy_memory_00081e34(piVar10,param_2);\n      }\n      process_relocations_00083b10(param_1,param_2);\n      goto LAB_000820a0;\n    }\n    uVar8 = uVar8 + (piVar10[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  uVar3 = uVar8 - uVar9;\n  piVar10 = param_2;\n  if (uVar3 < 0x10) {\n    piVar2[1] = uVar5 & 1 | uVar8;\n    *(uint *)((int)piVar2 + uVar8 + 4) = *(uint *)((int)piVar2 + uVar8 + 4) | 1;\n  }\n  else {\n    piVar2[1] = uVar5 & 1 | uVar9;\n    *(uint *)((int)piVar2 + uVar9 + 4) = uVar3 | 1;\n    *(uint *)((int)piVar2 + uVar3 + uVar9 + 4) = *(uint *)((int)piVar2 + uVar3 + uVar9 + 4) | 1;\n    process_relocations_00083b10(param_1,(int)piVar2 + uVar9 + 8);\n  }\nLAB_000820a0:\n  FUNC_00081f98(param_1);\n  return piVar10;\n}\n\n",
            "renaming": {
                "FUN_00081fac": "FUNC_00081fac"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00081f9c"
            ],
            "called": [
                "FUN_00081f94",
                "FUN_00081e34",
                "FUN_00081f98",
                "FUN_00083b10",
                "FUN_00081810"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008236c": {
            "entrypoint": "0x0008236c",
            "current_name": "process_result_0008236c",
            "code": "\nvoid processResult_0008236c(int *output,undefined4 input)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = addition_with_previous_value_00080e88(input);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *output = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008236c": "process_result_0008236c",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00083a74",
                "FUN_00081810"
            ],
            "called": [
                "FUN_00080e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082390": {
            "entrypoint": "0x00082390",
            "current_name": "compare_byte_arrays_00082390",
            "code": "\nint compareByteArrays_00082390(uint *array1,uint *array2)\n\n{\n  uint *ptr1;\n  int result;\n  uint *ptr2;\n  uint *ptr3;\n  uint val1;\n  uint val2;\n  uint val3;\n  uint val4;\n  uint val5;\n  \n  if ((((uint)array1 | (uint)array2) & 7) != 0) {\n    ptr1 = array1;\n    if (((uint)array1 & 3) != 0) {\n      ptr1 = (uint *)((uint)array1 & 0xfffffffc) + 1;\n      val1 = *(uint *)((uint)array1 & 0xfffffffc);\n      ptr2 = array2;\n      if (((uint)array1 & 1) == 0) {\nLAB_00082410:\n        ptr3 = (uint *)((int)ptr2 + 1);\n        val2 = val1 >> 0x10 & 0xff;\n        result = val2 - *(byte *)ptr2;\n        if (result != 0) {\n          return result;\n        }\n        if (val2 == 0) {\n          return 0;\n        }\n      }\n      else {\n        ptr3 = array2;\n        if (((uint)array1 & 2) == 0) {\n          ptr2 = (uint *)((int)array2 + 1);\n          val2 = val1 >> 8 & 0xff;\n          result = val2 - *(byte *)array2;\n          if (result != 0) {\n            return result;\n          }\n          if (val2 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      array2 = (uint *)((int)ptr3 + 1);\n      result = (val1 >> 0x18) - (uint)*(byte *)ptr3;\n      if ((result != 0) || (val1 >> 0x18 == 0)) {\n        return result;\n      }\n    }\n    val1 = (uint)array2 & 3;\n    if (val1 != 0) {\n      array2 = (uint *)((uint)array2 & 0xfffffffc);\n      if (val1 == 2) {\n        val1 = *array2;\n        do {\n          array2 = array2 + 1;\n          val3 = *ptr1;\n          val1 = val1 >> 0x10;\n          val4 = val3 + 0xfefefeff & ~val3;\n          val5 = val4 & 0x80808080;\n          val2 = val3 & 0xffff;\n          if ((val4 & 0x8080) != 0 || val2 != val1) goto LAB_0008258e;\n          val1 = *array2;\n          val2 = val2 ^ val3;\n          val3 = val1 * 0x10000;\n          ptr1 = ptr1 + 1;\n        } while (val5 == 0 && val2 == val3);\n      }\n      else if (val1 < 2) {\n        val1 = *array2;\n        do {\n          array2 = array2 + 1;\n          val3 = *ptr1;\n          val1 = val1 >> 8;\n          val4 = val3 + 0xfefefeff & ~val3;\n          val5 = val4 & 0x80808080;\n          val2 = val3 & 0xffffff;\n          if ((val4 & 0x808080) != 0 || val2 != val1) goto LAB_0008258e;\n          val1 = *array2;\n          val2 = val2 ^ val3;\n          val3 = val1 * 0x1000000;\n          ptr1 = ptr1 + 1;\n        } while (val5 == 0 && val2 == val3);\n      }\n      else {\n        val1 = *array2;\n        do {\n          array2 = array2 + 1;\n          val3 = *ptr1;\n          val1 = val1 >> 0x18;\n          val4 = val3 + 0xfefefeff & ~val3;\n          val5 = val4 & 0x80808080;\n          val2 = val3 & 0xff;\n          if ((val4 & 0x80) != 0 || val2 != val1) goto LAB_0008258e;\n          val1 = *array2;\n          val2 = val2 ^ val3;\n          val3 = val1 * 0x100;\n          ptr1 = ptr1 + 1;\n        } while (val5 == 0 && val2 == val3);\n      }\n      val2 = val2 << 0x18 | (val2 >> 8 & 0xff) << 0x10 | (val2 >> 0x10 & 0xff) << 8 |\n              val2 >> 0x18;\n      val1 = (val3 >> 8 & 0xff) << 0x10 | (val3 >> 0x10 & 0xff) << 8 | val3 >> 0x18;\n      goto LAB_0008259e;\n    }\n    array1 = ptr1;\n    ptr2 = array2;\n    if (((uint)ptr1 & 4) != 0) {\n      array1 = ptr1 + 1;\n      val1 = *ptr1;\n      ptr2 = array2 + 1;\n      val3 = *array2;\n      val5 = val1 + 0xfefefeff & ~val1 & 0x80808080;\n      if (val1 != val3 || val5 != 0) {\nLAB_0008259a:\n        val2 = val1 << 0x18 | (val1 >> 8 & 0xff) << 0x10 | (val1 >> 0x10 & 0xff) << 8 |\n                val1 >> 0x18;\n        val1 = val3 << 0x18 | (val3 >> 8 & 0xff) << 0x10 | (val3 >> 0x10 & 0xff) << 8 |\n                val3 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    array2 = ptr2;\n    if (((uint)ptr2 & 4) != 0) {\n      val1 = *ptr2;\n      ptr1 = ptr2 + 1;\n      do {\n        val2 = *array1;\n        val3 = array1[1];\n        val5 = val2 + 0xfefefeff & ~val2 & 0x80808080;\n        if (val2 != val1 || val5 != 0) goto LAB_0008258e;\n        val4 = *ptr1;\n        val1 = ptr1[1];\n        val5 = val3 + 0xfefefeff & ~val3 & 0x80808080;\n        array1 = array1 + 2;\n        ptr1 = ptr1 + 2;\n      } while (val3 == val4 && val5 == 0);\n      val2 = val3 << 0x18 | (val3 >> 8 & 0xff) << 0x10 | (val3 >> 0x10 & 0xff) << 8 |\n              val3 >> 0x18;\n      val1 = val4 << 0x18 | (val4 >> 8 & 0xff) << 0x10 | (val4 >> 0x10 & 0xff) << 8 |\n              val4 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    val1 = *array1;\n    val2 = array1[1];\n    val3 = *array2;\n    val4 = array2[1];\n    val5 = val1 + 0xfefefeff & ~val1 & 0x80808080;\n    if (val1 != val3 || val5 != 0) goto LAB_0008259a;\n    val5 = val2 + 0xfefefeff & ~val2 & 0x80808080;\n    array1 = array1 + 2;\n    array2 = array2 + 2;\n  } while (val2 == val4 && val5 == 0);\n  val2 = val2 << 0x18 | (val2 >> 8 & 0xff) << 0x10 | (val2 >> 0x10 & 0xff) << 8 | val2 >> 0x18;\n  val1 = val4 << 0x18 | (val4 >> 8 & 0xff) << 0x10 | (val4 >> 0x10 & 0xff) << 8 | val4 >> 0x18;\nLAB_0008259e:\n  val3 = val5 << 0x18 | (val5 >> 8 & 0xff) << 0x10 | (val5 >> 0x10 & 0xff) << 8 | val5 >> 0x18;\n  if (val3 != 0) {\n    val3 = 0x18 - LZCOUNT(val3);\n    val2 = val2 >> (val3 & 0xff);\n    val1 = val1 >> (val3 & 0xff);\n  }\n  result = 1;\n  if (val2 <= val1) {\n    result = -(uint)(val2 < val1);\n  }\n  return result;\nLAB_0008258e:\n  val2 = val2 << 0x18 | (val2 >> 8 & 0xff) << 0x10 | (val2 >> 0x10 & 0xff) << 8 | val2 >> 0x18;\n  val1 = val1 << 0x18 | (val1 >> 8 & 0xff) << 0x10 | (val1 >> 0x10 & 0xff) << 8 | val1 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "renaming": {
                "FUN_00082390": "compare_byte_arrays_00082390",
                "param_1": "array1",
                "param_2": "array2",
                "puVar1": "ptr1",
                "iVar2": "result",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "uVar5": "val1",
                "uVar6": "val2",
                "uVar7": "val3",
                "uVar8": "val4",
                "uVar9": "val5"
            },
            "calling": [
                "FUN_000815b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825cc": {
            "entrypoint": "0x000825cc",
            "current_name": "copy_strings_000825cc",
            "code": "\nvoid copy_strings_000825cc(uint *destination,uint *source)\n\n{\n  char current_char;\n  ushort current_short;\n  uint *next_source;\n  uint *next_dest;\n  uint current_word;\n  uint temp_word;\n  uint *current_word_dest;\n  bool is_zero;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      current_char = *(char *)source;\n      *(char *)destination = current_char;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    next_dest = source;\n    if (((uint)source & 1) != 0) {\n      next_dest = (uint *)((int)source + 1);\n      current_char = *(char *)source;\n      *(char *)destination = current_char;\n      destination = (uint *)((int)destination + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    source = next_dest;\n    if (((uint)next_dest & 2) != 0) {\n      source = (uint *)((int)next_dest + 2);\n      current_short = *(ushort *)next_dest;\n      is_zero = (current_short & 0xff) == 0;\n      if (is_zero) {\n        *(char *)destination = (char)current_short;\n      }\n      else {\n        *(ushort *)destination = current_short;\n        is_zero = (current_short & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  current_word = *source;\n  next_dest = source + 1;\n  current_word_dest = destination;\n  if (((uint)source & 4) != 0) {\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) goto LAB_00082630;\n    current_word_dest = destination + 1;\n    *destination = current_word;\n    next_dest = source + 2;\n    current_word = source[1];\n  }\n  while( true ) {\n    next_source = next_dest + 1;\n    temp_word = *next_dest;\n    destination = current_word_dest;\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) break;\n    destination = current_word_dest + 1;\n    *current_word_dest = current_word;\n    current_word = temp_word;\n    if ((temp_word + 0xfefefeff & ~temp_word & 0x80808080) != 0) break;\n    next_dest = next_dest + 2;\n    current_word = *next_source;\n    current_word_dest = current_word_dest + 2;\n    *destination = temp_word;\n  }\nLAB_00082630:\n  do {\n    *(char *)destination = (char)current_word;\n    temp_word = current_word & 0xff;\n    current_word = current_word >> 8 | current_word << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (temp_word != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825cc": "copy_strings_000825cc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "next_source",
                "puVar4": "next_dest",
                "uVar5": "current_word",
                "uVar6": "temp_word",
                "puVar7": "current_word_dest",
                "bVar8": "is_zero"
            },
            "calling": [
                "FUN_000814d0",
                "FUN_00081570",
                "FUN_0008151c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082688": {
            "entrypoint": "0x00082688",
            "current_name": "count_trailing_zeros_00082688",
            "code": "\nint countTrailingZeros_00082688(uint value)\n\n{\n  int count;\n  uint *ptr;\n  uint data;\n  bool isZero;\n  \n  ptr = (uint *)(value & 0xfffffffc);\n  count = -(value & 3);\n  data = *ptr;\n  if ((value & 3) != 0) {\n    data = data | 0xffffffffU >> ((count + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (data + 0xfefefeff & ~data & 0x80808080) == 0) {\n    count = count + 4;\n    data = *ptr;\n  }\n  isZero = (data & 0xff) == 0;\n  if (!isZero) {\n    count = count + 1;\n    isZero = (data & 0xff00) == 0;\n  }\n  if (!isZero) {\n    count = count + 1;\n    isZero = (data & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    count = count + 1;\n  }\n  return count;\n}\n\n",
            "renaming": {
                "FUN_00082688": "count_trailing_zeros_00082688",
                "param_1": "value",
                "iVar1": "count",
                "puVar2": "ptr",
                "uVar3": "data",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_000814f6",
                "FUN_000810a6",
                "FUN_0008289c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082824": {
            "entrypoint": "0x00082824",
            "current_name": "process_data_00082824",
            "code": "\nint processData_00082824(undefined4 param1,int param2,int **param3)\n\n{\n  int *ptr1;\n  int result;\n  int *ptr3;\n  uint counter;\n  undefined4 *ptr5;\n  uint value;\n  uint shiftedValue;\n  \n  if (-1 < *(int *)(param2 + 100) << 0x12) {\n    result = extract_data_00083ca8();\n    param3[2] = (int *)0x0;\n    param3[1] = (int *)0x0;\n    return result;\n  }\n  ptr3 = param3[2];\n  ptr1 = *param3;\n  while (ptr3 != (int *)0x0) {\n    value = ptr1[1];\n    shiftedValue = value >> 2;\n    if (shiftedValue != 0) {\n      ptr5 = (undefined4 *)(*ptr1 + -4);\n      counter = 0;\n      do {\n        ptr5 = ptr5 + 1;\n        result = process_data_000839b4(param1,*ptr5,param2);\n        counter = counter + 1;\n        if (result == -1) goto LAB_00082864;\n      } while (shiftedValue != counter);\n      ptr3 = param3[2];\n    }\n    ptr3 = (int *)((int)ptr3 - (value & 0xfffffffc));\n    param3[2] = ptr3;\n    ptr1 = ptr1 + 2;\n  }\n  result = 0;\nLAB_00082864:\n  param3[2] = (int *)0x0;\n  param3[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082824": "process_data_00082824",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "piVar1": "ptr1",
                "iVar2": "result",
                "piVar3": "ptr3",
                "uVar4": "counter",
                "puVar5": "ptr5",
                "uVar6": "value",
                "uVar7": "shiftedValue"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083ca8",
                "FUN_000839b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008289c": {
            "entrypoint": "0x0008289c",
            "current_name": "process_param_string_0008289c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint processParamString_0008289c(int paramPointer,int paramData,int *******paramString,int **paramArray)\n\n{\n  bool isFlag1Set;\n  bool isFlag2Set;\n  bool isFlag3Set;\n  char flagChar;\n  bool isFlag5Set;\n  int ********nestedIntPtr;\n  int *intPointer;\n  int intValue;\n  char charValue;\n  int *******nestedObjPointer;\n  uint tempVar11;\n  int **arrayPointer;\n  uint tempVar13;\n  uint tempVar14;\n  int tempVar15;\n  int ********pnestedObjPointer2;\n  int tempVar17;\n  int *******nestedObjPointer3;\n  int *intPointer2;\n  int *******nestedObjPointer4;\n  uint tempVar21;\n  int *intPointer3;\n  int *******nestedObjPointer5;\n  undefined4 tempVar24;\n  int ********charPointer;\n  bool isFlag6Set;\n  longlong longLongValue;\n  int *******currentObjPointer;\n  int *******nestedObjPointer6;\n  int **currentArrayPointer;\n  int totalArraySize;\n  char *currentCharPointer;\n  char currentChar;\n  undefined flagChar2;\n  undefined flagChar3;\n  int ********currentIntPtr;\n  int currentInt;\n  int *******currentObjPointer2;\n  undefined flagChar4;\n  char currentChar2;\n  undefined flagChar5;\n  undefined paramArray2 [4];\n  int *******localArray [16];\n  \n  if ((paramPointer != 0) && (*(int *)(paramPointer + 0x38) == 0)) {\n    initialize_data_structures_00083888();\n  }\n  tempVar13 = (uint)*(ushort *)(paramData + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(paramData + 0xc) << 0x12)) {\n    tempVar13 = tempVar13 | 0x2000;\n    *(short *)(paramData + 0xc) = (short)tempVar13;\n    *(uint *)(paramData + 100) = *(uint *)(paramData + 100) & 0xffffdfff;\n  }\n  if (((int)(tempVar13 << 0x1c) < 0) && (*(int *)(paramData + 0x10) != 0)) {\n    if ((tempVar13 & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    intValue = process_function_0008356c(paramPointer,paramData);\n    if (intValue != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(paramData + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(paramData + 0xe)) {\n    intValue = process_data_000834f0(paramPointer,paramData,paramString,paramArray);\n    return intValue;\n  }\nLAB_000828ee:\n  currentCharPointer = (char *)0x0;\n  currentObjPointer2 = (int *******)0x0;\n  currentInt = 0;\n  totalArraySize = 0;\n  nestedIntPtr = (int ********)paramArray2;\n  currentArrayPointer = paramArray;\n  currentIntPtr = (int ********)paramArray2;\nLAB_00082902:\n  nestedObjPointer = paramString;\n  if ((*(char *)paramString != '\\0') && (*(char *)paramString != '%')) {\n    do {\n      nestedObjPointer = (int *******)((int)nestedObjPointer + 1);\n      if (*(char *)nestedObjPointer == '\\0') break;\n    } while (*(char *)nestedObjPointer != '%');\n    nestedObjPointer4 = (int *******)((int)nestedObjPointer - (int)paramString);\n    if (nestedObjPointer4 != (int *******)0x0) {\n      currentInt = currentInt + 1;\n      currentObjPointer2 = (int *******)((int)currentObjPointer2 + (int)nestedObjPointer4);\n      *nestedIntPtr = paramString;\n      nestedIntPtr[1] = nestedObjPointer4;\n      if (currentInt < 8) {\n        nestedIntPtr = nestedIntPtr + 2;\n      }\n      else {\n        if (currentObjPointer2 == (int *******)0x0) {\n          totalArraySize = totalArraySize + (int)nestedObjPointer4;\n          currentInt = 0;\n          nestedIntPtr = (int ********)paramArray2;\n          goto LAB_00082952;\n        }\n        intValue = process_data_00082824(paramPointer,paramData,&currentIntPtr);\n        nestedIntPtr = (int ********)paramArray2;\n        if (intValue != 0) goto LAB_00083142;\n      }\n      totalArraySize = totalArraySize + (int)nestedObjPointer4;\n    }\n  }\nLAB_00082952:\n  if (*(char *)nestedObjPointer != '\\0') {\n    currentChar = '\\0';\n    tempVar14 = (uint)*(byte *)((int)nestedObjPointer + 1);\n    tempVar13 = 0;\n    isFlag5Set = false;\n    isFlag2Set = false;\n    isFlag1Set = false;\n    isFlag3Set = false;\n    isFlag6Set = false;\n    nestedObjPointer4 = (int *******)0x0;\n    nestedObjPointer6 = (int *******)0xffffffff;\n    paramString = (int *******)((int)nestedObjPointer + 1);\nLAB_00082976:\n    paramString = (int *******)((int)paramString + 1);\nLAB_0008297a:\n    switch(tempVar14) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (tempVar14 != 0) {\n        currentObjPointer = (int *******)0x1;\n        nestedObjPointer6 = (int *******)0x1;\n        charPointer = (int ********)&flagChar4;\n        flagChar4 = (char)tempVar14;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      isFlag3Set = true;\n      tempVar14 = (uint)*(byte *)paramString;\n      goto LAB_00082976;\n    case 0x2a:\n      nestedObjPointer4 = (int *******)*currentArrayPointer;\n      currentArrayPointer = currentArrayPointer + 1;\n      if ((int)nestedObjPointer4 < 0) {\n        nestedObjPointer4 = (int *******)-(int)nestedObjPointer4;\n        goto switchD_00082984_caseD_2d;\n      }\n      tempVar14 = (uint)*(byte *)paramString;\n      goto LAB_00082976;\n    case 0x2b:\n      tempVar14 = (uint)*(byte *)paramString;\n      currentChar = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      tempVar13 = tempVar13 | 4;\n      tempVar14 = (uint)*(byte *)paramString;\n      goto LAB_00082976;\n    case 0x2e:\n      tempVar14 = (uint)*(byte *)paramString;\n      nestedObjPointer = (int *******)((int)paramString + 1);\n      if (tempVar14 == 0x2a) {\n        tempVar14 = (uint)*(byte *)((int)paramString + 1);\n        nestedObjPointer6 = (int *******)*currentArrayPointer;\n        currentArrayPointer = currentArrayPointer + 1;\n        paramString = nestedObjPointer;\n        if ((int)nestedObjPointer6 < 0) {\n          nestedObjPointer6 = (int *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      tempVar11 = tempVar14 - 0x30;\n      if (tempVar11 < 10) {\n        tempVar21 = 0;\n        do {\n          paramString = (int *******)((int)nestedObjPointer + 1);\n          tempVar14 = (uint)*(byte *)nestedObjPointer;\n          tempVar21 = tempVar11 + tempVar21 * 10;\n          tempVar11 = tempVar14 - 0x30;\n          nestedObjPointer = paramString;\n        } while (tempVar11 < 10);\n        nestedObjPointer6 = (int *******)(tempVar21 | (int)tempVar21 >> 0x1f);\n      }\n      else {\n        nestedObjPointer6 = (int *******)0x0;\n        paramString = nestedObjPointer;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      tempVar13 = tempVar13 | 0x80;\n      tempVar14 = (uint)*(byte *)paramString;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      isFlag2Set = true;\n      if (isFlag1Set == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      currentArrayPointer = (int **)((int)currentArrayPointer + 7U & 0xfffffff8);\n      intPointer2 = *currentArrayPointer;\n      intPointer3 = currentArrayPointer[1];\n      currentArrayPointer = currentArrayPointer + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      isFlag2Set = true;\n      if (isFlag1Set != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      intValue = (uint)isFlag2Set << 4;\n      tempVar15 = (uint)isFlag1Set << 5;\n      if ((isFlag2Set == 0) && (tempVar15 = (uint)isFlag6Set << 6, isFlag6Set != 0)) {\n        intPointer2 = (int *)(uint)*(ushort *)currentArrayPointer;\n        currentArrayPointer = currentArrayPointer + 1;\n        intPointer3 = (int *)0x0;\n      }\n      else {\n        intValue = tempVar15;\n        intPointer2 = *currentArrayPointer;\n        currentArrayPointer = currentArrayPointer + 1;\n        intPointer3 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      isFlag2Set = true;\n      if (isFlag1Set != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((isFlag2Set) || (isFlag6Set == false)) {\n        intValue = 1;\n        intPointer2 = *currentArrayPointer;\n        currentArrayPointer = currentArrayPointer + 1;\n        intPointer3 = (int *)0x0;\n      }\n      else {\n        intPointer3 = (int *)0x0;\n        intPointer2 = (int *)(uint)*(ushort *)currentArrayPointer;\n        currentArrayPointer = currentArrayPointer + 1;\n        intValue = 1;\n      }\n      break;\n    case 0x58:\n      currentCharPointer = \"0123456789ABCDEF\";\n      if (isFlag1Set == false) goto LAB_00082efa;\nLAB_00082d1a:\n      arrayPointer = (int **)((int)currentArrayPointer + 7U & 0xfffffff8);\n      currentArrayPointer = arrayPointer + 2;\n      intPointer2 = *arrayPointer;\n      intPointer3 = arrayPointer[1];\n      goto LAB_00082d2e;\n    case 99:\n      intPointer2 = *currentArrayPointer;\n      currentArrayPointer = currentArrayPointer + 1;\n      currentObjPointer = (int *******)0x1;\n      flagChar4 = SUB41(intPointer2,0);\n      nestedObjPointer6 = (int *******)0x1;\n      charPointer = (int ********)&flagChar4;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (isFlag1Set != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((isFlag2Set == false) && (isFlag6Set != false)) {\n        intPointer2 = (int *)(int)*(short *)currentArrayPointer;\n        currentArrayPointer = currentArrayPointer + 1;\n        intPointer3 = (int *)((int)intPointer2 >> 0x1f);\n      }\n      else {\n        intPointer2 = *currentArrayPointer;\n        currentArrayPointer = currentArrayPointer + 1;\n        intPointer3 = (int *)((int)intPointer2 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)intPointer3 < 0) {\n        isFlag6Set = intPointer2 != (int *)0x0;\n        intPointer2 = (int *)-(int)intPointer2;\n        intPointer3 = (int *)(-(int)intPointer3 - (uint)isFlag6Set);\n        currentChar = '-';\n        flagChar = '-';\n        intValue = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)nestedObjPointer6) {\n        tempVar13 = tempVar13 & 0xffffff7f;\n      }\n      isFlag5Set = false;\n      tempVar14 = (uint)intPointer2 | (uint)intPointer3;\n      intValue = 1;\n      flagChar = currentChar;\n      goto joined_r0x00082adc;\n    case 0x68:\n      isFlag6Set = true;\n      tempVar14 = (uint)*(byte *)paramString;\n      goto LAB_00082976;\n    case 0x6c:\n      tempVar14 = (uint)*(byte *)paramString;\n      if (tempVar14 == 0x6c) {\n        isFlag1Set = true;\n        tempVar14 = (uint)*(byte *)((int)paramString + 1);\n        paramString = (int *******)((int)paramString + 1);\n      }\n      else {\n        isFlag2Set = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (isFlag1Set == false) {\n        if (isFlag2Set == false) {\n          if (isFlag6Set) {\n            intPointer2 = *currentArrayPointer;\n            currentArrayPointer = currentArrayPointer + 1;\n            *(short *)intPointer2 = (short)totalArraySize;\n          }\n          else {\n            intPointer2 = *currentArrayPointer;\n            currentArrayPointer = currentArrayPointer + 1;\n            *intPointer2 = totalArraySize;\n          }\n        }\n        else {\n          intPointer2 = *currentArrayPointer;\n          currentArrayPointer = currentArrayPointer + 1;\n          *intPointer2 = totalArraySize;\n        }\n      }\n      else {\n        intPointer2 = *currentArrayPointer;\n        currentArrayPointer = currentArrayPointer + 1;\n        *intPointer2 = totalArraySize;\n        intPointer2[1] = totalArraySize >> 0x1f;\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (isFlag1Set == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      arrayPointer = (int **)((int)currentArrayPointer + 7U & 0xfffffff8);\n      currentArrayPointer = arrayPointer + 2;\n      intPointer2 = *arrayPointer;\n      intPointer3 = arrayPointer[1];\n      intValue = 0;\n      break;\n    case 0x70:\n      intPointer2 = *currentArrayPointer;\n      currentArrayPointer = currentArrayPointer + 1;\n      flagChar3 = 0x78;\n      isFlag5Set = true;\n      intPointer3 = (int *)0x0;\n      flagChar2 = 0x30;\n      currentCharPointer = \"0123456789abcdef\";\n      intValue = 2;\n      break;\n    case 0x71:\n      isFlag1Set = true;\n      tempVar14 = (uint)*(byte *)paramString;\n      goto LAB_00082976;\n    case 0x73:\n      charPointer = (int ********)*currentArrayPointer;\n      currentChar = '\\0';\n      currentArrayPointer = currentArrayPointer + 1;\n      if (charPointer != (int ********)0x0) {\n        if ((int)nestedObjPointer6 < 0) {\n          nestedObjPointer6 = (int *******)count_trailing_zeros_00082688(charPointer);\n          nestedObjPointer = (int *******)0x0;\n          flagChar = currentChar;\n        }\n        else {\n          intValue = find_param_value_000840f8(charPointer,0,nestedObjPointer6);\n          flagChar = currentChar;\n          if (intValue == 0) {\n            nestedObjPointer = (int *******)0x0;\n          }\n          else {\n            nestedObjPointer3 = (int *******)(intValue - (int)charPointer);\n            if ((int)nestedObjPointer6 <= (int)(int *******)(intValue - (int)charPointer)) {\n              nestedObjPointer3 = nestedObjPointer6;\n            }\n            nestedObjPointer = (int *******)0x0;\n            nestedObjPointer6 = nestedObjPointer3;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((int *******)0x5 < nestedObjPointer6) {\n        nestedObjPointer6 = (int *******)0x6;\n      }\n      currentObjPointer = (int *******)((uint)nestedObjPointer6 & ~((int)nestedObjPointer6 >> 0x1f));\n      charPointer = (int ********)&UNK_00085728;\nLAB_00082d76:\n      currentChar = '\\0';\n      nestedObjPointer = (int *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!isFlag1Set) goto LAB_00082ce0;\nLAB_00082bc6:\n      arrayPointer = (int **)((int)currentArrayPointer + 7U & 0xfffffff8);\n      currentArrayPointer = arrayPointer + 2;\n      intPointer2 = *arrayPointer;\n      intPointer3 = arrayPointer[1];\n      intValue = 1;\n      break;\n    case 0x78:\n      currentCharPointer = \"0123456789abcdef\";\n      if (isFlag1Set != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((isFlag2Set == false) && (isFlag6Set != false)) {\n        intPointer3 = (int *)0x0;\n        intPointer2 = (int *)(uint)*(ushort *)currentArrayPointer;\n        currentArrayPointer = currentArrayPointer + 1;\n      }\n      else {\n        intPointer2 = *currentArrayPointer;\n        currentArrayPointer = currentArrayPointer + 1;\n        intPointer3 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((isFlag3Set) && (((uint)intPointer2 | (uint)intPointer3) != 0)) {\n        isFlag5Set = true;\n        flagChar2 = 0x30;\n        intValue = 2;\n        flagChar3 = (char)tempVar14;\n      }\n      else {\n        intValue = 2;\n      }\n    }\n    currentChar = '\\0';\n    flagChar = '\\0';\nLAB_00082ace:\n    if (-1 < (int)nestedObjPointer6) {\n      tempVar13 = tempVar13 & 0xffffff7f;\n    }\n    tempVar14 = (uint)intPointer2 | (uint)intPointer3;\njoined_r0x00082adc:\n    longLongValue = CONCAT44(intPointer3,intPointer2);\n    nestedObjPointer = nestedObjPointer6;\n    if ((tempVar14 == 0) && (nestedObjPointer6 == (int *******)0x0)) {\n      charPointer = (int ********)paramArray2;\n      if ((intValue != 0) || (!isFlag3Set)) goto LAB_00082b04;\n      charPointer = (int ********)(&currentChar2 + 1);\n      flagChar5 = '0';\n      goto LAB_00082afe;\n    }\n    if (intValue == 1) {\n      if (intPointer3 != (int *)0x0 || (int *)0x9 < intPointer2) {\n        pnestedObjPointer2 = (int ********)(&currentChar2 + 1);\n        do {\n          charPointer = pnestedObjPointer2;\n          tempVar24 = (undefined4)((ulonglong)longLongValue >> 0x20);\n          charValue = '\\n';\n          process_params_00084530((int)longLongValue,tempVar24,10,0);\n          *(char *)charPointer = charValue + '0';\n          longLongValue = process_params_00084530((int)longLongValue,tempVar24,10,0);\n          pnestedObjPointer2 = (int ********)((int)charPointer + -1);\n        } while (longLongValue != 0);\n        nestedObjPointer6 = (int *******)((int)paramArray2 - (int)charPointer);\n        goto LAB_00082b04;\n      }\n      flagChar5 = (char)intPointer2 + '0';\n      charPointer = (int ********)(&currentChar2 + 1);\n      goto LAB_00083282;\n    }\n    pnestedObjPointer2 = (int ********)(&currentChar2 + 1);\n    if (intValue != 2) goto LAB_000830e2;\n    do {\n      charPointer = pnestedObjPointer2;\n      tempVar14 = (uint)intPointer2 & 0xf;\n      intPointer2 = (int *)((uint)intPointer2 >> 4 | (int)intPointer3 << 0x1c);\n      intPointer3 = (int *)((uint)intPointer3 >> 4);\n      *(char *)charPointer = currentCharPointer[tempVar14];\n      pnestedObjPointer2 = (int ********)((int)charPointer + -1);\n    } while (((uint)intPointer2 | (uint)intPointer3) != 0);\n    nestedObjPointer6 = (int *******)((int)paramArray2 - (int)charPointer);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (currentObjPointer2 != (int *******)0x0) {\n    process_data_00082824(paramPointer,paramData,&currentIntPtr);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(paramData + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return totalArraySize;\nLAB_000830e2:\n  do {\n    charPointer = pnestedObjPointer2;\n    intPointer = (int *)((uint)intPointer2 >> 3 | (int)intPointer3 << 0x1d);\n    intPointer3 = (int *)((uint)intPointer3 >> 3);\n    intValue = ((uint)intPointer2 & 7) + 0x30;\n    *(char *)charPointer = (char)intValue;\n    pnestedObjPointer2 = (int ********)((int)charPointer + -1);\n    intPointer2 = intPointer;\n  } while (((uint)intPointer | (uint)intPointer3) != 0);\n  if (isFlag3Set) {\n    if (intValue == 0x30) {\nLAB_00082afe:\n      nestedObjPointer6 = (int *******)((int)paramArray2 - (int)charPointer);\n    }\n    else {\n      *(undefined *)((int)charPointer + -1) = 0x30;\n      charPointer = pnestedObjPointer2;\n      nestedObjPointer6 = (int *******)((int)paramArray2 - (int)pnestedObjPointer2);\n    }\n  }\n  else {\nLAB_00083282:\n    nestedObjPointer6 = (int *******)((int)paramArray2 - (int)charPointer);\n  }\nLAB_00082b04:\n  currentObjPointer = nestedObjPointer6;\n  if ((int)nestedObjPointer6 < (int)nestedObjPointer) {\n    currentObjPointer = nestedObjPointer;\n  }\n  if (flagChar != '\\0') {\n    currentObjPointer = (int *******)((int)currentObjPointer + 1);\n  }\nLAB_00082b1e:\n  if (isFlag5Set) {\n    currentObjPointer = (int *******)((int)currentObjPointer + 2);\n  }\n  if ((tempVar13 == 0) &&\n     (nestedObjPointer3 = (int *******)((int)nestedObjPointer4 - (int)currentObjPointer), 0 < (int)nestedObjPointer3)) {\n    if ((int)nestedObjPointer3 < 0x11) {\n      currentInt = currentInt + 1;\n    }\n    else {\n      do {\n        nestedObjPointer5 = nestedObjPointer3;\n        intValue = currentInt + 1;\n        currentObjPointer2 = currentObjPointer2 + 4;\n        *nestedIntPtr = (int *******)0x856f0;\n        nestedIntPtr[1] = (int *******)0x10;\n        if (intValue < 8) {\n          tempVar15 = currentInt + 2;\n          nestedIntPtr = nestedIntPtr + 2;\n          currentInt = intValue;\n        }\n        else if (currentObjPointer2 == (int *******)0x0) {\n          tempVar15 = 1;\n          nestedIntPtr = (int ********)paramArray2;\n          currentInt = 0;\n        }\n        else {\n          currentInt = intValue;\n          intValue = process_data_00082824(paramPointer,paramData,&currentIntPtr);\n          if (intValue != 0) goto LAB_00083142;\n          tempVar15 = currentInt + 1;\n          nestedIntPtr = (int ********)paramArray2;\n        }\n        nestedObjPointer3 = nestedObjPointer5 + -4;\n      } while (0x10 < (int)nestedObjPointer3);\n      nestedObjPointer3 = nestedObjPointer5 + -4;\n      currentInt = tempVar15;\n    }\n    currentObjPointer2 = (int *******)((int)currentObjPointer2 + (int)nestedObjPointer3);\n    *nestedIntPtr = (int *******)0x856f0;\n    nestedIntPtr[1] = nestedObjPointer3;\n    if (currentInt < 8) {\n      intValue = currentInt + 1;\n      nestedIntPtr = nestedIntPtr + 2;\n    }\n    else if (currentObjPointer2 == (int *******)0x0) {\n      intValue = 1;\n      currentInt = 0;\n      nestedIntPtr = (int ********)paramArray2;\n    }\n    else {\n      intValue = process_data_00082824(paramPointer,paramData,&currentIntPtr);\n      if (intValue != 0) goto LAB_00083142;\n      intValue = currentInt + 1;\n      nestedIntPtr = (int ********)paramArray2;\n    }\n  }\n  else {\n    intValue = currentInt + 1;\n  }\n  tempVar15 = intValue;\n  if (currentChar != '\\0') {\n    currentObjPointer2 = (int *******)((int)currentObjPointer2 + 1);\n    tempVar15 = 1;\n    *nestedIntPtr = (int *******)&currentChar;\n    nestedIntPtr[1] = (int *******)0x1;\n    currentInt = intValue;\n    if (intValue < 8) {\n      tempVar15 = intValue + 1;\n      nestedIntPtr = nestedIntPtr + 2;\n    }\n    else if (currentObjPointer2 == (int *******)0x0) {\n      currentInt = 0;\n      nestedIntPtr = (int ********)paramArray2;\n    }\n    else {\n      intValue = process_data_00082824(paramPointer,paramData,&currentIntPtr);\n      if (intValue != 0) goto LAB_00083142;\n      tempVar15 = currentInt + 1;\n      nestedIntPtr = (int ********)paramArray2;\n    }\n  }\n  intValue = tempVar15;\n  tempVar17 = currentInt;\n  if (isFlag5Set) {\n    currentObjPointer2 = (int *******)((int)currentObjPointer2 + 2);\n    *nestedIntPtr = (int *******)&flagChar2;\n    nestedIntPtr[1] = (int *******)0x2;\n    if (tempVar15 < 8) {\n      intValue = tempVar15 + 1;\n      tempVar17 = tempVar15;\n      nestedIntPtr = nestedIntPtr + 2;\n    }\n    else if (currentObjPointer2 == (int *******)0x0) {\n      intValue = 1;\n      tempVar17 = 0;\n      nestedIntPtr = (int ********)paramArray2;\n    }\n    else {\n      currentInt = tempVar15;\n      intValue = process_data_00082824(paramPointer,paramData,&currentIntPtr);\n      if (intValue != 0) goto LAB_00083142;\n      intValue = currentInt + 1;\n      tempVar17 = currentInt;\n      nestedIntPtr = (int ********)paramArray2;\n    }\n  }\n  currentInt = tempVar17;\n  if ((tempVar13 == 0x80) &&\n     (nestedObjPointer3 = (int *******)((int)nestedObjPointer4 - (int)currentObjPointer), 0 < (int)nestedObjPointer3)) {\n    if (0x10 < (int)nestedObjPointer3) {\n      do {\n        while( true ) {\n          nestedObjPointer5 = nestedObjPointer3;\n          currentInt = tempVar17 + 1;\n          currentObjPointer2 = currentObjPointer2 + 4;\n          *nestedIntPtr = (int *******)\"0000000000000000\";\n          nestedIntPtr[1] = (int *******)0x10;\n          if (7 < currentInt) break;\n          intValue = tempVar17 + 2;\n          nestedIntPtr = nestedIntPtr + 2;\nLAB_000831f2:\n          tempVar17 = currentInt;\n          nestedObjPointer3 = nestedObjPointer5 + -4;\n          if ((int)(nestedObjPointer5 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (currentObjPointer2 != (int *******)0x0) {\n          intValue = process_data_00082824(paramPointer,paramData,&currentIntPtr);\n          if (intValue == 0) {\n            intValue = currentInt + 1;\n            nestedIntPtr = (int ********)paramArray2;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        intValue = 1;\n        tempVar17 = 0;\n        nestedObjPointer3 = nestedObjPointer5 + -4;\n        nestedIntPtr = (int ********)paramArray2;\n      } while (0x10 < (int)(nestedObjPointer5 + -4));\nLAB_00083218:\n      nestedObjPointer3 = nestedObjPointer5 + -4;\n    }\n    currentObjPointer2 = (int *******)((int)currentObjPointer2 + (int)nestedObjPointer3);\n    *nestedIntPtr = (int *******)\"0000000000000000\";\n    nestedIntPtr[1] = nestedObjPointer3;\n    currentInt = intValue;\n    if (intValue < 8) {\n      intValue = intValue + 1;\n      nestedIntPtr = nestedIntPtr + 2;\n    }\n    else if (currentObjPointer2 == (int *******)0x0) {\n      intValue = 1;\n      currentInt = 0;\n      nestedIntPtr = (int ********)paramArray2;\n    }\n    else {\n      intValue = process_data_00082824(paramPointer,paramData,&currentIntPtr);\n      if (intValue != 0) goto LAB_00083142;\n      intValue = currentInt + 1;\n      nestedIntPtr = (int ********)paramArray2;\n    }\n  }\n  nestedObjPointer = (int *******)((int)nestedObjPointer - (int)nestedObjPointer6);\n  pnestedObjPointer2 = (int ********)paramArray2;\n  if ((int)nestedObjPointer < 1) {\nLAB_0008302a:\n    currentObjPointer2 = (int *******)((int)currentObjPointer2 + (int)nestedObjPointer6);\n    *nestedIntPtr = (int *******)charPointer;\n    nestedIntPtr[1] = nestedObjPointer6;\n    nestedObjPointer6 = currentObjPointer2;\n    currentInt = intValue;\n    if (intValue < 8) goto LAB_000831be;\n    if (currentObjPointer2 == (int *******)0x0) {\n      currentInt = 0;\n    }\n    else {\n      intValue = process_data_00082824(paramPointer,paramData,&currentIntPtr);\n      if (intValue != 0) goto LAB_00083142;\n    }\n  }\n  else {\n    tempVar15 = currentInt;\n    if (0x10 < (int)nestedObjPointer) {\n      do {\n        while( true ) {\n          nestedObjPointer3 = nestedObjPointer;\n          currentInt = tempVar15 + 1;\n          currentObjPointer2 = currentObjPointer2 + 4;\n          *nestedIntPtr = (int *******)\"0000000000000000\";\n          nestedIntPtr[1] = (int *******)0x10;\n          if (7 < currentInt) break;\n          intValue = tempVar15 + 2;\n          nestedIntPtr = nestedIntPtr + 2;\nLAB_00082fe6:\n          tempVar15 = currentInt;\n          nestedObjPointer = nestedObjPointer3 + -4;\n          if ((int)(nestedObjPointer3 + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (currentObjPointer2 != (int *******)0x0) {\n          intValue = process_data_00082824(paramPointer,paramData,&currentIntPtr);\n          if (intValue == 0) {\n            intValue = currentInt + 1;\n            nestedIntPtr = (int ********)paramArray2;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        intValue = 1;\n        nestedIntPtr = (int ********)paramArray2;\n        tempVar15 = 0;\n        nestedObjPointer = nestedObjPointer3 + -4;\n      } while (0x10 < (int)(nestedObjPointer3 + -4));\nLAB_0008300e:\n      nestedObjPointer = nestedObjPointer3 + -4;\n    }\n    currentObjPointer2 = (int *******)((int)currentObjPointer2 + (int)nestedObjPointer);\n    *nestedIntPtr = (int *******)\"0000000000000000\";\n    nestedIntPtr[1] = nestedObjPointer;\n    if (intValue < 8) {\n      intValue = intValue + 1;\n      nestedIntPtr = nestedIntPtr + 2;\n      goto LAB_0008302a;\n    }\n    if (currentObjPointer2 != (int *******)0x0) {\n      currentInt = intValue;\n      intValue = process_data_00082824(paramPointer,paramData,&currentIntPtr);\n      if (intValue != 0) goto LAB_00083142;\n      intValue = currentInt + 1;\n      nestedIntPtr = (int ********)paramArray2;\n      goto LAB_0008302a;\n    }\n    localArray[0] = nestedObjPointer6;\n    currentInt = 1;\n    nestedIntPtr = (int ********)paramArray2;\n    paramArray2 = (undefined  [4])charPointer;\nLAB_000831be:\n    pnestedObjPointer2 = nestedIntPtr + 2;\n    currentObjPointer2 = nestedObjPointer6;\n  }\n  if (((tempVar13 & 4) != 0) &&\n     (nestedObjPointer = (int *******)((int)nestedObjPointer4 - (int)currentObjPointer), 0 < (int)nestedObjPointer)) {\n    intValue = currentInt;\n    if ((int)nestedObjPointer < 0x11) {\n      tempVar15 = currentInt + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          currentInt = intValue + 1;\n          currentObjPointer2 = currentObjPointer2 + 4;\n          *pnestedObjPointer2 = (int *******)0x856f0;\n          pnestedObjPointer2[1] = (int *******)0x10;\n          if (7 < currentInt) break;\n          tempVar15 = intValue + 2;\n          pnestedObjPointer2 = pnestedObjPointer2 + 2;\nLAB_0008307a:\n          nestedObjPointer = nestedObjPointer + -4;\n          intValue = currentInt;\n          if ((int)nestedObjPointer < 0x11) goto LAB_000830a2;\n        }\n        if (currentObjPointer2 != (int *******)0x0) {\n          intValue = process_data_00082824(paramPointer,paramData,&currentIntPtr);\n          if (intValue == 0) {\n            tempVar15 = currentInt + 1;\n            pnestedObjPointer2 = (int ********)paramArray2;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        nestedObjPointer = nestedObjPointer + -4;\n        tempVar15 = 1;\n        intValue = 0;\n        pnestedObjPointer2 = (int ********)paramArray2;\n      } while (0x10 < (int)nestedObjPointer);\n    }\nLAB_000830a2:\n    currentObjPointer2 = (int *******)((int)currentObjPointer2 + (int)nestedObjPointer);\n    *pnestedObjPointer2 = (int *******)0x856f0;\n    pnestedObjPointer2[1] = nestedObjPointer;\n    currentInt = tempVar15;\n    if (7 < tempVar15) {\n      if (currentObjPointer2 == (int *******)0x0) {\n        if ((int)currentObjPointer < (int)nestedObjPointer4) {\n          currentObjPointer = nestedObjPointer4;\n        }\n        totalArraySize = totalArraySize + (int)currentObjPointer;\n        goto LAB_00083186;\n      }\n      intValue = process_data_00082824(paramPointer,paramData,&currentIntPtr);\n      if (intValue != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)currentObjPointer < (int)nestedObjPointer4) {\n    currentObjPointer = nestedObjPointer4;\n  }\n  totalArraySize = totalArraySize + (int)currentObjPointer;\n  if ((currentObjPointer2 != (int *******)0x0) &&\n     (intValue = process_data_00082824(paramPointer,paramData,&currentIntPtr), intValue != 0)) goto LAB_00083142;\nLAB_00083186:\n  currentInt = 0;\n  nestedIntPtr = (int ********)paramArray2;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  tempVar11 = tempVar14 - 0x30;\n  nestedObjPointer4 = (int *******)0x0;\n  nestedObjPointer = paramString;\n  do {\n    paramString = (int *******)((int)nestedObjPointer + 1);\n    tempVar14 = (uint)*(byte *)nestedObjPointer;\n    nestedObjPointer4 = (int *******)(tempVar11 + (int)nestedObjPointer4 * 10);\n    tempVar11 = tempVar14 - 0x30;\n    nestedObjPointer = paramString;\n  } while (tempVar11 < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  tempVar14 = (uint)*(byte *)paramString;\n  if (currentChar == '\\0') {\n    currentChar = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "renaming": {
                "FUN_0008289c": "process_param_string_0008289c",
                "param_1": "paramPointer",
                "param_2": "paramData",
                "param_3": "paramString",
                "param_4": "paramArray",
                "bVar1": "isFlag1Set",
                "bVar2": "isFlag2Set",
                "bVar3": "isFlag3Set",
                "cVar4": "flagChar",
                "bVar5": "isFlag5Set",
                "ppppppppiVar6": "nestedIntPtr",
                "piVar7": "intPointer",
                "iVar8": "intValue",
                "cVar9": "charValue",
                "pppppppiVar10": "nestedObjPointer",
                "uVar11": "tempVar11",
                "ppiVar12": "arrayPointer",
                "uVar13": "tempVar13",
                "uVar14": "tempVar14",
                "iVar15": "tempVar15",
                "pppppppiVar16": "nestedObjPointer2",
                "iVar17": "tempVar17",
                "pppppppiVar18": "nestedObjPointer3",
                "piVar19": "intPointer2",
                "pppppppiVar20": "nestedObjPointer4",
                "uVar21": "tempVar21",
                "piVar22": "intPointer3",
                "pppppppiVar23": "nestedObjPointer5",
                "uVar24": "tempVar24",
                "ppppppppiVar25": "charPointer",
                "bVar26": "isFlag6Set",
                "lVar27": "longLongValue",
                "local_dc": "currentObjPointer",
                "local_d4": "nestedObjPointer6",
                "local_c8": "currentArrayPointer",
                "local_c4": "totalArraySize",
                "local_c0": "currentCharPointer",
                "local_a1": "currentChar",
                "local_a0": "flagChar2",
                "local_9f": "flagChar3",
                "local_9c": "currentIntPtr",
                "local_98": "currentInt",
                "local_94": "currentObjPointer2",
                "local_90": "flagChar4",
                "cStack_6a": "currentChar2",
                "local_69": "flagChar5",
                "local_68": "paramArray2",
                "local_64": "localArray"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_00081750",
                "FUN_000817c8"
            ],
            "called": [
                "FUN_00083888",
                "FUN_000834f0",
                "FUN_0008356c",
                "FUN_000840f8",
                "FUN_00082824",
                "FUN_00082688",
                "FUN_00084530"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000834f0": {
            "entrypoint": "0x000834f0",
            "current_name": "process_data_000834f0",
            "code": "\nint processData_000834f0(undefined4 param1,int param2)\n\n{\n  int result;\n  int dataResult;\n  undefined *buffer [2];\n  undefined4 bufferSize;\n  ushort maskedValue;\n  undefined2 value;\n  undefined *bufferPtr;\n  undefined4 bufferSize1;\n  undefined4 size;\n  undefined4 dataSize;\n  undefined4 bufferSize2;\n  undefined4 constant;\n  undefined stackBuffer [1024];\n  \n  constant = *(undefined4 *)(param2 + 100);\n  dataSize = *(undefined4 *)(param2 + 0x1c);\n  value = *(undefined2 *)(param2 + 0xe);\n  bufferSize2 = *(undefined4 *)(param2 + 0x24);\n  buffer[0] = stackBuffer;\n  maskedValue = *(ushort *)(param2 + 0xc) & 0xfffd;\n  bufferSize = 0x400;\n  bufferSize1 = 0x400;\n  size = 0;\n  bufferPtr = buffer[0];\n  result = process_param_string_0008289c(param1,buffer);\n  if ((-1 < result) && (dataResult = process_data_00083850(param1,buffer), dataResult != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)maskedValue << 0x19) < 0) {\n    *(ushort *)(param2 + 0xc) = *(ushort *)(param2 + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000834f0": "process_data_000834f0",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "iVar2": "dataResult",
                "local_488": "buffer",
                "local_480": "bufferSize",
                "local_47c": "maskedValue",
                "local_47a": "value",
                "local_478": "bufferPtr",
                "local_474": "bufferSize1",
                "local_470": "size",
                "local_46c": "dataSize",
                "local_464": "bufferSize2",
                "local_424": "constant",
                "auStack_420": "stackBuffer"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083850",
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint FUN_000834f0(undefined4 param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined *local_488 [2];\n  undefined4 local_480;\n  ushort local_47c;\n  undefined2 local_47a;\n  undefined *local_478;\n  undefined4 local_474;\n  undefined4 local_470;\n  undefined4 local_46c;\n  undefined4 local_464;\n  undefined4 local_424;\n  undefined auStack_420 [1024];\n  \n  local_424 = *(undefined4 *)(param_2 + 100);\n  local_46c = *(undefined4 *)(param_2 + 0x1c);\n  local_47a = *(undefined2 *)(param_2 + 0xe);\n  local_464 = *(undefined4 *)(param_2 + 0x24);\n  local_488[0] = auStack_420;\n  local_47c = *(ushort *)(param_2 + 0xc) & 0xfffd;\n  local_480 = 0x400;\n  local_474 = 0x400;\n  local_470 = 0;\n  local_478 = local_488[0];\n  iVar1 = FUNC_0008289c(param_1,local_488);\n  if ((-1 < iVar1) && (iVar2 = process_data_00083850(param_1,local_488), iVar2 != 0)) {\n    iVar1 = -1;\n  }\n  if ((int)((uint)local_47c << 0x19) < 0) {\n    *(ushort *)(param_2 + 0xc) = *(ushort *)(param_2 + 0xc) | 0x40;\n  }\n  return iVar1;\n}\n\n"
        },
        "FUN_0008356c": {
            "entrypoint": "0x0008356c",
            "current_name": "process_function_0008356c",
            "code": "\nundefined4 processFunction_0008356c(undefined4 *outputParam,int *inputParam)\n\n{\n  int result;\n  int value;\n  uint convertedValue;\n  ushort ushortValue;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    initialize_data_structures_00083888();\n  }\n  ushortValue = *(ushort *)(inputParam + 3);\n  convertedValue = (uint)ushortValue;\n  if ((int)(convertedValue << 0x1c) < 0) {\n    value = inputParam[4];\n  }\n  else {\n    if (-1 < (int)(convertedValue << 0x1b)) {\n      *outputParam = 9;\n      *(ushort *)(inputParam + 3) = ushortValue | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(convertedValue << 0x1d) < 0) {\n      if ((int *)inputParam[0xc] != (int *)0x0) {\n        if ((int *)inputParam[0xc] != inputParam + 0x10) {\n          process_relocations_00083b10(outputParam);\n          ushortValue = *(ushort *)(inputParam + 3);\n        }\n        inputParam[0xc] = 0;\n      }\n      value = inputParam[4];\n      ushortValue = ushortValue & 0xffdb;\n      *inputParam = value;\n      inputParam[1] = 0;\n    }\n    else {\n      value = inputParam[4];\n    }\n    *(ushort *)(inputParam + 3) = ushortValue | 8;\n    convertedValue = (uint)(ushortValue | 8);\n  }\n  if ((value == 0) && ((convertedValue & 0x280) != 0x200)) {\n    initialize_memory_00084018(outputParam,inputParam);\n    convertedValue = (uint)*(ushort *)(inputParam + 3);\n    value = inputParam[4];\n  }\n  if ((convertedValue & 1) == 0) {\n    result = 0;\n    if (-1 < (int)(convertedValue << 0x1e)) {\n      result = inputParam[5];\n    }\n    inputParam[2] = result;\n  }\n  else {\n    inputParam[6] = -inputParam[5];\n    inputParam[2] = 0;\n  }\n  if ((value == 0) && ((int)((uint)*(ushort *)(inputParam + 3) << 0x18) < 0)) {\n    *(ushort *)(inputParam + 3) = *(ushort *)(inputParam + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0008356c": "process_function_0008356c",
                "param_1": "outputParam",
                "param_2": "inputParam",
                "iVar1": "result",
                "iVar2": "value",
                "uVar3": "convertedValue",
                "uVar4": "ushortValue"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_000842a4",
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083888",
                "FUN_00084018",
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000836d8": {
            "entrypoint": "0x000836d8",
            "current_name": "FUNC_000836d8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x00083630) */\n/* WARNING: Removing unreachable block (ram,0x000836c4) */\n/* WARNING: Removing unreachable block (ram,0x00083642) */\n/* WARNING: Removing unreachable block (ram,0x00083648) */\n/* WARNING: Removing unreachable block (ram,0x00083654) */\n/* WARNING: Removing unreachable block (ram,0x0008366e) */\n/* WARNING: Removing unreachable block (ram,0x0008364c) */\n/* WARNING: Removing unreachable block (ram,0x00083686) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n/* WARNING: Removing unreachable block (ram,0x00083688) */\n\nvoid FUNC_000836d8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836d8": "FUNC_000836d8"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000836ec": {
            "entrypoint": "0x000836ec",
            "current_name": "process_and_exit_000836ec",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n\nvoid process_and_exit_000836ec(void)\n\n{\n  dword *dataPointer;\n  dword exitStatus;\n  int index;\n  code *unrecoveredJumpTable;\n  \n  process_data_000841e4(6);\n  unrecoveredJumpTable = (code *)0x836fb;\n  exitStatus = exit_with_status_00080eec(1);\n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  index = *(int *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  dataPointer = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < index) {\n    dataPointer = (dword *)relocated_data_segment_function_000817f0(400);\n    if (dataPointer == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*unrecoveredJumpTable)(0xffffffff);\n      return;\n    }\n    *dataPointer = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    dataPointer[1] = 0;\n    index = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)dataPointer;\n    dataPointer[0x62] = 0;\n    dataPointer[99] = 0;\n  }\n  dataPointer[1] = index + 1;\n  dataPointer[index + 2] = exitStatus;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*unrecoveredJumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836ec": "process_and_exit_000836ec",
                "pdVar1": "dataPointer",
                "dVar2": "exitStatus",
                "iVar3": "index",
                "UNRECOVERED_JUMPTABLE_00": "unrecoveredJumpTable"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_00080eec",
                "FUN_000841e4",
                "FUN_000817f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083850": {
            "entrypoint": "0x00083850",
            "current_name": "process_data_00083850",
            "code": "\nundefined4 process_data_00083850(int *data_array,int *info_array)\n\n{\n  int *temp_ptr;\n  int temp_var1;\n  ushort temp_var2;\n  uint temp_var3;\n  int temp_var4;\n  code *function_ptr;\n  undefined4 result;\n  int temp_var5;\n  \n  if ((data_array != (int *)0x0) && (data_array[0xe] == 0)) {\n    initialize_data_structures_00083888();\n  }\n  if (*(short *)(info_array + 3) == 0) {\n    return 0;\n  }\n  temp_var2 = *(ushort *)(info_array + 3);\n  if ((int)((uint)temp_var2 << 0x1c) < 0) {\n    temp_var5 = info_array[4];\n    if (temp_var5 == 0) {\n      return 0;\n    }\n    temp_var1 = *info_array;\n    if ((temp_var2 & 3) == 0) {\n      temp_var4 = info_array[5];\n    }\n    else {\n      temp_var4 = 0;\n    }\n    *info_array = temp_var5;\n    temp_var1 = temp_var1 - temp_var5;\n    info_array[2] = temp_var4;\n    do {\n      if (temp_var1 < 1) {\n        return 0;\n      }\n      temp_var4 = (*(code *)info_array[9])(data_array,info_array[7],temp_var5,temp_var1,result);\n      temp_var1 = temp_var1 - temp_var4;\n      temp_var5 = temp_var5 + temp_var4;\n    } while (0 < temp_var4);\nLAB_000837c8:\n    *(ushort *)(info_array + 3) = *(ushort *)(info_array + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(info_array + 3) = temp_var2 | 0x800;\n  if ((info_array[1] < 1) && (info_array[0xf] < 1)) {\n    return 0;\n  }\n  function_ptr = (code *)info_array[10];\n  if (function_ptr == (code *)0x0) {\n    return 0;\n  }\n  temp_var3 = (uint)(temp_var2 | 0x800);\n  temp_var5 = *data_array;\n  *data_array = 0;\n  if ((temp_var2 & 0x1000) == 0) {\n    temp_var1 = (*function_ptr)(data_array,info_array[7],temp_var3 & 0x1000,1);\n    if ((temp_var1 == -1) && (temp_var4 = *data_array, temp_var4 != 0)) {\n      if ((temp_var4 == 0x1d) || (temp_var4 == 0x16)) {\n        *data_array = temp_var5;\n        return 0;\n      }\n      goto LAB_000837c8;\n    }\n    temp_var3 = (uint)*(ushort *)(info_array + 3);\n    function_ptr = (code *)info_array[10];\n  }\n  else {\n    temp_var1 = info_array[0x14];\n  }\n  if (((int)(temp_var3 << 0x1d) < 0) && (temp_var1 = temp_var1 - info_array[1], info_array[0xc] != 0)) {\n    temp_var1 = temp_var1 - info_array[0xf];\n  }\n  temp_var1 = (*function_ptr)(data_array,info_array[7],temp_var1,0);\n  if (temp_var1 == -1) {\n    temp_var4 = *data_array;\n    if (temp_var4 != 0) {\n      if ((temp_var4 != 0x1d) && (temp_var4 != 0x16)) {\n        *(ushort *)(info_array + 3) = *(ushort *)(info_array + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(info_array + 3) = *(ushort *)(info_array + 3) & 0xf7ff;\n      *info_array = info_array[4];\n      info_array[1] = 0;\n      goto LAB_00083774;\n    }\n    temp_var2 = *(ushort *)(info_array + 3) & 0xf7ff;\n    info_array[1] = 0;\n    *(ushort *)(info_array + 3) = temp_var2;\n    *info_array = info_array[4];\n  }\n  else {\n    temp_var2 = *(ushort *)(info_array + 3) & 0xf7ff;\n    *info_array = info_array[4];\n    *(ushort *)(info_array + 3) = temp_var2;\n    info_array[1] = 0;\n  }\n  if ((int)((uint)temp_var2 << 0x13) < 0) {\n    info_array[0x14] = temp_var1;\n  }\nLAB_00083774:\n  temp_ptr = (int *)info_array[0xc];\n  *data_array = temp_var5;\n  if (temp_ptr == (int *)0x0) {\n    return 0;\n  }\n  if (temp_ptr != info_array + 0x10) {\n    process_relocations_00083b10(data_array);\n  }\n  info_array[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083850": "process_data_00083850",
                "param_1": "data_array",
                "param_2": "info_array",
                "piVar1": "temp_ptr",
                "iVar2": "temp_var1",
                "uVar3": "temp_var2",
                "uVar4": "temp_var3",
                "iVar5": "temp_var4",
                "pcVar6": "function_ptr",
                "unaff_r4": "result",
                "iVar7": "temp_var5"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_00084484",
                "FUN_00083ca8",
                "FUN_000842a4"
            ],
            "called": [
                "FUN_00083888",
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083888": {
            "entrypoint": "0x00083888",
            "current_name": "initialize_data_structures_00083888",
            "code": "\nvoid initializeDataStructures_00083888(int dataStruct)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if (*(int *)(dataStruct + 0x38) == 0) {\n    ptr1 = *(undefined4 **)(dataStruct + 4);\n    *(undefined **)(dataStruct + 0x3c) = &LAB_0008387c_1;\n    *(undefined4 *)(dataStruct + 0x2e4) = 3;\n    *(int *)(dataStruct + 0x2e8) = dataStruct + 0x2ec;\n    *(undefined4 *)(dataStruct + 0x2e0) = 0;\n    *(undefined2 *)(ptr1 + 3) = 4;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    fill_memory_00081f00(ptr1 + 0x17,0,8);\n    ptr2 = *(undefined4 **)(dataStruct + 8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84221;\n    ptr1[9] = 0x84245;\n    ptr1[10] = 0x8427d;\n    ptr1[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\n    *(undefined2 *)(ptr2 + 3) = 9;\n    *ptr2 = 0;\n    ptr2[1] = 0;\n    ptr2[2] = 0;\n    ptr2[0x19] = 0;\n    ptr2[4] = 0;\n    ptr2[5] = 0;\n    ptr2[6] = 0;\n    fill_memory_00081f00(ptr2 + 0x17,0,8);\n    ptr1 = *(undefined4 **)(dataStruct + 0xc);\n    ptr2[7] = ptr2;\n    ptr2[8] = 0x84221;\n    ptr2[9] = 0x84245;\n    ptr2[10] = 0x8427d;\n    ptr2[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)(ptr1 + 3) = 0x12;\n    *(undefined2 *)((int)ptr1 + 0xe) = 2;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    fill_memory_00081f00(ptr1 + 0x17,0,8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84221;\n    ptr1[9] = 0x84245;\n    ptr1[10] = 0x8427d;\n    ptr1[0xb] = &LAB_0008429c_1;\n    *(undefined4 *)(dataStruct + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "dataStruct",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "calling": [
                "FUN_00084484",
                "FUN_00083850",
                "FUN_000842a4",
                "FUN_0008356c",
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008397c": {
            "entrypoint": "0x0008397c",
            "current_name": "FUNC_0008397c",
            "code": "\nvoid FUNC_0008397c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008397c": "FUNC_0008397c"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083980": {
            "entrypoint": "0x00083980",
            "current_name": "FUNC_00083980",
            "code": "\nvoid FUNC_00083980(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083980": "FUNC_00083980"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000839b4": {
            "entrypoint": "0x000839b4",
            "current_name": "process_data_000839b4",
            "code": "\nuint processData_000839b4(undefined4 param1,uint param2,byte **param3)\n\n{\n  int relocationOffset;\n  uint result;\n  uint currentData;\n  byte *currentByte;\n  uint counter;\n  byte byteValue;\n  byte stackArray [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(param3 + 3) << 0x12)) {\n    *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x2000;\n    param3[0x19] = (byte *)((uint)param3[0x19] | 0x2000);\n  }\n  relocationOffset = get_relocation_offset_0008400c();\n  if ((relocationOffset == 1) && (param2 - 1 < 0xff)) {\n    currentData = param2 & 0xff;\n    byteValue = (byte)currentData;\n    result = 1;\n  }\n  else {\n    result = execute_operation_0008434c(param1,&byteValue,param2,param3 + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return param2;\n    }\n    currentData = (uint)byteValue;\n  }\n  counter = 0;\n  do {\n    currentByte = param3[2] + -1;\n    param3[2] = currentByte;\n    if ((int)currentByte < 0) {\n      if ((int)param3[6] <= (int)currentByte) {\n        **param3 = (byte)currentData;\n        currentByte = *param3;\n        currentData = (uint)*currentByte;\n        if (currentData != 10) goto LAB_00083a04;\n      }\n      relocationOffset = process_and_update_data_000842a4(param1,currentData,param3);\n      if (relocationOffset == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **param3 = (byte)currentData;\n      currentByte = *param3;\nLAB_00083a04:\n      *param3 = currentByte + 1;\n    }\n    if (result <= counter + 1) {\n      return param2;\n    }\n    currentData = (uint)stackArray[counter];\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000839b4": "process_data_000839b4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "relocationOffset",
                "uVar2": "result",
                "uVar3": "currentData",
                "pbVar4": "currentByte",
                "uVar5": "counter",
                "local_1c": "byteValue",
                "abStack_1b": "stackArray"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_0008400c",
                "FUN_000842a4",
                "FUN_0008434c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083a74": {
            "entrypoint": "0x00083a74",
            "current_name": "process_relocation_00083a74",
            "code": "\nundefined4 processRelocation_00083a74(undefined4 dataPointer,int size)\n\n{\n  int result;\n  uint relOffset;\n  int adjustedOffset;\n  \n  FUNC_00081f94();\n  relOffset = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  adjustedOffset = ((relOffset - size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjustedOffset) {\n    result = process_result_0008236c(dataPointer,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + relOffset) {\n      result = process_result_0008236c(dataPointer,-adjustedOffset);\n      if (result != -1) {\n        DAT_2007121c = DAT_2007121c - adjustedOffset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = relOffset - adjustedOffset | 1;\n        FUNC_00081f98(dataPointer);\n        return 1;\n      }\n      adjustedOffset = process_result_0008236c(dataPointer,0);\n      if (0xf < (int)(adjustedOffset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_2007121c = adjustedOffset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             adjustedOffset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_00081f98(dataPointer);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083a74": "process_relocation_00083a74",
                "param_1": "dataPointer",
                "param_2": "size",
                "iVar1": "result",
                "uVar2": "relOffset",
                "iVar3": "adjustedOffset"
            },
            "calling": [
                "FUN_00083b10"
            ],
            "called": [
                "FUN_0008236c",
                "FUN_00081f94",
                "FUN_00081f98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b10": {
            "entrypoint": "0x00083b10",
            "current_name": "process_relocations_00083b10",
            "code": "\nvoid processRelocations_00083b10(undefined4 param1,int param2)\n\n{\n  int index1;\n  bool isFlagSet;\n  uint lowerBits;\n  dword currentRelocation;\n  int index2;\n  uint offset;\n  dword previousRelocation;\n  uint newOffset;\n  dword newRelocation;\n  \n  if (param2 == 0) {\n    return;\n  }\n  FUNC_00081f94();\n  lowerBits = *(uint *)(param2 + -4);\n  previousRelocation = param2 - 8;\n  offset = lowerBits & 0xfffffffe;\n  currentRelocation = previousRelocation + offset;\n  newOffset = *(uint *)(currentRelocation + 4) & 0xfffffffc;\n  if (relocationArray[141].r_info == currentRelocation) {\n    newOffset = newOffset + offset;\n    if (-1 < (int)(lowerBits << 0x1f)) {\n      previousRelocation = previousRelocation - *(int *)(param2 + -8);\n      index2 = *(int *)(previousRelocation + 0xc);\n      index1 = *(int *)(previousRelocation + 8);\n      newOffset = newOffset + *(int *)(param2 + -8);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    currentRelocation = relocationArray[269].r_info;\n    *(uint *)(previousRelocation + 4) = newOffset | 1;\n    relocationArray[141].r_info = previousRelocation;\n    if (currentRelocation <= newOffset) {\n      process_relocation_00083a74(param1,DAT_20071218);\n    }\n  }\n  else {\n    *(uint *)(currentRelocation + 4) = newOffset;\n    if ((lowerBits & 1) == 0) {\n      previousRelocation = previousRelocation - *(int *)(param2 + -8);\n      index1 = *(int *)(previousRelocation + 8);\n      offset = offset + *(int *)(param2 + -8);\n      if (index1 == 0x2007046c) {\n        isFlagSet = true;\n      }\n      else {\n        index2 = *(int *)(previousRelocation + 0xc);\n        *(int *)(index1 + 0xc) = index2;\n        *(int *)(index2 + 8) = index1;\n        isFlagSet = false;\n      }\n    }\n    else {\n      isFlagSet = false;\n    }\n    if (-1 < *(int *)(currentRelocation + newOffset + 4) << 0x1f) {\n      offset = offset + newOffset;\n      index1 = *(int *)(currentRelocation + 8);\n      if ((!isFlagSet) && (index1 == 0x2007046c)) {\n        relocationArray[142].r_info = previousRelocation;\n        relocationArray[143].r_offset = previousRelocation;\n        *(undefined4 *)(previousRelocation + 0xc) = 0x2007046c;\n        *(undefined4 *)(previousRelocation + 8) = 0x2007046c;\n        *(uint *)(previousRelocation + 4) = offset | 1;\n        *(uint *)(previousRelocation + offset) = offset;\n        goto LAB_00083ba4;\n      }\n      index2 = *(int *)(currentRelocation + 0xc);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    *(uint *)(previousRelocation + 4) = offset | 1;\n    *(uint *)(previousRelocation + offset) = offset;\n    if (!isFlagSet) {\n      if (offset < 0x200) {\n        lowerBits = offset & 0xfffffff8;\n        index1 = *(int *)((int)&relocationArray[0x8d].r_info + lowerBits);\n        relocationArray[141].r_offset =\n             relocationArray[141].r_offset | 1 << ((int)(offset >> 3) >> 2 & 0xffU);\n        *(int *)(previousRelocation + 8) = index1;\n        *(uint *)(previousRelocation + 0xc) = lowerBits + 0x20070464;\n        *(dword *)((int)&relocationArray[0x8d].r_info + lowerBits) = previousRelocation;\n        *(dword *)(index1 + 0xc) = previousRelocation;\n        FUNC_00081f98(param1);\n        return;\n      }\n      lowerBits = offset >> 9;\n      if (lowerBits < 5) {\n        index1 = (offset >> 6) + 0x38;\n        index2 = index1 * 2;\n      }\n      else if (lowerBits < 0x15) {\n        index1 = lowerBits + 0x5b;\n        index2 = index1 * 2;\n      }\n      else if (lowerBits < 0x55) {\n        index1 = (offset >> 0xc) + 0x6e;\n        index2 = index1 * 2;\n      }\n      else if (lowerBits < 0x155) {\n        index1 = (offset >> 0xf) + 0x77;\n        index2 = index1 * 2;\n      }\n      else if (lowerBits < 0x555) {\n        index1 = (offset >> 0x12) + 0x7c;\n        index2 = index1 * 2;\n      }\n      else {\n        index2 = 0xfc;\n        index1 = 0x7e;\n      }\n      newRelocation = index2 * 4 + 0x20070464;\n      currentRelocation = (&relocationArray[0x8d].r_info)[index2];\n      if (currentRelocation == newRelocation) {\n        relocationArray[141].r_offset =\n             relocationArray[141].r_offset | 1 << (index1 >> 2 & 0xffU);\n        newRelocation = currentRelocation;\n      }\n      else {\n        do {\n          if ((*(uint *)(currentRelocation + 4) & 0xfffffffc) <= offset) break;\n          currentRelocation = *(dword *)(currentRelocation + 8);\n        } while (newRelocation != currentRelocation);\n        newRelocation = *(dword *)(currentRelocation + 0xc);\n      }\n      *(dword *)(previousRelocation + 0xc) = newRelocation;\n      *(dword *)(previousRelocation + 8) = currentRelocation;\n      *(dword *)(newRelocation + 8) = previousRelocation;\n      *(dword *)(currentRelocation + 0xc) = previousRelocation;\n    }\n  }\nLAB_00083ba4:\n  FUNC_00081f98(param1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b10": "process_relocations_00083b10",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "index1",
                "bVar2": "isFlagSet",
                "uVar3": "lowerBits",
                "dVar4": "currentRelocation",
                "iVar5": "index2",
                "uVar6": "offset",
                "dVar7": "previousRelocation",
                "uVar8": "newOffset",
                "dVar9": "newRelocation",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "FUN_00084484",
                "FUN_00083ca8",
                "FUN_00081800",
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "called": [
                "FUN_00083a74",
                "FUN_00081f94",
                "FUN_00081f98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083ca8": {
            "entrypoint": "0x00083ca8",
            "current_name": "extract_data_00083ca8",
            "code": "\nundefined4 extract_data_00083ca8(undefined4 *data_array,uint *header,uint **output_ptr)\n\n{\n  int result;\n  uint temp1;\n  uint temp2;\n  ushort flags;\n  uint count;\n  uint *ptr1;\n  uint *ptr2;\n  uint size;\n  uint offset;\n  uint start_pos;\n  uint temp3;\n  uint temp4;\n  \n  if (output_ptr[2] != (uint *)0x0) {\n    flags = *(ushort *)(header + 3);\n    count = (uint)flags;\n    if (((int)(count << 0x1c) < 0) && (header[4] != 0)) {\n      ptr2 = *output_ptr;\n    }\n    else {\n      result = process_function_0008356c(data_array,header);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flags = *(ushort *)(header + 3);\n      count = (uint)flags;\n      ptr2 = *output_ptr;\n    }\n    if ((flags & 2) == 0) {\n      temp1 = count & 2;\n      start_pos = temp1;\n      size = temp1;\n      temp4 = temp1;\n      if ((count & 1) == 0) {\n        temp1 = 0;\n        start_pos = 0;\n        while( true ) {\n          while (temp1 == 0) {\n            start_pos = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            temp1 = *ptr1;\n          }\n          size = header[2];\n          if ((int)(count << 0x16) < 0) {\n            if (temp1 < size) {\n              count = *header;\n              size = temp1;\n            }\n            else if ((count & 0x480) == 0) {\n              count = *header;\n            }\n            else {\n              result = *header - header[4];\n              size = result + 1 + temp1;\n              offset = (int)(header[5] * 3) / 2;\n              if (size <= offset) {\n                size = offset;\n              }\n              if ((int)(count << 0x15) < 0) {\n                offset = relocated_data_segment_00081810(data_array,size);\n                if (offset == 0) {\n                  *data_array = 0xc;\n                  flags = *(ushort *)(header + 3);\n                  goto LAB_00083da4;\n                }\n                memcpy_word_aligned_00081d48(offset,header[4],result);\n                *(ushort *)(header + 3) = *(ushort *)(header + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                offset = FUNC_00081fac(data_array);\n                if (offset == 0) {\n                  process_relocations_00083b10(data_array,header[4]);\n                  flags = *(ushort *)(header + 3) & 0xff7f;\n                  *data_array = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              count = offset + result;\n              header[4] = offset;\n              header[5] = size;\n              *header = count;\n              header[2] = size - result;\n              size = temp1;\n            }\n            copy_memory_00081e34(count,start_pos,size);\n            header[2] = header[2] - size;\n            *header = *header + size;\n            size = temp1;\n          }\n          else if ((header[4] < *header) || (count = header[5], temp1 < count)) {\n            if (temp1 < size) {\n              size = temp1;\n            }\n            copy_memory_00081e34(*header,start_pos,size);\n            count = header[2];\n            header[2] = count - size;\n            *header = *header + size;\n            if ((count - size == 0) && (result = process_data_00083850(data_array,header), result != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            size = 0x7fffffff;\n            if (temp1 < 0x7fffffff) {\n              size = temp1;\n            }\n            size = (*(code *)header[9])(data_array,header[7],start_pos,(size / count) * count);\n            if ((int)size < 1) goto LAB_00083da2;\n          }\n          ptr1 = output_ptr[2];\n          start_pos = start_pos + size;\n          temp1 = temp1 - size;\n          output_ptr[2] = (uint *)((int)ptr1 - size);\n          if ((uint *)((int)ptr1 - size) == (uint *)0x0) break;\n          count = (uint)*(ushort *)(header + 3);\n        }\n      }\n      else {\n        do {\n          while (temp1 == 0) {\n            size = *ptr2;\n            temp1 = ptr2[1];\n            temp4 = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (temp4 == 0) {\n            result = find_param_value_000840f8(size,10,temp1);\n            if (result == 0) {\n              start_pos = temp1 + 1;\n              temp4 = 1;\n            }\n            else {\n              start_pos = (result + 1) - size;\n              temp4 = 1;\n            }\n          }\n          offset = *header;\n          count = start_pos;\n          if (temp1 <= start_pos) {\n            count = temp1;\n          }\n          temp2 = header[5];\n          if ((header[4] < offset) && (temp3 = header[2] + temp2, (int)temp3 < (int)count)) {\n            copy_memory_00081e34(offset,size,temp3);\n            *header = *header + temp3;\n            result = process_data_00083850(data_array,header);\n            if (result != 0) goto LAB_00083da2;\n          }\n          else if ((int)count < (int)temp2) {\n            copy_memory_00081e34(offset,size,count);\n            header[2] = header[2] - count;\n            *header = count + *header;\n            temp3 = count;\n          }\n          else {\n            temp3 = (*(code *)header[9])(data_array,header[7],size,temp2);\n            if ((int)temp3 < 1) goto LAB_00083da2;\n          }\n          start_pos = start_pos - temp3;\n          if (start_pos == 0) {\n            result = process_data_00083850(data_array,header);\n            if (result != 0) goto LAB_00083da2;\n            temp4 = 0;\n          }\n          ptr1 = output_ptr[2];\n          size = size + temp3;\n          temp1 = temp1 - temp3;\n          output_ptr[2] = (uint *)((int)ptr1 - temp3);\n        } while ((uint *)((int)ptr1 - temp3) != (uint *)0x0);\n      }\n    }\n    else {\n      temp1 = 0;\n      count = 0;\n      do {\n        while( true ) {\n          start_pos = count;\n          if (0x7ffffbff < count) {\n            start_pos = 0x7ffffc00;\n          }\n          if (count != 0) break;\n          temp1 = *ptr2;\n          count = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)header[9])(data_array,header[7],temp1,start_pos);\n        if (result < 1) {\nLAB_00083da2:\n          flags = *(ushort *)(header + 3);\nLAB_00083da4:\n          *(ushort *)(header + 3) = flags | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = output_ptr[2];\n        temp1 = temp1 + result;\n        count = count - result;\n        output_ptr[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083ca8": "extract_data_00083ca8",
                "param_1": "data_array",
                "param_2": "header",
                "param_3": "output_ptr",
                "iVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "flags",
                "uVar5": "count",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "size",
                "uVar9": "offset",
                "uVar10": "start_pos",
                "uVar11": "temp3",
                "local_2c": "temp4"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00081e34",
                "FUN_00083b10",
                "FUN_000840f8",
                "FUN_00081d48",
                "FUN_00081810",
                "FUN_00081fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084004": {
            "entrypoint": "0x00084004",
            "current_name": "get_initial_value_00084004",
            "code": "\nundefined4 getInitialValue_00084004(void)\n\n{\n  return 0x20070878;\n}\n\n",
            "renaming": {
                "FUN_00084004": "get_initial_value_00084004"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008400c": {
            "entrypoint": "0x0008400c",
            "current_name": "get_relocation_offset_0008400c",
            "code": "\ndword getRelocationOffset_0008400c(void)\n\n{\n  return relArray[275].r_offset;\n}\n\n",
            "renaming": {
                "FUN_0008400c": "get_relocation_offset_0008400c",
                "Elf32_Rel_ARRAY_20070000": "relArray"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084018": {
            "entrypoint": "0x00084018",
            "current_name": "initialize_memory_00084018",
            "code": "\nvoid initializeMemory_00084018(int param1,int *param2)\n\n{\n  ushort ushortValue;\n  int initializeResult;\n  int relocatedDataResult;\n  uint uintValue;\n  bool isConditionMet;\n  undefined stackVariable [4];\n  uint localVariable;\n  \n  ushortValue = *(ushort *)(param2 + 3);\n  uintValue = (uint)ushortValue;\n  if ((int)(uintValue << 0x1e) < 0) {\n    *param2 = (int)param2 + 0x43;\n    param2[4] = (int)param2 + 0x43;\n    param2[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)param2 + 0xe)) {\n    initializeResult = initialize_and_check_memory_00084494(param1,(int)*(short *)((int)param2 + 0xe),stackVariable);\n    if (-1 < initializeResult) {\n      isConditionMet = (localVariable & 0xf000) == 0x2000;\n      if (((localVariable & 0xf000) == 0x8000) && (param2[10] == 0x8427d)) {\n        initializeResult = 0x400;\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x400;\n        param2[0x13] = 0x400;\n      }\n      else {\n        initializeResult = 0x400;\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    ushortValue = *(ushort *)(param2 + 3);\n    uintValue = (uint)ushortValue;\n  }\n  *(ushort *)(param2 + 3) = ushortValue | 0x800;\n  if ((uintValue & 0x80) == 0) {\n    initializeResult = 0x400;\n  }\n  else {\n    initializeResult = 0x40;\n  }\n  isConditionMet = false;\nLAB_00084074:\n  relocatedDataResult = relocated_data_segment_00081810(param1,initializeResult);\n  ushortValue = *(ushort *)(param2 + 3);\n  if (relocatedDataResult == 0) {\n    if (-1 < (int)((uint)ushortValue << 0x16)) {\n      *(ushort *)(param2 + 3) = ushortValue | 2;\n      *param2 = (int)param2 + 0x43;\n      param2[4] = (int)param2 + 0x43;\n      param2[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(param1 + 0x3c) = &LAB_0008387c_1;\n    *(ushort *)(param2 + 3) = ushortValue | 0x80;\n    *param2 = relocatedDataResult;\n    param2[4] = relocatedDataResult;\n    param2[5] = initializeResult;\n    if ((isConditionMet) && (initializeResult = perform_initialization_000844bc(param1,(int)*(short *)((int)param2 + 0xe)), initializeResult != 0))\n    {\n      *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084018": "initialize_memory_00084018",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "ushortValue",
                "iVar2": "initializeResult",
                "iVar3": "relocatedDataResult",
                "uVar4": "uintValue",
                "bVar5": "isConditionMet",
                "auStack_54": "stackVariable",
                "local_50": "localVariable"
            },
            "calling": [
                "FUN_0008356c"
            ],
            "called": [
                "FUN_000844bc",
                "FUN_00084494",
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000840f8": {
            "entrypoint": "0x000840f8",
            "current_name": "find_param_value_000840f8",
            "code": "\nuint * find_param_value_000840f8(uint *data_array,char target_value,uint array_length)\n\n{\n  uint xor_result;\n  int index;\n  uint *current_ptr;\n  bool is_last_index;\n  \n  if (((uint)data_array & 3) == 0) {\nLAB_00084128:\n    if (3 < array_length) {\n      current_ptr = data_array;\n      do {\n        xor_result = *current_ptr ^ CONCAT22(CONCAT11(target_value,target_value),CONCAT11(target_value,target_value));\n        data_array = current_ptr;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) break;\n        array_length = array_length - 4;\n        data_array = current_ptr + 1;\n        current_ptr = current_ptr + 1;\n      } while (3 < array_length);\n    }\n    if (array_length == 0) {\n      data_array = (uint *)0x0;\n    }\n    else if (*(char *)data_array != target_value) {\n      index = 0;\n      do {\n        data_array = (uint *)((int)data_array + 1);\n        is_last_index = index == array_length - 1;\n        index = index + 1;\n        if (is_last_index) goto LAB_00084150;\n      } while (*(char *)data_array != target_value);\n    }\n  }\n  else if (array_length == 0) {\nLAB_00084150:\n    data_array = (uint *)0x0;\n  }\n  else if (*(char *)data_array != target_value) {\n    current_ptr = (uint *)((int)data_array + 1);\n    array_length = array_length - 1;\n    do {\n      data_array = current_ptr;\n      if (((uint)data_array & 3) == 0) goto LAB_00084128;\n      if (array_length == 0) goto LAB_00084150;\n      current_ptr = (uint *)((int)data_array + 1);\n      array_length = array_length - 1;\n    } while (*(char *)data_array != target_value);\n  }\n  return data_array;\n}\n\n",
            "renaming": {
                "FUN_000840f8": "find_param_value_000840f8",
                "param_1": "data_array",
                "param_2": "target_value",
                "param_3": "array_length",
                "uVar1": "xor_result",
                "iVar2": "index",
                "puVar3": "current_ptr",
                "bVar4": "is_last_index"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_0008289c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000841e4": {
            "entrypoint": "0x000841e4",
            "current_name": "process_data_000841e4",
            "code": "\nint processData_000841e4(uint input)\n\n{\n  dword offset;\n  undefined4 returnValue;\n  int ptr;\n  code *functionPtr;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 constant1;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  constant1 = 0x20070460;\n  if (0x1f < input) {\n    *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n    return -1;\n  }\n  ptr = *(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x2dc);\n  if ((ptr == 0) || (functionPtr = *(code **)(ptr + input * 4), functionPtr == (code *)0x0)) {\n    returnValue = thunk_initialize_return_value_00080efe(Elf32_Rel_ARRAY_20070000[140].r_offset);\n    DAT_20071244 = 0;\n    ptr = FUNC_00080efc(returnValue,input,input,0,constant1,var1,var2,var3);\n    if ((ptr == -1) && (DAT_20071244 != 0)) {\n      *(int *)offset = DAT_20071244;\n      return -1;\n    }\n    return ptr;\n  }\n  if (functionPtr == (code *)0x1) {\n    return 0;\n  }\n  if (functionPtr != (code *)0xffffffff) {\n    *(undefined4 *)(ptr + input * 4) = 0;\n    (*functionPtr)(input);\n    return 0;\n  }\n  *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000841e4": "process_data_000841e4",
                "param_1": "input",
                "dVar1": "offset",
                "uVar2": "returnValue",
                "iVar3": "ptr",
                "pcVar4": "functionPtr",
                "unaff_r4": "var1",
                "unaff_r5": "var2",
                "in_lr": "var3",
                "uVar5": "constant1"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "thunk_FUN_00080efe",
                "FUN_00080efc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00080efe": {
            "entrypoint": "0x0008421c",
            "current_name": "get_error_code_thunk_00080efe",
            "code": "\nundefined4 get_error_code_thunk_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "thunk_FUN_00080efe": "get_error_code_thunk_00080efe"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [
                "FUN_00080efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084220": {
            "entrypoint": "0x00084220",
            "current_name": "update_value_and_check_00084220",
            "code": "\nvoid updateValueAndCheck_00084220(undefined4 value,int data)\n\n{\n  int returnValue;\n  \n  returnValue = check_and_assign_value_00084508(value,(int)*(short *)(data + 0xe));\n  if (-1 < returnValue) {\n    *(int *)(data + 0x50) = *(int *)(data + 0x50) + returnValue;\n    return;\n  }\n  *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) & 0xefff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084220": "update_value_and_check_00084220",
                "param_1": "value",
                "param_2": "data",
                "iVar1": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_00084508"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084244": {
            "entrypoint": "0x00084244",
            "current_name": "process_data_00084244",
            "code": "\nvoid processData_00084244(int *outputArray,int inputArray,undefined4 paramA,undefined4 paramB)\n\n{\n  int result;\n  ushort inputValue;\n  undefined4 unusedVar1;\n  undefined4 unusedVar2;\n  undefined4 unusedVar3;\n  undefined4 unusedVar4;\n  \n  inputValue = *(ushort *)(inputArray + 0xc);\n  if ((int)((uint)inputValue << 0x17) < 0) {\n    initialize_and_check_program_000844e0(outputArray,(int)*(short *)(inputArray + 0xe),0,2);\n    inputValue = *(ushort *)(inputArray + 0xc);\n  }\n  *(ushort *)(inputArray + 0xc) = inputValue & 0xefff;\n  DAT_20071244 = 0;\n  result = process_bytes_00080ec8((int)*(short *)(inputArray + 0xe),paramA,paramB,paramB,unusedVar1,unusedVar2,\n                       unusedVar3,unusedVar4);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *outputArray = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084244": "process_data_00084244",
                "param_1": "outputArray",
                "param_2": "inputArray",
                "param_3": "paramA",
                "param_4": "paramB",
                "uVar2": "inputValue",
                "unaff_r4": "unusedVar1",
                "unaff_r5": "unusedVar2",
                "unaff_r6": "unusedVar3",
                "in_lr": "unusedVar4",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_00080ec8",
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008427c": {
            "entrypoint": "0x0008427c",
            "current_name": "initialize_and_check_0008427c",
            "code": "\nvoid initializeAndCheck_0008427c(undefined4 arg1,int arg2)\n\n{\n  int result;\n  ushort flag;\n  \n  result = initialize_and_check_program_000844e0(arg1,(int)*(short *)(arg2 + 0xe));\n  if (result == -1) {\n    flag = *(ushort *)(arg2 + 0xc) & 0xefff;\n  }\n  else {\n    flag = *(ushort *)(arg2 + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(arg2 + 0x50) = result;\n  }\n  *(ushort *)(arg2 + 0xc) = flag;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008427c": "initialize_and_check_0008427c",
                "param_1": "arg1",
                "param_2": "arg2",
                "iVar1": "result",
                "uVar2": "flag"
            },
            "calling": [],
            "called": [
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_and_update_data_000842a4",
            "code": "\nuint process_and_update_data_000842a4(int data_structure,uint input_value,undefined4 *function_params,undefined4 extra_param)\n\n{\n  ushort ushort_value;\n  uint uint_value;\n  undefined *byte_ptr;\n  int index_or_counter;\n  \n  if ((data_structure != 0) && (*(int *)(data_structure + 0x38) == 0)) {\n    initialize_data_structures_00083888();\n  }\n  ushort_value = *(ushort *)(function_params + 3);\n  uint_value = (uint)ushort_value;\n  function_params[2] = function_params[6];\n  if ((-1 < (int)(uint_value << 0x1c)) || (index_or_counter = function_params[4], index_or_counter == 0)) {\n    index_or_counter = process_function_0008356c(data_structure,function_params,ushort_value,uint_value,extra_param);\n    if (index_or_counter != 0) {\n      return 0xffffffff;\n    }\n    ushort_value = *(ushort *)(function_params + 3);\n    index_or_counter = function_params[4];\n    uint_value = (uint)ushort_value;\n  }\n  input_value = input_value & 0xff;\n  if ((int)(uint_value << 0x12) < 0) {\n    byte_ptr = (undefined *)*function_params;\n    index_or_counter = (int)byte_ptr - index_or_counter;\n    if (index_or_counter < (int)function_params[5]) {\nLAB_000842d6:\n      index_or_counter = index_or_counter + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    function_params[0x19] = function_params[0x19] & 0xffffdfff;\n    byte_ptr = (undefined *)*function_params;\n    *(ushort *)(function_params + 3) = ushort_value | 0x2000;\n    index_or_counter = (int)byte_ptr - index_or_counter;\n    if (index_or_counter < (int)function_params[5]) goto LAB_000842d6;\n  }\n  index_or_counter = process_data_00083850(data_structure,function_params);\n  if (index_or_counter != 0) {\n    return 0xffffffff;\n  }\n  byte_ptr = (undefined *)*function_params;\n  index_or_counter = 1;\nLAB_000842d8:\n  function_params[2] = function_params[2] + -1;\n  *function_params = byte_ptr + 1;\n  *byte_ptr = (char)input_value;\n  if (((function_params[5] == index_or_counter) ||\n      (((int)((uint)*(ushort *)(function_params + 3) << 0x1f) < 0 && (input_value == 10)))) &&\n     (index_or_counter = process_data_00083850(data_structure,function_params), index_or_counter != 0)) {\n    return 0xffffffff;\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_and_update_data_000842a4",
                "param_1": "data_structure",
                "param_2": "input_value",
                "param_3": "function_params",
                "param_4": "extra_param",
                "uVar1": "ushort_value",
                "uVar2": "uint_value",
                "puVar3": "byte_ptr",
                "iVar4": "index_or_counter"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_00083888",
                "FUN_00083850",
                "FUN_0008356c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008434c": {
            "entrypoint": "0x0008434c",
            "current_name": "execute_operation_0008434c",
            "code": "\nvoid executeOperation_0008434c(undefined4 *result,int inputSize,undefined4 constant,undefined4 *output)\n\n{\n  dword relocationInfo;\n  undefined4 initialValue;\n  int resultStatus;\n  undefined temporaryBuffer [12];\n  \n  relocationInfo = Elf32_Rel_ARRAY_20070000[275].r_info;\n  if (inputSize == 0) {\n    initialValue = get_initial_value_00084004();\n    resultStatus = (*(code *)relocationInfo)(result,temporaryBuffer,0,initialValue,output);\n  }\n  else {\n    initialValue = get_initial_value_00084004();\n    resultStatus = (*(code *)relocationInfo)(result,inputSize,constant,initialValue,output);\n  }\n  if (resultStatus == -1) {\n    *output = 0;\n    *result = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008434c": "execute_operation_0008434c",
                "param_1": "result",
                "param_2": "inputSize",
                "param_3": "constant",
                "param_4": "output",
                "dVar1": "relocationInfo",
                "uVar2": "initialValue",
                "iVar3": "resultStatus",
                "auStack_24": "temporaryBuffer"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_0008439c",
                "FUN_00084004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008439c": {
            "entrypoint": "0x0008439c",
            "current_name": "write_byte_to_memory_0008439c",
            "code": "\nundefined4 write_byte_to_memory_0008439c(undefined4 *target_memory,undefined *destination,uint byte_value)\n\n{\n  if (destination == (undefined *)0x0) {\n    return 0;\n  }\n  if (byte_value < 0x100) {\n    *destination = (char)byte_value;\n    return 1;\n  }\n  *target_memory = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0008439c": "write_byte_to_memory_0008439c",
                "param_1": "target_memory",
                "param_2": "destination",
                "param_3": "byte_value"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084484": {
            "entrypoint": "0x00084484",
            "current_name": "process_and_initialize_00084484",
            "code": "\nundefined4 process_and_initialize_00084484(int value)\n\n{\n  dword r_offset;\n  undefined4 result;\n  int returnValue;\n  \n  r_offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (value != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      initialize_data_structures_00083888();\n    }\n    if (*(short *)(value + 0xc) != 0) {\n      result = process_data_00083850(r_offset,value);\n      if ((*(code **)(value + 0x2c) != (code *)0x0) &&\n         (returnValue = (**(code **)(value + 0x2c))(r_offset,*(undefined4 *)(value + 0x1c)), returnValue < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(value + 0xc) << 0x18) < 0) {\n        process_relocations_00083b10(r_offset,*(undefined4 *)(value + 0x10));\n      }\n      if (*(int *)(value + 0x30) != 0) {\n        if (*(int *)(value + 0x30) != value + 0x40) {\n          process_relocations_00083b10(r_offset);\n        }\n        *(undefined4 *)(value + 0x30) = 0;\n      }\n      if (*(int *)(value + 0x44) != 0) {\n        process_relocations_00083b10(r_offset);\n        *(undefined4 *)(value + 0x44) = 0;\n      }\n      FUNC_0008397c();\n      *(undefined2 *)(value + 0xc) = 0;\n      FUNC_00083980();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00084484": "process_and_initialize_00084484",
                "param_1": "value",
                "dVar1": "r_offset",
                "uVar2": "result",
                "iVar3": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_0008397c",
                "FUN_00083888",
                "FUN_00083850",
                "FUN_00083b10",
                "FUN_00083980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084494": {
            "entrypoint": "0x00084494",
            "current_name": "initialize_and_check_memory_00084494",
            "code": "\nvoid initializeAndCheckMemory_00084494(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int initResult;\n  \n  DAT_20071244 = 0;\n  initResult = initialize_memory_00080eb0(arg1,arg2,arg2,0,arg3);\n  if ((initResult == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084494": "initialize_and_check_memory_00084494",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "initResult"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eb0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844bc": {
            "entrypoint": "0x000844bc",
            "current_name": "perform_initialization_000844bc",
            "code": "\nvoid performInitialization_000844bc(int *result,undefined4 input)\n\n{\n  int initStatus;\n  \n  DAT_20071244 = 0;\n  initStatus = initialize_00080eba(input);\n  if ((initStatus == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844bc": "perform_initialization_000844bc",
                "param_1": "result",
                "param_2": "input",
                "iVar1": "initStatus"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844e0": {
            "entrypoint": "0x000844e0",
            "current_name": "initialize_and_check_program_000844e0",
            "code": "\nvoid initializeAndCheckProgram_000844e0(int *outputValue,undefined4 inputValue1,undefined4 inputValue2,undefined4 inputValue3)\n\n{\n  int programStatus;\n  \n  DAT_20071244 = 0;\n  programStatus = initialize_program_00080ebe(inputValue1,inputValue2,inputValue3);\n  if ((programStatus == -1) && (DAT_20071244 != 0)) {\n    *outputValue = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844e0": "initialize_and_check_program_000844e0",
                "param_1": "outputValue",
                "param_2": "inputValue1",
                "param_3": "inputValue2",
                "param_4": "inputValue3",
                "iVar1": "programStatus"
            },
            "calling": [
                "FUN_0008427c",
                "FUN_00084244"
            ],
            "called": [
                "FUN_00080ebe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084508": {
            "entrypoint": "0x00084508",
            "current_name": "check_and_assign_value_00084508",
            "code": "\nvoid check_and_assign_value_00084508(int *output_value,undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = get_zero_00080ec2(input_param_1,input_param_2,input_param_3);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *output_value = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084508": "check_and_assign_value_00084508",
                "param_1": "output_value",
                "param_2": "input_param_1",
                "param_3": "input_param_2",
                "param_4": "input_param_3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00084220"
            ],
            "called": [
                "FUN_00080ec2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084530": {
            "entrypoint": "0x00084530",
            "current_name": "process_params_00084530",
            "code": "\nint processParams_00084530(int input1,int input2,int param3,int param4)\n\n{\n  int result;\n  \n  if ((param4 == 0) && (param3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input1 = -1;\n    }\n    return input1;\n  }\n  result = subtract_and_store_0008458c();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084530": "process_params_00084530",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_0008458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008455c": {
            "entrypoint": "0x0008455c",
            "current_name": "subtract_and_store_0008455c",
            "code": "\nvoid subtractAndStore_0008455c(uint originalValue,int intValue,undefined4 firstPart,undefined4 secondPart,int *resultArray)\n\n{\n  uint result;\n  longlong product;\n  \n  product = division_with_overflow_check_000845c0();\n  product = product * CONCAT44(secondPart,firstPart);\n  result = (uint)product;\n  *resultArray = originalValue - result;\n  resultArray[1] = (intValue - (int)((ulonglong)product >> 0x20)) - (uint)(originalValue < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008455c": "subtract_and_store_0008455c",
                "param_1": "originalValue",
                "param_2": "intValue",
                "param_3": "firstPart",
                "param_4": "secondPart",
                "param_5": "resultArray",
                "uVar1": "result",
                "lVar2": "product"
            },
            "calling": [],
            "called": [
                "FUN_000845c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008458c": {
            "entrypoint": "0x0008458c",
            "current_name": "subtract_and_store_0008458c",
            "code": "\nvoid subtract_and_store_0008458c(uint input_value,int second_param,undefined4 concat_param_low,undefined4 concat_param_high,int *result_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = division_with_remainder_00084860();\n  product = product * CONCAT44(concat_param_high,concat_param_low);\n  result = (uint)product;\n  *result_array = input_value - result;\n  result_array[1] = (second_param - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008458c": "subtract_and_store_0008458c",
                "param_1": "input_value",
                "param_2": "second_param",
                "param_3": "concat_param_low",
                "param_4": "concat_param_high",
                "param_5": "result_array",
                "uVar1": "result",
                "lVar2": "product"
            },
            "calling": [
                "FUN_00084530"
            ],
            "called": [
                "FUN_00084860"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845c0": {
            "entrypoint": "0x000845c0",
            "current_name": "division_with_overflow_check_000845c0",
            "code": "\nundefined8 division_with_overflow_check_000845c0(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong mul_result;\n  uint numerator;\n  uint multiple1;\n  uint multiple2;\n  uint partial_quotient;\n  int shift_amount;\n  uint temp1;\n  uint temp2;\n  uint is_negative1;\n  uint dividend_part1;\n  uint dividend_part2;\n  uint quotient_part2;\n  bool has_overflow;\n  \n  if ((int)divisor < 0) {\n    has_overflow = dividend != 0;\n    dividend = -dividend;\n    divisor = -divisor - (uint)has_overflow;\n    is_negative1 = 0xffffffff;\n  }\n  else {\n    is_negative1 = 0;\n  }\n  if ((int)remainder < 0) {\n    is_negative1 = ~is_negative1;\n    has_overflow = quotient != 0;\n    quotient = -quotient;\n    remainder = -remainder - (uint)has_overflow;\n  }\n  if (remainder == 0) {\n    if (divisor < quotient) {\n      shift_amount = LZCOUNT(quotient);\n      if (shift_amount != 0) {\n        multiple1 = dividend >> (0x20U - shift_amount & 0xff);\n        quotient = quotient << shift_amount;\n        dividend = dividend << shift_amount;\n        divisor = divisor << shift_amount | multiple1;\n      }\n      numerator = quotient >> 0x10;\n      multiple2 = divisor / numerator;\n      temp1 = (quotient & 0xffff) * multiple2;\n      dividend_part1 = dividend >> 0x10 | (divisor - numerator * multiple2) * 0x10000;\n      multiple1 = multiple2;\n      if (dividend_part1 <= temp1 && temp1 - dividend_part1 != 0) {\n        has_overflow = CARRY4(dividend_part1,quotient);\n        dividend_part1 = dividend_part1 + quotient;\n        multiple1 = multiple2 - 1;\n        if ((has_overflow == false) && (dividend_part1 <= temp1 && temp1 - dividend_part1 != 0)) {\n          multiple1 = multiple2 - 2;\n          dividend_part1 = dividend_part1 + quotient;\n        }\n      }\n      temp2 = (dividend_part1 - temp1) / numerator;\n      multiple2 = (quotient & 0xffff) * temp2;\n      temp1 = dividend & 0xffff | ((dividend_part1 - temp1) - numerator * temp2) * 0x10000;\n      numerator = temp2;\n      if (temp1 <= multiple2 && multiple2 - temp1 != 0) {\n        numerator = temp2 - 1;\n        if ((CARRY4(temp1,quotient) == false) &&\n           (temp1 + quotient <= multiple2 && multiple2 - (temp1 + quotient) != 0)) {\n          numerator = temp2 - 2;\n        }\n      }\n      numerator = numerator | multiple1 << 0x10;\n      multiple1 = 0;\n    }\n    else {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shift_amount = LZCOUNT(quotient);\n      if (shift_amount == 0) {\n        divisor = divisor - quotient;\n        multiple2 = quotient >> 0x10;\n        quotient_part2 = quotient & 0xffff;\n        multiple1 = 1;\n      }\n      else {\n        quotient = quotient << shift_amount;\n        multiple1 = divisor >> (0x20U - shift_amount & 0xff);\n        multiple2 = quotient >> 0x10;\n        dividend_part1 = multiple1 / multiple2;\n        quotient_part2 = quotient & 0xffff;\n        temp1 = quotient_part2 * dividend_part1;\n        temp2 = dividend >> (0x20U - shift_amount & 0xff) | divisor << shift_amount;\n        multiple1 = temp2 >> 0x10 | (multiple1 - multiple2 * dividend_part1) * 0x10000;\n        dividend = dividend << shift_amount;\n        numerator = dividend_part1;\n        if (multiple1 <= temp1 && temp1 - multiple1 != 0) {\n          has_overflow = CARRY4(multiple1,quotient);\n          multiple1 = multiple1 + quotient;\n          numerator = dividend_part1 - 1;\n          if ((has_overflow == false) && (multiple1 <= temp1 && temp1 - multiple1 != 0)) {\n            numerator = dividend_part1 - 2;\n            multiple1 = multiple1 + quotient;\n          }\n        }\n        partial_quotient = (multiple1 - temp1) / multiple2;\n        dividend_part1 = quotient_part2 * partial_quotient;\n        divisor = temp2 & 0xffff | ((multiple1 - temp1) - multiple2 * partial_quotient) * 0x10000;\n        multiple1 = partial_quotient;\n        if (divisor <= dividend_part1 && dividend_part1 - divisor != 0) {\n          has_overflow = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          multiple1 = partial_quotient - 1;\n          if ((has_overflow == false) && (divisor <= dividend_part1 && dividend_part1 - divisor != 0)) {\n            multiple1 = partial_quotient - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - dividend_part1;\n        multiple1 = multiple1 | numerator << 0x10;\n      }\n      numerator = divisor / multiple2;\n      dividend_part1 = quotient_part2 * numerator;\n      temp2 = dividend >> 0x10 | (divisor - multiple2 * numerator) * 0x10000;\n      temp1 = numerator;\n      if (temp2 <= dividend_part1 && dividend_part1 - temp2 != 0) {\n        has_overflow = CARRY4(temp2,quotient);\n        temp2 = temp2 + quotient;\n        temp1 = numerator - 1;\n        if ((has_overflow == false) && (temp2 <= dividend_part1 && dividend_part1 - temp2 != 0)) {\n          temp1 = numerator - 2;\n          temp2 = temp2 + quotient;\n        }\n      }\n      partial_quotient = (temp2 - dividend_part1) / multiple2;\n      quotient_part2 = quotient_part2 * partial_quotient;\n      multiple2 = dividend & 0xffff | ((temp2 - dividend_part1) - multiple2 * partial_quotient) * 0x10000;\n      numerator = partial_quotient;\n      if (multiple2 <= quotient_part2 && quotient_part2 - multiple2 != 0) {\n        numerator = partial_quotient - 1;\n        if ((CARRY4(multiple2,quotient) == false) &&\n           (multiple2 + quotient <= quotient_part2 && quotient_part2 - (multiple2 + quotient) != 0)) {\n          numerator = partial_quotient - 2;\n        }\n      }\n      numerator = numerator | temp1 << 0x10;\n    }\n  }\n  else if (divisor < remainder) {\n    multiple1 = 0;\n    numerator = 0;\n  }\n  else {\n    shift_amount = LZCOUNT(remainder);\n    if (shift_amount == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        multiple1 = 0;\n        numerator = 1;\n      }\n      else {\n        numerator = 0;\n        multiple1 = 0;\n      }\n    }\n    else {\n      multiple1 = 0x20 - shift_amount;\n      multiple2 = divisor >> (multiple1 & 0xff);\n      quotient_part2 = quotient >> (multiple1 & 0xff) | remainder << shift_amount;\n      dividend_part1 = quotient_part2 >> 0x10;\n      numerator = multiple2 / dividend_part1;\n      temp2 = (quotient_part2 & 0xffff) * numerator;\n      temp1 = divisor << shift_amount | dividend >> (multiple1 & 0xff);\n      multiple2 = temp1 >> 0x10 | (multiple2 - dividend_part1 * numerator) * 0x10000;\n      multiple1 = numerator;\n      if (multiple2 <= temp2 && temp2 - multiple2 != 0) {\n        has_overflow = CARRY4(multiple2,quotient_part2);\n        multiple2 = multiple2 + quotient_part2;\n        multiple1 = numerator - 1;\n        if ((has_overflow == false) && (multiple2 <= temp2 && temp2 - multiple2 != 0)) {\n          multiple1 = numerator - 2;\n          multiple2 = multiple2 + quotient_part2;\n        }\n      }\n      partial_quotient = (multiple2 - temp2) / dividend_part1;\n      dividend_part2 = (quotient_part2 & 0xffff) * partial_quotient;\n      multiple2 = temp1 & 0xffff | ((multiple2 - temp2) - dividend_part1 * partial_quotient) * 0x10000;\n      numerator = partial_quotient;\n      if (multiple2 <= dividend_part2 && dividend_part2 - multiple2 != 0) {\n        has_overflow = CARRY4(multiple2,quotient_part2);\n        multiple2 = multiple2 + quotient_part2;\n        numerator = partial_quotient - 1;\n        if ((has_overflow == false) && (multiple2 <= dividend_part2 && dividend_part2 - multiple2 != 0)) {\n          numerator = partial_quotient - 2;\n          multiple2 = multiple2 + quotient_part2;\n        }\n      }\n      numerator = numerator | multiple1 << 0x10;\n      mul_result = (ulonglong)numerator * (ulonglong)(quotient << shift_amount);\n      temp1 = (uint)((ulonglong)mul_result >> 0x20);\n      multiple1 = 0;\n      if ((multiple2 - dividend_part2 < temp1) ||\n         ((multiple2 - dividend_part2 == temp1 && (dividend << shift_amount < (uint)mul_result)))) {\n        numerator = numerator - 1;\n        multiple1 = 0;\n      }\n    }\n  }\n  if (is_negative1 != 0) {\n    has_overflow = numerator != 0;\n    numerator = -numerator;\n    multiple1 = -multiple1 - (uint)has_overflow;\n  }\n  return CONCAT44(multiple1,numerator);\n}\n\n",
            "renaming": {
                "FUN_000845c0": "division_with_overflow_check_000845c0",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "mul_result",
                "uVar2": "numerator",
                "uVar3": "multiple1",
                "uVar4": "multiple2",
                "uVar5": "partial_quotient",
                "iVar6": "shift_amount",
                "uVar7": "temp1",
                "uVar8": "temp2",
                "uVar9": "is_negative1",
                "uVar10": "dividend_part1",
                "uVar11": "dividend_part2",
                "uVar12": "quotient_part2",
                "bVar13": "has_overflow"
            },
            "calling": [
                "FUN_0008455c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084860": {
            "entrypoint": "0x00084860",
            "current_name": "division_with_remainder_00084860",
            "code": "\nulonglong division_with_remainder_00084860(uint dividend,uint dividend_upper,uint divisor,uint divisor_upper)\n\n{\n  longlong quotient;\n  uint result;\n  uint quotient1;\n  uint remainder1;\n  uint quotient2;\n  uint remainder2;\n  uint quotient3;\n  uint remainder3;\n  uint quotient4;\n  int shift_amount;\n  bool carry_flag;\n  \n  if (divisor_upper == 0) {\n    if (divisor <= dividend_upper) {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount == 0) {\n        dividend_upper = dividend_upper - divisor;\n        quotient1 = divisor >> 0x10;\n        quotient2 = divisor & 0xffff;\n        result = 1;\n      }\n      else {\n        divisor = divisor << shift_amount;\n        remainder3 = dividend_upper >> (0x20U - shift_amount & 0xff);\n        quotient1 = divisor >> 0x10;\n        quotient4 = remainder3 / quotient1;\n        quotient2 = divisor & 0xffff;\n        result = quotient2 * quotient4;\n        remainder2 = dividend >> (0x20U - shift_amount & 0xff) | dividend_upper << shift_amount;\n        remainder1 = remainder2 >> 0x10 | (remainder3 - quotient1 * quotient4) * 0x10000;\n        dividend = dividend << shift_amount;\n        remainder3 = quotient4;\n        if (remainder1 <= result && result - remainder1 != 0) {\n          carry_flag = CARRY4(remainder1,divisor);\n          remainder1 = remainder1 + divisor;\n          remainder3 = quotient4 - 1;\n          if ((carry_flag == false) && (remainder1 <= result && result - remainder1 != 0)) {\n            remainder3 = quotient4 - 2;\n            remainder1 = remainder1 + divisor;\n          }\n        }\n        quotient3 = (remainder1 - result) / quotient1;\n        quotient4 = quotient2 * quotient3;\n        dividend_upper = remainder2 & 0xffff | ((remainder1 - result) - quotient1 * quotient3) * 0x10000;\n        result = quotient3;\n        if (dividend_upper <= quotient4 && quotient4 - dividend_upper != 0) {\n          carry_flag = CARRY4(dividend_upper,divisor);\n          dividend_upper = dividend_upper + divisor;\n          result = quotient3 - 1;\n          if ((carry_flag == false) && (dividend_upper <= quotient4 && quotient4 - dividend_upper != 0)) {\n            result = quotient3 - 2;\n            dividend_upper = dividend_upper + divisor;\n          }\n        }\n        dividend_upper = dividend_upper - quotient4;\n        result = result | remainder3 << 0x10;\n      }\n      quotient4 = dividend_upper / quotient1;\n      remainder1 = quotient2 * quotient4;\n      remainder2 = dividend >> 0x10 | (dividend_upper - quotient1 * quotient4) * 0x10000;\n      remainder3 = quotient4;\n      if (remainder2 <= remainder1 && remainder1 - remainder2 != 0) {\n        carry_flag = CARRY4(remainder2,divisor);\n        remainder2 = remainder2 + divisor;\n        remainder3 = quotient4 - 1;\n        if ((carry_flag == false) && (remainder2 <= remainder1 && remainder1 - remainder2 != 0)) {\n          remainder3 = quotient4 - 2;\n          remainder2 = remainder2 + divisor;\n        }\n      }\n      quotient4 = (remainder2 - remainder1) / quotient1;\n      quotient2 = quotient2 * quotient4;\n      remainder2 = dividend & 0xffff | ((remainder2 - remainder1) - quotient1 * quotient4) * 0x10000;\n      quotient1 = quotient4;\n      if (remainder2 <= quotient2 && quotient2 - remainder2 != 0) {\n        quotient1 = quotient4 - 1;\n        if ((CARRY4(remainder2,divisor) == false) &&\n           (remainder2 + divisor <= quotient2 && quotient2 - (remainder2 + divisor) != 0)) {\n          quotient1 = quotient4 - 2;\n        }\n      }\n      return CONCAT44(result,quotient1 | remainder3 << 0x10);\n    }\n    shift_amount = LZCOUNT(divisor);\n    if (shift_amount != 0) {\n      remainder3 = dividend >> (0x20U - shift_amount & 0xff);\n      divisor = divisor << shift_amount;\n      dividend = dividend << shift_amount;\n      dividend_upper = remainder3 | dividend_upper << shift_amount;\n    }\n    result = divisor >> 0x10;\n    quotient1 = dividend_upper / result;\n    quotient2 = (divisor & 0xffff) * quotient1;\n    quotient4 = dividend >> 0x10 | (dividend_upper - result * quotient1) * 0x10000;\n    remainder3 = quotient1;\n    if (quotient4 <= quotient2 && quotient2 - quotient4 != 0) {\n      carry_flag = CARRY4(quotient4,divisor);\n      quotient4 = quotient4 + divisor;\n      remainder3 = quotient1 - 1;\n      if ((carry_flag == false) && (quotient4 <= quotient2 && quotient2 - quotient4 != 0)) {\n        remainder3 = quotient1 - 2;\n        quotient4 = quotient4 + divisor;\n      }\n    }\n    remainder2 = (quotient4 - quotient2) / result;\n    quotient1 = (divisor & 0xffff) * remainder2;\n    quotient2 = dividend & 0xffff | ((quotient4 - quotient2) - result * remainder2) * 0x10000;\n    result = remainder2;\n    if (quotient2 <= quotient1 && quotient1 - quotient2 != 0) {\n      result = remainder2 - 1;\n      if ((CARRY4(quotient2,divisor) == false) &&\n         (quotient2 + divisor <= quotient1 && quotient1 - (quotient2 + divisor) != 0)) {\n        result = remainder2 - 2;\n      }\n    }\n    result = result | remainder3 << 0x10;\n  }\n  else {\n    if (dividend_upper < divisor_upper) {\n      return 0;\n    }\n    shift_amount = LZCOUNT(divisor_upper);\n    if (shift_amount == 0) {\n      if ((divisor_upper < dividend_upper) || (divisor <= dividend)) {\n        return 1;\n      }\n      result = 0;\n    }\n    else {\n      result = 0x20 - shift_amount;\n      remainder3 = dividend_upper >> (result & 0xff);\n      quotient1 = divisor_upper << shift_amount | divisor >> (result & 0xff);\n      quotient2 = quotient1 >> 0x10;\n      remainder1 = remainder3 / quotient2;\n      quotient4 = (quotient1 & 0xffff) * remainder1;\n      remainder2 = dividend >> (result & 0xff) | dividend_upper << shift_amount;\n      result = remainder2 >> 0x10 | (remainder3 - quotient2 * remainder1) * 0x10000;\n      remainder3 = remainder1;\n      if (result <= quotient4 && quotient4 - result != 0) {\n        carry_flag = CARRY4(result,quotient1);\n        result = result + quotient1;\n        remainder3 = remainder1 - 1;\n        if ((carry_flag == false) && (result <= quotient4 && quotient4 - result != 0)) {\n          remainder3 = remainder1 - 2;\n          result = result + quotient1;\n        }\n      }\n      remainder1 = (result - quotient4) / quotient2;\n      quotient3 = (quotient1 & 0xffff) * remainder1;\n      quotient2 = remainder2 & 0xffff | ((result - quotient4) - quotient2 * remainder1) * 0x10000;\n      result = remainder1;\n      if (quotient2 <= quotient3 && quotient3 - quotient2 != 0) {\n        carry_flag = CARRY4(quotient2,quotient1);\n        quotient2 = quotient2 + quotient1;\n        result = remainder1 - 1;\n        if ((carry_flag == false) && (quotient2 <= quotient3 && quotient3 - quotient2 != 0)) {\n          result = remainder1 - 2;\n          quotient2 = quotient2 + quotient1;\n        }\n      }\n      result = result | remainder3 << 0x10;\n      quotient = (ulonglong)result * (ulonglong)(divisor << shift_amount);\n      remainder3 = (uint)((ulonglong)quotient >> 0x20);\n      if ((quotient2 - quotient3 < remainder3) || ((quotient2 - quotient3 == remainder3 && (dividend << shift_amount < (uint)quotient)))\n         ) {\n        result = result - 1;\n      }\n    }\n  }\n  return (ulonglong)result;\n}\n\n",
            "renaming": {
                "FUN_00084860": "division_with_remainder_00084860",
                "param_1": "dividend",
                "param_2": "dividend_upper",
                "param_3": "divisor",
                "param_4": "divisor_upper",
                "lVar1": "quotient",
                "uVar2": "result",
                "uVar3": "quotient1",
                "uVar4": "remainder1",
                "uVar5": "quotient2",
                "uVar6": "remainder2",
                "uVar7": "quotient3",
                "uVar8": "remainder3",
                "uVar9": "quotient4",
                "iVar10": "shift_amount",
                "bVar11": "carry_flag"
            },
            "calling": [
                "FUN_0008458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085844": {
            "entrypoint": "0x00085844",
            "current_name": "FUNC_00085844",
            "code": "\nvoid FUNC_00085844(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085844": "FUNC_00085844"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 92009,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_000805a8",
            "FUN_000809be",
            "FUN_000809e4",
            "FUN_00080a0a",
            "FUN_00080a94",
            "FUN_00080aa8",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080c98",
            "FUN_00080d30",
            "FUN_00080d3e",
            "FUN_00080d58",
            "FUN_00080d62",
            "FUN_00080d6a",
            "FUN_00080e80",
            "FUN_00080e88",
            "FUN_00080eaa",
            "FUN_00080eb0",
            "FUN_00080eba",
            "FUN_00080ebe",
            "FUN_00080ec2",
            "FUN_00080ec8",
            "FUN_00080efe",
            "thunk_FUN_000816d8",
            "FUN_000810cc",
            "FUN_00081190",
            "FUN_000811ca",
            "FUN_00081248",
            "FUN_00081276",
            "FUN_000812b8",
            "FUN_00081348",
            "FUN_0008145c",
            "FUN_000815de",
            "FUN_00081618",
            "FUN_00081684",
            "FUN_000816d8",
            "FUN_000816ec",
            "FUN_00081778",
            "FUN_00081d48",
            "FUN_00081e34",
            "FUN_00081f00",
            "FUN_00082390",
            "FUN_000825cc",
            "FUN_00082688",
            "FUN_00084004",
            "FUN_0008400c",
            "FUN_000840f8",
            "thunk_FUN_00080efe",
            "FUN_0008439c",
            "FUN_000845c0",
            "FUN_00084860"
        ],
        [
            "FUN_000806f8",
            "FUN_00080970",
            "FUN_00080a30",
            "FUN_000810a6",
            "FUN_000811b0",
            "FUN_000811e8",
            "FUN_000813dc",
            "FUN_00081438",
            "FUN_000815b8",
            "FUN_00081624",
            "FUN_0008236c",
            "FUN_00083888",
            "FUN_000841e4",
            "FUN_0008434c",
            "FUN_00084494",
            "FUN_000844bc",
            "FUN_000844e0",
            "FUN_00084508",
            "FUN_0008455c",
            "FUN_0008458c"
        ],
        [
            "FUN_00080164",
            "FUN_0008089c",
            "FUN_00080f0c",
            "FUN_000810c4",
            "FUN_000810d8",
            "FUN_000810fc",
            "FUN_00083a74",
            "FUN_00084220",
            "FUN_00084244",
            "FUN_0008427c",
            "FUN_00084530"
        ],
        [
            "FUN_00081014",
            "FUN_000810e8",
            "FUN_0008113a",
            "thunk_FUN_0008113a",
            "FUN_00083b10"
        ],
        [
            "FUN_0008044c",
            "FUN_00080774",
            "FUN_0008117a",
            "FUN_00081800",
            "FUN_00081810",
            "FUN_00083850"
        ],
        [
            "FUN_00081472",
            "FUN_00081480",
            "FUN_0008151c",
            "FUN_000817f0",
            "FUN_00081fac",
            "FUN_00084018",
            "FUN_00084484"
        ],
        [
            "FUN_00081560",
            "FUN_00081f9c",
            "FUN_0008356c"
        ],
        [
            "FUN_00081496",
            "FUN_00083ca8",
            "FUN_000842a4"
        ],
        [
            "FUN_000814ae",
            "FUN_000839b4"
        ],
        [
            "FUN_000814d0",
            "FUN_00081570",
            "FUN_00082824"
        ],
        [
            "FUN_000814f6",
            "FUN_0008159e"
        ],
        [
            "FUN_00081214"
        ],
        [
            "FUN_00080250"
        ],
        [
            "FUN_00081750",
            "FUN_000817c8",
            "FUN_000834f0"
        ],
        [
            "FUN_00080eec",
            "FUN_0008289c"
        ],
        [
            "FUN_000836ec"
        ],
        [
            "FUN_000816f8"
        ],
        [
            "FUN_00080b2c"
        ],
        [
            "FUN_000803fc"
        ],
        [
            "FUN_000806a0"
        ],
        [
            "FUN_000801e0"
        ],
        [
            "FUN_000815ec"
        ]
    ],
    "locked_functions": []
}