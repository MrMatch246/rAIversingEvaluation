{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_variable_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeVariable_08000110(undefined4 input)\n\n{\n  if ((char)DAT_200009c8 == '\\0') {\n    DAT_200009c8._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_variable_08000110",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_values_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenateValues_08000134(undefined4 value1,undefined4 value2)\n\n{\n  return CONCAT44(value2,value1);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_values_08000134",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000158": {
            "entrypoint": "0x08000158",
            "current_name": "calculate_xor_08000158",
            "code": "\nulonglong calculate_xor_08000158(uint first_input,uint second_input,uint third_input,uint fourth_input)\n\n{\n  int temp_int_1;\n  byte temp_bool_1;\n  uint temp_uint_1;\n  uint temp_uint_2;\n  uint temp_uint_3;\n  uint temp_uint_4;\n  uint temp_uint_5;\n  int temp_int_2;\n  uint temp_uint_6;\n  uint temp_uint_7;\n  uint temp_uint_8;\n  uint temp_uint_9;\n  bool temp_bool_2;\n  bool temp_bool_3;\n  bool temp_bool_4;\n  \n  temp_uint_4 = fourth_input ^ 0x80000000;\n  temp_uint_6 = second_input << 1;\n  fourth_input = fourth_input << 1;\n  temp_bool_2 = ((second_input ^ temp_uint_4) & 0x7fffffff) == 0;\n  temp_bool_3 = temp_bool_2 && first_input == third_input;\n  if (!temp_bool_2 || first_input != third_input) {\n    temp_bool_3 = (temp_uint_6 | first_input) == 0;\n  }\n  if (!temp_bool_3) {\n    temp_bool_3 = (fourth_input | third_input) == 0;\n  }\n  temp_int_2 = (int)temp_uint_6 >> 0x15;\n  if (!temp_bool_3) {\n    temp_bool_3 = temp_int_2 == -1;\n  }\n  temp_int_1 = (int)fourth_input >> 0x15;\n  if (!temp_bool_3) {\n    temp_bool_3 = temp_int_1 == -1;\n  }\n  if (temp_bool_3) {\n    if (temp_int_2 == -1 || temp_int_1 == -1) {\n      temp_uint_6 = temp_uint_4;\n      temp_uint_8 = third_input;\n      if (temp_int_2 == -1) {\n        temp_uint_6 = second_input;\n        temp_uint_8 = first_input;\n      }\n      if (temp_int_2 != -1 || temp_int_1 != -1) {\n        third_input = temp_uint_8;\n        temp_uint_4 = temp_uint_6;\n      }\n      temp_bool_3 = (temp_uint_8 | temp_uint_6 << 0xc) == 0;\n      if (temp_bool_3) {\n        temp_bool_3 = (third_input | temp_uint_4 << 0xc) == 0;\n      }\n      if (temp_bool_3) {\n        temp_bool_3 = temp_uint_6 == temp_uint_4;\n      }\n      if (!temp_bool_3) {\n        temp_uint_6 = temp_uint_6 | 0x80000;\n      }\n      return CONCAT44(temp_uint_6,temp_uint_8);\n    }\n    if (((second_input ^ temp_uint_4) & 0x7fffffff) != 0 || first_input != third_input) {\n      if ((temp_uint_6 | first_input) == 0) {\n        first_input = third_input;\n        second_input = temp_uint_4;\n      }\n      return CONCAT44(second_input,first_input);\n    }\n    if (second_input != temp_uint_4) {\n      return 0;\n    }\n    if (temp_uint_6 >> 0x15 == 0) {\n      temp_bool_3 = (first_input & 0x80000000) != 0;\n      temp_uint_4 = second_input * 2 + (uint)temp_bool_3;\n      if (CARRY4(second_input,second_input) || CARRY4(second_input * 2,(uint)temp_bool_3)) {\n        temp_uint_4 = temp_uint_4 | 0x80000000;\n      }\n      return CONCAT44(temp_uint_4,first_input << 1);\n    }\n    if (temp_uint_6 < 0xffc00000) {\n      return CONCAT44(second_input + 0x100000,first_input);\n    }\n    second_input = second_input & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(second_input | 0x7ff00000) << 0x20;\n  }\n  temp_uint_6 = temp_uint_6 >> 0x15;\n  fourth_input = fourth_input >> 0x15;\n  temp_uint_8 = fourth_input - temp_uint_6;\n  temp_bool_3 = temp_uint_8 != 0;\n  if (fourth_input < temp_uint_6) {\n    temp_uint_8 = -temp_uint_8;\n  }\n  temp_uint_7 = first_input;\n  temp_uint_5 = second_input;\n  if (temp_bool_3 && temp_uint_6 <= fourth_input) {\n    temp_uint_6 = temp_uint_6 + temp_uint_8;\n    temp_uint_7 = third_input;\n    temp_uint_5 = temp_uint_4;\n    third_input = first_input;\n    temp_uint_4 = second_input;\n  }\n  if (0x36 < temp_uint_8) {\n    return CONCAT44(temp_uint_5,temp_uint_7);\n  }\n  temp_uint_2 = temp_uint_5 & 0xfffff | 0x100000;\n  if ((temp_uint_5 & 0x80000000) != 0) {\n    temp_bool_3 = temp_uint_7 != 0;\n    temp_uint_7 = -temp_uint_7;\n    temp_uint_2 = -temp_uint_2 - (uint)temp_bool_3;\n  }\n  temp_uint_5 = temp_uint_4 & 0xfffff | 0x100000;\n  if ((temp_uint_4 & 0x80000000) != 0) {\n    temp_bool_3 = third_input != 0;\n    third_input = -third_input;\n    temp_uint_5 = -temp_uint_5 - (uint)temp_bool_3;\n  }\n  if (temp_uint_6 == temp_uint_8) {\n    temp_uint_5 = temp_uint_5 ^ 0x100000;\n    if (temp_uint_6 == 0) {\n      temp_uint_2 = temp_uint_2 ^ 0x100000;\n      temp_uint_6 = 1;\n    }\n    else {\n      temp_uint_8 = temp_uint_8 - 1;\n    }\n  }\n  temp_uint_4 = -temp_uint_8 + 0x20;\n  if ((int)temp_uint_8 < 0x21) {\n    temp_uint_9 = third_input << (temp_uint_4 & 0xff);\n    third_input = third_input >> (temp_uint_8 & 0xff);\n    temp_uint_1 = temp_uint_7 + third_input;\n    temp_uint_3 = temp_uint_5 << (temp_uint_4 & 0xff);\n    temp_uint_4 = temp_uint_1 + temp_uint_3;\n    temp_uint_2 = temp_uint_2 + CARRY4(temp_uint_7,third_input) + ((int)temp_uint_5 >> (temp_uint_8 & 0xff)) +\n            (uint)CARRY4(temp_uint_1,temp_uint_3);\n  }\n  else {\n    temp_uint_9 = temp_uint_5 << (-temp_uint_8 + 0x40 & 0xff);\n    if (third_input != 0) {\n      temp_uint_9 = temp_uint_9 | 2;\n    }\n    temp_uint_5 = (int)temp_uint_5 >> (temp_uint_8 - 0x20 & 0xff);\n    temp_uint_4 = temp_uint_7 + temp_uint_5;\n    temp_uint_2 = temp_uint_2 + ((int)temp_uint_5 >> 0x1f) + (uint)CARRY4(temp_uint_7,temp_uint_5);\n  }\n  second_input = temp_uint_2 & 0x80000000;\n  temp_uint_8 = temp_uint_2;\n  if ((int)temp_uint_2 < 0) {\n    temp_bool_3 = temp_uint_9 == 0;\n    temp_uint_9 = -temp_uint_9;\n    temp_uint_8 = -temp_uint_4;\n    temp_uint_4 = -(uint)!temp_bool_3 - temp_uint_4;\n    temp_uint_8 = -(uint)(temp_bool_3 <= temp_uint_8) - temp_uint_2;\n  }\n  if (0xfffff < temp_uint_8) {\n    temp_uint_7 = temp_uint_6 - 1;\n    if (0x1fffff < temp_uint_8) {\n      temp_uint_7 = temp_uint_8 & 1;\n      temp_uint_8 = temp_uint_8 >> 1;\n      temp_bool_1 = (byte)temp_uint_4;\n      temp_uint_4 = (uint)(temp_uint_7 != 0) << 0x1f | temp_uint_4 >> 1;\n      temp_uint_9 = (uint)(temp_bool_1 & 1) << 0x1f | temp_uint_9 >> 1;\n      temp_uint_7 = temp_uint_6;\n      if (0xffbfffff < temp_uint_6 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    temp_bool_3 = 0x7fffffff < temp_uint_9;\n    if (temp_uint_9 == 0x80000000) {\n      temp_bool_3 = (temp_uint_4 & 1) != 0;\n    }\n    return CONCAT44(temp_uint_8 + temp_uint_7 * 0x100000 + (uint)CARRY4(temp_uint_4,(uint)temp_bool_3) | second_input,\n                    temp_uint_4 + temp_bool_3);\n  }\n  temp_bool_2 = (temp_uint_9 & 0x80000000) != 0;\n  temp_uint_9 = temp_uint_9 << 1;\n  temp_uint_7 = temp_uint_4 * 2;\n  temp_bool_3 = CARRY4(temp_uint_4,temp_uint_4);\n  temp_uint_4 = temp_uint_4 * 2 + (uint)temp_bool_2;\n  temp_uint_8 = temp_uint_8 * 2 + (uint)(temp_bool_3 || CARRY4(temp_uint_7,(uint)temp_bool_2));\n  temp_uint_7 = temp_uint_6 - 2;\n  if ((temp_uint_8 & 0x100000) != 0) goto LAB_08000268;\n  temp_uint_5 = temp_uint_4;\n  temp_uint_6 = temp_uint_8;\n  if (temp_uint_8 == 0) {\n    temp_uint_5 = 0;\n    temp_uint_6 = temp_uint_4;\n  }\n  temp_int_2 = LZCOUNT(temp_uint_6);\n  if (temp_uint_8 == 0) {\n    temp_int_2 = temp_int_2 + 0x20;\n  }\n  temp_uint_8 = temp_int_2 - 0xb;\n  temp_bool_4 = SBORROW4(temp_uint_8,0x20);\n  temp_uint_4 = temp_int_2 - 0x2b;\n  temp_bool_3 = (int)temp_uint_4 < 0;\n  temp_bool_2 = temp_uint_4 == 0;\n  if ((int)temp_uint_8 < 0x20) {\n    temp_bool_4 = SCARRY4(temp_uint_4,0xc);\n    temp_int_2 = temp_int_2 + -0x1f;\n    temp_bool_3 = temp_int_2 < 0;\n    temp_bool_2 = temp_int_2 == 0;\n    temp_uint_4 = temp_uint_8;\n    if (!temp_bool_2 && temp_bool_3 == temp_bool_4) {\n      temp_uint_5 = temp_uint_6 << (temp_uint_8 & 0xff);\n      temp_uint_6 = temp_uint_6 >> (0xcU - temp_int_2 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (temp_bool_2 || temp_bool_3 != temp_bool_4) {\n    temp_uint_9 = 0x20 - temp_uint_4;\n  }\n  temp_uint_6 = temp_uint_6 << (temp_uint_4 & 0xff);\n  if (temp_bool_2 || temp_bool_3 != temp_bool_4) {\n    temp_uint_6 = temp_uint_6 | temp_uint_5 >> (temp_uint_9 & 0xff);\n  }\n  if (temp_bool_2 || temp_bool_3 != temp_bool_4) {\n    temp_uint_5 = temp_uint_5 << (temp_uint_4 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)temp_uint_8 <= (int)temp_uint_7) {\n    return CONCAT44(temp_uint_6 + (temp_uint_7 - temp_uint_8) * 0x100000 | second_input,temp_uint_5);\n  }\n  temp_uint_4 = ~(temp_uint_7 - temp_uint_8);\n  if ((int)temp_uint_4 < 0x1f) {\n    temp_int_2 = temp_uint_4 - 0x13;\n    if (temp_int_2 != 0 && temp_int_2 < 0 == SCARRY4(temp_uint_4 - 0x1f,0xc)) {\n      return CONCAT44(temp_uint_2,temp_uint_5 >> (0x20 - (0xcU - temp_int_2) & 0xff) | temp_uint_6 << (0xcU - temp_int_2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp_uint_4 = temp_uint_4 + 1;\n    return CONCAT44(second_input | temp_uint_6 >> (temp_uint_4 & 0xff),\n                    temp_uint_5 >> (temp_uint_4 & 0xff) | temp_uint_6 << (0x20 - temp_uint_4 & 0xff));\n  }\n  return CONCAT44(temp_uint_2,temp_uint_6 >> (temp_uint_4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000158": "calculate_xor_08000158",
                "param_1": "first_input",
                "param_2": "second_input",
                "param_3": "third_input",
                "param_4": "fourth_input",
                "iVar1": "temp_int_1",
                "bVar2": "temp_bool_1",
                "uVar3": "temp_uint_1",
                "uVar4": "temp_uint_2",
                "uVar5": "temp_uint_3",
                "uVar6": "temp_uint_4",
                "uVar7": "temp_uint_5",
                "iVar8": "temp_int_2",
                "uVar9": "temp_uint_6",
                "uVar10": "temp_uint_7",
                "uVar11": "temp_uint_8",
                "uVar12": "temp_uint_9",
                "bVar13": "temp_bool_2",
                "bVar14": "temp_bool_3",
                "bVar15": "temp_bool_4"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005e9c",
                "FUN_08005838",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800015c": {
            "entrypoint": "0x0800015c",
            "current_name": "combine_numbers_0800015c",
            "code": "\nulonglong combineNumbers_0800015c(uint number1,uint number2,uint number3,uint number4)\n\n{\n  int shift1;\n  byte carryFlag;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift2;\n  uint shiftedNumber1;\n  uint shiftedNumber2;\n  uint shiftedNumber3;\n  uint shiftedNumber4;\n  uint unsignedTemp1;\n  uint unsignedTemp2;\n  bool boolean1;\n  bool boolean2;\n  bool boolean3;\n  \n  shiftedNumber1 = number2 << 1;\n  shiftedNumber3 = number4 << 1;\n  boolean1 = ((number2 ^ number4) & 0x7fffffff) == 0;\n  boolean2 = boolean1 && number1 == number3;\n  if (!boolean1 || number1 != number3) {\n    boolean2 = (shiftedNumber1 | number1) == 0;\n  }\n  if (!boolean2) {\n    boolean2 = (shiftedNumber3 | number3) == 0;\n  }\n  shift2 = (int)shiftedNumber1 >> 0x15;\n  if (!boolean2) {\n    boolean2 = shift2 == -1;\n  }\n  shift1 = (int)shiftedNumber3 >> 0x15;\n  if (!boolean2) {\n    boolean2 = shift1 == -1;\n  }\n  if (boolean2) {\n    if (shift2 == -1 || shift1 == -1) {\n      shiftedNumber3 = number4;\n      shiftedNumber1 = number3;\n      if (shift2 == -1) {\n        shiftedNumber3 = number2;\n        shiftedNumber1 = number1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        number3 = shiftedNumber1;\n        number4 = shiftedNumber3;\n      }\n      boolean2 = (shiftedNumber1 | shiftedNumber3 << 0xc) == 0;\n      if (boolean2) {\n        boolean2 = (number3 | number4 << 0xc) == 0;\n      }\n      if (boolean2) {\n        boolean2 = shiftedNumber3 == number4;\n      }\n      if (!boolean2) {\n        shiftedNumber3 = shiftedNumber3 | 0x80000;\n      }\n      return CONCAT44(shiftedNumber3,shiftedNumber1);\n    }\n    if (((number2 ^ number4) & 0x7fffffff) != 0 || number1 != number3) {\n      if ((shiftedNumber1 | number1) == 0) {\n        number1 = number3;\n        number2 = number4;\n      }\n      return CONCAT44(number2,number1);\n    }\n    if (number2 != number4) {\n      return 0;\n    }\n    if (shiftedNumber1 >> 0x15 == 0) {\n      boolean2 = (number1 & 0x80000000) != 0;\n      shiftedNumber3 = number2 * 2 + (uint)boolean2;\n      if (CARRY4(number2,number2) || CARRY4(number2 * 2,(uint)boolean2)) {\n        shiftedNumber3 = shiftedNumber3 | 0x80000000;\n      }\n      return CONCAT44(shiftedNumber3,number1 << 1);\n    }\n    if (shiftedNumber1 < 0xffc00000) {\n      return CONCAT44(number2 + 0x100000,number1);\n    }\n    number2 = number2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(number2 | 0x7ff00000) << 0x20;\n  }\n  shiftedNumber1 = shiftedNumber1 >> 0x15;\n  shiftedNumber3 = shiftedNumber3 >> 0x15;\n  shiftedNumber4 = shiftedNumber3 - shiftedNumber1;\n  boolean2 = shiftedNumber4 != 0;\n  if (shiftedNumber3 < shiftedNumber1) {\n    shiftedNumber4 = -shiftedNumber4;\n  }\n  shiftedNumber2 = number1;\n  temp3 = number2;\n  if (boolean2 && shiftedNumber1 <= shiftedNumber3) {\n    shiftedNumber1 = shiftedNumber1 + shiftedNumber4;\n    shiftedNumber2 = number3;\n    temp3 = number4;\n    number3 = number1;\n    number4 = number2;\n  }\n  if (0x36 < shiftedNumber4) {\n    return CONCAT44(temp3,shiftedNumber2);\n  }\n  shiftedNumber3 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    boolean2 = shiftedNumber2 != 0;\n    shiftedNumber2 = -shiftedNumber2;\n    shiftedNumber3 = -shiftedNumber3 - (uint)boolean2;\n  }\n  temp3 = number4 & 0xfffff | 0x100000;\n  if ((number4 & 0x80000000) != 0) {\n    boolean2 = number3 != 0;\n    number3 = -number3;\n    temp3 = -temp3 - (uint)boolean2;\n  }\n  if (shiftedNumber1 == shiftedNumber4) {\n    temp3 = temp3 ^ 0x100000;\n    if (shiftedNumber1 == 0) {\n      shiftedNumber3 = shiftedNumber3 ^ 0x100000;\n      shiftedNumber1 = 1;\n    }\n    else {\n      shiftedNumber4 = shiftedNumber4 - 1;\n    }\n  }\n  unsignedTemp2 = -shiftedNumber4 + 0x20;\n  if ((int)shiftedNumber4 < 0x21) {\n    unsignedTemp1 = number3 << (unsignedTemp2 & 0xff);\n    number3 = number3 >> (shiftedNumber4 & 0xff);\n    temp1 = shiftedNumber2 + number3;\n    temp2 = temp3 << (unsignedTemp2 & 0xff);\n    unsignedTemp2 = temp1 + temp2;\n    shiftedNumber3 = shiftedNumber3 + CARRY4(shiftedNumber2,number3) + ((int)temp3 >> (shiftedNumber4 & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    unsignedTemp1 = temp3 << (-shiftedNumber4 + 0x40 & 0xff);\n    if (number3 != 0) {\n      unsignedTemp1 = unsignedTemp1 | 2;\n    }\n    temp3 = (int)temp3 >> (shiftedNumber4 - 0x20 & 0xff);\n    unsignedTemp2 = shiftedNumber2 + temp3;\n    shiftedNumber3 = shiftedNumber3 + ((int)temp3 >> 0x1f) + (uint)CARRY4(shiftedNumber2,temp3);\n  }\n  number2 = shiftedNumber3 & 0x80000000;\n  shiftedNumber4 = shiftedNumber3;\n  if ((int)shiftedNumber3 < 0) {\n    boolean2 = unsignedTemp1 == 0;\n    unsignedTemp1 = -unsignedTemp1;\n    shiftedNumber4 = -unsignedTemp2;\n    unsignedTemp2 = -(uint)!boolean2 - unsignedTemp2;\n    shiftedNumber4 = -(uint)(boolean2 <= shiftedNumber4) - shiftedNumber3;\n  }\n  if (0xfffff < shiftedNumber4) {\n    shiftedNumber2 = shiftedNumber1 - 1;\n    if (0x1fffff < shiftedNumber4) {\n      shiftedNumber3 = shiftedNumber4 & 1;\n      shiftedNumber4 = shiftedNumber4 >> 1;\n      carryFlag = (byte)unsignedTemp2;\n      unsignedTemp2 = (uint)(shiftedNumber3 != 0) << 0x1f | unsignedTemp2 >> 1;\n      unsignedTemp1 = (uint)(carryFlag & 1) << 0x1f | unsignedTemp1 >> 1;\n      shiftedNumber2 = shiftedNumber1;\n      if (0xffbfffff < shiftedNumber1 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    boolean2 = 0x7fffffff < unsignedTemp1;\n    if (unsignedTemp1 == 0x80000000) {\n      boolean2 = (unsignedTemp2 & 1) != 0;\n    }\n    return CONCAT44(shiftedNumber4 + shiftedNumber2 * 0x100000 + (uint)CARRY4(unsignedTemp2,(uint)boolean2) | number2,\n                    unsignedTemp2 + boolean2);\n  }\n  boolean1 = (unsignedTemp1 & 0x80000000) != 0;\n  unsignedTemp1 = unsignedTemp1 << 1;\n  shiftedNumber2 = unsignedTemp2 * 2;\n  boolean2 = CARRY4(unsignedTemp2,unsignedTemp2);\n  unsignedTemp2 = unsignedTemp2 * 2 + (uint)boolean1;\n  shiftedNumber4 = shiftedNumber4 * 2 + (uint)(boolean2 || CARRY4(shiftedNumber2,(uint)boolean1));\n  shiftedNumber2 = shiftedNumber1 - 2;\n  if ((shiftedNumber4 & 0x100000) != 0) goto LAB_08000268;\n  temp3 = unsignedTemp2;\n  shiftedNumber1 = shiftedNumber4;\n  if (shiftedNumber4 == 0) {\n    temp3 = 0;\n    shiftedNumber1 = unsignedTemp2;\n  }\n  shift2 = LZCOUNT(shiftedNumber1);\n  if (shiftedNumber4 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  unsignedTemp2 = shift2 - 0xb;\n  boolean3 = SBORROW4(unsignedTemp2,0x20);\n  shiftedNumber4 = shift2 - 0x2b;\n  boolean2 = (int)shiftedNumber4 < 0;\n  boolean1 = shiftedNumber4 == 0;\n  if ((int)unsignedTemp2 < 0x20) {\n    boolean3 = SCARRY4(shiftedNumber4,0xc);\n    shift2 = shift2 + -0x1f;\n    boolean2 = shift2 < 0;\n    boolean1 = shift2 == 0;\n    shiftedNumber4 = unsignedTemp2;\n    if (!boolean1 && boolean2 == boolean3) {\n      temp3 = shiftedNumber1 << (unsignedTemp2 & 0xff);\n      shiftedNumber1 = shiftedNumber1 >> (0xcU - shift2 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (boolean1 || boolean2 != boolean3) {\n    unsignedTemp1 = 0x20 - shiftedNumber4;\n  }\n  shiftedNumber1 = shiftedNumber1 << (shiftedNumber4 & 0xff);\n  if (boolean1 || boolean2 != boolean3) {\n    shiftedNumber1 = shiftedNumber1 | temp3 >> (unsignedTemp1 & 0xff);\n  }\n  if (boolean1 || boolean2 != boolean3) {\n    temp3 = temp3 << (shiftedNumber4 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)unsignedTemp2 <= (int)shiftedNumber2) {\n    return CONCAT44(shiftedNumber1 + (shiftedNumber2 - unsignedTemp2) * 0x100000 | number2,temp3);\n  }\n  shiftedNumber4 = ~(shiftedNumber2 - unsignedTemp2);\n  if ((int)shiftedNumber4 < 0x1f) {\n    shift2 = shiftedNumber4 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(shiftedNumber4 - 0x1f,0xc)) {\n      return CONCAT44(shiftedNumber3,temp3 >> (0x20 - (0xcU - shift2) & 0xff) | shiftedNumber1 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shiftedNumber4 = shiftedNumber4 + 1;\n    return CONCAT44(number2 | shiftedNumber1 >> (shiftedNumber4 & 0xff),\n                    temp3 >> (shiftedNumber4 & 0xff) | shiftedNumber1 << (0x20 - shiftedNumber4 & 0xff));\n  }\n  return CONCAT44(shiftedNumber3,shiftedNumber1 >> (shiftedNumber4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800015c": "combine_numbers_0800015c",
                "param_1": "number1",
                "param_2": "number2",
                "param_3": "number3",
                "param_4": "number4",
                "iVar1": "shift1",
                "bVar2": "carryFlag",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "shift2",
                "uVar7": "shiftedNumber1",
                "uVar8": "shiftedNumber2",
                "uVar9": "shiftedNumber3",
                "uVar10": "shiftedNumber4",
                "uVar11": "unsignedTemp1",
                "uVar12": "unsignedTemp2",
                "bVar13": "boolean1",
                "bVar14": "boolean2",
                "bVar15": "boolean3"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005838",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003d4": {
            "entrypoint": "0x080003d4",
            "current_name": "bit_shift_and_concat_080003d4",
            "code": "\nulonglong bitShiftAndConcat_080003d4(uint input)\n\n{\n  uint upperBits;\n  uint shiftAmount;\n  int lzCountResult;\n  uint lzCountAdjusted;\n  uint remainingBits;\n  bool isNegative;\n  bool isZero;\n  bool overflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  upperBits = 0;\n  lzCountResult = LZCOUNT(input);\n  lzCountAdjusted = lzCountResult + 0x15;\n  overflow = SBORROW4(lzCountAdjusted,0x20);\n  shiftAmount = lzCountResult - 0xb;\n  isNegative = (int)shiftAmount < 0;\n  isZero = shiftAmount == 0;\n  if (lzCountAdjusted < 0x20) {\n    overflow = SCARRY4(shiftAmount,0xc);\n    isNegative = false;\n    isZero = lzCountResult + 1 == 0;\n    shiftAmount = lzCountAdjusted;\n    if (!isZero && overflow == false) {\n      upperBits = input << lzCountAdjusted;\n      input = input >> (0xcU - (lzCountResult + 1) & 0xff);\n      goto endLabel;\n    }\n  }\n  if (isZero || isNegative != overflow) {\n    remainingBits = 0x20 - shiftAmount;\n  }\n  input = input << (shiftAmount & 0xff);\n  if (isZero || isNegative != overflow) {\n    input = input | 0U >> (remainingBits & 0xff);\n  }\n  if (isZero || isNegative != overflow) {\n    upperBits = 0 << (shiftAmount & 0xff);\n  }\nendLabel:\n  if (lzCountAdjusted < 0x433) {\n    return concat64Bits(input + (0x432 - lzCountAdjusted) * 0x100000,upperBits);\n  }\n  shiftAmount = ~(0x432 - lzCountAdjusted);\n  if (0x1e < (int)shiftAmount) {\n    return (ulonglong)(input >> (shiftAmount - 0x1f & 0xff));\n  }\n  lzCountResult = shiftAmount - 0x13;\n  if (lzCountResult == 0 || lzCountResult < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return concat64Bits(input >> (shiftAmount & 0xff),\n                    upperBits >> (shiftAmount & 0xff) | input << (0x20 - shiftAmount & 0xff));\n  }\n  return (ulonglong)(upperBits >> (0x20 - (0xcU - lzCountResult) & 0xff) | input << (0xcU - lzCountResult & 0xff));\n}\n\n",
            "renaming": {
                "FUN_080003d4": "bit_shift_and_concat_080003d4",
                "param_1": "input",
                "uVar1": "upperBits",
                "uVar2": "shiftAmount",
                "iVar3": "lzCountResult",
                "uVar4": "lzCountAdjusted",
                "in_r12": "remainingBits",
                "bVar5": "isNegative",
                "bVar6": "isZero",
                "bVar7": "overflow",
                "LAB_080002e0": "endLabel",
                "CONCAT44": "concat64Bits"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003f4": {
            "entrypoint": "0x080003f4",
            "current_name": "calculate_shifted_value_080003f4",
            "code": "\nulonglong calculate_shifted_value_080003f4(uint value)\n\n{\n  uint shift_amount;\n  uint abs_value;\n  uint leading_zeros;\n  int leading_zeros_with_bottom_11;\n  uint final_shift_amount;\n  uint is_negative;\n  uint remaining_shift_amount;\n  bool is_negative_and_leading_zeros_negative;\n  bool is_leading_zeros_zero;\n  bool is_leading_zeros_negative;\n  \n  if (value == 0) {\n    return 0;\n  }\n  is_negative = value & 0x80000000;\n  abs_value = value;\n  if ((int)is_negative < 0) {\n    abs_value = -value;\n  }\n  shift_amount = 0;\n  leading_zeros_with_bottom_11 = LZCOUNT(abs_value);\n  final_shift_amount = leading_zeros_with_bottom_11 + 0x15;\n  is_leading_zeros_negative = SBORROW4(final_shift_amount,0x20);\n  leading_zeros = leading_zeros_with_bottom_11 - 0xb;\n  is_negative_and_leading_zeros_negative = (int)leading_zeros < 0;\n  is_leading_zeros_zero = leading_zeros == 0;\n  if (final_shift_amount < 0x20) {\n    is_leading_zeros_negative = SCARRY4(leading_zeros,0xc);\n    is_negative_and_leading_zeros_negative = false;\n    is_leading_zeros_zero = leading_zeros_with_bottom_11 + 1 == 0;\n    leading_zeros = final_shift_amount;\n    if (!is_leading_zeros_zero && is_leading_zeros_negative == false) {\n      shift_amount = abs_value << final_shift_amount;\n      abs_value = abs_value >> (0xcU - (leading_zeros_with_bottom_11 + 1) & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_leading_zeros_zero || is_negative_and_leading_zeros_negative != is_leading_zeros_negative) {\n    remaining_shift_amount = 0x20 - leading_zeros;\n  }\n  abs_value = abs_value << (leading_zeros & 0xff);\n  if (is_leading_zeros_zero || is_negative_and_leading_zeros_negative != is_leading_zeros_negative) {\n    abs_value = abs_value | 0U >> (remaining_shift_amount & 0xff);\n  }\n  if (is_leading_zeros_zero || is_negative_and_leading_zeros_negative != is_leading_zeros_negative) {\n    shift_amount = 0 << (leading_zeros & 0xff);\n  }\nLAB_080002e0:\n  if (final_shift_amount < 0x433) {\n    return CONCAT44(abs_value + (0x432 - final_shift_amount) * 0x100000 | is_negative,shift_amount);\n  }\n  leading_zeros = ~(0x432 - final_shift_amount);\n  if (0x1e < (int)leading_zeros) {\n    return CONCAT44(value,abs_value >> (leading_zeros - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros_with_bottom_11 = leading_zeros - 0x13;\n  if (leading_zeros_with_bottom_11 == 0 || leading_zeros_with_bottom_11 < 0 != SCARRY4(leading_zeros - 0x1f,0xc)) {\n    leading_zeros = leading_zeros + 1;\n    return CONCAT44(is_negative | abs_value >> (leading_zeros & 0xff),\n                    shift_amount >> (leading_zeros & 0xff) | abs_value << (0x20 - leading_zeros & 0xff));\n  }\n  return CONCAT44(value,shift_amount >> (0x20 - (0xcU - leading_zeros_with_bottom_11) & 0xff) | abs_value << (0xcU - leading_zeros_with_bottom_11 & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080003f4": "calculate_shifted_value_080003f4",
                "param_1": "value",
                "uVar1": "shift_amount",
                "uVar2": "abs_value",
                "uVar3": "leading_zeros",
                "iVar4": "leading_zeros_with_bottom_11",
                "uVar5": "final_shift_amount",
                "uVar6": "is_negative",
                "bVar7": "is_negative_and_leading_zeros_negative",
                "bVar8": "is_leading_zeros_zero",
                "bVar9": "is_leading_zeros_negative",
                "in_r12": "remaining_shift_amount"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000418": {
            "entrypoint": "0x08000418",
            "current_name": "bitwise_operation_08000418",
            "code": "\nulonglong bitwiseOperation_08000418(uint input,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  uint maskMSB;\n  uint temp;\n  uint result;\n  uint shiftedInput;\n  uint shiftedInput2;\n  int bitCount;\n  uint shiftAmount;\n  uint remainingBits;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  shiftedInput2 = input << 1;\n  condition2 = shiftedInput2 == 0;\n  maskMSB = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shiftedInput = (uint)((int)shiftedInput2 >> 3) >> 1;\n  result = maskMSB | shiftedInput;\n  input = input << 0x1d;\n  if (!condition2) {\n    param4 = shiftedInput2 & 0xff000000;\n    condition2 = param4 == 0;\n  }\n  if (!condition2) {\n    condition2 = param4 == 0xff000000;\n  }\n  if (!condition2) {\n    return CONCAT44(result,input) ^ 0x3800000000000000;\n  }\n  if ((shiftedInput2 & 0xffffff) == 0) {\n    return CONCAT44(result,input);\n  }\n  if (param4 == 0xff000000) {\n    return CONCAT44(result,input) | 0x8000000000000;\n  }\n  temp = input;\n  shiftedInput2 = shiftedInput;\n  if (shiftedInput == 0) {\n    temp = 0;\n    shiftedInput2 = input;\n  }\n  bitCount = LZCOUNT(shiftedInput2);\n  if (shiftedInput == 0) {\n    bitCount = bitCount + 0x20;\n  }\n  shiftAmount = bitCount - 0xb;\n  condition3 = SBORROW4(shiftAmount,0x20);\n  shiftedInput = bitCount - 0x2b;\n  condition2 = (int)shiftedInput < 0;\n  condition1 = shiftedInput == 0;\n  if ((int)shiftAmount < 0x20) {\n    condition3 = SCARRY4(shiftedInput,0xc);\n    bitCount = bitCount + -0x1f;\n    condition2 = bitCount < 0;\n    condition1 = bitCount == 0;\n    shiftedInput = shiftAmount;\n    if (!condition1 && condition2 == condition3) {\n      temp = shiftedInput2 << (shiftAmount & 0xff);\n      shiftedInput2 = shiftedInput2 >> (0xcU - bitCount & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (condition1 || condition2 != condition3) {\n    remainingBits = 0x20 - shiftedInput;\n  }\n  shiftedInput2 = shiftedInput2 << (shiftedInput & 0xff);\n  if (condition1 || condition2 != condition3) {\n    shiftedInput2 = shiftedInput2 | temp >> (remainingBits & 0xff);\n  }\n  if (condition1 || condition2 != condition3) {\n    temp = temp << (shiftedInput & 0xff);\n  }\nLAB_080002e0:\n  if ((int)shiftAmount < 0x381) {\n    return CONCAT44(shiftedInput2 + (0x380 - shiftAmount) * 0x100000 | maskMSB,temp);\n  }\n  shiftedInput = ~(0x380 - shiftAmount);\n  if (0x1e < (int)shiftedInput) {\n    return CONCAT44(result,shiftedInput2 >> (shiftedInput - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  bitCount = shiftedInput - 0x13;\n  if (bitCount == 0 || bitCount < 0 != SCARRY4(shiftedInput - 0x1f,0xc)) {\n    shiftedInput = shiftedInput + 1;\n    return CONCAT44(maskMSB | shiftedInput2 >> (shiftedInput & 0xff),\n                    temp >> (shiftedInput & 0xff) | shiftedInput2 << (0x20 - shiftedInput & 0xff));\n  }\n  return CONCAT44(result,temp >> (0x20 - (0xcU - bitCount) & 0xff) | shiftedInput2 << (0xcU - bitCount & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000418": "bitwise_operation_08000418",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "maskMSB",
                "uVar2": "temp",
                "uVar3": "result",
                "uVar4": "shiftedInput",
                "uVar5": "shiftedInput2",
                "uVar7": "shiftAmount",
                "in_r12": "remainingBits",
                "bVar8": "condition1",
                "bVar9": "condition2",
                "bVar10": "condition3",
                "iVar6": "bitCount"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004c8": {
            "entrypoint": "0x080004c8",
            "current_name": "calculate_improved_result_080004c8",
            "code": "\nulonglong calculateImprovedResult_080004c8(undefined4 inputParam1,uint inputParam2,uint inputParam3,uint inputParam4)\n\n{\n  ulonglong tempVar1;\n  longlong tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  int tempVar5;\n  uint tempVar6;\n  uint tempVar7;\n  uint tempVar8;\n  uint tempVar9;\n  bool tempVar10;\n  bool tempVar11;\n  bool tempVar12;\n  ulonglong tempVar13;\n  \n  tempVar13 = CONCAT44(inputParam2,inputParam1);\n  tempVar8 = 0x7ff;\n  tempVar4 = inputParam2 >> 0x14 & 0x7ff;\n  tempVar10 = tempVar4 == 0;\n  if (!tempVar10) {\n    tempVar7 = inputParam4 >> 0x14 & 0x7ff;\n    tempVar10 = tempVar7 == 0;\n  }\n  if (!tempVar10) {\n    tempVar10 = tempVar4 == 0x7ff;\n  }\n  if (!tempVar10) {\n    tempVar10 = tempVar7 == 0x7ff;\n  }\n  if (tempVar10) {\n    tempVar13 = calculate_bitwise_operations_080006a4();\n  }\n  tempVar3 = (uint)(tempVar13 >> 0x20);\n  tempVar5 = tempVar4 + tempVar7;\n  tempVar4 = tempVar3 ^ inputParam4;\n  tempVar3 = tempVar3 & ~(tempVar8 << 0x15);\n  inputParam4 = inputParam4 & ~(tempVar8 << 0x15);\n  tempVar10 = ((uint)tempVar13 | tempVar3 << 0xc) == 0;\n  if (!tempVar10) {\n    tempVar10 = (inputParam3 | inputParam4 << 0xc) == 0;\n  }\n  tempVar3 = tempVar3 | 0x100000;\n  inputParam4 = inputParam4 | 0x100000;\n  if (tempVar10) {\n    inputParam3 = (uint)tempVar13 | inputParam3;\n    inputParam4 = (tempVar4 & 0x80000000 | tempVar3) ^ inputParam4;\n    tempVar4 = tempVar8 >> 1;\n    tempVar12 = SBORROW4(tempVar5,tempVar4);\n    tempVar6 = tempVar5 - tempVar4;\n    tempVar10 = tempVar6 == 0;\n    tempVar3 = tempVar6;\n    if (!tempVar10 && (int)tempVar4 <= tempVar5) {\n      tempVar12 = SBORROW4(tempVar8,tempVar6);\n      tempVar3 = tempVar8 - tempVar6;\n      tempVar10 = tempVar8 == tempVar6;\n    }\n    if (!tempVar10 && (int)tempVar3 < 0 == tempVar12) {\n      inputParam4 = inputParam4 | tempVar6 * 0x100000;\n    }\n    if (!tempVar10 && (int)tempVar3 < 0 == tempVar12) {\n      return CONCAT44(inputParam4,inputParam3);\n    }\n    inputParam4 = inputParam4 | 0x100000;\n    tempVar8 = 0;\n    tempVar12 = SBORROW4(tempVar6,1);\n    tempVar6 = tempVar6 - 1;\n    tempVar10 = tempVar6 == 0;\n    tempVar4 = tempVar6;\n  }\n  else {\n    tempVar1 = (tempVar13 & 0xffffffff) * (ulonglong)inputParam3;\n    tempVar13 = (tempVar13 & 0xffffffff) * (ulonglong)inputParam4 +\n             (ulonglong)tempVar3 * (ulonglong)inputParam3 + (tempVar1 >> 0x20);\n    tempVar9 = (uint)tempVar13;\n    tempVar2 = (ulonglong)tempVar3 * (ulonglong)inputParam4 + (tempVar13 >> 0x20);\n    tempVar8 = (uint)tempVar2;\n    tempVar3 = (uint)((ulonglong)tempVar2 >> 0x20);\n    if ((int)tempVar1 != 0) {\n      tempVar9 = tempVar9 | 1;\n    }\n    tempVar6 = (tempVar5 + -0x3ff) - (uint)(tempVar3 < 0x200);\n    if (tempVar3 < 0x200) {\n      tempVar10 = (tempVar9 & 0x80000000) != 0;\n      tempVar9 = tempVar9 << 1;\n      tempVar2 = CONCAT44(tempVar3 * 2 + (uint)(CARRY4(tempVar8,tempVar8) || CARRY4(tempVar8 * 2,(uint)tempVar10)),\n                       tempVar8 * 2 + (uint)tempVar10);\n    }\n    inputParam4 = tempVar4 & 0x80000000 | (int)((ulonglong)tempVar2 >> 0x20) << 0xb | (uint)tempVar2 >> 0x15;\n    inputParam3 = (uint)tempVar2 << 0xb | tempVar9 >> 0x15;\n    tempVar8 = tempVar9 * 0x800;\n    tempVar11 = 0xfc < tempVar6;\n    tempVar12 = SBORROW4(tempVar6,0xfd);\n    tempVar3 = tempVar6 - 0xfd;\n    tempVar10 = tempVar3 == 0;\n    tempVar4 = tempVar3;\n    if (tempVar11 && !tempVar10) {\n      tempVar11 = 0x6ff < tempVar3;\n      tempVar12 = SBORROW4(tempVar3,0x700);\n      tempVar4 = tempVar6 - 0x7fd;\n      tempVar10 = tempVar3 == 0x700;\n    }\n    if (!tempVar11 || tempVar10) {\n      tempVar10 = 0x7fffffff < tempVar8;\n      if (tempVar8 == 0x80000000) {\n        tempVar10 = (tempVar9 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(inputParam4 + tempVar6 * 0x100000 + (uint)CARRY4(inputParam3,(uint)tempVar10),inputParam3 + tempVar10\n                     );\n    }\n  }\n  if (!tempVar10 && (int)tempVar4 < 0 == tempVar12) {\n    return (ulonglong)(inputParam4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  tempVar11 = SCARRY4(tempVar6,0x36);\n  tempVar10 = (int)(tempVar6 + 0x36) < 0;\n  tempVar12 = tempVar6 == 0xffffffca;\n  if (tempVar12 || tempVar10 != tempVar11) {\n    inputParam3 = 0;\n  }\n  if (tempVar12 || tempVar10 != tempVar11) {\n    inputParam4 = inputParam4 & 0x80000000;\n  }\n  if (tempVar12 || tempVar10 != tempVar11) {\n    return CONCAT44(inputParam4,inputParam3);\n  }\n  tempVar4 = -tempVar6;\n  tempVar3 = tempVar4 - 0x20;\n  if (0x1f < (int)tempVar4) {\n    tempVar6 = inputParam3 >> (tempVar3 & 0xff) | inputParam4 << (0x20 - tempVar3 & 0xff);\n    tempVar4 = (inputParam4 >> (tempVar3 & 0xff) & ~((inputParam4 & 0x80000000) >> (tempVar3 & 0xff))) -\n            ((int)tempVar6 >> 0x1f);\n    if ((tempVar8 | inputParam3 << (0x20 - tempVar3 & 0xff) | tempVar6 << 1) == 0) {\n      tempVar4 = tempVar4 & ~(tempVar6 >> 0x1f);\n    }\n    return CONCAT44(inputParam4,tempVar4) & 0x80000000ffffffff;\n  }\n  tempVar5 = tempVar4 - 0x14;\n  if (tempVar5 == 0 || tempVar5 < 0 != SCARRY4(tempVar3,0xc)) {\n    tempVar9 = inputParam3 << (tempVar6 + 0x20 & 0xff);\n    tempVar3 = inputParam3 >> (tempVar4 & 0xff) | inputParam4 << (tempVar6 + 0x20 & 0xff);\n    tempVar6 = tempVar3 + -((int)tempVar9 >> 0x1f);\n    if ((tempVar8 | tempVar9 << 1) == 0) {\n      tempVar6 = tempVar6 & ~(tempVar9 >> 0x1f);\n    }\n    return CONCAT44((inputParam4 & 0x80000000) +\n                    ((inputParam4 & 0x7fffffff) >> (tempVar4 & 0xff)) +\n                    (uint)CARRY4(tempVar3,-((int)tempVar9 >> 0x1f)),tempVar6);\n  }\n  tempVar4 = 0xc - tempVar5;\n  tempVar6 = inputParam3 << (tempVar4 & 0xff);\n  tempVar4 = inputParam3 >> (0x20 - tempVar4 & 0xff) | inputParam4 << (tempVar4 & 0xff);\n  tempVar3 = tempVar4 + -((int)tempVar6 >> 0x1f);\n  if ((tempVar8 | tempVar6 << 1) == 0) {\n    tempVar3 = tempVar3 & ~(tempVar6 >> 0x1f);\n  }\n  return CONCAT44((inputParam4 & 0x80000000) + (uint)CARRY4(tempVar4,-((int)tempVar6 >> 0x1f)),tempVar3);\n}\n\n",
            "renaming": {
                "FUN_080004c8": "calculate_improved_result_080004c8",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "uVar1": "tempVar1",
                "lVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "iVar5": "tempVar5",
                "uVar6": "tempVar6",
                "unaff_r5": "tempVar7",
                "uVar7": "tempVar8",
                "uVar8": "tempVar9",
                "bVar9": "tempVar10",
                "bVar10": "tempVar11",
                "bVar11": "tempVar12",
                "uVar12": "tempVar13"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005e9c",
                "FUN_080096e0",
                "FUN_08004d78",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080006a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006a4": {
            "entrypoint": "0x080006a4",
            "current_name": "calculate_bitwise_operations_080006a4",
            "code": "\nulonglong calculate_bitwise_operations_080006a4(uint input_param_1,uint input_param_2,uint input_param_3,uint input_param_4)\n\n{\n  uint temp_var_1;\n  uint temp_var_2;\n  uint temp_var_3;\n  uint temp_var_4;\n  uint temp_var_5;\n  bool flag;\n  \n  temp_var_3 = temp_var_5 & input_param_4 >> 0x14;\n  if (temp_var_2 != temp_var_5 && temp_var_3 != temp_var_5) {\n    flag = (input_param_1 | input_param_2 << 1) == 0;\n    if (!flag) {\n      flag = (input_param_3 | input_param_4 << 1) == 0;\n    }\n    if (flag) {\n      return (ulonglong)((input_param_2 ^ input_param_4) & 0x80000000) << 0x20;\n    }\n    if (temp_var_2 == 0) {\n      temp_var_4 = input_param_2 & 0x80000000;\n      do {\n        temp_var_1 = input_param_1 & 0x80000000;\n        input_param_1 = input_param_1 << 1;\n        input_param_2 = input_param_2 * 2 + (uint)(temp_var_1 != 0);\n      } while ((input_param_2 & 0x100000) == 0);\n      input_param_2 = input_param_2 | temp_var_4;\n      if (temp_var_3 != 0) {\n        return concatenate_64_bits(input_param_2,input_param_1);\n      }\n    }\n    do {\n      temp_var_3 = input_param_3 & 0x80000000;\n      input_param_3 = input_param_3 << 1;\n      input_param_4 = input_param_4 * 2 + (uint)(temp_var_3 != 0);\n    } while ((input_param_4 & 0x100000) == 0);\n    return concatenate_64_bits(input_param_2,input_param_1);\n  }\n  flag = (input_param_1 | input_param_2 << 1) == 0;\n  if (flag) {\n    input_param_2 = input_param_4;\n    input_param_1 = input_param_3;\n  }\n  if (!flag) {\n    flag = (input_param_3 | input_param_4 << 1) == 0;\n  }\n  temp_var_4 = input_param_2;\n  if (((!flag) && ((temp_var_2 != temp_var_5 || ((input_param_1 | input_param_2 << 0xc) == 0)))) &&\n     ((temp_var_3 != temp_var_5 || (input_param_1 = input_param_3, temp_var_4 = input_param_4, (input_param_3 | input_param_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_param_2 ^ input_param_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return concatenate_64_bits(temp_var_4,input_param_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006a4": "calculate_bitwise_operations_080006a4",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "temp_var_1",
                "unaff_r4": "temp_var_2",
                "uVar2": "temp_var_3",
                "uVar3": "temp_var_4",
                "in_r12": "temp_var_5",
                "bVar4": "flag",
                "CONCAT44": "concatenate_64_bits"
            },
            "calling": [
                "FUN_080004c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800071c": {
            "entrypoint": "0x0800071c",
            "current_name": "calculate_floating_point_0800071c",
            "code": "\nulonglong calculateFloatingPoint_0800071c(undefined4 exponentPart,uint significandPart,uint floatingPoint,uint floatingPointBits)\n\n{\n  uint temp;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int difference;\n  uint exponent;\n  uint exponentBits;\n  uint temp8;\n  uint exponentPartTemp;\n  uint exponentTemp;\n  uint exponentResult;\n  bool isZero;\n  bool compareResult;\n  bool overflowCheck;\n  undefined8 combinedPart;\n  \n  combinedPart = CONCAT44(significandPart,exponentPart);\n  exponentResult = 0x7ff;\n  temp7 = significandPart >> 0x14 & 0x7ff;\n  isZero = temp7 == 0;\n  if (!isZero) {\n    exponentBits = floatingPointBits >> 0x14 & 0x7ff;\n    isZero = exponentBits == 0;\n  }\n  if (!isZero) {\n    isZero = temp7 == 0x7ff;\n  }\n  if (!isZero) {\n    isZero = exponentBits == 0x7ff;\n  }\n  if (isZero) {\n    combinedPart = reverse_bits_0800088a();\n  }\n  exponent = (uint)((ulonglong)combinedPart >> 0x20);\n  exponentPartTemp = (uint)combinedPart;\n  difference = temp7 - exponentBits;\n  if ((floatingPoint | floatingPointBits << 0xc) == 0) {\n    temp7 = (exponent ^ floatingPointBits) & 0x80000000 | exponent & 0xfffff;\n    overflowCheck = SCARRY4(difference,exponentResult >> 1);\n    exponent = difference + (exponentResult >> 1);\n    isZero = (int)exponent < 0;\n    compareResult = exponent == 0;\n    if (!compareResult && isZero == overflowCheck) {\n      overflowCheck = SBORROW4(exponentResult,exponent);\n      isZero = (int)(exponentResult - exponent) < 0;\n      compareResult = exponentResult == exponent;\n    }\n    if (!compareResult && isZero == overflowCheck) {\n      temp7 = temp7 | exponent * 0x100000;\n    }\n    if (!compareResult && isZero == overflowCheck) {\n      return CONCAT44(temp7,exponentPartTemp);\n    }\n    temp7 = temp7 | 0x100000;\n    exponentResult = 0;\n    compareResult = SBORROW4(exponent,1);\n    exponent = exponent - 1;\n    isZero = exponent == 0;\n    temp3 = exponent;\n  }\n  else {\n    temp3 = (floatingPointBits << 0xc) >> 4 | 0x10000000 | floatingPoint >> 0x18;\n    exponentResult = floatingPoint << 8;\n    temp8 = (exponent << 0xc) >> 4 | 0x10000000 | exponentPartTemp >> 0x18;\n    exponentPartTemp = exponentPartTemp * 0x100;\n    temp7 = (exponent ^ floatingPointBits) & 0x80000000;\n    isZero = temp3 <= temp8;\n    if (temp8 == temp3) {\n      isZero = exponentResult <= exponentPartTemp;\n    }\n    difference = difference + (uint)isZero;\n    exponent = difference + 0x3fd;\n    if (isZero == false) {\n      temp3 = temp3 >> 1;\n      exponentResult = (uint)((floatingPoint >> 0x18 & 1) != 0) << 0x1f | exponentResult >> 1;\n    }\n    exponentTemp = exponentPartTemp - exponentResult;\n    temp8 = (temp8 - temp3) - (uint)(exponentPartTemp < exponentResult);\n    temp4 = temp3 >> 1;\n    temp = (uint)((temp3 & 1) != 0) << 0x1f | exponentResult >> 1;\n    exponentPartTemp = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      isZero = temp <= exponentTemp;\n      if (temp4 < temp8 || temp8 - temp4 < (uint)isZero) {\n        exponentTemp = exponentTemp - temp;\n        exponentPartTemp = exponentPartTemp | temp3;\n        temp8 = (temp8 - temp4) - (uint)!isZero;\n      }\n      temp5 = temp4 >> 1;\n      temp = (uint)((temp4 & 1) != 0) << 0x1f | temp >> 1;\n      compareResult = temp <= exponentTemp;\n      isZero = temp8 - temp5 < (uint)compareResult;\n      exponentResult = temp8;\n      if (temp5 < temp8 || isZero) {\n        exponentTemp = exponentTemp - temp;\n        exponentResult = (temp8 - temp5) - (uint)!compareResult;\n      }\n      if (temp5 < temp8 || isZero) {\n        exponentPartTemp = exponentPartTemp | temp3 >> 1;\n      }\n      temp8 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp >> 1;\n      compareResult = temp2 <= exponentTemp;\n      isZero = exponentResult - temp8 < (uint)compareResult;\n      temp5 = exponentResult;\n      if (temp8 < exponentResult || isZero) {\n        exponentTemp = exponentTemp - temp2;\n        temp5 = (exponentResult - temp8) - (uint)!compareResult;\n      }\n      if (temp8 < exponentResult || isZero) {\n        exponentPartTemp = exponentPartTemp | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp = (uint)((temp8 & 1) != 0) << 0x1f | temp2 >> 1;\n      compareResult = temp <= exponentTemp;\n      isZero = temp5 - temp6 < (uint)compareResult;\n      temp8 = temp5;\n      if (temp6 < temp5 || isZero) {\n        exponentTemp = exponentTemp - temp;\n        temp8 = (temp5 - temp6) - (uint)!compareResult;\n      }\n      if (temp6 < temp5 || isZero) {\n        exponentPartTemp = exponentPartTemp | temp3 >> 3;\n      }\n      exponentResult = temp8 | exponentTemp;\n      if (exponentResult == 0) break;\n      temp8 = temp8 << 4 | exponentTemp >> 0x1c;\n      exponentTemp = exponentTemp << 4;\n      temp4 = temp4 & 0xfffffff8 | temp >> 0x1d;\n      temp = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_0800083a;\n        temp7 = temp7 | exponentPartTemp;\n        exponentPartTemp = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | exponentPartTemp;\n      exponentPartTemp = 0;\n    }\nLAB_0800083a:\n    overflowCheck = 0xfc < exponent;\n    compareResult = SBORROW4(exponent,0xfd);\n    temp4 = difference + 0x300;\n    isZero = temp4 == 0;\n    temp3 = temp4;\n    if (overflowCheck && !isZero) {\n      overflowCheck = 0x6ff < temp4;\n      compareResult = SBORROW4(temp4,0x700);\n      temp3 = difference - 0x400;\n      isZero = temp4 == 0x700;\n    }\n    if (!overflowCheck || isZero) {\n      isZero = temp6 <= temp8;\n      if (temp8 == temp6) {\n        isZero = temp <= exponentTemp;\n      }\n      if (temp8 == temp6 && exponentTemp == temp) {\n        isZero = (exponentPartTemp & 1) != 0;\n      }\n      return CONCAT44(temp7 + exponent * 0x100000 + (uint)CARRY4(exponentPartTemp,(uint)isZero),exponentPartTemp + isZero);\n    }\n  }\n  if (!isZero && (int)temp3 < 0 == compareResult) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  overflowCheck = SCARRY4(exponent,0x36);\n  isZero = (int)(exponent + 0x36) < 0;\n  compareResult = exponent == 0xffffffca;\n  if (compareResult || isZero != overflowCheck) {\n    exponentPartTemp = 0;\n  }\n  if (compareResult || isZero != overflowCheck) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (compareResult || isZero != overflowCheck) {\n    return CONCAT44(temp7,exponentPartTemp);\n  }\n  temp3 = -exponent;\n  temp8 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = exponentPartTemp >> (temp8 & 0xff) | temp7 << (0x20 - temp8 & 0xff);\n    exponent = (temp7 >> (temp8 & 0xff) & ~((temp7 & 0x80000000) >> (temp8 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((exponentResult | exponentPartTemp << (0x20 - temp8 & 0xff) | temp3 << 1) == 0) {\n      exponent = exponent & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,exponent) & 0x80000000ffffffff;\n  }\n  difference = temp3 - 0x14;\n  if (difference != 0 && difference < 0 == SCARRY4(temp8,0xc)) {\n    exponent = 0xc - difference;\n    temp3 = exponentPartTemp << (exponent & 0xff);\n    exponentPartTemp = exponentPartTemp >> (0x20 - exponent & 0xff) | temp7 << (exponent & 0xff);\n    exponent = exponentPartTemp + -((int)temp3 >> 0x1f);\n    if ((exponentResult | temp3 << 1) == 0) {\n      exponent = exponent & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(exponentPartTemp,-((int)temp3 >> 0x1f)),exponent);\n  }\n  temp8 = exponentPartTemp << (exponent + 0x20 & 0xff);\n  exponentPartTemp = exponentPartTemp >> (temp3 & 0xff) | temp7 << (exponent + 0x20 & 0xff);\n  exponent = exponentPartTemp + -((int)temp8 >> 0x1f);\n  if ((exponentResult | temp8 << 1) == 0) {\n    exponent = exponent & ~(temp8 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(exponentPartTemp,-((int)temp8 >> 0x1f)),exponent);\n}\n\n",
            "renaming": {
                "FUN_0800071c": "calculate_floating_point_0800071c",
                "param_1": "exponentPart",
                "param_2": "significandPart",
                "param_3": "floatingPoint",
                "param_4": "floatingPointBits",
                "uVar1": "temp",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "difference",
                "uVar9": "exponent",
                "unaff_r5": "exponentBits",
                "uVar10": "temp8",
                "uVar11": "exponentPartTemp",
                "uVar12": "exponentTemp",
                "uVar13": "exponentResult",
                "bVar14": "isZero",
                "bVar15": "compareResult",
                "bVar16": "overflowCheck",
                "uVar17": "combinedPart"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08004d78",
                "FUN_08005838",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_0800088a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800088a": {
            "entrypoint": "0x0800088a",
            "current_name": "reverse_bits_0800088a",
            "code": "\nulonglong reverseBits_0800088a(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool isZero;\n  \n  bit3 = bit5 & input4 >> 0x14;\n  bit4 = input2;\n  if (bit2 != bit5 || bit3 != bit5) {\n    if (bit2 == bit5) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, bit4 = input4, bit3 != bit5)\n         ) {\nLAB_080006fc:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit3 == bit5) {\n      input1 = input3;\n      bit4 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006c0:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (input1 | input2 << 1) == 0;\n      if (!isZero) {\n        isZero = (input3 | input4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (bit2 == 0) {\n          bit4 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | bit4;\n          if (bit3 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          bit4 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(bit4 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_080006fc;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006c0;\n    }\n  }\n  return CONCAT44(bit4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800088a": "reverse_bits_0800088a",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "in_r12": "bit5",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_0800071c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008fc": {
            "entrypoint": "0x080008fc",
            "current_name": "check_conditions_080008fc",
            "code": "\nuint check_conditions_080008fc(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint result;\n  bool is_zero_input;\n  bool is_negative_result;\n  \n  if (((int)(input2 << 1) >> 0x15 == -1 || (int)(input4 << 1) >> 0x15 == -1) &&\n     ((((int)(input2 << 1) >> 0x15 == -1 && ((input1 | input2 << 0xc) != 0)) ||\n      (((int)(input4 << 1) >> 0x15 == -1 && ((input3 | input4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  is_zero_input = (input1 | input2 << 1) == 0;\n  if (is_zero_input) {\n    is_zero_input = (input3 | input4 << 1) == 0;\n  }\n  if (!is_zero_input) {\n    is_zero_input = input2 == input4;\n  }\n  if (is_zero_input) {\n    is_zero_input = input1 == input3;\n  }\n  if (!is_zero_input) {\n    result = input2 ^ input4;\n    is_zero_input = result == 0;\n    if (-1 < (int)result) {\n      is_zero_input = input2 == input4;\n    }\n    is_negative_result = -1 < (int)result && input4 <= input2;\n    if (is_zero_input) {\n      is_negative_result = input3 <= input1;\n    }\n    input4 = (int)input4 >> 0x1f;\n    if (!is_negative_result) {\n      input4 = ~input4;\n    }\n    return input4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080008fc": "check_conditions_080008fc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result",
                "bVar2": "is_zero_input",
                "bVar3": "is_negative_result"
            },
            "calling": [
                "FUN_08000988"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000978": {
            "entrypoint": "0x08000978",
            "current_name": "run_main_with_params_08000978",
            "code": "\nvoid run_main_with_params_08000978(undefined4 param_3,undefined4 param_4,undefined4 param_1,undefined4 param_2)\n\n{\n  run_main_function_08000988(param_1,param_2,param_3,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000978": "run_main_with_params_08000978",
                "param_1": "param_3",
                "param_2": "param_4",
                "param_3": "param_1",
                "param_4": "param_2"
            },
            "calling": [
                "FUN_080009d4",
                "FUN_080009e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000988": {
            "entrypoint": "0x08000988",
            "current_name": "run_main_function_08000988",
            "code": "\nundefined4 run_main_function_08000988(undefined4 input_value)\n\n{\n  check_conditions_080008fc();\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08000988": "run_main_function_08000988",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_080009ac",
                "FUN_080009c0",
                "FUN_08000978",
                "FUN_08000998"
            ],
            "called": [
                "FUN_080008fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "check_main_function_08000998",
            "code": "\nbool check_main_function_08000998(void)\n\n{\n  char result;\n  \n  run_main_function_08000988();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000998": "check_main_function_08000998",
                "in_ZR": "result"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009ac": {
            "entrypoint": "0x080009ac",
            "current_name": "check_if_cy_is_null_080009ac",
            "code": "\nbool check_if_CY_is_null_080009ac(void)\n\n{\n  char CY_character;\n  \n  execute_main_function_08000988();\n  return CY_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009ac": "check_if_cy_is_null_080009ac",
                "in_CY": "CY_character",
                "run_main_function_08000988": "execute_main_function_08000988"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c0": {
            "entrypoint": "0x080009c0",
            "current_name": "check_main_function_result_080009c0",
            "code": "\nbool checkMainFunctionResult_080009c0(void)\n\n{\n  undefined isZeroReturn;\n  undefined isCarrySet;\n  \n  run_main_function_08000988();\n  return !(bool)isCarrySet || (bool)isZeroReturn;\n}\n\n",
            "renaming": {
                "FUN_080009c0": "check_main_function_result_080009c0",
                "in_ZR": "isZeroReturn",
                "in_CY": "isCarrySet"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009d4": {
            "entrypoint": "0x080009d4",
            "current_name": "check_main_params_080009d4",
            "code": "\nbool checkMainParams_080009d4(void)\n\n{\n  undefined isZero;\n  undefined isCarry;\n  \n  run_main_with_params_08000978();\n  return !(bool)isCarry || (bool)isZero;\n}\n\n",
            "renaming": {
                "FUN_080009d4": "check_main_params_080009d4",
                "in_ZR": "isZero",
                "in_CY": "isCarry"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009e8": {
            "entrypoint": "0x080009e8",
            "current_name": "check_if_main_executed_successfully_080009e8",
            "code": "\nbool check_if_main_executed_successfully_080009e8(void)\n\n{\n  char input_character;\n  \n  run_main_with_params_08000978();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009e8": "check_if_main_executed_successfully_080009e8",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009fc": {
            "entrypoint": "0x080009fc",
            "current_name": "calculate_new_float_080009fc",
            "code": "\nuint calculate_new_float_080009fc(uint input_val,uint multiplier)\n\n{\n  uint result;\n  uint multiplied_val;\n  uint sum_val;\n  uint temp_val;\n  bool is_zero;\n  bool is_less;\n  \n  multiplied_val = multiplier * 2;\n  is_less = multiplied_val < 0x70000000;\n  sum_val = multiplied_val + 0x90000000;\n  result = sum_val;\n  if (!is_less) {\n    temp_val = multiplied_val + 0x8fe00000;\n    result = temp_val;\n  }\n  is_zero = result == 0;\n  if (!is_less && sum_val >= 0x200000) {\n    is_zero = temp_val == 0x1fc00000;\n  }\n  if (((is_less || sum_val < 0x200000) || 0x1fc00000 < temp_val) || is_zero) {\n    if ((multiplier & 0x40000000) != 0) {\n      if (((int)multiplied_val >> 0x15 == -1) && ((input_val | multiplier << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return multiplier & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(multiplied_val + 0x92e00000) < 0 != SCARRY4(sum_val,0x2e00000)) {\n      return multiplier & 0x80000000;\n    }\n    multiplied_val = 0x18 - (multiplied_val + 0x92e00000 >> 0x15);\n    result = input_val >> (multiplied_val & 0xff);\n    if (input_val << (0x20 - multiplied_val & 0xff) != 0) {\n      result = result | 1;\n    }\n    sum_val = multiplier & 0x1fffff | 0x100000;\n    input_val = result | sum_val << (0x20 - multiplied_val & 0xff);\n    sum_val = (sum_val >> (multiplied_val & 0xff)) << 1;\n  }\n  result = (multiplier & 0x80000000 | input_val >> 0x1d) + sum_val * 4 + (uint)(0x7fffffff < input_val * 8);\n  if (input_val * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080009fc": "calculate_new_float_080009fc",
                "param_1": "input_val",
                "param_2": "multiplier",
                "uVar1": "result",
                "uVar2": "multiplied_val",
                "uVar3": "sum_val",
                "in_r12": "temp_val",
                "bVar4": "is_zero",
                "bVar5": "is_less"
            },
            "calling": [
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa4": {
            "entrypoint": "0x08000aa4",
            "current_name": "compute_float_08000aa4",
            "code": "\nuint computeFloat_08000aa4(uint x,uint y,undefined4 z,uint w)\n\n{\n  int leftShiftedX;\n  int rightShiftedY;\n  uint xorResult1;\n  uint xorResult2;\n  uint xShifted;\n  uint updatedShiftedX;\n  uint shiftDifference;\n  bool isConditionTrue;\n  \n  xorResult1 = y ^ 0x80000000;\n  xShifted = x << 1;\n  isConditionTrue = xShifted == 0;\n  if (!isConditionTrue) {\n    w = y << 1;\n    isConditionTrue = w == 0;\n  }\n  if (!isConditionTrue) {\n    isConditionTrue = xShifted == w;\n  }\n  leftShiftedX = (int)xShifted >> 0x18;\n  if (!isConditionTrue) {\n    isConditionTrue = leftShiftedX == -1;\n  }\n  if (!isConditionTrue) {\n    isConditionTrue = (int)w >> 0x18 == -1;\n  }\n  if (isConditionTrue) {\n    rightShiftedY = (int)(y << 1) >> 0x18;\n    if (leftShiftedX == -1 || rightShiftedY == -1) {\n      xShifted = xorResult1;\n      if (leftShiftedX == -1) {\n        xShifted = x;\n      }\n      if (leftShiftedX != -1 || rightShiftedY != -1) {\n        xorResult1 = xShifted;\n      }\n      isConditionTrue = (xShifted & 0x7fffff) == 0;\n      if (isConditionTrue) {\n        isConditionTrue = (xorResult1 & 0x7fffff) == 0;\n      }\n      if (isConditionTrue) {\n        isConditionTrue = xShifted == xorResult1;\n      }\n      if (!isConditionTrue) {\n        xShifted = xShifted | 0x400000;\n      }\n      return xShifted;\n    }\n    if (((x ^ xorResult1) & 0x7fffffff) != 0) {\n      if (xShifted == 0) {\n        x = xorResult1;\n      }\n      return x;\n    }\n    if (x != xorResult1) {\n      return 0;\n    }\n    if ((xShifted & 0xff000000) == 0) {\n      xorResult1 = x << 1;\n      if ((x & 0x80000000) != 0) {\n        xorResult1 = xorResult1 | 0x80000000;\n      }\n      return xorResult1;\n    }\n    if (xShifted < 0xfe000000) {\n      return x + 0x800000;\n    }\n    x = x & 0x80000000;\nLAB_08000bde:\n    return x | 0x7f800000;\n  }\n  xShifted = xShifted >> 0x18;\n  w = w >> 0x18;\n  shiftDifference = w - xShifted;\n  isConditionTrue = shiftDifference != 0;\n  updatedShiftedX = xShifted;\n  if (isConditionTrue && xShifted <= w) {\n    updatedShiftedX = xShifted + shiftDifference;\n  }\n  if (isConditionTrue && xShifted <= w) {\n    xorResult1 = xorResult1 ^ x;\n  }\n  if (isConditionTrue && xShifted <= w) {\n    x = x ^ xorResult1;\n  }\n  if (isConditionTrue && xShifted <= w) {\n    xorResult1 = xorResult1 ^ x;\n  }\n  if (w < xShifted) {\n    shiftDifference = -shiftDifference;\n  }\n  if (0x19 < shiftDifference) {\n    return x;\n  }\n  xShifted = x & 0xffffff | 0x800000;\n  if ((x & 0x80000000) != 0) {\n    xShifted = -xShifted;\n  }\n  xorResult2 = xorResult1 & 0xffffff | 0x800000;\n  if ((xorResult1 & 0x80000000) != 0) {\n    xorResult2 = -xorResult2;\n  }\n  if (updatedShiftedX == shiftDifference) {\n    xorResult2 = xorResult2 ^ 0x800000;\n    if (updatedShiftedX == 0) {\n      xShifted = xShifted ^ 0x800000;\n      updatedShiftedX = 1;\n    }\n    else {\n      shiftDifference = shiftDifference - 1;\n    }\n  }\n  xShifted = xShifted + ((int)xorResult2 >> (shiftDifference & 0xff));\n  xorResult2 = xorResult2 << (0x20 - shiftDifference & 0xff);\n  x = xShifted & 0x80000000;\n  if ((int)xShifted < 0) {\n    isConditionTrue = xorResult2 != 0;\n    xorResult2 = -xorResult2;\n    xShifted = -xShifted - (uint)isConditionTrue;\n  }\n  if (xShifted < 0x800000) {\n    xorResult1 = xorResult2 & 0x80000000;\n    xorResult2 = xorResult2 << 1;\n    xShifted = xShifted * 2 + (uint)(xorResult1 != 0);\n    xorResult1 = updatedShiftedX - 2;\n    if ((xShifted & 0x800000) == 0) {\n      shiftDifference = LZCOUNT(xShifted) - 8;\n      xShifted = xShifted << (shiftDifference & 0xff);\n      if ((int)xorResult1 < (int)shiftDifference) {\n        xShifted = xShifted >> (-(xorResult1 - shiftDifference) & 0xff);\n      }\n      else {\n        xShifted = xShifted + (xorResult1 - shiftDifference) * 0x800000;\n      }\n      return xShifted | x;\n    }\n  }\n  else {\n    xorResult1 = updatedShiftedX - 1;\n    if (0xffffff < xShifted) {\n      xorResult1 = xShifted & 1;\n      xShifted = xShifted >> 1;\n      xorResult2 = (uint)(xorResult1 != 0) << 0x1f | xorResult2 >> 1;\n      xorResult1 = updatedShiftedX;\n      if (0xfd < updatedShiftedX) goto LAB_08000bde;\n    }\n  }\n  xShifted = xShifted + xorResult1 * 0x800000 + (uint)(0x7fffffff < xorResult2);\n  if (xorResult2 == 0x80000000) {\n    xShifted = xShifted & 0xfffffffe;\n  }\n  return xShifted | x;\n}\n\n",
            "renaming": {
                "FUN_08000aa4": "compute_float_08000aa4",
                "param_1": "x",
                "param_2": "y",
                "param_3": "z",
                "param_4": "w",
                "iVar1": "leftShiftedX",
                "iVar2": "rightShiftedY",
                "uVar3": "xorResult1",
                "uVar4": "xorResult2",
                "uVar5": "xShifted",
                "uVar6": "updatedShiftedX",
                "uVar7": "shiftDifference",
                "bVar8": "isConditionTrue"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "entrypoint": "0x08000aa8",
            "current_name": "calculate_floating_point_08000aa8",
            "code": "\nuint calculateFloatingPoint_08000aa8(uint inputValue1,uint inputValue2,undefined4 undefinedValue,uint outputValue)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint result1;\n  uint result2;\n  uint temp1;\n  uint temp2;\n  bool isEqual;\n  \n  result2 = inputValue1 << 1;\n  isEqual = result2 == 0;\n  if (!isEqual) {\n    outputValue = inputValue2 << 1;\n    isEqual = outputValue == 0;\n  }\n  if (!isEqual) {\n    isEqual = result2 == outputValue;\n  }\n  shiftedInput1 = (int)result2 >> 0x18;\n  if (!isEqual) {\n    isEqual = shiftedInput1 == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)outputValue >> 0x18 == -1;\n  }\n  if (isEqual) {\n    shiftedInput2 = (int)(inputValue2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      result2 = inputValue2;\n      if (shiftedInput1 == -1) {\n        result2 = inputValue1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        inputValue2 = result2;\n      }\n      isEqual = (result2 & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (inputValue2 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = result2 == inputValue2;\n      }\n      if (!isEqual) {\n        result2 = result2 | 0x400000;\n      }\n      return result2;\n    }\n    if (((inputValue1 ^ inputValue2) & 0x7fffffff) != 0) {\n      if (result2 == 0) {\n        inputValue1 = inputValue2;\n      }\n      return inputValue1;\n    }\n    if (inputValue1 != inputValue2) {\n      return 0;\n    }\n    if ((result2 & 0xff000000) == 0) {\n      result2 = inputValue1 << 1;\n      if ((inputValue1 & 0x80000000) != 0) {\n        result2 = result2 | 0x80000000;\n      }\n      return result2;\n    }\n    if (result2 < 0xfe000000) {\n      return inputValue1 + 0x800000;\n    }\n    inputValue1 = inputValue1 & 0x80000000;\nLAB_08000bde:\n    return inputValue1 | 0x7f800000;\n  }\n  result2 = result2 >> 0x18;\n  outputValue = outputValue >> 0x18;\n  temp2 = outputValue - result2;\n  isEqual = temp2 != 0;\n  temp1 = result2;\n  if (isEqual && result2 <= outputValue) {\n    temp1 = result2 + temp2;\n  }\n  if (isEqual && result2 <= outputValue) {\n    inputValue2 = inputValue2 ^ inputValue1;\n  }\n  if (isEqual && result2 <= outputValue) {\n    inputValue1 = inputValue1 ^ inputValue2;\n  }\n  if (isEqual && result2 <= outputValue) {\n    inputValue2 = inputValue2 ^ inputValue1;\n  }\n  if (outputValue < result2) {\n    temp2 = -temp2;\n  }\n  if (0x19 < temp2) {\n    return inputValue1;\n  }\n  result2 = inputValue1 & 0xffffff | 0x800000;\n  if ((inputValue1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  result1 = inputValue2 & 0xffffff | 0x800000;\n  if ((inputValue2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (temp1 == temp2) {\n    result1 = result1 ^ 0x800000;\n    if (temp1 == 0) {\n      result2 = result2 ^ 0x800000;\n      temp1 = 1;\n    }\n    else {\n      temp2 = temp2 - 1;\n    }\n  }\n  result2 = result2 + ((int)result1 >> (temp2 & 0xff));\n  result1 = result1 << (0x20 - temp2 & 0xff);\n  inputValue1 = result2 & 0x80000000;\n  if ((int)result2 < 0) {\n    isEqual = result1 != 0;\n    result1 = -result1;\n    result2 = -result2 - (uint)isEqual;\n  }\n  if (result2 < 0x800000) {\n    temp2 = result1 & 0x80000000;\n    result1 = result1 << 1;\n    result2 = result2 * 2 + (uint)(temp2 != 0);\n    temp2 = temp1 - 2;\n    if ((result2 & 0x800000) == 0) {\n      temp1 = LZCOUNT(result2) - 8;\n      result2 = result2 << (temp1 & 0xff);\n      if ((int)temp2 < (int)temp1) {\n        result2 = result2 >> (-(temp2 - temp1) & 0xff);\n      }\n      else {\n        result2 = result2 + (temp2 - temp1) * 0x800000;\n      }\n      return result2 | inputValue1;\n    }\n  }\n  else {\n    temp2 = temp1 - 1;\n    if (0xffffff < result2) {\n      temp2 = result2 & 1;\n      result2 = result2 >> 1;\n      result1 = (uint)(temp2 != 0) << 0x1f | result1 >> 1;\n      temp2 = temp1;\n      if (0xfd < temp1) goto LAB_08000bde;\n    }\n  }\n  result2 = result2 + temp2 * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    result2 = result2 & 0xfffffffe;\n  }\n  return result2 | inputValue1;\n}\n\n",
            "renaming": {
                "FUN_08000aa8": "calculate_floating_point_08000aa8",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "undefinedValue",
                "param_4": "outputValue",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "bVar7": "isEqual"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_080049cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c08": {
            "entrypoint": "0x08000c08",
            "current_name": "calculate_value_08000c08",
            "code": "\nuint calculateValue_08000c08(uint inputValue)\n\n{\n  uint leadingZerosCount;\n  uint shiftedValue;\n  int constantValue;\n  uint comparisonResult;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZerosCount = LZCOUNT(inputValue);\n  shiftedValue = leadingZerosCount - 8;\n  constantValue = shiftedValue * -0x800000 + 0x4a800000;\n  if (7 < leadingZerosCount) {\n    comparisonResult = 0 << (shiftedValue & 0xff);\n    leadingZerosCount = constantValue + (inputValue << (shiftedValue & 0xff)) +\n            (0U >> (0x20 - shiftedValue & 0xff)) + (uint)(0x7fffffff < comparisonResult);\n    if (comparisonResult == 0x80000000) {\n      leadingZerosCount = leadingZerosCount & 0xfffffffe;\n    }\n    return leadingZerosCount;\n  }\n  shiftedValue = inputValue << leadingZerosCount + 0x18;\n  leadingZerosCount = constantValue + ((inputValue >> (0x20 - (leadingZerosCount + 0x18) & 0xff)) - ((int)shiftedValue >> 0x1f));\n  if ((shiftedValue & 0x7fffffff) == 0) {\n    leadingZerosCount = leadingZerosCount & ~(shiftedValue >> 0x1f);\n  }\n  return leadingZerosCount;\n}\n\n",
            "renaming": {
                "FUN_08000c08": "calculate_value_08000c08",
                "param_1": "inputValue",
                "uVar1": "leadingZerosCount",
                "uVar2": "shiftedValue",
                "iVar3": "constantValue",
                "uVar4": "comparisonResult"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c10": {
            "entrypoint": "0x08000c10",
            "current_name": "count_bits_and_shift_08000c10",
            "code": "\nuint countBitsAndShift_08000c10(uint input)\n\n{\n  uint highestBitPosition;\n  uint shiftAmount;\n  uint signBit;\n  int result;\n  \n  signBit = input & 0x80000000;\n  if ((int)signBit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  highestBitPosition = leadingZeroCount(input);\n  shiftAmount = highestBitPosition - 8;\n  result = ((signBit | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < highestBitPosition) {\n    highestBitPosition = 0 << (shiftAmount & 0xff);\n    signBit = result + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < highestBitPosition);\n    if (highestBitPosition == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftAmount = input << highestBitPosition + 0x18;\n  signBit = result + ((input >> (0x20 - (highestBitPosition + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftAmount >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_08000c10": "count_bits_and_shift_08000c10",
                "param_1": "input",
                "uVar1": "highestBitPosition",
                "uVar2": "shiftAmount",
                "uVar3": "signBit",
                "iVar4": "result",
                "LZCOUNT": "leadingZeroCount"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08004ae0",
                "FUN_080049cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cb8": {
            "entrypoint": "0x08000cb8",
            "current_name": "calculate_floating_point_08000cb8",
            "code": "\nuint calculateFloatingPoint_08000cb8(uint operand1,uint operand2,undefined4 roundingMode,uint exceptionFlag)\n\n{\n  longlong product;\n  uint result;\n  uint exponent1;\n  int sumOfExponents;\n  int adjustedExponent;\n  uint exponentProduct;\n  int temp;\n  uint mantissa1;\n  bool isZeroExponent;\n  bool isNegative;\n  \n  exponent1 = operand1 >> 0x17 & 0xff;\n  isZeroExponent = exponent1 == 0;\n  if (!isZeroExponent) {\n    exceptionFlag = operand2 >> 0x17 & 0xff;\n    isZeroExponent = exceptionFlag == 0;\n  }\n  if (!isZeroExponent) {\n    isZeroExponent = exponent1 == 0xff;\n  }\n  if (!isZeroExponent) {\n    isZeroExponent = exceptionFlag == 0xff;\n  }\n  if (isZeroExponent) {\n    exceptionFlag = operand2 >> 0x17 & 0xff;\n    if (exponent1 == 0xff || exceptionFlag == 0xff) {\n      isZeroExponent = operand1 == 0 || operand1 == 0x80000000;\n      result = operand2;\n      if (operand1 != 0 && operand1 != 0x80000000) {\n        isZeroExponent = operand2 == 0;\n        result = operand1;\n      }\n      if (!isZeroExponent) {\n        isZeroExponent = operand2 == 0x80000000;\n      }\n      mantissa1 = result;\n      if (((isZeroExponent) || ((exponent1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((exceptionFlag == 0xff && (mantissa1 = operand2, (operand2 & 0x7fffff) != 0)))) {\n        return mantissa1 | 0x7fc00000;\n      }\n      result = result ^ operand2;\n      goto LAB_08000e08;\n    }\n    isZeroExponent = (operand1 & 0x7fffffff) == 0;\n    if (!isZeroExponent) {\n      isZeroExponent = (operand2 & 0x7fffffff) == 0;\n    }\n    if (isZeroExponent) {\n      return (operand1 ^ operand2) & 0x80000000;\n    }\n    isZeroExponent = exponent1 == 0;\n    result = operand1 & 0x80000000;\n    while( true ) {\n      if (isZeroExponent) {\n        operand1 = operand1 << 1;\n        isZeroExponent = (operand1 & 0x800000) == 0;\n      }\n      if (!isZeroExponent) break;\n      exponent1 = exponent1 - 1;\n    }\n    operand1 = operand1 | result;\n    isZeroExponent = exceptionFlag == 0;\n    result = operand2 & 0x80000000;\n    while( true ) {\n      if (isZeroExponent) {\n        operand2 = operand2 << 1;\n        isZeroExponent = (operand2 & 0x800000) == 0;\n      }\n      if (!isZeroExponent) break;\n      exceptionFlag = exceptionFlag - 1;\n    }\n    operand2 = operand2 | result;\n  }\n  sumOfExponents = exponent1 + exceptionFlag;\n  mantissa1 = operand1 ^ operand2;\n  exponent1 = operand1 << 9;\n  isZeroExponent = exponent1 == 0;\n  if (!isZeroExponent) {\n    operand2 = operand2 << 9;\n    isZeroExponent = operand2 == 0;\n  }\n  if (isZeroExponent) {\n    if (exponent1 == 0) {\n      operand2 = operand2 << 9;\n    }\n    result = mantissa1 & 0x80000000 | operand1 & 0x7fffff | operand2 >> 9;\n    isNegative = SBORROW4(sumOfExponents,0x7f);\n    adjustedExponent = sumOfExponents + -0x7f;\n    isZeroExponent = adjustedExponent == 0;\n    temp = adjustedExponent;\n    if (!isZeroExponent && 0x7e < sumOfExponents) {\n      isNegative = SBORROW4(0xff,adjustedExponent);\n      temp = 0xff - adjustedExponent;\n      isZeroExponent = adjustedExponent == 0xff;\n    }\n    if (!isZeroExponent && temp < 0 == isNegative) {\n      result = result | adjustedExponent * 0x800000;\n    }\n    if (!isZeroExponent && temp < 0 == isNegative) {\n      return result;\n    }\n    result = result | 0x800000;\n    exponentProduct = 0;\n    isNegative = SBORROW4(adjustedExponent,1);\n    mantissa1 = sumOfExponents - 0x80;\n    isZeroExponent = mantissa1 == 0;\n    exponent1 = mantissa1;\n  }\n  else {\n    product = (ulonglong)(exponent1 >> 5 | 0x8000000) * (ulonglong)(operand2 >> 5 | 0x8000000);\n    exponentProduct = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    isZeroExponent = result < 0x800000;\n    if (isZeroExponent) {\n      result = result << 1;\n    }\n    if (isZeroExponent) {\n      result = result | exponentProduct >> 0x1f;\n      exponentProduct = exponentProduct << 1;\n    }\n    result = mantissa1 & 0x80000000 | result;\n    mantissa1 = (sumOfExponents + -0x7f) - (uint)isZeroExponent;\n    isNegative = SBORROW4(mantissa1,0xfd);\n    isZeroExponent = mantissa1 == 0xfd;\n    exponent1 = mantissa1 - 0xfd;\n    if (mantissa1 < 0xfe) {\n      result = result + mantissa1 * 0x800000 + (uint)(0x7fffffff < exponentProduct);\n      if (exponentProduct == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZeroExponent || (int)exponent1 < 0 != isNegative) {\n    isZeroExponent = (int)(mantissa1 + 0x19) < 0;\n    if (mantissa1 == 0xffffffe7 || isZeroExponent != SCARRY4(mantissa1,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (mantissa1 != 0xffffffe7 && isZeroExponent == SCARRY4(mantissa1,0x19)) {\n      exponent1 = (result << 1) >> (-mantissa1 & 0xff);\n      mantissa1 = result << (mantissa1 + 0x20 & 0xff);\n      exponent1 = ((uint)((result & 0x80000000) != 0) << 0x1f | exponent1 >> 1) + (uint)((byte)exponent1 & 1);\n      if ((exponentProduct | mantissa1 << 1) == 0) {\n        exponent1 = exponent1 & ~(mantissa1 >> 0x1f);\n      }\n      return exponent1;\n    }\n    return result;\n  }\nLAB_08000e08:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cb8": "calculate_floating_point_08000cb8",
                "param_1": "operand1",
                "param_2": "operand2",
                "param_3": "roundingMode",
                "param_4": "exceptionFlag",
                "lVar1": "product",
                "uVar2": "result",
                "uVar3": "exponent1",
                "uVar6": "exponentProduct",
                "iVar4": "sumOfExponents",
                "iVar5": "adjustedExponent",
                "bVar9": "isZeroExponent",
                "bVar10": "isNegative",
                "iVar7": "temp",
                "uVar8": "mantissa1"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e20": {
            "entrypoint": "0x08000e20",
            "current_name": "calculate_floating_point_08000e20",
            "code": "\nuint calculateFloatingPoint_08000e20(uint firstHalf,uint secondHalf,undefined4 constant,uint flag)\n\n{\n  uint uVar1;\n  uint leadingZeros1;\n  int difference;\n  uint leadingZeros2;\n  int sum;\n  uint result;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  leadingZeros1 = firstHalf >> 0x17 & 0xff;\n  condition1 = leadingZeros1 == 0;\n  if (!condition1) {\n    flag = secondHalf >> 0x17 & 0xff;\n    condition1 = flag == 0;\n  }\n  if (!condition1) {\n    condition1 = leadingZeros1 == 0xff;\n  }\n  if (!condition1) {\n    condition1 = flag == 0xff;\n  }\n  if (condition1) {\n    flag = secondHalf >> 0x17 & 0xff;\n    result = firstHalf;\n    if (leadingZeros1 == 0xff) {\n      if (((firstHalf & 0x7fffff) != 0) || (result = secondHalf, flag == 0xff)) {\nLAB_08000e16:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (flag == 0xff) {\n        result = secondHalf;\n        if ((secondHalf & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (firstHalf ^ secondHalf) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      condition1 = (firstHalf & 0x7fffffff) == 0;\n      if (!condition1) {\n        condition1 = (secondHalf & 0x7fffffff) == 0;\n      }\n      if (!condition1) {\n        condition1 = leadingZeros1 == 0;\n        result = firstHalf & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            firstHalf = firstHalf << 1;\n            condition1 = (firstHalf & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          leadingZeros1 = leadingZeros1 - 1;\n        }\n        firstHalf = firstHalf | result;\n        condition1 = flag == 0;\n        result = secondHalf & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            secondHalf = secondHalf << 1;\n            condition1 = (secondHalf & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          flag = flag - 1;\n        }\n        secondHalf = secondHalf | result;\n        goto LAB_08000e38;\n      }\n      if ((firstHalf & 0x7fffffff) == 0) {\n        if ((secondHalf & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    firstHalf = firstHalf ^ secondHalf;\n  }\n  else {\nLAB_08000e38:\n    difference = leadingZeros1 - flag;\n    if (secondHalf << 9 == 0) {\n      firstHalf = (firstHalf ^ secondHalf) & 0x80000000 | firstHalf & 0x7fffff;\n      condition3 = SCARRY4(difference,0x7f);\n      sum = difference + 0x7f;\n      condition1 = sum < 0;\n      condition2 = sum == 0;\n      if (!condition2 && condition1 == condition3) {\n        condition3 = SBORROW4(0xff,sum);\n        condition1 = 0xff - sum < 0;\n        condition2 = sum == 0xff;\n      }\n      if (!condition2 && condition1 == condition3) {\n        firstHalf = firstHalf | sum * 0x800000;\n      }\n      if (!condition2 && condition1 == condition3) {\n        return firstHalf;\n      }\n      firstHalf = firstHalf | 0x800000;\n      leadingZeros1 = 0;\n      condition2 = SBORROW4(sum,1);\n      leadingZeros2 = difference + 0x7e;\n      condition1 = leadingZeros2 == 0;\n      result = leadingZeros2;\n    }\n    else {\n      uVar1 = (secondHalf << 9) >> 4 | 0x10000000;\n      leadingZeros1 = (firstHalf << 9) >> 4 | 0x10000000;\n      firstHalf = (firstHalf ^ secondHalf) & 0x80000000;\n      condition1 = uVar1 <= leadingZeros1;\n      if (!condition1) {\n        leadingZeros1 = leadingZeros1 << 1;\n      }\n      leadingZeros2 = difference + 0x7d + (uint)condition1;\n      result = 0x800000;\n      do {\n        if (uVar1 <= leadingZeros1) {\n          leadingZeros1 = leadingZeros1 - uVar1;\n          firstHalf = firstHalf | result;\n        }\n        condition1 = uVar1 >> 1 <= leadingZeros1;\n        if (condition1) {\n          leadingZeros1 = leadingZeros1 - (uVar1 >> 1);\n        }\n        if (condition1) {\n          firstHalf = firstHalf | result >> 1;\n        }\n        condition1 = uVar1 >> 2 <= leadingZeros1;\n        if (condition1) {\n          leadingZeros1 = leadingZeros1 - (uVar1 >> 2);\n        }\n        if (condition1) {\n          firstHalf = firstHalf | result >> 2;\n        }\n        condition1 = uVar1 >> 3 <= leadingZeros1;\n        if (condition1) {\n          leadingZeros1 = leadingZeros1 - (uVar1 >> 3);\n        }\n        if (condition1) {\n          firstHalf = firstHalf | result >> 3;\n        }\n        leadingZeros1 = leadingZeros1 * 0x10;\n        condition1 = leadingZeros1 == 0;\n        if (!condition1) {\n          result = result >> 4;\n          condition1 = result == 0;\n        }\n      } while (!condition1);\n      condition2 = SBORROW4(leadingZeros2,0xfd);\n      condition1 = leadingZeros2 == 0xfd;\n      result = leadingZeros2 - 0xfd;\n      if (leadingZeros2 < 0xfe) {\n        firstHalf = firstHalf + leadingZeros2 * 0x800000 + (uint)(uVar1 <= leadingZeros1);\n        if (leadingZeros1 - uVar1 == 0) {\n          firstHalf = firstHalf & 0xfffffffe;\n        }\n        return firstHalf;\n      }\n    }\n    if (condition1 || (int)result < 0 != condition2) {\n      condition1 = (int)(leadingZeros2 + 0x19) < 0;\n      if (leadingZeros2 == 0xffffffe7 || condition1 != SCARRY4(leadingZeros2,0x19)) {\n        firstHalf = firstHalf & 0x80000000;\n      }\n      if (leadingZeros2 == 0xffffffe7 || condition1 != SCARRY4(leadingZeros2,0x19)) {\n        return firstHalf;\n      }\n      result = (firstHalf << 1) >> (-leadingZeros2 & 0xff);\n      leadingZeros2 = firstHalf << (leadingZeros2 + 0x20 & 0xff);\n      result = ((uint)((firstHalf & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((leadingZeros1 | leadingZeros2 << 1) == 0) {\n        result = result & ~(leadingZeros2 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return firstHalf & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e20": "calculate_floating_point_08000e20",
                "param_1": "firstHalf",
                "param_2": "secondHalf",
                "param_3": "constant",
                "param_4": "flag",
                "uVar2": "leadingZeros1",
                "iVar3": "difference",
                "uVar4": "leadingZeros2",
                "iVar5": "sum",
                "uVar6": "result",
                "bVar7": "condition1",
                "bVar8": "condition2",
                "bVar9": "condition3"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f68": {
            "entrypoint": "0x08000f68",
            "current_name": "check_overflow_and_sign_08000f68",
            "code": "\nuint check_overflow_and_sign_08000f68(uint input_1,uint input_2)\n\n{\n  bool has_overflow;\n  uint double_input_1;\n  uint double_input_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  double_input_1 = input_1 * 2;\n  double_input_2 = input_2 * 2;\n  if (((int)double_input_1 >> 0x18 == -1 || (int)double_input_2 >> 0x18 == -1) &&\n     ((((int)double_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)double_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_inputs = double_input_1 | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  has_overflow = -1 < (int)combined_inputs;\n  if (has_overflow) {\n    input_1 = double_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((has_overflow && double_input_2 <= double_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!has_overflow || double_input_2 > double_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  result input_1;\n}\n\n",
            "renaming": {
                "FUN_08000f68": "check_overflow_and_sign_08000f68",
                "param_1": "input_1",
                "param_2": "input_2",
                "bVar1": "has_overflow",
                "uVar2": "double_input_1",
                "uVar3": "double_input_2",
                "uVar4": "combined_inputs",
                "bVar5": "is_zero",
                "return": "result"
            },
            "calling": [
                "FUN_08000fd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fc8": {
            "entrypoint": "0x08000fc8",
            "current_name": "concatenate_params_08000fc8",
            "code": "\nvoid concatenateParams_08000fc8(undefined4 dest,undefined4 src)\n\n{\n  concatenate_params_08000fd0(src,dest);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fc8": "concatenate_params_08000fc8",
                "param_1": "dest",
                "param_2": "src"
            },
            "calling": [
                "FUN_08001030"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fd0": {
            "entrypoint": "0x08000fd0",
            "current_name": "concatenate_params_08000fd0",
            "code": "\nundefined8 concatenateParams_08000fd0(undefined4 inputParam1,undefined4 inputParam2)\n\n{\n  check_overflow_and_sign_08000f68();\n  return CONCAT44(inputParam2,inputParam1);\n}\n\n",
            "renaming": {
                "FUN_08000fd0": "concatenate_params_08000fd0",
                "param_1": "inputParam1",
                "param_2": "inputParam2"
            },
            "calling": [
                "FUN_08000fc8",
                "FUN_08000ff4"
            ],
            "called": [
                "FUN_08000f68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ff4": {
            "entrypoint": "0x08000ff4",
            "current_name": "is_input_blank_08000ff4",
            "code": "\nbool is_input_blank_08000ff4(void)\n\n{\n  char input_character;\n  \n  concatenate_params_08000fd0();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000ff4": "is_input_blank_08000ff4",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001030": {
            "entrypoint": "0x08001030",
            "current_name": "check_if_concatenation_is_empty_08001030",
            "code": "\nbool checkIfConcatenationIsEmpty_08001030(void)\n\n{\n  char concatenationResult;\n  \n  performConcatenation();\n  return concatenationResult == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001030": "check_if_concatenation_is_empty_08001030",
                "in_CY": "concatenationResult",
                "concatenate_params_08000fc8": "performConcatenation"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fc8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001044": {
            "entrypoint": "0x08001044",
            "current_name": "check_value_08001044",
            "code": "\nuint checkValue_08001044(uint input)\n\n{\n  uint shiftValue;\n  \n  if (((input & 0x80000000) != 0) || (input << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shiftValue = 0x9e - ((input << 1) >> 0x18);\n  if (-1 < (int)shiftValue) {\n    return (input << 8 | 0x80000000) >> (shiftValue & 0xff);\n  }\n  if ((shiftValue == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08001044": "check_value_08001044",
                "param_1": "input",
                "uVar1": "shiftValue"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001084": {
            "entrypoint": "0x08001084",
            "current_name": "copy_memory_08001084",
            "code": "\nundefined4 * copyMemory_08001084(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *destPtrStart;\n  undefined4 *srcPtr;\n  uint remainingSize;\n  uint copySize;\n  bool continueCopying;\n  \n  destPtrStart = dest;\n  if ((((uint)src | (uint)dest) & 3) != 0) {\n    if (size < 8) {\n      copySize = size - 4;\n      if (3 < size) {\n        do {\n          destPtr = src;\n          srcPtr = destPtrStart;\n          continueCopying = copySize != 0;\n          copySize = copySize - 1;\n          *(undefined *)srcPtr = *(undefined *)destPtr;\n          destPtrStart = (undefined4 *)((int)srcPtr + 1);\n          src = (undefined4 *)((int)destPtr + 1);\n        } while (continueCopying);\n        *(undefined *)(undefined4 *)((int)srcPtr + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)srcPtr + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)srcPtr + 3) = *(undefined *)((int)destPtr + 3);\n        return dest;\n      }\n      goto LAB_08001108;\n    }\n    if ((((uint)src & 3) != 0) && (((uint)dest & 3) != 0)) {\n      copySize = 4 - ((uint)dest & 3);\n      size = size - copySize;\n      destPtr = dest;\n      srcPtr = src;\n      if (((uint)dest & 1) != 0) {\n        srcPtr = (undefined4 *)((int)src + 1);\n        destPtr = (undefined4 *)((int)dest + 1);\n        *(undefined *)dest = *(undefined *)src;\n      }\n      destPtrStart = destPtr;\n      src = srcPtr;\n      if ((copySize & 2) != 0) {\n        src = (undefined4 *)((int)srcPtr + 2);\n        destPtrStart = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *destPtrStart = *src;\n    destPtrStart[1] = src[1];\n    destPtrStart[2] = src[2];\n    destPtrStart[3] = src[3];\n    destPtrStart[4] = src[4];\n    destPtrStart[5] = src[5];\n    destPtrStart[6] = src[6];\n    destPtrStart[7] = src[7];\n    destPtrStart[8] = src[8];\n    destPtrStart[9] = src[9];\n    destPtrStart[10] = src[10];\n    destPtrStart[0xb] = src[0xb];\n    destPtrStart[0xc] = src[0xc];\n    destPtrStart[0xd] = src[0xd];\n    destPtrStart[0xe] = src[0xe];\n    destPtrStart[0xf] = src[0xf];\n    destPtrStart = destPtrStart + 0x10;\n    src = src + 0x10;\n    size = size - 0x40;\n  }\n  remainingSize = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *destPtrStart = *src;\n      destPtrStart[1] = src[1];\n      destPtrStart[2] = src[2];\n      destPtrStart[3] = src[3];\n      destPtrStart = destPtrStart + 4;\n      src = src + 4;\n      continueCopying = 0xf < remainingSize;\n      remainingSize = remainingSize - 0x10;\n    } while (continueCopying);\n  }\n  copySize = remainingSize + 0xc;\n  srcPtr = destPtrStart;\n  destPtr = src;\n  if (0xfffffff3 < remainingSize) {\n    do {\n      src = destPtr + 1;\n      *srcPtr = *destPtr;\n      continueCopying = 3 < copySize;\n      copySize = copySize - 4;\n      destPtrStart = srcPtr + 1;\n      srcPtr = srcPtr + 1;\n      destPtr = src;\n    } while (continueCopying);\n  }\nLAB_08001108:\n  if (copySize + 4 != 0) {\n    destPtr = destPtrStart;\n    srcPtr = src;\n    if ((copySize & 1) != 0) {\n      srcPtr = (undefined4 *)((int)src + 1);\n      destPtr = (undefined4 *)((int)destPtrStart + 1);\n      *(undefined *)destPtrStart = *(undefined *)src;\n    }\n    if ((copySize + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n    }\n  }\n  return dest;\n}\n\n",
            "renaming": {
                "FUN_08001084": "copy_memory_08001084",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "destPtrStart",
                "puVar3": "srcPtr",
                "uVar4": "remainingSize",
                "uVar5": "copySize",
                "bVar6": "continueCopying"
            },
            "calling": [
                "FUN_08009120",
                "FUN_080097cc",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "check_inputs_08001170",
            "code": "\nundefined4 checkInputs_08001170(uint input1,int input2,uint input3,int input4)\n\n{\n  if ((((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0)) &&\n     (((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001170": "check_inputs_08001170",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800119c": {
            "entrypoint": "0x0800119c",
            "current_name": "compute_result_0800119c",
            "code": "\nuint compute_result_0800119c(uint input_1,uint input_2)\n\n{\n  uint temp_var_2;\n  int temp_var_1;\n  uint temp_var_3;\n  \n  temp_var_1 = input_2 * 2 + 0x200000;\n  if (input_2 * 2 < 0xffe00000) {\n    if (-1 < temp_var_1) {\n      return 0;\n    }\n    temp_var_2 = temp_var_1 >> 0x15;\n    temp_var_3 = -temp_var_2 - 0x3e1;\n    if (temp_var_2 < 0xfffffc20 && temp_var_3 != 0) {\n      temp_var_2 = (input_2 << 0xb | 0x80000000 | input_1 >> 0x15) >> (temp_var_3 & 0xff);\n      if ((input_2 & 0x80000000) != 0) {\n        temp_var_2 = -temp_var_2;\n      }\n      return temp_var_2;\n    }\n  }\n  else if ((input_1 | input_2 << 0xc) != 0) {\n    return 0;\n  }\n  input_2 = input_2 & 0x80000000;\n  if (input_2 == 0) {\n    input_2 = 0x7fffffff;\n  }\n  return input_2;\n}\n\n",
            "renaming": {
                "FUN_0800119c": "compute_result_0800119c",
                "param_1": "input_1",
                "param_2": "input_2",
                "iVar2": "temp_var_1",
                "uVar1": "temp_var_2",
                "uVar3": "temp_var_3"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011ec": {
            "entrypoint": "0x080011ec",
            "current_name": "calculate_result_080011ec",
            "code": "\nundefined8 calculate_result_080011ec(int input_1,int input_2,int flag_1,int flag_2)\n\n{\n  undefined8 result;\n  \n  if ((flag_2 == 0) && (flag_1 == 0)) {\n    if (input_2 != 0 || input_1 != 0) {\n      input_2 = -1;\n      input_1 = -1;\n    }\n    return CONCAT44(input_2,input_1);\n  }\n  result = calculate_division_0800121c();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080011ec": "calculate_result_080011ec",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "flag_1",
                "param_4": "flag_2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_0800121c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800121c": {
            "entrypoint": "0x0800121c",
            "current_name": "calculate_division_0800121c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 calculate_division_0800121c(uint dividend,uint divisor,uint high_bits,uint carry_mask,uint *result)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  ulonglong quotient;\n  uint temp_divisor;\n  uint temp_dividend;\n  uint quotient1;\n  int shift_count;\n  uint quotient_combined;\n  uint rem_high;\n  uint rem_low;\n  uint *ptemp_divisor1;\n  uint temp_divisor2;\n  uint quotient1_rem;\n  uint quotient2_rem;\n  bool carry_flag;\n  undefined8 quotient4;\n  \n  if (carry_mask == 0) {\n    if (divisor < high_bits) {\n      shift_count = LZCOUNT(high_bits);\n      rem_high = high_bits;\n      if (shift_count != 0) {\n        rem_high = high_bits << shift_count;\n        divisor = dividend >> (0x20U - shift_count & 0xff) | divisor << shift_count;\n        dividend = dividend << shift_count;\n      }\n      quotient1_rem = rem_high >> 0x10;\n      rem_low = divisor / quotient1_rem;\n      temp_divisor2 = rem_low * (rem_high & 0xffff);\n      quotient_combined = dividend >> 0x10 | (divisor - quotient1_rem * rem_low) * 0x10000;\n      temp_dividend = rem_low;\n      if (quotient_combined <= temp_divisor2 && temp_divisor2 - quotient_combined != 0) {\n        carry_flag = CARRY4(rem_high,quotient_combined);\n        quotient_combined = rem_high + quotient_combined;\n        temp_dividend = rem_low - 1;\n        if ((carry_flag == false) && (quotient_combined <= temp_divisor2 && temp_divisor2 - quotient_combined != 0)) {\n          temp_dividend = rem_low - 2;\n          quotient_combined = quotient_combined + rem_high;\n        }\n      }\n      temp_divisor = (quotient_combined - temp_divisor2) / quotient1_rem;\n      quotient1 = temp_divisor * (rem_high & 0xffff);\n      rem_low = dividend & 0xffff | ((quotient_combined - temp_divisor2) - quotient1_rem * temp_divisor) * 0x10000;\n      quotient_combined = temp_divisor;\n      if (rem_low <= quotient1 && quotient1 - rem_low != 0) {\n        carry_flag = CARRY4(rem_high,rem_low);\n        rem_low = rem_high + rem_low;\n        quotient_combined = temp_divisor - 1;\n        if ((carry_flag == false) && (rem_low <= quotient1 && quotient1 - rem_low != 0)) {\n          quotient_combined = temp_divisor - 2;\n          rem_low = rem_low + rem_high;\n        }\n      }\n      quotient_combined = quotient_combined | temp_dividend << 0x10;\n      ptemp_divisor1 = (uint *)0x0;\n      rem_low = rem_low - quotient1;\n    }\n    else {\n      if (high_bits == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x8001302);\n        quotient4 = (*UNRECOVERED_JUMPTABLE)();\n        return quotient4;\n      }\n      shift_count = LZCOUNT(high_bits);\n      if (shift_count == 0) {\n        ptemp_divisor1 = (uint *)0x1;\n        divisor = divisor - high_bits;\n        quotient1_rem = high_bits >> 0x10;\n        temp_divisor = high_bits & 0xffff;\n        rem_high = high_bits;\n      }\n      else {\n        rem_high = high_bits << shift_count;\n        quotient_combined = divisor >> (0x20U - shift_count & 0xff);\n        quotient1_rem = rem_high >> 0x10;\n        temp_divisor2 = quotient_combined / quotient1_rem;\n        temp_divisor = rem_high & 0xffff;\n        quotient1 = temp_divisor2 * temp_divisor;\n        rem_low = dividend >> (0x20U - shift_count & 0xff) | divisor << shift_count;\n        temp_dividend = rem_low >> 0x10 | (quotient_combined - quotient1_rem * temp_divisor2) * 0x10000;\n        dividend = dividend << shift_count;\n        quotient_combined = temp_divisor2;\n        if (temp_dividend <= quotient1 && quotient1 - temp_dividend != 0) {\n          carry_flag = CARRY4(rem_high,temp_dividend);\n          temp_dividend = rem_high + temp_dividend;\n          quotient_combined = temp_divisor2 - 1;\n          if ((carry_flag == false) && (temp_dividend <= quotient1 && quotient1 - temp_dividend != 0)) {\n            quotient_combined = temp_divisor2 - 2;\n            temp_dividend = temp_dividend + rem_high;\n          }\n        }\n        temp_divisor2 = (temp_dividend - quotient1) / quotient1_rem;\n        quotient2_rem = temp_divisor2 * temp_divisor;\n        divisor = rem_low & 0xffff | ((temp_dividend - quotient1) - quotient1_rem * temp_divisor2) * 0x10000;\n        temp_dividend = temp_divisor2;\n        if (divisor <= quotient2_rem && quotient2_rem - divisor != 0) {\n          carry_flag = CARRY4(rem_high,divisor);\n          divisor = rem_high + divisor;\n          temp_dividend = temp_divisor2 - 1;\n          if ((carry_flag == false) && (divisor <= quotient2_rem && quotient2_rem - divisor != 0)) {\n            temp_dividend = temp_divisor2 - 2;\n            divisor = divisor + rem_high;\n          }\n        }\n        divisor = divisor - quotient2_rem;\n        ptemp_divisor1 = (uint *)(temp_dividend | quotient_combined << 0x10);\n      }\n      temp_divisor2 = divisor / quotient1_rem;\n      quotient_combined = temp_divisor * temp_divisor2;\n      rem_low = dividend >> 0x10 | (divisor - quotient1_rem * temp_divisor2) * 0x10000;\n      temp_dividend = temp_divisor2;\n      if (rem_low <= quotient_combined && quotient_combined - rem_low != 0) {\n        carry_flag = CARRY4(rem_high,rem_low);\n        rem_low = rem_high + rem_low;\n        temp_dividend = temp_divisor2 - 1;\n        if ((carry_flag == false) && (rem_low <= quotient_combined && quotient_combined - rem_low != 0)) {\n          temp_dividend = temp_divisor2 - 2;\n          rem_low = rem_low + rem_high;\n        }\n      }\n      temp_divisor2 = (rem_low - quotient_combined) / quotient1_rem;\n      temp_divisor = temp_divisor * temp_divisor2;\n      rem_low = dividend & 0xffff | ((rem_low - quotient_combined) - quotient1_rem * temp_divisor2) * 0x10000;\n      quotient_combined = temp_divisor2;\n      if (rem_low <= temp_divisor && temp_divisor - rem_low != 0) {\n        carry_flag = CARRY4(rem_high,rem_low);\n        rem_low = rem_high + rem_low;\n        quotient_combined = temp_divisor2 - 1;\n        if ((carry_flag == false) && (rem_low <= temp_divisor && temp_divisor - rem_low != 0)) {\n          quotient_combined = temp_divisor2 - 2;\n          rem_low = rem_low + rem_high;\n        }\n      }\n      rem_low = rem_low - temp_divisor;\n      quotient_combined = quotient_combined | temp_dividend << 0x10;\n    }\n    if (result != (uint *)0x0) {\n      *result = rem_low >> LZCOUNT(high_bits);\n      result[1] = 0;\n    }\n  }\n  else {\n    ptemp_divisor1 = result;\n    if (divisor < carry_mask) {\n      if (result != (uint *)0x0) {\n        *result = dividend;\n        result[1] = divisor;\n        return 0;\n      }\n      quotient_combined = 0;\n    }\n    else {\n      shift_count = LZCOUNT(carry_mask);\n      if (shift_count == 0) {\n        if ((carry_mask < divisor) || (high_bits <= dividend)) {\n          carry_flag = dividend < high_bits;\n          dividend = dividend - high_bits;\n          divisor = (divisor - carry_mask) - (uint)carry_flag;\n          quotient_combined = 1;\n        }\n        else {\n          quotient_combined = 0;\n        }\n        ptemp_divisor1 = (uint *)0x0;\n        if (result != (uint *)0x0) {\n          *result = dividend;\n          result[1] = divisor;\n        }\n      }\n      else {\n        rem_low = 0x20 - shift_count;\n        temp_divisor = high_bits >> (rem_low & 0xff) | carry_mask << shift_count;\n        rem_high = divisor >> (rem_low & 0xff);\n        quotient1 = temp_divisor >> 0x10;\n        temp_divisor2 = rem_high / quotient1;\n        quotient1_rem = temp_divisor2 * (temp_divisor & 0xffff);\n        quotient_combined = divisor << shift_count | dividend >> (rem_low & 0xff);\n        temp_dividend = quotient_combined >> 0x10 | (rem_high - quotient1 * temp_divisor2) * 0x10000;\n        dividend = dividend << shift_count;\n        rem_high = temp_divisor2;\n        if (temp_dividend <= quotient1_rem && quotient1_rem - temp_dividend != 0) {\n          carry_flag = CARRY4(temp_divisor,temp_dividend);\n          temp_dividend = temp_divisor + temp_dividend;\n          rem_high = temp_divisor2 - 1;\n          if ((carry_flag == false) && (temp_dividend <= quotient1_rem && quotient1_rem - temp_dividend != 0)) {\n            rem_high = temp_divisor2 - 2;\n            temp_dividend = temp_dividend + temp_divisor;\n          }\n        }\n        temp_divisor2 = (temp_dividend - quotient1_rem) / quotient1;\n        quotient2_rem = temp_divisor2 * (temp_divisor & 0xffff);\n        temp_dividend = quotient_combined & 0xffff | ((temp_dividend - quotient1_rem) - quotient1 * temp_divisor2) * 0x10000;\n        quotient_combined = temp_divisor2;\n        if (temp_dividend <= quotient2_rem && quotient2_rem - temp_dividend != 0) {\n          carry_flag = CARRY4(temp_divisor,temp_dividend);\n          temp_dividend = temp_divisor + temp_dividend;\n          quotient_combined = temp_divisor2 - 1;\n          if ((carry_flag == false) && (temp_dividend <= quotient2_rem && quotient2_rem - temp_dividend != 0)) {\n            quotient_combined = temp_divisor2 - 2;\n            temp_dividend = temp_dividend + temp_divisor;\n          }\n        }\n        quotient_combined = quotient_combined | rem_high << 0x10;\n        quotient = (ulonglong)quotient_combined * (ulonglong)(high_bits << shift_count);\n        if (CONCAT44(temp_dividend - quotient2_rem,dividend) < quotient) {\n          quotient_combined = quotient_combined - 1;\n          quotient = quotient - CONCAT44(temp_divisor,high_bits << shift_count);\n        }\n        if (result != (uint *)0x0) {\n          rem_high = ((temp_dividend - quotient2_rem) - (int)(quotient >> 0x20)) - (uint)(dividend < (uint)quotient);\n          *result = rem_high << (rem_low & 0xff) | dividend - (uint)quotient >> shift_count;\n          result[1] = rem_high >> shift_count;\n          ptemp_divisor1 = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(ptemp_divisor1,quotient_combined);\n}\n\n",
            "renaming": {
                "FUN_0800121c": "calculate_division_0800121c",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "high_bits",
                "param_4": "carry_mask",
                "param_5": "result",
                "uVar1": "quotient",
                "uVar2": "temp_divisor",
                "uVar3": "temp_dividend",
                "uVar4": "quotient1",
                "uVar6": "quotient_combined",
                "uVar7": "rem_high",
                "uVar8": "rem_low",
                "uVar9": "temp_divisor1",
                "uVar10": "temp_divisor2",
                "uVar11": "quotient1_rem",
                "uVar12": "quotient2_rem",
                "iVar5": "shift_count",
                "bVar13": "carry_flag"
            },
            "calling": [
                "FUN_080011ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014f0": {
            "entrypoint": "0x080014f0",
            "current_name": "initialize_and_configure_memory_080014f0",
            "code": "\n\n\nundefined4 initialize_and_configure_memory_080014f0(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  configure_memory(3);\n  initialize_memory_and_write_value(0xf);\n  FUNC_08002d8a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080014f0": "initialize_and_configure_memory_080014f0",
                "configure_memory_08001714": "configure_memory",
                "initialize_memory_and_write_value_0800151c": "initialize_memory_and_write_value"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_0800151c",
                "FUN_08002d8a",
                "FUN_08001714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800151c": {
            "entrypoint": "0x0800151c",
            "current_name": "initialize_memory_and_write_value_0800151c",
            "code": "\nundefined4 initializeMemoryAndWriteValue_0800151c(uint value)\n\n{\n  int memoryInitializationResult;\n  undefined4 returnValue;\n  \n  memoryInitializationResult = initialize_memory_08001762((int)((ulonglong)DAT_20000018 / (1000 / (ulonglong)DAT_20000004)));\n  if (memoryInitializationResult == 0) {\n    if (value < 0x10) {\n      write_value_to_memory_with_mask_0800172a(0xffffffff,value,0);\n      returnValue = 0;\n      DAT_20000000 = value;\n    }\n    else {\n      returnValue = 1;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800151c": "initialize_memory_and_write_value_0800151c",
                "param_1": "value",
                "iVar1": "memoryInitializationResult",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_080014f0",
                "FUN_08003260"
            ],
            "called": [
                "FUN_0800172a",
                "FUN_08001762"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800157c": {
            "entrypoint": "0x0800157c",
            "current_name": "update_data_0800157c",
            "code": "\nvoid updateData_0800157c(void)\n\n{\n  DAT_20000a48 = DAT_20000a48 + (uint)DAT_20000004;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800157c": "update_data_0800157c"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015a0": {
            "entrypoint": "0x080015a0",
            "current_name": "get_global_variable_080015a0",
            "code": "\nundefined4 get_global_variable_080015a0(void)\n\n{\n  return DAT_20000a48;\n}\n\n",
            "renaming": {
                "FUN_080015a0": "get_global_variable_080015a0"
            },
            "calling": [
                "FUN_08004436",
                "FUN_08001ccc",
                "FUN_08002c2e",
                "FUN_080027f4",
                "FUN_08002ca8",
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_08004f2c",
                "FUN_08002d98",
                "FUN_08003260",
                "FUN_08002640",
                "FUN_08001f6c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b4": {
            "entrypoint": "0x080015b4",
            "current_name": "set_memory_configuration_080015b4",
            "code": "\n\n\nvoid setMemoryConfiguration_080015b4(uint configValue)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (configValue & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b4": "set_memory_configuration_080015b4",
                "param_1": "configValue"
            },
            "calling": [
                "FUN_08001714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015fc": {
            "entrypoint": "0x080015fc",
            "current_name": "get_top_three_bits_080015fc",
            "code": "\n\n\nuint getTopThreeBits_080015fc(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_080015fc": "get_top_three_bits_080015fc"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001618": {
            "entrypoint": "0x08001618",
            "current_name": "write_value_to_memory_08001618",
            "code": "\nvoid write_value_to_memory_08001618(byte address,uint value)\n\n{\n  if ((char)address < '\\0') {\n    *(char *)((address & 0xf) + 0xe000ed14) = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)address + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001618": "write_value_to_memory_08001618",
                "param_1": "address",
                "param_2": "value"
            },
            "calling": [
                "FUN_0800172a",
                "FUN_080016d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800166c": {
            "entrypoint": "0x0800166c",
            "current_name": "apply_mask_and_shift_0800166c",
            "code": "\nuint applyMaskAndShift_0800166c(uint inputParam,uint data,uint mask)\n\n{\n  uint shiftAmount;\n  \n  inputParam = inputParam & 7;\n  shiftAmount = 7 - inputParam;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (inputParam + 4 < 7) {\n    inputParam = 0;\n  }\n  else {\n    inputParam = inputParam - 3;\n  }\n  return mask & ~(-1 << (inputParam & 0xff)) |\n         (~(-1 << (shiftAmount & 0xff)) & data) << (inputParam & 0xff);\n}\n\n",
            "renaming": {
                "FUN_0800166c": "apply_mask_and_shift_0800166c",
                "param_1": "inputParam",
                "param_2": "data",
                "param_3": "mask",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016d0": {
            "entrypoint": "0x080016d0",
            "current_name": "check_and_initialize_memory_080016d0",
            "code": "\n\n\nbool checkAndInitializeMemory_080016d0(int inputValue)\n\n{\n  bool isInRange;\n  \n  isInRange = inputValue - 1U < 0x1000000;\n  if (isInRange) {\n    _DAT_e000e014 = inputValue + -1;\n    writeValueToMemory(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isInRange;\n}\n\n",
            "renaming": {
                "FUN_080016d0": "check_and_initialize_memory_080016d0",
                "param_1": "inputValue",
                "bVar1": "isInRange",
                "write_value_to_memory_08001618": "writeValueToMemory"
            },
            "calling": [
                "FUN_08001762"
            ],
            "called": [
                "FUN_08001618"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001714": {
            "entrypoint": "0x08001714",
            "current_name": "configure_memory_08001714",
            "code": "\nvoid configureMemory_08001714(undefined4 configuration)\n\n{\n  setMemoryConfiguration(configuration);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001714": "configure_memory_08001714",
                "param_1": "configuration",
                "set_memory_configuration_080015b4": "setMemoryConfiguration"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [
                "FUN_080015b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800172a": {
            "entrypoint": "0x0800172a",
            "current_name": "write_value_to_memory_with_mask_0800172a",
            "code": "\nvoid writeValueToMemoryWithMask_0800172a(char targetAddress,undefined4 mask,undefined4 shiftAmount)\n\n{\n  undefined4 maskedValue;\n  \n  maskedValue = get_top_three_bits_080015fc();\n  maskedValue = apply_mask_and_shift_0800166c(maskedValue,mask,shiftAmount);\n  write_value_to_memory_08001618((int)targetAddress,maskedValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800172a": "write_value_to_memory_with_mask_0800172a",
                "param_1": "targetAddress",
                "param_2": "mask",
                "param_3": "shiftAmount",
                "uVar1": "maskedValue"
            },
            "calling": [
                "FUN_0800151c",
                "FUN_080052a0"
            ],
            "called": [
                "FUN_08001618",
                "FUN_080015fc",
                "FUN_0800166c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001762": {
            "entrypoint": "0x08001762",
            "current_name": "initialize_memory_08001762",
            "code": "\nundefined4 initialize_memory_08001762(undefined4 input_param)\n\n{\n  undefined4 result;\n  \n  result = check_and_initialize_memory_08001762_080016d0(input_param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001762": "initialize_memory_08001762",
                "param_1": "input_param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0800151c",
                "FUN_080052a0"
            ],
            "called": [
                "FUN_080016d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800177c": {
            "entrypoint": "0x0800177c",
            "current_name": "set_bit_flag_0800177c",
            "code": "\n\n\nvoid setBitFlag_0800177c(int flagValue)\n\n{\n  if (flagValue == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800177c": "set_bit_flag_0800177c",
                "param_1": "flagValue"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017b4": {
            "entrypoint": "0x080017b4",
            "current_name": "initialize_data_processing_080017b4",
            "code": "\nvoid initializeDataProcessing_080017b4(void)\n\n{\n  initializeAndProcessData(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080017b4": "initialize_data_processing_080017b4",
                "initialize_and_process_data_08004f78": "initializeAndProcessData"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [
                "FUN_08004f78"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017c4": {
            "entrypoint": "0x080017c4",
            "current_name": "update_bitwise_operations_080017c4",
            "code": "\n\n\nvoid updateBitwiseOperations_080017c4(uint *outputArr,uint *inputArr)\n\n{\n  uint bitMask;\n  uint bitCheck;\n  uint opcode;\n  uint *outputAddr;\n  int addrIndex;\n  uint newValue;\n  uint bitIndex;\n  \n  newValue = 0;\n  bitIndex = 0;\n  do {\n    if (0xf < bitIndex) {\n      return;\n    }\n    bitMask = 1 << (bitIndex & 0xff);\n    bitCheck = *inputArr & bitMask;\n    if (bitCheck == bitMask) {\n      opcode = inputArr[1];\n      if (opcode == 0x12) {\n        newValue = inputArr[3] + 0xc;\n      }\n      else if (opcode < 0x13) {\n        if (opcode == 2) {\n          newValue = inputArr[3] + 8;\n        }\n        else if (opcode < 3) {\n          if (opcode == 0) goto LAB_08001882;\n          if (opcode == 1) {\n            newValue = inputArr[3];\n          }\n        }\n        else if (opcode == 3) {\n          newValue = 0;\n        }\n        else if (opcode == 0x11) {\n          newValue = inputArr[3] + 4;\n        }\n      }\n      else if (opcode == 0x10210000) {\nLAB_08001882:\n        if (inputArr[2] == 0) {\n          newValue = 4;\n        }\n        else if (inputArr[2] == 1) {\n          newValue = 8;\n          outputArr[4] = bitMask;\n        }\n        else {\n          newValue = 8;\n          outputArr[5] = bitMask;\n        }\n      }\n      else if (opcode < 0x10210001) {\n        if ((opcode == 0x10110000) || (opcode == 0x10120000)) goto LAB_08001882;\n      }\n      else if (((opcode == 0x10310000) || (opcode == 0x10320000)) || (opcode == 0x10220000))\n      goto LAB_08001882;\n      if (bitCheck < 0x100) {\n        bitMask = bitIndex << 2;\n        outputAddr = outputArr;\n      }\n      else {\n        outputAddr = outputArr + 1;\n        bitMask = (bitIndex - 8) * 4;\n      }\n      *outputAddr = *outputAddr & ~(0xf << (bitMask & 0xff)) | newValue << (bitMask & 0xff);\n      if ((inputArr[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        if (outputArr == (uint *)0x40010800) {\n          addrIndex = 0;\n        }\n        else if (outputArr == (uint *)0x40010c00) {\n          addrIndex = 1;\n        }\n        else if (outputArr == (uint *)0x40011000) {\n          addrIndex = 2;\n        }\n        else if (outputArr == (uint *)0x40011400) {\n          addrIndex = 3;\n        }\n        else {\n          addrIndex = 4;\n        }\n        *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40010000) =\n             addrIndex << ((bitIndex & 3) << 2) |\n             ~(0xf << ((bitIndex & 3) << 2)) & *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40010000);\n        if ((inputArr[1] & 0x10000) == 0) {\n          _DAT_40010400 = ~bitCheck & _DAT_40010400;\n        }\n        else {\n          _DAT_40010400 = bitCheck | _DAT_40010400;\n        }\n        if ((inputArr[1] & 0x20000) == 0) {\n          _DAT_40010404 = ~bitCheck & _DAT_40010404;\n        }\n        else {\n          _DAT_40010404 = bitCheck | _DAT_40010404;\n        }\n        if ((inputArr[1] & 0x100000) == 0) {\n          _DAT_40010408 = ~bitCheck & _DAT_40010408;\n        }\n        else {\n          _DAT_40010408 = bitCheck | _DAT_40010408;\n        }\n        if ((inputArr[1] & 0x200000) == 0) {\n          _DAT_4001040c = ~bitCheck & _DAT_4001040c;\n        }\n        else {\n          _DAT_4001040c = bitCheck | _DAT_4001040c;\n        }\n      }\n    }\n    bitIndex = bitIndex + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080017c4": "update_bitwise_operations_080017c4",
                "param_1": "outputArr",
                "param_2": "inputArr",
                "uVar1": "bitMask",
                "uVar2": "bitCheck",
                "uVar3": "opcode",
                "puVar4": "outputAddr",
                "iVar5": "addrIndex",
                "local_10": "newValue",
                "local_c": "bitIndex"
            },
            "calling": [
                "FUN_08005680",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a80": {
            "entrypoint": "0x08001a80",
            "current_name": "update_param_value_08001a80",
            "code": "\nvoid updateParamValue_08001a80(int baseAddress,ushort newValue,char flag)\n\n{\n  if (flag == '\\0') {\n    *(uint *)(baseAddress + 0x10) = (uint)newValue << 0x10;\n  }\n  else {\n    *(uint *)(baseAddress + 0x10) = (uint)newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a80": "update_param_value_08001a80",
                "param_1": "baseAddress",
                "param_2": "newValue",
                "param_3": "flag"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "calculate_params_08001ab0",
            "code": "\nundefined4 calculateParams_08001ab0(uint **input)\n\n{\n  uint dataShifted;\n  char isValid;\n  undefined4 result;\n  uint divResult;\n  bool isZero;\n  \n  if (input == (uint **)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)input + 0x3d) == '\\0') {\n      *(undefined *)(input + 0xf) = 0;\n      FUNC_08001cb8(input);\n    }\n    *(undefined *)((int)input + 0x3d) = 0x24;\n    **input = **input & 0xfffffffe;\n    dataShifted = get_data_shifted_08003518();\n    if (input[1] < (uint *)0x186a1) {\n      divResult = dataShifted;\n      if (dataShifted < 2000000) {\n        divResult = 1;\n      }\n      isValid = (char)divResult;\n      if (1999999 < dataShifted) {\n        isValid = '\\0';\n      }\n    }\n    else {\n      divResult = dataShifted;\n      if (dataShifted < 4000000) {\n        divResult = 1;\n      }\n      isValid = (char)divResult;\n      if (3999999 < dataShifted) {\n        isValid = '\\0';\n      }\n    }\n    if (isValid == '\\0') {\n      divResult = dataShifted / 1000000;\n      (*input)[1] = divResult;\n      if ((uint *)0x186a0 < input[1]) {\n        divResult = (divResult * 300) / 1000;\n      }\n      (*input)[8] = divResult + 1;\n      if (input[1] < (uint *)0x186a1) {\n        dataShifted = (dataShifted - 1) / (uint)((int)input[1] << 1) + 1 & 0xfff;\n        if (dataShifted < 4) {\n          dataShifted = 4;\n        }\n      }\n      else {\n        if (input[2] == (uint *)0x0) {\n          divResult = (dataShifted - 1) / (uint)((int)input[1] * 3) + 1 & 0xfff;\n          isZero = divResult == 0;\n          if (isZero) {\n            divResult = 1;\n          }\n          isValid = (char)divResult;\n          if (!isZero) {\n            isValid = '\\0';\n          }\n        }\n        else {\n          divResult = (dataShifted - 1) / (uint)((int)input[1] * 0x19) + 1 & 0xfff;\n          isZero = divResult == 0;\n          if (isZero) {\n            divResult = 1;\n          }\n          isValid = (char)divResult;\n          if (!isZero) {\n            isValid = '\\0';\n          }\n        }\n        if (isValid == '\\0') {\n          if (input[2] == (uint *)0x0) {\n            dataShifted = (dataShifted - 1) / (uint)((int)input[1] * 3) + 1 & 0xfff | 0x8000;\n          }\n          else {\n            dataShifted = (dataShifted - 1) / (uint)((int)input[1] * 0x19) + 1 & 0xfff | 0xc000;\n          }\n        }\n        else {\n          dataShifted = 1;\n        }\n      }\n      (*input)[7] = dataShifted;\n      **input = (uint)input[8] | (uint)input[7];\n      (*input)[2] = (uint)input[3] | (uint)input[4];\n      (*input)[3] = (uint)input[6] | (uint)input[5];\n      **input = **input | 1;\n      input[0x10] = (uint *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      input[0xc] = (uint *)0x0;\n      *(undefined *)((int)input + 0x3e) = 0;\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "calculate_params_08001ab0",
                "param_1": "input",
                "uVar1": "dataShifted",
                "cVar2": "isValid",
                "uVar3": "result",
                "uVar4": "divResult",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_08005348"
            ],
            "called": [
                "FUN_08003518",
                "FUN_08001cb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cb8": {
            "entrypoint": "0x08001cb8",
            "current_name": "FUNC_08001cb8",
            "code": "\nvoid FUNC_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cb8": "FUNC_08001cb8"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ccc": {
            "entrypoint": "0x08001ccc",
            "current_name": "process_data_08001ccc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001d5e) */\n/* WARNING: Removing unreachable block (ram,0x08001d70) */\n/* WARNING: Removing unreachable block (ram,0x08001d72) */\n/* WARNING: Removing unreachable block (ram,0x08001d74) */\n\nundefined4\nprocessData_08001ccc(uint **dataPtr,undefined2 param1,undefined2 param2,undefined2 param3,uint *paramPtr,\n            undefined2 param4,undefined4 param5)\n\n{\n  int globalVar;\n  int localVar;\n  undefined4 returnValue;\n  uint *valuePtr;\n  \n  globalVar = get_global_variable_080015a0();\n  if (*(char *)((int)dataPtr + 0x3d) == ' ') {\n    do {\n      if ((~(*dataPtr)[6] & 2) != 0) {\n        localVar = 0;\n        goto LAB_08001d9c;\n      }\n      localVar = get_global_variable_080015a0();\n    } while ((uint)(localVar - globalVar) < 0x1a);\n    dataPtr[0xc] = (uint *)0x0;\n    *(undefined *)((int)dataPtr + 0x3d) = 0x20;\n    *(undefined *)((int)dataPtr + 0x3e) = 0;\n    *(undefined *)(dataPtr + 0xf) = 0;\n    localVar = 3;\nLAB_08001d9c:\n    if (localVar == 0) {\n      if (*(char *)(dataPtr + 0xf) == '\\x01') {\n        returnValue = 2;\n      }\n      else {\n        *(undefined *)(dataPtr + 0xf) = 1;\n        if ((**dataPtr & 1) != 1) {\n          **dataPtr = **dataPtr | 1;\n        }\n        **dataPtr = **dataPtr & 0xfffff7ff;\n        *(undefined *)((int)dataPtr + 0x3d) = 0x21;\n        *(undefined *)((int)dataPtr + 0x3e) = 0x40;\n        dataPtr[0x10] = (uint *)0x0;\n        dataPtr[9] = paramPtr;\n        *(undefined2 *)((int)dataPtr + 0x2a) = param4;\n        dataPtr[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(dataPtr + 10) = *(undefined2 *)((int)dataPtr + 0x2a);\n        localVar = update_flag_status_08002640(dataPtr,param1,param2,param3,param5,globalVar);\n        if (localVar == 0) {\n          while (*(short *)(dataPtr + 10) != 0) {\n            localVar = update_flag_status_08002bb4(dataPtr,param5,globalVar);\n            if (localVar != 0) {\n              if (dataPtr[0x10] == (uint *)0x4) {\n                **dataPtr = **dataPtr | 0x200;\n                return 1;\n              }\n              return 3;\n            }\n            valuePtr = dataPtr[9];\n            dataPtr[9] = (uint *)((int)valuePtr + 1);\n            (*dataPtr)[4] = (uint)*(byte *)valuePtr;\n            *(short *)(dataPtr + 10) = *(short *)(dataPtr + 10) + -1;\n            *(short *)((int)dataPtr + 0x2a) = *(short *)((int)dataPtr + 0x2a) + -1;\n            if ((((*dataPtr)[5] & 4) == 4) && (*(short *)(dataPtr + 10) != 0)) {\n              valuePtr = dataPtr[9];\n              dataPtr[9] = (uint *)((int)valuePtr + 1);\n              (*dataPtr)[4] = (uint)*(byte *)valuePtr;\n              *(short *)(dataPtr + 10) = *(short *)(dataPtr + 10) + -1;\n              *(short *)((int)dataPtr + 0x2a) = *(short *)((int)dataPtr + 0x2a) + -1;\n            }\n          }\n          globalVar = check_and_adjust_params_08002c2e(dataPtr,param5,globalVar);\n          if (globalVar == 0) {\n            **dataPtr = **dataPtr | 0x200;\n            *(undefined *)((int)dataPtr + 0x3d) = 0x20;\n            *(undefined *)((int)dataPtr + 0x3e) = 0;\n            *(undefined *)(dataPtr + 0xf) = 0;\n            returnValue = 0;\n          }\n          else if (dataPtr[0x10] == (uint *)0x4) {\n            **dataPtr = **dataPtr | 0x200;\n            returnValue = 1;\n          }\n          else {\n            returnValue = 3;\n          }\n        }\n        else if (dataPtr[0x10] == (uint *)0x4) {\n          *(undefined *)(dataPtr + 0xf) = 0;\n          returnValue = 1;\n        }\n        else {\n          *(undefined *)(dataPtr + 0xf) = 0;\n          returnValue = 3;\n        }\n      }\n    }\n    else {\n      returnValue = 2;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001ccc": "process_data_08001ccc",
                "param_1": "dataPtr",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "paramPtr",
                "param_6": "param4",
                "param_7": "param5",
                "iVar1": "globalVar",
                "iVar2": "localVar",
                "uVar3": "returnValue",
                "puVar4": "valuePtr"
            },
            "calling": [
                "FUN_08004ea4"
            ],
            "called": [
                "FUN_08002c2e",
                "FUN_08002bb4",
                "FUN_080015a0",
                "FUN_08002640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f6c": {
            "entrypoint": "0x08001f6c",
            "current_name": "process_data_08001f6c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080024e6) */\n/* WARNING: Removing unreachable block (ram,0x080024f8) */\n/* WARNING: Removing unreachable block (ram,0x080024fa) */\n/* WARNING: Removing unreachable block (ram,0x080024fc) */\n/* WARNING: Removing unreachable block (ram,0x08002000) */\n/* WARNING: Removing unreachable block (ram,0x08002012) */\n/* WARNING: Removing unreachable block (ram,0x08002014) */\n/* WARNING: Removing unreachable block (ram,0x08002016) */\n/* WARNING: Removing unreachable block (ram,0x080023f4) */\n/* WARNING: Removing unreachable block (ram,0x08002406) */\n/* WARNING: Removing unreachable block (ram,0x08002408) */\n/* WARNING: Removing unreachable block (ram,0x0800240a) */\n/* WARNING: Removing unreachable block (ram,0x080022d6) */\n/* WARNING: Removing unreachable block (ram,0x080022e8) */\n/* WARNING: Removing unreachable block (ram,0x080022ea) */\n/* WARNING: Removing unreachable block (ram,0x080022ec) */\n\nundefined4\nprocessData_08001f6c(uint **input,undefined2 param2,undefined2 param3,undefined2 param4,uint *param5,\n            undefined2 param6,uint param7)\n\n{\n  int variable1;\n  uint variable2;\n  int variable3;\n  undefined4 variable4;\n  uint *variable5;\n  \n  variable1 = get_global_variable_080015a0();\n  if (*(char *)((int)input + 0x3d) == ' ') {\n    do {\n      if ((~(*input)[6] & 2) != 0) {\n        variable3 = 0;\n        goto LAB_08002040;\n      }\n      variable3 = get_global_variable_080015a0();\n    } while ((uint)(variable3 - variable1) < 0x1a);\n    input[0xc] = (uint *)0x0;\n    *(undefined *)((int)input + 0x3d) = 0x20;\n    *(undefined *)((int)input + 0x3e) = 0;\n    *(undefined *)(input + 0xf) = 0;\n    variable3 = 3;\nLAB_08002040:\n    if (variable3 == 0) {\n      if (*(char *)(input + 0xf) == '\\x01') {\n        variable4 = 2;\n      }\n      else {\n        *(undefined *)(input + 0xf) = 1;\n        if ((**input & 1) != 1) {\n          **input = **input | 1;\n        }\n        **input = **input & 0xfffff7ff;\n        *(undefined *)((int)input + 0x3d) = 0x22;\n        *(undefined *)((int)input + 0x3e) = 0x40;\n        input[0x10] = (uint *)0x0;\n        input[9] = param5;\n        *(undefined2 *)((int)input + 0x2a) = param6;\n        input[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(input + 10) = *(undefined2 *)((int)input + 0x2a);\n        variable3 = update_flag_status_080027f4(input,param2,param3,param4,param7,variable1);\n        if (variable3 == 0) {\n          if (*(short *)(input + 10) == 0) {\n            **input = **input | 0x200;\n          }\n          else if (*(short *)(input + 10) == 1) {\n            **input = **input & 0xfffffbff;\n            disableIRQinterrupts();\n            **input = **input | 0x200;\n            enableIRQinterrupts();\n          }\n          else if (*(short *)(input + 10) == 2) {\n            **input = **input | 0x800;\n            disableIRQinterrupts();\n            **input = **input & 0xfffffbff;\n            enableIRQinterrupts();\n          }\n          else {\n            **input = **input | 0x400;\n          }\n          while (*(short *)(input + 10) != 0) {\n            if (*(ushort *)(input + 10) < 4) {\n              if (*(short *)(input + 10) == 1) {\n                variable3 = check_access_08002ca8(input,param7,variable1);\n                if (variable3 != 0) {\n                  if (input[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                variable2 = (*input)[4];\n                variable5 = input[9];\n                input[9] = (uint *)((int)variable5 + 1);\n                *(char *)variable5 = (char)variable2;\n                *(short *)(input + 10) = *(short *)(input + 10) + -1;\n                *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n              }\n              else if (*(short *)(input + 10) == 2) {\n                do {\n                  if ((~(*input)[5] & 4) == 0) {\n                    variable3 = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((param7 == 0xffffffff) ||\n                        ((param7 != 0 && (variable3 = get_global_variable_080015a0(), (uint)(variable3 - variable1) <= param7)\n                         )));\n                input[0xc] = (uint *)0x0;\n                *(undefined *)((int)input + 0x3d) = 0x20;\n                *(undefined *)((int)input + 0x3e) = 0;\n                *(undefined *)(input + 0xf) = 0;\n                variable3 = 3;\nLAB_080022fa:\n                if (variable3 != 0) {\n                  return 3;\n                }\n                disableIRQinterrupts();\n                **input = **input | 0x200;\n                variable2 = (*input)[4];\n                variable5 = input[9];\n                input[9] = (uint *)((int)variable5 + 1);\n                *(char *)variable5 = (char)variable2;\n                *(short *)(input + 10) = *(short *)(input + 10) + -1;\n                *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n                enableIRQinterrupts();\n                variable2 = (*input)[4];\n                variable5 = input[9];\n                input[9] = (uint *)((int)variable5 + 1);\n                *(char *)variable5 = (char)variable2;\n                *(short *)(input + 10) = *(short *)(input + 10) + -1;\n                *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((~(*input)[5] & 4) == 0) {\n                    variable3 = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((param7 == 0xffffffff) ||\n                        ((param7 != 0 && (variable3 = get_global_variable_080015a0(), (uint)(variable3 - variable1) <= param7)\n                         )));\n                input[0xc] = (uint *)0x0;\n                *(undefined *)((int)input + 0x3d) = 0x20;\n                *(undefined *)((int)input + 0x3e) = 0;\n                *(undefined *)(input + 0xf) = 0;\n                variable3 = 3;\nLAB_08002418:\n                if (variable3 != 0) {\n                  return 3;\n                }\n                **input = **input & 0xfffffbff;\n                disableIRQinterrupts();\n                variable2 = (*input)[4];\n                variable5 = input[9];\n                input[9] = (uint *)((int)variable5 + 1);\n                *(char *)variable5 = (char)variable2;\n                *(short *)(input + 10) = *(short *)(input + 10) + -1;\n                *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n                do {\n                  if ((~(*input)[5] & 4) == 0) {\n                    variable3 = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((param7 == 0xffffffff) ||\n                        ((param7 != 0 && (variable3 = get_global_variable_080015a0(), (uint)(variable3 - variable1) <= param7)\n                         )));\n                input[0xc] = (uint *)0x0;\n                *(undefined *)((int)input + 0x3d) = 0x20;\n                *(undefined *)((int)input + 0x3e) = 0;\n                *(undefined *)(input + 0xf) = 0;\n                variable3 = 3;\nLAB_0800250a:\n                if (variable3 != 0) {\n                  return 3;\n                }\n                **input = **input | 0x200;\n                variable2 = (*input)[4];\n                variable5 = input[9];\n                input[9] = (uint *)((int)variable5 + 1);\n                *(char *)variable5 = (char)variable2;\n                *(short *)(input + 10) = *(short *)(input + 10) + -1;\n                *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n                enableIRQinterrupts();\n                variable2 = (*input)[4];\n                variable5 = input[9];\n                input[9] = (uint *)((int)variable5 + 1);\n                *(char *)variable5 = (char)variable2;\n                *(short *)(input + 10) = *(short *)(input + 10) + -1;\n                *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n              }\n            }\n            else {\n              variable3 = check_access_08002ca8(input,param7,variable1);\n              if (variable3 != 0) {\n                if (input[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              variable2 = (*input)[4];\n              variable5 = input[9];\n              input[9] = (uint *)((int)variable5 + 1);\n              *(char *)variable5 = (char)variable2;\n              *(short *)(input + 10) = *(short *)(input + 10) + -1;\n              *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n              if (((*input)[5] & 4) == 4) {\n                variable2 = (*input)[4];\n                variable5 = input[9];\n                input[9] = (uint *)((int)variable5 + 1);\n                *(char *)variable5 = (char)variable2;\n                *(short *)(input + 10) = *(short *)(input + 10) + -1;\n                *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)input + 0x3d) = 0x20;\n          *(undefined *)((int)input + 0x3e) = 0;\n          *(undefined *)(input + 0xf) = 0;\n          variable4 = 0;\n        }\n        else if (input[0x10] == (uint *)0x4) {\n          *(undefined *)(input + 0xf) = 0;\n          variable4 = 1;\n        }\n        else {\n          *(undefined *)(input + 0xf) = 0;\n          variable4 = 3;\n        }\n      }\n    }\n    else {\n      variable4 = 2;\n    }\n  }\n  else {\n    variable4 = 2;\n  }\n  return variable4;\n}\n\n",
            "renaming": {
                "FUN_08001f6c": "process_data_08001f6c",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "iVar1": "variable1",
                "uVar2": "variable2",
                "iVar3": "variable3",
                "uVar4": "variable4",
                "puVar5": "variable5"
            },
            "calling": [
                "FUN_08004ee8"
            ],
            "called": [
                "FUN_08002ca8",
                "FUN_080027f4",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002640": {
            "entrypoint": "0x08002640",
            "current_name": "update_flag_status_08002640",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080026e8) */\n/* WARNING: Removing unreachable block (ram,0x080026fa) */\n/* WARNING: Removing unreachable block (ram,0x080026fc) */\n/* WARNING: Removing unreachable block (ram,0x080026fe) */\n\nundefined4\nupdateFlagStatus_08002640(uint **param,byte flag,undefined2 value,short flagType,uint maxValue,int curValue)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  **param = **param | 0x100;\n  do {\n    if ((~(*param)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_0800270a;\n    }\n  } while ((maxValue == 0xffffffff) ||\n          ((maxValue != 0 && (result = get_global_variable_080015a0(), (uint)(result - curValue) <= maxValue))));\n  param[0xc] = (uint *)0x0;\n  *(undefined *)((int)param + 0x3d) = 0x20;\n  *(undefined *)((int)param + 0x3e) = 0;\n  *(undefined *)(param + 0xf) = 0;\n  result = 3;\nLAB_0800270a:\n  if (result == 0) {\n    (*param)[4] = flag & 0xfe;\n    result = check_and_update_values_08002ad8(param,0x10002,maxValue,curValue);\n    if (result == 0) {\n      result = update_flag_status_08002bb4(param,maxValue,curValue,(*param)[6]);\n      if (result == 0) {\n        if (flagType == 1) {\n          (*param)[4] = (uint)(byte)value;\n        }\n        else {\n          (*param)[4] = (uint)(byte)((ushort)value >> 8);\n          result = update_flag_status_08002bb4(param,maxValue,curValue);\n          if (result != 0) {\n            if (param[0x10] == (uint *)0x4) {\n              **param = **param | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*param)[4] = (uint)(byte)value;\n        }\n        returnValue = 0;\n      }\n      else if (param[0x10] == (uint *)0x4) {\n        **param = **param | 0x200;\n        returnValue = 1;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n    else if (param[0x10] == (uint *)0x4) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 3;\n    }\n  }\n  else {\n    returnValue = 3;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002640": "update_flag_status_08002640",
                "param_1": "param",
                "param_2": "flag",
                "param_3": "value",
                "param_4": "flagType",
                "param_5": "maxValue",
                "param_6": "curValue",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f4": {
            "entrypoint": "0x080027f4",
            "current_name": "update_flag_status_080027f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080028ae) */\n/* WARNING: Removing unreachable block (ram,0x080028c0) */\n/* WARNING: Removing unreachable block (ram,0x080028c2) */\n/* WARNING: Removing unreachable block (ram,0x080028c4) */\n/* WARNING: Removing unreachable block (ram,0x08002a6c) */\n/* WARNING: Removing unreachable block (ram,0x08002a7e) */\n/* WARNING: Removing unreachable block (ram,0x08002a80) */\n/* WARNING: Removing unreachable block (ram,0x08002a82) */\n\nundefined4\nupdateFlagStatus_080027f4(uint **ptrToParam1,byte byteParam,undefined2 ushortParam,short shortParam,uint uintParam,int intParam)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  **ptrToParam1 = **ptrToParam1 | 0x400;\n  **ptrToParam1 = **ptrToParam1 | 0x100;\n  do {\n    if ((~(*ptrToParam1)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_080028d2;\n    }\n  } while ((uintParam == 0xffffffff) ||\n          ((uintParam != 0 && (result = get_global_variable_080015a0(), (uint)(result - intParam) <= uintParam))));\n  ptrToParam1[0xc] = (uint *)0x0;\n  *(undefined *)((int)ptrToParam1 + 0x3d) = 0x20;\n  *(undefined *)((int)ptrToParam1 + 0x3e) = 0;\n  *(undefined *)(ptrToParam1 + 0xf) = 0;\n  result = 3;\nLAB_080028d2:\n  if (result == 0) {\n    (*ptrToParam1)[4] = byteParam & 0xfe;\n    result = check_and_update_values_08002ad8(ptrToParam1,0x10002,uintParam,intParam);\n    if (result == 0) {\n      result = update_flag_status_08002bb4(ptrToParam1,uintParam,intParam,(*ptrToParam1)[6]);\n      if (result == 0) {\n        if (shortParam == 1) {\n          (*ptrToParam1)[4] = (uint)(byte)ushortParam;\n        }\n        else {\n          (*ptrToParam1)[4] = (uint)(byte)((ushort)ushortParam >> 8);\n          result = update_flag_status_08002bb4(ptrToParam1,uintParam,intParam);\n          if (result != 0) {\n            if (ptrToParam1[0x10] == (uint *)0x4) {\n              **ptrToParam1 = **ptrToParam1 | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*ptrToParam1)[4] = (uint)(byte)ushortParam;\n        }\n        result = update_flag_status_08002bb4(ptrToParam1,uintParam,intParam);\n        if (result == 0) {\n          **ptrToParam1 = **ptrToParam1 | 0x100;\n          do {\n            if ((~(*ptrToParam1)[5] & 1) == 0) {\n              result = 0;\n              goto LAB_08002a90;\n            }\n          } while ((uintParam == 0xffffffff) ||\n                  ((uintParam != 0 && (result = get_global_variable_080015a0(), (uint)(result - intParam) <= uintParam))));\n          ptrToParam1[0xc] = (uint *)0x0;\n          *(undefined *)((int)ptrToParam1 + 0x3d) = 0x20;\n          *(undefined *)((int)ptrToParam1 + 0x3e) = 0;\n          *(undefined *)(ptrToParam1 + 0xf) = 0;\n          result = 3;\nLAB_08002a90:\n          if (result == 0) {\n            (*ptrToParam1)[4] = (uint)(byteParam | 1);\n            result = check_and_update_values_08002ad8(ptrToParam1,0x10002,uintParam,intParam);\n            if (result == 0) {\n              returnValue = 0;\n            }\n            else if (ptrToParam1[0x10] == (uint *)0x4) {\n              returnValue = 1;\n            }\n            else {\n              returnValue = 3;\n            }\n          }\n          else {\n            returnValue = 3;\n          }\n        }\n        else if (ptrToParam1[0x10] == (uint *)0x4) {\n          **ptrToParam1 = **ptrToParam1 | 0x200;\n          returnValue = 1;\n        }\n        else {\n          returnValue = 3;\n        }\n      }\n      else if (ptrToParam1[0x10] == (uint *)0x4) {\n        **ptrToParam1 = **ptrToParam1 | 0x200;\n        returnValue = 1;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n    else if (ptrToParam1[0x10] == (uint *)0x4) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 3;\n    }\n  }\n  else {\n    returnValue = 3;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080027f4": "update_flag_status_080027f4",
                "param_1": "ptrToParam1",
                "param_2": "byteParam",
                "param_3": "ushortParam",
                "param_4": "shortParam",
                "param_5": "uintParam",
                "param_6": "intParam",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "entrypoint": "0x08002ad8",
            "current_name": "check_and_update_values_08002ad8",
            "code": "\nundefined4 checkAndUpdateValues_08002ad8(uint **paramArray,uint value1,uint value2,int value3)\n\n{\n  int globalVariableValue;\n  char result;\n  uint newValue;\n  bool isNonzero;\n  \n  do {\n    if ((value1 >> 0x10 & 0xff) == 1) {\n      newValue = value1 & ~(*paramArray)[5] & 0xffff;\n      isNonzero = newValue != 0;\n      if (isNonzero) {\n        newValue = 1;\n      }\n      result = (char)newValue;\n      if (!isNonzero) {\n        result = '\\0';\n      }\n    }\n    else {\n      newValue = value1 & ~(*paramArray)[6] & 0xffff;\n      isNonzero = newValue != 0;\n      if (isNonzero) {\n        newValue = 1;\n      }\n      result = (char)newValue;\n      if (!isNonzero) {\n        result = '\\0';\n      }\n    }\n    if (result == '\\0') {\n      return 0;\n    }\n    if (((*paramArray)[5] & 0x400) == 0x400) {\n      **paramArray = **paramArray | 0x200;\n      (*paramArray)[5] = 0xfffffbff;\n      paramArray[0x10] = (uint *)0x4;\n      paramArray[0xc] = (uint *)0x0;\n      *(undefined *)((int)paramArray + 0x3d) = 0x20;\n      *(undefined *)(paramArray + 0xf) = 0;\n      return 1;\n    }\n  } while ((value2 == 0xffffffff) ||\n          ((value2 != 0 && (globalVariableValue = get_global_variable_080015a0(), (uint)(globalVariableValue - value3) <= value2))));\n  paramArray[0xc] = (uint *)0x0;\n  *(undefined *)((int)paramArray + 0x3d) = 0x20;\n  *(undefined *)(paramArray + 0xf) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002ad8": "check_and_update_values_08002ad8",
                "param_1": "paramArray",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "globalVariableValue",
                "cVar2": "result",
                "uVar3": "newValue",
                "bVar4": "isNonzero"
            },
            "calling": [
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bb4": {
            "entrypoint": "0x08002bb4",
            "current_name": "update_flag_status_08002bb4",
            "code": "\nundefined4 updateFlagStatus_08002bb4(int *flagArray,uint arraySize,int incrementValue)\n\n{\n  int flagStatus;\n  \n  while( true ) {\n    if ((*(uint *)(*flagArray + 0x14) & 0x80) == 0x80) {\n      return 0;\n    }\n    flagStatus = checkFlagStatus(flagArray);\n    if (flagStatus != 0) break;\n    if ((arraySize != 0xffffffff) &&\n       ((arraySize == 0 || (flagStatus = getGlobalVariable(), arraySize < (uint)(flagStatus - incrementValue))))) {\n      flagArray[0x10] = flagArray[0x10] | 0x20;\n      flagArray[0xc] = 0;\n      *(undefined *)((int)flagArray + 0x3d) = 0x20;\n      *(undefined *)(flagArray + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002bb4": "update_flag_status_08002bb4",
                "param_1": "flagArray",
                "param_2": "arraySize",
                "param_3": "incrementValue",
                "iVar1": "flagStatus",
                "check_flag_status_08002d3c": "checkFlagStatus",
                "get_global_variable_080015a0": "getGlobalVariable"
            },
            "calling": [
                "FUN_08001ccc",
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2e": {
            "entrypoint": "0x08002c2e",
            "current_name": "check_and_adjust_params_08002c2e",
            "code": "\nundefined4 check_and_adjust_params_08002c2e(int *input_array,uint max_value,int offset)\n\n{\n  int flag_status;\n  \n  while( true ) {\n    if ((*(uint *)(*input_array + 0x14) & 4) == 4) {\n      return 0;\n    }\n    flag_status = check_flag_status(input_array);\n    if (flag_status != 0) break;\n    if ((max_value != 0xffffffff) &&\n       ((max_value == 0 || (flag_status = get_global_variable(), max_value < (uint)(flag_status - offset))))) {\n      input_array[0x10] = input_array[0x10] | 0x20;\n      input_array[0xc] = 0;\n      *(undefined *)((int)input_array + 0x3d) = 0x20;\n      *(undefined *)(input_array + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002c2e": "check_and_adjust_params_08002c2e",
                "param_1": "input_array",
                "param_2": "max_value",
                "param_3": "offset",
                "iVar1": "flag_status",
                "check_flag_status_08002d3c": "check_flag_status",
                "get_global_variable_080015a0": "get_global_variable"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca8": {
            "entrypoint": "0x08002ca8",
            "current_name": "check_access_08002ca8",
            "code": "\nundefined4 checkAccess_08002ca8(int *pointer,uint length,int offset)\n\n{\n  int globalVariableValue;\n  \n  while( true ) {\n    if ((*(uint *)(*pointer + 0x14) & 0x40) == 0x40) {\n      return 0;\n    }\n    if ((*(uint *)(*pointer + 0x14) & 0x10) == 0x10) break;\n    if ((length == 0) || (globalVariableValue = get_global_variable_080015a0(), length < (uint)(globalVariableValue - offset))) {\n      pointer[0x10] = pointer[0x10] | 0x20;\n      *(undefined *)((int)pointer + 0x3d) = 0x20;\n      *(undefined *)(pointer + 0xf) = 0;\n      return 3;\n    }\n  }\n  *(undefined4 *)(*pointer + 0x14) = 0xffffffef;\n  pointer[0x10] = 0;\n  pointer[0xc] = 0;\n  *(undefined *)((int)pointer + 0x3d) = 0x20;\n  *(undefined *)(pointer + 0xf) = 0;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002ca8": "check_access_08002ca8",
                "param_1": "pointer",
                "param_2": "length",
                "param_3": "offset",
                "iVar1": "globalVariableValue"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d3c": {
            "entrypoint": "0x08002d3c",
            "current_name": "check_flag_status_08002d3c",
            "code": "\nbool checkFlagStatus_08002d3c(int *flagPtr)\n\n{\n  bool flagStatus;\n  \n  flagStatus = (*(uint *)(*flagPtr + 0x14) & 0x400) == 0x400;\n  if (flagStatus) {\n    *(undefined4 *)(*flagPtr + 0x14) = 0xfffffbff;\n    errorCode = 4;\n    counter = 0;\n    *(undefined *)((int)flagPtr + 0x3d) = 0x20;\n    *(undefined *)(flagPtr + 0xf) = 0;\n  }\n  return flagStatus;\n}\n\n",
            "renaming": {
                "FUN_08002d3c": "check_flag_status_08002d3c",
                "param_1": "flagPtr",
                "bVar1": "flagStatus",
                "param_1[0x10]": "errorCode",
                "param_1[0xc]": "counter"
            },
            "calling": [
                "FUN_08002c2e",
                "FUN_08002bb4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d8a": {
            "entrypoint": "0x08002d8a",
            "current_name": "FUNC_08002d8a",
            "code": "\nvoid FUNC_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d8a": "FUNC_08002d8a"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d98": {
            "entrypoint": "0x08002d98",
            "current_name": "check_and_modify_registers_08002d98",
            "code": "\n\n\nundefined4 checkAndModifyRegisters_08002d98(uint *registerValues)\n\n{\n  int startTime;\n  int currentTime;\n  undefined4 result;\n  bool isConditionMet;\n  \n  if ((*registerValues & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0x10000)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (registerValues[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (registerValues[1] == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (registerValues[1] == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (registerValues[1] == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (registerValues[1] == 0) {\n        startTime = get_global_variable_080015a0();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentTime = get_global_variable_080015a0();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startTime = get_global_variable_080015a0();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentTime = get_global_variable_080015a0();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*registerValues & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (registerValues[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = registerValues[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n    else if (registerValues[4] == 0) {\n      _DAT_42420000 = 0;\n      startTime = get_global_variable_080015a0();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentTime = get_global_variable_080015a0();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      startTime = get_global_variable_080015a0();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentTime = get_global_variable_080015a0();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = registerValues[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n  }\n  if ((*registerValues & 8) != 0) {\n    if (registerValues[6] == 0) {\n      _DAT_42420480 = 0;\n      startTime = get_global_variable_080015a0();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentTime = get_global_variable_080015a0();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      startTime = get_global_variable_080015a0();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentTime = get_global_variable_080015a0();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      delay_function_08003568(1);\n    }\n  }\n  if ((*registerValues & 4) != 0) {\n    isConditionMet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isConditionMet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = get_global_variable_080015a0();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = get_global_variable_080015a0();\n        if (100 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (registerValues[3] == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (registerValues[3] == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (registerValues[3] == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (registerValues[3] == 0) {\n      startTime = get_global_variable_080015a0();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentTime = get_global_variable_080015a0();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startTime = get_global_variable_080015a0();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentTime = get_global_variable_080015a0();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (isConditionMet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (registerValues[7] == 0) {\nLAB_0800324a:\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (registerValues[7] == 2) {\n    _DAT_42420060 = 0;\n    startTime = get_global_variable_080015a0();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (registerValues[8] == 0x10000) {\n          _DAT_40021004 = registerValues[2] | _DAT_40021004 & 0xfffdffff;\n        }\n        _DAT_40021004 = registerValues[9] | registerValues[8] | _DAT_40021004 & 0xffc2ffff;\n        _DAT_42420060 = 1;\n        startTime = get_global_variable_080015a0();\n        while ((_DAT_40021000 & 0x2000000) == 0) {\n          currentTime = get_global_variable_080015a0();\n          if (2 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      currentTime = get_global_variable_080015a0();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    startTime = get_global_variable_080015a0();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) goto LAB_0800324a;\n      currentTime = get_global_variable_080015a0();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002d98": "check_and_modify_registers_08002d98",
                "param_1": "registerValues",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "result",
                "bVar4": "isConditionMet"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_08003568",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003260": {
            "entrypoint": "0x08003260",
            "current_name": "check_and_initialize_execution_08003260",
            "code": "\n\n\nundefined4 check_and_initialize_execution_08003260(uint *flags,uint execution_time)\n\n{\n  int initial_execution_time;\n  int current_execution_time;\n  uint calculated_time;\n  undefined4 result;\n  \n  if (((_DAT_40022000 & 7) < execution_time) &&\n     (_DAT_40022000 = execution_time | _DAT_40022000 & 0xfffffff8, execution_time != (execution_time & 7))) {\n    result = 1;\n  }\n  else {\n    if ((*flags & 2) != 0) {\n      _DAT_40021004 = flags[2] | _DAT_40021004 & 0xffffff0f;\n    }\n    if ((*flags & 1) == 0) {\nLAB_08003394:\n      if ((execution_time < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = execution_time | _DAT_40022000 & 0xfffffff8, execution_time != (execution_time & 7))) {\n        result = 1;\n      }\n      else {\n        if ((*flags & 4) != 0) {\n          _DAT_40021004 = flags[3] | _DAT_40021004 & 0xfffff8ff;\n        }\n        if ((*flags & 8) != 0) {\n          _DAT_40021004 = flags[4] << 3 | _DAT_40021004 & 0xffffc7ff;\n        }\n        calculated_time = calculate_execution_time_08003440();\n        DAT_20000018 = calculated_time >> (&DAT_08009eb0)[_DAT_40021004 >> 4 & 0xf];\n        initialize_memory_and_write_value_0800151c(0xf);\n        result = 0;\n      }\n    }\n    else {\n      if (flags[1] == 1) {\n        if ((_DAT_40021000 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((flags[1] != 2) && ((_DAT_40021000 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40021004 = flags[1] | _DAT_40021004 & 0xfffffffc;\n      initial_execution_time = get_global_variable_080015a0();\n      if (flags[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_08003394;\n          current_execution_time = get_global_variable_080015a0();\n        } while ((uint)(current_execution_time - initial_execution_time) < 0x1389);\n        result = 3;\n      }\n      else if (flags[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_08003394;\n          current_execution_time = get_global_variable_080015a0();\n        } while ((uint)(current_execution_time - initial_execution_time) < 0x1389);\n        result = 3;\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_08003394;\n          current_execution_time = get_global_variable_080015a0();\n        } while ((uint)(current_execution_time - initial_execution_time) < 0x1389);\n        result = 3;\n      }\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003260": "check_and_initialize_execution_08003260",
                "param_1": "flags",
                "param_2": "execution_time",
                "iVar1": "initial_execution_time",
                "iVar2": "current_execution_time",
                "uVar3": "calculated_time",
                "uVar4": "result"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_0800151c",
                "FUN_080015a0",
                "FUN_08003440"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003440": {
            "entrypoint": "0x08003440",
            "current_name": "calculate_execution_time_08003440",
            "code": "\n\n\nuint calculateExecutionTime_08003440(void)\n\n{\n  undefined2 loopCount;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  uint temp1;\n  undefined4 temp2;\n  uint temp3;\n  uint executionTime;\n  uint temp3;\n  \n  constant1 = 0x5040302;\n  constant2 = 0x9080706;\n  constant3 = 0xd0c0b0a;\n  constant4 = 0x10100f0e;\n  loopCount = 0x201;\n  temp2 = 0;\n  temp3 = 0;\n  temp1 = 0;\n  executionTime = 0;\n  temp3 = _DAT_40021004;\n  if ((_DAT_40021004 & 0xc) == 4) {\n    executionTime = 8000000;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    temp1 = (uint)*(byte *)((int)&constant1 + (_DAT_40021004 >> 0x12 & 0xf));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      temp3 = temp1 * 4000000;\n    }\n    else {\n      temp3 = (temp1 * 8000000) / (uint)*(byte *)((int)&loopCount + (_DAT_40021004 >> 0x11 & 1))\n      ;\n    }\n    executionTime = temp3;\n  }\n  else {\n    executionTime = 8000000;\n  }\n  return executionTime;\n}\n\n",
            "renaming": {
                "FUN_08003440": "calculate_execution_time_08003440",
                "local_30": "loopCount",
                "local_2c": "constant1",
                "uStack_28": "constant2",
                "uStack_24": "constant3",
                "uStack_20": "constant4",
                "local_1c": "temp1",
                "local_18": "temp2",
                "local_14": "temp3",
                "local_10": "executionTime",
                "local_c": "temp3"
            },
            "calling": [
                "FUN_08003260"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003504": {
            "entrypoint": "0x08003504",
            "current_name": "get_data_08003504",
            "code": "\nundefined4 get_data_08003504(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08003504": "get_data_08003504"
            },
            "calling": [
                "FUN_08003518",
                "FUN_080052a0",
                "FUN_08003540"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003518": {
            "entrypoint": "0x08003518",
            "current_name": "get_data_shifted_08003518",
            "code": "\n\n\nuint getDataShifted_08003518(void)\n\n{\n  uint data;\n  \n  data = get_data_08003504();\n  return data >> *(shiftValue *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 8 & 7));\n}\n\n",
            "renaming": {
                "FUN_08003518": "get_data_shifted_08003518",
                "uVar1": "data",
                "sbyte": "shiftValue"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003540": {
            "entrypoint": "0x08003540",
            "current_name": "get_shifted_data_08003540",
            "code": "\n\n\nuint get_shifted_data_08003540(void)\n\n{\n  uint data;\n  \n  data = get_data_08003504();\n  return data >> *(shift_value *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 0xb & 7));\n}\n\n",
            "renaming": {
                "FUN_08003540": "get_shifted_data_08003540",
                "uVar1": "data",
                "sbyte": "shift_value"
            },
            "calling": [
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003568": {
            "entrypoint": "0x08003568",
            "current_name": "delay_function_08003568",
            "code": "\nvoid delayFunction_08003568(int input)\n\n{\n  bool bVar1;\n  int counter;\n  \n  counter = input * (DAT_20000018 / 8000);\n  do {\n    bVar1 = counter != 0;\n    counter = counter + -1;\n  } while (bVar1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003568": "delay_function_08003568",
                "param_1": "input",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08002d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035a4": {
            "entrypoint": "0x080035a4",
            "current_name": "check_and_update_registers_080035a4",
            "code": "\nundefined4 checkAndUpdateRegisters_080035a4(undefined4 *registers)\n\n{\n  undefined4 status;\n  \n  if (registers == (undefined4 *)0x0) {\n    status = 1;\n  }\n  else {\n    if (*(char *)((int)registers + 0x3d) == '\\0') {\n      *(undefined *)(registers + 0xf) = 0;\n      FUNC_080035fa(registers);\n    }\n    *(undefined *)((int)registers + 0x3d) = 2;\n    updateRegisters(*registers,registers + 1);\n    *(undefined *)((int)registers + 0x3d) = 1;\n    status = 0;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080035a4": "check_and_update_registers_080035a4",
                "param_1": "registers",
                "uVar1": "status",
                "update_registers_08003c94": "updateRegisters"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_080035fa",
                "FUN_08003c94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035fa": {
            "entrypoint": "0x080035fa",
            "current_name": "FUNC_080035fa",
            "code": "\nvoid FUNC_080035fa(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fa": "FUNC_080035fa"
            },
            "calling": [
                "FUN_080035a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800360c": {
            "entrypoint": "0x0800360c",
            "current_name": "enable_flag_0800360c",
            "code": "\nundefined4 enableFlag_0800360c(uint **ptr)\n\n{\n  (*ptr)[3] = (*ptr)[3] | 1;\n  **ptr = **ptr | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800360c": "enable_flag_0800360c",
                "param_1": "ptr"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003640": {
            "entrypoint": "0x08003640",
            "current_name": "check_and_update_registers_08003640",
            "code": "\nundefined4 checkAndUpdateRegisters_08003640(undefined4 *data)\n\n{\n  undefined4 returnValue;\n  \n  if (data == (undefined4 *)0x0) {\n    returnValue = 1;\n  }\n  else {\n    if (*(char *)((int)data + 0x3d) == '\\0') {\n      *(undefined *)(data + 0xf) = 0;\n      FUNC_08003696(data);\n    }\n    *(undefined *)((int)data + 0x3d) = 2;\n    update_registers_08003c94(*data,data + 1);\n    *(undefined *)((int)data + 0x3d) = 1;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08003640": "check_and_update_registers_08003640",
                "param_1": "data",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003696",
                "FUN_08003c94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003696": {
            "entrypoint": "0x08003696",
            "current_name": "FUNC_08003696",
            "code": "\nvoid FUNC_08003696(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003696": "FUNC_08003696"
            },
            "calling": [
                "FUN_08003640"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036a8": {
            "entrypoint": "0x080036a8",
            "current_name": "update_and_set_flags_080036a8",
            "code": "\nundefined4 updateAndSetFlags_080036a8(uint **ptrArray,undefined4 flag)\n\n{\n  updateBitwiseOperation(*ptrArray,flag,1);\n  if (*ptrArray == (uint *)0x40012c00) {\n    (*ptrArray)[0x11] = (*ptrArray)[0x11] | 0x8000;\n  }\n  **ptrArray = **ptrArray | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036a8": "update_and_set_flags_080036a8",
                "param_1": "ptrArray",
                "param_2": "flag",
                "update_bitwise_operation_080041ea": "updateBitwiseOperation"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080041ea"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f8": {
            "entrypoint": "0x080036f8",
            "current_name": "process_flags_080036f8",
            "code": "\nvoid processFlags_080036f8(int *flags)\n\n{\n  if (((*(uint *)(*flags + 0x10) & 2) == 2) && ((*(uint *)(*flags + 0xc) & 2) == 2)) {\n    *(undefined4 *)(*flags + 0x10) = 0xfffffffd;\n    *(undefined *)(flags + 7) = 1;\n    if ((*(uint *)(*flags + 0x18) & 3) == 0) {\n      FUNC_08003c4a(flags);\n      FUNC_08003c6e(flags);\n    }\n    else {\n      FUNC_08003c5c(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  if (((*(uint *)(*flags + 0x10) & 4) == 4) && ((*(uint *)(*flags + 0xc) & 4) == 4)) {\n    *(undefined4 *)(*flags + 0x10) = 0xfffffffb;\n    *(undefined *)(flags + 7) = 2;\n    if ((*(uint *)(*flags + 0x18) & 0x300) == 0) {\n      FUNC_08003c4a(flags);\n      FUNC_08003c6e(flags);\n    }\n    else {\n      FUNC_08003c5c(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  if (((*(uint *)(*flags + 0x10) & 8) == 8) && ((*(uint *)(*flags + 0xc) & 8) == 8)) {\n    *(undefined4 *)(*flags + 0x10) = 0xfffffff7;\n    *(undefined *)(flags + 7) = 4;\n    if ((*(uint *)(*flags + 0x1c) & 3) == 0) {\n      FUNC_08003c4a(flags);\n      FUNC_08003c6e(flags);\n    }\n    else {\n      FUNC_08003c5c(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  if (((*(uint *)(*flags + 0x10) & 0x10) == 0x10) && ((*(uint *)(*flags + 0xc) & 0x10) == 0x10))\n  {\n    *(undefined4 *)(*flags + 0x10) = 0xffffffef;\n    *(undefined *)(flags + 7) = 8;\n    if ((*(uint *)(*flags + 0x1c) & 0x300) == 0) {\n      FUNC_08003c4a(flags);\n      FUNC_08003c6e(flags);\n    }\n    else {\n      FUNC_08003c5c(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  if (((*(uint *)(*flags + 0x10) & 1) == 1) && ((*(uint *)(*flags + 0xc) & 1) == 1)) {\n    *(undefined4 *)(*flags + 0x10) = 0xfffffffe;\n    initializeAndProcessData(flags);\n  }\n  if (((*(uint *)(*flags + 0x10) & 0x80) == 0x80) && ((*(uint *)(*flags + 0xc) & 0x80) == 0x80))\n  {\n    *(undefined4 *)(*flags + 0x10) = 0xffffff7f;\n    FUNC_08004378(flags);\n  }\n  if (((*(uint *)(*flags + 0x10) & 0x40) == 0x40) && ((*(uint *)(*flags + 0xc) & 0x40) == 0x40))\n  {\n    *(undefined4 *)(*flags + 0x10) = 0xffffffbf;\n    FUNC_08003c80(flags);\n  }\n  if (((*(uint *)(*flags + 0x10) & 0x20) == 0x20) && ((*(uint *)(*flags + 0xc) & 0x20) == 0x20))\n  {\n    *(undefined4 *)(*flags + 0x10) = 0xffffffdf;\n    FUNC_08004366(flags);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f8": "process_flags_080036f8",
                "param_1": "flags",
                "initialize_and_process_data_08004f78": "initializeAndProcessData"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_08004f78",
                "FUN_08003c6e",
                "FUN_08004378",
                "FUN_08003c4a",
                "FUN_08004366",
                "FUN_08003c80",
                "FUN_08003c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003908": {
            "entrypoint": "0x08003908",
            "current_name": "update_parameters_08003908",
            "code": "\nundefined4 updateParameters_08003908(int *array,int value,undefined4 option)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(array + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(array + 0xf) = 1;\n    *(undefined *)((int)array + 0x3d) = 2;\n    switch(option) {\n    case 0:\n      update_parameters_08003d60(*array,value);\n      *(uint *)(*array + 0x18) = *(uint *)(*array + 0x18) | 8;\n      *(uint *)(*array + 0x18) = *(uint *)(*array + 0x18) & 0xfffffffb;\n      *(uint *)(*array + 0x18) = *(uint *)(value + 0x10) | *(uint *)(*array + 0x18);\n      break;\n    case 4:\n      update_configuration_08003e38(*array,value);\n      *(uint *)(*array + 0x18) = *(uint *)(*array + 0x18) | 0x800;\n      *(uint *)(*array + 0x18) = *(uint *)(*array + 0x18) & 0xfffffbff;\n      *(uint *)(*array + 0x18) = *(int *)(value + 0x10) << 8 | *(uint *)(*array + 0x18);\n      break;\n    case 8:\n      update_param_08003f18(*array,value);\n      *(uint *)(*array + 0x1c) = *(uint *)(*array + 0x1c) | 8;\n      *(uint *)(*array + 0x1c) = *(uint *)(*array + 0x1c) & 0xfffffffb;\n      *(uint *)(*array + 0x1c) = *(uint *)(value + 0x10) | *(uint *)(*array + 0x1c);\n      break;\n    case 0xc:\n      update_params_08003ff8(*array,value);\n      *(uint *)(*array + 0x1c) = *(uint *)(*array + 0x1c) | 0x800;\n      *(uint *)(*array + 0x1c) = *(uint *)(*array + 0x1c) & 0xfffffbff;\n      *(uint *)(*array + 0x1c) = *(int *)(value + 0x10) << 8 | *(uint *)(*array + 0x1c);\n    }\n    *(undefined *)((int)array + 0x3d) = 1;\n    *(undefined *)(array + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003908": "update_parameters_08003908",
                "param_1": "array",
                "param_2": "value",
                "param_3": "option",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003ff8",
                "FUN_08003d60",
                "FUN_08003f18",
                "FUN_08003e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a94": {
            "entrypoint": "0x08003a94",
            "current_name": "update_param_data_08003a94",
            "code": "\nundefined4 updateParamData_08003a94(int *paramPointer,uint *paramData)\n\n{\n  undefined4 returnValue;\n  uint paramValue;\n  \n  if (*(char *)(paramPointer + 0xf) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(paramPointer + 0xf) = 1;\n    *(undefined *)((int)paramPointer + 0x3d) = 2;\n    *(uint *)(*paramPointer + 8) = *(uint *)(*paramPointer + 8) & 0xffff0088;\n    paramValue = *paramData;\n    if (paramValue == 0x40) {\n      update_parameter_data_080040a0(*paramPointer,paramData[1],paramData[3]);\n      update_param_with_bits_0800416a(*paramPointer,0x40);\n    }\n    else if (paramValue < 0x41) {\n      if (paramValue == 0x10) {\n        update_param_with_bits_0800416a(*paramPointer,0x10);\n      }\n      else if (paramValue < 0x11) {\n        if (paramValue == 0) {\n          update_param_with_bits_0800416a(*paramPointer,0);\n        }\n      }\n      else if (paramValue == 0x20) {\n        update_param_with_bits_0800416a(*paramPointer,0x20);\n      }\n      else if (paramValue == 0x30) {\n        update_param_with_bits_0800416a(*paramPointer,0x30);\n      }\n    }\n    else if (paramValue == 0x70) {\n      update_flags_080041a8(*paramPointer,paramData[2],paramData[1],paramData[3]);\n      *(uint *)(*paramPointer + 8) = *(uint *)(*paramPointer + 8) & 0xffffff88 | 0x77;\n    }\n    else if (paramValue < 0x71) {\n      if (paramValue == 0x50) {\n        update_parameter_data_080040a0(*paramPointer,paramData[1],paramData[3]);\n        update_param_with_bits_0800416a(*paramPointer,0x50);\n      }\n      else if (paramValue == 0x60) {\n        update_flags_and_values_08004104(*paramPointer,paramData[1],paramData[3]);\n        update_param_with_bits_0800416a(*paramPointer,0x60);\n      }\n    }\n    else if (paramValue == 0x1000) {\n      *(uint *)(*paramPointer + 8) = *(uint *)(*paramPointer + 8) & 0xfffffff8;\n    }\n    else if (paramValue == 0x2000) {\n      update_flags_080041a8(*paramPointer,paramData[2],paramData[1],paramData[3]);\n      *(uint *)(*paramPointer + 8) = *(uint *)(*paramPointer + 8) | 0x4000;\n    }\n    *(undefined *)((int)paramPointer + 0x3d) = 1;\n    *(undefined *)(paramPointer + 0xf) = 0;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08003a94": "update_param_data_08003a94",
                "param_1": "paramPointer",
                "param_2": "paramData",
                "uVar1": "returnValue",
                "uVar2": "paramValue"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_08004104",
                "FUN_080040a0",
                "FUN_0800416a",
                "FUN_080041a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c4a": {
            "entrypoint": "0x08003c4a",
            "current_name": "FUNC_08003c4a",
            "code": "\nvoid FUNC_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c4a": "FUNC_08003c4a"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c5c": {
            "entrypoint": "0x08003c5c",
            "current_name": "FUNC_08003c5c",
            "code": "\nvoid FUNC_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c5c": "FUNC_08003c5c"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c6e": {
            "entrypoint": "0x08003c6e",
            "current_name": "FUNC_08003c6e",
            "code": "\nvoid FUNC_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c6e": "FUNC_08003c6e"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c80": {
            "entrypoint": "0x08003c80",
            "current_name": "FUNC_08003c80",
            "code": "\nvoid FUNC_08003c80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c80": "FUNC_08003c80"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c94": {
            "entrypoint": "0x08003c94",
            "current_name": "update_registers_08003c94",
            "code": "\nvoid updateRegisters_08003c94(uint *register1,uint *register2)\n\n{\n  uint temp;\n  \n  temp = *register1;\n  if ((((register1 == (uint *)0x40012c00) || (register1 == (uint *)0x40000000)) ||\n      (register1 == (uint *)0x40000400)) || (register1 == (uint *)0x40000800)) {\n    temp = register2[1] | temp & 0xffffff8f;\n  }\n  if (((register1 == (uint *)0x40012c00) || (register1 == (uint *)0x40000000)) ||\n     ((register1 == (uint *)0x40000400 || (register1 == (uint *)0x40000800)))) {\n    temp = register2[3] | temp & 0xfffffcff;\n  }\n  *register1 = register2[5] | temp & 0xffffff7f;\n  register1[0xb] = register2[2];\n  register1[10] = *register2;\n  if (register1 == (uint *)0x40012c00) {\n    specialVariable = register2[4];\n  }\n  register1[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c94": "update_registers_08003c94",
                "param_1": "register1",
                "param_2": "register2",
                "local_c": "temp",
                "uRam40012c30": "specialVariable"
            },
            "calling": [
                "FUN_08003640",
                "FUN_080035a4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d60": {
            "entrypoint": "0x08003d60",
            "current_name": "update_parameters_08003d60",
            "code": "\nvoid updateParameters_08003d60(int param1,uint *param2)\n\n{\n  uint firstVar;\n  uint secondVar;\n  uint thirdVar;\n  \n  *(uint *)(param1 + 0x20) = *(uint *)(param1 + 0x20) & 0xfffffffe;\n  thirdVar = *(uint *)(param1 + 4);\n  firstVar = *param2;\n  secondVar = param2[2] | *(uint *)(param1 + 0x20) & 0xfffffffd;\n  if (param1 == 0x40012c00) {\n    secondVar = (param2[3] | secondVar & 0xfffffff7) & 0xfffffffb;\n    thirdVar = param2[6] | param2[5] | thirdVar & 0xfffffcff;\n  }\n  *(uint *)(param1 + 4) = thirdVar;\n  *(uint *)(param1 + 0x18) = firstVar | *(uint *)(param1 + 0x18) & 0xffffff8c;\n  *(uint *)(param1 + 0x34) = param2[1];\n  *(uint *)(param1 + 0x20) = secondVar;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003d60": "update_parameters_08003d60",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "firstVar",
                "uVar2": "secondVar",
                "local_10": "thirdVar"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e38": {
            "entrypoint": "0x08003e38",
            "current_name": "update_configuration_08003e38",
            "code": "\nvoid updateConfiguration_08003e38(int configurationBaseAddress,int *configurationArray)\n\n{\n  int param2Value;\n  uint updatedValue;\n  uint tempVariable;\n  \n  *(uint *)(configurationBaseAddress + 0x20) = *(uint *)(configurationBaseAddress + 0x20) & 0xffffffef;\n  tempVariable = *(uint *)(configurationBaseAddress + 4);\n  param2Value = *configurationArray;\n  updatedValue = configurationArray[2] << 4 | *(uint *)(configurationBaseAddress + 0x20) & 0xffffffdf;\n  if (configurationBaseAddress == 0x40012c00) {\n    updatedValue = (configurationArray[3] << 4 | updatedValue & 0xffffff7f) & 0xffffffbf;\n    tempVariable = configurationArray[6] << 2 | configurationArray[5] << 2 | tempVariable & 0xfffff3ff;\n  }\n  *(uint *)(configurationBaseAddress + 4) = tempVariable;\n  *(uint *)(configurationBaseAddress + 0x18) = param2Value << 8 | *(uint *)(configurationBaseAddress + 0x18) & 0xffff8cff;\n  *(int *)(configurationBaseAddress + 0x38) = configurationArray[1];\n  *(uint *)(configurationBaseAddress + 0x20) = updatedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e38": "update_configuration_08003e38",
                "param_1": "configurationBaseAddress",
                "param_2": "configurationArray",
                "local_10": "tempVariable",
                "iVar1": "param2Value",
                "uVar2": "updatedValue"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f18": {
            "entrypoint": "0x08003f18",
            "current_name": "update_param_08003f18",
            "code": "\nvoid updateParam_08003f18(int address,uint *data)\n\n{\n  uint firstValue;\n  uint secondValue;\n  uint tempValue;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xfffffeff;\n  tempValue = *(uint *)(address + 4);\n  firstValue = *data;\n  secondValue = data[2] << 8 | *(uint *)(address + 0x20) & 0xfffffdff;\n  if (address == 0x40012c00) {\n    secondValue = (data[3] << 8 | secondValue & 0xfffff7ff) & 0xfffffbff;\n    tempValue = data[6] << 4 | data[5] << 4 | tempValue & 0xffffcfff;\n  }\n  *(uint *)(address + 4) = tempValue;\n  *(uint *)(address + 0x1c) = firstValue | *(uint *)(address + 0x1c) & 0xffffff8c;\n  *(uint *)(address + 0x3c) = data[1];\n  *(uint *)(address + 0x20) = secondValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f18": "update_param_08003f18",
                "param_1": "address",
                "param_2": "data",
                "uVar1": "firstValue",
                "uVar2": "secondValue",
                "local_10": "tempValue"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff8": {
            "entrypoint": "0x08003ff8",
            "current_name": "update_params_08003ff8",
            "code": "\nvoid updateParams_08003ff8(int param_address,int *param_values)\n\n{\n  int value_1;\n  int value_2;\n  uint local_value;\n  \n  *(uint *)(param_address + 0x20) = *(uint *)(param_address + 0x20) & 0xffffefff;\n  local_value = *(uint *)(param_address + 4);\n  value_1 = *param_values;\n  value_2 = param_values[2];\n  if (param_address == 0x40012c00) {\n    local_value = param_values[5] << 6 | local_value & 0xffffbfff;\n  }\n  *(uint *)(param_address + 4) = local_value;\n  *(uint *)(param_address + 0x1c) = value_1 << 8 | *(uint *)(param_address + 0x1c) & 0xffff8cff;\n  *(int *)(param_address + 0x40) = param_values[1];\n  *(uint *)(param_address + 0x20) = value_2 << 0xc | *(uint *)(param_address + 0x20) & 0xffffdfff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff8": "update_params_08003ff8",
                "param_1": "param_address",
                "param_2": "param_values",
                "iVar1": "value_1",
                "iVar2": "value_2",
                "local_c": "local_value"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040a0": {
            "entrypoint": "0x080040a0",
            "current_name": "update_parameter_data_080040a0",
            "code": "\nvoid updateParameterData_080040a0(int dataAddress,uint value,int bitShiftAmount)\n\n{\n  uint existingData;\n  \n  existingData = *(uint *)(dataAddress + 0x20);\n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xfffffffe;\n  *(uint *)(dataAddress + 0x18) = bitShiftAmount << 4 | *(uint *)(dataAddress + 0x18) & 0xffffff0f;\n  *(uint *)(dataAddress + 0x20) = value | existingData & 0xfffffff5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040a0": "update_parameter_data_080040a0",
                "param_1": "dataAddress",
                "param_2": "value",
                "param_3": "bitShiftAmount",
                "uVar1": "existingData"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004104": {
            "entrypoint": "0x08004104",
            "current_name": "update_flags_and_values_08004104",
            "code": "\nvoid updateFlagsAndValues_08004104(int ptr,int value1,int value2)\n\n{\n  *(uint *)(ptr + 0x20) = *(uint *)(ptr + 0x20) & 0xffffffef;\n  *(uint *)(ptr + 0x18) = value2 << 0xc | *(uint *)(ptr + 0x18) & 0xffff0fff;\n  *(uint *)(ptr + 0x20) = value1 << 4 | *(uint *)(ptr + 0x20) & 0xffffff5f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004104": "update_flags_and_values_08004104",
                "param_1": "ptr",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800416a": {
            "entrypoint": "0x0800416a",
            "current_name": "update_param_with_bits_0800416a",
            "code": "\nvoid updateParamWithBits_0800416a(int baseAddress,ushort bitsToAdd)\n\n{\n  *(uint *)(baseAddress + 8) = *(uint *)(baseAddress + 8) & 0xffffff8f | (uint)(bitsToAdd | 7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800416a": "update_param_with_bits_0800416a",
                "param_1": "baseAddress",
                "param_2": "bitsToAdd"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a8": {
            "entrypoint": "0x080041a8",
            "current_name": "update_flags_080041a8",
            "code": "\nvoid updateFlags_080041a8(int dataPointer,uint value1,uint value2,int value3)\n\n{\n  *(uint *)(dataPointer + 8) = value1 | value3 << 8 | value2 | *(uint *)(dataPointer + 8) & 0xffff00ff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a8": "update_flags_080041a8",
                "param_1": "dataPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ea": {
            "entrypoint": "0x080041ea",
            "current_name": "update_bitwise_operation_080041ea",
            "code": "\nvoid updateBitwiseOperation_080041ea(int baseAddress,uint bitPosition,int bitValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | bitValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041ea": "update_bitwise_operation_080041ea",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_080036a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800422e": {
            "entrypoint": "0x0800422e",
            "current_name": "update_configurations_0800422e",
            "code": "\nundefined4 updateConfigurations_0800422e(int *configPtr,uint *dataPtr)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(configPtr + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(configPtr + 0xf) = 1;\n    *(uint *)(*configPtr + 0x44) =\n         dataPtr[6] |\n         (dataPtr[6] |\n         (dataPtr[5] |\n         (dataPtr[4] |\n         (*dataPtr | (dataPtr[1] | (dataPtr[2] | dataPtr[3] & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff\n         ) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n    *(undefined *)(configPtr + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800422e": "update_configurations_0800422e",
                "param_1": "configPtr",
                "param_2": "dataPtr",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042de": {
            "entrypoint": "0x080042de",
            "current_name": "process_parameters_080042de",
            "code": "\nundefined4 process_parameters_080042de(int *parameter_array,uint *value_array)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(parameter_array + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(parameter_array + 0xf) = 1;\n    *(undefined *)((int)parameter_array + 0x3d) = 2;\n    *(uint *)(*parameter_array + 4) = *(uint *)(*parameter_array + 4) & 0xffffff8f;\n    *(uint *)(*parameter_array + 4) = *value_array | *(uint *)(*parameter_array + 4);\n    *(uint *)(*parameter_array + 8) = *(uint *)(*parameter_array + 8) & 0xffffff7f;\n    *(uint *)(*parameter_array + 8) = value_2 | *(uint *)(*parameter_array + 8);\n    *(undefined *)((int)parameter_array + 0x3d) = 1;\n    *(undefined *)(parameter_array + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080042de": "process_parameters_080042de",
                "param_1": "parameter_array",
                "param_2": "value_array",
                "uVar1": "result",
                "param_2[1]": "value_2"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004366": {
            "entrypoint": "0x08004366",
            "current_name": "FUNC_08004366",
            "code": "\nvoid FUNC_08004366(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004366": "FUNC_08004366"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004378": {
            "entrypoint": "0x08004378",
            "current_name": "FUNC_08004378",
            "code": "\nvoid FUNC_08004378(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004378": "FUNC_08004378"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800438a": {
            "entrypoint": "0x0800438a",
            "current_name": "apply_updates_0800438a",
            "code": "\nundefined4 applyUpdates_0800438a(int *data)\n\n{\n  undefined4 result;\n  \n  if (data == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)data + 0x39) == '\\0') {\n      *(undefined *)(data + 0xe) = 0;\n      FUNC_08004424(data);\n    }\n    *(undefined *)((int)data + 0x39) = 0x24;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffdfff;\n    calculate_and_update_values_080046ec(data);\n    *(uint *)(*data + 0x10) = *(uint *)(*data + 0x10) & 0xffffb7ff;\n    *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xffffffd5;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x2000;\n    counter = 0;\n    *(undefined *)((int)data + 0x39) = 0x20;\n    *(undefined *)((int)data + 0x3a) = 0x20;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800438a": "apply_updates_0800438a",
                "param_1": "data",
                "uVar1": "result",
                "param_1[0xf]": "counter"
            },
            "calling": [
                "FUN_08005598"
            ],
            "called": [
                "FUN_08004424",
                "FUN_080046ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004424": {
            "entrypoint": "0x08004424",
            "current_name": "FUNC_08004424",
            "code": "\nvoid FUNC_08004424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004424": "FUNC_08004424"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004436": {
            "entrypoint": "0x08004436",
            "current_name": "process_data_08004436",
            "code": "\nundefined4 processData_08004436(uint **ptrArray,ushort *inputData,short inputLength,uint maxIterations)\n\n{\n  int initialValue;\n  int currentValue;\n  undefined4 resultCode;\n  ushort *currentInput;\n  \n  if (*(char *)((int)ptrArray + 0x39) == ' ') {\n    if ((inputData == (ushort *)0x0) || (inputLength == 0)) {\n      resultCode = 1;\n    }\n    else if (*(char *)(ptrArray + 0xe) == '\\x01') {\n      resultCode = 2;\n    }\n    else {\n      *(undefined *)(ptrArray + 0xe) = 1;\n      ptrArray[0xf] = (uint *)0x0;\n      *(undefined *)((int)ptrArray + 0x39) = 0x21;\n      initialValue = get_global_variable_080015a0();\n      *(short *)(ptrArray + 9) = inputLength;\n      *(short *)((int)ptrArray + 0x26) = inputLength;\n      currentInput = inputData;\n      while (*(short *)((int)ptrArray + 0x26) != 0) {\n        *(short *)((int)ptrArray + 0x26) = *(short *)((int)ptrArray + 0x26) + -1;\n        if (ptrArray[2] == (uint *)0x1000) {\n          do {\n            if ((**ptrArray & 0x80) == 0x80) {\n              currentValue = 0;\n              goto LAB_0800454c;\n            }\n          } while ((maxIterations == 0xffffffff) ||\n                  ((maxIterations != 0 && (currentValue = get_global_variable_080015a0(), (uint)(currentValue - initialValue) <= maxIterations))));\n          (*ptrArray)[3] = (*ptrArray)[3] & 0xfffffe5f;\n          (*ptrArray)[5] = (*ptrArray)[5] & 0xfffffffe;\n          *(undefined *)((int)ptrArray + 0x39) = 0x20;\n          *(undefined *)((int)ptrArray + 0x3a) = 0x20;\n          *(undefined *)(ptrArray + 0xe) = 0;\n          currentValue = 3;\nLAB_0800454c:\n          if (currentValue != 0) {\n            return 3;\n          }\n          (*ptrArray)[1] = *currentInput & 0x1ff;\n          if (ptrArray[4] == (uint *)0x0) {\n            currentInput = currentInput + 1;\n          }\n          else {\n            currentInput = (ushort *)((int)currentInput + 1);\n          }\n        }\n        else {\n          do {\n            if ((**ptrArray & 0x80) == 0x80) {\n              currentValue = 0;\n              goto LAB_08004614;\n            }\n          } while ((maxIterations == 0xffffffff) ||\n                  ((maxIterations != 0 && (currentValue = get_global_variable_080015a0(), (uint)(currentValue - initialValue) <= maxIterations))));\n          (*ptrArray)[3] = (*ptrArray)[3] & 0xfffffe5f;\n          (*ptrArray)[5] = (*ptrArray)[5] & 0xfffffffe;\n          *(undefined *)((int)ptrArray + 0x39) = 0x20;\n          *(undefined *)((int)ptrArray + 0x3a) = 0x20;\n          *(undefined *)(ptrArray + 0xe) = 0;\n          currentValue = 3;\nLAB_08004614:\n          if (currentValue != 0) {\n            return 3;\n          }\n          (*ptrArray)[1] = (uint)*(byte *)currentInput;\n          currentInput = (ushort *)((int)currentInput + 1);\n        }\n      }\n      do {\n        if ((**ptrArray & 0x40) == 0x40) {\n          initialValue = 0;\n          goto LAB_080046c6;\n        }\n      } while ((maxIterations == 0xffffffff) ||\n              ((maxIterations != 0 && (currentValue = get_global_variable_080015a0(), (uint)(currentValue - initialValue) <= maxIterations))));\n      (*ptrArray)[3] = (*ptrArray)[3] & 0xfffffe5f;\n      (*ptrArray)[5] = (*ptrArray)[5] & 0xfffffffe;\n      *(undefined *)((int)ptrArray + 0x39) = 0x20;\n      *(undefined *)((int)ptrArray + 0x3a) = 0x20;\n      *(undefined *)(ptrArray + 0xe) = 0;\n      initialValue = 3;\nLAB_080046c6:\n      if (initialValue == 0) {\n        *(undefined *)((int)ptrArray + 0x39) = 0x20;\n        *(undefined *)(ptrArray + 0xe) = 0;\n        resultCode = 0;\n      }\n      else {\n        resultCode = 3;\n      }\n    }\n  }\n  else {\n    resultCode = 2;\n  }\n  return resultCode;\n}\n\n",
            "renaming": {
                "FUN_08004436": "process_data_08004436",
                "param_1": "ptrArray",
                "param_2": "inputData",
                "param_3": "inputLength",
                "param_4": "maxIterations",
                "iVar1": "initialValue",
                "iVar2": "currentValue",
                "uVar3": "resultCode",
                "local_58": "currentInput"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046ec": {
            "entrypoint": "0x080046ec",
            "current_name": "calculate_and_update_values_080046ec",
            "code": "\nvoid calculateAndUpdateValues_080046ec(int *inputData)\n\n{\n  ulonglong shiftedResult1;\n  int shiftedResult2;\n  int shiftedResult3;\n  uint finalResult;\n  int shiftedResult4;\n  undefined8 getDataShiftedResult;\n  \n  *(uint *)(*inputData + 0x10) = inputData[3] | *(uint *)(*inputData + 0x10) & 0xffffcfff;\n  *(uint *)(*inputData + 0xc) =\n       *(uint *)(*inputData + 0xc) & 0xffffe9f3 | inputData[5] | inputData[2] | inputData[4];\n  *(uint *)(*inputData + 0x14) = inputData[6] | *(uint *)(*inputData + 0x14) & 0xfffffcff;\n  if (*inputData == 0x40013800) {\n    getDataShiftedResult = getShiftedData();\n    shiftedResult1 = (ulonglong)(uint)((int)getDataShiftedResult * 0x19) / (ulonglong)(uint)(inputData[1] << 2);\n    shiftedResult2 = getShiftedData((int)getDataShiftedResult,(int)((ulonglong)getDataShiftedResult >> 0x20),(int)(shiftedResult1 * 0x51eb851f));\n    shiftedResult3 = inputData[1];\n    getDataShiftedResult = getShiftedData();\n    finalResult = ((uint)(shiftedResult2 * 0x19) / (uint)(shiftedResult3 << 2) +\n            (int)(((ulonglong)(uint)((int)getDataShiftedResult * 0x19) / (ulonglong)(uint)(inputData[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    shiftedResult2 = getShiftedData((int)getDataShiftedResult,(int)((ulonglong)getDataShiftedResult >> 0x20),finalResult * 0x51eb851f);\n    shiftedResult4 = inputData[1];\n    shiftedResult3 = getShiftedData();\n    *(uint *)(*inputData + 8) =\n         ((((uint)(shiftedResult2 * 0x19) / (uint)(shiftedResult4 << 2) +\n           (int)(((ulonglong)(uint)(shiftedResult3 * 0x19) / (ulonglong)(uint)(inputData[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(shiftedResult1 / 100) * 0x10 + (finalResult / 100 & 0xf0);\n  }\n  else {\n    getDataShiftedResult = getDataShiftedData();\n    shiftedResult1 = (ulonglong)(uint)((int)getDataShiftedResult * 0x19) / (ulonglong)(uint)(inputData[1] << 2);\n    shiftedResult2 = getDataShiftedData((int)getDataShiftedResult,(int)((ulonglong)getDataShiftedResult >> 0x20),(int)(shiftedResult1 * 0x51eb851f));\n    shiftedResult3 = inputData[1];\n    getDataShiftedResult = getDataShiftedData();\n    finalResult = ((uint)(shiftedResult2 * 0x19) / (uint)(shiftedResult3 << 2) +\n            (int)(((ulonglong)(uint)((int)getDataShiftedResult * 0x19) / (ulonglong)(uint)(inputData[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    shiftedResult2 = getDataShiftedData((int)getDataShiftedResult,(int)((ulonglong)getDataShiftedResult >> 0x20),finalResult * 0x51eb851f);\n    shiftedResult4 = inputData[1];\n    shiftedResult3 = getDataShiftedData();\n    *(uint *)(*inputData + 8) =\n         ((((uint)(shiftedResult2 * 0x19) / (uint)(shiftedResult4 << 2) +\n           (int)(((ulonglong)(uint)(shiftedResult3 * 0x19) / (ulonglong)(uint)(inputData[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(shiftedResult1 / 100) * 0x10 + (finalResult / 100 & 0xf0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046ec": "calculate_and_update_values_080046ec",
                "param_1": "inputData",
                "uVar1": "shiftedResult1",
                "iVar2": "shiftedResult2",
                "iVar3": "shiftedResult3",
                "uVar4": "finalResult",
                "iVar5": "shiftedResult4",
                "uVar6": "getDataShiftedResult",
                "get_shifted_data_08003540": "getShiftedData",
                "get_data_shifted_08003518": "getDataShiftedData"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [
                "FUN_08003518",
                "FUN_08003540"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800491c": {
            "entrypoint": "0x0800491c",
            "current_name": "initialize_parameters_0800491c",
            "code": "\nvoid initializeParameters_0800491c(undefined4 *parameters)\n\n{\n  undefined value1;\n  undefined value2;\n  undefined valuesArr [5];\n  \n  value1 = 0;\n  (*DAT_20000a54)(0xd0,0x6b,&value1,1);\n  value2 = 0x10;\n  (*DAT_20000a54)(0xd0,0x1c,&value2,1);\n  valuesArr[0] = 8;\n  (*DAT_20000a54)(0xd0,0x1b,valuesArr,1);\n  *parameters = 0;\n  parameters[1] = 0;\n  parameters[2] = 0;\n  parameters[3] = 0;\n  parameters[4] = 0;\n  parameters[5] = 0;\n  parameters[6] = 0;\n  parameters[7] = 0;\n  parameters[8] = 0;\n  parameters[9] = 0;\n  parameters[10] = 0;\n  process_data_080049cc(parameters);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800491c": "initialize_parameters_0800491c",
                "param_1": "parameters",
                "local_13": "value1",
                "local_12": "value2",
                "local_11": "valuesArr"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080049cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049cc": {
            "entrypoint": "0x080049cc",
            "current_name": "process_data_080049cc",
            "code": "\nvoid process_data_080049cc(int data)\n\n{\n  undefined4 uVar1;\n  undefined4 bit1;\n  undefined4 bit2;\n  undefined4 timestamp;\n  int counter;\n  int index;\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  \n  counter = 1;\n  result4 = 0;\n  result3 = 0;\n  result2 = 0;\n  result1 = 0;\n  timestamp = (*DAT_20000a50)();\n  index = 0;\n  while( true ) {\n    if (counter <= index) break;\n    bit2 = 0;\n    bit1 = 0;\n    extract_bits(data);\n    calculate_values(data,&bit2,&bit1);\n    result2 = calculate_float(result2,bit2);\n    result1 = calculate_float(result1,bit1);\n    result4 = calculate_float(result4,*(undefined4 *)(data + 0x10));\n    result3 = calculate_float(result3,*(undefined4 *)(data + 0x14));\n    timestamp = (*DAT_20000a50)();\n    index = index + 1;\n  }\n  uVar1 = count_bits(counter);\n  uVar1 = calculate_result(result4,uVar1);\n  *(undefined4 *)(data + 0x1c) = uVar1;\n  uVar1 = count_bits(counter);\n  uVar1 = calculate_result(result3,uVar1);\n  *(undefined4 *)(data + 0x20) = uVar1;\n  uVar1 = count_bits(counter);\n  uVar1 = calculate_result(result2,uVar1);\n  *(undefined4 *)(data + 0x24) = uVar1;\n  uVar1 = count_bits(counter);\n  uVar1 = calculate_result(result1,uVar1);\n  *(undefined4 *)(data + 0x28) = uVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080049cc": "process_data_080049cc",
                "param_1": "data",
                "local_2c": "bit1",
                "local_28": "bit2",
                "local_24": "timestamp",
                "local_20": "counter",
                "local_1c": "index",
                "local_18": "result1",
                "local_14": "result2",
                "local_10": "result3",
                "local_c": "result4",
                "extract_bits_from_numbers_08004ae0": "extract_bits",
                "calculate_and_update_values_08004d78": "calculate_values",
                "calculate_floating_point_08000aa8": "calculate_float",
                "count_bits_and_shift_08000c10": "count_bits",
                "calculate_floating_point_08000e20": "calculate_result"
            },
            "calling": [
                "FUN_0800491c"
            ],
            "called": [
                "FUN_08000e20",
                "FUN_08000aa8",
                "FUN_08004ae0",
                "FUN_08004d78",
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ae0": {
            "entrypoint": "0x08004ae0",
            "current_name": "extract_bits_from_numbers_08004ae0",
            "code": "\nvoid extract_bits_from_numbers_08004ae0(undefined4 *result_array)\n\n{\n  undefined4 uVar1;\n  undefined temp_1;\n  undefined temp_2;\n  undefined temp_3;\n  undefined temp_4;\n  undefined temp_5;\n  undefined temp_6;\n  undefined temp_7;\n  undefined temp_8;\n  undefined temp_9;\n  undefined temp_10;\n  undefined temp_11;\n  undefined temp_12;\n  undefined temp_13;\n  undefined temp_14;\n  short input_1;\n  short input_2;\n  short input_3;\n  short input_4;\n  short input_5;\n  short input_6;\n  \n  (*DAT_20000a4c)(0xd0,0x3b,&temp_1,0xe);\n  input_6 = CONCAT11(temp_3,temp_4);\n  input_5 = CONCAT11(temp_5,temp_6);\n  input_4 = CONCAT11(temp_7,temp_8);\n  input_3 = CONCAT11(temp_9,temp_10);\n  input_2 = CONCAT11(temp_11,temp_12);\n  input_1 = CONCAT11(temp_13,temp_14);\n  uVar1 = count_bits_and_shift_value((int)CONCAT11(temp_1,temp_2));\n  *result_array = uVar1;\n  uVar1 = count_bits_and_shift_value((int)input_6);\n  result_array[1] = uVar1;\n  uVar1 = count_bits_and_shift_value((int)input_5);\n  result_array[2] = uVar1;\n  uVar1 = count_bits_and_shift_value((int)input_4);\n  result_array[3] = uVar1;\n  uVar1 = count_bits_and_shift_value((int)input_3);\n  result_array[4] = uVar1;\n  uVar1 = count_bits_and_shift_value((int)input_2);\n  result_array[5] = uVar1;\n  uVar1 = count_bits_and_shift_value((int)input_1);\n  result_array[6] = uVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ae0": "extract_bits_from_numbers_08004ae0",
                "param_1": "result_array",
                "local_2c": "temp_1",
                "local_2b": "temp_2",
                "local_2a": "temp_3",
                "local_29": "temp_4",
                "local_28": "temp_5",
                "local_27": "temp_6",
                "local_26": "temp_7",
                "local_25": "temp_8",
                "local_24": "temp_9",
                "local_23": "temp_10",
                "local_22": "temp_11",
                "local_21": "temp_12",
                "local_20": "temp_13",
                "local_1f": "temp_14",
                "local_1e": "input_1",
                "local_1c": "input_2",
                "local_1a": "input_3",
                "local_18": "input_4",
                "local_16": "input_5",
                "local_14": "input_6",
                "count_bits_and_shift_08000c10": "count_bits_and_shift_value"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_080049cc"
            ],
            "called": [
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bd8": {
            "entrypoint": "0x08004bd8",
            "current_name": "calculate_result_08004bd8",
            "code": "\nvoid calculate_result_08004bd8(int input_param,undefined4 *output_param)\n\n{\n  undefined4 float_result_1;\n  undefined8 float_result_2;\n  undefined8 float_result_3;\n  \n  float_result_1 = compute_float_08000aa4(*(undefined4 *)(input_param + 0x10),*(undefined4 *)(input_param + 0x1c));\n  float_result_2 = bitwise_operation_08000418(DAT_200009e4);\n  float_result_3 = bitwise_operation_08000418(float_result_1);\n  float_result_3 = calculate_improved_result_080004c8((int)float_result_3,(int)((ulonglong)float_result_3 >> 0x20),0x83f5c366,0x3f340215);\n  float_result_2 = combine_numbers_0800015c((int)float_result_2,(int)((ulonglong)float_result_2 >> 0x20),(int)float_result_3,\n                       (int)((ulonglong)float_result_3 >> 0x20));\n  DAT_200009e4 = calculate_new_float_080009fc((int)float_result_2,(int)((ulonglong)float_result_2 >> 0x20));\n  float_result_2 = bitwise_operation_08000418(*(undefined4 *)(input_param + 4));\n  float_result_2 = calculate_floating_point_0800071c((int)float_result_2,(int)((ulonglong)float_result_2 >> 0x20),0,0x40b00000);\n  float_result_3 = bitwise_operation_08000418(*(undefined4 *)(input_param + 8));\n  float_result_3 = calculate_floating_point_0800071c((int)float_result_3,(int)((ulonglong)float_result_3 >> 0x20),0,0x40b00000);\n  float_result_2 = thunk_perform_floating_point_operation_08005838((int)float_result_2,(int)((ulonglong)float_result_2 >> 0x20),(int)float_result_3,\n                             (int)((ulonglong)float_result_3 >> 0x20));\n  float_result_2 = calculate_improved_result_080004c8((int)float_result_2,(int)((ulonglong)float_result_2 >> 0x20),0,0x40668000);\n  float_result_2 = calculate_floating_point_0800071c((int)float_result_2,(int)((ulonglong)float_result_2 >> 0x20),0x54442d18,0x400921fb);\n  float_result_3 = bitwise_operation_08000418(*(undefined4 *)(input_param + 0x24));\n  float_result_2 = calculate_xor_08000158((int)float_result_2,(int)((ulonglong)float_result_2 >> 0x20),(int)float_result_3,\n                       (int)((ulonglong)float_result_3 >> 0x20));\n  float_result_2 = combine_numbers_0800015c((int)float_result_2,(int)((ulonglong)float_result_2 >> 0x20),0,0x40568000);\n  float_result_1 = calculate_new_float_080009fc((int)float_result_2,(int)((ulonglong)float_result_2 >> 0x20));\n  if (DAT_20000005 == '\\0') {\n    float_result_2 = bitwise_operation_08000418(DAT_200009e4);\n    float_result_2 = calculate_improved_result_080004c8((int)float_result_2,(int)((ulonglong)float_result_2 >> 0x20),0x9999999a,0x3fe99999);\n    float_result_3 = bitwise_operation_08000418(float_result_1);\n    float_result_3 = calculate_improved_result_080004c8((int)float_result_3,(int)((ulonglong)float_result_3 >> 0x20),0x9999999a,0x3fc99999);\n    float_result_2 = combine_numbers_0800015c((int)float_result_2,(int)((ulonglong)float_result_2 >> 0x20),(int)float_result_3,\n                         (int)((ulonglong)float_result_3 >> 0x20));\n    DAT_200009e4 = calculate_new_float_080009fc((int)float_result_2,(int)((ulonglong)float_result_2 >> 0x20));\n  }\n  else {\n    DAT_20000005 = '\\0';\n    DAT_200009e4 = float_result_1;\n  }\n  *output_param = DAT_200009e4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bd8": "calculate_result_08004bd8",
                "param_1": "input_param",
                "param_2": "output_param",
                "uVar1": "float_result_1",
                "uVar2": "float_result_2",
                "uVar3": "float_result_3"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_080004c8",
                "FUN_08000158",
                "FUN_080009fc",
                "thunk_FUN_08005838",
                "FUN_08000418",
                "FUN_0800015c",
                "FUN_0800071c",
                "FUN_08000aa4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d78": {
            "entrypoint": "0x08004d78",
            "current_name": "calculate_and_update_values_08004d78",
            "code": "\nvoid calculate_and_update_values_08004d78(undefined4 *input_values,undefined4 *updated_value_1,undefined4 *updated_value_2)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  undefined4 result_3;\n  undefined8 intermediate_result;\n  undefined8 intermediate_result_2;\n  \n  result_1 = calculate_floating_point_08000e20(*input_values,0x45800000);\n  result_2 = calculate_floating_point_08000e20(input_values[1],0x45800000);\n  result_3 = calculate_floating_point_08000e20(input_values[2],0x45800000);\n  intermediate_result = bitwise_operation_08000418(result_2);\n  intermediate_result_2 = bitwise_operation_08000418(result_3);\n  intermediate_result = thunk_perform_floating_point_operation_08005838((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),(int)intermediate_result_2,\n                             (int)((ulonglong)intermediate_result_2 >> 0x20));\n  intermediate_result = calculate_improved_result_080004c8((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),0,0x40668000);\n  intermediate_result = calculate_floating_point_0800071c((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),0x54442d18,0x400921fb);\n  result_2 = calculate_new_float_080009fc((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20));\n  intermediate_result = bitwise_operation_08000418(result_1);\n  intermediate_result_2 = bitwise_operation_08000418(result_3);\n  intermediate_result = thunk_perform_floating_point_operation_08005838((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),(int)intermediate_result_2,\n                             (int)((ulonglong)intermediate_result_2 >> 0x20));\n  intermediate_result = calculate_improved_result_080004c8((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),0,0x40668000);\n  intermediate_result = calculate_floating_point_0800071c((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),0x54442d18,0x400921fb);\n  result_1 = calculate_new_float_080009fc((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20));\n  *updated_value_1 = result_2;\n  *updated_value_2 = result_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d78": "calculate_and_update_values_08004d78",
                "param_1": "input_values",
                "param_2": "updated_value_1",
                "param_3": "updated_value_2",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "uVar3": "result_3",
                "uVar4": "intermediate_result",
                "uVar5": "intermediate_result_2"
            },
            "calling": [
                "FUN_080049cc"
            ],
            "called": [
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000e20",
                "thunk_FUN_08005838",
                "FUN_08000418",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e6c": {
            "entrypoint": "0x08004e6c",
            "current_name": "execute_software_interrupt_08004e6c",
            "code": "\nvoid executeSoftwareInterrupt_08004e6c(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e6c": "execute_software_interrupt_08004e6c"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e74": {
            "entrypoint": "0x08004e74",
            "current_name": "execute_interrupt_handler_08004e74",
            "code": "\nundefined4 execute_interrupt_handler_08004e74(undefined4 interrupt_code)\n\n{\n  undefined4 result;\n  \n  if (DAT_200009f0 == 0) {\n    result = execute_software_interrupt_08004e6c(1,interrupt_code,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004e74": "execute_interrupt_handler_08004e74",
                "param_1": "interrupt_code",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08004e6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ea4": {
            "entrypoint": "0x08004ea4",
            "current_name": "process_data_08004ea4",
            "code": "\nvoid processData_08004ea4(undefined input1,undefined input2,undefined4 length,undefined2 config)\n\n{\n  process_data_08001ccc(&DAT_20000a88,input1,input2,1,length,config,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ea4": "process_data_08004ea4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "length",
                "param_4": "config"
            },
            "calling": [],
            "called": [
                "FUN_08001ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ee8": {
            "entrypoint": "0x08004ee8",
            "current_name": "process_data_08004ee8",
            "code": "\nvoid process_data_08004ee8(undefined data_param1,undefined data_param2,undefined4 data_param3,undefined2 data_param4)\n\n{\n  process_data_08004ee8_08001f6c(&DAT_20000a88,data_param1,data_param2,1,data_param3,data_param4,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ee8": "process_data_08004ee8",
                "param_1": "data_param1",
                "param_2": "data_param2",
                "param_3": "data_param3",
                "param_4": "data_param4"
            },
            "calling": [],
            "called": [
                "FUN_08001f6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f2c": {
            "entrypoint": "0x08004f2c",
            "current_name": "initialize_global_variable_08004f2c",
            "code": "\nundefined4 initializeGlobalVariable_08004f2c(void)\n\n{\n  undefined4 globalVariable;\n  \n  globalVariable = get_global_variable_080015a0();\n  return globalVariable;\n}\n\n",
            "renaming": {
                "FUN_08004f2c": "initialize_global_variable_08004f2c",
                "uVar1": "globalVariable"
            },
            "calling": [],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "process_data_wrapper_08004f3c",
            "code": "\nvoid process_data_wrapper_08004f3c(undefined4 data,undefined2 value)\n\n{\n  process_data_08004436(&DAT_20000adc,data,value,0x32);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "process_data_wrapper_08004f3c",
                "param_1": "data",
                "param_2": "value"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08004436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f60": {
            "entrypoint": "0x08004f60",
            "current_name": "initialize_memory_08004f60",
            "code": "\nvoid initializeMemory_08004f60(void)\n\n{\n  fill_memory_08005d68(&DAT_20000ba8,0,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f60": "initialize_memory_08004f60"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005d68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f78": {
            "entrypoint": "0x08004f78",
            "current_name": "initialize_and_process_data_08004f78",
            "code": "\nvoid initializeAndProcessData_08004f78(void)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  undefined4 uVar3;\n  uint uVar4;\n  undefined8 uVar5;\n  byte local_11;\n  \n  extractBitsFromNumbers(&DAT_20000a5c);\n  calculateResult(&DAT_20000a5c,&DAT_20000ba0);\n  initializeMemory();\n  uVar5 = performBitwiseOperation(DAT_20000ba0);\n  initializeMemory2(&DAT_20000ba8,\"Pitch: %f\\n\",(int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n  uVar1 = calculateLZCount(&DAT_20000ba8);\n  processDataWrapper(&DAT_20000ba8,uVar1);\n  DAT_200009f8 = computeFloat(DAT_20000014,DAT_20000ba0);\n  DAT_20000be8 = calculateFloatingPoint(DAT_20000a00,DAT_200009f8);\n  uVar1 = calculateFloatingPoint(DAT_20000a04,DAT_200009f8);\n  DAT_20000b5c = calculateFloatingPoint2(uVar1,DAT_20000b5c);\n  uVar1 = countBitsAndShift(DAT_20000010);\n  iVar2 = isInputBlank(uVar1,DAT_20000b5c);\n  if (iVar2 == 0) {\n    uVar1 = countBitsAndShift(DAT_200009f4);\n    iVar2 = checkConcatenationIsEmpty(uVar1,DAT_20000b5c);\n    if (iVar2 != 0) {\n      DAT_20000b5c = calculateValue(DAT_200009f4);\n    }\n  }\n  else {\n    DAT_20000b5c = calculateValue(DAT_20000010);\n  }\n  uVar4 = DAT_20000a08 ^ 0x80000000;\n  uVar1 = computeFloat(DAT_200009f8,DAT_200009fc);\n  DAT_20000a58 = calculateFloatingPoint(uVar4,uVar1);\n  uVar1 = calculateFloatingPoint2(DAT_20000be8,DAT_20000b5c);\n  uVar1 = calculateFloatingPoint2(uVar1,DAT_20000a58);\n  uVar3 = countBitsAndShift(DAT_20000010);\n  iVar2 = checkConcatenationIsEmpty(uVar1,uVar3);\n  if (iVar2 == 0) {\n    uVar3 = countBitsAndShift(DAT_200009f4);\n    iVar2 = isInputBlank(uVar1,uVar3);\n    if (iVar2 == 0) {\n      local_11 = checkValue(uVar1);\n    }\n    else {\n      local_11 = DAT_200009f4;\n    }\n  }\n  else {\n    local_11 = DAT_20000010;\n  }\n  DAT_200009fc = DAT_200009f8;\n  iVar2 = checkConcatenationIsEmpty(DAT_200009f8,0);\n  updateParamValue(0x40010800,2,iVar2 != 0);\n  iVar2 = checkConcatenationIsEmpty(DAT_200009f8,0);\n  updateParamValue(0x40010800,4,iVar2 == 0);\n  iVar2 = checkConcatenationIsEmpty(DAT_200009f8,0);\n  updateParamValue(0x40010800,8,iVar2 != 0);\n  iVar2 = checkConcatenationIsEmpty(DAT_200009f8,0);\n  updateParamValue(0x40010800,0x10,iVar2 == 0);\n  *(uint *)(DAT_20000b1c + 0x34) = (uint)local_11;\n  *(uint *)(DAT_20000b1c + 0x40) = (uint)local_11;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f78": "initialize_and_process_data_08004f78",
                "extract_bits_from_numbers_08004ae0": "extractBitsFromNumbers",
                "calculate_result_08004bd8": "calculateResult",
                "initialize_memory_08004f60": "initializeMemory",
                "bitwise_operation_08000418": "performBitwiseOperation",
                "initialize_memory_08005dfc": "initializeMemory2",
                "calculate_lz_count_08005e40": "calculateLZCount",
                "process_data_wrapper_08004f3c": "processDataWrapper",
                "compute_float_08000aa4": "computeFloat",
                "calculate_floating_point_08000cb8": "calculateFloatingPoint",
                "calculate_floating_point_08000aa8": "calculateFloatingPoint2",
                "count_bits_and_shift_08000c10": "countBitsAndShift",
                "is_input_blank_08000ff4": "isInputBlank",
                "check_if_concatenation_is_empty_08001030": "checkConcatenationIsEmpty",
                "calculate_value_08000c08": "calculateValue",
                "check_value_08001044": "checkValue",
                "update_param_value_08001a80": "updateParamValue"
            },
            "calling": [
                "FUN_080017b4",
                "FUN_080036f8"
            ],
            "called": [
                "FUN_08004bd8",
                "FUN_08005e40",
                "FUN_08000418",
                "FUN_08000ff4",
                "FUN_08001030",
                "FUN_08004ae0",
                "FUN_08000c10",
                "FUN_08000cb8",
                "FUN_08005dfc",
                "FUN_08001044",
                "FUN_08001a80",
                "FUN_08000c08",
                "FUN_08000aa8",
                "FUN_08004f60",
                "FUN_08000aa4",
                "FUN_08004f3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005224": {
            "entrypoint": "0x08005224",
            "current_name": "initialize_system_08005224",
            "code": "\nvoid initializeSystem_08005224(void)\n\n{\n  initialize_and_configure_memory_080014f0();\n  initialize_system_080052a0();\n  initialize_values_080055f4();\n  initialize_data_08005348();\n  initialize_settings_08005598();\n  initialize_system_08005500();\n  initialize_and_configure_system_080053b0();\n  DAT_20000a54 = 0x8004ea5;\n  DAT_20000a4c = 0x8004ee9;\n  DAT_20000a50 = 0x8004f2d;\n  update_and_set_flags_080036a8(&DAT_20000b1c,0);\n  update_and_set_flags_080036a8(&DAT_20000b1c,0xc);\n  initialize_parameters_0800491c(&DAT_20000a5c);\n  enable_flag_0800360c(&DAT_20000b60);\n  execute_interrupt_handler_08004e74(0);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005224": "initialize_system_08005224"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_080053b0",
                "FUN_0800360c",
                "FUN_080014f0",
                "FUN_08005500",
                "FUN_08005598",
                "FUN_080052a0",
                "FUN_0800491c",
                "FUN_080036a8",
                "FUN_08005348",
                "FUN_080055f4",
                "FUN_08004e74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052a0": {
            "entrypoint": "0x080052a0",
            "current_name": "initialize_system_080052a0",
            "code": "\nvoid initialize_system_080052a0(void)\n\n{\n  int iVar1;\n  undefined8 uVar2;\n  undefined4 register_flags;\n  undefined4 register_value;\n  undefined4 memory_block_size;\n  undefined4 memory_block_id;\n  undefined4 memory_block_address;\n  undefined4 register_index;\n  undefined4 register_mask;\n  undefined4 register_offset;\n  undefined4 register_size;\n  undefined4 constant_value;\n  undefined4 constant_mask;\n  undefined4 constant_offset;\n  \n  register_index = 1;\n  register_mask = 0x10000;\n  register_offset = 0;\n  register_size = 1;\n  constant_value = 2;\n  constant_mask = 0x10000;\n  constant_offset = 0x1c0000;\n  iVar1 = check_and_modify_registers_08002d98(&register_index);\n  if (iVar1 != 0) {\n    loop_forever_08005674(\"../src/main.c\",0x151);\n  }\n  register_flags = 0xf;\n  register_value = 2;\n  memory_block_size = 0x80;\n  memory_block_id = 0;\n  memory_block_address = 0;\n  iVar1 = check_and_initialize_execution_08003260(&register_flags,2);\n  if (iVar1 != 0) {\n    loop_forever_08005674(\"../src/main.c\",0x15e);\n  }\n  uVar2 = get_data_08003504();\n  initialize_memory_08001762((uint)uVar2 / 1000,(int)((ulonglong)uVar2 >> 0x20),(uint)uVar2 * 0x10624dd3);\n  set_bit_flag_0800177c(4);\n  write_value_to_memory_with_mask_0800172a(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052a0": "initialize_system_080052a0",
                "local_44": "register_flags",
                "local_40": "register_value",
                "local_3c": "memory_block_size",
                "local_38": "memory_block_id",
                "local_34": "memory_block_address",
                "local_30": "register_index",
                "local_2c": "register_mask",
                "local_28": "register_offset",
                "local_20": "register_size",
                "local_14": "constant_value",
                "local_10": "constant_mask",
                "local_c": "constant_offset"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08003504",
                "FUN_0800172a",
                "FUN_08005674",
                "FUN_08002d98",
                "FUN_08003260",
                "FUN_08001762",
                "FUN_0800177c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005348": {
            "entrypoint": "0x08005348",
            "current_name": "initialize_data_08005348",
            "code": "\nvoid initializeData_08005348(void)\n\n{\n  int iVar1;\n  \n  DAT_20000a88 = 0x40005400;\n  DAT_20000a8c = 400000;\n  DAT_20000a90 = 0;\n  DAT_20000a94 = 0;\n  DAT_20000a98 = 0x4000;\n  DAT_20000a9c = 0;\n  DAT_20000aa0 = 0;\n  DAT_20000aa4 = 0;\n  DAT_20000aa8 = 0;\n  iVar1 = calculateParams(&DAT_20000a88);\n  if (iVar1 != 0) {\n    loopForever(\"../src/main.c\",0x17a);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005348": "initialize_data_08005348",
                "calculate_params_08001ab0": "calculateParams",
                "loop_forever_08005674": "loopForever"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_08005674"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053b0": {
            "entrypoint": "0x080053b0",
            "current_name": "initialize_and_configure_system_080053b0",
            "code": "\nvoid initialize_and_configure_system_080053b0(void)\n\n{\n  int iVar1;\n  undefined4 configuration_parameter_1;\n  undefined4 configuration_parameter_2;\n  undefined4 configuration_parameter_3;\n  undefined4 configuration_parameter_4;\n  undefined4 configuration_parameter_5;\n  undefined4 configuration_parameter_6;\n  undefined4 configuration_parameter_7;\n  undefined4 parameter_1;\n  undefined4 parameter_2;\n  undefined4 parameter_3;\n  undefined4 parameter_4;\n  undefined4 parameter_5;\n  undefined4 parameter_6;\n  undefined4 parameter_7;\n  undefined4 variable_1;\n  undefined4 variable_2;\n  undefined4 variable_array [4];\n  \n  DAT_20000b1c = 0x40012c00;\n  DAT_20000b20 = 0x708;\n  DAT_20000b24 = 0;\n  DAT_20000b28 = 100;\n  DAT_20000b2c = 0;\n  DAT_20000b30 = 0;\n  DAT_20000b34 = 0;\n  iVar1 = check_and_update_registers_080035a4(&DAT_20000b1c);\n  if (iVar1 != 0) {\n    loop_forever_08005674(\"../src/main.c\",399);\n  }\n  variable_array[0] = 0x1000;\n  iVar1 = update_param_data_08003a94(&DAT_20000b1c,variable_array);\n  if (iVar1 != 0) {\n    loop_forever_08005674(\"../src/main.c\",0x194);\n  }\n  iVar1 = check_and_update_registers_08003640(&DAT_20000b1c);\n  if (iVar1 != 0) {\n    loop_forever_08005674(\"../src/main.c\",0x198);\n  }\n  variable_1 = 0;\n  variable_2 = 0;\n  iVar1 = process_parameters_080042de(&DAT_20000b1c,&variable_1);\n  if (iVar1 != 0) {\n    loop_forever_08005674(\"../src/main.c\",0x19f);\n  }\n  parameter_1 = 0x60;\n  parameter_2 = 0;\n  parameter_3 = 0;\n  parameter_4 = 0;\n  parameter_5 = 0;\n  parameter_6 = 0;\n  parameter_7 = 0;\n  iVar1 = update_parameters_08003908(&DAT_20000b1c,&parameter_1,0);\n  if (iVar1 != 0) {\n    loop_forever_08005674(\"../src/main.c\",0x1ab);\n  }\n  iVar1 = update_parameters_08003908(&DAT_20000b1c,&parameter_1,0xc);\n  if (iVar1 != 0) {\n    loop_forever_08005674(\"../src/main.c\",0x1b0);\n  }\n  configuration_parameter_1 = 0;\n  configuration_parameter_2 = 0;\n  configuration_parameter_3 = 0;\n  configuration_parameter_4 = 0;\n  configuration_parameter_5 = 0;\n  configuration_parameter_6 = 0x2000;\n  configuration_parameter_7 = 0;\n  iVar1 = update_configurations_0800422e(&DAT_20000b1c,&configuration_parameter_1);\n  if (iVar1 != 0) {\n    loop_forever_08005674(\"../src/main.c\",0x1bc);\n  }\n  initialize_bitwise_operations_08005680(&DAT_20000b1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053b0": "initialize_and_configure_system_080053b0",
                "local_58": "configuration_parameter_1",
                "local_54": "configuration_parameter_2",
                "local_50": "configuration_parameter_3",
                "local_4c": "configuration_parameter_4",
                "local_48": "configuration_parameter_5",
                "local_44": "configuration_parameter_6",
                "local_40": "configuration_parameter_7",
                "local_3c": "parameter_1",
                "local_38": "parameter_2",
                "local_34": "parameter_3",
                "local_30": "parameter_4",
                "local_2c": "parameter_5",
                "local_28": "parameter_6",
                "local_24": "parameter_7",
                "local_20": "variable_1",
                "local_1c": "variable_2",
                "local_18": "variable_array"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08003a94",
                "FUN_08003908",
                "FUN_0800422e",
                "FUN_08003640",
                "FUN_080035a4",
                "FUN_08005674",
                "FUN_08005680",
                "FUN_080042de"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005500": {
            "entrypoint": "0x08005500",
            "current_name": "initialize_system_08005500",
            "code": "\nvoid initializeSystem_08005500(void)\n\n{\n  int result;\n  undefined4 bufferSize;\n  undefined4 count;\n  undefined4 paramData [4];\n  \n  DAT_20000b60 = 0x40000000;\n  DAT_20000b64 = 36000;\n  DAT_20000b68 = 0;\n  DAT_20000b6c = 0x14;\n  DAT_20000b70 = 0;\n  DAT_20000b78 = 0;\n  result = check_and_update_registers_080035a4(&DAT_20000b60);\n  if (result != 0) {\n    loop_forever_08005674(\"../src/main.c\",0x1d0);\n  }\n  paramData[0] = 0x1000;\n  result = update_param_data_08003a94(&DAT_20000b60,paramData);\n  if (result != 0) {\n    loop_forever_08005674(\"../src/main.c\",0x1d5);\n  }\n  bufferSize = 0x20;\n  count = 0;\n  result = process_parameters_080042de(&DAT_20000b60,&bufferSize);\n  if (result != 0) {\n    loop_forever_08005674(\"../src/main.c\",0x1dc);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005500": "initialize_system_08005500",
                "local_20": "bufferSize",
                "local_1c": "count",
                "local_18": "paramData",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08003a94",
                "FUN_080035a4",
                "FUN_08005674",
                "FUN_080042de"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005598": {
            "entrypoint": "0x08005598",
            "current_name": "initialize_settings_08005598",
            "code": "\nvoid initializeSettings_08005598(void)\n\n{\n  int result;\n  \n  DAT_20000adc = 0x40013800;\n  DAT_20000ae0 = 0x1c200;\n  DAT_20000ae4 = 0;\n  DAT_20000ae8 = 0;\n  DAT_20000aec = 0;\n  DAT_20000af0 = 0xc;\n  DAT_20000af4 = 0;\n  DAT_20000af8 = 0;\n  result = apply_updates_0800438a(&DAT_20000adc);\n  if (result != 0) {\n    loop_forever_08005674(\"../src/main.c\",0x1ed);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005598": "initialize_settings_08005598",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_0800438a",
                "FUN_08005674"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055f4": {
            "entrypoint": "0x080055f4",
            "current_name": "initialize_values_080055f4",
            "code": "\n\n\nvoid initializeValues_080055f4(void)\n\n{\n  undefined4 paramValue;\n  undefined4 increment;\n  undefined4 bitwiseFlag;\n  \n  _DAT_40021018 = _DAT_40021018 | 0x2c;\n  update_param_value_08001a80(0x40010800,0x1e,0,_DAT_40021018 & 8);\n  paramValue = 0x1e;\n  increment = 1;\n  bitwiseFlag = 2;\n  update_bitwise_operations_080017c4(0x40010800,&paramValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080055f4": "initialize_values_080055f4",
                "local_18": "paramValue",
                "local_14": "increment",
                "local_c": "bitwiseFlag"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001a80",
                "FUN_080017c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005674": {
            "entrypoint": "0x08005674",
            "current_name": "loop_forever_08005674",
            "code": "\nvoid loopForever_08005674(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005674": "loop_forever_08005674"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500",
                "FUN_080052a0",
                "FUN_08005598",
                "FUN_08005348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005680": {
            "entrypoint": "0x08005680",
            "current_name": "initialize_bitwise_operations_08005680",
            "code": "\nvoid initializeBitwiseOperations_08005680(int *inputArray)\n\n{\n  undefined4 constantValue;\n  undefined4 bitwiseFlag1;\n  undefined4 bitwiseFlag2;\n  \n  if (*inputArray == 0x40012c00) {\n    constantValue = 0x900;\n    bitwiseFlag1 = 2;\n    bitwiseFlag2 = 2;\n    update_bitwise_operations_080017c4(0x40010800,&constantValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005680": "initialize_bitwise_operations_08005680",
                "param_1": "inputArray",
                "local_18": "constantValue",
                "local_14": "bitwiseFlag1",
                "local_c": "bitwiseFlag2"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_080017c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005704": {
            "entrypoint": "0x08005704",
            "current_name": "initialize_data_processing_08005704",
            "code": "\nvoid initialize_data_processing_08005704(void)\n\n{\n  update_data();\n  initialize_processing();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005704": "initialize_data_processing_08005704",
                "update_data_0800157c": "update_data",
                "initialize_data_processing_080017b4": "initialize_processing"
            },
            "calling": [],
            "called": [
                "FUN_080017b4",
                "FUN_0800157c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "initialize_flags_08005714",
            "code": "\nvoid initialize_flags_08005714(void)\n\n{\n  process_flags_080036f8(&DAT_20000b60);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005714": "initialize_flags_08005714"
            },
            "calling": [],
            "called": [
                "FUN_080036f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005728": {
            "entrypoint": "0x08005728",
            "current_name": "allocate_memory_08005728",
            "code": "\nundefined * allocate_memory_08005728(int size)\n\n{\n  undefined4 *data_value;\n  undefined *result;\n  undefined stack_buffer [4];\n  int remaining_size;\n  undefined *memory_start_address;\n  \n  if (DAT_20000a10 == (undefined *)0x0) {\n    DAT_20000a10 = &DAT_20000c18;\n  }\n  memory_start_address = DAT_20000a10;\n  if (stack_buffer < DAT_20000a10 + size) {\n    remaining_size = size;\n    data_value = (undefined4 *)get_data_value_08005d14();\n    *data_value = 0xc;\n    result = (undefined *)0xffffffff;\n  }\n  else {\n    result = DAT_20000a10;\n    DAT_20000a10 = DAT_20000a10 + size;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005728": "allocate_memory_08005728",
                "param_1": "size",
                "puVar1": "data_value",
                "puVar2": "result",
                "auStack_18": "stack_buffer",
                "local_14": "remaining_size",
                "local_c": "memory_start_address"
            },
            "calling": [
                "FUN_08009744"
            ],
            "called": [
                "FUN_08005d14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005780": {
            "entrypoint": "0x08005780",
            "current_name": "initialize_registers_08005780",
            "code": "\n\n\nvoid initializeRegisters_08005780(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005780": "initialize_registers_08005780"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x080057e8",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200009c8; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800a1a4);\n  }\n  for (puVar2 = &DAT_200009c8; puVar2 < &DAT_20000c14; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_registers_08005780();\n  execute_functions_08005d20();\n  UNRECOVERED_JUMPTABLE = (code *)0x800581a;\n  initialize_system_08005224();\n                    /* WARNING: Could not recover jumptable at 0x0800581a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08005d20",
                "FUN_08005780",
                "FUN_08005224"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08005838": {
            "entrypoint": "0x08005834",
            "current_name": "calculate_result_thunk_08005838",
            "code": "\nuint calculate_result_thunk_08005838(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int difference;\n  undefined4 uVar2;\n  uint flag;\n  uint positiveInput4;\n  uint positiveInput2;\n  undefined8 result;\n  \n  positiveInput4 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (positiveInput4 | (-input3 | input3) >> 0x1f)) ||\n     (positiveInput2 = input2 & 0x7fffffff, 0x7ff00000 < (positiveInput2 | (-input1 | input1) >> 0x1f))) {\n    positiveInput4 = combine_numbers(input3,input4,input1,input2);\n    return positiveInput4;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    positiveInput4 = calculate_improved_result();\n    return positiveInput4;\n  }\n  flag = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((positiveInput2 | input1) == 0) {\n    if (flag == 2) {\n      return 0x54442d18;\n    }\n    if (flag != 3) {\n      return input1;\n    }\n  }\n  else if ((positiveInput4 | input3) != 0) {\n    if (positiveInput4 == 0x7ff00000) {\n      if (positiveInput2 == 0x7ff00000) {\n        if (flag == 2) {\n          return 0x7f3321d2;\n        }\n        if (flag == 3) {\n          return 0x7f3321d2;\n        }\n        if (flag == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (flag == 2) {\n        return 0x54442d18;\n      }\n      if (flag != 3) {\n        if (flag != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (positiveInput2 != 0x7ff00000) {\n      difference = (int)(positiveInput2 - positiveInput4) >> 0x14;\n      if (difference < 0x3d) {\n        if (((int)input4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n          result = 0;\n        }\n        else {\n          calculate_floating_point(input1,input2,input3,input4,input4);\n          FUNC_08005d0c();\n          result = calculate_improved_result();\n        }\n      }\n      else {\n        result = 0x3ff921fb54442d18;\n      }\n      uVar2 = (undefined4)((ulonglong)result >> 0x20);\n      positiveInput4 = (uint)result;\n      if (flag == 1) {\n        return positiveInput4;\n      }\n      if (flag == 2) {\n        result = calculate_xor(positiveInput4,uVar2,0x33145c07,0x3ca1a626);\n        positiveInput4 = calculate_xor(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n        return positiveInput4;\n      }\n      if (flag != 0) {\n        result = calculate_xor(positiveInput4,uVar2,0x33145c07,0x3ca1a626);\n        positiveInput4 = calculate_xor((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n        return positiveInput4;\n      }\n      return positiveInput4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "thunk_FUN_08005838": "calculate_result_thunk_08005838",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar4": "positiveInput4",
                "uVar5": "positiveInput2",
                "uVar3": "flag",
                "uVar6": "result",
                "iVar1": "difference",
                "calculate_improved_result_080059f0": "calculate_improved_result",
                "combine_numbers_0800015c": "combine_numbers",
                "calculate_floating_point_0800071c": "calculate_floating_point",
                "calculate_xor_08000158": "calculate_xor"
            },
            "calling": [
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "called": [
                "FUN_08005838"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005838": {
            "entrypoint": "0x08005838",
            "current_name": "perform_floating_point_operation_08005838",
            "code": "\nuint performFloatingPointOperation_08005838(uint operand1,uint operand2,uint operand3,uint operand4)\n\n{\n  int difference;\n  undefined4 upperBits;\n  uint combinedBits;\n  uint modifiedOperand4;\n  uint modifiedOperand2;\n  undefined8 result;\n  \n  modifiedOperand4 = operand4 & 0x7fffffff;\n  if ((0x7ff00000 < (modifiedOperand4 | (-operand3 | operand3) >> 0x1f)) ||\n     (modifiedOperand2 = operand2 & 0x7fffffff, 0x7ff00000 < (modifiedOperand2 | (-operand1 | operand1) >> 0x1f))) {\n    modifiedOperand4 = combine_numbers_0800015c(operand3,operand4,operand1,operand2);\n    return modifiedOperand4;\n  }\n  if ((operand4 + 0xc0100000 | operand3) == 0) {\n    modifiedOperand4 = calculate_improved_result_080059f0();\n    return modifiedOperand4;\n  }\n  combinedBits = (int)operand4 >> 0x1e & 2U | operand2 >> 0x1f;\n  if ((modifiedOperand2 | operand1) == 0) {\n    if (combinedBits == 2) {\n      return 0x54442d18;\n    }\n    if (combinedBits != 3) {\n      return operand1;\n    }\n  }\n  else if ((modifiedOperand4 | operand3) != 0) {\n    if (modifiedOperand4 == 0x7ff00000) {\n      if (modifiedOperand2 == 0x7ff00000) {\n        if (combinedBits == 2) {\n          return 0x7f3321d2;\n        }\n        if (combinedBits == 3) {\n          return 0x7f3321d2;\n        }\n        if (combinedBits == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (combinedBits == 2) {\n        return 0x54442d18;\n      }\n      if (combinedBits != 3) {\n        if (combinedBits != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (modifiedOperand2 != 0x7ff00000) {\n      difference = (int)(modifiedOperand2 - modifiedOperand4) >> 0x14;\n      if (difference < 0x3d) {\n        if (((int)operand4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n          result = 0;\n        }\n        else {\n          calculate_floating_point_0800071c(operand1,operand2,operand3,operand4,operand4);\n          FUNC_08005d0c();\n          result = calculate_improved_result_080059f0();\n        }\n      }\n      else {\n        result = 0x3ff921fb54442d18;\n      }\n      upperBits = (undefined4)((ulonglong)result >> 0x20);\n      modifiedOperand4 = (uint)result;\n      if (combinedBits == 1) {\n        return modifiedOperand4;\n      }\n      if (combinedBits == 2) {\n        result = calculate_xor_08000158(modifiedOperand4,upperBits,0x33145c07,0x3ca1a626);\n        modifiedOperand4 = calculate_xor_08000158(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n        return modifiedOperand4;\n      }\n      if (combinedBits != 0) {\n        result = calculate_xor_08000158(modifiedOperand4,upperBits,0x33145c07,0x3ca1a626);\n        modifiedOperand4 = calculate_xor_08000158((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n        return modifiedOperand4;\n      }\n      return modifiedOperand4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "FUN_08005838": "perform_floating_point_operation_08005838",
                "param_1": "operand1",
                "param_2": "operand2",
                "param_3": "operand3",
                "param_4": "operand4",
                "iVar1": "difference",
                "uVar2": "upperBits",
                "uVar3": "combinedBits",
                "uVar4": "modifiedOperand4",
                "uVar5": "modifiedOperand2",
                "uVar6": "result"
            },
            "calling": [
                "thunk_FUN_08005838"
            ],
            "called": [
                "FUN_08000158",
                "FUN_080059f0",
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f0": {
            "entrypoint": "0x080059f0",
            "current_name": "calculate_improved_result_080059f0",
            "code": "\nundefined8 calculateImprovedResult_080059f0(int input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  uint maskedInput2;\n  int executionStatus;\n  undefined8 tempResult;\n  undefined8 finalResult;\n  \n  finalResult = CONCAT44(input2,input1);\n  maskedInput2 = input2 & 0x7fffffff;\n  if (maskedInput2 < 0x44100000) {\n    if (maskedInput2 < 0x3fdc0000) {\n      if (maskedInput2 < 0x3e200000) {\n        tempResult = combine_numbers_0800015c(input1,input2,0x8800759c,0x7e37e43c,input4);\n        executionStatus = check_if_main_executed_successfully_080009e8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0x3ff00000);\n        if (executionStatus != 0) {\n          return CONCAT44(input2,input1);\n        }\n      }\n      executionStatus = -1;\n    }\n    else {\n      finalResult = FUNC_08005d0c();\n      result4 = (undefined4)((ulonglong)finalResult >> 0x20);\n      result1 = (undefined4)finalResult;\n      if (maskedInput2 < 0x3ff30000) {\n        if (maskedInput2 < 0x3fe60000) {\n          finalResult = combine_numbers_0800015c(result1,result4,result1,result4);\n          finalResult = calculate_xor_08000158((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0,0x3ff00000);\n          tempResult = combine_numbers_0800015c(result1,result4,0,0x40000000);\n          finalResult = calculate_floating_point_0800071c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempResult,\n                                (int)((ulonglong)tempResult >> 0x20));\n          executionStatus = 0;\n        }\n        else {\n          finalResult = calculate_xor_08000158(result1,result4,0,0x3ff00000);\n          tempResult = combine_numbers_0800015c(result1,result4,0,0x3ff00000);\n          finalResult = calculate_floating_point_0800071c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempResult,\n                                (int)((ulonglong)tempResult >> 0x20));\n          executionStatus = 1;\n        }\n      }\n      else if (maskedInput2 < 0x40038000) {\n        finalResult = calculate_xor_08000158(result1,result4,0,0x3ff80000);\n        tempResult = calculate_improved_result_080004c8(result1,result4,0,0x3ff80000);\n        tempResult = combine_numbers_0800015c((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0x3ff00000);\n        finalResult = calculate_floating_point_0800071c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempResult,\n                              (int)((ulonglong)tempResult >> 0x20));\n        executionStatus = 2;\n      }\n      else {\n        finalResult = calculate_floating_point_0800071c(0,0xbff00000,result1,result4);\n        executionStatus = 3;\n      }\n    }\n    result6 = (undefined4)((ulonglong)finalResult >> 0x20);\n    result5 = (undefined4)finalResult;\n    finalResult = calculate_improved_result_080004c8(result5,result6,result5,result6);\n    result2 = (undefined4)((ulonglong)finalResult >> 0x20);\n    result1 = (undefined4)finalResult;\n    finalResult = calculate_improved_result_080004c8(result1,result2,result1,result2);\n    result3 = (undefined4)((ulonglong)finalResult >> 0x20);\n    result4 = (undefined4)finalResult;\n    finalResult = calculate_improved_result_080004c8(result4,result3,0xe322da11,0x3f90ad3a);\n    finalResult = combine_numbers_0800015c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0x24760deb,0x3fa97b4b);\n    finalResult = calculate_improved_result_080004c8((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result4,result3);\n    finalResult = combine_numbers_0800015c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0xa0d03d51,0x3fb10d66);\n    finalResult = calculate_improved_result_080004c8((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result4,result3);\n    finalResult = combine_numbers_0800015c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0xc54c206e,0x3fb745cd);\n    finalResult = calculate_improved_result_080004c8((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result4,result3);\n    finalResult = combine_numbers_0800015c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0x920083ff,0x3fc24924);\n    finalResult = calculate_improved_result_080004c8((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result4,result3);\n    finalResult = combine_numbers_0800015c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0x5555550d,0x3fd55555);\n    finalResult = calculate_improved_result_080004c8((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result1,result2);\n    tempResult = calculate_improved_result_080004c8(result4,result3,0x2c6a6c2f,0xbfa2b444);\n    tempResult = calculate_xor_08000158((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x52defd9a,0x3fadde2d);\n    tempResult = calculate_improved_result_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),result4,result3);\n    tempResult = calculate_xor_08000158((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    tempResult = calculate_improved_result_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),result4,result3);\n    tempResult = calculate_xor_08000158((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0xfe231671,0x3fbc71c6);\n    tempResult = calculate_improved_result_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),result4,result3);\n    tempResult = calculate_xor_08000158((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x9998ebc4,0x3fc99999);\n    tempResult = calculate_improved_result_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),result4,result3);\n    finalResult = combine_numbers_0800015c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempResult,\n                          (int)((ulonglong)tempResult >> 0x20));\n    finalResult = calculate_improved_result_080004c8((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result5,result6);\n    result1 = (undefined4)((ulonglong)finalResult >> 0x20);\n    if (executionStatus == -1) {\n      finalResult = calculate_xor_08000158(result5,result6,(int)finalResult,result1);\n      return finalResult;\n    }\n    executionStatus = executionStatus * 8;\n    finalResult = calculate_xor_08000158((int)finalResult,result1,*(undefined4 *)(&UNK_08009ee8 + executionStatus),\n                          *(undefined4 *)(&UNK_08009eec + executionStatus));\n    finalResult = calculate_xor_08000158((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result5,result6);\n    finalResult = calculate_xor_08000158(*(undefined4 *)(&UNK_08009ec8 + executionStatus),\n                          *(undefined4 *)(&UNK_08009ecc + executionStatus),(int)finalResult,\n                          (int)((ulonglong)finalResult >> 0x20));\n    if ((int)input2 < 0) {\n      return CONCAT44((int)((ulonglong)finalResult >> 0x20) + -0x80000000,(int)finalResult);\n    }\n  }\n  else {\n    if ((maskedInput2 < 0x7ff00001) && ((maskedInput2 != 0x7ff00000 || (input1 == 0)))) {\n      result1 = 0xbff921fb;\n      if (0 < (int)input2) {\n        result1 = 0x3ff921fb;\n      }\n      return CONCAT44(result1,0x54442d18);\n    }\n    finalResult = combine_numbers_0800015c(input1,input2,input1,input2,input4);\n  }\n  return finalResult;\n}\n\n",
            "renaming": {
                "FUN_080059f0": "calculate_improved_result_080059f0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "maskedInput2",
                "iVar8": "executionStatus",
                "uVar9": "tempResult",
                "uVar10": "finalResult"
            },
            "calling": [
                "FUN_08005838"
            ],
            "called": [
                "FUN_080004c8",
                "FUN_08000158",
                "FUN_080009e8",
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d0c": {
            "entrypoint": "0x08005d0c",
            "current_name": "FUNC_08005d0c",
            "code": "\nvoid FUNC_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d0c": "FUNC_08005d0c"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08005838"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005d14": {
            "entrypoint": "0x08005d14",
            "current_name": "get_data_value_08005d14",
            "code": "\nundefined4 get_data_value_08005d14(void)\n\n{\n  return DAT_2000001c;\n}\n\n",
            "renaming": {
                "FUN_08005d14": "get_data_value_08005d14"
            },
            "calling": [
                "FUN_08005728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d20": {
            "entrypoint": "0x08005d20",
            "current_name": "execute_functions_08005d20",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005d2c) */\n/* WARNING: Removing unreachable block (ram,0x08005d2e) */\n\nvoid executeFunctions_08005d20(void)\n\n{\n  int counter;\n  code **functionPointer;\n  \n  FUNC_08009e68();\n  counter = 0;\n  functionPointer = (code **)&DAT_0800a198;\n  do {\n    counter = counter + 1;\n    (**functionPointer)();\n    functionPointer = functionPointer + 1;\n  } while (counter != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d20": "execute_functions_08005d20",
                "iVar1": "counter",
                "ppcVar2": "functionPointer"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08000134",
                "FUN_08009e68",
                "FUN_080078a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d68": {
            "entrypoint": "0x08005d68",
            "current_name": "fill_memory_08005d68",
            "code": "\nvoid fillMemory_08005d68(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *nextDestPtr;\n  uint remainingSize;\n  undefined4 fourByteValue;\n  bool isZeroSize;\n  \n  if (((uint)dest & 3) != 0) {\n    remainingSize = size - 1;\n    destPtr = dest;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      size = remainingSize;\n      if (((uint)dest & 3) == 0) break;\n      isZeroSize = remainingSize == 0;\n      remainingSize = remainingSize - 1;\n      destPtr = dest;\n      if (isZeroSize) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    fourByteValue = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remainingSize = size;\n    destPtr = dest;\n    if (0xf < size) {\n      remainingSize = size - 0x10;\n      destPtr = dest + 4;\n      do {\n        destPtr[-4] = fourByteValue;\n        destPtr[-3] = fourByteValue;\n        destPtr[-2] = fourByteValue;\n        destPtr[-1] = fourByteValue;\n        destPtr = destPtr + 4;\n      } while (destPtr != (undefined4 *)((int)dest + (remainingSize & 0xfffffff0) + 0x20));\n      size = size & 0xf;\n      dest = dest + ((remainingSize >> 4) + 1) * 4;\n      remainingSize = size;\n      destPtr = dest;\n      if (size < 4) goto LAB_08005de4;\n    }\n    do {\n      size = size - 4;\n      *dest = fourByteValue;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)destPtr + (remainingSize - 4 & 0xfffffffc) + 4);\n    size = remainingSize & 3;\n  }\nLAB_08005de4:\n  if (size != 0) {\n    destPtr = dest;\n    do {\n      nextDestPtr = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      destPtr = nextDestPtr;\n    } while ((undefined4 *)(size + (int)dest) != nextDestPtr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d68": "fill_memory_08005d68",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "nextDestPtr",
                "uVar3": "remainingSize",
                "uVar4": "fourByteValue",
                "bVar5": "isZeroSize"
            },
            "calling": [
                "FUN_08004f60",
                "FUN_08009980"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dfc": {
            "entrypoint": "0x08005dfc",
            "current_name": "initialize_memory_08005dfc",
            "code": "\nvoid initializeMemory_08005dfc(undefined *memoryBlock,undefined4 size,undefined4 value,undefined4 flag)\n\n{\n  undefined *pointerArray [2];\n  undefined4 maxSize;\n  undefined4 defaultValue;\n  undefined *currentBlock;\n  undefined4 minSize;\n  undefined4 value2;\n  undefined4 value3;\n  \n  minSize = 0x7fffffff;\n  maxSize = 0x7fffffff;\n  defaultValue = 0xffff0208;\n  pointerArray[0] = memoryBlock;\n  currentBlock = memoryBlock;\n  value2 = value;\n  value3 = flag;\n  FUNC_08005e9c(DAT_2000001c,pointerArray,size,&value2);\n  *pointerArray[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dfc": "initialize_memory_08005dfc",
                "param_1": "memoryBlock",
                "param_2": "size",
                "param_3": "value",
                "param_4": "flag",
                "local_80": "pointerArray",
                "local_78": "maxSize",
                "uStack_74": "defaultValue",
                "local_70": "currentBlock",
                "local_6c": "minSize",
                "uStack_8": "value2",
                "uStack_4": "value3"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005e9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e40": {
            "entrypoint": "0x08005e40",
            "current_name": "calculate_lz_count_08005e40",
            "code": "\nint calculateLZCount_08005e40(uint input)\n\n{\n  int paddingSize;\n  uint *ptr;\n  uint value;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  paddingSize = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((paddingSize + 4U & 0x1f) << 3);\n  }\n  while( true ) {\n    ptr = ptr + 1;\n    value = value + 0xfefefeff & ~value & 0x80808080;\n    if (value != 0) break;\n    value = *ptr;\n    paddingSize = paddingSize + 4;\n  }\n  return paddingSize + (0x1fU - countLeadingZeros(value & -value) >> 3);\n}\n\n",
            "renaming": {
                "FUN_08005e40": "calculate_lz_count_08005e40",
                "param_1": "input",
                "iVar1": "paddingSize",
                "puVar2": "ptr",
                "uVar3": "value",
                "LZCOUNT": "countLeadingZeros"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e9c": {
            "entrypoint": "0x08005e9c",
            "current_name": "FUNC_08005e9c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  char *local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  char *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)get_modified_value_08008ad4();\n  local_114 = *ppiVar2;\n  local_118 = (int *)calculate_lz_count_08005e40(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = allocate_and_initialize_memory_08008af8(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (char *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (char *)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = get_modified_value_08008ad4(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)calculate_lz_count_08005e40(local_110);\n      local_104 = piVar24;\n      iVar3 = get_modified_value_08008ad4(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = check_inputs_08001170(uVar10,local_168,0xffffffff,0x7fefffff);\n      if ((iVar3 == 0) && (iVar3 = check_main_function_result_080009c0(uVar10,local_168,0xffffffff,0x7fefffff), iVar3 == 0)\n         ) {\n        iVar3 = check_if_cy_is_null_080009ac(local_128,local_12c,local_124,local_120);\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        piVar23 = (int *)&UNK_08009f10;\n        piVar27 = (int *)&UNK_08009f0c;\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (char *)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      iVar3 = check_inputs_08001170(local_128,local_12c,local_128,local_12c);\n      if (iVar3 != 0) {\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        piVar23 = (int *)&UNK_08009f18;\n        piVar27 = (int *)&UNK_08009f14;\n        goto LAB_08006524;\n      }\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)allocate_and_initialize_memory_08008af8(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        piVar22 = piVar27;\n        local_158 = (char *)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = calculate_result_080096e0(local_128,uVar19,&local_f0);\n          local_150 = calculate_improved_result_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = check_main_function_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = \"0123456789abcdef\";\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar27;\n          local_100 = piVar25;\n          local_fc = param_3;\n          pcVar18 = local_158;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        if (piVar24 == (int *)0x41) {\n          uVar33 = calculate_result_080096e0(local_128,uVar19,&local_f0);\n          local_150 = calculate_improved_result_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = check_main_function_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 == 0) {\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = (int *)0x0;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar27 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar27 = (int *)0x1;\n            local_148 = (int *)0x0;\n          }\n          goto LAB_0800724a;\n        }\n        if ((int)local_12c < 0) goto LAB_08007414;\n        local_144 = (int *)0x0;\n        uVar19 = local_12c;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (char *)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)calculate_float_as_string_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = check_main_function_08000998(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)calculate_float_as_string_080079e8(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)calculate_float_as_string_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = check_main_function_08000998(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (char *)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar23 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar23 == (int *)0x0) {\n        if ((int *)0x5 < piVar27) {\n          piVar27 = (int *)0x6;\n        }\n        piVar23 = (int *)&UNK_08009f44;\n        piVar16 = (int *)0x0;\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar22 = (int *)0x0;\n        local_168 = piVar27;\n        local_158 = (char *)piVar27;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (piVar27 == (int *)0xffffffff) {\n          local_158 = (char *)calculate_lz_count_08005e40(piVar23);\n        }\n        else {\n          iVar3 = find_byte_sequence_0800901c(piVar23,0,piVar27);\n          if (iVar3 == 0) {\n            piVar16 = (int *)(uint)local_f5;\n            local_148 = (int *)0x0;\n            local_13c = (int **)0x0;\n            local_134 = (int *)0x0;\n            local_130 = (int *)0x0;\n            piVar22 = (int *)0x0;\n            local_168 = piVar27;\n            local_158 = (char *)piVar27;\n            local_154 = ppiVar14;\n            goto LAB_08006538;\n          }\n          local_158 = (char *)(iVar3 - (int)piVar23);\n        }\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar16 = (int *)(uint)local_f5;\n        piVar22 = (int *)0x0;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        local_154 = ppiVar14;\n      }\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = \"0123456789ABCDEF\";\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      piVar22 = *local_154;\n      local_11c = \"0123456789abcdef\";\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = \"0123456789abcdef\";\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = (char *)ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        calculate_result_080011ec(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          copy_valid_chars_08009768(piVar23,local_110,local_104);\n          if (pbVar26[1] == 0) {\n            piVar22 = (int *)0x0;\n          }\n          else {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = calculate_result_080011ec(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = (int **)local_158;\n      local_158 = (char *)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (char *)((uint)piVar25 & 1);\n            if ((int *)local_158 == (int *)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (char *)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (char *)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(char *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    process_data_080097cc(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = check_main_function_08000998((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar16 = param_3;\n    piVar22 = (int *)((int)piVar22 + -1);\n    uVar33 = calculate_improved_result_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x40300000);\n    iVar3 = compute_result_0800119c();\n    uVar34 = calculate_shifted_value_080003f4();\n    uVar33 = calculate_xor_08000158((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                          (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar16 + 1);\n    *(char *)piVar16 = pcVar18[iVar3];\n    if (piVar22 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar22;\n  local_134 = piVar16;\n  local_150 = uVar33;\n  iVar8 = check_if_main_executed_successfully_080009e8((int)uVar33,uVar10,0,0x3fe00000);\n  if (iVar8 == 0) {\n    iVar8 = check_main_function_08000998((int *)local_150,local_150._4_4_,0,0x3fe00000);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = local_158[0xf];\n    bVar7 = *(byte *)piVar16;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = local_158[10];\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (char *)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (char *)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (char *)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (char *)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((uint)local_f0 / 10);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (char *)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (char *)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (char *)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (char *)((int)local_158 + (int)local_104 * ((int)local_130 + (int)local_13c));\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = (int *)0x0;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = process_data_080097cc(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = process_data_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = process_data_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (char *)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (char *)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (char *)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = check_main_function_08000998(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      if (iVar3 == 0) {\n        local_158 = (char *)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (char *)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (char *)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)0x8009f60;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = process_data_080097cc(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            local_158 = (char *)local_d0;\n          }\n          *ppiVar17 = (int *)0x8009f60;\n          ppiVar17[1] = piVar22;\n          local_158 = (char *)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = check_main_function_08000998(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)&DAT_08009f4c;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)0x8009f60;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = process_data_080097cc(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = process_data_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (char *)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = process_data_080097cc(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = process_data_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)0x8009f60;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = process_data_080097cc(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)0x8009f60;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = process_data_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = process_data_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)&DAT_08009f4c;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar22 = local_160;\n        puVar29 = local_16c;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = process_data_080097cc(puVar29,piVar22,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = process_data_080097cc(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = process_data_080097cc(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = process_data_080097cc(local_16c,local_160,&local_d8), iVar3 == 0))\n  {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      initialize_memory_080088ec(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    initialize_memory_080088ec(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "calling": [
                "FUN_08005dfc"
            ],
            "called": [
                "FUN_080004c8",
                "FUN_08005e40",
                "FUN_0800119c",
                "FUN_080011ec",
                "FUN_080009c0",
                "FUN_08008ad4",
                "FUN_080003f4",
                "FUN_08000998",
                "FUN_08001170",
                "FUN_08008af8",
                "FUN_08000158",
                "FUN_08009768",
                "FUN_080009e8",
                "FUN_0800901c",
                "FUN_080009ac",
                "FUN_080097cc",
                "FUN_080096e0",
                "FUN_080088ec",
                "FUN_080079e8"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078a0": {
            "entrypoint": "0x080078a0",
            "current_name": "FUNC_080078a0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080078a4) */\n\nvoid FUNC_080078a0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080078a0": "FUNC_080078a0"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_080098c0"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078c0": {
            "entrypoint": "0x080078c0",
            "current_name": "calculate_division_and_comparison_080078c0",
            "code": "\nuint calculateDivisionAndComparison_080078c0(int dividendArray,int divisorArray)\n\n{\n  uint quotient;\n  uint *currentDividend;\n  int currentRemainder;\n  int divisorArrayLength;\n  int lastNonZeroIndex;\n  uint finalQuotient;\n  uint *currentDivisor;\n  uint *dividendArrayPtr;\n  uint *lastDividendPtr;\n  uint currentScaledRemainder;\n  uint *currentDivisorPtr;\n  uint *nextDivisorPtr;\n  \n  divisorArrayLength = *(int *)(divisorArray + 0x10);\n  if (*(int *)(dividendArray + 0x10) < divisorArrayLength) {\n    return 0;\n  }\n  lastNonZeroIndex = divisorArrayLength + -1;\n  currentDivisor = (uint *)(divisorArray + 0x14);\n  dividendArrayPtr = (uint *)(dividendArray + 0x14);\n  finalQuotient = dividendArrayPtr[lastNonZeroIndex] / (currentDivisor[lastNonZeroIndex] + 1);\n  lastDividendPtr = currentDivisor + lastNonZeroIndex;\n  if (finalQuotient != 0) {\n    quotient = 0;\n    currentRemainder = 0;\n    currentDividend = dividendArrayPtr;\n    currentDivisorPtr = currentDivisor;\n    do {\n      nextDivisorPtr = currentDivisorPtr + 1;\n      quotient = finalQuotient * (*currentDivisorPtr & 0xffff) + quotient;\n      currentScaledRemainder = finalQuotient * (*currentDivisorPtr >> 0x10) + (quotient >> 0x10);\n      quotient = (currentRemainder - (quotient & 0xffff)) + (*currentDividend & 0xffff);\n      currentRemainder = ((*currentDividend >> 0x10) - (currentScaledRemainder & 0xffff)) + ((int)quotient >> 0x10);\n      *currentDividend = quotient & 0xffff | currentRemainder * 0x10000;\n      currentRemainder = currentRemainder >> 0x10;\n      quotient = currentScaledRemainder >> 0x10;\n      currentDividend = currentDividend + 1;\n      currentDivisorPtr = nextDivisorPtr;\n    } while (nextDivisorPtr <= lastDividendPtr);\n    if (dividendArrayPtr[lastNonZeroIndex] == 0) {\n      if ((dividendArrayPtr < dividendArrayPtr + divisorArrayLength + -2) && (dividendArrayPtr[divisorArrayLength + -2] == 0)) {\n        currentDividend = dividendArrayPtr + divisorArrayLength + -3;\n        do {\n          lastNonZeroIndex = lastNonZeroIndex + -1;\n          if (currentDividend <= dividendArrayPtr) break;\n          quotient = *currentDividend;\n          currentDividend = currentDividend + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(dividendArray + 0x10) = lastNonZeroIndex;\n    }\n  }\n  divisorArrayLength = compare_arrays_080094f8();\n  if (-1 < divisorArrayLength) {\n    divisorArrayLength = 0;\n    finalQuotient = finalQuotient + 1;\n    currentDividend = dividendArrayPtr;\n    do {\n      currentDivisorPtr = currentDivisor + 1;\n      quotient = (divisorArrayLength - (*currentDivisor & 0xffff)) + (*currentDividend & 0xffff);\n      divisorArrayLength = ((*currentDividend >> 0x10) - (*currentDivisor >> 0x10)) + ((int)quotient >> 0x10);\n      *currentDividend = quotient & 0xffff | divisorArrayLength * 0x10000;\n      divisorArrayLength = divisorArrayLength >> 0x10;\n      currentDividend = currentDividend + 1;\n      currentDivisor = currentDivisorPtr;\n    } while (currentDivisorPtr <= lastDividendPtr);\n    if (dividendArrayPtr[lastNonZeroIndex] == 0) {\n      if ((dividendArrayPtr < dividendArrayPtr + lastNonZeroIndex + -1) && (dividendArrayPtr[lastNonZeroIndex + -1] == 0)) {\n        currentDivisor = dividendArrayPtr + lastNonZeroIndex + -2;\n        do {\n          lastNonZeroIndex = lastNonZeroIndex + -1;\n          if (currentDivisor <= dividendArrayPtr) break;\n          quotient = *currentDivisor;\n          currentDivisor = currentDivisor + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(dividendArray + 0x10) = lastNonZeroIndex;\n    }\n  }\n  return finalQuotient;\n}\n\n",
            "renaming": {
                "FUN_080078c0": "calculate_division_and_comparison_080078c0",
                "param_1": "dividendArray",
                "param_2": "divisorArray",
                "uVar1": "quotient",
                "puVar2": "currentDividend",
                "iVar3": "currentRemainder",
                "iVar4": "divisorArrayLength",
                "iVar5": "lastNonZeroIndex",
                "uVar6": "finalQuotient",
                "puVar7": "currentDivisor",
                "puVar8": "dividendArrayPtr",
                "puVar9": "lastDividendPtr",
                "uVar10": "currentScaledRemainder",
                "puVar11": "currentDivisorPtr",
                "puVar12": "nextDivisorPtr"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080094f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e8": {
            "entrypoint": "0x080079e8",
            "current_name": "calculate_float_as_string_080079e8",
            "code": "\nchar * calculateFloatAsString_080079e8(int data,undefined4 param2,uint param1,uint sign,uint exp,\n                   uint digits,int *isZero,uint *isNegative,char **outputStr)\n\n{\n  bool isInfinity;\n  bool decrementExp;\n  bool isDenormalized;\n  char digitChar;\n  byte needsPadding;\n  undefined4 resultHigh;\n  int comparisonExp;\n  int comparisonMult;\n  int isComparisonPositive;\n  char *pcVar10;\n  uint digitValue;\n  undefined4 inputResultLow;\n  undefined4 inputResultHigh;\n  int expOffset;\n  int resultLow;\n  undefined4 multResult;\n  uint tempVal;\n  uint tempExp;\n  int numOffsetDigits;\n  char *pcVar20;\n  char *pcVar21;\n  undefined4 *puVar22;\n  undefined4 multResultHigh;\n  int comparisonValue;\n  bool decrementExp5;\n  undefined8 tempResult;\n  undefined8 multResultLow;\n  undefined8 shiftedVal;\n  uint inputResultHigh;\n  uint inputVal;\n  uint comparisonValue;\n  int digitOffset;\n  uint numOffsetDigits;\n  int comparisonExp;\n  int resultLow;\n  uint comparisonMult;\n  uint digitValue;\n  uint resultHigh;\n  uint outputLen;\n  uint comparisonResult;\n  int numComparisonDigits;\n  int comparisonDigits [2];\n  \n  expOffset = *(int *)(data + 0x40);\n  if (expOffset != 0) {\n    tempExp = *(uint *)(data + 0x44);\n    *(uint *)(expOffset + 4) = tempExp;\n    *(int *)(expOffset + 8) = 1 << (tempExp & 0xff);\n    extract_and_assign_0800910c(data,expOffset);\n    *(undefined4 *)(data + 0x40) = 0;\n  }\n  decrementExp5 = (int)sign < 0;\n  tempExp = sign;\n  if (decrementExp5) {\n    tempExp = sign & 0x7fffffff;\n  }\n  *isNegative = (uint)decrementExp5;\n  inputVal = sign;\n  if (decrementExp5) {\n    inputVal = tempExp;\n  }\n  tempVal = inputVal;\n  if ((~tempExp & 0x7ff00000) == 0) {\n    *isZero = 9999;\n    if ((param1 == 0) && ((tempExp & 0xfffff) == 0)) {\n      pcVar10 = \"Infinity\";\n      if (outputStr == (char **)0x0) {\n        return pcVar10;\n      }\n      pcVar21 = \"\";\n    }\n    else {\n      pcVar10 = \"NaN\";\n      if (outputStr == (char **)0x0) {\n        return pcVar10;\n      }\n      pcVar21 = \"\";\n    }\n    *outputStr = pcVar21;\n    return pcVar10;\n  }\n  tempResult = check_main_function_08000998(param1,inputVal,0,0);\n  if ((int)tempResult != 0) {\n    *isZero = 1;\n    if (outputStr != (char **)0x0) {\n      *outputStr = \"\";\n      return \"0\";\n    }\n    return \"0\";\n  }\n  resultHigh = decode_parameter_08009630(data,(int)((ulonglong)tempResult >> 0x20),param1,inputVal,comparisonDigits,&numComparisonDigits)\n  ;\n  expOffset = numComparisonDigits;\n  if (tempExp >> 0x14 == 0) {\n    numOffsetDigits = comparisonDigits[0] + numComparisonDigits;\n    resultLow = numOffsetDigits + 0x432;\n    if (resultLow < 0x21) {\n      tempExp = param1 << (0x20U - resultLow & 0xff);\n    }\n    else {\n      tempExp = param1 >> (numOffsetDigits + 0x412U & 0xff) | tempExp << (0x40U - resultLow & 0xff);\n    }\n    tempResult = bit_shift_and_concat_080003d4(tempExp);\n    numOffsetDigits = numOffsetDigits + -1;\n    decrementExp5 = true;\n    digitValue = (int)((ulonglong)tempResult >> 0x20) + 0xfe100000;\n    tempExp = (uint)tempResult;\n  }\n  else {\n    numOffsetDigits = (tempExp >> 0x14) - 0x3ff;\n    digitValue = inputVal & 0xfffff | 0x3ff00000;\n    decrementExp5 = false;\n    tempExp = param1;\n  }\n  tempResult = calculate_xor_08000158(tempExp,digitValue,0,0x3ff80000);\n  tempResult = calculate_improved_result_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x636f4361,0x3fd287a7);\n  tempResult = combine_numbers_0800015c((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x8b60c8b3,0x3fc68a28);\n  multResultLow = calculate_shifted_value_080003f4(numOffsetDigits);\n  multResultLow = calculate_improved_result_080004c8((int)multResultLow,(int)((ulonglong)multResultLow >> 0x20),0x509f79fb,0x3fd34413);\n  tempResult = combine_numbers_0800015c((int)tempResult,(int)((ulonglong)tempResult >> 0x20),(int)multResultLow,\n                        (int)((ulonglong)multResultLow >> 0x20));\n  inputResultHigh = (undefined4)((ulonglong)tempResult >> 0x20);\n  comparisonValue = compute_result_0800119c();\n  resultLow = check_if_cy_is_null_080009ac((int)tempResult,inputResultHigh,0,0);\n  if (resultLow != 0) {\n    multResultLow = calculate_shifted_value_080003f4(comparisonValue);\n    resultLow = check_main_function_08000998((int)multResultLow,(int)((ulonglong)multResultLow >> 0x20),(int)tempResult,inputResultHigh);\n    if (resultLow == 0) {\n      comparisonValue = comparisonValue - 1;\n    }\n  }\n  if (comparisonValue < 0x17) {\n    resultLow = check_if_main_executed_successfully_080009e8(*(undefined4 *)(&DAT_08009fa8 + comparisonValue * 8),\n                          *(undefined4 *)(&DAT_08009fac + comparisonValue * 8),param1,inputVal);\n    if (resultLow == 0) {\n      decrementExp = false;\n    }\n    else {\n      comparisonValue = comparisonValue - 1;\n      decrementExp = false;\n    }\n  }\n  else {\n    decrementExp = true;\n  }\n  resultLow = (expOffset - numOffsetDigits) + -1;\n  if (resultLow < 0) {\n    digitOffset = 1 - (expOffset - numOffsetDigits);\n    resultLow = 0;\n  }\n  else {\n    digitOffset = 0;\n  }\n  if ((int)comparisonValue < 0) {\n    comparisonMult = 0;\n    digitOffset = digitOffset - comparisonValue;\n    resultLow = -comparisonValue;\n  }\n  else {\n    resultLow = resultLow + comparisonValue;\n    comparisonMult = comparisonValue;\n    resultLow = 0;\n  }\n  if (9 < exp) {\n    outputLen = 0xffffffff;\n    isInfinity = true;\n    numOffsetDigits = 0xffffffff;\n    isDenormalized = true;\n    exp = 0;\n    digits = 0;\n    goto LAB_08007c24;\n  }\n  isInfinity = (int)exp < 6;\n  if (!isInfinity) {\n    exp = exp - 4;\n  }\n  switch(exp) {\n  case 2:\n    isDenormalized = false;\n    break;\n  case 3:\n    isDenormalized = false;\n    goto LAB_08008300;\n  case 4:\n    isDenormalized = true;\n    break;\n  case 5:\n    isDenormalized = true;\nLAB_08008300:\n    outputLen = comparisonValue + digits;\n    numOffsetDigits = outputLen + 1;\n    tempExp = numOffsetDigits;\n    if ((int)numOffsetDigits < 1) {\n      tempExp = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(data + 0x44) = 0;\n    pcVar10 = (char *)initialize_memory_080090c0(data,0);\n    outputLen = 0xffffffff;\n    numOffsetDigits = 0xffffffff;\n    digits = 0;\n    *(char **)(data + 0x40) = pcVar10;\n    isDenormalized = true;\n    goto LAB_08007e36;\n  }\n  if ((int)digits < 1) {\n    outputLen = 1;\n    digits = 1;\n    numOffsetDigits = 1;\nLAB_08007c24:\n    *(undefined4 *)(data + 0x44) = 0;\n    digitValue = outputLen;\n  }\n  else {\n    outputLen = digits;\n    numOffsetDigits = digits;\n    tempExp = digits;\nLAB_08008314:\n    *(undefined4 *)(data + 0x44) = 0;\n    digitValue = numOffsetDigits;\n    if (0x17 < (int)tempExp) {\n      numOffsetDigits = 4;\n      expOffset = 1;\n      do {\n        comparisonExp = expOffset;\n        numOffsetDigits = numOffsetDigits * 2;\n        expOffset = comparisonExp + 1;\n      } while (numOffsetDigits + 0x14U <= tempExp);\n      *(int *)(data + 0x44) = comparisonExp;\n    }\n  }\n  pcVar10 = (char *)initialize_memory_080090c0(data);\n  *(char **)(data + 0x40) = pcVar10;\n  if ((digitValue < 0xf) && (isInfinity)) {\n    if ((int)comparisonValue < 1) {\n      if (comparisonValue == 0) {\n        expOffset = 2;\n        inputResultHigh = param1;\n      }\n      else {\n        expOffset = (-comparisonValue & 0xf) * 8;\n        tempResult = calculate_improved_result_080004c8(param1,inputVal,*(undefined4 *)(&DAT_08009fa8 + expOffset),\n                              *(undefined4 *)(&DAT_08009fac + expOffset));\n        inputVal = (uint)((ulonglong)tempResult >> 0x20);\n        inputResultHigh = (uint)tempResult;\n        numOffsetDigits = (int)-comparisonValue >> 4;\n        if (numOffsetDigits == 0) {\n          expOffset = 2;\n        }\n        else {\n          isInfinity = false;\n          expOffset = 2;\n          puVar22 = &DAT_08009f80;\n          do {\n            if (numOffsetDigits << 0x1f < 0) {\n              tempResult = calculate_improved_result_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),*puVar22,puVar22[1]\n                                   );\n              isInfinity = true;\n              expOffset = expOffset + 1;\n            }\n            numOffsetDigits = numOffsetDigits >> 1;\n            puVar22 = puVar22 + 2;\n          } while (numOffsetDigits != 0);\n          if (isInfinity) {\n            inputResultHigh = (uint)tempResult;\n            inputVal = (uint)((ulonglong)tempResult >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      tempExp = (int)comparisonValue >> 4;\n      multResultLow = *(undefined8 *)(&DAT_08009fa8 + (comparisonValue & 0xf) * 8);\n      tempResult = *(undefined8 *)(&DAT_08009fa8 + (comparisonValue & 0xf) * 8);\n      if ((int)(tempExp << 0x1b) < 0) {\n        shiftedVal = calculate_floating_point_0800071c(param1,inputVal,0x7f73bf3c,0x75154fdd);\n        resultHigh = (uint)((ulonglong)shiftedVal >> 0x20);\n        digitValue = (uint)shiftedVal;\n        expOffset = 3;\n        tempExp = tempExp & 0xf;\n      }\n      else {\n        expOffset = 2;\n        resultHigh = inputVal;\n        digitValue = param1;\n      }\n      if (tempExp != 0) {\n        puVar22 = &DAT_08009f80;\n        do {\n          if ((int)(tempExp << 0x1f) < 0) {\n            tempResult = calculate_improved_result_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),*puVar22,puVar22[1]);\n            expOffset = expOffset + 1;\n          }\n          tempExp = (int)tempExp >> 1;\n          puVar22 = puVar22 + 2;\n          multResultLow = tempResult;\n        } while (tempExp != 0);\n      }\n      inputVal = (uint)((ulonglong)multResultLow >> 0x20);\n      inputResultHigh = (uint)multResultLow;\n      tempResult = calculate_floating_point_0800071c(digitValue,resultHigh,inputResultHigh,inputVal);\n      inputResultHigh = (uint)tempResult;\n      inputVal = (uint)((ulonglong)tempResult >> 0x20);\n    }\n    tempResult = CONCAT44(inputVal,inputResultHigh);\n    if ((decrementExp) && (numOffsetDigits = check_if_cy_is_null_080009ac(inputResultHigh,inputVal,0,0x3ff00000), numOffsetDigits != 0)) {\n      if (numOffsetDigits == 0) {\n        tempResult = calculate_shifted_value_080003f4(expOffset);\n        tempResult = calculate_improved_result_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),inputResultHigh,inputVal);\n        tempResult = combine_numbers_0800015c((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0x401c0000);\n        inputResultHigh = (undefined4)tempResult;\n        expOffset = (int)((ulonglong)tempResult >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)outputLen) {\n        tempResult = calculate_improved_result_080004c8(inputResultHigh,inputVal,0,0x40240000);\n        multResultLow = calculate_shifted_value_080003f4(expOffset + 1);\n        multResultLow = calculate_improved_result_080004c8((int)multResultLow,(int)((ulonglong)multResultLow >> 0x20),(int)tempResult,\n                              (int)((ulonglong)tempResult >> 0x20));\n        multResultLow = combine_numbers_0800015c((int)multResultLow,(int)((ulonglong)multResultLow >> 0x20),0,0x401c0000);\n        inputResultHigh = (undefined4)multResultLow;\n        digitValue = outputLen;\n        comparisonResult = comparisonValue - 1;\n        expOffset = (int)((ulonglong)multResultLow >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    multResultLow = calculate_shifted_value_080003f4(expOffset);\n    multResultLow = calculate_improved_result_080004c8((int)multResultLow,(int)((ulonglong)multResultLow >> 0x20),inputResultHigh,inputVal);\n    multResultLow = combine_numbers_0800015c((int)multResultLow,(int)((ulonglong)multResultLow >> 0x20),0,0x401c0000);\n    inputResultHigh = (undefined4)multResultLow;\n    expOffset = (int)((ulonglong)multResultLow >> 0x20) + -0x3400000;\n    if (numOffsetDigits != 0) {\n      comparisonResult = comparisonValue;\n      digitValue = numOffsetDigits;\nLAB_08007cfa:\n      inputVal = (uint)((ulonglong)tempResult >> 0x20);\n      inputResultHigh = (uint)tempResult;\n      digitChar = compute_result_0800119c(inputResultHigh,inputVal);\n      digitChar = digitChar + '0';\n      multResult = (&DAT_08009fa0)[digitValue * 2];\n      inputResultLow = (&DAT_08009fa4)[digitValue * 2];\n      tempResult = calculate_shifted_value_080003f4();\n      tempResult = calculate_xor_08000158(inputResultHigh,inputVal,(int)tempResult,(int)((ulonglong)tempResult >> 0x20));\n      multResultHigh = (undefined4)((ulonglong)tempResult >> 0x20);\n      pcVar21 = pcVar10 + 1;\n      if (isDenormalized) {\n        multResultLow = calculate_floating_point_0800071c(0,0x3fe00000,multResult,inputResultLow);\n        multResultLow = calculate_xor_08000158((int)multResultLow,(int)((ulonglong)multResultLow >> 0x20),inputResultHigh,expOffset);\n        inputResultHigh = (undefined4)((ulonglong)multResultLow >> 0x20);\n        *pcVar10 = digitChar;\n        expOffset = check_if_main_executed_successfully_080009e8((int)multResultLow,inputResultHigh,(int)tempResult,multResultHigh);\n        if (expOffset != 0) {\nLAB_08008784:\n          comparisonValue = comparisonResult;\n          goto LAB_08008294;\n        }\n        shiftedVal = calculate_xor_08000158(0,0x3ff00000,(int)tempResult,multResultHigh);\n        expOffset = check_if_main_executed_successfully_080009e8((int)multResultLow,inputResultHigh,(int)shiftedVal,(int)((ulonglong)shiftedVal >> 0x20));\n        if (expOffset == 0) {\n          if (digitValue != 1) {\n            pcVar20 = pcVar21;\n            do {\n              multResultLow = calculate_improved_result_080004c8((int)multResultLow,(int)((ulonglong)multResultLow >> 0x20),0,0x40240000);\n              inputResultHigh = (undefined4)((ulonglong)multResultLow >> 0x20);\n              tempResult = calculate_improved_result_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0x40240000);\n              digitChar = compute_result_0800119c();\n              shiftedVal = calculate_shifted_value_080003f4();\n              tempResult = calculate_xor_08000158((int)tempResult,(int)((ulonglong)tempResult >> 0x20),(int)shiftedVal,\n                                    (int)((ulonglong)shiftedVal >> 0x20));\n              multResult = (undefined4)((ulonglong)tempResult >> 0x20);\n              digitChar = digitChar + '0';\n              pcVar21 = pcVar20 + 1;\n              *pcVar20 = digitChar;\n              expOffset = check_if_cy_is_null_080009ac((int)tempResult,multResult,(int)multResultLow,inputResultHigh);\n              if (expOffset != 0) {\n                comparisonValue = comparisonResult;\n                goto LAB_08008294;\n              }\n              shiftedVal = calculate_xor_08000158(0,0x3ff00000,(int)tempResult,multResult);\n              expOffset = check_if_cy_is_null_080009ac((int)shiftedVal,(int)((ulonglong)shiftedVal >> 0x20),(int)multResultLow,inputResultHigh)\n              ;\n              if (expOffset != 0) goto LAB_08008798;\n              pcVar20 = pcVar21;\n            } while (pcVar21 != pcVar10 + digitValue);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        comparisonValue = comparisonResult;\n      }\n      else {\n        multResultLow = calculate_improved_result_080004c8(inputResultHigh,expOffset,multResult,inputResultLow);\n        inputResultHigh = (undefined4)((ulonglong)multResultLow >> 0x20);\n        *pcVar10 = digitChar;\n        if (digitValue != 1) {\n          pcVar20 = pcVar21;\n          do {\n            tempResult = calculate_improved_result_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0x40240000);\n            digitChar = compute_result_0800119c();\n            shiftedVal = calculate_shifted_value_080003f4();\n            tempResult = calculate_xor_08000158((int)tempResult,(int)((ulonglong)tempResult >> 0x20),(int)shiftedVal,\n                                  (int)((ulonglong)shiftedVal >> 0x20));\n            pcVar21 = pcVar20 + 1;\n            *pcVar20 = digitChar + '0';\n            pcVar20 = pcVar21;\n          } while (pcVar21 != pcVar10 + digitValue);\n        }\n        multResult = (undefined4)((ulonglong)tempResult >> 0x20);\n        shiftedVal = combine_numbers_0800015c((int)multResultLow,inputResultHigh,0,0x3fe00000);\n        expOffset = check_if_cy_is_null_080009ac((int)shiftedVal,(int)((ulonglong)shiftedVal >> 0x20),(int)tempResult,multResult);\n        if (expOffset == 0) {\n          multResultLow = calculate_xor_08000158(0,0x3fe00000,(int)multResultLow,inputResultHigh);\n          expOffset = check_if_main_executed_successfully_080009e8((int)multResultLow,(int)((ulonglong)multResultLow >> 0x20),(int)tempResult,multResult);\n          pcVar20 = pcVar21;\n          if (expOffset == 0) goto LAB_08007e36;\n          do {\n            pcVar21 = pcVar20;\n            pcVar20 = pcVar21 + -1;\n          } while (pcVar21[-1] == '0');\n          goto LAB_08008784;\n        }\n        comparisonValue = comparisonResult;\n        digitChar = pcVar21[-1];\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    tempResult = calculate_xor_08000158(inputResultHigh,inputVal,0,0x40140000);\n    multResult = (undefined4)((ulonglong)tempResult >> 0x20);\n    numOffsetDigits = check_if_main_executed_successfully_080009e8((int)tempResult,multResult,inputResultHigh,expOffset);\n    if (numOffsetDigits == 0) {\n      expOffset = check_if_cy_is_null_080009ac((int)tempResult,multResult,inputResultHigh,expOffset + -0x80000000);\n      if (expOffset == 0) goto LAB_08007e36;\n      numOffsetDigits = 0;\n      expOffset = 0;\n      pcVar21 = pcVar10;\n      goto LAB_080084f0;\n    }\n    resultLow = 0;\n    comparisonExp = 0;\nLAB_08008406:\n    *pcVar10 = '1';\n    comparisonValue = comparisonValue + 1;\n    pcVar21 = pcVar10 + 1;\n    numOffsetDigits = comparisonExp;\n    expOffset = resultLow;\nLAB_08008416:\n    extract_and_assign_0800910c(data,expOffset);\n    if (numOffsetDigits == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    pcVar21 = pcVar10;\n    if ((-1 < comparisonDigits[0]) && ((int)comparisonValue < 0xf)) {\n      inputResultHigh = *(undefined4 *)(&DAT_08009fa8 + comparisonValue * 8);\n      multResult = *(undefined4 *)(&DAT_08009fac + comparisonValue * 8);\n      if ((-1 < (int)digits) || (0 < (int)numOffsetDigits)) {\n        calculate_floating_point_0800071c(param1,tempVal,inputResultHigh,multResult);\n        needsPadding = compute_result_0800119c();\n        tempResult = calculate_shifted_value_080003f4();\n        tempResult = calculate_improved_result_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),inputResultHigh,multResult);\n        tempResult = calculate_xor_08000158(param1,tempVal,(int)tempResult,(int)((ulonglong)tempResult >> 0x20));\n        *pcVar10 = needsPadding + 0x30;\n        pcVar21 = pcVar10 + 1;\n        if (numOffsetDigits != 1) {\n          tempResult = calculate_improved_result_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0x40240000);\n          expOffset = check_main_function_08000998((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0);\n          while (expOffset == 0) {\n            multResultHigh = (undefined4)((ulonglong)tempResult >> 0x20);\n            calculate_floating_point_0800071c((int)tempResult,multResultHigh,inputResultHigh,multResult);\n            needsPadding = compute_result_0800119c();\n            multResultLow = calculate_shifted_value_080003f4();\n            multResultLow = calculate_improved_result_080004c8((int)multResultLow,(int)((ulonglong)multResultLow >> 0x20),inputResultHigh,multResult);\n            tempResult = calculate_xor_08000158((int)tempResult,multResultHigh,(int)multResultLow,(int)((ulonglong)multResultLow >> 0x20));\n            pcVar20 = pcVar21 + 1;\n            *pcVar21 = needsPadding + 0x30;\n            pcVar21 = pcVar20;\n            if (numOffsetDigits == (int)pcVar20 - (int)pcVar10) goto LAB_08007f3a;\n            tempResult = calculate_improved_result_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0x40240000);\n            expOffset = check_main_function_08000998((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        tempResult = combine_numbers_0800015c((int)tempResult,(int)((ulonglong)tempResult >> 0x20));\n        multResultHigh = (undefined4)((ulonglong)tempResult >> 0x20);\n        expOffset = check_if_main_executed_successfully_080009e8((int)tempResult,multResultHigh,inputResultHigh,multResult);\n        if ((expOffset == 0) &&\n           ((expOffset = check_main_function_08000998((int)tempResult,multResultHigh,inputResultHigh,multResult), expOffset == 0 ||\n            ((needsPadding & 1) == 0)))) goto LAB_08008294;\n        digitChar = pcVar21[-1];\nLAB_08007f7c:\n        while (pcVar20 = pcVar21 + -1, digitChar == '9') {\n          if (pcVar10 == pcVar20) {\n            *pcVar10 = '0';\n            digitChar = pcVar21[-1];\n            comparisonValue = comparisonValue + 1;\n            pcVar20 = pcVar10;\n            break;\n          }\n          digitChar = pcVar21[-2];\n          pcVar21 = pcVar20;\n        }\n        *pcVar20 = digitChar + '\\x01';\n        goto LAB_08008294;\n      }\n      if (numOffsetDigits == 0) {\n        tempResult = calculate_improved_result_080004c8(inputResultHigh,multResult,0,0x40140000);\n        isComparisonPositive = check_main_params_080009d4((int)tempResult,(int)((ulonglong)tempResult >> 0x20),param1,tempVal);\n        numOffsetDigits = 0;\n        resultLow = 0;\n        comparisonExp = 0;\n        expOffset = 0;\n        if (isComparisonPositive == 0) goto LAB_08008406;\n      }\n      else {\n        numOffsetDigits = 0;\n        expOffset = 0;\n      }\nLAB_080084f0:\n      comparisonValue = ~digits;\n      pcVar10 = pcVar21;\n      goto LAB_08008416;\n    }\n    expOffset = resultLow;\n    if (isDenormalized) {\n      if ((int)exp < 2) {\n        if (decrementExp5) {\n          comparisonExp = digitOffset;\n          digitOffset = digitOffset + comparisonDigits[0] + 0x433;\n          resultLow = resultLow + comparisonDigits[0] + 0x433;\n        }\n        else {\n          comparisonExp = digitOffset;\n          digitOffset = digitOffset + (0x36 - numComparisonDigits);\n          resultLow = resultLow + (0x36 - numComparisonDigits);\n        }\n      }\n      else {\n        numOffsetDigits = numOffsetDigits - 1;\n        if (resultLow < numOffsetDigits) {\n          comparisonMult = comparisonMult + (numOffsetDigits - resultLow);\n          expOffset = 0;\n          resultLow = numOffsetDigits;\n        }\n        else {\n          expOffset = resultLow - numOffsetDigits;\n        }\n        if ((int)numOffsetDigits < 0) {\n          comparisonExp = digitOffset - numOffsetDigits;\n        }\n        else {\n          resultLow = resultLow + numOffsetDigits;\n          comparisonExp = digitOffset;\n          digitOffset = digitOffset + numOffsetDigits;\n        }\n      }\n      numOffsetDigits = initialize_memory_08009244(data,1);\n    }\n    else {\n      comparisonExp = digitOffset;\n      numOffsetDigits = 0;\n    }\n    if ((0 < comparisonExp) && (0 < resultLow)) {\n      comparisonExp = comparisonExp;\n      if (resultLow <= comparisonExp) {\n        comparisonExp = resultLow;\n      }\n      resultLow = resultLow - comparisonExp;\n      digitOffset = digitOffset - comparisonExp;\n      comparisonExp = comparisonExp - comparisonExp;\n    }\n    if (resultLow != 0) {\n      if (isDenormalized) {\n        inputResultHigh = resultHigh;\n        if (expOffset != 0) {\n          numOffsetDigits = hash_function_080093a4(data,numOffsetDigits,expOffset);\n          inputResultHigh = calculate_hash_08009258(data,numOffsetDigits,resultHigh);\n          extract_and_assign_0800910c(data,resultHigh);\n          resultHigh = inputResultHigh;\n          if (resultLow - expOffset == 0) goto LAB_08008062;\n        }\n        resultHigh = hash_function_080093a4(data,inputResultHigh,resultLow - expOffset);\n      }\n      else {\n        resultHigh = hash_function_080093a4(data,resultHigh,resultLow);\n      }\n    }\nLAB_08008062:\n    expOffset = initialize_memory_08009244(data,1);\n    if (comparisonMult == 0) {\n      if (((int)exp < 2) && (param1 == 0)) {\nLAB_0800835a:\n        if ((tempVal & 0xfffff) == 0) {\n          tempVal = tempVal & 0x7ff00000;\n          if (tempVal != 0) {\n            resultLow = resultLow + 1;\n            digitOffset = digitOffset + 1;\n            tempVal = 1;\n          }\n        }\n        else {\n          tempVal = 0;\n        }\n        decrementExp5 = comparisonMult != 0;\n        tempExp = param1;\n        comparisonMult = tempVal;\n        if (decrementExp5) goto LAB_080082d4;\n      }\n      comparisonExp = 1;\n    }\n    else {\n      tempResult = hash_function_080093a4(data,expOffset);\n      expOffset = (int)tempResult;\n      if (((int)exp < 2) && (param1 == 0)) goto LAB_0800835a;\n      comparisonMult = 0;\n      tempExp = (uint)((ulonglong)tempResult >> 0x20);\nLAB_080082d4:\n      comparisonExp = count_leading_zeros_080091a4(*(undefined4 *)(expOffset + *(int *)(expOffset + 0x10) * 4 + 0x10),tempExp);\n      comparisonExp = 0x20 - comparisonExp;\n    }\n    tempExp = comparisonExp + resultLow & 0x1f;\n    if (tempExp == 0) {\n      comparisonExp = 0x1c;\nLAB_08008096:\n      resultLow = resultLow + comparisonExp;\n      digitOffset = digitOffset + comparisonExp;\n      comparisonExp = comparisonExp + comparisonExp;\n    }\n    else {\n      if (4 < (int)(0x20 - tempExp)) {\n        comparisonExp = 0x1c - tempExp;\n        goto LAB_08008096;\n      }\n      if (0x20 - tempExp != 4) {\n        comparisonExp = 0x3c - tempExp;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < digitOffset) {\n      resultHigh = memory_initialization_08009444(data,resultHigh,digitOffset);\n    }\n    if (0 < resultLow) {\n      expOffset = memory_initialization_08009444(data,expOffset,resultLow);\n    }\n    pcVar20 = pcVar10;\n    if ((decrementExp) && (resultLow = compare_arrays_080094f8(resultHigh,expOffset), resultLow < 0)) {\n      comparisonValue = comparisonValue - 1;\n      resultHigh = calculate_hash_08009120(data,resultHigh,10,0);\n      if (isDenormalized) {\n        numOffsetDigits = calculate_hash_08009120(data,numOffsetDigits,10,0);\n        if ((0 < (int)outputLen) || ((int)exp < 3)) {\n          numOffsetDigits = outputLen;\n          goto LAB_080080de;\n        }\n      }\n      else if ((0 < (int)outputLen) || ((int)exp < 3)) {\n        numOffsetDigits = outputLen;\n        goto LAB_0800820a;\n      }\n      numOffsetDigits = outputLen;\nLAB_080084e8:\n      if (numOffsetDigits == 0) {\n        resultLow = calculate_hash_08009120(data,expOffset,5);\n        isComparisonPositive = compare_arrays_080094f8(resultHigh,resultLow);\n        comparisonExp = numOffsetDigits;\n        expOffset = resultLow;\n        if (0 < isComparisonPositive) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)numOffsetDigits < 1) && (2 < (int)exp)) goto LAB_080084e8;\n    if (isDenormalized) {\nLAB_080080de:\n      inputResultHigh = numOffsetDigits;\n      if (0 < comparisonExp) {\n        inputResultHigh = memory_initialization_08009444(data,numOffsetDigits,comparisonExp);\n      }\n      numOffsetDigits = inputResultHigh;\n      if (comparisonMult != 0) {\n        numOffsetDigits = initialize_memory_080090c0(data,*(undefined4 *)(inputResultHigh + 4));\n        copy_memory_08001084(numOffsetDigits + 0xc,inputResultHigh + 0xc,(*(int *)(inputResultHigh + 0x10) + 2) * 4);\n        numOffsetDigits = memory_initialization_08009444(data,numOffsetDigits,1);\n      }\nLAB_08008108:\n      resultLow = calculate_division_and_comparison_080078c0(resultHigh,expOffset);\n      comparisonExp = compare_arrays_080094f8(resultHigh,inputResultHigh);\n      isComparisonPositive = memory_initialization_08009530(data,expOffset,numOffsetDigits);\n      comparisonValue = resultLow + 0x30;\n      if (*(int *)(isComparisonPositive + 0xc) == 0) {\n        comparisonMult = compare_arrays_080094f8(resultHigh);\n        extract_and_assign_0800910c(data,isComparisonPositive);\n        if ((comparisonMult != 0) || (exp != 0)) goto LAB_0800815a;\n        if ((param1 & 1) != 0) {\n          comparisonMult = 0;\n          goto LAB_0800815a;\n        }\n        if (comparisonValue != 0x39) {\n          if (0 < comparisonExp) goto LAB_0800874c;\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        pcVar21 = pcVar20 + 1;\n        digitChar = '9';\n        *pcVar20 = '9';\n        goto LAB_08008268;\n      }\n      extract_and_assign_0800910c(data,isComparisonPositive);\n      comparisonMult = 1;\nLAB_0800815a:\n      if ((comparisonExp < 0) || (((comparisonExp == 0 && (exp == 0)) && ((param1 & 1) == 0)))) {\n        if (0 < comparisonMult) {\n          resultHigh = memory_initialization_08009444(data,resultHigh,1);\n          comparisonExp = compare_arrays_080094f8(resultHigh,expOffset);\n          if ((0 < comparisonExp) || ((comparisonExp == 0 && (resultLow << 0x1f < 0)))) {\n            if (comparisonValue == 0x39) goto LAB_08008752;\nLAB_0800874c:\n            comparisonValue = resultLow + 0x31;\n          }\n        }\nLAB_080085a4:\n        pcVar21 = pcVar20 + 1;\n        *pcVar20 = (char)comparisonValue;\n        goto LAB_08008274;\n      }\n      pcVar21 = pcVar20 + 1;\n      if (0 < comparisonMult) {\n        if (comparisonValue == 0x39) goto LAB_08008752;\n        *pcVar20 = (char)resultLow + '1';\n        goto LAB_08008274;\n      }\n      *pcVar20 = (char)comparisonValue;\n      if (pcVar10 + (numOffsetDigits - 1) != pcVar20) {\n        resultHigh = calculate_hash_08009120(data,resultHigh,10,0);\n        pcVar20 = pcVar21;\n        if (inputResultHigh == numOffsetDigits) {\n          inputResultHigh = calculate_hash_08009120(data,inputResultHigh,10,0);\n          numOffsetDigits = inputResultHigh;\n        }\n        else {\n          inputResultHigh = calculate_hash_08009120(data,inputResultHigh,10,0);\n          numOffsetDigits = calculate_hash_08009120(data,numOffsetDigits,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    else {\nLAB_0800820a:\n      while( true ) {\n        comparisonValue = calculate_division_and_comparison_080078c0(resultHigh,expOffset);\n        comparisonValue = comparisonValue + 0x30;\n        pcVar21 = pcVar20 + 1;\n        *pcVar20 = (char)comparisonValue;\n        if ((int)numOffsetDigits <= (int)pcVar21 - (int)pcVar10) break;\n        resultHigh = calculate_hash_08009120(data,resultHigh,10,0);\n        pcVar20 = pcVar21;\n      }\n      inputResultHigh = 0;\n    }\n    resultHigh = memory_initialization_08009444(data,resultHigh,1);\n    resultLow = compare_arrays_080094f8(resultHigh,expOffset);\n    digitChar = pcVar21[-1];\n    if ((0 < resultLow) || ((resultLow == 0 && (comparisonValue << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        pcVar20 = pcVar21 + -1;\n        if (digitChar != '9') goto code_r0x08008270;\n        if (pcVar10 == pcVar20) {\n          *pcVar10 = '1';\n          comparisonValue = comparisonValue + 1;\n          goto LAB_08008274;\n        }\n        digitChar = pcVar21[-2];\n        pcVar21 = pcVar20;\n      } while( true );\n    }\n    while (digitChar == '0') {\n      digitChar = pcVar21[-2];\n      pcVar21 = pcVar21 + -1;\n    }\nLAB_08008274:\n    extract_and_assign_0800910c(data,expOffset);\n    if (numOffsetDigits == 0) goto LAB_08008294;\n    if ((inputResultHigh != 0) && (inputResultHigh != numOffsetDigits)) {\n      extract_and_assign_0800910c(data);\n    }\n  }\n  extract_and_assign_0800910c(data,numOffsetDigits);\nLAB_08008294:\n  extract_and_assign_0800910c(data,resultHigh);\n  *pcVar21 = '\\0';\n  *isZero = comparisonValue + 1;\n  if (outputStr == (char **)0x0) {\n    return pcVar10;\n  }\n  *outputStr = pcVar21;\n  return pcVar10;\ncode_r0x08008270:\n  *pcVar20 = digitChar + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "renaming": {
                "FUN_080079e8": "calculate_float_as_string_080079e8",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param1",
                "param_4": "sign",
                "param_5": "exp",
                "param_6": "digits",
                "param_7": "isZero",
                "param_8": "isNegative",
                "param_9": "outputStr",
                "bVar1": "isInfinity",
                "bVar2": "decrementExp",
                "bVar3": "isDenormalized",
                "cVar4": "digitChar",
                "bVar5": "needsPadding",
                "uVar6": "resultHigh",
                "iVar7": "comparisonExp",
                "iVar8": "comparisonMult",
                "iVar9": "isComparisonPositive",
                "iVar14": "expOffset",
                "iVar15": "resultLow",
                "iVar19": "numOffsetDigits",
                "iVar24": "comparisonValue",
                "uVar11": "digitValue",
                "uVar12": "inputResultLow",
                "uVar13": "inputResultHigh",
                "uVar16": "multResult",
                "uVar17": "tempVal",
                "uVar18": "tempExp",
                "uVar23": "multResultHigh",
                "uVar26": "tempResult",
                "uVar27": "multResultLow",
                "uVar28": "shiftedVal",
                "local_80": "inputResultHigh",
                "local_7c": "inputVal",
                "local_74": "comparisonValue",
                "local_70": "digitOffset",
                "local_68": "numOffsetDigits",
                "local_60": "comparisonExp",
                "local_5c": "resultLow",
                "local_58": "comparisonMult",
                "local_48": "digitValue",
                "uStack_44": "resultHigh",
                "local_38": "outputLen",
                "local_34": "comparisonResult",
                "local_30": "numComparisonDigits",
                "local_2c": "comparisonDigits"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_080009d4",
                "FUN_080004c8",
                "FUN_08009244",
                "FUN_08009530",
                "FUN_08009630",
                "FUN_0800119c",
                "FUN_080091a4",
                "FUN_080090c0",
                "FUN_0800015c",
                "FUN_080003f4",
                "FUN_08000998",
                "FUN_080094f8",
                "FUN_08000158",
                "FUN_08009120",
                "FUN_080009e8",
                "FUN_080093a4",
                "FUN_080078c0",
                "FUN_080003d4",
                "FUN_080009ac",
                "FUN_0800910c",
                "FUN_08001084",
                "FUN_08009258",
                "FUN_08009444",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800884c": {
            "entrypoint": "0x0800884c",
            "current_name": "initialize_and_allocate_memory_0800884c",
            "code": "\nundefined4 initialize_and_allocate_memory_0800884c(undefined4 input_param,int offset)\n\n{\n  int result;\n  int adjusted_address;\n  uint memory_size;\n  \n  initialize_data();\n  memory_size = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  adjusted_address = ((0xfef - offset) + memory_size & 0xfffff000) - 0x1000;\n  if (0xfff < adjusted_address) {\n    result = allocate_and_store_memory(input_param,0);\n    if (result == DAT_20000454 + memory_size) {\n      result = allocate_and_store_memory(input_param,-adjusted_address);\n      if (result != -1) {\n        DAT_20000a14 = DAT_20000a14 - adjusted_address;\n        *(uint *)(DAT_20000454 + 4) = memory_size - adjusted_address | 1;\n        finalize_data(input_param);\n        return 1;\n      }\n      adjusted_address = allocate_and_store_memory(input_param,0);\n      if (0xf < adjusted_address - DAT_20000454) {\n        DAT_20000a14 = adjusted_address - DAT_20000854;\n        *(uint *)(DAT_20000454 + 4) = adjusted_address - DAT_20000454 | 1;\n      }\n    }\n  }\n  finalize_data(input_param);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800884c": "initialize_and_allocate_memory_0800884c",
                "param_1": "input_param",
                "param_2": "offset",
                "iVar1": "result",
                "iVar2": "adjusted_address",
                "uVar3": "memory_size",
                "initialize_data_080090a8": "initialize_data",
                "allocate_and_store_memory_08009744": "allocate_and_store_memory",
                "initialize_data_080090b4": "finalize_data"
            },
            "calling": [
                "FUN_080088ec"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_08009744",
                "FUN_080090b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088ec": {
            "entrypoint": "0x080088ec",
            "current_name": "initialize_memory_080088ec",
            "code": "\nvoid initializeMemory_080088ec(undefined4 param1,int param2,undefined4 param3,undefined4 param4)\n\n{\n  int index;\n  uint *currentPointer;\n  uint *nextPointer;\n  undefined *tempPointer;\n  uint blockSize;\n  uint nextBlockSize;\n  undefined *currentHeader;\n  undefined *nextHeader;\n  undefined4 *tempHeader;\n  int loopIndex;\n  uint flag1;\n  uint flag2;\n  \n  if (param2 == 0) {\n    return;\n  }\n  initialize_data_080090a8();\n  flag1 = *(uint *)(param2 + -4);\n  currentPointer = (uint *)(param2 + -8);\n  blockSize = flag1 & 0xfffffffe;\n  nextPointer = (uint *)((int)currentPointer + blockSize);\n  nextBlockSize = nextPointer[1] & 0xfffffffc;\n  if (DAT_20000454 == nextPointer) {\n    blockSize = blockSize + nextBlockSize;\n    if ((flag1 & 1) == 0) {\n      currentPointer = (uint *)((int)currentPointer - *(int *)(param2 + -8));\n      nextBlockSize = currentPointer[2];\n      flag1 = currentPointer[3];\n      blockSize = blockSize + *(int *)(param2 + -8);\n      *(uint *)(nextBlockSize + 0xc) = flag1;\n      *(uint *)(flag1 + 8) = nextBlockSize;\n    }\n    nextBlockSize = DAT_20000858;\n    currentPointer[1] = blockSize | 1;\n    DAT_20000454 = currentPointer;\n    if (nextBlockSize <= blockSize) {\n      initialize_and_allocate_memory_0800884c(param1,DAT_20000a44);\n    }\nLAB_080089f0:\n    initialize_data_080090b4(param1);\n    return;\n  }\n  nextPointer[1] = nextBlockSize;\n  if ((flag1 & 1) == 0) {\n    currentPointer = (uint *)((int)currentPointer - *(int *)(param2 + -8));\n    tempHeader = (undefined4 *)currentPointer[2];\n    blockSize = blockSize + *(int *)(param2 + -8);\n    flag1 = *(uint *)((int)nextPointer + nextBlockSize + 4) & 1;\n    if ((uint **)tempHeader == &DAT_20000454) {\n      if (flag1 == 0) {\n        flag1 = nextPointer[2];\n        flag2 = nextPointer[3];\n        blockSize = blockSize + nextBlockSize;\n        *(uint *)(flag1 + 0xc) = flag2;\n        *(uint *)(flag2 + 8) = flag1;\n        currentPointer[1] = blockSize | 1;\n        *(uint *)((int)currentPointer + blockSize) = blockSize;\n      }\n      else {\n        currentPointer[1] = blockSize | 1;\n        *nextPointer = blockSize;\n      }\n      goto LAB_080089f0;\n    }\n    flag2 = currentPointer[3];\n    tempHeader[3] = flag2;\n    *(undefined4 **)(flag2 + 8) = tempHeader;\n  }\n  else {\n    flag1 = *(uint *)((int)nextPointer + nextBlockSize + 4) & 1;\n  }\n  if (flag1 == 0) {\n    tempHeader = (undefined4 *)nextPointer[2];\n    blockSize = blockSize + nextBlockSize;\n    if ((uint **)tempHeader == &DAT_20000454) {\n      DAT_2000045c = currentPointer;\n      DAT_20000460 = currentPointer;\n      currentPointer[2] = (uint)&DAT_20000454;\n      currentPointer[3] = (uint)&DAT_20000454;\n      currentPointer[1] = blockSize | 1;\n      *(uint *)((int)currentPointer + blockSize) = blockSize;\n      goto LAB_080089f0;\n    }\n    nextBlockSize = nextPointer[3];\n    tempHeader[3] = nextBlockSize;\n    *(undefined4 **)(nextBlockSize + 8) = tempHeader;\n    currentPointer[1] = blockSize | 1;\n    *(uint *)((int)currentPointer + blockSize) = blockSize;\n  }\n  else {\n    currentPointer[1] = blockSize | 1;\n    *(uint *)((int)currentPointer + blockSize) = blockSize;\n  }\n  if (blockSize < 0x200) {\n    loopIndex = (blockSize >> 3) + 1;\n    blockSize = 1 << ((int)(blockSize >> 3) >> 2 & 0xffU) | (uint)DAT_20000450;\n    nextBlockSize = *(uint *)(&DAT_2000044c + loopIndex * 8);\n    currentPointer[2] = nextBlockSize;\n    currentPointer[3] = (uint)(&DAT_20000444 + loopIndex * 8);\n    DAT_20000450 = (undefined *)blockSize;\n    *(uint **)(&DAT_2000044c + loopIndex * 8) = currentPointer;\n    *(uint **)(nextBlockSize + 0xc) = currentPointer;\n    initialize_data_080090b4(param1,currentPointer,blockSize,param4);\n    return;\n  }\n  nextBlockSize = blockSize >> 9;\n  if (nextBlockSize < 5) {\n    loopIndex = ((blockSize >> 6) + 0x39) * 8;\n    index = (blockSize >> 6) + 0x38;\n  }\n  else if (nextBlockSize < 0x15) {\n    loopIndex = (nextBlockSize + 0x5c) * 8;\n    index = nextBlockSize + 0x5b;\n  }\n  else if (nextBlockSize < 0x55) {\n    loopIndex = ((blockSize >> 0xc) + 0x6f) * 8;\n    index = (blockSize >> 0xc) + 0x6e;\n  }\n  else if (nextBlockSize < 0x155) {\n    loopIndex = ((blockSize >> 0xf) + 0x78) * 8;\n    index = (blockSize >> 0xf) + 0x77;\n  }\n  else if (nextBlockSize < 0x555) {\n    loopIndex = ((blockSize >> 0x12) + 0x7d) * 8;\n    index = (blockSize >> 0x12) + 0x7c;\n  }\n  else {\n    loopIndex = 0x3f8;\n    index = 0x7e;\n  }\n  tempPointer = *(undefined **)(&DAT_2000044c + loopIndex);\n  currentHeader = &DAT_20000444 + loopIndex;\n  if (currentHeader == tempPointer) {\n    tempPointer = (undefined *)(1 << (index >> 2 & 0xffU) | (uint)DAT_20000450);\n    nextHeader = currentHeader;\n    DAT_20000450 = tempPointer;\n  }\n  else {\n    do {\n      nextHeader = tempPointer;\n      if ((*(uint *)(tempPointer + 4) & 0xfffffffc) <= blockSize) break;\n      tempPointer = *(undefined **)(tempPointer + 8);\n      nextHeader = currentHeader;\n    } while (currentHeader != tempPointer);\n    currentHeader = *(undefined **)(nextHeader + 0xc);\n  }\n  currentPointer[2] = (uint)nextHeader;\n  currentPointer[3] = (uint)currentHeader;\n  *(uint **)(currentHeader + 8) = currentPointer;\n  *(uint **)(nextHeader + 0xc) = currentPointer;\n  initialize_data_080090b4(param1,currentPointer,tempPointer,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088ec": "initialize_memory_080088ec",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "index",
                "puVar2": "currentPointer",
                "puVar3": "nextPointer",
                "puVar4": "tempPointer",
                "uVar5": "blockSize",
                "uVar6": "nextBlockSize",
                "puVar7": "currentHeader",
                "puVar8": "nextHeader",
                "puVar9": "tempHeader",
                "iVar10": "loopIndex",
                "uVar11": "flag1",
                "uVar12": "flag2"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_08009adc",
                "FUN_080097cc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_0800884c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ad4": {
            "entrypoint": "0x08008ad4",
            "current_name": "get_modified_value_08008ad4",
            "code": "\nint getModifiedValue_08008ad4(void)\n\n{\n  int value;\n  \n  value = *(int *)(DAT_2000001c + 0x34);\n  if (value == 0) {\n    value = 0x2000085c;\n  }\n  return value + 0xf0;\n}\n\n",
            "renaming": {
                "FUN_08008ad4": "get_modified_value_08008ad4",
                "iVar1": "value"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "FUNC_08008af0",
            "code": "\nvoid FUNC_08008af0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "FUNC_08008af0"
            },
            "calling": [
                "FUN_080090a8",
                "FUN_080098c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af4": {
            "entrypoint": "0x08008af4",
            "current_name": "FUNC_08008af4",
            "code": "\nvoid FUNC_08008af4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af4": "FUNC_08008af4"
            },
            "calling": [
                "FUN_080098c0",
                "FUN_080090b4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af8": {
            "entrypoint": "0x08008af8",
            "current_name": "allocate_and_initialize_memory_08008af8",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_and_initialize_memory_08008af8(undefined4 *memory_manager,uint size)\n\n{\n  undefined *temp_1;\n  uint temp_2;\n  uint temp_3;\n  int temp_4;\n  undefined *temp_5;\n  uint temp_6;\n  uint temp_7;\n  undefined4 *temp_8;\n  undefined *temp_9;\n  undefined *temp_10;\n  int *result;\n  uint temp_12;\n  uint temp_13;\n  int temp_14;\n  undefined4 *temp_15;\n  undefined4 *temp_16;\n  \n  temp_12 = size + 0xb;\n  if (temp_12 < 0x17) {\n    if (0x10 < size) goto LAB_08008c7a;\n    initialize_data_080090a8();\n    temp_13 = 0x10;\n    temp_4 = 0x18;\n    temp_12 = 2;\nLAB_08008b18:\n    temp_10 = *(undefined **)((int)&DAT_20000450 + temp_4);\n    if ((temp_10 != &DAT_20000444 + temp_4) ||\n       (temp_10 = *(undefined **)((int)&DAT_20000458 + temp_4), &DAT_2000044c + temp_4 != temp_10)) {\n      temp_4 = *(int *)(temp_10 + 0xc);\n      temp_5 = temp_10 + (*(uint *)(temp_10 + 4) & 0xfffffffc);\n      temp_12 = *(uint *)(temp_5 + 4);\nLAB_08008b34:\n      temp_14 = *(int *)(temp_10 + 8);\n      *(int *)(temp_14 + 0xc) = temp_4;\n      *(int *)(temp_4 + 8) = temp_14;\n      *(uint *)(temp_5 + 4) = temp_12 | 1;\n      initialize_data_080090b4(memory_manager);\n      return (int *)(temp_10 + 8);\n    }\n    temp_12 = temp_12 + 2;\n  }\n  else {\n    temp_13 = temp_12 & 0xfffffff8;\n    if (((int)temp_13 < 0) || (temp_13 < size)) {\nLAB_08008c7a:\n      *memory_manager = 0xc;\n      return (int *)0x0;\n    }\n    initialize_data_080090a8();\n    if (temp_13 < 0x1f8) {\n      temp_12 = temp_12 >> 3;\n      temp_4 = temp_13 + 8;\n      goto LAB_08008b18;\n    }\n    temp_2 = temp_12 >> 9;\n    if (temp_2 == 0) {\n      temp_4 = 0x200;\n      temp_6 = 0x40;\n      temp_2 = 0x3f;\n    }\n    else if (temp_2 < 5) {\n      temp_6 = (temp_12 >> 6) + 0x39;\n      temp_2 = (temp_12 >> 6) + 0x38;\n      temp_4 = temp_6 * 8;\n    }\n    else if (temp_2 < 0x15) {\n      temp_6 = temp_2 + 0x5c;\n      temp_2 = temp_2 + 0x5b;\n      temp_4 = temp_6 * 8;\n    }\n    else if (temp_2 < 0x55) {\n      temp_6 = (temp_12 >> 0xc) + 0x6f;\n      temp_2 = (temp_12 >> 0xc) + 0x6e;\n      temp_4 = temp_6 * 8;\n    }\n    else if (temp_2 < 0x155) {\n      temp_6 = (temp_12 >> 0xf) + 0x78;\n      temp_2 = (temp_12 >> 0xf) + 0x77;\n      temp_4 = temp_6 * 8;\n    }\n    else if (temp_2 < 0x555) {\n      temp_6 = (temp_12 >> 0x12) + 0x7d;\n      temp_2 = (temp_12 >> 0x12) + 0x7c;\n      temp_4 = temp_6 * 8;\n    }\n    else {\n      temp_4 = 0x3f8;\n      temp_6 = 0x7f;\n      temp_2 = 0x7e;\n    }\n    for (temp_10 = *(undefined **)((int)&DAT_20000450 + temp_4); temp_12 = temp_6,\n        &DAT_20000444 + temp_4 != temp_10; temp_10 = *(undefined **)(temp_10 + 0xc)) {\n      temp_14 = (*(uint *)(temp_10 + 4) & 0xfffffffc) - temp_13;\n      temp_12 = temp_2;\n      if (0xf < temp_14) break;\n      if (-1 < temp_14) {\n        temp_5 = temp_10 + (*(uint *)(temp_10 + 4) & 0xfffffffc);\n        temp_12 = *(uint *)(temp_5 + 4);\n        temp_4 = *(int *)(temp_10 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  temp_15 = DAT_2000045c;\n  if ((undefined **)DAT_2000045c == &DAT_20000454) {\n    temp_6 = 1 << ((int)temp_12 >> 2 & 0xffU);\n    temp_2 = DAT_20000450;\n    if (temp_6 <= DAT_20000450) goto LAB_08008c06;\n  }\n  else {\n    temp_6 = DAT_2000045c[1];\n    temp_7 = temp_6 & 0xfffffffc;\n    temp_2 = temp_7 - temp_13;\n    if (0xf < (int)temp_2) {\n      temp_16 = (undefined4 *)(temp_13 + (int)DAT_2000045c);\n      DAT_2000045c[1] = temp_13 | 1;\n      DAT_2000045c = temp_16;\n      DAT_20000460 = temp_16;\n      temp_16[2] = &DAT_20000454;\n      temp_16[3] = &DAT_20000454;\n      temp_16[1] = temp_2 | 1;\n      *(uint *)((int)temp_15 + temp_7) = temp_2;\n      initialize_data_080090b4(memory_manager);\n      return temp_15 + 2;\n    }\n    DAT_2000045c = &DAT_20000454;\n    DAT_20000460 = &DAT_20000454;\n    if (-1 < (int)temp_2) {\n      *(uint *)((int)temp_15 + temp_7 + 4) = *(uint *)((int)temp_15 + temp_7 + 4) | 1;\n      initialize_data_080090b4(memory_manager);\n      return temp_15 + 2;\n    }\n    if (temp_7 < 0x200) {\n      temp_4 = (temp_6 >> 3) + 1;\n      temp_14 = *(int *)(&DAT_2000044c + temp_4 * 8);\n      temp_2 = 1 << ((int)(temp_6 >> 3) >> 2 & 0xffU) | DAT_20000450;\n      temp_15[2] = temp_14;\n      temp_15[3] = &DAT_20000444 + temp_4 * 8;\n      DAT_20000450 = temp_2;\n      *(undefined4 **)(&DAT_2000044c + temp_4 * 8) = temp_15;\n      *(undefined4 **)(temp_14 + 0xc) = temp_15;\n    }\n    else {\n      temp_2 = temp_6 >> 9;\n      if (temp_2 < 5) {\n        temp_4 = ((temp_6 >> 6) + 0x39) * 8;\n        temp_14 = (temp_6 >> 6) + 0x38;\n      }\n      else if (temp_2 < 0x15) {\n        temp_4 = (temp_2 + 0x5c) * 8;\n        temp_14 = temp_2 + 0x5b;\n      }\n      else if (temp_2 < 0x55) {\n        temp_4 = ((temp_6 >> 0xc) + 0x6f) * 8;\n        temp_14 = (temp_6 >> 0xc) + 0x6e;\n      }\n      else if (temp_2 < 0x155) {\n        temp_4 = ((temp_6 >> 0xf) + 0x78) * 8;\n        temp_14 = (temp_6 >> 0xf) + 0x77;\n      }\n      else if (temp_2 < 0x555) {\n        temp_4 = ((temp_6 >> 0x12) + 0x7d) * 8;\n        temp_14 = (temp_6 >> 0x12) + 0x7c;\n      }\n      else {\n        temp_4 = 0x3f8;\n        temp_14 = 0x7e;\n      }\n      temp_10 = *(undefined **)(&DAT_2000044c + temp_4);\n      temp_5 = &DAT_20000444 + temp_4;\n      if (temp_5 == temp_10) {\n        DAT_20000450 = 1 << (temp_14 >> 2 & 0xffU) | DAT_20000450;\n      }\n      else {\n        do {\n          if ((*(uint *)(temp_10 + 4) & 0xfffffffc) <= temp_7) break;\n          temp_10 = *(undefined **)(temp_10 + 8);\n        } while (temp_5 != temp_10);\n        temp_5 = *(undefined **)(temp_10 + 0xc);\n      }\n      temp_2 = DAT_20000450;\n      temp_15[2] = temp_10;\n      temp_15[3] = temp_5;\n      *(undefined4 **)(temp_5 + 8) = temp_15;\n      *(undefined4 **)(temp_10 + 0xc) = temp_15;\n    }\n    temp_6 = 1 << ((int)temp_12 >> 2 & 0xffU);\n    if (temp_6 <= temp_2) {\nLAB_08008c06:\n      if ((temp_6 & temp_2) == 0) {\n        temp_12 = temp_12 & 0xfffffffc;\n        do {\n          temp_6 = temp_6 << 1;\n          temp_12 = temp_12 + 4;\n        } while ((temp_6 & temp_2) == 0);\n      }\n      do {\n        temp_16 = (undefined4 *)(&DAT_2000044c + temp_12 * 8);\n        temp_2 = temp_12;\n        temp_15 = temp_16;\n        do {\n          for (temp_8 = (undefined4 *)temp_15[3]; temp_15 != temp_8;\n              temp_8 = (undefined4 *)temp_8[3]) {\n            temp_7 = temp_8[1] & 0xfffffffc;\n            temp_3 = temp_7 - temp_13;\n            if (0xf < (int)temp_3) {\n              temp_14 = temp_8[2];\n              temp_4 = temp_8[3];\n              temp_15 = (undefined4 *)(temp_13 + (int)temp_8);\n              temp_8[1] = temp_13 | 1;\n              *(int *)(temp_14 + 0xc) = temp_4;\n              *(int *)(temp_4 + 8) = temp_14;\n              DAT_2000045c = temp_15;\n              DAT_20000460 = temp_15;\n              temp_15[2] = &DAT_20000454;\n              temp_15[3] = &DAT_20000454;\n              temp_15[1] = temp_3 | 1;\n              *(uint *)((int)temp_8 + temp_7) = temp_3;\n              initialize_data_080090b4(memory_manager);\n              return temp_8 + 2;\n            }\n            if (-1 < (int)temp_3) {\n              temp_4 = temp_8[3];\n              temp_14 = temp_8[2];\n              *(uint *)((int)temp_8 + temp_7 + 4) = *(uint *)((int)temp_8 + temp_7 + 4) | 1;\n              *(int *)(temp_14 + 0xc) = temp_4;\n              *(int *)(temp_4 + 8) = temp_14;\n              initialize_data_080090b4(memory_manager);\n              return temp_8 + 2;\n            }\n          }\n          temp_2 = temp_2 + 1;\n          temp_15 = temp_15 + 2;\n        } while ((temp_2 & 3) != 0);\n        do {\n          temp_7 = temp_12 & 3;\n          temp_15 = temp_16 + -2;\n          temp_12 = temp_12 - 1;\n          if (temp_7 == 0) {\n            DAT_20000450 = DAT_20000450 & ~temp_6;\n            break;\n          }\n          temp_16 = (undefined4 *)*temp_16;\n        } while (temp_16 == temp_15);\n        temp_6 = temp_6 * 2;\n        if ((DAT_20000450 <= temp_6 && temp_6 - DAT_20000450 != 0) || (temp_12 = temp_2, temp_6 == 0))\n        break;\n        for (; (temp_6 & DAT_20000450) == 0; temp_6 = temp_6 << 1) {\n          temp_12 = temp_12 + 4;\n        }\n      } while( true );\n    }\n  }\n  temp_10 = DAT_20000454;\n  temp_12 = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  if ((temp_13 <= temp_12) && (temp_2 = temp_12 - temp_13, 0xf < (int)temp_2)) goto LAB_08008dac;\n  if (DAT_20000854 == (undefined *)0xffffffff) {\n    temp_2 = temp_13 + DAT_20000a44 + 0x10;\n  }\n  else {\n    temp_2 = temp_13 + DAT_20000a44 + 0x100f & 0xfffff000;\n  }\n  temp_5 = (undefined *)allocate_and_store_memory_08009744(memory_manager,temp_2);\n  if (temp_5 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    temp_12 = *(uint *)(DAT_20000454 + 4);\n  }\n  else {\n    temp_1 = temp_10 + temp_12;\n    if (temp_1 < temp_5 || temp_1 == temp_5) {\n      temp_9 = DAT_20000a14 + temp_2;\n      if ((temp_1 != temp_5) || (((uint)temp_1 & 0xfff) != 0)) goto LAB_08008d02;\n      DAT_20000a14 = temp_9;\n      *(uint *)(DAT_20000454 + 4) = temp_12 + temp_2 | 1;\n    }\n    else {\n      if (temp_10 != &DAT_2000044c) goto LAB_08008ed8;\nLAB_08008d02:\n      DAT_20000a14 = DAT_20000a14 + temp_2;\n      temp_9 = temp_5;\n      if (DAT_20000854 != (undefined *)0xffffffff) {\n        DAT_20000a14 = DAT_20000a14 + ((int)temp_5 - (int)temp_1);\n        temp_9 = DAT_20000854;\n      }\n      DAT_20000854 = temp_9;\n      temp_6 = (uint)temp_5 & 7;\n      if (temp_6 == 0) {\n        temp_4 = 0x1000;\n      }\n      else {\n        temp_5 = temp_5 + (8 - temp_6);\n        temp_4 = 0x1008 - temp_6;\n      }\n      temp_4 = temp_4 - ((uint)(temp_5 + temp_2) & 0xfff);\n      temp_14 = allocate_and_store_memory_08009744(memory_manager,temp_4);\n      if (temp_14 == -1) {\n        temp_2 = 1;\n        temp_4 = 0;\n      }\n      else {\n        temp_2 = (temp_14 - (int)temp_5) + temp_4 | 1;\n      }\n      temp_9 = DAT_20000a14 + temp_4;\n      DAT_20000454 = temp_5;\n      DAT_20000a14 = temp_9;\n      *(uint *)(temp_5 + 4) = temp_2;\n      if (temp_10 != &DAT_2000044c) {\n        if (temp_12 < 0x10) {\n          *(undefined4 *)(temp_5 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        temp_12 = temp_12 - 0xc & 0xfffffff8;\n        *(uint *)(temp_10 + 4) = *(uint *)(temp_10 + 4) & 1 | temp_12;\n        *(undefined4 *)(temp_10 + temp_12 + 4) = 5;\n        *(undefined4 *)(temp_10 + temp_12 + 8) = 5;\n        if (0xf < temp_12) {\n          initialize_memory_080088ec(memory_manager,temp_10 + 8);\n          temp_9 = DAT_20000a14;\n        }\n      }\n    }\n    if (DAT_20000a3c < temp_9) {\n      DAT_20000a3c = temp_9;\n    }\n    temp_12 = *(uint *)(DAT_20000454 + 4);\n    if (DAT_20000a40 < temp_9) {\n      DAT_20000a40 = temp_9;\n    }\n  }\n  temp_2 = (temp_12 & 0xfffffffc) - temp_13;\n  if ((temp_13 <= (temp_12 & 0xfffffffc)) && (0xf < (int)temp_2)) {\nLAB_08008dac:\n    temp_10 = DAT_20000454 + temp_13;\n    *(uint *)(DAT_20000454 + 4) = temp_13 | 1;\n    result = (int *)(DAT_20000454 + 8);\n    DAT_20000454 = temp_10;\n    *(uint *)(temp_10 + 4) = temp_2 | 1;\n    initialize_data_080090b4(memory_manager);\n    return result;\n  }\nLAB_08008eee:\n  initialize_data_080090b4(memory_manager);\n  return (int *)0x0;\n}\n\n",
            "renaming": {
                "FUN_08008af8": "allocate_and_initialize_memory_08008af8",
                "param_1": "memory_manager",
                "param_2": "size",
                "puVar1": "temp_1",
                "uVar2": "temp_2",
                "uVar3": "temp_3",
                "iVar4": "temp_4",
                "puVar5": "temp_5",
                "uVar6": "temp_6",
                "uVar7": "temp_7",
                "puVar8": "temp_8",
                "puVar9": "temp_9",
                "puVar10": "temp_10",
                "piVar11": "result",
                "uVar12": "temp_12",
                "uVar13": "temp_13",
                "iVar14": "temp_14",
                "puVar15": "temp_15",
                "puVar16": "temp_16"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_08009adc",
                "FUN_080097cc",
                "FUN_08009980"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_08009744",
                "FUN_080090b4",
                "FUN_080088ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800901c": {
            "entrypoint": "0x0800901c",
            "current_name": "find_byte_sequence_0800901c",
            "code": "\nuint * find_byte_sequence_0800901c(uint *byte_array,uint pattern,uint array_length)\n\n{\n  uint xor_result;\n  uint pattern_shifted;\n  uint *current_byte;\n  uint pattern_byte;\n  bool is_end_of_array;\n  \n  pattern_byte = pattern & 0xff;\n  if (((uint)byte_array & 3) == 0) {\nLAB_0800904a:\n    if (3 < array_length) {\n      pattern_shifted = (pattern & 0xff) << 8 | pattern_byte;\n      current_byte = byte_array;\n      do {\n        xor_result = *current_byte ^ (pattern_shifted | pattern_shifted << 0x10);\n        byte_array = current_byte + 1;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) goto LAB_08009050;\n        array_length = array_length - 4;\n        current_byte = byte_array;\n      } while (3 < array_length);\n    }\n    current_byte = byte_array;\n    if (array_length == 0) {\n      byte_array = (uint *)0x0;\n    }\n    else {\nLAB_08009050:\n      byte_array = current_byte;\n      if (*(byte *)byte_array != pattern_byte) {\n        current_byte = (uint *)(array_length + (int)byte_array);\n        do {\n          byte_array = (uint *)((int)byte_array + 1);\n          if (current_byte == byte_array) goto LAB_0800906c;\n        } while (*(byte *)byte_array != pattern_byte);\n      }\n    }\n  }\n  else {\n    pattern_shifted = array_length - 1;\n    if (array_length == 0) {\nLAB_0800906c:\n      byte_array = (uint *)0x0;\n    }\n    else if (*(byte *)byte_array != pattern_byte) {\n      current_byte = (uint *)((int)byte_array + 1);\n      do {\n        byte_array = current_byte;\n        array_length = pattern_shifted;\n        if (((uint)byte_array & 3) == 0) goto LAB_0800904a;\n        is_end_of_array = pattern_shifted == 0;\n        pattern_shifted = pattern_shifted - 1;\n        if (is_end_of_array) goto LAB_0800906c;\n        current_byte = (uint *)((int)byte_array + 1);\n      } while (*(byte *)byte_array != pattern_byte);\n    }\n  }\n  return byte_array;\n}\n\n",
            "renaming": {
                "FUN_0800901c": "find_byte_sequence_0800901c",
                "param_1": "byte_array",
                "param_2": "pattern",
                "param_3": "array_length",
                "uVar1": "xor_result",
                "uVar2": "pattern_shifted",
                "puVar3": "current_byte",
                "uVar4": "pattern_byte",
                "bVar5": "is_end_of_array"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090a8": {
            "entrypoint": "0x080090a8",
            "current_name": "initialize_data_080090a8",
            "code": "\nvoid initialize_data_080090a8(void)\n\n{\n  FUNC_08008af0(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090a8": "initialize_data_080090a8"
            },
            "calling": [
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090b4": {
            "entrypoint": "0x080090b4",
            "current_name": "initialize_data_080090b4",
            "code": "\nvoid initializeData_080090b4(void)\n\n{\n  FUNC_08008af4(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090b4": "initialize_data_080090b4"
            },
            "calling": [
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c0": {
            "entrypoint": "0x080090c0",
            "current_name": "initialize_memory_080090c0",
            "code": "\nundefined4 * initializeMemory_080090c0(int param1,uint param2)\n\n{\n  undefined4 *ptr;\n  int memPtr;\n  \n  memPtr = *(int *)(param1 + 0x4c);\n  if (memPtr == 0) {\n    memPtr = initialize_memory_08009980(param1,4,0x21);\n    *(int *)(param1 + 0x4c) = memPtr;\n    if (memPtr == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  ptr = *(undefined4 **)(memPtr + param2 * 4);\n  if (ptr == (undefined4 *)0x0) {\n    memPtr = 1 << (param2 & 0xff);\n    ptr = (undefined4 *)initialize_memory_08009980(param1,1,(memPtr + 5) * 4);\n    if (ptr == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    ptr[1] = param2;\n    ptr[2] = memPtr;\n  }\n  else {\n    *(undefined4 *)(memPtr + param2 * 4) = *ptr;\n  }\n  ptr[3] = 0;\n  ptr[4] = 0;\n  return ptr;\n}\n\n",
            "renaming": {
                "FUN_080090c0": "initialize_memory_080090c0",
                "param_1": "param1",
                "param_2": "param2",
                "puVar1": "ptr",
                "iVar2": "memPtr"
            },
            "calling": [
                "FUN_08009244",
                "FUN_08009530",
                "FUN_08009630",
                "FUN_08009120",
                "FUN_080093a4",
                "FUN_08009258",
                "FUN_08009444",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08009980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800910c": {
            "entrypoint": "0x0800910c",
            "current_name": "extract_and_assign_0800910c",
            "code": "\nvoid extractAndAssign_0800910c(int sourceOffset,undefined4 *destinationPtr)\n\n{\n  int dataOffset;\n  \n  if (destinationPtr != (undefined4 *)0x0) {\n    dataOffset = *(int *)(sourceOffset + 0x4c);\n    *destinationPtr = *(undefined4 *)(dataOffset + destinationPtr[1] * 4);\n    *(undefined4 **)(dataOffset + destinationPtr[1] * 4) = destinationPtr;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800910c": "extract_and_assign_0800910c",
                "param_1": "sourceOffset",
                "param_2": "destinationPtr",
                "iVar1": "dataOffset"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009120": {
            "entrypoint": "0x08009120",
            "current_name": "calculate_hash_08009120",
            "code": "\nundefined4 * calculateHash_08009120(int input,undefined4 *hashValues,int multiplier,uint carry)\n\n{\n  undefined4 *result;\n  uint temp;\n  int length;\n  uint *hashPtr;\n  int iterator;\n  \n  iterator = 0;\n  length = hashValues[4];\n  hashPtr = hashValues + 5;\n  do {\n    iterator = iterator + 1;\n    carry = multiplier * (*hashPtr & 0xffff) + carry;\n    temp = multiplier * (*hashPtr >> 0x10) + (carry >> 0x10);\n    *hashPtr = (carry & 0xffff) + temp * 0x10000;\n    carry = temp >> 0x10;\n    hashPtr = hashPtr + 1;\n  } while (iterator < length);\n  result = hashValues;\n  if (carry != 0) {\n    if ((int)hashValues[2] <= length) {\n      result = (undefined4 *)initialize_memory_080090c0(input,hashValues[1] + 1);\n      copy_memory_08001084(result + 3,hashValues + 3,(hashValues[4] + 2) * 4);\n      iterator = *(int *)(input + 0x4c);\n      *hashValues = *(undefined4 *)(iterator + hashValues[1] * 4);\n      *(undefined4 **)(iterator + hashValues[1] * 4) = hashValues;\n    }\n    result[length + 5] = carry;\n    result[4] = length + 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009120": "calculate_hash_08009120",
                "param_1": "input",
                "param_2": "hashValues",
                "param_3": "multiplier",
                "param_4": "carry",
                "puVar1": "result",
                "uVar2": "temp",
                "iVar3": "length",
                "puVar4": "hashPtr",
                "iVar5": "iterator"
            },
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08001084",
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a4": {
            "entrypoint": "0x080091a4",
            "current_name": "count_leading_zeros_080091a4",
            "code": "\nint countLeadingZeros_080091a4(uint value)\n\n{\n  int leadingZeros;\n  \n  if ((value & 0xffff0000) == 0) {\n    value = value << 0x10;\n    leadingZeros = 0x10;\n  }\n  else {\n    leadingZeros = 0;\n  }\n  if ((value & 0xff000000) == 0) {\n    value = value << 8;\n    leadingZeros = leadingZeros + 8;\n  }\n  if ((value & 0xf0000000) == 0) {\n    value = value << 4;\n    leadingZeros = leadingZeros + 4;\n  }\n  if ((value & 0xc0000000) == 0) {\n    value = value << 2;\n    leadingZeros = leadingZeros + 2;\n  }\n  if (-1 < (int)value) {\n    if ((int)(value << 1) < 0) {\n      return leadingZeros + 1;\n    }\n    leadingZeros = 0x20;\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_080091a4": "count_leading_zeros_080091a4",
                "param_1": "value",
                "iVar1": "leadingZeros"
            },
            "calling": [
                "FUN_08009630",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091e4": {
            "entrypoint": "0x080091e4",
            "current_name": "count_leading_zeros_080091e4",
            "code": "\nint countLeadingZeros_080091e4(uint *value)\n\n{\n  int count;\n  uint temp;\n  \n  temp = *value;\n  if ((temp & 7) == 0) {\n    if ((temp & 0xffff) == 0) {\n      temp = temp >> 0x10;\n      count = 0x10;\n    }\n    else {\n      count = 0;\n    }\n    if ((temp & 0xff) == 0) {\n      temp = temp >> 8;\n      count = count + 8;\n    }\n    if ((temp & 0xf) == 0) {\n      temp = temp >> 4;\n      count = count + 4;\n    }\n    if ((temp & 3) == 0) {\n      temp = temp >> 2;\n      count = count + 2;\n    }\n    if (-1 < (int)(temp << 0x1f)) {\n      temp = temp >> 1;\n      if (temp == 0) {\n        return 0x20;\n      }\n      count = count + 1;\n    }\n    *value = temp;\n    return count;\n  }\n  if ((int)(temp << 0x1f) < 0) {\n    return 0;\n  }\n  if (-1 < (int)(temp << 0x1e)) {\n    *value = temp >> 2;\n    return 2;\n  }\n  *value = temp >> 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080091e4": "count_leading_zeros_080091e4",
                "param_1": "value",
                "iVar1": "count",
                "uVar2": "temp"
            },
            "calling": [
                "FUN_08009630"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009244": {
            "entrypoint": "0x08009244",
            "current_name": "initialize_memory_08009244",
            "code": "\nvoid initializeMemory_08009244(undefined4 memoryBlock,undefined4 value)\n\n{\n  int memoryAddress;\n  \n  memoryAddress = initialize_memory_080090c0(memoryBlock,1);\n  *(undefined4 *)(memoryAddress + 0x10) = 1;\n  *(undefined4 *)(memoryAddress + 0x14) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009244": "initialize_memory_08009244",
                "param_1": "memoryBlock",
                "param_2": "value",
                "iVar1": "memoryAddress"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009258": {
            "entrypoint": "0x08009258",
            "current_name": "calculate_hash_08009258",
            "code": "\nvoid calculateHash_08009258(undefined4 param1,int input1,int input2)\n\n{\n  uint *ptr1;\n  uint *ptr2;\n  int memorySize;\n  uint temp1;\n  uint *ptr3;\n  uint start;\n  uint *end;\n  uint temp2;\n  int input1Size;\n  int input2Size;\n  uint temp3;\n  int maxSize;\n  int temp;\n  uint *ptr4;\n  uint *ptr5;\n  uint *ptr6;\n  uint *ptr7;\n  uint *ptr8;\n  \n  maxSize = *(int *)(input1 + 0x10);\n  input1Size = *(int *)(input2 + 0x10);\n  input2Size = input1Size;\n  temp = input1;\n  if (maxSize < input1Size) {\n    input2Size = maxSize;\n    maxSize = input1Size;\n    temp = input2;\n    input2 = input1;\n  }\n  input1Size = maxSize + input2Size;\n  memorySize = *(int *)(temp + 4);\n  if (*(int *)(temp + 8) < input1Size) {\n    memorySize = memorySize + 1;\n  }\n  memorySize = initialize_memory_080090c0(param1,memorySize);\n  ptr8 = (uint *)(memorySize + 0x14);\n  ptr7 = ptr8 + input1Size;\n  for (ptr3 = ptr8; ptr3 < ptr7; ptr3 = ptr3 + 1) {\n    *ptr3 = 0;\n  }\n  start = input2 + 0x14;\n  temp3 = start + input2Size * 4;\n  ptr3 = (uint *)(temp + 0x14);\n  if (start < temp3) {\n    end = (uint *)(start + ((temp3 - input2) - 0x15 & 0xfffffffc));\n    ptr6 = (uint *)(input2 + 0x10);\n    do {\n      while( true ) {\n        ptr6 = ptr6 + 1;\n        start = *ptr6 & 0xffff;\n        if (start != 0) break;\n        start = *ptr6 >> 0x10;\n        if (start == 0) goto LAB_080092d2;\nLAB_0800932c:\n        temp2 = *ptr8;\n        temp1 = 0;\n        ptr1 = ptr3;\n        ptr4 = ptr8;\n        temp3 = temp2;\n        do {\n          ptr5 = ptr4;\n          temp1 = temp1 + start * *(ushort *)ptr1 + (temp3 >> 0x10);\n          *ptr5 = temp2 & 0xffff | temp1 * 0x10000;\n          ptr2 = ptr1 + 1;\n          temp3 = ptr5[1];\n          temp2 = start * (*ptr1 >> 0x10) + (temp3 & 0xffff) + (temp1 >> 0x10);\n          temp1 = temp2 >> 0x10;\n          ptr1 = ptr2;\n          ptr4 = ptr5 + 1;\n        } while (ptr2 < ptr3 + maxSize);\n        ptr5[1] = temp2;\n        ptr8 = ptr8 + 1;\n        if (end == ptr6) goto LAB_0800937a;\n      }\n      temp3 = 0;\n      ptr1 = ptr8;\n      ptr4 = ptr3;\n      do {\n        ptr2 = ptr1;\n        ptr5 = ptr4 + 1;\n        temp2 = start * (*ptr4 & 0xffff) + (*ptr2 & 0xffff) + temp3;\n        temp1 = start * (*ptr4 >> 0x10) + (*ptr2 >> 0x10) + (temp2 >> 0x10);\n        temp3 = temp1 >> 0x10;\n        *ptr2 = temp2 & 0xffff | temp1 * 0x10000;\n        ptr1 = ptr2 + 1;\n        ptr4 = ptr5;\n      } while (ptr5 < ptr3 + maxSize);\n      ptr2[1] = temp3;\n      start = *ptr6 >> 0x10;\n      if (start != 0) goto LAB_0800932c;\nLAB_080092d2:\n      ptr8 = ptr8 + 1;\n    } while (end != ptr6);\n  }\nLAB_0800937a:\n  if (0 < input1Size) {\n    start = ptr7[-1];\n    ptr7 = ptr7 + -1;\n    while ((start == 0 && (input1Size = input1Size + -1, input1Size != 0))) {\n      ptr7 = ptr7 + -1;\n      start = *ptr7;\n    }\n  }\n  *(int *)(memorySize + 0x10) = input1Size;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009258": "calculate_hash_08009258",
                "param_1": "param1",
                "param_2": "input1",
                "param_3": "input2",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "iVar3": "memorySize",
                "uVar4": "temp1",
                "puVar5": "ptr3",
                "uVar6": "start",
                "puVar7": "end",
                "uVar8": "temp2",
                "iVar9": "input1Size",
                "iVar10": "input2Size",
                "uVar11": "temp3",
                "iVar12": "maxSize",
                "iVar13": "temp",
                "puVar14": "ptr4",
                "puVar15": "ptr5",
                "puVar16": "ptr6",
                "puVar17": "ptr7",
                "puVar18": "ptr8"
            },
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080093a4": {
            "entrypoint": "0x080093a4",
            "current_name": "hash_function_080093a4",
            "code": "\nundefined4 * hash_function_080093a4(int input_data,undefined4 *output_data,uint data_size)\n\n{\n  int index;\n  int loop_count;\n  undefined4 *current_data;\n  undefined4 *memory_block;\n  \n  if ((data_size & 3) != 0) {\n    output_data = (undefined4 *)\n              calculate_hash_08009120(input_data,output_data,*(undefined4 *)(&DAT_0800a070 + ((data_size & 3) - 1) * 4),\n                           0);\n  }\n  loop_count = (int)data_size >> 2;\n  if (loop_count != 0) {\n    memory_block = *(undefined4 **)(input_data + 0x48);\n    if (memory_block == (undefined4 *)0x0) {\n      memory_block = (undefined4 *)initialize_memory_080090c0(input_data,1);\n      memory_block[4] = 1;\n      memory_block[5] = 0x271;\n      *(undefined4 **)(input_data + 0x48) = memory_block;\n      *memory_block = 0;\n    }\n    current_data = output_data;\n    if (loop_count << 0x1f < 0) goto LAB_080093d2;\nLAB_080093c4:\n    loop_count = loop_count >> 1;\n    current_data = memory_block;\n    if (loop_count != 0) {\n      while( true ) {\n        memory_block = (undefined4 *)*current_data;\n        if (memory_block == (undefined4 *)0x0) {\n          memory_block = (undefined4 *)calculate_hash_08009258(input_data,current_data,current_data);\n          *current_data = memory_block;\n          *memory_block = 0;\n        }\n        current_data = output_data;\n        if (-1 < loop_count << 0x1f) break;\nLAB_080093d2:\n        output_data = (undefined4 *)calculate_hash_08009258(input_data,current_data,memory_block);\n        if (current_data == (undefined4 *)0x0) break;\n        index = *(int *)(input_data + 0x4c);\n        loop_count = loop_count >> 1;\n        *current_data = *(undefined4 *)(index + current_data[1] * 4);\n        *(undefined4 **)(index + current_data[1] * 4) = current_data;\n        current_data = memory_block;\n        if (loop_count == 0) {\n          return output_data;\n        }\n      }\n      goto LAB_080093c4;\n    }\n  }\n  return output_data;\n}\n\n",
            "renaming": {
                "FUN_080093a4": "hash_function_080093a4",
                "param_1": "input_data",
                "param_2": "output_data",
                "param_3": "data_size",
                "iVar1": "index",
                "iVar2": "loop_count",
                "puVar3": "current_data",
                "puVar4": "memory_block"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08009120",
                "FUN_08009258",
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009444": {
            "entrypoint": "0x08009444",
            "current_name": "memory_initialization_08009444",
            "code": "\nvoid memoryInitialization_08009444(int param1,undefined4 *param2,uint param3)\n\n{\n  int temp1;\n  int temp2;\n  int temp3;\n  undefined4 temp4;\n  int temp5;\n  int temp6;\n  uint *ptr1;\n  uint *ptr2;\n  uint *ptr4;\n  uint *ptr5;\n  int temp7;\n  int temp8;\n  uint temp9;\n  uint *ptr3;\n  \n  temp5 = param2[4];\n  temp7 = (int)param3 >> 5;\n  temp8 = temp7 + temp5 + 1;\n  temp3 = param2[1];\n  temp2 = param2[2];\n  if ((int)param2[2] < temp8) {\n    do {\n      temp6 = temp2 * 2;\n      temp1 = temp2 * -2;\n      temp3 = temp3 + 1;\n      temp2 = temp6;\n    } while (temp8 != temp6 && temp8 + temp1 < 0 == SBORROW4(temp8,temp6));\n  }\n  temp2 = initialize_memory_080090c0(param1,temp3);\n  ptr1 = (uint *)(temp2 + 0x14);\n  if (0 < temp7) {\n    ptr5 = ptr1 + temp7;\n    ptr2 = ptr1;\n    do {\n      ptr3 = ptr2 + 1;\n      *ptr2 = 0;\n      ptr1 = ptr5;\n      ptr2 = ptr3;\n    } while (ptr3 != ptr5);\n  }\n  temp3 = param2[4];\n  ptr2 = param2 + 5;\n  param3 = param3 & 0x1f;\n  if (param3 == 0) {\n    ptr1 = ptr1 + -1;\n    ptr5 = ptr2;\n    do {\n      ptr3 = ptr5 + 1;\n      ptr1 = ptr1 + 1;\n      *ptr1 = *ptr5;\n      ptr5 = ptr3;\n    } while (ptr3 < ptr2 + temp3);\n  }\n  else {\n    temp9 = 0;\n    ptr5 = ptr2;\n    do {\n      ptr3 = ptr1;\n      *ptr3 = *ptr5 << param3 | temp9;\n      ptr4 = ptr5 + 1;\n      temp9 = *ptr5 >> (0x20 - param3 & 0xff);\n      ptr1 = ptr3 + 1;\n      ptr5 = ptr4;\n    } while (ptr4 < ptr2 + temp3);\n    ptr3[1] = temp9;\n    if (temp9 != 0) {\n      temp8 = temp7 + temp5 + 2;\n    }\n  }\n  temp5 = *(int *)(param1 + 0x4c);\n  temp3 = param2[1];\n  temp4 = *(undefined4 *)(temp5 + temp3 * 4);\n  *(int *)(temp2 + 0x10) = temp8 + -1;\n  *param2 = temp4;\n  *(undefined4 **)(temp5 + temp3 * 4) = param2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009444": "memory_initialization_08009444",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "temp1",
                "iVar2": "temp2",
                "iVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "temp5",
                "iVar6": "temp6",
                "puVar7": "ptr1",
                "puVar8": "ptr2",
                "puVar9": "ptr3",
                "puVar10": "ptr4",
                "puVar11": "ptr5",
                "iVar12": "temp7",
                "iVar13": "temp8",
                "uVar14": "temp9"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094f8": {
            "entrypoint": "0x080094f8",
            "current_name": "compare_arrays_080094f8",
            "code": "\nint compareArrays_080094f8(int array1,int array2)\n\n{\n  int lengthDiff;\n  uint *ptr1;\n  int length;\n  uint *ptr2;\n  \n  length = *(int *)(array2 + 0x10);\n  lengthDiff = *(int *)(array1 + 0x10) - length;\n  if (lengthDiff == 0) {\n    ptr1 = (uint *)(array2 + 0x14 + length * 4);\n    ptr2 = (uint *)(array1 + 0x14) + length;\n    do {\n      ptr2 = ptr2 + -1;\n      ptr1 = ptr1 + -1;\n      if (*ptr2 != *ptr1) {\n        if (*ptr1 <= *ptr2) {\n          return 1;\n        }\n        return -1;\n      }\n    } while ((uint *)(array1 + 0x14) < ptr2);\n  }\n  return lengthDiff;\n}\n\n",
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_1": "array1",
                "param_2": "array2",
                "iVar1": "lengthDiff",
                "iVar3": "length",
                "puVar2": "ptr1",
                "puVar4": "ptr2"
            },
            "calling": [
                "FUN_080078c0",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009530": {
            "entrypoint": "0x08009530",
            "current_name": "memory_initialization_08009530",
            "code": "\nvoid memory_initialization_08009530(undefined4 param1,uint *source_ptr,uint *dest_ptr,undefined4 param4)\n\n{\n  int memory_init_result;\n  uint *src_ptr_end;\n  uint src_size;\n  uint carry;\n  undefined4 is_equal;\n  uint *dest_ptr_end;\n  uint *src_ptr;\n  uint *dest_ptr_loop;\n  uint *src_ptr_loop_end;\n  uint *dest_ptr_end;\n  int carry_sum;\n  uint *src_ptr_end_loop;\n  uint dest_size;\n  uint *src_ptr_loop;\n  \n  src_ptr_end = (uint *)dest_ptr[4];\n  dest_ptr_end = source_ptr + 5;\n  src_ptr_end_loop = dest_ptr + 5;\n  src_ptr = dest_ptr_end;\n  dest_ptr_loop = source_ptr;\n  if ((uint *)source_ptr[4] == src_ptr_end) {\n    dest_ptr_end = dest_ptr_end + (int)src_ptr_end;\n    src_ptr_end = src_ptr_end_loop + (int)src_ptr_end;\n    while( true ) {\n      dest_ptr_end = dest_ptr_end + -1;\n      src_ptr_end = src_ptr_end + -1;\n      if (*dest_ptr_end != *src_ptr_end) break;\n      if (dest_ptr_end <= dest_ptr_end) {\n        carry_sum = initialize_memory_080090c0(param1,0,dest_ptr_end,src_ptr_end,param4);\n        *(undefined4 *)(carry_sum + 0x10) = 1;\n        *(undefined4 *)(carry_sum + 0x14) = 0;\n        return;\n      }\n    }\n    is_equal = 0;\n    if (*src_ptr_end <= *dest_ptr_end) goto LAB_08009578;\n  }\n  else if (-1 < (int)(uint *)source_ptr[4] - (int)src_ptr_end) {\n    is_equal = 0;\n    dest_ptr_end = dest_ptr;\n    goto LAB_08009578;\n  }\n  is_equal = 1;\n  dest_ptr_end = dest_ptr_end;\n  src_ptr_end = source_ptr;\n  src_ptr = src_ptr_end_loop;\n  dest_ptr_loop = dest_ptr;\n  dest_ptr = source_ptr;\n  src_ptr_end_loop = dest_ptr_end;\nLAB_08009578:\n  memory_init_result = initialize_memory_080090c0(param1,dest_ptr_loop[1],dest_ptr_end,src_ptr_end,param4);\n  carry_sum = 0;\n  dest_size = dest_ptr_loop[4];\n  src_size = dest_ptr[4];\n  *(undefined4 *)(memory_init_result + 0xc) = is_equal;\n  dest_ptr_end = src_ptr + dest_size;\n  src_ptr_end = (uint *)(memory_init_result + 0x14);\n  dest_ptr_loop = src_ptr_end_loop;\n  do {\n    src_ptr_loop = src_ptr + 1;\n    src_ptr_loop_end = dest_ptr_loop + 1;\n    carry = ((*src_ptr & 0xffff) + carry_sum) - (*dest_ptr_loop & 0xffff);\n    carry_sum = ((*src_ptr >> 0x10) - (*dest_ptr_loop >> 0x10)) + ((int)carry >> 0x10);\n    carry = carry & 0xffff | carry_sum * 0x10000;\n    dest_ptr_end = src_ptr_end + 1;\n    *src_ptr_end = carry;\n    carry_sum = carry_sum >> 0x10;\n    src_ptr_end = dest_ptr_end;\n    src_ptr = src_ptr_loop;\n    dest_ptr_loop = src_ptr_loop_end;\n  } while (src_ptr_loop_end < src_ptr_end_loop + src_size);\n  src_ptr_end = src_ptr_loop;\n  src_ptr = dest_ptr_end;\n  if (src_ptr_loop < dest_ptr_end) {\n    do {\n      dest_ptr_loop = src_ptr_end + 1;\n      src_size = (*src_ptr_end & 0xffff) + carry_sum;\n      carry_sum = ((int)src_size >> 0x10) + (*src_ptr_end >> 0x10);\n      carry = src_size & 0xffff | carry_sum * 0x10000;\n      *src_ptr = carry;\n      carry_sum = carry_sum >> 0x10;\n      src_ptr_end = dest_ptr_loop;\n      src_ptr = src_ptr + 1;\n    } while (dest_ptr_loop < dest_ptr_end);\n    dest_ptr_end = (uint *)((int)dest_ptr_end + ((int)dest_ptr_end + ~(uint)src_ptr_loop & 0xfffffffc) + 4);\n  }\n  dest_ptr_end = dest_ptr_end + -1;\n  while (carry == 0) {\n    dest_ptr_end = dest_ptr_end + -1;\n    dest_size = dest_size - 1;\n    carry = *dest_ptr_end;\n  }\n  *(uint *)(memory_init_result + 0x10) = dest_size;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009530": "memory_initialization_08009530",
                "param_1": "param1",
                "param_2": "source_ptr",
                "param_3": "dest_ptr",
                "param_4": "param4",
                "iVar1": "memory_init_result",
                "puVar2": "src_ptr_end",
                "uVar3": "src_size",
                "uVar4": "carry",
                "uVar5": "is_equal",
                "puVar6": "dest_ptr_end",
                "puVar7": "src_ptr",
                "puVar8": "src_ptr_loop",
                "puVar9": "dest_ptr_loop",
                "puVar10": "src_ptr_loop_end",
                "puVar11": "dest_ptr_end",
                "puVar13": "src_ptr_end_loop",
                "iVar12": "carry_sum",
                "uVar14": "dest_size"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009630": {
            "entrypoint": "0x08009630",
            "current_name": "decode_parameter_08009630",
            "code": "\nint decode_parameter_08009630(undefined4 input1,undefined4 input2,uint value1,uint value2,int *output1,\n                int *output2)\n\n{\n  int memory;\n  uint leading_zeros_count;\n  int count;\n  int flag;\n  uint shifted_value;\n  uint shift;\n  undefined8 leading_zeros_result;\n  uint temp_value;\n  uint modified_value;\n  \n  memory = initialize_memory_080090c0(input1,1);\n  shift = (value2 << 1) >> 0x15;\n  modified_value = value2 & 0xfffff;\n  if (shift != 0) {\n    modified_value = modified_value | 0x100000;\n  }\n  if (value1 == 0) {\n    count = count_leading_zeros_080091e4(&modified_value);\n    flag = 1;\n    leading_zeros_count = count + 0x20;\n    *(undefined4 *)(memory + 0x10) = 1;\n    *(uint *)(memory + 0x14) = modified_value;\n  }\n  else {\n    temp_value = value1;\n    leading_zeros_count = count_leading_zeros_080091e4(&temp_value);\n    if (leading_zeros_count == 0) {\n      *(uint *)(memory + 0x14) = temp_value;\n    }\n    else {\n      shifted_value = modified_value << (0x20 - leading_zeros_count & 0xff);\n      modified_value = modified_value >> (leading_zeros_count & 0xff);\n      *(uint *)(memory + 0x14) = shifted_value | temp_value;\n    }\n    if (modified_value == 0) {\n      flag = 1;\n    }\n    else {\n      flag = 2;\n    }\n    *(uint *)(memory + 0x18) = modified_value;\n    *(int *)(memory + 0x10) = flag;\n  }\n  if (shift == 0) {\n    *output1 = leading_zeros_count - 0x432;\n    leading_zeros_result = count_leading_zeros_080091a4(*(undefined4 *)(memory + flag * 4 + 0x10));\n    *output2 = (int)((ulonglong)leading_zeros_result >> 0x20) * 0x20 - (int)leading_zeros_result;\n    return memory;\n  }\n  *output1 = (shift - 0x433) + leading_zeros_count;\n  *output2 = 0x35 - leading_zeros_count;\n  return memory;\n}\n\n",
            "renaming": {
                "FUN_08009630": "decode_parameter_08009630",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "output1",
                "param_6": "output2",
                "iVar1": "memory",
                "uVar2": "leading_zeros_count",
                "iVar3": "count",
                "iVar4": "flag",
                "uVar5": "shifted_value",
                "uVar6": "shift",
                "uVar7": "leading_zeros_result",
                "local_20": "temp_value",
                "local_1c": "modified_value"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080091e4",
                "FUN_080091a4",
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e0": {
            "entrypoint": "0x080096e0",
            "current_name": "calculate_result_080096e0",
            "code": "\nundefined8 calculate_result_080096e0(uint input1,uint input2,int *output,undefined4 input3)\n\n{\n  int counter;\n  uint abs_input2;\n  undefined8 result;\n  \n  result = CONCAT44(input2,input1);\n  counter = 0;\n  abs_input2 = input2 & 0x7fffffff;\n  *output = 0;\n  if ((abs_input2 < 0x7ff00000) && ((abs_input2 | input1) != 0)) {\n    if (abs_input2 < 0x100000) {\n      result = calculate_improved_result_080004c8(input1,input2,0,0x43500000,input3);\n      counter = -0x36;\n      abs_input2 = (uint)((ulonglong)result >> 0x20) & 0x7fffffff;\n    }\n    input1 = (uint)result;\n    input2 = (uint)((ulonglong)result >> 0x20) & 0x800fffff | 0x3fe00000;\n    *output = ((int)abs_input2 >> 0x14) + -0x3fe + counter;\n  }\n  return CONCAT44(input2,input1);\n}\n\n",
            "renaming": {
                "FUN_080096e0": "calculate_result_080096e0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output",
                "param_4": "input3",
                "iVar1": "counter",
                "uVar2": "abs_input2",
                "uVar3": "result"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_080004c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009744": {
            "entrypoint": "0x08009744",
            "current_name": "allocate_and_store_memory_08009744",
            "code": "\nvoid allocate_and_store_memory_08009744(int *result,undefined4 size)\n\n{\n  int allocation_result;\n  \n  DAT_20000c10 = 0;\n  allocation_result = allocate_memory_08005728(size);\n  if ((allocation_result == -1) && (DAT_20000c10 != 0)) {\n    *result = DAT_20000c10;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009744": "allocate_and_store_memory_08009744",
                "param_1": "result",
                "param_2": "size",
                "iVar1": "allocation_result"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08005728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009768": {
            "entrypoint": "0x08009768",
            "current_name": "copy_valid_chars_08009768",
            "code": "\nvoid copyValidChars_08009768(uint *source,uint *destination,uint length)\n\n{\n  char currentChar;\n  uint *srcPtr;\n  uint *destPtr;\n  uint currentValue;\n  \n  if (((((uint)source | (uint)destination) & 3) == 0) &&\n     (destPtr = source, srcPtr = destination, 3 < length)) {\n    do {\n      destination = srcPtr + 1;\n      currentValue = *srcPtr;\n      source = destPtr;\n      if ((currentValue + 0xfefefeff & ~currentValue & 0x80808080) != 0) goto LAB_0800979c;\n      length = length - 4;\n      source = destPtr + 1;\n      *destPtr = currentValue;\n      destPtr = source;\n      srcPtr = destination;\n    } while (3 < length);\n  }\n  srcPtr = destination;\n  if (length != 0) {\nLAB_0800979c:\n    currentChar = *(char *)srcPtr;\n    *(char *)source = currentChar;\n    while( true ) {\n      source = (uint *)((int)source + 1);\n      length = length - 1;\n      if (currentChar == '\\0') break;\n      if (length == 0) {\n        return;\n      }\n      srcPtr = (uint *)((int)srcPtr + 1);\n      currentChar = *(char *)srcPtr;\n      *(char *)source = currentChar;\n    }\n    if (length != 0) {\n      srcPtr = source;\n      do {\n        destPtr = (uint *)((int)srcPtr + 1);\n        *(char *)srcPtr = '\\0';\n        srcPtr = destPtr;\n      } while (destPtr != (uint *)(length + (int)source));\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009768": "copy_valid_chars_08009768",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "length",
                "cVar1": "currentChar",
                "puVar2": "srcPtr",
                "puVar3": "destPtr",
                "uVar4": "currentValue"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080097cc": {
            "entrypoint": "0x080097cc",
            "current_name": "process_data_080097cc",
            "code": "\nundefined4 process_data_080097cc(undefined4 *outputArray,int *inputArray,int *controlArray)\n\n{\n  int currentIndex;\n  uint currentLength;\n  int memAllocResult;\n  int difference;\n  uint newLength;\n  uint tempLength;\n  undefined4 *nextPtr;\n  undefined4 *currentPtr;\n  undefined4 currentValue;\n  \n  if (controlArray[2] != 0) {\n    currentIndex = *inputArray;\n    newLength = inputArray[2];\n    currentPtr = (undefined4 *)*controlArray;\n    do {\n      do {\n        nextPtr = currentPtr + 2;\n        currentValue = *currentPtr;\n        tempLength = currentPtr[1];\n        currentPtr = nextPtr;\n      } while (tempLength == 0);\n      currentLength = tempLength;\n      if ((newLength <= tempLength) && (currentLength = newLength, (*(ushort *)(inputArray + 3) & 0x480) != 0)) {\n        difference = currentIndex - inputArray[4];\n        newLength = (inputArray[5] * 3) / 2;\n        currentLength = tempLength + 1 + difference;\n        if (newLength < currentLength) {\n          newLength = currentLength;\n        }\n        if ((int)((uint)*(ushort *)(inputArray + 3) << 0x15) < 0) {\n          memAllocResult = allocate_and_initialize_memory_08008af8(outputArray,newLength);\n          if (memAllocResult == 0) {\nLAB_08009896:\n            *outputArray = 0xc;\n            *(ushort *)(inputArray + 3) = *(ushort *)(inputArray + 3) | 0x40;\n            controlArray[1] = 0;\n            controlArray[2] = 0;\n            return 0xffffffff;\n          }\n          copy_memory_08001084(memAllocResult,inputArray[4],difference);\n          *(ushort *)(inputArray + 3) = *(ushort *)(inputArray + 3) & 0xfb7f | 0x80;\n        }\n        else {\n          memAllocResult = allocate_and_initialize_memory_08009adc(outputArray);\n          if (memAllocResult == 0) {\n            initialize_memory_080088ec(outputArray,inputArray[4]);\n            goto LAB_08009896;\n          }\n        }\n        currentIndex = memAllocResult + difference;\n        inputArray[5] = newLength;\n        inputArray[4] = memAllocResult;\n        *inputArray = currentIndex;\n        inputArray[2] = newLength - difference;\n        currentLength = tempLength;\n      }\n      copy_memory_08009a18(currentIndex,currentValue,currentLength);\n      difference = controlArray[2];\n      newLength = inputArray[2] - currentLength;\n      currentIndex = *inputArray + currentLength;\n      inputArray[2] = newLength;\n      *inputArray = currentIndex;\n      controlArray[2] = difference - tempLength;\n    } while (difference - tempLength != 0);\n  }\n  controlArray[1] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080097cc": "process_data_080097cc",
                "param_1": "outputArray",
                "param_2": "inputArray",
                "param_3": "controlArray",
                "iVar1": "currentIndex",
                "uVar2": "currentLength",
                "iVar3": "memAllocResult",
                "iVar4": "difference",
                "uVar5": "newLength",
                "uVar6": "tempLength",
                "puVar7": "nextPtr",
                "puVar8": "currentPtr",
                "uVar9": "currentValue"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08009a18",
                "FUN_08001084",
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098c0": {
            "entrypoint": "0x080098c0",
            "current_name": "update_data_080098c0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009906) */\n/* WARNING: Removing unreachable block (ram,0x08009912) */\n\nundefined4 updateData_080098c0(int flag,undefined4 data,undefined4 value1,undefined4 value2)\n\n{\n  undefined *dataPtr;\n  undefined4 returnValue;\n  uint bitMask;\n  uint counter;\n  \n  FUNC_08008af0(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  dataPtr = DAT_20000168;\n  counter = *(uint *)(DAT_20000168 + 4);\n  if ((int)counter < 0x20) {\n    if (flag != 0) {\n      *(undefined4 *)(DAT_20000168 + counter * 4 + 0x88) = value1;\n      bitMask = 1 << (counter & 0xff);\n      *(uint *)(dataPtr + 0x188) = *(uint *)(dataPtr + 0x188) | bitMask;\n      *(undefined4 *)(dataPtr + counter * 4 + 0x108) = value2;\n      if (flag == 2) {\n        *(uint *)(dataPtr + 0x18c) = bitMask | *(uint *)(dataPtr + 0x18c);\n      }\n    }\n    *(uint *)(dataPtr + 4) = counter + 1;\n    returnValue = DAT_20000448;\n    *(undefined4 *)(dataPtr + (counter + 2) * 4) = data;\n    FUNC_08008af4(returnValue);\n    returnValue = 0;\n  }\n  else {\n    FUNC_08008af4(DAT_20000448);\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080098c0": "update_data_080098c0",
                "param_1": "flag",
                "param_2": "data",
                "param_3": "value1",
                "param_4": "value2",
                "puVar1": "dataPtr",
                "uVar2": "returnValue",
                "uVar3": "bitMask",
                "uVar4": "counter"
            },
            "calling": [
                "FUN_080078a0"
            ],
            "called": [
                "FUN_08008af4",
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009980": {
            "entrypoint": "0x08009980",
            "current_name": "initialize_memory_08009980",
            "code": "\nundefined4 * initializeMemory_08009980(undefined4 size,int elementSize,int numElements)\n\n{\n  undefined4 *memoryPtr;\n  uint adjustedSize;\n  undefined4 *newPtr;\n  \n  memoryPtr = (undefined4 *)allocate_and_initialize_memory_08008af8(size,numElements * elementSize);\n  if (memoryPtr == (undefined4 *)0x0) {\n    return (undefined4 *)0x0;\n  }\n  adjustedSize = (memoryPtr[-1] & 0xfffffffc) - 4;\n  if (adjustedSize < 0x25) {\n    newPtr = memoryPtr;\n    if (0x13 < adjustedSize) {\n      *memoryPtr = 0;\n      memoryPtr[1] = 0;\n      if (0x1b < adjustedSize) {\n        memoryPtr[2] = 0;\n        memoryPtr[3] = 0;\n        if (adjustedSize == 0x24) {\n          memoryPtr[4] = 0;\n          memoryPtr[5] = 0;\n          newPtr = memoryPtr + 6;\n        }\n        else {\n          newPtr = memoryPtr + 4;\n        }\n        *newPtr = 0;\n        newPtr[1] = 0;\n        newPtr[2] = 0;\n        return memoryPtr;\n      }\n      newPtr = memoryPtr + 2;\n    }\n    *newPtr = 0;\n    newPtr[1] = 0;\n    newPtr[2] = 0;\n    return memoryPtr;\n  }\n  fill_memory_08005d68(memoryPtr,0);\n  return memoryPtr;\n}\n\n",
            "renaming": {
                "FUN_08009980": "initialize_memory_08009980",
                "param_1": "size",
                "param_2": "elementSize",
                "param_3": "numElements",
                "puVar1": "memoryPtr",
                "uVar2": "adjustedSize",
                "puVar3": "newPtr"
            },
            "calling": [
                "FUN_080090c0"
            ],
            "called": [
                "FUN_08005d68",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a18": {
            "entrypoint": "0x08009a18",
            "current_name": "copy_memory_08009a18",
            "code": "\nvoid copyMemory_08009a18(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  int count;\n  undefined *destEnd;\n  undefined4 *srcEnd;\n  uint remainingSize;\n  uint remainingBytes;\n  \n  if ((source < destination) && (srcPtr = (undefined4 *)((int)source + size), destination < srcPtr)) {\n    destEnd = (undefined *)((int)destination + size);\n    if (size != 0) {\n      do {\n        srcPtr = (undefined4 *)((int)srcPtr + -1);\n        destEnd = destEnd + -1;\n        *destEnd = *(undefined *)srcPtr;\n      } while (source != srcPtr);\n    }\n  }\n  else {\n    remainingBytes = size;\n    if (0xf < size) {\n      if ((((uint)destination | (uint)source) & 3) != 0) goto LAB_08009abc;\n      srcPtr = source + 4;\n      destPtr = destination + 4;\n      do {\n        srcEnd = srcPtr + 4;\n        destPtr[-4] = srcPtr[-4];\n        destPtr[-3] = srcPtr[-3];\n        destPtr[-2] = srcPtr[-2];\n        destPtr[-1] = srcPtr[-1];\n        srcPtr = srcEnd;\n        destPtr = destPtr + 4;\n      } while (srcEnd != (undefined4 *)((int)source + (size - 0x10 & 0xfffffff0) + 0x20));\n      count = (size - 0x10 >> 4) + 1;\n      remainingBytes = size & 0xf;\n      source = source + count * 4;\n      destination = destination + count * 4;\n      if (3 < remainingBytes) {\n        srcPtr = destination + -1;\n        remainingSize = remainingBytes;\n        destPtr = source;\n        do {\n          remainingSize = remainingSize - 4;\n          srcPtr = srcPtr + 1;\n          *srcPtr = *destPtr;\n          destPtr = destPtr + 1;\n        } while (3 < remainingSize);\n        count = (remainingBytes - 4 & 0xfffffffc) + 4;\n        destination = (undefined4 *)((int)destination + count);\n        source = (undefined4 *)((int)source + count);\n        remainingBytes = size & 3;\n      }\n    }\n    size = remainingBytes;\n    if (remainingBytes != 0) {\nLAB_08009abc:\n      destEnd = (undefined *)((int)destination + -1);\n      srcPtr = source;\n      do {\n        destPtr = (undefined4 *)((int)srcPtr + 1);\n        destEnd = destEnd + 1;\n        *destEnd = *(undefined *)srcPtr;\n        srcPtr = destPtr;\n      } while (destPtr != (undefined4 *)(size + (int)source));\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009a18": "copy_memory_08009a18",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "srcPtr",
                "iVar3": "count",
                "puVar4": "destEnd",
                "puVar5": "srcEnd",
                "uVar6": "remainingSize",
                "uVar7": "remainingBytes"
            },
            "calling": [
                "FUN_08009adc",
                "FUN_080097cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009adc": {
            "entrypoint": "0x08009adc",
            "current_name": "allocate_and_initialize_memory_08009adc",
            "code": "\nint * allocate_and_initialize_memory_08009adc(undefined4 *param_ptr,int *data_ptr,uint data_size)\n\n{\n  int *new_data_ptr;\n  int temp_var;\n  int *alloc_ptr;\n  uint temp_var_2;\n  int temp_var_3;\n  uint temp_var_4;\n  int *temp_ptr;\n  uint alloc_size;\n  uint temp_var_5;\n  uint temp_var_6;\n  int temp_var_7;\n  \n  if (data_ptr == (int *)0x0) {\n    alloc_ptr = (int *)allocate_and_initialize_memory_08009adc_08008af8(param_ptr,data_size);\n    return alloc_ptr;\n  }\n  initialize_data_080090a8();\n  temp_var_4 = data_ptr[-1];\n  temp_var_5 = temp_var_4 & 0xfffffffc;\n  alloc_ptr = data_ptr + -2;\n  if (data_size + 0xb < 0x17) {\n    alloc_size = 0x10;\n  }\n  else {\n    alloc_size = data_size + 0xb & 0xfffffff8;\n    if ((int)alloc_size < 0) goto LAB_08009b8e;\n  }\n  if (alloc_size < data_size) {\nLAB_08009b8e:\n    *param_ptr = 0xc;\n    return (int *)0x0;\n  }\n  temp_var_7 = (int)alloc_ptr + temp_var_5;\n  temp_var_6 = temp_var_5;\n  if ((int)temp_var_5 < (int)alloc_size) {\n    if (DAT_20000454 == temp_var_7) {\n      temp_var_7 = (*(uint *)(DAT_20000454 + 4) & 0xfffffffc) + temp_var_5;\n      if ((int)(alloc_size + 0x10) <= temp_var_7) {\n        DAT_20000454 = (int)alloc_ptr + alloc_size;\n        *(uint *)(DAT_20000454 + 4) = temp_var_7 - alloc_size | 1;\n        data_ptr[-1] = alloc_size | data_ptr[-1] & 1U;\n        initialize_data_080090b4(param_ptr);\n        return data_ptr;\n      }\n      if (-1 < (int)(temp_var_4 << 0x1f)) {\n        new_data_ptr = (int *)((int)alloc_ptr - data_ptr[-2]);\n        temp_var_4 = new_data_ptr[1] & 0xfffffffc;\n        if ((int)(alloc_size + 0x10) <= (int)(temp_var_7 + temp_var_4)) {\n          temp_var_3 = new_data_ptr[3];\n          alloc_ptr = new_data_ptr + 2;\n          temp_var = *alloc_ptr;\n          temp_var_5 = temp_var_5 - 4;\n          *(int *)(temp_var + 0xc) = temp_var_3;\n          *(int *)(temp_var_3 + 8) = temp_var;\n          if (temp_var_5 < 0x25) {\n            temp_var = *data_ptr;\n            temp_ptr = alloc_ptr;\n            if (0x13 < temp_var_5) {\n              new_data_ptr[2] = temp_var;\n              new_data_ptr[3] = data_ptr[1];\n              temp_var = data_ptr[2];\n              if (temp_var_5 < 0x1c) {\n                data_ptr = data_ptr + 2;\n                temp_ptr = new_data_ptr + 4;\n              }\n              else {\n                new_data_ptr[4] = temp_var;\n                new_data_ptr[5] = data_ptr[3];\n                temp_var = data_ptr[4];\n                if (temp_var_5 == 0x24) {\n                  new_data_ptr[6] = temp_var;\n                  new_data_ptr[7] = data_ptr[5];\n                  temp_var = data_ptr[6];\n                  data_ptr = data_ptr + 6;\n                  temp_ptr = new_data_ptr + 8;\n                }\n                else {\n                  data_ptr = data_ptr + 4;\n                  temp_ptr = new_data_ptr + 6;\n                }\n              }\n            }\n            *temp_ptr = temp_var;\n            temp_ptr[1] = data_ptr[1];\n            temp_ptr[2] = data_ptr[2];\n          }\n          else {\n            copy_memory_08009a18(alloc_ptr,data_ptr);\n          }\n          DAT_20000454 = (int)new_data_ptr + alloc_size;\n          *(uint *)(DAT_20000454 + 4) = (temp_var_7 + temp_var_4) - alloc_size | 1;\n          new_data_ptr[1] = alloc_size | new_data_ptr[1] & 1U;\n          initialize_data_080090b4(param_ptr);\n          return alloc_ptr;\n        }\nLAB_08009bb0:\n        temp_var_6 = temp_var_5 + temp_var_4;\n        if ((int)alloc_size <= (int)temp_var_6) {\n          temp_var_3 = new_data_ptr[3];\n          temp_ptr = new_data_ptr + 2;\n          temp_var = *temp_ptr;\n          *(int *)(temp_var + 0xc) = temp_var_3;\n          temp_var_7 = (int)new_data_ptr + temp_var_6;\n          *(int *)(temp_var_3 + 8) = temp_var;\n          alloc_ptr = new_data_ptr;\n          if (temp_var_5 - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          copy_memory_08009a18(temp_ptr,data_ptr);\n          data_ptr = temp_ptr;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(temp_var_7 + 4) & 0xfffffffe) + temp_var_7 + 4) << 0x1f) {\n        temp_var_2 = *(uint *)(temp_var_7 + 4) & 0xfffffffc;\n        temp_var_6 = temp_var_5 + temp_var_2;\n        if ((int)temp_var_6 < (int)alloc_size) {\n          if ((int)(temp_var_4 << 0x1f) < 0) goto LAB_08009b36;\n          new_data_ptr = (int *)((int)alloc_ptr - data_ptr[-2]);\n          temp_var_4 = new_data_ptr[1] & 0xfffffffc;\n          temp_var_6 = temp_var_2 + temp_var_4 + temp_var_5;\n          if ((int)temp_var_6 < (int)alloc_size) goto LAB_08009bb0;\n          temp_var = *(int *)(temp_var_7 + 8);\n          temp_var_7 = *(int *)(temp_var_7 + 0xc);\n          *(int *)(temp_var + 0xc) = temp_var_7;\n          *(int *)(temp_var_7 + 8) = temp_var;\n          temp_ptr = new_data_ptr + 2;\n          temp_var = *temp_ptr;\n          temp_var_3 = new_data_ptr[3];\n          *(int *)(temp_var + 0xc) = temp_var_3;\n          temp_var_7 = (int)new_data_ptr + temp_var_6;\n          *(int *)(temp_var_3 + 8) = temp_var;\n          alloc_ptr = new_data_ptr;\n          if (0x24 < temp_var_5 - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          temp_var_5 = temp_var_5 - 4;\n          temp_var = *data_ptr;\n          new_data_ptr = temp_ptr;\n          if (0x13 < temp_var_5) {\n            alloc_ptr[2] = temp_var;\n            alloc_ptr[3] = data_ptr[1];\n            temp_var = data_ptr[2];\n            if (temp_var_5 < 0x1c) {\n              data_ptr = data_ptr + 2;\n              new_data_ptr = alloc_ptr + 4;\n            }\n            else {\n              alloc_ptr[4] = temp_var;\n              alloc_ptr[5] = data_ptr[3];\n              temp_var = data_ptr[4];\n              if (temp_var_5 == 0x24) {\n                alloc_ptr[6] = temp_var;\n                alloc_ptr[7] = data_ptr[5];\n                temp_var = data_ptr[6];\n                data_ptr = data_ptr + 6;\n                new_data_ptr = alloc_ptr + 8;\n              }\n              else {\n                data_ptr = data_ptr + 4;\n                new_data_ptr = alloc_ptr + 6;\n              }\n            }\n          }\n          *new_data_ptr = temp_var;\n          new_data_ptr[1] = data_ptr[1];\n          new_data_ptr[2] = data_ptr[2];\n          data_ptr = temp_ptr;\n        }\n        else {\n          temp_var = *(int *)(temp_var_7 + 8);\n          temp_var_3 = *(int *)(temp_var_7 + 0xc);\n          *(int *)(temp_var + 0xc) = temp_var_3;\n          temp_var_7 = (int)alloc_ptr + temp_var_6;\n          *(int *)(temp_var_3 + 8) = temp_var;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(temp_var_4 << 0x1f)) {\n        new_data_ptr = (int *)((int)alloc_ptr - data_ptr[-2]);\n        temp_var_4 = new_data_ptr[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    new_data_ptr = (int *)allocate_and_initialize_memory_08009adc_08008af8(param_ptr,data_size);\n    if (new_data_ptr != (int *)0x0) {\n      if ((int *)((data_ptr[-1] & 0xfffffffeU) + (int)alloc_ptr) == new_data_ptr + -2) {\n        temp_var_6 = temp_var_5 + (new_data_ptr[-1] & 0xfffffffcU);\n        temp_var_7 = (int)alloc_ptr + temp_var_6;\n        goto LAB_08009c00;\n      }\n      temp_var_5 = temp_var_5 - 4;\n      if (temp_var_5 < 0x25) {\n        temp_var_7 = *data_ptr;\n        alloc_ptr = data_ptr;\n        temp_ptr = new_data_ptr;\n        if (0x13 < temp_var_5) {\n          *new_data_ptr = temp_var_7;\n          new_data_ptr[1] = data_ptr[1];\n          if (temp_var_5 < 0x1c) {\n            temp_var_7 = data_ptr[2];\n            alloc_ptr = data_ptr + 2;\n            temp_ptr = new_data_ptr + 2;\n          }\n          else {\n            new_data_ptr[2] = data_ptr[2];\n            new_data_ptr[3] = data_ptr[3];\n            if (temp_var_5 == 0x24) {\n              new_data_ptr[4] = data_ptr[4];\n              new_data_ptr[5] = data_ptr[5];\n              temp_var_7 = data_ptr[6];\n              alloc_ptr = data_ptr + 6;\n              temp_ptr = new_data_ptr + 6;\n            }\n            else {\n              temp_var_7 = data_ptr[4];\n              alloc_ptr = data_ptr + 4;\n              temp_ptr = new_data_ptr + 4;\n            }\n          }\n        }\n        *temp_ptr = temp_var_7;\n        temp_ptr[1] = alloc_ptr[1];\n        temp_ptr[2] = alloc_ptr[2];\n      }\n      else {\n        copy_memory_08009a18(new_data_ptr,data_ptr);\n      }\n      initialize_memory_080088ec(param_ptr,data_ptr);\n    }\n    initialize_data_080090b4(param_ptr);\n    data_ptr = new_data_ptr;\n  }\n  else {\nLAB_08009c00:\n    if (temp_var_6 - alloc_size < 0x10) {\n      alloc_ptr[1] = alloc_ptr[1] & 1U | temp_var_6;\n      *(uint *)(temp_var_7 + 4) = *(uint *)(temp_var_7 + 4) | 1;\n    }\n    else {\n      alloc_ptr[1] = alloc_ptr[1] & 1U | alloc_size;\n      *(uint *)((int)alloc_ptr + alloc_size + 4) = temp_var_6 - alloc_size | 1;\n      *(uint *)(temp_var_7 + 4) = *(uint *)(temp_var_7 + 4) | 1;\n      initialize_memory_080088ec(param_ptr,(int)alloc_ptr + alloc_size + 8);\n    }\n    initialize_data_080090b4(param_ptr);\n  }\n  return data_ptr;\n}\n\n",
            "renaming": {
                "FUN_08009adc": "allocate_and_initialize_memory_08009adc",
                "param_1": "param_ptr",
                "param_2": "data_ptr",
                "param_3": "data_size",
                "piVar1": "new_data_ptr",
                "iVar2": "temp_var",
                "piVar3": "alloc_ptr",
                "uVar4": "temp_var_2",
                "iVar5": "temp_var_3",
                "uVar6": "temp_var_4",
                "piVar7": "temp_ptr",
                "uVar8": "alloc_size",
                "uVar9": "temp_var_5",
                "uVar10": "temp_var_6",
                "iVar11": "temp_var_7"
            },
            "calling": [
                "FUN_080097cc"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_08009a18",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009e68": {
            "entrypoint": "0x08009e68",
            "current_name": "FUNC_08009e68",
            "code": "\nvoid FUNC_08009e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e68": "FUNC_08009e68"
            },
            "calling": [
                "FUN_08005d20",
                "FUN_08000134",
                "FUN_08000110"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009e74": {
            "entrypoint": "0x08009e74",
            "current_name": "FUNC_08009e74",
            "code": "\nvoid FUNC_08009e74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e74": "FUNC_08009e74"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 153444,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000158",
            "FUN_0800015c",
            "FUN_080003d4",
            "FUN_080003f4",
            "FUN_08000418",
            "FUN_080006a4",
            "FUN_0800088a",
            "FUN_080008fc",
            "FUN_080009fc",
            "FUN_08000aa4",
            "FUN_08000aa8",
            "FUN_08000c08",
            "FUN_08000c10",
            "FUN_08000cb8",
            "FUN_08000e20",
            "FUN_08000f68",
            "FUN_08001044",
            "FUN_08001084",
            "FUN_08001170",
            "FUN_0800119c",
            "FUN_0800121c",
            "FUN_0800157c",
            "FUN_080015a0",
            "FUN_080015b4",
            "FUN_080015fc",
            "FUN_08001618",
            "FUN_0800166c",
            "FUN_0800177c",
            "FUN_080017c4",
            "FUN_08001a80",
            "FUN_08002d3c",
            "FUN_08003440",
            "FUN_08003504",
            "FUN_08003568",
            "FUN_0800360c",
            "FUN_08003c94",
            "FUN_08003d60",
            "FUN_08003e38",
            "FUN_08003f18",
            "FUN_08003ff8",
            "FUN_080040a0",
            "FUN_08004104",
            "FUN_0800416a",
            "FUN_080041a8",
            "FUN_080041ea",
            "FUN_0800422e",
            "FUN_080042de",
            "FUN_08004e6c",
            "FUN_08005674",
            "FUN_08005780",
            "FUN_08005d14",
            "FUN_08005d20",
            "FUN_08005d68",
            "FUN_08005dfc",
            "FUN_08005e40",
            "FUN_08008ad4",
            "FUN_0800901c",
            "FUN_080090a8",
            "FUN_080090b4",
            "FUN_0800910c",
            "FUN_080091a4",
            "FUN_080091e4",
            "FUN_080094f8",
            "FUN_08009768",
            "FUN_080098c0",
            "FUN_08009a18"
        ],
        [
            "FUN_080004c8",
            "FUN_0800071c",
            "FUN_08000988",
            "FUN_08000fd0",
            "FUN_080011ec",
            "FUN_080016d0",
            "FUN_08001714",
            "FUN_0800172a",
            "FUN_08002ad8",
            "FUN_08002bb4",
            "FUN_08002c2e",
            "FUN_08002ca8",
            "FUN_08002d98",
            "FUN_08003518",
            "FUN_08003540",
            "FUN_080035a4",
            "FUN_08003640",
            "FUN_080036a8",
            "FUN_08003908",
            "FUN_08003a94",
            "FUN_08004436",
            "FUN_08004ae0",
            "FUN_08004e74",
            "FUN_08004f2c",
            "FUN_08004f60",
            "FUN_080055f4",
            "FUN_08005680",
            "FUN_08005728",
            "FUN_080078c0"
        ],
        [
            "FUN_08000978",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_080009c0",
            "FUN_08000fc8",
            "FUN_08000ff4",
            "FUN_08001762",
            "FUN_08001ab0",
            "FUN_08002640",
            "FUN_080027f4",
            "FUN_080046ec",
            "FUN_08004f3c",
            "FUN_080053b0",
            "FUN_08005500",
            "FUN_080096e0",
            "FUN_08009744"
        ],
        [
            "FUN_080009d4",
            "FUN_080009e8",
            "FUN_08001030",
            "FUN_0800151c",
            "FUN_08001ccc",
            "FUN_08001f6c",
            "FUN_0800438a",
            "FUN_08005348",
            "FUN_0800884c"
        ],
        [
            "FUN_080014f0",
            "FUN_08003260",
            "FUN_08004ea4",
            "FUN_08004ee8",
            "FUN_08005598",
            "FUN_080059f0",
            "FUN_080088ec"
        ],
        [
            "FUN_080052a0",
            "thunk_FUN_08005838",
            "FUN_08005838",
            "FUN_08008af8"
        ],
        [
            "FUN_08004bd8",
            "FUN_08004d78",
            "FUN_08009980",
            "FUN_08009adc"
        ],
        [
            "FUN_080049cc",
            "FUN_08004f78",
            "FUN_080090c0",
            "FUN_080097cc"
        ],
        [
            "FUN_080017b4",
            "FUN_080036f8",
            "FUN_0800491c",
            "FUN_08009120",
            "FUN_08009244",
            "FUN_08009258",
            "FUN_08009444",
            "FUN_08009530",
            "FUN_08009630"
        ],
        [
            "FUN_08005224",
            "FUN_08005704",
            "FUN_08005714",
            "FUN_080093a4"
        ],
        [
            "FUN_080079e8"
        ]
    ],
    "locked_functions": []
}