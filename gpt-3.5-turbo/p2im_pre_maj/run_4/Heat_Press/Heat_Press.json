{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "check_and_set_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 checkAndSetFlag_000800f4(undefined4 input)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "check_and_set_flag_000800f4",
                "param_1": "input"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_data_00080164",
            "code": "\nvoid initializeData_00080164(int **data)\n\n{\n  int result;\n  \n  *data = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte *)((int)data + 6)) {\n    update_control_and_values_00081210(*(byte *)((int)data + 6),1);\n    update_control_and_values_00081318(*(undefined *)((int)data + 6),0);\n  }\n  do {\n    result = (**(code **)(**data + 0xc))();\n  } while (-1 < result);\n  *(undefined *)((int)data + 0x49) = 0;\n  *(undefined *)((int)data + 0x4a) = 0;\n  *(undefined2 *)(data + 0x15) = 0;\n  *(undefined2 *)((int)data + 0x52) = 0;\n  *(undefined2 *)(data + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_data_00080164",
                "param_1": "data",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000804a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801b0": {
            "entrypoint": "0x000801b0",
            "current_name": "process_params_000801b0",
            "code": "\nint processParams_000801b0(int **params)\n\n{\n  bool exceededThreshold;\n  undefined result;\n  char charVal;\n  int returnValue;\n  byte counter;\n  \n  if (1 < *(byte *)((int)params + 6)) {\n    update_control_and_values_00081318(*(byte *)((int)params + 6),0);\n  }\n  exceededThreshold = false;\n  *(undefined *)((int)params + 0x49) = 0;\n  if (*(byte *)((int)params + 5) < 4) {\n    while (returnValue = (**(code **)(**params + 8))(), returnValue != 0) {\n      counter = *(byte *)((int)params + 0x49);\n      result = (**(code **)(**params + 0xc))();\n      charVal = *(char *)((int)params + 0x49);\n      *(undefined *)((int)params + counter + 9) = result;\n      counter = charVal + 1;\n      *(byte *)((int)params + 0x49) = counter;\n      if (0x3f < counter) {\n        exceededThreshold = true;\n      }\n    }\n  }\n  *(short *)(params + 0x14) = *(short *)(params + 0x14) + 1;\n  if (exceededThreshold) {\n    charVal = -3;\n    *(short *)(params + 0x15) = *(short *)(params + 0x15) + 1;\n  }\n  else {\n    charVal = *(char *)((int)params + 0x49);\n  }\n  return (int)charVal;\n}\n\n",
            "renaming": {
                "FUN_000801b0": "process_params_000801b0",
                "param_1": "params",
                "bVar1": "exceededThreshold",
                "uVar2": "result",
                "cVar3": "charVal",
                "iVar4": "returnValue",
                "bVar5": "counter"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008021c": {
            "entrypoint": "0x0008021c",
            "current_name": "calculate_checksum_0008021c",
            "code": "\nuint calculateChecksum_0008021c(int dataAddress,uint dataLength)\n\n{\n  int currentAddress;\n  uint xorResult;\n  char loopCounter;\n  uint bitCheck;\n  \n  xorResult = 0xffff;\n  for (currentAddress = dataAddress; (currentAddress - dataAddress & 0xffU) < dataLength; currentAddress = currentAddress + 1) {\n    xorResult = xorResult ^ *(byte *)(currentAddress + 9);\n    loopCounter = '\\b';\n    do {\n      bitCheck = xorResult & 1;\n      xorResult = xorResult >> 1;\n      if (bitCheck != 0) {\n        xorResult = xorResult ^ 0xa001;\n      }\n      loopCounter = loopCounter + -1;\n    } while (loopCounter != '\\0');\n  }\n  return (xorResult & 0xff) << 8 | xorResult >> 8;\n}\n\n",
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "dataAddress",
                "param_2": "dataLength",
                "iVar1": "currentAddress",
                "uVar2": "xorResult",
                "cVar3": "loopCounter",
                "uVar4": "bitCheck"
            },
            "calling": [
                "FUN_00080258"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080258": {
            "entrypoint": "0x00080258",
            "current_name": "update_checksum_00080258",
            "code": "\nvoid updateChecksum_00080258(int **param,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  byte byteValue;\n  undefined2 checksum;\n  int returnValue;\n  uint byteValueAsInt;\n  \n  byteValue = *(byte *)((int)param + 0x49);\n  byteValueAsInt = (uint)byteValue;\n  checksum = calculate_checksum_0008021c(param,byteValueAsInt,param_3,param_4,param_4);\n  *(char *)((int)param + byteValueAsInt + 9) = (char)((ushort)checksum >> 8);\n  *(char *)((int)param + (byteValueAsInt + 1 & 0xff) + 9) = (char)checksum;\n  *(byte *)((int)param + 0x49) = byteValue + 2;\n  if (1 < *(byte *)((int)param + 6)) {\n    update_control_and_values_00081318(*(byte *)((int)param + 6),1);\n  }\n  if (*(byte *)((int)param + 5) < 4) {\n    (**(code **)(**param + 4))(*param,(int)param + 9,*(undefined *)((int)param + 0x49));\n  }\n  if (1 < *(byte *)((int)param + 6)) {\n    update_control_and_values_00081318(*(byte *)((int)param + 6),0);\n  }\n  if (*(byte *)((int)param + 5) < 4) {\n    do {\n      returnValue = (**(code **)(**param + 0xc))();\n    } while (-1 < returnValue);\n  }\n  *(undefined *)((int)param + 0x49) = 0;\n  returnValue = get_global_variable_thunk_00081714();\n  param[0x17] = (int *)(returnValue + (uint)*(ushort *)((int)param + 0x56));\n  *(short *)((int)param + 0x52) = *(short *)((int)param + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080258": "update_checksum_00080258",
                "param_1": "param",
                "bVar1": "byteValue",
                "uVar2": "checksum",
                "iVar3": "returnValue",
                "uVar4": "byteValueAsInt"
            },
            "calling": [
                "FUN_000802da"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_0008021c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000802da": {
            "entrypoint": "0x000802da",
            "current_name": "validate_and_set_params_000802da",
            "code": "\nint validateAndSetParams_000802da(int data,uint param1,uint param2,ushort *buffer)\n\n{\n  char result;\n  byte byteVar;\n  undefined undefinedVar;\n  ushort ushortVar;\n  uint uintVar;\n  ushort *bufferPtr;\n  undefined byteVar1;\n  undefined byteVar2;\n  ushort ushortVar1;\n  \n  byteVar1 = (undefined)param1;\n  byteVar2 = (undefined)(param1 >> 8);\n  ushortVar1 = (ushort)param2;\n  uintVar = param2 & 0xffff;\n  if (*(char *)(data + 4) != '\\0') {\n    result = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(data + 7) != '\\0') {\n    result = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((param1 & 0xff) - 1 & 0xff)) {\n    result = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(data + 9) = byteVar1;\n  *(undefined *)(data + 10) = byteVar2;\n  *(ushort **)(data + 0x4c) = buffer;\n  *(char *)(data + 0xb) = (char)(param1 >> 0x18);\n  *(char *)(data + 0xc) = (char)(param1 >> 0x10);\n  undefinedVar = (undefined)(param2 >> 8);\n  switch(byteVar2) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(data + 0xd) = undefinedVar;\n    break;\n  case 5:\n    ushortVar = *buffer;\n    if (ushortVar != 0) {\n      ushortVar = 1;\n    }\n    *(char *)(data + 0xd) = -(char)ushortVar;\n    uintVar = 0;\n    break;\n  case 6:\n    *(char *)(data + 0xd) = (char)(*buffer >> 8);\n    uintVar = (uint)*buffer;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    byteVar = (byte)(ushortVar1 >> 3) & 0xfe;\n    if ((param2 & 0xf) != 0) {\n      byteVar = byteVar + 1;\n    }\n    *(char *)(data + 0xe) = (char)param2;\n    *(undefined *)(data + 0xd) = undefinedVar;\n    *(byte *)(data + 0xf) = byteVar;\n    undefinedVar = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(data + 0xd) = undefinedVar;\n    *(char *)(data + 0xe) = (char)param2;\n    buffer = buffer + -1;\n    *(char *)(data + 0xf) = (char)uintVar * '\\x02';\n    *(undefined *)(data + 0x49) = 7;\n    bufferPtr = buffer + uintVar;\n    while (buffer != bufferPtr) {\n      byteVar = *(byte *)(data + 0x49);\n      *(char *)(data + (uint)byteVar + 9) = (char)(buffer[1] >> 8);\n      uintVar = byteVar + 1 & 0xff;\n      *(char *)(data + 0x49) = (char)uintVar;\n      buffer = buffer + 1;\n      *(char *)(uintVar + data + 9) = (char)*buffer;\n      *(byte *)(data + 0x49) = byteVar + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(data + 0xe) = (char)uintVar;\n  undefinedVar = 6;\nLAB_0008034a:\n  *(undefined *)(data + 0x49) = undefinedVar;\nswitchD_0008031e_caseD_7:\n  update_checksum_00080258(data);\n  *(undefined *)(data + 7) = 1;\n  result = '\\0';\nLAB_000803cc:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_000802da": "validate_and_set_params_000802da",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "buffer",
                "cVar1": "result",
                "bVar2": "byteVar",
                "uVar3": "undefinedVar",
                "uVar4": "ushortVar",
                "uVar5": "uintVar",
                "puVar6": "bufferPtr",
                "local_1c": "byteVar1",
                "local_1b": "byteVar2",
                "local_18": "ushortVar1"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00080258"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803d4": {
            "entrypoint": "0x000803d4",
            "current_name": "check_value_and_update_counter_000803d4",
            "code": "\nundefined4 checkValueAndUpdateCounter_000803d4(int inputValue)\n\n{\n  int index;\n  \n  if ((int)((uint)*(byte *)(inputValue + 10) << 0x18) < 0) {\n    *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if ((&DAT_00084d10)[index] == *(byte *)(inputValue + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000803d4": "check_value_and_update_counter_000803d4",
                "param_1": "inputValue",
                "iVar1": "index"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080410": {
            "entrypoint": "0x00080410",
            "current_name": "process_00080410",
            "code": "\nvoid process_00080410(int input,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 combinedValue;\n  int modifiedIndex;\n  byte counter;\n  uint convertedCounter;\n  int arrayBase;\n  \n  counter = 0;\n  while( true ) {\n    convertedCounter = (uint)counter;\n    counter = counter + 1;\n    if (*(byte *)(input + 0xb) >> 1 <= convertedCounter) break;\n    modifiedIndex = (convertedCounter * 2 + 3 & 0xff) + input;\n    arrayBase = *(int *)(input + 0x4c);\n    combinedValue = combine_parameters_000815f8(*(undefined *)(modifiedIndex + 9),*(undefined *)(modifiedIndex + 10),modifiedIndex,\n                         *(byte *)(input + 0xb),param4);\n    *(undefined2 *)(arrayBase + convertedCounter * 2) = combinedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080410": "process_00080410",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "combinedValue",
                "iVar2": "modifiedIndex",
                "bVar3": "counter",
                "uVar4": "convertedCounter",
                "iVar5": "arrayBase"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_000815f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008043e": {
            "entrypoint": "0x0008043e",
            "current_name": "process_params_and_update_counter_0008043e",
            "code": "\nint process_params_and_update_counter_0008043e(int **ptr_param_array)\n\n{\n  char result;\n  uint num;\n  int *ptr_global_variable;\n  int value_check_result;\n  uint threshold;\n  \n  if (*(byte *)((int)ptr_param_array + 5) < 4) {\n    num = (**(code **)(**ptr_param_array + 8))();\n    threshold = num & 0xff;\n  }\n  ptr_global_variable = (int *)get_global_variable();\n  if (ptr_param_array[0x17] < ptr_global_variable) {\n    *(undefined *)(ptr_param_array + 2) = 0xff;\n    *(undefined *)((int)ptr_param_array + 7) = 0;\n    *(short *)(ptr_param_array + 0x15) = *(short *)(ptr_param_array + 0x15) + 1;\n  }\n  else if (7 < threshold) {\n    process_params(ptr_param_array);\n    value_check_result = check_value_and_update_counter(ptr_param_array);\n    if (value_check_result == 0) {\n      if (*(byte *)((int)ptr_param_array + 10) - 3 < 2) {\n        process(ptr_param_array);\n      }\n      *(undefined *)((int)ptr_param_array + 7) = 0;\n      result = *(char *)((int)ptr_param_array + 0x49);\n    }\n    else {\n      *(undefined *)((int)ptr_param_array + 7) = 0;\n      result = (char)value_check_result;\n    }\n    goto LAB_000804a2;\n  }\n  result = '\\0';\nLAB_000804a2:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_0008043e": "process_params_and_update_counter_0008043e",
                "param_1": "ptr_param_array",
                "cVar1": "result",
                "uVar2": "num",
                "piVar3": "ptr_global_variable",
                "iVar4": "value_check_result",
                "unaff_r6": "threshold",
                "get_global_variable_thunk_00081714": "get_global_variable",
                "process_params_000801b0": "process_params",
                "check_value_and_update_counter_000803d4": "check_value_and_update_counter",
                "process_00080410": "process"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "thunk_FUN_00081714",
                "FUN_000801b0",
                "FUN_00080410",
                "FUN_000803d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000804a8": {
            "entrypoint": "0x000804a8",
            "current_name": "initialize_system_000804a8",
            "code": "\nundefined8 initialize_system_000804a8(void)\n\n{\n  int iVar1;\n  \n  update_control_and_values(1,0);\n  update_control_and_values(6,1);\n  update_control_and_values(0,1);\n  update_control_and_values(1,1);\n  update_other_control_and_values(0,0);\n  update_other_control_and_values(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  initialize_data(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = get_global_variable_thunk();\n  iVar1 = get_global_variable_thunk();\n  DAT_200709e0 = iVar1 + 1000;\n  iVar1 = get_global_variable_thunk();\n  DAT_20070a48 = iVar1 + 1000;\n  iVar1 = get_global_variable_thunk();\n  DAT_20070934 = iVar1 + 1000;\n  iVar1 = get_global_variable_thunk();\n  DAT_200708c0 = iVar1 + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000804a8": "initialize_system_000804a8",
                "update_control_and_values_00081210": "update_control_and_values",
                "update_control_and_values_00081318": "update_other_control_and_values",
                "initialize_data_00080164": "initialize_data",
                "get_global_variable_thunk_00081714": "get_global_variable_thunk"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_00080164",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805d0": {
            "entrypoint": "0x000805d0",
            "current_name": "process_data_000805d0",
            "code": "\n\n\nvoid processData_000805d0(void)\n\n{\n  uint globalVar1;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  undefined4 tempVar4;\n  int counter;\n  uint *ptrVar1;\n  undefined4 *ptrVar2;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    globalVar1 = get_global_variable_thunk_00081714();\n    if (DAT_200708c8 < globalVar1) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    process_params_and_update_counter_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_and_set_params_000802da(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_variable_thunk_00081714();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = FUNC_00081894(DAT_200708d8);\n      DAT_2007094c = calculate_value_0008189c(DAT_200708da / 10);\n      DAT_200709c4 = FUNC_00081894(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    process_params_and_update_counter_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_variable_thunk_00081714();\n    }\n    break;\n  case '\\x03':\n    process_params_and_update_counter_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_and_set_params_000802da(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_variable_thunk_00081714();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    process_params_and_update_counter_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      ptrVar2 = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      validate_and_set_params_000802da(&DAT_200709e4,*ptrVar2,ptrVar2[1],ptrVar2[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    process_params_and_update_counter_0008043e(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      ptrVar2 = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    process_params_and_update_counter_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_and_set_params_000802da(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = get_global_variable_thunk_00081714();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    ptrVar1 = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *ptrVar1 = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (globalVar1 = get_global_variable_thunk_00081714(), DAT_200708c0 < globalVar1))\n    {\n      DAT_20070960 = DAT_20070960 + 1;\n      counter = get_global_variable_thunk_00081714();\n      DAT_200708c0 = counter + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      globalVar1 = get_global_variable_thunk_00081714();\n      if (DAT_200708c0 < globalVar1) {\n        DAT_2007090c = DAT_2007090c + 1;\n        counter = get_global_variable_thunk_00081714();\n        DAT_200708c0 = counter + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        ptrVar1 = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      globalVar1 = get_global_variable_thunk_00081714();\n      if (DAT_200708c0 < globalVar1) {\n        DAT_2007090c = DAT_2007090c + 1;\n        counter = get_global_variable_thunk_00081714();\n        DAT_200708c0 = counter + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  globalVar1 = get_global_variable_thunk_00081714();\n  if (DAT_200709e0 < globalVar1) {\n    tempVar1 = calculate_value_0008189c(DAT_20070940);\n    tempVar2 = calculate_float_00081730(tempVar1,DAT_200709c8);\n    tempVar1 = DAT_200708c4;\n    DAT_20070930 = tempVar2;\n    tempVar3 = perform_calculation_00081734(tempVar2,DAT_200708c4);\n    tempVar3 = calculate_float_00081944(tempVar3,DAT_2007094c);\n    tempVar3 = perform_calculation_00081734(tempVar3,DAT_20070914);\n    DAT_2007094c = tempVar3;\n    tempVar1 = calculate_float_00081730(tempVar2,tempVar1);\n    tempVar1 = calculate_float_00081944(tempVar1,DAT_200709c4);\n    tempVar1 = calculate_float_00081730(tempVar1,DAT_2007096c);\n    DAT_200709c4 = tempVar1;\n    tempVar4 = calculate_float_00081944(tempVar2,DAT_20070a4c);\n    tempVar4 = perform_calculation_00081734(tempVar4,tempVar3);\n    perform_calculation_00081734(tempVar4,tempVar1);\n    DAT_20070910 = decode_unsigned_integer_00081cd0();\n    DAT_2007091c = calculate_value_0008189c();\n    DAT_2007092c = 0;\n    DAT_200708c4 = tempVar2;\n    DAT_20070914 = tempVar3;\n    DAT_2007096c = tempVar1;\n    counter = get_global_variable_thunk_00081714();\n    DAT_200709e0 = counter + DAT_20070970;\n  }\n  tempVar1 = calculate_value_0008189c(DAT_20070970);\n  counter = check_concatenation_result_00081ca8(DAT_2007091c,tempVar1);\n  if (counter != 0) {\n    DAT_2007091c = tempVar1;\n  }\n  counter = check_conditions_and_return_00081c94(DAT_2007091c,0);\n  if (counter != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = check_value_00081d1c(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805d0": "process_data_000805d0",
                "uVar1": "globalVar1",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "tempVar3",
                "uVar5": "tempVar4",
                "iVar6": "counter",
                "puVar7": "ptrVar1",
                "puVar8": "ptrVar2"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081734",
                "thunk_FUN_00081714",
                "FUN_00081944",
                "FUN_00081d1c",
                "FUN_00081894",
                "FUN_00081730",
                "FUN_0008189c",
                "FUN_000802da",
                "FUN_00081cd0",
                "FUN_00081c94",
                "FUN_00081ca8",
                "FUN_0008043e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a68": {
            "entrypoint": "0x00080a68",
            "current_name": "initialize_and_execute_00080a68",
            "code": "\nvoid initializeAndExecute_00080a68(void)\n\n{\n  initialize_and_execute_00081682(&DAT_20070954,\"\");\n  updateRelocationEntry(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a68": "initialize_and_execute_00080a68",
                "update_relocation_entry_00081d5c": "updateRelocationEntry"
            },
            "calling": [],
            "called": [
                "FUN_00081d5c",
                "FUN_00081682"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "FUNC_00080aa8",
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ab8": {
            "entrypoint": "0x00080ab8",
            "current_name": "FUNC_00080ab8",
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aba": {
            "entrypoint": "0x00080aba",
            "current_name": "FUNC_00080aba",
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080abc": {
            "entrypoint": "0x00080abc",
            "current_name": "FUNC_00080abc",
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ae4": {
            "entrypoint": "0x00080ae4",
            "current_name": "initialize_and_update_values_00080ae4",
            "code": "\n\n\nvoid initialize_and_update_values_00080ae4(void)\n\n{\n  int loop_counter;\n  int next_counter;\n  \n  initialize_memory_00080e9c();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  execute_function_chain_00081d7c();\n  loop_counter = 0;\n  do {\n    next_counter = loop_counter + 1;\n    update_control_and_values_00081318(loop_counter,0);\n    loop_counter = next_counter;\n  } while (next_counter != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  update_control_and_values_00080da0(0x400e0e00,1,0x300,0);\n  update_control_and_values_00081318(0,1);\n  update_control_and_values_00080da0(0x400e0e00,1,0xc00,0);\n  update_control_and_values_00080da0(0x400e0e00,1,0x3000,0);\n  update_control_and_values_00080da0(0x400e1400,2,0x30,0);\n  update_control_and_values_00080da0(0x400e1000,1,0xc00,0);\n  update_control_and_values_00080da0(0x400e0e00,1,3,0);\n  update_control_and_values_00080da0(0x400e1000,1,0xc000,0);\n  check_bit_and_update_00080e18(0x25);\n  calculate_interval_00080f9c(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  update_param_values_00081042(0x400c0000,0,0x300000,1);\n  update_flags_00081034(0x400c0000,0,0);\n  set_pointer_value_0008106e(0x400c0000,0xffffffff);\n  initialize_value_to_ffff_00081066(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ae4": "initialize_and_update_values_00080ae4",
                "iVar1": "loop_counter",
                "iVar2": "next_counter"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00080f9c",
                "FUN_00081034",
                "FUN_0008106e",
                "FUN_00080e18",
                "FUN_00081066",
                "FUN_00081042",
                "FUN_00080e9c",
                "FUN_00080da0",
                "FUN_00081d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "entrypoint": "0x00080c0c",
            "current_name": "initialize_memory_and_data_00080c0c",
            "code": "\nvoid initialize_memory_and_data_00080c0c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  initialize_memory_000813a8(&DAT_20070b84);\n  initialize_memory_000813a8(&DAT_20070ad8);\n  initialize_params_000814e4(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,param3);\n  initialize_memory_000813a8(&DAT_20070de4);\n  initialize_memory_000813a8(&DAT_20070e6c);\n  initialize_memory_000813a8(&DAT_20070ef4);\n  initialize_memory_000813a8(&DAT_20070a50);\n  initialize_memory_000813a8(&DAT_20070c84);\n  initialize_memory_000813a8(&DAT_20070d0c);\n  initialize_data_000815d4(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  initialize_data_000815d4(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  initialize_data_000815d4(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080c0c": "initialize_memory_and_data_00080c0c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [],
            "called": [
                "FUN_000815d4",
                "FUN_000814e4",
                "FUN_000813a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "entrypoint": "0x00080ce0",
            "current_name": "check_and_call_difference_calculations_00080ce0",
            "code": "\nvoid checkAndCallDifferenceCalculations_00080ce0(void)\n\n{\n  int result;\n  \n  result = calculateDifference(&DAT_20070b60);\n  if (result != 0) {\n    FUNC_00080aa8();\n  }\n  result = calculateDifference(&DAT_20070c0c);\n  if (result != 0) {\n    FUNC_00080ab8();\n  }\n  result = calculateDifference(&DAT_20070c34);\n  if (result != 0) {\n    FUNC_00080aba();\n  }\n  result = calculateDifference(&DAT_20070c5c);\n  if (result != 0) {\n    FUNC_00080abc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ce0": "check_and_call_difference_calculations_00080ce0",
                "iVar1": "result",
                "calculate_difference_000813e4": "calculateDifference"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080aba",
                "FUN_00080ab8",
                "FUN_00080aa8",
                "FUN_000813e4",
                "FUN_00080abc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "entrypoint": "0x00080d2e",
            "current_name": "update_control_00080d2e",
            "code": "\nvoid updateControl_00080d2e(int baseAddress,undefined4 operation,uint value)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(baseAddress + 0x44) = value;\n  switch(operation) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~value;\n    break;\n  case 2:\n    updatedValue = *(uint *)(baseAddress + 0x70) | value;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(baseAddress + 0x70) = updatedValue;\nswitchD_00080d34_caseD_6:\n  *(uint *)(baseAddress + 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d2e": "update_control_00080d2e",
                "param_1": "baseAddress",
                "param_2": "operation",
                "param_3": "value",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d54": {
            "entrypoint": "0x00080d54",
            "current_name": "set_values_based_on_flags_00080d54",
            "code": "\nvoid setValuesBasedOnFlags_00080d54(undefined4 *outputArray,undefined4 value,uint flags)\n\n{\n  bool isFlagSet;\n  \n  isFlagSet = (int)(flags << 0x1f) < 0;\n  outputArray[0x11] = value;\n  if (isFlagSet) {\n    outputArray[0x19] = value;\n  }\n  if (!isFlagSet) {\n    outputArray[0x18] = value;\n  }\n  isFlagSet = (flags & 10) != 0;\n  if (isFlagSet) {\n    outputArray[8] = value;\n  }\n  if (!isFlagSet) {\n    outputArray[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    outputArray[0x20] = value;\n  }\n  outputArray[5] = value;\n  *outputArray = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d54": "set_values_based_on_flags_00080d54",
                "param_1": "outputArray",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "isFlagSet"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "entrypoint": "0x00080d7a",
            "current_name": "update_param_values_00080d7a",
            "code": "\nvoid updateParamValues_00080d7a(undefined4 *paramArray,undefined4 newValue,int value1,int value2,int value3)\n\n{\n  paramArray[0x11] = newValue;\n  if (value3 == 0) {\n    paramArray[0x18] = newValue;\n  }\n  else {\n    paramArray[0x19] = newValue;\n  }\n  if (value2 == 0) {\n    paramArray[0x15] = newValue;\n  }\n  else {\n    paramArray[0x14] = newValue;\n  }\n  if (value1 == 0) {\n    paramArray[0xd] = newValue;\n  }\n  else {\n    paramArray[0xc] = newValue;\n  }\n  paramArray[4] = newValue;\n  *paramArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d7a": "update_param_values_00080d7a",
                "param_1": "paramArray",
                "param_2": "newValue",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "value3"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080da0": {
            "entrypoint": "0x00080da0",
            "current_name": "update_control_and_values_00080da0",
            "code": "\nundefined4 updateControlAndValues_00080da0(int deviceAddress,int controlType,undefined4 newValue,uint flags)\n\n{\n  bool isNegative;\n  \n  switch(controlType) {\n  case 1:\n  case 2:\n    update_control_00080d2e(deviceAddress,controlType,newValue);\n    isNegative = (int)(flags << 0x1f) < 0;\n    *(undefined4 *)(deviceAddress + 0x44) = newValue;\n    if (isNegative) {\n      *(undefined4 *)(deviceAddress + 100) = newValue;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(deviceAddress + 0x60) = newValue;\n    }\n    break;\n  case 3:\n    set_values_based_on_flags_00080d54(deviceAddress,newValue,flags,0x80d55,deviceAddress);\n    break;\n  case 4:\n  case 5:\n    update_param_values_00080d7a(deviceAddress,newValue,controlType == 5,(flags << 0x1d) >> 0x1f,flags & 1,controlType,newValue)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080da0": "update_control_and_values_00080da0",
                "param_1": "deviceAddress",
                "param_2": "controlType",
                "param_3": "newValue",
                "param_4": "flags",
                "bVar1": "isNegative"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210"
            ],
            "called": [
                "FUN_00080d54",
                "FUN_00080d7a",
                "FUN_00080d2e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e04": {
            "entrypoint": "0x00080e04",
            "current_name": "check_bitwise_operations_00080e04",
            "code": "\nuint check_bitwise_operations_00080e04(int data_ptr,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(data_ptr + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(data_ptr + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080e04": "check_bitwise_operations_00080e04",
                "param_1": "data_ptr",
                "param_2": "mask",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081318"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e18": {
            "entrypoint": "0x00080e18",
            "current_name": "check_bit_and_update_00080e18",
            "code": "\n\n\nundefined4 check_bit_and_update_00080e18(uint input_value)\n\n{\n  uint bit_mask;\n  \n  if (input_value < 0x2d) {\n    if (input_value < 0x20) {\n      bit_mask = 1 << (input_value & 0xff);\n      if ((bit_mask & _DAT_400e0618) != bit_mask) {\n        _DAT_400e0610 = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (input_value - 0x20 & 0xff);\n      if ((bit_mask & _DAT_400e0708) != bit_mask) {\n        _DAT_400e0700 = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e18": "check_bit_and_update_00080e18",
                "param_1": "input_value",
                "uVar1": "bit_mask"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00081508",
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "entrypoint": "0x00080e9c",
            "current_name": "initialize_memory_00080e9c",
            "code": "\n\n\nvoid initializeMemory_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  elfRelocationArray[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e9c": "initialize_memory_00080e9c",
                "Elf32_Rel_ARRAY_20070000": "elfRelocationArray"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080f24",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_2007089c\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_0008588c + iVar1);\n  }\n  for (puVar2 = &DAT_2007089c; puVar2 < (undefined4 *)0x200711c0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  run_data_processing_loop_000816a8();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000816a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "entrypoint": "0x00080f9c",
            "current_name": "calculate_interval_00080f9c",
            "code": "\nundefined4 calculateInterval_00080f9c(undefined4 *result,uint inputSize,int elementSize,int timePerElement)\n\n{\n  uint interval;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *result = 1;\n  result[1] = 0;\n  result[0x48] = 0x202;\n  result[0x41] = 0;\n  result[0x45] = 0;\n  interval = inputSize / (uint)(elementSize * 2);\n  if (inputSize == elementSize * 2 * interval) {\n    interval = interval - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(timePerElement * (int)(((ulonglong)inputSize / (ulonglong)((interval + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      result[1] = (index & 0xf) << 0x10 | (interval & 0xff) << 8 | result[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080f9c": "calculate_interval_00080f9c",
                "param_1": "result",
                "param_2": "inputSize",
                "param_3": "elementSize",
                "param_4": "timePerElement",
                "uVar1": "interval",
                "uVar2": "index",
                "local_58": "thresholds"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081034": {
            "entrypoint": "0x00081034",
            "current_name": "update_flags_00081034",
            "code": "\nvoid updateFlags_00081034(int baseAddress,uint inputValue,uint flagValue)\n\n{\n  *(uint *)(baseAddress + 4) = inputValue | *(uint *)(baseAddress + 4) | (flagValue & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081034": "update_flags_00081034",
                "param_1": "baseAddress",
                "param_2": "inputValue",
                "param_3": "flagValue"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081042": {
            "entrypoint": "0x00081042",
            "current_name": "update_param_values_00081042",
            "code": "\nvoid updateParamValues_00081042(int baseAddress,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(baseAddress + 4) =\n       value2 | *(uint *)(baseAddress + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081042": "update_param_values_00081042",
                "param_1": "baseAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008105c": {
            "entrypoint": "0x0008105c",
            "current_name": "set_bit_in_memory_0008105c",
            "code": "\nvoid setBitInMemory_0008105c(int memoryAddress,uint bitPosition)\n\n{\n  *(int *)(memoryAddress + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008105c": "set_bit_in_memory_0008105c",
                "param_1": "memoryAddress",
                "param_2": "bitPosition"
            },
            "calling": [
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081066": {
            "entrypoint": "0x00081066",
            "current_name": "initialize_value_to_ffff_00081066",
            "code": "\nvoid initializeValueToFFFF_00081066(int inputParam)\n\n{\n  *(undefined4 *)(inputParam + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081066": "initialize_value_to_ffff_00081066",
                "param_1": "inputParam"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008106e": {
            "entrypoint": "0x0008106e",
            "current_name": "set_pointer_value_0008106e",
            "code": "\nvoid setPointerValue_0008106e(int pointerAddress,undefined4 newValue)\n\n{\n  *(undefined4 *)(pointerAddress + 0x28) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008106e": "set_pointer_value_0008106e",
                "param_1": "pointerAddress",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081184": {
            "entrypoint": "0x00081184",
            "current_name": "initialize_00081184",
            "code": "\nresult initialize_00081184(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081184": "initialize_00081184",
                "undefined4": "result"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008118c": {
            "entrypoint": "0x0008118c",
            "current_name": "calculate_sum_0008118c",
            "code": "\nint calculateSum_0008118c(int inputValue)\n\n{\n  int previousSum;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  previousSum = DAT_20071180;\n  DAT_20071180 = inputValue + DAT_20071180;\n  return previousSum;\n}\n\n",
            "renaming": {
                "FUN_0008118c": "calculate_sum_0008118c",
                "param_1": "inputValue",
                "iVar1": "previousSum"
            },
            "calling": [
                "FUN_00082970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ae": {
            "entrypoint": "0x000811ae",
            "current_name": "get_return_status_000811ae",
            "code": "\nundefined4 getReturnStatus_000811ae(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000811ae": "get_return_status_000811ae"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b4": {
            "entrypoint": "0x000811b4",
            "current_name": "initialize_memory_000811b4",
            "code": "\nundefined4 initializeMemory_000811b4(undefined4 param1,int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811b4": "initialize_memory_000811b4",
                "param_1": "param1",
                "param_2": "memoryAddress"
            },
            "calling": [
                "FUN_000846b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811be": {
            "entrypoint": "0x000811be",
            "current_name": "get_constant_one_000811be",
            "code": "\nundefined4 getConstantOne_000811be(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000811be": "get_constant_one_000811be"
            },
            "calling": [
                "FUN_000846dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c2": {
            "entrypoint": "0x000811c2",
            "current_name": "get_zero_000811c2",
            "code": "\nundefined4 getZero_000811c2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c2": "get_zero_000811c2"
            },
            "calling": [
                "FUN_00084700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c6": {
            "entrypoint": "0x000811c6",
            "current_name": "get_zero_000811c6",
            "code": "\nundefined4 getZero_000811c6(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c6": "get_zero_000811c6"
            },
            "calling": [
                "FUN_00084728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811cc": {
            "entrypoint": "0x000811cc",
            "current_name": "process_data_000811cc",
            "code": "\n\n\nuint processData_000811cc(undefined4 arg1,int arg2,uint length)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)length; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(arg2 + index);\n  }\n  return length & ~((int)length >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_000811cc": "process_data_000811cc",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "length",
                "iVar1": "index"
            },
            "calling": [
                "FUN_00084464"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00081714": {
            "entrypoint": "0x00081208",
            "current_name": "get_global_variable_thunk_00081714",
            "code": "\nundefined4 get_global_variable_thunk_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "thunk_FUN_00081714": "get_global_variable_thunk_00081714"
            },
            "calling": [
                "FUN_000804a8",
                "FUN_00080258",
                "FUN_000805d0",
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008120c": {
            "entrypoint": "0x0008120c",
            "current_name": "FUNC_0008120c",
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081210": {
            "entrypoint": "0x00081210",
            "current_name": "update_control_and_values_00081210",
            "code": "\n\n\nint updateControlAndValues_00081210(int deviceIndex,int controlIndex)\n\n{\n  int returnValue;\n  uint bitMask;\n  undefined4 updateType;\n  uint updatedValue;\n  byte deviceType;\n  byte controlFlags;\n  int indexOffset;\n  int controlAddress;\n  \n  returnValue = deviceIndex;\n  if ((&DAT_00084d24)[deviceIndex * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[deviceIndex] & 0xf) == 4) {\n      returnValue = set_bit_in_memory_0008105c(0x400c0000,(&DAT_00084d31)[deviceIndex * 0x1c]);\n    }\n    controlFlags = (&DAT_20070d94)[deviceIndex];\n    deviceType = controlFlags & 0xf;\n    if ((deviceType < 3) && (controlFlags != 0)) {\n      if (deviceType == 2) {\n        if (controlIndex == 0) {\n          return returnValue;\n        }\n      }\n      else if (deviceType == 1) {\n        if (controlIndex == 2) {\n          return returnValue;\n        }\n      }\n      else if (deviceType == 3) {\n        if (controlIndex == 1) {\n          return returnValue;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (controlIndex != 1) {\nLAB_0008126c:\n      if (controlIndex == 0) {\n        returnValue = deviceIndex * 0x1c;\n        check_bit_and_update_00080e18(*(undefined4 *)(&DAT_00084d20 + returnValue));\n        returnValue = update_control_and_values_00080da0(*(undefined4 *)(&DAT_00084d18 + returnValue),3,\n                             *(undefined4 *)(&DAT_00084d1c + returnValue),0);\n        controlFlags = (&DAT_20070d94)[deviceIndex] & 0xf0 | 2;\n      }\n      else {\n        if (controlIndex != 2) {\n          return returnValue;\n        }\n        returnValue = deviceIndex * 0x1c;\n        check_bit_and_update_00080e18(*(undefined4 *)(&DAT_00084d20 + returnValue));\n        returnValue = update_control_and_values_00080da0(*(undefined4 *)(&DAT_00084d18 + returnValue),3,\n                             *(undefined4 *)(&DAT_00084d1c + returnValue),1);\n        controlFlags = (&DAT_20070d94)[deviceIndex] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[deviceIndex] = controlFlags;\n      return returnValue;\n    }\n    indexOffset = deviceIndex * 0x1c;\n    controlAddress = *(int *)(&DAT_00084d18 + indexOffset);\n    if (controlFlags >> 4 == 0) {\n      updateType = 4;\n    }\n    else {\n      updateType = 5;\n    }\n    returnValue = update_control_and_values_00080da0(controlAddress,updateType,*(undefined4 *)(&DAT_00084d1c + indexOffset),\n                         *(undefined4 *)(&DAT_00084d28 + indexOffset));\n    (&DAT_20070d94)[deviceIndex] = (&DAT_20070d94)[deviceIndex] & 0xf0 | 3;\n    if (*(int *)(controlAddress + 0x18) == -1) {\n      bitMask = *(uint *)(&DAT_00084d20 + indexOffset);\n      if (0x2c < bitMask) {\n        return 1;\n      }\n      if (bitMask < 0x20) {\n        bitMask = 1 << (bitMask & 0xff);\n        updatedValue = _DAT_400e0618 & bitMask;\n        if (updatedValue == bitMask) {\n          _DAT_400e0614 = updatedValue;\n        }\n      }\n      else {\n        bitMask = 1 << (bitMask - 0x20 & 0xff);\n        updatedValue = _DAT_400e0708 & bitMask;\n        if (updatedValue == bitMask) {\n          _DAT_400e0704 = updatedValue;\n        }\n      }\n      return 0;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00081210": "update_control_and_values_00081210",
                "param_1": "deviceIndex",
                "param_2": "controlIndex",
                "iVar1": "returnValue",
                "uVar2": "bitMask",
                "uVar3": "updateType",
                "uVar4": "updatedValue",
                "bVar5": "deviceType",
                "bVar6": "controlFlags",
                "iVar7": "indexOffset",
                "iVar8": "controlAddress"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080164",
                "FUN_000804a8"
            ],
            "called": [
                "FUN_0008105c",
                "FUN_00080e18",
                "FUN_00080da0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081318": {
            "entrypoint": "0x00081318",
            "current_name": "update_control_and_values_00081318",
            "code": "\nvoid updateControlAndValues_00081318(int index,int value,undefined4 param)\n\n{\n  int result;\n  undefined4 valueToUpdate;\n  int dataPointer;\n  \n  if ((&DAT_00084d24)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[index] & 0xf) == 5) {\n      updateControlAndValues_00081318Function(index,1,param,5,index,value,param);\n    }\n    (&DAT_20070d94)[index] = (&DAT_20070d94)[index] & 0xf | (byte)(value << 4);\n    dataPointer = *(int *)(&DAT_00084d18 + index * 0x1c);\n    valueToUpdate = *(undefined4 *)(&DAT_00084d1c + index * 0x1c);\n    result = checkBitwiseOperations(dataPointer,valueToUpdate);\n    if (result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(dataPointer + 100) = valueToUpdate;\n        return;\n      }\n      *(undefined4 *)(dataPointer + 0x60) = valueToUpdate;\n      return;\n    }\n    updateParamValues(dataPointer,valueToUpdate,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081318": "update_control_and_values_00081318",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param",
                "iVar1": "result",
                "uVar2": "valueToUpdate",
                "iVar3": "dataPointer",
                "update_control_and_values_00081210": "updateControlAndValuesFunction",
                "check_bitwise_operations_00080e04": "checkBitwiseOperations",
                "update_param_values_00080d7a": "updateParamValues"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00080164",
                "FUN_000804a8",
                "FUN_000801b0",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00080e04",
                "FUN_00081210",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081388": {
            "entrypoint": "0x00081388",
            "current_name": "execute_if_r_info_decreased_to_zero_00081388",
            "code": "\nvoid execute_if_r_info_decreased_to_zero_00081388(void)\n\n{\n  if ((Elf32_Rel_ARRAY_20070000[6].r_info != 0xffffffff) &&\n     (Elf32_Rel_ARRAY_20070000[6].r_info = Elf32_Rel_ARRAY_20070000[6].r_info - 1,\n     Elf32_Rel_ARRAY_20070000[6].r_info == 0)) {\n    (*(code *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081388": "execute_if_r_info_decreased_to_zero_00081388"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813a8": {
            "entrypoint": "0x000813a8",
            "current_name": "initialize_memory_000813a8",
            "code": "\nint initializeMemory_000813a8(int memoryAddress)\n\n{\n  fillMemoryWithZeros(memoryAddress,0,0x80);\n  *(undefined4 *)(memoryAddress + 0x80) = 0;\n  *(undefined4 *)(memoryAddress + 0x84) = 0;\n  return memoryAddress;\n}\n\n",
            "renaming": {
                "FUN_000813a8": "initialize_memory_000813a8",
                "param_1": "memoryAddress",
                "fill_memory_00082504": "fillMemoryWithZeros"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813c2": {
            "entrypoint": "0x000813c2",
            "current_name": "update_parameter_000813c2",
            "code": "\nvoid updateParameter_000813c2(int baseAddress,undefined newValue)\n\n{\n  uint newIndex;\n  \n  newIndex = *(int *)(baseAddress + 0x80) + 1U & 0x7f;\n  if (newIndex != *(uint *)(baseAddress + 0x84)) {\n    *(undefined *)(baseAddress + *(int *)(baseAddress + 0x80)) = newValue;\n    *(uint *)(baseAddress + 0x80) = newIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813c2": "update_parameter_000813c2",
                "param_1": "baseAddress",
                "param_2": "newValue",
                "uVar1": "newIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "calculate_difference_000813e4",
            "code": "\nuint calculateDifference_000813e4(int inputValue)\n\n{\n  return *(int *)(*(int *)(inputValue + 0x10) + 0x80) - *(int *)(*(int *)(inputValue + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081454": {
            "entrypoint": "0x00081454",
            "current_name": "update_data_00081454",
            "code": "\nundefined4 updateData_00081454(int dataPointer,undefined4 newValue)\n\n{\n  int var1;\n  uint updatedValue;\n  \n  var1 = *(int *)(dataPointer + 0x14);\n  if ((*(int *)(*(int *)(dataPointer + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(var1 + 0x84) == *(int *)(var1 + 0x80))) {\n    *(undefined4 *)(*(int *)(dataPointer + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    updatedValue = *(int *)(var1 + 0x80) + 1U & 0x8000007f;\n    if ((int)updatedValue < 0) {\n      updatedValue = (updatedValue - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(var1 + 0x84) == updatedValue);\n    *(char *)(var1 + *(int *)(var1 + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataPointer + 0x14) + 0x80) = updatedValue;\n    *(undefined4 *)(*(int *)(dataPointer + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081454": "update_data_00081454",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "iVar1": "var1",
                "uVar2": "updatedValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814e4": {
            "entrypoint": "0x000814e4",
            "current_name": "initialize_params_000814e4",
            "code": "\nvoid initializeParams_000814e4(undefined4 *params,undefined4 value1,undefined value2,undefined4 value3,\n                 undefined4 value4,undefined4 value5)\n\n{\n  params[1] = 0;\n  params[2] = 1000;\n  params[6] = value1;\n  *params = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(params + 7) = value2;\n  params[4] = value4;\n  params[8] = value3;\n  params[5] = value5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000814e4": "initialize_params_000814e4",
                "param_1": "params",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4",
                "param_6": "value5"
            },
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081508": {
            "entrypoint": "0x00081508",
            "current_name": "initialize_widget_00081508",
            "code": "\nvoid initializeWidget_00081508(int widgetAddress,uint param2,undefined4 param3)\n\n{\n  int tempVar1;\n  undefined4 *widgetDataPtr;\n  \n  check_bit_and_update_00080e18(*(undefined4 *)(widgetAddress + 0x20));\n  widgetDataPtr = *(undefined4 **)(widgetAddress + 0x18);\n  widgetDataPtr[0x48] = 0x202;\n  *widgetDataPtr = 0xac;\n  widgetDataPtr[1] = param3;\n  widgetDataPtr[8] = Elf32_Rel_ARRAY_20070000[6].r_offset / param2 >> 4;\n  widgetDataPtr[3] = 0xffffffff;\n  widgetDataPtr[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(widgetAddress + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(widgetAddress + 0x1c) & 0x1f);\n  tempVar1 = *(int *)(widgetAddress + 0x10);\n  *(undefined4 *)(tempVar1 + 0x84) = 0;\n  *(undefined4 *)(tempVar1 + 0x80) = 0;\n  tempVar1 = *(int *)(widgetAddress + 0x14);\n  *(undefined4 *)(tempVar1 + 0x84) = 0;\n  *(undefined4 *)(tempVar1 + 0x80) = 0;\n  *widgetDataPtr = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081508": "initialize_widget_00081508",
                "param_1": "widgetAddress",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "tempVar1",
                "puVar2": "widgetDataPtr"
            },
            "calling": [],
            "called": [
                "FUN_00080e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815d4": {
            "entrypoint": "0x000815d4",
            "current_name": "initialize_data_000815d4",
            "code": "\nundefined4 * initializeData_000815d4(undefined4 *outputArray,undefined4 inputValue)\n\n{\n  initialize_params_000814e4();\n  *outputArray = &PTR_update_data_00081454_1_000857d8;\n  outputArray[9] = inputValue;\n  return outputArray;\n}\n\n",
            "renaming": {
                "FUN_000815d4": "initialize_data_000815d4",
                "param_1": "outputArray",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815f8": {
            "entrypoint": "0x000815f8",
            "current_name": "combine_parameters_000815f8",
            "code": "\nuint combineParameters_000815f8(int inputValue,uint bitMask)\n\n{\n  return bitMask | inputValue << 8;\n}\n\n",
            "renaming": {
                "FUN_000815f8": "combine_parameters_000815f8",
                "param_1": "inputValue",
                "param_2": "bitMask"
            },
            "calling": [
                "FUN_00080410"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815fe": {
            "entrypoint": "0x000815fe",
            "current_name": "update_relocation_000815fe",
            "code": "\nundefined4 * update_relocation_000815fe(undefined4 *relocation_entry)\n\n{\n  update_relocation_000815fe_entry_00081e04(*relocation_entry);\n  return relocation_entry;\n}\n\n",
            "renaming": {
                "FUN_000815fe": "update_relocation_000815fe",
                "param_1": "relocation_entry"
            },
            "calling": [],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008160c": {
            "entrypoint": "0x0008160c",
            "current_name": "reset_param_0008160c",
            "code": "\nvoid reset_param_0008160c(int *param)\n\n{\n  if (*param != 0) {\n    update_relocation_entry();\n  }\n  *param = 0;\n  param[2] = 0;\n  param[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008160c": "reset_param_0008160c",
                "param_1": "param",
                "update_relocation_entry_00081e04": "update_relocation_entry"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081622": {
            "entrypoint": "0x00081622",
            "current_name": "relocate_and_update_symbols_00081622",
            "code": "\nint relocate_and_update_symbols_00081622(int *symbol_address,int offset,undefined4 value1,undefined4 value2)\n\n{\n  int result;\n  \n  result = relocate_symbols_and_update_relocation_entry_000825a0(*symbol_address,offset + 1,value1,value2,value2);\n  if (result != 0) {\n    *symbol_address = result;\n    symbol_address[1] = offset;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081622": "relocate_and_update_symbols_00081622",
                "param_1": "symbol_address",
                "param_2": "offset",
                "param_3": "value1",
                "param_4": "value2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008163a"
            ],
            "called": [
                "FUN_000825a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008163a": {
            "entrypoint": "0x0008163a",
            "current_name": "check_and_update_symbols_0008163a",
            "code": "\nundefined4 checkAndUpdateSymbols_0008163a(int *ptr,uint num)\n\n{\n  int result;\n  \n  if ((*ptr == 0) || ((uint)ptr[1] < num)) {\n    result = relocate_and_update_symbols_00081622(ptr);\n    if (result == 0) {\n      return 0;\n    }\n    if (ptr[2] == 0) {\n      *(undefined *)*ptr = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008163a": "check_and_update_symbols_0008163a",
                "param_1": "ptr",
                "param_2": "num",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008165c": {
            "entrypoint": "0x0008165c",
            "current_name": "update_symbol_and_execute_function_0008165c",
            "code": "\nundefined4 * updateSymbolAndExecuteFunction_0008165c(undefined4 *symbolPtr,undefined4 param2,undefined4 newSymbol)\n\n{\n  int symbolCheckResult;\n  \n  symbolCheckResult = check_and_update_symbols_0008163a(symbolPtr,newSymbol);\n  if (symbolCheckResult == 0) {\n    reset_param_0008160c(symbolPtr);\n  }\n  else {\n    symbolPtr[2] = newSymbol;\n    FUNC_00082994(*symbolPtr,param2);\n  }\n  return symbolPtr;\n}\n\n",
            "renaming": {
                "FUN_0008165c": "update_symbol_and_execute_function_0008165c",
                "param_1": "symbolPtr",
                "param_2": "param2",
                "param_3": "newSymbol",
                "iVar1": "symbolCheckResult"
            },
            "calling": [
                "FUN_00081682"
            ],
            "called": [
                "FUN_00082994",
                "FUN_0008160c",
                "FUN_0008163a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081682": {
            "entrypoint": "0x00081682",
            "current_name": "initialize_and_execute_00081682",
            "code": "\nundefined4 * initializeAndExecute_00081682(undefined4 *outputData,int inputValue)\n\n{\n  undefined4 returnValue;\n  \n  *outputData = 0;\n  outputData[1] = 0;\n  outputData[2] = 0;\n  if (inputValue != 0) {\n    returnValue = FUNC_00082a50(inputValue);\n    update_symbol_and_execute_function_0008165c(outputData,inputValue,returnValue);\n  }\n  return outputData;\n}\n\n",
            "renaming": {
                "FUN_00081682": "initialize_and_execute_00081682",
                "param_1": "outputData",
                "param_2": "inputValue",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [
                "FUN_00082a50",
                "FUN_0008165c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816a6": {
            "entrypoint": "0x000816a6",
            "current_name": "FUNC_000816a6",
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000816a8": {
            "entrypoint": "0x000816a8",
            "current_name": "run_data_processing_loop_000816a8",
            "code": "\nvoid runDataProcessingLoop_000816a8(void)\n\n{\n  initializeGlobalVariable();\n  initializeAndUpdateValues();\n  FUNC_000816a6();\n  FUNC_0008120c(1);\n  initializeSystem();\n  do {\n    processData();\n    checkAndCalculateDifferences();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816a8": "run_data_processing_loop_000816a8",
                "initialize_global_variable_000816d4": "initializeGlobalVariable",
                "initialize_and_update_values_00080ae4": "initializeAndUpdateValues",
                "initialize_system_000804a8": "initializeSystem",
                "process_data_000805d0": "processData",
                "check_and_call_difference_calculations_00080ce0": "checkAndCalculateDifferences"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00080ae4",
                "FUN_000816d4",
                "FUN_000816a6",
                "FUN_000804a8",
                "FUN_00080ce0",
                "FUN_000805d0",
                "FUN_0008120c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d4": {
            "entrypoint": "0x000816d4",
            "current_name": "initialize_global_variable_000816d4",
            "code": "\n\n\nvoid initializeGlobalVariable_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816d4": "initialize_global_variable_000816d4"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081714": {
            "entrypoint": "0x00081714",
            "current_name": "get_data_value_00081714",
            "code": "\nundefined4 get_data_value_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "FUN_00081714": "get_data_value_00081714"
            },
            "calling": [
                "thunk_FUN_00081714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081730": {
            "entrypoint": "0x00081730",
            "current_name": "calculate_float_00081730",
            "code": "\nuint calculateFloat_00081730(uint inputValue,uint inputFlag,undefined4 inputData,uint inputParam)\n\n{\n  int shiftedValue1;\n  int shiftedValue2;\n  uint tempVar1;\n  uint tempVar2;\n  uint result1;\n  uint result2;\n  uint difference;\n  bool flag;\n  \n  tempVar1 = inputFlag ^ 0x80000000;\n  result1 = inputValue << 1;\n  flag = result1 == 0;\n  if (!flag) {\n    inputParam = inputFlag << 1;\n    flag = inputParam == 0;\n  }\n  if (!flag) {\n    flag = result1 == inputParam;\n  }\n  shiftedValue1 = (int)result1 >> 0x18;\n  if (!flag) {\n    flag = shiftedValue1 == -1;\n  }\n  if (!flag) {\n    flag = (int)inputParam >> 0x18 == -1;\n  }\n  if (flag) {\n    shiftedValue2 = (int)(inputFlag << 1) >> 0x18;\n    if (shiftedValue1 == -1 || shiftedValue2 == -1) {\n      result1 = tempVar1;\n      if (shiftedValue1 == -1) {\n        result1 = inputValue;\n      }\n      if (shiftedValue1 != -1 || shiftedValue2 != -1) {\n        tempVar1 = result1;\n      }\n      flag = (result1 & 0x7fffff) == 0;\n      if (flag) {\n        flag = (tempVar1 & 0x7fffff) == 0;\n      }\n      if (flag) {\n        flag = result1 == tempVar1;\n      }\n      if (!flag) {\n        result1 = result1 | 0x400000;\n      }\n      return result1;\n    }\n    if (((inputValue ^ tempVar1) & 0x7fffffff) != 0) {\n      if (result1 == 0) {\n        inputValue = tempVar1;\n      }\n      return inputValue;\n    }\n    if (inputValue != tempVar1) {\n      return 0;\n    }\n    if ((result1 & 0xff000000) == 0) {\n      tempVar1 = inputValue << 1;\n      if ((inputValue & 0x80000000) != 0) {\n        tempVar1 = tempVar1 | 0x80000000;\n      }\n      return tempVar1;\n    }\n    if (result1 < 0xfe000000) {\n      return inputValue + 0x800000;\n    }\n    inputValue = inputValue & 0x80000000;\nLAB_0008186a:\n    return inputValue | 0x7f800000;\n  }\n  result1 = result1 >> 0x18;\n  inputParam = inputParam >> 0x18;\n  difference = inputParam - result1;\n  flag = difference != 0;\n  result2 = result1;\n  if (flag && result1 <= inputParam) {\n    result2 = result1 + difference;\n  }\n  if (flag && result1 <= inputParam) {\n    tempVar1 = tempVar1 ^ inputValue;\n  }\n  if (flag && result1 <= inputParam) {\n    inputValue = inputValue ^ tempVar1;\n  }\n  if (flag && result1 <= inputParam) {\n    tempVar1 = tempVar1 ^ inputValue;\n  }\n  if (inputParam < result1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return inputValue;\n  }\n  result1 = inputValue & 0xffffff | 0x800000;\n  if ((inputValue & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  tempVar2 = tempVar1 & 0xffffff | 0x800000;\n  if ((tempVar1 & 0x80000000) != 0) {\n    tempVar2 = -tempVar2;\n  }\n  if (result2 == difference) {\n    tempVar2 = tempVar2 ^ 0x800000;\n    if (result2 == 0) {\n      result1 = result1 ^ 0x800000;\n      result2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result1 = result1 + ((int)tempVar2 >> (difference & 0xff));\n  tempVar2 = tempVar2 << (0x20 - difference & 0xff);\n  inputValue = result1 & 0x80000000;\n  if ((int)result1 < 0) {\n    flag = tempVar2 != 0;\n    tempVar2 = -tempVar2;\n    result1 = -result1 - (uint)flag;\n  }\n  if (result1 < 0x800000) {\n    tempVar1 = tempVar2 & 0x80000000;\n    tempVar2 = tempVar2 << 1;\n    result1 = result1 * 2 + (uint)(tempVar1 != 0);\n    tempVar1 = result2 - 2;\n    if ((result1 & 0x800000) == 0) {\n      difference = LZCOUNT(result1) - 8;\n      result1 = result1 << (difference & 0xff);\n      if ((int)tempVar1 < (int)difference) {\n        result1 = result1 >> (-(tempVar1 - difference) & 0xff);\n      }\n      else {\n        result1 = result1 + (tempVar1 - difference) * 0x800000;\n      }\n      return result1 | inputValue;\n    }\n  }\n  else {\n    tempVar1 = result2 - 1;\n    if (0xffffff < result1) {\n      tempVar1 = result1 & 1;\n      result1 = result1 >> 1;\n      tempVar2 = (uint)(tempVar1 != 0) << 0x1f | tempVar2 >> 1;\n      tempVar1 = result2;\n      if (0xfd < result2) goto LAB_0008186a;\n    }\n  }\n  result1 = result1 + tempVar1 * 0x800000 + (uint)(0x7fffffff < tempVar2);\n  if (tempVar2 == 0x80000000) {\n    result1 = result1 & 0xfffffffe;\n  }\n  return result1 | inputValue;\n}\n\n",
            "renaming": {
                "FUN_00081730": "calculate_float_00081730",
                "param_1": "inputValue",
                "param_2": "inputFlag",
                "param_3": "inputData",
                "param_4": "inputParam",
                "iVar1": "shiftedValue1",
                "iVar2": "shiftedValue2",
                "uVar3": "tempVar1",
                "uVar4": "tempVar2",
                "uVar5": "result1",
                "uVar6": "result2",
                "uVar7": "difference",
                "bVar8": "flag"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "perform_calculation_00081734",
            "code": "\nuint performCalculation_00081734(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint result1;\n  uint shiftedResult1;\n  uint shiftedResult2;\n  uint difference;\n  bool isConditionMet;\n  \n  shiftedResult1 = input1 << 1;\n  isConditionMet = shiftedResult1 == 0;\n  if (!isConditionMet) {\n    param4 = input2 << 1;\n    isConditionMet = param4 == 0;\n  }\n  if (!isConditionMet) {\n    isConditionMet = shiftedResult1 == param4;\n  }\n  shiftedInput1 = (int)shiftedResult1 >> 0x18;\n  if (!isConditionMet) {\n    isConditionMet = shiftedInput1 == -1;\n  }\n  if (!isConditionMet) {\n    isConditionMet = (int)param4 >> 0x18 == -1;\n  }\n  if (isConditionMet) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      shiftedResult1 = input2;\n      if (shiftedInput1 == -1) {\n        shiftedResult1 = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        input2 = shiftedResult1;\n      }\n      isConditionMet = (shiftedResult1 & 0x7fffff) == 0;\n      if (isConditionMet) {\n        isConditionMet = (input2 & 0x7fffff) == 0;\n      }\n      if (isConditionMet) {\n        isConditionMet = shiftedResult1 == input2;\n      }\n      if (!isConditionMet) {\n        shiftedResult1 = shiftedResult1 | 0x400000;\n      }\n      return shiftedResult1;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (shiftedResult1 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((shiftedResult1 & 0xff000000) == 0) {\n      shiftedResult1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        shiftedResult1 = shiftedResult1 | 0x80000000;\n      }\n      return shiftedResult1;\n    }\n    if (shiftedResult1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  shiftedResult1 = shiftedResult1 >> 0x18;\n  param4 = param4 >> 0x18;\n  difference = param4 - shiftedResult1;\n  isConditionMet = difference != 0;\n  shiftedResult2 = shiftedResult1;\n  if (isConditionMet && shiftedResult1 <= param4) {\n    shiftedResult2 = shiftedResult1 + difference;\n  }\n  if (isConditionMet && shiftedResult1 <= param4) {\n    input2 = input2 ^ input1;\n  }\n  if (isConditionMet && shiftedResult1 <= param4) {\n    input1 = input1 ^ input2;\n  }\n  if (isConditionMet && shiftedResult1 <= param4) {\n    input2 = input2 ^ input1;\n  }\n  if (param4 < shiftedResult1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  shiftedResult1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    shiftedResult1 = -shiftedResult1;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (shiftedResult2 == difference) {\n    result1 = result1 ^ 0x800000;\n    if (shiftedResult2 == 0) {\n      shiftedResult1 = shiftedResult1 ^ 0x800000;\n      shiftedResult2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shiftedResult1 = shiftedResult1 + ((int)result1 >> (difference & 0xff));\n  result1 = result1 << (0x20 - difference & 0xff);\n  input1 = shiftedResult1 & 0x80000000;\n  if ((int)shiftedResult1 < 0) {\n    isConditionMet = result1 != 0;\n    result1 = -result1;\n    shiftedResult1 = -shiftedResult1 - (uint)isConditionMet;\n  }\n  if (shiftedResult1 < 0x800000) {\n    difference = result1 & 0x80000000;\n    result1 = result1 << 1;\n    shiftedResult1 = shiftedResult1 * 2 + (uint)(difference != 0);\n    difference = shiftedResult2 - 2;\n    if ((shiftedResult1 & 0x800000) == 0) {\n      shiftedResult2 = LZCOUNT(shiftedResult1) - 8;\n      shiftedResult1 = shiftedResult1 << (shiftedResult2 & 0xff);\n      if ((int)difference < (int)shiftedResult2) {\n        shiftedResult1 = shiftedResult1 >> (-(difference - shiftedResult2) & 0xff);\n      }\n      else {\n        shiftedResult1 = shiftedResult1 + (difference - shiftedResult2) * 0x800000;\n      }\n      return shiftedResult1 | input1;\n    }\n  }\n  else {\n    difference = shiftedResult2 - 1;\n    if (0xffffff < shiftedResult1) {\n      difference = shiftedResult1 & 1;\n      shiftedResult1 = shiftedResult1 >> 1;\n      result1 = (uint)(difference != 0) << 0x1f | result1 >> 1;\n      difference = shiftedResult2;\n      if (0xfd < shiftedResult2) goto LAB_0008186a;\n    }\n  }\n  shiftedResult1 = shiftedResult1 + difference * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    shiftedResult1 = shiftedResult1 & 0xfffffffe;\n  }\n  return shiftedResult1 | input1;\n}\n\n",
            "renaming": {
                "FUN_00081734": "perform_calculation_00081734",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "result1",
                "uVar4": "shiftedResult1",
                "uVar5": "shiftedResult2",
                "uVar6": "difference",
                "bVar7": "isConditionMet"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081894": {
            "entrypoint": "0x00081894",
            "current_name": "FUNC_00081894",
            "code": "\nuint FUNC_00081894(uint param_1)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  \n  if (param_1 == 0) {\n    return 0;\n  }\n  uVar1 = LZCOUNT(param_1);\n  uVar2 = uVar1 - 8;\n  iVar3 = uVar2 * -0x800000 + 0x4a800000;\n  if (7 < uVar1) {\n    uVar4 = 0 << (uVar2 & 0xff);\n    uVar1 = iVar3 + (param_1 << (uVar2 & 0xff)) +\n            (0U >> (0x20 - uVar2 & 0xff)) + (uint)(0x7fffffff < uVar4);\n    if (uVar4 == 0x80000000) {\n      uVar1 = uVar1 & 0xfffffffe;\n    }\n    return uVar1;\n  }\n  uVar2 = param_1 << uVar1 + 0x18;\n  uVar1 = iVar3 + ((param_1 >> (0x20 - (uVar1 + 0x18) & 0xff)) - ((int)uVar2 >> 0x1f));\n  if ((uVar2 & 0x7fffffff) == 0) {\n    uVar1 = uVar1 & ~(uVar2 >> 0x1f);\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_00081894": "FUNC_00081894"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008189c": {
            "entrypoint": "0x0008189c",
            "current_name": "calculate_value_0008189c",
            "code": "\nuint calculateValue_0008189c(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftValue;\n  uint signMask;\n  int result;\n  \n  signMask = inputValue & 0x80000000;\n  if ((int)signMask < 0) {\n    inputValue = -inputValue;\n  }\n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputValue);\n  shiftValue = leadingZeros - 8;\n  result = ((signMask | 0x4b000000) - 0x800000) + shiftValue * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftValue & 0xff);\n    signMask = result + (inputValue << (shiftValue & 0xff)) +\n            (0U >> (0x20 - shiftValue & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      signMask = signMask & 0xfffffffe;\n    }\n    return signMask;\n  }\n  shiftValue = inputValue << leadingZeros + 0x18;\n  signMask = result + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftValue >> 0x1f));\n  if ((shiftValue & 0x7fffffff) == 0) {\n    signMask = signMask & ~(shiftValue >> 0x1f);\n  }\n  return signMask;\n}\n\n",
            "renaming": {
                "FUN_0008189c": "calculate_value_0008189c",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftValue",
                "uVar3": "signMask",
                "iVar4": "result"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081944": {
            "entrypoint": "0x00081944",
            "current_name": "calculate_float_00081944",
            "code": "\nuint calculateFloat_00081944(uint value1,uint value2,undefined4 constant1,uint constant2)\n\n{\n  longlong lVar1;\n  uint result;\n  uint temp1;\n  int sum;\n  int diff;\n  uint temp2;\n  int count;\n  uint temp3;\n  bool flag1;\n  bool flag2;\n  \n  temp1 = value1 >> 0x17 & 0xff;\n  flag1 = temp1 == 0;\n  if (!flag1) {\n    constant2 = value2 >> 0x17 & 0xff;\n    flag1 = constant2 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp1 == 0xff;\n  }\n  if (!flag1) {\n    flag1 = constant2 == 0xff;\n  }\n  if (flag1) {\n    constant2 = value2 >> 0x17 & 0xff;\n    if (temp1 == 0xff || constant2 == 0xff) {\n      flag1 = value1 == 0 || value1 == 0x80000000;\n      result = value2;\n      if (value1 != 0 && value1 != 0x80000000) {\n        flag1 = value2 == 0;\n        result = value1;\n      }\n      if (!flag1) {\n        flag1 = value2 == 0x80000000;\n      }\n      temp3 = result;\n      if (((flag1) || ((temp1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((constant2 == 0xff && (temp3 = value2, (value2 & 0x7fffff) != 0)))) {\n        return temp3 | 0x7fc00000;\n      }\n      result = result ^ value2;\n      goto LAB_00081a94;\n    }\n    flag1 = (value1 & 0x7fffffff) == 0;\n    if (!flag1) {\n      flag1 = (value2 & 0x7fffffff) == 0;\n    }\n    if (flag1) {\n      return (value1 ^ value2) & 0x80000000;\n    }\n    flag1 = temp1 == 0;\n    result = value1 & 0x80000000;\n    while( true ) {\n      if (flag1) {\n        value1 = value1 << 1;\n        flag1 = (value1 & 0x800000) == 0;\n      }\n      if (!flag1) break;\n      temp1 = temp1 - 1;\n    }\n    value1 = value1 | result;\n    flag1 = constant2 == 0;\n    result = value2 & 0x80000000;\n    while( true ) {\n      if (flag1) {\n        value2 = value2 << 1;\n        flag1 = (value2 & 0x800000) == 0;\n      }\n      if (!flag1) break;\n      constant2 = constant2 - 1;\n    }\n    value2 = value2 | result;\n  }\n  sum = temp1 + constant2;\n  temp3 = value1 ^ value2;\n  temp1 = value1 << 9;\n  flag1 = temp1 == 0;\n  if (!flag1) {\n    value2 = value2 << 9;\n    flag1 = value2 == 0;\n  }\n  if (flag1) {\n    if (temp1 == 0) {\n      value2 = value2 << 9;\n    }\n    result = temp3 & 0x80000000 | value1 & 0x7fffff | value2 >> 9;\n    flag2 = SBORROW4(sum,0x7f);\n    diff = sum + -0x7f;\n    flag1 = diff == 0;\n    count = diff;\n    if (!flag1 && 0x7e < sum) {\n      flag2 = SBORROW4(0xff,diff);\n      count = 0xff - diff;\n      flag1 = diff == 0xff;\n    }\n    if (!flag1 && count < 0 == flag2) {\n      result = result | diff * 0x800000;\n    }\n    if (!flag1 && count < 0 == flag2) {\n      return result;\n    }\n    result = result | 0x800000;\n    temp2 = 0;\n    flag2 = SBORROW4(diff,1);\n    temp3 = sum - 0x80;\n    flag1 = temp3 == 0;\n    temp1 = temp3;\n  }\n  else {\n    lVar1 = (ulonglong)(temp1 >> 5 | 0x8000000) * (ulonglong)(value2 >> 5 | 0x8000000);\n    temp2 = (uint)lVar1;\n    result = (uint)((ulonglong)lVar1 >> 0x20);\n    flag1 = result < 0x800000;\n    if (flag1) {\n      result = result << 1;\n    }\n    if (flag1) {\n      result = result | temp2 >> 0x1f;\n      temp2 = temp2 << 1;\n    }\n    result = temp3 & 0x80000000 | result;\n    temp3 = (sum + -0x7f) - (uint)flag1;\n    flag2 = SBORROW4(temp3,0xfd);\n    flag1 = temp3 == 0xfd;\n    temp1 = temp3 - 0xfd;\n    if (temp3 < 0xfe) {\n      result = result + temp3 * 0x800000 + (uint)(0x7fffffff < temp2);\n      if (temp2 == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (flag1 || (int)temp1 < 0 != flag2) {\n    flag1 = (int)(temp3 + 0x19) < 0;\n    if (temp3 == 0xffffffe7 || flag1 != SCARRY4(temp3,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (temp3 != 0xffffffe7 && flag1 == SCARRY4(temp3,0x19)) {\n      temp1 = (result << 1) >> (-temp3 & 0xff);\n      temp3 = result << (temp3 + 0x20 & 0xff);\n      temp1 = ((uint)((result & 0x80000000) != 0) << 0x1f | temp1 >> 1) + (uint)((byte)temp1 & 1);\n      if ((temp2 | temp3 << 1) == 0) {\n        temp1 = temp1 & ~(temp3 >> 0x1f);\n      }\n      return temp1;\n    }\n    return result;\n  }\nLAB_00081a94:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081944": "calculate_float_00081944",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "constant1",
                "param_4": "constant2",
                "uVar2": "result",
                "uVar3": "temp1",
                "uVar6": "temp2",
                "iVar4": "sum",
                "iVar5": "diff",
                "iVar7": "count",
                "uVar8": "temp3",
                "bVar9": "flag1",
                "bVar10": "flag2"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "entrypoint": "0x00081bf4",
            "current_name": "calculate_bitwise_result_00081bf4",
            "code": "\nuint calculate_bitwise_result_00081bf4(uint input_a,uint input_b)\n\n{\n  bool is_bitwise_result_negative;\n  uint input_a_times_2;\n  uint input_b_times_2;\n  uint bitwise_result;\n  bool is_bitwise_result_zero;\n  \n  input_a_times_2 = input_a * 2;\n  input_b_times_2 = input_b * 2;\n  if (((int)input_a_times_2 >> 0x18 == -1 || (int)input_b_times_2 >> 0x18 == -1) &&\n     ((((int)input_a_times_2 >> 0x18 == -1 && ((input_a & 0x7fffff) != 0)) ||\n      (((int)input_b_times_2 >> 0x18 == -1 && ((input_b & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  bitwise_result = input_a_times_2 | input_b & 0x7fffffff;\n  is_bitwise_result_zero = bitwise_result == 0;\n  if (!is_bitwise_result_zero) {\n    bitwise_result = input_a ^ input_b;\n    is_bitwise_result_zero = bitwise_result == 0;\n  }\n  is_bitwise_result_negative = -1 < (int)bitwise_result;\n  if (is_bitwise_result_negative) {\n    input_a = input_a_times_2 + input_b * -2;\n    is_bitwise_result_zero = input_a == 0;\n  }\n  if ((is_bitwise_result_negative && input_b_times_2 <= input_a_times_2) && !is_bitwise_result_zero) {\n    input_a = (int)input_b >> 0x1f;\n  }\n  if (!is_bitwise_result_negative || input_b_times_2 > input_a_times_2) {\n    input_a = ~((int)input_b >> 0x1f);\n  }\n  if (!is_bitwise_result_zero) {\n    input_a = input_a | 1;\n  }\n  return input_a;\n}\n\n",
            "renaming": {
                "FUN_00081bf4": "calculate_bitwise_result_00081bf4",
                "param_1": "input_a",
                "param_2": "input_b",
                "uVar2": "input_a_times_2",
                "uVar3": "input_b_times_2",
                "uVar4": "bitwise_result",
                "bVar1": "is_bitwise_result_negative",
                "bVar5": "is_bitwise_result_zero"
            },
            "calling": [
                "FUN_00081c5c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c54": {
            "entrypoint": "0x00081c54",
            "current_name": "concatenate_params_and_return_00081c54",
            "code": "\nvoid concatenateParamsAndReturn_00081c54(undefined4 inputParam1,undefined4 inputParam2)\n\n{\n  concatenate_and_return_00081c5c(inputParam2,inputParam1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081c54": "concatenate_params_and_return_00081c54",
                "param_1": "inputParam1",
                "param_2": "inputParam2"
            },
            "calling": [
                "FUN_00081ca8"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "entrypoint": "0x00081c5c",
            "current_name": "concatenate_and_return_00081c5c",
            "code": "\nundefined8 concatenateAndReturn_00081c5c(undefined4 input1,undefined4 input2)\n\n{\n  calculate_bitwise_result_00081bf4();\n  return CONCAT44(input2,input1);\n}\n\n",
            "renaming": {
                "FUN_00081c5c": "concatenate_and_return_00081c5c",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "FUN_00081c54",
                "FUN_00081c94"
            ],
            "called": [
                "FUN_00081bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c94": {
            "entrypoint": "0x00081c94",
            "current_name": "check_conditions_and_return_00081c94",
            "code": "\nbool check_conditions_and_return_00081c94(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  concatenate_and_return_00081c5c();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_00081c94": "check_conditions_and_return_00081c94",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "entrypoint": "0x00081ca8",
            "current_name": "check_concatenation_result_00081ca8",
            "code": "\nbool checkConcatenationResult_00081ca8(void)\n\n{\n  undefined concatenationSuccess;\n  undefined concatenationFailure;\n  \n  concatenate_params_and_return_00081c54();\n  return !(bool)concatenationFailure || (bool)concatenationSuccess;\n}\n\n",
            "renaming": {
                "FUN_00081ca8": "check_concatenation_result_00081ca8",
                "in_ZR": "concatenationSuccess",
                "in_CY": "concatenationFailure"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "entrypoint": "0x00081cd0",
            "current_name": "decode_unsigned_integer_00081cd0",
            "code": "\nuint decodeUnsignedInteger_00081cd0(uint unsignedInteger)\n\n{\n  uint shiftedValue;\n  uint difference;\n  \n  if (unsignedInteger << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedValue = (unsignedInteger << 1) >> 0x18;\n  difference = 0x9e - shiftedValue;\n  if (shiftedValue < 0x9f && difference != 0) {\n    shiftedValue = (unsignedInteger << 8 | 0x80000000) >> (difference & 0xff);\n    if ((unsignedInteger & 0x80000000) != 0) {\n      shiftedValue = -shiftedValue;\n    }\n    return shiftedValue;\n  }\n  if ((difference == 0xffffff9f) && ((unsignedInteger & 0x7fffff) != 0)) {\n    return 0;\n  }\n  unsignedInteger = unsignedInteger & 0x80000000;\n  if (unsignedInteger == 0) {\n    unsignedInteger = 0x7fffffff;\n  }\n  return unsignedInteger;\n}\n\n",
            "renaming": {
                "FUN_00081cd0": "decode_unsigned_integer_00081cd0",
                "param_1": "unsignedInteger",
                "uVar1": "shiftedValue",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "entrypoint": "0x00081d1c",
            "current_name": "check_value_00081d1c",
            "code": "\nuint checkValue_00081d1c(uint input)\n\n{\n  uint result;\n  \n  if (((input & 0x80000000) != 0) || (input << 1 < 0x7f000000)) {\n    return 0;\n  }\n  result = 0x9e - ((input << 1) >> 0x18);\n  if (-1 < (int)result) {\n    return (input << 8 | 0x80000000) >> (result & 0xff);\n  }\n  if ((result == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081d1c": "check_value_00081d1c",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "entrypoint": "0x00081d5c",
            "current_name": "update_relocation_entry_00081d5c",
            "code": "\nundefined4 updateRelocationEntry_00081d5c(dword newAddress,dword newValue,dword extraInfo)\n\n{\n  dword *relocationEntry;\n  uint relocationOffset;\n  uint bitMask;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  relocationOffset = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  relocationEntry = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)relocationOffset) {\n    relocationEntry = (dword *)relocated_symbols_00081df4(400);\n    if (relocationEntry == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *relocationEntry = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    relocationEntry[1] = 0;\n    relocationOffset = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)relocationEntry;\n    relocationEntry[0x62] = 0;\n    relocationEntry[99] = 0;\n  }\n  bitMask = 1 << (relocationOffset & 0xff);\n  relocationEntry[relocationOffset + 0x22] = newAddress;\n  relocationEntry[0x62] = relocationEntry[0x62] | bitMask;\n  relocationEntry[relocationOffset + 0x42] = extraInfo;\n  relocationEntry[99] = bitMask | relocationEntry[99];\n  relocationEntry[1] = relocationOffset + 1;\n  relocationEntry[relocationOffset + 2] = newValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081d5c": "update_relocation_entry_00081d5c",
                "param_1": "newAddress",
                "param_2": "newValue",
                "param_3": "extraInfo",
                "pdVar1": "relocationEntry",
                "uVar2": "relocationOffset",
                "uVar3": "bitMask"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "entrypoint": "0x00081d7c",
            "current_name": "execute_function_chain_00081d7c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid executeFunctionChain_00081d7c(void)\n\n{\n  int iteration;\n  code **functionPointer;\n  \n  FUNC_00085858();\n  functionPointer = (code **)0x85860;\n  iteration = 0;\n  do {\n    iteration = iteration + 1;\n    functionPointer = functionPointer + 1;\n    (**functionPointer)();\n  } while (iteration != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d7c": "execute_function_chain_00081d7c",
                "iVar1": "iteration",
                "ppcVar2": "functionPointer"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00085858",
                "FUN_00080118",
                "FUN_00083974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081df4": {
            "entrypoint": "0x00081df4",
            "current_name": "relocated_symbols_00081df4",
            "code": "\nvoid relocatedSymbols_00081df4(undefined4 input)\n\n{\n  relocate_symbols_00081e14(relocationTable[140].r_offset,input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081df4": "relocated_symbols_00081df4",
                "param_1": "input",
                "Elf32_Rel_ARRAY_20070000": "relocationTable"
            },
            "calling": [
                "FUN_00083974"
            ],
            "called": [
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e04": {
            "entrypoint": "0x00081e04",
            "current_name": "update_relocation_entry_00081e04",
            "code": "\nvoid updateRelocationEntry_00081e04(undefined4 offset)\n\n{\n  update_relocation_entry_00083d9c(relocationArray[140].r_offset,offset);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e04": "update_relocation_entry_00081e04",
                "param_1": "offset",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "FUN_0008160c",
                "FUN_000815fe"
            ],
            "called": [
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e14": {
            "entrypoint": "0x00081e14",
            "current_name": "relocate_symbols_00081e14",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * relocateSymbols_00081e14(undefined4 *symbolTable,uint symbolCount)\n\n{\n  dword relEntry;\n  int head;\n  uint uBound;\n  uint lowerBound;\n  int iter1;\n  uint size;\n  dword currEntry;\n  uint offset;\n  int iter2;\n  undefined *node;\n  dword prevEntry;\n  dword nextEntry;\n  int index;\n  dword *relTable;\n  uint relocSize;\n  undefined *newNode;\n  dword *padjustment;\n  uint uVar18;\n  \n  if (symbolCount + 0xb < 0x17) {\n    relocSize = 0x10;\n    if (0x10 < symbolCount) goto LAB_00081e7a;\n  }\n  else {\n    relocSize = symbolCount + 0xb & 0xfffffff8;\n    if (((int)relocSize < 0) || (relocSize < symbolCount)) {\nLAB_00081e7a:\n      *symbolTable = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00082598(symbolTable);\n  relEntry = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (relocSize < 0x1f8) {\n    index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + relocSize);\n    if ((index != relocSize + 0x20070464) ||\n       (head = index + 8, index = *(int *)(index + 0x14), head != index)) {\n      iter1 = *(int *)(index + 0xc);\n      iter2 = (*(uint *)(index + 4) & 0xfffffffc) + index;\n      relocSize = *(uint *)(iter2 + 4);\n      head = *(int *)(index + 8);\n      *(int *)(head + 0xc) = iter1;\n      *(int *)(iter1 + 8) = head;\n      *(uint *)(iter2 + 4) = relocSize | 1;\n      FUNC_0008259c(symbolTable);\n      return (int *)(index + 8);\n    }\n    uVar18 = (relocSize >> 3) + 2;\n  }\n  else {\n    uVar18 = relocSize >> 9;\n    if (uVar18 == 0) {\n      head = 0x7e;\n      index = 0x3f;\n    }\n    else if (uVar18 < 5) {\n      index = (relocSize >> 6) + 0x38;\n      head = index * 2;\n    }\n    else if (uVar18 < 0x15) {\n      index = uVar18 + 0x5b;\n      head = index * 2;\n    }\n    else if (uVar18 < 0x55) {\n      index = (relocSize >> 0xc) + 0x6e;\n      head = index * 2;\n    }\n    else if (uVar18 < 0x155) {\n      index = (relocSize >> 0xf) + 0x77;\n      head = index * 2;\n    }\n    else if (uVar18 < 0x555) {\n      index = (relocSize >> 0x12) + 0x7c;\n      head = index * 2;\n    }\n    else {\n      head = 0xfc;\n      index = 0x7e;\n    }\n    for (currEntry = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[head]; head * 4 + 0x20070464U != currEntry\n        ; currEntry = *(dword *)(currEntry + 0xc)) {\n      uVar18 = *(uint *)(currEntry + 4) & 0xfffffffc;\n      iter1 = uVar18 - relocSize;\n      if (0xf < iter1) {\n        index = index + -1;\n        break;\n      }\n      if (-1 < iter1) {\n        head = uVar18 + currEntry;\n        relocSize = *(uint *)(head + 4);\n        iter1 = *(int *)(currEntry + 0xc);\n        index = *(int *)(currEntry + 8);\n        *(int *)(index + 0xc) = iter1;\n        *(int *)(iter1 + 8) = index;\n        *(uint *)(head + 4) = relocSize | 1;\n        FUNC_0008259c(symbolTable);\n        return (int *)(currEntry + 8);\n      }\n    }\n    uVar18 = index + 1;\n  }\n  currEntry = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    uBound = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    lowerBound = uBound & 0xfffffffc;\n    size = lowerBound - relocSize;\n    if (0xf < (int)size) {\n      currEntry = relocSize + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = relocSize | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = currEntry;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = currEntry;\n      *(undefined4 *)(currEntry + 0xc) = 0x2007046c;\n      *(undefined4 *)(currEntry + 8) = 0x2007046c;\n      *(uint *)(currEntry + 4) = size | 1;\n      *(uint *)(currEntry + size) = size;\n      FUNC_0008259c(symbolTable);\n      return (int *)(relEntry + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)size) {\n      *(uint *)(lowerBound + relEntry + 4) = *(uint *)(lowerBound + relEntry + 4) | 1;\n      FUNC_0008259c(symbolTable);\n      return (int *)(relEntry + 8);\n    }\n    if (lowerBound < 0x200) {\n      lowerBound = uBound & 0xfffffff8;\n      index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + lowerBound);\n      currEntry = 1 << ((int)(uBound >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(relEntry + 8) = index;\n      *(uint *)(relEntry + 0xc) = lowerBound + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = currEntry;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + lowerBound) = relEntry;\n      *(dword *)(index + 0xc) = relEntry;\n    }\n    else {\n      size = uBound >> 9;\n      if (size < 5) {\n        head = (uBound >> 6) + 0x38;\n        index = head * 2;\n      }\n      else if (size < 0x15) {\n        head = size + 0x5b;\n        index = head * 2;\n      }\n      else if (size < 0x55) {\n        head = (uBound >> 0xc) + 0x6e;\n        index = head * 2;\n      }\n      else if (size < 0x155) {\n        head = (uBound >> 0xf) + 0x77;\n        index = head * 2;\n      }\n      else if (size < 0x555) {\n        head = (uBound >> 0x12) + 0x7c;\n        index = head * 2;\n      }\n      else {\n        index = 0xfc;\n        head = 0x7e;\n      }\n      currEntry = index * 4 + 0x20070464;\n      prevEntry = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[index];\n      if (prevEntry == currEntry) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (head >> 2 & 0xffU);\n        nextEntry = prevEntry;\n      }\n      else {\n        do {\n          nextEntry = prevEntry;\n          if ((*(uint *)(prevEntry + 4) & 0xfffffffc) <= lowerBound) break;\n          prevEntry = *(dword *)(prevEntry + 8);\n          nextEntry = prevEntry;\n        } while (currEntry != prevEntry);\n        prevEntry = *(dword *)(nextEntry + 0xc);\n      }\n      currEntry = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(relEntry + 0xc) = prevEntry;\n      *(dword *)(relEntry + 8) = nextEntry;\n      *(dword *)(prevEntry + 8) = relEntry;\n      *(dword *)(nextEntry + 0xc) = relEntry;\n    }\n  }\n  relEntry = Elf32_Rel_ARRAY_20070000[141].r_info;\n  uBound = 1 << ((int)uVar18 >> 2 & 0xffU);\n  if (uBound <= currEntry) {\n    if ((currEntry & uBound) == 0) {\n      uVar18 = uVar18 & 0xfffffffc;\n      do {\n        uBound = uBound << 1;\n        uVar18 = uVar18 + 4;\n      } while ((currEntry & uBound) == 0);\n    }\n    do {\n      padjustment = &Elf32_Rel_ARRAY_20070000[uVar18 + 0x8c].r_info;\n      relTable = padjustment;\n      lowerBound = uVar18;\n      do {\n        for (node = (undefined *)relTable[3]; relTable != (dword *)node;\n            node = *(undefined **)(node + 0xc)) {\n          size = *(uint *)(node + 4) & 0xfffffffc;\n          offset = size - relocSize;\n          if (0xf < (int)offset) {\n            head = *(int *)(node + 8);\n            index = *(int *)(node + 0xc);\n            newNode = node + relocSize;\n            *(uint *)(node + 4) = relocSize | 1;\n            *(int *)(head + 0xc) = index;\n            *(int *)(index + 8) = head;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)newNode;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)newNode;\n            *(undefined4 *)(newNode + 0xc) = 0x2007046c;\n            *(undefined4 *)(newNode + 8) = 0x2007046c;\n            *(uint *)(newNode + 4) = offset | 1;\n            *(uint *)(newNode + offset) = offset;\n            FUNC_0008259c(symbolTable);\n            return (int *)(node + 8);\n          }\n          if (-1 < (int)offset) {\n            index = *(int *)(node + 8);\n            head = *(int *)(node + 0xc);\n            *(uint *)(node + size + 4) = *(uint *)(node + size + 4) | 1;\n            *(int *)(index + 0xc) = head;\n            *(int *)(head + 8) = index;\n            FUNC_0008259c(symbolTable);\n            return (int *)(node + 8);\n          }\n        }\n        lowerBound = lowerBound + 1;\n        relTable = relTable + 2;\n      } while ((lowerBound & 3) != 0);\n      do {\n        size = uVar18 & 3;\n        node = (undefined *)(padjustment + -2);\n        uVar18 = uVar18 - 1;\n        if (size == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~uBound;\n          break;\n        }\n        padjustment = (dword *)*padjustment;\n      } while (padjustment == (dword *)node);\n      uBound = uBound * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= uBound &&\n           uBound - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (uVar18 = lowerBound, uBound == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & uBound) == 0; uBound = uBound << 1) {\n        uVar18 = uVar18 + 4;\n      }\n    } while( true );\n  }\n  uVar18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((relocSize <= uVar18) &&\n     (uBound = uVar18 - relocSize, currEntry = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)uBound))\n  goto LAB_0008211e;\n  uBound = Elf32_Rel_ARRAY_20070000[141].r_info + uVar18;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    lowerBound = relocSize + DAT_20071190 + 0x10;\n  }\n  else {\n    lowerBound = relocSize + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  currEntry = calculate_and_update_sum_00082970(symbolTable,lowerBound);\n  if ((currEntry == 0xffffffff) || ((currEntry < uBound && (relEntry != 0x20070464)))) {\n    uVar18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    currEntry = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    size = DAT_20071194 + lowerBound;\n    DAT_20071194 = size;\n    if ((uBound == currEntry) && ((uBound & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = lowerBound + uVar18 | 1;\n    }\n    else {\n      prevEntry = currEntry;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        prevEntry = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_20071194 = size + (currEntry - uBound);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = prevEntry;\n      uBound = currEntry & 7;\n      if (uBound == 0) {\n        index = 0x1000;\n      }\n      else {\n        currEntry = currEntry + (8 - uBound);\n        index = 0x1008 - uBound;\n      }\n      index = index - (lowerBound + currEntry & 0xfff);\n      head = calculate_and_update_sum_00082970(symbolTable,index);\n      if (head == -1) {\n        uBound = 1;\n        index = 0;\n      }\n      else {\n        uBound = (head - currEntry) + index | 1;\n      }\n      size = DAT_20071194 + index;\n      Elf32_Rel_ARRAY_20070000[141].r_info = currEntry;\n      DAT_20071194 = size;\n      *(uint *)(currEntry + 4) = uBound;\n      if (relEntry != 0x20070464) {\n        if (uVar18 < 0x10) {\n          *(undefined4 *)(currEntry + 4) = 1;\n          uVar18 = 0;\n          goto LAB_00082108;\n        }\n        uVar18 = uVar18 - 0xc & 0xfffffff8;\n        *(uint *)(relEntry + 4) = uVar18 | *(uint *)(relEntry + 4) & 1;\n        *(undefined4 *)(relEntry + uVar18 + 4) = 5;\n        *(undefined4 *)(relEntry + uVar18 + 8) = 5;\n        if (0xf < uVar18) {\n          update_relocation_entry_00083d9c(symbolTable,relEntry + 8);\n          size = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < size) {\n      DAT_2007118c = size;\n    }\n    if (DAT_20071188 < size) {\n      DAT_20071188 = size;\n    }\n    uVar18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    currEntry = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00082108:\n  uBound = uVar18 - relocSize;\n  if ((uVar18 < relocSize) || ((int)uBound < 0x10)) {\n    FUNC_0008259c(symbolTable);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  Elf32_Rel_ARRAY_20070000[141].r_info = relocSize + currEntry;\n  *(uint *)(currEntry + 4) = relocSize | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = uBound | 1;\n  FUNC_0008259c(symbolTable);\n  return (int *)(currEntry + 8);\n}\n\n",
            "renaming": {
                "FUN_00081e14": "relocate_symbols_00081e14",
                "param_1": "symbolTable",
                "param_2": "symbolCount",
                "dVar1": "relEntry",
                "iVar2": "head",
                "uVar3": "uBound",
                "uVar4": "lowerBound",
                "iVar5": "iter1",
                "uVar6": "size",
                "dVar7": "currEntry",
                "uVar8": "offset",
                "iVar9": "iter2",
                "puVar10": "node",
                "dVar11": "prevEntry",
                "dVar12": "nextEntry",
                "iVar13": "index",
                "pdVar14": "relTable",
                "uVar15": "relocSize",
                "puVar16": "newNode",
                "dVar17": "adjustment"
            },
            "calling": [
                "FUN_000842a4",
                "FUN_000825b0",
                "FUN_00083f34",
                "FUN_00081df4"
            ],
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00083d9c",
                "FUN_00082970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008234c": {
            "entrypoint": "0x0008234c",
            "current_name": "copy_memory_0008234c",
            "code": "\nundefined4 * copyMemory_0008234c(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *dst;\n  undefined4 *src;\n  uint remaining_size;\n  uint length;\n  bool should_continue;\n  \n  dst = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      length = size - 4;\n      if (3 < size) {\n        do {\n          dest_ptr = source;\n          src = dst;\n          should_continue = length != 0;\n          length = length - 1;\n          *(undefined *)src = *(undefined *)dest_ptr;\n          dst = (undefined4 *)((int)src + 1);\n          source = (undefined4 *)((int)dest_ptr + 1);\n        } while (should_continue);\n        *(undefined *)(undefined4 *)((int)src + 1) =\n             *(undefined *)(undefined4 *)((int)dest_ptr + 1);\n        *(undefined *)((int)src + 2) = *(undefined *)((int)dest_ptr + 2);\n        *(undefined *)((int)src + 3) = *(undefined *)((int)dest_ptr + 3);\n        return destination;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      length = 4 - ((uint)destination & 3);\n      size = size - length;\n      dest_ptr = destination;\n      src = source;\n      if (((uint)destination & 1) != 0) {\n        src = (undefined4 *)((int)source + 1);\n        dest_ptr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      dst = dest_ptr;\n      source = src;\n      if ((length & 2) != 0) {\n        source = (undefined4 *)((int)src + 2);\n        dst = (undefined4 *)((int)dest_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)src;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *dst = *source;\n    dst[1] = source[1];\n    dst[2] = source[2];\n    dst[3] = source[3];\n    dst[4] = source[4];\n    dst[5] = source[5];\n    dst[6] = source[6];\n    dst[7] = source[7];\n    dst[8] = source[8];\n    dst[9] = source[9];\n    dst[10] = source[10];\n    dst[0xb] = source[0xb];\n    dst[0xc] = source[0xc];\n    dst[0xd] = source[0xd];\n    dst[0xe] = source[0xe];\n    dst[0xf] = source[0xf];\n    dst = dst + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remaining_size = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *dst = *source;\n      dst[1] = source[1];\n      dst[2] = source[2];\n      dst[3] = source[3];\n      dst = dst + 4;\n      source = source + 4;\n      should_continue = 0xf < remaining_size;\n      remaining_size = remaining_size - 0x10;\n    } while (should_continue);\n  }\n  length = remaining_size + 0xc;\n  src = dst;\n  dest_ptr = source;\n  if (0xfffffff3 < remaining_size) {\n    do {\n      source = dest_ptr + 1;\n      *src = *dest_ptr;\n      should_continue = 3 < length;\n      length = length - 4;\n      dst = src + 1;\n      src = src + 1;\n      dest_ptr = source;\n    } while (should_continue);\n  }\nLAB_000823d0:\n  if (length + 4 != 0) {\n    dest_ptr = dst;\n    src = source;\n    if ((length & 1) != 0) {\n      src = (undefined4 *)((int)source + 1);\n      dest_ptr = (undefined4 *)((int)dst + 1);\n      *(undefined *)dst = *(undefined *)source;\n    }\n    if ((length + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)src;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "dst",
                "puVar3": "src",
                "uVar4": "remaining_size",
                "uVar5": "length",
                "bVar6": "should_continue"
            },
            "calling": [
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082438": {
            "entrypoint": "0x00082438",
            "current_name": "reverse_memory_00082438",
            "code": "\nvoid reverseMemory_00082438(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  int index;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *tempPtr;\n  uint tempSize;\n  undefined *tempByte;\n  uint remainingSize;\n  \n  if ((src < dest) && (tempPtr = (undefined4 *)((int)src + size), dest < tempPtr)) {\n    tempByte = (undefined *)((int)dest + size);\n    index = size - 1;\n    if (size != 0) {\n      do {\n        tempPtr = (undefined4 *)((int)tempPtr + -1);\n        index = index + -1;\n        tempByte = tempByte + -1;\n        *tempByte = *(undefined *)tempPtr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    tempPtr = dest;\n    srcPtr = src;\n    do {\n      destPtr = tempPtr + 4;\n      *tempPtr = *srcPtr;\n      tempPtr[1] = srcPtr[1];\n      tempPtr[2] = srcPtr[2];\n      tempPtr[3] = srcPtr[3];\n      tempPtr = destPtr;\n      srcPtr = srcPtr + 4;\n    } while (destPtr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x10));\n    index = (size - 0x10 >> 4) + 1;\n    remainingSize = size & 0xf;\n    src = src + index * 4;\n    dest = dest + index * 4;\n    tempSize = remainingSize;\n    tempPtr = dest;\n    srcPtr = src;\n    if (3 < remainingSize) {\n      do {\n        tempSize = tempSize - 4;\n        *tempPtr = *srcPtr;\n        tempPtr = tempPtr + 1;\n        srcPtr = srcPtr + 1;\n      } while (3 < tempSize);\n      index = (remainingSize - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + index);\n      src = (undefined4 *)((int)src + index);\n      remainingSize = size & 3;\n    }\n    size = remainingSize;\n    if (size == 0) {\n      return;\n    }\n  }\n  tempPtr = dest;\n  do {\n    srcPtr = (undefined4 *)((int)tempPtr + 1);\n    *(undefined *)tempPtr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    tempPtr = srcPtr;\n  } while (srcPtr != (undefined4 *)(size + (int)dest));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082438": "reverse_memory_00082438",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "iVar1": "index",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "puVar4": "tempPtr",
                "uVar5": "tempSize",
                "puVar6": "tempByte",
                "uVar7": "remainingSize"
            },
            "calling": [
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082504": {
            "entrypoint": "0x00082504",
            "current_name": "fill_memory_00082504",
            "code": "\nvoid fillMemory_00082504(undefined4 *destination,undefined value,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *nextDestPtr;\n  undefined4 newValue;\n  uint tempSize;\n  bool isSizeZero;\n  \n  if (((uint)destination & 3) != 0) {\n    isSizeZero = size == 0;\n    destPtr = destination;\n    size = size - 1;\n    if (isSizeZero) {\n      return;\n    }\n    while( true ) {\n      destination = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      if (((uint)destination & 3) == 0) break;\n      isSizeZero = size == 0;\n      destPtr = destination;\n      size = size - 1;\n      if (isSizeZero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    newValue = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    tempSize = size;\n    destPtr = destination;\n    if (0xf < size) {\n      tempSize = size - 0x10;\n      do {\n        *destPtr = newValue;\n        destPtr[1] = newValue;\n        destPtr[2] = newValue;\n        destPtr[3] = newValue;\n        destPtr = destPtr + 4;\n      } while (destPtr != (undefined4 *)((int)destination + (tempSize & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      destination = destination + ((tempSize >> 4) + 1) * 4;\n      tempSize = size;\n      destPtr = destination;\n      if (size < 4) goto LAB_00082580;\n    }\n    do {\n      size = size - 4;\n      *destination = newValue;\n      destination = destination + 1;\n    } while (3 < size);\n    destination = (undefined4 *)((int)destPtr + (tempSize - 4 & 0xfffffffc) + 4);\n    size = tempSize & 3;\n  }\nLAB_00082580:\n  if (size != 0) {\n    destPtr = destination;\n    do {\n      nextDestPtr = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      destPtr = nextDestPtr;\n    } while (nextDestPtr != (undefined4 *)(size + (int)destination));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082504": "fill_memory_00082504",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "nextDestPtr",
                "uVar3": "newValue",
                "uVar4": "tempSize",
                "bVar5": "isSizeZero"
            },
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082598": {
            "entrypoint": "0x00082598",
            "current_name": "FUNC_00082598",
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d9c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008259c": {
            "entrypoint": "0x0008259c",
            "current_name": "FUNC_0008259c",
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d9c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000825a0": {
            "entrypoint": "0x000825a0",
            "current_name": "relocate_symbols_and_update_relocation_entry_000825a0",
            "code": "\nvoid relocate_symbols_and_update_relocation_entry_000825a0(undefined4 relocation_offset,undefined4 param_2)\n\n{\n  relocate_symbols_and_update_relocation_entry_000825a0_000825b0(relocation_entries[140].relocation_entry_offset,relocation_offset,param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825a0": "relocate_symbols_and_update_relocation_entry_000825a0",
                "param_1": "relocation_offset",
                "Elf32_Rel_ARRAY_20070000": "relocation_entries",
                "r_offset": "relocation_entry_offset"
            },
            "calling": [
                "FUN_00081622"
            ],
            "called": [
                "FUN_000825b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825b0": {
            "entrypoint": "0x000825b0",
            "current_name": "relocate_symbols_and_update_relocation_entry_000825b0",
            "code": "\nint * relocate_symbols_and_update_relocation_entry_000825b0(undefined4 *symbol_table,int *relocation_entry,uint relocation_count)\n\n{\n  dword relocation_info;\n  int *relocated_entry;\n  uint add_size;\n  int temp_var_1;\n  uint relocated_entry_value;\n  int temp_var_2;\n  int *temp_ptr_1;\n  uint relocated_entry_size;\n  uint new_entry_size;\n  int *temp_ptr_2;\n  \n  if (relocation_entry == (int *)0x0) {\n    relocated_entry = (int *)relocate_symbols_00081e14(symbol_table,relocation_count);\n    return relocated_entry;\n  }\n  FUNC_00082598();\n  relocated_entry_value = relocation_entry[-1];\n  relocated_entry_size = relocated_entry_value & 0xfffffffc;\n  relocated_entry = relocation_entry + -2;\n  if (relocation_count + 0xb < 0x17) {\n    new_entry_size = 0x10;\n  }\n  else {\n    new_entry_size = relocation_count + 0xb & 0xfffffff8;\n    if ((int)new_entry_size < 0) goto LAB_0008267c;\n  }\n  if (new_entry_size < relocation_count) {\nLAB_0008267c:\n    *symbol_table = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)relocated_entry_size < (int)new_entry_size) {\n    relocation_info = (int)relocated_entry + relocated_entry_size;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == relocation_info) {\n      add_size = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      relocation_info = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(new_entry_size + 0x10) <= (int)(add_size + relocated_entry_size)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)relocated_entry + new_entry_size;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (add_size + relocated_entry_size) - new_entry_size | 1;\n        relocation_entry[-1] = new_entry_size | relocation_entry[-1] & 1U;\n        FUNC_0008259c(symbol_table);\n        return relocation_entry;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(relocation_info + 4) & 0xfffffffe) + relocation_info + 4) & 1) == 0) {\n      add_size = *(uint *)(relocation_info + 4) & 0xfffffffc;\n      if ((int)new_entry_size <= (int)(add_size + relocated_entry_size)) {\n        temp_var_2 = *(int *)(relocation_info + 0xc);\n        temp_var_1 = *(int *)(relocation_info + 8);\n        *(int *)(temp_var_1 + 0xc) = temp_var_2;\n        *(int *)(temp_var_2 + 8) = temp_var_1;\n        relocated_entry_size = add_size + relocated_entry_size;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      add_size = 0;\n      relocation_info = 0;\n    }\n    if (-1 < (int)(relocated_entry_value << 0x1f)) {\n      temp_ptr_2 = (int *)((int)relocated_entry - relocation_entry[-2]);\n      relocated_entry_value = (temp_ptr_2[1] & 0xfffffffcU) + relocated_entry_size;\n      if (relocation_info != 0) {\n        if (relocation_info == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(new_entry_size + 0x10) <= (int)(add_size + relocated_entry_value)) {\n            relocated_entry = temp_ptr_2 + 2;\n            temp_var_1 = *relocated_entry;\n            temp_var_2 = temp_ptr_2[3];\n            relocated_entry_size = relocated_entry_size - 4;\n            *(int *)(temp_var_1 + 0xc) = temp_var_2;\n            *(int *)(temp_var_2 + 8) = temp_var_1;\n            if (relocated_entry_size < 0x25) {\n              temp_ptr_1 = relocated_entry;\n              if (0x13 < relocated_entry_size) {\n                temp_ptr_2[2] = *relocation_entry;\n                temp_ptr_2[3] = relocation_entry[1];\n                if (relocated_entry_size < 0x1c) {\n                  relocation_entry = relocation_entry + 2;\n                  temp_ptr_1 = temp_ptr_2 + 4;\n                }\n                else {\n                  temp_ptr_2[4] = relocation_entry[2];\n                  temp_ptr_2[5] = relocation_entry[3];\n                  if (relocated_entry_size == 0x24) {\n                    temp_ptr_2[6] = relocation_entry[4];\n                    temp_ptr_1 = relocation_entry + 5;\n                    relocation_entry = relocation_entry + 6;\n                    temp_ptr_2[7] = *temp_ptr_1;\n                    temp_ptr_1 = temp_ptr_2 + 8;\n                  }\n                  else {\n                    relocation_entry = relocation_entry + 4;\n                    temp_ptr_1 = temp_ptr_2 + 6;\n                  }\n                }\n              }\n              *temp_ptr_1 = *relocation_entry;\n              temp_ptr_1[1] = relocation_entry[1];\n              temp_ptr_1[2] = relocation_entry[2];\n            }\n            else {\n              reverse_memory_00082438(relocated_entry,relocation_entry);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)temp_ptr_2 + new_entry_size;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (add_size + relocated_entry_value) - new_entry_size | 1;\n            temp_ptr_2[1] = new_entry_size | temp_ptr_2[1] & 1U;\n            FUNC_0008259c(symbol_table);\n            return relocated_entry;\n          }\n        }\n        else {\n          add_size = add_size + relocated_entry_value;\n          if ((int)new_entry_size <= (int)add_size) {\n            temp_var_2 = *(int *)(relocation_info + 0xc);\n            temp_var_1 = *(int *)(relocation_info + 8);\n            *(int *)(temp_var_1 + 0xc) = temp_var_2;\n            *(int *)(temp_var_2 + 8) = temp_var_1;\n            temp_ptr_1 = temp_ptr_2 + 2;\n            temp_var_1 = *temp_ptr_1;\n            temp_var_2 = temp_ptr_2[3];\n            relocated_entry_value = relocated_entry_size - 4;\n            *(int *)(temp_var_1 + 0xc) = temp_var_2;\n            *(int *)(temp_var_2 + 8) = temp_var_1;\n            relocated_entry_size = add_size;\n            if (relocated_entry_value < 0x25) {\n              relocated_entry = temp_ptr_1;\n              if (0x13 < relocated_entry_value) {\n                temp_ptr_2[2] = *relocation_entry;\n                temp_ptr_2[3] = relocation_entry[1];\n                if (relocated_entry_value < 0x1c) {\n                  relocation_entry = relocation_entry + 2;\n                  relocated_entry = temp_ptr_2 + 4;\n                }\n                else {\n                  temp_ptr_2[4] = relocation_entry[2];\n                  temp_ptr_2[5] = relocation_entry[3];\n                  if (relocated_entry_value == 0x24) {\n                    temp_ptr_2[6] = relocation_entry[4];\n                    relocated_entry = relocation_entry + 5;\n                    relocation_entry = relocation_entry + 6;\n                    temp_ptr_2[7] = *relocated_entry;\n                    relocated_entry = temp_ptr_2 + 8;\n                  }\n                  else {\n                    relocation_entry = relocation_entry + 4;\n                    relocated_entry = temp_ptr_2 + 6;\n                  }\n                }\n              }\n              *relocated_entry = *relocation_entry;\n              relocated_entry[1] = relocation_entry[1];\n              relocated_entry[2] = relocation_entry[2];\n              relocated_entry_value = temp_ptr_2[1];\n              relocated_entry = temp_ptr_2;\n              relocation_entry = temp_ptr_1;\n            }\n            else {\n              reverse_memory_00082438(temp_ptr_1,relocation_entry);\n              relocated_entry_value = temp_ptr_2[1];\n              relocated_entry = temp_ptr_2;\n              relocation_entry = temp_ptr_1;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)new_entry_size <= (int)relocated_entry_value) {\n        temp_ptr_1 = temp_ptr_2 + 2;\n        temp_var_1 = *temp_ptr_1;\n        temp_var_2 = temp_ptr_2[3];\n        add_size = relocated_entry_size - 4;\n        *(int *)(temp_var_1 + 0xc) = temp_var_2;\n        *(int *)(temp_var_2 + 8) = temp_var_1;\n        relocated_entry_size = relocated_entry_value;\n        if (add_size < 0x25) {\n          relocated_entry = temp_ptr_1;\n          if (0x13 < add_size) {\n            temp_ptr_2[2] = *relocation_entry;\n            temp_ptr_2[3] = relocation_entry[1];\n            if (add_size < 0x1c) {\n              relocation_entry = relocation_entry + 2;\n              relocated_entry = temp_ptr_2 + 4;\n            }\n            else {\n              temp_ptr_2[4] = relocation_entry[2];\n              temp_ptr_2[5] = relocation_entry[3];\n              if (add_size == 0x24) {\n                temp_ptr_2[6] = relocation_entry[4];\n                relocated_entry = relocation_entry + 5;\n                relocation_entry = relocation_entry + 6;\n                temp_ptr_2[7] = *relocated_entry;\n                relocated_entry = temp_ptr_2 + 8;\n              }\n              else {\n                relocation_entry = relocation_entry + 4;\n                relocated_entry = temp_ptr_2 + 6;\n              }\n            }\n          }\n          *relocated_entry = *relocation_entry;\n          relocated_entry[1] = relocation_entry[1];\n          relocated_entry[2] = relocation_entry[2];\n          relocated_entry_value = temp_ptr_2[1];\n          relocated_entry = temp_ptr_2;\n          relocation_entry = temp_ptr_1;\n        }\n        else {\n          reverse_memory_00082438(temp_ptr_1,relocation_entry);\n          relocated_entry_value = temp_ptr_2[1];\n          relocated_entry = temp_ptr_2;\n          relocation_entry = temp_ptr_1;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    temp_ptr_2 = (int *)relocate_symbols_00081e14(symbol_table,relocation_count);\n    if (temp_ptr_2 == (int *)0x0) goto LAB_000826a4;\n    relocated_entry_value = relocation_entry[-1];\n    if (temp_ptr_2 + -2 != (int *)((relocated_entry_value & 0xfffffffe) + (int)relocated_entry)) {\n      relocated_entry_size = relocated_entry_size - 4;\n      if (relocated_entry_size < 0x25) {\n        relocated_entry = relocation_entry;\n        temp_ptr_1 = temp_ptr_2;\n        if (0x13 < relocated_entry_size) {\n          *temp_ptr_2 = *relocation_entry;\n          temp_ptr_2[1] = relocation_entry[1];\n          if (relocated_entry_size < 0x1c) {\n            relocated_entry = relocation_entry + 2;\n            temp_ptr_1 = temp_ptr_2 + 2;\n          }\n          else {\n            temp_ptr_2[2] = relocation_entry[2];\n            temp_ptr_2[3] = relocation_entry[3];\n            if (relocated_entry_size == 0x24) {\n              temp_ptr_2[4] = relocation_entry[4];\n              temp_ptr_2[5] = relocation_entry[5];\n              relocated_entry = relocation_entry + 6;\n              temp_ptr_1 = temp_ptr_2 + 6;\n            }\n            else {\n              relocated_entry = relocation_entry + 4;\n              temp_ptr_1 = temp_ptr_2 + 4;\n            }\n          }\n        }\n        *temp_ptr_1 = *relocated_entry;\n        temp_ptr_1[1] = relocated_entry[1];\n        temp_ptr_1[2] = relocated_entry[2];\n      }\n      else {\n        reverse_memory_00082438(temp_ptr_2,relocation_entry);\n      }\n      update_relocation_entry_00083d9c(symbol_table,relocation_entry);\n      goto LAB_000826a4;\n    }\n    relocated_entry_size = relocated_entry_size + (temp_ptr_2[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  add_size = relocated_entry_size - new_entry_size;\n  temp_ptr_2 = relocation_entry;\n  if (add_size < 0x10) {\n    relocated_entry[1] = relocated_entry_value & 1 | relocated_entry_size;\n    *(uint *)((int)relocated_entry + relocated_entry_size + 4) = *(uint *)((int)relocated_entry + relocated_entry_size + 4) | 1;\n  }\n  else {\n    relocated_entry[1] = relocated_entry_value & 1 | new_entry_size;\n    *(uint *)((int)relocated_entry + new_entry_size + 4) = add_size | 1;\n    *(uint *)((int)relocated_entry + add_size + new_entry_size + 4) = *(uint *)((int)relocated_entry + add_size + new_entry_size + 4) | 1;\n    update_relocation_entry_00083d9c(symbol_table,(int)relocated_entry + new_entry_size + 8);\n  }\nLAB_000826a4:\n  FUNC_0008259c(symbol_table);\n  return temp_ptr_2;\n}\n\n",
            "renaming": {
                "FUN_000825b0": "relocate_symbols_and_update_relocation_entry_000825b0",
                "param_1": "symbol_table",
                "param_2": "relocation_entry",
                "param_3": "relocation_count",
                "dVar1": "relocation_info",
                "piVar2": "relocated_entry",
                "uVar3": "add_size",
                "iVar4": "temp_var_1",
                "uVar5": "relocated_entry_value",
                "iVar6": "temp_var_2",
                "piVar7": "temp_ptr_1",
                "uVar8": "relocated_entry_size",
                "uVar9": "new_entry_size",
                "piVar10": "temp_ptr_2"
            },
            "calling": [
                "FUN_00083f34",
                "FUN_000825a0"
            ],
            "called": [
                "FUN_00081e14",
                "FUN_00082598",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082970": {
            "entrypoint": "0x00082970",
            "current_name": "calculate_and_update_sum_00082970",
            "code": "\nvoid calculate_and_update_sum_00082970(int *output,undefined4 input)\n\n{\n  int sum_result;\n  \n  DAT_200711bc = 0;\n  sum_result = calculate_sum_0008118c(input);\n  if ((sum_result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082970": "calculate_and_update_sum_00082970",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "sum_result"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "called": [
                "FUN_0008118c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082994": {
            "entrypoint": "0x00082994",
            "current_name": "FUNC_00082994",
            "code": "\nvoid FUNC_00082994(uint *param_1,uint *param_2)\n\n{\n  char cVar1;\n  ushort uVar2;\n  uint *puVar3;\n  uint *puVar4;\n  uint uVar5;\n  uint uVar6;\n  uint *puVar7;\n  bool bVar8;\n  \n  if ((((uint)param_1 ^ (uint)param_2) & 3) != 0) {\n    do {\n      cVar1 = *(char *)param_2;\n      *(char *)param_1 = cVar1;\n      param_2 = (uint *)((int)param_2 + 1);\n      param_1 = (uint *)((int)param_1 + 1);\n    } while (cVar1 != '\\0');\n    return;\n  }\n  if (((uint)param_2 & 3) != 0) {\n    puVar4 = param_2;\n    if (((uint)param_2 & 1) != 0) {\n      puVar4 = (uint *)((int)param_2 + 1);\n      cVar1 = *(char *)param_2;\n      *(char *)param_1 = cVar1;\n      param_1 = (uint *)((int)param_1 + 1);\n      if (cVar1 == '\\0') {\n        return;\n      }\n    }\n    param_2 = puVar4;\n    if (((uint)puVar4 & 2) != 0) {\n      param_2 = (uint *)((int)puVar4 + 2);\n      uVar2 = *(ushort *)puVar4;\n      bVar8 = (uVar2 & 0xff) == 0;\n      if (bVar8) {\n        *(char *)param_1 = (char)uVar2;\n      }\n      else {\n        *(ushort *)param_1 = uVar2;\n        bVar8 = (uVar2 & 0xff00) == 0;\n        param_1 = (uint *)((int)param_1 + 2);\n      }\n      if (bVar8) {\n        return;\n      }\n    }\n  }\n  uVar5 = *param_2;\n  puVar4 = param_2 + 1;\n  puVar7 = param_1;\n  if (((uint)param_2 & 4) != 0) {\n    if ((uVar5 + 0xfefefeff & ~uVar5 & 0x80808080) != 0) goto LAB_000829f8;\n    puVar7 = param_1 + 1;\n    *param_1 = uVar5;\n    puVar4 = param_2 + 2;\n    uVar5 = param_2[1];\n  }\n  while( true ) {\n    puVar3 = puVar4 + 1;\n    uVar6 = *puVar4;\n    param_1 = puVar7;\n    if ((uVar5 + 0xfefefeff & ~uVar5 & 0x80808080) != 0) break;\n    param_1 = puVar7 + 1;\n    *puVar7 = uVar5;\n    uVar5 = uVar6;\n    if ((uVar6 + 0xfefefeff & ~uVar6 & 0x80808080) != 0) break;\n    puVar4 = puVar4 + 2;\n    uVar5 = *puVar3;\n    puVar7 = puVar7 + 2;\n    *param_1 = uVar6;\n  }\nLAB_000829f8:\n  do {\n    *(char *)param_1 = (char)uVar5;\n    uVar6 = uVar5 & 0xff;\n    uVar5 = uVar5 >> 8 | uVar5 << 0x18;\n    param_1 = (uint *)((int)param_1 + 1);\n  } while (uVar6 != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082994": "FUNC_00082994"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00082a50": {
            "entrypoint": "0x00082a50",
            "current_name": "FUNC_00082a50",
            "code": "\nint FUNC_00082a50(uint param_1)\n\n{\n  int iVar1;\n  uint *puVar2;\n  uint uVar3;\n  bool bVar4;\n  \n  puVar2 = (uint *)(param_1 & 0xfffffffc);\n  iVar1 = -(param_1 & 3);\n  uVar3 = *puVar2;\n  if ((param_1 & 3) != 0) {\n    uVar3 = uVar3 | 0xffffffffU >> ((iVar1 + 4U & 0x1f) << 3);\n  }\n  while (puVar2 = puVar2 + 1, (uVar3 + 0xfefefeff & ~uVar3 & 0x80808080) == 0) {\n    iVar1 = iVar1 + 4;\n    uVar3 = *puVar2;\n  }\n  bVar4 = (uVar3 & 0xff) == 0;\n  if (!bVar4) {\n    iVar1 = iVar1 + 1;\n    bVar4 = (uVar3 & 0xff00) == 0;\n  }\n  if (!bVar4) {\n    iVar1 = iVar1 + 1;\n    bVar4 = (uVar3 & 0xff0000) == 0;\n  }\n  if (!bVar4) {\n    iVar1 = iVar1 + 1;\n  }\n  return iVar1;\n}\n\n",
            "renaming": {
                "FUN_00082a50": "FUNC_00082a50"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "entrypoint": "0x00082ac0",
            "current_name": "process_binary_data_00082ac0",
            "code": "\nint processBinaryData_00082ac0(undefined4 param1,int param2,int **param3)\n\n{\n  int *variable1;\n  int returnValue;\n  int *variable2;\n  uint variable3;\n  undefined4 *variable4;\n  uint variable5;\n  uint variable6;\n  \n  if (-1 < *(int *)(param2 + 100) << 0x12) {\n    returnValue = process_binary_00083f34();\n    param3[2] = (int *)0x0;\n    param3[1] = (int *)0x0;\n    return returnValue;\n  }\n  variable2 = param3[2];\n  variable1 = *param3;\n  while (variable2 != (int *)0x0) {\n    variable5 = variable1[1];\n    variable6 = variable5 >> 2;\n    if (variable6 != 0) {\n      variable4 = (undefined4 *)(*variable1 + -4);\n      variable3 = 0;\n      do {\n        variable4 = variable4 + 1;\n        returnValue = process_data_00083c40(param1,*variable4,param2);\n        variable3 = variable3 + 1;\n        if (returnValue == -1) goto LAB_00082b00;\n      } while (variable6 != variable3);\n      variable2 = param3[2];\n    }\n    variable2 = (int *)((int)variable2 - (variable5 & 0xfffffffc));\n    param3[2] = variable2;\n    variable1 = variable1 + 2;\n  }\n  returnValue = 0;\nLAB_00082b00:\n  param3[2] = (int *)0x0;\n  param3[1] = (int *)0x0;\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00082ac0": "process_binary_data_00082ac0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "piVar1": "variable1",
                "iVar2": "returnValue",
                "piVar3": "variable2",
                "uVar4": "variable3",
                "puVar5": "variable4",
                "uVar6": "variable5",
                "uVar7": "variable6"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00083c40",
                "FUN_00083f34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082b38": {
            "entrypoint": "0x00082b38",
            "current_name": "FUNC_00082b38",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint FUNC_00082b38(int param_1,int param_2,int *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  int ********ppppppppiVar6;\n  int *piVar7;\n  int iVar8;\n  char cVar9;\n  int *******pppppppiVar10;\n  uint uVar11;\n  int **ppiVar12;\n  uint uVar13;\n  uint uVar14;\n  int iVar15;\n  int ********ppppppppiVar16;\n  int iVar17;\n  int *******pppppppiVar18;\n  int *piVar19;\n  int *******pppppppiVar20;\n  uint uVar21;\n  int *piVar22;\n  int *******pppppppiVar23;\n  undefined4 uVar24;\n  int ********ppppppppiVar25;\n  bool bVar26;\n  longlong lVar27;\n  int *******local_dc;\n  int *******local_d4;\n  int **local_c8;\n  int local_c4;\n  char *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  int ********local_9c;\n  int local_98;\n  int *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  int *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  uVar13 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar13 = uVar13 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar13;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar13 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar13 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar8 = process_relocation_entry_00083808(param_1,param_2);\n    if (iVar8 != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    iVar8 = process_and_validate_data_0008378c(param_1,param_2,param_3,param_4);\n    return iVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (char *)0x0;\n  local_94 = (int *******)0x0;\n  local_98 = 0;\n  local_c4 = 0;\n  ppppppppiVar6 = (int ********)local_68;\n  local_c8 = param_4;\n  local_9c = (int ********)local_68;\nLAB_00082b9e:\n  pppppppiVar10 = param_3;\n  if ((*(char *)param_3 != '\\0') && (*(char *)param_3 != '%')) {\n    do {\n      pppppppiVar10 = (int *******)((int)pppppppiVar10 + 1);\n      if (*(char *)pppppppiVar10 == '\\0') break;\n    } while (*(char *)pppppppiVar10 != '%');\n    pppppppiVar20 = (int *******)((int)pppppppiVar10 - (int)param_3);\n    if (pppppppiVar20 != (int *******)0x0) {\n      local_98 = local_98 + 1;\n      local_94 = (int *******)((int)local_94 + (int)pppppppiVar20);\n      *ppppppppiVar6 = param_3;\n      ppppppppiVar6[1] = pppppppiVar20;\n      if (local_98 < 8) {\n        ppppppppiVar6 = ppppppppiVar6 + 2;\n      }\n      else {\n        if (local_94 == (int *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppiVar20;\n          local_98 = 0;\n          ppppppppiVar6 = (int ********)local_68;\n          goto LAB_00082bee;\n        }\n        iVar8 = process_binary_data_00082ac0(param_1,param_2,&local_9c);\n        ppppppppiVar6 = (int ********)local_68;\n        if (iVar8 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppiVar20;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)pppppppiVar10 != '\\0') {\n    local_a1 = '\\0';\n    uVar14 = (uint)*(byte *)((int)pppppppiVar10 + 1);\n    uVar13 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar26 = false;\n    pppppppiVar20 = (int *******)0x0;\n    local_d4 = (int *******)0xffffffff;\n    param_3 = (int *******)((int)pppppppiVar10 + 1);\nLAB_00082c12:\n    param_3 = (int *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar14) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar14 != 0) {\n        local_dc = (int *******)0x1;\n        local_d4 = (int *******)0x1;\n        ppppppppiVar25 = (int ********)&local_90;\n        local_90 = (char)uVar14;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppiVar20 = (int *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppiVar20 < 0) {\n        pppppppiVar20 = (int *******)-(int)pppppppiVar20;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar14 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar13 = uVar13 | 4;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar14 = (uint)*(byte *)param_3;\n      pppppppiVar10 = (int *******)((int)param_3 + 1);\n      if (uVar14 == 0x2a) {\n        uVar14 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (int *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppiVar10;\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar11 = uVar14 - 0x30;\n      if (uVar11 < 10) {\n        uVar21 = 0;\n        do {\n          param_3 = (int *******)((int)pppppppiVar10 + 1);\n          uVar14 = (uint)*(byte *)pppppppiVar10;\n          uVar21 = uVar11 + uVar21 * 10;\n          uVar11 = uVar14 - 0x30;\n          pppppppiVar10 = param_3;\n        } while (uVar11 < 10);\n        local_d4 = (int *******)(uVar21 | (int)uVar21 >> 0x1f);\n      }\n      else {\n        local_d4 = (int *******)0x0;\n        param_3 = pppppppiVar10;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar13 = uVar13 | 0x80;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar19 = *local_c8;\n      piVar22 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar8 = (uint)bVar2 << 4;\n      iVar15 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar15 = (uint)bVar26 << 6, bVar26 != 0)) {\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        iVar8 = iVar15;\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar26 == false)) {\n        iVar8 = 1;\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar8 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = \"0123456789ABCDEF\";\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar19 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (int *******)0x1;\n      local_90 = SUB41(piVar19,0);\n      local_d4 = (int *******)0x1;\n      ppppppppiVar25 = (int ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar26 != false)) {\n        piVar19 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar22 < 0) {\n        bVar26 = piVar19 != (int *)0x0;\n        piVar19 = (int *)-(int)piVar19;\n        piVar22 = (int *)(-(int)piVar22 - (uint)bVar26);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar8 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar13 = uVar13 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar14 = (uint)piVar19 | (uint)piVar22;\n      iVar8 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar26 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar14 = (uint)*(byte *)param_3;\n      if (uVar14 == 0x6c) {\n        bVar1 = true;\n        uVar14 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (int *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar26) {\n            piVar19 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar19 = (short)local_c4;\n          }\n          else {\n            piVar19 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *piVar19 = local_c4;\n          }\n        }\n        else {\n          piVar19 = *local_c8;\n          local_c8 = local_c8 + 1;\n          *piVar19 = local_c4;\n        }\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        *piVar19 = local_c4;\n        piVar19[1] = local_c4 >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      iVar8 = 0;\n      break;\n    case 0x70:\n      piVar19 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar22 = (int *)0x0;\n      local_a0 = 0x30;\n      local_c0 = \"0123456789abcdef\";\n      iVar8 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppiVar25 = (int ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppiVar25 != (int ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)FUNC_00082a50(ppppppppiVar25);\n          pppppppiVar10 = (int *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          iVar8 = find_character_00084384(ppppppppiVar25,0,local_d4);\n          cVar4 = local_a1;\n          if (iVar8 == 0) {\n            pppppppiVar10 = (int *******)0x0;\n          }\n          else {\n            pppppppiVar18 = (int *******)(iVar8 - (int)ppppppppiVar25);\n            if ((int)local_d4 <= (int)(int *******)(iVar8 - (int)ppppppppiVar25)) {\n              pppppppiVar18 = local_d4;\n            }\n            pppppppiVar10 = (int *******)0x0;\n            local_d4 = pppppppiVar18;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < local_d4) {\n        local_d4 = (int *******)0x6;\n      }\n      local_dc = (int *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppiVar25 = (int ********)&UNK_00085840;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppiVar10 = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      iVar8 = 1;\n      break;\n    case 0x78:\n      local_c0 = \"0123456789abcdef\";\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar26 != false)) {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar19 | (uint)piVar22) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar8 = 2;\n        local_9f = (char)uVar14;\n      }\n      else {\n        iVar8 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar13 = uVar13 & 0xffffff7f;\n    }\n    uVar14 = (uint)piVar19 | (uint)piVar22;\njoined_r0x00082d78:\n    lVar27 = CONCAT44(piVar22,piVar19);\n    pppppppiVar10 = local_d4;\n    if ((uVar14 == 0) && (local_d4 == (int *******)0x0)) {\n      ppppppppiVar25 = (int ********)local_68;\n      if ((iVar8 != 0) || (!bVar3)) goto LAB_00082da0;\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar8 == 1) {\n      if (piVar22 != (int *)0x0 || (int *)0x9 < piVar19) {\n        ppppppppiVar16 = (int ********)(&cStack_6a + 1);\n        do {\n          ppppppppiVar25 = ppppppppiVar16;\n          uVar24 = (undefined4)((ulonglong)lVar27 >> 0x20);\n          cVar9 = '\\n';\n          calculate_difference_00084750((int)lVar27,uVar24,10,0);\n          *(char *)ppppppppiVar25 = cVar9 + '0';\n          lVar27 = calculate_difference_00084750((int)lVar27,uVar24,10,0);\n          ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n        } while (lVar27 != 0);\n        local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar19 + '0';\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppiVar16 = (int ********)(&cStack_6a + 1);\n    if (iVar8 != 2) goto LAB_0008337e;\n    do {\n      ppppppppiVar25 = ppppppppiVar16;\n      uVar14 = (uint)piVar19 & 0xf;\n      piVar19 = (int *)((uint)piVar19 >> 4 | (int)piVar22 << 0x1c);\n      piVar22 = (int *)((uint)piVar22 >> 4);\n      *(char *)ppppppppiVar25 = local_c0[uVar14];\n      ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    } while (((uint)piVar19 | (uint)piVar22) != 0);\n    local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (int *******)0x0) {\n    process_binary_data_00082ac0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    ppppppppiVar25 = ppppppppiVar16;\n    piVar7 = (int *)((uint)piVar19 >> 3 | (int)piVar22 << 0x1d);\n    piVar22 = (int *)((uint)piVar22 >> 3);\n    iVar8 = ((uint)piVar19 & 7) + 0x30;\n    *(char *)ppppppppiVar25 = (char)iVar8;\n    ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    piVar19 = piVar7;\n  } while (((uint)piVar7 | (uint)piVar22) != 0);\n  if (bVar3) {\n    if (iVar8 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    }\n    else {\n      *(undefined *)((int)ppppppppiVar25 + -1) = 0x30;\n      ppppppppiVar25 = ppppppppiVar16;\n      local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar16);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppiVar10) {\n    local_dc = pppppppiVar10;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (int *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  if (bVar5) {\n    local_dc = (int *******)((int)local_dc + 2);\n  }\n  if ((uVar13 == 0) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar18)) {\n    if ((int)pppppppiVar18 < 0x11) {\n      local_98 = local_98 + 1;\n    }\n    else {\n      do {\n        pppppppiVar23 = pppppppiVar18;\n        iVar8 = local_98 + 1;\n        local_94 = local_94 + 4;\n        *ppppppppiVar6 = (int *******)0x85808;\n        ppppppppiVar6[1] = (int *******)0x10;\n        if (iVar8 < 8) {\n          iVar15 = local_98 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\n          local_98 = iVar8;\n        }\n        else if (local_94 == (int *******)0x0) {\n          iVar15 = 1;\n          ppppppppiVar6 = (int ********)local_68;\n          local_98 = 0;\n        }\n        else {\n          local_98 = iVar8;\n          iVar8 = process_binary_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 != 0) goto LAB_000833de;\n          iVar15 = local_98 + 1;\n          ppppppppiVar6 = (int ********)local_68;\n        }\n        pppppppiVar18 = pppppppiVar23 + -4;\n      } while (0x10 < (int)pppppppiVar18);\n      pppppppiVar18 = pppppppiVar23 + -4;\n      local_98 = iVar15;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar18);\n    *ppppppppiVar6 = (int *******)0x85808;\n    ppppppppiVar6[1] = pppppppiVar18;\n    if (local_98 < 8) {\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_binary_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  else {\n    iVar8 = local_98 + 1;\n  }\n  iVar15 = iVar8;\n  if (local_a1 != '\\0') {\n    local_94 = (int *******)((int)local_94 + 1);\n    iVar15 = 1;\n    *ppppppppiVar6 = (int *******)&local_a1;\n    ppppppppiVar6[1] = (int *******)0x1;\n    local_98 = iVar8;\n    if (iVar8 < 8) {\n      iVar15 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_binary_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar15 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  iVar8 = iVar15;\n  iVar17 = local_98;\n  if (bVar5) {\n    local_94 = (int *******)((int)local_94 + 2);\n    *ppppppppiVar6 = (int *******)&local_a0;\n    ppppppppiVar6[1] = (int *******)0x2;\n    if (iVar15 < 8) {\n      iVar8 = iVar15 + 1;\n      iVar17 = iVar15;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      iVar17 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      local_98 = iVar15;\n      iVar8 = process_binary_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      iVar17 = local_98;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  local_98 = iVar17;\n  if ((uVar13 == 0x80) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar18)) {\n    if (0x10 < (int)pppppppiVar18) {\n      do {\n        while( true ) {\n          pppppppiVar23 = pppppppiVar18;\n          local_98 = iVar17 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar6 = (int *******)&DAT_00085848;\n          ppppppppiVar6[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar8 = iVar17 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\nLAB_0008348e:\n          iVar17 = local_98;\n          pppppppiVar18 = pppppppiVar23 + -4;\n          if ((int)(pppppppiVar23 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_binary_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar8 = local_98 + 1;\n            ppppppppiVar6 = (int ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        iVar8 = 1;\n        iVar17 = 0;\n        pppppppiVar18 = pppppppiVar23 + -4;\n        ppppppppiVar6 = (int ********)local_68;\n      } while (0x10 < (int)(pppppppiVar23 + -4));\nLAB_000834b4:\n      pppppppiVar18 = pppppppiVar23 + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar18);\n    *ppppppppiVar6 = (int *******)&DAT_00085848;\n    ppppppppiVar6[1] = pppppppiVar18;\n    local_98 = iVar8;\n    if (iVar8 < 8) {\n      iVar8 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_binary_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  pppppppiVar10 = (int *******)((int)pppppppiVar10 - (int)local_d4);\n  ppppppppiVar16 = (int ********)local_68;\n  if ((int)pppppppiVar10 < 1) {\nLAB_000832c6:\n    local_94 = (int *******)((int)local_94 + (int)local_d4);\n    *ppppppppiVar6 = (int *******)ppppppppiVar25;\n    ppppppppiVar6[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = iVar8;\n    if (iVar8 < 8) goto LAB_0008345a;\n    if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n    }\n    else {\n      iVar8 = process_binary_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    iVar15 = local_98;\n    if (0x10 < (int)pppppppiVar10) {\n      do {\n        while( true ) {\n          pppppppiVar18 = pppppppiVar10;\n          local_98 = iVar15 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar6 = (int *******)&DAT_00085848;\n          ppppppppiVar6[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar8 = iVar15 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\nLAB_00083282:\n          iVar15 = local_98;\n          pppppppiVar10 = pppppppiVar18 + -4;\n          if ((int)(pppppppiVar18 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_binary_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar8 = local_98 + 1;\n            ppppppppiVar6 = (int ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        iVar8 = 1;\n        ppppppppiVar6 = (int ********)local_68;\n        iVar15 = 0;\n        pppppppiVar10 = pppppppiVar18 + -4;\n      } while (0x10 < (int)(pppppppiVar18 + -4));\nLAB_000832aa:\n      pppppppiVar10 = pppppppiVar18 + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar10);\n    *ppppppppiVar6 = (int *******)&DAT_00085848;\n    ppppppppiVar6[1] = pppppppiVar10;\n    if (iVar8 < 8) {\n      iVar8 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (int *******)0x0) {\n      local_98 = iVar8;\n      iVar8 = process_binary_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = 1;\n    ppppppppiVar6 = (int ********)local_68;\n    local_68 = (undefined  [4])ppppppppiVar25;\nLAB_0008345a:\n    ppppppppiVar16 = ppppppppiVar6 + 2;\n    local_94 = local_d4;\n  }\n  if (((uVar13 & 4) != 0) &&\n     (pppppppiVar10 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar10)) {\n    iVar8 = local_98;\n    if ((int)pppppppiVar10 < 0x11) {\n      iVar15 = local_98 + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = iVar8 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar16 = (int *******)0x85808;\n          ppppppppiVar16[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar15 = iVar8 + 2;\n          ppppppppiVar16 = ppppppppiVar16 + 2;\nLAB_00083316:\n          pppppppiVar10 = pppppppiVar10 + -4;\n          iVar8 = local_98;\n          if ((int)pppppppiVar10 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_binary_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar15 = local_98 + 1;\n            ppppppppiVar16 = (int ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppiVar10 = pppppppiVar10 + -4;\n        iVar15 = 1;\n        iVar8 = 0;\n        ppppppppiVar16 = (int ********)local_68;\n      } while (0x10 < (int)pppppppiVar10);\n    }\nLAB_0008333e:\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar10);\n    *ppppppppiVar16 = (int *******)0x85808;\n    ppppppppiVar16[1] = pppppppiVar10;\n    local_98 = iVar15;\n    if (7 < iVar15) {\n      if (local_94 == (int *******)0x0) {\n        if ((int)local_dc < (int)pppppppiVar20) {\n          local_dc = pppppppiVar20;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar8 = process_binary_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppiVar20) {\n    local_dc = pppppppiVar20;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (int *******)0x0) &&\n     (iVar8 = process_binary_data_00082ac0(param_1,param_2,&local_9c), iVar8 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = 0;\n  ppppppppiVar6 = (int ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar11 = uVar14 - 0x30;\n  pppppppiVar20 = (int *******)0x0;\n  pppppppiVar10 = param_3;\n  do {\n    param_3 = (int *******)((int)pppppppiVar10 + 1);\n    uVar14 = (uint)*(byte *)pppppppiVar10;\n    pppppppiVar20 = (int *******)(uVar11 + (int)pppppppiVar20 * 10);\n    uVar11 = uVar14 - 0x30;\n    pppppppiVar10 = param_3;\n  } while (uVar11 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar14 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "calling": [
                "FUN_0008378c"
            ],
            "called": [
                "FUN_00084750",
                "FUN_0008378c",
                "FUN_00082a50",
                "FUN_00082ac0",
                "FUN_00084384",
                "FUN_00083b14",
                "FUN_00083808"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008378c": {
            "entrypoint": "0x0008378c",
            "current_name": "process_and_validate_data_0008378c",
            "code": "\nint process_and_validate_data_0008378c(undefined4 param1,int param2)\n\n{\n  int result;\n  int data_processing_result;\n  undefined *buffer [2];\n  undefined4 buffer_size;\n  ushort flags;\n  undefined2 value;\n  undefined *buffer_ptr;\n  undefined4 buffer_size_copy;\n  undefined4 count;\n  undefined4 value_copy;\n  undefined4 value2;\n  undefined4 constant_value;\n  undefined data_stack [1024];\n  \n  constant_value = *(undefined4 *)(param2 + 100);\n  value_copy = *(undefined4 *)(param2 + 0x1c);\n  value = *(undefined2 *)(param2 + 0xe);\n  value2 = *(undefined4 *)(param2 + 0x24);\n  buffer[0] = data_stack;\n  flags = *(ushort *)(param2 + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  buffer_size_copy = 0x400;\n  count = 0;\n  buffer_ptr = buffer[0];\n  result = FUNC_00082b38(param1,buffer);\n  if ((-1 < result) && (data_processing_result = process_data_00083adc(param1,buffer), data_processing_result != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)flags << 0x19) < 0) {\n    *(ushort *)(param2 + 0xc) = *(ushort *)(param2 + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008378c": "process_and_validate_data_0008378c",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "iVar2": "data_processing_result",
                "local_488": "buffer",
                "local_480": "buffer_size",
                "local_47c": "flags",
                "local_47a": "value",
                "local_478": "buffer_ptr",
                "local_474": "buffer_size_copy",
                "local_470": "count",
                "local_46c": "value_copy",
                "local_464": "value2",
                "local_424": "constant_value",
                "auStack_420": "data_stack"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint FUN_0008378c(undefined4 param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined *local_488 [2];\n  undefined4 local_480;\n  ushort local_47c;\n  undefined2 local_47a;\n  undefined *local_478;\n  undefined4 local_474;\n  undefined4 local_470;\n  undefined4 local_46c;\n  undefined4 local_464;\n  undefined4 local_424;\n  undefined auStack_420 [1024];\n  \n  local_424 = *(undefined4 *)(param_2 + 100);\n  local_46c = *(undefined4 *)(param_2 + 0x1c);\n  local_47a = *(undefined2 *)(param_2 + 0xe);\n  local_464 = *(undefined4 *)(param_2 + 0x24);\n  local_488[0] = auStack_420;\n  local_47c = *(ushort *)(param_2 + 0xc) & 0xfffd;\n  local_480 = 0x400;\n  local_474 = 0x400;\n  local_470 = 0;\n  local_478 = local_488[0];\n  iVar1 = FUNC_00082b38(param_1,local_488);\n  if ((-1 < iVar1) && (iVar2 = process_data_00083adc(param_1,local_488), iVar2 != 0)) {\n    iVar1 = -1;\n  }\n  if ((int)((uint)local_47c << 0x19) < 0) {\n    *(ushort *)(param_2 + 0xc) = *(ushort *)(param_2 + 0xc) | 0x40;\n  }\n  return iVar1;\n}\n\n"
        },
        "FUN_00083808": {
            "entrypoint": "0x00083808",
            "current_name": "process_relocation_entry_00083808",
            "code": "\nundefined4 processRelocationEntry_00083808(undefined4 *result,int *entry)\n\n{\n  int tempVar1;\n  int tempVar2;\n  uint value;\n  ushort ushortValue;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  ushortValue = *(ushort *)(entry + 3);\n  value = (uint)ushortValue;\n  if ((int)(value << 0x1c) < 0) {\n    tempVar2 = entry[4];\n  }\n  else {\n    if (-1 < (int)(value << 0x1b)) {\n      *result = 9;\n      *(ushort *)(entry + 3) = ushortValue | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(value << 0x1d) < 0) {\n      if ((int *)entry[0xc] != (int *)0x0) {\n        if ((int *)entry[0xc] != entry + 0x10) {\n          update_relocation_entry_00083d9c(result);\n          ushortValue = *(ushort *)(entry + 3);\n        }\n        entry[0xc] = 0;\n      }\n      tempVar2 = entry[4];\n      ushortValue = ushortValue & 0xffdb;\n      *entry = tempVar2;\n      entry[1] = 0;\n    }\n    else {\n      tempVar2 = entry[4];\n    }\n    *(ushort *)(entry + 3) = ushortValue | 8;\n    value = (uint)(ushortValue | 8);\n  }\n  if ((tempVar2 == 0) && ((value & 0x280) != 0x200)) {\n    initialize_parameters_000842a4(result,entry);\n    value = (uint)*(ushort *)(entry + 3);\n    tempVar2 = entry[4];\n  }\n  if ((value & 1) == 0) {\n    tempVar1 = 0;\n    if (-1 < (int)(value << 0x1e)) {\n      tempVar1 = entry[5];\n    }\n    entry[2] = tempVar1;\n  }\n  else {\n    entry[6] = -entry[5];\n    entry[2] = 0;\n  }\n  if ((tempVar2 == 0) && ((int)((uint)*(ushort *)(entry + 3) << 0x18) < 0)) {\n    *(ushort *)(entry + 3) = *(ushort *)(entry + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083808": "process_relocation_entry_00083808",
                "param_1": "result",
                "param_2": "entry",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2",
                "uVar3": "value",
                "uVar4": "ushortValue"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_000842a4",
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083974": {
            "entrypoint": "0x00083974",
            "current_name": "identity_00083974",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\nundefined4 identity_00083974(undefined4 value)\n\n{\n  return value;\n}\n\n",
            "renaming": {
                "FUN_00083974": "identity_00083974",
                "param_1": "value"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [
                "FUN_00081df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083adc": {
            "entrypoint": "0x00083adc",
            "current_name": "process_data_00083adc",
            "code": "\nundefined4 process_data_00083adc(int *input_data,int *output_data)\n\n{\n  int *pointer_var1;\n  int int_var2;\n  ushort ushort_var3;\n  uint uint_var4;\n  int int_var5;\n  code *function_pointer_var;\n  undefined4 unaff_var4;\n  int int_var7;\n  \n  if ((input_data != (int *)0x0) && (input_data[0xe] == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  if (*(short *)(output_data + 3) == 0) {\n    return 0;\n  }\n  ushort_var3 = *(ushort *)(output_data + 3);\n  if ((int)((uint)ushort_var3 << 0x1c) < 0) {\n    int_var7 = output_data[4];\n    if (int_var7 == 0) {\n      return 0;\n    }\n    int_var2 = *output_data;\n    if ((ushort_var3 & 3) == 0) {\n      int_var5 = output_data[5];\n    }\n    else {\n      int_var5 = 0;\n    }\n    *output_data = int_var7;\n    int_var2 = int_var2 - int_var7;\n    output_data[2] = int_var5;\n    do {\n      if (int_var2 < 1) {\n        return 0;\n      }\n      int_var5 = (*(code *)output_data[9])(input_data,output_data[7],int_var7,int_var2,unaff_var4);\n      int_var2 = int_var2 - int_var5;\n      int_var7 = int_var7 + int_var5;\n    } while (0 < int_var5);\nLAB_00083a54:\n    *(ushort *)(output_data + 3) = *(ushort *)(output_data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(output_data + 3) = ushort_var3 | 0x800;\n  if ((output_data[1] < 1) && (output_data[0xf] < 1)) {\n    return 0;\n  }\n  function_pointer_var = (code *)output_data[10];\n  if (function_pointer_var == (code *)0x0) {\n    return 0;\n  }\n  uint_var4 = (uint)(ushort_var3 | 0x800);\n  int_var7 = *input_data;\n  *input_data = 0;\n  if ((ushort_var3 & 0x1000) == 0) {\n    int_var2 = (*function_pointer_var)(input_data,output_data[7],uint_var4 & 0x1000,1);\n    if ((int_var2 == -1) && (int_var5 = *input_data, int_var5 != 0)) {\n      if ((int_var5 == 0x1d) || (int_var5 == 0x16)) {\n        *input_data = int_var7;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    uint_var4 = (uint)*(ushort *)(output_data + 3);\n    function_pointer_var = (code *)output_data[10];\n  }\n  else {\n    int_var2 = output_data[0x14];\n  }\n  if (((int)(uint_var4 << 0x1d) < 0) && (int_var2 = int_var2 - output_data[1], output_data[0xc] != 0)) {\n    int_var2 = int_var2 - output_data[0xf];\n  }\n  int_var2 = (*function_pointer_var)(input_data,output_data[7],int_var2,0);\n  if (int_var2 == -1) {\n    int_var5 = *input_data;\n    if (int_var5 != 0) {\n      if ((int_var5 != 0x1d) && (int_var5 != 0x16)) {\n        *(ushort *)(output_data + 3) = *(ushort *)(output_data + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(output_data + 3) = *(ushort *)(output_data + 3) & 0xf7ff;\n      *output_data = output_data[4];\n      output_data[1] = 0;\n      goto LAB_00083a00;\n    }\n    ushort_var3 = *(ushort *)(output_data + 3) & 0xf7ff;\n    output_data[1] = 0;\n    *(ushort *)(output_data + 3) = ushort_var3;\n    *output_data = output_data[4];\n  }\n  else {\n    ushort_var3 = *(ushort *)(output_data + 3) & 0xf7ff;\n    *output_data = output_data[4];\n    *(ushort *)(output_data + 3) = ushort_var3;\n    output_data[1] = 0;\n  }\n  if ((int)((uint)ushort_var3 << 0x13) < 0) {\n    output_data[0x14] = int_var2;\n  }\nLAB_00083a00:\n  pointer_var1 = (int *)output_data[0xc];\n  *input_data = int_var7;\n  if (pointer_var1 == (int *)0x0) {\n    return 0;\n  }\n  if (pointer_var1 != output_data + 0x10) {\n    update_relocation_entry_00083d9c(input_data);\n  }\n  output_data[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083adc": "process_data_00083adc",
                "param_1": "input_data",
                "param_2": "output_data",
                "piVar1": "pointer_var1",
                "iVar2": "int_var2",
                "uVar3": "ushort_var3",
                "uVar4": "uint_var4",
                "iVar5": "int_var5",
                "pcVar6": "function_pointer_var",
                "unaff_r4": "unaff_var4",
                "iVar7": "int_var7"
            },
            "calling": [
                "FUN_0008378c",
                "FUN_00083f34",
                "FUN_000846a4",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b14": {
            "entrypoint": "0x00083b14",
            "current_name": "initialize_data_structures_00083b14",
            "code": "\nvoid initializeDataStructures_00083b14(int data)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if (*(int *)(data + 0x38) == 0) {\n    ptr1 = *(undefined4 **)(data + 4);\n    *(undefined **)(data + 0x3c) = &LAB_00083b08_1;\n    *(undefined4 *)(data + 0x2e4) = 3;\n    *(int *)(data + 0x2e8) = data + 0x2ec;\n    *(undefined4 *)(data + 0x2e0) = 0;\n    *(undefined2 *)(ptr1 + 3) = 4;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    fill_memory_00082504(ptr1 + 0x17,0,8);\n    ptr2 = *(undefined4 **)(data + 8);\n    ptr1[7] = ptr1;\n    ptr1[8] = &LAB_00084440_1;\n    ptr1[9] = 0x84465;\n    ptr1[10] = 0x8449d;\n    ptr1[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\n    *(undefined2 *)(ptr2 + 3) = 9;\n    *ptr2 = 0;\n    ptr2[1] = 0;\n    ptr2[2] = 0;\n    ptr2[0x19] = 0;\n    ptr2[4] = 0;\n    ptr2[5] = 0;\n    ptr2[6] = 0;\n    fill_memory_00082504(ptr2 + 0x17,0,8);\n    ptr1 = *(undefined4 **)(data + 0xc);\n    ptr2[7] = ptr2;\n    ptr2[8] = &LAB_00084440_1;\n    ptr2[9] = 0x84465;\n    ptr2[10] = 0x8449d;\n    ptr2[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)(ptr1 + 3) = 0x12;\n    *(undefined2 *)((int)ptr1 + 0xe) = 2;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    fill_memory_00082504(ptr1 + 0x17,0,8);\n    ptr1[7] = ptr1;\n    ptr1[8] = &LAB_00084440_1;\n    ptr1[9] = 0x84465;\n    ptr1[10] = 0x8449d;\n    ptr1[0xb] = &LAB_000844bc_1;\n    *(undefined4 *)(data + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "data",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_000846a4",
                "FUN_000844c4",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083c08": {
            "entrypoint": "0x00083c08",
            "current_name": "FUNC_00083c08",
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c0c": {
            "entrypoint": "0x00083c0c",
            "current_name": "FUNC_00083c0c",
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c40": {
            "entrypoint": "0x00083c40",
            "current_name": "process_data_00083c40",
            "code": "\nuint processData_00083c40(undefined4 param1,uint param2,byte **param3)\n\n{\n  int info;\n  uint returnValue;\n  uint currentByte;\n  byte *currentPtr;\n  uint index;\n  byte byteValue;\n  byte byteArray [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(param3 + 3) << 0x12)) {\n    *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x2000;\n    param3[0x19] = (byte *)((uint)param3[0x19] | 0x2000);\n  }\n  info = get_elf_rel_info_00084298();\n  if ((info == 1) && (param2 - 1 < 0xff)) {\n    currentByte = param2 & 0xff;\n    byteValue = (byte)currentByte;\n    returnValue = 1;\n  }\n  else {\n    returnValue = process_memory_0008456c(param1,&byteValue,param2,param3 + 0x17);\n    if (returnValue == 0xffffffff) {\n      *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (returnValue == 0) {\n      return param2;\n    }\n    currentByte = (uint)byteValue;\n  }\n  index = 0;\n  do {\n    currentPtr = param3[2] + -1;\n    param3[2] = currentPtr;\n    if ((int)currentPtr < 0) {\n      if ((int)param3[6] <= (int)currentPtr) {\n        **param3 = (byte)currentByte;\n        currentPtr = *param3;\n        currentByte = (uint)*currentPtr;\n        if (currentByte != 10) goto LAB_00083c90;\n      }\n      info = process_data_and_relocation_000844c4(param1,currentByte,param3);\n      if (info == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **param3 = (byte)currentByte;\n      currentPtr = *param3;\nLAB_00083c90:\n      *param3 = currentPtr + 1;\n    }\n    if (returnValue <= index + 1) {\n      return param2;\n    }\n    currentByte = (uint)byteArray[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "info",
                "uVar2": "returnValue",
                "uVar3": "currentByte",
                "pbVar4": "currentPtr",
                "uVar5": "index",
                "local_1c": "byteValue",
                "abStack_1b": "byteArray"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008456c",
                "FUN_00084298",
                "FUN_000844c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d00": {
            "entrypoint": "0x00083d00",
            "current_name": "update_relocation_entry_00083d00",
            "code": "\nundefined4 updateRelocationEntry_00083d00(undefined4 ptrToData,int offset)\n\n{\n  int result;\n  uint relocInfo;\n  int newOffset;\n  \n  FUNC_00082598();\n  relocInfo = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  newOffset = ((relocInfo - offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < newOffset) {\n    result = calculate_and_update_sum_00082970(ptrToData,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + relocInfo) {\n      result = calculate_and_update_sum_00082970(ptrToData,-newOffset);\n      if (result != -1) {\n        DAT_20071194 = DAT_20071194 - newOffset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = relocInfo - newOffset | 1;\n        FUNC_0008259c(ptrToData);\n        return 1;\n      }\n      newOffset = calculate_and_update_sum_00082970(ptrToData,0);\n      if (0xf < (int)(newOffset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_20071194 = newOffset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             newOffset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_0008259c(ptrToData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083d00": "update_relocation_entry_00083d00",
                "param_1": "ptrToData",
                "param_2": "offset",
                "iVar1": "result",
                "uVar2": "relocInfo",
                "iVar3": "newOffset"
            },
            "calling": [
                "FUN_00083d9c"
            ],
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00082970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "entrypoint": "0x00083d9c",
            "current_name": "update_relocation_entry_00083d9c",
            "code": "\nvoid updateRelocationEntry_00083d9c(undefined4 param,int relocationEntry)\n\n{\n  int prevEntryOffset;\n  bool isPrevEntryElf32;\n  uint entryOffset;\n  dword prevEntryInfo;\n  int nextEntryOffset;\n  uint entryInfo;\n  dword entry;\n  uint nextEntryInfo;\n  dword newEntry;\n  \n  if (relocationEntry == 0) {\n    return;\n  }\n  FUNC_00082598();\n  entryOffset = *(uint *)(relocationEntry + -4);\n  entry = relocationEntry - 8;\n  entryInfo = entryOffset & 0xfffffffe;\n  prevEntryInfo = entry + entryInfo;\n  nextEntryInfo = *(uint *)(prevEntryInfo + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == prevEntryInfo) {\n    nextEntryInfo = nextEntryInfo + entryInfo;\n    if (-1 < (int)(entryOffset << 0x1f)) {\n      entry = entry - *(int *)(relocationEntry + -8);\n      nextEntryOffset = *(int *)(entry + 0xc);\n      prevEntryOffset = *(int *)(entry + 8);\n      nextEntryInfo = nextEntryInfo + *(int *)(relocationEntry + -8);\n      *(int *)(prevEntryOffset + 0xc) = nextEntryOffset;\n      *(int *)(nextEntryOffset + 8) = prevEntryOffset;\n    }\n    prevEntryInfo = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(entry + 4) = nextEntryInfo | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = entry;\n    if (prevEntryInfo <= nextEntryInfo) {\n      update_relocation_entry_00083d00(param,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(prevEntryInfo + 4) = nextEntryInfo;\n    if ((entryOffset & 1) == 0) {\n      entry = entry - *(int *)(relocationEntry + -8);\n      prevEntryOffset = *(int *)(entry + 8);\n      entryInfo = entryInfo + *(int *)(relocationEntry + -8);\n      if (prevEntryOffset == 0x2007046c) {\n        isPrevEntryElf32 = true;\n      }\n      else {\n        nextEntryOffset = *(int *)(entry + 0xc);\n        *(int *)(prevEntryOffset + 0xc) = nextEntryOffset;\n        *(int *)(nextEntryOffset + 8) = prevEntryOffset;\n        isPrevEntryElf32 = false;\n      }\n    }\n    else {\n      isPrevEntryElf32 = false;\n    }\n    if (-1 < *(int *)(prevEntryInfo + nextEntryInfo + 4) << 0x1f) {\n      entryInfo = entryInfo + nextEntryInfo;\n      prevEntryOffset = *(int *)(prevEntryInfo + 8);\n      if ((!isPrevEntryElf32) && (prevEntryOffset == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = entry;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = entry;\n        *(undefined4 *)(entry + 0xc) = 0x2007046c;\n        *(undefined4 *)(entry + 8) = 0x2007046c;\n        *(uint *)(entry + 4) = entryInfo | 1;\n        *(uint *)(entry + entryInfo) = entryInfo;\n        goto LAB_00083e30;\n      }\n      nextEntryOffset = *(int *)(prevEntryInfo + 0xc);\n      *(int *)(prevEntryOffset + 0xc) = nextEntryOffset;\n      *(int *)(nextEntryOffset + 8) = prevEntryOffset;\n    }\n    *(uint *)(entry + 4) = entryInfo | 1;\n    *(uint *)(entry + entryInfo) = entryInfo;\n    if (!isPrevEntryElf32) {\n      if (entryInfo < 0x200) {\n        entryOffset = entryInfo & 0xfffffff8;\n        prevEntryOffset = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + entryOffset);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(entryInfo >> 3) >> 2 & 0xffU);\n        *(int *)(entry + 8) = prevEntryOffset;\n        *(uint *)(entry + 0xc) = entryOffset + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + entryOffset) = entry;\n        *(dword *)(prevEntryOffset + 0xc) = entry;\n        FUNC_0008259c(param);\n        return;\n      }\n      entryOffset = entryInfo >> 9;\n      if (entryOffset < 5) {\n        prevEntryOffset = (entryInfo >> 6) + 0x38;\n        nextEntryOffset = prevEntryOffset * 2;\n      }\n      else if (entryOffset < 0x15) {\n        prevEntryOffset = entryOffset + 0x5b;\n        nextEntryOffset = prevEntryOffset * 2;\n      }\n      else if (entryOffset < 0x55) {\n        prevEntryOffset = (entryInfo >> 0xc) + 0x6e;\n        nextEntryOffset = prevEntryOffset * 2;\n      }\n      else if (entryOffset < 0x155) {\n        prevEntryOffset = (entryInfo >> 0xf) + 0x77;\n        nextEntryOffset = prevEntryOffset * 2;\n      }\n      else if (entryOffset < 0x555) {\n        prevEntryOffset = (entryInfo >> 0x12) + 0x7c;\n        nextEntryOffset = prevEntryOffset * 2;\n      }\n      else {\n        nextEntryOffset = 0xfc;\n        prevEntryOffset = 0x7e;\n      }\n      newEntry = nextEntryOffset * 4 + 0x20070464;\n      prevEntryInfo = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[nextEntryOffset];\n      if (prevEntryInfo == newEntry) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (prevEntryOffset >> 2 & 0xffU);\n        newEntry = prevEntryInfo;\n      }\n      else {\n        do {\n          if ((*(uint *)(prevEntryInfo + 4) & 0xfffffffc) <= entryInfo) break;\n          prevEntryInfo = *(dword *)(prevEntryInfo + 8);\n        } while (newEntry != prevEntryInfo);\n        newEntry = *(dword *)(prevEntryInfo + 0xc);\n      }\n      *(dword *)(entry + 0xc) = newEntry;\n      *(dword *)(entry + 8) = prevEntryInfo;\n      *(dword *)(newEntry + 8) = entry;\n      *(dword *)(prevEntryInfo + 0xc) = entry;\n    }\n  }\nLAB_00083e30:\n  FUNC_0008259c(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083d9c": "update_relocation_entry_00083d9c",
                "param_1": "param",
                "param_2": "relocationEntry",
                "iVar1": "prevEntryOffset",
                "bVar2": "isPrevEntryElf32",
                "uVar3": "entryOffset",
                "dVar4": "prevEntryInfo",
                "iVar5": "nextEntryOffset",
                "uVar6": "entryInfo",
                "dVar7": "entry",
                "uVar8": "nextEntryInfo",
                "dVar9": "newEntry"
            },
            "calling": [
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083f34",
                "FUN_00081e04",
                "FUN_000846a4",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "called": [
                "FUN_00083d00",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083f34": {
            "entrypoint": "0x00083f34",
            "current_name": "process_binary_00083f34",
            "code": "\nundefined4 processBinary_00083f34(undefined4 *outputBuffer,uint *inputBuffer,uint **relocationTable)\n\n{\n  int result;\n  uint value1;\n  uint value2;\n  ushort flag;\n  uint tempValue;\n  uint *tempPointer1;\n  uint *tempPointer2;\n  uint size;\n  uint newSize;\n  uint offset;\n  uint relocatedSize;\n  uint localVariable;\n  \n  if (relocationTable[2] != (uint *)0x0) {\n    flag = *(ushort *)(inputBuffer + 3);\n    tempValue = (uint)flag;\n    if (((int)(tempValue << 0x1c) < 0) && (inputBuffer[4] != 0)) {\n      tempPointer2 = *relocationTable;\n    }\n    else {\n      result = process_relocation_entry_00083808(outputBuffer,inputBuffer);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(inputBuffer + 3);\n      tempValue = (uint)flag;\n      tempPointer2 = *relocationTable;\n    }\n    if ((flag & 2) == 0) {\n      value1 = tempValue & 2;\n      offset = value1;\n      size = value1;\n      localVariable = value1;\n      if ((tempValue & 1) == 0) {\n        value1 = 0;\n        offset = 0;\n        while( true ) {\n          while (value1 == 0) {\n            offset = *tempPointer2;\n            tempPointer1 = tempPointer2 + 1;\n            tempPointer2 = tempPointer2 + 2;\n            value1 = *tempPointer1;\n          }\n          size = inputBuffer[2];\n          if ((int)(tempValue << 0x16) < 0) {\n            if (value1 < size) {\n              tempValue = *inputBuffer;\n              size = value1;\n            }\n            else if ((tempValue & 0x480) == 0) {\n              tempValue = *inputBuffer;\n            }\n            else {\n              result = *inputBuffer - inputBuffer[4];\n              size = result + 1 + value1;\n              newSize = (int)(inputBuffer[5] * 3) / 2;\n              if (size <= newSize) {\n                size = newSize;\n              }\n              if ((int)(tempValue << 0x15) < 0) {\n                newSize = relocate_symbols_00081e14(outputBuffer,size);\n                if (newSize == 0) {\n                  *outputBuffer = 0xc;\n                  flag = *(ushort *)(inputBuffer + 3);\n                  goto LAB_00084030;\n                }\n                copy_memory_0008234c(newSize,inputBuffer[4],result);\n                *(ushort *)(inputBuffer + 3) = *(ushort *)(inputBuffer + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                newSize = relocate_symbols_and_update_relocation_entry_000825b0(outputBuffer);\n                if (newSize == 0) {\n                  update_relocation_entry_00083d9c(outputBuffer,inputBuffer[4]);\n                  flag = *(ushort *)(inputBuffer + 3) & 0xff7f;\n                  *outputBuffer = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              tempValue = newSize + result;\n              inputBuffer[4] = newSize;\n              inputBuffer[5] = size;\n              *inputBuffer = tempValue;\n              inputBuffer[2] = size - result;\n              size = value1;\n            }\n            reverse_memory_00082438(tempValue,offset,size);\n            inputBuffer[2] = inputBuffer[2] - size;\n            *inputBuffer = *inputBuffer + size;\n            size = value1;\n          }\n          else if ((inputBuffer[4] < *inputBuffer) || (tempValue = inputBuffer[5], value1 < tempValue)) {\n            if (value1 < size) {\n              size = value1;\n            }\n            reverse_memory_00082438(*inputBuffer,offset,size);\n            tempValue = inputBuffer[2];\n            inputBuffer[2] = tempValue - size;\n            *inputBuffer = *inputBuffer + size;\n            if ((tempValue - size == 0) && (result = process_data_00083adc(outputBuffer,inputBuffer), result != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            size = 0x7fffffff;\n            if (value1 < 0x7fffffff) {\n              size = value1;\n            }\n            size = (*(code *)inputBuffer[9])(outputBuffer,inputBuffer[7],offset,(size / tempValue) * tempValue);\n            if ((int)size < 1) goto LAB_0008402e;\n          }\n          tempPointer1 = relocationTable[2];\n          offset = offset + size;\n          value1 = value1 - size;\n          relocationTable[2] = (uint *)((int)tempPointer1 - size);\n          if ((uint *)((int)tempPointer1 - size) == (uint *)0x0) break;\n          tempValue = (uint)*(ushort *)(inputBuffer + 3);\n        }\n      }\n      else {\n        do {\n          while (value1 == 0) {\n            size = *tempPointer2;\n            value1 = tempPointer2[1];\n            localVariable = 0;\n            tempPointer2 = tempPointer2 + 2;\n          }\n          if (localVariable == 0) {\n            result = find_character_00084384(size,10,value1);\n            if (result == 0) {\n              offset = value1 + 1;\n              localVariable = 1;\n            }\n            else {\n              offset = (result + 1) - size;\n              localVariable = 1;\n            }\n          }\n          newSize = *inputBuffer;\n          tempValue = offset;\n          if (value1 <= offset) {\n            tempValue = value1;\n          }\n          value2 = inputBuffer[5];\n          if ((inputBuffer[4] < newSize) && (relocatedSize = inputBuffer[2] + value2, (int)relocatedSize < (int)tempValue)) {\n            reverse_memory_00082438(newSize,size,relocatedSize);\n            *inputBuffer = *inputBuffer + relocatedSize;\n            result = process_data_00083adc(outputBuffer,inputBuffer);\n            if (result != 0) goto LAB_0008402e;\n          }\n          else if ((int)tempValue < (int)value2) {\n            reverse_memory_00082438(newSize,size,tempValue);\n            inputBuffer[2] = inputBuffer[2] - tempValue;\n            *inputBuffer = tempValue + *inputBuffer;\n            relocatedSize = tempValue;\n          }\n          else {\n            relocatedSize = (*(code *)inputBuffer[9])(outputBuffer,inputBuffer[7],size,value2);\n            if ((int)relocatedSize < 1) goto LAB_0008402e;\n          }\n          offset = offset - relocatedSize;\n          if (offset == 0) {\n            result = process_data_00083adc(outputBuffer,inputBuffer);\n            if (result != 0) goto LAB_0008402e;\n            localVariable = 0;\n          }\n          tempPointer1 = relocationTable[2];\n          size = size + relocatedSize;\n          value1 = value1 - relocatedSize;\n          relocationTable[2] = (uint *)((int)tempPointer1 - relocatedSize);\n        } while ((uint *)((int)tempPointer1 - relocatedSize) != (uint *)0x0);\n      }\n    }\n    else {\n      value1 = 0;\n      tempValue = 0;\n      do {\n        while( true ) {\n          offset = tempValue;\n          if (0x7ffffbff < tempValue) {\n            offset = 0x7ffffc00;\n          }\n          if (tempValue != 0) break;\n          value1 = *tempPointer2;\n          tempValue = tempPointer2[1];\n          tempPointer2 = tempPointer2 + 2;\n        }\n        result = (*(code *)inputBuffer[9])(outputBuffer,inputBuffer[7],value1,offset);\n        if (result < 1) {\nLAB_0008402e:\n          flag = *(ushort *)(inputBuffer + 3);\nLAB_00084030:\n          *(ushort *)(inputBuffer + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        tempPointer1 = relocationTable[2];\n        value1 = value1 + result;\n        tempValue = tempValue - result;\n        relocationTable[2] = (uint *)((int)tempPointer1 - result);\n      } while ((uint *)((int)tempPointer1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083f34": "process_binary_00083f34",
                "param_1": "outputBuffer",
                "param_2": "inputBuffer",
                "param_3": "relocationTable",
                "iVar1": "result",
                "uVar2": "value1",
                "uVar3": "value2",
                "uVar4": "flag",
                "uVar5": "tempValue",
                "puVar6": "tempPointer1",
                "puVar7": "tempPointer2",
                "uVar8": "size",
                "uVar9": "newSize",
                "uVar10": "offset",
                "uVar11": "relocatedSize",
                "local_2c": "localVariable"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008234c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00084384",
                "FUN_00083d9c",
                "FUN_00083adc",
                "FUN_00083808",
                "FUN_00082438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084290": {
            "entrypoint": "0x00084290",
            "current_name": "get_memory_address_00084290",
            "code": "\nundefined4 getMemoryAddress_00084290(void)\n\n{\n  return 0x20070874;\n}\n\n",
            "renaming": {
                "FUN_00084290": "get_memory_address_00084290"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084298": {
            "entrypoint": "0x00084298",
            "current_name": "get_elf_rel_info_00084298",
            "code": "\ndword getElfRelInfo_00084298(void)\n\n{\n  return elfRelArray[274].relInfo;\n}\n\n",
            "renaming": {
                "FUN_00084298": "get_elf_rel_info_00084298",
                "Elf32_Rel_ARRAY_20070000": "elfRelArray",
                "r_info": "relInfo"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "initialize_parameters_000842a4",
            "code": "\nvoid initializeParameters_000842a4(int param1,int *param2)\n\n{\n  ushort localVar1;\n  int localVar2;\n  int localVar3;\n  uint localVar4;\n  bool localVar5;\n  undefined stackVar1 [4];\n  uint localVar6;\n  \n  localVar1 = *(ushort *)(param2 + 3);\n  localVar4 = (uint)localVar1;\n  if ((int)(localVar4 << 0x1e) < 0) {\n    *param2 = (int)param2 + 0x43;\n    param2[4] = (int)param2 + 0x43;\n    param2[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)param2 + 0xe)) {\n    localVar2 = initialize_memory_and_check_000846b4(param1,(int)*(short *)((int)param2 + 0xe),stackVar1);\n    if (-1 < localVar2) {\n      localVar5 = (localVar6 & 0xf000) == 0x2000;\n      if (((localVar6 & 0xf000) == 0x8000) && (param2[10] == 0x8449d)) {\n        localVar2 = 0x400;\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x400;\n        param2[0x13] = 0x400;\n      }\n      else {\n        localVar2 = 0x400;\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    localVar1 = *(ushort *)(param2 + 3);\n    localVar4 = (uint)localVar1;\n  }\n  *(ushort *)(param2 + 3) = localVar1 | 0x800;\n  if ((localVar4 & 0x80) == 0) {\n    localVar2 = 0x400;\n  }\n  else {\n    localVar2 = 0x40;\n  }\n  localVar5 = false;\nLAB_00084300:\n  localVar3 = relocate_symbols_00081e14(param1,localVar2);\n  localVar1 = *(ushort *)(param2 + 3);\n  if (localVar3 == 0) {\n    if (-1 < (int)((uint)localVar1 << 0x16)) {\n      *(ushort *)(param2 + 3) = localVar1 | 2;\n      *param2 = (int)param2 + 0x43;\n      param2[4] = (int)param2 + 0x43;\n      param2[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(param1 + 0x3c) = &LAB_00083b08_1;\n    *(ushort *)(param2 + 3) = localVar1 | 0x80;\n    *param2 = localVar3;\n    param2[4] = localVar3;\n    param2[5] = localVar2;\n    if ((localVar5) && (localVar2 = check_and_assign_constant_000846dc(param1,(int)*(short *)((int)param2 + 0xe)), localVar2 != 0))\n    {\n      *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "initialize_parameters_000842a4",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "localVar1",
                "iVar2": "localVar2",
                "iVar3": "localVar3",
                "uVar4": "localVar4",
                "bVar5": "localVar5",
                "auStack_54": "stackVar1",
                "local_50": "localVar6"
            },
            "calling": [
                "FUN_00083808"
            ],
            "called": [
                "FUN_000846b4",
                "FUN_00081e14",
                "FUN_000846dc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084384": {
            "entrypoint": "0x00084384",
            "current_name": "find_character_00084384",
            "code": "\nuint * find_character_00084384(uint *input_array,char target_char,uint array_length)\n\n{\n  uint xor_result;\n  int index;\n  uint *current_pointer;\n  bool is_last_index;\n  \n  if (((uint)input_array & 3) == 0) {\nLAB_000843b4:\n    if (3 < array_length) {\n      current_pointer = input_array;\n      do {\n        xor_result = *current_pointer ^ CONCAT22(CONCAT11(target_char,target_char),CONCAT11(target_char,target_char));\n        input_array = current_pointer;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) break;\n        array_length = array_length - 4;\n        input_array = current_pointer + 1;\n        current_pointer = current_pointer + 1;\n      } while (3 < array_length);\n    }\n    if (array_length == 0) {\n      input_array = (uint *)0x0;\n    }\n    else if (*(char *)input_array != target_char) {\n      index = 0;\n      do {\n        input_array = (uint *)((int)input_array + 1);\n        is_last_index = index == array_length - 1;\n        index = index + 1;\n        if (is_last_index) goto LAB_000843dc;\n      } while (*(char *)input_array != target_char);\n    }\n  }\n  else if (array_length == 0) {\nLAB_000843dc:\n    input_array = (uint *)0x0;\n  }\n  else if (*(char *)input_array != target_char) {\n    current_pointer = (uint *)((int)input_array + 1);\n    array_length = array_length - 1;\n    do {\n      input_array = current_pointer;\n      if (((uint)input_array & 3) == 0) goto LAB_000843b4;\n      if (array_length == 0) goto LAB_000843dc;\n      current_pointer = (uint *)((int)input_array + 1);\n      array_length = array_length - 1;\n    } while (*(char *)input_array != target_char);\n  }\n  return input_array;\n}\n\n",
            "renaming": {
                "FUN_00084384": "find_character_00084384",
                "param_1": "input_array",
                "param_2": "target_char",
                "param_3": "array_length",
                "uVar1": "xor_result",
                "iVar2": "index",
                "puVar3": "current_pointer",
                "bVar4": "is_last_index"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084464": {
            "entrypoint": "0x00084464",
            "current_name": "process_data_00084464",
            "code": "\nvoid processData_00084464(int *result,int data,undefined4 param1,undefined4 param2)\n\n{\n  int returnValue;\n  ushort value;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 unused4;\n  \n  value = *(ushort *)(data + 0xc);\n  if ((int)((uint)value << 0x17) < 0) {\n    checkAndAssignValue(result,(int)*(short *)(data + 0xe),0,2);\n    value = *(ushort *)(data + 0xc);\n  }\n  *(ushort *)(data + 0xc) = value & 0xefff;\n  DAT_200711bc = 0;\n  returnValue = processData_00084464Inner((int)*(short *)(data + 0xe),param1,param2,param2,unused1,unused2,\n                       unused3,unused4);\n  if ((returnValue == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084464": "process_data_00084464",
                "param_1": "result",
                "param_2": "data",
                "param_3": "param1",
                "param_4": "param2",
                "iVar1": "returnValue",
                "uVar2": "value",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "unaff_r6": "unused3",
                "in_lr": "unused4",
                "check_and_assign_value_00084700": "checkAndAssignValue",
                "process_data_000811cc": "processDataInner"
            },
            "calling": [],
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008449c": {
            "entrypoint": "0x0008449c",
            "current_name": "assign_value_and_update_flag_0008449c",
            "code": "\nvoid assignValueAndUpdateFlag_0008449c(undefined4 arg1,int arg2)\n\n{\n  int result;\n  ushort flag;\n  \n  result = check_and_assign_value_00084700(arg1,(int)*(short *)(arg2 + 0xe));\n  if (result == -1) {\n    flag = *(ushort *)(arg2 + 0xc) & 0xefff;\n  }\n  else {\n    flag = *(ushort *)(arg2 + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(arg2 + 0x50) = result;\n  }\n  *(ushort *)(arg2 + 0xc) = flag;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008449c": "assign_value_and_update_flag_0008449c",
                "param_1": "arg1",
                "param_2": "arg2",
                "iVar1": "result",
                "uVar2": "flag"
            },
            "calling": [],
            "called": [
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844c4": {
            "entrypoint": "0x000844c4",
            "current_name": "process_data_and_relocation_000844c4",
            "code": "\nuint process_data_and_relocation_000844c4(int binary,uint byte,undefined4 *data_array,undefined4 constant)\n\n{\n  ushort relocation_entry;\n  uint relocation_value;\n  undefined *byte_pointer;\n  int result;\n  \n  if ((binary != 0) && (*(int *)(binary + 0x38) == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  relocation_entry = *(ushort *)(data_array + 3);\n  relocation_value = (uint)relocation_entry;\n  data_array[2] = data_array[6];\n  if ((-1 < (int)(relocation_value << 0x1c)) || (result = data_array[4], result == 0)) {\n    result = process_relocation_entry_00083808(binary,data_array,relocation_entry,relocation_value,constant);\n    if (result != 0) {\n      return 0xffffffff;\n    }\n    relocation_entry = *(ushort *)(data_array + 3);\n    result = data_array[4];\n    relocation_value = (uint)relocation_entry;\n  }\n  byte = byte & 0xff;\n  if ((int)(relocation_value << 0x12) < 0) {\n    byte_pointer = (undefined *)*data_array;\n    result = (int)byte_pointer - result;\n    if (result < (int)data_array[5]) {\nLAB_000844f6:\n      result = result + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    data_array[0x19] = data_array[0x19] & 0xffffdfff;\n    byte_pointer = (undefined *)*data_array;\n    *(ushort *)(data_array + 3) = relocation_entry | 0x2000;\n    result = (int)byte_pointer - result;\n    if (result < (int)data_array[5]) goto LAB_000844f6;\n  }\n  result = process_data_00083adc(binary,data_array);\n  if (result != 0) {\n    return 0xffffffff;\n  }\n  byte_pointer = (undefined *)*data_array;\n  result = 1;\nLAB_000844f8:\n  data_array[2] = data_array[2] + -1;\n  *data_array = byte_pointer + 1;\n  *byte_pointer = (char)byte;\n  if (((data_array[5] == result) ||\n      (((int)((uint)*(ushort *)(data_array + 3) << 0x1f) < 0 && (byte == 10)))) &&\n     (result = process_data_00083adc(binary,data_array), result != 0)) {\n    return 0xffffffff;\n  }\n  return byte;\n}\n\n",
            "renaming": {
                "FUN_000844c4": "process_data_and_relocation_000844c4",
                "param_1": "binary",
                "param_2": "byte",
                "param_3": "data_array",
                "param_4": "constant",
                "uVar1": "relocation_entry",
                "uVar2": "relocation_value",
                "puVar3": "byte_pointer",
                "iVar4": "result"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00083b14",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008456c": {
            "entrypoint": "0x0008456c",
            "current_name": "process_memory_0008456c",
            "code": "\nvoid processMemory_0008456c(undefined4 *result,int size,undefined4 constant,undefined4 *status)\n\n{\n  code *functionPointer;\n  undefined4 memoryAddress;\n  int returnValue;\n  undefined stackData [12];\n  \n  functionPointer = DAT_20070898;\n  if (size == 0) {\n    memoryAddress = get_memory_address_00084290();\n    returnValue = (*functionPointer)(result,stackData,0,memoryAddress,status);\n  }\n  else {\n    memoryAddress = get_memory_address_00084290();\n    returnValue = (*functionPointer)(result,size,constant,memoryAddress,status);\n  }\n  if (returnValue == -1) {\n    *status = 0;\n    *result = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008456c": "process_memory_0008456c",
                "param_1": "result",
                "param_2": "size",
                "param_3": "constant",
                "param_4": "status",
                "pcVar1": "functionPointer",
                "uVar2": "memoryAddress",
                "iVar3": "returnValue",
                "auStack_24": "stackData"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_000845bc",
                "FUN_00084290"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "store_value_000845bc",
            "code": "\nundefined4 store_value_000845bc(undefined4 *result,undefined *buffer,uint value)\n\n{\n  if (buffer == (undefined *)0x0) {\n    return 0;\n  }\n  if (value < 0x100) {\n    *buffer = (char)value;\n    return 1;\n  }\n  *result = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "store_value_000845bc",
                "param_1": "result",
                "param_2": "buffer",
                "param_3": "value"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846a4": {
            "entrypoint": "0x000846a4",
            "current_name": "process_and_update_relocations_000846a4",
            "code": "\nundefined4 processAndUpdateRelocations_000846a4(int input)\n\n{\n  dword relocationOffset;\n  undefined4 result;\n  int returnValue;\n  \n  relocationOffset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (input != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      initializeDataStructures();\n    }\n    if (*(short *)(input + 0xc) != 0) {\n      result = processData(relocationOffset,input);\n      if ((*(code **)(input + 0x2c) != (code *)0x0) &&\n         (returnValue = (**(code **)(input + 0x2c))(relocationOffset,*(undefined4 *)(input + 0x1c)), returnValue < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input + 0xc) << 0x18) < 0) {\n        updateRelocationEntry(relocationOffset,*(undefined4 *)(input + 0x10));\n      }\n      if (*(int *)(input + 0x30) != 0) {\n        if (*(int *)(input + 0x30) != input + 0x40) {\n          updateRelocationEntry(relocationOffset);\n        }\n        *(undefined4 *)(input + 0x30) = 0;\n      }\n      if (*(int *)(input + 0x44) != 0) {\n        updateRelocationEntry(relocationOffset);\n        *(undefined4 *)(input + 0x44) = 0;\n      }\n      FUNC_00083c08();\n      *(undefined2 *)(input + 0xc) = 0;\n      FUNC_00083c0c();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000846a4": "process_and_update_relocations_000846a4",
                "param_1": "input",
                "dVar1": "relocationOffset",
                "uVar2": "result",
                "iVar3": "returnValue",
                "initialize_data_structures_00083b14": "initializeDataStructures",
                "process_data_00083adc": "processData",
                "update_relocation_entry_00083d9c": "updateRelocationEntry"
            },
            "calling": [],
            "called": [
                "FUN_00083c0c",
                "FUN_00083b14",
                "FUN_00083d9c",
                "FUN_00083adc",
                "FUN_00083c08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846b4": {
            "entrypoint": "0x000846b4",
            "current_name": "initialize_memory_and_check_000846b4",
            "code": "\nvoid initializeMemoryAndCheck_000846b4(int *result,undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  int initializeResult;\n  \n  DAT_200711bc = 0;\n  initializeResult = initialize_memory_000811b4(param1,param2,param2,0,param3);\n  if ((initializeResult == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846b4": "initialize_memory_and_check_000846b4",
                "param_1": "result",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "iVar1": "initializeResult"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846dc": {
            "entrypoint": "0x000846dc",
            "current_name": "check_and_assign_constant_000846dc",
            "code": "\nvoid checkAndAssignConstant_000846dc(int *result,undefined4 input)\n\n{\n  int constantValue;\n  \n  DAT_200711bc = 0;\n  constantValue = get_constant_one_000811be(input);\n  if ((constantValue == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846dc": "check_and_assign_constant_000846dc",
                "param_1": "result",
                "param_2": "input",
                "iVar1": "constantValue"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084700": {
            "entrypoint": "0x00084700",
            "current_name": "check_and_assign_value_00084700",
            "code": "\nvoid checkAndAssignValue_00084700(int *result,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int returnValue;\n  \n  DAT_200711bc = 0;\n  returnValue = get_zero_000811c2(input1,input2,input3);\n  if ((returnValue == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084700": "check_and_assign_value_00084700",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_0008449c",
                "FUN_00084464"
            ],
            "called": [
                "FUN_000811c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084728": {
            "entrypoint": "0x00084728",
            "current_name": "check_and_get_zero_value_00084728",
            "code": "\nvoid checkAndGetZeroValue_00084728(int *outputValue,undefined4 paramA,undefined4 paramB,undefined4 paramC)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = get_zero_000811c6(paramA,paramB,paramC);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *outputValue = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084728": "check_and_get_zero_value_00084728",
                "param_1": "outputValue",
                "param_2": "paramA",
                "param_3": "paramB",
                "param_4": "paramC",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000811c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084750": {
            "entrypoint": "0x00084750",
            "current_name": "calculate_difference_00084750",
            "code": "\nint calculate_difference_00084750(int input1,int input2,int flag1,int flag2)\n\n{\n  int result;\n  \n  if ((flag2 == 0) && (flag1 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input1 = -1;\n    }\n    return input1;\n  }\n  result = calculate_difference_00084750_000847ac();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084750": "calculate_difference_00084750",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "flag1",
                "param_4": "flag2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_000847ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008477c": {
            "entrypoint": "0x0008477c",
            "current_name": "subtract_and_update_0008477c",
            "code": "\nvoid subtract_and_update_0008477c(uint dividend,int divisor,undefined4 high_word,undefined4 low_word,int *result_array)\n\n{\n  uint product;\n  longlong division_result;\n  \n  division_result = calculate_division_000847e0();\n  division_result = division_result * CONCAT44(low_word,high_word);\n  product = (uint)division_result;\n  *result_array = dividend - product;\n  result_array[1] = (divisor - (int)((ulonglong)division_result >> 0x20)) - (uint)(dividend < product);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008477c": "subtract_and_update_0008477c",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "high_word",
                "param_4": "low_word",
                "param_5": "result_array",
                "uVar1": "product",
                "lVar2": "division_result"
            },
            "calling": [],
            "called": [
                "FUN_000847e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847ac": {
            "entrypoint": "0x000847ac",
            "current_name": "calculate_difference_000847ac",
            "code": "\nvoid calculate_difference_000847ac(uint dividend,int param_2,undefined4 multiplier_1,undefined4 multiplier_2,int *result_array)\n\n{\n  uint dividend_uint;\n  longlong dividend_product;\n  \n  dividend_product = calculate_dividend_00084a80();\n  dividend_product = dividend_product * CONCAT44(multiplier_2,multiplier_1);\n  dividend_uint = (uint)dividend_product;\n  *result_array = dividend - dividend_uint;\n  result_array[1] = (param_2 - (int)((ulonglong)dividend_product >> 0x20)) - (uint)(dividend < dividend_uint);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847ac": "calculate_difference_000847ac",
                "param_1": "dividend",
                "param_3": "multiplier_1",
                "param_4": "multiplier_2",
                "param_5": "result_array",
                "uVar1": "dividend_uint",
                "lVar2": "dividend_product"
            },
            "calling": [
                "FUN_00084750"
            ],
            "called": [
                "FUN_00084a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847e0": {
            "entrypoint": "0x000847e0",
            "current_name": "calculate_division_000847e0",
            "code": "\nundefined8 calculateDivision_000847e0(uint dividend,uint dividendHigh,uint divisorHigh,uint divisor)\n\n{\n  longlong temp;\n  uint quotient;\n  uint remainder;\n  uint tempDividend;\n  uint tempQuotient;\n  int shiftAmount;\n  uint tempRemainder;\n  uint tempQuotient2;\n  uint isDividendNegative;\n  uint isDivisorNegative;\n  uint tempDividend2;\n  uint adjustedDivisor;\n  bool carryFlag;\n  \n  if ((int)dividendHigh < 0) {\n    carryFlag = dividend != 0;\n    dividend = -dividend;\n    dividendHigh = -dividendHigh - (uint)carryFlag;\n    isDividendNegative = 0xffffffff;\n  }\n  else {\n    isDividendNegative = 0;\n  }\n  if ((int)divisor < 0) {\n    isDividendNegative = ~isDividendNegative;\n    carryFlag = divisorHigh != 0;\n    divisorHigh = -divisorHigh;\n    divisor = -divisor - (uint)carryFlag;\n  }\n  if (divisor == 0) {\n    if (dividendHigh < divisorHigh) {\n      shiftAmount = LZCOUNT(divisorHigh);\n      if (shiftAmount != 0) {\n        remainder = dividend >> (0x20U - shiftAmount & 0xff);\n        divisorHigh = divisorHigh << shiftAmount;\n        dividend = dividend << shiftAmount;\n        dividendHigh = dividendHigh << shiftAmount | remainder;\n      }\n      quotient = divisorHigh >> 0x10;\n      tempDividend = dividendHigh / quotient;\n      tempRemainder = (divisorHigh & 0xffff) * tempDividend;\n      isDivisorNegative = dividend >> 0x10 | (dividendHigh - quotient * tempDividend) * 0x10000;\n      remainder = tempDividend;\n      if (isDivisorNegative <= tempRemainder && tempRemainder - isDivisorNegative != 0) {\n        carryFlag = CARRY4(isDivisorNegative,divisorHigh);\n        isDivisorNegative = isDivisorNegative + divisorHigh;\n        remainder = tempDividend - 1;\n        if ((carryFlag == false) && (isDivisorNegative <= tempRemainder && tempRemainder - isDivisorNegative != 0)) {\n          remainder = tempDividend - 2;\n          isDivisorNegative = isDivisorNegative + divisorHigh;\n        }\n      }\n      tempQuotient2 = (isDivisorNegative - tempRemainder) / quotient;\n      tempDividend = (divisorHigh & 0xffff) * tempQuotient2;\n      tempRemainder = dividend & 0xffff | ((isDivisorNegative - tempRemainder) - quotient * tempQuotient2) * 0x10000;\n      quotient = tempQuotient2;\n      if (tempRemainder <= tempDividend && tempDividend - tempRemainder != 0) {\n        quotient = tempQuotient2 - 1;\n        if ((CARRY4(tempRemainder,divisorHigh) == false) &&\n           (tempRemainder + divisorHigh <= tempDividend && tempDividend - (tempRemainder + divisorHigh) != 0)) {\n          quotient = tempQuotient2 - 2;\n        }\n      }\n      quotient = quotient | remainder << 0x10;\n      remainder = 0;\n    }\n    else {\n      if (divisorHigh == 0) {\n        divisorHigh = 1 / 0;\n      }\n      shiftAmount = LZCOUNT(divisorHigh);\n      if (shiftAmount == 0) {\n        dividendHigh = dividendHigh - divisorHigh;\n        tempDividend = divisorHigh >> 0x10;\n        adjustedDivisor = divisorHigh & 0xffff;\n        remainder = 1;\n      }\n      else {\n        divisorHigh = divisorHigh << shiftAmount;\n        remainder = dividendHigh >> (0x20U - shiftAmount & 0xff);\n        tempDividend = divisorHigh >> 0x10;\n        isDivisorNegative = remainder / tempDividend;\n        adjustedDivisor = divisorHigh & 0xffff;\n        tempRemainder = adjustedDivisor * isDivisorNegative;\n        tempQuotient2 = dividend >> (0x20U - shiftAmount & 0xff) | dividendHigh << shiftAmount;\n        remainder = tempQuotient2 >> 0x10 | (remainder - tempDividend * isDivisorNegative) * 0x10000;\n        dividend = dividend << shiftAmount;\n        quotient = isDivisorNegative;\n        if (remainder <= tempRemainder && tempRemainder - remainder != 0) {\n          carryFlag = CARRY4(remainder,divisorHigh);\n          remainder = remainder + divisorHigh;\n          quotient = isDivisorNegative - 1;\n          if ((carryFlag == false) && (remainder <= tempRemainder && tempRemainder - remainder != 0)) {\n            quotient = isDivisorNegative - 2;\n            remainder = remainder + divisorHigh;\n          }\n        }\n        tempQuotient = (remainder - tempRemainder) / tempDividend;\n        isDivisorNegative = adjustedDivisor * tempQuotient;\n        dividendHigh = tempQuotient2 & 0xffff | ((remainder - tempRemainder) - tempDividend * tempQuotient) * 0x10000;\n        remainder = tempQuotient;\n        if (dividendHigh <= isDivisorNegative && isDivisorNegative - dividendHigh != 0) {\n          carryFlag = CARRY4(dividendHigh,divisorHigh);\n          dividendHigh = dividendHigh + divisorHigh;\n          remainder = tempQuotient - 1;\n          if ((carryFlag == false) && (dividendHigh <= isDivisorNegative && isDivisorNegative - dividendHigh != 0)) {\n            remainder = tempQuotient - 2;\n            dividendHigh = dividendHigh + divisorHigh;\n          }\n        }\n        dividendHigh = dividendHigh - isDivisorNegative;\n        remainder = remainder | quotient << 0x10;\n      }\n      quotient = dividendHigh / tempDividend;\n      isDivisorNegative = adjustedDivisor * quotient;\n      tempQuotient2 = dividend >> 0x10 | (dividendHigh - tempDividend * quotient) * 0x10000;\n      tempRemainder = quotient;\n      if (tempQuotient2 <= isDivisorNegative && isDivisorNegative - tempQuotient2 != 0) {\n        carryFlag = CARRY4(tempQuotient2,divisorHigh);\n        tempQuotient2 = tempQuotient2 + divisorHigh;\n        tempRemainder = quotient - 1;\n        if ((carryFlag == false) && (tempQuotient2 <= isDivisorNegative && isDivisorNegative - tempQuotient2 != 0)) {\n          tempRemainder = quotient - 2;\n          tempQuotient2 = tempQuotient2 + divisorHigh;\n        }\n      }\n      tempQuotient = (tempQuotient2 - isDivisorNegative) / tempDividend;\n      adjustedDivisor = adjustedDivisor * tempQuotient;\n      tempDividend = dividend & 0xffff | ((tempQuotient2 - isDivisorNegative) - tempDividend * tempQuotient) * 0x10000;\n      quotient = tempQuotient;\n      if (tempDividend <= adjustedDivisor && adjustedDivisor - tempDividend != 0) {\n        quotient = tempQuotient - 1;\n        if ((CARRY4(tempDividend,divisorHigh) == false) &&\n           (tempDividend + divisorHigh <= adjustedDivisor && adjustedDivisor - (tempDividend + divisorHigh) != 0)) {\n          quotient = tempQuotient - 2;\n        }\n      }\n      quotient = quotient | tempRemainder << 0x10;\n    }\n  }\n  else if (dividendHigh < divisor) {\n    remainder = 0;\n    quotient = 0;\n  }\n  else {\n    shiftAmount = LZCOUNT(divisor);\n    if (shiftAmount == 0) {\n      if ((divisor < dividendHigh) || (divisorHigh <= dividend)) {\n        remainder = 0;\n        quotient = 1;\n      }\n      else {\n        quotient = 0;\n        remainder = 0;\n      }\n    }\n    else {\n      remainder = 0x20 - shiftAmount;\n      tempDividend = dividendHigh >> (remainder & 0xff);\n      adjustedDivisor = divisorHigh >> (remainder & 0xff) | divisor << shiftAmount;\n      isDivisorNegative = adjustedDivisor >> 0x10;\n      quotient = tempDividend / isDivisorNegative;\n      tempQuotient2 = (adjustedDivisor & 0xffff) * quotient;\n      tempRemainder = dividendHigh << shiftAmount | dividend >> (remainder & 0xff);\n      tempDividend = tempRemainder >> 0x10 | (tempDividend - isDivisorNegative * quotient) * 0x10000;\n      remainder = quotient;\n      if (tempDividend <= tempQuotient2 && tempQuotient2 - tempDividend != 0) {\n        carryFlag = CARRY4(tempDividend,adjustedDivisor);\n        tempDividend = tempDividend + adjustedDivisor;\n        remainder = quotient - 1;\n        if ((carryFlag == false) && (tempDividend <= tempQuotient2 && tempQuotient2 - tempDividend != 0)) {\n          remainder = quotient - 2;\n          tempDividend = tempDividend + adjustedDivisor;\n        }\n      }\n      tempQuotient = (tempDividend - tempQuotient2) / isDivisorNegative;\n      tempDividend2 = (adjustedDivisor & 0xffff) * tempQuotient;\n      tempDividend = tempRemainder & 0xffff | ((tempDividend - tempQuotient2) - isDivisorNegative * tempQuotient) * 0x10000;\n      quotient = tempQuotient;\n      if (tempDividend <= tempDividend2 && tempDividend2 - tempDividend != 0) {\n        carryFlag = CARRY4(tempDividend,adjustedDivisor);\n        tempDividend = tempDividend + adjustedDivisor;\n        quotient = tempQuotient - 1;\n        if ((carryFlag == false) && (tempDividend <= tempDividend2 && tempDividend2 - tempDividend != 0)) {\n          quotient = tempQuotient - 2;\n          tempDividend = tempDividend + adjustedDivisor;\n        }\n      }\n      quotient = quotient | remainder << 0x10;\n      temp = (ulonglong)quotient * (ulonglong)(divisorHigh << shiftAmount);\n      tempRemainder = (uint)((ulonglong)temp >> 0x20);\n      remainder = 0;\n      if ((tempDividend - tempDividend2 < tempRemainder) ||\n         ((tempDividend - tempDividend2 == tempRemainder && (dividend << shiftAmount < (uint)temp)))) {\n        quotient = quotient - 1;\n        remainder = 0;\n      }\n    }\n  }\n  if (isDividendNegative != 0) {\n    carryFlag = quotient != 0;\n    quotient = -quotient;\n    remainder = -remainder - (uint)carryFlag;\n  }\n  return CONCAT44(remainder,quotient);\n}\n\n",
            "renaming": {
                "FUN_000847e0": "calculate_division_000847e0",
                "param_1": "dividend",
                "param_2": "dividendHigh",
                "param_3": "divisorHigh",
                "param_4": "divisor",
                "lVar1": "temp",
                "uVar2": "quotient",
                "uVar3": "remainder",
                "uVar4": "tempDividend",
                "uVar5": "tempQuotient",
                "iVar6": "shiftAmount",
                "uVar7": "tempRemainder",
                "uVar8": "tempQuotient2",
                "uVar9": "isDividendNegative",
                "uVar10": "isDivisorNegative",
                "uVar11": "tempDividend2",
                "uVar12": "adjustedDivisor",
                "bVar13": "carryFlag"
            },
            "calling": [
                "FUN_0008477c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084a80": {
            "entrypoint": "0x00084a80",
            "current_name": "calculate_dividend_00084a80",
            "code": "\nulonglong calculateDividend_00084a80(uint dividend,uint dividend_divisor,uint divisor,uint dividend_remainder)\n\n{\n  longlong temp_result;\n  uint quotient;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  int bit_count;\n  bool carry_flag;\n  \n  if (dividend_remainder == 0) {\n    if (divisor <= dividend_divisor) {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      bit_count = LZCOUNT(divisor);\n      if (bit_count == 0) {\n        dividend_divisor = dividend_divisor - divisor;\n        uVar3 = divisor >> 0x10;\n        uVar5 = divisor & 0xffff;\n        quotient = 1;\n      }\n      else {\n        divisor = divisor << bit_count;\n        uVar8 = dividend_divisor >> (0x20U - bit_count & 0xff);\n        uVar3 = divisor >> 0x10;\n        uVar9 = uVar8 / uVar3;\n        uVar5 = divisor & 0xffff;\n        quotient = uVar5 * uVar9;\n        uVar6 = dividend >> (0x20U - bit_count & 0xff) | dividend_divisor << bit_count;\n        uVar4 = uVar6 >> 0x10 | (uVar8 - uVar3 * uVar9) * 0x10000;\n        dividend = dividend << bit_count;\n        uVar8 = uVar9;\n        if (uVar4 <= quotient && quotient - uVar4 != 0) {\n          carry_flag = CARRY4(uVar4,divisor);\n          uVar4 = uVar4 + divisor;\n          uVar8 = uVar9 - 1;\n          if ((carry_flag == false) && (uVar4 <= quotient && quotient - uVar4 != 0)) {\n            uVar8 = uVar9 - 2;\n            uVar4 = uVar4 + divisor;\n          }\n        }\n        uVar7 = (uVar4 - quotient) / uVar3;\n        uVar9 = uVar5 * uVar7;\n        dividend_divisor = uVar6 & 0xffff | ((uVar4 - quotient) - uVar3 * uVar7) * 0x10000;\n        quotient = uVar7;\n        if (dividend_divisor <= uVar9 && uVar9 - dividend_divisor != 0) {\n          carry_flag = CARRY4(dividend_divisor,divisor);\n          dividend_divisor = dividend_divisor + divisor;\n          quotient = uVar7 - 1;\n          if ((carry_flag == false) && (dividend_divisor <= uVar9 && uVar9 - dividend_divisor != 0)) {\n            quotient = uVar7 - 2;\n            dividend_divisor = dividend_divisor + divisor;\n          }\n        }\n        dividend_divisor = dividend_divisor - uVar9;\n        quotient = quotient | uVar8 << 0x10;\n      }\n      uVar9 = dividend_divisor / uVar3;\n      uVar4 = uVar5 * uVar9;\n      uVar6 = dividend >> 0x10 | (dividend_divisor - uVar3 * uVar9) * 0x10000;\n      uVar8 = uVar9;\n      if (uVar6 <= uVar4 && uVar4 - uVar6 != 0) {\n        carry_flag = CARRY4(uVar6,divisor);\n        uVar6 = uVar6 + divisor;\n        uVar8 = uVar9 - 1;\n        if ((carry_flag == false) && (uVar6 <= uVar4 && uVar4 - uVar6 != 0)) {\n          uVar8 = uVar9 - 2;\n          uVar6 = uVar6 + divisor;\n        }\n      }\n      uVar9 = (uVar6 - uVar4) / uVar3;\n      uVar5 = uVar5 * uVar9;\n      uVar6 = dividend & 0xffff | ((uVar6 - uVar4) - uVar3 * uVar9) * 0x10000;\n      uVar3 = uVar9;\n      if (uVar6 <= uVar5 && uVar5 - uVar6 != 0) {\n        uVar3 = uVar9 - 1;\n        if ((CARRY4(uVar6,divisor) == false) &&\n           (uVar6 + divisor <= uVar5 && uVar5 - (uVar6 + divisor) != 0)) {\n          uVar3 = uVar9 - 2;\n        }\n      }\n      return CONCAT44(quotient,uVar3 | uVar8 << 0x10);\n    }\n    bit_count = LZCOUNT(divisor);\n    if (bit_count != 0) {\n      uVar8 = dividend >> (0x20U - bit_count & 0xff);\n      divisor = divisor << bit_count;\n      dividend = dividend << bit_count;\n      dividend_divisor = uVar8 | dividend_divisor << bit_count;\n    }\n    quotient = divisor >> 0x10;\n    uVar3 = dividend_divisor / quotient;\n    uVar5 = (divisor & 0xffff) * uVar3;\n    uVar9 = dividend >> 0x10 | (dividend_divisor - quotient * uVar3) * 0x10000;\n    uVar8 = uVar3;\n    if (uVar9 <= uVar5 && uVar5 - uVar9 != 0) {\n      carry_flag = CARRY4(uVar9,divisor);\n      uVar9 = uVar9 + divisor;\n      uVar8 = uVar3 - 1;\n      if ((carry_flag == false) && (uVar9 <= uVar5 && uVar5 - uVar9 != 0)) {\n        uVar8 = uVar3 - 2;\n        uVar9 = uVar9 + divisor;\n      }\n    }\n    uVar6 = (uVar9 - uVar5) / quotient;\n    uVar3 = (divisor & 0xffff) * uVar6;\n    uVar5 = dividend & 0xffff | ((uVar9 - uVar5) - quotient * uVar6) * 0x10000;\n    quotient = uVar6;\n    if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n      quotient = uVar6 - 1;\n      if ((CARRY4(uVar5,divisor) == false) &&\n         (uVar5 + divisor <= uVar3 && uVar3 - (uVar5 + divisor) != 0)) {\n        quotient = uVar6 - 2;\n      }\n    }\n    quotient = quotient | uVar8 << 0x10;\n  }\n  else {\n    if (dividend_divisor < dividend_remainder) {\n      return 0;\n    }\n    bit_count = LZCOUNT(dividend_remainder);\n    if (bit_count == 0) {\n      if ((dividend_remainder < dividend_divisor) || (divisor <= dividend)) {\n        return 1;\n      }\n      quotient = 0;\n    }\n    else {\n      quotient = 0x20 - bit_count;\n      uVar8 = dividend_divisor >> (quotient & 0xff);\n      uVar3 = dividend_remainder << bit_count | divisor >> (quotient & 0xff);\n      uVar5 = uVar3 >> 0x10;\n      uVar4 = uVar8 / uVar5;\n      uVar9 = (uVar3 & 0xffff) * uVar4;\n      uVar6 = dividend >> (quotient & 0xff) | dividend_divisor << bit_count;\n      quotient = uVar6 >> 0x10 | (uVar8 - uVar5 * uVar4) * 0x10000;\n      uVar8 = uVar4;\n      if (quotient <= uVar9 && uVar9 - quotient != 0) {\n        carry_flag = CARRY4(quotient,uVar3);\n        quotient = quotient + uVar3;\n        uVar8 = uVar4 - 1;\n        if ((carry_flag == false) && (quotient <= uVar9 && uVar9 - quotient != 0)) {\n          uVar8 = uVar4 - 2;\n          quotient = quotient + uVar3;\n        }\n      }\n      uVar4 = (quotient - uVar9) / uVar5;\n      uVar7 = (uVar3 & 0xffff) * uVar4;\n      uVar5 = uVar6 & 0xffff | ((quotient - uVar9) - uVar5 * uVar4) * 0x10000;\n      quotient = uVar4;\n      if (uVar5 <= uVar7 && uVar7 - uVar5 != 0) {\n        carry_flag = CARRY4(uVar5,uVar3);\n        uVar5 = uVar5 + uVar3;\n        quotient = uVar4 - 1;\n        if ((carry_flag == false) && (uVar5 <= uVar7 && uVar7 - uVar5 != 0)) {\n          quotient = uVar4 - 2;\n          uVar5 = uVar5 + uVar3;\n        }\n      }\n      quotient = quotient | uVar8 << 0x10;\n      temp_result = (ulonglong)quotient * (ulonglong)(divisor << bit_count);\n      uVar8 = (uint)((ulonglong)temp_result >> 0x20);\n      if ((uVar5 - uVar7 < uVar8) || ((uVar5 - uVar7 == uVar8 && (dividend << bit_count < (uint)temp_result)))\n         ) {\n        quotient = quotient - 1;\n      }\n    }\n  }\n  return (ulonglong)quotient;\n}\n\n",
            "renaming": {
                "FUN_00084a80": "calculate_dividend_00084a80",
                "param_1": "dividend",
                "param_2": "dividend_divisor",
                "param_3": "divisor",
                "param_4": "dividend_remainder",
                "lVar1": "temp_result",
                "uVar2": "quotient",
                "iVar10": "bit_count",
                "bVar11": "carry_flag"
            },
            "calling": [
                "FUN_000847ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085858": {
            "entrypoint": "0x00085858",
            "current_name": "FUNC_00085858",
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 95438,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_0008021c",
            "FUN_000803d4",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "thunk_FUN_00081714",
            "FUN_00081388",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_000815f8",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00083974",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_00084384",
            "FUN_000845bc",
            "FUN_000847e0",
            "FUN_00084a80"
        ],
        [
            "FUN_00080410",
            "FUN_00080ce0",
            "FUN_00080da0",
            "FUN_000813a8",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_00081c5c",
            "FUN_00082970",
            "FUN_00083b14",
            "FUN_0008456c",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_0008477c",
            "FUN_000847ac"
        ],
        [
            "FUN_00080c0c",
            "FUN_00081210",
            "FUN_00081c54",
            "FUN_00081c94",
            "FUN_00083d00",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_00084750"
        ],
        [
            "FUN_00081318",
            "FUN_00081ca8",
            "FUN_00083d9c"
        ],
        [
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_00080258",
            "FUN_00080ae4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_00083adc"
        ],
        [
            "FUN_000802da",
            "FUN_0008043e",
            "FUN_000804a8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081df4",
            "FUN_000825b0",
            "FUN_000842a4",
            "FUN_000846a4"
        ],
        [
            "FUN_000805d0",
            "FUN_000825a0",
            "FUN_00083808"
        ],
        [
            "FUN_00081622",
            "FUN_000816a8",
            "FUN_00083f34",
            "FUN_000844c4"
        ],
        [
            "FUN_0008163a",
            "FUN_00083c40"
        ],
        [
            "FUN_0008165c",
            "FUN_00082ac0"
        ],
        [
            "FUN_00081682"
        ],
        [
            "FUN_00080a68"
        ],
        [
            "FUN_0008378c"
        ]
    ],
    "locked_functions": [
        "FUN_00082b38"
    ]
}