{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeFlag_000800f4(undefined4 inputValue)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_data_00080164",
            "code": "\nvoid initializeData_00080164(int **pointerToData)\n\n{\n  int returnValue;\n  \n  *pointerToData = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte *)((int)pointerToData + 6)) {\n    FUN_00081210(*(byte *)((int)pointerToData + 6),1);\n    FUN_00081318(*(undefined *)((int)pointerToData + 6),0);\n  }\n  do {\n    returnValue = (**(code **)(**pointerToData + 0xc))();\n  } while (-1 < returnValue);\n  *(undefined *)((int)pointerToData + 0x49) = 0;\n  *(undefined *)((int)pointerToData + 0x4a) = 0;\n  *(undefined2 *)(pointerToData + 0x15) = 0;\n  *(undefined2 *)((int)pointerToData + 0x52) = 0;\n  *(undefined2 *)(pointerToData + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_data_00080164",
                "param_1": "pointerToData",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_000804a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801b0": {
            "entrypoint": "0x000801b0",
            "current_name": "process_data_000801b0",
            "code": "\nint processData_000801b0(int **data)\n\n{\n  bool isFull;\n  undefined newValue;\n  char charValue;\n  int result;\n  byte count;\n  \n  if (1 < *(byte *)((int)data + 6)) {\n    FUN_00081318(*(byte *)((int)data + 6),0);\n  }\n  isFull = false;\n  *(undefined *)((int)data + 0x49) = 0;\n  if (*(byte *)((int)data + 5) < 4) {\n    while (result = (**(code **)(**data + 8))(), result != 0) {\n      count = *(byte *)((int)data + 0x49);\n      newValue = (**(code **)(**data + 0xc))();\n      charValue = *(char *)((int)data + 0x49);\n      *(undefined *)((int)data + count + 9) = newValue;\n      count = charValue + 1;\n      *(byte *)((int)data + 0x49) = count;\n      if (0x3f < count) {\n        isFull = true;\n      }\n    }\n  }\n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  if (isFull) {\n    charValue = -3;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  else {\n    charValue = *(char *)((int)data + 0x49);\n  }\n  return (int)charValue;\n}\n\n",
            "renaming": {
                "FUN_000801b0": "process_data_000801b0",
                "param_1": "data",
                "bVar1": "isFull",
                "uVar2": "newValue",
                "cVar3": "charValue",
                "iVar4": "result",
                "bVar5": "count"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008021c": {
            "entrypoint": "0x0008021c",
            "current_name": "calculate_checksum_0008021c",
            "code": "\nuint calculate_checksum_0008021c(int input_data,uint data_length)\n\n{\n  int index;\n  uint result;\n  char bit_index;\n  uint bit;\n  \n  result = 0xffff;\n  for (index = input_data; (index - input_data & 0xffU) < data_length; index = index + 1) {\n    result = result ^ *(byte *)(index + 9);\n    bit_index = '\\b';\n    do {\n      bit = result & 1;\n      result = result >> 1;\n      if (bit != 0) {\n        result = result ^ 0xa001;\n      }\n      bit_index = bit_index + -1;\n    } while (bit_index != '\\0');\n  }\n  return (result & 0xff) << 8 | result >> 8;\n}\n\n",
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "input_data",
                "param_2": "data_length",
                "iVar1": "index",
                "uVar2": "result",
                "cVar3": "bit_index",
                "uVar4": "bit"
            },
            "calling": [
                "FUN_00080258"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080258": {
            "entrypoint": "0x00080258",
            "current_name": "update_param1_00080258",
            "code": "\nvoid updateParam1_00080258(int **paramArray,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte byteVal;\n  undefined2 ushortVal;\n  int intVal;\n  uint uintVal;\n  \n  byteVal = *(byte *)((int)paramArray + 0x49);\n  uintVal = (uint)byteVal;\n  ushortVal = FUN_0008021c(paramArray,uintVal,param3,param4,param4);\n  *(char *)((int)paramArray + uintVal + 9) = (char)((ushort)ushortVal >> 8);\n  *(char *)((int)paramArray + (uintVal + 1 & 0xff) + 9) = (char)ushortVal;\n  *(byte *)((int)paramArray + 0x49) = byteVal + 2;\n  if (1 < *(byte *)((int)paramArray + 6)) {\n    FUN_00081318(*(byte *)((int)paramArray + 6),1);\n  }\n  if (*(byte *)((int)paramArray + 5) < 4) {\n    (**(code **)(**paramArray + 4))(*paramArray,(int)paramArray + 9,*(undefined *)((int)paramArray + 0x49));\n  }\n  if (1 < *(byte *)((int)paramArray + 6)) {\n    FUN_00081318(*(byte *)((int)paramArray + 6),0);\n  }\n  if (*(byte *)((int)paramArray + 5) < 4) {\n    do {\n      intVal = (**(code **)(**paramArray + 0xc))();\n    } while (-1 < intVal);\n  }\n  *(undefined *)((int)paramArray + 0x49) = 0;\n  intVal = thunk_FUN_00081714();\n  paramArray[0x17] = (int *)(intVal + (uint)*(ushort *)((int)paramArray + 0x56));\n  *(short *)((int)paramArray + 0x52) = *(short *)((int)paramArray + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080258": "update_param1_00080258",
                "param_1": "paramArray",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "byteVal",
                "uVar2": "ushortVal",
                "iVar3": "intVal",
                "uVar4": "uintVal"
            },
            "calling": [
                "FUN_000802da"
            ],
            "called": [
                "FUN_0008021c",
                "FUN_00081318",
                "thunk_FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000802da": {
            "entrypoint": "0x000802da",
            "current_name": "decode_data_000802da",
            "code": "\nint decode_data_000802da(int data_ptr,uint config,uint data_length,ushort *data)\n\n{\n  char result;\n  byte flag;\n  undefined temp;\n  ushort temp_short;\n  uint temp_uint;\n  ushort *data_ptr_temp;\n  undefined config_low_byte;\n  undefined config_high_byte;\n  ushort data_length_uint;\n  \n  config_low_byte = (undefined)config;\n  config_high_byte = (undefined)(config >> 8);\n  data_length_uint = (ushort)data_length;\n  temp_uint = data_length & 0xffff;\n  if (*(char *)(data_ptr + 4) != '\\0') {\n    result = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(data_ptr + 7) != '\\0') {\n    result = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((config & 0xff) - 1 & 0xff)) {\n    result = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(data_ptr + 9) = config_low_byte;\n  *(undefined *)(data_ptr + 10) = config_high_byte;\n  *(ushort **)(data_ptr + 0x4c) = data;\n  *(char *)(data_ptr + 0xb) = (char)(config >> 0x18);\n  *(char *)(data_ptr + 0xc) = (char)(config >> 0x10);\n  temp = (undefined)(data_length >> 8);\n  switch(config_high_byte) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(data_ptr + 0xd) = temp;\n    break;\n  case 5:\n    temp_short = *data;\n    if (temp_short != 0) {\n      temp_short = 1;\n    }\n    *(char *)(data_ptr + 0xd) = -(char)temp_short;\n    temp_uint = 0;\n    break;\n  case 6:\n    *(char *)(data_ptr + 0xd) = (char)(*data >> 8);\n    temp_uint = (uint)*data;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    flag = (byte)(data_length_uint >> 3) & 0xfe;\n    if ((data_length & 0xf) != 0) {\n      flag = flag + 1;\n    }\n    *(char *)(data_ptr + 0xe) = (char)data_length;\n    *(undefined *)(data_ptr + 0xd) = temp;\n    *(byte *)(data_ptr + 0xf) = flag;\n    temp = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(data_ptr + 0xd) = temp;\n    *(char *)(data_ptr + 0xe) = (char)data_length;\n    data = data + -1;\n    *(char *)(data_ptr + 0xf) = (char)temp_uint * '\\x02';\n    *(undefined *)(data_ptr + 0x49) = 7;\n    data_ptr_temp = data + temp_uint;\n    while (data != data_ptr_temp) {\n      flag = *(byte *)(data_ptr + 0x49);\n      *(char *)(data_ptr + (uint)flag + 9) = (char)(data[1] >> 8);\n      temp_uint = flag + 1 & 0xff;\n      *(char *)(data_ptr + 0x49) = (char)temp_uint;\n      data = data + 1;\n      *(char *)(temp_uint + data_ptr + 9) = (char)*data;\n      *(byte *)(data_ptr + 0x49) = flag + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(data_ptr + 0xe) = (char)temp_uint;\n  temp = 6;\nLAB_0008034a:\n  *(undefined *)(data_ptr + 0x49) = temp;\nswitchD_0008031e_caseD_7:\n  FUN_00080258(data_ptr);\n  *(undefined *)(data_ptr + 7) = 1;\n  result = '\\0';\nLAB_000803cc:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_000802da": "decode_data_000802da",
                "param_1": "data_ptr",
                "param_2": "config",
                "param_3": "data_length",
                "param_4": "data",
                "cVar1": "result",
                "bVar2": "flag",
                "uVar3": "temp",
                "uVar4": "temp_short",
                "uVar5": "temp_uint",
                "puVar6": "data_ptr_temp",
                "local_1c": "config_low_byte",
                "local_1b": "config_high_byte",
                "local_18": "data_length_uint"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00080258"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803d4": {
            "entrypoint": "0x000803d4",
            "current_name": "check_value_and_update_000803d4",
            "code": "\nundefined4 checkValueAndUpdate_000803d4(int inputValue)\n\n{\n  int counter;\n  \n  if ((int)((uint)*(byte *)(inputValue + 10) << 0x18) < 0) {\n    *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n    return 0xfb;\n  }\n  counter = 0;\n  do {\n    if ((&DAT_00084d10)[counter] == *(byte *)(inputValue + 10)) {\n      return 0;\n    }\n    counter = counter + 1;\n  } while (counter != 8);\n  *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000803d4": "check_value_and_update_000803d4",
                "param_1": "inputValue",
                "iVar1": "counter"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080410": {
            "entrypoint": "0x00080410",
            "current_name": "process_data_00080410",
            "code": "\nvoid processData_00080410(int dataPtr,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 result;\n  int offset;\n  byte counter;\n  uint index;\n  int arrayPtr;\n  \n  counter = 0;\n  while( true ) {\n    index = (uint)counter;\n    counter = counter + 1;\n    if (*(byte *)(dataPtr + 0xb) >> 1 <= index) break;\n    offset = (index * 2 + 3 & 0xff) + dataPtr;\n    arrayPtr = *(int *)(dataPtr + 0x4c);\n    result = FUN_000815f8(*(undefined *)(offset + 9),*(undefined *)(offset + 10),offset,\n                         *(byte *)(dataPtr + 0xb),param4);\n    *(undefined2 *)(arrayPtr + index * 2) = result;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080410": "process_data_00080410",
                "param_1": "dataPtr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "iVar2": "offset",
                "bVar3": "counter",
                "uVar4": "index",
                "iVar5": "arrayPtr"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_000815f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008043e": {
            "entrypoint": "0x0008043e",
            "current_name": "check_input_validity_0008043e",
            "code": "\nint checkInputValidity_0008043e(int **input)\n\n{\n  char result;\n  uint returnValue;\n  int *threshold;\n  int comparisonResult;\n  uint condition;\n  \n  if (*(byte *)((int)input + 5) < 4) {\n    returnValue = (**(code **)(**input + 8))();\n    condition = returnValue & 0xff;\n  }\n  threshold = (int *)thunk_FUN_00081714();\n  if (input[23] < threshold) {\n    *(undefined *)(input + 2) = 0xff;\n    *(undefined *)((int)input + 7) = 0;\n    *(short *)(input + 0x15) = *(short *)(input + 0x15) + 1;\n  }\n  else if (7 < condition) {\n    FUN_000801b0(input);\n    comparisonResult = FUN_000803d4(input);\n    if (comparisonResult == 0) {\n      if (*(byte *)((int)input + 10) - 3 < 2) {\n        FUN_00080410(input);\n      }\n      *(undefined *)((int)input + 7) = 0;\n      result = *(char *)((int)input + 0x49);\n    }\n    else {\n      *(undefined *)((int)input + 7) = 0;\n      result = (char)comparisonResult;\n    }\n    goto continueExecution;\n  }\n  result = '\\0';\ncontinueExecution:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_0008043e": "check_input_validity_0008043e",
                "param_1": "input",
                "cVar1": "result",
                "uVar2": "returnValue",
                "piVar3": "threshold",
                "iVar4": "comparisonResult",
                "unaff_r6": "condition",
                "param_1[0x17]": "input[23]",
                "LAB_000804a2": "continueExecution"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "thunk_FUN_00081714",
                "FUN_00080410",
                "FUN_000803d4",
                "FUN_000801b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000804a8": {
            "entrypoint": "0x000804a8",
            "current_name": "initialize_system_000804a8",
            "code": "\nundefined8 initializeSystem_000804a8(void)\n\n{\n  int tempVar1;\n  \n  FUN_00081210(1,0);\n  FUN_00081210(6,1);\n  FUN_00081210(0,1);\n  FUN_00081210(1,1);\n  FUN_00081318(0,0);\n  FUN_00081318(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  FUN_00080164(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = thunk_FUN_00081714();\n  tempVar1 = thunk_FUN_00081714();\n  DAT_200709e0 = tempVar1 + 1000;\n  tempVar1 = thunk_FUN_00081714();\n  DAT_20070a48 = tempVar1 + 1000;\n  tempVar1 = thunk_FUN_00081714();\n  DAT_20070934 = tempVar1 + 1000;\n  tempVar1 = thunk_FUN_00081714();\n  DAT_200708c0 = tempVar1 + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000804a8": "initialize_system_000804a8",
                "iVar1": "tempVar1"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_00081210",
                "FUN_00080164"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805d0": {
            "entrypoint": "0x000805d0",
            "current_name": "process_data_000805d0",
            "code": "\n\n\nvoid processData_000805d0(void)\n\n{\n  uint result;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  int counter;\n  uint *ptr7;\n  undefined4 *ptr8;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    result = thunk_FUN_00081714();\n    if (DAT_200708c8 < result) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = FUN_00081894(DAT_200708d8);\n      DAT_2007094c = FUN_0008189c(DAT_200708da / 10);\n      DAT_200709c4 = FUN_00081894(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n    }\n    break;\n  case '\\x03':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      ptr8 = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      FUN_000802da(&DAT_200709e4,*ptr8,ptr8[1],ptr8[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    FUN_0008043e(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      ptr8 = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = thunk_FUN_00081714();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    ptr7 = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *ptr7 = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (result = thunk_FUN_00081714(), DAT_200708c0 < result))\n    {\n      DAT_20070960 = DAT_20070960 + 1;\n      counter = thunk_FUN_00081714();\n      DAT_200708c0 = counter + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      result = thunk_FUN_00081714();\n      if (DAT_200708c0 < result) {\n        DAT_2007090c = DAT_2007090c + 1;\n        counter = thunk_FUN_00081714();\n        DAT_200708c0 = counter + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        ptr7 = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      result = thunk_FUN_00081714();\n      if (DAT_200708c0 < result) {\n        DAT_2007090c = DAT_2007090c + 1;\n        counter = thunk_FUN_00081714();\n        DAT_200708c0 = counter + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  result = thunk_FUN_00081714();\n  if (DAT_200709e0 < result) {\n    var2 = FUN_0008189c(DAT_20070940);\n    var3 = FUN_00081730(var2,DAT_200709c8);\n    var2 = DAT_200708c4;\n    DAT_20070930 = var3;\n    var4 = FUN_00081734(var3,DAT_200708c4);\n    var4 = FUN_00081944(var4,DAT_2007094c);\n    var4 = FUN_00081734(var4,DAT_20070914);\n    DAT_2007094c = var4;\n    var2 = FUN_00081730(var3,var2);\n    var2 = FUN_00081944(var2,DAT_200709c4);\n    var2 = FUN_00081730(var2,DAT_2007096c);\n    DAT_200709c4 = var2;\n    var5 = FUN_00081944(var3,DAT_20070a4c);\n    var5 = FUN_00081734(var5,var4);\n    FUN_00081734(var5,var2);\n    DAT_20070910 = FUN_00081cd0();\n    DAT_2007091c = FUN_0008189c();\n    DAT_2007092c = 0;\n    DAT_200708c4 = var3;\n    DAT_20070914 = var4;\n    DAT_2007096c = var2;\n    counter = thunk_FUN_00081714();\n    DAT_200709e0 = counter + DAT_20070970;\n  }\n  var2 = FUN_0008189c(DAT_20070970);\n  counter = FUNC_00081ca8(DAT_2007091c,var2);\n  if (counter != 0) {\n    DAT_2007091c = var2;\n  }\n  counter = FUN_00081c94(DAT_2007091c,0);\n  if (counter != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = FUN_00081d1c(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805d0": "process_data_000805d0",
                "uVar1": "result",
                "uVar2": "var2",
                "uVar3": "var3",
                "uVar4": "var4",
                "uVar5": "var5",
                "iVar6": "counter",
                "puVar7": "ptr7",
                "puVar8": "ptr8"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081734",
                "FUN_00081d1c",
                "FUN_00081944",
                "thunk_FUN_00081714",
                "FUN_000802da",
                "FUN_00081c94",
                "FUN_0008043e",
                "FUN_00081cd0",
                "FUN_00081894",
                "FUN_00081730",
                "FUN_00081ca8",
                "FUN_0008189c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a68": {
            "entrypoint": "0x00080a68",
            "current_name": "initialize_data_00080a68",
            "code": "\nvoid initializeData_00080a68(void)\n\n{\n  FUN_00081682(&DAT_20070954,\"\");\n  FUN_00081d5c(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a68": "initialize_data_00080a68"
            },
            "calling": [],
            "called": [
                "FUN_00081682",
                "FUN_00081d5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "FUNC_00080aa8",
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ab8": {
            "entrypoint": "0x00080ab8",
            "current_name": "FUNC_00080ab8",
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aba": {
            "entrypoint": "0x00080aba",
            "current_name": "FUNC_00080aba",
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080abc": {
            "entrypoint": "0x00080abc",
            "current_name": "FUNC_00080abc",
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ae4": {
            "entrypoint": "0x00080ae4",
            "current_name": "initialize_system_00080ae4",
            "code": "\n\n\nvoid initializeSystem_00080ae4(void)\n\n{\n  int iteration;\n  int nextIteration;\n  \n  FUN_00080e9c();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  FUN_00081d7c();\n  iteration = 0;\n  do {\n    nextIteration = iteration + 1;\n    FUN_00081318(iteration,0);\n    iteration = nextIteration;\n  } while (nextIteration != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  FUN_00080da0(0x400e0e00,1,0x300,0);\n  FUN_00081318(0,1);\n  FUN_00080da0(0x400e0e00,1,0xc00,0);\n  FUN_00080da0(0x400e0e00,1,0x3000,0);\n  FUN_00080da0(0x400e1400,2,0x30,0);\n  FUN_00080da0(0x400e1000,1,0xc00,0);\n  FUN_00080da0(0x400e0e00,1,3,0);\n  FUN_00080da0(0x400e1000,1,0xc000,0);\n  FUN_00080e18(0x25);\n  FUN_00080f9c(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  FUN_00081042(0x400c0000,0,0x300000,1);\n  FUN_00081034(0x400c0000,0,0);\n  FUN_0008106e(0x400c0000,0xffffffff);\n  FUN_00081066(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ae4": "initialize_system_00080ae4",
                "iVar1": "iteration",
                "iVar2": "nextIteration"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080e18",
                "FUN_00081066",
                "FUN_00081034",
                "FUN_00081318",
                "FUN_00080e9c",
                "FUN_00080da0",
                "FUN_00081d7c",
                "FUN_0008106e",
                "FUN_00080f9c",
                "FUN_00081042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "entrypoint": "0x00080c0c",
            "current_name": "initialize_devices_00080c0c",
            "code": "\nvoid initializeDevices_00080c0c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  FUN_000813a8(&DAT_20070b84);\n  FUN_000813a8(&DAT_20070ad8);\n  FUN_000814e4(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,param3);\n  FUN_000813a8(&DAT_20070de4);\n  FUN_000813a8(&DAT_20070e6c);\n  FUN_000813a8(&DAT_20070ef4);\n  FUN_000813a8(&DAT_20070a50);\n  FUN_000813a8(&DAT_20070c84);\n  FUN_000813a8(&DAT_20070d0c);\n  FUN_000815d4(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  FUN_000815d4(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  FUN_000815d4(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080c0c": "initialize_devices_00080c0c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [],
            "called": [
                "FUN_000815d4",
                "FUN_000813a8",
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "entrypoint": "0x00080ce0",
            "current_name": "check_and_execute_functions_00080ce0",
            "code": "\nvoid checkAndExecuteFunctions_00080ce0(void)\n\n{\n  int returnValue;\n  \n  returnValue = FUN_000813e4(&DAT_20070b60);\n  if (returnValue != 0) {\n    FUNC_00080aa8();\n  }\n  returnValue = FUN_000813e4(&DAT_20070c0c);\n  if (returnValue != 0) {\n    FUNC_00080ab8();\n  }\n  returnValue = FUN_000813e4(&DAT_20070c34);\n  if (returnValue != 0) {\n    FUNC_00080aba();\n  }\n  returnValue = FUN_000813e4(&DAT_20070c5c);\n  if (returnValue != 0) {\n    FUNC_00080abc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ce0": "check_and_execute_functions_00080ce0",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080aba",
                "FUN_00080abc",
                "FUN_000813e4",
                "FUN_00080aa8",
                "FUN_00080ab8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "entrypoint": "0x00080d2e",
            "current_name": "update_param_value_00080d2e",
            "code": "\nvoid updateParamValue_00080d2e(int baseAddress,undefined4 switchValue,uint newValue)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(baseAddress + 0x44) = newValue;\n  switch(switchValue) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~newValue;\n    break;\n  case 2:\n    updatedValue = *(uint *)(baseAddress + 0x70) | newValue;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(baseAddress + 0x70) = updatedValue;\nswitchD_00080d34_caseD_6:\n  *(uint *)(baseAddress + 4) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d2e": "update_param_value_00080d2e",
                "param_1": "baseAddress",
                "param_2": "switchValue",
                "param_3": "newValue",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d54": {
            "entrypoint": "0x00080d54",
            "current_name": "set_values_00080d54",
            "code": "\nvoid setValues_00080d54(undefined4 *outputArray,undefined4 inputValue,uint flags)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(flags << 0x1f) < 0;\n  outputArray[0x11] = inputValue;\n  if (isNegative) {\n    outputArray[0x19] = inputValue;\n  }\n  if (!isNegative) {\n    outputArray[0x18] = inputValue;\n  }\n  isNegative = (flags & 10) != 0;\n  if (isNegative) {\n    outputArray[8] = inputValue;\n  }\n  if (!isNegative) {\n    outputArray[9] = inputValue;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    outputArray[0x20] = inputValue;\n  }\n  outputArray[5] = inputValue;\n  *outputArray = inputValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d54": "set_values_00080d54",
                "param_1": "outputArray",
                "param_2": "inputValue",
                "param_3": "flags",
                "bVar1": "isNegative"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "entrypoint": "0x00080d7a",
            "current_name": "set_values_in_array_00080d7a",
            "code": "\nvoid setValuesInArray_00080d7a(undefined4 *array,undefined4 value,int condition1,int condition2,int condition3)\n\n{\n  array[0x11] = value;\n  if (condition3 == 0) {\n    array[0x18] = value;\n  }\n  else {\n    array[0x19] = value;\n  }\n  if (condition2 == 0) {\n    array[0x15] = value;\n  }\n  else {\n    array[0x14] = value;\n  }\n  if (condition1 == 0) {\n    array[0xd] = value;\n  }\n  else {\n    array[0xc] = value;\n  }\n  array[4] = value;\n  *array = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d7a": "set_values_in_array_00080d7a",
                "param_1": "array",
                "param_2": "value",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080da0": {
            "entrypoint": "0x00080da0",
            "current_name": "update_config_00080da0",
            "code": "\nundefined4 updateConfig_00080da0(int config,int option,undefined4 value,uint flag)\n\n{\n  bool isNegative;\n  \n  switch(option) {\n  case 1:\n  case 2:\n    FUN_00080d2e(config,option,value);\n    isNegative = (int)(flag << 0x1f) < 0;\n    *(undefined4 *)(config + 0x44) = value;\n    if (isNegative) {\n      *(undefined4 *)(config + 100) = value;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(config + 0x60) = value;\n    }\n    break;\n  case 3:\n    FUN_00080d54(config,value,flag,0x80d55,config);\n    break;\n  case 4:\n  case 5:\n    FUN_00080d7a(config,value,option == 5,(flag << 0x1d) >> 0x1f,flag & 1,option,value)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080da0": "update_config_00080da0",
                "param_1": "config",
                "param_2": "option",
                "param_3": "value",
                "param_4": "flag",
                "bVar1": "isNegative"
            },
            "calling": [
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00080d54",
                "FUN_00080d2e",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e04": {
            "entrypoint": "0x00080e04",
            "current_name": "check_bitwise_intersection_00080e04",
            "code": "\nuint checkBitwiseIntersection_00080e04(int input_ptr,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(input_ptr + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(input_ptr + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080e04": "check_bitwise_intersection_00080e04",
                "param_1": "input_ptr",
                "param_2": "mask",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081318"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e18": {
            "entrypoint": "0x00080e18",
            "current_name": "check_and_set_bit_00080e18",
            "code": "\n\n\nundefined4 checkAndSetBit_00080e18(uint bitPosition)\n\n{\n  uint bitMask;\n  \n  if (bitPosition < 0x2d) {\n    if (bitPosition < 0x20) {\n      bitMask = 1 << (bitPosition & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (bitPosition - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e18": "check_and_set_bit_00080e18",
                "param_1": "bitPosition",
                "uVar1": "bitMask"
            },
            "calling": [
                "FUN_00081508",
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "entrypoint": "0x00080e9c",
            "current_name": "initialize_memory_00080e9c",
            "code": "\n\n\nvoid initializeMemory_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  elfOffset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e9c": "initialize_memory_00080e9c",
                "Elf32_Rel_ARRAY_20070000[6].r_offset": "elfOffset"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080f24",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_2007089c\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_0008588c + iVar1);\n  }\n  for (puVar2 = &DAT_2007089c; puVar2 < (undefined4 *)0x200711c0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  FUN_000816a8();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000816a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "entrypoint": "0x00080f9c",
            "current_name": "calculate_threshold_00080f9c",
            "code": "\nundefined4 calculateThreshold_00080f9c(undefined4 *outputArray,uint inputValue,int divisor1,int divisor2)\n\n{\n  uint quotient;\n  uint index;\n  uint thresholdArray [16];\n  \n  thresholdArray[0] = 0;\n  thresholdArray[1] = 8;\n  thresholdArray[2] = 0x10;\n  thresholdArray[3] = 0x18;\n  thresholdArray[4] = 0x40;\n  thresholdArray[5] = 0x50;\n  thresholdArray[6] = 0x60;\n  thresholdArray[7] = 0x70;\n  thresholdArray[8] = 0x200;\n  thresholdArray[9] = 0x240;\n  thresholdArray[10] = 0x280;\n  thresholdArray[11] = 0x2c0;\n  thresholdArray[12] = 0x300;\n  thresholdArray[13] = 0x340;\n  thresholdArray[14] = 0x380;\n  thresholdArray[15] = 0x3c0;\n  *outputArray = 1;\n  outputArray[1] = 0;\n  outputArray[0x48] = 0x202;\n  outputArray[0x41] = 0;\n  outputArray[0x45] = 0;\n  quotient = inputValue / (uint)(divisor1 * 2);\n  if (inputValue == divisor1 * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(divisor2 * (int)(((ulonglong)inputValue / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        thresholdArray[index]) {\n      outputArray[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | outputArray[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080f9c": "calculate_threshold_00080f9c",
                "param_1": "outputArray",
                "param_2": "inputValue",
                "param_3": "divisor1",
                "param_4": "divisor2",
                "uVar1": "quotient",
                "uVar2": "index",
                "local_58": "thresholdArray"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081034": {
            "entrypoint": "0x00081034",
            "current_name": "update_bitwise_values_00081034",
            "code": "\nvoid updateBitwiseValues_00081034(int memoryAddress,uint value1,uint value2)\n\n{\n  *(uint *)(memoryAddress + 4) = value1 | *(uint *)(memoryAddress + 4) | (value2 & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081034": "update_bitwise_values_00081034",
                "param_1": "memoryAddress",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081042": {
            "entrypoint": "0x00081042",
            "current_name": "update_value_00081042",
            "code": "\nvoid updateValue_00081042(int baseAddress,uint value1,uint oldValue,uint value2)\n\n{\n  *(uint *)(baseAddress + 4) =\n       oldValue | *(uint *)(baseAddress + 4) | (value1 & 0xf) << 0x18 | (value2 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081042": "update_value_00081042",
                "param_1": "baseAddress",
                "param_2": "value1",
                "param_3": "oldValue",
                "param_4": "value2"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008105c": {
            "entrypoint": "0x0008105c",
            "current_name": "set_bit_0008105c",
            "code": "\nvoid setBit_0008105c(int baseAddress,uint bitIndex)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitIndex & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008105c": "set_bit_0008105c",
                "param_1": "baseAddress",
                "param_2": "bitIndex"
            },
            "calling": [
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081066": {
            "entrypoint": "0x00081066",
            "current_name": "initialize_value_00081066",
            "code": "\nvoid initializeValue_00081066(int inputAddress)\n\n{\n  *(undefined4 *)(inputAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081066": "initialize_value_00081066",
                "param_1": "inputAddress"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008106e": {
            "entrypoint": "0x0008106e",
            "current_name": "store_parameter_value_0008106e",
            "code": "\nvoid storeParameterValue_0008106e(int baseAddress,undefined4 parameterValue)\n\n{\n  *(undefined4 *)(baseAddress + 0x28) = parameterValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008106e": "store_parameter_value_0008106e",
                "param_1": "baseAddress",
                "param_2": "parameterValue"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081184": {
            "entrypoint": "0x00081184",
            "current_name": "initialize_application_00081184",
            "code": "\nundefined4 initializeApplication_00081184(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081184": "initialize_application_00081184"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008118c": {
            "entrypoint": "0x0008118c",
            "current_name": "calculate_sum_0008118c",
            "code": "\nint calculateSum_0008118c(int input)\n\n{\n  int previousSum;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  previousSum = DAT_20071180;\n  DAT_20071180 = input + DAT_20071180;\n  return previousSum;\n}\n\n",
            "renaming": {
                "FUN_0008118c": "calculate_sum_0008118c",
                "param_1": "input",
                "iVar1": "previousSum"
            },
            "calling": [
                "FUN_00082970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ae": {
            "entrypoint": "0x000811ae",
            "current_name": "return_all_ones_000811ae",
            "code": "\nundefined4 returnAllOnes_000811ae(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000811ae": "return_all_ones_000811ae"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b4": {
            "entrypoint": "0x000811b4",
            "current_name": "set_memory_to_value_000811b4",
            "code": "\nundefined4 setMemoryToValue_000811b4(undefined4 param1,int param2)\n\n{\n  *(undefined4 *)(param2 + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811b4": "set_memory_to_value_000811b4",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "FUN_000846b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811be": {
            "entrypoint": "0x000811be",
            "current_name": "get_return_value_000811be",
            "code": "\nundefined4 getReturnValue_000811be(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000811be": "get_return_value_000811be"
            },
            "calling": [
                "FUN_000846dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c2": {
            "entrypoint": "0x000811c2",
            "current_name": "get_default_value_000811c2",
            "code": "\nundefined4 get_default_value_000811c2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c2": "get_default_value_000811c2"
            },
            "calling": [
                "FUN_00084700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c6": {
            "entrypoint": "0x000811c6",
            "current_name": "initialize_application_000811c6",
            "code": "\nundefined4 initializeApplication_000811c6(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c6": "initialize_application_000811c6"
            },
            "calling": [
                "FUN_00084728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811cc": {
            "entrypoint": "0x000811cc",
            "current_name": "read_and_set_data_000811cc",
            "code": "\n\n\nuint read_and_set_data_000811cc(undefined4 address,int data_array,uint size)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)size; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(data_array + index);\n  }\n  return size & ~((int)size >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_000811cc": "read_and_set_data_000811cc",
                "param_1": "address",
                "param_2": "data_array",
                "param_3": "size",
                "iVar1": "index"
            },
            "calling": [
                "FUN_00084464"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00081714": {
            "entrypoint": "0x00081208",
            "current_name": "get_data_value_thunk_00081714",
            "code": "\nundefined4 get_data_value_thunk_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "thunk_FUN_00081714": "get_data_value_thunk_00081714"
            },
            "calling": [
                "FUN_0008043e",
                "FUN_000804a8",
                "FUN_000805d0",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008120c": {
            "entrypoint": "0x0008120c",
            "current_name": "FUNC_0008120c",
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081210": {
            "entrypoint": "0x00081210",
            "current_name": "translate_parameter_00081210",
            "code": "\n\n\nint translateParameter_00081210(int inputValue,int translationType)\n\n{\n  int translatedValue;\n  uint tempVar1;\n  undefined4 tempVar2;\n  uint tempVar3;\n  byte lowerNibble;\n  byte inputValueNibble;\n  int tempVar4;\n  int tempVar5;\n  \n  translatedValue = inputValue;\n  if ((&DAT_00084d24)[inputValue * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[inputValue] & 0xf) == 4) {\n      translatedValue = FUN_0008105c(0x400c0000,(&DAT_00084d31)[inputValue * 0x1c]);\n    }\n    inputValueNibble = (&DAT_20070d94)[inputValue];\n    lowerNibble = inputValueNibble & 0xf;\n    if ((lowerNibble < 3) && (inputValueNibble != 0)) {\n      if (lowerNibble == 2) {\n        if (translationType == 0) {\n          return translatedValue;\n        }\n      }\n      else if (lowerNibble == 1) {\n        if (translationType == 2) {\n          return translatedValue;\n        }\n      }\n      else if (lowerNibble == 3) {\n        if (translationType == 1) {\n          return translatedValue;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (translationType != 1) {\nLAB_0008126c:\n      if (translationType == 0) {\n        translatedValue = inputValue * 0x1c;\n        FUN_00080e18(*(undefined4 *)(&DAT_00084d20 + translatedValue));\n        translatedValue = FUN_00080da0(*(undefined4 *)(&DAT_00084d18 + translatedValue),3,\n                             *(undefined4 *)(&DAT_00084d1c + translatedValue),0);\n        inputValueNibble = (&DAT_20070d94)[inputValue] & 0xf0 | 2;\n      }\n      else {\n        if (translationType != 2) {\n          return translatedValue;\n        }\n        translatedValue = inputValue * 0x1c;\n        FUN_00080e18(*(undefined4 *)(&DAT_00084d20 + translatedValue));\n        translatedValue = FUN_00080da0(*(undefined4 *)(&DAT_00084d18 + translatedValue),3,\n                             *(undefined4 *)(&DAT_00084d1c + translatedValue),1);\n        inputValueNibble = (&DAT_20070d94)[inputValue] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[inputValue] = inputValueNibble;\n      return translatedValue;\n    }\n    tempVar4 = inputValue * 0x1c;\n    tempVar5 = *(int *)(&DAT_00084d18 + tempVar4);\n    if (inputValueNibble >> 4 == 0) {\n      tempVar2 = 4;\n    }\n    else {\n      tempVar2 = 5;\n    }\n    translatedValue = FUN_00080da0(tempVar5,tempVar2,*(undefined4 *)(&DAT_00084d1c + tempVar4),\n                         *(undefined4 *)(&DAT_00084d28 + tempVar4));\n    (&DAT_20070d94)[inputValue] = (&DAT_20070d94)[inputValue] & 0xf0 | 3;\n    if (*(int *)(tempVar5 + 0x18) == -1) {\n      tempVar1 = *(uint *)(&DAT_00084d20 + tempVar4);\n      if (0x2c < tempVar1) {\n        return 1;\n      }\n      if (tempVar1 < 0x20) {\n        tempVar1 = 1 << (tempVar1 & 0xff);\n        tempVar3 = _DAT_400e0618 & tempVar1;\n        if (tempVar3 == tempVar1) {\n          _DAT_400e0614 = tempVar3;\n        }\n      }\n      else {\n        tempVar1 = 1 << (tempVar1 - 0x20 & 0xff);\n        tempVar3 = _DAT_400e0708 & tempVar1;\n        if (tempVar3 == tempVar1) {\n          _DAT_400e0704 = tempVar3;\n        }\n      }\n      return 0;\n    }\n  }\n  return translatedValue;\n}\n\n",
            "renaming": {
                "FUN_00081210": "translate_parameter_00081210",
                "param_1": "inputValue",
                "param_2": "translationType",
                "iVar1": "translatedValue",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "tempVar3",
                "bVar5": "lowerNibble",
                "bVar6": "inputValueNibble",
                "iVar7": "tempVar4",
                "iVar8": "tempVar5"
            },
            "calling": [
                "FUN_00081318",
                "FUN_000804a8",
                "FUN_00080164"
            ],
            "called": [
                "FUN_00080e18",
                "FUN_0008105c",
                "FUN_00080da0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081318": {
            "entrypoint": "0x00081318",
            "current_name": "update_device_status_00081318",
            "code": "\nvoid updateDeviceStatus_00081318(int deviceIndex,int statusFlag,undefined4 param)\n\n{\n  int result;\n  undefined4 newValue;\n  int device;\n  \n  if ((&DAT_00084d24)[deviceIndex * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[deviceIndex] & 0xf) == 5) {\n      FUN_00081210(deviceIndex,1,param,5,deviceIndex,statusFlag,param);\n    }\n    (&DAT_20070d94)[deviceIndex] = (&DAT_20070d94)[deviceIndex] & 0xf | (byte)(statusFlag << 4);\n    device = *(int *)(&DAT_00084d18 + deviceIndex * 0x1c);\n    newValue = *(undefined4 *)(&DAT_00084d1c + deviceIndex * 0x1c);\n    result = FUN_00080e04(device,newValue);\n    if (result == 0) {\n      if (statusFlag != 0) {\n        *(undefined4 *)(device + 100) = newValue;\n        return;\n      }\n      *(undefined4 *)(device + 0x60) = newValue;\n      return;\n    }\n    FUN_00080d7a(device,newValue,statusFlag,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081318": "update_device_status_00081318",
                "param_1": "deviceIndex",
                "param_2": "statusFlag",
                "param_3": "param",
                "iVar1": "result",
                "uVar2": "newValue",
                "iVar3": "device"
            },
            "calling": [
                "FUN_000804a8",
                "FUN_000801b0",
                "FUN_00080ae4",
                "FUN_00080164",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00080e04",
                "FUN_00081210",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081388": {
            "entrypoint": "0x00081388",
            "current_name": "execute_if_r_info_equals_zero_00081388",
            "code": "\nvoid execute_if_r_info_equals_zero_00081388(void)\n\n{\n  if ((rel_array[6].info != 0xffffffff) &&\n     (rel_array[6].info = rel_array[6].info - 1,\n     rel_array[6].info == 0)) {\n    (*(function *)((int)&rel_array[0].offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081388": "execute_if_r_info_equals_zero_00081388",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "r_info": "info",
                "r_offset": "offset",
                "code": "function"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813a8": {
            "entrypoint": "0x000813a8",
            "current_name": "initialize_memory_000813a8",
            "code": "\nint initializeMemory_000813a8(int memoryAddress)\n\n{\n  FUN_00082504(memoryAddress,0,0x80);\n  *(undefined4 *)(memoryAddress + 0x80) = 0;\n  *(undefined4 *)(memoryAddress + 0x84) = 0;\n  return memoryAddress;\n}\n\n",
            "renaming": {
                "FUN_000813a8": "initialize_memory_000813a8",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813c2": {
            "entrypoint": "0x000813c2",
            "current_name": "update_buffer_000813c2",
            "code": "\nvoid updateBuffer_000813c2(int buffer,undefined data)\n\n{\n  uint updatedIndex;\n  \n  updatedIndex = *(int *)(buffer + 0x80) + 1U & 0x7f;\n  if (updatedIndex != *(uint *)(buffer + 0x84)) {\n    *(undefined *)(buffer + *(int *)(buffer + 0x80)) = data;\n    *(uint *)(buffer + 0x80) = updatedIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813c2": "update_buffer_000813c2",
                "param_1": "buffer",
                "param_2": "data",
                "uVar1": "updatedIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "calculate_difference_000813e4",
            "code": "\nuint calculate_difference_000813e4(int input_value)\n\n{\n  return *(int *)(*(int *)(input_value + 0x10) + 0x80) - *(int *)(*(int *)(input_value + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081454": {
            "entrypoint": "0x00081454",
            "current_name": "update_data_00081454",
            "code": "\nundefined4 updateData_00081454(int dataPointer,undefined4 newValue)\n\n{\n  int structAddress;\n  uint newIndex;\n  \n  structAddress = *(int *)(dataPointer + 0x14);\n  if ((*(int *)(*(int *)(dataPointer + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(structAddress + 0x84) == *(int *)(structAddress + 0x80))) {\n    *(undefined4 *)(*(int *)(dataPointer + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    newIndex = *(int *)(structAddress + 0x80) + 1U & 0x8000007f;\n    if ((int)newIndex < 0) {\n      newIndex = (newIndex - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(structAddress + 0x84) == newIndex);\n    *(char *)(structAddress + *(int *)(structAddress + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataPointer + 0x14) + 0x80) = newIndex;\n    *(undefined4 *)(*(int *)(dataPointer + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081454": "update_data_00081454",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "iVar1": "structAddress",
                "uVar2": "newIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814e4": {
            "entrypoint": "0x000814e4",
            "current_name": "initialize_params_000814e4",
            "code": "\nvoid initializeParams_000814e4(undefined4 *params,undefined4 value1,undefined value2,undefined4 value3,\n                 undefined4 value4,undefined4 value5)\n\n{\n  params[1] = 0;\n  params[2] = 1000;\n  params[6] = value1;\n  *params = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(params + 7) = value2;\n  params[4] = value4;\n  params[8] = value3;\n  params[5] = value5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000814e4": "initialize_params_000814e4",
                "param_1": "params",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4",
                "param_6": "value5"
            },
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081508": {
            "entrypoint": "0x00081508",
            "current_name": "initialize_memory_00081508",
            "code": "\nvoid initializeMemory_00081508(int baseAddress,uint pageSize,undefined4 value)\n\n{\n  int offset;\n  undefined4 *memoryPtr;\n  \n  FUN_00080e18(*(undefined4 *)(baseAddress + 0x20));\n  memoryPtr = *(undefined4 **)(baseAddress + 0x18);\n  memoryPtr[0x48] = 0x202;\n  *memoryPtr = 0xac;\n  memoryPtr[1] = value;\n  memoryPtr[8] = Elf32_Rel_ARRAY_20070000[6].r_offset / pageSize >> 4;\n  memoryPtr[3] = 0xffffffff;\n  memoryPtr[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(baseAddress + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(baseAddress + 0x1c) & 0x1f);\n  offset = *(int *)(baseAddress + 0x10);\n  *(undefined4 *)(offset + 0x84) = 0;\n  *(undefined4 *)(offset + 0x80) = 0;\n  offset = *(int *)(baseAddress + 0x14);\n  *(undefined4 *)(offset + 0x84) = 0;\n  *(undefined4 *)(offset + 0x80) = 0;\n  *memoryPtr = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081508": "initialize_memory_00081508",
                "param_1": "baseAddress",
                "param_2": "pageSize",
                "param_3": "value",
                "iVar1": "offset",
                "puVar2": "memoryPtr"
            },
            "calling": [],
            "called": [
                "FUN_00080e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815d4": {
            "entrypoint": "0x000815d4",
            "current_name": "initialize_function_000815d4",
            "code": "\nundefined4 * initializeFunction_000815d4(undefined4 *outputArray,undefined4 inputValue)\n\n{\n  FUN_000814e4();\n  *outputArray = &PTR_FUN_00081454_1_000857d8;\n  outputArray[9] = inputValue;\n  return outputArray;\n}\n\n",
            "renaming": {
                "FUN_000815d4": "initialize_function_000815d4",
                "param_1": "outputArray",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815f8": {
            "entrypoint": "0x000815f8",
            "current_name": "combine_param_with_shifted_param_000815f8",
            "code": "\nuint combineParamWithShiftedParam_000815f8(int value1,uint value2)\n\n{\n  return value2 | value1 << 8;\n}\n\n",
            "renaming": {
                "FUN_000815f8": "combine_param_with_shifted_param_000815f8",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_00080410"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815fe": {
            "entrypoint": "0x000815fe",
            "current_name": "process_data_000815fe",
            "code": "\nundefined4 * processData_000815fe(undefined4 *data)\n\n{\n  FUN_00081e04(*data);\n  return data;\n}\n\n",
            "renaming": {
                "FUN_000815fe": "process_data_000815fe",
                "param_1": "data"
            },
            "calling": [],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008160c": {
            "entrypoint": "0x0008160c",
            "current_name": "reset_parameter_0008160c",
            "code": "\nvoid resetParameter_0008160c(int *parameter)\n\n{\n  if (*parameter != 0) {\n    FUN_00081e04();\n  }\n  *parameter = 0;\n  parameter[2] = 0;\n  parameter[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008160c": "reset_parameter_0008160c",
                "param_1": "parameter"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081622": {
            "entrypoint": "0x00081622",
            "current_name": "update_data_00081622",
            "code": "\nint updateData_00081622(int *data,int size,undefined4 value1,undefined4 value2)\n\n{\n  int iVar1;\n  \n  iVar1 = FUN_000825a0(*data,size + 1,value1,value2,value2);\n  if (iVar1 != 0) {\n    *data = iVar1;\n    data[1] = size;\n    iVar1 = 1;\n  }\n  return iVar1;\n}\n\n",
            "renaming": {
                "FUN_00081622": "update_data_00081622",
                "param_1": "data",
                "param_2": "size",
                "param_3": "value1",
                "param_4": "value2"
            },
            "calling": [
                "FUN_0008163a"
            ],
            "called": [
                "FUN_000825a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008163a": {
            "entrypoint": "0x0008163a",
            "current_name": "validate_and_modify_0008163a",
            "code": "\nundefined4 validate_and_modify_0008163a(int *array,uint size)\n\n{\n  int result;\n  \n  if ((*array == 0) || ((uint)array[1] < size)) {\n    result = FUN_00081622(array);\n    if (result == 0) {\n      return 0;\n    }\n    if (array[2] == 0) {\n      *(undefined *)*array = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008163a": "validate_and_modify_0008163a",
                "param_1": "array",
                "param_2": "size",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008165c": {
            "entrypoint": "0x0008165c",
            "current_name": "handle_function_0008165c",
            "code": "\nundefined4 * handleFunction_0008165c(undefined4 *outputData,undefined4 inputData,undefined4 value)\n\n{\n  int result;\n  \n  result = FUN_0008163a(outputData,value);\n  if (result == 0) {\n    FUN_0008160c(outputData);\n  }\n  else {\n    outputData[2] = value;\n    FUN_00082994(*outputData,inputData);\n  }\n  return outputData;\n}\n\n",
            "renaming": {
                "FUN_0008165c": "handle_function_0008165c",
                "param_1": "outputData",
                "param_2": "inputData",
                "param_3": "value",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00081682"
            ],
            "called": [
                "FUN_0008160c",
                "FUN_0008163a",
                "FUN_00082994"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081682": {
            "entrypoint": "0x00081682",
            "current_name": "initialize_param_array_00081682",
            "code": "\nundefined4 * initializeParamArray_00081682(undefined4 *paramArray,int inputValue)\n\n{\n  undefined4 result;\n  \n  *paramArray = 0;\n  paramArray[1] = 0;\n  paramArray[2] = 0;\n  if (inputValue != 0) {\n    result = FUN_00082a50(inputValue);\n    FUN_0008165c(paramArray,inputValue,result);\n  }\n  return paramArray;\n}\n\n",
            "renaming": {
                "FUN_00081682": "initialize_param_array_00081682",
                "param_1": "paramArray",
                "param_2": "inputValue",
                "uVar1": "result",
                "param_1[1]": "paramArray[1]",
                "param_1[2]": "paramArray[2]"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [
                "FUN_0008165c",
                "FUN_00082a50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816a6": {
            "entrypoint": "0x000816a6",
            "current_name": "FUNC_000816a6",
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000816a8": {
            "entrypoint": "0x000816a8",
            "current_name": "start_function_000816a8",
            "code": "\nvoid startFunction_000816a8(void)\n\n{\n  FUN_000816d4();\n  FUN_00080ae4();\n  FUNC_000816a6();\n  FUNC_0008120c(1);\n  FUN_000804a8();\n  do {\n    FUN_000805d0();\n    FUN_00080ce0();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816a8": "start_function_000816a8"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_000804a8",
                "FUN_00080ce0",
                "FUN_00080ae4",
                "FUN_000805d0",
                "FUN_000816d4",
                "FUN_0008120c",
                "FUN_000816a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d4": {
            "entrypoint": "0x000816d4",
            "current_name": "initialize_data_000816d4",
            "code": "\n\n\nvoid initializeData_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816d4": "initialize_data_000816d4"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081714": {
            "entrypoint": "0x00081714",
            "current_name": "get_data_value_00081714",
            "code": "\nundefined4 get_data_value_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "FUN_00081714": "get_data_value_00081714"
            },
            "calling": [
                "thunk_FUN_00081714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081730": {
            "entrypoint": "0x00081730",
            "current_name": "calculate_float_00081730",
            "code": "\nuint calculateFloat_00081730(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shift1;\n  int shift2;\n  uint result1;\n  uint result2;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool check1;\n  \n  result1 = input2 ^ 0x80000000;\n  temp1 = input1 << 1;\n  check1 = temp1 == 0;\n  if (!check1) {\n    input4 = input2 << 1;\n    check1 = input4 == 0;\n  }\n  if (!check1) {\n    check1 = temp1 == input4;\n  }\n  shift1 = (int)temp1 >> 0x18;\n  if (!check1) {\n    check1 = shift1 == -1;\n  }\n  if (!check1) {\n    check1 = (int)input4 >> 0x18 == -1;\n  }\n  if (check1) {\n    shift2 = (int)(input2 << 1) >> 0x18;\n    if (shift1 == -1 || shift2 == -1) {\n      temp1 = result1;\n      if (shift1 == -1) {\n        temp1 = input1;\n      }\n      if (shift1 != -1 || shift2 != -1) {\n        result1 = temp1;\n      }\n      check1 = (temp1 & 0x7fffff) == 0;\n      if (check1) {\n        check1 = (result1 & 0x7fffff) == 0;\n      }\n      if (check1) {\n        check1 = temp1 == result1;\n      }\n      if (!check1) {\n        temp1 = temp1 | 0x400000;\n      }\n      return temp1;\n    }\n    if (((input1 ^ result1) & 0x7fffffff) != 0) {\n      if (temp1 == 0) {\n        input1 = result1;\n      }\n      return input1;\n    }\n    if (input1 != result1) {\n      return 0;\n    }\n    if ((temp1 & 0xff000000) == 0) {\n      result1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        result1 = result1 | 0x80000000;\n      }\n      return result1;\n    }\n    if (temp1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  temp1 = temp1 >> 0x18;\n  input4 = input4 >> 0x18;\n  temp3 = input4 - temp1;\n  check1 = temp3 != 0;\n  temp2 = temp1;\n  if (check1 && temp1 <= input4) {\n    temp2 = temp1 + temp3;\n  }\n  if (check1 && temp1 <= input4) {\n    result1 = result1 ^ input1;\n  }\n  if (check1 && temp1 <= input4) {\n    input1 = input1 ^ result1;\n  }\n  if (check1 && temp1 <= input4) {\n    result1 = result1 ^ input1;\n  }\n  if (input4 < temp1) {\n    temp3 = -temp3;\n  }\n  if (0x19 < temp3) {\n    return input1;\n  }\n  temp1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  result2 = result1 & 0xffffff | 0x800000;\n  if ((result1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  if (temp2 == temp3) {\n    result2 = result2 ^ 0x800000;\n    if (temp2 == 0) {\n      temp1 = temp1 ^ 0x800000;\n      temp2 = 1;\n    }\n    else {\n      temp3 = temp3 - 1;\n    }\n  }\n  temp1 = temp1 + ((int)result2 >> (temp3 & 0xff));\n  result2 = result2 << (0x20 - temp3 & 0xff);\n  input1 = temp1 & 0x80000000;\n  if ((int)temp1 < 0) {\n    check1 = result2 != 0;\n    result2 = -result2;\n    temp1 = -temp1 - (uint)check1;\n  }\n  if (temp1 < 0x800000) {\n    result1 = result2 & 0x80000000;\n    result2 = result2 << 1;\n    temp1 = temp1 * 2 + (uint)(result1 != 0);\n    result1 = temp2 - 2;\n    if ((temp1 & 0x800000) == 0) {\n      temp3 = LZCOUNT(temp1) - 8;\n      temp1 = temp1 << (temp3 & 0xff);\n      if ((int)result1 < (int)temp3) {\n        temp1 = temp1 >> (-(result1 - temp3) & 0xff);\n      }\n      else {\n        temp1 = temp1 + (result1 - temp3) * 0x800000;\n      }\n      return temp1 | input1;\n    }\n  }\n  else {\n    result1 = temp2 - 1;\n    if (0xffffff < temp1) {\n      result1 = temp1 & 1;\n      temp1 = temp1 >> 1;\n      result2 = (uint)(result1 != 0) << 0x1f | result2 >> 1;\n      result1 = temp2;\n      if (0xfd < temp2) goto LAB_0008186a;\n    }\n  }\n  temp1 = temp1 + result1 * 0x800000 + (uint)(0x7fffffff < result2);\n  if (result2 == 0x80000000) {\n    temp1 = temp1 & 0xfffffffe;\n  }\n  return temp1 | input1;\n}\n\n",
            "renaming": {
                "FUN_00081730": "calculate_float_00081730",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shift1",
                "iVar2": "shift2",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "uVar7": "temp3",
                "bVar8": "check1"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "calculate_floating_point_number_00081734",
            "code": "\nuint calculateFloatingPointNumber_00081734(uint input1,uint input2,undefined4 bitMask,uint result)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint normalizedInput1;\n  uint normalizedInput2;\n  uint difference;\n  uint absDifference;\n  bool isZero;\n  \n  normalizedInput2 = input1 << 1;\n  isZero = normalizedInput2 == 0;\n  if (!isZero) {\n    result = input2 << 1;\n    isZero = result == 0;\n  }\n  if (!isZero) {\n    isZero = normalizedInput2 == result;\n  }\n  shiftedInput1 = (int)normalizedInput2 >> 0x18;\n  if (!isZero) {\n    isZero = shiftedInput1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)result >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      normalizedInput2 = input2;\n      if (shiftedInput1 == -1) {\n        normalizedInput2 = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        input2 = normalizedInput2;\n      }\n      isZero = (normalizedInput2 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (input2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = normalizedInput2 == input2;\n      }\n      if (!isZero) {\n        normalizedInput2 = normalizedInput2 | 0x400000;\n      }\n      return normalizedInput2;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (normalizedInput2 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((normalizedInput2 & 0xff000000) == 0) {\n      normalizedInput2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        normalizedInput2 = normalizedInput2 | 0x80000000;\n      }\n      return normalizedInput2;\n    }\n    if (normalizedInput2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  normalizedInput2 = normalizedInput2 >> 0x18;\n  result = result >> 0x18;\n  absDifference = result - normalizedInput2;\n  isZero = absDifference != 0;\n  difference = normalizedInput2;\n  if (isZero && normalizedInput2 <= result) {\n    difference = normalizedInput2 + absDifference;\n  }\n  if (isZero && normalizedInput2 <= result) {\n    input2 = input2 ^ input1;\n  }\n  if (isZero && normalizedInput2 <= result) {\n    input1 = input1 ^ input2;\n  }\n  if (isZero && normalizedInput2 <= result) {\n    input2 = input2 ^ input1;\n  }\n  if (result < normalizedInput2) {\n    absDifference = -absDifference;\n  }\n  if (0x19 < absDifference) {\n    return input1;\n  }\n  normalizedInput2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    normalizedInput2 = -normalizedInput2;\n  }\n  normalizedInput1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    normalizedInput1 = -normalizedInput1;\n  }\n  if (difference == absDifference) {\n    normalizedInput1 = normalizedInput1 ^ 0x800000;\n    if (difference == 0) {\n      normalizedInput2 = normalizedInput2 ^ 0x800000;\n      difference = 1;\n    }\n    else {\n      absDifference = absDifference - 1;\n    }\n  }\n  normalizedInput2 = normalizedInput2 + ((int)normalizedInput1 >> (absDifference & 0xff));\n  normalizedInput1 = normalizedInput1 << (0x20 - absDifference & 0xff);\n  input1 = normalizedInput2 & 0x80000000;\n  if ((int)normalizedInput2 < 0) {\n    isZero = normalizedInput1 != 0;\n    normalizedInput1 = -normalizedInput1;\n    normalizedInput2 = -normalizedInput2 - (uint)isZero;\n  }\n  if (normalizedInput2 < 0x800000) {\n    absDifference = normalizedInput1 & 0x80000000;\n    normalizedInput1 = normalizedInput1 << 1;\n    normalizedInput2 = normalizedInput2 * 2 + (uint)(absDifference != 0);\n    absDifference = difference - 2;\n    if ((normalizedInput2 & 0x800000) == 0) {\n      difference = leadingZeroCount(normalizedInput2) - 8;\n      normalizedInput2 = normalizedInput2 << (difference & 0xff);\n      if ((int)absDifference < (int)difference) {\n        normalizedInput2 = normalizedInput2 >> (-(absDifference - difference) & 0xff);\n      }\n      else {\n        normalizedInput2 = normalizedInput2 + (absDifference - difference) * 0x800000;\n      }\n      return normalizedInput2 | input1;\n    }\n  }\n  else {\n    absDifference = difference - 1;\n    if (0xffffff < normalizedInput2) {\n      absDifference = normalizedInput2 & 1;\n      normalizedInput2 = normalizedInput2 >> 1;\n      normalizedInput1 = (uint)(absDifference != 0) << 0x1f | normalizedInput1 >> 1;\n      absDifference = difference;\n      if (0xfd < difference) goto LAB_0008186a;\n    }\n  }\n  normalizedInput2 = normalizedInput2 + absDifference * 0x800000 + (uint)(0x7fffffff < normalizedInput1);\n  if (normalizedInput1 == 0x80000000) {\n    normalizedInput2 = normalizedInput2 & 0xfffffffe;\n  }\n  return normalizedInput2 | input1;\n}\n\n",
            "renaming": {
                "FUN_00081734": "calculate_floating_point_number_00081734",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "bitMask",
                "param_4": "result",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "normalizedInput1",
                "uVar4": "normalizedInput2",
                "uVar5": "difference",
                "uVar6": "absDifference",
                "bVar7": "isZero",
                "LZCOUNT": "leadingZeroCount"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081894": {
            "entrypoint": "0x00081894",
            "current_name": "calculate_value_00081894",
            "code": "\nuint calculateValue_00081894(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int constantValue;\n  uint mask;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputValue);\n  shiftAmount = leadingZeros - 8;\n  constantValue = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    mask = 0 << (shiftAmount & 0xff);\n    leadingZeros = constantValue + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = inputValue << leadingZeros + 0x18;\n  leadingZeros = constantValue + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_00081894": "calculate_value_00081894",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "constantValue",
                "uVar4": "mask"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008189c": {
            "entrypoint": "0x0008189c",
            "current_name": "decode_unsigned_int_0008189c",
            "code": "\nuint decodeUnsignedInt_0008189c(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  uint signBit;\n  int result;\n  \n  signBit = input & 0x80000000;\n  if ((int)signBit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = countLeadingZeros(input);\n  shiftAmount = leadingZeros - 8;\n  result = ((signBit | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftAmount & 0xff);\n    signBit = result + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftAmount = input << leadingZeros + 0x18;\n  signBit = result + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftAmount >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_0008189c": "decode_unsigned_int_0008189c",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "uVar3": "signBit",
                "iVar4": "result",
                "LZCOUNT": "countLeadingZeros"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081944": {
            "entrypoint": "0x00081944",
            "current_name": "floating_point_add_00081944",
            "code": "\nuint floatingPointAdd_00081944(uint operand1,uint operand2,undefined4 carry,uint exponent)\n\n{\n  longlong lVar1;\n  uint result;\n  uint exponent1;\n  int temp;\n  int temp2;\n  uint product;\n  int temp3;\n  uint tempResult;\n  bool isZero;\n  bool isNegativeOverflow;\n  \n  exponent1 = operand1 >> 0x17 & 0xff;\n  isZero = exponent1 == 0;\n  if (!isZero) {\n    exponent = operand2 >> 0x17 & 0xff;\n    isZero = exponent == 0;\n  }\n  if (!isZero) {\n    isZero = exponent1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = exponent == 0xff;\n  }\n  if (isZero) {\n    exponent = operand2 >> 0x17 & 0xff;\n    if (exponent1 == 0xff || exponent == 0xff) {\n      isZero = operand1 == 0 || operand1 == 0x80000000;\n      result = operand2;\n      if (operand1 != 0 && operand1 != 0x80000000) {\n        isZero = operand2 == 0;\n        result = operand1;\n      }\n      if (!isZero) {\n        isZero = operand2 == 0x80000000;\n      }\n      tempResult = result;\n      if (((isZero) || ((exponent1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((exponent == 0xff && (tempResult = operand2, (operand2 & 0x7fffff) != 0)))) {\n        return tempResult | 0x7fc00000;\n      }\n      result = result ^ operand2;\n      goto LAB_00081a94;\n    }\n    isZero = (operand1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (operand2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (operand1 ^ operand2) & 0x80000000;\n    }\n    isZero = exponent1 == 0;\n    result = operand1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        operand1 = operand1 << 1;\n        isZero = (operand1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      exponent1 = exponent1 - 1;\n    }\n    operand1 = operand1 | result;\n    isZero = exponent == 0;\n    result = operand2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        operand2 = operand2 << 1;\n        isZero = (operand2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      exponent = exponent - 1;\n    }\n    operand2 = operand2 | result;\n  }\n  temp = exponent1 + exponent;\n  tempResult = operand1 ^ operand2;\n  exponent1 = operand1 << 9;\n  isZero = exponent1 == 0;\n  if (!isZero) {\n    operand2 = operand2 << 9;\n    isZero = operand2 == 0;\n  }\n  if (isZero) {\n    if (exponent1 == 0) {\n      operand2 = operand2 << 9;\n    }\n    result = tempResult & 0x80000000 | operand1 & 0x7fffff | operand2 >> 9;\n    isNegativeOverflow = SBORROW4(temp,0x7f);\n    temp2 = temp + -0x7f;\n    isZero = temp2 == 0;\n    temp3 = temp2;\n    if (!isZero && 0x7e < temp) {\n      isNegativeOverflow = SBORROW4(0xff,temp2);\n      temp3 = 0xff - temp2;\n      isZero = temp2 == 0xff;\n    }\n    if (!isZero && temp3 < 0 == isNegativeOverflow) {\n      result = result | temp2 * 0x800000;\n    }\n    if (!isZero && temp3 < 0 == isNegativeOverflow) {\n      return result;\n    }\n    result = result | 0x800000;\n    product = 0;\n    isNegativeOverflow = SBORROW4(temp2,1);\n    tempResult = temp - 0x80;\n    isZero = tempResult == 0;\n    exponent1 = tempResult;\n  }\n  else {\n    lVar1 = (ulonglong)(exponent1 >> 5 | 0x8000000) * (ulonglong)(operand2 >> 5 | 0x8000000);\n    product = (uint)lVar1;\n    result = (uint)((ulonglong)lVar1 >> 0x20);\n    isZero = result < 0x800000;\n    if (isZero) {\n      result = result << 1;\n    }\n    if (isZero) {\n      result = result | product >> 0x1f;\n      product = product << 1;\n    }\n    result = tempResult & 0x80000000 | result;\n    tempResult = (temp + -0x7f) - (uint)isZero;\n    isNegativeOverflow = SBORROW4(tempResult,0xfd);\n    isZero = tempResult == 0xfd;\n    exponent1 = tempResult - 0xfd;\n    if (tempResult < 0xfe) {\n      result = result + tempResult * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero || (int)exponent1 < 0 != isNegativeOverflow) {\n    isZero = (int)(tempResult + 0x19) < 0;\n    if (tempResult == 0xffffffe7 || isZero != SCARRY4(tempResult,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (tempResult != 0xffffffe7 && isZero == SCARRY4(tempResult,0x19)) {\n      exponent1 = (result << 1) >> (-tempResult & 0xff);\n      tempResult = result << (tempResult + 0x20 & 0xff);\n      exponent1 = ((uint)((result & 0x80000000) != 0) << 0x1f | exponent1 >> 1) + (uint)((byte)exponent1 & 1);\n      if ((product | tempResult << 1) == 0) {\n        exponent1 = exponent1 & ~(tempResult >> 0x1f);\n      }\n      return exponent1;\n    }\n    return result;\n  }\nLAB_00081a94:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081944": "floating_point_add_00081944",
                "param_1": "operand1",
                "param_2": "operand2",
                "param_3": "carry",
                "param_4": "exponent",
                "uVar2": "result",
                "uVar3": "exponent1",
                "uVar6": "product",
                "iVar4": "temp",
                "iVar5": "temp2",
                "iVar7": "temp3",
                "uVar8": "tempResult",
                "bVar9": "isZero",
                "bVar10": "isNegativeOverflow"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "entrypoint": "0x00081bf4",
            "current_name": "multiply_and_compare_00081bf4",
            "code": "\nuint multiply_and_compare_00081bf4(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint doubled_input_1;\n  uint doubled_input_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  doubled_input_1 = input_1 * 2;\n  doubled_input_2 = input_2 * 2;\n  if (((int)doubled_input_1 >> 0x18 == -1 || (int)doubled_input_2 >> 0x18 == -1) &&\n     ((((int)doubled_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)doubled_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_inputs = doubled_input_1 | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = doubled_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && doubled_input_2 <= doubled_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || doubled_input_2 > doubled_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_00081bf4": "multiply_and_compare_00081bf4",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "doubled_input_1",
                "uVar3": "doubled_input_2",
                "uVar4": "combined_inputs",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_00081c5c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c54": {
            "entrypoint": "0x00081c54",
            "current_name": "call_function_with_swapped_parameters_00081c54",
            "code": "\nvoid callFunctionWithSwappedParameters_00081c54(undefined4 param_destination,undefined4 param_source)\n\n{\n  FUN_00081c5c(param_source,param_destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081c54": "call_function_with_swapped_parameters_00081c54",
                "param_1": "param_destination",
                "param_2": "param_source"
            },
            "calling": [
                "FUN_00081ca8"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "entrypoint": "0x00081c5c",
            "current_name": "concatenate_params_00081c5c",
            "code": "\nundefined8 concatenate_params_00081c5c(undefined4 input_param1,undefined4 input_param2)\n\n{\n  FUN_00081bf4();\n  return concatenate_64bit(input_param2,input_param1);\n}\n\n",
            "renaming": {
                "FUN_00081c5c": "concatenate_params_00081c5c",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "CONCAT44": "concatenate_64bit"
            },
            "calling": [
                "FUN_00081c94",
                "FUN_00081c54"
            ],
            "called": [
                "FUN_00081bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c94": {
            "entrypoint": "0x00081c94",
            "current_name": "check_coherence_00081c94",
            "code": "\nbool check_coherence_00081c94(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_00081c5c();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_00081c94": "check_coherence_00081c94",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "entrypoint": "0x00081ca8",
            "current_name": "FUNC_00081ca8",
            "code": "\nbool FUNC_00081ca8(void)\n\n{\n  undefined in_ZR;\n  undefined in_CY;\n  \n  FUN_00081c54();\n  return !(bool)in_CY || (bool)in_ZR;\n}\n\n",
            "renaming": {
                "FUN_00081ca8": "FUNC_00081ca8"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c54"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "entrypoint": "0x00081cd0",
            "current_name": "convert_to_signed_integer_00081cd0",
            "code": "\nuint convertToSignedInteger_00081cd0(uint inputValue)\n\n{\n  uint convertedValue;\n  uint difference;\n  \n  if (inputValue << 1 < 0x7f000000) {\n    return 0;\n  }\n  convertedValue = (inputValue << 1) >> 0x18;\n  difference = 0x9e - convertedValue;\n  if (convertedValue < 0x9f && difference != 0) {\n    convertedValue = (inputValue << 8 | 0x80000000) >> (difference & 0xff);\n    if ((inputValue & 0x80000000) != 0) {\n      convertedValue = -convertedValue;\n    }\n    return convertedValue;\n  }\n  if ((difference == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputValue = inputValue & 0x80000000;\n  if (inputValue == 0) {\n    inputValue = 0x7fffffff;\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_00081cd0": "convert_to_signed_integer_00081cd0",
                "param_1": "inputValue",
                "uVar1": "convertedValue",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "entrypoint": "0x00081d1c",
            "current_name": "check_integer_00081d1c",
            "code": "\nuint check_integer_00081d1c(uint input_value)\n\n{\n  uint result;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  result = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)result) {\n    return (input_value << 8 | 0x80000000) >> (result & 0xff);\n  }\n  if ((result == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081d1c": "check_integer_00081d1c",
                "param_1": "input_value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "entrypoint": "0x00081d5c",
            "current_name": "update_relocation_entry_00081d5c",
            "code": "\nundefined4 updateRelocationEntry_00081d5c(dword newValue1,dword newValue2,dword newValue3)\n\n{\n  dword *currentEntry;\n  uint entryOffset;\n  uint bitMask;\n  \n  if (relocationEntries[48].r_offset == 0) {\n    relocationEntries[48].r_offset = 0x20070184;\n  }\n  entryOffset = *(uint *)(relocationEntries[48].r_offset + 4);\n  currentEntry = (dword *)relocationEntries[48].r_offset;\n  if (0x1f < (int)entryOffset) {\n    currentEntry = (dword *)FUN_00081df4(400);\n    if (currentEntry == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *currentEntry = relocationEntries[48].r_offset;\n    currentEntry[1] = 0;\n    entryOffset = 0;\n    relocationEntries[48].r_offset = (dword)currentEntry;\n    currentEntry[0x62] = 0;\n    currentEntry[99] = 0;\n  }\n  bitMask = 1 << (entryOffset & 0xff);\n  currentEntry[entryOffset + 0x22] = newValue1;\n  currentEntry[0x62] = currentEntry[0x62] | bitMask;\n  currentEntry[entryOffset + 0x42] = newValue3;\n  currentEntry[99] = bitMask | currentEntry[99];\n  currentEntry[1] = entryOffset + 1;\n  currentEntry[entryOffset + 2] = newValue2;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081d5c": "update_relocation_entry_00081d5c",
                "param_1": "newValue1",
                "param_2": "newValue2",
                "param_3": "newValue3",
                "Elf32_Rel_ARRAY_20070000": "relocationEntries",
                "pdVar1": "currentEntry",
                "uVar2": "entryOffset",
                "uVar3": "bitMask"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "entrypoint": "0x00081d7c",
            "current_name": "execute_functions_00081d7c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid executeFunctions_00081d7c(void)\n\n{\n  int iterationCount;\n  code **functionPointer;\n  \n  FUNC_00085858();\n  functionPointer = (code **)0x85860;\n  iterationCount = 0;\n  do {\n    iterationCount = iterationCount + 1;\n    functionPointer = functionPointer + 1;\n    (**functionPointer)();\n  } while (iterationCount != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d7c": "execute_functions_00081d7c",
                "iVar1": "iterationCount",
                "ppcVar2": "functionPointer"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00083974",
                "FUN_00085858",
                "FUN_00080118"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081df4": {
            "entrypoint": "0x00081df4",
            "current_name": "execute_relocation_00081df4",
            "code": "\nvoid executeRelocation_00081df4(undefined4 data)\n\n{\n  FUN_00081e14(relocationTable[140]offset,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081df4": "execute_relocation_00081df4",
                "param_1": "data",
                "Elf32_Rel_ARRAY_20070000": "relocationTable",
                ".r_offset": "offset"
            },
            "calling": [
                "FUN_00083974"
            ],
            "called": [
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e04": {
            "entrypoint": "0x00081e04",
            "current_name": "execute_relocated_function_00081e04",
            "code": "\nvoid executeRelocatedFunction_00081e04(undefined4 arg)\n\n{\n  FUN_00083d9c(relocationTable[140].offset,arg);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e04": "execute_relocated_function_00081e04",
                "param_1": "arg",
                "Elf32_Rel_ARRAY_20070000": "relocationTable",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_0008160c",
                "FUN_000815fe"
            ],
            "called": [
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e14": {
            "entrypoint": "0x00081e14",
            "current_name": "allocate_and_link_blocks_00081e14",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_and_link_blocks_00081e14(undefined4 *result_ptr,uint size)\n\n{\n  dword current_block_offset;\n  int tmp1;\n  uint tmp2;\n  uint tmp3;\n  int tmp4;\n  uint tmp5;\n  dword current_block_ptr;\n  uint tmp6;\n  int tmp7;\n  undefined *tmp8;\n  dword current_block_next;\n  dword prev_block_ptr;\n  int tmp9;\n  dword *current_rel_ptr;\n  uint aligned_size;\n  undefined *tmp10;\n  dword *rel_ptr;\n  uint alignment_index;\n  \n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n    if (0x10 < size) goto LAB_00081e7a;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if (((int)aligned_size < 0) || (aligned_size < size)) {\nLAB_00081e7a:\n      *result_ptr = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00082598(result_ptr);\n  current_block_offset = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (aligned_size < 0x1f8) {\n    tmp9 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + aligned_size);\n    if ((tmp9 != aligned_size + 0x20070464) ||\n       (tmp1 = tmp9 + 8, tmp9 = *(int *)(tmp9 + 0x14), tmp1 != tmp9)) {\n      tmp4 = *(int *)(tmp9 + 0xc);\n      tmp7 = (*(uint *)(tmp9 + 4) & 0xfffffffc) + tmp9;\n      aligned_size = *(uint *)(tmp7 + 4);\n      tmp1 = *(int *)(tmp9 + 8);\n      *(int *)(tmp1 + 0xc) = tmp4;\n      *(int *)(tmp4 + 8) = tmp1;\n      *(uint *)(tmp7 + 4) = aligned_size | 1;\n      FUNC_0008259c(result_ptr);\n      return (int *)(tmp9 + 8);\n    }\n    alignment_index = (aligned_size >> 3) + 2;\n  }\n  else {\n    alignment_index = aligned_size >> 9;\n    if (alignment_index == 0) {\n      tmp1 = 0x7e;\n      tmp9 = 0x3f;\n    }\n    else if (alignment_index < 5) {\n      tmp9 = (aligned_size >> 6) + 0x38;\n      tmp1 = tmp9 * 2;\n    }\n    else if (alignment_index < 0x15) {\n      tmp9 = alignment_index + 0x5b;\n      tmp1 = tmp9 * 2;\n    }\n    else if (alignment_index < 0x55) {\n      tmp9 = (aligned_size >> 0xc) + 0x6e;\n      tmp1 = tmp9 * 2;\n    }\n    else if (alignment_index < 0x155) {\n      tmp9 = (aligned_size >> 0xf) + 0x77;\n      tmp1 = tmp9 * 2;\n    }\n    else if (alignment_index < 0x555) {\n      tmp9 = (aligned_size >> 0x12) + 0x7c;\n      tmp1 = tmp9 * 2;\n    }\n    else {\n      tmp1 = 0xfc;\n      tmp9 = 0x7e;\n    }\n    for (current_block_ptr = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[tmp1]; tmp1 * 4 + 0x20070464U != current_block_ptr\n        ; current_block_ptr = *(dword *)(current_block_ptr + 0xc)) {\n      alignment_index = *(uint *)(current_block_ptr + 4) & 0xfffffffc;\n      tmp4 = alignment_index - aligned_size;\n      if (0xf < tmp4) {\n        tmp9 = tmp9 + -1;\n        break;\n      }\n      if (-1 < tmp4) {\n        tmp1 = alignment_index + current_block_ptr;\n        aligned_size = *(uint *)(tmp1 + 4);\n        tmp4 = *(int *)(current_block_ptr + 0xc);\n        tmp9 = *(int *)(current_block_ptr + 8);\n        *(int *)(tmp9 + 0xc) = tmp4;\n        *(int *)(tmp4 + 8) = tmp9;\n        *(uint *)(tmp1 + 4) = aligned_size | 1;\n        FUNC_0008259c(result_ptr);\n        return (int *)(current_block_ptr + 8);\n      }\n    }\n    alignment_index = tmp9 + 1;\n  }\n  current_block_ptr = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    tmp2 = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    tmp3 = tmp2 & 0xfffffffc;\n    tmp5 = tmp3 - aligned_size;\n    if (0xf < (int)tmp5) {\n      current_block_ptr = aligned_size + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = aligned_size | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = current_block_ptr;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = current_block_ptr;\n      *(undefined4 *)(current_block_ptr + 0xc) = 0x2007046c;\n      *(undefined4 *)(current_block_ptr + 8) = 0x2007046c;\n      *(uint *)(current_block_ptr + 4) = tmp5 | 1;\n      *(uint *)(current_block_ptr + tmp5) = tmp5;\n      FUNC_0008259c(result_ptr);\n      return (int *)(current_block_offset + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)tmp5) {\n      *(uint *)(tmp3 + current_block_offset + 4) = *(uint *)(tmp3 + current_block_offset + 4) | 1;\n      FUNC_0008259c(result_ptr);\n      return (int *)(current_block_offset + 8);\n    }\n    if (tmp3 < 0x200) {\n      tmp3 = tmp2 & 0xfffffff8;\n      tmp9 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + tmp3);\n      current_block_ptr = 1 << ((int)(tmp2 >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(current_block_offset + 8) = tmp9;\n      *(uint *)(current_block_offset + 0xc) = tmp3 + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = current_block_ptr;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + tmp3) = current_block_offset;\n      *(dword *)(tmp9 + 0xc) = current_block_offset;\n    }\n    else {\n      tmp5 = tmp2 >> 9;\n      if (tmp5 < 5) {\n        tmp1 = (tmp2 >> 6) + 0x38;\n        tmp9 = tmp1 * 2;\n      }\n      else if (tmp5 < 0x15) {\n        tmp1 = tmp5 + 0x5b;\n        tmp9 = tmp1 * 2;\n      }\n      else if (tmp5 < 0x55) {\n        tmp1 = (tmp2 >> 0xc) + 0x6e;\n        tmp9 = tmp1 * 2;\n      }\n      else if (tmp5 < 0x155) {\n        tmp1 = (tmp2 >> 0xf) + 0x77;\n        tmp9 = tmp1 * 2;\n      }\n      else if (tmp5 < 0x555) {\n        tmp1 = (tmp2 >> 0x12) + 0x7c;\n        tmp9 = tmp1 * 2;\n      }\n      else {\n        tmp9 = 0xfc;\n        tmp1 = 0x7e;\n      }\n      current_block_ptr = tmp9 * 4 + 0x20070464;\n      current_block_next = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[tmp9];\n      if (current_block_next == current_block_ptr) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (tmp1 >> 2 & 0xffU);\n        prev_block_ptr = current_block_next;\n      }\n      else {\n        do {\n          prev_block_ptr = current_block_next;\n          if ((*(uint *)(current_block_next + 4) & 0xfffffffc) <= tmp3) break;\n          current_block_next = *(dword *)(current_block_next + 8);\n          prev_block_ptr = current_block_next;\n        } while (current_block_ptr != current_block_next);\n        current_block_next = *(dword *)(prev_block_ptr + 0xc);\n      }\n      current_block_ptr = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(current_block_offset + 0xc) = current_block_next;\n      *(dword *)(current_block_offset + 8) = prev_block_ptr;\n      *(dword *)(current_block_next + 8) = current_block_offset;\n      *(dword *)(prev_block_ptr + 0xc) = current_block_offset;\n    }\n  }\n  current_block_offset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  tmp2 = 1 << ((int)alignment_index >> 2 & 0xffU);\n  if (tmp2 <= current_block_ptr) {\n    if ((current_block_ptr & tmp2) == 0) {\n      alignment_index = alignment_index & 0xfffffffc;\n      do {\n        tmp2 = tmp2 << 1;\n        alignment_index = alignment_index + 4;\n      } while ((current_block_ptr & tmp2) == 0);\n    }\n    do {\n      rel_ptr = &Elf32_Rel_ARRAY_20070000[alignment_index + 0x8c].r_info;\n      current_rel_ptr = rel_ptr;\n      tmp3 = alignment_index;\n      do {\n        for (tmp8 = (undefined *)current_rel_ptr[3]; current_rel_ptr != (dword *)tmp8;\n            tmp8 = *(undefined **)(tmp8 + 0xc)) {\n          tmp5 = *(uint *)(tmp8 + 4) & 0xfffffffc;\n          tmp6 = tmp5 - aligned_size;\n          if (0xf < (int)tmp6) {\n            tmp1 = *(int *)(tmp8 + 8);\n            tmp9 = *(int *)(tmp8 + 0xc);\n            tmp10 = tmp8 + aligned_size;\n            *(uint *)(tmp8 + 4) = aligned_size | 1;\n            *(int *)(tmp1 + 0xc) = tmp9;\n            *(int *)(tmp9 + 8) = tmp1;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)tmp10;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)tmp10;\n            *(undefined4 *)(tmp10 + 0xc) = 0x2007046c;\n            *(undefined4 *)(tmp10 + 8) = 0x2007046c;\n            *(uint *)(tmp10 + 4) = tmp6 | 1;\n            *(uint *)(tmp10 + tmp6) = tmp6;\n            FUNC_0008259c(result_ptr);\n            return (int *)(tmp8 + 8);\n          }\n          if (-1 < (int)tmp6) {\n            tmp9 = *(int *)(tmp8 + 8);\n            tmp1 = *(int *)(tmp8 + 0xc);\n            *(uint *)(tmp8 + tmp5 + 4) = *(uint *)(tmp8 + tmp5 + 4) | 1;\n            *(int *)(tmp9 + 0xc) = tmp1;\n            *(int *)(tmp1 + 8) = tmp9;\n            FUNC_0008259c(result_ptr);\n            return (int *)(tmp8 + 8);\n          }\n        }\n        tmp3 = tmp3 + 1;\n        current_rel_ptr = current_rel_ptr + 2;\n      } while ((tmp3 & 3) != 0);\n      do {\n        tmp5 = alignment_index & 3;\n        tmp8 = (undefined *)(rel_ptr + -2);\n        alignment_index = alignment_index - 1;\n        if (tmp5 == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~tmp2;\n          break;\n        }\n        rel_ptr = (dword *)*rel_ptr;\n      } while (rel_ptr == (dword *)tmp8);\n      tmp2 = tmp2 * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= tmp2 &&\n           tmp2 - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (alignment_index = tmp3, tmp2 == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & tmp2) == 0; tmp2 = tmp2 << 1) {\n        alignment_index = alignment_index + 4;\n      }\n    } while( true );\n  }\n  alignment_index = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((aligned_size <= alignment_index) &&\n     (tmp2 = alignment_index - aligned_size, current_block_ptr = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)tmp2))\n  goto LAB_0008211e;\n  tmp2 = Elf32_Rel_ARRAY_20070000[141].r_info + alignment_index;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    tmp3 = aligned_size + DAT_20071190 + 0x10;\n  }\n  else {\n    tmp3 = aligned_size + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  current_block_ptr = FUN_00082970(result_ptr,tmp3);\n  if ((current_block_ptr == 0xffffffff) || ((current_block_ptr < tmp2 && (current_block_offset != 0x20070464)))) {\n    alignment_index = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    current_block_ptr = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    tmp5 = DAT_20071194 + tmp3;\n    DAT_20071194 = tmp5;\n    if ((tmp2 == current_block_ptr) && ((tmp2 & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = tmp3 + alignment_index | 1;\n    }\n    else {\n      current_block_next = current_block_ptr;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        current_block_next = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_20071194 = tmp5 + (current_block_ptr - tmp2);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = current_block_next;\n      tmp2 = current_block_ptr & 7;\n      if (tmp2 == 0) {\n        tmp9 = 0x1000;\n      }\n      else {\n        current_block_ptr = current_block_ptr + (8 - tmp2);\n        tmp9 = 0x1008 - tmp2;\n      }\n      tmp9 = tmp9 - (tmp3 + current_block_ptr & 0xfff);\n      tmp1 = FUN_00082970(result_ptr,tmp9);\n      if (tmp1 == -1) {\n        tmp2 = 1;\n        tmp9 = 0;\n      }\n      else {\n        tmp2 = (tmp1 - current_block_ptr) + tmp9 | 1;\n      }\n      tmp5 = DAT_20071194 + tmp9;\n      Elf32_Rel_ARRAY_20070000[141].r_info = current_block_ptr;\n      DAT_20071194 = tmp5;\n      *(uint *)(current_block_ptr + 4) = tmp2;\n      if (current_block_offset != 0x20070464) {\n        if (alignment_index < 0x10) {\n          *(undefined4 *)(current_block_ptr + 4) = 1;\n          alignment_index = 0;\n          goto LAB_00082108;\n        }\n        alignment_index = alignment_index - 0xc & 0xfffffff8;\n        *(uint *)(current_block_offset + 4) = alignment_index | *(uint *)(current_block_offset + 4) & 1;\n        *(undefined4 *)(current_block_offset + alignment_index + 4) = 5;\n        *(undefined4 *)(current_block_offset + alignment_index + 8) = 5;\n        if (0xf < alignment_index) {\n          FUN_00083d9c(result_ptr,current_block_offset + 8);\n          tmp5 = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < tmp5) {\n      DAT_2007118c = tmp5;\n    }\n    if (DAT_20071188 < tmp5) {\n      DAT_20071188 = tmp5;\n    }\n    alignment_index = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    current_block_ptr = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00082108:\n  tmp2 = alignment_index - aligned_size;\n  if ((alignment_index < aligned_size) || ((int)tmp2 < 0x10)) {\n    FUNC_0008259c(result_ptr);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  Elf32_Rel_ARRAY_20070000[141].r_info = aligned_size + current_block_ptr;\n  *(uint *)(current_block_ptr + 4) = aligned_size | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = tmp2 | 1;\n  FUNC_0008259c(result_ptr);\n  return (int *)(current_block_ptr + 8);\n}\n\n",
            "renaming": {
                "FUN_00081e14": "allocate_and_link_blocks_00081e14",
                "param_1": "result_ptr",
                "param_2": "size",
                "dVar1": "current_block_offset",
                "iVar2": "tmp1",
                "uVar3": "tmp2",
                "uVar4": "tmp3",
                "iVar5": "tmp4",
                "uVar6": "tmp5",
                "dVar7": "current_block_ptr",
                "uVar8": "tmp6",
                "iVar9": "tmp7",
                "puVar10": "tmp8",
                "dVar11": "current_block_next",
                "dVar12": "prev_block_ptr",
                "iVar13": "tmp9",
                "pdVar14": "current_rel_ptr",
                "uVar15": "aligned_size",
                "puVar16": "tmp10",
                "pdVar17": "rel_ptr",
                "uVar18": "alignment_index"
            },
            "calling": [
                "FUN_00081df4",
                "FUN_000825b0",
                "FUN_000842a4",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00082970",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008234c": {
            "entrypoint": "0x0008234c",
            "current_name": "copy_memory_0008234c",
            "code": "\nundefined4 * copyMemory_0008234c(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *destPointer;\n  undefined4 *srcPointer;\n  undefined4 *tempPointer;\n  uint remainingSize;\n  uint partialSize;\n  bool isSizeValid;\n  \n  srcPointer = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      partialSize = size - 4;\n      if (3 < size) {\n        do {\n          destPointer = source;\n          tempPointer = srcPointer;\n          isSizeValid = partialSize != 0;\n          partialSize = partialSize - 1;\n          *(undefined *)tempPointer = *(undefined *)destPointer;\n          srcPointer = (undefined4 *)((int)tempPointer + 1);\n          source = (undefined4 *)((int)destPointer + 1);\n        } while (isSizeValid);\n        *(undefined *)(undefined4 *)((int)tempPointer + 1) =\n             *(undefined *)(undefined4 *)((int)destPointer + 1);\n        *(undefined *)((int)tempPointer + 2) = *(undefined *)((int)destPointer + 2);\n        *(undefined *)((int)tempPointer + 3) = *(undefined *)((int)destPointer + 3);\n        return destination;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      partialSize = 4 - ((uint)destination & 3);\n      size = size - partialSize;\n      destPointer = destination;\n      tempPointer = source;\n      if (((uint)destination & 1) != 0) {\n        tempPointer = (undefined4 *)((int)source + 1);\n        destPointer = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      srcPointer = destPointer;\n      source = tempPointer;\n      if ((partialSize & 2) != 0) {\n        source = (undefined4 *)((int)tempPointer + 2);\n        srcPointer = (undefined4 *)((int)destPointer + 2);\n        *(undefined2 *)destPointer = *(undefined2 *)tempPointer;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *srcPointer = *source;\n    srcPointer[1] = source[1];\n    srcPointer[2] = source[2];\n    srcPointer[3] = source[3];\n    srcPointer[4] = source[4];\n    srcPointer[5] = source[5];\n    srcPointer[6] = source[6];\n    srcPointer[7] = source[7];\n    srcPointer[8] = source[8];\n    srcPointer[9] = source[9];\n    srcPointer[10] = source[10];\n    srcPointer[0xb] = source[0xb];\n    srcPointer[0xc] = source[0xc];\n    srcPointer[0xd] = source[0xd];\n    srcPointer[0xe] = source[0xe];\n    srcPointer[0xf] = source[0xf];\n    srcPointer = srcPointer + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remainingSize = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *srcPointer = *source;\n      srcPointer[1] = source[1];\n      srcPointer[2] = source[2];\n      srcPointer[3] = source[3];\n      srcPointer = srcPointer + 4;\n      source = source + 4;\n      isSizeValid = 0xf < remainingSize;\n      remainingSize = remainingSize - 0x10;\n    } while (isSizeValid);\n  }\n  partialSize = remainingSize + 0xc;\n  tempPointer = srcPointer;\n  destPointer = source;\n  if (0xfffffff3 < remainingSize) {\n    do {\n      source = destPointer + 1;\n      *tempPointer = *destPointer;\n      isSizeValid = 3 < partialSize;\n      partialSize = partialSize - 4;\n      srcPointer = tempPointer + 1;\n      tempPointer = tempPointer + 1;\n      destPointer = source;\n    } while (isSizeValid);\n  }\nLAB_000823d0:\n  if (partialSize + 4 != 0) {\n    destPointer = srcPointer;\n    tempPointer = source;\n    if ((partialSize & 1) != 0) {\n      tempPointer = (undefined4 *)((int)source + 1);\n      destPointer = (undefined4 *)((int)srcPointer + 1);\n      *(undefined *)srcPointer = *(undefined *)source;\n    }\n    if ((partialSize + 4 & 2) != 0) {\n      *(undefined2 *)destPointer = *(undefined2 *)tempPointer;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "destPointer",
                "puVar2": "srcPointer",
                "puVar3": "tempPointer",
                "uVar4": "remainingSize",
                "uVar5": "partialSize",
                "bVar6": "isSizeValid"
            },
            "calling": [
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082438": {
            "entrypoint": "0x00082438",
            "current_name": "copy_memory_00082438",
            "code": "\nvoid copyMemory_00082438(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  int i;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *tempPtr;\n  uint tempSize;\n  undefined *tempChar;\n  uint temp;\n  \n  if ((src < dest) && (tempPtr = (undefined4 *)((int)src + size), dest < tempPtr)) {\n    tempChar = (undefined *)((int)dest + size);\n    i = size - 1;\n    if (size != 0) {\n      do {\n        tempPtr = (undefined4 *)((int)tempPtr + -1);\n        i = i + -1;\n        tempChar = tempChar + -1;\n        *tempChar = *(undefined *)tempPtr;\n      } while (i != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    tempPtr = dest;\n    srcPtr = src;\n    do {\n      destPtr = tempPtr + 4;\n      *tempPtr = *srcPtr;\n      tempPtr[1] = srcPtr[1];\n      tempPtr[2] = srcPtr[2];\n      tempPtr[3] = srcPtr[3];\n      tempPtr = destPtr;\n      srcPtr = srcPtr + 4;\n    } while (destPtr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x10));\n    i = (size - 0x10 >> 4) + 1;\n    temp = size & 0xf;\n    src = src + i * 4;\n    dest = dest + i * 4;\n    tempSize = temp;\n    tempPtr = dest;\n    srcPtr = src;\n    if (3 < temp) {\n      do {\n        tempSize = tempSize - 4;\n        *tempPtr = *srcPtr;\n        tempPtr = tempPtr + 1;\n        srcPtr = srcPtr + 1;\n      } while (3 < tempSize);\n      i = (temp - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + i);\n      src = (undefined4 *)((int)src + i);\n      temp = size & 3;\n    }\n    size = temp;\n    if (size == 0) {\n      return;\n    }\n  }\n  tempPtr = dest;\n  do {\n    srcPtr = (undefined4 *)((int)tempPtr + 1);\n    *(undefined *)tempPtr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    tempPtr = srcPtr;\n  } while (srcPtr != (undefined4 *)(size + (int)dest));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082438": "copy_memory_00082438",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "iVar1": "i",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "puVar4": "tempPtr",
                "uVar5": "tempSize",
                "puVar6": "tempChar",
                "uVar7": "temp"
            },
            "calling": [
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082504": {
            "entrypoint": "0x00082504",
            "current_name": "copy_and_fill_array_00082504",
            "code": "\nvoid copyAndFillArray_00082504(undefined4 *array,undefined value,uint length)\n\n{\n  undefined4 *arrayPtr;\n  undefined4 *arrayPtr2;\n  undefined4 fourTimesValue;\n  uint remainingLength;\n  bool isZero;\n  \n  if (((uint)array & 3) != 0) {\n    isZero = length == 0;\n    arrayPtr = array;\n    length = length - 1;\n    if (isZero) {\n      return;\n    }\n    while( true ) {\n      array = (undefined4 *)((int)arrayPtr + 1);\n      *(undefined *)arrayPtr = value;\n      if (((uint)array & 3) == 0) break;\n      isZero = length == 0;\n      arrayPtr = array;\n      length = length - 1;\n      if (isZero) {\n        return;\n      }\n    }\n  }\n  if (3 < length) {\n    fourTimesValue = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remainingLength = length;\n    arrayPtr = array;\n    if (0xf < length) {\n      remainingLength = length - 0x10;\n      do {\n        *arrayPtr = fourTimesValue;\n        arrayPtr[1] = fourTimesValue;\n        arrayPtr[2] = fourTimesValue;\n        arrayPtr[3] = fourTimesValue;\n        arrayPtr = arrayPtr + 4;\n      } while (arrayPtr != (undefined4 *)((int)array + (remainingLength & 0xfffffff0) + 0x10));\n      length = length & 0xf;\n      array = array + ((remainingLength >> 4) + 1) * 4;\n      remainingLength = length;\n      arrayPtr = array;\n      if (length < 4) goto LAB_00082580;\n    }\n    do {\n      length = length - 4;\n      *array = fourTimesValue;\n      array = array + 1;\n    } while (3 < length);\n    array = (undefined4 *)((int)arrayPtr + (remainingLength - 4 & 0xfffffffc) + 4);\n    length = remainingLength & 3;\n  }\nLAB_00082580:\n  if (length != 0) {\n    arrayPtr = array;\n    do {\n      arrayPtr2 = (undefined4 *)((int)arrayPtr + 1);\n      *(undefined *)arrayPtr = value;\n      arrayPtr = arrayPtr2;\n    } while (arrayPtr2 != (undefined4 *)(length + (int)array));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082504": "copy_and_fill_array_00082504",
                "param_1": "array",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "arrayPtr",
                "puVar2": "arrayPtr2",
                "uVar3": "fourTimesValue",
                "uVar4": "remainingLength",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082598": {
            "entrypoint": "0x00082598",
            "current_name": "FUNC_00082598",
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "calling": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d00"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008259c": {
            "entrypoint": "0x0008259c",
            "current_name": "FUNC_0008259c",
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "calling": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d00"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000825a0": {
            "entrypoint": "0x000825a0",
            "current_name": "process_function_000825a0",
            "code": "\nvoid processFunction_000825a0(undefined4 inputParam1,undefined4 inputParam2)\n\n{\n  FUN_000825b0(Elf32_Rel_ARRAY_20070000[140].r_offset,inputParam1,inputParam2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825a0": "process_function_000825a0",
                "param_1": "inputParam1",
                "param_2": "inputParam2"
            },
            "calling": [
                "FUN_00081622"
            ],
            "called": [
                "FUN_000825b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825b0": {
            "entrypoint": "0x000825b0",
            "current_name": "rearrange_memory_blocks_000825b0",
            "code": "\nint * rearrangeMemoryBlocks_000825b0(undefined4 *paramPointer,int *memoryBlockPointer,uint blockCount)\n\n{\n  dword tempValue;\n  int *resultPointer;\n  uint tempValue2;\n  int tempVariable1;\n  uint blockSize;\n  int tempVariable2;\n  int *tempPointer;\n  uint remainingSize;\n  uint roundedSize;\n  int *tempPointer2;\n  \n  if (memoryBlockPointer == (int *)0x0) {\n    resultPointer = (int *)FUN_00081e14(paramPointer,blockCount);\n    return resultPointer;\n  }\n  FUNC_00082598();\n  blockSize = memoryBlockPointer[-1];\n  remainingSize = blockSize & 0xfffffffc;\n  resultPointer = memoryBlockPointer + -2;\n  if (blockCount + 0xb < 0x17) {\n    roundedSize = 0x10;\n  }\n  else {\n    roundedSize = blockCount + 0xb & 0xfffffff8;\n    if ((int)roundedSize < 0) goto LAB_0008267c;\n  }\n  if (roundedSize < blockCount) {\nLAB_0008267c:\n    *paramPointer = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)remainingSize < (int)roundedSize) {\n    tempValue = (int)resultPointer + remainingSize;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == tempValue) {\n      tempValue2 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      tempValue = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(roundedSize + 0x10) <= (int)(tempValue2 + remainingSize)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)resultPointer + roundedSize;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (tempValue2 + remainingSize) - roundedSize | 1;\n        memoryBlockPointer[-1] = roundedSize | memoryBlockPointer[-1] & 1U;\n        FUNC_0008259c(paramPointer);\n        return memoryBlockPointer;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(tempValue + 4) & 0xfffffffe) + tempValue + 4) & 1) == 0) {\n      tempValue2 = *(uint *)(tempValue + 4) & 0xfffffffc;\n      if ((int)roundedSize <= (int)(tempValue2 + remainingSize)) {\n        tempVariable2 = *(int *)(tempValue + 0xc);\n        tempVariable1 = *(int *)(tempValue + 8);\n        *(int *)(tempVariable1 + 0xc) = tempVariable2;\n        *(int *)(tempVariable2 + 8) = tempVariable1;\n        remainingSize = tempValue2 + remainingSize;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      tempValue2 = 0;\n      tempValue = 0;\n    }\n    if (-1 < (int)(blockSize << 0x1f)) {\n      tempPointer2 = (int *)((int)resultPointer - memoryBlockPointer[-2]);\n      blockSize = (tempPointer2[1] & 0xfffffffcU) + remainingSize;\n      if (tempValue != 0) {\n        if (tempValue == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(roundedSize + 0x10) <= (int)(tempValue2 + blockSize)) {\n            resultPointer = tempPointer2 + 2;\n            tempVariable1 = *resultPointer;\n            tempVariable2 = tempPointer2[3];\n            remainingSize = remainingSize - 4;\n            *(int *)(tempVariable1 + 0xc) = tempVariable2;\n            *(int *)(tempVariable2 + 8) = tempVariable1;\n            if (remainingSize < 0x25) {\n              tempPointer = resultPointer;\n              if (0x13 < remainingSize) {\n                tempPointer2[2] = *memoryBlockPointer;\n                tempPointer2[3] = memoryBlockPointer[1];\n                if (remainingSize < 0x1c) {\n                  memoryBlockPointer = memoryBlockPointer + 2;\n                  tempPointer = tempPointer2 + 4;\n                }\n                else {\n                  tempPointer2[4] = memoryBlockPointer[2];\n                  tempPointer2[5] = memoryBlockPointer[3];\n                  if (remainingSize == 0x24) {\n                    tempPointer2[6] = memoryBlockPointer[4];\n                    tempPointer = memoryBlockPointer + 5;\n                    memoryBlockPointer = memoryBlockPointer + 6;\n                    tempPointer2[7] = *tempPointer;\n                    tempPointer = tempPointer2 + 8;\n                  }\n                  else {\n                    memoryBlockPointer = memoryBlockPointer + 4;\n                    tempPointer = tempPointer2 + 6;\n                  }\n                }\n              }\n              *tempPointer = *memoryBlockPointer;\n              tempPointer[1] = memoryBlockPointer[1];\n              tempPointer[2] = memoryBlockPointer[2];\n            }\n            else {\n              FUN_00082438(resultPointer,memoryBlockPointer);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)tempPointer2 + roundedSize;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (tempValue2 + blockSize) - roundedSize | 1;\n            tempPointer2[1] = roundedSize | tempPointer2[1] & 1U;\n            FUNC_0008259c(paramPointer);\n            return resultPointer;\n          }\n        }\n        else {\n          tempValue2 = tempValue2 + blockSize;\n          if ((int)roundedSize <= (int)tempValue2) {\n            tempVariable2 = *(int *)(tempValue + 0xc);\n            tempVariable1 = *(int *)(tempValue + 8);\n            *(int *)(tempVariable1 + 0xc) = tempVariable2;\n            *(int *)(tempVariable2 + 8) = tempVariable1;\n            tempPointer = tempPointer2 + 2;\n            tempVariable1 = *tempPointer;\n            tempVariable2 = tempPointer2[3];\n            blockSize = remainingSize - 4;\n            *(int *)(tempVariable1 + 0xc) = tempVariable2;\n            *(int *)(tempVariable2 + 8) = tempVariable1;\n            remainingSize = tempValue2;\n            if (blockSize < 0x25) {\n              resultPointer = tempPointer;\n              if (0x13 < blockSize) {\n                tempPointer2[2] = *memoryBlockPointer;\n                tempPointer2[3] = memoryBlockPointer[1];\n                if (blockSize < 0x1c) {\n                  memoryBlockPointer = memoryBlockPointer + 2;\n                  resultPointer = tempPointer2 + 4;\n                }\n                else {\n                  tempPointer2[4] = memoryBlockPointer[2];\n                  tempPointer2[5] = memoryBlockPointer[3];\n                  if (blockSize == 0x24) {\n                    tempPointer2[6] = memoryBlockPointer[4];\n                    resultPointer = memoryBlockPointer + 5;\n                    memoryBlockPointer = memoryBlockPointer + 6;\n                    tempPointer2[7] = *resultPointer;\n                    resultPointer = tempPointer2 + 8;\n                  }\n                  else {\n                    memoryBlockPointer = memoryBlockPointer + 4;\n                    resultPointer = tempPointer2 + 6;\n                  }\n                }\n              }\n              *resultPointer = *memoryBlockPointer;\n              resultPointer[1] = memoryBlockPointer[1];\n              resultPointer[2] = memoryBlockPointer[2];\n              blockSize = tempPointer2[1];\n              resultPointer = tempPointer2;\n              memoryBlockPointer = tempPointer;\n            }\n            else {\n              FUN_00082438(tempPointer,memoryBlockPointer);\n              blockSize = tempPointer2[1];\n              resultPointer = tempPointer2;\n              memoryBlockPointer = tempPointer;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)roundedSize <= (int)blockSize) {\n        tempPointer = tempPointer2 + 2;\n        tempVariable1 = *tempPointer;\n        tempVariable2 = tempPointer2[3];\n        tempValue2 = remainingSize - 4;\n        *(int *)(tempVariable1 + 0xc) = tempVariable2;\n        *(int *)(tempVariable2 + 8) = tempVariable1;\n        remainingSize = blockSize;\n        if (tempValue2 < 0x25) {\n          resultPointer = tempPointer;\n          if (0x13 < tempValue2) {\n            tempPointer2[2] = *memoryBlockPointer;\n            tempPointer2[3] = memoryBlockPointer[1];\n            if (tempValue2 < 0x1c) {\n              memoryBlockPointer = memoryBlockPointer + 2;\n              resultPointer = tempPointer2 + 4;\n            }\n            else {\n              tempPointer2[4] = memoryBlockPointer[2];\n              tempPointer2[5] = memoryBlockPointer[3];\n              if (tempValue2 == 0x24) {\n                tempPointer2[6] = memoryBlockPointer[4];\n                resultPointer = memoryBlockPointer + 5;\n                memoryBlockPointer = memoryBlockPointer + 6;\n                tempPointer2[7] = *resultPointer;\n                resultPointer = tempPointer2 + 8;\n              }\n              else {\n                memoryBlockPointer = memoryBlockPointer + 4;\n                resultPointer = tempPointer2 + 6;\n              }\n            }\n          }\n          *resultPointer = *memoryBlockPointer;\n          resultPointer[1] = memoryBlockPointer[1];\n          resultPointer[2] = memoryBlockPointer[2];\n          blockSize = tempPointer2[1];\n          resultPointer = tempPointer2;\n          memoryBlockPointer = tempPointer;\n        }\n        else {\n          FUN_00082438(tempPointer,memoryBlockPointer);\n          blockSize = tempPointer2[1];\n          resultPointer = tempPointer2;\n          memoryBlockPointer = tempPointer;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    tempPointer2 = (int *)FUN_00081e14(paramPointer,blockCount);\n    if (tempPointer2 == (int *)0x0) goto LAB_000826a4;\n    blockSize = memoryBlockPointer[-1];\n    if (tempPointer2 + -2 != (int *)((blockSize & 0xfffffffe) + (int)resultPointer)) {\n      remainingSize = remainingSize - 4;\n      if (remainingSize < 0x25) {\n        resultPointer = memoryBlockPointer;\n        tempPointer = tempPointer2;\n        if (0x13 < remainingSize) {\n          *tempPointer2 = *memoryBlockPointer;\n          tempPointer2[1] = memoryBlockPointer[1];\n          if (remainingSize < 0x1c) {\n            resultPointer = memoryBlockPointer + 2;\n            tempPointer = tempPointer2 + 2;\n          }\n          else {\n            tempPointer2[2] = memoryBlockPointer[2];\n            tempPointer2[3] = memoryBlockPointer[3];\n            if (remainingSize == 0x24) {\n              tempPointer2[4] = memoryBlockPointer[4];\n              tempPointer2[5] = memoryBlockPointer[5];\n              resultPointer = memoryBlockPointer + 6;\n              tempPointer = tempPointer2 + 6;\n            }\n            else {\n              resultPointer = memoryBlockPointer + 4;\n              tempPointer = tempPointer2 + 4;\n            }\n          }\n        }\n        *tempPointer = *resultPointer;\n        tempPointer[1] = resultPointer[1];\n        tempPointer[2] = resultPointer[2];\n      }\n      else {\n        FUN_00082438(tempPointer2,memoryBlockPointer);\n      }\n      FUN_00083d9c(paramPointer,memoryBlockPointer);\n      goto LAB_000826a4;\n    }\n    remainingSize = remainingSize + (tempPointer2[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  tempValue2 = remainingSize - roundedSize;\n  tempPointer2 = memoryBlockPointer;\n  if (tempValue2 < 0x10) {\n    resultPointer[1] = blockSize & 1 | remainingSize;\n    *(uint *)((int)resultPointer + remainingSize + 4) = *(uint *)((int)resultPointer + remainingSize + 4) | 1;\n  }\n  else {\n    resultPointer[1] = blockSize & 1 | roundedSize;\n    *(uint *)((int)resultPointer + roundedSize + 4) = tempValue2 | 1;\n    *(uint *)((int)resultPointer + tempValue2 + roundedSize + 4) = *(uint *)((int)resultPointer + tempValue2 + roundedSize + 4) | 1;\n    FUN_00083d9c(paramPointer,(int)resultPointer + roundedSize + 8);\n  }\nLAB_000826a4:\n  FUNC_0008259c(paramPointer);\n  return tempPointer2;\n}\n\n",
            "renaming": {
                "FUN_000825b0": "rearrange_memory_blocks_000825b0",
                "param_1": "paramPointer",
                "param_2": "memoryBlockPointer",
                "param_3": "blockCount",
                "dVar1": "tempValue",
                "piVar2": "resultPointer",
                "uVar3": "tempValue2",
                "iVar4": "tempVariable1",
                "uVar5": "blockSize",
                "iVar6": "tempVariable2",
                "piVar7": "tempPointer",
                "uVar8": "remainingSize",
                "uVar9": "roundedSize",
                "piVar10": "tempPointer2"
            },
            "calling": [
                "FUN_000825a0",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_00082438",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082970": {
            "entrypoint": "0x00082970",
            "current_name": "check_and_update_value_00082970",
            "code": "\nvoid checkAndUpdateValue_00082970(int *output,undefined4 input)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_0008118c(input);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082970": "check_and_update_value_00082970",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00081e14",
                "FUN_00083d00"
            ],
            "called": [
                "FUN_0008118c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082994": {
            "entrypoint": "0x00082994",
            "current_name": "copy_string_00082994",
            "code": "\nvoid copyString_00082994(uint *dest,uint *src)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *srcPointer;\n  uint *currentSrc;\n  uint currentUint;\n  uint currentUint2;\n  uint *destPointer;\n  bool isZeroByte;\n  \n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      currentChar = *(char *)src;\n      *(char *)dest = currentChar;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    currentSrc = src;\n    if (((uint)src & 1) != 0) {\n      currentSrc = (uint *)((int)src + 1);\n      currentChar = *(char *)src;\n      *(char *)dest = currentChar;\n      dest = (uint *)((int)dest + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    src = currentSrc;\n    if (((uint)currentSrc & 2) != 0) {\n      src = (uint *)((int)currentSrc + 2);\n      currentShort = *(ushort *)currentSrc;\n      isZeroByte = (currentShort & 0xff) == 0;\n      if (isZeroByte) {\n        *(char *)dest = (char)currentShort;\n      }\n      else {\n        *(ushort *)dest = currentShort;\n        isZeroByte = (currentShort & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (isZeroByte) {\n        return;\n      }\n    }\n  }\n  currentUint = *src;\n  currentSrc = src + 1;\n  destPointer = dest;\n  if (((uint)src & 4) != 0) {\n    if ((currentUint + 0xfefefeff & ~currentUint & 0x80808080) != 0) goto LAB_000829f8;\n    destPointer = dest + 1;\n    *dest = currentUint;\n    currentSrc = src + 2;\n    currentUint = src[1];\n  }\n  while( true ) {\n    srcPointer = currentSrc + 1;\n    currentUint2 = *currentSrc;\n    dest = destPointer;\n    if ((currentUint + 0xfefefeff & ~currentUint & 0x80808080) != 0) break;\n    dest = destPointer + 1;\n    *destPointer = currentUint;\n    currentUint = currentUint2;\n    if ((currentUint2 + 0xfefefeff & ~currentUint2 & 0x80808080) != 0) break;\n    currentSrc = currentSrc + 2;\n    currentUint = *srcPointer;\n    destPointer = destPointer + 2;\n    *dest = currentUint2;\n  }\nLAB_000829f8:\n  do {\n    *(char *)dest = (char)currentUint;\n    currentUint2 = currentUint & 0xff;\n    currentUint = currentUint >> 8 | currentUint << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (currentUint2 != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "srcPointer",
                "puVar4": "currentSrc",
                "uVar5": "currentUint",
                "uVar6": "currentUint2",
                "puVar7": "destPointer",
                "bVar8": "isZeroByte"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082a50": {
            "entrypoint": "0x00082a50",
            "current_name": "count_trailing_zeroes_00082a50",
            "code": "\nint countTrailingZeroes_00082a50(uint input)\n\n{\n  int trailingZeroCount;\n  uint *ptrUInt;\n  uint currentValue;\n  bool isZero;\n  \n  ptrUInt = (uint *)(input & 0xfffffffc);\n  trailingZeroCount = -(input & 3);\n  currentValue = *ptrUInt;\n  if ((input & 3) != 0) {\n    currentValue = currentValue | 0xffffffffU >> ((trailingZeroCount + 4U & 0x1f) << 3);\n  }\n  while (ptrUInt = ptrUInt + 1, (currentValue + 0xfefefeff & ~currentValue & 0x80808080) == 0) {\n    trailingZeroCount = trailingZeroCount + 4;\n    currentValue = *ptrUInt;\n  }\n  isZero = (currentValue & 0xff) == 0;\n  if (!isZero) {\n    trailingZeroCount = trailingZeroCount + 1;\n    isZero = (currentValue & 0xff00) == 0;\n  }\n  if (!isZero) {\n    trailingZeroCount = trailingZeroCount + 1;\n    isZero = (currentValue & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    trailingZeroCount = trailingZeroCount + 1;\n  }\n  return trailingZeroCount;\n}\n\n",
            "renaming": {
                "FUN_00082a50": "count_trailing_zeroes_00082a50",
                "param_1": "input",
                "iVar1": "trailingZeroCount",
                "puVar2": "ptrUInt",
                "uVar3": "currentValue",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "entrypoint": "0x00082ac0",
            "current_name": "process_data_00082ac0",
            "code": "\nint processData_00082ac0(undefined4 inputValue,int index,int **array)\n\n{\n  int *arrayPointer;\n  int returnValue;\n  int *tempPointer;\n  uint counter;\n  undefined4 *dataPointer;\n  uint temp1;\n  uint temp2;\n  \n  if (-1 < *(int *)(index + 100) << 0x12) {\n    returnValue = FUN_00083f34();\n    array[2] = (int *)0x0;\n    array[1] = (int *)0x0;\n    return returnValue;\n  }\n  tempPointer = array[2];\n  arrayPointer = *array;\n  while (tempPointer != (int *)0x0) {\n    temp1 = arrayPointer[1];\n    temp2 = temp1 >> 2;\n    if (temp2 != 0) {\n      dataPointer = (undefined4 *)(*arrayPointer + -4);\n      counter = 0;\n      do {\n        dataPointer = dataPointer + 1;\n        returnValue = FUN_00083c40(inputValue,*dataPointer,index);\n        counter = counter + 1;\n        if (returnValue == -1) goto LAB_00082b00;\n      } while (temp2 != counter);\n      tempPointer = array[2];\n    }\n    tempPointer = (int *)((int)tempPointer - (temp1 & 0xfffffffc));\n    array[2] = tempPointer;\n    arrayPointer = arrayPointer + 2;\n  }\n  returnValue = 0;\nLAB_00082b00:\n  array[2] = (int *)0x0;\n  array[1] = (int *)0x0;\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00082ac0": "process_data_00082ac0",
                "param_1": "inputValue",
                "param_2": "index",
                "param_3": "array",
                "piVar1": "arrayPointer",
                "iVar2": "returnValue",
                "piVar3": "tempPointer",
                "uVar4": "counter",
                "puVar5": "dataPointer",
                "uVar6": "temp1",
                "uVar7": "temp2"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00083c40",
                "FUN_00083f34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082b38": {
            "entrypoint": "0x00082b38",
            "current_name": "parse_format_string_00082b38",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint parseFormatString_00082b38(int formatString,int args,int *******formatSpecifiers,int **argPtr)\n\n{\n  bool isLeftJustified;\n  bool isSign;\n  bool isSpace;\n  char fillChar;\n  bool isZeroPad;\n  int ********formatSpec;\n  int *tempInt;\n  int result;\n  char tempChar;\n  int *******formatSpecifierPtr;\n  uint digitValue;\n  int **argPtrPtr;\n  uint flags;\n  uint ch;\n  int numDigits;\n  int ********pformatPointer;\n  int formatIndex;\n  int *******remainingFormats;\n  int *argPtr;\n  int *******formatSpecifier;\n  uint tempValue;\n  int *argValue;\n  int *******remainingFormats;\n  undefined4 tempValue;\n  int ********formatPtr;\n  bool isNonZeroValue;\n  longlong combinedValue;\n  int *******maximumWidth;\n  int *******minimumWidth;\n  int **argPtrPtr;\n  int result;\n  char *charPtr;\n  char leftJustifyChar;\n  undefined zeroPadChar;\n  undefined hexChar;\n  int ********formatPointer;\n  int formatIndex;\n  int *******remainingFormats;\n  undefined fillChar;\n  char cStack_6a;\n  undefined digitChar;\n  undefined constantString [4];\n  int *******tempFormatPtr [16];\n  \n  if ((formatString != 0) && (*(int *)(formatString + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  flags = (uint)*(ushort *)(args + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(args + 0xc) << 0x12)) {\n    flags = flags | 0x2000;\n    *(short *)(args + 0xc) = (short)flags;\n    *(uint *)(args + 100) = *(uint *)(args + 100) & 0xffffdfff;\n  }\n  if (((int)(flags << 0x1c) < 0) && (*(int *)(args + 0x10) != 0)) {\n    if ((flags & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    result = FUN_00083808(formatString,args);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(args + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(args + 0xe)) {\n    result = FUN_0008378c(formatString,args,formatSpecifiers,argPtr);\n    return result;\n  }\nLAB_00082b8a:\n  charPtr = (char *)0x0;\n  remainingFormats = (int *******)0x0;\n  formatIndex = 0;\n  result = 0;\n  formatSpec = (int ********)constantString;\n  argPtrPtr = argPtr;\n  formatPointer = (int ********)constantString;\nLAB_00082b9e:\n  formatSpecifierPtr = formatSpecifiers;\n  if ((*(char *)formatSpecifiers != '\\0') && (*(char *)formatSpecifiers != '%')) {\n    do {\n      formatSpecifierPtr = (int *******)((int)formatSpecifierPtr + 1);\n      if (*(char *)formatSpecifierPtr == '\\0') break;\n    } while (*(char *)formatSpecifierPtr != '%');\n    formatSpecifier = (int *******)((int)formatSpecifierPtr - (int)formatSpecifiers);\n    if (formatSpecifier != (int *******)0x0) {\n      formatIndex = formatIndex + 1;\n      remainingFormats = (int *******)((int)remainingFormats + (int)formatSpecifier);\n      *formatSpec = formatSpecifiers;\n      formatSpec[1] = formatSpecifier;\n      if (formatIndex < 8) {\n        formatSpec = formatSpec + 2;\n      }\n      else {\n        if (remainingFormats == (int *******)0x0) {\n          result = result + (int)formatSpecifier;\n          formatIndex = 0;\n          formatSpec = (int ********)constantString;\n          goto LAB_00082bee;\n        }\n        result = FUN_00082ac0(formatString,args,&formatPointer);\n        formatSpec = (int ********)constantString;\n        if (result != 0) goto LAB_000833de;\n      }\n      result = result + (int)formatSpecifier;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)formatSpecifierPtr != '\\0') {\n    leftJustifyChar = '\\0';\n    ch = (uint)*(byte *)((int)formatSpecifierPtr + 1);\n    flags = 0;\n    isZeroPad = false;\n    isSign = false;\n    isLeftJustified = false;\n    isSpace = false;\n    isNonZeroValue = false;\n    formatSpecifier = (int *******)0x0;\n    minimumWidth = (int *******)0xffffffff;\n    formatSpecifiers = (int *******)((int)formatSpecifierPtr + 1);\nLAB_00082c12:\n    formatSpecifiers = (int *******)((int)formatSpecifiers + 1);\nLAB_00082c16:\n    switch(ch) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (ch != 0) {\n        maximumWidth = (int *******)0x1;\n        minimumWidth = (int *******)0x1;\n        formatPtr = (int ********)&fillChar;\n        fillChar = (char)ch;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      isSpace = true;\n      ch = (uint)*(byte *)formatSpecifiers;\n      goto LAB_00082c12;\n    case 0x2a:\n      formatSpecifier = (int *******)*argPtrPtr;\n      argPtrPtr = argPtrPtr + 1;\n      if ((int)formatSpecifier < 0) {\n        formatSpecifier = (int *******)-(int)formatSpecifier;\n        goto switchD_00082c20_caseD_2d;\n      }\n      ch = (uint)*(byte *)formatSpecifiers;\n      goto LAB_00082c12;\n    case 0x2b:\n      ch = (uint)*(byte *)formatSpecifiers;\n      leftJustifyChar = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      flags = flags | 4;\n      ch = (uint)*(byte *)formatSpecifiers;\n      goto LAB_00082c12;\n    case 0x2e:\n      ch = (uint)*(byte *)formatSpecifiers;\n      formatSpecifierPtr = (int *******)((int)formatSpecifiers + 1);\n      if (ch == 0x2a) {\n        ch = (uint)*(byte *)((int)formatSpecifiers + 1);\n        minimumWidth = (int *******)*argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        formatSpecifiers = formatSpecifierPtr;\n        if ((int)minimumWidth < 0) {\n          minimumWidth = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      digitValue = ch - 0x30;\n      if (digitValue < 10) {\n        tempValue = 0;\n        do {\n          formatSpecifiers = (int *******)((int)formatSpecifierPtr + 1);\n          ch = (uint)*(byte *)formatSpecifierPtr;\n          tempValue = digitValue + tempValue * 10;\n          digitValue = ch - 0x30;\n          formatSpecifierPtr = formatSpecifiers;\n        } while (digitValue < 10);\n        minimumWidth = (int *******)(tempValue | (int)tempValue >> 0x1f);\n      }\n      else {\n        minimumWidth = (int *******)0x0;\n        formatSpecifiers = formatSpecifierPtr;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      flags = flags | 0x80;\n      ch = (uint)*(byte *)formatSpecifiers;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      isSign = true;\n      if (isLeftJustified == false) goto LAB_00083028;\nLAB_00082e98:\n      argPtrPtr = (int **)((int)argPtrPtr + 7U & 0xfffffff8);\n      argPtr = *argPtrPtr;\n      argValue = argPtrPtr[1];\n      argPtrPtr = argPtrPtr + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      isSign = true;\n      if (isLeftJustified != false) goto LAB_00082d42;\nLAB_00082f2a:\n      result = (uint)isSign << 4;\n      numDigits = (uint)isLeftJustified << 5;\n      if ((isSign == 0) && (numDigits = (uint)isNonZeroValue << 6, isNonZeroValue != 0)) {\n        argPtr = (int *)(uint)*(ushort *)argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        argValue = (int *)0x0;\n      }\n      else {\n        result = numDigits;\n        argPtr = *argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        argValue = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      isSign = true;\n      if (isLeftJustified != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((isSign) || (isNonZeroValue == false)) {\n        result = 1;\n        argPtr = *argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        argValue = (int *)0x0;\n      }\n      else {\n        argValue = (int *)0x0;\n        argPtr = (int *)(uint)*(ushort *)argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      charPtr = \"0123456789ABCDEF\";\n      if (isLeftJustified == false) goto LAB_00083196;\nLAB_00082fb6:\n      argPtrPtr = (int **)((int)argPtrPtr + 7U & 0xfffffff8);\n      argPtrPtr = argPtrPtr + 2;\n      argPtr = *argPtrPtr;\n      argValue = argPtrPtr[1];\n      goto LAB_00082fca;\n    case 99:\n      argPtr = *argPtrPtr;\n      argPtrPtr = argPtrPtr + 1;\n      maximumWidth = (int *******)0x1;\n      fillChar = SUB41(argPtr,0);\n      minimumWidth = (int *******)0x1;\n      formatPtr = (int ********)&fillChar;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (isLeftJustified != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((isSign == false) && (isNonZeroValue != false)) {\n        argPtr = (int *)(int)*(short *)argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        argValue = (int *)((int)argPtr >> 0x1f);\n      }\n      else {\n        argPtr = *argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        argValue = (int *)((int)argPtr >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)argValue < 0) {\n        isNonZeroValue = argPtr != (int *)0x0;\n        argPtr = (int *)-(int)argPtr;\n        argValue = (int *)(-(int)argValue - (uint)isNonZeroValue);\n        leftJustifyChar = '-';\n        fillChar = '-';\n        result = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)minimumWidth) {\n        flags = flags & 0xffffff7f;\n      }\n      isZeroPad = false;\n      ch = (uint)argPtr | (uint)argValue;\n      result = 1;\n      fillChar = leftJustifyChar;\n      goto joined_r0x00082d78;\n    case 0x68:\n      isNonZeroValue = true;\n      ch = (uint)*(byte *)formatSpecifiers;\n      goto LAB_00082c12;\n    case 0x6c:\n      ch = (uint)*(byte *)formatSpecifiers;\n      if (ch == 0x6c) {\n        isLeftJustified = true;\n        ch = (uint)*(byte *)((int)formatSpecifiers + 1);\n        formatSpecifiers = (int *******)((int)formatSpecifiers + 1);\n      }\n      else {\n        isSign = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (isLeftJustified == false) {\n        if (isSign == false) {\n          if (isNonZeroValue) {\n            argPtr = *argPtrPtr;\n            argPtrPtr = argPtrPtr + 1;\n            *(short *)argPtr = (short)result;\n          }\n          else {\n            argPtr = *argPtrPtr;\n            argPtrPtr = argPtrPtr + 1;\n            *argPtr = result;\n          }\n        }\n        else {\n          argPtr = *argPtrPtr;\n          argPtrPtr = argPtrPtr + 1;\n          *argPtr = result;\n        }\n      }\n      else {\n        argPtr = *argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        *argPtr = result;\n        argPtr[1] = result >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (isLeftJustified == false) goto LAB_00082f2a;\nLAB_00082d42:\n      argPtrPtr = (int **)((int)argPtrPtr + 7U & 0xfffffff8);\n      argPtrPtr = argPtrPtr + 2;\n      argPtr = *argPtrPtr;\n      argValue = argPtrPtr[1];\n      result = 0;\n      break;\n    case 0x70:\n      argPtr = *argPtrPtr;\n      argPtrPtr = argPtrPtr + 1;\n      hexChar = 0x78;\n      isZeroPad = true;\n      argValue = (int *)0x0;\n      zeroPadChar = 0x30;\n      charPtr = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      isLeftJustified = true;\n      ch = (uint)*(byte *)formatSpecifiers;\n      goto LAB_00082c12;\n    case 0x73:\n      formatPtr = (int ********)*argPtrPtr;\n      leftJustifyChar = '\\0';\n      argPtrPtr = argPtrPtr + 1;\n      if (formatPtr != (int ********)0x0) {\n        if ((int)minimumWidth < 0) {\n          minimumWidth = (int *******)FUN_00082a50(formatPtr);\n          formatSpecifierPtr = (int *******)0x0;\n          fillChar = leftJustifyChar;\n        }\n        else {\n          result = FUN_00084384(formatPtr,0,minimumWidth);\n          fillChar = leftJustifyChar;\n          if (result == 0) {\n            formatSpecifierPtr = (int *******)0x0;\n          }\n          else {\n            remainingFormats = (int *******)(result - (int)formatPtr);\n            if ((int)minimumWidth <= (int)(int *******)(result - (int)formatPtr)) {\n              remainingFormats = minimumWidth;\n            }\n            formatSpecifierPtr = (int *******)0x0;\n            minimumWidth = remainingFormats;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < minimumWidth) {\n        minimumWidth = (int *******)0x6;\n      }\n      maximumWidth = (int *******)((uint)minimumWidth & ~((int)minimumWidth >> 0x1f));\n      formatPtr = (int ********)&UNK_00085840;\nLAB_00083012:\n      leftJustifyChar = '\\0';\n      formatSpecifierPtr = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!isLeftJustified) goto LAB_00082f7c;\nLAB_00082e62:\n      argPtrPtr = (int **)((int)argPtrPtr + 7U & 0xfffffff8);\n      argPtrPtr = argPtrPtr + 2;\n      argPtr = *argPtrPtr;\n      argValue = argPtrPtr[1];\n      result = 1;\n      break;\n    case 0x78:\n      charPtr = \"0123456789abcdef\";\n      if (isLeftJustified != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((isSign == false) && (isNonZeroValue != false)) {\n        argValue = (int *)0x0;\n        argPtr = (int *)(uint)*(ushort *)argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n      }\n      else {\n        argPtr = *argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        argValue = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((isSpace) && (((uint)argPtr | (uint)argValue) != 0)) {\n        isZeroPad = true;\n        zeroPadChar = 0x30;\n        result = 2;\n        hexChar = (char)ch;\n      }\n      else {\n        result = 2;\n      }\n    }\n    leftJustifyChar = '\\0';\n    fillChar = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)minimumWidth) {\n      flags = flags & 0xffffff7f;\n    }\n    ch = (uint)argPtr | (uint)argValue;\njoined_r0x00082d78:\n    combinedValue = CONCAT44(argValue,argPtr);\n    formatSpecifierPtr = minimumWidth;\n    if ((ch == 0) && (minimumWidth == (int *******)0x0)) {\n      formatPtr = (int ********)constantString;\n      if ((result != 0) || (!isSpace)) goto LAB_00082da0;\n      formatPtr = (int ********)(&cStack_6a + 1);\n      digitChar = '0';\n      goto LAB_00082d9a;\n    }\n    if (result == 1) {\n      if (argValue != (int *)0x0 || (int *)0x9 < argPtr) {\n        pformatPointer = (int ********)(&cStack_6a + 1);\n        do {\n          formatPtr = pformatPointer;\n          tempValue = (undefined4)((ulonglong)combinedValue >> 0x20);\n          tempChar = '\\n';\n          FUN_00084750((int)combinedValue,tempValue,10,0);\n          *(char *)formatPtr = tempChar + '0';\n          combinedValue = FUN_00084750((int)combinedValue,tempValue,10,0);\n          pformatPointer = (int ********)((int)formatPtr + -1);\n        } while (combinedValue != 0);\n        minimumWidth = (int *******)((int)constantString - (int)formatPtr);\n        goto LAB_00082da0;\n      }\n      digitChar = (char)argPtr + '0';\n      formatPtr = (int ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    pformatPointer = (int ********)(&cStack_6a + 1);\n    if (result != 2) goto LAB_0008337e;\n    do {\n      formatPtr = pformatPointer;\n      ch = (uint)argPtr & 0xf;\n      argPtr = (int *)((uint)argPtr >> 4 | (int)argValue << 0x1c);\n      argValue = (int *)((uint)argValue >> 4);\n      *(char *)formatPtr = charPtr[ch];\n      pformatPointer = (int ********)((int)formatPtr + -1);\n    } while (((uint)argPtr | (uint)argValue) != 0);\n    minimumWidth = (int *******)((int)constantString - (int)formatPtr);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (remainingFormats != (int *******)0x0) {\n    FUN_00082ac0(formatString,args,&formatPointer);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(args + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return result;\nLAB_0008337e:\n  do {\n    formatPtr = pformatPointer;\n    tempInt = (int *)((uint)argPtr >> 3 | (int)argValue << 0x1d);\n    argValue = (int *)((uint)argValue >> 3);\n    result = ((uint)argPtr & 7) + 0x30;\n    *(char *)formatPtr = (char)result;\n    pformatPointer = (int ********)((int)formatPtr + -1);\n    argPtr = tempInt;\n  } while (((uint)tempInt | (uint)argValue) != 0);\n  if (isSpace) {\n    if (result == 0x30) {\nLAB_00082d9a:\n      minimumWidth = (int *******)((int)constantString - (int)formatPtr);\n    }\n    else {\n      *(undefined *)((int)formatPtr + -1) = 0x30;\n      formatPtr = pformatPointer;\n      minimumWidth = (int *******)((int)constantString - (int)pformatPointer);\n    }\n  }\n  else {\nLAB_0008351e:\n    minimumWidth = (int *******)((int)constantString - (int)formatPtr);\n  }\nLAB_00082da0:\n  maximumWidth = minimumWidth;\n  if ((int)minimumWidth < (int)formatSpecifierPtr) {\n    maximumWidth = formatSpecifierPtr;\n  }\n  if (fillChar != '\\0') {\n    maximumWidth = (int *******)((int)maximumWidth + 1);\n  }\nLAB_00082dba:\n  if (isZeroPad) {\n    maximumWidth = (int *******)((int)maximumWidth + 2);\n  }\n  if ((flags == 0) &&\n     (remainingFormats = (int *******)((int)formatSpecifier - (int)maximumWidth), 0 < (int)remainingFormats)) {\n    if ((int)remainingFormats < 0x11) {\n      formatIndex = formatIndex + 1;\n    }\n    else {\n      do {\n        remainingFormats = remainingFormats;\n        result = formatIndex + 1;\n        remainingFormats = remainingFormats + 4;\n        *formatSpec = (int *******)0x85808;\n        formatSpec[1] = (int *******)0x10;\n        if (result < 8) {\n          numDigits = formatIndex + 2;\n          formatSpec = formatSpec + 2;\n          formatIndex = result;\n        }\n        else if (remainingFormats == (int *******)0x0) {\n          numDigits = 1;\n          formatSpec = (int ********)constantString;\n          formatIndex = 0;\n        }\n        else {\n          formatIndex = result;\n          result = FUN_00082ac0(formatString,args,&formatPointer);\n          if (result != 0) goto LAB_000833de;\n          numDigits = formatIndex + 1;\n          formatSpec = (int ********)constantString;\n        }\n        remainingFormats = remainingFormats + -4;\n      } while (0x10 < (int)remainingFormats);\n      remainingFormats = remainingFormats + -4;\n      formatIndex = numDigits;\n    }\n    remainingFormats = (int *******)((int)remainingFormats + (int)remainingFormats);\n    *formatSpec = (int *******)0x85808;\n    formatSpec[1] = remainingFormats;\n    if (formatIndex < 8) {\n      result = formatIndex + 1;\n      formatSpec = formatSpec + 2;\n    }\n    else if (remainingFormats == (int *******)0x0) {\n      result = 1;\n      formatIndex = 0;\n      formatSpec = (int ********)constantString;\n    }\n    else {\n      result = FUN_00082ac0(formatString,args,&formatPointer);\n      if (result != 0) goto LAB_000833de;\n      result = formatIndex + 1;\n      formatSpec = (int ********)constantString;\n    }\n  }\n  else {\n    result = formatIndex + 1;\n  }\n  numDigits = result;\n  if (leftJustifyChar != '\\0') {\n    remainingFormats = (int *******)((int)remainingFormats + 1);\n    numDigits = 1;\n    *formatSpec = (int *******)&leftJustifyChar;\n    formatSpec[1] = (int *******)0x1;\n    formatIndex = result;\n    if (result < 8) {\n      numDigits = result + 1;\n      formatSpec = formatSpec + 2;\n    }\n    else if (remainingFormats == (int *******)0x0) {\n      formatIndex = 0;\n      formatSpec = (int ********)constantString;\n    }\n    else {\n      result = FUN_00082ac0(formatString,args,&formatPointer);\n      if (result != 0) goto LAB_000833de;\n      numDigits = formatIndex + 1;\n      formatSpec = (int ********)constantString;\n    }\n  }\n  result = numDigits;\n  formatIndex = formatIndex;\n  if (isZeroPad) {\n    remainingFormats = (int *******)((int)remainingFormats + 2);\n    *formatSpec = (int *******)&zeroPadChar;\n    formatSpec[1] = (int *******)0x2;\n    if (numDigits < 8) {\n      result = numDigits + 1;\n      formatIndex = numDigits;\n      formatSpec = formatSpec + 2;\n    }\n    else if (remainingFormats == (int *******)0x0) {\n      result = 1;\n      formatIndex = 0;\n      formatSpec = (int ********)constantString;\n    }\n    else {\n      formatIndex = numDigits;\n      result = FUN_00082ac0(formatString,args,&formatPointer);\n      if (result != 0) goto LAB_000833de;\n      result = formatIndex + 1;\n      formatIndex = formatIndex;\n      formatSpec = (int ********)constantString;\n    }\n  }\n  formatIndex = formatIndex;\n  if ((flags == 0x80) &&\n     (remainingFormats = (int *******)((int)formatSpecifier - (int)maximumWidth), 0 < (int)remainingFormats)) {\n    if (0x10 < (int)remainingFormats) {\n      do {\n        while( true ) {\n          remainingFormats = remainingFormats;\n          formatIndex = formatIndex + 1;\n          remainingFormats = remainingFormats + 4;\n          *formatSpec = (int *******)&DAT_00085848;\n          formatSpec[1] = (int *******)0x10;\n          if (7 < formatIndex) break;\n          result = formatIndex + 2;\n          formatSpec = formatSpec + 2;\nLAB_0008348e:\n          formatIndex = formatIndex;\n          remainingFormats = remainingFormats + -4;\n          if ((int)(remainingFormats + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (remainingFormats != (int *******)0x0) {\n          result = FUN_00082ac0(formatString,args,&formatPointer);\n          if (result == 0) {\n            result = formatIndex + 1;\n            formatSpec = (int ********)constantString;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        formatIndex = 0;\n        remainingFormats = remainingFormats + -4;\n        formatSpec = (int ********)constantString;\n      } while (0x10 < (int)(remainingFormats + -4));\nLAB_000834b4:\n      remainingFormats = remainingFormats + -4;\n    }\n    remainingFormats = (int *******)((int)remainingFormats + (int)remainingFormats);\n    *formatSpec = (int *******)&DAT_00085848;\n    formatSpec[1] = remainingFormats;\n    formatIndex = result;\n    if (result < 8) {\n      result = result + 1;\n      formatSpec = formatSpec + 2;\n    }\n    else if (remainingFormats == (int *******)0x0) {\n      result = 1;\n      formatIndex = 0;\n      formatSpec = (int ********)constantString;\n    }\n    else {\n      result = FUN_00082ac0(formatString,args,&formatPointer);\n      if (result != 0) goto LAB_000833de;\n      result = formatIndex + 1;\n      formatSpec = (int ********)constantString;\n    }\n  }\n  formatSpecifierPtr = (int *******)((int)formatSpecifierPtr - (int)minimumWidth);\n  pformatPointer = (int ********)constantString;\n  if ((int)formatSpecifierPtr < 1) {\nLAB_000832c6:\n    remainingFormats = (int *******)((int)remainingFormats + (int)minimumWidth);\n    *formatSpec = (int *******)formatPtr;\n    formatSpec[1] = minimumWidth;\n    minimumWidth = remainingFormats;\n    formatIndex = result;\n    if (result < 8) goto LAB_0008345a;\n    if (remainingFormats == (int *******)0x0) {\n      formatIndex = 0;\n    }\n    else {\n      result = FUN_00082ac0(formatString,args,&formatPointer);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    numDigits = formatIndex;\n    if (0x10 < (int)formatSpecifierPtr) {\n      do {\n        while( true ) {\n          remainingFormats = formatSpecifierPtr;\n          formatIndex = numDigits + 1;\n          remainingFormats = remainingFormats + 4;\n          *formatSpec = (int *******)&DAT_00085848;\n          formatSpec[1] = (int *******)0x10;\n          if (7 < formatIndex) break;\n          result = numDigits + 2;\n          formatSpec = formatSpec + 2;\nLAB_00083282:\n          numDigits = formatIndex;\n          formatSpecifierPtr = remainingFormats + -4;\n          if ((int)(remainingFormats + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (remainingFormats != (int *******)0x0) {\n          result = FUN_00082ac0(formatString,args,&formatPointer);\n          if (result == 0) {\n            result = formatIndex + 1;\n            formatSpec = (int ********)constantString;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        formatSpec = (int ********)constantString;\n        numDigits = 0;\n        formatSpecifierPtr = remainingFormats + -4;\n      } while (0x10 < (int)(remainingFormats + -4));\nLAB_000832aa:\n      formatSpecifierPtr = remainingFormats + -4;\n    }\n    remainingFormats = (int *******)((int)remainingFormats + (int)formatSpecifierPtr);\n    *formatSpec = (int *******)&DAT_00085848;\n    formatSpec[1] = formatSpecifierPtr;\n    if (result < 8) {\n      result = result + 1;\n      formatSpec = formatSpec + 2;\n      goto LAB_000832c6;\n    }\n    if (remainingFormats != (int *******)0x0) {\n      formatIndex = result;\n      result = FUN_00082ac0(formatString,args,&formatPointer);\n      if (result != 0) goto LAB_000833de;\n      result = formatIndex + 1;\n      formatSpec = (int ********)constantString;\n      goto LAB_000832c6;\n    }\n    tempFormatPtr[0] = minimumWidth;\n    formatIndex = 1;\n    formatSpec = (int ********)constantString;\n    constantString = (undefined  [4])formatPtr;\nLAB_0008345a:\n    pformatPointer = formatSpec + 2;\n    remainingFormats = minimumWidth;\n  }\n  if (((flags & 4) != 0) &&\n     (formatSpecifierPtr = (int *******)((int)formatSpecifier - (int)maximumWidth), 0 < (int)formatSpecifierPtr)) {\n    result = formatIndex;\n    if ((int)formatSpecifierPtr < 0x11) {\n      numDigits = formatIndex + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          formatIndex = result + 1;\n          remainingFormats = remainingFormats + 4;\n          *pformatPointer = (int *******)0x85808;\n          pformatPointer[1] = (int *******)0x10;\n          if (7 < formatIndex) break;\n          numDigits = result + 2;\n          pformatPointer = pformatPointer + 2;\nLAB_00083316:\n          formatSpecifierPtr = formatSpecifierPtr + -4;\n          result = formatIndex;\n          if ((int)formatSpecifierPtr < 0x11) goto LAB_0008333e;\n        }\n        if (remainingFormats != (int *******)0x0) {\n          result = FUN_00082ac0(formatString,args,&formatPointer);\n          if (result == 0) {\n            numDigits = formatIndex + 1;\n            pformatPointer = (int ********)constantString;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        formatSpecifierPtr = formatSpecifierPtr + -4;\n        numDigits = 1;\n        result = 0;\n        pformatPointer = (int ********)constantString;\n      } while (0x10 < (int)formatSpecifierPtr);\n    }\nLAB_0008333e:\n    remainingFormats = (int *******)((int)remainingFormats + (int)formatSpecifierPtr);\n    *pformatPointer = (int *******)0x85808;\n    pformatPointer[1] = formatSpecifierPtr;\n    formatIndex = numDigits;\n    if (7 < numDigits) {\n      if (remainingFormats == (int *******)0x0) {\n        if ((int)maximumWidth < (int)formatSpecifier) {\n          maximumWidth = formatSpecifier;\n        }\n        result = result + (int)maximumWidth;\n        goto LAB_00083422;\n      }\n      result = FUN_00082ac0(formatString,args,&formatPointer);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)maximumWidth < (int)formatSpecifier) {\n    maximumWidth = formatSpecifier;\n  }\n  result = result + (int)maximumWidth;\n  if ((remainingFormats != (int *******)0x0) &&\n     (result = FUN_00082ac0(formatString,args,&formatPointer), result != 0)) goto LAB_000833de;\nLAB_00083422:\n  formatIndex = 0;\n  formatSpec = (int ********)constantString;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  digitValue = ch - 0x30;\n  formatSpecifier = (int *******)0x0;\n  formatSpecifierPtr = formatSpecifiers;\n  do {\n    formatSpecifiers = (int *******)((int)formatSpecifierPtr + 1);\n    ch = (uint)*(byte *)formatSpecifierPtr;\n    formatSpecifier = (int *******)(digitValue + (int)formatSpecifier * 10);\n    digitValue = ch - 0x30;\n    formatSpecifierPtr = formatSpecifiers;\n  } while (digitValue < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  ch = (uint)*(byte *)formatSpecifiers;\n  if (leftJustifyChar == '\\0') {\n    leftJustifyChar = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "renaming": {
                "FUN_00082b38": "parse_format_string_00082b38",
                "param_1": "formatString",
                "param_2": "args",
                "param_3": "formatSpecifiers",
                "param_4": "argPtr",
                "bVar1": "isLeftJustified",
                "bVar2": "isSign",
                "bVar3": "isSpace",
                "cVar4": "fillChar",
                "bVar5": "isZeroPad",
                "ppppppppiVar6": "formatSpec",
                "piVar7": "tempInt",
                "iVar8": "result",
                "cVar9": "tempChar",
                "pppppppiVar10": "formatSpecifierPtr",
                "uVar11": "digitValue",
                "ppiVar12": "argPtrPtr",
                "uVar13": "flags",
                "uVar14": "ch",
                "iVar15": "numDigits",
                "pppppppiVar16": "formatPointer",
                "iVar17": "formatIndex",
                "pppppppiVar18": "remainingFormats",
                "piVar19": "argPtr",
                "pppppppiVar20": "formatSpecifier",
                "uVar21": "tempValue",
                "piVar22": "argValue",
                "pppppppiVar23": "remainingFormats",
                "uVar24": "tempValue",
                "ppppppppiVar25": "formatPtr",
                "bVar26": "isNonZeroValue",
                "lVar27": "combinedValue",
                "local_dc": "maximumWidth",
                "local_d4": "minimumWidth",
                "local_c8": "argPtrPtr",
                "local_c4": "result",
                "local_c0": "charPtr",
                "local_a1": "leftJustifyChar",
                "local_a0": "zeroPadChar",
                "local_9f": "hexChar",
                "local_9c": "formatPointer",
                "local_98": "formatIndex",
                "local_94": "remainingFormats",
                "local_90": "fillChar",
                "local_69": "digitChar",
                "local_68": "constantString",
                "local_64": "tempFormatPtr"
            },
            "calling": [
                "FUN_0008378c"
            ],
            "called": [
                "FUN_00083808",
                "FUN_00083b14",
                "FUN_00084750",
                "FUN_00082a50",
                "FUN_00082ac0",
                "FUN_00084384",
                "FUN_0008378c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008378c": {
            "entrypoint": "0x0008378c",
            "current_name": "process_data_0008378c",
            "code": "\nint processData_0008378c(undefined4 param1,int param2)\n\n{\n  int returnValue;\n  int result;\n  undefined *buffer [2];\n  undefined4 bufferSize;\n  ushort flags;\n  undefined2 data;\n  undefined *ptr;\n  undefined4 bufferSize2;\n  undefined4 value;\n  undefined4 ptr2;\n  undefined4 ptr3;\n  undefined4 ptr4;\n  undefined stackBuffer [1024];\n  \n  ptr4 = *(undefined4 *)(param2 + 100);\n  ptr2 = *(undefined4 *)(param2 + 0x1c);\n  data = *(undefined2 *)(param2 + 0xe);\n  ptr3 = *(undefined4 *)(param2 + 0x24);\n  buffer[0] = stackBuffer;\n  flags = *(ushort *)(param2 + 0xc) & 0xfffd;\n  bufferSize = 0x400;\n  bufferSize2 = 0x400;\n  value = 0;\n  ptr = buffer[0];\n  returnValue = FUN_00082b38(param1,buffer);\n  if ((-1 < returnValue) && (result = FUN_00083adc(param1,buffer), result != 0)) {\n    returnValue = -1;\n  }\n  if ((int)((uint)flags << 0x19) < 0) {\n    *(ushort *)(param2 + 0xc) = *(ushort *)(param2 + 0xc) | 0x40;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0008378c": "process_data_0008378c",
                "param_1": "param1",
                "param_2": "param2",
                "local_488": "buffer",
                "local_480": "bufferSize",
                "local_47c": "flags",
                "local_47a": "data",
                "local_478": "ptr",
                "local_474": "bufferSize2",
                "local_470": "value",
                "local_46c": "ptr2",
                "local_464": "ptr3",
                "local_424": "ptr4",
                "auStack_420": "stackBuffer",
                "iVar1": "returnValue",
                "iVar2": "result"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083808": {
            "entrypoint": "0x00083808",
            "current_name": "update_flags_and_return_value_00083808",
            "code": "\nundefined4 updateFlagsAndReturnValue_00083808(undefined4 *output,int *input)\n\n{\n  int value1;\n  int value2;\n  uint temp1;\n  ushort temp2;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  temp2 = *(ushort *)(input + 3);\n  temp1 = (uint)temp2;\n  if ((int)(temp1 << 0x1c) < 0) {\n    value2 = input[4];\n  }\n  else {\n    if (-1 < (int)(temp1 << 0x1b)) {\n      *output = 9;\n      *(ushort *)(input + 3) = temp2 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(temp1 << 0x1d) < 0) {\n      if ((int *)input[0xc] != (int *)0x0) {\n        if ((int *)input[0xc] != input + 0x10) {\n          FUN_00083d9c(output);\n          temp2 = *(ushort *)(input + 3);\n        }\n        input[0xc] = 0;\n      }\n      value2 = input[4];\n      temp2 = temp2 & 0xffdb;\n      *input = value2;\n      input[1] = 0;\n    }\n    else {\n      value2 = input[4];\n    }\n    *(ushort *)(input + 3) = temp2 | 8;\n    temp1 = (uint)(temp2 | 8);\n  }\n  if ((value2 == 0) && ((temp1 & 0x280) != 0x200)) {\n    FUN_000842a4(output,input);\n    temp1 = (uint)*(ushort *)(input + 3);\n    value2 = input[4];\n  }\n  if ((temp1 & 1) == 0) {\n    value1 = 0;\n    if (-1 < (int)(temp1 << 0x1e)) {\n      value1 = input[5];\n    }\n    input[2] = value1;\n  }\n  else {\n    input[6] = -input[5];\n    input[2] = 0;\n  }\n  if ((value2 == 0) && ((int)((uint)*(ushort *)(input + 3) << 0x18) < 0)) {\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083808": "update_flags_and_return_value_00083808",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "value1",
                "iVar2": "value2",
                "uVar3": "temp1",
                "uVar4": "temp2"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_000844c4",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14",
                "FUN_000842a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083974": {
            "entrypoint": "0x00083974",
            "current_name": "identity_00083974",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\nundefined4 identity_00083974(undefined4 input)\n\n{\n  return input;\n}\n\n",
            "renaming": {
                "FUN_00083974": "identity_00083974",
                "param_1": "input"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [
                "FUN_00081df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083adc": {
            "entrypoint": "0x00083adc",
            "current_name": "process_data_00083adc",
            "code": "\nundefined4 processData_00083adc(int *buffer,int *data)\n\n{\n  int *ptr1;\n  int index;\n  ushort flags;\n  uint temp;\n  int count;\n  code *callback;\n  undefined4 result;\n  int temp2;\n  \n  if ((buffer != (int *)0x0) && (buffer[0xe] == 0)) {\n    FUN_00083b14();\n  }\n  if (*(short *)(data + 3) == 0) {\n    return 0;\n  }\n  flags = *(ushort *)(data + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    temp2 = data[4];\n    if (temp2 == 0) {\n      return 0;\n    }\n    index = *data;\n    if ((flags & 3) == 0) {\n      count = data[5];\n    }\n    else {\n      count = 0;\n    }\n    *data = temp2;\n    index = index - temp2;\n    data[2] = count;\n    do {\n      if (index < 1) {\n        return 0;\n      }\n      count = (*(code *)data[9])(buffer,data[7],temp2,index,result);\n      index = index - count;\n      temp2 = temp2 + count;\n    } while (0 < count);\nLAB_00083a54:\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(data + 3) = flags | 0x800;\n  if ((data[1] < 1) && (data[0xf] < 1)) {\n    return 0;\n  }\n  callback = (code *)data[10];\n  if (callback == (code *)0x0) {\n    return 0;\n  }\n  temp = (uint)(flags | 0x800);\n  temp2 = *buffer;\n  *buffer = 0;\n  if ((flags & 0x1000) == 0) {\n    index = (*callback)(buffer,data[7],temp & 0x1000,1);\n    if ((index == -1) && (count = *buffer, count != 0)) {\n      if ((count == 0x1d) || (count == 0x16)) {\n        *buffer = temp2;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    temp = (uint)*(ushort *)(data + 3);\n    callback = (code *)data[10];\n  }\n  else {\n    index = data[0x14];\n  }\n  if (((int)(temp << 0x1d) < 0) && (index = index - data[1], data[0xc] != 0)) {\n    index = index - data[0xf];\n  }\n  index = (*callback)(buffer,data[7],index,0);\n  if (index == -1) {\n    count = *buffer;\n    if (count != 0) {\n      if ((count != 0x1d) && (count != 0x16)) {\n        *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xf7ff;\n      *data = data[4];\n      data[1] = 0;\n      goto LAB_00083a00;\n    }\n    flags = *(ushort *)(data + 3) & 0xf7ff;\n    data[1] = 0;\n    *(ushort *)(data + 3) = flags;\n    *data = data[4];\n  }\n  else {\n    flags = *(ushort *)(data + 3) & 0xf7ff;\n    *data = data[4];\n    *(ushort *)(data + 3) = flags;\n    data[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    data[0x14] = index;\n  }\nLAB_00083a00:\n  ptr1 = (int *)data[0xc];\n  *buffer = temp2;\n  if (ptr1 == (int *)0x0) {\n    return 0;\n  }\n  if (ptr1 != data + 0x10) {\n    FUN_00083d9c(buffer);\n  }\n  data[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083adc": "process_data_00083adc",
                "param_1": "buffer",
                "param_2": "data",
                "piVar1": "ptr1",
                "iVar2": "index",
                "uVar3": "flags",
                "uVar4": "temp",
                "iVar5": "count",
                "pcVar6": "callback",
                "unaff_r4": "result",
                "iVar7": "temp2"
            },
            "calling": [
                "FUN_000846a4",
                "FUN_000844c4",
                "FUN_0008378c",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b14": {
            "entrypoint": "0x00083b14",
            "current_name": "initialize_components_00083b14",
            "code": "\nvoid initializeComponents_00083b14(int component)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if (*(int *)(component + 0x38) == 0) {\n    ptr1 = *(undefined4 **)(component + 4);\n    *(undefined **)(component + 0x3c) = &LAB_00083b08_1;\n    *(undefined4 *)(component + 0x2e4) = 3;\n    *(int *)(component + 0x2e8) = component + 0x2ec;\n    *(undefined4 *)(component + 0x2e0) = 0;\n    *(undefined2 *)(ptr1 + 3) = 4;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    FUN_00082504(ptr1 + 0x17,0,8);\n    ptr2 = *(undefined4 **)(component + 8);\n    ptr1[7] = ptr1;\n    ptr1[8] = &LAB_00084440_1;\n    ptr1[9] = 0x84465;\n    ptr1[10] = 0x8449d;\n    ptr1[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\n    *(undefined2 *)(ptr2 + 3) = 9;\n    *ptr2 = 0;\n    ptr2[1] = 0;\n    ptr2[2] = 0;\n    ptr2[0x19] = 0;\n    ptr2[4] = 0;\n    ptr2[5] = 0;\n    ptr2[6] = 0;\n    FUN_00082504(ptr2 + 0x17,0,8);\n    ptr1 = *(undefined4 **)(component + 0xc);\n    ptr2[7] = ptr2;\n    ptr2[8] = &LAB_00084440_1;\n    ptr2[9] = 0x84465;\n    ptr2[10] = 0x8449d;\n    ptr2[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)(ptr1 + 3) = 0x12;\n    *(undefined2 *)((int)ptr1 + 0xe) = 2;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    FUN_00082504(ptr1 + 0x17,0,8);\n    ptr1[7] = ptr1;\n    ptr1[8] = &LAB_00084440_1;\n    ptr1[9] = 0x84465;\n    ptr1[10] = 0x8449d;\n    ptr1[0xb] = &LAB_000844bc_1;\n    *(undefined4 *)(component + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b14": "initialize_components_00083b14",
                "param_1": "component",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "calling": [
                "FUN_00083808",
                "FUN_000846a4",
                "FUN_00082b38",
                "FUN_00083adc",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083c08": {
            "entrypoint": "0x00083c08",
            "current_name": "FUNC_00083c08",
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c0c": {
            "entrypoint": "0x00083c0c",
            "current_name": "FUNC_00083c0c",
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c40": {
            "entrypoint": "0x00083c40",
            "current_name": "process_input_00083c40",
            "code": "\nuint processInput_00083c40(undefined4 param1,uint param2,byte **param3)\n\n{\n  int value;\n  uint result;\n  uint currentByte;\n  byte *tempByte;\n  uint index;\n  byte byteValue;\n  byte byteArray [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(param3 + 3) << 0x12)) {\n    *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x2000;\n    param3[0x19] = (byte *)((uint)param3[0x19] | 0x2000);\n  }\n  value = FUN_00084298();\n  if ((value == 1) && (param2 - 1 < 0xff)) {\n    currentByte = param2 & 0xff;\n    byteValue = (byte)currentByte;\n    result = 1;\n  }\n  else {\n    result = FUN_0008456c(param1,&byteValue,param2,param3 + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return param2;\n    }\n    currentByte = (uint)byteValue;\n  }\n  index = 0;\n  do {\n    tempByte = param3[2] + -1;\n    param3[2] = tempByte;\n    if ((int)tempByte < 0) {\n      if ((int)param3[6] <= (int)tempByte) {\n        **param3 = (byte)currentByte;\n        tempByte = *param3;\n        currentByte = (uint)*tempByte;\n        if (currentByte != 10) goto LAB_00083c90;\n      }\n      value = FUN_000844c4(param1,currentByte,param3);\n      if (value == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **param3 = (byte)currentByte;\n      tempByte = *param3;\nLAB_00083c90:\n      *param3 = tempByte + 1;\n    }\n    if (result <= index + 1) {\n      return param2;\n    }\n    currentByte = (uint)byteArray[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00083c40": "process_input_00083c40",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "value",
                "uVar2": "result",
                "uVar3": "currentByte",
                "pbVar4": "tempByte",
                "uVar5": "index",
                "local_1c": "byteValue",
                "abStack_1b": "byteArray"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_000844c4",
                "FUN_00084298",
                "FUN_0008456c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d00": {
            "entrypoint": "0x00083d00",
            "current_name": "relocate_function_00083d00",
            "code": "\nundefined4 relocateFunction_00083d00(undefined4 context,int offset)\n\n{\n  int result;\n  uint firstRelInfo;\n  int newOffset;\n  \n  FUNC_00082598();\n  firstRelInfo = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  newOffset = ((firstRelInfo - offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < newOffset) {\n    result = FUN_00082970(context,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + firstRelInfo) {\n      result = FUN_00082970(context,-newOffset);\n      if (result != -1) {\n        DAT_20071194 = DAT_20071194 - newOffset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = firstRelInfo - newOffset | 1;\n        FUNC_0008259c(context);\n        return 1;\n      }\n      newOffset = FUN_00082970(context,0);\n      if (0xf < (int)(newOffset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_20071194 = newOffset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             newOffset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_0008259c(context);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083d00": "relocate_function_00083d00",
                "param_1": "context",
                "param_2": "offset",
                "iVar1": "result",
                "uVar2": "firstRelInfo",
                "iVar3": "newOffset"
            },
            "calling": [
                "FUN_00083d9c"
            ],
            "called": [
                "FUN_00082970",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "entrypoint": "0x00083d9c",
            "current_name": "process_relocations_00083d9c",
            "code": "\nvoid processRelocations_00083d9c(undefined4 param1,int param2)\n\n{\n  int index1;\n  bool isSpecialCase;\n  uint flags;\n  dword currentReloc;\n  int index2;\n  uint offset;\n  dword previousReloc;\n  uint newOffset;\n  dword newCurrentReloc;\n  \n  if (param2 == 0) {\n    return;\n  }\n  FUNC_00082598();\n  flags = *(uint *)(param2 + -4);\n  previousReloc = param2 - 8;\n  offset = flags & 0xfffffffe;\n  currentReloc = previousReloc + offset;\n  newOffset = *(uint *)(currentReloc + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == currentReloc) {\n    newOffset = newOffset + offset;\n    if (-1 < (int)(flags << 0x1f)) {\n      previousReloc = previousReloc - *(int *)(param2 + -8);\n      index2 = *(int *)(previousReloc + 0xc);\n      index1 = *(int *)(previousReloc + 8);\n      newOffset = newOffset + *(int *)(param2 + -8);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    currentReloc = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(previousReloc + 4) = newOffset | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = previousReloc;\n    if (currentReloc <= newOffset) {\n      FUN_00083d00(param1,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(currentReloc + 4) = newOffset;\n    if ((flags & 1) == 0) {\n      previousReloc = previousReloc - *(int *)(param2 + -8);\n      index1 = *(int *)(previousReloc + 8);\n      offset = offset + *(int *)(param2 + -8);\n      if (index1 == 0x2007046c) {\n        isSpecialCase = true;\n      }\n      else {\n        index2 = *(int *)(previousReloc + 0xc);\n        *(int *)(index1 + 0xc) = index2;\n        *(int *)(index2 + 8) = index1;\n        isSpecialCase = false;\n      }\n    }\n    else {\n      isSpecialCase = false;\n    }\n    if (-1 < *(int *)(currentReloc + newOffset + 4) << 0x1f) {\n      offset = offset + newOffset;\n      index1 = *(int *)(currentReloc + 8);\n      if ((!isSpecialCase) && (index1 == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = previousReloc;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = previousReloc;\n        *(undefined4 *)(previousReloc + 0xc) = 0x2007046c;\n        *(undefined4 *)(previousReloc + 8) = 0x2007046c;\n        *(uint *)(previousReloc + 4) = offset | 1;\n        *(uint *)(previousReloc + offset) = offset;\n        goto LAB_00083e30;\n      }\n      index2 = *(int *)(currentReloc + 0xc);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    *(uint *)(previousReloc + 4) = offset | 1;\n    *(uint *)(previousReloc + offset) = offset;\n    if (!isSpecialCase) {\n      if (offset < 0x200) {\n        flags = offset & 0xfffffff8;\n        index1 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + flags);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(offset >> 3) >> 2 & 0xffU);\n        *(int *)(previousReloc + 8) = index1;\n        *(uint *)(previousReloc + 0xc) = flags + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + flags) = previousReloc;\n        *(dword *)(index1 + 0xc) = previousReloc;\n        FUNC_0008259c(param1);\n        return;\n      }\n      flags = offset >> 9;\n      if (flags < 5) {\n        index1 = (offset >> 6) + 0x38;\n        index2 = index1 * 2;\n      }\n      else if (flags < 0x15) {\n        index1 = flags + 0x5b;\n        index2 = index1 * 2;\n      }\n      else if (flags < 0x55) {\n        index1 = (offset >> 0xc) + 0x6e;\n        index2 = index1 * 2;\n      }\n      else if (flags < 0x155) {\n        index1 = (offset >> 0xf) + 0x77;\n        index2 = index1 * 2;\n      }\n      else if (flags < 0x555) {\n        index1 = (offset >> 0x12) + 0x7c;\n        index2 = index1 * 2;\n      }\n      else {\n        index2 = 0xfc;\n        index1 = 0x7e;\n      }\n      newCurrentReloc = index2 * 4 + 0x20070464;\n      currentReloc = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[index2];\n      if (currentReloc == newCurrentReloc) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (index1 >> 2 & 0xffU);\n        newCurrentReloc = currentReloc;\n      }\n      else {\n        do {\n          if ((*(uint *)(currentReloc + 4) & 0xfffffffc) <= offset) break;\n          currentReloc = *(dword *)(currentReloc + 8);\n        } while (newCurrentReloc != currentReloc);\n        newCurrentReloc = *(dword *)(currentReloc + 0xc);\n      }\n      *(dword *)(previousReloc + 0xc) = newCurrentReloc;\n      *(dword *)(previousReloc + 8) = currentReloc;\n      *(dword *)(newCurrentReloc + 8) = previousReloc;\n      *(dword *)(currentReloc + 0xc) = previousReloc;\n    }\n  }\nLAB_00083e30:\n  FUNC_0008259c(param1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083d9c": "process_relocations_00083d9c",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "index1",
                "bVar2": "isSpecialCase",
                "uVar3": "flags",
                "dVar4": "currentReloc",
                "iVar5": "index2",
                "uVar6": "offset",
                "dVar7": "previousReloc",
                "uVar8": "newOffset",
                "dVar9": "newCurrentReloc"
            },
            "calling": [
                "FUN_00083808",
                "FUN_00081e04",
                "FUN_000846a4",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083adc",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d00",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083f34": {
            "entrypoint": "0x00083f34",
            "current_name": "process_data_00083f34",
            "code": "\nundefined4 processData_00083f34(undefined4 *output,uint *inputData,uint **buffer)\n\n{\n  int returnValue;\n  uint tempVar1;\n  uint tempVar2;\n  ushort flag;\n  uint uVar5;\n  uint *pointer1;\n  uint *pointer2;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint localVar;\n  \n  if (buffer[2] != (uint *)0x0) {\n    flag = *(ushort *)(inputData + 3);\n    uVar5 = (uint)flag;\n    if (((int)(uVar5 << 0x1c) < 0) && (inputData[4] != 0)) {\n      pointer2 = *buffer;\n    }\n    else {\n      returnValue = FUN_00083808(output,inputData);\n      if (returnValue != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(inputData + 3);\n      uVar5 = (uint)flag;\n      pointer2 = *buffer;\n    }\n    if ((flag & 2) == 0) {\n      tempVar1 = uVar5 & 2;\n      uVar10 = tempVar1;\n      uVar8 = tempVar1;\n      localVar = tempVar1;\n      if ((uVar5 & 1) == 0) {\n        tempVar1 = 0;\n        uVar10 = 0;\n        while( true ) {\n          while (tempVar1 == 0) {\n            uVar10 = *pointer2;\n            pointer1 = pointer2 + 1;\n            pointer2 = pointer2 + 2;\n            tempVar1 = *pointer1;\n          }\n          uVar8 = inputData[2];\n          if ((int)(uVar5 << 0x16) < 0) {\n            if (tempVar1 < uVar8) {\n              uVar5 = *inputData;\n              uVar8 = tempVar1;\n            }\n            else if ((uVar5 & 0x480) == 0) {\n              uVar5 = *inputData;\n            }\n            else {\n              returnValue = *inputData - inputData[4];\n              uVar8 = returnValue + 1 + tempVar1;\n              uVar9 = (int)(inputData[5] * 3) / 2;\n              if (uVar8 <= uVar9) {\n                uVar8 = uVar9;\n              }\n              if ((int)(uVar5 << 0x15) < 0) {\n                uVar9 = FUN_00081e14(output,uVar8);\n                if (uVar9 == 0) {\n                  *output = 0xc;\n                  flag = *(ushort *)(inputData + 3);\n                  goto LAB_00084030;\n                }\n                FUN_0008234c(uVar9,inputData[4],returnValue);\n                *(ushort *)(inputData + 3) = *(ushort *)(inputData + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                uVar9 = FUN_000825b0(output);\n                if (uVar9 == 0) {\n                  FUN_00083d9c(output,inputData[4]);\n                  flag = *(ushort *)(inputData + 3) & 0xff7f;\n                  *output = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              uVar5 = uVar9 + returnValue;\n              inputData[4] = uVar9;\n              inputData[5] = uVar8;\n              *inputData = uVar5;\n              inputData[2] = uVar8 - returnValue;\n              uVar8 = tempVar1;\n            }\n            FUN_00082438(uVar5,uVar10,uVar8);\n            inputData[2] = inputData[2] - uVar8;\n            *inputData = *inputData + uVar8;\n            uVar8 = tempVar1;\n          }\n          else if ((inputData[4] < *inputData) || (uVar5 = inputData[5], tempVar1 < uVar5)) {\n            if (tempVar1 < uVar8) {\n              uVar8 = tempVar1;\n            }\n            FUN_00082438(*inputData,uVar10,uVar8);\n            uVar5 = inputData[2];\n            inputData[2] = uVar5 - uVar8;\n            *inputData = *inputData + uVar8;\n            if ((uVar5 - uVar8 == 0) && (returnValue = FUN_00083adc(output,inputData), returnValue != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            uVar8 = 0x7fffffff;\n            if (tempVar1 < 0x7fffffff) {\n              uVar8 = tempVar1;\n            }\n            uVar8 = (*(code *)inputData[9])(output,inputData[7],uVar10,(uVar8 / uVar5) * uVar5);\n            if ((int)uVar8 < 1) goto LAB_0008402e;\n          }\n          pointer1 = buffer[2];\n          uVar10 = uVar10 + uVar8;\n          tempVar1 = tempVar1 - uVar8;\n          buffer[2] = (uint *)((int)pointer1 - uVar8);\n          if ((uint *)((int)pointer1 - uVar8) == (uint *)0x0) break;\n          uVar5 = (uint)*(ushort *)(inputData + 3);\n        }\n      }\n      else {\n        do {\n          while (tempVar1 == 0) {\n            uVar8 = *pointer2;\n            tempVar1 = pointer2[1];\n            localVar = 0;\n            pointer2 = pointer2 + 2;\n          }\n          if (localVar == 0) {\n            returnValue = FUN_00084384(uVar8,10,tempVar1);\n            if (returnValue == 0) {\n              uVar10 = tempVar1 + 1;\n              localVar = 1;\n            }\n            else {\n              uVar10 = (returnValue + 1) - uVar8;\n              localVar = 1;\n            }\n          }\n          uVar9 = *inputData;\n          uVar5 = uVar10;\n          if (tempVar1 <= uVar10) {\n            uVar5 = tempVar1;\n          }\n          tempVar2 = inputData[5];\n          if ((inputData[4] < uVar9) && (uVar11 = inputData[2] + tempVar2, (int)uVar11 < (int)uVar5)) {\n            FUN_00082438(uVar9,uVar8,uVar11);\n            *inputData = *inputData + uVar11;\n            returnValue = FUN_00083adc(output,inputData);\n            if (returnValue != 0) goto LAB_0008402e;\n          }\n          else if ((int)uVar5 < (int)tempVar2) {\n            FUN_00082438(uVar9,uVar8,uVar5);\n            inputData[2] = inputData[2] - uVar5;\n            *inputData = uVar5 + *inputData;\n            uVar11 = uVar5;\n          }\n          else {\n            uVar11 = (*(code *)inputData[9])(output,inputData[7],uVar8,tempVar2);\n            if ((int)uVar11 < 1) goto LAB_0008402e;\n          }\n          uVar10 = uVar10 - uVar11;\n          if (uVar10 == 0) {\n            returnValue = FUN_00083adc(output,inputData);\n            if (returnValue != 0) goto LAB_0008402e;\n            localVar = 0;\n          }\n          pointer1 = buffer[2];\n          uVar8 = uVar8 + uVar11;\n          tempVar1 = tempVar1 - uVar11;\n          buffer[2] = (uint *)((int)pointer1 - uVar11);\n        } while ((uint *)((int)pointer1 - uVar11) != (uint *)0x0);\n      }\n    }\n    else {\n      tempVar1 = 0;\n      uVar5 = 0;\n      do {\n        while( true ) {\n          uVar10 = uVar5;\n          if (0x7ffffbff < uVar5) {\n            uVar10 = 0x7ffffc00;\n          }\n          if (uVar5 != 0) break;\n          tempVar1 = *pointer2;\n          uVar5 = pointer2[1];\n          pointer2 = pointer2 + 2;\n        }\n        returnValue = (*(code *)inputData[9])(output,inputData[7],tempVar1,uVar10);\n        if (returnValue < 1) {\nLAB_0008402e:\n          flag = *(ushort *)(inputData + 3);\nLAB_00084030:\n          *(ushort *)(inputData + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        pointer1 = buffer[2];\n        tempVar1 = tempVar1 + returnValue;\n        uVar5 = uVar5 - returnValue;\n        buffer[2] = (uint *)((int)pointer1 - returnValue);\n      } while ((uint *)((int)pointer1 - returnValue) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083f34": "process_data_00083f34",
                "param_1": "output",
                "param_2": "inputData",
                "param_3": "buffer",
                "iVar1": "returnValue",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "flag",
                "puVar6": "pointer1",
                "puVar7": "pointer2",
                "local_2c": "localVar"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008234c",
                "FUN_00083808",
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_00081e14",
                "FUN_00083adc",
                "FUN_00082438",
                "FUN_00084384"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084290": {
            "entrypoint": "0x00084290",
            "current_name": "get_memory_address_00084290",
            "code": "\nundefined4 getMemoryAddress_00084290(void)\n\n{\n  return 0x20070874;\n}\n\n",
            "renaming": {
                "FUN_00084290": "get_memory_address_00084290"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084298": {
            "entrypoint": "0x00084298",
            "current_name": "get_relocation_info_00084298",
            "code": "\ndword getRelocationInfo_00084298(void)\n\n{\n  return relocationArray[274].r_info;\n}\n\n",
            "renaming": {
                "FUN_00084298": "get_relocation_info_00084298",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_data_000842a4",
            "code": "\nvoid processData_000842a4(int data,int *output)\n\n{\n  ushort flag;\n  int result;\n  int errorCode;\n  uint temp;\n  bool isConditionMet;\n  undefined stackData [4];\n  uint localData;\n  \n  flag = *(ushort *)(output + 3);\n  temp = (uint)flag;\n  if ((int)(temp << 0x1e) < 0) {\n    *output = (int)output + 0x43;\n    output[4] = (int)output + 0x43;\n    output[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)output + 0xe)) {\n    result = FUN_000846b4(data,(int)*(short *)((int)output + 0xe),stackData);\n    if (-1 < result) {\n      isConditionMet = (localData & 0xf000) == 0x2000;\n      if (((localData & 0xf000) == 0x8000) && (output[10] == 0x8449d)) {\n        result = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x400;\n        output[0x13] = 0x400;\n      }\n      else {\n        result = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    flag = *(ushort *)(output + 3);\n    temp = (uint)flag;\n  }\n  *(ushort *)(output + 3) = flag | 0x800;\n  if ((temp & 0x80) == 0) {\n    result = 0x400;\n  }\n  else {\n    result = 0x40;\n  }\n  isConditionMet = false;\nLAB_00084300:\n  errorCode = FUN_00081e14(data,result);\n  flag = *(ushort *)(output + 3);\n  if (errorCode == 0) {\n    if (-1 < (int)((uint)flag << 0x16)) {\n      *(ushort *)(output + 3) = flag | 2;\n      *output = (int)output + 0x43;\n      output[4] = (int)output + 0x43;\n      output[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(data + 0x3c) = &LAB_00083b08_1;\n    *(ushort *)(output + 3) = flag | 0x80;\n    *output = errorCode;\n    output[4] = errorCode;\n    output[5] = result;\n    if ((isConditionMet) && (result = FUN_000846dc(data,(int)*(short *)((int)output + 0xe)), result != 0))\n    {\n      *(ushort *)(output + 3) = *(ushort *)(output + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "param_1": "data",
                "param_2": "output",
                "uVar1": "flag",
                "iVar2": "result",
                "iVar3": "errorCode",
                "uVar4": "temp",
                "bVar5": "isConditionMet",
                "auStack_54": "stackData",
                "local_50": "localData"
            },
            "calling": [
                "FUN_00083808"
            ],
            "called": [
                "FUN_000846dc",
                "FUN_000846b4",
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084384": {
            "entrypoint": "0x00084384",
            "current_name": "find_first_occurrence_00084384",
            "code": "\nuint * find_first_occurrence_00084384(uint *input_array,char target_value,uint length)\n\n{\n  uint temp;\n  int index;\n  uint *ptr;\n  bool is_last_index;\n  \n  if (((uint)input_array & 3) == 0) {\nLAB_000843b4:\n    if (3 < length) {\n      ptr = input_array;\n      do {\n        temp = *ptr ^ CONCAT22(CONCAT11(target_value,target_value),CONCAT11(target_value,target_value));\n        input_array = ptr;\n        if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) break;\n        length = length - 4;\n        input_array = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      input_array = (uint *)0x0;\n    }\n    else if (*(char *)input_array != target_value) {\n      index = 0;\n      do {\n        input_array = (uint *)((int)input_array + 1);\n        is_last_index = index == length - 1;\n        index = index + 1;\n        if (is_last_index) goto LAB_000843dc;\n      } while (*(char *)input_array != target_value);\n    }\n  }\n  else if (length == 0) {\nLAB_000843dc:\n    input_array = (uint *)0x0;\n  }\n  else if (*(char *)input_array != target_value) {\n    ptr = (uint *)((int)input_array + 1);\n    length = length - 1;\n    do {\n      input_array = ptr;\n      if (((uint)input_array & 3) == 0) goto LAB_000843b4;\n      if (length == 0) goto LAB_000843dc;\n      ptr = (uint *)((int)input_array + 1);\n      length = length - 1;\n    } while (*(char *)input_array != target_value);\n  }\n  return input_array;\n}\n\n",
            "renaming": {
                "FUN_00084384": "find_first_occurrence_00084384",
                "param_1": "input_array",
                "param_2": "target_value",
                "param_3": "length",
                "uVar1": "temp",
                "iVar2": "index",
                "puVar3": "ptr",
                "bVar4": "is_last_index"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084464": {
            "entrypoint": "0x00084464",
            "current_name": "process_data_00084464",
            "code": "\nvoid processData_00084464(int *output,int input,undefined4 value1,undefined4 value2)\n\n{\n  int result;\n  ushort value;\n  undefined4 unknown1;\n  undefined4 unknown2;\n  undefined4 unknown3;\n  undefined4 unknown4;\n  \n  value = *(ushort *)(input + 0xc);\n  if ((int)((uint)value << 0x17) < 0) {\n    FUN_00084700(output,(int)*(short *)(input + 0xe),0,2);\n    value = *(ushort *)(input + 0xc);\n  }\n  *(ushort *)(input + 0xc) = value & 0xefff;\n  DAT_200711bc = 0;\n  result = FUN_000811cc((int)*(short *)(input + 0xe),value1,value2,value2,unknown1,unknown2,\n                       unknown3,unknown4);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084464": "process_data_00084464",
                "param_1": "output",
                "param_2": "input",
                "param_3": "value1",
                "param_4": "value2",
                "iVar1": "result",
                "uVar2": "value",
                "unaff_r4": "unknown1",
                "unaff_r5": "unknown2",
                "unaff_r6": "unknown3",
                "in_lr": "unknown4"
            },
            "calling": [],
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008449c": {
            "entrypoint": "0x0008449c",
            "current_name": "update_status_0008449c",
            "code": "\nvoid updateStatus_0008449c(undefined4 arg1,int arg2)\n\n{\n  int result;\n  ushort status;\n  \n  result = FUN_00084700(arg1,(int)*(short *)(arg2 + 0xe));\n  if (result == -1) {\n    status = *(ushort *)(arg2 + 0xc) & 0xefff;\n  }\n  else {\n    status = *(ushort *)(arg2 + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(arg2 + 0x50) = result;\n  }\n  *(ushort *)(arg2 + 0xc) = status;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008449c": "update_status_0008449c",
                "param_1": "arg1",
                "param_2": "arg2",
                "iVar1": "result",
                "uVar2": "status"
            },
            "calling": [],
            "called": [
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844c4": {
            "entrypoint": "0x000844c4",
            "current_name": "process_data_000844c4",
            "code": "\nuint processData_000844c4(int input,uint value,undefined4 *data,undefined4 param)\n\n{\n  ushort value1;\n  uint value2;\n  undefined *pointer;\n  int index;\n  \n  if ((input != 0) && (*(int *)(input + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  value1 = *(ushort *)(data + 3);\n  value2 = (uint)value1;\n  data[2] = data[6];\n  if ((-1 < (int)(value2 << 0x1c)) || (index = data[4], index == 0)) {\n    index = FUN_00083808(input,data,value1,value2,param);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    value1 = *(ushort *)(data + 3);\n    index = data[4];\n    value2 = (uint)value1;\n  }\n  value = value & 0xff;\n  if ((int)(value2 << 0x12) < 0) {\n    pointer = (undefined *)*data;\n    index = (int)pointer - index;\n    if (index < (int)data[5]) {\nLAB_000844f6:\n      index = index + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    data[0x19] = data[0x19] & 0xffffdfff;\n    pointer = (undefined *)*data;\n    *(ushort *)(data + 3) = value1 | 0x2000;\n    index = (int)pointer - index;\n    if (index < (int)data[5]) goto LAB_000844f6;\n  }\n  index = FUN_00083adc(input,data);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  pointer = (undefined *)*data;\n  index = 1;\nLAB_000844f8:\n  data[2] = data[2] + -1;\n  *data = pointer + 1;\n  *pointer = (char)value;\n  if (((data[5] == index) ||\n      (((int)((uint)*(ushort *)(data + 3) << 0x1f) < 0 && (value == 10)))) &&\n     (index = FUN_00083adc(input,data), index != 0)) {\n    return 0xffffffff;\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_000844c4": "process_data_000844c4",
                "param_1": "input",
                "param_2": "value",
                "param_3": "data",
                "param_4": "param",
                "uVar1": "value1",
                "uVar2": "value2",
                "puVar3": "pointer",
                "iVar4": "index"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00083808",
                "FUN_00083b14",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008456c": {
            "entrypoint": "0x0008456c",
            "current_name": "process_data_0008456c",
            "code": "\nvoid processData_0008456c(undefined4 *outputBuffer,int size,undefined4 constantValue,undefined4 *returnValue)\n\n{\n  code *functionPointer;\n  undefined4 tempValue;\n  int result;\n  undefined temporaryStack [12];\n  \n  functionPointer = DAT_20070898;\n  if (size == 0) {\n    tempValue = FUN_00084290();\n    result = (*functionPointer)(outputBuffer,temporaryStack,0,tempValue,returnValue);\n  }\n  else {\n    tempValue = FUN_00084290();\n    result = (*functionPointer)(outputBuffer,size,constantValue,tempValue,returnValue);\n  }\n  if (result == -1) {\n    *returnValue = 0;\n    *outputBuffer = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008456c": "process_data_0008456c",
                "param_1": "outputBuffer",
                "param_2": "size",
                "param_3": "constantValue",
                "param_4": "returnValue",
                "pcVar1": "functionPointer",
                "uVar2": "tempValue",
                "iVar3": "result",
                "auStack_24": "temporaryStack"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00084290",
                "FUN_000845bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "copy_byte_to_pointer_000845bc",
            "code": "\nundefined4 copy_byte_to_pointer_000845bc(undefined4 *destination,undefined *source,uint value_to_copy)\n\n{\n  if (source == (undefined *)0x0) {\n    return 0;\n  }\n  if (value_to_copy < 0x100) {\n    *source = (char)value_to_copy;\n    return 1;\n  }\n  *destination = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "copy_byte_to_pointer_000845bc",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "value_to_copy"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846a4": {
            "entrypoint": "0x000846a4",
            "current_name": "process_param_000846a4",
            "code": "\nundefined4 processParam_000846a4(int param)\n\n{\n  dword offset;\n  undefined4 result;\n  int returnValue;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (param != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      FUN_00083b14();\n    }\n    if (*(short *)(param + 0xc) != 0) {\n      result = FUN_00083adc(offset,param);\n      if ((*(code **)(param + 0x2c) != (code *)0x0) &&\n         (returnValue = (**(code **)(param + 0x2c))(offset,*(undefined4 *)(param + 0x1c)), returnValue < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(param + 0xc) << 0x18) < 0) {\n        FUN_00083d9c(offset,*(undefined4 *)(param + 0x10));\n      }\n      if (*(int *)(param + 0x30) != 0) {\n        if (*(int *)(param + 0x30) != param + 0x40) {\n          FUN_00083d9c(offset);\n        }\n        *(undefined4 *)(param + 0x30) = 0;\n      }\n      if (*(int *)(param + 0x44) != 0) {\n        FUN_00083d9c(offset);\n        *(undefined4 *)(param + 0x44) = 0;\n      }\n      FUNC_00083c08();\n      *(undefined2 *)(param + 0xc) = 0;\n      FUNC_00083c0c();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000846a4": "process_param_000846a4",
                "param_1": "param",
                "dVar1": "offset",
                "uVar2": "result",
                "iVar3": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14",
                "FUN_00083adc",
                "FUN_00083c08",
                "FUN_00083c0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846b4": {
            "entrypoint": "0x000846b4",
            "current_name": "check_and_assign_value_000846b4",
            "code": "\nvoid checkAndAssignValue_000846b4(int *result,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int returnValue;\n  \n  DAT_200711bc = 0;\n  returnValue = FUN_000811b4(input1,input2,input2,0,input3);\n  if ((returnValue == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846b4": "check_and_assign_value_000846b4",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846dc": {
            "entrypoint": "0x000846dc",
            "current_name": "find_error_code_000846dc",
            "code": "\nvoid findErrorCode_000846dc(int *errorPtr,undefined4 errorCode)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_000811be(errorCode);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *errorPtr = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846dc": "find_error_code_000846dc",
                "param_1": "errorPtr",
                "param_2": "errorCode",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084700": {
            "entrypoint": "0x00084700",
            "current_name": "check_and_assign_error_code_00084700",
            "code": "\nvoid checkAndAssignErrorCode_00084700(int *output,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_000811c2(input1,input2,input3);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084700": "check_and_assign_error_code_00084700",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00084464",
                "FUN_0008449c"
            ],
            "called": [
                "FUN_000811c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084728": {
            "entrypoint": "0x00084728",
            "current_name": "process_result_00084728",
            "code": "\nvoid processResult_00084728(int *resultPointer,undefined4 paramA,undefined4 paramB,undefined4 paramC)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_000811c6(paramA,paramB,paramC);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *resultPointer = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084728": "process_result_00084728",
                "param_1": "resultPointer",
                "param_2": "paramA",
                "param_3": "paramB",
                "param_4": "paramC",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000811c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084750": {
            "entrypoint": "0x00084750",
            "current_name": "process_input_00084750",
            "code": "\nint processInput_00084750(int inputParam1,int inputParam2,int inputParam3,int inputParam4)\n\n{\n  int result;\n  \n  if ((inputParam4 == 0) && (inputParam3 == 0)) {\n    if (inputParam2 != 0 || inputParam1 != 0) {\n      inputParam1 = -1;\n    }\n    return inputParam1;\n  }\n  result = FUN_000847ac();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084750": "process_input_00084750",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_000847ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008477c": {
            "entrypoint": "0x0008477c",
            "current_name": "FUNC_0008477c",
            "code": "\nvoid FUNC_0008477c(uint param_1,int param_2,undefined4 param_3,undefined4 param_4,int *param_5)\n\n{\n  uint uVar1;\n  longlong lVar2;\n  \n  lVar2 = FUN_000847e0();\n  lVar2 = lVar2 * CONCAT44(param_4,param_3);\n  uVar1 = (uint)lVar2;\n  *param_5 = param_1 - uVar1;\n  param_5[1] = (param_2 - (int)((ulonglong)lVar2 >> 0x20)) - (uint)(param_1 < uVar1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008477c": "FUNC_0008477c"
            },
            "calling": [],
            "called": [
                "FUN_000847e0"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000847ac": {
            "entrypoint": "0x000847ac",
            "current_name": "calculate_difference_000847ac",
            "code": "\nvoid calculateDifference_000847ac(uint inputValue,int secondInput,undefined4 constant1,undefined4 constant2,int *resultArray)\n\n{\n  uint calculatedValue;\n  longlong product;\n  \n  product = FUN_00084a80();\n  product = product * CONCAT44(constant2,constant1);\n  calculatedValue = (uint)product;\n  *resultArray = inputValue - calculatedValue;\n  resultArray[1] = (secondInput - (int)((ulonglong)product >> 0x20)) - (uint)(inputValue < calculatedValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847ac": "calculate_difference_000847ac",
                "param_1": "inputValue",
                "param_2": "secondInput",
                "param_3": "constant1",
                "param_4": "constant2",
                "param_5": "resultArray",
                "uVar1": "calculatedValue",
                "lVar2": "product"
            },
            "calling": [
                "FUN_00084750"
            ],
            "called": [
                "FUN_00084a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847e0": {
            "entrypoint": "0x000847e0",
            "current_name": "divide_unsigned_integers_000847e0",
            "code": "\nundefined8 divideUnsignedIntegers_000847e0(uint dividend,uint dividendUpper32,uint divisorLower16,uint divisorUpper16)\n\n{\n  longlong product;\n  uint quotientLower32;\n  uint quotientUpper32;\n  uint shiftCount;\n  uint remainderLower32;\n  int bitLength;\n  uint divisorQuotient;\n  uint divisorRemainder;\n  uint isDivisorNegative;\n  uint divisorQuotient2;\n  uint divisorRemainder2;\n  uint temp7;\n  bool carryFlag;\n  \n  if ((int)dividendUpper32 < 0) {\n    carryFlag = dividend != 0;\n    dividend = -dividend;\n    dividendUpper32 = -dividendUpper32 - (uint)carryFlag;\n    isDivisorNegative = 0xffffffff;\n  }\n  else {\n    isDivisorNegative = 0;\n  }\n  if ((int)divisorUpper16 < 0) {\n    isDivisorNegative = ~isDivisorNegative;\n    carryFlag = divisorLower16 != 0;\n    divisorLower16 = -divisorLower16;\n    divisorUpper16 = -divisorUpper16 - (uint)carryFlag;\n  }\n  if (divisorUpper16 == 0) {\n    if (dividendUpper32 < divisorLower16) {\n      bitLength = LZCOUNT(divisorLower16);\n      if (bitLength != 0) {\n        quotientUpper32 = dividend >> (0x20U - bitLength & 0xff);\n        divisorLower16 = divisorLower16 << bitLength;\n        dividend = dividend << bitLength;\n        dividendUpper32 = dividendUpper32 << bitLength | quotientUpper32;\n      }\n      quotientLower32 = divisorLower16 >> 0x10;\n      shiftCount = dividendUpper32 / quotientLower32;\n      divisorQuotient = (divisorLower16 & 0xffff) * shiftCount;\n      divisorQuotient2 = dividend >> 0x10 | (dividendUpper32 - quotientLower32 * shiftCount) * 0x10000;\n      quotientUpper32 = shiftCount;\n      if (divisorQuotient2 <= divisorQuotient && divisorQuotient - divisorQuotient2 != 0) {\n        carryFlag = CARRY4(divisorQuotient2,divisorLower16);\n        divisorQuotient2 = divisorQuotient2 + divisorLower16;\n        quotientUpper32 = shiftCount - 1;\n        if ((carryFlag == false) && (divisorQuotient2 <= divisorQuotient && divisorQuotient - divisorQuotient2 != 0)) {\n          quotientUpper32 = shiftCount - 2;\n          divisorQuotient2 = divisorQuotient2 + divisorLower16;\n        }\n      }\n      divisorRemainder = (divisorQuotient2 - divisorQuotient) / quotientLower32;\n      shiftCount = (divisorLower16 & 0xffff) * divisorRemainder;\n      divisorQuotient = dividend & 0xffff | ((divisorQuotient2 - divisorQuotient) - quotientLower32 * divisorRemainder) * 0x10000;\n      quotientLower32 = divisorRemainder;\n      if (divisorQuotient <= shiftCount && shiftCount - divisorQuotient != 0) {\n        quotientLower32 = divisorRemainder - 1;\n        if ((CARRY4(divisorQuotient,divisorLower16) == false) &&\n           (divisorQuotient + divisorLower16 <= shiftCount && shiftCount - (divisorQuotient + divisorLower16) != 0)) {\n          quotientLower32 = divisorRemainder - 2;\n        }\n      }\n      quotientLower32 = quotientLower32 | quotientUpper32 << 0x10;\n      quotientUpper32 = 0;\n    }\n    else {\n      if (divisorLower16 == 0) {\n        divisorLower16 = 1 / 0;\n      }\n      bitLength = LZCOUNT(divisorLower16);\n      if (bitLength == 0) {\n        dividendUpper32 = dividendUpper32 - divisorLower16;\n        shiftCount = divisorLower16 >> 0x10;\n        temp7 = divisorLower16 & 0xffff;\n        quotientUpper32 = 1;\n      }\n      else {\n        divisorLower16 = divisorLower16 << bitLength;\n        quotientUpper32 = dividendUpper32 >> (0x20U - bitLength & 0xff);\n        shiftCount = divisorLower16 >> 0x10;\n        divisorQuotient2 = quotientUpper32 / shiftCount;\n        temp7 = divisorLower16 & 0xffff;\n        divisorQuotient = temp7 * divisorQuotient2;\n        divisorRemainder = dividend >> (0x20U - bitLength & 0xff) | dividendUpper32 << bitLength;\n        quotientUpper32 = divisorRemainder >> 0x10 | (quotientUpper32 - shiftCount * divisorQuotient2) * 0x10000;\n        dividend = dividend << bitLength;\n        quotientLower32 = divisorQuotient2;\n        if (quotientUpper32 <= divisorQuotient && divisorQuotient - quotientUpper32 != 0) {\n          carryFlag = CARRY4(quotientUpper32,divisorLower16);\n          quotientUpper32 = quotientUpper32 + divisorLower16;\n          quotientLower32 = divisorQuotient2 - 1;\n          if ((carryFlag == false) && (quotientUpper32 <= divisorQuotient && divisorQuotient - quotientUpper32 != 0)) {\n            quotientLower32 = divisorQuotient2 - 2;\n            quotientUpper32 = quotientUpper32 + divisorLower16;\n          }\n        }\n        remainderLower32 = (quotientUpper32 - divisorQuotient) / shiftCount;\n        divisorQuotient2 = temp7 * remainderLower32;\n        dividendUpper32 = divisorRemainder & 0xffff | ((quotientUpper32 - divisorQuotient) - shiftCount * remainderLower32) * 0x10000;\n        quotientUpper32 = remainderLower32;\n        if (dividendUpper32 <= divisorQuotient2 && divisorQuotient2 - dividendUpper32 != 0) {\n          carryFlag = CARRY4(dividendUpper32,divisorLower16);\n          dividendUpper32 = dividendUpper32 + divisorLower16;\n          quotientUpper32 = remainderLower32 - 1;\n          if ((carryFlag == false) && (dividendUpper32 <= divisorQuotient2 && divisorQuotient2 - dividendUpper32 != 0)) {\n            quotientUpper32 = remainderLower32 - 2;\n            dividendUpper32 = dividendUpper32 + divisorLower16;\n          }\n        }\n        dividendUpper32 = dividendUpper32 - divisorQuotient2;\n        quotientUpper32 = quotientUpper32 | quotientLower32 << 0x10;\n      }\n      quotientLower32 = dividendUpper32 / shiftCount;\n      divisorQuotient2 = temp7 * quotientLower32;\n      divisorRemainder = dividend >> 0x10 | (dividendUpper32 - shiftCount * quotientLower32) * 0x10000;\n      divisorQuotient = quotientLower32;\n      if (divisorRemainder <= divisorQuotient2 && divisorQuotient2 - divisorRemainder != 0) {\n        carryFlag = CARRY4(divisorRemainder,divisorLower16);\n        divisorRemainder = divisorRemainder + divisorLower16;\n        divisorQuotient = quotientLower32 - 1;\n        if ((carryFlag == false) && (divisorRemainder <= divisorQuotient2 && divisorQuotient2 - divisorRemainder != 0)) {\n          divisorQuotient = quotientLower32 - 2;\n          divisorRemainder = divisorRemainder + divisorLower16;\n        }\n      }\n      remainderLower32 = (divisorRemainder - divisorQuotient2) / shiftCount;\n      temp7 = temp7 * remainderLower32;\n      shiftCount = dividend & 0xffff | ((divisorRemainder - divisorQuotient2) - shiftCount * remainderLower32) * 0x10000;\n      quotientLower32 = remainderLower32;\n      if (shiftCount <= temp7 && temp7 - shiftCount != 0) {\n        quotientLower32 = remainderLower32 - 1;\n        if ((CARRY4(shiftCount,divisorLower16) == false) &&\n           (shiftCount + divisorLower16 <= temp7 && temp7 - (shiftCount + divisorLower16) != 0)) {\n          quotientLower32 = remainderLower32 - 2;\n        }\n      }\n      quotientLower32 = quotientLower32 | divisorQuotient << 0x10;\n    }\n  }\n  else if (dividendUpper32 < divisorUpper16) {\n    quotientUpper32 = 0;\n    quotientLower32 = 0;\n  }\n  else {\n    bitLength = LZCOUNT(divisorUpper16);\n    if (bitLength == 0) {\n      if ((divisorUpper16 < dividendUpper32) || (divisorLower16 <= dividend)) {\n        quotientUpper32 = 0;\n        quotientLower32 = 1;\n      }\n      else {\n        quotientLower32 = 0;\n        quotientUpper32 = 0;\n      }\n    }\n    else {\n      quotientUpper32 = 0x20 - bitLength;\n      shiftCount = dividendUpper32 >> (quotientUpper32 & 0xff);\n      temp7 = divisorLower16 >> (quotientUpper32 & 0xff) | divisorUpper16 << bitLength;\n      divisorQuotient2 = temp7 >> 0x10;\n      quotientLower32 = shiftCount / divisorQuotient2;\n      divisorRemainder = (temp7 & 0xffff) * quotientLower32;\n      divisorQuotient = dividendUpper32 << bitLength | dividend >> (quotientUpper32 & 0xff);\n      shiftCount = divisorQuotient >> 0x10 | (shiftCount - divisorQuotient2 * quotientLower32) * 0x10000;\n      quotientUpper32 = quotientLower32;\n      if (shiftCount <= divisorRemainder && divisorRemainder - shiftCount != 0) {\n        carryFlag = CARRY4(shiftCount,temp7);\n        shiftCount = shiftCount + temp7;\n        quotientUpper32 = quotientLower32 - 1;\n        if ((carryFlag == false) && (shiftCount <= divisorRemainder && divisorRemainder - shiftCount != 0)) {\n          quotientUpper32 = quotientLower32 - 2;\n          shiftCount = shiftCount + temp7;\n        }\n      }\n      remainderLower32 = (shiftCount - divisorRemainder) / divisorQuotient2;\n      divisorRemainder2 = (temp7 & 0xffff) * remainderLower32;\n      shiftCount = divisorQuotient & 0xffff | ((shiftCount - divisorRemainder) - divisorQuotient2 * remainderLower32) * 0x10000;\n      quotientLower32 = remainderLower32;\n      if (shiftCount <= divisorRemainder2 && divisorRemainder2 - shiftCount != 0) {\n        carryFlag = CARRY4(shiftCount,temp7);\n        shiftCount = shiftCount + temp7;\n        quotientLower32 = remainderLower32 - 1;\n        if ((carryFlag == false) && (shiftCount <= divisorRemainder2 && divisorRemainder2 - shiftCount != 0)) {\n          quotientLower32 = remainderLower32 - 2;\n          shiftCount = shiftCount + temp7;\n        }\n      }\n      quotientLower32 = quotientLower32 | quotientUpper32 << 0x10;\n      product = (ulonglong)quotientLower32 * (ulonglong)(divisorLower16 << bitLength);\n      divisorQuotient = (uint)((ulonglong)product >> 0x20);\n      quotientUpper32 = 0;\n      if ((shiftCount - divisorRemainder2 < divisorQuotient) ||\n         ((shiftCount - divisorRemainder2 == divisorQuotient && (dividend << bitLength < (uint)product)))) {\n        quotientLower32 = quotientLower32 - 1;\n        quotientUpper32 = 0;\n      }\n    }\n  }\n  if (isDivisorNegative != 0) {\n    carryFlag = quotientLower32 != 0;\n    quotientLower32 = -quotientLower32;\n    quotientUpper32 = -quotientUpper32 - (uint)carryFlag;\n  }\n  return CONCAT44(quotientUpper32,quotientLower32);\n}\n\n",
            "renaming": {
                "FUN_000847e0": "divide_unsigned_integers_000847e0",
                "param_1": "dividend",
                "param_2": "dividendUpper32",
                "param_3": "divisorLower16",
                "param_4": "divisorUpper16",
                "lVar1": "product",
                "uVar2": "quotientLower32",
                "uVar3": "quotientUpper32",
                "uVar4": "shiftCount",
                "uVar5": "remainderLower32",
                "uVar7": "divisorQuotient",
                "uVar8": "divisorRemainder",
                "uVar9": "isDivisorNegative",
                "uVar10": "divisorQuotient2",
                "uVar11": "divisorRemainder2",
                "uVar12": "temp7",
                "bVar13": "carryFlag",
                "iVar6": "bitLength"
            },
            "calling": [
                "FUN_0008477c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084a80": {
            "entrypoint": "0x00084a80",
            "current_name": "div_and_modulo_00084a80",
            "code": "\nulonglong divAndModulo_00084a80(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong result;\n  uint dividend_divisor_high;\n  uint dividend_divisor_low;\n  uint quotient_high;\n  uint quotient_low;\n  uint temp_high;\n  uint temp_low;\n  uint temp;\n  uint temp_quotient_low;\n  int num_of_leading_zeros;\n  bool has_carry;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      num_of_leading_zeros = LZCOUNT(quotient);\n      if (num_of_leading_zeros == 0) {\n        divisor = divisor - quotient;\n        dividend_divisor_low = quotient >> 0x10;\n        quotient_low = quotient & 0xffff;\n        dividend_divisor_high = 1;\n      }\n      else {\n        quotient = quotient << num_of_leading_zeros;\n        temp = divisor >> (0x20U - num_of_leading_zeros & 0xff);\n        dividend_divisor_low = quotient >> 0x10;\n        temp_quotient_low = temp / dividend_divisor_low;\n        quotient_low = quotient & 0xffff;\n        dividend_divisor_high = quotient_low * temp_quotient_low;\n        temp_high = dividend >> (0x20U - num_of_leading_zeros & 0xff) | divisor << num_of_leading_zeros;\n        quotient_high = temp_high >> 0x10 | (temp - dividend_divisor_low * temp_quotient_low) * 0x10000;\n        dividend = dividend << num_of_leading_zeros;\n        temp = temp_quotient_low;\n        if (quotient_high <= dividend_divisor_high && dividend_divisor_high - quotient_high != 0) {\n          has_carry = CARRY4(quotient_high,quotient);\n          quotient_high = quotient_high + quotient;\n          temp = temp_quotient_low - 1;\n          if ((has_carry == false) && (quotient_high <= dividend_divisor_high && dividend_divisor_high - quotient_high != 0)) {\n            temp = temp_quotient_low - 2;\n            quotient_high = quotient_high + quotient;\n          }\n        }\n        temp_low = (quotient_high - dividend_divisor_high) / dividend_divisor_low;\n        temp_quotient_low = quotient_low * temp_low;\n        divisor = temp_high & 0xffff | ((quotient_high - dividend_divisor_high) - dividend_divisor_low * temp_low) * 0x10000;\n        dividend_divisor_high = temp_low;\n        if (divisor <= temp_quotient_low && temp_quotient_low - divisor != 0) {\n          has_carry = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          dividend_divisor_high = temp_low - 1;\n          if ((has_carry == false) && (divisor <= temp_quotient_low && temp_quotient_low - divisor != 0)) {\n            dividend_divisor_high = temp_low - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - temp_quotient_low;\n        dividend_divisor_high = dividend_divisor_high | temp << 0x10;\n      }\n      temp_quotient_low = divisor / dividend_divisor_low;\n      quotient_high = quotient_low * temp_quotient_low;\n      temp_high = dividend >> 0x10 | (divisor - dividend_divisor_low * temp_quotient_low) * 0x10000;\n      temp = temp_quotient_low;\n      if (temp_high <= quotient_high && quotient_high - temp_high != 0) {\n        has_carry = CARRY4(temp_high,quotient);\n        temp_high = temp_high + quotient;\n        temp = temp_quotient_low - 1;\n        if ((has_carry == false) && (temp_high <= quotient_high && quotient_high - temp_high != 0)) {\n          temp = temp_quotient_low - 2;\n          temp_high = temp_high + quotient;\n        }\n      }\n      temp_quotient_low = (temp_high - quotient_high) / dividend_divisor_low;\n      quotient_low = quotient_low * temp_quotient_low;\n      temp_high = dividend & 0xffff | ((temp_high - quotient_high) - dividend_divisor_low * temp_quotient_low) * 0x10000;\n      dividend_divisor_low = temp_quotient_low;\n      if (temp_high <= quotient_low && quotient_low - temp_high != 0) {\n        dividend_divisor_low = temp_quotient_low - 1;\n        if ((CARRY4(temp_high,quotient) == false) &&\n           (temp_high + quotient <= quotient_low && quotient_low - (temp_high + quotient) != 0)) {\n          dividend_divisor_low = temp_quotient_low - 2;\n        }\n      }\n      return CONCAT44(dividend_divisor_high,dividend_divisor_low | temp << 0x10);\n    }\n    num_of_leading_zeros = LZCOUNT(quotient);\n    if (num_of_leading_zeros != 0) {\n      temp = dividend >> (0x20U - num_of_leading_zeros & 0xff);\n      quotient = quotient << num_of_leading_zeros;\n      dividend = dividend << num_of_leading_zeros;\n      divisor = temp | divisor << num_of_leading_zeros;\n    }\n    dividend_divisor_high = quotient >> 0x10;\n    dividend_divisor_low = divisor / dividend_divisor_high;\n    quotient_low = (quotient & 0xffff) * dividend_divisor_low;\n    temp_quotient_low = dividend >> 0x10 | (divisor - dividend_divisor_high * dividend_divisor_low) * 0x10000;\n    temp = dividend_divisor_low;\n    if (temp_quotient_low <= quotient_low && quotient_low - temp_quotient_low != 0) {\n      has_carry = CARRY4(temp_quotient_low,quotient);\n      temp_quotient_low = temp_quotient_low + quotient;\n      temp = dividend_divisor_low - 1;\n      if ((has_carry == false) && (temp_quotient_low <= quotient_low && quotient_low - temp_quotient_low != 0)) {\n        temp = dividend_divisor_low - 2;\n        temp_quotient_low = temp_quotient_low + quotient;\n      }\n    }\n    temp_high = (temp_quotient_low - quotient_low) / dividend_divisor_high;\n    dividend_divisor_low = (quotient & 0xffff) * temp_high;\n    quotient_low = dividend & 0xffff | ((temp_quotient_low - quotient_low) - dividend_divisor_high * temp_high) * 0x10000;\n    dividend_divisor_high = temp_high;\n    if (quotient_low <= dividend_divisor_low && dividend_divisor_low - quotient_low != 0) {\n      dividend_divisor_high = temp_high - 1;\n      if ((CARRY4(quotient_low,quotient) == false) &&\n         (quotient_low + quotient <= dividend_divisor_low && dividend_divisor_low - (quotient_low + quotient) != 0)) {\n        dividend_divisor_high = temp_high - 2;\n      }\n    }\n    dividend_divisor_high = dividend_divisor_high | temp << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    num_of_leading_zeros = LZCOUNT(remainder);\n    if (num_of_leading_zeros == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      dividend_divisor_high = 0;\n    }\n    else {\n      dividend_divisor_high = 0x20 - num_of_leading_zeros;\n      temp = divisor >> (dividend_divisor_high & 0xff);\n      dividend_divisor_low = remainder << num_of_leading_zeros | quotient >> (dividend_divisor_high & 0xff);\n      quotient_low = dividend_divisor_low >> 0x10;\n      quotient_high = temp / quotient_low;\n      temp_quotient_low = (dividend_divisor_low & 0xffff) * quotient_high;\n      temp_high = dividend >> (dividend_divisor_high & 0xff) | divisor << num_of_leading_zeros;\n      dividend_divisor_high = temp_high >> 0x10 | (temp - quotient_low * quotient_high) * 0x10000;\n      temp = quotient_high;\n      if (dividend_divisor_high <= temp_quotient_low && temp_quotient_low - dividend_divisor_high != 0) {\n        has_carry = CARRY4(dividend_divisor_high,dividend_divisor_low);\n        dividend_divisor_high = dividend_divisor_high + dividend_divisor_low;\n        temp = quotient_high - 1;\n        if ((has_carry == false) && (dividend_divisor_high <= temp_quotient_low && temp_quotient_low - dividend_divisor_high != 0)) {\n          temp = quotient_high - 2;\n          dividend_divisor_high = dividend_divisor_high + dividend_divisor_low;\n        }\n      }\n      quotient_high = (dividend_divisor_high - temp_quotient_low) / quotient_low;\n      temp_low = (dividend_divisor_low & 0xffff) * quotient_high;\n      quotient_low = temp_high & 0xffff | ((dividend_divisor_high - temp_quotient_low) - quotient_low * quotient_high) * 0x10000;\n      dividend_divisor_high = quotient_high;\n      if (quotient_low <= temp_low && temp_low - quotient_low != 0) {\n        has_carry = CARRY4(quotient_low,dividend_divisor_low);\n        quotient_low = quotient_low + dividend_divisor_low;\n        dividend_divisor_high = quotient_high - 1;\n        if ((has_carry == false) && (quotient_low <= temp_low && temp_low - quotient_low != 0)) {\n          dividend_divisor_high = quotient_high - 2;\n          quotient_low = quotient_low + dividend_divisor_low;\n        }\n      }\n      dividend_divisor_high = dividend_divisor_high | temp << 0x10;\n      result = (ulonglong)dividend_divisor_high * (ulonglong)(quotient << num_of_leading_zeros);\n      temp = (uint)((ulonglong)result >> 0x20);\n      if ((quotient_low - temp_low < temp) || ((quotient_low - temp_low == temp && (dividend << num_of_leading_zeros < (uint)result)))\n         ) {\n        dividend_divisor_high = dividend_divisor_high - 1;\n      }\n    }\n  }\n  return (ulonglong)dividend_divisor_high;\n}\n\n",
            "renaming": {
                "FUN_00084a80": "div_and_modulo_00084a80",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "result",
                "uVar2": "dividend_divisor_high",
                "uVar3": "dividend_divisor_low",
                "uVar4": "quotient_high",
                "uVar5": "quotient_low",
                "uVar6": "temp_high",
                "uVar7": "temp_low",
                "uVar8": "temp",
                "uVar9": "temp_quotient_low",
                "bVar11": "has_carry",
                "iVar10": "num_of_leading_zeros"
            },
            "calling": [
                "FUN_000847ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085858": {
            "entrypoint": "0x00085858",
            "current_name": "FUNC_00085858",
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 93024,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_0008021c",
            "FUN_00080258",
            "FUN_000802da",
            "FUN_000803d4",
            "FUN_00080410",
            "FUN_0008043e",
            "FUN_000804a8",
            "FUN_000805d0",
            "FUN_00080a68",
            "FUN_00080ae4",
            "FUN_00080c0c",
            "FUN_00080ce0",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080da0",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "thunk_FUN_00081714",
            "FUN_00081210",
            "FUN_00081318",
            "FUN_00081388",
            "FUN_000813a8",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_000815f8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081622",
            "FUN_0008163a",
            "FUN_0008165c",
            "FUN_00081682",
            "FUN_000816a8",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081c54",
            "FUN_00081c5c",
            "FUN_00081c94",
            "FUN_00081ca8",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_00081df4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_000825a0",
            "FUN_000825b0",
            "FUN_00082970",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00082ac0",
            "FUN_00082b38",
            "FUN_0008378c",
            "FUN_00083808",
            "FUN_00083974",
            "FUN_00083adc",
            "FUN_00083b14",
            "FUN_00083c40",
            "FUN_00083d00",
            "FUN_00083d9c",
            "FUN_00083f34",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_000842a4",
            "FUN_00084384",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_000844c4",
            "FUN_0008456c",
            "FUN_000845bc",
            "FUN_000846a4",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_00084750",
            "FUN_0008477c",
            "FUN_000847ac",
            "FUN_000847e0",
            "FUN_00084a80"
        ]
    ],
    "locked_functions": []
}